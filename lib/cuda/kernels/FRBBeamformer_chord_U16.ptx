// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3856[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<318>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<3822>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<362>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r395, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd35, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r404, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r404, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd36, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r396, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r405, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r406, %r405, %r2;
	add.s32 	%r407, %r406, %r4;
	mul.wide.u32 	%rd43, %r407, 4;
	add.s64 	%rd6, %rd36, %rd43;
	mov.u32 	%r408, 1;
	st.global.u32 	[%rd6], %r408;
	setp.gt.u32 	%p4, %r396, 2047;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r397, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r397, %r396;
	setp.gt.s32 	%p6, %r397, 4095;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r398, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r397, %r396;
	mad.lo.s32 	%r409, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r410, %r409, %r409, 4;
	setp.gt.u32 	%p8, %r410, 89478484;
	setp.gt.u32 	%p9, %r398, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r399, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r399, %r398;
	setp.lt.s32 	%p12, %r399, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r411, %r399, %r398;
	mul.hi.s32 	%r412, %r5, 715827883;
	shr.u32 	%r413, %r412, 31;
	shr.s32 	%r414, %r412, 1;
	add.s32 	%r415, %r414, %r413;
	setp.eq.s32 	%p14, %r411, %r415;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r400, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r400, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r401, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r401, %r400;
	setp.gt.s32 	%p17, %r401, 128;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r402, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r401, %r400;
	and.b32  	%r416, %r6, 15;
	setp.ne.s32 	%p19, %r416, 0;
	setp.lt.s32 	%p20, %r402, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r403, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r403, %r402;
	setp.gt.s32 	%p23, %r403, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r417, %r403, %r402;
	and.b32  	%r418, %r417, 15;
	setp.eq.s32 	%p25, %r418, 0;
	setp.eq.s32 	%p26, %r417, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_13;
$L__BB0_198:                            // %pass162
	and.b32  	%r258, %r2, 3;
	shr.u32 	%r259, %r2, 2;
	mul.lo.s32 	%r419, %r258, %r259;
	and.b32  	%r420, %r419, 7;
	cvt.rn.f32.s32 	%f201, %r420;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p317, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_210;
// %bb.199:
	@%p317 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_200;
$L__BB0_206:
	mov.b32 	%r261, %f785;
	and.b32  	%r421, %r261, 8388607;
	or.b32  	%r3817, %r421, 1065353216;
	mov.b32 	%f780, %r3817;
	add.s32 	%r422, %r261, -1073741824;
	and.b32  	%r3818, %r422, -8388608;
	setp.eq.s32 	%p35, %r3818, 0;
	@%p35 bra 	$L__BB0_209;
// %bb.207:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_208:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r423, %r3818, 192937984;
	add.s32 	%r424, %r3817, %r423;
	mov.b32 	%f213, %r424;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3818, %r3818, %r423;
	mov.b32 	%r3817, %f780;
	setp.ne.s32 	%p36, %r3818, 0;
	setp.ne.s32 	%p37, %r3817, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_208;
$L__BB0_209:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r261, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_210;
$L__BB0_200:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r260, %f172;
	setp.lt.u32 	%p30, %r260, 1073741824;
	@%p30 bra 	$L__BB0_205;
// %bb.201:
	setp.lt.u32 	%p31, %r260, -2147483647;
	@%p31 bra 	$L__BB0_203;
// %bb.202:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_205;
$L__BB0_203:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_205;
// %bb.204:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_205:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_210:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r425, %f169;
	and.b32  	%r268, %r425, -2147483648;
	@%p40 bra 	$L__BB0_212;
// %bb.211:
	mov.b32 	%r426, %f781;
	or.b32  	%r427, %r268, %r426;
	mov.b32 	%f781, %r427;
$L__BB0_212:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r271, %r2, 1;
	and.b32  	%r272, %r271, 6;
	or.b32  	%r273, %r272, 1;
	setp.eq.s32 	%p48, %r272, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3714, %r272, %r259;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L487
	cvt.u16.u32 	%rs1, %r3714;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r443, %r8, 8388607;
	or.b32  	%r3718, %r443, 1065353216;
	mov.b32 	%f732, %r3718;
	add.s32 	%r444, %r8, -1073741824;
	and.b32  	%r3719, %r444, -8388608;
	setp.eq.s32 	%p56, %r3719, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i1020.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i1020
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r445, %r3719, 192937984;
	add.s32 	%r446, %r3718, %r445;
	mov.b32 	%f267, %r446;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3719, %r3719, %r445;
	mov.b32 	%r3718, %f732;
	setp.ne.s32 	%p57, %r3719, 0;
	setp.ne.s32 	%p58, %r3718, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i1022
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i999
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i1003
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i1006
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i1025
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r447, %f1;
	and.b32  	%r448, %r447, -2147483648;
	mov.b32 	%r449, %f733;
	or.b32  	%r450, %r448, %r449;
	mov.b32 	%f733, %r450;
$L__BB0_28:                             // %__nv_fmodf.exit1026
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r451, %f277;
	and.b32  	%r452, %r451, -2147483648;
	or.b32  	%r453, %r452, 1056964608;
	mov.b32 	%f278, %r453;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r454, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r455, %r454, 1;
	setp.eq.b32 	%p64, %r455, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r456, %r454, 2;
	setp.eq.s32 	%p65, %r456, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r457, %r454, 1;
	and.b32  	%r458, %r457, 2;
	setp.eq.s32 	%p66, %r458, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L521
	setp.gt.u32 	%p69, %r273, 5;
	mul.lo.s32 	%r3715, %r273, %r259;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L525
	mul.hi.u32 	%r460, %r3715, -1431655765;
	shr.u32 	%r461, %r460, 5;
	mul.lo.s32 	%r462, %r461, 48;
	sub.s32 	%r463, %r3715, %r462;
	cvt.rn.f32.s32 	%f308, %r463;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r464, %r16, 8388607;
	or.b32  	%r3720, %r464, 1065353216;
	mov.b32 	%f738, %r3720;
	add.s32 	%r465, %r16, -1073741824;
	and.b32  	%r3721, %r465, -8388608;
	setp.eq.s32 	%p77, %r3721, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1051.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1051
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r466, %r3721, 192937984;
	add.s32 	%r467, %r3720, %r466;
	mov.b32 	%f320, %r467;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3721, %r3721, %r466;
	mov.b32 	%r3720, %f738;
	setp.ne.s32 	%p78, %r3721, 0;
	setp.ne.s32 	%p79, %r3720, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1053
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i1030
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i1034
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1037
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1056
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r468, %f22;
	and.b32  	%r469, %r468, -2147483648;
	mov.b32 	%r470, %f739;
	or.b32  	%r471, %r469, %r470;
	mov.b32 	%f739, %r471;
$L__BB0_44:                             // %__nv_fmodf.exit1057
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r472, %f330;
	and.b32  	%r473, %r472, -2147483648;
	or.b32  	%r474, %r473, 1056964608;
	mov.b32 	%f331, %r474;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r475, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r476, %r475, 1;
	setp.eq.b32 	%p85, %r476, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r477, %r475, 2;
	setp.eq.s32 	%p86, %r477, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r478, %r475, 1;
	and.b32  	%r479, %r478, 2;
	setp.eq.s32 	%p87, %r479, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L559
	setp.gt.u32 	%p91, %r2, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L597
	cvt.u16.u32 	%rs8, %r3714;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r487, %r26, 8388607;
	or.b32  	%r3722, %r487, 1065353216;
	mov.b32 	%f744, %r3722;
	add.s32 	%r488, %r26, -1073741824;
	and.b32  	%r3723, %r488, -8388608;
	setp.eq.s32 	%p99, %r3723, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1082.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1082
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r489, %r3723, 192937984;
	add.s32 	%r490, %r3722, %r489;
	mov.b32 	%f373, %r490;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3723, %r3723, %r489;
	mov.b32 	%r3722, %f744;
	setp.ne.s32 	%p100, %r3723, 0;
	setp.ne.s32 	%p101, %r3722, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1084
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1061
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1065
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1068
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1087
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r491, %f43;
	and.b32  	%r492, %r491, -2147483648;
	mov.b32 	%r493, %f745;
	or.b32  	%r494, %r492, %r493;
	mov.b32 	%f745, %r494;
$L__BB0_60:                             // %__nv_fmodf.exit1088
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r495, %f383;
	and.b32  	%r496, %r495, -2147483648;
	or.b32  	%r497, %r496, 1056964608;
	mov.b32 	%f384, %r497;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r498, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r499, %r498, 1;
	setp.eq.b32 	%p107, %r499, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r500, %r498, 2;
	setp.eq.s32 	%p108, %r500, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r501, %r498, 1;
	and.b32  	%r502, %r501, 2;
	setp.eq.s32 	%p109, %r502, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L631
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L639
	mul.hi.u32 	%r504, %r3715, -1431655765;
	shr.u32 	%r505, %r504, 2;
	mul.lo.s32 	%r506, %r505, 6;
	sub.s32 	%r507, %r3715, %r506;
	cvt.rn.f32.s32 	%f414, %r507;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r508, %r34, 8388607;
	or.b32  	%r3724, %r508, 1065353216;
	mov.b32 	%f750, %r3724;
	add.s32 	%r509, %r34, -1073741824;
	and.b32  	%r3725, %r509, -8388608;
	setp.eq.s32 	%p121, %r3725, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1113.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1113
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r510, %r3725, 192937984;
	add.s32 	%r511, %r3724, %r510;
	mov.b32 	%f426, %r511;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3725, %r3725, %r510;
	mov.b32 	%r3724, %f750;
	setp.ne.s32 	%p122, %r3725, 0;
	setp.ne.s32 	%p123, %r3724, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1115
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1092
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1096
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1099
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1118
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r512, %f64;
	and.b32  	%r513, %r512, -2147483648;
	mov.b32 	%r514, %f751;
	or.b32  	%r515, %r513, %r514;
	mov.b32 	%f751, %r515;
$L__BB0_76:                             // %__nv_fmodf.exit1119
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r516, %f436;
	and.b32  	%r517, %r516, -2147483648;
	or.b32  	%r518, %r517, 1056964608;
	mov.b32 	%f437, %r518;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r519, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r520, %r519, 1;
	setp.eq.b32 	%p129, %r520, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r521, %r519, 2;
	setp.eq.s32 	%p130, %r521, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r522, %r519, 1;
	and.b32  	%r523, %r522, 2;
	setp.eq.s32 	%p131, %r523, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L673
	@%p28 bra 	$L__BB0_220;
// %bb.78:
	@%p317 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_79;
$L__BB0_216:
	mov.b32 	%r275, %f785;
	and.b32  	%r536, %r275, 8388607;
	or.b32  	%r3819, %r536, 1065353216;
	mov.b32 	%f784, %r3819;
	add.s32 	%r537, %r275, -1073741824;
	and.b32  	%r3820, %r537, -8388608;
	setp.eq.s32 	%p141, %r3820, 0;
	@%p141 bra 	$L__BB0_219;
// %bb.217:                             // %__nv_fmaf_rn.exit4.i.i.i1144.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_218:                            // %__nv_fmaf_rn.exit4.i.i.i1144
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r538, %r3820, 192937984;
	add.s32 	%r539, %r3819, %r538;
	mov.b32 	%f476, %r539;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3820, %r3820, %r538;
	mov.b32 	%r3819, %f784;
	setp.ne.s32 	%p142, %r3820, 0;
	setp.ne.s32 	%p143, %r3819, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_218;
$L__BB0_219:                            // %__internal_fmodf_slowpath_mod.exit.i.i1146
	setp.gt.u32 	%p145, %r275, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_220;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1123
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r274, %f187;
	setp.lt.u32 	%p136, %r274, 1073741824;
	@%p136 bra 	$L__BB0_215;
// %bb.80:
	setp.lt.u32 	%p137, %r274, -2147483647;
	@%p137 bra 	$L__BB0_213;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_215;
$L__BB0_213:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_215;
// %bb.214:                             // %__nv_fmaf_rn.exit.i.i.i1127
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_215:                            // %__internal_fmodf_fastpath_quot.exit.i.i1130
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_220:                            // %__internal_fmodf_kernel.exit.i1149
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_222;
// %bb.221:
	mov.b32 	%r540, %f785;
	or.b32  	%r541, %r268, %r540;
	mov.b32 	%f785, %r541;
$L__BB0_222:                            // %__nv_fmodf.exit1150
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L775
	cvt.u16.u32 	%rs15, %r3714;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r557, %r46, 8388607;
	or.b32  	%r3726, %r557, 1065353216;
	mov.b32 	%f756, %r3726;
	add.s32 	%r558, %r46, -1073741824;
	and.b32  	%r3727, %r558, -8388608;
	setp.eq.s32 	%p162, %r3727, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1175.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1175
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r559, %r3727, 192937984;
	add.s32 	%r560, %r3726, %r559;
	mov.b32 	%f530, %r560;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3727, %r3727, %r559;
	mov.b32 	%r3726, %f756;
	setp.ne.s32 	%p163, %r3727, 0;
	setp.ne.s32 	%p164, %r3726, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1177
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1154
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1158
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1161
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1180
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r561, %f85;
	and.b32  	%r562, %r561, -2147483648;
	mov.b32 	%r563, %f757;
	or.b32  	%r564, %r562, %r563;
	mov.b32 	%f757, %r564;
$L__BB0_96:                             // %__nv_fmodf.exit1181
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r565, %f540;
	and.b32  	%r566, %r565, -2147483648;
	or.b32  	%r567, %r566, 1056964608;
	mov.b32 	%f541, %r567;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r568, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r569, %r568, 1;
	setp.eq.b32 	%p170, %r569, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r570, %r568, 2;
	setp.eq.s32 	%p171, %r570, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r571, %r568, 1;
	and.b32  	%r572, %r571, 2;
	setp.eq.s32 	%p172, %r572, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L813
	mul.hi.u32 	%r574, %r3715, -1431655765;
	shr.u32 	%r575, %r574, 5;
	mul.lo.s32 	%r576, %r575, 48;
	sub.s32 	%r577, %r3715, %r576;
	cvt.rn.f32.s32 	%f571, %r577;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r578, %r54, 8388607;
	or.b32  	%r3728, %r578, 1065353216;
	mov.b32 	%f762, %r3728;
	add.s32 	%r579, %r54, -1073741824;
	and.b32  	%r3729, %r579, -8388608;
	setp.eq.s32 	%p183, %r3729, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1206.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1206
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r580, %r3729, 192937984;
	add.s32 	%r581, %r3728, %r580;
	mov.b32 	%f583, %r581;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3729, %r3729, %r580;
	mov.b32 	%r3728, %f762;
	setp.ne.s32 	%p184, %r3729, 0;
	setp.ne.s32 	%p185, %r3728, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1208
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1185
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1189
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1192
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1211
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r582, %f106;
	and.b32  	%r583, %r582, -2147483648;
	mov.b32 	%r584, %f763;
	or.b32  	%r585, %r583, %r584;
	mov.b32 	%f763, %r585;
$L__BB0_112:                            // %__nv_fmodf.exit1212
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r586, %f593;
	and.b32  	%r587, %r586, -2147483648;
	or.b32  	%r588, %r587, 1056964608;
	mov.b32 	%f594, %r588;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r589, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r590, %r589, 1;
	setp.eq.b32 	%p191, %r590, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r591, %r589, 2;
	setp.eq.s32 	%p192, %r591, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r592, %r589, 1;
	and.b32  	%r593, %r592, 2;
	setp.eq.s32 	%p193, %r593, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L885
	cvt.u16.u32 	%rs22, %r3714;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r601, %r64, 8388607;
	or.b32  	%r3730, %r601, 1065353216;
	mov.b32 	%f768, %r3730;
	add.s32 	%r602, %r64, -1073741824;
	and.b32  	%r3731, %r602, -8388608;
	setp.eq.s32 	%p203, %r3731, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1237.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1237
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r603, %r3731, 192937984;
	add.s32 	%r604, %r3730, %r603;
	mov.b32 	%f636, %r604;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3731, %r3731, %r603;
	mov.b32 	%r3730, %f768;
	setp.ne.s32 	%p204, %r3731, 0;
	setp.ne.s32 	%p205, %r3730, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1239
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1216
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1220
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1223
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1242
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r605, %f127;
	and.b32  	%r606, %r605, -2147483648;
	mov.b32 	%r607, %f769;
	or.b32  	%r608, %r606, %r607;
	mov.b32 	%f769, %r608;
$L__BB0_128:                            // %__nv_fmodf.exit1243
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r609, %f646;
	and.b32  	%r610, %r609, -2147483648;
	or.b32  	%r611, %r610, 1056964608;
	mov.b32 	%f647, %r611;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r612, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r613, %r612, 1;
	setp.eq.b32 	%p211, %r613, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r614, %r612, 2;
	setp.eq.s32 	%p212, %r614, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r615, %r612, 1;
	and.b32  	%r616, %r615, 2;
	setp.eq.s32 	%p213, %r616, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L927
	mul.hi.u32 	%r618, %r3715, -1431655765;
	shr.u32 	%r619, %r618, 2;
	mul.lo.s32 	%r620, %r619, 6;
	sub.s32 	%r621, %r3715, %r620;
	cvt.rn.f32.s32 	%f677, %r621;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r622, %r72, 8388607;
	or.b32  	%r3732, %r622, 1065353216;
	mov.b32 	%f774, %r3732;
	add.s32 	%r623, %r72, -1073741824;
	and.b32  	%r3733, %r623, -8388608;
	setp.eq.s32 	%p223, %r3733, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1268.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1268
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r624, %r3733, 192937984;
	add.s32 	%r625, %r3732, %r624;
	mov.b32 	%f689, %r625;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3733, %r3733, %r624;
	mov.b32 	%r3732, %f774;
	setp.ne.s32 	%p224, %r3733, 0;
	setp.ne.s32 	%p225, %r3732, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1270
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1247
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1251
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1254
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1273
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r626, %f148;
	and.b32  	%r627, %r626, -2147483648;
	mov.b32 	%r628, %f775;
	or.b32  	%r629, %r627, %r628;
	mov.b32 	%f775, %r629;
$L__BB0_144:                            // %__nv_fmodf.exit1274
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r630, %f699;
	and.b32  	%r631, %r630, -2147483648;
	or.b32  	%r632, %r631, 1056964608;
	mov.b32 	%f700, %r632;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r633, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r634, %r633, 1;
	setp.eq.b32 	%p231, %r634, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r635, %r633, 2;
	setp.eq.s32 	%p232, %r635, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r636, %r633, 1;
	and.b32  	%r637, %r636, 2;
	setp.eq.s32 	%p233, %r637, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L961
	mov.u32 	%r284, 999999999;
	cvt.u16.u32 	%rs247, %r2;
	@%p91 bra 	$L__BB0_224;
// %bb.146:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs247, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs247, %rs33;
	cvt.u32.u16 	%r651, %rs34;
	and.b32  	%r652, %r651, 255;
	mad.lo.s32 	%r653, %r652, 24, %r3;
	cvt.u16.u32 	%rs35, %r653;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r654, %rs39;
	mul.wide.u32 	%rd44, %r654, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.global.u32 	%r655, [%rd45];
	shl.b32 	%r656, %r655, 16;
	cvt.s32.s16 	%r83, %r655;
	shr.s32 	%r84, %r655, 16;
	or.b32  	%r657, %r656, 65535;
	setp.lt.u32 	%p237, %r657, 1638399;
	setp.lt.u32 	%p238, %r655, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_147;
$L__BB0_223:                            // %L1237
	mul.lo.s32 	%r661, %r84, 801;
	mad.lo.s32 	%r284, %r83, 33, %r661;
$L__BB0_224:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r434, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r435, %r434, -2147483648;
	mov.b32 	%r548, %f487;
	or.b32  	%r436, %r435, 1056964608;
	and.b32  	%r549, %r548, -2147483648;
	mov.b32 	%f225, %r436;
	or.b32  	%r550, %r549, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r550;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r437, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r438, %r437, 1;
	cvt.rzi.s32.f32 	%r551, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r438, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r552, %r551, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r439, %r437, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r552, 1;
	setp.eq.s32 	%p44, %r439, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r440, %r437, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r553, %r551, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r441, %r440, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r553, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r554, %r551, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r441, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r555, %r554, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r555, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r430, %f254;
	mov.b32 	%r433, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r429, %r433, -2147483648;
	mov.b32 	%r525, %f62;
	mov.b32 	%r526, %f83;
	mov.b32 	%r531, %f63;
	mov.b32 	%r532, %f84;
	mov.b32 	%r544, %f517;
	mov.b32 	%r547, %f514;
	mov.b32 	%r481, %f20;
	mov.b32 	%r482, %f41;
	mov.b32 	%r484, %f21;
	mov.b32 	%r485, %f42;
	xor.b32  	%r528, %r531, -2147483648;
	xor.b32  	%r529, %r532, -2147483648;
	xor.b32  	%r543, %r547, -2147483648;
	mov.b32 	%r595, %f104;
	mov.b32 	%r596, %f125;
	mov.b32 	%r598, %f105;
	mov.b32 	%r599, %f126;
	mov.b32 	%r639, %f146;
	mov.b32 	%r640, %f167;
	mov.b32 	%r645, %f147;
	xor.b32  	%r642, %r645, -2147483648;
	mov.b32 	%r646, %f168;
	xor.b32  	%r643, %r646, -2147483648;
	and.b32  	%r662, %r2, 24;
	setp.ne.s32 	%p240, %r662, 24;
	cvt.u16.u32 	%rs248, %r259;
	mul.lo.s32 	%r3734, %r1, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.225:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs47, %rs248, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs248, %rs49;
	cvt.u32.u16 	%r674, %rs50;
	and.b32  	%r3735, %r674, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass518
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r663, %r258, 144;
	mul.lo.s16 	%rs41, %rs248, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs248, %rs43;
	cvt.u32.u16 	%r664, %rs44;
	and.b32  	%r3735, %r664, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r665, %rs45, 24;
	or.b32  	%r666, %r3734, %r3;
	add.s32 	%r667, %r666, %r663;
	add.s32 	%r668, %r667, %r665;
	mul.wide.u32 	%rd51, %r668, 4;
	add.s64 	%rd52, %rd2, %rd51;
	ld.global.u32 	%r88, [%rd52];
	or.b32  	%r669, %r3, 576;
	add.s32 	%r670, %r669, %r3734;
	add.s32 	%r671, %r670, %r663;
	add.s32 	%r672, %r671, %r665;
	mul.wide.u32 	%rd53, %r672, 4;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.u32 	%r89, [%rd54];
$L__BB0_149:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r430;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r480, %r482, %r481;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r483, %r485, %r484;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r524, %r526, %r525;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r527, %r529, %r528;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r530, %r532, %r531;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r533, %r526, %r525;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r542, %r544, %r543;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r545, %r547, %r544;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r594, %r596, %r595;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r597, %r599, %r598;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r638, %r640, %r639;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r641, %r643, %r642;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r644, %r646, %r645;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r647, %r640, %r639;
	// end inline asm
	mov.u32 	%r124, 0;
	shl.b32 	%r676, %r396, 15;
	shl.b32 	%r677, %r400, 8;
	add.s32 	%r90, %r677, %r676;
	shl.b32 	%r91, %r2, 2;
	and.b32  	%r92, %r91, 60;
	shl.b32 	%r678, %r2, 3;
	and.b32  	%r93, %r678, 128;
	shl.b32 	%r94, %r1, 8;
	or.b32  	%r679, %r94, %r93;
	or.b32  	%r95, %r679, 64;
	add.s32 	%r96, %r3, 24;
	shr.u32 	%r680, %r2, 4;
	and.b32  	%r681, %r271, 30;
	or.b32  	%r682, %r681, %r680;
	mul.lo.s32 	%r97, %r682, 257;
	or.b32  	%r683, %r271, %r680;
	or.b32  	%r684, %r683, 32;
	mul.lo.s32 	%r98, %r684, 257;
	and.b16  	%rs52, %rs247, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs247, %rs55;
	cvt.u32.u16 	%r685, %rs56;
	and.b32  	%r99, %r685, 255;
	shr.u32 	%r686, %r3, 3;
	and.b32  	%r687, %r4, 224;
	mad.lo.s32 	%r100, %r686, 257, %r687;
	shr.u32 	%r688, %r96, 3;
	mad.lo.s32 	%r101, %r688, 257, %r687;
	add.s32 	%r689, %r3, 48;
	shr.u32 	%r690, %r689, 3;
	mad.lo.s32 	%r102, %r690, 257, %r687;
	add.s32 	%r691, %r3, 72;
	shr.u32 	%r692, %r691, 3;
	mad.lo.s32 	%r103, %r692, 257, %r687;
	or.b32  	%r693, %r686, 12;
	mad.lo.s32 	%r104, %r693, 257, %r687;
	add.s32 	%r694, %r3, 120;
	shr.u32 	%r695, %r694, 3;
	mad.lo.s32 	%r105, %r695, 257, %r687;
	add.s32 	%r696, %r3, 144;
	shr.u32 	%r697, %r696, 3;
	mad.lo.s32 	%r106, %r697, 257, %r687;
	add.s32 	%r698, %r3, 168;
	shr.u32 	%r699, %r698, 3;
	mad.lo.s32 	%r107, %r699, 257, %r687;
	or.b32  	%r700, %r686, 24;
	mad.lo.s32 	%r108, %r700, 257, %r687;
	add.s32 	%r701, %r3, 216;
	shr.u32 	%r702, %r701, 3;
	mad.lo.s32 	%r109, %r702, 257, %r687;
	add.s32 	%r703, %r3, 240;
	shr.u32 	%r704, %r703, 3;
	mad.lo.s32 	%r110, %r704, 257, %r687;
	add.s32 	%r705, %r3, 264;
	shr.u32 	%r706, %r705, 3;
	mad.lo.s32 	%r111, %r706, 257, %r687;
	or.b32  	%r707, %r686, 36;
	mad.lo.s32 	%r112, %r707, 257, %r687;
	add.s32 	%r708, %r3, 312;
	shr.u32 	%r709, %r708, 3;
	mad.lo.s32 	%r113, %r709, 257, %r687;
	add.s32 	%r710, %r3, 336;
	shr.u32 	%r711, %r710, 3;
	mad.lo.s32 	%r114, %r711, 257, %r687;
	add.s32 	%r712, %r3, 360;
	shr.u32 	%r713, %r712, 3;
	mad.lo.s32 	%r115, %r713, 257, %r687;
	or.b32  	%r714, %r686, 48;
	mad.lo.s32 	%r116, %r714, 257, %r687;
	add.s32 	%r715, %r3, 408;
	shr.u32 	%r716, %r715, 3;
	mad.lo.s32 	%r117, %r716, 257, %r687;
	add.s32 	%r717, %r3, 432;
	shr.u32 	%r718, %r717, 3;
	mad.lo.s32 	%r118, %r718, 257, %r687;
	add.s32 	%r719, %r3, 456;
	shr.u32 	%r720, %r719, 3;
	mad.lo.s32 	%r119, %r720, 257, %r687;
	or.b32  	%r721, %r686, 60;
	mad.lo.s32 	%r120, %r721, 257, %r687;
	add.s32 	%r722, %r3, 504;
	bfe.u32 	%r723, %r722, 3, 6;
	mad.lo.s32 	%r121, %r723, 257, %r687;
	mul.lo.s32 	%r724, %r3, 33;
	mad.lo.s32 	%r725, %r258, 4806, %r724;
	mad.lo.s32 	%r726, %r3735, 801, %r725;
	and.b32  	%r727, %r2, 1;
	neg.s32 	%r728, %r727;
	and.b32  	%r729, %r728, 4112;
	bfe.s32 	%r730, %r2, 3, 1;
	and.b32  	%r731, %r730, 514;
	mul.lo.s32 	%r732, %r680, 257;
	bfe.s32 	%r733, %r2, 1, 1;
	and.b32  	%r734, %r733, 2056;
	bfe.s32 	%r735, %r2, 2, 1;
	and.b32  	%r736, %r735, 1028;
	add.s32 	%r737, %r732, %r3;
	add.s32 	%r738, %r737, %r731;
	add.s32 	%r739, %r738, %r729;
	add.s32 	%r740, %r739, %r734;
	add.s32 	%r741, %r740, %r736;
	mul.wide.u32 	%rd55, %r741, 4;
	mov.u64 	%rd56, shmem;
	add.s64 	%rd7, %rd56, %rd55;
	or.b32  	%r742, %r3, 8256;
	add.s32 	%r743, %r742, %r732;
	add.s32 	%r744, %r743, %r731;
	add.s32 	%r745, %r744, %r729;
	add.s32 	%r746, %r745, %r734;
	add.s32 	%r747, %r746, %r736;
	mul.wide.u32 	%rd57, %r747, 4;
	add.s64 	%rd8, %rd56, %rd57;
	or.b32  	%r748, %r729, %r731;
	or.b32  	%r749, %r3, 32;
	add.s32 	%r750, %r749, %r732;
	add.s32 	%r751, %r750, %r734;
	add.s32 	%r752, %r751, %r736;
	add.s32 	%r753, %r752, %r748;
	mul.wide.u32 	%rd58, %r753, 4;
	add.s64 	%rd9, %rd56, %rd58;
	or.b32  	%r754, %r3, 8288;
	add.s32 	%r755, %r754, %r732;
	add.s32 	%r756, %r755, %r734;
	add.s32 	%r757, %r756, %r736;
	add.s32 	%r758, %r757, %r748;
	mul.wide.u32 	%rd59, %r758, 4;
	add.s64 	%rd10, %rd56, %rd59;
	bfe.s32 	%r759, %r3, 1, 1;
	and.b32  	%r760, %r759, 4112;
	mul.lo.s32 	%r761, %r258, 6;
	shr.u32 	%r762, %r3, 4;
	mul.lo.s32 	%r763, %r762, 514;
	bfe.s32 	%r764, %r3, 2, 1;
	and.b32  	%r765, %r764, 2056;
	bfe.s32 	%r766, %r3, 3, 1;
	and.b32  	%r767, %r3, 8;
	setp.eq.s32 	%p241, %r767, 0;
	and.b32  	%r768, %r766, 1028;
	and.b32  	%r769, %r3, 1;
	neg.s32 	%r770, %r769;
	and.b32  	%r771, %r770, 8256;
	add.s32 	%r772, %r763, %r761;
	add.s32 	%r773, %r772, %r760;
	add.s32 	%r774, %r773, %r765;
	add.s32 	%r775, %r774, %r768;
	add.s32 	%r776, %r775, %r771;
	add.s32 	%r777, %r776, %r3735;
	mul.wide.u32 	%rd60, %r777, 4;
	add.s64 	%rd11, %rd56, %rd60;
	bfe.s32 	%r778, %r96, 4, 1;
	and.b32  	%r779, %r778, 514;
	shr.u32 	%r780, %r96, 5;
	mul.lo.s32 	%r781, %r780, 257;
	selp.b32 	%r782, 1028, 0, %p241;
	add.s32 	%r783, %r760, %r761;
	add.s32 	%r784, %r783, %r781;
	add.s32 	%r785, %r784, %r765;
	add.s32 	%r786, %r785, %r782;
	add.s32 	%r787, %r786, %r771;
	add.s32 	%r788, %r787, %r3735;
	add.s32 	%r789, %r788, %r779;
	mul.wide.u32 	%rd61, %r789, 4;
	add.s64 	%rd12, %rd56, %rd61;
	add.s32 	%r790, %r783, 32;
	add.s32 	%r791, %r790, %r763;
	add.s32 	%r792, %r791, %r765;
	add.s32 	%r793, %r792, %r768;
	add.s32 	%r794, %r793, %r771;
	add.s32 	%r795, %r794, %r3735;
	mul.wide.u32 	%rd62, %r795, 4;
	add.s64 	%rd13, %rd56, %rd62;
	add.s32 	%r796, %r790, %r781;
	add.s32 	%r797, %r796, %r765;
	add.s32 	%r798, %r797, %r782;
	add.s32 	%r799, %r798, %r771;
	add.s32 	%r800, %r799, %r3735;
	add.s32 	%r801, %r800, %r779;
	mul.wide.u32 	%rd63, %r801, 4;
	add.s64 	%rd14, %rd56, %rd63;
	mul.lo.s32 	%r802, %r398, 589824;
	mad.lo.s32 	%r803, %r402, 1152, %r802;
	mad.lo.s32 	%r804, %r3, 24, %r3734;
	add.s32 	%r122, %r804, %r99;
	cvt.s64.s32 	%rd15, %r803;
	cvt.u16.u32 	%rs57, %r96;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r805, %rs62;
	and.b32  	%r806, %r805, 255;
	or.b32  	%r807, %r3734, %r99;
	mad.lo.s32 	%r123, %r806, 24, %r807;
	mul.wide.u32 	%rd64, %r726, 4;
	add.s64 	%rd16, %rd56, %rd64;
	add.s32 	%r808, %r741, 64;
	mul.wide.u32 	%rd65, %r808, 4;
	add.s64 	%rd17, %rd56, %rd65;
	add.s32 	%r809, %r747, 64;
	mul.wide.u32 	%rd66, %r809, 4;
	add.s64 	%rd18, %rd56, %rd66;
	add.s32 	%r810, %r741, 128;
	mul.wide.u32 	%rd67, %r810, 4;
	add.s64 	%rd19, %rd56, %rd67;
	add.s32 	%r811, %r747, 128;
	mul.wide.u32 	%rd68, %r811, 4;
	add.s64 	%rd20, %rd56, %rd68;
	add.s32 	%r812, %r741, 192;
	mul.wide.u32 	%rd69, %r812, 4;
	add.s64 	%rd21, %rd56, %rd69;
	add.s32 	%r813, %r747, 192;
	mul.wide.u32 	%rd70, %r813, 4;
	add.s64 	%rd22, %rd56, %rd70;
	add.s32 	%r814, %r777, 64;
	mul.wide.u32 	%rd71, %r814, 4;
	add.s64 	%rd23, %rd56, %rd71;
	add.s32 	%r815, %r789, 64;
	mul.wide.u32 	%rd72, %r815, 4;
	add.s64 	%rd24, %rd56, %rd72;
	add.s32 	%r816, %r795, 64;
	mul.wide.u32 	%rd73, %r816, 4;
	add.s64 	%rd25, %rd56, %rd73;
	add.s32 	%r817, %r801, 64;
	mul.wide.u32 	%rd74, %r817, 4;
	add.s64 	%rd26, %rd56, %rd74;
	add.s32 	%r818, %r777, 128;
	mul.wide.u32 	%rd75, %r818, 4;
	add.s64 	%rd27, %rd56, %rd75;
	add.s32 	%r819, %r789, 128;
	mul.wide.u32 	%rd76, %r819, 4;
	add.s64 	%rd28, %rd56, %rd76;
	add.s32 	%r820, %r795, 128;
	mul.wide.u32 	%rd77, %r820, 4;
	add.s64 	%rd29, %rd56, %rd77;
	add.s32 	%r821, %r801, 128;
	mul.wide.u32 	%rd78, %r821, 4;
	add.s64 	%rd30, %rd56, %rd78;
	add.s32 	%r822, %r777, 192;
	mul.wide.u32 	%rd79, %r822, 4;
	add.s64 	%rd31, %rd56, %rd79;
	add.s32 	%r823, %r789, 192;
	mul.wide.u32 	%rd80, %r823, 4;
	add.s64 	%rd32, %rd56, %rd80;
	add.s32 	%r824, %r795, 192;
	mul.wide.u32 	%rd81, %r824, 4;
	add.s64 	%rd33, %rd56, %rd81;
	add.s32 	%r825, %r801, 192;
	mul.wide.u32 	%rd82, %r825, 4;
	add.s64 	%rd34, %rd56, %rd82;
	setp.lt.u32 	%p243, %r2, 16;
	setp.gt.u32 	%p272, %r3, 7;
	setp.lt.u32 	%p276, %r2, 24;
	mov.u32 	%r3768, %r124;
	mov.u32 	%r3769, %r124;
	mov.u32 	%r3770, %r124;
	mov.u32 	%r3771, %r124;
	bra.uni 	$L__BB0_150;
$L__BB0_196:                            // %L41253
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r257, %r124, 48;
	setp.ne.s32 	%p316, %r124, 1968;
	mov.u32 	%r124, %r257;
	@%p316 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_197;
$L__BB0_150:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_187 Depth 2
	add.s32 	%r826, %r124, %r396;
	setp.lt.s32 	%p242, %r826, %r397;
	@%p242 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_197;
$L__BB0_151:                            // %oksrem679
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r1019, %r124, -1431655765;
	shr.u32 	%r1020, %r1019, 5;
	mul.lo.s32 	%r291, %r1020, 48;
	add.s32 	%r1021, %r291, %r3;
	cvt.u16.u32 	%rs63, %r1021;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 5;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -2048;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.s32.s16 	%r1022, %rs68;
	shl.b32 	%r1023, %r1022, 15;
	or.b32  	%r1024, %r1023, %r92;
	or.b32  	%r1025, %r1024, %r93;
	or.b32  	%r1026, %r1025, %r94;
	add.s32 	%r1027, %r90, %r1026;
	shr.s32 	%r1028, %r1027, 31;
	shr.u32 	%r1029, %r1028, 6;
	add.s32 	%r1030, %r1027, %r1029;
	shr.s32 	%r1031, %r1030, 26;
	setp.lt.s32 	%p244, %r1027, 0;
	and.b32  	%r1032, %r1030, -67108864;
	setp.ne.s32 	%p245, %r1032, %r1027;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r1033, 1, 0, %p246;
	sub.s32 	%r1034, %r1033, %r1031;
	shl.b32 	%r1035, %r1034, 26;
	add.s32 	%r1036, %r1035, %r1027;
	mul.wide.s32 	%rd83, %r1036, 4;
	add.s64 	%rd84, %rd3, %rd83;
	ld.global.v4.u32 	{%r1037, %r1038, %r1039, %r1040}, [%rd84];
	or.b32  	%r1041, %r1023, %r91;
	or.b32  	%r1042, %r95, %r1041;
	add.s32 	%r1043, %r90, %r1042;
	shr.s32 	%r1044, %r1043, 31;
	shr.u32 	%r1045, %r1044, 6;
	add.s32 	%r1046, %r1043, %r1045;
	shr.u32 	%r1047, %r1046, 26;
	shr.u32 	%r1048, %r1043, 31;
	sub.s32 	%r1049, %r1048, %r1047;
	shl.b32 	%r1050, %r1049, 26;
	or.b32  	%r1051, %r1043, 1;
	add.s32 	%r1052, %r1051, %r1050;
	mul.wide.s32 	%rd85, %r1052, 4;
	add.s64 	%rd86, %rd3, %rd85;
	ld.global.v4.u32 	{%r1053, %r1054, %r1055, %r1056}, [%rd86+-4];
	add.s32 	%r1057, %r96, %r291;
	cvt.u16.u32 	%rs69, %r1057;
	shr.s16 	%rs70, %rs69, 15;
	shr.u16 	%rs71, %rs70, 5;
	add.s16 	%rs72, %rs69, %rs71;
	and.b16  	%rs73, %rs72, -2048;
	sub.s16 	%rs74, %rs69, %rs73;
	cvt.s32.s16 	%r1058, %rs74;
	shl.b32 	%r1059, %r1058, 15;
	or.b32  	%r1060, %r1059, %r92;
	or.b32  	%r1061, %r1060, %r93;
	or.b32  	%r1062, %r1061, %r94;
	add.s32 	%r1063, %r90, %r1062;
	shr.s32 	%r1064, %r1063, 31;
	shr.u32 	%r1065, %r1064, 6;
	add.s32 	%r1066, %r1063, %r1065;
	shr.s32 	%r1067, %r1066, 26;
	setp.lt.s32 	%p247, %r1063, 0;
	and.b32  	%r1068, %r1066, -67108864;
	setp.ne.s32 	%p248, %r1068, %r1063;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r1069, 1, 0, %p249;
	sub.s32 	%r1070, %r1069, %r1067;
	shl.b32 	%r1071, %r1070, 26;
	add.s32 	%r1072, %r1071, %r1063;
	mul.wide.s32 	%rd87, %r1072, 4;
	add.s64 	%rd88, %rd3, %rd87;
	ld.global.v4.u32 	{%r1073, %r1074, %r1075, %r1076}, [%rd88];
	or.b32  	%r1077, %r1059, %r91;
	or.b32  	%r1078, %r95, %r1077;
	add.s32 	%r1079, %r90, %r1078;
	shr.s32 	%r1080, %r1079, 31;
	shr.u32 	%r1081, %r1080, 6;
	add.s32 	%r1082, %r1079, %r1081;
	shr.u32 	%r1083, %r1082, 26;
	shr.u32 	%r1084, %r1079, 31;
	sub.s32 	%r1085, %r1084, %r1083;
	shl.b32 	%r1086, %r1085, 26;
	or.b32  	%r1087, %r1079, 1;
	add.s32 	%r1088, %r1087, %r1086;
	mul.wide.s32 	%rd89, %r1088, 4;
	add.s64 	%rd90, %rd3, %rd89;
	ld.global.v4.u32 	{%r1089, %r1090, %r1091, %r1092}, [%rd90+-4];
	selp.b32 	%r1093, %r1039, %r1037, %p243;
	shfl.sync.bfly.b32	%r1094, %r1093, 16, 31, -1;
	selp.b32 	%r829, %r1037, %r1094, %p243;
	selp.b32 	%r834, %r1094, %r1039, %p243;
	selp.b32 	%r1095, %r1040, %r1038, %p243;
	shfl.sync.bfly.b32	%r1096, %r1095, 16, 31, -1;
	selp.b32 	%r837, %r1038, %r1096, %p243;
	selp.b32 	%r842, %r1096, %r1040, %p243;
	selp.b32 	%r1097, %r1055, %r1053, %p243;
	shfl.sync.bfly.b32	%r1098, %r1097, 16, 31, -1;
	selp.b32 	%r845, %r1053, %r1098, %p243;
	selp.b32 	%r850, %r1098, %r1055, %p243;
	selp.b32 	%r1099, %r1056, %r1054, %p243;
	shfl.sync.bfly.b32	%r1100, %r1099, 16, 31, -1;
	selp.b32 	%r853, %r1054, %r1100, %p243;
	selp.b32 	%r858, %r1100, %r1056, %p243;
	selp.b32 	%r1101, %r1075, %r1073, %p243;
	shfl.sync.bfly.b32	%r1102, %r1101, 16, 31, -1;
	selp.b32 	%r861, %r1073, %r1102, %p243;
	selp.b32 	%r866, %r1102, %r1075, %p243;
	selp.b32 	%r1103, %r1076, %r1074, %p243;
	shfl.sync.bfly.b32	%r1104, %r1103, 16, 31, -1;
	selp.b32 	%r869, %r1074, %r1104, %p243;
	selp.b32 	%r874, %r1104, %r1076, %p243;
	selp.b32 	%r1105, %r1091, %r1089, %p243;
	shfl.sync.bfly.b32	%r1106, %r1105, 16, 31, -1;
	selp.b32 	%r877, %r1089, %r1106, %p243;
	selp.b32 	%r882, %r1106, %r1091, %p243;
	selp.b32 	%r1107, %r1092, %r1090, %p243;
	shfl.sync.bfly.b32	%r1108, %r1107, 16, 31, -1;
	selp.b32 	%r885, %r1090, %r1108, %p243;
	selp.b32 	%r890, %r1108, %r1092, %p243;
	shl.b32 	%r830, %r834, 4;
	mov.u32 	%r828, 252645135;
	// begin inline asm
	lop3.b32 %r892, %r828, %r829, %r830, 202;
	// end inline asm
	shr.u32 	%r833, %r829, 4;
	// begin inline asm
	lop3.b32 %r908, %r828, %r833, %r834, 202;
	// end inline asm
	shl.b32 	%r838, %r842, 4;
	// begin inline asm
	lop3.b32 %r900, %r828, %r837, %r838, 202;
	// end inline asm
	shr.u32 	%r841, %r837, 4;
	// begin inline asm
	lop3.b32 %r916, %r828, %r841, %r842, 202;
	// end inline asm
	shl.b32 	%r846, %r850, 4;
	// begin inline asm
	lop3.b32 %r924, %r828, %r845, %r846, 202;
	// end inline asm
	shr.u32 	%r849, %r845, 4;
	// begin inline asm
	lop3.b32 %r940, %r828, %r849, %r850, 202;
	// end inline asm
	shl.b32 	%r854, %r858, 4;
	// begin inline asm
	lop3.b32 %r932, %r828, %r853, %r854, 202;
	// end inline asm
	shr.u32 	%r857, %r853, 4;
	// begin inline asm
	lop3.b32 %r948, %r828, %r857, %r858, 202;
	// end inline asm
	shl.b32 	%r862, %r866, 4;
	// begin inline asm
	lop3.b32 %r893, %r828, %r861, %r862, 202;
	// end inline asm
	shr.u32 	%r865, %r861, 4;
	// begin inline asm
	lop3.b32 %r909, %r828, %r865, %r866, 202;
	// end inline asm
	shl.b32 	%r870, %r874, 4;
	// begin inline asm
	lop3.b32 %r901, %r828, %r869, %r870, 202;
	// end inline asm
	shr.u32 	%r873, %r869, 4;
	// begin inline asm
	lop3.b32 %r917, %r828, %r873, %r874, 202;
	// end inline asm
	shl.b32 	%r878, %r882, 4;
	// begin inline asm
	lop3.b32 %r925, %r828, %r877, %r878, 202;
	// end inline asm
	shr.u32 	%r881, %r877, 4;
	// begin inline asm
	lop3.b32 %r941, %r828, %r881, %r882, 202;
	// end inline asm
	shl.b32 	%r886, %r890, 4;
	// begin inline asm
	lop3.b32 %r933, %r828, %r885, %r886, 202;
	// end inline asm
	shr.u32 	%r889, %r885, 4;
	// begin inline asm
	lop3.b32 %r949, %r828, %r889, %r890, 202;
	// end inline asm
	mov.u32 	%r894, 25152;
	// begin inline asm
	prmt.b32 %r956, %r892, %r893, %r894;
	// end inline asm
	mov.u32 	%r898, 29521;
	// begin inline asm
	prmt.b32 %r988, %r892, %r893, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r964, %r900, %r901, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r996, %r900, %r901, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r957, %r908, %r909, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r989, %r908, %r909, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r965, %r916, %r917, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r997, %r916, %r917, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r972, %r924, %r925, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1004, %r924, %r925, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r980, %r932, %r933, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1012, %r932, %r933, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r973, %r940, %r941, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1005, %r940, %r941, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r981, %r948, %r949, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1013, %r948, %r949, %r898;
	// end inline asm
	mov.u32 	%r1014, 21520;
	// begin inline asm
	prmt.b32 %r955, %r956, %r957, %r1014;
	// end inline asm
	mov.u32 	%r1018, 30258;
	// begin inline asm
	prmt.b32 %r959, %r956, %r957, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r963, %r964, %r965, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r967, %r964, %r965, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r971, %r972, %r973, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r975, %r972, %r973, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r980, %r981, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r983, %r980, %r981, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r988, %r989, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r991, %r988, %r989, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r995, %r996, %r997, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r999, %r996, %r997, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1003, %r1004, %r1005, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1007, %r1004, %r1005, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1011, %r1012, %r1013, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1015, %r1012, %r1013, %r1018;
	// end inline asm
	mul.hi.s16 	%rs75, %rs63, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs63, %rs79;
	cvt.s32.s16 	%r1109, %rs80;
	add.s32 	%r1110, %r97, %r1109;
	mul.wide.s32 	%rd91, %r1110, 4;
	add.s64 	%rd93, %rd56, %rd91;
	st.shared.u32 	[%rd93], %r955;
	add.s32 	%r1111, %r1110, 128;
	mul.wide.u32 	%rd94, %r1111, 4;
	add.s64 	%rd95, %rd56, %rd94;
	st.shared.u32 	[%rd95], %r963;
	add.s32 	%r1112, %r1110, 64;
	mul.wide.u32 	%rd96, %r1112, 4;
	add.s64 	%rd97, %rd56, %rd96;
	st.shared.u32 	[%rd97], %r959;
	add.s32 	%r1113, %r1110, 192;
	mul.wide.u32 	%rd98, %r1113, 4;
	add.s64 	%rd99, %rd56, %rd98;
	st.shared.u32 	[%rd99], %r967;
	add.s32 	%r1114, %r98, %r1109;
	mul.wide.u32 	%rd100, %r1114, 4;
	add.s64 	%rd101, %rd56, %rd100;
	st.shared.u32 	[%rd101], %r971;
	add.s32 	%r1115, %r1114, 128;
	mul.wide.u32 	%rd102, %r1115, 4;
	add.s64 	%rd103, %rd56, %rd102;
	st.shared.u32 	[%rd103], %r979;
	add.s32 	%r1116, %r1114, 64;
	mul.wide.u32 	%rd104, %r1116, 4;
	add.s64 	%rd105, %rd56, %rd104;
	st.shared.u32 	[%rd105], %r975;
	add.s32 	%r1117, %r1114, 192;
	mul.wide.u32 	%rd106, %r1117, 4;
	add.s64 	%rd107, %rd56, %rd106;
	st.shared.u32 	[%rd107], %r983;
	add.s32 	%r1118, %r1110, 32;
	mul.wide.u32 	%rd108, %r1118, 4;
	add.s64 	%rd109, %rd56, %rd108;
	st.shared.u32 	[%rd109], %r987;
	add.s32 	%r1119, %r1110, 160;
	mul.wide.u32 	%rd110, %r1119, 4;
	add.s64 	%rd111, %rd56, %rd110;
	st.shared.u32 	[%rd111], %r995;
	add.s32 	%r1120, %r1110, 96;
	mul.wide.u32 	%rd112, %r1120, 4;
	add.s64 	%rd113, %rd56, %rd112;
	st.shared.u32 	[%rd113], %r991;
	add.s32 	%r1121, %r1110, 224;
	mul.wide.u32 	%rd114, %r1121, 4;
	add.s64 	%rd115, %rd56, %rd114;
	st.shared.u32 	[%rd115], %r999;
	add.s32 	%r1122, %r1114, 32;
	mul.wide.u32 	%rd116, %r1122, 4;
	add.s64 	%rd117, %rd56, %rd116;
	st.shared.u32 	[%rd117], %r1003;
	add.s32 	%r1123, %r1114, 160;
	mul.wide.u32 	%rd118, %r1123, 4;
	add.s64 	%rd119, %rd56, %rd118;
	st.shared.u32 	[%rd119], %r1011;
	add.s32 	%r1124, %r1114, 96;
	mul.wide.u32 	%rd120, %r1124, 4;
	add.s64 	%rd121, %rd56, %rd120;
	st.shared.u32 	[%rd121], %r1007;
	add.s32 	%r1125, %r1114, 224;
	mul.wide.u32 	%rd122, %r1125, 4;
	add.s64 	%rd123, %rd56, %rd122;
	st.shared.u32 	[%rd123], %r1015;
	bar.sync 	0;
	add.s32 	%r1126, %r291, %r99;
	cvt.u16.u32 	%rs81, %r1126;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r292, %rs87;
	add.s32 	%r1127, %r100, %r292;
	mul.wide.s32 	%rd124, %r1127, 4;
	add.s64 	%rd125, %rd56, %rd124;
	ld.shared.u32 	%r293, [%rd125];
	add.s32 	%r1128, %r101, %r292;
	mul.wide.u32 	%rd126, %r1128, 4;
	add.s64 	%rd127, %rd56, %rd126;
	ld.shared.u32 	%r294, [%rd127];
	add.s32 	%r1129, %r102, %r292;
	mul.wide.u32 	%rd128, %r1129, 4;
	add.s64 	%rd129, %rd56, %rd128;
	ld.shared.u32 	%r295, [%rd129];
	add.s32 	%r1130, %r103, %r292;
	mul.wide.u32 	%rd130, %r1130, 4;
	add.s64 	%rd131, %rd56, %rd130;
	ld.shared.u32 	%r296, [%rd131];
	add.s32 	%r1131, %r104, %r292;
	mul.wide.u32 	%rd132, %r1131, 4;
	add.s64 	%rd133, %rd56, %rd132;
	ld.shared.u32 	%r297, [%rd133];
	add.s32 	%r1132, %r105, %r292;
	mul.wide.u32 	%rd134, %r1132, 4;
	add.s64 	%rd135, %rd56, %rd134;
	ld.shared.u32 	%r298, [%rd135];
	add.s32 	%r1133, %r106, %r292;
	mul.wide.u32 	%rd136, %r1133, 4;
	add.s64 	%rd137, %rd56, %rd136;
	ld.shared.u32 	%r299, [%rd137];
	add.s32 	%r1134, %r107, %r292;
	mul.wide.u32 	%rd138, %r1134, 4;
	add.s64 	%rd139, %rd56, %rd138;
	ld.shared.u32 	%r300, [%rd139];
	add.s32 	%r1135, %r108, %r292;
	mul.wide.u32 	%rd140, %r1135, 4;
	add.s64 	%rd141, %rd56, %rd140;
	ld.shared.u32 	%r301, [%rd141];
	add.s32 	%r1136, %r109, %r292;
	mul.wide.u32 	%rd142, %r1136, 4;
	add.s64 	%rd143, %rd56, %rd142;
	ld.shared.u32 	%r302, [%rd143];
	add.s32 	%r1137, %r110, %r292;
	mul.wide.u32 	%rd144, %r1137, 4;
	add.s64 	%rd145, %rd56, %rd144;
	ld.shared.u32 	%r303, [%rd145];
	add.s32 	%r1138, %r111, %r292;
	mul.wide.u32 	%rd146, %r1138, 4;
	add.s64 	%rd147, %rd56, %rd146;
	ld.shared.u32 	%r304, [%rd147];
	add.s32 	%r1139, %r112, %r292;
	mul.wide.u32 	%rd148, %r1139, 4;
	add.s64 	%rd149, %rd56, %rd148;
	ld.shared.u32 	%r305, [%rd149];
	add.s32 	%r1140, %r113, %r292;
	mul.wide.u32 	%rd150, %r1140, 4;
	add.s64 	%rd151, %rd56, %rd150;
	ld.shared.u32 	%r306, [%rd151];
	add.s32 	%r1141, %r114, %r292;
	mul.wide.u32 	%rd152, %r1141, 4;
	add.s64 	%rd153, %rd56, %rd152;
	ld.shared.u32 	%r307, [%rd153];
	add.s32 	%r1142, %r115, %r292;
	mul.wide.u32 	%rd154, %r1142, 4;
	add.s64 	%rd155, %rd56, %rd154;
	ld.shared.u32 	%r308, [%rd155];
	add.s32 	%r1143, %r116, %r292;
	mul.wide.u32 	%rd156, %r1143, 4;
	add.s64 	%rd157, %rd56, %rd156;
	ld.shared.u32 	%r309, [%rd157];
	add.s32 	%r1144, %r117, %r292;
	mul.wide.u32 	%rd158, %r1144, 4;
	add.s64 	%rd159, %rd56, %rd158;
	ld.shared.u32 	%r310, [%rd159];
	add.s32 	%r1145, %r118, %r292;
	mul.wide.u32 	%rd160, %r1145, 4;
	add.s64 	%rd161, %rd56, %rd160;
	ld.shared.u32 	%r311, [%rd161];
	add.s32 	%r1146, %r119, %r292;
	mul.wide.u32 	%rd162, %r1146, 4;
	add.s64 	%rd163, %rd56, %rd162;
	ld.shared.u32 	%r312, [%rd163];
	add.s32 	%r1147, %r120, %r292;
	mul.wide.u32 	%rd164, %r1147, 4;
	add.s64 	%rd165, %rd56, %rd164;
	ld.shared.u32 	%r313, [%rd165];
	add.s32 	%r1148, %r121, %r292;
	mul.wide.s32 	%rd166, %r1148, 4;
	add.s64 	%rd167, %rd56, %rd166;
	ld.shared.u32 	%r314, [%rd167];
	bar.sync 	0;
	shfl.sync.idx.b32	%r315, %r284, 0, 31, -1;
	shfl.sync.idx.b32	%r316, %r284, 1, 31, -1;
	shfl.sync.idx.b32	%r317, %r284, 2, 31, -1;
	shfl.sync.idx.b32	%r318, %r284, 3, 31, -1;
	shfl.sync.idx.b32	%r319, %r284, 4, 31, -1;
	shfl.sync.idx.b32	%r320, %r284, 5, 31, -1;
	shfl.sync.idx.b32	%r321, %r284, 6, 31, -1;
	shfl.sync.idx.b32	%r322, %r284, 7, 31, -1;
	shfl.sync.idx.b32	%r323, %r284, 8, 31, -1;
	shfl.sync.idx.b32	%r324, %r284, 9, 31, -1;
	shfl.sync.idx.b32	%r325, %r284, 10, 31, -1;
	shfl.sync.idx.b32	%r326, %r284, 11, 31, -1;
	shfl.sync.idx.b32	%r327, %r284, 12, 31, -1;
	shfl.sync.idx.b32	%r328, %r284, 13, 31, -1;
	shfl.sync.idx.b32	%r329, %r284, 14, 31, -1;
	shfl.sync.idx.b32	%r330, %r284, 15, 31, -1;
	shfl.sync.idx.b32	%r331, %r284, 16, 31, -1;
	shfl.sync.idx.b32	%r332, %r284, 17, 31, -1;
	shfl.sync.idx.b32	%r333, %r284, 18, 31, -1;
	shfl.sync.idx.b32	%r334, %r284, 19, 31, -1;
	shfl.sync.idx.b32	%r335, %r284, 20, 31, -1;
	shfl.sync.idx.b32	%r336, %r284, 21, 31, -1;
	shfl.sync.idx.b32	%r337, %r284, 22, 31, -1;
	shfl.sync.idx.b32	%r338, %r284, 23, 31, -1;
	setp.eq.s32 	%p250, %r315, 999999999;
	@%p250 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3326
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1149, %r315, %r292;
	mul.wide.s32 	%rd168, %r1149, 4;
	add.s64 	%rd170, %rd56, %rd168;
	st.shared.u32 	[%rd170], %r293;
	setp.eq.s32 	%p251, %r316, 999999999;
	@%p251 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3394
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1150, %r316, %r292;
	mul.wide.s32 	%rd171, %r1150, 4;
	add.s64 	%rd173, %rd56, %rd171;
	st.shared.u32 	[%rd173], %r294;
	setp.eq.s32 	%p252, %r317, 999999999;
	@%p252 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3462
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1151, %r317, %r292;
	mul.wide.s32 	%rd174, %r1151, 4;
	add.s64 	%rd176, %rd56, %rd174;
	st.shared.u32 	[%rd176], %r295;
	setp.eq.s32 	%p253, %r318, 999999999;
	@%p253 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3530
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1152, %r318, %r292;
	mul.wide.s32 	%rd177, %r1152, 4;
	add.s64 	%rd179, %rd56, %rd177;
	st.shared.u32 	[%rd179], %r296;
	setp.eq.s32 	%p254, %r319, 999999999;
	@%p254 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3598
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1153, %r319, %r292;
	mul.wide.s32 	%rd180, %r1153, 4;
	add.s64 	%rd182, %rd56, %rd180;
	st.shared.u32 	[%rd182], %r297;
	setp.eq.s32 	%p255, %r320, 999999999;
	@%p255 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3666
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1154, %r320, %r292;
	mul.wide.s32 	%rd183, %r1154, 4;
	add.s64 	%rd185, %rd56, %rd183;
	st.shared.u32 	[%rd185], %r298;
	setp.eq.s32 	%p256, %r321, 999999999;
	@%p256 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3734
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1155, %r321, %r292;
	mul.wide.s32 	%rd186, %r1155, 4;
	add.s64 	%rd188, %rd56, %rd186;
	st.shared.u32 	[%rd188], %r299;
	setp.eq.s32 	%p257, %r322, 999999999;
	@%p257 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3802
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1156, %r322, %r292;
	mul.wide.s32 	%rd189, %r1156, 4;
	add.s64 	%rd191, %rd56, %rd189;
	st.shared.u32 	[%rd191], %r300;
	setp.eq.s32 	%p258, %r323, 999999999;
	@%p258 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3870
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1157, %r323, %r292;
	mul.wide.s32 	%rd192, %r1157, 4;
	add.s64 	%rd194, %rd56, %rd192;
	st.shared.u32 	[%rd194], %r301;
	setp.eq.s32 	%p259, %r324, 999999999;
	@%p259 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem3938
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1158, %r324, %r292;
	mul.wide.s32 	%rd195, %r1158, 4;
	add.s64 	%rd197, %rd56, %rd195;
	st.shared.u32 	[%rd197], %r302;
	setp.eq.s32 	%p260, %r325, 999999999;
	@%p260 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4006
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1159, %r325, %r292;
	mul.wide.s32 	%rd198, %r1159, 4;
	add.s64 	%rd200, %rd56, %rd198;
	st.shared.u32 	[%rd200], %r303;
	setp.eq.s32 	%p261, %r326, 999999999;
	@%p261 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4074
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1160, %r326, %r292;
	mul.wide.s32 	%rd201, %r1160, 4;
	add.s64 	%rd203, %rd56, %rd201;
	st.shared.u32 	[%rd203], %r304;
	setp.eq.s32 	%p262, %r327, 999999999;
	@%p262 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4142
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1161, %r327, %r292;
	mul.wide.s32 	%rd204, %r1161, 4;
	add.s64 	%rd206, %rd56, %rd204;
	st.shared.u32 	[%rd206], %r305;
	setp.eq.s32 	%p263, %r328, 999999999;
	@%p263 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4210
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1162, %r328, %r292;
	mul.wide.s32 	%rd207, %r1162, 4;
	add.s64 	%rd209, %rd56, %rd207;
	st.shared.u32 	[%rd209], %r306;
	setp.eq.s32 	%p264, %r329, 999999999;
	@%p264 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4278
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1163, %r329, %r292;
	mul.wide.s32 	%rd210, %r1163, 4;
	add.s64 	%rd212, %rd56, %rd210;
	st.shared.u32 	[%rd212], %r307;
	setp.eq.s32 	%p265, %r330, 999999999;
	@%p265 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4346
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1164, %r330, %r292;
	mul.wide.s32 	%rd213, %r1164, 4;
	add.s64 	%rd215, %rd56, %rd213;
	st.shared.u32 	[%rd215], %r308;
	setp.eq.s32 	%p266, %r331, 999999999;
	@%p266 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4414
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1165, %r331, %r292;
	mul.wide.s32 	%rd216, %r1165, 4;
	add.s64 	%rd218, %rd56, %rd216;
	st.shared.u32 	[%rd218], %r309;
	setp.eq.s32 	%p267, %r332, 999999999;
	@%p267 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4482
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1166, %r332, %r292;
	mul.wide.s32 	%rd219, %r1166, 4;
	add.s64 	%rd221, %rd56, %rd219;
	st.shared.u32 	[%rd221], %r310;
	setp.eq.s32 	%p268, %r333, 999999999;
	@%p268 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4550
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1167, %r333, %r292;
	mul.wide.s32 	%rd222, %r1167, 4;
	add.s64 	%rd224, %rd56, %rd222;
	st.shared.u32 	[%rd224], %r311;
	setp.eq.s32 	%p269, %r334, 999999999;
	@%p269 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4618
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1168, %r334, %r292;
	mul.wide.s32 	%rd225, %r1168, 4;
	add.s64 	%rd227, %rd56, %rd225;
	st.shared.u32 	[%rd227], %r312;
	setp.eq.s32 	%p270, %r335, 999999999;
	@%p270 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4686
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1169, %r335, %r292;
	mul.wide.s32 	%rd228, %r1169, 4;
	add.s64 	%rd230, %rd56, %rd228;
	st.shared.u32 	[%rd230], %r313;
	setp.eq.s32 	%p271, %r336, 999999999;
	@%p271 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4755
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1170, 0, %r314, %p272;
	add.s32 	%r1171, %r336, %r292;
	mul.wide.s32 	%rd231, %r1171, 4;
	add.s64 	%rd233, %rd56, %rd231;
	st.shared.u32 	[%rd233], %r1170;
	setp.eq.s32 	%p273, %r337, 999999999;
	@%p273 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4823
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1172, %r337, %r292;
	mul.wide.s32 	%rd234, %r1172, 4;
	add.s64 	%rd236, %rd56, %rd234;
	mov.u32 	%r3743, 0;
	st.shared.u32 	[%rd236], %r3743;
	setp.eq.s32 	%p274, %r338, 999999999;
	@%p274 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4890
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1175, %r338, %r292;
	mul.wide.s32 	%rd237, %r1175, 4;
	add.s64 	%rd239, %rd56, %rd237;
	st.shared.u32 	[%rd239], %r3743;
	bar.sync 	0;
	mov.u32 	%r3744, %r3743;
	mov.u32 	%r3745, %r3743;
	mov.u32 	%r3746, %r3743;
	mov.u32 	%r3747, %r3743;
	mov.u32 	%r3748, %r3743;
	mov.u32 	%r3749, %r3743;
	mov.u32 	%r3750, %r3743;
	mov.u32 	%r3751, %r3743;
	mov.u32 	%r3752, %r3743;
	mov.u32 	%r3753, %r3743;
	mov.u32 	%r3754, %r3743;
	mov.u32 	%r3755, %r3743;
	mov.u32 	%r3756, %r3743;
	mov.u32 	%r3757, %r3743;
	mov.u32 	%r3758, %r3743;
	mov.u32 	%r3759, %r3743;
	mov.u32 	%r3760, %r3743;
	mov.u32 	%r3761, %r3743;
	mov.u32 	%r3762, %r3743;
	mov.u32 	%r3763, %r3743;
	mov.u32 	%r3764, %r3743;
	mov.u32 	%r3765, %r3743;
	mov.u32 	%r3766, %r3743;
	@%p91 bra 	$L__BB0_176;
// %bb.250:                             // %oksrem4959
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs88, %r291;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r1176, %rs94;
	mul.wide.s32 	%rd240, %r1176, 4;
	add.s64 	%rd241, %rd16, %rd240;
	ld.shared.u32 	%r3743, [%rd241];
	ld.shared.u32 	%r3744, [%rd16+4];
	ld.shared.u32 	%r3745, [%rd16+8];
	ld.shared.u32 	%r3746, [%rd16+12];
	ld.shared.u32 	%r3747, [%rd16+16];
	ld.shared.u32 	%r3748, [%rd16+20];
	ld.shared.u32 	%r3749, [%rd16+24];
	ld.shared.u32 	%r3750, [%rd16+28];
	ld.shared.u32 	%r3751, [%rd16+32];
	ld.shared.u32 	%r3752, [%rd16+36];
	ld.shared.u32 	%r3753, [%rd16+40];
	ld.shared.u32 	%r3754, [%rd16+44];
	ld.shared.u32 	%r3755, [%rd16+48];
	ld.shared.u32 	%r3756, [%rd16+52];
	ld.shared.u32 	%r3757, [%rd16+56];
	ld.shared.u32 	%r3758, [%rd16+60];
	add.s16 	%rs95, %rs88, 16;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r1177, %rs101;
	mul.wide.s32 	%rd242, %r1177, 4;
	add.s64 	%rd243, %rd16, %rd242;
	ld.shared.u32 	%r3759, [%rd243];
	add.s16 	%rs102, %rs88, 17;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r1178, %rs108;
	mul.wide.s32 	%rd244, %r1178, 4;
	add.s64 	%rd245, %rd16, %rd244;
	ld.shared.u32 	%r3760, [%rd245];
	add.s16 	%rs109, %rs88, 18;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r1179, %rs115;
	mul.wide.s32 	%rd246, %r1179, 4;
	add.s64 	%rd247, %rd16, %rd246;
	ld.shared.u32 	%r3761, [%rd247];
	add.s16 	%rs116, %rs88, 19;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r1180, %rs122;
	mul.wide.s32 	%rd248, %r1180, 4;
	add.s64 	%rd249, %rd16, %rd248;
	ld.shared.u32 	%r3762, [%rd249];
	add.s16 	%rs123, %rs88, 20;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r1181, %rs129;
	mul.wide.s32 	%rd250, %r1181, 4;
	add.s64 	%rd251, %rd16, %rd250;
	ld.shared.u32 	%r3763, [%rd251];
	add.s16 	%rs130, %rs88, 21;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r1182, %rs136;
	mul.wide.s32 	%rd252, %r1182, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3764, [%rd253];
	add.s16 	%rs137, %rs88, 22;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r1183, %rs143;
	mul.wide.s32 	%rd254, %r1183, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3765, [%rd255];
	add.s16 	%rs144, %rs88, 23;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r1184, %rs150;
	mul.wide.s32 	%rd256, %r1184, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3766, [%rd257];
$L__BB0_176:                            // %L13906
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3767, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_184:                            // %L27570
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3769, %r3769, 1;
	mov.u32 	%r3768, 0;
	mov.u32 	%r3770, %r3768;
	mov.u32 	%r3771, %r3768;
$L__BB0_185:                            // %L27571
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3767, %r3767, -4;
	setp.ne.s32 	%p295, %r3767, -12;
	@%p295 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_186;
$L__BB0_177:                            // %L13932
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r3767, 12;
	selp.b32 	%r1722, %r3743, 0, %p277;
	setp.eq.s32 	%p278, %r3767, 8;
	selp.b32 	%r1723, %r3747, %r1722, %p278;
	setp.eq.s32 	%p279, %r3767, 4;
	selp.b32 	%r1724, %r3751, %r1723, %p279;
	setp.eq.s32 	%p280, %r3767, 0;
	selp.b32 	%r1725, %r3755, %r1724, %p280;
	setp.eq.s32 	%p281, %r3767, -4;
	selp.b32 	%r1726, %r3759, %r1725, %p281;
	setp.eq.s32 	%p282, %r3767, -8;
	selp.b32 	%r1727, %r3763, %r1726, %p282;
	selp.b32 	%r1728, %r3744, 0, %p277;
	selp.b32 	%r1729, %r3748, %r1728, %p278;
	selp.b32 	%r1730, %r3752, %r1729, %p279;
	selp.b32 	%r1731, %r3756, %r1730, %p280;
	selp.b32 	%r1732, %r3760, %r1731, %p281;
	selp.b32 	%r1733, %r3764, %r1732, %p282;
	selp.b32 	%r1734, %r3745, 0, %p277;
	selp.b32 	%r1735, %r3749, %r1734, %p278;
	selp.b32 	%r1736, %r3753, %r1735, %p279;
	selp.b32 	%r1737, %r3757, %r1736, %p280;
	selp.b32 	%r1738, %r3761, %r1737, %p281;
	selp.b32 	%r1739, %r3765, %r1738, %p282;
	selp.b32 	%r1740, %r3746, 0, %p277;
	selp.b32 	%r1741, %r3750, %r1740, %p278;
	selp.b32 	%r1742, %r3754, %r1741, %p279;
	selp.b32 	%r1743, %r3758, %r1742, %p280;
	selp.b32 	%r1744, %r3762, %r1743, %p281;
	selp.b32 	%r1745, %r3766, %r1744, %p282;
	mov.u16 	%rs188, 25600;
	// begin inline asm
	mov.b32 %r1191, {%rs188, %rs188};
	// end inline asm
	mov.u16 	%rs190, 21504;
	// begin inline asm
	mov.b32 %r1202, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1190, %r1727, -2004318072;
	mov.u32 	%r1327, 983055;
	// begin inline asm
	lop3.b32 %r1188, %r1327, %r1190, %r1191, 202;
	// end inline asm
	mov.u16 	%rs194, 18432;
	// begin inline asm
	mov.b32 %r1192, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1193, %r1191, %r1192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1196, %r1188, %r1193;
	// end inline asm
	mov.u32 	%r1338, 15728880;
	// begin inline asm
	lop3.b32 %r1199, %r1338, %r1190, %r1202, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1203, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1204, %r1202, %r1203;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1207, %r1199, %r1204;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1248, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1236, %r1733, -2004318072;
	// begin inline asm
	lop3.b32 %r1234, %r1327, %r1236, %r1237, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1238, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1239, %r1237, %r1238;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1242, %r1234, %r1239;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1245, %r1338, %r1236, %r1248, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1249, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1250, %r1248, %r1249;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1253, %r1245, %r1250;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1294, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1282, %r1739, -2004318072;
	// begin inline asm
	lop3.b32 %r1280, %r1327, %r1282, %r1283, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1284, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1285, %r1283, %r1284;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1288, %r1280, %r1285;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1291, %r1338, %r1282, %r1294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1295, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1296, %r1294, %r1295;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1299, %r1291, %r1296;
	// end inline asm
	// begin inline asm
	mov.b32 %r1329, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1340, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1328, %r1745, -2004318072;
	// begin inline asm
	lop3.b32 %r1326, %r1327, %r1328, %r1329, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1330, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1331, %r1329, %r1330;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1334, %r1326, %r1331;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1337, %r1338, %r1328, %r1340, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1341, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1342, %r1340, %r1341;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1345, %r1337, %r1342;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1196;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1370, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1207;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1373, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1242;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1376, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1253;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1379, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1288;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1382, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1299;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1385, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1334;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1388, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1345;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1391, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1657, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1457, %r1454}, {%r428, %r431}, {%r1370}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1466, %r1463}, {%r428, %r431}, {%r1373}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1475, %r1472}, {%r428, %r431}, {%r1376}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1484, %r1481}, {%r428, %r431}, {%r1379}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1493, %r1490}, {%r428, %r431}, {%r1382}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1502, %r1499}, {%r428, %r431}, {%r1385}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1511, %r1508}, {%r428, %r431}, {%r1388}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1520, %r1517}, {%r428, %r431}, {%r1391}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1450, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1452, %r1450, %r1454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1455, %r480, %r1457, %r1452;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1459, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1461, %r1459, %r1463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1464, %r480, %r1466, %r1461;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1468, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1470, %r1468, %r1472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r480, %r1475, %r1470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1477, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1479, %r1477, %r1481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1482, %r480, %r1484, %r1479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1486, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1488, %r1486, %r1490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1491, %r480, %r1493, %r1488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1495, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r1495, %r1499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r480, %r1502, %r1497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1504, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1506, %r1504, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r480, %r1511, %r1506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1513, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1515, %r1513, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r480, %r1520, %r1515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r483, %r1457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r480, %r1454, %r1522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1529, %r483, %r1466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r480, %r1463, %r1529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1536, %r483, %r1475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r480, %r1472, %r1536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1543, %r483, %r1484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r480, %r1481, %r1543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1550, %r483, %r1493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1553, %r480, %r1490, %r1550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1557, %r483, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r480, %r1499, %r1557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1564, %r483, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r480, %r1508, %r1564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1571, %r483, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1574, %r480, %r1517, %r1571;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1659, %r1660}, {%r524, %r530, %r527, %r533}, {%r1455, %r1525}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1667, %r1668}, {%r524, %r530, %r527, %r533}, {%r1464, %r1532}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1675, %r1676}, {%r524, %r530, %r527, %r533}, {%r1473, %r1539}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1683, %r1684}, {%r524, %r530, %r527, %r533}, {%r1482, %r1546}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1691, %r1692}, {%r524, %r530, %r527, %r533}, {%r1491, %r1553}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1699, %r1700}, {%r524, %r530, %r527, %r533}, {%r1500, %r1560}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1707, %r1708}, {%r524, %r530, %r527, %r533}, {%r1509, %r1567}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1715, %r1716}, {%r524, %r530, %r527, %r533}, {%r1518, %r1574}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1658, %r1659, %r1660, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1662, %r1659, %r1660, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1666, %r1667, %r1668, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1670, %r1667, %r1668, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1674, %r1675, %r1676, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1678, %r1675, %r1676, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1682, %r1683, %r1684, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1686, %r1683, %r1684, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1690, %r1691, %r1692, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1694, %r1691, %r1692, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1698, %r1699, %r1700, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1702, %r1699, %r1700, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1706, %r1707, %r1708, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1710, %r1707, %r1708, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1714, %r1715, %r1716, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1718, %r1715, %r1716, %r1018;
	// end inline asm
	st.shared.u32 	[%rd7], %r1658;
	st.shared.u32 	[%rd8], %r1662;
	st.shared.u32 	[%rd9], %r1666;
	st.shared.u32 	[%rd10], %r1670;
	st.shared.u32 	[%rd17], %r1674;
	st.shared.u32 	[%rd18], %r1678;
	st.shared.u32 	[%rd9+256], %r1682;
	st.shared.u32 	[%rd10+256], %r1686;
	st.shared.u32 	[%rd19], %r1690;
	st.shared.u32 	[%rd20], %r1694;
	st.shared.u32 	[%rd9+512], %r1698;
	st.shared.u32 	[%rd10+512], %r1702;
	st.shared.u32 	[%rd21], %r1706;
	st.shared.u32 	[%rd22], %r1710;
	st.shared.u32 	[%rd9+768], %r1714;
	st.shared.u32 	[%rd10+768], %r1718;
	@%p276 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %pass8539
                                        //   in Loop: Header=BB0_177 Depth=2
	st.shared.u32 	[%rd7], %r1658;
	st.shared.u32 	[%rd8], %r1662;
	st.shared.u32 	[%rd9], %r1666;
	st.shared.u32 	[%rd10], %r1670;
	st.shared.u32 	[%rd17], %r1674;
	st.shared.u32 	[%rd18], %r1678;
	st.shared.u32 	[%rd9+256], %r1682;
	st.shared.u32 	[%rd10+256], %r1686;
	st.shared.u32 	[%rd19], %r1690;
	st.shared.u32 	[%rd20], %r1694;
	st.shared.u32 	[%rd9+512], %r1698;
	st.shared.u32 	[%rd10+512], %r1702;
	st.shared.u32 	[%rd21], %r1706;
	st.shared.u32 	[%rd22], %r1710;
	st.shared.u32 	[%rd9+768], %r1714;
	st.shared.u32 	[%rd10+768], %r1718;
$L__BB0_178:                            // %L22306
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	mov.u32 	%r3772, %r1657;
	mov.u32 	%r3773, %r1657;
	mov.u32 	%r3774, %r1657;
	mov.u32 	%r3775, %r1657;
	@%p276 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_179;
$L__BB0_252:                            // %pass10634
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3772, [%rd11];
	ld.shared.u32 	%r3773, [%rd12];
	ld.shared.u32 	%r3774, [%rd13];
	ld.shared.u32 	%r3775, [%rd14];
$L__BB0_179:                            // %L23381
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1782, %r1779}, {%r542, %r545}, {%r3772}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1791, %r1788}, {%r542, %r545}, {%r3773}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1800, %r1797}, {%r542, %r545}, {%r3774}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1809, %r1806}, {%r542, %r545}, {%r3775}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1775, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r1775, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r594, %r1782, %r1777;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1784, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1786, %r1784, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r594, %r1791, %r1786;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1793, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1795, %r1793, %r1797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r594, %r1800, %r1795;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1802, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1804, %r1802, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r594, %r1809, %r1804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1811, %r597, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1814, %r594, %r1779, %r1811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1818, %r597, %r1791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r594, %r1788, %r1818;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r597, %r1800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r594, %r1797, %r1825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1832, %r597, %r1809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r594, %r1806, %r1832;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1880, %r1883}, {%r638, %r644, %r641, %r647}, {%r1780, %r1814}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1899, %r1902}, {%r638, %r644, %r641, %r647}, {%r1789, %r1821}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1887, %r1891}, {%r638, %r644, %r641, %r647}, {%r1798, %r1828}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1906, %r1910}, {%r638, %r644, %r641, %r647}, {%r1807, %r1835}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1879, %r1880, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r1883, %r1883, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r1887, %r1887, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r1891, %r1891, %r1886;
	// end inline asm
	mov.u32 	%r1914, 559227221;
	// begin inline asm
	fma.rn.f16x2 %r1894, %r1914, %r1890, %r3771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1898, %r1899, %r1899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r1902, %r1902, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1905, %r1906, %r1906, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1909, %r1910, %r1910, %r1905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r1914, %r1909, %r3770;
	// end inline asm
	mov.u32 	%r3776, %r1657;
	mov.u32 	%r3777, %r1657;
	mov.u32 	%r3778, %r1657;
	mov.u32 	%r3779, %r1657;
	@%p276 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_180;
$L__BB0_253:                            // %pass11239
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3776, [%rd23];
	ld.shared.u32 	%r3777, [%rd24];
	ld.shared.u32 	%r3778, [%rd25];
	ld.shared.u32 	%r3779, [%rd26];
$L__BB0_180:                            // %L24600
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1953, %r1950}, {%r542, %r545}, {%r3776}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1962, %r1959}, {%r542, %r545}, {%r3777}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1971, %r1968}, {%r542, %r545}, {%r3778}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1980, %r1977}, {%r542, %r545}, {%r3779}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1946, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1948, %r1946, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r594, %r1953, %r1948;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1955, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1957, %r1955, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1960, %r594, %r1962, %r1957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1964, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1966, %r1964, %r1968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r594, %r1971, %r1966;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1973, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1975, %r1973, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1978, %r594, %r1980, %r1975;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1982, %r597, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r594, %r1950, %r1982;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1989, %r597, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r594, %r1959, %r1989;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1996, %r597, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r594, %r1968, %r1996;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2003, %r597, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r594, %r1977, %r2003;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2051, %r2054}, {%r638, %r644, %r641, %r647}, {%r1951, %r1985}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2070, %r2073}, {%r638, %r644, %r641, %r647}, {%r1960, %r1992}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2058, %r2062}, {%r638, %r644, %r641, %r647}, {%r1969, %r1999}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2077, %r2081}, {%r638, %r644, %r641, %r647}, {%r1978, %r2006}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r2051, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r2054, %r2054, %r2050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r2058, %r2058, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r2062, %r2062, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2065, %r1914, %r2061, %r1894;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2069, %r2070, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r2073, %r2073, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r2077, %r2077, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r2081, %r2081, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2084, %r1914, %r2080, %r1913;
	// end inline asm
	mov.u32 	%r3780, %r1657;
	mov.u32 	%r3781, %r1657;
	mov.u32 	%r3782, %r1657;
	mov.u32 	%r3783, %r1657;
	@%p276 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_181;
$L__BB0_254:                            // %pass11844
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3780, [%rd27];
	ld.shared.u32 	%r3781, [%rd28];
	ld.shared.u32 	%r3782, [%rd29];
	ld.shared.u32 	%r3783, [%rd30];
$L__BB0_181:                            // %L25819
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2124, %r2121}, {%r542, %r545}, {%r3780}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2133, %r2130}, {%r542, %r545}, {%r3781}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2142, %r2139}, {%r542, %r545}, {%r3782}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2151, %r2148}, {%r542, %r545}, {%r3783}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2117, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r2117, %r2121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2122, %r594, %r2124, %r2119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2126, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2128, %r2126, %r2130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2131, %r594, %r2133, %r2128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2135, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2137, %r2135, %r2139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2140, %r594, %r2142, %r2137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2144, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r2144, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r594, %r2151, %r2146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r597, %r2124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2156, %r594, %r2121, %r2153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2160, %r597, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2163, %r594, %r2130, %r2160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2167, %r597, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r594, %r2139, %r2167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2174, %r597, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r594, %r2148, %r2174;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2222, %r2225}, {%r638, %r644, %r641, %r647}, {%r2122, %r2156}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2241, %r2244}, {%r638, %r644, %r641, %r647}, {%r2131, %r2163}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2229, %r2233}, {%r638, %r644, %r641, %r647}, {%r2140, %r2170}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2248, %r2252}, {%r638, %r644, %r641, %r647}, {%r2149, %r2177}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2221, %r2222, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r2225, %r2225, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2228, %r2229, %r2229, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r2233, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r1914, %r2232, %r2065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2240, %r2241, %r2241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r2244, %r2244, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r2248, %r2248, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2251, %r2252, %r2252, %r2247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2255, %r1914, %r2251, %r2084;
	// end inline asm
	mov.u32 	%r3784, %r1657;
	mov.u32 	%r3785, %r1657;
	mov.u32 	%r3786, %r1657;
	mov.u32 	%r3787, %r1657;
	@%p276 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_182;
$L__BB0_255:                            // %pass12449
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3784, [%rd31];
	ld.shared.u32 	%r3785, [%rd32];
	ld.shared.u32 	%r3786, [%rd33];
	ld.shared.u32 	%r3787, [%rd34];
$L__BB0_182:                            // %L27038
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2295, %r2292}, {%r542, %r545}, {%r3784}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2304, %r2301}, {%r542, %r545}, {%r3785}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2313, %r2310}, {%r542, %r545}, {%r3786}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2322, %r2319}, {%r542, %r545}, {%r3787}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2288, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2290, %r2288, %r2292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2293, %r594, %r2295, %r2290;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2297, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2299, %r2297, %r2301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2302, %r594, %r2304, %r2299;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2306, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2308, %r2306, %r2310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2311, %r594, %r2313, %r2308;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2315, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2317, %r2315, %r2319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2320, %r594, %r2322, %r2317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2324, %r597, %r2295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2327, %r594, %r2292, %r2324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2331, %r597, %r2304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2334, %r594, %r2301, %r2331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2338, %r597, %r2313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2341, %r594, %r2310, %r2338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2345, %r597, %r2322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2348, %r594, %r2319, %r2345;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2393, %r2396}, {%r638, %r644, %r641, %r647}, {%r2293, %r2327}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2412, %r2415}, {%r638, %r644, %r641, %r647}, {%r2302, %r2334}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2400, %r2404}, {%r638, %r644, %r641, %r647}, {%r2311, %r2341}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2419, %r2423}, {%r638, %r644, %r641, %r647}, {%r2320, %r2348}, {%r1657, %r1657};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2392, %r2393, %r2393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2395, %r2396, %r2396, %r2392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2399, %r2400, %r2400, %r2395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2403, %r2404, %r2404, %r2399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3771, %r1914, %r2403, %r2236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2411, %r2412, %r2412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2414, %r2415, %r2415, %r2411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2418, %r2419, %r2419, %r2414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2422, %r2423, %r2423, %r2418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3770, %r1914, %r2422, %r2255;
	// end inline asm
	add.s32 	%r3768, %r3768, 4;
	setp.eq.s32 	%p287, %r3768, 12;
	@%p287 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_185;
$L__BB0_183:                            // %pass12918
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_184;
// %bb.256:                             // %pass12928
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2430, %r3769, 589824;
	add.s32 	%r2431, %r122, %r2430;
	cvt.s64.s32 	%rd258, %r2431;
	add.s64 	%rd259, %rd258, %rd15;
	mul.hi.s64 	%rd260, %rd259, 1024819115206086201;
	shr.u64 	%rd261, %rd260, 63;
	shr.s64 	%rd262, %rd260, 25;
	add.s64 	%rd263, %rd262, %rd261;
	setp.lt.s64 	%p289, %rd259, 0;
	mul.lo.s64 	%rd264, %rd263, 603979776;
	setp.ne.s64 	%p290, %rd264, %rd259;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd265, -1, 0, %p291;
	add.s64 	%rd266, %rd263, %rd265;
	mul.lo.s64 	%rd267, %rd266, -603979776;
	add.s64 	%rd268, %rd267, %rd259;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd270, %rd4, %rd269;
	st.global.u32 	[%rd270], %r3771;
	add.s32 	%r2432, %r123, %r2430;
	cvt.s64.s32 	%rd271, %r2432;
	add.s64 	%rd272, %rd271, %rd15;
	mul.hi.s64 	%rd273, %rd272, 1024819115206086201;
	shr.u64 	%rd274, %rd273, 63;
	shr.s64 	%rd275, %rd273, 25;
	add.s64 	%rd276, %rd275, %rd274;
	setp.lt.s64 	%p292, %rd272, 0;
	mul.lo.s64 	%rd277, %rd276, 603979776;
	setp.ne.s64 	%p293, %rd277, %rd272;
	and.pred  	%p294, %p292, %p293;
	selp.s64 	%rd278, -1, 0, %p294;
	add.s64 	%rd279, %rd276, %rd278;
	mul.lo.s64 	%rd280, %rd279, -603979776;
	add.s64 	%rd281, %rd280, %rd272;
	shl.b64 	%rd282, %rd281, 2;
	add.s64 	%rd283, %rd4, %rd282;
	st.global.u32 	[%rd283], %r3770;
	bra.uni 	$L__BB0_184;
$L__BB0_186:                            // %L27596.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3792, 12;
	bra.uni 	$L__BB0_187;
$L__BB0_194:                            // %L41234
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3769, %r3769, 1;
	mov.u32 	%r3768, 0;
	mov.u32 	%r3770, %r3768;
	mov.u32 	%r3771, %r3768;
$L__BB0_195:                            // %L41235
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	add.s32 	%r3792, %r3792, -4;
	setp.ne.s32 	%p315, %r3792, -12;
	@%p315 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_196;
$L__BB0_187:                            // %L27596
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p297, %r3792, 12;
	selp.b32 	%r2971, %r3743, 0, %p297;
	setp.eq.s32 	%p298, %r3792, 8;
	selp.b32 	%r2972, %r3747, %r2971, %p298;
	setp.eq.s32 	%p299, %r3792, 4;
	selp.b32 	%r2973, %r3751, %r2972, %p299;
	setp.eq.s32 	%p300, %r3792, 0;
	selp.b32 	%r2974, %r3755, %r2973, %p300;
	setp.eq.s32 	%p301, %r3792, -4;
	selp.b32 	%r2975, %r3759, %r2974, %p301;
	setp.eq.s32 	%p302, %r3792, -8;
	selp.b32 	%r2976, %r3763, %r2975, %p302;
	selp.b32 	%r2977, %r3744, 0, %p297;
	selp.b32 	%r2978, %r3748, %r2977, %p298;
	selp.b32 	%r2979, %r3752, %r2978, %p299;
	selp.b32 	%r2980, %r3756, %r2979, %p300;
	selp.b32 	%r2981, %r3760, %r2980, %p301;
	selp.b32 	%r2982, %r3764, %r2981, %p302;
	selp.b32 	%r2983, %r3745, 0, %p297;
	selp.b32 	%r2984, %r3749, %r2983, %p298;
	selp.b32 	%r2985, %r3753, %r2984, %p299;
	selp.b32 	%r2986, %r3757, %r2985, %p300;
	selp.b32 	%r2987, %r3761, %r2986, %p301;
	selp.b32 	%r2988, %r3765, %r2987, %p302;
	selp.b32 	%r2989, %r3746, 0, %p297;
	selp.b32 	%r2990, %r3750, %r2989, %p298;
	selp.b32 	%r2991, %r3754, %r2990, %p299;
	selp.b32 	%r2992, %r3758, %r2991, %p300;
	selp.b32 	%r2993, %r3762, %r2992, %p301;
	selp.b32 	%r2994, %r3766, %r2993, %p302;
	// begin inline asm
	mov.b32 %r2462, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2473, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2995, %r2976, 8;
	xor.b32  	%r2472, %r2995, 8947848;
	// begin inline asm
	lop3.b32 %r2459, %r1327, %r2472, %r2462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2463, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2464, %r2462, %r2463;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2467, %r2459, %r2464;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2470, %r1338, %r2472, %r2473, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2475, %r2473, %r2474;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2478, %r2470, %r2475;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2519, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2996, %r2982, 8;
	xor.b32  	%r2518, %r2996, 8947848;
	// begin inline asm
	lop3.b32 %r2505, %r1327, %r2518, %r2508, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2509, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2510, %r2508, %r2509;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2513, %r2505, %r2510;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2516, %r1338, %r2518, %r2519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2521, %r2519, %r2520;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2524, %r2516, %r2521;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2565, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2997, %r2988, 8;
	xor.b32  	%r2564, %r2997, 8947848;
	// begin inline asm
	lop3.b32 %r2551, %r1327, %r2564, %r2554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2555, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2556, %r2554, %r2555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2559, %r2551, %r2556;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2562, %r1338, %r2564, %r2565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2566, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2567, %r2565, %r2566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2570, %r2562, %r2567;
	// end inline asm
	// begin inline asm
	mov.b32 %r2600, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2611, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2998, %r2994, 8;
	xor.b32  	%r2610, %r2998, 8947848;
	// begin inline asm
	lop3.b32 %r2597, %r1327, %r2610, %r2600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2601, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2602, %r2600, %r2601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2605, %r2597, %r2602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2608, %r1338, %r2610, %r2611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2612, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2613, %r2611, %r2612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2616, %r2608, %r2613;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2467;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2619, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2478;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2622, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2513;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2625, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2524;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2628, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2559;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2631, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2570;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2634, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2605;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2637, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2616;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2640, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2906, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2706, %r2703}, {%r428, %r431}, {%r2619}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2715, %r2712}, {%r428, %r431}, {%r2622}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2724, %r2721}, {%r428, %r431}, {%r2625}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2733, %r2730}, {%r428, %r431}, {%r2628}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2742, %r2739}, {%r428, %r431}, {%r2631}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2751, %r2748}, {%r428, %r431}, {%r2634}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2760, %r2757}, {%r428, %r431}, {%r2637}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2769, %r2766}, {%r428, %r431}, {%r2640}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2699, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r2699, %r2703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2704, %r480, %r2706, %r2701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2708, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2710, %r2708, %r2712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2713, %r480, %r2715, %r2710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2717, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2719, %r2717, %r2721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r480, %r2724, %r2719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2726, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2728, %r2726, %r2730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2731, %r480, %r2733, %r2728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2735, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2737, %r2735, %r2739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r480, %r2742, %r2737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2744, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r2744, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r480, %r2751, %r2746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2753, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2755, %r2753, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2758, %r480, %r2760, %r2755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2762, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2764, %r2762, %r2766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2767, %r480, %r2769, %r2764;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2771, %r483, %r2706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2774, %r480, %r2703, %r2771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2778, %r483, %r2715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r480, %r2712, %r2778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2785, %r483, %r2724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r480, %r2721, %r2785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2792, %r483, %r2733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r480, %r2730, %r2792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2799, %r483, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2802, %r480, %r2739, %r2799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2806, %r483, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2809, %r480, %r2748, %r2806;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2813, %r483, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2816, %r480, %r2757, %r2813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2820, %r483, %r2769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2823, %r480, %r2766, %r2820;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2908, %r2909}, {%r524, %r530, %r527, %r533}, {%r2704, %r2774}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2916, %r2917}, {%r524, %r530, %r527, %r533}, {%r2713, %r2781}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2924, %r2925}, {%r524, %r530, %r527, %r533}, {%r2722, %r2788}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2932, %r2933}, {%r524, %r530, %r527, %r533}, {%r2731, %r2795}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2940, %r2941}, {%r524, %r530, %r527, %r533}, {%r2740, %r2802}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2948, %r2949}, {%r524, %r530, %r527, %r533}, {%r2749, %r2809}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2956, %r2957}, {%r524, %r530, %r527, %r533}, {%r2758, %r2816}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2964, %r2965}, {%r524, %r530, %r527, %r533}, {%r2767, %r2823}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2907, %r2908, %r2909, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2911, %r2908, %r2909, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2915, %r2916, %r2917, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2919, %r2916, %r2917, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2923, %r2924, %r2925, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2927, %r2924, %r2925, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2931, %r2932, %r2933, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2935, %r2932, %r2933, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2939, %r2940, %r2941, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2943, %r2940, %r2941, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2947, %r2948, %r2949, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2951, %r2948, %r2949, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2955, %r2956, %r2957, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2959, %r2956, %r2957, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2963, %r2964, %r2965, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2967, %r2964, %r2965, %r1018;
	// end inline asm
	st.shared.u32 	[%rd7], %r2907;
	st.shared.u32 	[%rd8], %r2911;
	st.shared.u32 	[%rd9], %r2915;
	st.shared.u32 	[%rd10], %r2919;
	st.shared.u32 	[%rd17], %r2923;
	st.shared.u32 	[%rd18], %r2927;
	st.shared.u32 	[%rd9+256], %r2931;
	st.shared.u32 	[%rd10+256], %r2935;
	st.shared.u32 	[%rd19], %r2939;
	st.shared.u32 	[%rd20], %r2943;
	st.shared.u32 	[%rd9+512], %r2947;
	st.shared.u32 	[%rd10+512], %r2951;
	st.shared.u32 	[%rd21], %r2955;
	st.shared.u32 	[%rd22], %r2959;
	st.shared.u32 	[%rd9+768], %r2963;
	st.shared.u32 	[%rd10+768], %r2967;
	@%p276 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_188;
$L__BB0_257:                            // %pass15335
                                        //   in Loop: Header=BB0_187 Depth=2
	st.shared.u32 	[%rd7], %r2907;
	st.shared.u32 	[%rd8], %r2911;
	st.shared.u32 	[%rd9], %r2915;
	st.shared.u32 	[%rd10], %r2919;
	st.shared.u32 	[%rd17], %r2923;
	st.shared.u32 	[%rd18], %r2927;
	st.shared.u32 	[%rd9+256], %r2931;
	st.shared.u32 	[%rd10+256], %r2935;
	st.shared.u32 	[%rd19], %r2939;
	st.shared.u32 	[%rd20], %r2943;
	st.shared.u32 	[%rd9+512], %r2947;
	st.shared.u32 	[%rd10+512], %r2951;
	st.shared.u32 	[%rd21], %r2955;
	st.shared.u32 	[%rd22], %r2959;
	st.shared.u32 	[%rd9+768], %r2963;
	st.shared.u32 	[%rd10+768], %r2967;
$L__BB0_188:                            // %L35970
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	mov.u32 	%r3797, %r2906;
	mov.u32 	%r3798, %r2906;
	mov.u32 	%r3799, %r2906;
	mov.u32 	%r3800, %r2906;
	@%p276 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_189;
$L__BB0_258:                            // %pass17430
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3800, [%rd11];
	ld.shared.u32 	%r3799, [%rd12];
	ld.shared.u32 	%r3798, [%rd13];
	ld.shared.u32 	%r3797, [%rd14];
$L__BB0_189:                            // %L37045
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3035, %r3032}, {%r542, %r545}, {%r3800}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3044, %r3041}, {%r542, %r545}, {%r3799}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3053, %r3050}, {%r542, %r545}, {%r3798}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3062, %r3059}, {%r542, %r545}, {%r3797}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3028, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3030, %r3028, %r3032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3033, %r594, %r3035, %r3030;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3037, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3039, %r3037, %r3041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3042, %r594, %r3044, %r3039;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3046, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3048, %r3046, %r3050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r594, %r3053, %r3048;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3055, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3057, %r3055, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r594, %r3062, %r3057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3064, %r597, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r594, %r3032, %r3064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3071, %r597, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3074, %r594, %r3041, %r3071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r597, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r594, %r3050, %r3078;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3085, %r597, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r594, %r3059, %r3085;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3133, %r3136}, {%r638, %r644, %r641, %r647}, {%r3033, %r3067}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3152, %r3155}, {%r638, %r644, %r641, %r647}, {%r3042, %r3074}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3140, %r3144}, {%r638, %r644, %r641, %r647}, {%r3051, %r3081}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3159, %r3163}, {%r638, %r644, %r641, %r647}, {%r3060, %r3088}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3132, %r3133, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r3136, %r3136, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3140, %r3140, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3144, %r3144, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r1914, %r3143, %r3771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3151, %r3152, %r3152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r3155, %r3155, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r3159, %r3159, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r3163, %r3163, %r3158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3166, %r1914, %r3162, %r3770;
	// end inline asm
	mov.u32 	%r3801, %r2906;
	mov.u32 	%r3802, %r2906;
	mov.u32 	%r3803, %r2906;
	mov.u32 	%r3804, %r2906;
	@%p276 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_190;
$L__BB0_259:                            // %pass18035
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3804, [%rd23];
	ld.shared.u32 	%r3803, [%rd24];
	ld.shared.u32 	%r3802, [%rd25];
	ld.shared.u32 	%r3801, [%rd26];
$L__BB0_190:                            // %L38264
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3206, %r3203}, {%r542, %r545}, {%r3804}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3215, %r3212}, {%r542, %r545}, {%r3803}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3224, %r3221}, {%r542, %r545}, {%r3802}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3233, %r3230}, {%r542, %r545}, {%r3801}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3199, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3201, %r3199, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3204, %r594, %r3206, %r3201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3208, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3210, %r3208, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3213, %r594, %r3215, %r3210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3217, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3219, %r3217, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r594, %r3224, %r3219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3226, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3228, %r3226, %r3230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3231, %r594, %r3233, %r3228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3235, %r597, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3238, %r594, %r3203, %r3235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3242, %r597, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r594, %r3212, %r3242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3249, %r597, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3252, %r594, %r3221, %r3249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3256, %r597, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r594, %r3230, %r3256;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3304, %r3307}, {%r638, %r644, %r641, %r647}, {%r3204, %r3238}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3323, %r3326}, {%r638, %r644, %r641, %r647}, {%r3213, %r3245}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3311, %r3315}, {%r638, %r644, %r641, %r647}, {%r3222, %r3252}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3330, %r3334}, {%r638, %r644, %r641, %r647}, {%r3231, %r3259}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3303, %r3304, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3306, %r3307, %r3307, %r3303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r3311, %r3311, %r3306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r3315, %r3315, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r1914, %r3314, %r3147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3322, %r3323, %r3323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r3326, %r3326, %r3322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3329, %r3330, %r3330, %r3325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3333, %r3334, %r3334, %r3329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3337, %r1914, %r3333, %r3166;
	// end inline asm
	mov.u32 	%r3805, %r2906;
	mov.u32 	%r3806, %r2906;
	mov.u32 	%r3807, %r2906;
	mov.u32 	%r3808, %r2906;
	@%p276 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_191;
$L__BB0_260:                            // %pass18640
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3808, [%rd27];
	ld.shared.u32 	%r3807, [%rd28];
	ld.shared.u32 	%r3806, [%rd29];
	ld.shared.u32 	%r3805, [%rd30];
$L__BB0_191:                            // %L39483
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3377, %r3374}, {%r542, %r545}, {%r3808}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3386, %r3383}, {%r542, %r545}, {%r3807}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3395, %r3392}, {%r542, %r545}, {%r3806}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3404, %r3401}, {%r542, %r545}, {%r3805}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3370, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3372, %r3370, %r3374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3375, %r594, %r3377, %r3372;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3379, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3381, %r3379, %r3383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3384, %r594, %r3386, %r3381;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3388, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3390, %r3388, %r3392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3393, %r594, %r3395, %r3390;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3397, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3399, %r3397, %r3401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3402, %r594, %r3404, %r3399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3406, %r597, %r3377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3409, %r594, %r3374, %r3406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3413, %r597, %r3386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3416, %r594, %r3383, %r3413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3420, %r597, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3423, %r594, %r3392, %r3420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3427, %r597, %r3404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3430, %r594, %r3401, %r3427;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3475, %r3478}, {%r638, %r644, %r641, %r647}, {%r3375, %r3409}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3494, %r3497}, {%r638, %r644, %r641, %r647}, {%r3384, %r3416}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3482, %r3486}, {%r638, %r644, %r641, %r647}, {%r3393, %r3423}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3501, %r3505}, {%r638, %r644, %r641, %r647}, {%r3402, %r3430}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3474, %r3475, %r3475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r3478, %r3478, %r3474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3481, %r3482, %r3482, %r3477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3485, %r3486, %r3486, %r3481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r1914, %r3485, %r3318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3493, %r3494, %r3494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r3497, %r3497, %r3493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r3501, %r3501, %r3496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r3505, %r3505, %r3500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r1914, %r3504, %r3337;
	// end inline asm
	mov.u32 	%r3809, %r2906;
	mov.u32 	%r3810, %r2906;
	mov.u32 	%r3811, %r2906;
	mov.u32 	%r3812, %r2906;
	@%p276 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_192;
$L__BB0_261:                            // %pass19245
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3812, [%rd31];
	ld.shared.u32 	%r3811, [%rd32];
	ld.shared.u32 	%r3810, [%rd33];
	ld.shared.u32 	%r3809, [%rd34];
$L__BB0_192:                            // %L40702
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3548, %r3545}, {%r542, %r545}, {%r3812}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3557, %r3554}, {%r542, %r545}, {%r3811}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3566, %r3563}, {%r542, %r545}, {%r3810}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3575, %r3572}, {%r542, %r545}, {%r3809}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3541, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3543, %r3541, %r3545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r594, %r3548, %r3543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3550, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3552, %r3550, %r3554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r594, %r3557, %r3552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3559, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3561, %r3559, %r3563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r594, %r3566, %r3561;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3568, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3570, %r3568, %r3572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3573, %r594, %r3575, %r3570;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3577, %r597, %r3548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3580, %r594, %r3545, %r3577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3584, %r597, %r3557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3587, %r594, %r3554, %r3584;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3591, %r597, %r3566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3594, %r594, %r3563, %r3591;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3598, %r597, %r3575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3601, %r594, %r3572, %r3598;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3646, %r3649}, {%r638, %r644, %r641, %r647}, {%r3546, %r3580}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3665, %r3668}, {%r638, %r644, %r641, %r647}, {%r3555, %r3587}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3653, %r3657}, {%r638, %r644, %r641, %r647}, {%r3564, %r3594}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3672, %r3676}, {%r638, %r644, %r641, %r647}, {%r3573, %r3601}, {%r2906, %r2906};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3645, %r3646, %r3646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3648, %r3649, %r3649, %r3645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3652, %r3653, %r3653, %r3648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3656, %r3657, %r3657, %r3652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3771, %r1914, %r3656, %r3489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3664, %r3665, %r3665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3667, %r3668, %r3668, %r3664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3671, %r3672, %r3672, %r3667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3675, %r3676, %r3676, %r3671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3770, %r1914, %r3675, %r3508;
	// end inline asm
	add.s32 	%r3768, %r3768, 4;
	setp.eq.s32 	%p307, %r3768, 12;
	@%p307 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_195;
$L__BB0_193:                            // %pass19714
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_194;
// %bb.262:                             // %pass19724
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3683, %r3769, 589824;
	add.s32 	%r3684, %r122, %r3683;
	cvt.s64.s32 	%rd284, %r3684;
	add.s64 	%rd285, %rd284, %rd15;
	mul.hi.s64 	%rd286, %rd285, 1024819115206086201;
	shr.u64 	%rd287, %rd286, 63;
	shr.s64 	%rd288, %rd286, 25;
	add.s64 	%rd289, %rd288, %rd287;
	setp.lt.s64 	%p309, %rd285, 0;
	mul.lo.s64 	%rd290, %rd289, 603979776;
	setp.ne.s64 	%p310, %rd290, %rd285;
	and.pred  	%p311, %p309, %p310;
	selp.s64 	%rd291, -1, 0, %p311;
	add.s64 	%rd292, %rd289, %rd291;
	mul.lo.s64 	%rd293, %rd292, -603979776;
	add.s64 	%rd294, %rd293, %rd285;
	shl.b64 	%rd295, %rd294, 2;
	add.s64 	%rd296, %rd4, %rd295;
	st.global.u32 	[%rd296], %r3771;
	add.s32 	%r3685, %r123, %r3683;
	cvt.s64.s32 	%rd297, %r3685;
	add.s64 	%rd298, %rd297, %rd15;
	mul.hi.s64 	%rd299, %rd298, 1024819115206086201;
	shr.u64 	%rd300, %rd299, 63;
	shr.s64 	%rd301, %rd299, 25;
	add.s64 	%rd302, %rd301, %rd300;
	setp.lt.s64 	%p312, %rd298, 0;
	mul.lo.s64 	%rd303, %rd302, 603979776;
	setp.ne.s64 	%p313, %rd303, %rd298;
	and.pred  	%p314, %p312, %p313;
	selp.s64 	%rd304, -1, 0, %p314;
	add.s64 	%rd305, %rd302, %rd304;
	mul.lo.s64 	%rd306, %rd305, -603979776;
	add.s64 	%rd307, %rd306, %rd298;
	shl.b64 	%rd308, %rd307, 2;
	add.s64 	%rd309, %rd4, %rd308;
	st.global.u32 	[%rd309], %r3770;
	bra.uni 	$L__BB0_194;
$L__BB0_197:                            // %L41270
	mov.u32 	%r3687, 0;
	st.global.u32 	[%rd6], %r3687;
	ret;
$L__BB0_152:                            // %L7443
	mov.u32 	%r3711, 5;
	st.global.u32 	[%rd6], %r3711;
	mov.u64 	%rd356, exception3856;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7599
	mov.u32 	%r3710, 5;
	st.global.u32 	[%rd6], %r3710;
	mov.u64 	%rd354, exception3856;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7755
	mov.u32 	%r3709, 5;
	st.global.u32 	[%rd6], %r3709;
	mov.u64 	%rd352, exception3856;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7911
	mov.u32 	%r3708, 5;
	st.global.u32 	[%rd6], %r3708;
	mov.u64 	%rd350, exception3856;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8067
	mov.u32 	%r3707, 5;
	st.global.u32 	[%rd6], %r3707;
	mov.u64 	%rd348, exception3856;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8223
	mov.u32 	%r3706, 5;
	st.global.u32 	[%rd6], %r3706;
	mov.u64 	%rd346, exception3856;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8379
	mov.u32 	%r3705, 5;
	st.global.u32 	[%rd6], %r3705;
	mov.u64 	%rd344, exception3856;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8535
	mov.u32 	%r3704, 5;
	st.global.u32 	[%rd6], %r3704;
	mov.u64 	%rd342, exception3856;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8691
	mov.u32 	%r3703, 5;
	st.global.u32 	[%rd6], %r3703;
	mov.u64 	%rd340, exception3856;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8847
	mov.u32 	%r3702, 5;
	st.global.u32 	[%rd6], %r3702;
	mov.u64 	%rd338, exception3856;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9003
	mov.u32 	%r3701, 5;
	st.global.u32 	[%rd6], %r3701;
	mov.u64 	%rd336, exception3856;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9159
	mov.u32 	%r3700, 5;
	st.global.u32 	[%rd6], %r3700;
	mov.u64 	%rd334, exception3856;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9315
	mov.u32 	%r3699, 5;
	st.global.u32 	[%rd6], %r3699;
	mov.u64 	%rd332, exception3856;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9471
	mov.u32 	%r3698, 5;
	st.global.u32 	[%rd6], %r3698;
	mov.u64 	%rd330, exception3856;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9627
	mov.u32 	%r3697, 5;
	st.global.u32 	[%rd6], %r3697;
	mov.u64 	%rd328, exception3856;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9783
	mov.u32 	%r3696, 5;
	st.global.u32 	[%rd6], %r3696;
	mov.u64 	%rd326, exception3856;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L9939
	mov.u32 	%r3695, 5;
	st.global.u32 	[%rd6], %r3695;
	mov.u64 	%rd324, exception3856;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10095
	mov.u32 	%r3694, 5;
	st.global.u32 	[%rd6], %r3694;
	mov.u64 	%rd322, exception3856;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10251
	mov.u32 	%r3693, 5;
	st.global.u32 	[%rd6], %r3693;
	mov.u64 	%rd320, exception3856;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10407
	mov.u32 	%r3692, 5;
	st.global.u32 	[%rd6], %r3692;
	mov.u64 	%rd318, exception3856;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10563
	mov.u32 	%r3691, 5;
	st.global.u32 	[%rd6], %r3691;
	mov.u64 	%rd316, exception3856;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10745
	mov.u32 	%r3690, 5;
	st.global.u32 	[%rd6], %r3690;
	mov.u64 	%rd314, exception3856;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L10901
	mov.u32 	%r3689, 5;
	st.global.u32 	[%rd6], %r3689;
	mov.u64 	%rd312, exception3856;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11057
	mov.u32 	%r3688, 5;
	st.global.u32 	[%rd6], %r3688;
	mov.u64 	%rd310, exception3856;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3713, 2;
	st.global.u32 	[%rd6], %r3713;
	mov.u64 	%rd360, exception3856;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3712, 3;
	st.global.u32 	[%rd6], %r3712;
	mov.u64 	%rd358, exception3856;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd41, exception1;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1143
	add.u64 	%rd40, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r2, %r3};
	st.local.v2.u32 	[%rd5+8], {%r1, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd46, __unnamed_1;
	cvta.global.u64 	%rd47, %rd46;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd47;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd40;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r658, [retval0+0];
	} // callseq 61
	mov.u32 	%r660, 4;
	st.global.u32 	[%rd6], %r660;
	mov.u64 	%rd49, exception3856;
	cvta.global.u64 	%rd50, %rd49;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd50;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
