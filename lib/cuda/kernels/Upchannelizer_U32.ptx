// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_6457
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1271[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<230>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2451>;
	.reg .f32 	%f<937>;
	.reg .b64 	%rd<132>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r146, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd53, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r147, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r147, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd58, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	ld.param.u64 	%rd54, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r148, %r1, 9;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r149, %r148, %r2;
	or.b32  	%r150, %r149, %r4;
	mul.wide.u32 	%rd64, %r150, 4;
	add.s64 	%rd4, %rd58, %rd64;
	mov.u32 	%r151, 1;
	st.global.u32 	[%rd4], %r151;
	ld.global.u32 	%r5, [%rd54];
	setp.lt.u32 	%p2, %r5, 32769;
	and.b32  	%r152, %r5, 255;
	setp.eq.s32 	%p3, %r152, 0;
	and.pred  	%p4, %p2, %p3;
	@%p4 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L242
	bfe.u32 	%r11, %r2, 1, 1;
	and.b32  	%r12, %r2, 1;
	bfe.u32 	%r14, %r2, 2, 1;
	shl.b32 	%r159, %r14, 1;
	shl.b32 	%r160, %r12, 2;
	shl.b32 	%r161, %r11, 3;
	or.b32  	%r162, %r160, %r161;
	or.b32  	%r163, %r159, %r162;
	shr.u32 	%r15, %r2, 4;
	or.b32  	%r16, %r15, %r163;
	or.b32  	%r17, %r16, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f1, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r16;
	sub.f32 	%f187, %f186, %f1;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p5, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p5;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r164, %f193;
	and.b32  	%r165, %r164, -2147483648;
	or.b32  	%r166, %r165, 1056964608;
	mov.b32 	%f194, %r166;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p6, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p6;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p7, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p7;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f3, %f187, %f216;
	setp.eq.f32 	%p10, %f3, 0f00000000;
	mov.f32 	%f904, 0f3F800000;
	mov.f32 	%f897, %f904;
	@%p10 bra 	LBB0_6;
// %bb.5:                               // %L429
	sin.approx.f32 	%f217, %f3;
	div.approx.f32 	%f897, %f217, %f3;
LBB0_6:                                 // %L432
	cvt.rzi.s32.f32 	%r167, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r17;
	sub.f32 	%f221, %f220, %f1;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p11, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p11;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r171, %f227;
	and.b32  	%r172, %r171, -2147483648;
	or.b32  	%r173, %r172, 1056964608;
	mov.b32 	%f228, %r173;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p12, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p12;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p13, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p13;
	cvt.rzi.s32.f32 	%r174, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f8, %f221, %f216;
	setp.eq.f32 	%p16, %f8, 0f00000000;
	mov.f32 	%f898, %f904;
	@%p16 bra 	LBB0_8;
// %bb.7:                               // %L449
	sin.approx.f32 	%f251, %f8;
	div.approx.f32 	%f898, %f251, %f8;
LBB0_8:                                 // %L452
	add.s32 	%r168, %r167, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r175, %r174, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r181, %r16, 32;
	or.b32  	%r19, %r16, 48;
	cvt.rn.f32.s32 	%f255, %r181;
	sub.f32 	%f256, %f255, %f1;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p17, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p17;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r182, %f262;
	and.b32  	%r183, %r182, -2147483648;
	or.b32  	%r184, %r183, 1056964608;
	mov.b32 	%f263, %r184;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p18, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p18;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p19, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p19;
	cvt.rzi.s32.f32 	%r185, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r186, %r185, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f12, %f256, %f216;
	setp.eq.f32 	%p22, %f12, 0f00000000;
	mov.f32 	%f899, %f904;
	@%p22 bra 	LBB0_10;
// %bb.9:                               // %L530
	sin.approx.f32 	%f286, %f12;
	div.approx.f32 	%f899, %f286, %f12;
LBB0_10:                                // %L533
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r169, %r168, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r176, %r175, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r187, %r186, 1;
	cvt.rn.f32.s32 	%f289, %r19;
	sub.f32 	%f290, %f289, %f1;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p23, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p23;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r189, %f296;
	and.b32  	%r190, %r189, -2147483648;
	or.b32  	%r191, %r190, 1056964608;
	mov.b32 	%f297, %r191;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p24, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p24;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p25, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p25;
	cvt.rzi.s32.f32 	%r192, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r193, %r192, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r194, %r193, 1;
	div.approx.f32 	%f17, %f290, %f216;
	setp.eq.f32 	%p28, %f17, 0f00000000;
	mov.f32 	%f900, %f904;
	@%p28 bra 	LBB0_12;
// %bb.11:                              // %L550
	sin.approx.f32 	%f320, %f17;
	div.approx.f32 	%f900, %f320, %f17;
LBB0_12:                                // %L553
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p8, %r169, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p14, %r176, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p20, %r187, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p26, %r194, 1;
	or.b32  	%r199, %r16, 64;
	or.b32  	%r21, %r16, 80;
	cvt.rn.f32.s32 	%f324, %r199;
	sub.f32 	%f325, %f324, %f1;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p29, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p29;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r200, %f331;
	and.b32  	%r201, %r200, -2147483648;
	or.b32  	%r202, %r201, 1056964608;
	mov.b32 	%f332, %r202;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p30, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p30;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p31, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p31;
	cvt.rzi.s32.f32 	%r203, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r204, %r203, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r205, %r204, 1;
	setp.eq.b32 	%p32, %r205, 1;
	div.approx.f32 	%f21, %f325, %f216;
	setp.eq.f32 	%p34, %f21, 0f00000000;
	mov.f32 	%f901, %f904;
	@%p34 bra 	LBB0_14;
// %bb.13:                              // %L631
	sin.approx.f32 	%f355, %f21;
	div.approx.f32 	%f901, %f355, %f21;
LBB0_14:                                // %L634
	shl.b32 	%r6, %r2, 2;
	selp.f32 	%f212, %f210, %f211, %p8;
	and.b32  	%r170, %r168, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p14;
	and.b32  	%r177, %r175, 2;
	selp.f32 	%f281, %f279, %f280, %p20;
	and.b32  	%r188, %r186, 2;
	selp.f32 	%f315, %f313, %f314, %p26;
	and.b32  	%r195, %r193, 2;
	selp.f32 	%f350, %f348, %f349, %p32;
	and.b32  	%r206, %r204, 2;
	cvt.rn.f32.s32 	%f358, %r21;
	sub.f32 	%f359, %f358, %f1;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p35, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p35;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r207, %f365;
	and.b32  	%r208, %r207, -2147483648;
	or.b32  	%r209, %r208, 1056964608;
	mov.b32 	%f366, %r209;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p36, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p36;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p37, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p37;
	cvt.rzi.s32.f32 	%r210, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r211, %r210, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r212, %r211, 1;
	setp.eq.b32 	%p38, %r212, 1;
	selp.f32 	%f384, %f382, %f383, %p38;
	and.b32  	%r213, %r211, 2;
	div.approx.f32 	%f26, %f359, %f216;
	setp.eq.f32 	%p40, %f26, 0f00000000;
	mov.f32 	%f902, %f904;
	@%p40 bra 	LBB0_16;
// %bb.15:                              // %L651
	sin.approx.f32 	%f389, %f26;
	div.approx.f32 	%f902, %f389, %f26;
LBB0_16:                                // %L654
	and.b32  	%r154, %r6, 4;
	shl.b32 	%r7, %r2, 1;
	and.b32  	%r156, %r2, 18;
	setp.eq.s32 	%p9, %r170, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p15, %r177, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p21, %r188, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p27, %r195, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p33, %r206, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p39, %r213, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r217, %r16, 96;
	or.b32  	%r23, %r16, 112;
	cvt.rn.f32.s32 	%f393, %r217;
	sub.f32 	%f394, %f393, %f1;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p41, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p41;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r218, %f400;
	and.b32  	%r219, %r218, -2147483648;
	or.b32  	%r220, %r219, 1056964608;
	mov.b32 	%f401, %r220;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p42, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p42;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p43, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p43;
	cvt.rzi.s32.f32 	%r221, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r222, %r221, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r223, %r222, 1;
	setp.eq.b32 	%p44, %r223, 1;
	selp.f32 	%f419, %f417, %f418, %p44;
	and.b32  	%r224, %r222, 2;
	setp.eq.s32 	%p45, %r224, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f30, %f394, %f216;
	setp.eq.f32 	%p46, %f30, 0f00000000;
	mov.f32 	%f903, %f904;
	@%p46 bra 	LBB0_18;
// %bb.17:                              // %L732
	sin.approx.f32 	%f424, %f30;
	div.approx.f32 	%f903, %f424, %f30;
LBB0_18:                                // %L735
	and.b32  	%r155, %r7, 8;
	or.b32  	%r157, %r156, %r154;
	selp.f32 	%f215, %f212, %f214, %p9;
	selp.f32 	%f249, %f246, %f248, %p15;
	selp.f32 	%f284, %f281, %f283, %p21;
	selp.f32 	%f318, %f315, %f317, %p27;
	selp.f32 	%f353, %f350, %f352, %p33;
	selp.f32 	%f387, %f384, %f386, %p39;
	selp.f32 	%f422, %f419, %f421, %p45;
	cvt.rn.f32.s32 	%f427, %r23;
	sub.f32 	%f428, %f427, %f1;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p47, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p47;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r225, %f434;
	and.b32  	%r226, %r225, -2147483648;
	or.b32  	%r227, %r226, 1056964608;
	mov.b32 	%f435, %r227;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p48, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p48;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p49, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p49;
	cvt.rzi.s32.f32 	%r228, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r229, %r228, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r230, %r229, 1;
	setp.eq.b32 	%p50, %r230, 1;
	selp.f32 	%f453, %f451, %f452, %p50;
	and.b32  	%r231, %r229, 2;
	setp.eq.s32 	%p51, %r231, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p51;
	div.approx.f32 	%f35, %f428, %f216;
	setp.eq.f32 	%p52, %f35, 0f00000000;
	@%p52 bra 	LBB0_20;
// %bb.19:                              // %L752
	sin.approx.f32 	%f458, %f35;
	div.approx.f32 	%f904, %f458, %f35;
LBB0_20:                                // %L755
	or.b32  	%r158, %r157, %r155;
	mul.f32 	%f2, %f215, %f215;
	mul.f32 	%f7, %f249, %f249;
	mul.f32 	%f11, %f284, %f284;
	mul.f32 	%f16, %f318, %f318;
	mul.f32 	%f20, %f353, %f353;
	mul.f32 	%f25, %f387, %f387;
	mul.f32 	%f29, %f422, %f422;
	mul.f32 	%f34, %f456, %f456;
	mul.lo.s32 	%r25, %r16, 31;
	cvt.rn.f32.s32 	%f461, %r25;
	div.approx.f32 	%f38, %f461, %f216;
	abs.f32 	%f907, %f38;
	setp.lt.f32 	%p53, %f907, 0f40000000;
	@%p53 bra 	LBB0_32;
// %bb.21:
	setp.gtu.f32 	%p54, %f907, 0f4B800000;
	@%p54 bra 	LBB0_28;
	bra.uni 	LBB0_22;
LBB0_28:
	mov.b32 	%r27, %f907;
	and.b32  	%r235, %r27, 8388607;
	or.b32  	%r2421, %r235, 1065353216;
	mov.b32 	%f906, %r2421;
	add.s32 	%r236, %r27, -1073741824;
	and.b32  	%r2422, %r236, -8388608;
	setp.eq.s32 	%p60, %r2422, 0;
	@%p60 bra 	LBB0_31;
// %bb.29:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_30:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r237, %r2422, 192937984;
	add.s32 	%r238, %r237, %r2421;
	mov.b32 	%f473, %r238;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f906, %f473, %f479;
	sub.s32 	%r2422, %r2422, %r237;
	mov.b32 	%r2421, %f906;
	setp.ne.s32 	%p61, %r2422, 0;
	setp.ne.s32 	%p62, %r2421, 0;
	and.pred  	%p63, %p61, %p62;
	@%p63 bra 	LBB0_30;
LBB0_31:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p64, %r27, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p64;
	mul.f32 	%f481, %f906, 0f34000000;
	mul.f32 	%f907, %f480, %f481;
	bra.uni 	LBB0_32;
LBB0_22:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f464;
	fma.rn.f32 	%f41, %f905, 0fC0000000, %f907;
	mov.b32 	%r26, %f41;
	setp.lt.u32 	%p55, %r26, 1073741824;
	@%p55 bra 	LBB0_27;
// %bb.23:
	setp.lt.u32 	%p56, %r26, -2147483647;
	@%p56 bra 	LBB0_25;
// %bb.24:
	add.f32 	%f469, %f905, 0fBF800000;
	setp.lt.f32 	%p59, %f41, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f905, %f470, %f469, %p59;
	bra.uni 	LBB0_27;
LBB0_25:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p57, %f41, 0f40800000;
	@%p57 bra 	LBB0_27;
// %bb.26:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f905, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f41;
	setp.ge.f32 	%p58, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f905, %f468, %f465, %p58;
LBB0_27:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_32:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r8, %r158, 1;
	mul.f32 	%f219, %f2, 0f3C8A83B8;
	mul.f32 	%f253, %f7, 0f3C8A83B8;
	mul.f32 	%f288, %f11, 0f3C8A83B8;
	mul.f32 	%f322, %f16, 0f3C8A83B8;
	mul.f32 	%f357, %f20, 0f3C8A83B8;
	mul.f32 	%f391, %f25, 0f3C8A83B8;
	mul.f32 	%f426, %f29, 0f3C8A83B8;
	mul.f32 	%f459, %f34, 0f3C8A83B8;
	abs.f32 	%f482, %f907;
	setp.gtu.f32 	%p65, %f482, 0f7F800000;
	@%p65 bra 	LBB0_34;
// %bb.33:
	mov.b32 	%r239, %f38;
	and.b32  	%r240, %r239, -2147483648;
	mov.b32 	%r241, %f907;
	or.b32  	%r242, %r240, %r241;
	mov.b32 	%f907, %r242;
LBB0_34:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	mul.wide.u32 	%rd67, %r8, 4;
	mul.f32 	%f6, %f219, %f897;
	mul.f32 	%f254, %f253, %f898;
	mul.f32 	%f15, %f288, %f899;
	mul.f32 	%f323, %f322, %f900;
	mul.f32 	%f24, %f357, %f901;
	mul.f32 	%f392, %f391, %f902;
	mul.f32 	%f33, %f426, %f903;
	mul.f32 	%f460, %f459, %f904;
	add.f32 	%f483, %f907, %f907;
	mov.b32 	%r243, %f483;
	and.b32  	%r244, %r243, -2147483648;
	or.b32  	%r245, %r244, 1056964608;
	mov.b32 	%f484, %r245;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p66, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p66;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p67, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p67;
	cvt.rzi.s32.f32 	%r246, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f907;
	mul.f32 	%f492, %f491, 0f34222169;
	fma.rn.f32 	%f493, %f491, 0f40490FDA, %f492;
	mul.f32 	%f494, %f493, %f493;
	fma.rn.f32 	%f495, %f494, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f496, %f495, %f494, 0f3D2AAABB;
	fma.rn.f32 	%f497, %f496, %f494, 0fBEFFFFFF;
	fma.rn.f32 	%f498, %f497, %f494, 0f3F800000;
	fma.rn.f32 	%f499, %f494, %f493, 0f00000000;
	fma.rn.f32 	%f500, %f494, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f501, %f500, %f494, 0fBE2AAAA8;
	fma.rn.f32 	%f502, %f501, %f499, %f493;
	and.b32  	%r247, %r246, 1;
	setp.eq.b32 	%p68, %r247, 1;
	selp.f32 	%f503, %f498, %f502, %p68;
	selp.f32 	%f504, %f502, %f498, %p68;
	and.b32  	%r248, %r246, 2;
	setp.eq.s32 	%p69, %r248, 0;
	neg.f32 	%f505, %f503;
	selp.f32 	%f506, %f503, %f505, %p69;
	add.s32 	%r249, %r246, 1;
	and.b32  	%r250, %r249, 2;
	setp.eq.s32 	%p70, %r250, 0;
	sub.f32 	%f508, %f213, %f504;
	selp.f32 	%f509, %f504, %f508, %p70;
	cvt.rzi.f32.f32 	%f510, %f907;
	setp.eq.f32 	%p71, %f510, %f907;
	mul.f32 	%f511, %f907, 0f00000000;
	selp.f32 	%f55, %f511, %f506, %p71;
	abs.f32 	%f512, %f907;
	setp.gt.f32 	%p72, %f512, 0f4B800000;
	add.f32 	%f513, %f55, 0f3F800000;
	add.s32 	%r251, %r25, 496;
	cvt.rn.f32.s32 	%f514, %r251;
	div.approx.f32 	%f57, %f514, %f216;
	abs.f32 	%f911, %f57;
	setp.lt.f32 	%p73, %f911, 0f40000000;
	@%p73 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p74, %f911, 0f4B800000;
	@%p74 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r35, %f911;
	and.b32  	%r252, %r35, 8388607;
	or.b32  	%r2423, %r252, 1065353216;
	mov.b32 	%f910, %r2423;
	add.s32 	%r253, %r35, -1073741824;
	and.b32  	%r2424, %r253, -8388608;
	setp.eq.s32 	%p80, %r2424, 0;
	@%p80 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i866.preheader
	mov.f32 	%f525, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f524,%f525;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i866
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r254, %r2424, 192937984;
	add.s32 	%r255, %r254, %r2423;
	mov.b32 	%f526, %r255;
	mul.f32 	%f527, %f524, %f526;
	sub.f32 	%f528, %f526, %f527;
	fma.rn.f32 	%f529, %f528, %f524, %f527;
	sub.f32 	%f530, %f526, %f529;
	fma.rz.f32 	%f531, %f530, %f524, %f529;
	cvt.rzi.f32.f32 	%f532, %f531;
	sub.f32 	%f910, %f526, %f532;
	sub.s32 	%r2424, %r2424, %r254;
	mov.b32 	%r2423, %f910;
	setp.ne.s32 	%p81, %r2424, 0;
	setp.ne.s32 	%p82, %r2423, 0;
	and.pred  	%p83, %p81, %p82;
	@%p83 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i868
	setp.gt.u32 	%p84, %r35, 2139095039;
	selp.f32 	%f533, 0f7FFFFFFF, 0f4B800000, %p84;
	mul.f32 	%f534, %f910, 0f34000000;
	mul.f32 	%f911, %f533, %f534;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i838
	div.approx.f32 	%f517, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f517;
	fma.rn.f32 	%f60, %f909, 0fC0000000, %f911;
	mov.b32 	%r34, %f60;
	setp.lt.u32 	%p75, %r34, 1073741824;
	@%p75 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p76, %r34, -2147483647;
	@%p76 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f522, %f909, 0fBF800000;
	setp.lt.f32 	%p79, %f60, 0fC0000000;
	add.f32 	%f523, %f522, 0fBF800000;
	selp.f32 	%f909, %f523, %f522, %p79;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p77, %f60, 0f40800000;
	@%p77 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i843
	add.f32 	%f518, %f909, 0f3F800000;
	fma.rn.f32 	%f520, %f184, 0fC0400000, %f60;
	setp.ge.f32 	%p78, %f520, 0f00000000;
	add.f32 	%f521, %f518, 0f3F800000;
	selp.f32 	%f909, %f521, %f518, %p78;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i872
	add.s64 	%rd68, %rd1, %rd67;
	mov.b32 	%r180, %f254;
	mov.b32 	%r179, %f6;
	mov.b32 	%r198, %f323;
	mov.b32 	%r197, %f15;
	mov.b32 	%r216, %f392;
	mov.b32 	%r215, %f24;
	mov.b32 	%r234, %f460;
	mov.b32 	%r233, %f33;
	selp.f32 	%f56, %f513, %f509, %p72;
	abs.f32 	%f535, %f911;
	setp.gtu.f32 	%p85, %f535, 0f7F800000;
	@%p85 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r256, %f57;
	and.b32  	%r257, %r256, -2147483648;
	mov.b32 	%r258, %f911;
	or.b32  	%r259, %r257, %r258;
	mov.b32 	%f911, %r259;
LBB0_48:                                // %__nv_fmodf.exit873
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r9, [%rd68];
	shr.u32 	%r10, %r2, 1;
	shr.u32 	%r13, %r2, 2;
	// begin inline asm
	cvt.rn.f16x2.f32 %r178, %r180, %r179;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r196, %r198, %r197;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r214, %r216, %r215;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r232, %r234, %r233;
	// end inline asm
	add.f32 	%f536, %f911, %f911;
	mov.b32 	%r266, %f536;
	and.b32  	%r267, %r266, -2147483648;
	or.b32  	%r268, %r267, 1056964608;
	mov.b32 	%f537, %r268;
	add.f32 	%f538, %f536, %f537;
	cvt.rzi.f32.f32 	%f539, %f538;
	abs.f32 	%f540, %f536;
	setp.gt.f32 	%p86, %f540, 0f4B000000;
	selp.f32 	%f541, %f536, %f539, %p86;
	cvt.rzi.f32.f32 	%f542, %f536;
	setp.lt.f32 	%p87, %f540, 0f3F000000;
	selp.f32 	%f543, %f542, %f541, %p87;
	cvt.rzi.s32.f32 	%r269, %f543;
	fma.rn.f32 	%f544, %f543, 0fBF000000, %f911;
	mul.f32 	%f545, %f544, 0f34222169;
	fma.rn.f32 	%f546, %f544, 0f40490FDA, %f545;
	mul.f32 	%f547, %f546, %f546;
	fma.rn.f32 	%f548, %f547, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f549, %f548, %f547, 0f3D2AAABB;
	fma.rn.f32 	%f550, %f549, %f547, 0fBEFFFFFF;
	fma.rn.f32 	%f551, %f550, %f547, 0f3F800000;
	fma.rn.f32 	%f552, %f547, %f546, 0f00000000;
	fma.rn.f32 	%f553, %f547, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f554, %f553, %f547, 0fBE2AAAA8;
	fma.rn.f32 	%f555, %f554, %f552, %f546;
	and.b32  	%r270, %r269, 1;
	setp.eq.b32 	%p88, %r270, 1;
	selp.f32 	%f556, %f551, %f555, %p88;
	selp.f32 	%f557, %f555, %f551, %p88;
	and.b32  	%r271, %r269, 2;
	setp.eq.s32 	%p89, %r271, 0;
	neg.f32 	%f558, %f556;
	selp.f32 	%f559, %f556, %f558, %p89;
	add.s32 	%r272, %r269, 1;
	and.b32  	%r273, %r272, 2;
	setp.eq.s32 	%p90, %r273, 0;
	sub.f32 	%f561, %f213, %f557;
	selp.f32 	%f562, %f557, %f561, %p90;
	cvt.rzi.f32.f32 	%f563, %f911;
	setp.eq.f32 	%p91, %f563, %f911;
	mul.f32 	%f564, %f911, 0f00000000;
	selp.f32 	%f565, %f564, %f559, %p91;
	abs.f32 	%f566, %f911;
	setp.gt.f32 	%p92, %f566, 0f4B800000;
	add.f32 	%f567, %f565, 0f3F800000;
	selp.f32 	%f568, %f567, %f562, %p92;
	mov.b32 	%r262, %f568;
	mov.b32 	%r261, %f56;
	// begin inline asm
	cvt.rn.f16x2.f32 %r42, %r262, %r261;
	// end inline asm
	mov.b32 	%r265, %f565;
	mov.b32 	%r264, %f55;
	// begin inline asm
	cvt.rn.f16x2.f32 %r43, %r265, %r264;
	// end inline asm
	mov.u64 	%rd118, 2;
	mov.u64 	%rd119, %rd118;
LBB0_49:                                // %L867.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd119, %rd119, %rd119;
	add.s64 	%rd118, %rd118, -1;
	setp.ne.s64 	%p93, %rd118, 0;
	@%p93 bra 	LBB0_49;
// %bb.50:                              // %L869
	and.b64  	%rd70, %rd119, 9223372036854775807;
	setp.ne.s64 	%p94, %rd70, 16;
	@%p94 bra 	LBB0_130;
// %bb.51:                              // %L876
	and.b32  	%r274, %r2, 3;
	mul.lo.s32 	%r275, %r274, %r13;
	shl.b32 	%r276, %r275, 1;
	neg.s32 	%r44, %r276;
	cvt.rn.f32.s32 	%f569, %r44;
	mov.f32 	%f570, 0f41000000;
	div.approx.f32 	%f74, %f569, %f570;
	abs.f32 	%f915, %f74;
	setp.lt.f32 	%p95, %f915, 0f40000000;
	@%p95 bra 	LBB0_63;
// %bb.52:
	setp.gtu.f32 	%p96, %f915, 0f4B800000;
	@%p96 bra 	LBB0_59;
	bra.uni 	LBB0_53;
LBB0_59:
	mov.b32 	%r46, %f915;
	and.b32  	%r277, %r46, 8388607;
	or.b32  	%r2425, %r277, 1065353216;
	mov.b32 	%f914, %r2425;
	add.s32 	%r278, %r46, -1073741824;
	and.b32  	%r2426, %r278, -8388608;
	setp.eq.s32 	%p102, %r2426, 0;
	@%p102 bra 	LBB0_62;
// %bb.60:                              // %__nv_fmaf_rn.exit4.i.i.i912.preheader
	mov.f32 	%f580, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f579,%f580;
	// end inline asm
LBB0_61:                                // %__nv_fmaf_rn.exit4.i.i.i912
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r2426, 192937984;
	add.s32 	%r280, %r279, %r2425;
	mov.b32 	%f581, %r280;
	mul.f32 	%f582, %f579, %f581;
	sub.f32 	%f583, %f581, %f582;
	fma.rn.f32 	%f584, %f583, %f579, %f582;
	sub.f32 	%f585, %f581, %f584;
	fma.rz.f32 	%f586, %f585, %f579, %f584;
	cvt.rzi.f32.f32 	%f587, %f586;
	sub.f32 	%f914, %f581, %f587;
	sub.s32 	%r2426, %r2426, %r279;
	mov.b32 	%r2425, %f914;
	setp.ne.s32 	%p103, %r2426, 0;
	setp.ne.s32 	%p104, %r2425, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	LBB0_61;
LBB0_62:                                // %__internal_fmodf_slowpath_mod.exit.i.i914
	setp.gt.u32 	%p106, %r46, 2139095039;
	selp.f32 	%f588, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f589, %f914, 0f34000000;
	mul.f32 	%f915, %f588, %f589;
	bra.uni 	LBB0_63;
LBB0_53:                                // %__nv_fast_fdividef.exit.i.i.i884
	div.approx.f32 	%f572, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f572;
	fma.rn.f32 	%f77, %f913, 0fC0000000, %f915;
	mov.b32 	%r45, %f77;
	setp.lt.u32 	%p97, %r45, 1073741824;
	@%p97 bra 	LBB0_58;
// %bb.54:
	setp.lt.u32 	%p98, %r45, -2147483647;
	@%p98 bra 	LBB0_56;
// %bb.55:
	add.f32 	%f577, %f913, 0fBF800000;
	setp.lt.f32 	%p101, %f77, 0fC0000000;
	add.f32 	%f578, %f577, 0fBF800000;
	selp.f32 	%f913, %f578, %f577, %p101;
	bra.uni 	LBB0_58;
LBB0_56:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p99, %f77, 0f40800000;
	@%p99 bra 	LBB0_58;
// %bb.57:                              // %__nv_fmaf_rn.exit.i.i.i889
	add.f32 	%f573, %f913, 0f3F800000;
	fma.rn.f32 	%f575, %f184, 0fC0400000, %f77;
	setp.ge.f32 	%p100, %f575, 0f00000000;
	add.f32 	%f576, %f573, 0f3F800000;
	selp.f32 	%f913, %f576, %f573, %p100;
LBB0_58:                                // %__internal_fmodf_fastpath_quot.exit.i.i893
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_63:                                // %__internal_fmodf_kernel.exit.i918
	abs.f32 	%f590, %f915;
	setp.gtu.f32 	%p107, %f590, 0f7F800000;
	@%p107 bra 	LBB0_65;
// %bb.64:
	mov.b32 	%r281, %f74;
	and.b32  	%r282, %r281, -2147483648;
	mov.b32 	%r283, %f915;
	or.b32  	%r284, %r282, %r283;
	mov.b32 	%f915, %r284;
LBB0_65:                                // %__nv_fmodf.exit919
	add.f32 	%f591, %f915, %f915;
	mov.b32 	%r285, %f591;
	and.b32  	%r286, %r285, -2147483648;
	or.b32  	%r287, %r286, 1056964608;
	mov.b32 	%f592, %r287;
	add.f32 	%f593, %f591, %f592;
	cvt.rzi.f32.f32 	%f594, %f593;
	abs.f32 	%f595, %f591;
	setp.gt.f32 	%p108, %f595, 0f4B000000;
	selp.f32 	%f596, %f591, %f594, %p108;
	cvt.rzi.f32.f32 	%f597, %f591;
	setp.lt.f32 	%p109, %f595, 0f3F000000;
	selp.f32 	%f598, %f597, %f596, %p109;
	cvt.rzi.s32.f32 	%r288, %f598;
	fma.rn.f32 	%f599, %f598, 0fBF000000, %f915;
	mul.f32 	%f600, %f599, 0f34222169;
	fma.rn.f32 	%f601, %f599, 0f40490FDA, %f600;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f604, %f603, %f602, 0f3D2AAABB;
	fma.rn.f32 	%f605, %f604, %f602, 0fBEFFFFFF;
	fma.rn.f32 	%f606, %f605, %f602, 0f3F800000;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f602, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f609, %f608, %f602, 0fBE2AAAA8;
	fma.rn.f32 	%f610, %f609, %f607, %f601;
	and.b32  	%r289, %r288, 1;
	setp.eq.b32 	%p110, %r289, 1;
	selp.f32 	%f611, %f606, %f610, %p110;
	selp.f32 	%f612, %f610, %f606, %p110;
	and.b32  	%r290, %r288, 2;
	setp.eq.s32 	%p111, %r290, 0;
	neg.f32 	%f613, %f611;
	selp.f32 	%f614, %f611, %f613, %p111;
	add.s32 	%r291, %r288, 1;
	and.b32  	%r292, %r291, 2;
	setp.eq.s32 	%p112, %r292, 0;
	sub.f32 	%f616, %f213, %f612;
	selp.f32 	%f617, %f612, %f616, %p112;
	cvt.rzi.f32.f32 	%f618, %f915;
	setp.eq.f32 	%p113, %f618, %f915;
	mul.f32 	%f619, %f915, 0f00000000;
	selp.f32 	%f91, %f619, %f614, %p113;
	abs.f32 	%f620, %f915;
	setp.gt.f32 	%p114, %f620, 0f4B800000;
	add.f32 	%f621, %f91, 0f3F800000;
	shl.b32 	%r293, %r13, 3;
	sub.s32 	%r294, %r44, %r293;
	cvt.rn.f32.s32 	%f622, %r294;
	div.approx.f32 	%f93, %f622, %f570;
	abs.f32 	%f919, %f93;
	setp.lt.f32 	%p115, %f919, 0f40000000;
	@%p115 bra 	LBB0_77;
// %bb.66:
	setp.gtu.f32 	%p116, %f919, 0f4B800000;
	@%p116 bra 	LBB0_73;
	bra.uni 	LBB0_67;
LBB0_73:
	mov.b32 	%r54, %f919;
	and.b32  	%r295, %r54, 8388607;
	or.b32  	%r2427, %r295, 1065353216;
	mov.b32 	%f918, %r2427;
	add.s32 	%r296, %r54, -1073741824;
	and.b32  	%r2428, %r296, -8388608;
	setp.eq.s32 	%p122, %r2428, 0;
	@%p122 bra 	LBB0_76;
// %bb.74:                              // %__nv_fmaf_rn.exit4.i.i.i958.preheader
	mov.f32 	%f633, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f632,%f633;
	// end inline asm
LBB0_75:                                // %__nv_fmaf_rn.exit4.i.i.i958
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r297, %r2428, 192937984;
	add.s32 	%r298, %r297, %r2427;
	mov.b32 	%f634, %r298;
	mul.f32 	%f635, %f632, %f634;
	sub.f32 	%f636, %f634, %f635;
	fma.rn.f32 	%f637, %f636, %f632, %f635;
	sub.f32 	%f638, %f634, %f637;
	fma.rz.f32 	%f639, %f638, %f632, %f637;
	cvt.rzi.f32.f32 	%f640, %f639;
	sub.f32 	%f918, %f634, %f640;
	sub.s32 	%r2428, %r2428, %r297;
	mov.b32 	%r2427, %f918;
	setp.ne.s32 	%p123, %r2428, 0;
	setp.ne.s32 	%p124, %r2427, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	LBB0_75;
LBB0_76:                                // %__internal_fmodf_slowpath_mod.exit.i.i960
	setp.gt.u32 	%p126, %r54, 2139095039;
	selp.f32 	%f641, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f642, %f918, 0f34000000;
	mul.f32 	%f919, %f641, %f642;
	bra.uni 	LBB0_77;
LBB0_67:                                // %__nv_fast_fdividef.exit.i.i.i930
	div.approx.f32 	%f625, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f625;
	fma.rn.f32 	%f96, %f917, 0fC0000000, %f919;
	mov.b32 	%r53, %f96;
	setp.lt.u32 	%p117, %r53, 1073741824;
	@%p117 bra 	LBB0_72;
// %bb.68:
	setp.lt.u32 	%p118, %r53, -2147483647;
	@%p118 bra 	LBB0_70;
// %bb.69:
	add.f32 	%f630, %f917, 0fBF800000;
	setp.lt.f32 	%p121, %f96, 0fC0000000;
	add.f32 	%f631, %f630, 0fBF800000;
	selp.f32 	%f917, %f631, %f630, %p121;
	bra.uni 	LBB0_72;
LBB0_70:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p119, %f96, 0f40800000;
	@%p119 bra 	LBB0_72;
// %bb.71:                              // %__nv_fmaf_rn.exit.i.i.i935
	add.f32 	%f626, %f917, 0f3F800000;
	fma.rn.f32 	%f628, %f184, 0fC0400000, %f96;
	setp.ge.f32 	%p120, %f628, 0f00000000;
	add.f32 	%f629, %f626, 0f3F800000;
	selp.f32 	%f917, %f629, %f626, %p120;
LBB0_72:                                // %__internal_fmodf_fastpath_quot.exit.i.i939
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_77:                                // %__internal_fmodf_kernel.exit.i964
	selp.f32 	%f92, %f621, %f617, %p114;
	abs.f32 	%f643, %f919;
	setp.gtu.f32 	%p127, %f643, 0f7F800000;
	@%p127 bra 	LBB0_79;
// %bb.78:
	mov.b32 	%r299, %f93;
	and.b32  	%r300, %r299, -2147483648;
	mov.b32 	%r301, %f919;
	or.b32  	%r302, %r300, %r301;
	mov.b32 	%f919, %r302;
LBB0_79:                                // %__nv_fmodf.exit965
	add.f32 	%f644, %f919, %f919;
	mov.b32 	%r315, %f644;
	and.b32  	%r316, %r315, -2147483648;
	or.b32  	%r317, %r316, 1056964608;
	mov.b32 	%f645, %r317;
	add.f32 	%f646, %f644, %f645;
	cvt.rzi.f32.f32 	%f647, %f646;
	abs.f32 	%f648, %f644;
	setp.gt.f32 	%p128, %f648, 0f4B000000;
	selp.f32 	%f649, %f644, %f647, %p128;
	cvt.rzi.f32.f32 	%f650, %f644;
	setp.lt.f32 	%p129, %f648, 0f3F000000;
	selp.f32 	%f651, %f650, %f649, %p129;
	cvt.rzi.s32.f32 	%r318, %f651;
	fma.rn.f32 	%f652, %f651, 0fBF000000, %f919;
	mul.f32 	%f653, %f652, 0f34222169;
	fma.rn.f32 	%f654, %f652, 0f40490FDA, %f653;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f657, %f656, %f655, 0f3D2AAABB;
	fma.rn.f32 	%f658, %f657, %f655, 0fBEFFFFFF;
	fma.rn.f32 	%f659, %f658, %f655, 0f3F800000;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f655, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f662, %f661, %f655, 0fBE2AAAA8;
	fma.rn.f32 	%f663, %f662, %f660, %f654;
	and.b32  	%r319, %r318, 1;
	setp.eq.b32 	%p130, %r319, 1;
	selp.f32 	%f664, %f659, %f663, %p130;
	selp.f32 	%f665, %f663, %f659, %p130;
	and.b32  	%r320, %r318, 2;
	setp.eq.s32 	%p131, %r320, 0;
	neg.f32 	%f666, %f664;
	selp.f32 	%f667, %f664, %f666, %p131;
	add.s32 	%r321, %r318, 1;
	and.b32  	%r322, %r321, 2;
	setp.eq.s32 	%p132, %r322, 0;
	sub.f32 	%f669, %f213, %f665;
	selp.f32 	%f670, %f665, %f669, %p132;
	cvt.rzi.f32.f32 	%f671, %f919;
	setp.eq.f32 	%p133, %f671, %f919;
	mul.f32 	%f672, %f919, 0f00000000;
	selp.f32 	%f673, %f672, %f667, %p133;
	abs.f32 	%f674, %f919;
	setp.gt.f32 	%p134, %f674, 0f4B800000;
	add.f32 	%f675, %f673, 0f3F800000;
	selp.f32 	%f676, %f675, %f670, %p134;
	mov.b32 	%r305, %f676;
	mov.b32 	%r304, %f92;
	// begin inline asm
	cvt.rn.f16x2.f32 %r61, %r305, %r304;
	// end inline asm
	mov.b32 	%r311, %f673;
	xor.b32  	%r308, %r311, -2147483648;
	mov.b32 	%r310, %f91;
	xor.b32  	%r307, %r310, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r62, %r308, %r307;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r63, %r311, %r310;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r64, %r305, %r304;
	// end inline asm
	mov.u64 	%rd120, 2;
	mov.u64 	%rd121, %rd120;
LBB0_80:                                // %L1029.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd121, %rd121, %rd121;
	add.s64 	%rd120, %rd120, -1;
	setp.ne.s64 	%p135, %rd120, 0;
	@%p135 bra 	LBB0_80;
// %bb.81:                              // %L1031
	and.b64  	%rd74, %rd121, 9223372036854775807;
	setp.ne.s64 	%p136, %rd74, 16;
	@%p136 bra 	LBB0_129;
// %bb.82:                              // %L1038
	shl.b32 	%r323, %r11, 1;
	neg.s32 	%r65, %r323;
	mov.u64 	%rd122, 2;
	mov.u64 	%rd123, %rd122;
LBB0_83:                                // %L1097.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd123, %rd123, %rd123;
	add.s64 	%rd122, %rd122, -1;
	setp.ne.s64 	%p137, %rd122, 0;
	@%p137 bra 	LBB0_83;
// %bb.84:                              // %L1099
	mul.lo.s32 	%r66, %r65, %r13;
	cvt.rn.f32.s32 	%f677, %r66;
	shl.b64 	%rd78, %rd123, 1;
	cvt.rn.f32.s64 	%f678, %rd78;
	div.approx.f32 	%f110, %f677, %f678;
	abs.f32 	%f923, %f110;
	setp.lt.f32 	%p138, %f923, 0f40000000;
	@%p138 bra 	LBB0_96;
// %bb.85:
	setp.gtu.f32 	%p139, %f923, 0f4B800000;
	@%p139 bra 	LBB0_92;
	bra.uni 	LBB0_86;
LBB0_92:
	mov.b32 	%r68, %f923;
	and.b32  	%r324, %r68, 8388607;
	or.b32  	%r2429, %r324, 1065353216;
	mov.b32 	%f922, %r2429;
	add.s32 	%r325, %r68, -1073741824;
	and.b32  	%r2430, %r325, -8388608;
	setp.eq.s32 	%p145, %r2430, 0;
	@%p145 bra 	LBB0_95;
// %bb.93:                              // %__nv_fmaf_rn.exit4.i.i.i1004.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
LBB0_94:                                // %__nv_fmaf_rn.exit4.i.i.i1004
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r326, %r2430, 192937984;
	add.s32 	%r327, %r326, %r2429;
	mov.b32 	%f689, %r327;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f922, %f689, %f695;
	sub.s32 	%r2430, %r2430, %r326;
	mov.b32 	%r2429, %f922;
	setp.ne.s32 	%p146, %r2430, 0;
	setp.ne.s32 	%p147, %r2429, 0;
	and.pred  	%p148, %p146, %p147;
	@%p148 bra 	LBB0_94;
LBB0_95:                                // %__internal_fmodf_slowpath_mod.exit.i.i1006
	setp.gt.u32 	%p149, %r68, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p149;
	mul.f32 	%f697, %f922, 0f34000000;
	mul.f32 	%f923, %f696, %f697;
	bra.uni 	LBB0_96;
LBB0_86:                                // %__nv_fast_fdividef.exit.i.i.i976
	div.approx.f32 	%f680, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f680;
	fma.rn.f32 	%f113, %f921, 0fC0000000, %f923;
	mov.b32 	%r67, %f113;
	setp.lt.u32 	%p140, %r67, 1073741824;
	@%p140 bra 	LBB0_91;
// %bb.87:
	setp.lt.u32 	%p141, %r67, -2147483647;
	@%p141 bra 	LBB0_89;
// %bb.88:
	add.f32 	%f685, %f921, 0fBF800000;
	setp.lt.f32 	%p144, %f113, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f921, %f686, %f685, %p144;
	bra.uni 	LBB0_91;
LBB0_89:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p142, %f113, 0f40800000;
	@%p142 bra 	LBB0_91;
// %bb.90:                              // %__nv_fmaf_rn.exit.i.i.i981
	add.f32 	%f681, %f921, 0f3F800000;
	fma.rn.f32 	%f683, %f184, 0fC0400000, %f113;
	setp.ge.f32 	%p143, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f921, %f684, %f681, %p143;
LBB0_91:                                // %__internal_fmodf_fastpath_quot.exit.i.i985
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_96:                                // %__internal_fmodf_kernel.exit.i1010
	abs.f32 	%f698, %f923;
	setp.gtu.f32 	%p150, %f698, 0f7F800000;
	@%p150 bra 	LBB0_98;
// %bb.97:
	mov.b32 	%r328, %f110;
	and.b32  	%r329, %r328, -2147483648;
	mov.b32 	%r330, %f923;
	or.b32  	%r331, %r329, %r330;
	mov.b32 	%f923, %r331;
LBB0_98:                                // %__nv_fmodf.exit1011
	add.f32 	%f699, %f923, %f923;
	mov.b32 	%r332, %f699;
	and.b32  	%r333, %r332, -2147483648;
	or.b32  	%r334, %r333, 1056964608;
	mov.b32 	%f700, %r334;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p151, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p151;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p152, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p152;
	cvt.rzi.s32.f32 	%r335, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f923;
	mul.f32 	%f708, %f707, 0f34222169;
	fma.rn.f32 	%f709, %f707, 0f40490FDA, %f708;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f712, %f711, %f710, 0f3D2AAABB;
	fma.rn.f32 	%f713, %f712, %f710, 0fBEFFFFFF;
	fma.rn.f32 	%f714, %f713, %f710, 0f3F800000;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f710, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f717, %f716, %f710, 0fBE2AAAA8;
	fma.rn.f32 	%f718, %f717, %f715, %f709;
	and.b32  	%r336, %r335, 1;
	setp.eq.b32 	%p153, %r336, 1;
	selp.f32 	%f719, %f714, %f718, %p153;
	selp.f32 	%f720, %f718, %f714, %p153;
	and.b32  	%r337, %r335, 2;
	setp.eq.s32 	%p154, %r337, 0;
	neg.f32 	%f721, %f719;
	selp.f32 	%f722, %f719, %f721, %p154;
	add.s32 	%r338, %r335, 1;
	and.b32  	%r339, %r338, 2;
	setp.eq.s32 	%p155, %r339, 0;
	sub.f32 	%f724, %f213, %f720;
	selp.f32 	%f725, %f720, %f724, %p155;
	cvt.rzi.f32.f32 	%f726, %f923;
	setp.eq.f32 	%p156, %f726, %f923;
	mul.f32 	%f727, %f923, 0f00000000;
	selp.f32 	%f127, %f727, %f722, %p156;
	abs.f32 	%f728, %f923;
	setp.gt.f32 	%p157, %f728, 0f4B800000;
	add.f32 	%f729, %f127, 0f3F800000;
	selp.f32 	%f128, %f729, %f725, %p157;
	mov.u64 	%rd124, 2;
	mov.u64 	%rd125, %rd124;
LBB0_99:                                // %L1138.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd125, %rd125, %rd125;
	add.s64 	%rd124, %rd124, -1;
	setp.ne.s64 	%p158, %rd124, 0;
	@%p158 bra 	LBB0_99;
// %bb.100:                             // %L1140
	shl.b32 	%r340, %r13, 2;
	sub.s32 	%r341, %r66, %r340;
	cvt.rn.f32.s32 	%f730, %r341;
	shl.b64 	%rd80, %rd125, 1;
	cvt.rn.f32.s64 	%f731, %rd80;
	div.approx.f32 	%f129, %f730, %f731;
	abs.f32 	%f927, %f129;
	setp.lt.f32 	%p159, %f927, 0f40000000;
	@%p159 bra 	LBB0_112;
// %bb.101:
	setp.gtu.f32 	%p160, %f927, 0f4B800000;
	@%p160 bra 	LBB0_108;
	bra.uni 	LBB0_102;
LBB0_108:
	mov.b32 	%r76, %f927;
	and.b32  	%r342, %r76, 8388607;
	or.b32  	%r2431, %r342, 1065353216;
	mov.b32 	%f926, %r2431;
	add.s32 	%r343, %r76, -1073741824;
	and.b32  	%r2432, %r343, -8388608;
	setp.eq.s32 	%p166, %r2432, 0;
	@%p166 bra 	LBB0_111;
// %bb.109:                             // %__nv_fmaf_rn.exit4.i.i.i1050.preheader
	mov.f32 	%f741, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f740,%f741;
	// end inline asm
LBB0_110:                               // %__nv_fmaf_rn.exit4.i.i.i1050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r2432, 192937984;
	add.s32 	%r345, %r344, %r2431;
	mov.b32 	%f742, %r345;
	mul.f32 	%f743, %f740, %f742;
	sub.f32 	%f744, %f742, %f743;
	fma.rn.f32 	%f745, %f744, %f740, %f743;
	sub.f32 	%f746, %f742, %f745;
	fma.rz.f32 	%f747, %f746, %f740, %f745;
	cvt.rzi.f32.f32 	%f748, %f747;
	sub.f32 	%f926, %f742, %f748;
	sub.s32 	%r2432, %r2432, %r344;
	mov.b32 	%r2431, %f926;
	setp.ne.s32 	%p167, %r2432, 0;
	setp.ne.s32 	%p168, %r2431, 0;
	and.pred  	%p169, %p167, %p168;
	@%p169 bra 	LBB0_110;
LBB0_111:                               // %__internal_fmodf_slowpath_mod.exit.i.i1052
	setp.gt.u32 	%p170, %r76, 2139095039;
	selp.f32 	%f749, 0f7FFFFFFF, 0f4B800000, %p170;
	mul.f32 	%f750, %f926, 0f34000000;
	mul.f32 	%f927, %f749, %f750;
	bra.uni 	LBB0_112;
LBB0_102:                               // %__nv_fast_fdividef.exit.i.i.i1022
	div.approx.f32 	%f733, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f733;
	fma.rn.f32 	%f132, %f925, 0fC0000000, %f927;
	mov.b32 	%r75, %f132;
	setp.lt.u32 	%p161, %r75, 1073741824;
	@%p161 bra 	LBB0_107;
// %bb.103:
	setp.lt.u32 	%p162, %r75, -2147483647;
	@%p162 bra 	LBB0_105;
// %bb.104:
	add.f32 	%f738, %f925, 0fBF800000;
	setp.lt.f32 	%p165, %f132, 0fC0000000;
	add.f32 	%f739, %f738, 0fBF800000;
	selp.f32 	%f925, %f739, %f738, %p165;
	bra.uni 	LBB0_107;
LBB0_105:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p163, %f132, 0f40800000;
	@%p163 bra 	LBB0_107;
// %bb.106:                             // %__nv_fmaf_rn.exit.i.i.i1027
	add.f32 	%f734, %f925, 0f3F800000;
	fma.rn.f32 	%f736, %f184, 0fC0400000, %f132;
	setp.ge.f32 	%p164, %f736, 0f00000000;
	add.f32 	%f737, %f734, 0f3F800000;
	selp.f32 	%f925, %f737, %f734, %p164;
LBB0_107:                               // %__internal_fmodf_fastpath_quot.exit.i.i1031
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_112:                               // %__internal_fmodf_kernel.exit.i1056
	abs.f32 	%f751, %f927;
	setp.gtu.f32 	%p171, %f751, 0f7F800000;
	@%p171 bra 	LBB0_114;
// %bb.113:
	mov.b32 	%r346, %f129;
	and.b32  	%r347, %r346, -2147483648;
	mov.b32 	%r348, %f927;
	or.b32  	%r349, %r347, %r348;
	mov.b32 	%f927, %r349;
LBB0_114:                               // %__nv_fmodf.exit1057
	add.f32 	%f752, %f927, %f927;
	mov.b32 	%r356, %f752;
	and.b32  	%r357, %r356, -2147483648;
	or.b32  	%r358, %r357, 1056964608;
	mov.b32 	%f753, %r358;
	add.f32 	%f754, %f752, %f753;
	cvt.rzi.f32.f32 	%f755, %f754;
	abs.f32 	%f756, %f752;
	setp.gt.f32 	%p172, %f756, 0f4B000000;
	selp.f32 	%f757, %f752, %f755, %p172;
	cvt.rzi.f32.f32 	%f758, %f752;
	setp.lt.f32 	%p173, %f756, 0f3F000000;
	selp.f32 	%f759, %f758, %f757, %p173;
	cvt.rzi.s32.f32 	%r359, %f759;
	fma.rn.f32 	%f760, %f759, 0fBF000000, %f927;
	mul.f32 	%f761, %f760, 0f34222169;
	fma.rn.f32 	%f762, %f760, 0f40490FDA, %f761;
	mul.f32 	%f763, %f762, %f762;
	fma.rn.f32 	%f764, %f763, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f765, %f764, %f763, 0f3D2AAABB;
	fma.rn.f32 	%f766, %f765, %f763, 0fBEFFFFFF;
	fma.rn.f32 	%f767, %f766, %f763, 0f3F800000;
	fma.rn.f32 	%f768, %f763, %f762, 0f00000000;
	fma.rn.f32 	%f769, %f763, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f770, %f769, %f763, 0fBE2AAAA8;
	fma.rn.f32 	%f771, %f770, %f768, %f762;
	and.b32  	%r360, %r359, 1;
	setp.eq.b32 	%p174, %r360, 1;
	selp.f32 	%f772, %f767, %f771, %p174;
	selp.f32 	%f773, %f771, %f767, %p174;
	and.b32  	%r361, %r359, 2;
	setp.eq.s32 	%p175, %r361, 0;
	neg.f32 	%f774, %f772;
	selp.f32 	%f775, %f772, %f774, %p175;
	add.s32 	%r362, %r359, 1;
	and.b32  	%r363, %r362, 2;
	setp.eq.s32 	%p176, %r363, 0;
	sub.f32 	%f777, %f213, %f773;
	selp.f32 	%f778, %f773, %f777, %p176;
	cvt.rzi.f32.f32 	%f779, %f927;
	setp.eq.f32 	%p177, %f779, %f927;
	mul.f32 	%f780, %f927, 0f00000000;
	selp.f32 	%f781, %f780, %f775, %p177;
	abs.f32 	%f782, %f927;
	setp.gt.f32 	%p178, %f782, 0f4B800000;
	add.f32 	%f783, %f781, 0f3F800000;
	selp.f32 	%f784, %f783, %f778, %p178;
	mov.b32 	%r352, %f784;
	mov.b32 	%r351, %f128;
	// begin inline asm
	cvt.rn.f16x2.f32 %r83, %r352, %r351;
	// end inline asm
	mov.b32 	%r355, %f781;
	mov.b32 	%r354, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r84, %r355, %r354;
	// end inline asm
	mov.u64 	%rd126, 2;
	mov.u64 	%rd127, %rd126;
LBB0_115:                               // %L1181.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd127, %rd127, %rd127;
	add.s64 	%rd126, %rd126, -1;
	setp.ne.s64 	%p179, %rd126, 0;
	@%p179 bra 	LBB0_115;
// %bb.116:                             // %L1183
	and.b64  	%rd82, %rd127, 9223372036854775807;
	setp.ne.s64 	%p180, %rd82, 16;
	@%p180 bra 	LBB0_128;
// %bb.117:                             // %L1190
	shr.u32 	%r85, %r2, 3;
	and.b32  	%r364, %r85, 2;
	or.b32  	%r86, %r14, %r364;
	mul.lo.s32 	%r88, %r65, %r86;
	cvt.rn.f32.s32 	%f785, %r88;
	mov.f32 	%f786, 0f40800000;
	div.approx.f32 	%f146, %f785, %f786;
	abs.f32 	%f931, %f146;
	setp.lt.f32 	%p181, %f931, 0f40000000;
	@%p181 bra 	LBB0_138;
// %bb.118:
	setp.gtu.f32 	%p182, %f931, 0f4B800000;
	@%p182 bra 	LBB0_134;
	bra.uni 	LBB0_119;
LBB0_134:
	mov.b32 	%r110, %f931;
	and.b32  	%r365, %r110, 8388607;
	or.b32  	%r2447, %r365, 1065353216;
	mov.b32 	%f930, %r2447;
	add.s32 	%r366, %r110, -1073741824;
	and.b32  	%r2448, %r366, -8388608;
	setp.eq.s32 	%p188, %r2448, 0;
	@%p188 bra 	LBB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i1096.preheader
	mov.f32 	%f796, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f795,%f796;
	// end inline asm
LBB0_136:                               // %__nv_fmaf_rn.exit4.i.i.i1096
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r2448, 192937984;
	add.s32 	%r368, %r367, %r2447;
	mov.b32 	%f797, %r368;
	mul.f32 	%f798, %f795, %f797;
	sub.f32 	%f799, %f797, %f798;
	fma.rn.f32 	%f800, %f799, %f795, %f798;
	sub.f32 	%f801, %f797, %f800;
	fma.rz.f32 	%f802, %f801, %f795, %f800;
	cvt.rzi.f32.f32 	%f803, %f802;
	sub.f32 	%f930, %f797, %f803;
	sub.s32 	%r2448, %r2448, %r367;
	mov.b32 	%r2447, %f930;
	setp.ne.s32 	%p189, %r2448, 0;
	setp.ne.s32 	%p190, %r2447, 0;
	and.pred  	%p191, %p189, %p190;
	@%p191 bra 	LBB0_136;
LBB0_137:                               // %__internal_fmodf_slowpath_mod.exit.i.i1098
	setp.gt.u32 	%p192, %r110, 2139095039;
	selp.f32 	%f804, 0f7FFFFFFF, 0f4B800000, %p192;
	mul.f32 	%f805, %f930, 0f34000000;
	mul.f32 	%f931, %f804, %f805;
	bra.uni 	LBB0_138;
LBB0_119:                               // %__nv_fast_fdividef.exit.i.i.i1068
	div.approx.f32 	%f788, %f931, %f184;
	cvt.rzi.f32.f32 	%f929, %f788;
	fma.rn.f32 	%f149, %f929, 0fC0000000, %f931;
	mov.b32 	%r109, %f149;
	setp.lt.u32 	%p183, %r109, 1073741824;
	@%p183 bra 	LBB0_133;
// %bb.120:
	setp.lt.u32 	%p184, %r109, -2147483647;
	@%p184 bra 	LBB0_131;
// %bb.121:
	add.f32 	%f793, %f929, 0fBF800000;
	setp.lt.f32 	%p187, %f149, 0fC0000000;
	add.f32 	%f794, %f793, 0fBF800000;
	selp.f32 	%f929, %f794, %f793, %p187;
	bra.uni 	LBB0_133;
LBB0_131:
	add.f32 	%f929, %f929, 0f3F800000;
	setp.ltu.f32 	%p185, %f149, 0f40800000;
	@%p185 bra 	LBB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i1073
	add.f32 	%f789, %f929, 0f3F800000;
	fma.rn.f32 	%f791, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p186, %f791, 0f00000000;
	add.f32 	%f792, %f789, 0f3F800000;
	selp.f32 	%f929, %f792, %f789, %p186;
LBB0_133:                               // %__internal_fmodf_fastpath_quot.exit.i.i1077
	fma.rn.f32 	%f931, %f929, 0fC0000000, %f931;
LBB0_138:                               // %__internal_fmodf_kernel.exit.i1102
	xor.b32  	%r87, %r85, %r2;
	abs.f32 	%f806, %f931;
	setp.gtu.f32 	%p193, %f806, 0f7F800000;
	@%p193 bra 	LBB0_140;
// %bb.139:
	mov.b32 	%r369, %f146;
	and.b32  	%r370, %r369, -2147483648;
	mov.b32 	%r371, %f931;
	or.b32  	%r372, %r370, %r371;
	mov.b32 	%f931, %r372;
LBB0_140:                               // %__nv_fmodf.exit1103
	add.f32 	%f807, %f931, %f931;
	mov.b32 	%r373, %f807;
	and.b32  	%r374, %r373, -2147483648;
	or.b32  	%r375, %r374, 1056964608;
	mov.b32 	%f808, %r375;
	add.f32 	%f809, %f807, %f808;
	cvt.rzi.f32.f32 	%f810, %f809;
	abs.f32 	%f811, %f807;
	setp.gt.f32 	%p194, %f811, 0f4B000000;
	selp.f32 	%f812, %f807, %f810, %p194;
	cvt.rzi.f32.f32 	%f813, %f807;
	setp.lt.f32 	%p195, %f811, 0f3F000000;
	selp.f32 	%f814, %f813, %f812, %p195;
	cvt.rzi.s32.f32 	%r376, %f814;
	fma.rn.f32 	%f815, %f814, 0fBF000000, %f931;
	mul.f32 	%f816, %f815, 0f34222169;
	fma.rn.f32 	%f817, %f815, 0f40490FDA, %f816;
	mul.f32 	%f818, %f817, %f817;
	fma.rn.f32 	%f819, %f818, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f820, %f819, %f818, 0f3D2AAABB;
	fma.rn.f32 	%f821, %f820, %f818, 0fBEFFFFFF;
	fma.rn.f32 	%f822, %f821, %f818, 0f3F800000;
	fma.rn.f32 	%f823, %f818, %f817, 0f00000000;
	fma.rn.f32 	%f824, %f818, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f825, %f824, %f818, 0fBE2AAAA8;
	fma.rn.f32 	%f826, %f825, %f823, %f817;
	and.b32  	%r377, %r376, 1;
	setp.eq.b32 	%p196, %r377, 1;
	selp.f32 	%f827, %f822, %f826, %p196;
	selp.f32 	%f828, %f826, %f822, %p196;
	and.b32  	%r378, %r376, 2;
	setp.eq.s32 	%p197, %r378, 0;
	neg.f32 	%f829, %f827;
	selp.f32 	%f830, %f827, %f829, %p197;
	add.s32 	%r379, %r376, 1;
	and.b32  	%r380, %r379, 2;
	setp.eq.s32 	%p198, %r380, 0;
	sub.f32 	%f832, %f213, %f828;
	selp.f32 	%f833, %f828, %f832, %p198;
	cvt.rzi.f32.f32 	%f834, %f931;
	setp.eq.f32 	%p199, %f834, %f931;
	mul.f32 	%f835, %f931, 0f00000000;
	selp.f32 	%f836, %f835, %f830, %p199;
	abs.f32 	%f837, %f931;
	setp.gt.f32 	%p200, %f837, 0f4B800000;
	add.f32 	%f838, %f836, 0f3F800000;
	selp.f32 	%f839, %f838, %f833, %p200;
	and.b32  	%r381, %r87, 1;
	setp.eq.b32 	%p201, %r381, 1;
	selp.f32 	%f163, 0f00000000, 0f3F800000, %p201;
	shl.b32 	%r382, %r86, 2;
	sub.s32 	%r383, %r88, %r382;
	cvt.rn.f32.s32 	%f840, %r383;
	div.approx.f32 	%f166, %f840, %f786;
	abs.f32 	%f935, %f166;
	setp.lt.f32 	%p202, %f935, 0f40000000;
	@%p202 bra 	LBB0_152;
// %bb.141:
	setp.gtu.f32 	%p203, %f935, 0f4B800000;
	@%p203 bra 	LBB0_148;
	bra.uni 	LBB0_142;
LBB0_148:
	mov.b32 	%r118, %f935;
	and.b32  	%r384, %r118, 8388607;
	or.b32  	%r2449, %r384, 1065353216;
	mov.b32 	%f934, %r2449;
	add.s32 	%r385, %r118, -1073741824;
	and.b32  	%r2450, %r385, -8388608;
	setp.eq.s32 	%p209, %r2450, 0;
	@%p209 bra 	LBB0_151;
// %bb.149:                             // %__nv_fmaf_rn.exit4.i.i.i1142.preheader
	mov.f32 	%f851, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f850,%f851;
	// end inline asm
LBB0_150:                               // %__nv_fmaf_rn.exit4.i.i.i1142
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r386, %r2450, 192937984;
	add.s32 	%r387, %r386, %r2449;
	mov.b32 	%f852, %r387;
	mul.f32 	%f853, %f850, %f852;
	sub.f32 	%f854, %f852, %f853;
	fma.rn.f32 	%f855, %f854, %f850, %f853;
	sub.f32 	%f856, %f852, %f855;
	fma.rz.f32 	%f857, %f856, %f850, %f855;
	cvt.rzi.f32.f32 	%f858, %f857;
	sub.f32 	%f934, %f852, %f858;
	sub.s32 	%r2450, %r2450, %r386;
	mov.b32 	%r2449, %f934;
	setp.ne.s32 	%p210, %r2450, 0;
	setp.ne.s32 	%p211, %r2449, 0;
	and.pred  	%p212, %p210, %p211;
	@%p212 bra 	LBB0_150;
LBB0_151:                               // %__internal_fmodf_slowpath_mod.exit.i.i1144
	setp.gt.u32 	%p213, %r118, 2139095039;
	selp.f32 	%f859, 0f7FFFFFFF, 0f4B800000, %p213;
	mul.f32 	%f860, %f934, 0f34000000;
	mul.f32 	%f935, %f859, %f860;
	bra.uni 	LBB0_152;
LBB0_142:                               // %__nv_fast_fdividef.exit.i.i.i1114
	div.approx.f32 	%f843, %f935, %f184;
	cvt.rzi.f32.f32 	%f933, %f843;
	fma.rn.f32 	%f169, %f933, 0fC0000000, %f935;
	mov.b32 	%r117, %f169;
	setp.lt.u32 	%p204, %r117, 1073741824;
	@%p204 bra 	LBB0_147;
// %bb.143:
	setp.lt.u32 	%p205, %r117, -2147483647;
	@%p205 bra 	LBB0_145;
// %bb.144:
	add.f32 	%f848, %f933, 0fBF800000;
	setp.lt.f32 	%p208, %f169, 0fC0000000;
	add.f32 	%f849, %f848, 0fBF800000;
	selp.f32 	%f933, %f849, %f848, %p208;
	bra.uni 	LBB0_147;
LBB0_145:
	add.f32 	%f933, %f933, 0f3F800000;
	setp.ltu.f32 	%p206, %f169, 0f40800000;
	@%p206 bra 	LBB0_147;
// %bb.146:                             // %__nv_fmaf_rn.exit.i.i.i1119
	add.f32 	%f844, %f933, 0f3F800000;
	fma.rn.f32 	%f846, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p207, %f846, 0f00000000;
	add.f32 	%f847, %f844, 0f3F800000;
	selp.f32 	%f933, %f847, %f844, %p207;
LBB0_147:                               // %__internal_fmodf_fastpath_quot.exit.i.i1123
	fma.rn.f32 	%f935, %f933, 0fC0000000, %f935;
LBB0_152:                               // %__internal_fmodf_kernel.exit.i1148
	mul.f32 	%f164, %f839, %f163;
	mul.f32 	%f165, %f836, %f163;
	abs.f32 	%f861, %f935;
	setp.gtu.f32 	%p214, %f861, 0f7F800000;
	@%p214 bra 	LBB0_154;
// %bb.153:
	mov.b32 	%r388, %f166;
	and.b32  	%r389, %r388, -2147483648;
	mov.b32 	%r390, %f935;
	or.b32  	%r391, %r389, %r390;
	mov.b32 	%f935, %r391;
LBB0_154:                               // %__nv_fmodf.exit1149
	add.f32 	%f862, %f935, %f935;
	mov.b32 	%r405, %f862;
	and.b32  	%r406, %r405, -2147483648;
	or.b32  	%r407, %r406, 1056964608;
	mov.b32 	%f863, %r407;
	add.f32 	%f864, %f862, %f863;
	cvt.rzi.f32.f32 	%f865, %f864;
	abs.f32 	%f866, %f862;
	setp.gt.f32 	%p215, %f866, 0f4B000000;
	selp.f32 	%f867, %f862, %f865, %p215;
	cvt.rzi.f32.f32 	%f868, %f862;
	setp.lt.f32 	%p216, %f866, 0f3F000000;
	selp.f32 	%f869, %f868, %f867, %p216;
	cvt.rzi.s32.f32 	%r408, %f869;
	fma.rn.f32 	%f870, %f869, 0fBF000000, %f935;
	mul.f32 	%f871, %f870, 0f34222169;
	fma.rn.f32 	%f872, %f870, 0f40490FDA, %f871;
	mul.f32 	%f873, %f872, %f872;
	fma.rn.f32 	%f874, %f873, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f875, %f874, %f873, 0f3D2AAABB;
	fma.rn.f32 	%f876, %f875, %f873, 0fBEFFFFFF;
	fma.rn.f32 	%f877, %f876, %f873, 0f3F800000;
	fma.rn.f32 	%f878, %f873, %f872, 0f00000000;
	fma.rn.f32 	%f879, %f873, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f880, %f879, %f873, 0fBE2AAAA8;
	fma.rn.f32 	%f881, %f880, %f878, %f872;
	and.b32  	%r409, %r408, 1;
	setp.eq.b32 	%p217, %r409, 1;
	selp.f32 	%f882, %f877, %f881, %p217;
	selp.f32 	%f883, %f881, %f877, %p217;
	and.b32  	%r410, %r408, 2;
	setp.eq.s32 	%p218, %r410, 0;
	neg.f32 	%f884, %f882;
	selp.f32 	%f885, %f882, %f884, %p218;
	add.s32 	%r411, %r408, 1;
	and.b32  	%r412, %r411, 2;
	setp.eq.s32 	%p219, %r412, 0;
	sub.f32 	%f887, %f213, %f883;
	selp.f32 	%f888, %f883, %f887, %p219;
	cvt.rzi.f32.f32 	%f889, %f935;
	setp.eq.f32 	%p220, %f889, %f935;
	mul.f32 	%f890, %f935, 0f00000000;
	selp.f32 	%f891, %f890, %f885, %p220;
	abs.f32 	%f892, %f935;
	setp.gt.f32 	%p221, %f892, 0f4B800000;
	add.f32 	%f893, %f891, 0f3F800000;
	selp.f32 	%f894, %f893, %f888, %p221;
	mul.f32 	%f895, %f894, %f163;
	mul.f32 	%f896, %f891, %f163;
	mov.b32 	%r394, %f895;
	mov.b32 	%r393, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r125, %r394, %r393;
	// end inline asm
	mov.b32 	%r400, %f896;
	xor.b32  	%r397, %r400, -2147483648;
	mov.b32 	%r399, %f165;
	xor.b32  	%r396, %r399, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r126, %r397, %r396;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r127, %r400, %r399;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r128, %r394, %r393;
	// end inline asm
	shl.b32 	%r413, %r1, 5;
	and.b32  	%r414, %r6, 28;
	and.b32  	%r415, %r413, 96;
	or.b32  	%r416, %r415, %r414;
	and.b32  	%r417, %r413, 128;
	and.b32  	%r418, %r7, 16;
	shl.b32 	%r419, %r3, 2;
	and.b32  	%r420, %r419, 32;
	and.b32  	%r421, %r3, 7;
	and.b32  	%r422, %r10, 8;
	or.b32  	%r423, %r420, %r421;
	or.b32  	%r424, %r423, %r418;
	or.b32  	%r129, %r424, %r422;
	or.b32  	%r130, %r416, %r417;
	and.b32  	%r131, %r2, 8;
	bfe.u32 	%r425, %r3, 2, 1;
	mul.lo.s32 	%r426, %r425, 130;
	and.b32  	%r427, %r3, 1;
	mul.lo.s32 	%r428, %r427, 520;
	shr.u32 	%r429, %r3, 3;
	mul.lo.s32 	%r430, %r429, 1057;
	bfe.u32 	%r431, %r3, 1, 1;
	mul.lo.s32 	%r432, %r431, 260;
	mul.lo.s32 	%r433, %r15, 65;
	shl.b32 	%r434, %r2, 4;
	or.b32  	%r435, %r131, %r434;
	shr.u32 	%r436, %r435, 2;
	and.b32  	%r437, %r436, 30;
	add.s32 	%r438, %r430, %r428;
	add.s32 	%r439, %r438, %r433;
	add.s32 	%r440, %r439, %r426;
	add.s32 	%r441, %r440, %r432;
	add.s32 	%r442, %r441, %r437;
	mul.wide.u32 	%rd85, %r442, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd37, %rd86, %rd85;
	add.s32 	%r443, %r428, 32;
	add.s32 	%r444, %r443, %r430;
	add.s32 	%r445, %r444, %r433;
	add.s32 	%r446, %r445, %r426;
	add.s32 	%r447, %r446, %r432;
	add.s32 	%r448, %r447, %r437;
	mul.wide.u32 	%rd87, %r448, 4;
	add.s64 	%rd38, %rd86, %rd87;
	or.b32  	%r449, %r428, 1;
	add.s32 	%r450, %r449, %r430;
	add.s32 	%r451, %r450, %r433;
	add.s32 	%r452, %r451, %r426;
	add.s32 	%r453, %r452, %r432;
	add.s32 	%r454, %r453, %r437;
	mul.wide.u32 	%rd88, %r454, 4;
	add.s64 	%rd39, %rd86, %rd88;
	add.s32 	%r455, %r428, 33;
	add.s32 	%r456, %r455, %r430;
	add.s32 	%r457, %r456, %r433;
	add.s32 	%r458, %r457, %r426;
	add.s32 	%r459, %r458, %r432;
	add.s32 	%r460, %r459, %r437;
	mul.wide.u32 	%rd89, %r460, 4;
	add.s64 	%rd40, %rd86, %rd89;
	or.b32  	%r461, %r429, 4;
	mul.lo.s32 	%r462, %r461, 1057;
	add.s32 	%r463, %r433, %r428;
	add.s32 	%r464, %r463, %r426;
	add.s32 	%r465, %r464, %r462;
	add.s32 	%r466, %r465, %r432;
	add.s32 	%r467, %r466, %r437;
	mul.wide.s32 	%rd90, %r467, 4;
	add.s64 	%rd41, %rd86, %rd90;
	add.s32 	%r468, %r443, %r433;
	add.s32 	%r469, %r468, %r426;
	add.s32 	%r470, %r469, %r462;
	add.s32 	%r471, %r470, %r432;
	add.s32 	%r472, %r471, %r437;
	mul.wide.s32 	%rd91, %r472, 4;
	add.s64 	%rd42, %rd86, %rd91;
	add.s32 	%r473, %r449, %r433;
	add.s32 	%r474, %r473, %r426;
	add.s32 	%r475, %r474, %r462;
	add.s32 	%r476, %r475, %r432;
	add.s32 	%r477, %r476, %r437;
	mul.wide.s32 	%rd92, %r477, 4;
	add.s64 	%rd43, %rd86, %rd92;
	add.s32 	%r478, %r455, %r433;
	add.s32 	%r479, %r478, %r426;
	add.s32 	%r480, %r479, %r462;
	add.s32 	%r481, %r480, %r432;
	add.s32 	%r482, %r481, %r437;
	mul.wide.s32 	%rd93, %r482, 4;
	add.s64 	%rd44, %rd86, %rd93;
	mul.lo.s32 	%r483, %r15, 520;
	and.b32  	%r484, %r4, 32;
	shl.b32 	%r485, %r2, 3;
	and.b32  	%r486, %r485, 64;
	shl.b32 	%r487, %r3, 1;
	or.b32  	%r488, %r486, %r487;
	shr.u32 	%r489, %r488, 2;
	mad.lo.s32 	%r490, %r12, 130, %r483;
	add.s32 	%r491, %r490, %r484;
	mad.lo.s32 	%r492, %r14, 260, %r491;
	mad.lo.s32 	%r493, %r11, 65, %r492;
	add.s32 	%r494, %r493, %r489;
	or.b32  	%r495, %r489, 8;
	add.s32 	%r496, %r493, %r495;
	mul.lo.s32 	%r497, %r8, 65;
	or.b32  	%r498, %r489, %r484;
	add.s32 	%r499, %r498, %r497;
	or.b32  	%r500, %r495, %r484;
	add.s32 	%r501, %r500, %r497;
	and.b32  	%r502, %r419, 28;
	or.b32  	%r503, %r502, %r85;
	shl.b32 	%r504, %r1, 2;
	and.b32  	%r505, %r504, 480;
	or.b32  	%r506, %r503, %r505;
	shl.b32 	%r507, %r506, 8;
	shl.b32 	%r508, %r3, 14;
	and.b32  	%r509, %r508, 131072;
	or.b32  	%r510, %r509, %r417;
	or.b32  	%r511, %r510, %r416;
	or.b32  	%r512, %r511, %r507;
	add.s32 	%r132, %r512, -393216;
	add.s32 	%r133, %r512, 131072;
	and.b32  	%r513, %r487, 14;
	or.b32  	%r514, %r513, %r15;
	mul.lo.s32 	%r515, %r514, 65;
	add.s32 	%r516, %r515, %r430;
	add.s32 	%r517, %r516, %r437;
	mul.wide.u32 	%rd94, %r517, 4;
	add.s64 	%rd45, %rd86, %rd94;
	cvt.u64.u32 	%rd95, %r437;
	cvt.u64.u32 	%rd96, %r515;
	cvt.u64.u32 	%rd97, %r430;
	add.s64 	%rd98, %rd97, %rd96;
	add.s64 	%rd99, %rd98, %rd95;
	shl.b64 	%rd100, %rd99, 2;
	add.s64 	%rd46, %rd86, %rd100;
	add.s32 	%r518, %r515, %r462;
	add.s32 	%r519, %r518, %r437;
	mul.wide.u32 	%rd101, %r519, 4;
	add.s64 	%rd47, %rd86, %rd101;
	cvt.u64.u32 	%rd102, %r462;
	add.s64 	%rd103, %rd102, %rd96;
	add.s64 	%rd104, %rd103, %rd95;
	shl.b64 	%rd105, %rd104, 2;
	add.s64 	%rd48, %rd86, %rd105;
	mul.wide.u32 	%rd106, %r501, 4;
	add.s64 	%rd49, %rd86, %rd106;
	mul.wide.u32 	%rd107, %r499, 4;
	add.s64 	%rd50, %rd86, %rd107;
	mul.wide.u32 	%rd108, %r496, 4;
	add.s64 	%rd51, %rd86, %rd108;
	mul.wide.u32 	%rd109, %r494, 4;
	add.s64 	%rd52, %rd86, %rd109;
	mov.u32 	%r2433, 0;
	setp.eq.s32 	%p222, %r131, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	mov.u32 	%r2434, %r2433;
	mov.u32 	%r2435, %r2433;
	mov.u32 	%r2436, %r2433;
	mov.u32 	%r2445, %r2433;
	mov.u32 	%r2446, %r2433;
	mov.u32 	%r2439, %r2433;
	bra.uni 	LBB0_122;
LBB0_126:                               // %L15227
                                        //   in Loop: Header=BB0_122 Depth=1
	add.s32 	%r2439, %r95, 256;
	setp.gt.s32 	%p227, %r5, %r2439;
	setp.ne.s32 	%p228, %r95, 32512;
	and.pred  	%p229, %p228, %p227;
	@%p229 bra 	LBB0_122;
	bra.uni 	LBB0_127;
LBB0_122:                               // %L1285
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_123 Depth 2
	mov.u32 	%r95, %r2439;
	or.b32  	%r553, %r129, %r95;
	shl.b32 	%r554, %r553, 12;
	or.b32  	%r555, %r130, %r554;
	mul.wide.s32 	%rd110, %r555, 4;
	add.s64 	%rd111, %rd2, %rd110;
	ld.global.v4.u32 	{%r556, %r557, %r558, %r559}, [%rd111];
	or.b32  	%r560, %r555, 524288;
	mul.wide.s32 	%rd112, %r560, 4;
	add.s64 	%rd113, %rd2, %rd112;
	ld.global.v4.u32 	{%r561, %r562, %r563, %r564}, [%rd113];
	selp.b32 	%r565, %r558, %r556, %p222;
	shfl.sync.bfly.b32	%r566, %r565, 8, 31, -1;
	selp.b32 	%r521, %r556, %r566, %p222;
	selp.b32 	%r522, %r566, %r558, %p222;
	selp.b32 	%r567, %r559, %r557, %p222;
	shfl.sync.bfly.b32	%r568, %r567, 8, 31, -1;
	selp.b32 	%r529, %r557, %r568, %p222;
	selp.b32 	%r530, %r568, %r559, %p222;
	selp.b32 	%r569, %r563, %r561, %p222;
	shfl.sync.bfly.b32	%r570, %r569, 8, 31, -1;
	selp.b32 	%r537, %r561, %r570, %p222;
	selp.b32 	%r538, %r570, %r563, %p222;
	selp.b32 	%r571, %r564, %r562, %p222;
	shfl.sync.bfly.b32	%r572, %r571, 8, 31, -1;
	selp.b32 	%r545, %r562, %r572, %p222;
	selp.b32 	%r546, %r572, %r564, %p222;
	mov.u32 	%r547, 21520;
	// begin inline asm
	prmt.b32 %r520, %r521, %r522, %r547;
	// end inline asm
	mov.u32 	%r551, 30258;
	// begin inline asm
	prmt.b32 %r524, %r521, %r522, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r528, %r529, %r530, %r547;
	// end inline asm
	// begin inline asm
	prmt.b32 %r532, %r529, %r530, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r536, %r537, %r538, %r547;
	// end inline asm
	// begin inline asm
	prmt.b32 %r540, %r537, %r538, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r544, %r545, %r546, %r547;
	// end inline asm
	// begin inline asm
	prmt.b32 %r548, %r545, %r546, %r551;
	// end inline asm
	st.shared.u32 	[%rd37], %r520;
	st.shared.u32 	[%rd38], %r524;
	st.shared.u32 	[%rd39], %r528;
	st.shared.u32 	[%rd40], %r532;
	st.shared.u32 	[%rd41], %r536;
	st.shared.u32 	[%rd42], %r540;
	st.shared.u32 	[%rd43], %r544;
	st.shared.u32 	[%rd44], %r548;
	bar.sync 	0;
	mov.u32 	%r2440, 256;
	mov.u64 	%rd128, %rd52;
	mov.u64 	%rd129, %rd51;
	mov.u64 	%rd130, %rd50;
	mov.u64 	%rd131, %rd49;
	mov.u32 	%r2441, %r2433;
	mov.u32 	%r2442, %r2434;
	mov.u32 	%r2443, %r2435;
	mov.u32 	%r2444, %r2436;
LBB0_123:                               // %L6785
                                        //   Parent Loop BB0_122 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2434, %r2446;
	mov.u32 	%r2433, %r2445;
	ld.shared.u32 	%r2435, [%rd128];
	ld.shared.u32 	%r2436, [%rd129];
	// begin inline asm
	mov.b32 %r578, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r589, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r577, %r2435, -2004318072;
	mov.u32 	%r576, 983055;
	// begin inline asm
	lop3.b32 %r575, %r576, %r577, %r578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r579, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r580, %r578, %r579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r583, %r575, %r580;
	// end inline asm
	mov.u32 	%r587, 15728880;
	// begin inline asm
	lop3.b32 %r586, %r587, %r577, %r589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r590, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r591, %r589, %r590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r594, %r586, %r591;
	// end inline asm
	shr.u32 	%r599, %r577, 8;
	// begin inline asm
	lop3.b32 %r597, %r576, %r599, %r578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r601, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r602, %r578, %r601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r605, %r597, %r602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r608, %r587, %r599, %r589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r612, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r613, %r589, %r612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r616, %r608, %r613;
	// end inline asm
	// begin inline asm
	mov.b32 %r624, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r635, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r623, %r2436, -2004318072;
	// begin inline asm
	lop3.b32 %r621, %r576, %r623, %r624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r625, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r626, %r624, %r625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r629, %r621, %r626;
	// end inline asm
	// begin inline asm
	lop3.b32 %r632, %r587, %r623, %r635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r636, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r637, %r635, %r636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r640, %r632, %r637;
	// end inline asm
	shr.u32 	%r645, %r623, 8;
	// begin inline asm
	lop3.b32 %r643, %r576, %r645, %r624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r647, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r648, %r624, %r647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r651, %r643, %r648;
	// end inline asm
	// begin inline asm
	lop3.b32 %r654, %r587, %r645, %r635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r658, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r659, %r635, %r658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r662, %r654, %r659;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r665, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r667, %r665, %r583;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r670, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r672, %r670, %r594;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r675, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r677, %r675, %r605;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r680, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r682, %r680, %r616;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r685, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r687, %r685, %r629;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r690, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r692, %r690, %r640;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r695, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r697, %r695, %r651;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r700, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r702, %r700, %r662;
	// end inline asm
	// begin inline asm
	mov.b32 %r710, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r721, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r709, %r2441, -2004318072;
	// begin inline asm
	lop3.b32 %r707, %r576, %r709, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r712, %r710, %r711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r715, %r707, %r712;
	// end inline asm
	// begin inline asm
	lop3.b32 %r718, %r587, %r709, %r721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r722, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r723, %r721, %r722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r726, %r718, %r723;
	// end inline asm
	shr.u32 	%r731, %r709, 8;
	// begin inline asm
	lop3.b32 %r729, %r576, %r731, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r733, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r734, %r710, %r733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r737, %r729, %r734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r740, %r587, %r731, %r721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r744, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r745, %r721, %r744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r748, %r740, %r745;
	// end inline asm
	// begin inline asm
	mov.b32 %r756, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r767, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r755, %r2442, -2004318072;
	// begin inline asm
	lop3.b32 %r753, %r576, %r755, %r756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r758, %r756, %r757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r761, %r753, %r758;
	// end inline asm
	// begin inline asm
	lop3.b32 %r764, %r587, %r755, %r767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r769, %r767, %r768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r772, %r764, %r769;
	// end inline asm
	shr.u32 	%r777, %r755, 8;
	// begin inline asm
	lop3.b32 %r775, %r576, %r777, %r756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r779, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r780, %r756, %r779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r783, %r775, %r780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r786, %r587, %r777, %r767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r790, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r791, %r767, %r790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r794, %r786, %r791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r797, %r178, %r715, %r667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r801, %r178, %r726, %r672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r805, %r178, %r737, %r677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r809, %r178, %r748, %r682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r813, %r178, %r761, %r687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r817, %r178, %r772, %r692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r821, %r178, %r783, %r697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r825, %r178, %r794, %r702;
	// end inline asm
	// begin inline asm
	mov.b32 %r834, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r845, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r833, %r2443, -2004318072;
	// begin inline asm
	lop3.b32 %r831, %r576, %r833, %r834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r835, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r836, %r834, %r835;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r839, %r831, %r836;
	// end inline asm
	// begin inline asm
	lop3.b32 %r842, %r587, %r833, %r845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r846, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r847, %r845, %r846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r850, %r842, %r847;
	// end inline asm
	shr.u32 	%r855, %r833, 8;
	// begin inline asm
	lop3.b32 %r853, %r576, %r855, %r834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r857, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r858, %r834, %r857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r861, %r853, %r858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r864, %r587, %r855, %r845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r868, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r869, %r845, %r868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r872, %r864, %r869;
	// end inline asm
	// begin inline asm
	mov.b32 %r880, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r879, %r2444, -2004318072;
	// begin inline asm
	lop3.b32 %r877, %r576, %r879, %r880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r882, %r880, %r881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r885, %r877, %r882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r888, %r587, %r879, %r891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r892, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r893, %r891, %r892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r896, %r888, %r893;
	// end inline asm
	shr.u32 	%r901, %r879, 8;
	// begin inline asm
	lop3.b32 %r899, %r576, %r901, %r880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r903, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r904, %r880, %r903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r907, %r899, %r904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r910, %r587, %r901, %r891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r914, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r915, %r891, %r914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r918, %r910, %r915;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r921, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r923, %r921, %r839, %r797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r927, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r929, %r927, %r850, %r801;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r933, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r935, %r933, %r861, %r805;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r939, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r941, %r939, %r872, %r809;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r945, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r947, %r945, %r885, %r813;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r951, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r953, %r951, %r896, %r817;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r957, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r959, %r957, %r907, %r821;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r963, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r965, %r963, %r918, %r825;
	// end inline asm
	// begin inline asm
	mov.b32 %r974, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r985, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r973, %r2433, -2004318072;
	// begin inline asm
	lop3.b32 %r971, %r576, %r973, %r974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r976, %r974, %r975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r979, %r971, %r976;
	// end inline asm
	// begin inline asm
	lop3.b32 %r982, %r587, %r973, %r985, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r987, %r985, %r986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r990, %r982, %r987;
	// end inline asm
	shr.u32 	%r995, %r973, 8;
	// begin inline asm
	lop3.b32 %r993, %r576, %r995, %r974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r997, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r998, %r974, %r997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1001, %r993, %r998;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1004, %r587, %r995, %r985, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1008, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1009, %r985, %r1008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1012, %r1004, %r1009;
	// end inline asm
	// begin inline asm
	mov.b32 %r1020, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1031, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1019, %r2434, -2004318072;
	// begin inline asm
	lop3.b32 %r1017, %r576, %r1019, %r1020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1022, %r1020, %r1021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1025, %r1017, %r1022;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1028, %r587, %r1019, %r1031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1032, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1033, %r1031, %r1032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1036, %r1028, %r1033;
	// end inline asm
	shr.u32 	%r1041, %r1019, 8;
	// begin inline asm
	lop3.b32 %r1039, %r576, %r1041, %r1020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1043, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1044, %r1020, %r1043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1047, %r1039, %r1044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1050, %r587, %r1041, %r1031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1054, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1055, %r1031, %r1054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1058, %r1050, %r1055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1100, %r214, %r979, %r923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r214, %r990, %r929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r214, %r1001, %r935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r214, %r1012, %r941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1118, %r214, %r1025, %r947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r214, %r1036, %r953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1127, %r214, %r1047, %r959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r214, %r1058, %r965;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1093, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1095, %r1093, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1098, %r42, %r1100, %r1095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1102, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1104, %r1102, %r1106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r42, %r1109, %r1104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1111, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1113, %r1111, %r1115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r42, %r1118, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1120, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1122, %r1120, %r1124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r42, %r1127, %r1122;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1129, %r43, %r1100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r42, %r1097, %r1129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1136, %r43, %r1109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r42, %r1106, %r1136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1143, %r43, %r1118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r42, %r1115, %r1143;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1150, %r43, %r1127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r42, %r1124, %r1150;
	// end inline asm
	mov.u32 	%r2198, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1204, %r1201}, {%r61, %r63, %r62, %r64}, {%r1098, %r1132}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1213, %r1210}, {%r61, %r63, %r62, %r64}, {%r1107, %r1139}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1222, %r1219}, {%r61, %r63, %r62, %r64}, {%r1116, %r1146}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1231, %r1228}, {%r61, %r63, %r62, %r64}, {%r1125, %r1153}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1197, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r1197, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r83, %r1204, %r1199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1206, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r1206, %r1210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r83, %r1213, %r1208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1215, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r1215, %r1219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r83, %r1222, %r1217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1224, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1226, %r1224, %r1228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1229, %r83, %r1231, %r1226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1233, %r84, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1236, %r83, %r1201, %r1233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1240, %r84, %r1213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1243, %r83, %r1210, %r1240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1247, %r84, %r1222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1250, %r83, %r1219, %r1247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1254, %r84, %r1231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r83, %r1228, %r1254;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1261, %r1262}, {%r125, %r127, %r126, %r128}, {%r1202, %r1236}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1271, %r1272}, {%r125, %r127, %r126, %r128}, {%r1211, %r1243}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1281, %r1282}, {%r125, %r127, %r126, %r128}, {%r1220, %r1250}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1291, %r1292}, {%r125, %r127, %r126, %r128}, {%r1229, %r1257}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1301, %r9, %r1261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r9, %r1262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1307, %r9, %r1271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1310, %r9, %r1272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1313, %r9, %r1281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1316, %r9, %r1282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1319, %r9, %r1291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1322, %r9, %r1292;
	// end inline asm
	// begin inline asm
	mov.b32 %r1325, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1326, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1327, %r1301, %r1325;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1330, %r1327, %r1326;
	// end inline asm
	// begin inline asm
	mov.b32 %r1333, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1334, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1335, %r1304, %r1333;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1338, %r1335, %r1334;
	// end inline asm
	// begin inline asm
	mov.b32 %r1341, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1342, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1343, %r1307, %r1341;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1346, %r1343, %r1342;
	// end inline asm
	// begin inline asm
	mov.b32 %r1349, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1350, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1351, %r1310, %r1349;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1354, %r1351, %r1350;
	// end inline asm
	// begin inline asm
	mov.b32 %r1357, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1358, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1359, %r1313, %r1357;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1362, %r1359, %r1358;
	// end inline asm
	// begin inline asm
	mov.b32 %r1365, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1366, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1367, %r1316, %r1365;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1370, %r1367, %r1366;
	// end inline asm
	// begin inline asm
	mov.b32 %r1373, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1374, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1375, %r1319, %r1373;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1378, %r1375, %r1374;
	// end inline asm
	// begin inline asm
	mov.b32 %r1381, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1382, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1383, %r1322, %r1381;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1386, %r1383, %r1382;
	// end inline asm
	// begin inline asm
	mov.b32 %r1392, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1390, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1391, %r1392, %r1390;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1394, %r1330, %r1391;
	// end inline asm
	// begin inline asm
	mov.b32 %r1397, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1398, %r1392, %r1397;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1401, %r1338, %r1398;
	// end inline asm
	// begin inline asm
	mov.b32 %r1404, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1405, %r1392, %r1404;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1408, %r1346, %r1405;
	// end inline asm
	// begin inline asm
	mov.b32 %r1411, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1412, %r1392, %r1411;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1415, %r1354, %r1412;
	// end inline asm
	mov.u32 	%r1421, 25152;
	// begin inline asm
	prmt.b32 %r1418, %r1394, %r1408, %r1421;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1422, %r1401, %r1415, %r1421;
	// end inline asm
	shl.b32 	%r1429, %r1422, 4;
	mov.u32 	%r1427, 252645135;
	// begin inline asm
	lop3.b32 %r1426, %r1427, %r1418, %r1429, 202;
	// end inline asm
	xor.b32  	%r2369, %r1426, -2004318072;
	// begin inline asm
	mov.b32 %r1433, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1431, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1432, %r1433, %r1431;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1435, %r1362, %r1432;
	// end inline asm
	// begin inline asm
	mov.b32 %r1438, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1439, %r1433, %r1438;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1442, %r1370, %r1439;
	// end inline asm
	// begin inline asm
	mov.b32 %r1445, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1446, %r1433, %r1445;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1449, %r1378, %r1446;
	// end inline asm
	// begin inline asm
	mov.b32 %r1452, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1453, %r1433, %r1452;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1456, %r1386, %r1453;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1459, %r1435, %r1449, %r1421;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1463, %r1442, %r1456, %r1421;
	// end inline asm
	shl.b32 	%r1470, %r1463, 4;
	// begin inline asm
	lop3.b32 %r1467, %r1427, %r1459, %r1470, 202;
	// end inline asm
	xor.b32  	%r2370, %r1467, -2004318072;
	st.shared.u32 	[%rd130], %r2369;
	st.shared.u32 	[%rd131], %r2370;
	ld.shared.u32 	%r2445, [%rd128];
	ld.shared.u32 	%r2446, [%rd129];
	// begin inline asm
	mov.b32 %r1476, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1487, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1475, %r2445, -2004318072;
	// begin inline asm
	lop3.b32 %r1473, %r576, %r1475, %r1476, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1477, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1478, %r1476, %r1477;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1481, %r1473, %r1478;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1484, %r587, %r1475, %r1487, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1488, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1489, %r1487, %r1488;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1492, %r1484, %r1489;
	// end inline asm
	shr.u32 	%r1497, %r1475, 8;
	// begin inline asm
	lop3.b32 %r1495, %r576, %r1497, %r1476, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1499, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1500, %r1476, %r1499;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1503, %r1495, %r1500;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1506, %r587, %r1497, %r1487, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1510, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1511, %r1487, %r1510;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1514, %r1506, %r1511;
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1533, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1521, %r2446, -2004318072;
	// begin inline asm
	lop3.b32 %r1519, %r576, %r1521, %r1522, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1523, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1524, %r1522, %r1523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1527, %r1519, %r1524;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1530, %r587, %r1521, %r1533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1534, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1535, %r1533, %r1534;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1538, %r1530, %r1535;
	// end inline asm
	shr.u32 	%r1543, %r1521, 8;
	// begin inline asm
	lop3.b32 %r1541, %r576, %r1543, %r1522, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1545, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1546, %r1522, %r1545;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1549, %r1541, %r1546;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1552, %r587, %r1543, %r1533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1556, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1557, %r1533, %r1556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1560, %r1552, %r1557;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1563, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1565, %r1563, %r1481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1568, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1570, %r1568, %r1492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1573, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1575, %r1573, %r1503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1578, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1580, %r1578, %r1514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1583, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1585, %r1583, %r1527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1588, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r1588, %r1538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1593, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r1593, %r1549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1598, %r232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1600, %r1598, %r1560;
	// end inline asm
	// begin inline asm
	mov.b32 %r1608, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1619, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1605, %r576, %r833, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1609, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1610, %r1608, %r1609;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1613, %r1605, %r1610;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1616, %r587, %r833, %r1619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1620, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1621, %r1619, %r1620;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1624, %r1616, %r1621;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1627, %r576, %r855, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1631, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1632, %r1608, %r1631;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1635, %r1627, %r1632;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1638, %r587, %r855, %r1619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1642, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1643, %r1619, %r1642;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1646, %r1638, %r1643;
	// end inline asm
	// begin inline asm
	mov.b32 %r1654, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1665, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1651, %r576, %r879, %r1654, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1655, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1656, %r1654, %r1655;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1659, %r1651, %r1656;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1662, %r587, %r879, %r1665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1666, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1667, %r1665, %r1666;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1670, %r1662, %r1667;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1673, %r576, %r901, %r1654, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1677, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1678, %r1654, %r1677;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1681, %r1673, %r1678;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1684, %r587, %r901, %r1665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1688, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1689, %r1665, %r1688;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1692, %r1684, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r178, %r1613, %r1565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r178, %r1624, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r178, %r1635, %r1575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r178, %r1646, %r1580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r178, %r1659, %r1585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r178, %r1670, %r1590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r178, %r1681, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r178, %r1692, %r1600;
	// end inline asm
	// begin inline asm
	mov.b32 %r1732, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1743, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1729, %r576, %r973, %r1732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1733, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1734, %r1732, %r1733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1737, %r1729, %r1734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1740, %r587, %r973, %r1743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1744, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1745, %r1743, %r1744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1748, %r1740, %r1745;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1751, %r576, %r995, %r1732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1755, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1756, %r1732, %r1755;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1759, %r1751, %r1756;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1762, %r587, %r995, %r1743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1766, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1767, %r1743, %r1766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1770, %r1762, %r1767;
	// end inline asm
	// begin inline asm
	mov.b32 %r1778, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1789, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1775, %r576, %r1019, %r1778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1779, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1780, %r1778, %r1779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1783, %r1775, %r1780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1786, %r587, %r1019, %r1789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1790, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1791, %r1789, %r1790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1794, %r1786, %r1791;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1797, %r576, %r1041, %r1778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1801, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1802, %r1778, %r1801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1805, %r1797, %r1802;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1808, %r587, %r1041, %r1789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1812, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1813, %r1789, %r1812;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1816, %r1808, %r1813;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1819, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r1819, %r1737, %r1695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1825, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r1825, %r1748, %r1699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1831, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1833, %r1831, %r1759, %r1703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1837, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r1837, %r1770, %r1707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1843, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r1843, %r1783, %r1711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1849, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r1849, %r1794, %r1715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1855, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r1855, %r1805, %r1719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1861, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r1861, %r1816, %r1723;
	// end inline asm
	// begin inline asm
	mov.b32 %r1872, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1883, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1869, %r576, %r577, %r1872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1873, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1874, %r1872, %r1873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1877, %r1869, %r1874;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1880, %r587, %r577, %r1883, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1884, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1885, %r1883, %r1884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1888, %r1880, %r1885;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1891, %r576, %r599, %r1872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1895, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1896, %r1872, %r1895;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1899, %r1891, %r1896;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1902, %r587, %r599, %r1883, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1906, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1907, %r1883, %r1906;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1910, %r1902, %r1907;
	// end inline asm
	// begin inline asm
	mov.b32 %r1918, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1929, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1915, %r576, %r623, %r1918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1919, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1920, %r1918, %r1919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1923, %r1915, %r1920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1926, %r587, %r623, %r1929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1930, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1931, %r1929, %r1930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1934, %r1926, %r1931;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1937, %r576, %r645, %r1918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1941, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1942, %r1918, %r1941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1945, %r1937, %r1942;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1948, %r587, %r645, %r1929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1952, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1953, %r1929, %r1952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1956, %r1948, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r214, %r1877, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r214, %r1888, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r214, %r1899, %r1833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r214, %r1910, %r1839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r214, %r1923, %r1845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2013, %r214, %r1934, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r214, %r1945, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2022, %r214, %r1956, %r1863;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1991, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1993, %r1991, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r42, %r1998, %r1993;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2000, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2002, %r2000, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r42, %r2007, %r2002;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2009, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r2009, %r2013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r42, %r2016, %r2011;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2018, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2020, %r2018, %r2022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r42, %r2025, %r2020;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2027, %r43, %r1998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r42, %r1995, %r2027;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2034, %r43, %r2007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r42, %r2004, %r2034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2041, %r43, %r2016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r42, %r2013, %r2041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2048, %r43, %r2025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2051, %r42, %r2022, %r2048;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2102, %r2099}, {%r61, %r63, %r62, %r64}, {%r1996, %r2030}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2111, %r2108}, {%r61, %r63, %r62, %r64}, {%r2005, %r2037}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2120, %r2117}, {%r61, %r63, %r62, %r64}, {%r2014, %r2044}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2129, %r2126}, {%r61, %r63, %r62, %r64}, {%r2023, %r2051}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2095, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2097, %r2095, %r2099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r83, %r2102, %r2097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2104, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2106, %r2104, %r2108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2109, %r83, %r2111, %r2106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2113, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2115, %r2113, %r2117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2118, %r83, %r2120, %r2115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2122, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2124, %r2122, %r2126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2127, %r83, %r2129, %r2124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r84, %r2102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2134, %r83, %r2099, %r2131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r84, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2141, %r83, %r2108, %r2138;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r84, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r83, %r2117, %r2145;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2152, %r84, %r2129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r83, %r2126, %r2152;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2159, %r2160}, {%r125, %r127, %r126, %r128}, {%r2100, %r2134}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2169, %r2170}, {%r125, %r127, %r126, %r128}, {%r2109, %r2141}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2179, %r2180}, {%r125, %r127, %r126, %r128}, {%r2118, %r2148}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2189, %r2190}, {%r125, %r127, %r126, %r128}, {%r2127, %r2155}, {%r2198, %r2198};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r9, %r2159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r9, %r2160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2205, %r9, %r2169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r9, %r2170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2211, %r9, %r2179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2214, %r9, %r2180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r9, %r2189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r9, %r2190;
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2225, %r2199, %r2223;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2228, %r2225, %r2224;
	// end inline asm
	// begin inline asm
	mov.b32 %r2231, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2232, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2233, %r2202, %r2231;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2236, %r2233, %r2232;
	// end inline asm
	// begin inline asm
	mov.b32 %r2239, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2240, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2241, %r2205, %r2239;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2244, %r2241, %r2240;
	// end inline asm
	// begin inline asm
	mov.b32 %r2247, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2248, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2249, %r2208, %r2247;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2252, %r2249, %r2248;
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2257, %r2211, %r2255;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2260, %r2257, %r2256;
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2265, %r2214, %r2263;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2268, %r2265, %r2264;
	// end inline asm
	// begin inline asm
	mov.b32 %r2271, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2272, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2273, %r2217, %r2271;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2276, %r2273, %r2272;
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2281, %r2220, %r2279;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2284, %r2281, %r2280;
	// end inline asm
	// begin inline asm
	mov.b32 %r2290, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2288, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2289, %r2290, %r2288;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2292, %r2228, %r2289;
	// end inline asm
	// begin inline asm
	mov.b32 %r2295, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2296, %r2290, %r2295;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2299, %r2236, %r2296;
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2303, %r2290, %r2302;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2306, %r2244, %r2303;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2310, %r2290, %r2309;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2313, %r2252, %r2310;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2316, %r2292, %r2306, %r1421;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2320, %r2299, %r2313, %r1421;
	// end inline asm
	shl.b32 	%r2327, %r2320, 4;
	// begin inline asm
	lop3.b32 %r2324, %r1427, %r2316, %r2327, 202;
	// end inline asm
	xor.b32  	%r2371, %r2324, -2004318072;
	// begin inline asm
	mov.b32 %r2331, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2330, %r2331, %r2329;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2333, %r2260, %r2330;
	// end inline asm
	// begin inline asm
	mov.b32 %r2336, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2337, %r2331, %r2336;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2340, %r2268, %r2337;
	// end inline asm
	// begin inline asm
	mov.b32 %r2343, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2344, %r2331, %r2343;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2347, %r2276, %r2344;
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2351, %r2331, %r2350;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2354, %r2284, %r2351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2357, %r2333, %r2347, %r1421;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2361, %r2340, %r2354, %r1421;
	// end inline asm
	shl.b32 	%r2368, %r2361, 4;
	// begin inline asm
	lop3.b32 %r2365, %r1427, %r2357, %r2368, 202;
	// end inline asm
	xor.b32  	%r2372, %r2365, -2004318072;
	st.shared.u32 	[%rd130], %r2371;
	st.shared.u32 	[%rd131], %r2372;
	add.s32 	%r2440, %r2440, -32;
	add.s64 	%rd131, %rd131, 4228;
	add.s64 	%rd130, %rd130, 4228;
	add.s64 	%rd129, %rd129, 4228;
	add.s64 	%rd128, %rd128, 4228;
	setp.eq.s32 	%p223, %r2440, 0;
	mov.u32 	%r2441, %r2433;
	mov.u32 	%r2442, %r2434;
	mov.u32 	%r2443, %r2435;
	mov.u32 	%r2444, %r2436;
	@%p223 bra 	LBB0_124;
	bra.uni 	LBB0_123;
LBB0_124:                               // %guard_pass5781
                                        //   in Loop: Header=BB0_122 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2378, [%rd45];
	ld.shared.u32 	%r2379, [%rd46+128];
	ld.shared.u32 	%r2386, [%rd46+4];
	ld.shared.u32 	%r2387, [%rd46+132];
	ld.shared.u32 	%r2394, [%rd47];
	ld.shared.u32 	%r2395, [%rd48+128];
	ld.shared.u32 	%r2402, [%rd48+4];
	ld.shared.u32 	%r2403, [%rd48+132];
	// begin inline asm
	prmt.b32 %r2373, %r2378, %r2379, %r547;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2377, %r2378, %r2379, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2381, %r2386, %r2387, %r547;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2385, %r2386, %r2387, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2389, %r2394, %r2395, %r547;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2393, %r2394, %r2395, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2397, %r2402, %r2403, %r547;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2401, %r2402, %r2403, %r551;
	// end inline asm
	selp.b32 	%r2405, %r2377, %r2373, %p222;
	shfl.sync.bfly.b32	%r142, %r2405, 8, 31, -1;
	selp.b32 	%r2406, %r2385, %r2381, %p222;
	shfl.sync.bfly.b32	%r143, %r2406, 8, 31, -1;
	selp.b32 	%r2407, %r2393, %r2389, %p222;
	shfl.sync.bfly.b32	%r144, %r2407, 8, 31, -1;
	selp.b32 	%r2408, %r2401, %r2397, %p222;
	shfl.sync.bfly.b32	%r145, %r2408, 8, 31, -1;
	setp.eq.s32 	%p225, %r95, 0;
	@%p225 bra 	LBB0_126;
// %bb.125:                             // %L14820
                                        //   in Loop: Header=BB0_122 Depth=1
	selp.b32 	%r2409, %r145, %r2401, %p222;
	selp.b32 	%r2410, %r2397, %r145, %p222;
	selp.b32 	%r2411, %r144, %r2393, %p222;
	selp.b32 	%r2412, %r2389, %r144, %p222;
	selp.b32 	%r2413, %r143, %r2385, %p222;
	selp.b32 	%r2414, %r2381, %r143, %p222;
	selp.b32 	%r2415, %r142, %r2377, %p222;
	selp.b32 	%r2416, %r2373, %r142, %p222;
	shl.b32 	%r2417, %r95, 12;
	add.s32 	%r2418, %r132, %r2417;
	mul.wide.s32 	%rd114, %r2418, 4;
	add.s64 	%rd115, %rd3, %rd114;
	st.global.v4.u32 	[%rd115], {%r2416, %r2414, %r2415, %r2413};
	or.b32  	%r2419, %r133, %r2417;
	mul.wide.u32 	%rd116, %r2419, 4;
	add.s64 	%rd117, %rd3, %rd116;
	st.global.v4.u32 	[%rd117], {%r2412, %r2410, %r2411, %r2409};
	bra.uni 	LBB0_126;
LBB0_127:                               // %L15242
	st.global.u32 	[%rd4], %r2198;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd62, exception1;
	cvta.global.u64 	%rd63, %rd62;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd63;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r146;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L149
	mov.u32 	%r153, 2;
	st.global.u32 	[%rd4], %r153;
	mov.u64 	%rd65, exception1271;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r146;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_130:                               // %L15341
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6457, 
	(
	);
	} // callseq 4
	mov.u64 	%rd71, exception1;
	cvta.global.u64 	%rd72, %rd71;
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd72;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 5
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r146;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 6
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_129:                               // %L15338
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6457, 
	(
	);
	} // callseq 7
	mov.u64 	%rd75, exception1;
	cvta.global.u64 	%rd76, %rd75;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd76;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r146;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_128:                               // %L15335
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6457, 
	(
	);
	} // callseq 10
	mov.u64 	%rd83, exception1;
	cvta.global.u64 	%rd84, %rd83;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd84;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 11
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r146;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 12
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
