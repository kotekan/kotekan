// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_6513
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1275[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<260>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2490>;
	.reg .f32 	%f<929>;
	.reg .b64 	%rd<185>;
	.reg .f64 	%fd<23>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r147, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd67, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r148, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r148, 67839;
	@%p3 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd84, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd68, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r149, %r4, 9;
	or.b32  	%r150, %r3, %r1;
	or.b32  	%r151, %r150, %r149;
	mul.wide.u32 	%rd90, %r151, 4;
	add.s64 	%rd4, %rd84, %rd90;
	mov.u32 	%r152, 1;
	st.global.u32 	[%rd4], %r152;
	ld.global.u32 	%r5, [%rd68];
	setp.lt.s32 	%p4, %r5, 0;
	@%p4 bra 	LBB0_7;
// %bb.3:                               // %L203
	ld.param.u64 	%rd72, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd72];
	setp.lt.s32 	%p5, %r6, %r5;
	setp.gt.s32 	%p6, %r6, 262144;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	LBB0_7;
// %bb.4:                               // %L213
	ld.param.u64 	%rd76, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd76];
	sub.s32 	%r153, %r6, %r5;
	and.b32  	%r154, %r153, 255;
	setp.ne.s32 	%p8, %r154, 0;
	setp.lt.s32 	%p9, %r7, 0;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	LBB0_7;
// %bb.5:                               // %L219
	ld.param.u64 	%rd80, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd80];
	setp.lt.s32 	%p11, %r8, %r7;
	setp.gt.s32 	%p12, %r8, 8192;
	or.pred  	%p13, %p11, %p12;
	@%p13 bra 	LBB0_7;
// %bb.6:                               // %L229
	sub.s32 	%r155, %r8, %r7;
	add.s32 	%r156, %r155, 3;
	and.b32  	%r157, %r156, 7;
	setp.eq.s32 	%p14, %r157, 0;
	@%p14 bra 	LBB0_8;
	bra.uni 	LBB0_7;
LBB0_8:                                 // %pass81
	bfe.u32 	%r98, %r1, 1, 1;
	and.b32  	%r99, %r1, 1;
	bfe.u32 	%r101, %r1, 2, 1;
	shl.b32 	%r163, %r101, 1;
	shl.b32 	%r164, %r99, 2;
	shl.b32 	%r165, %r98, 3;
	or.b32  	%r166, %r164, %r165;
	or.b32  	%r167, %r163, %r166;
	shr.u32 	%r102, %r1, 4;
	or.b32  	%r103, %r102, %r167;
	or.b32  	%r104, %r103, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f145, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r103;
	sub.f32 	%f187, %f186, %f145;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p15, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p15;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r168, %f193;
	and.b32  	%r169, %r168, -2147483648;
	or.b32  	%r170, %r169, 1056964608;
	mov.b32 	%f194, %r170;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p16, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p16;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p17, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p17;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f147, %f187, %f216;
	setp.ne.f32 	%p20, %f147, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p20 bra 	LBB0_9;
	bra.uni 	LBB0_10;
LBB0_9:                                 // %L524
	sin.approx.f32 	%f217, %f147;
	div.approx.f32 	%f889, %f217, %f147;
LBB0_10:                                // %L527
	cvt.rzi.s32.f32 	%r171, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r104;
	sub.f32 	%f221, %f220, %f145;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p21, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p21;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r175, %f227;
	and.b32  	%r176, %r175, -2147483648;
	or.b32  	%r177, %r176, 1056964608;
	mov.b32 	%f228, %r177;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p22, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p22;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p23, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p23;
	cvt.rzi.s32.f32 	%r178, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f5, %f221, %f216;
	setp.eq.f32 	%p26, %f5, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p26 bra 	LBB0_12;
// %bb.11:                              // %L544
	sin.approx.f32 	%f251, %f5;
	div.approx.f32 	%f890, %f251, %f5;
LBB0_12:                                // %L547
	add.s32 	%r172, %r171, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r179, %r178, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r185, %r103, 32;
	or.b32  	%r10, %r103, 48;
	cvt.rn.f32.s32 	%f255, %r185;
	sub.f32 	%f256, %f255, %f145;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p27, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p27;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r186, %f262;
	and.b32  	%r187, %r186, -2147483648;
	or.b32  	%r188, %r187, 1056964608;
	mov.b32 	%f263, %r188;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p28, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p28;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p29, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p29;
	cvt.rzi.s32.f32 	%r189, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r190, %r189, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f9, %f256, %f216;
	setp.eq.f32 	%p32, %f9, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p32 bra 	LBB0_14;
// %bb.13:                              // %L625
	sin.approx.f32 	%f286, %f9;
	div.approx.f32 	%f891, %f286, %f9;
LBB0_14:                                // %L628
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r173, %r172, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r180, %r179, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r191, %r190, 1;
	cvt.rn.f32.s32 	%f289, %r10;
	sub.f32 	%f290, %f289, %f145;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p33, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p33;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r193, %f296;
	and.b32  	%r194, %r193, -2147483648;
	or.b32  	%r195, %r194, 1056964608;
	mov.b32 	%f297, %r195;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p34, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p34;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p35, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p35;
	cvt.rzi.s32.f32 	%r196, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r197, %r196, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r198, %r197, 1;
	div.approx.f32 	%f14, %f290, %f216;
	setp.eq.f32 	%p38, %f14, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p38 bra 	LBB0_16;
// %bb.15:                              // %L645
	sin.approx.f32 	%f320, %f14;
	div.approx.f32 	%f892, %f320, %f14;
LBB0_16:                                // %L648
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p18, %r173, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p24, %r180, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p30, %r191, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p36, %r198, 1;
	or.b32  	%r203, %r103, 64;
	or.b32  	%r12, %r103, 80;
	cvt.rn.f32.s32 	%f324, %r203;
	sub.f32 	%f325, %f324, %f145;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p39, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p39;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r204, %f331;
	and.b32  	%r205, %r204, -2147483648;
	or.b32  	%r206, %r205, 1056964608;
	mov.b32 	%f332, %r206;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p40, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p40;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p41, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p41;
	cvt.rzi.s32.f32 	%r207, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r208, %r207, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r209, %r208, 1;
	setp.eq.b32 	%p42, %r209, 1;
	div.approx.f32 	%f18, %f325, %f216;
	setp.eq.f32 	%p44, %f18, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p44 bra 	LBB0_18;
// %bb.17:                              // %L726
	sin.approx.f32 	%f355, %f18;
	div.approx.f32 	%f893, %f355, %f18;
LBB0_18:                                // %L729
	shl.b32 	%r93, %r1, 1;
	selp.f32 	%f212, %f210, %f211, %p18;
	and.b32  	%r174, %r172, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p24;
	and.b32  	%r181, %r179, 2;
	selp.f32 	%f281, %f279, %f280, %p30;
	and.b32  	%r192, %r190, 2;
	selp.f32 	%f315, %f313, %f314, %p36;
	and.b32  	%r199, %r197, 2;
	selp.f32 	%f350, %f348, %f349, %p42;
	and.b32  	%r210, %r208, 2;
	cvt.rn.f32.s32 	%f358, %r12;
	sub.f32 	%f359, %f358, %f145;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p45, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p45;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r211, %f365;
	and.b32  	%r212, %r211, -2147483648;
	or.b32  	%r213, %r212, 1056964608;
	mov.b32 	%f366, %r213;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p46, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p46;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p47, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p47;
	cvt.rzi.s32.f32 	%r214, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r215, %r214, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r216, %r215, 1;
	setp.eq.b32 	%p48, %r216, 1;
	selp.f32 	%f384, %f382, %f383, %p48;
	and.b32  	%r217, %r215, 2;
	div.approx.f32 	%f23, %f359, %f216;
	setp.eq.f32 	%p50, %f23, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p50 bra 	LBB0_20;
// %bb.19:                              // %L746
	sin.approx.f32 	%f389, %f23;
	div.approx.f32 	%f894, %f389, %f23;
LBB0_20:                                // %L749
	and.b32  	%r158, %r93, 8;
	shl.b32 	%r94, %r1, 2;
	and.b32  	%r160, %r1, 18;
	setp.eq.s32 	%p19, %r174, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p25, %r181, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p31, %r192, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p37, %r199, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p43, %r210, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p49, %r217, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r221, %r103, 96;
	or.b32  	%r14, %r103, 112;
	cvt.rn.f32.s32 	%f393, %r221;
	sub.f32 	%f394, %f393, %f145;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p51, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p51;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r222, %f400;
	and.b32  	%r223, %r222, -2147483648;
	or.b32  	%r224, %r223, 1056964608;
	mov.b32 	%f401, %r224;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p52, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p52;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p53, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p53;
	cvt.rzi.s32.f32 	%r225, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r226, %r225, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r227, %r226, 1;
	setp.eq.b32 	%p54, %r227, 1;
	selp.f32 	%f419, %f417, %f418, %p54;
	and.b32  	%r228, %r226, 2;
	setp.eq.s32 	%p55, %r228, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f27, %f394, %f216;
	setp.eq.f32 	%p56, %f27, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p56 bra 	LBB0_22;
// %bb.21:                              // %L827
	sin.approx.f32 	%f424, %f27;
	div.approx.f32 	%f895, %f424, %f27;
LBB0_22:                                // %L830
	and.b32  	%r159, %r94, 4;
	or.b32  	%r161, %r160, %r158;
	selp.f32 	%f215, %f212, %f214, %p19;
	selp.f32 	%f249, %f246, %f248, %p25;
	selp.f32 	%f284, %f281, %f283, %p31;
	selp.f32 	%f318, %f315, %f317, %p37;
	selp.f32 	%f353, %f350, %f352, %p43;
	selp.f32 	%f387, %f384, %f386, %p49;
	selp.f32 	%f422, %f419, %f421, %p55;
	cvt.rn.f32.s32 	%f427, %r14;
	sub.f32 	%f428, %f427, %f145;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p57, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p57;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r229, %f434;
	and.b32  	%r230, %r229, -2147483648;
	or.b32  	%r231, %r230, 1056964608;
	mov.b32 	%f435, %r231;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p58, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p58;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p59, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p59;
	cvt.rzi.s32.f32 	%r232, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r233, %r232, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r234, %r233, 1;
	setp.eq.b32 	%p60, %r234, 1;
	selp.f32 	%f453, %f451, %f452, %p60;
	and.b32  	%r235, %r233, 2;
	setp.eq.s32 	%p61, %r235, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p61;
	div.approx.f32 	%f32, %f428, %f216;
	setp.eq.f32 	%p62, %f32, 0f00000000;
	@%p62 bra 	LBB0_24;
// %bb.23:                              // %L847
	sin.approx.f32 	%f458, %f32;
	div.approx.f32 	%f896, %f458, %f32;
LBB0_24:                                // %L850
	or.b32  	%r162, %r161, %r159;
	mul.f32 	%f146, %f215, %f215;
	mul.f32 	%f4, %f249, %f249;
	mul.f32 	%f8, %f284, %f284;
	mul.f32 	%f13, %f318, %f318;
	mul.f32 	%f17, %f353, %f353;
	mul.f32 	%f22, %f387, %f387;
	mul.f32 	%f26, %f422, %f422;
	mul.f32 	%f31, %f456, %f456;
	mul.lo.s32 	%r16, %r103, 31;
	cvt.rn.f32.s32 	%f461, %r16;
	div.approx.f32 	%f35, %f461, %f216;
	abs.f32 	%f899, %f35;
	setp.lt.f32 	%p63, %f899, 0f40000000;
	@%p63 bra 	LBB0_36;
// %bb.25:
	setp.gtu.f32 	%p64, %f899, 0f4B800000;
	@%p64 bra 	LBB0_32;
	bra.uni 	LBB0_26;
LBB0_32:
	mov.b32 	%r18, %f899;
	and.b32  	%r239, %r18, 8388607;
	or.b32  	%r2459, %r239, 1065353216;
	mov.b32 	%f898, %r2459;
	add.s32 	%r240, %r18, -1073741824;
	and.b32  	%r2460, %r240, -8388608;
	setp.eq.s32 	%p70, %r2460, 0;
	@%p70 bra 	LBB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_34:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r241, %r2460, 192937984;
	add.s32 	%r242, %r241, %r2459;
	mov.b32 	%f473, %r242;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2460, %r2460, %r241;
	mov.b32 	%r2459, %f898;
	setp.ne.s32 	%p71, %r2460, 0;
	setp.ne.s32 	%p72, %r2459, 0;
	and.pred  	%p73, %p71, %p72;
	@%p73 bra 	LBB0_34;
LBB0_35:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p74, %r18, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p74;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	LBB0_36;
LBB0_26:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f897, %f464;
	fma.rn.f32 	%f38, %f897, 0fC0000000, %f899;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p65, %r17, 1073741824;
	@%p65 bra 	LBB0_31;
// %bb.27:
	setp.lt.u32 	%p66, %r17, -2147483647;
	@%p66 bra 	LBB0_29;
// %bb.28:
	add.f32 	%f469, %f897, 0fBF800000;
	setp.lt.f32 	%p69, %f38, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f897, %f470, %f469, %p69;
	bra.uni 	LBB0_31;
LBB0_29:
	add.f32 	%f897, %f897, 0f3F800000;
	setp.ltu.f32 	%p67, %f38, 0f40800000;
	@%p67 bra 	LBB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f897, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f38;
	setp.ge.f32 	%p68, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f897, %f468, %f465, %p68;
LBB0_31:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
LBB0_36:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r95, %r162, 1;
	mul.f32 	%f219, %f146, 0f3C8A83B8;
	mul.f32 	%f253, %f4, 0f3C8A83B8;
	mul.f32 	%f288, %f8, 0f3C8A83B8;
	mul.f32 	%f322, %f13, 0f3C8A83B8;
	mul.f32 	%f357, %f17, 0f3C8A83B8;
	mul.f32 	%f391, %f22, 0f3C8A83B8;
	mul.f32 	%f426, %f26, 0f3C8A83B8;
	mul.f32 	%f459, %f31, 0f3C8A83B8;
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p75, %f482, 0f7F800000;
	@%p75 bra 	LBB0_38;
// %bb.37:
	mov.b32 	%r243, %f35;
	and.b32  	%r244, %r243, -2147483648;
	mov.b32 	%r245, %f899;
	or.b32  	%r246, %r244, %r245;
	mov.b32 	%f899, %r246;
LBB0_38:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd91, %r95, 4;
	mul.f32 	%f3, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f12, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f21, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f30, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	add.f32 	%f483, %f899, %f899;
	mov.b32 	%r247, %f483;
	and.b32  	%r248, %r247, -2147483648;
	or.b32  	%r249, %r248, 1056964608;
	mov.b32 	%f484, %r249;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p76, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p76;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p77, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p77;
	cvt.rzi.s32.f32 	%r250, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r251, %r250, 1;
	setp.eq.b32 	%p78, %r251, 1;
	selp.f32 	%f502, %f500, %f501, %p78;
	selp.f32 	%f503, %f501, %f500, %p78;
	and.b32  	%r252, %r250, 2;
	setp.eq.s32 	%p79, %r252, 0;
	neg.f32 	%f504, %f502;
	selp.f32 	%f505, %f502, %f504, %p79;
	add.s32 	%r253, %r250, 1;
	and.b32  	%r254, %r253, 2;
	setp.eq.s32 	%p80, %r254, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f508, %f503, %f507, %p80;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.f32 	%p81, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f52, %f510, %f505, %p81;
	abs.f32 	%f511, %f899;
	setp.gt.f32 	%p82, %f511, 0f4B800000;
	add.f32 	%f512, %f52, 0f3F800000;
	add.s32 	%r255, %r16, 496;
	cvt.rn.f32.s32 	%f513, %r255;
	div.approx.f32 	%f54, %f513, %f216;
	abs.f32 	%f903, %f54;
	setp.lt.f32 	%p83, %f903, 0f40000000;
	@%p83 bra 	LBB0_50;
// %bb.39:
	setp.gtu.f32 	%p84, %f903, 0f4B800000;
	@%p84 bra 	LBB0_46;
	bra.uni 	LBB0_40;
LBB0_46:
	mov.b32 	%r26, %f903;
	and.b32  	%r256, %r26, 8388607;
	or.b32  	%r2461, %r256, 1065353216;
	mov.b32 	%f902, %r2461;
	add.s32 	%r257, %r26, -1073741824;
	and.b32  	%r2462, %r257, -8388608;
	setp.eq.s32 	%p90, %r2462, 0;
	@%p90 bra 	LBB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i893.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
LBB0_48:                                // %__nv_fmaf_rn.exit4.i.i.i893
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r258, %r2462, 192937984;
	add.s32 	%r259, %r258, %r2461;
	mov.b32 	%f525, %r259;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2462, %r2462, %r258;
	mov.b32 	%r2461, %f902;
	setp.ne.s32 	%p91, %r2462, 0;
	setp.ne.s32 	%p92, %r2461, 0;
	and.pred  	%p93, %p91, %p92;
	@%p93 bra 	LBB0_48;
LBB0_49:                                // %__internal_fmodf_slowpath_mod.exit.i.i895
	setp.gt.u32 	%p94, %r26, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p94;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	LBB0_50;
LBB0_40:                                // %__nv_fast_fdividef.exit.i.i.i865
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f901, %f516;
	fma.rn.f32 	%f57, %f901, 0fC0000000, %f903;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p85, %r25, 1073741824;
	@%p85 bra 	LBB0_45;
// %bb.41:
	setp.lt.u32 	%p86, %r25, -2147483647;
	@%p86 bra 	LBB0_43;
// %bb.42:
	add.f32 	%f521, %f901, 0fBF800000;
	setp.lt.f32 	%p89, %f57, 0fC0000000;
	add.f32 	%f522, %f521, 0fBF800000;
	selp.f32 	%f901, %f522, %f521, %p89;
	bra.uni 	LBB0_45;
LBB0_43:
	add.f32 	%f901, %f901, 0f3F800000;
	setp.ltu.f32 	%p87, %f57, 0f40800000;
	@%p87 bra 	LBB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i870
	add.f32 	%f517, %f901, 0f3F800000;
	fma.rn.f32 	%f519, %f184, 0fC0400000, %f57;
	setp.ge.f32 	%p88, %f519, 0f00000000;
	add.f32 	%f520, %f517, 0f3F800000;
	selp.f32 	%f901, %f520, %f517, %p88;
LBB0_45:                                // %__internal_fmodf_fastpath_quot.exit.i.i874
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
LBB0_50:                                // %__internal_fmodf_kernel.exit.i899
	add.s64 	%rd92, %rd1, %rd91;
	mov.b32 	%r184, %f254;
	mov.b32 	%r183, %f3;
	mov.b32 	%r202, %f323;
	mov.b32 	%r201, %f12;
	mov.b32 	%r220, %f392;
	mov.b32 	%r219, %f21;
	mov.b32 	%r238, %f460;
	mov.b32 	%r237, %f30;
	selp.f32 	%f53, %f512, %f508, %p82;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p95, %f534, 0f7F800000;
	@%p95 bra 	LBB0_52;
// %bb.51:
	mov.b32 	%r260, %f54;
	and.b32  	%r261, %r260, -2147483648;
	mov.b32 	%r262, %f903;
	or.b32  	%r263, %r261, %r262;
	mov.b32 	%f903, %r263;
LBB0_52:                                // %__nv_fmodf.exit900
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.global.u32 	%r96, [%rd92];
	shr.u32 	%r97, %r1, 1;
	shr.u32 	%r100, %r1, 2;
	// begin inline asm
	cvt.rn.f16x2.f32 %r182, %r184, %r183;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r200, %r202, %r201;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r218, %r220, %r219;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r236, %r238, %r237;
	// end inline asm
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r270, %f535;
	and.b32  	%r271, %r270, -2147483648;
	or.b32  	%r272, %r271, 1056964608;
	mov.b32 	%f536, %r272;
	add.f32 	%f537, %f535, %f536;
	cvt.rzi.f32.f32 	%f538, %f537;
	abs.f32 	%f539, %f535;
	setp.gt.f32 	%p96, %f539, 0f4B000000;
	selp.f32 	%f540, %f535, %f538, %p96;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p97, %f539, 0f3F000000;
	selp.f32 	%f542, %f541, %f540, %p97;
	cvt.rzi.s32.f32 	%r273, %f542;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	and.b32  	%r274, %r273, 1;
	setp.eq.b32 	%p98, %r274, 1;
	selp.f32 	%f554, %f552, %f553, %p98;
	selp.f32 	%f555, %f553, %f552, %p98;
	and.b32  	%r275, %r273, 2;
	setp.eq.s32 	%p99, %r275, 0;
	neg.f32 	%f556, %f554;
	selp.f32 	%f557, %f554, %f556, %p99;
	add.s32 	%r276, %r273, 1;
	and.b32  	%r277, %r276, 2;
	setp.eq.s32 	%p100, %r277, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f560, %f555, %f559, %p100;
	cvt.rzi.f32.f32 	%f561, %f903;
	setp.eq.f32 	%p101, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	selp.f32 	%f563, %f562, %f557, %p101;
	abs.f32 	%f564, %f903;
	setp.gt.f32 	%p102, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f566, %f565, %f560, %p102;
	mov.b32 	%r266, %f566;
	mov.b32 	%r265, %f53;
	// begin inline asm
	cvt.rn.f16x2.f32 %r33, %r266, %r265;
	// end inline asm
	mov.b32 	%r269, %f563;
	mov.b32 	%r268, %f52;
	// begin inline asm
	cvt.rn.f16x2.f32 %r34, %r269, %r268;
	// end inline asm
	mov.u64 	%rd169, 2;
	mov.u64 	%rd170, %rd169;
LBB0_53:                                // %L962.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd170, %rd170, %rd170;
	add.s64 	%rd169, %rd169, -1;
	setp.ne.s64 	%p103, %rd169, 0;
	@%p103 bra 	LBB0_53;
// %bb.54:                              // %L964
	and.b64  	%rd94, %rd170, 9223372036854775807;
	setp.ne.s64 	%p104, %rd94, 16;
	@%p104 bra 	LBB0_131;
// %bb.55:                              // %L971
	and.b32  	%r278, %r1, 3;
	mul.lo.s32 	%r279, %r278, %r100;
	shl.b32 	%r280, %r279, 1;
	neg.s32 	%r35, %r280;
	cvt.rn.f32.s32 	%f567, %r35;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f71, %f567, %f568;
	abs.f32 	%f907, %f71;
	setp.lt.f32 	%p105, %f907, 0f40000000;
	@%p105 bra 	LBB0_67;
// %bb.56:
	setp.gtu.f32 	%p106, %f907, 0f4B800000;
	@%p106 bra 	LBB0_63;
	bra.uni 	LBB0_57;
LBB0_63:
	mov.b32 	%r37, %f907;
	and.b32  	%r281, %r37, 8388607;
	or.b32  	%r2463, %r281, 1065353216;
	mov.b32 	%f906, %r2463;
	add.s32 	%r282, %r37, -1073741824;
	and.b32  	%r2464, %r282, -8388608;
	setp.eq.s32 	%p112, %r2464, 0;
	@%p112 bra 	LBB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i939.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
LBB0_65:                                // %__nv_fmaf_rn.exit4.i.i.i939
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r283, %r2464, 192937984;
	add.s32 	%r284, %r283, %r2463;
	mov.b32 	%f579, %r284;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2464, %r2464, %r283;
	mov.b32 	%r2463, %f906;
	setp.ne.s32 	%p113, %r2464, 0;
	setp.ne.s32 	%p114, %r2463, 0;
	and.pred  	%p115, %p113, %p114;
	@%p115 bra 	LBB0_65;
LBB0_66:                                // %__internal_fmodf_slowpath_mod.exit.i.i941
	setp.gt.u32 	%p116, %r37, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p116;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	LBB0_67;
LBB0_57:                                // %__nv_fast_fdividef.exit.i.i.i911
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f570;
	fma.rn.f32 	%f74, %f905, 0fC0000000, %f907;
	mov.b32 	%r36, %f74;
	setp.lt.u32 	%p107, %r36, 1073741824;
	@%p107 bra 	LBB0_62;
// %bb.58:
	setp.lt.u32 	%p108, %r36, -2147483647;
	@%p108 bra 	LBB0_60;
// %bb.59:
	add.f32 	%f575, %f905, 0fBF800000;
	setp.lt.f32 	%p111, %f74, 0fC0000000;
	add.f32 	%f576, %f575, 0fBF800000;
	selp.f32 	%f905, %f576, %f575, %p111;
	bra.uni 	LBB0_62;
LBB0_60:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p109, %f74, 0f40800000;
	@%p109 bra 	LBB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i916
	add.f32 	%f571, %f905, 0f3F800000;
	fma.rn.f32 	%f573, %f184, 0fC0400000, %f74;
	setp.ge.f32 	%p110, %f573, 0f00000000;
	add.f32 	%f574, %f571, 0f3F800000;
	selp.f32 	%f905, %f574, %f571, %p110;
LBB0_62:                                // %__internal_fmodf_fastpath_quot.exit.i.i920
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_67:                                // %__internal_fmodf_kernel.exit.i945
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p117, %f588, 0f7F800000;
	@%p117 bra 	LBB0_69;
// %bb.68:
	mov.b32 	%r285, %f71;
	and.b32  	%r286, %r285, -2147483648;
	mov.b32 	%r287, %f907;
	or.b32  	%r288, %r286, %r287;
	mov.b32 	%f907, %r288;
LBB0_69:                                // %__nv_fmodf.exit946
	add.f32 	%f589, %f907, %f907;
	mov.b32 	%r289, %f589;
	and.b32  	%r290, %r289, -2147483648;
	or.b32  	%r291, %r290, 1056964608;
	mov.b32 	%f590, %r291;
	add.f32 	%f591, %f589, %f590;
	cvt.rzi.f32.f32 	%f592, %f591;
	abs.f32 	%f593, %f589;
	setp.gt.f32 	%p118, %f593, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p118;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p119, %f593, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p119;
	cvt.rzi.s32.f32 	%r292, %f596;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	mul.f32 	%f598, %f597, %f597;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	and.b32  	%r293, %r292, 1;
	setp.eq.b32 	%p120, %r293, 1;
	selp.f32 	%f608, %f606, %f607, %p120;
	selp.f32 	%f609, %f607, %f606, %p120;
	and.b32  	%r294, %r292, 2;
	setp.eq.s32 	%p121, %r294, 0;
	neg.f32 	%f610, %f608;
	selp.f32 	%f611, %f608, %f610, %p121;
	add.s32 	%r295, %r292, 1;
	and.b32  	%r296, %r295, 2;
	setp.eq.s32 	%p122, %r296, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f614, %f609, %f613, %p122;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.f32 	%p123, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f88, %f616, %f611, %p123;
	abs.f32 	%f617, %f907;
	setp.gt.f32 	%p124, %f617, 0f4B800000;
	add.f32 	%f618, %f88, 0f3F800000;
	shl.b32 	%r297, %r100, 3;
	sub.s32 	%r298, %r35, %r297;
	cvt.rn.f32.s32 	%f619, %r298;
	div.approx.f32 	%f90, %f619, %f568;
	abs.f32 	%f911, %f90;
	setp.lt.f32 	%p125, %f911, 0f40000000;
	@%p125 bra 	LBB0_81;
// %bb.70:
	setp.gtu.f32 	%p126, %f911, 0f4B800000;
	@%p126 bra 	LBB0_77;
	bra.uni 	LBB0_71;
LBB0_77:
	mov.b32 	%r45, %f911;
	and.b32  	%r299, %r45, 8388607;
	or.b32  	%r2465, %r299, 1065353216;
	mov.b32 	%f910, %r2465;
	add.s32 	%r300, %r45, -1073741824;
	and.b32  	%r2466, %r300, -8388608;
	setp.eq.s32 	%p132, %r2466, 0;
	@%p132 bra 	LBB0_80;
// %bb.78:                              // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
LBB0_79:                                // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r301, %r2466, 192937984;
	add.s32 	%r302, %r301, %r2465;
	mov.b32 	%f631, %r302;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2466, %r2466, %r301;
	mov.b32 	%r2465, %f910;
	setp.ne.s32 	%p133, %r2466, 0;
	setp.ne.s32 	%p134, %r2465, 0;
	and.pred  	%p135, %p133, %p134;
	@%p135 bra 	LBB0_79;
LBB0_80:                                // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p136, %r45, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p136;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	LBB0_81;
LBB0_71:                                // %__nv_fast_fdividef.exit.i.i.i957
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f622;
	fma.rn.f32 	%f93, %f909, 0fC0000000, %f911;
	mov.b32 	%r44, %f93;
	setp.lt.u32 	%p127, %r44, 1073741824;
	@%p127 bra 	LBB0_76;
// %bb.72:
	setp.lt.u32 	%p128, %r44, -2147483647;
	@%p128 bra 	LBB0_74;
// %bb.73:
	add.f32 	%f627, %f909, 0fBF800000;
	setp.lt.f32 	%p131, %f93, 0fC0000000;
	add.f32 	%f628, %f627, 0fBF800000;
	selp.f32 	%f909, %f628, %f627, %p131;
	bra.uni 	LBB0_76;
LBB0_74:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p129, %f93, 0f40800000;
	@%p129 bra 	LBB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i962
	add.f32 	%f623, %f909, 0f3F800000;
	fma.rn.f32 	%f625, %f184, 0fC0400000, %f93;
	setp.ge.f32 	%p130, %f625, 0f00000000;
	add.f32 	%f626, %f623, 0f3F800000;
	selp.f32 	%f909, %f626, %f623, %p130;
LBB0_76:                                // %__internal_fmodf_fastpath_quot.exit.i.i966
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_81:                                // %__internal_fmodf_kernel.exit.i991
	selp.f32 	%f89, %f618, %f614, %p124;
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p137, %f640, 0f7F800000;
	@%p137 bra 	LBB0_83;
// %bb.82:
	mov.b32 	%r303, %f90;
	and.b32  	%r304, %r303, -2147483648;
	mov.b32 	%r305, %f911;
	or.b32  	%r306, %r304, %r305;
	mov.b32 	%f911, %r306;
LBB0_83:                                // %__nv_fmodf.exit992
	add.f32 	%f641, %f911, %f911;
	mov.b32 	%r319, %f641;
	and.b32  	%r320, %r319, -2147483648;
	or.b32  	%r321, %r320, 1056964608;
	mov.b32 	%f642, %r321;
	add.f32 	%f643, %f641, %f642;
	cvt.rzi.f32.f32 	%f644, %f643;
	abs.f32 	%f645, %f641;
	setp.gt.f32 	%p138, %f645, 0f4B000000;
	selp.f32 	%f646, %f641, %f644, %p138;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p139, %f645, 0f3F000000;
	selp.f32 	%f648, %f647, %f646, %p139;
	cvt.rzi.s32.f32 	%r322, %f648;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	and.b32  	%r323, %r322, 1;
	setp.eq.b32 	%p140, %r323, 1;
	selp.f32 	%f660, %f658, %f659, %p140;
	selp.f32 	%f661, %f659, %f658, %p140;
	and.b32  	%r324, %r322, 2;
	setp.eq.s32 	%p141, %r324, 0;
	neg.f32 	%f662, %f660;
	selp.f32 	%f663, %f660, %f662, %p141;
	add.s32 	%r325, %r322, 1;
	and.b32  	%r326, %r325, 2;
	setp.eq.s32 	%p142, %r326, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f666, %f661, %f665, %p142;
	cvt.rzi.f32.f32 	%f667, %f911;
	setp.eq.f32 	%p143, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	selp.f32 	%f669, %f668, %f663, %p143;
	abs.f32 	%f670, %f911;
	setp.gt.f32 	%p144, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	selp.f32 	%f672, %f671, %f666, %p144;
	mov.b32 	%r309, %f672;
	mov.b32 	%r308, %f89;
	// begin inline asm
	cvt.rn.f16x2.f32 %r52, %r309, %r308;
	// end inline asm
	mov.b32 	%r315, %f669;
	xor.b32  	%r312, %r315, -2147483648;
	mov.b32 	%r314, %f88;
	xor.b32  	%r311, %r314, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r53, %r312, %r311;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r54, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r55, %r309, %r308;
	// end inline asm
	mov.u64 	%rd171, 2;
	mov.u64 	%rd172, %rd171;
LBB0_84:                                // %L1124.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd172, %rd172, %rd172;
	add.s64 	%rd171, %rd171, -1;
	setp.ne.s64 	%p145, %rd171, 0;
	@%p145 bra 	LBB0_84;
// %bb.85:                              // %L1126
	and.b64  	%rd98, %rd172, 9223372036854775807;
	setp.ne.s64 	%p146, %rd98, 16;
	@%p146 bra 	LBB0_130;
// %bb.86:                              // %L1133
	shl.b32 	%r327, %r98, 1;
	neg.s32 	%r56, %r327;
	mov.u64 	%rd173, 2;
	mov.u64 	%rd174, %rd173;
LBB0_87:                                // %L1192.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd174, %rd174, %rd174;
	add.s64 	%rd173, %rd173, -1;
	setp.ne.s64 	%p147, %rd173, 0;
	@%p147 bra 	LBB0_87;
// %bb.88:                              // %L1194
	mul.lo.s32 	%r57, %r56, %r100;
	cvt.rn.f32.s32 	%f673, %r57;
	shl.b64 	%rd102, %rd174, 1;
	cvt.rn.f32.s64 	%f674, %rd102;
	div.approx.f32 	%f107, %f673, %f674;
	abs.f32 	%f915, %f107;
	setp.lt.f32 	%p148, %f915, 0f40000000;
	@%p148 bra 	LBB0_100;
// %bb.89:
	setp.gtu.f32 	%p149, %f915, 0f4B800000;
	@%p149 bra 	LBB0_96;
	bra.uni 	LBB0_90;
LBB0_96:
	mov.b32 	%r59, %f915;
	and.b32  	%r328, %r59, 8388607;
	or.b32  	%r2467, %r328, 1065353216;
	mov.b32 	%f914, %r2467;
	add.s32 	%r329, %r59, -1073741824;
	and.b32  	%r2468, %r329, -8388608;
	setp.eq.s32 	%p155, %r2468, 0;
	@%p155 bra 	LBB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i1031.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
LBB0_98:                                // %__nv_fmaf_rn.exit4.i.i.i1031
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r330, %r2468, 192937984;
	add.s32 	%r331, %r330, %r2467;
	mov.b32 	%f685, %r331;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2468, %r2468, %r330;
	mov.b32 	%r2467, %f914;
	setp.ne.s32 	%p156, %r2468, 0;
	setp.ne.s32 	%p157, %r2467, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	LBB0_98;
LBB0_99:                                // %__internal_fmodf_slowpath_mod.exit.i.i1033
	setp.gt.u32 	%p159, %r59, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	LBB0_100;
LBB0_90:                                // %__nv_fast_fdividef.exit.i.i.i1003
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f676;
	fma.rn.f32 	%f110, %f913, 0fC0000000, %f915;
	mov.b32 	%r58, %f110;
	setp.lt.u32 	%p150, %r58, 1073741824;
	@%p150 bra 	LBB0_95;
// %bb.91:
	setp.lt.u32 	%p151, %r58, -2147483647;
	@%p151 bra 	LBB0_93;
// %bb.92:
	add.f32 	%f681, %f913, 0fBF800000;
	setp.lt.f32 	%p154, %f110, 0fC0000000;
	add.f32 	%f682, %f681, 0fBF800000;
	selp.f32 	%f913, %f682, %f681, %p154;
	bra.uni 	LBB0_95;
LBB0_93:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p152, %f110, 0f40800000;
	@%p152 bra 	LBB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i1008
	add.f32 	%f677, %f913, 0f3F800000;
	fma.rn.f32 	%f679, %f184, 0fC0400000, %f110;
	setp.ge.f32 	%p153, %f679, 0f00000000;
	add.f32 	%f680, %f677, 0f3F800000;
	selp.f32 	%f913, %f680, %f677, %p153;
LBB0_95:                                // %__internal_fmodf_fastpath_quot.exit.i.i1012
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_100:                               // %__internal_fmodf_kernel.exit.i1037
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p160, %f694, 0f7F800000;
	@%p160 bra 	LBB0_102;
// %bb.101:
	mov.b32 	%r332, %f107;
	and.b32  	%r333, %r332, -2147483648;
	mov.b32 	%r334, %f915;
	or.b32  	%r335, %r333, %r334;
	mov.b32 	%f915, %r335;
LBB0_102:                               // %__nv_fmodf.exit1038
	add.f32 	%f695, %f915, %f915;
	mov.b32 	%r336, %f695;
	and.b32  	%r337, %r336, -2147483648;
	or.b32  	%r338, %r337, 1056964608;
	mov.b32 	%f696, %r338;
	add.f32 	%f697, %f695, %f696;
	cvt.rzi.f32.f32 	%f698, %f697;
	abs.f32 	%f699, %f695;
	setp.gt.f32 	%p161, %f699, 0f4B000000;
	selp.f32 	%f700, %f695, %f698, %p161;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p162, %f699, 0f3F000000;
	selp.f32 	%f702, %f701, %f700, %p162;
	cvt.rzi.s32.f32 	%r339, %f702;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	mul.f32 	%f704, %f703, %f703;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	and.b32  	%r340, %r339, 1;
	setp.eq.b32 	%p163, %r340, 1;
	selp.f32 	%f714, %f712, %f713, %p163;
	selp.f32 	%f715, %f713, %f712, %p163;
	and.b32  	%r341, %r339, 2;
	setp.eq.s32 	%p164, %r341, 0;
	neg.f32 	%f716, %f714;
	selp.f32 	%f717, %f714, %f716, %p164;
	add.s32 	%r342, %r339, 1;
	and.b32  	%r343, %r342, 2;
	setp.eq.s32 	%p165, %r343, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f720, %f715, %f719, %p165;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.f32 	%p166, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f124, %f722, %f717, %p166;
	abs.f32 	%f723, %f915;
	setp.gt.f32 	%p167, %f723, 0f4B800000;
	add.f32 	%f724, %f124, 0f3F800000;
	selp.f32 	%f125, %f724, %f720, %p167;
	mov.u64 	%rd175, 2;
	mov.u64 	%rd176, %rd175;
LBB0_103:                               // %L1233.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd176, %rd176, %rd176;
	add.s64 	%rd175, %rd175, -1;
	setp.ne.s64 	%p168, %rd175, 0;
	@%p168 bra 	LBB0_103;
// %bb.104:                             // %L1235
	shl.b32 	%r344, %r100, 2;
	sub.s32 	%r345, %r57, %r344;
	cvt.rn.f32.s32 	%f725, %r345;
	shl.b64 	%rd104, %rd176, 1;
	cvt.rn.f32.s64 	%f726, %rd104;
	div.approx.f32 	%f126, %f725, %f726;
	abs.f32 	%f919, %f126;
	setp.lt.f32 	%p169, %f919, 0f40000000;
	@%p169 bra 	LBB0_116;
// %bb.105:
	setp.gtu.f32 	%p170, %f919, 0f4B800000;
	@%p170 bra 	LBB0_112;
	bra.uni 	LBB0_106;
LBB0_112:
	mov.b32 	%r67, %f919;
	and.b32  	%r346, %r67, 8388607;
	or.b32  	%r2469, %r346, 1065353216;
	mov.b32 	%f918, %r2469;
	add.s32 	%r347, %r67, -1073741824;
	and.b32  	%r2470, %r347, -8388608;
	setp.eq.s32 	%p176, %r2470, 0;
	@%p176 bra 	LBB0_115;
// %bb.113:                             // %__nv_fmaf_rn.exit4.i.i.i1077.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
LBB0_114:                               // %__nv_fmaf_rn.exit4.i.i.i1077
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r2470, 192937984;
	add.s32 	%r349, %r348, %r2469;
	mov.b32 	%f737, %r349;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2470, %r2470, %r348;
	mov.b32 	%r2469, %f918;
	setp.ne.s32 	%p177, %r2470, 0;
	setp.ne.s32 	%p178, %r2469, 0;
	and.pred  	%p179, %p177, %p178;
	@%p179 bra 	LBB0_114;
LBB0_115:                               // %__internal_fmodf_slowpath_mod.exit.i.i1079
	setp.gt.u32 	%p180, %r67, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p180;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	LBB0_116;
LBB0_106:                               // %__nv_fast_fdividef.exit.i.i.i1049
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f728;
	fma.rn.f32 	%f129, %f917, 0fC0000000, %f919;
	mov.b32 	%r66, %f129;
	setp.lt.u32 	%p171, %r66, 1073741824;
	@%p171 bra 	LBB0_111;
// %bb.107:
	setp.lt.u32 	%p172, %r66, -2147483647;
	@%p172 bra 	LBB0_109;
// %bb.108:
	add.f32 	%f733, %f917, 0fBF800000;
	setp.lt.f32 	%p175, %f129, 0fC0000000;
	add.f32 	%f734, %f733, 0fBF800000;
	selp.f32 	%f917, %f734, %f733, %p175;
	bra.uni 	LBB0_111;
LBB0_109:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p173, %f129, 0f40800000;
	@%p173 bra 	LBB0_111;
// %bb.110:                             // %__nv_fmaf_rn.exit.i.i.i1054
	add.f32 	%f729, %f917, 0f3F800000;
	fma.rn.f32 	%f731, %f184, 0fC0400000, %f129;
	setp.ge.f32 	%p174, %f731, 0f00000000;
	add.f32 	%f732, %f729, 0f3F800000;
	selp.f32 	%f917, %f732, %f729, %p174;
LBB0_111:                               // %__internal_fmodf_fastpath_quot.exit.i.i1058
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_116:                               // %__internal_fmodf_kernel.exit.i1083
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p181, %f746, 0f7F800000;
	@%p181 bra 	LBB0_118;
// %bb.117:
	mov.b32 	%r350, %f126;
	and.b32  	%r351, %r350, -2147483648;
	mov.b32 	%r352, %f919;
	or.b32  	%r353, %r351, %r352;
	mov.b32 	%f919, %r353;
LBB0_118:                               // %__nv_fmodf.exit1084
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r360, %f747;
	and.b32  	%r361, %r360, -2147483648;
	or.b32  	%r362, %r361, 1056964608;
	mov.b32 	%f748, %r362;
	add.f32 	%f749, %f747, %f748;
	cvt.rzi.f32.f32 	%f750, %f749;
	abs.f32 	%f751, %f747;
	setp.gt.f32 	%p182, %f751, 0f4B000000;
	selp.f32 	%f752, %f747, %f750, %p182;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p183, %f751, 0f3F000000;
	selp.f32 	%f754, %f753, %f752, %p183;
	cvt.rzi.s32.f32 	%r363, %f754;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	and.b32  	%r364, %r363, 1;
	setp.eq.b32 	%p184, %r364, 1;
	selp.f32 	%f766, %f764, %f765, %p184;
	selp.f32 	%f767, %f765, %f764, %p184;
	and.b32  	%r365, %r363, 2;
	setp.eq.s32 	%p185, %r365, 0;
	neg.f32 	%f768, %f766;
	selp.f32 	%f769, %f766, %f768, %p185;
	add.s32 	%r366, %r363, 1;
	and.b32  	%r367, %r366, 2;
	setp.eq.s32 	%p186, %r367, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f772, %f767, %f771, %p186;
	cvt.rzi.f32.f32 	%f773, %f919;
	setp.eq.f32 	%p187, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	selp.f32 	%f775, %f774, %f769, %p187;
	abs.f32 	%f776, %f919;
	setp.gt.f32 	%p188, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	selp.f32 	%f778, %f777, %f772, %p188;
	mov.b32 	%r356, %f778;
	mov.b32 	%r355, %f125;
	// begin inline asm
	cvt.rn.f16x2.f32 %r74, %r356, %r355;
	// end inline asm
	mov.b32 	%r359, %f775;
	mov.b32 	%r358, %f124;
	// begin inline asm
	cvt.rn.f16x2.f32 %r75, %r359, %r358;
	// end inline asm
	mov.u64 	%rd177, 2;
	mov.u64 	%rd178, %rd177;
LBB0_119:                               // %L1276.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd178, %rd178, %rd178;
	add.s64 	%rd177, %rd177, -1;
	setp.ne.s64 	%p189, %rd177, 0;
	@%p189 bra 	LBB0_119;
// %bb.120:                             // %L1278
	and.b64  	%rd106, %rd178, 9223372036854775807;
	setp.ne.s64 	%p190, %rd106, 16;
	@%p190 bra 	LBB0_129;
// %bb.121:                             // %L1285
	shr.u32 	%r76, %r1, 3;
	and.b32  	%r368, %r76, 2;
	or.b32  	%r77, %r101, %r368;
	mul.lo.s32 	%r79, %r56, %r77;
	cvt.rn.f32.s32 	%f779, %r79;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f143, %f779, %f780;
	abs.f32 	%f923, %f143;
	setp.lt.f32 	%p191, %f923, 0f40000000;
	@%p191 bra 	LBB0_139;
// %bb.122:
	setp.gtu.f32 	%p192, %f923, 0f4B800000;
	@%p192 bra 	LBB0_135;
	bra.uni 	LBB0_123;
LBB0_135:
	mov.b32 	%r106, %f923;
	and.b32  	%r369, %r106, 8388607;
	or.b32  	%r2478, %r369, 1065353216;
	mov.b32 	%f922, %r2478;
	add.s32 	%r370, %r106, -1073741824;
	and.b32  	%r2479, %r370, -8388608;
	setp.eq.s32 	%p198, %r2479, 0;
	@%p198 bra 	LBB0_138;
// %bb.136:                             // %__nv_fmaf_rn.exit4.i.i.i1123.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
LBB0_137:                               // %__nv_fmaf_rn.exit4.i.i.i1123
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r2479, 192937984;
	add.s32 	%r372, %r371, %r2478;
	mov.b32 	%f791, %r372;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f922, %f791, %f797;
	sub.s32 	%r2479, %r2479, %r371;
	mov.b32 	%r2478, %f922;
	setp.ne.s32 	%p199, %r2479, 0;
	setp.ne.s32 	%p200, %r2478, 0;
	and.pred  	%p201, %p199, %p200;
	@%p201 bra 	LBB0_137;
LBB0_138:                               // %__internal_fmodf_slowpath_mod.exit.i.i1125
	setp.gt.u32 	%p202, %r106, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p202;
	mul.f32 	%f799, %f922, 0f34000000;
	mul.f32 	%f923, %f798, %f799;
	bra.uni 	LBB0_139;
LBB0_123:                               // %__nv_fast_fdividef.exit.i.i.i1095
	div.approx.f32 	%f782, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f782;
	fma.rn.f32 	%f149, %f921, 0fC0000000, %f923;
	mov.b32 	%r105, %f149;
	setp.lt.u32 	%p193, %r105, 1073741824;
	@%p193 bra 	LBB0_134;
// %bb.124:
	setp.lt.u32 	%p194, %r105, -2147483647;
	@%p194 bra 	LBB0_132;
// %bb.125:
	add.f32 	%f787, %f921, 0fBF800000;
	setp.lt.f32 	%p197, %f149, 0fC0000000;
	add.f32 	%f788, %f787, 0fBF800000;
	selp.f32 	%f921, %f788, %f787, %p197;
	bra.uni 	LBB0_134;
LBB0_132:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p195, %f149, 0f40800000;
	@%p195 bra 	LBB0_134;
// %bb.133:                             // %__nv_fmaf_rn.exit.i.i.i1100
	add.f32 	%f783, %f921, 0f3F800000;
	fma.rn.f32 	%f785, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p196, %f785, 0f00000000;
	add.f32 	%f786, %f783, 0f3F800000;
	selp.f32 	%f921, %f786, %f783, %p196;
LBB0_134:                               // %__internal_fmodf_fastpath_quot.exit.i.i1104
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_139:                               // %__internal_fmodf_kernel.exit.i1129
	abs.f32 	%f800, %f923;
	setp.gtu.f32 	%p203, %f800, 0f7F800000;
	@%p203 bra 	LBB0_141;
// %bb.140:
	mov.b32 	%r373, %f143;
	and.b32  	%r374, %r373, -2147483648;
	mov.b32 	%r375, %f923;
	or.b32  	%r376, %r374, %r375;
	mov.b32 	%f923, %r376;
LBB0_141:                               // %__nv_fmodf.exit1130
	shl.b32 	%r386, %r77, 2;
	sub.s32 	%r387, %r79, %r386;
	cvt.rn.f32.s32 	%f833, %r387;
	div.approx.f32 	%f166, %f833, %f780;
	abs.f32 	%f927, %f166;
	setp.lt.f32 	%p212, %f927, 0f40000000;
	@%p212 bra 	LBB0_153;
// %bb.142:
	setp.gtu.f32 	%p213, %f927, 0f4B800000;
	@%p213 bra 	LBB0_149;
	bra.uni 	LBB0_143;
LBB0_149:
	mov.b32 	%r114, %f927;
	and.b32  	%r388, %r114, 8388607;
	or.b32  	%r2480, %r388, 1065353216;
	mov.b32 	%f926, %r2480;
	add.s32 	%r389, %r114, -1073741824;
	and.b32  	%r2481, %r389, -8388608;
	setp.eq.s32 	%p219, %r2481, 0;
	@%p219 bra 	LBB0_152;
// %bb.150:                             // %__nv_fmaf_rn.exit4.i.i.i1169.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
LBB0_151:                               // %__nv_fmaf_rn.exit4.i.i.i1169
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r390, %r2481, 192937984;
	add.s32 	%r391, %r390, %r2480;
	mov.b32 	%f845, %r391;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f926, %f845, %f851;
	sub.s32 	%r2481, %r2481, %r390;
	mov.b32 	%r2480, %f926;
	setp.ne.s32 	%p220, %r2481, 0;
	setp.ne.s32 	%p221, %r2480, 0;
	and.pred  	%p222, %p220, %p221;
	@%p222 bra 	LBB0_151;
LBB0_152:                               // %__internal_fmodf_slowpath_mod.exit.i.i1171
	setp.gt.u32 	%p223, %r114, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p223;
	mul.f32 	%f853, %f926, 0f34000000;
	mul.f32 	%f927, %f852, %f853;
	bra.uni 	LBB0_153;
LBB0_143:                               // %__nv_fast_fdividef.exit.i.i.i1141
	div.approx.f32 	%f836, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f836;
	fma.rn.f32 	%f169, %f925, 0fC0000000, %f927;
	mov.b32 	%r113, %f169;
	setp.lt.u32 	%p214, %r113, 1073741824;
	@%p214 bra 	LBB0_148;
// %bb.144:
	setp.lt.u32 	%p215, %r113, -2147483647;
	@%p215 bra 	LBB0_146;
// %bb.145:
	add.f32 	%f841, %f925, 0fBF800000;
	setp.lt.f32 	%p218, %f169, 0fC0000000;
	add.f32 	%f842, %f841, 0fBF800000;
	selp.f32 	%f925, %f842, %f841, %p218;
	bra.uni 	LBB0_148;
LBB0_146:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p216, %f169, 0f40800000;
	@%p216 bra 	LBB0_148;
// %bb.147:                             // %__nv_fmaf_rn.exit.i.i.i1146
	add.f32 	%f837, %f925, 0f3F800000;
	fma.rn.f32 	%f839, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p217, %f839, 0f00000000;
	add.f32 	%f840, %f837, 0f3F800000;
	selp.f32 	%f925, %f840, %f837, %p217;
LBB0_148:                               // %__internal_fmodf_fastpath_quot.exit.i.i1150
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_153:                               // %__internal_fmodf_kernel.exit.i1175
	abs.f32 	%f854, %f927;
	setp.gtu.f32 	%p224, %f854, 0f7F800000;
	@%p224 bra 	LBB0_155;
// %bb.154:
	mov.b32 	%r392, %f166;
	and.b32  	%r393, %r392, -2147483648;
	mov.b32 	%r394, %f927;
	or.b32  	%r395, %r393, %r394;
	mov.b32 	%f927, %r395;
LBB0_155:                               // %__nv_fmodf.exit1176
	setp.le.s32 	%p232, %r6, %r5;
	mov.u32 	%r2458, 0;
	@%p232 bra 	LBB0_128;
// %bb.156:                             // %oksrem365.lr.ph
	add.f32 	%f801, %f923, %f923;
	mov.b32 	%r377, %f801;
	and.b32  	%r378, %r377, -2147483648;
	or.b32  	%r379, %r378, 1056964608;
	mov.b32 	%f802, %r379;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p204, %f805, 0f4B000000;
	selp.f32 	%f806, %f801, %f804, %p204;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p205, %f805, 0f3F000000;
	selp.f32 	%f808, %f807, %f806, %p205;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f923;
	mul.f32 	%f810, %f809, %f809;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r380, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r381, %r380, 1;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p206, %r381, 1;
	selp.f32 	%f820, %f818, %f819, %p206;
	and.b32  	%r382, %r380, 2;
	setp.eq.s32 	%p207, %r382, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r383, %r380, 1;
	cvt.rzi.f32.f32 	%f827, %f923;
	xor.b32  	%r78, %r76, %r1;
	selp.f32 	%f821, %f819, %f818, %p206;
	selp.f32 	%f823, %f820, %f822, %p207;
	and.b32  	%r384, %r383, 2;
	setp.eq.f32 	%p209, %f827, %f923;
	mul.f32 	%f828, %f923, 0f00000000;
	setp.eq.s32 	%p208, %r384, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p209;
	abs.f32 	%f830, %f923;
	and.b32  	%r385, %r78, 1;
	selp.f32 	%f826, %f821, %f825, %p208;
	setp.gt.f32 	%p210, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	setp.eq.b32 	%p211, %r385, 1;
	selp.f32 	%f832, %f831, %f826, %p210;
	selp.f32 	%f163, 0f00000000, 0f3F800000, %p211;
	mul.f32 	%f164, %f832, %f163;
	mul.f32 	%f165, %f829, %f163;
	add.f32 	%f855, %f927, %f927;
	mov.b32 	%r408, %f855;
	and.b32  	%r409, %r408, -2147483648;
	or.b32  	%r410, %r409, 1056964608;
	mov.b32 	%f856, %r410;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p225, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p225;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p226, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p226;
	cvt.rzi.s32.f32 	%r411, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f927;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r412, %r411, 1;
	setp.eq.b32 	%p227, %r412, 1;
	selp.f32 	%f874, %f872, %f873, %p227;
	selp.f32 	%f875, %f873, %f872, %p227;
	and.b32  	%r413, %r411, 2;
	setp.eq.s32 	%p228, %r413, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p228;
	add.s32 	%r414, %r411, 1;
	and.b32  	%r415, %r414, 2;
	setp.eq.s32 	%p229, %r415, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p229;
	cvt.rzi.f32.f32 	%f881, %f927;
	setp.eq.f32 	%p230, %f881, %f927;
	mul.f32 	%f882, %f927, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p230;
	abs.f32 	%f884, %f927;
	setp.gt.f32 	%p231, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p231;
	mul.f32 	%f887, %f886, %f163;
	mul.f32 	%f888, %f883, %f163;
	mov.b32 	%r398, %f887;
	mov.b32 	%r397, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r398, %r397;
	// end inline asm
	mov.b32 	%r404, %f888;
	xor.b32  	%r401, %r404, -2147483648;
	mov.b32 	%r403, %f165;
	xor.b32  	%r400, %r403, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r399, %r401, %r400;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r398, %r397;
	// end inline asm
	shl.b32 	%r417, %r4, 7;
	shl.b32 	%r418, %r1, 4;
	and.b32  	%r419, %r418, 112;
	and.b32  	%r420, %r417, 384;
	or.b32  	%r421, %r420, %r419;
	and.b32  	%r422, %r417, 512;
	and.b32  	%r423, %r2, 7;
	and.b32  	%r424, %r97, 8;
	and.b32  	%r425, %r93, 16;
	shl.b32 	%r426, %r2, 2;
	and.b32  	%r427, %r426, 32;
	or.b32  	%r428, %r424, %r423;
	or.b32  	%r429, %r428, %r425;
	or.b32  	%r430, %r429, %r427;
	shl.b32 	%r431, %r430, 14;
	or.b32  	%r432, %r421, %r422;
	or.b32  	%r433, %r432, %r431;
	cvt.u64.u32 	%rd109, %r433;
	add.s64 	%rd33, %rd2, %rd109;
	shl.b32 	%r434, %r4, 5;
	and.b32  	%r435, %r94, 28;
	and.b32  	%r436, %r434, 96;
	and.b32  	%r437, %r434, 128;
	shl.b32 	%r438, %r430, 12;
	or.b32  	%r439, %r435, %r436;
	or.b32  	%r440, %r439, %r437;
	or.b32  	%r441, %r440, %r438;
	or.b32  	%r442, %r441, 524288;
	mul.wide.u32 	%rd110, %r442, 4;
	add.s64 	%rd34, %rd2, %rd110;
	and.b32  	%r125, %r1, 8;
	mul.lo.s32 	%r443, %r102, 65;
	bfe.u32 	%r444, %r2, 2, 1;
	mul.lo.s32 	%r445, %r444, 130;
	or.b32  	%r446, %r418, %r125;
	shr.u32 	%r447, %r446, 2;
	and.b32  	%r448, %r447, 30;
	bfe.u32 	%r449, %r2, 1, 1;
	mul.lo.s32 	%r450, %r449, 260;
	and.b32  	%r451, %r2, 1;
	shr.u32 	%r452, %r2, 3;
	mul.lo.s32 	%r453, %r452, 1057;
	mad.lo.s32 	%r454, %r451, 520, %r443;
	add.s32 	%r455, %r454, %r453;
	add.s32 	%r456, %r455, %r445;
	add.s32 	%r457, %r456, %r450;
	add.s32 	%r458, %r457, %r448;
	mul.wide.u32 	%rd111, %r458, 4;
	mov.u64 	%rd112, shmem;
	add.s64 	%rd35, %rd112, %rd111;
	add.s32 	%r459, %r454, 32;
	add.s32 	%r460, %r459, %r453;
	add.s32 	%r461, %r460, %r445;
	add.s32 	%r462, %r461, %r450;
	add.s32 	%r463, %r462, %r448;
	mul.wide.u32 	%rd113, %r463, 4;
	add.s64 	%rd36, %rd112, %rd113;
	add.s32 	%r464, %r454, 1;
	add.s32 	%r465, %r464, %r453;
	add.s32 	%r466, %r465, %r445;
	add.s32 	%r467, %r466, %r450;
	add.s32 	%r468, %r467, %r448;
	mul.wide.u32 	%rd114, %r468, 4;
	add.s64 	%rd37, %rd112, %rd114;
	add.s32 	%r469, %r454, 33;
	add.s32 	%r470, %r469, %r453;
	add.s32 	%r471, %r470, %r445;
	add.s32 	%r472, %r471, %r450;
	add.s32 	%r473, %r472, %r448;
	mul.wide.u32 	%rd115, %r473, 4;
	add.s64 	%rd38, %rd112, %rd115;
	or.b32  	%r474, %r452, 4;
	mul.lo.s32 	%r475, %r474, 1057;
	add.s32 	%r476, %r454, %r445;
	add.s32 	%r477, %r476, %r450;
	add.s32 	%r478, %r477, %r475;
	add.s32 	%r479, %r478, %r448;
	mul.wide.s32 	%rd116, %r479, 4;
	add.s64 	%rd39, %rd112, %rd116;
	add.s32 	%r480, %r459, %r445;
	add.s32 	%r481, %r480, %r450;
	add.s32 	%r482, %r481, %r475;
	add.s32 	%r483, %r482, %r448;
	mul.wide.s32 	%rd117, %r483, 4;
	add.s64 	%rd40, %rd112, %rd117;
	add.s32 	%r484, %r464, %r445;
	add.s32 	%r485, %r484, %r450;
	add.s32 	%r486, %r485, %r475;
	add.s32 	%r487, %r486, %r448;
	mul.wide.s32 	%rd118, %r487, 4;
	add.s64 	%rd41, %rd112, %rd118;
	add.s32 	%r488, %r469, %r445;
	add.s32 	%r489, %r488, %r450;
	add.s32 	%r490, %r489, %r475;
	add.s32 	%r491, %r490, %r448;
	mul.wide.s32 	%rd119, %r491, 4;
	add.s64 	%rd42, %rd112, %rd119;
	and.b32  	%r492, %r3, 32;
	shl.b32 	%r493, %r1, 3;
	and.b32  	%r494, %r493, 64;
	shl.b32 	%r495, %r2, 1;
	or.b32  	%r496, %r494, %r495;
	shr.u32 	%r497, %r496, 2;
	mad.lo.s32 	%r498, %r99, 130, %r492;
	mad.lo.s32 	%r499, %r102, 520, %r498;
	mad.lo.s32 	%r500, %r98, 65, %r499;
	mad.lo.s32 	%r501, %r101, 260, %r500;
	add.s32 	%r502, %r501, %r497;
	or.b32  	%r503, %r497, 8;
	add.s32 	%r504, %r501, %r503;
	mul.lo.s32 	%r505, %r95, 65;
	or.b32  	%r506, %r497, %r492;
	add.s32 	%r507, %r506, %r505;
	or.b32  	%r508, %r503, %r492;
	add.s32 	%r509, %r508, %r505;
	add.s32 	%r510, %r448, %r453;
	add.s32 	%r511, %r448, %r475;
	shl.b32 	%r512, %r2, 4;
	cvt.rn.f64.s32 	%fd6, %r512;
	mul.f64 	%fd7, %fd6, 0d3FD0000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r513}, %fd7;
	}
	and.b32  	%r514, %r513, 2147483647;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r515, %temp}, %fd7;
	}
	mov.f64 	%fd8, 0d4010000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r516}, %fd8;
	}
	and.b32  	%r517, %r516, 2147483647;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r518, %temp}, %fd8;
	}
	mov.b64 	%fd9, {%r515, %r514};
	mov.b64 	%fd10, {%r518, %r517};
	setp.gt.u32 	%p233, %r514, 2146435071;
	setp.gt.u32 	%p234, %r517, 2146435071;
	or.pred  	%p1, %p233, %p234;
	setp.eq.f64 	%p235, %fd10, 0d0000000000000000;
	setp.ltu.f64 	%p236, %fd9, %fd10;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r519}, %fd9;
	}
	shr.u32 	%r520, %r519, 20;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r521}, %fd10;
	}
	shr.u32 	%r522, %r521, 20;
	setp.lt.u32 	%p237, %r519, 1048576;
	mul.f64 	%fd11, %fd9, 0d4350000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r523}, %fd11;
	}
	shr.u32 	%r524, %r523, 20;
	add.s32 	%r525, %r520, %r524;
	add.s32 	%r526, %r525, -54;
	setp.lt.u32 	%p238, %r521, 1048576;
	mul.f64 	%fd12, %fd10, 0d4350000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r527}, %fd12;
	}
	shr.u32 	%r528, %r527, 20;
	add.s32 	%r529, %r522, %r528;
	add.s32 	%r530, %r529, -54;
	and.b32  	%r126, %r513, -2147483648;
	setp.le.f64 	%p239, %fd9, 0d7FF0000000000000;
	setp.le.f64 	%p240, %fd10, 0d7FF0000000000000;
	add.f64 	%fd13, %fd7, 0d4010000000000000;
	setp.eq.f64 	%p241, %fd9, 0d7FF0000000000000;
	selp.f64 	%fd14, 0dFFF8000000000000, %fd7, %p241;
	shl.b32 	%r531, %r7, 17;
	add.s32 	%r532, %r531, -393216;
	shl.b32 	%r533, %r2, 14;
	and.b32  	%r534, %r533, 131072;
	shl.b32 	%r535, %r4, 2;
	and.b32  	%r536, %r535, 480;
	and.b32  	%r537, %r426, 28;
	or.b32  	%r538, %r537, %r76;
	or.b32  	%r539, %r538, %r536;
	shl.b32 	%r540, %r539, 8;
	or.b32  	%r541, %r440, %r534;
	or.b32  	%r542, %r541, %r540;
	cvt.u64.u32 	%rd120, %r542;
	cvt.s64.s32 	%rd121, %r532;
	add.s64 	%rd122, %rd121, %rd120;
	shr.u64 	%rd123, %rd122, 35;
	add.s64 	%rd124, %rd122, %rd123;
	shr.s64 	%rd125, %rd124, 29;
	setp.lt.s64 	%p242, %rd122, 0;
	and.b64  	%rd126, %rd124, -536870912;
	setp.ne.s64 	%p243, %rd126, %rd122;
	and.pred  	%p244, %p242, %p243;
	selp.u64 	%rd127, 1, 0, %p244;
	sub.s64 	%rd128, %rd127, %rd125;
	shl.b64 	%rd129, %rd128, 29;
	add.s64 	%rd130, %rd129, %rd122;
	shl.b64 	%rd131, %rd130, 2;
	add.s64 	%rd43, %rd3, %rd131;
	or.b32  	%r543, %r534, %r437;
	or.b32  	%r544, %r543, %r435;
	or.b32  	%r545, %r544, %r436;
	or.b32  	%r546, %r545, %r540;
	or.b32  	%r547, %r546, 524288;
	cvt.u64.u32 	%rd132, %r547;
	add.s64 	%rd133, %rd121, %rd132;
	shr.u64 	%rd134, %rd133, 35;
	add.s64 	%rd135, %rd133, %rd134;
	shr.s64 	%rd136, %rd135, 29;
	setp.lt.s64 	%p245, %rd133, 0;
	and.b64  	%rd137, %rd135, -536870912;
	setp.ne.s64 	%p246, %rd137, %rd133;
	and.pred  	%p247, %p245, %p246;
	selp.u64 	%rd138, 1, 0, %p247;
	sub.s64 	%rd139, %rd138, %rd136;
	shl.b64 	%rd140, %rd139, 29;
	add.s64 	%rd141, %rd140, %rd133;
	shl.b64 	%rd142, %rd141, 2;
	add.s64 	%rd44, %rd3, %rd142;
	and.b32  	%r548, %r495, 14;
	or.b32  	%r549, %r548, %r102;
	mul.lo.s32 	%r550, %r549, 65;
	add.s32 	%r551, %r510, %r550;
	mul.wide.u32 	%rd143, %r551, 4;
	add.s64 	%rd45, %rd112, %rd143;
	cvt.u64.u32 	%rd144, %r448;
	cvt.u64.u32 	%rd145, %r550;
	cvt.u64.u32 	%rd146, %r453;
	add.s64 	%rd147, %rd146, %rd145;
	add.s64 	%rd148, %rd147, %rd144;
	shl.b64 	%rd149, %rd148, 2;
	add.s64 	%rd46, %rd112, %rd149;
	add.s32 	%r552, %r511, %r550;
	mul.wide.u32 	%rd150, %r552, 4;
	add.s64 	%rd47, %rd112, %rd150;
	cvt.u64.u32 	%rd151, %r475;
	add.s64 	%rd152, %rd151, %rd145;
	add.s64 	%rd153, %rd152, %rd144;
	shl.b64 	%rd154, %rd153, 2;
	add.s64 	%rd48, %rd112, %rd154;
	or.pred  	%p2, %p235, %p236;
	selp.f64 	%fd1, 0dFFF8000000000000, %fd7, %p235;
	selp.f64 	%fd15, %fd11, %fd9, %p237;
	selp.b32 	%r553, %r526, %r520, %p237;
	selp.f64 	%fd16, %fd12, %fd10, %p238;
	selp.b32 	%r127, %r530, %r522, %p238;
	mov.b64 	%rd155, %fd15;
	mov.b64 	%rd156, %fd16;
	and.b64  	%rd157, %rd155, 4503599627370495;
	or.b64  	%rd49, %rd157, 4503599627370496;
	and.b64  	%rd158, %rd156, 4503599627370495;
	or.b64  	%rd50, %rd158, 4503599627370496;
	selp.f64 	%fd17, %fd14, %fd13, %p240;
	selp.f64 	%fd2, %fd17, %fd13, %p239;
	mul.wide.u32 	%rd159, %r509, 4;
	add.s64 	%rd51, %rd112, %rd159;
	mul.wide.u32 	%rd160, %r507, 4;
	add.s64 	%rd52, %rd112, %rd160;
	mul.wide.u32 	%rd161, %r504, 4;
	add.s64 	%rd53, %rd112, %rd161;
	mul.wide.u32 	%rd162, %r502, 4;
	add.s64 	%rd54, %rd112, %rd162;
	sub.s32 	%r554, %r553, %r127;
	add.s32 	%r128, %r554, 1;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	or.pred  	%p251, %p1, %p2;
	selp.f64 	%fd5, %fd2, %fd1, %p1;
	mov.u32 	%r2482, %r2458;
	mov.u32 	%r2477, %r2458;
	mov.u32 	%r2476, %r2458;
	mov.u32 	%r2485, %r2458;
	mov.u32 	%r2486, %r2458;
	mov.u32 	%r2487, %r2458;
	mov.u32 	%r2488, %r2458;
	bra.uni 	LBB0_157;
LBB0_127:                               // %L15373
                                        //   in Loop: Header=BB0_157 Depth=1
	setp.ne.s32 	%p257, %r2482, 130816;
	add.s32 	%r2482, %r2482, 256;
	add.s32 	%r2455, %r2482, %r5;
	setp.gt.s32 	%p258, %r6, %r2455;
	and.pred  	%p259, %p257, %p258;
	@%p259 bra 	LBB0_157;
	bra.uni 	LBB0_128;
LBB0_157:                               // %oksrem365
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_158 Depth 2
                                        //     Child Loop BB0_160 Depth 2
	setp.eq.s32 	%p248, %r125, 0;
	ld.global.v4.u32 	{%r588, %r589, %r590, %r591}, [%rd33];
	ld.global.v4.u32 	{%r592, %r593, %r594, %r595}, [%rd34];
	selp.b32 	%r596, %r590, %r588, %p248;
	shfl.sync.bfly.b32	%r597, %r596, 8, 31, -1;
	selp.b32 	%r556, %r588, %r597, %p248;
	selp.b32 	%r557, %r597, %r590, %p248;
	selp.b32 	%r598, %r591, %r589, %p248;
	shfl.sync.bfly.b32	%r599, %r598, 8, 31, -1;
	selp.b32 	%r564, %r589, %r599, %p248;
	selp.b32 	%r565, %r599, %r591, %p248;
	selp.b32 	%r600, %r594, %r592, %p248;
	shfl.sync.bfly.b32	%r601, %r600, 8, 31, -1;
	selp.b32 	%r572, %r592, %r601, %p248;
	selp.b32 	%r573, %r601, %r594, %p248;
	selp.b32 	%r602, %r595, %r593, %p248;
	shfl.sync.bfly.b32	%r603, %r602, 8, 31, -1;
	selp.b32 	%r580, %r593, %r603, %p248;
	selp.b32 	%r581, %r603, %r595, %p248;
	mov.u32 	%r582, 21520;
	// begin inline asm
	prmt.b32 %r555, %r556, %r557, %r582;
	// end inline asm
	mov.u32 	%r586, 30258;
	// begin inline asm
	prmt.b32 %r559, %r556, %r557, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r564, %r565, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r567, %r564, %r565, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r572, %r573, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r575, %r572, %r573, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r579, %r580, %r581, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r583, %r580, %r581, %r586;
	// end inline asm
	st.shared.u32 	[%rd35], %r555;
	st.shared.u32 	[%rd36], %r559;
	st.shared.u32 	[%rd37], %r563;
	st.shared.u32 	[%rd38], %r567;
	st.shared.u32 	[%rd39], %r571;
	st.shared.u32 	[%rd40], %r575;
	st.shared.u32 	[%rd41], %r579;
	st.shared.u32 	[%rd42], %r583;
	bar.sync 	0;
	mov.u32 	%r2471, 256;
	mov.u64 	%rd179, %rd54;
	mov.u64 	%rd180, %rd53;
	mov.u64 	%rd181, %rd52;
	mov.u64 	%rd182, %rd51;
	mov.u32 	%r2472, %r2488;
	mov.u32 	%r2473, %r2487;
	mov.u32 	%r2474, %r2486;
	mov.u32 	%r2475, %r2485;
LBB0_158:                               // %L6885
                                        //   Parent Loop BB0_157 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2487, %r2477;
	mov.u32 	%r2488, %r2476;
	ld.shared.u32 	%r2486, [%rd179];
	ld.shared.u32 	%r2485, [%rd180];
	// begin inline asm
	mov.b32 %r609, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r620, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r608, %r2486, -2004318072;
	mov.u32 	%r607, 983055;
	// begin inline asm
	lop3.b32 %r606, %r607, %r608, %r609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r610, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r611, %r609, %r610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r614, %r606, %r611;
	// end inline asm
	mov.u32 	%r618, 15728880;
	// begin inline asm
	lop3.b32 %r617, %r618, %r608, %r620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r621, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r622, %r620, %r621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r625, %r617, %r622;
	// end inline asm
	shr.u32 	%r630, %r608, 8;
	// begin inline asm
	lop3.b32 %r628, %r607, %r630, %r609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r632, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r633, %r609, %r632;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r636, %r628, %r633;
	// end inline asm
	// begin inline asm
	lop3.b32 %r639, %r618, %r630, %r620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r643, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r644, %r620, %r643;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r647, %r639, %r644;
	// end inline asm
	// begin inline asm
	mov.b32 %r655, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r666, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r654, %r2485, -2004318072;
	// begin inline asm
	lop3.b32 %r652, %r607, %r654, %r655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r656, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r657, %r655, %r656;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r660, %r652, %r657;
	// end inline asm
	// begin inline asm
	lop3.b32 %r663, %r618, %r654, %r666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r667, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r668, %r666, %r667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r671, %r663, %r668;
	// end inline asm
	shr.u32 	%r676, %r654, 8;
	// begin inline asm
	lop3.b32 %r674, %r607, %r676, %r655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r678, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r679, %r655, %r678;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r682, %r674, %r679;
	// end inline asm
	// begin inline asm
	lop3.b32 %r685, %r618, %r676, %r666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r689, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r690, %r666, %r689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r693, %r685, %r690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r696, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r698, %r696, %r614;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r701, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r703, %r701, %r625;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r706, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r708, %r706, %r636;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r711, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r713, %r711, %r647;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r716, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r718, %r716, %r660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r721, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r723, %r721, %r671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r726, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r728, %r726, %r682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r731, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r733, %r731, %r693;
	// end inline asm
	// begin inline asm
	mov.b32 %r741, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r752, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r740, %r2472, -2004318072;
	// begin inline asm
	lop3.b32 %r738, %r607, %r740, %r741, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r742, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r743, %r741, %r742;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r746, %r738, %r743;
	// end inline asm
	// begin inline asm
	lop3.b32 %r749, %r618, %r740, %r752, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r753, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r754, %r752, %r753;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r757, %r749, %r754;
	// end inline asm
	shr.u32 	%r762, %r740, 8;
	// begin inline asm
	lop3.b32 %r760, %r607, %r762, %r741, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r764, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r765, %r741, %r764;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r768, %r760, %r765;
	// end inline asm
	// begin inline asm
	lop3.b32 %r771, %r618, %r762, %r752, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r775, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r776, %r752, %r775;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r779, %r771, %r776;
	// end inline asm
	// begin inline asm
	mov.b32 %r787, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r798, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r786, %r2473, -2004318072;
	// begin inline asm
	lop3.b32 %r784, %r607, %r786, %r787, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r788, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r789, %r787, %r788;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r792, %r784, %r789;
	// end inline asm
	// begin inline asm
	lop3.b32 %r795, %r618, %r786, %r798, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r799, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r800, %r798, %r799;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r803, %r795, %r800;
	// end inline asm
	shr.u32 	%r808, %r786, 8;
	// begin inline asm
	lop3.b32 %r806, %r607, %r808, %r787, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r810, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r811, %r787, %r810;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r814, %r806, %r811;
	// end inline asm
	// begin inline asm
	lop3.b32 %r817, %r618, %r808, %r798, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r821, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r822, %r798, %r821;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r825, %r817, %r822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r828, %r182, %r746, %r698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r832, %r182, %r757, %r703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r836, %r182, %r768, %r708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r840, %r182, %r779, %r713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r844, %r182, %r792, %r718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r848, %r182, %r803, %r723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r852, %r182, %r814, %r728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r856, %r182, %r825, %r733;
	// end inline asm
	// begin inline asm
	mov.b32 %r865, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r876, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r864, %r2474, -2004318072;
	// begin inline asm
	lop3.b32 %r862, %r607, %r864, %r865, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r866, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r867, %r865, %r866;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r870, %r862, %r867;
	// end inline asm
	// begin inline asm
	lop3.b32 %r873, %r618, %r864, %r876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r877, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r878, %r876, %r877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r881, %r873, %r878;
	// end inline asm
	shr.u32 	%r886, %r864, 8;
	// begin inline asm
	lop3.b32 %r884, %r607, %r886, %r865, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r888, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r889, %r865, %r888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r892, %r884, %r889;
	// end inline asm
	// begin inline asm
	lop3.b32 %r895, %r618, %r886, %r876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r899, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r900, %r876, %r899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r903, %r895, %r900;
	// end inline asm
	// begin inline asm
	mov.b32 %r911, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r922, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r910, %r2475, -2004318072;
	// begin inline asm
	lop3.b32 %r908, %r607, %r910, %r911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r912, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r913, %r911, %r912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r916, %r908, %r913;
	// end inline asm
	// begin inline asm
	lop3.b32 %r919, %r618, %r910, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r924, %r922, %r923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r927, %r919, %r924;
	// end inline asm
	shr.u32 	%r932, %r910, 8;
	// begin inline asm
	lop3.b32 %r930, %r607, %r932, %r911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r935, %r911, %r934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r938, %r930, %r935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r941, %r618, %r932, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r945, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r946, %r922, %r945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r949, %r941, %r946;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r952, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r954, %r952, %r870, %r828;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r958, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r960, %r958, %r881, %r832;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r964, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r966, %r964, %r892, %r836;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r970, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r972, %r970, %r903, %r840;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r976, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r978, %r976, %r916, %r844;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r982, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r984, %r982, %r927, %r848;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r988, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r990, %r988, %r938, %r852;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r994, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r996, %r994, %r949, %r856;
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1004, %r2488, -2004318072;
	// begin inline asm
	lop3.b32 %r1002, %r607, %r1004, %r1005, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1006, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1007, %r1005, %r1006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1010, %r1002, %r1007;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1013, %r618, %r1004, %r1016, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1018, %r1016, %r1017;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1021, %r1013, %r1018;
	// end inline asm
	shr.u32 	%r1026, %r1004, 8;
	// begin inline asm
	lop3.b32 %r1024, %r607, %r1026, %r1005, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1029, %r1005, %r1028;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1032, %r1024, %r1029;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1035, %r618, %r1026, %r1016, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1039, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1040, %r1016, %r1039;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1043, %r1035, %r1040;
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1062, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1050, %r2487, -2004318072;
	// begin inline asm
	lop3.b32 %r1048, %r607, %r1050, %r1051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1052, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1053, %r1051, %r1052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1056, %r1048, %r1053;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1059, %r618, %r1050, %r1062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1063, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1064, %r1062, %r1063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1067, %r1059, %r1064;
	// end inline asm
	shr.u32 	%r1072, %r1050, 8;
	// begin inline asm
	lop3.b32 %r1070, %r607, %r1072, %r1051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1074, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1075, %r1051, %r1074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1078, %r1070, %r1075;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1081, %r618, %r1072, %r1062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1085, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1086, %r1062, %r1085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1089, %r1081, %r1086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r218, %r1010, %r954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r218, %r1021, %r960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r218, %r1032, %r966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r218, %r1043, %r972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r218, %r1056, %r978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r218, %r1067, %r984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r218, %r1078, %r990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1155, %r218, %r1089, %r996;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1124, %r34;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1126, %r1124, %r1128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r33, %r1131, %r1126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1133, %r34;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1135, %r1133, %r1137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1138, %r33, %r1140, %r1135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1142, %r34;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r1142, %r1146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r33, %r1149, %r1144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1151, %r34;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r1151, %r1155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r33, %r1158, %r1153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1160, %r34, %r1131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r33, %r1128, %r1160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r34, %r1140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r33, %r1137, %r1167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1174, %r34, %r1149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r33, %r1146, %r1174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1181, %r34, %r1158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r33, %r1155, %r1181;
	// end inline asm
	mov.u32 	%r1196, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1235, %r1232}, {%r52, %r54, %r53, %r55}, {%r1129, %r1163}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1244, %r1241}, {%r52, %r54, %r53, %r55}, {%r1138, %r1170}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1253, %r1250}, {%r52, %r54, %r53, %r55}, {%r1147, %r1177}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1262, %r1259}, {%r52, %r54, %r53, %r55}, {%r1156, %r1184}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1228, %r75;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1230, %r1228, %r1232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1233, %r74, %r1235, %r1230;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1237, %r75;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1239, %r1237, %r1241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1242, %r74, %r1244, %r1239;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1246, %r75;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1248, %r1246, %r1250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r74, %r1253, %r1248;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1255, %r75;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r1255, %r1259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r74, %r1262, %r1257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1264, %r75, %r1235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1267, %r74, %r1232, %r1264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1271, %r75, %r1244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1274, %r74, %r1241, %r1271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1278, %r75, %r1253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1281, %r74, %r1250, %r1278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1285, %r75, %r1262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1288, %r74, %r1259, %r1285;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1292, %r1293}, {%r396, %r402, %r399, %r405}, {%r1233, %r1267}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1302, %r1303}, {%r396, %r402, %r399, %r405}, {%r1242, %r1274}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1312, %r1313}, {%r396, %r402, %r399, %r405}, {%r1251, %r1281}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1322, %r1323}, {%r396, %r402, %r399, %r405}, {%r1260, %r1288}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1332, %r96, %r1292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1335, %r96, %r1293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1338, %r96, %r1302;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1341, %r96, %r1303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1344, %r96, %r1312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1347, %r96, %r1313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1350, %r96, %r1322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1353, %r96, %r1323;
	// end inline asm
	// begin inline asm
	mov.b32 %r1356, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1357, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1358, %r1332, %r1356;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1361, %r1358, %r1357;
	// end inline asm
	// begin inline asm
	mov.b32 %r1364, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1365, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1366, %r1335, %r1364;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1369, %r1366, %r1365;
	// end inline asm
	// begin inline asm
	mov.b32 %r1372, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1373, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1374, %r1338, %r1372;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1377, %r1374, %r1373;
	// end inline asm
	// begin inline asm
	mov.b32 %r1380, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1381, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1382, %r1341, %r1380;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1385, %r1382, %r1381;
	// end inline asm
	// begin inline asm
	mov.b32 %r1388, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1389, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1390, %r1344, %r1388;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1393, %r1390, %r1389;
	// end inline asm
	// begin inline asm
	mov.b32 %r1396, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1397, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1398, %r1347, %r1396;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1401, %r1398, %r1397;
	// end inline asm
	// begin inline asm
	mov.b32 %r1404, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1405, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1406, %r1350, %r1404;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1409, %r1406, %r1405;
	// end inline asm
	// begin inline asm
	mov.b32 %r1412, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1413, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1414, %r1353, %r1412;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1417, %r1414, %r1413;
	// end inline asm
	// begin inline asm
	mov.b32 %r1423, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1421, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1422, %r1423, %r1421;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1425, %r1361, %r1422;
	// end inline asm
	// begin inline asm
	mov.b32 %r1428, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1429, %r1423, %r1428;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1432, %r1369, %r1429;
	// end inline asm
	// begin inline asm
	mov.b32 %r1435, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1436, %r1423, %r1435;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1439, %r1377, %r1436;
	// end inline asm
	// begin inline asm
	mov.b32 %r1442, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1443, %r1423, %r1442;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1446, %r1385, %r1443;
	// end inline asm
	mov.u32 	%r1452, 25152;
	// begin inline asm
	prmt.b32 %r1449, %r1425, %r1439, %r1452;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1453, %r1432, %r1446, %r1452;
	// end inline asm
	shl.b32 	%r1460, %r1453, 4;
	mov.u32 	%r1458, 252645135;
	// begin inline asm
	lop3.b32 %r1457, %r1458, %r1449, %r1460, 202;
	// end inline asm
	xor.b32  	%r2400, %r1457, -2004318072;
	// begin inline asm
	mov.b32 %r1464, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1462, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1463, %r1464, %r1462;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1466, %r1393, %r1463;
	// end inline asm
	// begin inline asm
	mov.b32 %r1469, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1470, %r1464, %r1469;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1473, %r1401, %r1470;
	// end inline asm
	// begin inline asm
	mov.b32 %r1476, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1477, %r1464, %r1476;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1480, %r1409, %r1477;
	// end inline asm
	// begin inline asm
	mov.b32 %r1483, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1484, %r1464, %r1483;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1487, %r1417, %r1484;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1490, %r1466, %r1480, %r1452;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1494, %r1473, %r1487, %r1452;
	// end inline asm
	shl.b32 	%r1501, %r1494, 4;
	// begin inline asm
	lop3.b32 %r1498, %r1458, %r1490, %r1501, 202;
	// end inline asm
	xor.b32  	%r2401, %r1498, -2004318072;
	st.shared.u32 	[%rd181], %r2400;
	st.shared.u32 	[%rd182], %r2401;
	ld.shared.u32 	%r2476, [%rd179];
	ld.shared.u32 	%r2477, [%rd180];
	// begin inline asm
	mov.b32 %r1507, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1518, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1506, %r2476, -2004318072;
	// begin inline asm
	lop3.b32 %r1504, %r607, %r1506, %r1507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1508, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1509, %r1507, %r1508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1512, %r1504, %r1509;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1515, %r618, %r1506, %r1518, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1519, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1520, %r1518, %r1519;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1523, %r1515, %r1520;
	// end inline asm
	shr.u32 	%r1528, %r1506, 8;
	// begin inline asm
	lop3.b32 %r1526, %r607, %r1528, %r1507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1530, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1531, %r1507, %r1530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1534, %r1526, %r1531;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1537, %r618, %r1528, %r1518, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1541, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1542, %r1518, %r1541;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1545, %r1537, %r1542;
	// end inline asm
	// begin inline asm
	mov.b32 %r1553, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1564, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1552, %r2477, -2004318072;
	// begin inline asm
	lop3.b32 %r1550, %r607, %r1552, %r1553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1554, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1555, %r1553, %r1554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1558, %r1550, %r1555;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1561, %r618, %r1552, %r1564, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1565, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1566, %r1564, %r1565;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1569, %r1561, %r1566;
	// end inline asm
	shr.u32 	%r1574, %r1552, 8;
	// begin inline asm
	lop3.b32 %r1572, %r607, %r1574, %r1553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1576, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1577, %r1553, %r1576;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1580, %r1572, %r1577;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1583, %r618, %r1574, %r1564, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1587, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1588, %r1564, %r1587;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1591, %r1583, %r1588;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1594, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1596, %r1594, %r1512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1599, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1601, %r1599, %r1523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1604, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1606, %r1604, %r1534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1609, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1611, %r1609, %r1545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1614, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1616, %r1614, %r1558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1619, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1621, %r1619, %r1569;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1624, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1626, %r1624, %r1580;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1629, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1631, %r1629, %r1591;
	// end inline asm
	// begin inline asm
	mov.b32 %r1639, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1650, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1636, %r607, %r864, %r1639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1640, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1641, %r1639, %r1640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1644, %r1636, %r1641;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1647, %r618, %r864, %r1650, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1651, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1652, %r1650, %r1651;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1655, %r1647, %r1652;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1658, %r607, %r886, %r1639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1662, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1663, %r1639, %r1662;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1666, %r1658, %r1663;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1669, %r618, %r886, %r1650, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1673, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1674, %r1650, %r1673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1677, %r1669, %r1674;
	// end inline asm
	// begin inline asm
	mov.b32 %r1685, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1696, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1682, %r607, %r910, %r1685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1686, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1687, %r1685, %r1686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1690, %r1682, %r1687;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1693, %r618, %r910, %r1696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1697, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1698, %r1696, %r1697;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1701, %r1693, %r1698;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1704, %r607, %r932, %r1685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1708, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1709, %r1685, %r1708;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1712, %r1704, %r1709;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1715, %r618, %r932, %r1696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1719, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1720, %r1696, %r1719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1723, %r1715, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r182, %r1644, %r1596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r182, %r1655, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r182, %r1666, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r182, %r1677, %r1611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r182, %r1690, %r1616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r182, %r1701, %r1621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r182, %r1712, %r1626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r182, %r1723, %r1631;
	// end inline asm
	// begin inline asm
	mov.b32 %r1763, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1774, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1760, %r607, %r1004, %r1763, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1764, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1765, %r1763, %r1764;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1768, %r1760, %r1765;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1771, %r618, %r1004, %r1774, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1775, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1776, %r1774, %r1775;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1779, %r1771, %r1776;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1782, %r607, %r1026, %r1763, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1786, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1787, %r1763, %r1786;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1790, %r1782, %r1787;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1793, %r618, %r1026, %r1774, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1797, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1798, %r1774, %r1797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1801, %r1793, %r1798;
	// end inline asm
	// begin inline asm
	mov.b32 %r1809, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1820, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1806, %r607, %r1050, %r1809, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1810, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1811, %r1809, %r1810;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1814, %r1806, %r1811;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1817, %r618, %r1050, %r1820, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1821, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1822, %r1820, %r1821;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1825, %r1817, %r1822;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1828, %r607, %r1072, %r1809, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1832, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1833, %r1809, %r1832;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1836, %r1828, %r1833;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1839, %r618, %r1072, %r1820, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1843, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1844, %r1820, %r1843;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1847, %r1839, %r1844;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1850, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r1850, %r1768, %r1726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1856, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r1856, %r1779, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1862, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1862, %r1790, %r1734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1868, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1870, %r1868, %r1801, %r1738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1874, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1874, %r1814, %r1742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1880, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r1880, %r1825, %r1746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1886, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r1886, %r1836, %r1750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1892, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r1892, %r1847, %r1754;
	// end inline asm
	// begin inline asm
	mov.b32 %r1903, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1914, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1900, %r607, %r608, %r1903, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1904, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1905, %r1903, %r1904;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1908, %r1900, %r1905;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1911, %r618, %r608, %r1914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1915, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1916, %r1914, %r1915;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1919, %r1911, %r1916;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1922, %r607, %r630, %r1903, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1926, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1927, %r1903, %r1926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1930, %r1922, %r1927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1933, %r618, %r630, %r1914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1937, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1938, %r1914, %r1937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1941, %r1933, %r1938;
	// end inline asm
	// begin inline asm
	mov.b32 %r1949, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1960, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1946, %r607, %r654, %r1949, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1950, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1951, %r1949, %r1950;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1954, %r1946, %r1951;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1957, %r618, %r654, %r1960, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1961, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1962, %r1960, %r1961;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1965, %r1957, %r1962;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1968, %r607, %r676, %r1949, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1972, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1973, %r1949, %r1972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1976, %r1968, %r1973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1979, %r618, %r676, %r1960, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1983, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1984, %r1960, %r1983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1987, %r1979, %r1984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2029, %r218, %r1908, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r218, %r1919, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r218, %r1930, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r218, %r1941, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r218, %r1954, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r218, %r1965, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2056, %r218, %r1976, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r218, %r1987, %r1894;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2022, %r34;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2024, %r2022, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2027, %r33, %r2029, %r2024;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2031, %r34;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2033, %r2031, %r2035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2036, %r33, %r2038, %r2033;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2040, %r34;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r2040, %r2044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r33, %r2047, %r2042;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2049, %r34;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2051, %r2049, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r33, %r2056, %r2051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2058, %r34, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r33, %r2026, %r2058;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2065, %r34, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2068, %r33, %r2035, %r2065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2072, %r34, %r2047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2075, %r33, %r2044, %r2072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2079, %r34, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r33, %r2053, %r2079;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2133, %r2130}, {%r52, %r54, %r53, %r55}, {%r2027, %r2061}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2142, %r2139}, {%r52, %r54, %r53, %r55}, {%r2036, %r2068}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2151, %r2148}, {%r52, %r54, %r53, %r55}, {%r2045, %r2075}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2160, %r2157}, {%r52, %r54, %r53, %r55}, {%r2054, %r2082}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2126, %r75;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2128, %r2126, %r2130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2131, %r74, %r2133, %r2128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2135, %r75;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2137, %r2135, %r2139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2140, %r74, %r2142, %r2137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2144, %r75;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r2144, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r74, %r2151, %r2146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2153, %r75;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r2153, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r74, %r2160, %r2155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2162, %r75, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2165, %r74, %r2130, %r2162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2169, %r75, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2172, %r74, %r2139, %r2169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2176, %r75, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2179, %r74, %r2148, %r2176;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2183, %r75, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2186, %r74, %r2157, %r2183;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2190, %r2191}, {%r396, %r402, %r399, %r405}, {%r2131, %r2165}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2200, %r2201}, {%r396, %r402, %r399, %r405}, {%r2140, %r2172}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2210, %r2211}, {%r396, %r402, %r399, %r405}, {%r2149, %r2179}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2220, %r2221}, {%r396, %r402, %r399, %r405}, {%r2158, %r2186}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r96, %r2190;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2233, %r96, %r2191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2236, %r96, %r2200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2239, %r96, %r2201;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2242, %r96, %r2210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r96, %r2211;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2248, %r96, %r2220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2251, %r96, %r2221;
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2256, %r2230, %r2254;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2259, %r2256, %r2255;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2264, %r2233, %r2262;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2267, %r2264, %r2263;
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2271, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2272, %r2236, %r2270;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2275, %r2272, %r2271;
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2280, %r2239, %r2278;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2283, %r2280, %r2279;
	// end inline asm
	// begin inline asm
	mov.b32 %r2286, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2287, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2288, %r2242, %r2286;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2291, %r2288, %r2287;
	// end inline asm
	// begin inline asm
	mov.b32 %r2294, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2295, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2296, %r2245, %r2294;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2299, %r2296, %r2295;
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2304, %r2248, %r2302;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2307, %r2304, %r2303;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2311, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2312, %r2251, %r2310;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2315, %r2312, %r2311;
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2319, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2320, %r2321, %r2319;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2323, %r2259, %r2320;
	// end inline asm
	// begin inline asm
	mov.b32 %r2326, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2327, %r2321, %r2326;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2330, %r2267, %r2327;
	// end inline asm
	// begin inline asm
	mov.b32 %r2333, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2334, %r2321, %r2333;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2337, %r2275, %r2334;
	// end inline asm
	// begin inline asm
	mov.b32 %r2340, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2341, %r2321, %r2340;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2344, %r2283, %r2341;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2347, %r2323, %r2337, %r1452;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2351, %r2330, %r2344, %r1452;
	// end inline asm
	shl.b32 	%r2358, %r2351, 4;
	// begin inline asm
	lop3.b32 %r2355, %r1458, %r2347, %r2358, 202;
	// end inline asm
	xor.b32  	%r2402, %r2355, -2004318072;
	// begin inline asm
	mov.b32 %r2362, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2360, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2361, %r2362, %r2360;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2364, %r2291, %r2361;
	// end inline asm
	// begin inline asm
	mov.b32 %r2367, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2368, %r2362, %r2367;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2371, %r2299, %r2368;
	// end inline asm
	// begin inline asm
	mov.b32 %r2374, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2362, %r2374;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2378, %r2307, %r2375;
	// end inline asm
	// begin inline asm
	mov.b32 %r2381, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2362, %r2381;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2385, %r2315, %r2382;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2388, %r2364, %r2378, %r1452;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2392, %r2371, %r2385, %r1452;
	// end inline asm
	shl.b32 	%r2399, %r2392, 4;
	// begin inline asm
	lop3.b32 %r2396, %r1458, %r2388, %r2399, 202;
	// end inline asm
	xor.b32  	%r2403, %r2396, -2004318072;
	st.shared.u32 	[%rd181], %r2402;
	st.shared.u32 	[%rd182], %r2403;
	add.s32 	%r2471, %r2471, -32;
	add.s64 	%rd182, %rd182, 4228;
	add.s64 	%rd181, %rd181, 4228;
	add.s64 	%rd180, %rd180, 4228;
	add.s64 	%rd179, %rd179, 4228;
	setp.eq.s32 	%p249, %r2471, 0;
	mov.u32 	%r2472, %r2488;
	mov.u32 	%r2473, %r2487;
	mov.u32 	%r2474, %r2486;
	mov.u32 	%r2475, %r2485;
	@%p249 bra 	LBB0_159;
	bra.uni 	LBB0_158;
LBB0_159:                               // %guard_pass5803
                                        //   in Loop: Header=BB0_157 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2409, [%rd45];
	ld.shared.u32 	%r2410, [%rd46+128];
	ld.shared.u32 	%r2417, [%rd46+4];
	ld.shared.u32 	%r2418, [%rd46+132];
	ld.shared.u32 	%r2425, [%rd47];
	ld.shared.u32 	%r2426, [%rd48+128];
	ld.shared.u32 	%r2433, [%rd48+4];
	ld.shared.u32 	%r2434, [%rd48+132];
	// begin inline asm
	prmt.b32 %r2404, %r2409, %r2410, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2408, %r2409, %r2410, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2412, %r2417, %r2418, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2416, %r2417, %r2418, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2420, %r2425, %r2426, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2424, %r2425, %r2426, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2428, %r2433, %r2434, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2432, %r2433, %r2434, %r586;
	// end inline asm
	selp.b32 	%r2436, %r2408, %r2404, %p248;
	shfl.sync.bfly.b32	%r2437, %r2436, 8, 31, -1;
	selp.b32 	%r2438, %r2416, %r2412, %p248;
	shfl.sync.bfly.b32	%r2439, %r2438, 8, 31, -1;
	selp.b32 	%r2440, %r2424, %r2420, %p248;
	shfl.sync.bfly.b32	%r2441, %r2440, 8, 31, -1;
	selp.b32 	%r2442, %r2432, %r2428, %p248;
	shfl.sync.bfly.b32	%r2443, %r2442, 8, 31, -1;
	mov.u32 	%r2489, %r128;
	mov.u64 	%rd183, %rd49;
	mov.f64 	%fd22, %fd5;
	@%p251 bra 	LBB0_166;
LBB0_160:                               //   Parent Loop BB0_157 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub.s64 	%rd163, %rd183, %rd50;
	mov.b64 	%fd18, %rd163;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2444}, %fd18;
	}
	setp.lt.s32 	%p252, %r2444, 0;
	selp.b64 	%rd60, %rd183, %rd163, %p252;
	shl.b64 	%rd183, %rd60, 1;
	add.s32 	%r2489, %r2489, -1;
	setp.gt.s32 	%p253, %r2489, 0;
	@%p253 bra 	LBB0_160;
// %bb.161:                             //   in Loop: Header=BB0_157 Depth=1
	and.b64  	%rd62, %rd60, 9223372036854775807;
	setp.eq.s64 	%p254, %rd62, 0;
	mov.u64 	%rd184, 0;
	@%p254 bra 	LBB0_165;
// %bb.162:                             //   in Loop: Header=BB0_157 Depth=1
	mov.b64 	%fd19, %rd62;
	mul.f64 	%fd20, %fd19, 0d4350000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2445}, %fd20;
	}
	shr.u32 	%r2446, %r2445, 20;
	mov.u32 	%r2447, 55;
	sub.s32 	%r2448, %r2447, %r2446;
	sub.s32 	%r138, %r127, %r2448;
	shl.b64 	%rd63, %rd62, %r2448;
	setp.gt.s32 	%p255, %r138, 0;
	@%p255 bra 	LBB0_164;
	bra.uni 	LBB0_163;
LBB0_164:                               //   in Loop: Header=BB0_157 Depth=1
	add.s32 	%r2449, %r138, -1;
	cvt.u64.u32 	%rd165, %r2449;
	shl.b64 	%rd166, %rd165, 52;
	add.s64 	%rd184, %rd166, %rd63;
	bra.uni 	LBB0_165;
LBB0_163:                               //   in Loop: Header=BB0_157 Depth=1
	sub.s32 	%r2451, %r152, %r138;
	shr.u64 	%rd184, %rd63, %r2451;
LBB0_165:                               //   in Loop: Header=BB0_157 Depth=1
	mov.b64 	%fd21, %rd184;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r2452, %temp}, %fd21;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2453}, %fd21;
	}
	or.b32  	%r2454, %r2453, %r126;
	mov.b64 	%fd22, {%r2452, %r2454};
LBB0_166:                               // %__nv_fmod.exit
                                        //   in Loop: Header=BB0_157 Depth=1
	setp.ltu.f64 	%p256, %fd22, 0d4058000000000000;
	@%p256 bra 	LBB0_127;
// %bb.126:                             // %L14934
                                        //   in Loop: Header=BB0_157 Depth=1
	selp.b32 	%r139, %r2404, %r2437, %p248;
	selp.b32 	%r140, %r2437, %r2408, %p248;
	selp.b32 	%r141, %r2412, %r2439, %p248;
	selp.b32 	%r142, %r2439, %r2416, %p248;
	selp.b32 	%r143, %r2420, %r2441, %p248;
	selp.b32 	%r144, %r2441, %r2424, %p248;
	selp.b32 	%r145, %r2428, %r2443, %p248;
	selp.b32 	%r146, %r2443, %r2432, %p248;
	st.global.v4.u32 	[%rd43], {%r139, %r141, %r140, %r142};
	st.global.v4.u32 	[%rd44], {%r143, %r145, %r144, %r146};
	bra.uni 	LBB0_127;
LBB0_128:                               // %L15384
	st.global.u32 	[%rd4], %r2458;
	ret;
LBB0_7:                                 // %L259
	mov.u32 	%r2457, 2;
	st.global.u32 	[%rd4], %r2457;
	mov.u64 	%rd167, exception1275;
	cvta.global.u64 	%rd168, %rd167;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd168;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 11
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 12
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L8
	mov.u64 	%rd88, exception1;
	cvta.global.u64 	%rd89, %rd88;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd89;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_131:                               // %L15483
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6513, 
	(
	);
	} // callseq 2
	mov.u64 	%rd95, exception1;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 3
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 4
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_130:                               // %L15480
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6513, 
	(
	);
	} // callseq 5
	mov.u64 	%rd99, exception1;
	cvta.global.u64 	%rd100, %rd99;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd100;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_129:                               // %L15477
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6513, 
	(
	);
	} // callseq 8
	mov.u64 	%rd107, exception1;
	cvta.global.u64 	%rd108, %rd107;
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd108;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 9
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 10
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
