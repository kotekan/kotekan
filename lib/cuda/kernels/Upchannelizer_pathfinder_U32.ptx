// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_8197
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2039[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<260>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2647>;
	.reg .f32 	%f<929>;
	.reg .b64 	%rd<216>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r161, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd66, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r162, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r162, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd83, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd67, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r163, %r3, 9;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r164, %r163, %r4;
	or.b32  	%r165, %r164, %r2;
	mul.wide.u32 	%rd89, %r165, 4;
	add.s64 	%rd4, %rd83, %rd89;
	mov.u32 	%r166, 1;
	st.global.u32 	[%rd4], %r166;
	ld.global.u32 	%r5, [%rd67];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	LBB0_7;
// %bb.3:                               // %L205
	ld.param.u64 	%rd71, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd71];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_7;
// %bb.4:                               // %L215
	ld.param.u64 	%rd75, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd75];
	sub.s32 	%r167, %r6, %r5;
	and.b32  	%r168, %r167, 255;
	setp.ne.s32 	%p6, %r168, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB0_7;
// %bb.5:                               // %L221
	ld.param.u64 	%rd79, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd79];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 8192;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	LBB0_7;
// %bb.6:                               // %L231
	sub.s32 	%r169, %r8, %r7;
	add.s32 	%r170, %r169, 3;
	and.b32  	%r171, %r170, 7;
	setp.eq.s32 	%p12, %r171, 0;
	@%p12 bra 	LBB0_8;
	bra.uni 	LBB0_7;
LBB0_8:                                 // %L341
	bfe.u32 	%r18, %r4, 1, 1;
	and.b32  	%r19, %r4, 1;
	bfe.u32 	%r20, %r4, 2, 1;
	shl.b32 	%r177, %r20, 1;
	shl.b32 	%r178, %r19, 2;
	shl.b32 	%r179, %r18, 3;
	or.b32  	%r180, %r178, %r179;
	or.b32  	%r181, %r177, %r180;
	shr.u32 	%r21, %r4, 4;
	or.b32  	%r22, %r21, %r181;
	or.b32  	%r23, %r22, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f1, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r22;
	sub.f32 	%f187, %f186, %f1;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r182, %f193;
	and.b32  	%r183, %r182, -2147483648;
	or.b32  	%r184, %r183, 1056964608;
	mov.b32 	%f194, %r184;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p15;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f3, %f187, %f216;
	setp.eq.f32 	%p18, %f3, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	LBB0_10;
// %bb.9:                               // %L551
	sin.approx.f32 	%f217, %f3;
	div.approx.f32 	%f889, %f217, %f3;
LBB0_10:                                // %L554
	cvt.rzi.s32.f32 	%r185, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r23;
	sub.f32 	%f221, %f220, %f1;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p19;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r189, %f227;
	and.b32  	%r190, %r189, -2147483648;
	or.b32  	%r191, %r190, 1056964608;
	mov.b32 	%f228, %r191;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p21;
	cvt.rzi.s32.f32 	%r192, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f8, %f221, %f216;
	setp.eq.f32 	%p24, %f8, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	LBB0_12;
// %bb.11:                              // %L571
	sin.approx.f32 	%f251, %f8;
	div.approx.f32 	%f890, %f251, %f8;
LBB0_12:                                // %L574
	add.s32 	%r186, %r185, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r193, %r192, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r199, %r22, 32;
	or.b32  	%r25, %r22, 48;
	cvt.rn.f32.s32 	%f255, %r199;
	sub.f32 	%f256, %f255, %f1;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p25;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r200, %f262;
	and.b32  	%r201, %r200, -2147483648;
	or.b32  	%r202, %r201, 1056964608;
	mov.b32 	%f263, %r202;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p27;
	cvt.rzi.s32.f32 	%r203, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r204, %r203, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f12, %f256, %f216;
	setp.eq.f32 	%p30, %f12, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	LBB0_14;
// %bb.13:                              // %L653
	sin.approx.f32 	%f286, %f12;
	div.approx.f32 	%f891, %f286, %f12;
LBB0_14:                                // %L656
	shl.b32 	%r9, %r4, 1;
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r187, %r186, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r194, %r193, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r205, %r204, 1;
	cvt.rn.f32.s32 	%f289, %r25;
	sub.f32 	%f290, %f289, %f1;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p31;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r207, %f296;
	and.b32  	%r208, %r207, -2147483648;
	or.b32  	%r209, %r208, 1056964608;
	mov.b32 	%f297, %r209;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p33;
	cvt.rzi.s32.f32 	%r210, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r211, %r210, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r212, %r211, 1;
	div.approx.f32 	%f17, %f290, %f216;
	setp.eq.f32 	%p36, %f17, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	LBB0_16;
// %bb.15:                              // %L673
	sin.approx.f32 	%f320, %f17;
	div.approx.f32 	%f892, %f320, %f17;
LBB0_16:                                // %L676
	and.b32  	%r10, %r9, 8;
	and.b32  	%r11, %r4, 16;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r187, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r194, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r205, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r212, 1;
	or.b32  	%r217, %r22, 64;
	or.b32  	%r27, %r22, 80;
	cvt.rn.f32.s32 	%f324, %r217;
	sub.f32 	%f325, %f324, %f1;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p37;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r218, %f331;
	and.b32  	%r219, %r218, -2147483648;
	or.b32  	%r220, %r219, 1056964608;
	mov.b32 	%f332, %r220;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p39;
	cvt.rzi.s32.f32 	%r221, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r222, %r221, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r223, %r222, 1;
	setp.eq.b32 	%p40, %r223, 1;
	div.approx.f32 	%f21, %f325, %f216;
	setp.eq.f32 	%p42, %f21, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	LBB0_18;
// %bb.17:                              // %L755
	sin.approx.f32 	%f355, %f21;
	div.approx.f32 	%f893, %f355, %f21;
LBB0_18:                                // %L758
	or.b32  	%r172, %r11, %r10;
	shl.b32 	%r12, %r3, 5;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r188, %r186, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r195, %r193, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r206, %r204, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r213, %r211, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r224, %r222, 2;
	cvt.rn.f32.s32 	%f358, %r27;
	sub.f32 	%f359, %f358, %f1;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p43;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r225, %f365;
	and.b32  	%r226, %r225, -2147483648;
	or.b32  	%r227, %r226, 1056964608;
	mov.b32 	%f366, %r227;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p45;
	cvt.rzi.s32.f32 	%r228, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r229, %r228, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r230, %r229, 1;
	setp.eq.b32 	%p46, %r230, 1;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r231, %r229, 2;
	div.approx.f32 	%f26, %f359, %f216;
	setp.eq.f32 	%p48, %f26, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	LBB0_20;
// %bb.19:                              // %L775
	sin.approx.f32 	%f389, %f26;
	div.approx.f32 	%f894, %f389, %f26;
LBB0_20:                                // %L778
	or.b32  	%r173, %r172, %r12;
	and.b32  	%r13, %r4, 2;
	shl.b32 	%r14, %r4, 2;
	setp.eq.s32 	%p17, %r188, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r195, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r206, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r213, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r224, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r231, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r235, %r22, 96;
	or.b32  	%r29, %r22, 112;
	cvt.rn.f32.s32 	%f393, %r235;
	sub.f32 	%f394, %f393, %f1;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p49;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r236, %f400;
	and.b32  	%r237, %r236, -2147483648;
	or.b32  	%r238, %r237, 1056964608;
	mov.b32 	%f401, %r238;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p51;
	cvt.rzi.s32.f32 	%r239, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r240, %r239, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r241, %r240, 1;
	setp.eq.b32 	%p52, %r241, 1;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r242, %r240, 2;
	setp.eq.s32 	%p53, %r242, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f30, %f394, %f216;
	setp.eq.f32 	%p54, %f30, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	LBB0_22;
// %bb.21:                              // %L857
	sin.approx.f32 	%f424, %f30;
	div.approx.f32 	%f895, %f424, %f30;
LBB0_22:                                // %L860
	or.b32  	%r174, %r173, %r13;
	and.b32  	%r15, %r14, 4;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	cvt.rn.f32.s32 	%f427, %r29;
	sub.f32 	%f428, %f427, %f1;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r243, %f434;
	and.b32  	%r244, %r243, -2147483648;
	or.b32  	%r245, %r244, 1056964608;
	mov.b32 	%f435, %r245;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p57;
	cvt.rzi.s32.f32 	%r246, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r247, %r246, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r248, %r247, 1;
	setp.eq.b32 	%p58, %r248, 1;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r249, %r247, 2;
	setp.eq.s32 	%p59, %r249, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p59;
	div.approx.f32 	%f35, %f428, %f216;
	setp.eq.f32 	%p60, %f35, 0f00000000;
	@%p60 bra 	LBB0_24;
// %bb.23:                              // %L877
	sin.approx.f32 	%f458, %f35;
	div.approx.f32 	%f896, %f458, %f35;
LBB0_24:                                // %L880
	or.b32  	%r175, %r174, %r15;
	mul.f32 	%f2, %f215, %f215;
	mul.f32 	%f7, %f249, %f249;
	mul.f32 	%f11, %f284, %f284;
	mul.f32 	%f16, %f318, %f318;
	mul.f32 	%f20, %f353, %f353;
	mul.f32 	%f25, %f387, %f387;
	mul.f32 	%f29, %f422, %f422;
	mul.f32 	%f34, %f456, %f456;
	mul.lo.s32 	%r31, %r22, 31;
	cvt.rn.f32.s32 	%f461, %r31;
	div.approx.f32 	%f38, %f461, %f216;
	abs.f32 	%f899, %f38;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	LBB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	LBB0_32;
	bra.uni 	LBB0_26;
LBB0_32:
	mov.b32 	%r33, %f899;
	and.b32  	%r253, %r33, 8388607;
	or.b32  	%r2616, %r253, 1065353216;
	mov.b32 	%f898, %r2616;
	add.s32 	%r254, %r33, -1073741824;
	and.b32  	%r2617, %r254, -8388608;
	setp.eq.s32 	%p68, %r2617, 0;
	@%p68 bra 	LBB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_34:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r255, %r2617, 192937984;
	add.s32 	%r256, %r255, %r2616;
	mov.b32 	%f473, %r256;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2617, %r2617, %r255;
	mov.b32 	%r2616, %f898;
	setp.ne.s32 	%p69, %r2617, 0;
	setp.ne.s32 	%p70, %r2616, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	LBB0_34;
LBB0_35:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r33, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	LBB0_36;
LBB0_26:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f897, %f464;
	fma.rn.f32 	%f41, %f897, 0fC0000000, %f899;
	mov.b32 	%r32, %f41;
	setp.lt.u32 	%p63, %r32, 1073741824;
	@%p63 bra 	LBB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r32, -2147483647;
	@%p64 bra 	LBB0_29;
// %bb.28:
	add.f32 	%f469, %f897, 0fBF800000;
	setp.lt.f32 	%p67, %f41, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f897, %f470, %f469, %p67;
	bra.uni 	LBB0_31;
LBB0_29:
	add.f32 	%f897, %f897, 0f3F800000;
	setp.ltu.f32 	%p65, %f41, 0f40800000;
	@%p65 bra 	LBB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f897, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f41;
	setp.ge.f32 	%p66, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f897, %f468, %f465, %p66;
LBB0_31:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
LBB0_36:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r176, %r175, 1;
	mul.f32 	%f219, %f2, 0f3C8A83B8;
	mul.f32 	%f253, %f7, 0f3C8A83B8;
	mul.f32 	%f288, %f11, 0f3C8A83B8;
	mul.f32 	%f322, %f16, 0f3C8A83B8;
	mul.f32 	%f357, %f20, 0f3C8A83B8;
	mul.f32 	%f391, %f25, 0f3C8A83B8;
	mul.f32 	%f426, %f29, 0f3C8A83B8;
	mul.f32 	%f459, %f34, 0f3C8A83B8;
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	LBB0_38;
// %bb.37:
	mov.b32 	%r257, %f38;
	and.b32  	%r258, %r257, -2147483648;
	mov.b32 	%r259, %f899;
	or.b32  	%r260, %r258, %r259;
	mov.b32 	%f899, %r260;
LBB0_38:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd90, %r176, 4;
	mul.f32 	%f6, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f15, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f24, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f33, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	add.f32 	%f483, %f899, %f899;
	mov.b32 	%r261, %f483;
	and.b32  	%r262, %r261, -2147483648;
	or.b32  	%r263, %r262, 1056964608;
	mov.b32 	%f484, %r263;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p75;
	cvt.rzi.s32.f32 	%r264, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r265, %r264, 1;
	setp.eq.b32 	%p76, %r265, 1;
	selp.f32 	%f502, %f500, %f501, %p76;
	selp.f32 	%f503, %f501, %f500, %p76;
	and.b32  	%r266, %r264, 2;
	setp.eq.s32 	%p77, %r266, 0;
	neg.f32 	%f504, %f502;
	selp.f32 	%f505, %f502, %f504, %p77;
	add.s32 	%r267, %r264, 1;
	and.b32  	%r268, %r267, 2;
	setp.eq.s32 	%p78, %r268, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f508, %f503, %f507, %p78;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f55, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f55, 0f3F800000;
	add.s32 	%r269, %r31, 496;
	cvt.rn.f32.s32 	%f513, %r269;
	div.approx.f32 	%f57, %f513, %f216;
	abs.f32 	%f903, %f57;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	LBB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	LBB0_46;
	bra.uni 	LBB0_40;
LBB0_46:
	mov.b32 	%r41, %f903;
	and.b32  	%r270, %r41, 8388607;
	or.b32  	%r2618, %r270, 1065353216;
	mov.b32 	%f902, %r2618;
	add.s32 	%r271, %r41, -1073741824;
	and.b32  	%r2619, %r271, -8388608;
	setp.eq.s32 	%p88, %r2619, 0;
	@%p88 bra 	LBB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i968.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
LBB0_48:                                // %__nv_fmaf_rn.exit4.i.i.i968
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r272, %r2619, 192937984;
	add.s32 	%r273, %r272, %r2618;
	mov.b32 	%f525, %r273;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2619, %r2619, %r272;
	mov.b32 	%r2618, %f902;
	setp.ne.s32 	%p89, %r2619, 0;
	setp.ne.s32 	%p90, %r2618, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	LBB0_48;
LBB0_49:                                // %__internal_fmodf_slowpath_mod.exit.i.i970
	setp.gt.u32 	%p92, %r41, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	LBB0_50;
LBB0_40:                                // %__nv_fast_fdividef.exit.i.i.i940
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f901, %f516;
	fma.rn.f32 	%f60, %f901, 0fC0000000, %f903;
	mov.b32 	%r40, %f60;
	setp.lt.u32 	%p83, %r40, 1073741824;
	@%p83 bra 	LBB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r40, -2147483647;
	@%p84 bra 	LBB0_43;
// %bb.42:
	add.f32 	%f521, %f901, 0fBF800000;
	setp.lt.f32 	%p87, %f60, 0fC0000000;
	add.f32 	%f522, %f521, 0fBF800000;
	selp.f32 	%f901, %f522, %f521, %p87;
	bra.uni 	LBB0_45;
LBB0_43:
	add.f32 	%f901, %f901, 0f3F800000;
	setp.ltu.f32 	%p85, %f60, 0f40800000;
	@%p85 bra 	LBB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i945
	add.f32 	%f517, %f901, 0f3F800000;
	fma.rn.f32 	%f519, %f184, 0fC0400000, %f60;
	setp.ge.f32 	%p86, %f519, 0f00000000;
	add.f32 	%f520, %f517, 0f3F800000;
	selp.f32 	%f901, %f520, %f517, %p86;
LBB0_45:                                // %__internal_fmodf_fastpath_quot.exit.i.i949
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
LBB0_50:                                // %__internal_fmodf_kernel.exit.i974
	add.s64 	%rd91, %rd1, %rd90;
	mov.b32 	%r198, %f254;
	mov.b32 	%r197, %f6;
	mov.b32 	%r216, %f323;
	mov.b32 	%r215, %f15;
	mov.b32 	%r234, %f392;
	mov.b32 	%r233, %f24;
	mov.b32 	%r252, %f460;
	mov.b32 	%r251, %f33;
	selp.f32 	%f56, %f512, %f508, %p80;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	LBB0_52;
// %bb.51:
	mov.b32 	%r274, %f57;
	and.b32  	%r275, %r274, -2147483648;
	mov.b32 	%r276, %f903;
	or.b32  	%r277, %r275, %r276;
	mov.b32 	%f903, %r277;
LBB0_52:                                // %__nv_fmodf.exit975
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.global.u32 	%r16, [%rd91];
	shr.u32 	%r17, %r4, 1;
	// begin inline asm
	cvt.rn.f16x2.f32 %r196, %r198, %r197;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r214, %r216, %r215;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r232, %r234, %r233;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r250, %r252, %r251;
	// end inline asm
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r284, %f535;
	and.b32  	%r285, %r284, -2147483648;
	or.b32  	%r286, %r285, 1056964608;
	mov.b32 	%f536, %r286;
	add.f32 	%f537, %f535, %f536;
	cvt.rzi.f32.f32 	%f538, %f537;
	abs.f32 	%f539, %f535;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f542, %f541, %f540, %p95;
	cvt.rzi.s32.f32 	%r287, %f542;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	and.b32  	%r288, %r287, 1;
	setp.eq.b32 	%p96, %r288, 1;
	selp.f32 	%f554, %f552, %f553, %p96;
	selp.f32 	%f555, %f553, %f552, %p96;
	and.b32  	%r289, %r287, 2;
	setp.eq.s32 	%p97, %r289, 0;
	neg.f32 	%f556, %f554;
	selp.f32 	%f557, %f554, %f556, %p97;
	add.s32 	%r290, %r287, 1;
	and.b32  	%r291, %r290, 2;
	setp.eq.s32 	%p98, %r291, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f560, %f555, %f559, %p98;
	cvt.rzi.f32.f32 	%f561, %f903;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r280, %f566;
	mov.b32 	%r279, %f56;
	// begin inline asm
	cvt.rn.f16x2.f32 %r48, %r280, %r279;
	// end inline asm
	mov.b32 	%r283, %f563;
	mov.b32 	%r282, %f55;
	// begin inline asm
	cvt.rn.f16x2.f32 %r49, %r283, %r282;
	// end inline asm
	mov.u64 	%rd202, 2;
	mov.u64 	%rd203, %rd202;
LBB0_53:                                // %L992.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd203, %rd203, %rd203;
	add.s64 	%rd202, %rd202, -1;
	setp.ne.s64 	%p101, %rd202, 0;
	@%p101 bra 	LBB0_53;
// %bb.54:                              // %L994
	and.b64  	%rd93, %rd203, 9223372036854775807;
	setp.ne.s64 	%p102, %rd93, 16;
	@%p102 bra 	LBB0_132;
// %bb.55:                              // %L1001
	shr.u32 	%r50, %r4, 3;
	and.b32  	%r292, %r50, 2;
	or.b32  	%r51, %r20, %r292;
	and.b32  	%r293, %r17, 4;
	or.b32  	%r52, %r51, %r293;
	and.b32  	%r294, %r4, 3;
	mul.lo.s32 	%r295, %r294, %r52;
	shl.b32 	%r296, %r295, 1;
	neg.s32 	%r297, %r296;
	cvt.rn.f32.s32 	%f567, %r297;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f74, %f567, %f568;
	abs.f32 	%f907, %f74;
	setp.lt.f32 	%p103, %f907, 0f40000000;
	@%p103 bra 	LBB0_67;
// %bb.56:
	setp.gtu.f32 	%p104, %f907, 0f4B800000;
	@%p104 bra 	LBB0_63;
	bra.uni 	LBB0_57;
LBB0_63:
	mov.b32 	%r54, %f907;
	and.b32  	%r298, %r54, 8388607;
	or.b32  	%r2620, %r298, 1065353216;
	mov.b32 	%f906, %r2620;
	add.s32 	%r299, %r54, -1073741824;
	and.b32  	%r2621, %r299, -8388608;
	setp.eq.s32 	%p110, %r2621, 0;
	@%p110 bra 	LBB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i1014.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
LBB0_65:                                // %__nv_fmaf_rn.exit4.i.i.i1014
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r300, %r2621, 192937984;
	add.s32 	%r301, %r300, %r2620;
	mov.b32 	%f579, %r301;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2621, %r2621, %r300;
	mov.b32 	%r2620, %f906;
	setp.ne.s32 	%p111, %r2621, 0;
	setp.ne.s32 	%p112, %r2620, 0;
	and.pred  	%p113, %p111, %p112;
	@%p113 bra 	LBB0_65;
LBB0_66:                                // %__internal_fmodf_slowpath_mod.exit.i.i1016
	setp.gt.u32 	%p114, %r54, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p114;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	LBB0_67;
LBB0_57:                                // %__nv_fast_fdividef.exit.i.i.i986
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f570;
	fma.rn.f32 	%f77, %f905, 0fC0000000, %f907;
	mov.b32 	%r53, %f77;
	setp.lt.u32 	%p105, %r53, 1073741824;
	@%p105 bra 	LBB0_62;
// %bb.58:
	setp.lt.u32 	%p106, %r53, -2147483647;
	@%p106 bra 	LBB0_60;
// %bb.59:
	add.f32 	%f575, %f905, 0fBF800000;
	setp.lt.f32 	%p109, %f77, 0fC0000000;
	add.f32 	%f576, %f575, 0fBF800000;
	selp.f32 	%f905, %f576, %f575, %p109;
	bra.uni 	LBB0_62;
LBB0_60:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p107, %f77, 0f40800000;
	@%p107 bra 	LBB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i991
	add.f32 	%f571, %f905, 0f3F800000;
	fma.rn.f32 	%f573, %f184, 0fC0400000, %f77;
	setp.ge.f32 	%p108, %f573, 0f00000000;
	add.f32 	%f574, %f571, 0f3F800000;
	selp.f32 	%f905, %f574, %f571, %p108;
LBB0_62:                                // %__internal_fmodf_fastpath_quot.exit.i.i995
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_67:                                // %__internal_fmodf_kernel.exit.i1020
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p115, %f588, 0f7F800000;
	@%p115 bra 	LBB0_69;
// %bb.68:
	mov.b32 	%r302, %f74;
	and.b32  	%r303, %r302, -2147483648;
	mov.b32 	%r304, %f907;
	or.b32  	%r305, %r303, %r304;
	mov.b32 	%f907, %r305;
LBB0_69:                                // %__nv_fmodf.exit1021
	add.f32 	%f589, %f907, %f907;
	mov.b32 	%r306, %f589;
	and.b32  	%r307, %r306, -2147483648;
	or.b32  	%r308, %r307, 1056964608;
	mov.b32 	%f590, %r308;
	add.f32 	%f591, %f589, %f590;
	cvt.rzi.f32.f32 	%f592, %f591;
	abs.f32 	%f593, %f589;
	setp.gt.f32 	%p116, %f593, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p116;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p117, %f593, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p117;
	cvt.rzi.s32.f32 	%r309, %f596;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	mul.f32 	%f598, %f597, %f597;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	and.b32  	%r310, %r309, 1;
	setp.eq.b32 	%p118, %r310, 1;
	selp.f32 	%f608, %f606, %f607, %p118;
	selp.f32 	%f609, %f607, %f606, %p118;
	and.b32  	%r311, %r309, 2;
	setp.eq.s32 	%p119, %r311, 0;
	neg.f32 	%f610, %f608;
	selp.f32 	%f611, %f608, %f610, %p119;
	add.s32 	%r312, %r309, 1;
	and.b32  	%r313, %r312, 2;
	setp.eq.s32 	%p120, %r313, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f614, %f609, %f613, %p120;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.f32 	%p121, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f91, %f616, %f611, %p121;
	abs.f32 	%f617, %f907;
	setp.gt.f32 	%p122, %f617, 0f4B800000;
	add.f32 	%f618, %f91, 0f3F800000;
	and.b32  	%r314, %r9, 6;
	mov.u32 	%r315, -8;
	sub.s32 	%r316, %r315, %r314;
	mul.lo.s32 	%r317, %r52, %r316;
	cvt.rn.f32.s32 	%f619, %r317;
	div.approx.f32 	%f93, %f619, %f568;
	abs.f32 	%f911, %f93;
	setp.lt.f32 	%p123, %f911, 0f40000000;
	@%p123 bra 	LBB0_81;
// %bb.70:
	setp.gtu.f32 	%p124, %f911, 0f4B800000;
	@%p124 bra 	LBB0_77;
	bra.uni 	LBB0_71;
LBB0_77:
	mov.b32 	%r62, %f911;
	and.b32  	%r318, %r62, 8388607;
	or.b32  	%r2622, %r318, 1065353216;
	mov.b32 	%f910, %r2622;
	add.s32 	%r319, %r62, -1073741824;
	and.b32  	%r2623, %r319, -8388608;
	setp.eq.s32 	%p130, %r2623, 0;
	@%p130 bra 	LBB0_80;
// %bb.78:                              // %__nv_fmaf_rn.exit4.i.i.i1060.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
LBB0_79:                                // %__nv_fmaf_rn.exit4.i.i.i1060
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r320, %r2623, 192937984;
	add.s32 	%r321, %r320, %r2622;
	mov.b32 	%f631, %r321;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2623, %r2623, %r320;
	mov.b32 	%r2622, %f910;
	setp.ne.s32 	%p131, %r2623, 0;
	setp.ne.s32 	%p132, %r2622, 0;
	and.pred  	%p133, %p131, %p132;
	@%p133 bra 	LBB0_79;
LBB0_80:                                // %__internal_fmodf_slowpath_mod.exit.i.i1062
	setp.gt.u32 	%p134, %r62, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p134;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	LBB0_81;
LBB0_71:                                // %__nv_fast_fdividef.exit.i.i.i1032
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f622;
	fma.rn.f32 	%f96, %f909, 0fC0000000, %f911;
	mov.b32 	%r61, %f96;
	setp.lt.u32 	%p125, %r61, 1073741824;
	@%p125 bra 	LBB0_76;
// %bb.72:
	setp.lt.u32 	%p126, %r61, -2147483647;
	@%p126 bra 	LBB0_74;
// %bb.73:
	add.f32 	%f627, %f909, 0fBF800000;
	setp.lt.f32 	%p129, %f96, 0fC0000000;
	add.f32 	%f628, %f627, 0fBF800000;
	selp.f32 	%f909, %f628, %f627, %p129;
	bra.uni 	LBB0_76;
LBB0_74:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p127, %f96, 0f40800000;
	@%p127 bra 	LBB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i1037
	add.f32 	%f623, %f909, 0f3F800000;
	fma.rn.f32 	%f625, %f184, 0fC0400000, %f96;
	setp.ge.f32 	%p128, %f625, 0f00000000;
	add.f32 	%f626, %f623, 0f3F800000;
	selp.f32 	%f909, %f626, %f623, %p128;
LBB0_76:                                // %__internal_fmodf_fastpath_quot.exit.i.i1041
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_81:                                // %__internal_fmodf_kernel.exit.i1066
	selp.f32 	%f92, %f618, %f614, %p122;
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p135, %f640, 0f7F800000;
	@%p135 bra 	LBB0_83;
// %bb.82:
	mov.b32 	%r322, %f93;
	and.b32  	%r323, %r322, -2147483648;
	mov.b32 	%r324, %f911;
	or.b32  	%r325, %r323, %r324;
	mov.b32 	%f911, %r325;
LBB0_83:                                // %__nv_fmodf.exit1067
	add.f32 	%f641, %f911, %f911;
	mov.b32 	%r338, %f641;
	and.b32  	%r339, %r338, -2147483648;
	or.b32  	%r340, %r339, 1056964608;
	mov.b32 	%f642, %r340;
	add.f32 	%f643, %f641, %f642;
	cvt.rzi.f32.f32 	%f644, %f643;
	abs.f32 	%f645, %f641;
	setp.gt.f32 	%p136, %f645, 0f4B000000;
	selp.f32 	%f646, %f641, %f644, %p136;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p137, %f645, 0f3F000000;
	selp.f32 	%f648, %f647, %f646, %p137;
	cvt.rzi.s32.f32 	%r341, %f648;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	and.b32  	%r342, %r341, 1;
	setp.eq.b32 	%p138, %r342, 1;
	selp.f32 	%f660, %f658, %f659, %p138;
	selp.f32 	%f661, %f659, %f658, %p138;
	and.b32  	%r343, %r341, 2;
	setp.eq.s32 	%p139, %r343, 0;
	neg.f32 	%f662, %f660;
	selp.f32 	%f663, %f660, %f662, %p139;
	add.s32 	%r344, %r341, 1;
	and.b32  	%r345, %r344, 2;
	setp.eq.s32 	%p140, %r345, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f666, %f661, %f665, %p140;
	cvt.rzi.f32.f32 	%f667, %f911;
	setp.eq.f32 	%p141, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	selp.f32 	%f669, %f668, %f663, %p141;
	abs.f32 	%f670, %f911;
	setp.gt.f32 	%p142, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	selp.f32 	%f672, %f671, %f666, %p142;
	mov.b32 	%r328, %f672;
	mov.b32 	%r327, %f92;
	// begin inline asm
	cvt.rn.f16x2.f32 %r69, %r328, %r327;
	// end inline asm
	mov.b32 	%r334, %f669;
	xor.b32  	%r331, %r334, -2147483648;
	mov.b32 	%r333, %f91;
	xor.b32  	%r330, %r333, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r70, %r331, %r330;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r71, %r334, %r333;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r72, %r328, %r327;
	// end inline asm
	mov.u64 	%rd204, 2;
	mov.u64 	%rd205, %rd204;
LBB0_84:                                // %L1173.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd205, %rd205, %rd205;
	add.s64 	%rd204, %rd204, -1;
	setp.ne.s64 	%p143, %rd204, 0;
	@%p143 bra 	LBB0_84;
// %bb.85:                              // %L1175
	and.b64  	%rd97, %rd205, 9223372036854775807;
	setp.ne.s64 	%p144, %rd97, 16;
	@%p144 bra 	LBB0_131;
// %bb.86:                              // %L1182
	shl.b32 	%r346, %r18, 1;
	neg.s32 	%r73, %r346;
	mov.u64 	%rd206, 2;
	mov.u64 	%rd207, %rd206;
LBB0_87:                                // %L1245.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd207, %rd207, %rd207;
	add.s64 	%rd206, %rd206, -1;
	setp.ne.s64 	%p145, %rd206, 0;
	@%p145 bra 	LBB0_87;
// %bb.88:                              // %L1247
	mul.lo.s32 	%r74, %r73, %r52;
	cvt.rn.f32.s32 	%f673, %r74;
	shl.b64 	%rd101, %rd207, 1;
	cvt.rn.f32.s64 	%f674, %rd101;
	div.approx.f32 	%f110, %f673, %f674;
	abs.f32 	%f915, %f110;
	setp.lt.f32 	%p146, %f915, 0f40000000;
	@%p146 bra 	LBB0_100;
// %bb.89:
	setp.gtu.f32 	%p147, %f915, 0f4B800000;
	@%p147 bra 	LBB0_96;
	bra.uni 	LBB0_90;
LBB0_96:
	mov.b32 	%r76, %f915;
	and.b32  	%r347, %r76, 8388607;
	or.b32  	%r2624, %r347, 1065353216;
	mov.b32 	%f914, %r2624;
	add.s32 	%r348, %r76, -1073741824;
	and.b32  	%r2625, %r348, -8388608;
	setp.eq.s32 	%p153, %r2625, 0;
	@%p153 bra 	LBB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i1106.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
LBB0_98:                                // %__nv_fmaf_rn.exit4.i.i.i1106
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r349, %r2625, 192937984;
	add.s32 	%r350, %r349, %r2624;
	mov.b32 	%f685, %r350;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2625, %r2625, %r349;
	mov.b32 	%r2624, %f914;
	setp.ne.s32 	%p154, %r2625, 0;
	setp.ne.s32 	%p155, %r2624, 0;
	and.pred  	%p156, %p154, %p155;
	@%p156 bra 	LBB0_98;
LBB0_99:                                // %__internal_fmodf_slowpath_mod.exit.i.i1108
	setp.gt.u32 	%p157, %r76, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p157;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	LBB0_100;
LBB0_90:                                // %__nv_fast_fdividef.exit.i.i.i1078
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f676;
	fma.rn.f32 	%f113, %f913, 0fC0000000, %f915;
	mov.b32 	%r75, %f113;
	setp.lt.u32 	%p148, %r75, 1073741824;
	@%p148 bra 	LBB0_95;
// %bb.91:
	setp.lt.u32 	%p149, %r75, -2147483647;
	@%p149 bra 	LBB0_93;
// %bb.92:
	add.f32 	%f681, %f913, 0fBF800000;
	setp.lt.f32 	%p152, %f113, 0fC0000000;
	add.f32 	%f682, %f681, 0fBF800000;
	selp.f32 	%f913, %f682, %f681, %p152;
	bra.uni 	LBB0_95;
LBB0_93:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p150, %f113, 0f40800000;
	@%p150 bra 	LBB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i1083
	add.f32 	%f677, %f913, 0f3F800000;
	fma.rn.f32 	%f679, %f184, 0fC0400000, %f113;
	setp.ge.f32 	%p151, %f679, 0f00000000;
	add.f32 	%f680, %f677, 0f3F800000;
	selp.f32 	%f913, %f680, %f677, %p151;
LBB0_95:                                // %__internal_fmodf_fastpath_quot.exit.i.i1087
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_100:                               // %__internal_fmodf_kernel.exit.i1112
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p158, %f694, 0f7F800000;
	@%p158 bra 	LBB0_102;
// %bb.101:
	mov.b32 	%r351, %f110;
	and.b32  	%r352, %r351, -2147483648;
	mov.b32 	%r353, %f915;
	or.b32  	%r354, %r352, %r353;
	mov.b32 	%f915, %r354;
LBB0_102:                               // %__nv_fmodf.exit1113
	add.f32 	%f695, %f915, %f915;
	mov.b32 	%r355, %f695;
	and.b32  	%r356, %r355, -2147483648;
	or.b32  	%r357, %r356, 1056964608;
	mov.b32 	%f696, %r357;
	add.f32 	%f697, %f695, %f696;
	cvt.rzi.f32.f32 	%f698, %f697;
	abs.f32 	%f699, %f695;
	setp.gt.f32 	%p159, %f699, 0f4B000000;
	selp.f32 	%f700, %f695, %f698, %p159;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p160, %f699, 0f3F000000;
	selp.f32 	%f702, %f701, %f700, %p160;
	cvt.rzi.s32.f32 	%r358, %f702;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	mul.f32 	%f704, %f703, %f703;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	and.b32  	%r359, %r358, 1;
	setp.eq.b32 	%p161, %r359, 1;
	selp.f32 	%f714, %f712, %f713, %p161;
	selp.f32 	%f715, %f713, %f712, %p161;
	and.b32  	%r360, %r358, 2;
	setp.eq.s32 	%p162, %r360, 0;
	neg.f32 	%f716, %f714;
	selp.f32 	%f717, %f714, %f716, %p162;
	add.s32 	%r361, %r358, 1;
	and.b32  	%r362, %r361, 2;
	setp.eq.s32 	%p163, %r362, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f720, %f715, %f719, %p163;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.f32 	%p164, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f127, %f722, %f717, %p164;
	abs.f32 	%f723, %f915;
	setp.gt.f32 	%p165, %f723, 0f4B800000;
	add.f32 	%f724, %f127, 0f3F800000;
	selp.f32 	%f128, %f724, %f720, %p165;
	mov.u64 	%rd208, 2;
	mov.u64 	%rd209, %rd208;
LBB0_103:                               // %L1286.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd209, %rd209, %rd209;
	add.s64 	%rd208, %rd208, -1;
	setp.ne.s64 	%p166, %rd208, 0;
	@%p166 bra 	LBB0_103;
// %bb.104:                             // %L1288
	shl.b32 	%r363, %r52, 2;
	sub.s32 	%r364, %r74, %r363;
	cvt.rn.f32.s32 	%f725, %r364;
	shl.b64 	%rd103, %rd209, 1;
	cvt.rn.f32.s64 	%f726, %rd103;
	div.approx.f32 	%f129, %f725, %f726;
	abs.f32 	%f919, %f129;
	setp.lt.f32 	%p167, %f919, 0f40000000;
	@%p167 bra 	LBB0_116;
// %bb.105:
	setp.gtu.f32 	%p168, %f919, 0f4B800000;
	@%p168 bra 	LBB0_112;
	bra.uni 	LBB0_106;
LBB0_112:
	mov.b32 	%r84, %f919;
	and.b32  	%r365, %r84, 8388607;
	or.b32  	%r2626, %r365, 1065353216;
	mov.b32 	%f918, %r2626;
	add.s32 	%r366, %r84, -1073741824;
	and.b32  	%r2627, %r366, -8388608;
	setp.eq.s32 	%p174, %r2627, 0;
	@%p174 bra 	LBB0_115;
// %bb.113:                             // %__nv_fmaf_rn.exit4.i.i.i1152.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
LBB0_114:                               // %__nv_fmaf_rn.exit4.i.i.i1152
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r2627, 192937984;
	add.s32 	%r368, %r367, %r2626;
	mov.b32 	%f737, %r368;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2627, %r2627, %r367;
	mov.b32 	%r2626, %f918;
	setp.ne.s32 	%p175, %r2627, 0;
	setp.ne.s32 	%p176, %r2626, 0;
	and.pred  	%p177, %p175, %p176;
	@%p177 bra 	LBB0_114;
LBB0_115:                               // %__internal_fmodf_slowpath_mod.exit.i.i1154
	setp.gt.u32 	%p178, %r84, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p178;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	LBB0_116;
LBB0_106:                               // %__nv_fast_fdividef.exit.i.i.i1124
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f728;
	fma.rn.f32 	%f132, %f917, 0fC0000000, %f919;
	mov.b32 	%r83, %f132;
	setp.lt.u32 	%p169, %r83, 1073741824;
	@%p169 bra 	LBB0_111;
// %bb.107:
	setp.lt.u32 	%p170, %r83, -2147483647;
	@%p170 bra 	LBB0_109;
// %bb.108:
	add.f32 	%f733, %f917, 0fBF800000;
	setp.lt.f32 	%p173, %f132, 0fC0000000;
	add.f32 	%f734, %f733, 0fBF800000;
	selp.f32 	%f917, %f734, %f733, %p173;
	bra.uni 	LBB0_111;
LBB0_109:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p171, %f132, 0f40800000;
	@%p171 bra 	LBB0_111;
// %bb.110:                             // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f729, %f917, 0f3F800000;
	fma.rn.f32 	%f731, %f184, 0fC0400000, %f132;
	setp.ge.f32 	%p172, %f731, 0f00000000;
	add.f32 	%f732, %f729, 0f3F800000;
	selp.f32 	%f917, %f732, %f729, %p172;
LBB0_111:                               // %__internal_fmodf_fastpath_quot.exit.i.i1133
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_116:                               // %__internal_fmodf_kernel.exit.i1158
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p179, %f746, 0f7F800000;
	@%p179 bra 	LBB0_118;
// %bb.117:
	mov.b32 	%r369, %f129;
	and.b32  	%r370, %r369, -2147483648;
	mov.b32 	%r371, %f919;
	or.b32  	%r372, %r370, %r371;
	mov.b32 	%f919, %r372;
LBB0_118:                               // %__nv_fmodf.exit1159
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r379, %f747;
	and.b32  	%r380, %r379, -2147483648;
	or.b32  	%r381, %r380, 1056964608;
	mov.b32 	%f748, %r381;
	add.f32 	%f749, %f747, %f748;
	cvt.rzi.f32.f32 	%f750, %f749;
	abs.f32 	%f751, %f747;
	setp.gt.f32 	%p180, %f751, 0f4B000000;
	selp.f32 	%f752, %f747, %f750, %p180;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p181, %f751, 0f3F000000;
	selp.f32 	%f754, %f753, %f752, %p181;
	cvt.rzi.s32.f32 	%r382, %f754;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	and.b32  	%r383, %r382, 1;
	setp.eq.b32 	%p182, %r383, 1;
	selp.f32 	%f766, %f764, %f765, %p182;
	selp.f32 	%f767, %f765, %f764, %p182;
	and.b32  	%r384, %r382, 2;
	setp.eq.s32 	%p183, %r384, 0;
	neg.f32 	%f768, %f766;
	selp.f32 	%f769, %f766, %f768, %p183;
	add.s32 	%r385, %r382, 1;
	and.b32  	%r386, %r385, 2;
	setp.eq.s32 	%p184, %r386, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f772, %f767, %f771, %p184;
	cvt.rzi.f32.f32 	%f773, %f919;
	setp.eq.f32 	%p185, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	selp.f32 	%f775, %f774, %f769, %p185;
	abs.f32 	%f776, %f919;
	setp.gt.f32 	%p186, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	selp.f32 	%f778, %f777, %f772, %p186;
	mov.b32 	%r375, %f778;
	mov.b32 	%r374, %f128;
	// begin inline asm
	cvt.rn.f16x2.f32 %r91, %r375, %r374;
	// end inline asm
	mov.b32 	%r378, %f775;
	mov.b32 	%r377, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r92, %r378, %r377;
	// end inline asm
	mov.u64 	%rd210, 2;
	mov.u64 	%rd211, %rd210;
LBB0_119:                               // %L1329.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd211, %rd211, %rd211;
	add.s64 	%rd210, %rd210, -1;
	setp.ne.s64 	%p187, %rd210, 0;
	@%p187 bra 	LBB0_119;
// %bb.120:                             // %L1331
	and.b64  	%rd105, %rd211, 9223372036854775807;
	setp.ne.s64 	%p188, %rd105, 16;
	@%p188 bra 	LBB0_130;
// %bb.121:                             // %L1338
	mul.lo.s32 	%r94, %r73, %r51;
	cvt.rn.f32.s32 	%f779, %r94;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f146, %f779, %f780;
	abs.f32 	%f923, %f146;
	setp.lt.f32 	%p189, %f923, 0f40000000;
	@%p189 bra 	LBB0_140;
// %bb.122:
	setp.gtu.f32 	%p190, %f923, 0f4B800000;
	@%p190 bra 	LBB0_136;
	bra.uni 	LBB0_123;
LBB0_136:
	mov.b32 	%r116, %f923;
	and.b32  	%r387, %r116, 8388607;
	or.b32  	%r2642, %r387, 1065353216;
	mov.b32 	%f922, %r2642;
	add.s32 	%r388, %r116, -1073741824;
	and.b32  	%r2643, %r388, -8388608;
	setp.eq.s32 	%p196, %r2643, 0;
	@%p196 bra 	LBB0_139;
// %bb.137:                             // %__nv_fmaf_rn.exit4.i.i.i1198.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
LBB0_138:                               // %__nv_fmaf_rn.exit4.i.i.i1198
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r389, %r2643, 192937984;
	add.s32 	%r390, %r389, %r2642;
	mov.b32 	%f791, %r390;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f922, %f791, %f797;
	sub.s32 	%r2643, %r2643, %r389;
	mov.b32 	%r2642, %f922;
	setp.ne.s32 	%p197, %r2643, 0;
	setp.ne.s32 	%p198, %r2642, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	LBB0_138;
LBB0_139:                               // %__internal_fmodf_slowpath_mod.exit.i.i1200
	setp.gt.u32 	%p200, %r116, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f799, %f922, 0f34000000;
	mul.f32 	%f923, %f798, %f799;
	bra.uni 	LBB0_140;
LBB0_123:                               // %__nv_fast_fdividef.exit.i.i.i1170
	div.approx.f32 	%f782, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f782;
	fma.rn.f32 	%f149, %f921, 0fC0000000, %f923;
	mov.b32 	%r115, %f149;
	setp.lt.u32 	%p191, %r115, 1073741824;
	@%p191 bra 	LBB0_135;
// %bb.124:
	setp.lt.u32 	%p192, %r115, -2147483647;
	@%p192 bra 	LBB0_133;
// %bb.125:
	add.f32 	%f787, %f921, 0fBF800000;
	setp.lt.f32 	%p195, %f149, 0fC0000000;
	add.f32 	%f788, %f787, 0fBF800000;
	selp.f32 	%f921, %f788, %f787, %p195;
	bra.uni 	LBB0_135;
LBB0_133:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p193, %f149, 0f40800000;
	@%p193 bra 	LBB0_135;
// %bb.134:                             // %__nv_fmaf_rn.exit.i.i.i1175
	add.f32 	%f783, %f921, 0f3F800000;
	fma.rn.f32 	%f785, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p194, %f785, 0f00000000;
	add.f32 	%f786, %f783, 0f3F800000;
	selp.f32 	%f921, %f786, %f783, %p194;
LBB0_135:                               // %__internal_fmodf_fastpath_quot.exit.i.i1179
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_140:                               // %__internal_fmodf_kernel.exit.i1204
	abs.f32 	%f800, %f923;
	setp.gtu.f32 	%p201, %f800, 0f7F800000;
	@%p201 bra 	LBB0_142;
// %bb.141:
	mov.b32 	%r391, %f146;
	and.b32  	%r392, %r391, -2147483648;
	mov.b32 	%r393, %f923;
	or.b32  	%r394, %r392, %r393;
	mov.b32 	%f923, %r394;
LBB0_142:                               // %__nv_fmodf.exit1205
	shl.b32 	%r403, %r51, 2;
	sub.s32 	%r404, %r94, %r403;
	cvt.rn.f32.s32 	%f833, %r404;
	div.approx.f32 	%f166, %f833, %f780;
	abs.f32 	%f927, %f166;
	setp.lt.f32 	%p210, %f927, 0f40000000;
	@%p210 bra 	LBB0_154;
// %bb.143:
	setp.gtu.f32 	%p211, %f927, 0f4B800000;
	@%p211 bra 	LBB0_150;
	bra.uni 	LBB0_144;
LBB0_150:
	mov.b32 	%r124, %f927;
	and.b32  	%r405, %r124, 8388607;
	or.b32  	%r2644, %r405, 1065353216;
	mov.b32 	%f926, %r2644;
	add.s32 	%r406, %r124, -1073741824;
	and.b32  	%r2645, %r406, -8388608;
	setp.eq.s32 	%p217, %r2645, 0;
	@%p217 bra 	LBB0_153;
// %bb.151:                             // %__nv_fmaf_rn.exit4.i.i.i1244.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
LBB0_152:                               // %__nv_fmaf_rn.exit4.i.i.i1244
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r407, %r2645, 192937984;
	add.s32 	%r408, %r407, %r2644;
	mov.b32 	%f845, %r408;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f926, %f845, %f851;
	sub.s32 	%r2645, %r2645, %r407;
	mov.b32 	%r2644, %f926;
	setp.ne.s32 	%p218, %r2645, 0;
	setp.ne.s32 	%p219, %r2644, 0;
	and.pred  	%p220, %p218, %p219;
	@%p220 bra 	LBB0_152;
LBB0_153:                               // %__internal_fmodf_slowpath_mod.exit.i.i1246
	setp.gt.u32 	%p221, %r124, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p221;
	mul.f32 	%f853, %f926, 0f34000000;
	mul.f32 	%f927, %f852, %f853;
	bra.uni 	LBB0_154;
LBB0_144:                               // %__nv_fast_fdividef.exit.i.i.i1216
	div.approx.f32 	%f836, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f836;
	fma.rn.f32 	%f169, %f925, 0fC0000000, %f927;
	mov.b32 	%r123, %f169;
	setp.lt.u32 	%p212, %r123, 1073741824;
	@%p212 bra 	LBB0_149;
// %bb.145:
	setp.lt.u32 	%p213, %r123, -2147483647;
	@%p213 bra 	LBB0_147;
// %bb.146:
	add.f32 	%f841, %f925, 0fBF800000;
	setp.lt.f32 	%p216, %f169, 0fC0000000;
	add.f32 	%f842, %f841, 0fBF800000;
	selp.f32 	%f925, %f842, %f841, %p216;
	bra.uni 	LBB0_149;
LBB0_147:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p214, %f169, 0f40800000;
	@%p214 bra 	LBB0_149;
// %bb.148:                             // %__nv_fmaf_rn.exit.i.i.i1221
	add.f32 	%f837, %f925, 0f3F800000;
	fma.rn.f32 	%f839, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p215, %f839, 0f00000000;
	add.f32 	%f840, %f837, 0f3F800000;
	selp.f32 	%f925, %f840, %f837, %p215;
LBB0_149:                               // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_154:                               // %__internal_fmodf_kernel.exit.i1250
	abs.f32 	%f854, %f927;
	setp.gtu.f32 	%p222, %f854, 0f7F800000;
	@%p222 bra 	LBB0_156;
// %bb.155:
	mov.b32 	%r409, %f166;
	and.b32  	%r410, %r409, -2147483648;
	mov.b32 	%r411, %f927;
	or.b32  	%r412, %r410, %r411;
	mov.b32 	%f927, %r412;
LBB0_156:                               // %__nv_fmodf.exit1251
	setp.le.s32 	%p230, %r6, %r5;
	mov.u32 	%r2614, 0;
	@%p230 bra 	LBB0_160;
// %bb.157:                             // %L1453.lr.ph
	add.f32 	%f801, %f923, %f923;
	mov.b32 	%r395, %f801;
	and.b32  	%r396, %r395, -2147483648;
	or.b32  	%r397, %r396, 1056964608;
	mov.b32 	%f802, %r397;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p203, %f805, 0f4B000000;
	selp.f32 	%f806, %f801, %f804, %p203;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p204, %f805, 0f3F000000;
	selp.f32 	%f808, %f807, %f806, %p204;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f923;
	mul.f32 	%f810, %f809, %f809;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r398, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r399, %r398, 1;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p205, %r399, 1;
	selp.f32 	%f820, %f818, %f819, %p205;
	and.b32  	%r400, %r398, 2;
	setp.eq.s32 	%p206, %r400, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r401, %r398, 1;
	cvt.rzi.f32.f32 	%f827, %f923;
	selp.f32 	%f821, %f819, %f818, %p205;
	selp.f32 	%f823, %f820, %f822, %p206;
	and.b32  	%r402, %r401, 2;
	setp.eq.f32 	%p208, %f827, %f923;
	mul.f32 	%f828, %f923, 0f00000000;
	and.b32  	%r93, %r50, 1;
	setp.eq.s32 	%p207, %r402, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p208;
	abs.f32 	%f830, %f923;
	setp.eq.s32 	%p202, %r93, %r19;
	selp.f32 	%f826, %f821, %f825, %p207;
	setp.gt.f32 	%p209, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	selp.f32 	%f832, %f831, %f826, %p209;
	selp.f32 	%f163, 0f3F800000, 0f00000000, %p202;
	mul.f32 	%f164, %f832, %f163;
	mul.f32 	%f165, %f829, %f163;
	add.f32 	%f855, %f927, %f927;
	mov.b32 	%r425, %f855;
	and.b32  	%r426, %r425, -2147483648;
	or.b32  	%r427, %r426, 1056964608;
	mov.b32 	%f856, %r427;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p223, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p223;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p224, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p224;
	cvt.rzi.s32.f32 	%r428, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f927;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r429, %r428, 1;
	setp.eq.b32 	%p225, %r429, 1;
	selp.f32 	%f874, %f872, %f873, %p225;
	selp.f32 	%f875, %f873, %f872, %p225;
	and.b32  	%r430, %r428, 2;
	setp.eq.s32 	%p226, %r430, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p226;
	add.s32 	%r431, %r428, 1;
	and.b32  	%r432, %r431, 2;
	setp.eq.s32 	%p227, %r432, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p227;
	cvt.rzi.f32.f32 	%f881, %f927;
	setp.eq.f32 	%p228, %f881, %f927;
	mul.f32 	%f882, %f927, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p228;
	abs.f32 	%f884, %f927;
	setp.gt.f32 	%p229, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p229;
	mul.f32 	%f887, %f886, %f163;
	mul.f32 	%f888, %f883, %f163;
	mov.b32 	%r415, %f887;
	mov.b32 	%r414, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	mov.b32 	%r421, %f888;
	xor.b32  	%r418, %r421, -2147483648;
	mov.b32 	%r420, %f165;
	xor.b32  	%r417, %r420, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r415, %r414;
	// end inline asm
	shl.b32 	%r434, %r5, 12;
	and.b32  	%r435, %r14, 16;
	and.b32  	%r436, %r9, 16;
	and.b32  	%r437, %r17, 8;
	and.b32  	%r438, %r1, 7;
	shl.b32 	%r439, %r1, 2;
	and.b32  	%r440, %r439, 32;
	or.b32  	%r441, %r436, %r438;
	or.b32  	%r442, %r441, %r437;
	or.b32  	%r135, %r442, %r440;
	shl.b32 	%r443, %r3, 10;
	and.b32  	%r444, %r443, 3072;
	and.b32  	%r445, %r14, 28;
	or.b32  	%r446, %r445, %r444;
	or.b32  	%r136, %r446, %r434;
	add.s32 	%r137, %r136, 262144;
	add.s32 	%r138, %r136, 524288;
	add.s32 	%r139, %r136, 786432;
	and.b32  	%r140, %r4, 8;
	shl.b32 	%r447, %r4, 4;
	or.b32  	%r448, %r140, %r447;
	shr.u32 	%r449, %r448, 2;
	and.b32  	%r450, %r449, 14;
	shr.u32 	%r451, %r1, 3;
	mul.lo.s32 	%r452, %r451, 1057;
	mul.lo.s32 	%r453, %r21, 65;
	bfe.u32 	%r454, %r1, 2, 1;
	mul.lo.s32 	%r455, %r454, 130;
	shr.u32 	%r456, %r1, 1;
	bfe.u32 	%r457, %r1, 1, 1;
	mul.lo.s32 	%r458, %r457, 260;
	and.b32  	%r459, %r1, 1;
	mul.lo.s32 	%r460, %r459, 520;
	add.s32 	%r461, %r453, %r452;
	add.s32 	%r462, %r461, %r435;
	add.s32 	%r463, %r462, %r460;
	add.s32 	%r464, %r463, %r455;
	add.s32 	%r465, %r464, %r458;
	add.s32 	%r466, %r465, %r450;
	mul.wide.u32 	%rd108, %r466, 4;
	mov.u64 	%rd109, shmem;
	add.s64 	%rd37, %rd109, %rd108;
	add.s32 	%r467, %r466, 32;
	mul.wide.u32 	%rd110, %r467, 4;
	add.s64 	%rd38, %rd109, %rd110;
	add.s32 	%r468, %r466, 1;
	mul.wide.u32 	%rd111, %r468, 4;
	add.s64 	%rd39, %rd109, %rd111;
	add.s32 	%r469, %r466, 33;
	mul.wide.u32 	%rd112, %r469, 4;
	add.s64 	%rd40, %rd109, %rd112;
	or.b32  	%r470, %r451, 2;
	mul.lo.s32 	%r471, %r470, 1057;
	add.s32 	%r472, %r435, %r453;
	add.s32 	%r473, %r472, %r460;
	add.s32 	%r474, %r473, %r471;
	add.s32 	%r475, %r474, %r455;
	add.s32 	%r476, %r475, %r458;
	add.s32 	%r477, %r476, %r450;
	mul.wide.s32 	%rd113, %r477, 4;
	add.s64 	%rd41, %rd109, %rd113;
	add.s32 	%r478, %r473, 32;
	add.s32 	%r479, %r478, %r471;
	add.s32 	%r480, %r479, %r455;
	add.s32 	%r481, %r480, %r458;
	add.s32 	%r482, %r481, %r450;
	mul.wide.s32 	%rd114, %r482, 4;
	add.s64 	%rd42, %rd109, %rd114;
	add.s32 	%r483, %r473, 1;
	add.s32 	%r484, %r483, %r471;
	add.s32 	%r485, %r484, %r455;
	add.s32 	%r486, %r485, %r458;
	add.s32 	%r487, %r486, %r450;
	mul.wide.s32 	%rd115, %r487, 4;
	add.s64 	%rd43, %rd109, %rd115;
	add.s32 	%r488, %r473, 33;
	add.s32 	%r489, %r488, %r471;
	add.s32 	%r490, %r489, %r455;
	add.s32 	%r491, %r490, %r458;
	add.s32 	%r492, %r491, %r450;
	mul.wide.s32 	%rd116, %r492, 4;
	add.s64 	%rd44, %rd109, %rd116;
	or.b32  	%r493, %r451, 4;
	mul.lo.s32 	%r494, %r493, 1057;
	add.s32 	%r495, %r473, %r494;
	add.s32 	%r496, %r495, %r455;
	add.s32 	%r497, %r496, %r458;
	add.s32 	%r498, %r497, %r450;
	mul.wide.s32 	%rd117, %r498, 4;
	add.s64 	%rd45, %rd109, %rd117;
	add.s32 	%r499, %r478, %r494;
	add.s32 	%r500, %r499, %r455;
	add.s32 	%r501, %r500, %r458;
	add.s32 	%r502, %r501, %r450;
	mul.wide.s32 	%rd118, %r502, 4;
	add.s64 	%rd46, %rd109, %rd118;
	add.s32 	%r503, %r483, %r494;
	add.s32 	%r504, %r503, %r455;
	add.s32 	%r505, %r504, %r458;
	add.s32 	%r506, %r505, %r450;
	mul.wide.s32 	%rd119, %r506, 4;
	add.s64 	%rd47, %rd109, %rd119;
	add.s32 	%r507, %r488, %r494;
	add.s32 	%r508, %r507, %r455;
	add.s32 	%r509, %r508, %r458;
	add.s32 	%r510, %r509, %r450;
	mul.wide.s32 	%rd120, %r510, 4;
	add.s64 	%rd48, %rd109, %rd120;
	or.b32  	%r511, %r451, 6;
	mul.lo.s32 	%r512, %r511, 1057;
	add.s32 	%r513, %r473, %r512;
	add.s32 	%r514, %r513, %r455;
	add.s32 	%r515, %r514, %r458;
	add.s32 	%r516, %r515, %r450;
	mul.wide.s32 	%rd121, %r516, 4;
	add.s64 	%rd49, %rd109, %rd121;
	add.s32 	%r517, %r478, %r512;
	add.s32 	%r518, %r517, %r455;
	add.s32 	%r519, %r518, %r458;
	add.s32 	%r520, %r519, %r450;
	mul.wide.s32 	%rd122, %r520, 4;
	add.s64 	%rd50, %rd109, %rd122;
	add.s32 	%r521, %r483, %r512;
	add.s32 	%r522, %r521, %r455;
	add.s32 	%r523, %r522, %r458;
	add.s32 	%r524, %r523, %r450;
	mul.wide.s32 	%rd123, %r524, 4;
	add.s64 	%rd51, %rd109, %rd123;
	add.s32 	%r525, %r488, %r512;
	add.s32 	%r526, %r525, %r455;
	add.s32 	%r527, %r526, %r458;
	add.s32 	%r528, %r527, %r450;
	mul.wide.s32 	%rd124, %r528, 4;
	add.s64 	%rd52, %rd109, %rd124;
	mul.lo.s32 	%r529, %r18, 65;
	mul.lo.s32 	%r530, %r19, 130;
	mul.lo.s32 	%r531, %r20, 260;
	and.b32  	%r532, %r2, 32;
	mul.lo.s32 	%r533, %r21, 520;
	add.s32 	%r534, %r530, %r456;
	add.s32 	%r535, %r534, %r436;
	add.s32 	%r536, %r535, %r532;
	add.s32 	%r537, %r536, %r533;
	add.s32 	%r538, %r537, %r529;
	add.s32 	%r539, %r538, %r531;
	or.b32  	%r540, %r456, 8;
	add.s32 	%r541, %r530, %r540;
	add.s32 	%r542, %r541, %r436;
	add.s32 	%r543, %r542, %r532;
	add.s32 	%r544, %r543, %r533;
	add.s32 	%r545, %r544, %r529;
	add.s32 	%r546, %r545, %r531;
	or.b32  	%r547, %r15, %r12;
	or.b32  	%r548, %r547, %r13;
	or.b32  	%r549, %r548, %r10;
	or.b32  	%r550, %r549, %r11;
	bfe.u32 	%r551, %r550, 1, 4;
	mul.lo.s32 	%r552, %r551, 65;
	or.b32  	%r553, %r436, %r456;
	or.b32  	%r554, %r553, %r532;
	add.s32 	%r555, %r554, %r552;
	or.b32  	%r556, %r436, %r540;
	or.b32  	%r557, %r556, %r532;
	add.s32 	%r558, %r557, %r552;
	shl.b32 	%r559, %r1, 1;
	and.b32  	%r560, %r559, 14;
	or.b32  	%r561, %r560, %r21;
	mul.lo.s32 	%r562, %r561, 65;
	add.s32 	%r563, %r435, %r452;
	add.s32 	%r564, %r563, %r450;
	add.s32 	%r565, %r564, %r562;
	mul.wide.u32 	%rd125, %r565, 4;
	add.s64 	%rd53, %rd109, %rd125;
	cvt.u64.u32 	%rd126, %r562;
	cvt.u64.u32 	%rd127, %r450;
	cvt.u64.u32 	%rd128, %r435;
	cvt.u64.u32 	%rd129, %r452;
	add.s64 	%rd130, %rd129, %rd128;
	add.s64 	%rd131, %rd130, %rd127;
	add.s64 	%rd132, %rd131, %rd126;
	shl.b64 	%rd133, %rd132, 2;
	add.s64 	%rd54, %rd109, %rd133;
	add.s32 	%r566, %r471, %r435;
	add.s32 	%r567, %r566, %r450;
	add.s32 	%r568, %r567, %r562;
	mul.wide.u32 	%rd134, %r568, 4;
	add.s64 	%rd55, %rd109, %rd134;
	cvt.u64.u32 	%rd135, %r471;
	add.s64 	%rd136, %rd128, %rd135;
	add.s64 	%rd137, %rd136, %rd127;
	add.s64 	%rd138, %rd137, %rd126;
	shl.b64 	%rd139, %rd138, 2;
	add.s64 	%rd56, %rd109, %rd139;
	add.s32 	%r569, %r494, %r435;
	add.s32 	%r570, %r569, %r450;
	add.s32 	%r571, %r570, %r562;
	mul.wide.u32 	%rd140, %r571, 4;
	add.s64 	%rd57, %rd109, %rd140;
	cvt.u64.u32 	%rd141, %r494;
	add.s64 	%rd142, %rd128, %rd141;
	add.s64 	%rd143, %rd142, %rd127;
	add.s64 	%rd144, %rd143, %rd126;
	shl.b64 	%rd145, %rd144, 2;
	add.s64 	%rd58, %rd109, %rd145;
	add.s32 	%r572, %r512, %r435;
	add.s32 	%r573, %r572, %r450;
	add.s32 	%r574, %r573, %r562;
	mul.wide.u32 	%rd146, %r574, 4;
	add.s64 	%rd59, %rd109, %rd146;
	cvt.u64.u32 	%rd147, %r512;
	add.s64 	%rd148, %rd128, %rd147;
	add.s64 	%rd149, %rd148, %rd127;
	add.s64 	%rd150, %rd149, %rd126;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd60, %rd109, %rd151;
	and.b32  	%r141, %r1, 8;
	shl.b32 	%r575, %r7, 17;
	add.s32 	%r576, %r575, -393216;
	and.b32  	%r577, %r439, 28;
	or.b32  	%r578, %r577, %r12;
	or.b32  	%r579, %r578, %r50;
	shl.b32 	%r580, %r579, 5;
	shl.b32 	%r581, %r1, 14;
	and.b32  	%r142, %r581, 131072;
	or.b32  	%r143, %r580, %r445;
	cvt.s64.s32 	%rd61, %r576;
	mul.wide.u32 	%rd152, %r558, 4;
	add.s64 	%rd62, %rd109, %rd152;
	mul.wide.u32 	%rd153, %r555, 4;
	add.s64 	%rd63, %rd109, %rd153;
	mul.wide.u32 	%rd154, %r546, 4;
	add.s64 	%rd64, %rd109, %rd154;
	mul.wide.u32 	%rd155, %r539, 4;
	add.s64 	%rd65, %rd109, %rd155;
	setp.eq.s32 	%p231, %r140, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	setp.ne.s32 	%p245, %r141, 0;
	mov.u32 	%r95, %r2614;
	mov.u32 	%r2641, %r2614;
	mov.u32 	%r2640, %r2614;
	mov.u32 	%r2631, %r2614;
	mov.u32 	%r2632, %r2614;
	mov.u32 	%r2633, %r2614;
	mov.u32 	%r2634, %r2614;
	bra.uni 	LBB0_126;
LBB0_158:                               // %L21822
                                        //   in Loop: Header=BB0_126 Depth=1
	selp.b32 	%r2599, %r151, %r2549, %p231;
	selp.b32 	%r2600, %r2545, %r151, %p231;
	selp.b32 	%r2601, %r150, %r2541, %p231;
	selp.b32 	%r2602, %r2537, %r150, %p231;
	or.b32  	%r2646, %r2615, %r142;
	or.b32  	%r2604, %r2646, %r143;
	or.b32  	%r2605, %r2604, 262144;
	cvt.s64.s32 	%rd164, %r2605;
	add.s64 	%rd165, %rd164, %rd61;
	shr.u64 	%rd166, %rd165, 35;
	add.s64 	%rd167, %rd165, %rd166;
	shr.s64 	%rd168, %rd167, 29;
	setp.lt.s64 	%p248, %rd165, 0;
	and.b64  	%rd169, %rd167, -536870912;
	setp.ne.s64 	%p249, %rd169, %rd165;
	and.pred  	%p250, %p248, %p249;
	selp.u64 	%rd170, 1, 0, %p250;
	sub.s64 	%rd171, %rd170, %rd168;
	shl.b64 	%rd172, %rd171, 29;
	add.s64 	%rd173, %rd172, %rd165;
	shl.b64 	%rd174, %rd173, 2;
	add.s64 	%rd175, %rd3, %rd174;
	st.global.v4.u32 	[%rd175], {%r2602, %r2600, %r2601, %r2599};
LBB0_159:                               // %pass8788
                                        //   in Loop: Header=BB0_126 Depth=1
	add.s32 	%r2607, %r2646, 524288;
	or.b32  	%r2608, %r2607, %r143;
	cvt.s64.s32 	%rd176, %r2608;
	add.s64 	%rd177, %rd176, %rd61;
	shr.u64 	%rd178, %rd177, 35;
	add.s64 	%rd179, %rd177, %rd178;
	shr.s64 	%rd180, %rd179, 29;
	setp.lt.s64 	%p251, %rd177, 0;
	and.b64  	%rd181, %rd179, -536870912;
	setp.ne.s64 	%p252, %rd181, %rd177;
	and.pred  	%p253, %p251, %p252;
	selp.u64 	%rd182, 1, 0, %p253;
	sub.s64 	%rd183, %rd182, %rd180;
	shl.b64 	%rd184, %rd183, 29;
	add.s64 	%rd185, %rd184, %rd177;
	shl.b64 	%rd186, %rd185, 2;
	add.s64 	%rd187, %rd3, %rd186;
	st.global.v4.u32 	[%rd187], {%r152, %r154, %r153, %r155};
	add.s32 	%r2609, %r2646, 786432;
	or.b32  	%r2610, %r2609, %r143;
	cvt.s64.s32 	%rd188, %r2610;
	add.s64 	%rd189, %rd188, %rd61;
	shr.u64 	%rd190, %rd189, 35;
	add.s64 	%rd191, %rd189, %rd190;
	shr.s64 	%rd192, %rd191, 29;
	setp.lt.s64 	%p254, %rd189, 0;
	and.b64  	%rd193, %rd191, -536870912;
	setp.ne.s64 	%p255, %rd193, %rd189;
	and.pred  	%p256, %p254, %p255;
	selp.u64 	%rd194, 1, 0, %p256;
	sub.s64 	%rd195, %rd194, %rd192;
	shl.b64 	%rd196, %rd195, 29;
	add.s64 	%rd197, %rd196, %rd189;
	shl.b64 	%rd198, %rd197, 2;
	add.s64 	%rd199, %rd3, %rd198;
	st.global.v4.u32 	[%rd199], {%r156, %r158, %r157, %r159};
	setp.ne.s32 	%p257, %r95, 130816;
	add.s32 	%r95, %r95, 256;
	add.s32 	%r2611, %r95, %r5;
	setp.gt.s32 	%p258, %r6, %r2611;
	and.pred  	%p259, %p257, %p258;
	@%p259 bra 	LBB0_126;
	bra.uni 	LBB0_160;
LBB0_126:                               // %L1453
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_127 Depth 2
	or.b32  	%r647, %r135, %r95;
	shl.b32 	%r648, %r647, 12;
	add.s32 	%r649, %r136, %r648;
	shr.s32 	%r650, %r649, 31;
	shr.u32 	%r651, %r650, 3;
	add.s32 	%r652, %r649, %r651;
	shr.s32 	%r653, %r652, 29;
	setp.lt.s32 	%p232, %r649, 0;
	and.b32  	%r654, %r652, -536870912;
	setp.ne.s32 	%p233, %r654, %r649;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r655, 1, 0, %p234;
	sub.s32 	%r656, %r655, %r653;
	shl.b32 	%r657, %r656, 29;
	add.s32 	%r658, %r657, %r649;
	mul.wide.s32 	%rd156, %r658, 4;
	add.s64 	%rd157, %rd2, %rd156;
	ld.global.v4.u32 	{%r659, %r660, %r661, %r662}, [%rd157];
	add.s32 	%r663, %r137, %r648;
	shr.s32 	%r664, %r663, 31;
	shr.u32 	%r665, %r664, 3;
	add.s32 	%r666, %r663, %r665;
	shr.s32 	%r667, %r666, 29;
	setp.lt.s32 	%p235, %r663, 0;
	and.b32  	%r668, %r666, -536870912;
	setp.ne.s32 	%p236, %r668, %r663;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r669, 1, 0, %p237;
	sub.s32 	%r670, %r669, %r667;
	shl.b32 	%r671, %r670, 29;
	add.s32 	%r672, %r671, %r663;
	mul.wide.s32 	%rd158, %r672, 4;
	add.s64 	%rd159, %rd2, %rd158;
	ld.global.v4.u32 	{%r673, %r674, %r675, %r676}, [%rd159];
	add.s32 	%r677, %r138, %r648;
	shr.s32 	%r678, %r677, 31;
	shr.u32 	%r679, %r678, 3;
	add.s32 	%r680, %r677, %r679;
	shr.s32 	%r681, %r680, 29;
	setp.lt.s32 	%p238, %r677, 0;
	and.b32  	%r682, %r680, -536870912;
	setp.ne.s32 	%p239, %r682, %r677;
	and.pred  	%p240, %p238, %p239;
	selp.u32 	%r683, 1, 0, %p240;
	sub.s32 	%r684, %r683, %r681;
	shl.b32 	%r685, %r684, 29;
	add.s32 	%r686, %r685, %r677;
	mul.wide.s32 	%rd160, %r686, 4;
	add.s64 	%rd161, %rd2, %rd160;
	ld.global.v4.u32 	{%r687, %r688, %r689, %r690}, [%rd161];
	add.s32 	%r691, %r139, %r648;
	shr.s32 	%r692, %r691, 31;
	shr.u32 	%r693, %r692, 3;
	add.s32 	%r694, %r691, %r693;
	shr.s32 	%r695, %r694, 29;
	setp.lt.s32 	%p241, %r691, 0;
	and.b32  	%r696, %r694, -536870912;
	setp.ne.s32 	%p242, %r696, %r691;
	and.pred  	%p243, %p241, %p242;
	selp.u32 	%r697, 1, 0, %p243;
	sub.s32 	%r698, %r697, %r695;
	shl.b32 	%r699, %r698, 29;
	add.s32 	%r700, %r699, %r691;
	mul.wide.s32 	%rd162, %r700, 4;
	add.s64 	%rd163, %rd2, %rd162;
	ld.global.v4.u32 	{%r701, %r702, %r703, %r704}, [%rd163];
	selp.b32 	%r705, %r661, %r659, %p231;
	shfl.sync.bfly.b32	%r706, %r705, 8, 31, -1;
	selp.b32 	%r583, %r659, %r706, %p231;
	selp.b32 	%r584, %r706, %r661, %p231;
	selp.b32 	%r707, %r662, %r660, %p231;
	shfl.sync.bfly.b32	%r708, %r707, 8, 31, -1;
	selp.b32 	%r591, %r660, %r708, %p231;
	selp.b32 	%r592, %r708, %r662, %p231;
	selp.b32 	%r709, %r675, %r673, %p231;
	shfl.sync.bfly.b32	%r710, %r709, 8, 31, -1;
	selp.b32 	%r599, %r673, %r710, %p231;
	selp.b32 	%r600, %r710, %r675, %p231;
	selp.b32 	%r711, %r676, %r674, %p231;
	shfl.sync.bfly.b32	%r712, %r711, 8, 31, -1;
	selp.b32 	%r607, %r674, %r712, %p231;
	selp.b32 	%r608, %r712, %r676, %p231;
	selp.b32 	%r713, %r689, %r687, %p231;
	shfl.sync.bfly.b32	%r714, %r713, 8, 31, -1;
	selp.b32 	%r615, %r687, %r714, %p231;
	selp.b32 	%r616, %r714, %r689, %p231;
	selp.b32 	%r715, %r690, %r688, %p231;
	shfl.sync.bfly.b32	%r716, %r715, 8, 31, -1;
	selp.b32 	%r623, %r688, %r716, %p231;
	selp.b32 	%r624, %r716, %r690, %p231;
	selp.b32 	%r717, %r703, %r701, %p231;
	shfl.sync.bfly.b32	%r718, %r717, 8, 31, -1;
	selp.b32 	%r631, %r701, %r718, %p231;
	selp.b32 	%r632, %r718, %r703, %p231;
	selp.b32 	%r719, %r704, %r702, %p231;
	shfl.sync.bfly.b32	%r720, %r719, 8, 31, -1;
	selp.b32 	%r639, %r702, %r720, %p231;
	selp.b32 	%r640, %r720, %r704, %p231;
	mov.u32 	%r641, 21520;
	// begin inline asm
	prmt.b32 %r582, %r583, %r584, %r641;
	// end inline asm
	mov.u32 	%r645, 30258;
	// begin inline asm
	prmt.b32 %r586, %r583, %r584, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r590, %r591, %r592, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r594, %r591, %r592, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r598, %r599, %r600, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r602, %r599, %r600, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r606, %r607, %r608, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r610, %r607, %r608, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r614, %r615, %r616, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r618, %r615, %r616, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r622, %r623, %r624, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r626, %r623, %r624, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r630, %r631, %r632, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r634, %r631, %r632, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r638, %r639, %r640, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r642, %r639, %r640, %r645;
	// end inline asm
	st.shared.u32 	[%rd37], %r582;
	st.shared.u32 	[%rd38], %r586;
	st.shared.u32 	[%rd39], %r590;
	st.shared.u32 	[%rd40], %r594;
	st.shared.u32 	[%rd41], %r598;
	st.shared.u32 	[%rd42], %r602;
	st.shared.u32 	[%rd43], %r606;
	st.shared.u32 	[%rd44], %r610;
	st.shared.u32 	[%rd45], %r614;
	st.shared.u32 	[%rd46], %r618;
	st.shared.u32 	[%rd47], %r622;
	st.shared.u32 	[%rd48], %r626;
	st.shared.u32 	[%rd49], %r630;
	st.shared.u32 	[%rd50], %r634;
	st.shared.u32 	[%rd51], %r638;
	st.shared.u32 	[%rd52], %r642;
	bar.sync 	0;
	mov.u32 	%r2635, 256;
	mov.u64 	%rd212, %rd65;
	mov.u64 	%rd213, %rd64;
	mov.u64 	%rd214, %rd63;
	mov.u64 	%rd215, %rd62;
	mov.u32 	%r2636, %r2634;
	mov.u32 	%r2637, %r2633;
	mov.u32 	%r2638, %r2632;
	mov.u32 	%r2639, %r2631;
LBB0_127:                               // %L12129
                                        //   Parent Loop BB0_126 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2633, %r2641;
	mov.u32 	%r2634, %r2640;
	ld.shared.u32 	%r2632, [%rd212];
	ld.shared.u32 	%r2631, [%rd213];
	// begin inline asm
	mov.b32 %r726, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r737, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r725, %r2632, -2004318072;
	mov.u32 	%r724, 983055;
	// begin inline asm
	lop3.b32 %r723, %r724, %r725, %r726, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r727, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r728, %r726, %r727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r731, %r723, %r728;
	// end inline asm
	mov.u32 	%r735, 15728880;
	// begin inline asm
	lop3.b32 %r734, %r735, %r725, %r737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r738, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r739, %r737, %r738;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r742, %r734, %r739;
	// end inline asm
	shr.u32 	%r747, %r725, 8;
	// begin inline asm
	lop3.b32 %r745, %r724, %r747, %r726, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r749, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r750, %r726, %r749;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r753, %r745, %r750;
	// end inline asm
	// begin inline asm
	lop3.b32 %r756, %r735, %r747, %r737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r760, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r761, %r737, %r760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r764, %r756, %r761;
	// end inline asm
	// begin inline asm
	mov.b32 %r772, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r783, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r771, %r2631, -2004318072;
	// begin inline asm
	lop3.b32 %r769, %r724, %r771, %r772, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r773, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r774, %r772, %r773;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r777, %r769, %r774;
	// end inline asm
	// begin inline asm
	lop3.b32 %r780, %r735, %r771, %r783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r784, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r785, %r783, %r784;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r788, %r780, %r785;
	// end inline asm
	shr.u32 	%r793, %r771, 8;
	// begin inline asm
	lop3.b32 %r791, %r724, %r793, %r772, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r795, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r796, %r772, %r795;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r799, %r791, %r796;
	// end inline asm
	// begin inline asm
	lop3.b32 %r802, %r735, %r793, %r783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r806, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r807, %r783, %r806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r810, %r802, %r807;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r813, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r815, %r813, %r731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r818, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r820, %r818, %r742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r823, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r825, %r823, %r753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r828, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r830, %r828, %r764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r833, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r835, %r833, %r777;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r838, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r840, %r838, %r788;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r843, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r845, %r843, %r799;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r848, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r850, %r848, %r810;
	// end inline asm
	// begin inline asm
	mov.b32 %r858, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r869, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r857, %r2636, -2004318072;
	// begin inline asm
	lop3.b32 %r855, %r724, %r857, %r858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r859, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r860, %r858, %r859;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r863, %r855, %r860;
	// end inline asm
	// begin inline asm
	lop3.b32 %r866, %r735, %r857, %r869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r870, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r871, %r869, %r870;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r874, %r866, %r871;
	// end inline asm
	shr.u32 	%r879, %r857, 8;
	// begin inline asm
	lop3.b32 %r877, %r724, %r879, %r858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r882, %r858, %r881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r885, %r877, %r882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r888, %r735, %r879, %r869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r892, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r893, %r869, %r892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r896, %r888, %r893;
	// end inline asm
	// begin inline asm
	mov.b32 %r904, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r915, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r903, %r2637, -2004318072;
	// begin inline asm
	lop3.b32 %r901, %r724, %r903, %r904, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r905, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r906, %r904, %r905;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r909, %r901, %r906;
	// end inline asm
	// begin inline asm
	lop3.b32 %r912, %r735, %r903, %r915, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r916, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r917, %r915, %r916;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r920, %r912, %r917;
	// end inline asm
	shr.u32 	%r925, %r903, 8;
	// begin inline asm
	lop3.b32 %r923, %r724, %r925, %r904, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r927, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r928, %r904, %r927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r931, %r923, %r928;
	// end inline asm
	// begin inline asm
	lop3.b32 %r934, %r735, %r925, %r915, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r938, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r939, %r915, %r938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r942, %r934, %r939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r945, %r196, %r863, %r815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r949, %r196, %r874, %r820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r953, %r196, %r885, %r825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r957, %r196, %r896, %r830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r961, %r196, %r909, %r835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r965, %r196, %r920, %r840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r969, %r196, %r931, %r845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r973, %r196, %r942, %r850;
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r993, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r981, %r2638, -2004318072;
	// begin inline asm
	lop3.b32 %r979, %r724, %r981, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r990, %r735, %r981, %r993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r995, %r993, %r994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r998, %r990, %r995;
	// end inline asm
	shr.u32 	%r1003, %r981, 8;
	// begin inline asm
	lop3.b32 %r1001, %r724, %r1003, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1006, %r982, %r1005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1009, %r1001, %r1006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1012, %r735, %r1003, %r993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r993, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1039, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1027, %r2639, -2004318072;
	// begin inline asm
	lop3.b32 %r1025, %r724, %r1027, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1030, %r1028, %r1029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1033, %r1025, %r1030;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1036, %r735, %r1027, %r1039, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1040, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1041, %r1039, %r1040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1044, %r1036, %r1041;
	// end inline asm
	shr.u32 	%r1049, %r1027, 8;
	// begin inline asm
	lop3.b32 %r1047, %r724, %r1049, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1052, %r1028, %r1051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1055, %r1047, %r1052;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1058, %r735, %r1049, %r1039, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1062, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1063, %r1039, %r1062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1066, %r1058, %r1063;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1069, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1071, %r1069, %r987, %r945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1075, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1077, %r1075, %r998, %r949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1081, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1083, %r1081, %r1009, %r953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1087, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1089, %r1087, %r1020, %r957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1093, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1095, %r1093, %r1033, %r961;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1099, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r1099, %r1044, %r965;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1105, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r1105, %r1055, %r969;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1111, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r1111, %r1066, %r973;
	// end inline asm
	// begin inline asm
	mov.b32 %r1122, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1133, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1121, %r2634, -2004318072;
	// begin inline asm
	lop3.b32 %r1119, %r724, %r1121, %r1122, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1123, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1124, %r1122, %r1123;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1127, %r1119, %r1124;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1130, %r735, %r1121, %r1133, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1134, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1135, %r1133, %r1134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1138, %r1130, %r1135;
	// end inline asm
	shr.u32 	%r1143, %r1121, 8;
	// begin inline asm
	lop3.b32 %r1141, %r724, %r1143, %r1122, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1145, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1146, %r1122, %r1145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1149, %r1141, %r1146;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1152, %r735, %r1143, %r1133, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1156, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1157, %r1133, %r1156;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1160, %r1152, %r1157;
	// end inline asm
	// begin inline asm
	mov.b32 %r1168, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1179, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1167, %r2633, -2004318072;
	// begin inline asm
	lop3.b32 %r1165, %r724, %r1167, %r1168, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1169, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1170, %r1168, %r1169;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1173, %r1165, %r1170;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1176, %r735, %r1167, %r1179, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1180, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1181, %r1179, %r1180;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1184, %r1176, %r1181;
	// end inline asm
	shr.u32 	%r1189, %r1167, 8;
	// begin inline asm
	lop3.b32 %r1187, %r724, %r1189, %r1168, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1191, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1192, %r1168, %r1191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1195, %r1187, %r1192;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1198, %r735, %r1189, %r1179, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1202, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1203, %r1179, %r1202;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1206, %r1198, %r1203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r232, %r1127, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r232, %r1138, %r1077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r232, %r1149, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1254, %r232, %r1160, %r1089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1266, %r232, %r1173, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1263, %r232, %r1184, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1275, %r232, %r1195, %r1107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1272, %r232, %r1206, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1241, %r49;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1243, %r1241, %r1245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1246, %r48, %r1248, %r1243;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1250, %r49;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r1250, %r1254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r48, %r1257, %r1252;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1259, %r49;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1261, %r1259, %r1263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1264, %r48, %r1266, %r1261;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1268, %r49;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1270, %r1268, %r1272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1273, %r48, %r1275, %r1270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1277, %r49, %r1248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1280, %r48, %r1245, %r1277;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1284, %r49, %r1257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1287, %r48, %r1254, %r1284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1291, %r49, %r1266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1294, %r48, %r1263, %r1291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1298, %r49, %r1275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1301, %r48, %r1272, %r1298;
	// end inline asm
	mov.u32 	%r1313, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1352, %r1349}, {%r69, %r71, %r70, %r72}, {%r1246, %r1280}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1361, %r1358}, {%r69, %r71, %r70, %r72}, {%r1255, %r1287}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1370, %r1367}, {%r69, %r71, %r70, %r72}, {%r1264, %r1294}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1379, %r1376}, {%r69, %r71, %r70, %r72}, {%r1273, %r1301}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1345, %r92;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1347, %r1345, %r1349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1350, %r91, %r1352, %r1347;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1354, %r92;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1356, %r1354, %r1358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r91, %r1361, %r1356;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r92;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1365, %r1363, %r1367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r91, %r1370, %r1365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1372, %r92;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1374, %r1372, %r1376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r91, %r1379, %r1374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1381, %r92, %r1352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1384, %r91, %r1349, %r1381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r92, %r1361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r91, %r1358, %r1388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1395, %r92, %r1370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1398, %r91, %r1367, %r1395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1402, %r92, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1405, %r91, %r1376, %r1402;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1409, %r1410}, {%r413, %r419, %r416, %r422}, {%r1350, %r1384}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1419, %r1420}, {%r413, %r419, %r416, %r422}, {%r1359, %r1391}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1429, %r1430}, {%r413, %r419, %r416, %r422}, {%r1368, %r1398}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1439, %r1440}, {%r413, %r419, %r416, %r422}, {%r1377, %r1405}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1449, %r16, %r1409;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1452, %r16, %r1410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1455, %r16, %r1419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1458, %r16, %r1420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1461, %r16, %r1429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1464, %r16, %r1430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1467, %r16, %r1439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1470, %r16, %r1440;
	// end inline asm
	// begin inline asm
	mov.b32 %r1473, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1474, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1475, %r1449, %r1473;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1478, %r1475, %r1474;
	// end inline asm
	// begin inline asm
	mov.b32 %r1481, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1482, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1483, %r1452, %r1481;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1486, %r1483, %r1482;
	// end inline asm
	// begin inline asm
	mov.b32 %r1489, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1490, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1491, %r1455, %r1489;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1494, %r1491, %r1490;
	// end inline asm
	// begin inline asm
	mov.b32 %r1497, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1498, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1499, %r1458, %r1497;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1502, %r1499, %r1498;
	// end inline asm
	// begin inline asm
	mov.b32 %r1505, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1506, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1507, %r1461, %r1505;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1510, %r1507, %r1506;
	// end inline asm
	// begin inline asm
	mov.b32 %r1513, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1514, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1515, %r1464, %r1513;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1518, %r1515, %r1514;
	// end inline asm
	// begin inline asm
	mov.b32 %r1521, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1523, %r1467, %r1521;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1526, %r1523, %r1522;
	// end inline asm
	// begin inline asm
	mov.b32 %r1529, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1530, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1531, %r1470, %r1529;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1534, %r1531, %r1530;
	// end inline asm
	// begin inline asm
	mov.b32 %r1540, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1538, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1539, %r1540, %r1538;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1542, %r1478, %r1539;
	// end inline asm
	// begin inline asm
	mov.b32 %r1545, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1546, %r1540, %r1545;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1549, %r1486, %r1546;
	// end inline asm
	// begin inline asm
	mov.b32 %r1552, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1553, %r1540, %r1552;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1556, %r1494, %r1553;
	// end inline asm
	// begin inline asm
	mov.b32 %r1559, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1560, %r1540, %r1559;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1563, %r1502, %r1560;
	// end inline asm
	mov.u32 	%r1569, 25152;
	// begin inline asm
	prmt.b32 %r1566, %r1542, %r1556, %r1569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1570, %r1549, %r1563, %r1569;
	// end inline asm
	shl.b32 	%r1577, %r1570, 4;
	mov.u32 	%r1575, 252645135;
	// begin inline asm
	lop3.b32 %r1574, %r1575, %r1566, %r1577, 202;
	// end inline asm
	xor.b32  	%r2517, %r1574, -2004318072;
	// begin inline asm
	mov.b32 %r1581, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1579, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1580, %r1581, %r1579;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1583, %r1510, %r1580;
	// end inline asm
	// begin inline asm
	mov.b32 %r1586, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1587, %r1581, %r1586;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1590, %r1518, %r1587;
	// end inline asm
	// begin inline asm
	mov.b32 %r1593, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1594, %r1581, %r1593;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1597, %r1526, %r1594;
	// end inline asm
	// begin inline asm
	mov.b32 %r1600, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1601, %r1581, %r1600;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1604, %r1534, %r1601;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1607, %r1583, %r1597, %r1569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1611, %r1590, %r1604, %r1569;
	// end inline asm
	shl.b32 	%r1618, %r1611, 4;
	// begin inline asm
	lop3.b32 %r1615, %r1575, %r1607, %r1618, 202;
	// end inline asm
	xor.b32  	%r2518, %r1615, -2004318072;
	st.shared.u32 	[%rd214], %r2517;
	st.shared.u32 	[%rd215], %r2518;
	ld.shared.u32 	%r2640, [%rd212];
	ld.shared.u32 	%r2641, [%rd213];
	// begin inline asm
	mov.b32 %r1624, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1635, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1623, %r2640, -2004318072;
	// begin inline asm
	lop3.b32 %r1621, %r724, %r1623, %r1624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1625, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1626, %r1624, %r1625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1629, %r1621, %r1626;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1632, %r735, %r1623, %r1635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1636, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1637, %r1635, %r1636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1640, %r1632, %r1637;
	// end inline asm
	shr.u32 	%r1645, %r1623, 8;
	// begin inline asm
	lop3.b32 %r1643, %r724, %r1645, %r1624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1647, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1648, %r1624, %r1647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1651, %r1643, %r1648;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1654, %r735, %r1645, %r1635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1658, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1659, %r1635, %r1658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1662, %r1654, %r1659;
	// end inline asm
	// begin inline asm
	mov.b32 %r1670, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1681, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1669, %r2641, -2004318072;
	// begin inline asm
	lop3.b32 %r1667, %r724, %r1669, %r1670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1671, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1672, %r1670, %r1671;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1675, %r1667, %r1672;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1678, %r735, %r1669, %r1681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1682, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1683, %r1681, %r1682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1686, %r1678, %r1683;
	// end inline asm
	shr.u32 	%r1691, %r1669, 8;
	// begin inline asm
	lop3.b32 %r1689, %r724, %r1691, %r1670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1693, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1694, %r1670, %r1693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1697, %r1689, %r1694;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1700, %r735, %r1691, %r1681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1704, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1705, %r1681, %r1704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1708, %r1700, %r1705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1711, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1713, %r1711, %r1629;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1716, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1716, %r1640;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1721, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1723, %r1721, %r1651;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1726, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1728, %r1726, %r1662;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1675;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1736, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r1736, %r1686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1741, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1743, %r1741, %r1697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1746, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1748, %r1746, %r1708;
	// end inline asm
	// begin inline asm
	mov.b32 %r1756, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1767, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1753, %r724, %r981, %r1756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1757, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1758, %r1756, %r1757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1761, %r1753, %r1758;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1764, %r735, %r981, %r1767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1768, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1769, %r1767, %r1768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1772, %r1764, %r1769;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1775, %r724, %r1003, %r1756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1779, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1780, %r1756, %r1779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1783, %r1775, %r1780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1786, %r735, %r1003, %r1767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1790, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1791, %r1767, %r1790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1794, %r1786, %r1791;
	// end inline asm
	// begin inline asm
	mov.b32 %r1802, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1813, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1799, %r724, %r1027, %r1802, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1803, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1804, %r1802, %r1803;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1807, %r1799, %r1804;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1810, %r735, %r1027, %r1813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1814, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1815, %r1813, %r1814;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1818, %r1810, %r1815;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1821, %r724, %r1049, %r1802, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1825, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1826, %r1802, %r1825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1829, %r1821, %r1826;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1832, %r735, %r1049, %r1813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1836, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1837, %r1813, %r1836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1840, %r1832, %r1837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r196, %r1761, %r1713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r196, %r1772, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r196, %r1783, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r196, %r1794, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r196, %r1807, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r196, %r1818, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r196, %r1829, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r196, %r1840, %r1748;
	// end inline asm
	// begin inline asm
	mov.b32 %r1880, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1891, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1877, %r724, %r1121, %r1880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1881, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1882, %r1880, %r1881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1885, %r1877, %r1882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1888, %r735, %r1121, %r1891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1892, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1893, %r1891, %r1892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1896, %r1888, %r1893;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1899, %r724, %r1143, %r1880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1903, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1904, %r1880, %r1903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1907, %r1899, %r1904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1910, %r735, %r1143, %r1891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1914, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1915, %r1891, %r1914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1918, %r1910, %r1915;
	// end inline asm
	// begin inline asm
	mov.b32 %r1926, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1937, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1923, %r724, %r1167, %r1926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1927, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1928, %r1926, %r1927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1931, %r1923, %r1928;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1934, %r735, %r1167, %r1937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1938, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1939, %r1937, %r1938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1942, %r1934, %r1939;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1945, %r724, %r1189, %r1926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1949, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1950, %r1926, %r1949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1953, %r1945, %r1950;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1956, %r735, %r1189, %r1937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1960, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1961, %r1937, %r1960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1964, %r1956, %r1961;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1967, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r1967, %r1885, %r1843;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1973, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r1973, %r1896, %r1847;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1979, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1979, %r1907, %r1851;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1985, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r1985, %r1918, %r1855;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1991, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r1991, %r1931, %r1859;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1997, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r1997, %r1942, %r1863;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2003, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r2003, %r1953, %r1867;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2009, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r2009, %r1964, %r1871;
	// end inline asm
	// begin inline asm
	mov.b32 %r2020, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2031, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2017, %r724, %r725, %r2020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2021, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2022, %r2020, %r2021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2025, %r2017, %r2022;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2028, %r735, %r725, %r2031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2032, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2033, %r2031, %r2032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2036, %r2028, %r2033;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2039, %r724, %r747, %r2020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2043, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2044, %r2020, %r2043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2047, %r2039, %r2044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2050, %r735, %r747, %r2031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2054, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2055, %r2031, %r2054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2058, %r2050, %r2055;
	// end inline asm
	// begin inline asm
	mov.b32 %r2066, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2077, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2063, %r724, %r771, %r2066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2067, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2068, %r2066, %r2067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2071, %r2063, %r2068;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2074, %r735, %r771, %r2077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2078, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2079, %r2077, %r2078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2082, %r2074, %r2079;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2085, %r724, %r793, %r2066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2089, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2090, %r2066, %r2089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2093, %r2085, %r2090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2096, %r735, %r793, %r2077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2100, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2101, %r2077, %r2100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2104, %r2096, %r2101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2146, %r232, %r2025, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2143, %r232, %r2036, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r232, %r2047, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r232, %r2058, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r232, %r2071, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2161, %r232, %r2082, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r232, %r2093, %r2005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r232, %r2104, %r2011;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2139, %r49;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r2139, %r2143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2144, %r48, %r2146, %r2141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2148, %r49;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r2148, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2153, %r48, %r2155, %r2150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2157, %r49;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r2157, %r2161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r48, %r2164, %r2159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2166, %r49;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2168, %r2166, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r48, %r2173, %r2168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2175, %r49, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r48, %r2143, %r2175;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2182, %r49, %r2155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2185, %r48, %r2152, %r2182;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2189, %r49, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2192, %r48, %r2161, %r2189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2196, %r49, %r2173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2199, %r48, %r2170, %r2196;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2250, %r2247}, {%r69, %r71, %r70, %r72}, {%r2144, %r2178}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2259, %r2256}, {%r69, %r71, %r70, %r72}, {%r2153, %r2185}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2268, %r2265}, {%r69, %r71, %r70, %r72}, {%r2162, %r2192}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2277, %r2274}, {%r69, %r71, %r70, %r72}, {%r2171, %r2199}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2243, %r92;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r2243, %r2247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r91, %r2250, %r2245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2252, %r92;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r2252, %r2256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r91, %r2259, %r2254;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2261, %r92;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2263, %r2261, %r2265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2266, %r91, %r2268, %r2263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2270, %r92;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2272, %r2270, %r2274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2275, %r91, %r2277, %r2272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2279, %r92, %r2250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2282, %r91, %r2247, %r2279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2286, %r92, %r2259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2289, %r91, %r2256, %r2286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2293, %r92, %r2268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2296, %r91, %r2265, %r2293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2300, %r92, %r2277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2303, %r91, %r2274, %r2300;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2307, %r2308}, {%r413, %r419, %r416, %r422}, {%r2248, %r2282}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2317, %r2318}, {%r413, %r419, %r416, %r422}, {%r2257, %r2289}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2327, %r2328}, {%r413, %r419, %r416, %r422}, {%r2266, %r2296}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2337, %r2338}, {%r413, %r419, %r416, %r422}, {%r2275, %r2303}, {%r1313, %r1313};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2347, %r16, %r2307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2350, %r16, %r2308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2353, %r16, %r2317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2356, %r16, %r2318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2359, %r16, %r2327;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2362, %r16, %r2328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2365, %r16, %r2337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2368, %r16, %r2338;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2372, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2373, %r2347, %r2371;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2376, %r2373, %r2372;
	// end inline asm
	// begin inline asm
	mov.b32 %r2379, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2380, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2381, %r2350, %r2379;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2384, %r2381, %r2380;
	// end inline asm
	// begin inline asm
	mov.b32 %r2387, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2388, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2389, %r2353, %r2387;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2392, %r2389, %r2388;
	// end inline asm
	// begin inline asm
	mov.b32 %r2395, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2396, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2397, %r2356, %r2395;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2400, %r2397, %r2396;
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2404, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2405, %r2359, %r2403;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2408, %r2405, %r2404;
	// end inline asm
	// begin inline asm
	mov.b32 %r2411, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2412, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2413, %r2362, %r2411;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2416, %r2413, %r2412;
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2420, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2421, %r2365, %r2419;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2424, %r2421, %r2420;
	// end inline asm
	// begin inline asm
	mov.b32 %r2427, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2428, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2429, %r2368, %r2427;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2432, %r2429, %r2428;
	// end inline asm
	// begin inline asm
	mov.b32 %r2438, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2436, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2437, %r2438, %r2436;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2440, %r2376, %r2437;
	// end inline asm
	// begin inline asm
	mov.b32 %r2443, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2444, %r2438, %r2443;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2447, %r2384, %r2444;
	// end inline asm
	// begin inline asm
	mov.b32 %r2450, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2451, %r2438, %r2450;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2454, %r2392, %r2451;
	// end inline asm
	// begin inline asm
	mov.b32 %r2457, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2458, %r2438, %r2457;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2461, %r2400, %r2458;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2464, %r2440, %r2454, %r1569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2468, %r2447, %r2461, %r1569;
	// end inline asm
	shl.b32 	%r2475, %r2468, 4;
	// begin inline asm
	lop3.b32 %r2472, %r1575, %r2464, %r2475, 202;
	// end inline asm
	xor.b32  	%r2519, %r2472, -2004318072;
	// begin inline asm
	mov.b32 %r2479, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2477, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2478, %r2479, %r2477;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2481, %r2408, %r2478;
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2485, %r2479, %r2484;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2488, %r2416, %r2485;
	// end inline asm
	// begin inline asm
	mov.b32 %r2491, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2492, %r2479, %r2491;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2495, %r2424, %r2492;
	// end inline asm
	// begin inline asm
	mov.b32 %r2498, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2499, %r2479, %r2498;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2502, %r2432, %r2499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2505, %r2481, %r2495, %r1569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2509, %r2488, %r2502, %r1569;
	// end inline asm
	shl.b32 	%r2516, %r2509, 4;
	// begin inline asm
	lop3.b32 %r2513, %r1575, %r2505, %r2516, 202;
	// end inline asm
	xor.b32  	%r2520, %r2513, -2004318072;
	st.shared.u32 	[%rd214], %r2519;
	st.shared.u32 	[%rd215], %r2520;
	add.s32 	%r2635, %r2635, -32;
	add.s64 	%rd215, %rd215, 4228;
	add.s64 	%rd214, %rd214, 4228;
	add.s64 	%rd213, %rd213, 4228;
	add.s64 	%rd212, %rd212, 4228;
	setp.eq.s32 	%p244, %r2635, 0;
	mov.u32 	%r2636, %r2634;
	mov.u32 	%r2637, %r2633;
	mov.u32 	%r2638, %r2632;
	mov.u32 	%r2639, %r2631;
	@%p244 bra 	LBB0_128;
	bra.uni 	LBB0_127;
LBB0_128:                               // %guard_pass9096
                                        //   in Loop: Header=BB0_126 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2526, [%rd53];
	ld.shared.u32 	%r2527, [%rd54+128];
	ld.shared.u32 	%r2534, [%rd54+4];
	ld.shared.u32 	%r2535, [%rd54+132];
	ld.shared.u32 	%r2542, [%rd55];
	ld.shared.u32 	%r2543, [%rd56+128];
	ld.shared.u32 	%r2550, [%rd56+4];
	ld.shared.u32 	%r2551, [%rd56+132];
	ld.shared.u32 	%r2558, [%rd57];
	ld.shared.u32 	%r2559, [%rd58+128];
	ld.shared.u32 	%r2566, [%rd58+4];
	ld.shared.u32 	%r2567, [%rd58+132];
	ld.shared.u32 	%r2574, [%rd59];
	ld.shared.u32 	%r2575, [%rd60+128];
	ld.shared.u32 	%r2582, [%rd60+4];
	ld.shared.u32 	%r2583, [%rd60+132];
	// begin inline asm
	prmt.b32 %r2521, %r2526, %r2527, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2525, %r2526, %r2527, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2529, %r2534, %r2535, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2533, %r2534, %r2535, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2537, %r2542, %r2543, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2541, %r2542, %r2543, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2545, %r2550, %r2551, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2549, %r2550, %r2551, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2553, %r2558, %r2559, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2557, %r2558, %r2559, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2561, %r2566, %r2567, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2565, %r2566, %r2567, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2569, %r2574, %r2575, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2573, %r2574, %r2575, %r645;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2577, %r2582, %r2583, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2581, %r2582, %r2583, %r645;
	// end inline asm
	selp.b32 	%r2585, %r2525, %r2521, %p231;
	shfl.sync.bfly.b32	%r2586, %r2585, 8, 31, -1;
	selp.b32 	%r2587, %r2533, %r2529, %p231;
	shfl.sync.bfly.b32	%r2588, %r2587, 8, 31, -1;
	selp.b32 	%r2589, %r2541, %r2537, %p231;
	shfl.sync.bfly.b32	%r150, %r2589, 8, 31, -1;
	selp.b32 	%r2590, %r2549, %r2545, %p231;
	shfl.sync.bfly.b32	%r151, %r2590, 8, 31, -1;
	selp.b32 	%r2591, %r2557, %r2553, %p231;
	shfl.sync.bfly.b32	%r2592, %r2591, 8, 31, -1;
	selp.b32 	%r152, %r2553, %r2592, %p231;
	selp.b32 	%r153, %r2592, %r2557, %p231;
	selp.b32 	%r2593, %r2565, %r2561, %p231;
	shfl.sync.bfly.b32	%r2594, %r2593, 8, 31, -1;
	selp.b32 	%r154, %r2561, %r2594, %p231;
	selp.b32 	%r155, %r2594, %r2565, %p231;
	selp.b32 	%r2595, %r2573, %r2569, %p231;
	shfl.sync.bfly.b32	%r2596, %r2595, 8, 31, -1;
	selp.b32 	%r156, %r2569, %r2596, %p231;
	selp.b32 	%r157, %r2596, %r2573, %p231;
	selp.b32 	%r2597, %r2581, %r2577, %p231;
	shfl.sync.bfly.b32	%r2598, %r2597, 8, 31, -1;
	selp.b32 	%r158, %r2577, %r2598, %p231;
	selp.b32 	%r159, %r2598, %r2581, %p231;
	shl.b32 	%r2615, %r95, 12;
	@%p245 bra 	LBB0_158;
// %bb.129:                             // %guard_pass9096.pass8788_crit_edge
                                        //   in Loop: Header=BB0_126 Depth=1
	or.b32  	%r2646, %r2615, %r142;
	bra.uni 	LBB0_159;
LBB0_160:                               // %L22456
	st.global.u32 	[%rd4], %r2614;
	ret;
LBB0_7:                                 // %L247
	mov.u32 	%r2613, 2;
	st.global.u32 	[%rd4], %r2613;
	mov.u64 	%rd200, exception2039;
	cvta.global.u64 	%rd201, %rd200;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd201;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 11
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 12
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L8
	mov.u64 	%rd87, exception1;
	cvta.global.u64 	%rd88, %rd87;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd88;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_132:                               // %L22556
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_8197, 
	(
	);
	} // callseq 2
	mov.u64 	%rd94, exception1;
	cvta.global.u64 	%rd95, %rd94;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd95;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 3
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 4
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_131:                               // %L22553
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_8197, 
	(
	);
	} // callseq 5
	mov.u64 	%rd98, exception1;
	cvta.global.u64 	%rd99, %rd98;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd99;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_130:                               // %L22550
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_8197, 
	(
	);
	} // callseq 8
	mov.u64 	%rd106, exception1;
	cvta.global.u64 	%rd107, %rd106;
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd107;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 9
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 10
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
