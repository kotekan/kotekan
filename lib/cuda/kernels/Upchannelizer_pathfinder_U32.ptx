// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2050[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<226>;
	.reg .b16 	%rs<313>;
	.reg .b32 	%r<2565>;
	.reg .f32 	%f<847>;
	.reg .b64 	%rd<158>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r142, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd42, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r147, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r147, 67839;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L19
	ld.param.u64 	%rd43, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r143, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r148, %r1, 9;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r149, %r3, %r4;
	or.b32  	%r150, %r149, %r148;
	mul.wide.u32 	%rd49, %r150, 4;
	add.s64 	%rd4, %rd43, %rd49;
	mov.u32 	%r151, 1;
	st.global.u32 	[%rd4], %r151;
	setp.lt.s32 	%p2, %r143, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L114
	ld.param.u32 	%r144, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r144, %r143;
	setp.gt.s32 	%p4, %r144, 65536;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L124
	ld.param.u32 	%r145, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r152, %r144, %r143;
	and.b32  	%r153, %r152, 255;
	setp.ne.s32 	%p6, %r153, 0;
	setp.lt.s32 	%p7, %r145, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L130
	ld.param.u32 	%r146, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r146, %r145;
	setp.gt.s32 	%p10, %r146, 2048;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r154, %r146, %r145;
	add.s32 	%r155, %r154, 3;
	and.b32  	%r156, %r155, 7;
	setp.eq.s32 	%p12, %r156, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass125
	bfe.u32 	%r89, %r4, 1, 1;
	and.b32  	%r90, %r4, 1;
	bfe.u32 	%r91, %r4, 2, 1;
	shl.b32 	%r164, %r91, 1;
	shl.b32 	%r165, %r90, 2;
	shl.b32 	%r166, %r89, 3;
	or.b32  	%r167, %r165, %r166;
	or.b32  	%r168, %r164, %r167;
	shr.u32 	%r92, %r4, 4;
	or.b32  	%r93, %r92, %r168;
	or.b32  	%r94, %r93, 16;
	mov.f32 	%f148, 0f40000000;
	mov.f32 	%f149, 0f42FE0000;
	div.approx.f32 	%f105, %f149, %f148;
	cvt.rn.f32.s32 	%f150, %r93;
	sub.f32 	%f151, %f150, %f105;
	mov.f32 	%f180, 0f42000000;
	div.approx.f32 	%f107, %f151, %f180;
	setp.ne.f32 	%p18, %f107, 0f00000000;
	mov.f32 	%f822, 0f3F800000;
	mov.f32 	%f815, %f822;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L461
	sin.approx.f32 	%f181, %f107;
	div.approx.f32 	%f815, %f181, %f107;
$L__BB0_10:                             // %L464
	cvt.rn.f32.s32 	%f184, %r94;
	sub.f32 	%f185, %f184, %f105;
	div.approx.f32 	%f5, %f185, %f180;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f816, %f822;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L481
	sin.approx.f32 	%f215, %f5;
	div.approx.f32 	%f816, %f215, %f5;
$L__BB0_12:                             // %L484
	or.b32  	%r186, %r93, 32;
	or.b32  	%r6, %r93, 48;
	cvt.rn.f32.s32 	%f219, %r186;
	sub.f32 	%f220, %f219, %f105;
	div.approx.f32 	%f9, %f220, %f180;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f817, %f822;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L563
	sin.approx.f32 	%f250, %f9;
	div.approx.f32 	%f817, %f250, %f9;
$L__BB0_14:                             // %L566
	cvt.rn.f32.s32 	%f253, %r6;
	sub.f32 	%f254, %f253, %f105;
	div.approx.f32 	%f14, %f254, %f180;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f818, %f822;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L583
	sin.approx.f32 	%f284, %f14;
	div.approx.f32 	%f818, %f284, %f14;
$L__BB0_16:                             // %L586
	or.b32  	%r204, %r93, 64;
	or.b32  	%r8, %r93, 80;
	cvt.rn.f32.s32 	%f288, %r204;
	sub.f32 	%f289, %f288, %f105;
	div.approx.f32 	%f18, %f289, %f180;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f819, %f822;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L665
	sin.approx.f32 	%f319, %f18;
	div.approx.f32 	%f819, %f319, %f18;
$L__BB0_18:                             // %L668
	cvt.rn.f32.s32 	%f322, %r8;
	sub.f32 	%f323, %f322, %f105;
	div.approx.f32 	%f23, %f323, %f180;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f820, %f822;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L685
	sin.approx.f32 	%f353, %f23;
	div.approx.f32 	%f820, %f353, %f23;
$L__BB0_20:                             // %L688
	or.b32  	%r222, %r93, 96;
	or.b32  	%r10, %r93, 112;
	cvt.rn.f32.s32 	%f357, %r222;
	sub.f32 	%f358, %f357, %f105;
	div.approx.f32 	%f27, %f358, %f180;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f821, %f822;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L767
	sin.approx.f32 	%f388, %f27;
	div.approx.f32 	%f821, %f388, %f27;
$L__BB0_22:                             // %L770
	shr.u32 	%r88, %r4, 1;
	cvt.rn.f32.s32 	%f391, %r10;
	sub.f32 	%f392, %f391, %f105;
	div.approx.f32 	%f32, %f392, %f180;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L787
	sin.approx.f32 	%f422, %f32;
	div.approx.f32 	%f822, %f422, %f32;
$L__BB0_24:                             // %L790
	shr.u32 	%r14, %r4, 3;
	and.b32  	%r266, %r14, 2;
	and.b32  	%r267, %r88, 4;
	or.b32  	%r15, %r91, %r266;
	or.b32  	%r16, %r15, %r267;
	and.b32  	%r268, %r4, 3;
	mul.lo.s32 	%r269, %r268, %r16;
	shl.b32 	%r270, %r269, 1;
	neg.s32 	%r271, %r270;
	cvt.rn.f32.s32 	%f493, %r271;
	mov.f32 	%f494, 0f41000000;
	div.approx.f32 	%f35, %f493, %f494;
	abs.f32 	%f841, %f35;
	setp.lt.f32 	%p75, %f841, 0f40000000;
	@%p75 bra 	$L__BB0_103;
// %bb.25:
	setp.gtu.f32 	%p76, %f841, 0f4B800000;
	@%p76 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_26;
$L__BB0_99:
	mov.b32 	%r96, %f841;
	and.b32  	%r272, %r96, 8388607;
	or.b32  	%r2553, %r272, 1065353216;
	mov.b32 	%f840, %r2553;
	add.s32 	%r273, %r96, -1073741824;
	and.b32  	%r2554, %r273, -8388608;
	setp.eq.s32 	%p82, %r2554, 0;
	@%p82 bra 	$L__BB0_102;
// %bb.100:                             // %__nv_fmaf_rn.exit4.i.i.i680.preheader
	mov.f32 	%f504, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f503,%f504;
	// end inline asm
$L__BB0_101:                            // %__nv_fmaf_rn.exit4.i.i.i680
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r274, %r2554, 192937984;
	add.s32 	%r275, %r2553, %r274;
	mov.b32 	%f505, %r275;
	mul.f32 	%f506, %f503, %f505;
	sub.f32 	%f507, %f505, %f506;
	fma.rn.f32 	%f508, %f507, %f503, %f506;
	sub.f32 	%f509, %f505, %f508;
	fma.rz.f32 	%f510, %f509, %f503, %f508;
	cvt.rzi.f32.f32 	%f511, %f510;
	sub.f32 	%f840, %f505, %f511;
	sub.s32 	%r2554, %r2554, %r274;
	mov.b32 	%r2553, %f840;
	setp.ne.s32 	%p83, %r2554, 0;
	setp.ne.s32 	%p84, %r2553, 0;
	and.pred  	%p85, %p83, %p84;
	@%p85 bra 	$L__BB0_101;
$L__BB0_102:                            // %__internal_fmodf_slowpath_mod.exit.i.i682
	setp.gt.u32 	%p86, %r96, 2139095039;
	selp.f32 	%f512, 0f7FFFFFFF, 0f4B800000, %p86;
	mul.f32 	%f513, %f840, 0f34000000;
	mul.f32 	%f841, %f512, %f513;
	bra.uni 	$L__BB0_103;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i659
	div.approx.f32 	%f496, %f841, %f148;
	cvt.rzi.f32.f32 	%f839, %f496;
	fma.rn.f32 	%f109, %f839, 0fC0000000, %f841;
	mov.b32 	%r95, %f109;
	setp.lt.u32 	%p77, %r95, 1073741824;
	@%p77 bra 	$L__BB0_98;
// %bb.27:
	setp.lt.u32 	%p78, %r95, -2147483647;
	@%p78 bra 	$L__BB0_96;
// %bb.28:
	add.f32 	%f501, %f839, 0fBF800000;
	setp.lt.f32 	%p81, %f109, 0fC0000000;
	add.f32 	%f502, %f501, 0fBF800000;
	selp.f32 	%f839, %f502, %f501, %p81;
	bra.uni 	$L__BB0_98;
$L__BB0_96:
	add.f32 	%f839, %f839, 0f3F800000;
	setp.ltu.f32 	%p79, %f109, 0f40800000;
	@%p79 bra 	$L__BB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i663
	add.f32 	%f497, %f839, 0f3F800000;
	fma.rn.f32 	%f499, %f148, 0fC0400000, %f109;
	setp.ge.f32 	%p80, %f499, 0f00000000;
	add.f32 	%f500, %f497, 0f3F800000;
	selp.f32 	%f839, %f500, %f497, %p80;
$L__BB0_98:                             // %__internal_fmodf_fastpath_quot.exit.i.i666
	fma.rn.f32 	%f841, %f839, 0fC0000000, %f841;
$L__BB0_103:                            // %__internal_fmodf_kernel.exit.i685
	shl.b32 	%r82, %r4, 1;
	abs.f32 	%f514, %f841;
	setp.gtu.f32 	%p87, %f514, 0f7F800000;
	@%p87 bra 	$L__BB0_105;
// %bb.104:
	mov.b32 	%r276, %f35;
	and.b32  	%r277, %r276, -2147483648;
	mov.b32 	%r278, %f841;
	or.b32  	%r279, %r277, %r278;
	mov.b32 	%f841, %r279;
$L__BB0_105:                            // %__nv_fmodf.exit686
	and.b32  	%r288, %r82, 6;
	mov.u32 	%r289, -8;
	sub.s32 	%r290, %r289, %r288;
	mul.lo.s32 	%r291, %r16, %r290;
	cvt.rn.f32.s32 	%f545, %r291;
	div.approx.f32 	%f125, %f545, %f494;
	abs.f32 	%f825, %f125;
	setp.lt.f32 	%p95, %f825, 0f40000000;
	@%p95 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p96, %f825, 0f4B800000;
	@%p96 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r18, %f825;
	and.b32  	%r292, %r18, 8388607;
	or.b32  	%r2538, %r292, 1065353216;
	mov.b32 	%f824, %r2538;
	add.s32 	%r293, %r18, -1073741824;
	and.b32  	%r2539, %r293, -8388608;
	setp.eq.s32 	%p102, %r2539, 0;
	@%p102 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f556, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f555,%f556;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r294, %r2539, 192937984;
	add.s32 	%r295, %r2538, %r294;
	mov.b32 	%f557, %r295;
	mul.f32 	%f558, %f555, %f557;
	sub.f32 	%f559, %f557, %f558;
	fma.rn.f32 	%f560, %f559, %f555, %f558;
	sub.f32 	%f561, %f557, %f560;
	fma.rz.f32 	%f562, %f561, %f555, %f560;
	cvt.rzi.f32.f32 	%f563, %f562;
	sub.f32 	%f824, %f557, %f563;
	sub.s32 	%r2539, %r2539, %r294;
	mov.b32 	%r2538, %f824;
	setp.ne.s32 	%p103, %r2539, 0;
	setp.ne.s32 	%p104, %r2538, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p106, %r18, 2139095039;
	selp.f32 	%f564, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f565, %f824, 0f34000000;
	mul.f32 	%f825, %f564, %f565;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f548, %f825, %f148;
	cvt.rzi.f32.f32 	%f823, %f548;
	fma.rn.f32 	%f38, %f823, 0fC0000000, %f825;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p97, %r17, 1073741824;
	@%p97 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p98, %r17, -2147483647;
	@%p98 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f553, %f823, 0fBF800000;
	setp.lt.f32 	%p101, %f38, 0fC0000000;
	add.f32 	%f554, %f553, 0fBF800000;
	selp.f32 	%f823, %f554, %f553, %p101;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f823, %f823, 0f3F800000;
	setp.ltu.f32 	%p99, %f38, 0f40800000;
	@%p99 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f549, %f823, 0f3F800000;
	fma.rn.f32 	%f551, %f148, 0fC0400000, %f38;
	setp.ge.f32 	%p100, %f551, 0f00000000;
	add.f32 	%f552, %f549, 0f3F800000;
	selp.f32 	%f823, %f552, %f549, %p100;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f825, %f823, 0fC0000000, %f825;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f566, %f825;
	setp.gtu.f32 	%p107, %f566, 0f7F800000;
	@%p107 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r296, %f125;
	and.b32  	%r297, %r296, -2147483648;
	mov.b32 	%r298, %f825;
	or.b32  	%r299, %r297, %r298;
	mov.b32 	%f825, %r299;
$L__BB0_42:                             // %__nv_fmodf.exit
	shl.b32 	%r320, %r89, 1;
	neg.s32 	%r29, %r320;
	mul.lo.s32 	%r30, %r29, %r16;
	cvt.rn.f32.s32 	%f599, %r30;
	div.approx.f32 	%f52, %f599, %f180;
	abs.f32 	%f829, %f52;
	setp.lt.f32 	%p115, %f829, 0f40000000;
	@%p115 bra 	$L__BB0_54;
// %bb.43:
	setp.gtu.f32 	%p116, %f829, 0f4B800000;
	@%p116 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_44;
$L__BB0_50:
	mov.b32 	%r32, %f829;
	and.b32  	%r321, %r32, 8388607;
	or.b32  	%r2540, %r321, 1065353216;
	mov.b32 	%f828, %r2540;
	add.s32 	%r322, %r32, -1073741824;
	and.b32  	%r2541, %r322, -8388608;
	setp.eq.s32 	%p122, %r2541, 0;
	@%p122 bra 	$L__BB0_53;
// %bb.51:                              // %__nv_fmaf_rn.exit4.i.i.i587.preheader
	mov.f32 	%f610, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f609,%f610;
	// end inline asm
$L__BB0_52:                             // %__nv_fmaf_rn.exit4.i.i.i587
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r323, %r2541, 192937984;
	add.s32 	%r324, %r2540, %r323;
	mov.b32 	%f611, %r324;
	mul.f32 	%f612, %f609, %f611;
	sub.f32 	%f613, %f611, %f612;
	fma.rn.f32 	%f614, %f613, %f609, %f612;
	sub.f32 	%f615, %f611, %f614;
	fma.rz.f32 	%f616, %f615, %f609, %f614;
	cvt.rzi.f32.f32 	%f617, %f616;
	sub.f32 	%f828, %f611, %f617;
	sub.s32 	%r2541, %r2541, %r323;
	mov.b32 	%r2540, %f828;
	setp.ne.s32 	%p123, %r2541, 0;
	setp.ne.s32 	%p124, %r2540, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_52;
$L__BB0_53:                             // %__internal_fmodf_slowpath_mod.exit.i.i589
	setp.gt.u32 	%p126, %r32, 2139095039;
	selp.f32 	%f618, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f619, %f828, 0f34000000;
	mul.f32 	%f829, %f618, %f619;
	bra.uni 	$L__BB0_54;
$L__BB0_44:                             // %__nv_fast_fdividef.exit.i.i.i566
	div.approx.f32 	%f602, %f829, %f148;
	cvt.rzi.f32.f32 	%f827, %f602;
	fma.rn.f32 	%f55, %f827, 0fC0000000, %f829;
	mov.b32 	%r31, %f55;
	setp.lt.u32 	%p117, %r31, 1073741824;
	@%p117 bra 	$L__BB0_49;
// %bb.45:
	setp.lt.u32 	%p118, %r31, -2147483647;
	@%p118 bra 	$L__BB0_47;
// %bb.46:
	add.f32 	%f607, %f827, 0fBF800000;
	setp.lt.f32 	%p121, %f55, 0fC0000000;
	add.f32 	%f608, %f607, 0fBF800000;
	selp.f32 	%f827, %f608, %f607, %p121;
	bra.uni 	$L__BB0_49;
$L__BB0_47:
	add.f32 	%f827, %f827, 0f3F800000;
	setp.ltu.f32 	%p119, %f55, 0f40800000;
	@%p119 bra 	$L__BB0_49;
// %bb.48:                              // %__nv_fmaf_rn.exit.i.i.i570
	add.f32 	%f603, %f827, 0f3F800000;
	fma.rn.f32 	%f605, %f148, 0fC0400000, %f55;
	setp.ge.f32 	%p120, %f605, 0f00000000;
	add.f32 	%f606, %f603, 0f3F800000;
	selp.f32 	%f827, %f606, %f603, %p120;
$L__BB0_49:                             // %__internal_fmodf_fastpath_quot.exit.i.i573
	fma.rn.f32 	%f829, %f827, 0fC0000000, %f829;
$L__BB0_54:                             // %__internal_fmodf_kernel.exit.i592
	abs.f32 	%f620, %f829;
	setp.gtu.f32 	%p127, %f620, 0f7F800000;
	@%p127 bra 	$L__BB0_56;
// %bb.55:
	mov.b32 	%r325, %f52;
	and.b32  	%r326, %r325, -2147483648;
	mov.b32 	%r327, %f829;
	or.b32  	%r328, %r326, %r327;
	mov.b32 	%f829, %r328;
$L__BB0_56:                             // %__nv_fmodf.exit593
	shl.b32 	%r337, %r16, 2;
	sub.s32 	%r338, %r30, %r337;
	cvt.rn.f32.s32 	%f651, %r338;
	div.approx.f32 	%f71, %f651, %f180;
	abs.f32 	%f833, %f71;
	setp.lt.f32 	%p135, %f833, 0f40000000;
	@%p135 bra 	$L__BB0_68;
// %bb.57:
	setp.gtu.f32 	%p136, %f833, 0f4B800000;
	@%p136 bra 	$L__BB0_64;
	bra.uni 	$L__BB0_58;
$L__BB0_64:
	mov.b32 	%r40, %f833;
	and.b32  	%r339, %r40, 8388607;
	or.b32  	%r2542, %r339, 1065353216;
	mov.b32 	%f832, %r2542;
	add.s32 	%r340, %r40, -1073741824;
	and.b32  	%r2543, %r340, -8388608;
	setp.eq.s32 	%p142, %r2543, 0;
	@%p142 bra 	$L__BB0_67;
// %bb.65:                              // %__nv_fmaf_rn.exit4.i.i.i618.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_66:                             // %__nv_fmaf_rn.exit4.i.i.i618
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r341, %r2543, 192937984;
	add.s32 	%r342, %r2542, %r341;
	mov.b32 	%f663, %r342;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f832, %f663, %f669;
	sub.s32 	%r2543, %r2543, %r341;
	mov.b32 	%r2542, %f832;
	setp.ne.s32 	%p143, %r2543, 0;
	setp.ne.s32 	%p144, %r2542, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_66;
$L__BB0_67:                             // %__internal_fmodf_slowpath_mod.exit.i.i620
	setp.gt.u32 	%p146, %r40, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f671, %f832, 0f34000000;
	mul.f32 	%f833, %f670, %f671;
	bra.uni 	$L__BB0_68;
$L__BB0_58:                             // %__nv_fast_fdividef.exit.i.i.i597
	div.approx.f32 	%f654, %f833, %f148;
	cvt.rzi.f32.f32 	%f831, %f654;
	fma.rn.f32 	%f74, %f831, 0fC0000000, %f833;
	mov.b32 	%r39, %f74;
	setp.lt.u32 	%p137, %r39, 1073741824;
	@%p137 bra 	$L__BB0_63;
// %bb.59:
	setp.lt.u32 	%p138, %r39, -2147483647;
	@%p138 bra 	$L__BB0_61;
// %bb.60:
	add.f32 	%f659, %f831, 0fBF800000;
	setp.lt.f32 	%p141, %f74, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f831, %f660, %f659, %p141;
	bra.uni 	$L__BB0_63;
$L__BB0_61:
	add.f32 	%f831, %f831, 0f3F800000;
	setp.ltu.f32 	%p139, %f74, 0f40800000;
	@%p139 bra 	$L__BB0_63;
// %bb.62:                              // %__nv_fmaf_rn.exit.i.i.i601
	add.f32 	%f655, %f831, 0f3F800000;
	fma.rn.f32 	%f657, %f148, 0fC0400000, %f74;
	setp.ge.f32 	%p140, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f831, %f658, %f655, %p140;
$L__BB0_63:                             // %__internal_fmodf_fastpath_quot.exit.i.i604
	fma.rn.f32 	%f833, %f831, 0fC0000000, %f833;
$L__BB0_68:                             // %__internal_fmodf_kernel.exit.i623
	abs.f32 	%f672, %f833;
	setp.gtu.f32 	%p147, %f672, 0f7F800000;
	@%p147 bra 	$L__BB0_70;
// %bb.69:
	mov.b32 	%r343, %f71;
	and.b32  	%r344, %r343, -2147483648;
	mov.b32 	%r345, %f833;
	or.b32  	%r346, %r344, %r345;
	mov.b32 	%f833, %r346;
$L__BB0_70:                             // %__nv_fmodf.exit624
	mul.lo.s32 	%r50, %r29, %r15;
	cvt.rn.f32.s32 	%f705, %r50;
	mov.f32 	%f706, 0f40800000;
	div.approx.f32 	%f88, %f705, %f706;
	abs.f32 	%f845, %f88;
	setp.lt.f32 	%p155, %f845, 0f40000000;
	@%p155 bra 	$L__BB0_113;
// %bb.71:
	setp.gtu.f32 	%p156, %f845, 0f4B800000;
	@%p156 bra 	$L__BB0_109;
	bra.uni 	$L__BB0_72;
$L__BB0_109:
	mov.b32 	%r104, %f845;
	and.b32  	%r361, %r104, 8388607;
	or.b32  	%r2555, %r361, 1065353216;
	mov.b32 	%f844, %r2555;
	add.s32 	%r362, %r104, -1073741824;
	and.b32  	%r2556, %r362, -8388608;
	setp.eq.s32 	%p162, %r2556, 0;
	@%p162 bra 	$L__BB0_112;
// %bb.110:                             // %__nv_fmaf_rn.exit4.i.i.i711.preheader
	mov.f32 	%f716, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f715,%f716;
	// end inline asm
$L__BB0_111:                            // %__nv_fmaf_rn.exit4.i.i.i711
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r363, %r2556, 192937984;
	add.s32 	%r364, %r2555, %r363;
	mov.b32 	%f717, %r364;
	mul.f32 	%f718, %f715, %f717;
	sub.f32 	%f719, %f717, %f718;
	fma.rn.f32 	%f720, %f719, %f715, %f718;
	sub.f32 	%f721, %f717, %f720;
	fma.rz.f32 	%f722, %f721, %f715, %f720;
	cvt.rzi.f32.f32 	%f723, %f722;
	sub.f32 	%f844, %f717, %f723;
	sub.s32 	%r2556, %r2556, %r363;
	mov.b32 	%r2555, %f844;
	setp.ne.s32 	%p163, %r2556, 0;
	setp.ne.s32 	%p164, %r2555, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_111;
$L__BB0_112:                            // %__internal_fmodf_slowpath_mod.exit.i.i713
	setp.gt.u32 	%p166, %r104, 2139095039;
	selp.f32 	%f724, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f725, %f844, 0f34000000;
	mul.f32 	%f845, %f724, %f725;
	bra.uni 	$L__BB0_113;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i690
	div.approx.f32 	%f708, %f845, %f148;
	cvt.rzi.f32.f32 	%f843, %f708;
	fma.rn.f32 	%f128, %f843, 0fC0000000, %f845;
	mov.b32 	%r103, %f128;
	setp.lt.u32 	%p157, %r103, 1073741824;
	@%p157 bra 	$L__BB0_108;
// %bb.73:
	setp.lt.u32 	%p158, %r103, -2147483647;
	@%p158 bra 	$L__BB0_106;
// %bb.74:
	add.f32 	%f713, %f843, 0fBF800000;
	setp.lt.f32 	%p161, %f128, 0fC0000000;
	add.f32 	%f714, %f713, 0fBF800000;
	selp.f32 	%f843, %f714, %f713, %p161;
	bra.uni 	$L__BB0_108;
$L__BB0_106:
	add.f32 	%f843, %f843, 0f3F800000;
	setp.ltu.f32 	%p159, %f128, 0f40800000;
	@%p159 bra 	$L__BB0_108;
// %bb.107:                             // %__nv_fmaf_rn.exit.i.i.i694
	add.f32 	%f709, %f843, 0f3F800000;
	fma.rn.f32 	%f711, %f148, 0fC0400000, %f128;
	setp.ge.f32 	%p160, %f711, 0f00000000;
	add.f32 	%f712, %f709, 0f3F800000;
	selp.f32 	%f843, %f712, %f709, %p160;
$L__BB0_108:                            // %__internal_fmodf_fastpath_quot.exit.i.i697
	fma.rn.f32 	%f845, %f843, 0fC0000000, %f845;
$L__BB0_113:                            // %__internal_fmodf_kernel.exit.i716
	abs.f32 	%f726, %f845;
	setp.gtu.f32 	%p167, %f726, 0f7F800000;
	@%p167 bra 	$L__BB0_115;
// %bb.114:
	mov.b32 	%r365, %f88;
	and.b32  	%r366, %r365, -2147483648;
	mov.b32 	%r367, %f845;
	or.b32  	%r368, %r366, %r367;
	mov.b32 	%f845, %r368;
$L__BB0_115:                            // %__nv_fmodf.exit717
	shl.b32 	%r377, %r15, 2;
	sub.s32 	%r378, %r50, %r377;
	cvt.rn.f32.s32 	%f759, %r378;
	div.approx.f32 	%f145, %f759, %f706;
	abs.f32 	%f837, %f145;
	setp.lt.f32 	%p176, %f837, 0f40000000;
	@%p176 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p177, %f837, 0f4B800000;
	@%p177 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r52, %f837;
	and.b32  	%r379, %r52, 8388607;
	or.b32  	%r2544, %r379, 1065353216;
	mov.b32 	%f836, %r2544;
	add.s32 	%r380, %r52, -1073741824;
	and.b32  	%r2545, %r380, -8388608;
	setp.eq.s32 	%p183, %r2545, 0;
	@%p183 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i649.preheader
	mov.f32 	%f770, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f769,%f770;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i649
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r381, %r2545, 192937984;
	add.s32 	%r382, %r2544, %r381;
	mov.b32 	%f771, %r382;
	mul.f32 	%f772, %f769, %f771;
	sub.f32 	%f773, %f771, %f772;
	fma.rn.f32 	%f774, %f773, %f769, %f772;
	sub.f32 	%f775, %f771, %f774;
	fma.rz.f32 	%f776, %f775, %f769, %f774;
	cvt.rzi.f32.f32 	%f777, %f776;
	sub.f32 	%f836, %f771, %f777;
	sub.s32 	%r2545, %r2545, %r381;
	mov.b32 	%r2544, %f836;
	setp.ne.s32 	%p184, %r2545, 0;
	setp.ne.s32 	%p185, %r2544, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i651
	setp.gt.u32 	%p187, %r52, 2139095039;
	selp.f32 	%f778, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f779, %f836, 0f34000000;
	mul.f32 	%f837, %f778, %f779;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i628
	div.approx.f32 	%f762, %f837, %f148;
	cvt.rzi.f32.f32 	%f835, %f762;
	fma.rn.f32 	%f91, %f835, 0fC0000000, %f837;
	mov.b32 	%r51, %f91;
	setp.lt.u32 	%p178, %r51, 1073741824;
	@%p178 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p179, %r51, -2147483647;
	@%p179 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f767, %f835, 0fBF800000;
	setp.lt.f32 	%p182, %f91, 0fC0000000;
	add.f32 	%f768, %f767, 0fBF800000;
	selp.f32 	%f835, %f768, %f767, %p182;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f835, %f835, 0f3F800000;
	setp.ltu.f32 	%p180, %f91, 0f40800000;
	@%p180 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i632
	add.f32 	%f763, %f835, 0f3F800000;
	fma.rn.f32 	%f765, %f148, 0fC0400000, %f91;
	setp.ge.f32 	%p181, %f765, 0f00000000;
	add.f32 	%f766, %f763, 0f3F800000;
	selp.f32 	%f835, %f766, %f763, %p181;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i635
	fma.rn.f32 	%f837, %f835, 0fC0000000, %f837;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i654
	abs.f32 	%f780, %f837;
	setp.gtu.f32 	%p188, %f780, 0f7F800000;
	@%p188 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r383, %f145;
	and.b32  	%r384, %r383, -2147483648;
	mov.b32 	%r385, %f837;
	or.b32  	%r386, %r384, %r385;
	mov.b32 	%f837, %r386;
$L__BB0_88:                             // %__nv_fmodf.exit655
	setp.le.s32 	%p196, %r144, %r143;
	mov.u32 	%r2537, 0;
	@%p196 bra 	$L__BB0_95;
// %bb.89:                              // %L1352.lr.ph
	mov.f32 	%f152, 0f43010000;
	mul.lo.s32 	%r246, %r93, 31;
	div.approx.f32 	%f153, %f151, %f152;
	div.approx.f32 	%f187, %f185, %f152;
	div.approx.f32 	%f222, %f220, %f152;
	div.approx.f32 	%f256, %f254, %f152;
	div.approx.f32 	%f291, %f289, %f152;
	div.approx.f32 	%f325, %f323, %f152;
	div.approx.f32 	%f360, %f358, %f152;
	div.approx.f32 	%f394, %f392, %f152;
	add.s32 	%r256, %r246, 48;
	abs.f32 	%f154, %f153;
	abs.f32 	%f188, %f187;
	abs.f32 	%f223, %f222;
	abs.f32 	%f257, %f256;
	abs.f32 	%f292, %f291;
	abs.f32 	%f326, %f325;
	abs.f32 	%f361, %f360;
	abs.f32 	%f395, %f394;
	and.b32  	%r247, %r246, 63;
	and.b32  	%r257, %r256, 63;
	setp.gt.f32 	%p13, %f154, 0f4B800000;
	mul.f32 	%f155, %f153, 0f00000000;
	setp.gt.f32 	%p19, %f188, 0f4B800000;
	mul.f32 	%f189, %f187, 0f00000000;
	setp.gt.f32 	%p25, %f223, 0f4B800000;
	mul.f32 	%f224, %f222, 0f00000000;
	setp.gt.f32 	%p31, %f257, 0f4B800000;
	mul.f32 	%f258, %f256, 0f00000000;
	setp.gt.f32 	%p37, %f292, 0f4B800000;
	mul.f32 	%f293, %f291, 0f00000000;
	setp.gt.f32 	%p43, %f326, 0f4B800000;
	mul.f32 	%f327, %f325, 0f00000000;
	setp.gt.f32 	%p49, %f361, 0f4B800000;
	mul.f32 	%f362, %f360, 0f00000000;
	setp.gt.f32 	%p55, %f395, 0f4B800000;
	mul.f32 	%f396, %f394, 0f00000000;
	cvt.rn.f32.s32 	%f425, %r247;
	cvt.rn.f32.s32 	%f460, %r257;
	selp.f32 	%f156, %f155, %f153, %p13;
	selp.f32 	%f190, %f189, %f187, %p19;
	selp.f32 	%f225, %f224, %f222, %p25;
	selp.f32 	%f259, %f258, %f256, %p31;
	selp.f32 	%f294, %f293, %f291, %p37;
	selp.f32 	%f328, %f327, %f325, %p43;
	selp.f32 	%f363, %f362, %f360, %p49;
	selp.f32 	%f397, %f396, %f394, %p55;
	div.approx.f32 	%f427, %f425, %f180;
	div.approx.f32 	%f461, %f460, %f180;
	add.f32 	%f157, %f156, %f156;
	add.f32 	%f191, %f190, %f190;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f260, %f259, %f259;
	add.f32 	%f295, %f294, %f294;
	add.f32 	%f329, %f328, %f328;
	add.f32 	%f364, %f363, %f363;
	add.f32 	%f398, %f397, %f397;
	add.f32 	%f428, %f427, %f427;
	add.f32 	%f462, %f461, %f461;
	add.f32 	%f515, %f841, %f841;
	add.f32 	%f567, %f825, %f825;
	mov.b32 	%r169, %f157;
	mov.b32 	%r176, %f191;
	mov.b32 	%r187, %f226;
	mov.b32 	%r194, %f260;
	mov.b32 	%r205, %f295;
	mov.b32 	%r212, %f329;
	mov.b32 	%r223, %f364;
	mov.b32 	%r230, %f398;
	mov.b32 	%r248, %f428;
	mov.b32 	%r258, %f462;
	mov.b32 	%r280, %f515;
	mov.b32 	%r312, %f567;
	add.f32 	%f621, %f829, %f829;
	add.f32 	%f673, %f833, %f833;
	and.b32  	%r170, %r169, -2147483648;
	and.b32  	%r177, %r176, -2147483648;
	and.b32  	%r188, %r187, -2147483648;
	and.b32  	%r195, %r194, -2147483648;
	and.b32  	%r206, %r205, -2147483648;
	and.b32  	%r213, %r212, -2147483648;
	and.b32  	%r224, %r223, -2147483648;
	and.b32  	%r231, %r230, -2147483648;
	and.b32  	%r249, %r248, -2147483648;
	and.b32  	%r259, %r258, -2147483648;
	and.b32  	%r281, %r280, -2147483648;
	and.b32  	%r313, %r312, -2147483648;
	mov.b32 	%r329, %f621;
	mov.b32 	%r353, %f673;
	add.f32 	%f727, %f845, %f845;
	or.b32  	%r171, %r170, 1056964608;
	or.b32  	%r178, %r177, 1056964608;
	or.b32  	%r189, %r188, 1056964608;
	or.b32  	%r196, %r195, 1056964608;
	or.b32  	%r207, %r206, 1056964608;
	or.b32  	%r214, %r213, 1056964608;
	or.b32  	%r225, %r224, 1056964608;
	or.b32  	%r232, %r231, 1056964608;
	or.b32  	%r250, %r249, 1056964608;
	or.b32  	%r260, %r259, 1056964608;
	or.b32  	%r282, %r281, 1056964608;
	or.b32  	%r314, %r313, 1056964608;
	and.b32  	%r330, %r329, -2147483648;
	and.b32  	%r354, %r353, -2147483648;
	mov.b32 	%r369, %f727;
	mov.b32 	%f158, %r171;
	mov.b32 	%f192, %r178;
	mov.b32 	%f227, %r189;
	mov.b32 	%f261, %r196;
	mov.b32 	%f296, %r207;
	mov.b32 	%f330, %r214;
	mov.b32 	%f365, %r225;
	mov.b32 	%f399, %r232;
	mov.b32 	%f429, %r250;
	mov.b32 	%f463, %r260;
	mov.b32 	%f516, %r282;
	mov.b32 	%f568, %r314;
	or.b32  	%r331, %r330, 1056964608;
	or.b32  	%r355, %r354, 1056964608;
	and.b32  	%r370, %r369, -2147483648;
	add.f32 	%f159, %f157, %f158;
	abs.f32 	%f161, %f157;
	add.f32 	%f193, %f191, %f192;
	abs.f32 	%f195, %f191;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f262, %f260, %f261;
	abs.f32 	%f264, %f260;
	add.f32 	%f297, %f295, %f296;
	abs.f32 	%f299, %f295;
	add.f32 	%f331, %f329, %f330;
	abs.f32 	%f333, %f329;
	add.f32 	%f366, %f364, %f365;
	abs.f32 	%f368, %f364;
	add.f32 	%f400, %f398, %f399;
	abs.f32 	%f402, %f398;
	add.f32 	%f430, %f428, %f429;
	abs.f32 	%f432, %f428;
	add.f32 	%f464, %f462, %f463;
	abs.f32 	%f466, %f462;
	add.f32 	%f517, %f515, %f516;
	abs.f32 	%f519, %f515;
	add.f32 	%f569, %f567, %f568;
	abs.f32 	%f571, %f567;
	mov.b32 	%f622, %r331;
	mov.b32 	%f674, %r355;
	or.b32  	%r371, %r370, 1056964608;
	cvt.rzi.f32.f32 	%f160, %f159;
	setp.gt.f32 	%p14, %f161, 0f4B000000;
	cvt.rzi.f32.f32 	%f194, %f193;
	setp.gt.f32 	%p20, %f195, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p26, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f263, %f262;
	setp.gt.f32 	%p32, %f264, 0f4B000000;
	cvt.rzi.f32.f32 	%f298, %f297;
	setp.gt.f32 	%p38, %f299, 0f4B000000;
	cvt.rzi.f32.f32 	%f332, %f331;
	setp.gt.f32 	%p44, %f333, 0f4B000000;
	cvt.rzi.f32.f32 	%f367, %f366;
	setp.gt.f32 	%p50, %f368, 0f4B000000;
	cvt.rzi.f32.f32 	%f401, %f400;
	setp.gt.f32 	%p56, %f402, 0f4B000000;
	cvt.rzi.f32.f32 	%f431, %f430;
	setp.gt.f32 	%p61, %f432, 0f4B000000;
	cvt.rzi.f32.f32 	%f465, %f464;
	setp.gt.f32 	%p68, %f466, 0f4B000000;
	cvt.rzi.f32.f32 	%f518, %f517;
	setp.gt.f32 	%p88, %f519, 0f4B000000;
	cvt.rzi.f32.f32 	%f570, %f569;
	setp.gt.f32 	%p108, %f571, 0f4B000000;
	add.f32 	%f623, %f621, %f622;
	abs.f32 	%f625, %f621;
	add.f32 	%f675, %f673, %f674;
	abs.f32 	%f677, %f673;
	mov.b32 	%f728, %r371;
	shl.b32 	%r81, %r1, 5;
	and.b32  	%r157, %r82, 8;
	selp.f32 	%f162, %f157, %f160, %p14;
	cvt.rzi.f32.f32 	%f163, %f157;
	setp.lt.f32 	%p15, %f161, 0f3F000000;
	selp.f32 	%f196, %f191, %f194, %p20;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p21, %f195, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p26;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p27, %f230, 0f3F000000;
	selp.f32 	%f265, %f260, %f263, %p32;
	cvt.rzi.f32.f32 	%f266, %f260;
	setp.lt.f32 	%p33, %f264, 0f3F000000;
	selp.f32 	%f300, %f295, %f298, %p38;
	cvt.rzi.f32.f32 	%f301, %f295;
	setp.lt.f32 	%p39, %f299, 0f3F000000;
	selp.f32 	%f334, %f329, %f332, %p44;
	cvt.rzi.f32.f32 	%f335, %f329;
	setp.lt.f32 	%p45, %f333, 0f3F000000;
	selp.f32 	%f369, %f364, %f367, %p50;
	cvt.rzi.f32.f32 	%f370, %f364;
	setp.lt.f32 	%p51, %f368, 0f3F000000;
	selp.f32 	%f403, %f398, %f401, %p56;
	cvt.rzi.f32.f32 	%f404, %f398;
	setp.lt.f32 	%p57, %f402, 0f3F000000;
	selp.f32 	%f433, %f428, %f431, %p61;
	cvt.rzi.f32.f32 	%f434, %f428;
	setp.lt.f32 	%p62, %f432, 0f3F000000;
	selp.f32 	%f467, %f462, %f465, %p68;
	cvt.rzi.f32.f32 	%f468, %f462;
	setp.lt.f32 	%p69, %f466, 0f3F000000;
	selp.f32 	%f520, %f515, %f518, %p88;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p89, %f519, 0f3F000000;
	selp.f32 	%f572, %f567, %f570, %p108;
	cvt.rzi.f32.f32 	%f573, %f567;
	setp.lt.f32 	%p109, %f571, 0f3F000000;
	cvt.rzi.f32.f32 	%f624, %f623;
	setp.gt.f32 	%p128, %f625, 0f4B000000;
	cvt.rzi.f32.f32 	%f676, %f675;
	setp.gt.f32 	%p148, %f677, 0f4B000000;
	add.f32 	%f729, %f727, %f728;
	abs.f32 	%f731, %f727;
	or.b32  	%r158, %r157, %r81;
	and.b32  	%r159, %r4, 16;
	shl.b32 	%r84, %r4, 2;
	selp.f32 	%f164, %f163, %f162, %p15;
	selp.f32 	%f198, %f197, %f196, %p21;
	selp.f32 	%f233, %f232, %f231, %p27;
	selp.f32 	%f267, %f266, %f265, %p33;
	selp.f32 	%f302, %f301, %f300, %p39;
	selp.f32 	%f336, %f335, %f334, %p45;
	selp.f32 	%f371, %f370, %f369, %p51;
	selp.f32 	%f405, %f404, %f403, %p57;
	selp.f32 	%f435, %f434, %f433, %p62;
	selp.f32 	%f469, %f468, %f467, %p69;
	selp.f32 	%f522, %f521, %f520, %p89;
	selp.f32 	%f574, %f573, %f572, %p109;
	selp.f32 	%f626, %f621, %f624, %p128;
	cvt.rzi.f32.f32 	%f627, %f621;
	setp.lt.f32 	%p129, %f625, 0f3F000000;
	selp.f32 	%f678, %f673, %f676, %p148;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p149, %f677, 0f3F000000;
	cvt.rzi.f32.f32 	%f730, %f729;
	setp.gt.f32 	%p169, %f731, 0f4B000000;
	or.b32  	%r83, %r158, %r159;
	and.b32  	%r85, %r84, 4;
	fma.rn.f32 	%f165, %f164, 0fBF000000, %f156;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f190;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f268, %f267, 0fBF000000, %f259;
	fma.rn.f32 	%f303, %f302, 0fBF000000, %f294;
	fma.rn.f32 	%f337, %f336, 0fBF000000, %f328;
	fma.rn.f32 	%f372, %f371, 0fBF000000, %f363;
	fma.rn.f32 	%f406, %f405, 0fBF000000, %f397;
	fma.rn.f32 	%f436, %f435, 0fBF000000, %f427;
	fma.rn.f32 	%f470, %f469, 0fBF000000, %f461;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f841;
	fma.rn.f32 	%f575, %f574, 0fBF000000, %f825;
	selp.f32 	%f628, %f627, %f626, %p129;
	selp.f32 	%f680, %f679, %f678, %p149;
	selp.f32 	%f732, %f727, %f730, %p169;
	cvt.rzi.f32.f32 	%f733, %f727;
	setp.lt.f32 	%p170, %f731, 0f3F000000;
	or.b32  	%r160, %r83, %r85;
	and.b32  	%r86, %r4, 2;
	mul.f32 	%f166, %f165, %f165;
	mul.f32 	%f200, %f199, %f199;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f269, %f268, %f268;
	mul.f32 	%f304, %f303, %f303;
	mul.f32 	%f338, %f337, %f337;
	mul.f32 	%f373, %f372, %f372;
	mul.f32 	%f407, %f406, %f406;
	mul.f32 	%f437, %f436, %f436;
	mul.f32 	%f471, %f470, %f470;
	mul.f32 	%f524, %f523, %f523;
	mul.f32 	%f576, %f575, %f575;
	fma.rn.f32 	%f629, %f628, 0fBF000000, %f829;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f833;
	selp.f32 	%f734, %f733, %f732, %p170;
	or.b32  	%r161, %r160, %r86;
	cvt.rzi.s32.f32 	%r172, %f164;
	fma.rn.f32 	%f167, %f166, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f168, %f166, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r179, %f198;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r190, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r197, %f267;
	fma.rn.f32 	%f270, %f269, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f271, %f269, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r208, %f302;
	fma.rn.f32 	%f305, %f304, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f306, %f304, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r215, %f336;
	fma.rn.f32 	%f339, %f338, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f340, %f338, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r226, %f371;
	fma.rn.f32 	%f374, %f373, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f375, %f373, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r233, %f405;
	fma.rn.f32 	%f408, %f407, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f409, %f407, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f438, %f437, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f439, %f437, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f472, %f471, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f473, %f471, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f577, %f576, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f578, %f576, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f630, %f629, %f629;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f735, %f734, 0fBF000000, %f845;
	shr.u32 	%r162, %r161, 1;
	add.s32 	%r173, %r172, 1;
	fma.rn.f32 	%f169, %f167, %f166, 0fC0A55DF6;
	fma.rn.f32 	%f170, %f168, %f166, 0f4081E0CF;
	fma.rn.f32 	%f171, %f166, %f165, 0f00000000;
	add.s32 	%r180, %r179, 1;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	add.s32 	%r191, %r190, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r198, %r197, 1;
	fma.rn.f32 	%f272, %f270, %f269, 0fC0A55DF6;
	fma.rn.f32 	%f273, %f271, %f269, 0f4081E0CF;
	fma.rn.f32 	%f274, %f269, %f268, 0f00000000;
	add.s32 	%r209, %r208, 1;
	fma.rn.f32 	%f307, %f305, %f304, 0fC0A55DF6;
	fma.rn.f32 	%f308, %f306, %f304, 0f4081E0CF;
	fma.rn.f32 	%f309, %f304, %f303, 0f00000000;
	add.s32 	%r216, %r215, 1;
	fma.rn.f32 	%f341, %f339, %f338, 0fC0A55DF6;
	fma.rn.f32 	%f342, %f340, %f338, 0f4081E0CF;
	fma.rn.f32 	%f343, %f338, %f337, 0f00000000;
	add.s32 	%r227, %r226, 1;
	fma.rn.f32 	%f376, %f374, %f373, 0fC0A55DF6;
	fma.rn.f32 	%f377, %f375, %f373, 0f4081E0CF;
	fma.rn.f32 	%f378, %f373, %f372, 0f00000000;
	add.s32 	%r234, %r233, 1;
	fma.rn.f32 	%f410, %f408, %f407, 0fC0A55DF6;
	fma.rn.f32 	%f411, %f409, %f407, 0f4081E0CF;
	fma.rn.f32 	%f412, %f407, %f406, 0f00000000;
	cvt.rzi.s32.f32 	%r251, %f435;
	fma.rn.f32 	%f440, %f438, %f437, 0fC0A55DF6;
	fma.rn.f32 	%f441, %f439, %f437, 0f4081E0CF;
	fma.rn.f32 	%f442, %f437, %f436, 0f00000000;
	cvt.rzi.s32.f32 	%r261, %f469;
	fma.rn.f32 	%f474, %f472, %f471, 0fC0A55DF6;
	fma.rn.f32 	%f475, %f473, %f471, 0f4081E0CF;
	fma.rn.f32 	%f476, %f471, %f470, 0f00000000;
	cvt.rzi.s32.f32 	%r283, %f522;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	cvt.rzi.s32.f32 	%r315, %f574;
	fma.rn.f32 	%f579, %f577, %f576, 0fC0A55DF6;
	fma.rn.f32 	%f580, %f578, %f576, 0f4081E0CF;
	fma.rn.f32 	%f581, %f576, %f575, 0f00000000;
	fma.rn.f32 	%f631, %f630, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f632, %f630, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f736, %f735, %f735;
	cvt.u16.u32 	%rs1, %r162;
	fma.rn.f32 	%f172, %f170, %f166, 0fC09DE9E6;
	fma.rn.f32 	%f173, %f169, %f171, 0f00000000;
	and.b32  	%r174, %r173, 1;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	and.b32  	%r181, %r180, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r192, %r191, 1;
	fma.rn.f32 	%f275, %f273, %f269, 0fC09DE9E6;
	fma.rn.f32 	%f276, %f272, %f274, 0f00000000;
	and.b32  	%r199, %r198, 1;
	fma.rn.f32 	%f310, %f308, %f304, 0fC09DE9E6;
	fma.rn.f32 	%f311, %f307, %f309, 0f00000000;
	and.b32  	%r210, %r209, 1;
	fma.rn.f32 	%f344, %f342, %f338, 0fC09DE9E6;
	fma.rn.f32 	%f345, %f341, %f343, 0f00000000;
	and.b32  	%r217, %r216, 1;
	fma.rn.f32 	%f379, %f377, %f373, 0fC09DE9E6;
	fma.rn.f32 	%f380, %f376, %f378, 0f00000000;
	and.b32  	%r228, %r227, 1;
	fma.rn.f32 	%f413, %f411, %f407, 0fC09DE9E6;
	fma.rn.f32 	%f414, %f410, %f412, 0f00000000;
	and.b32  	%r235, %r234, 1;
	fma.rn.f32 	%f443, %f441, %f437, 0fC09DE9E6;
	fma.rn.f32 	%f444, %f440, %f442, 0f00000000;
	and.b32  	%r252, %r251, 1;
	fma.rn.f32 	%f477, %f475, %f471, 0fC09DE9E6;
	fma.rn.f32 	%f478, %f474, %f476, 0f00000000;
	and.b32  	%r262, %r261, 1;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	and.b32  	%r284, %r283, 1;
	fma.rn.f32 	%f582, %f580, %f576, 0fC09DE9E6;
	fma.rn.f32 	%f583, %f579, %f581, 0f00000000;
	and.b32  	%r316, %r315, 1;
	cvt.rzi.s32.f32 	%r332, %f628;
	fma.rn.f32 	%f633, %f631, %f630, 0fC0A55DF6;
	fma.rn.f32 	%f634, %f632, %f630, 0f4081E0CF;
	fma.rn.f32 	%f635, %f630, %f629, 0f00000000;
	cvt.rzi.s32.f32 	%r356, %f680;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f737, %f736, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f738, %f736, 0f3E684E12, 0fBFAAD2E0;
	mul.hi.u16 	%rs2, %rs1, -21845;
	fma.rn.f32 	%f174, %f172, %f166, 0f3F800000;
	fma.rn.f32 	%f175, %f165, 0f40490FDB, %f173;
	setp.eq.b32 	%p16, %r174, 1;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	setp.eq.b32 	%p22, %r181, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p28, %r192, 1;
	fma.rn.f32 	%f277, %f275, %f269, 0f3F800000;
	fma.rn.f32 	%f278, %f268, 0f40490FDB, %f276;
	setp.eq.b32 	%p34, %r199, 1;
	fma.rn.f32 	%f312, %f310, %f304, 0f3F800000;
	fma.rn.f32 	%f313, %f303, 0f40490FDB, %f311;
	setp.eq.b32 	%p40, %r210, 1;
	fma.rn.f32 	%f346, %f344, %f338, 0f3F800000;
	fma.rn.f32 	%f347, %f337, 0f40490FDB, %f345;
	setp.eq.b32 	%p46, %r217, 1;
	fma.rn.f32 	%f381, %f379, %f373, 0f3F800000;
	fma.rn.f32 	%f382, %f372, 0f40490FDB, %f380;
	setp.eq.b32 	%p52, %r228, 1;
	fma.rn.f32 	%f415, %f413, %f407, 0f3F800000;
	fma.rn.f32 	%f416, %f406, 0f40490FDB, %f414;
	setp.eq.b32 	%p58, %r235, 1;
	fma.rn.f32 	%f445, %f443, %f437, 0f3F800000;
	fma.rn.f32 	%f446, %f436, 0f40490FDB, %f444;
	setp.eq.b32 	%p63, %r252, 1;
	fma.rn.f32 	%f479, %f477, %f471, 0f3F800000;
	fma.rn.f32 	%f480, %f470, 0f40490FDB, %f478;
	setp.eq.b32 	%p70, %r262, 1;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	setp.eq.b32 	%p90, %r284, 1;
	fma.rn.f32 	%f584, %f582, %f576, 0f3F800000;
	fma.rn.f32 	%f585, %f575, 0f40490FDB, %f583;
	setp.eq.b32 	%p110, %r316, 1;
	fma.rn.f32 	%f636, %f634, %f630, 0fC09DE9E6;
	fma.rn.f32 	%f637, %f633, %f635, 0f00000000;
	and.b32  	%r333, %r332, 1;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	and.b32  	%r357, %r356, 1;
	cvt.rzi.s32.f32 	%r372, %f734;
	fma.rn.f32 	%f739, %f737, %f736, 0fC0A55DF6;
	fma.rn.f32 	%f740, %f738, %f736, 0f4081E0CF;
	fma.rn.f32 	%f741, %f736, %f735, 0f00000000;
	shr.u16 	%rs3, %rs2, 12;
	selp.f32 	%f176, %f174, %f175, %p16;
	and.b32  	%r175, %r173, 2;
	mov.f32 	%f177, 0f00000000;
	selp.f32 	%f210, %f208, %f209, %p22;
	and.b32  	%r182, %r180, 2;
	selp.f32 	%f245, %f243, %f244, %p28;
	and.b32  	%r193, %r191, 2;
	selp.f32 	%f279, %f277, %f278, %p34;
	and.b32  	%r200, %r198, 2;
	selp.f32 	%f314, %f312, %f313, %p40;
	and.b32  	%r211, %r209, 2;
	selp.f32 	%f348, %f346, %f347, %p46;
	and.b32  	%r218, %r216, 2;
	selp.f32 	%f383, %f381, %f382, %p52;
	and.b32  	%r229, %r227, 2;
	selp.f32 	%f417, %f415, %f416, %p58;
	and.b32  	%r236, %r234, 2;
	selp.f32 	%f447, %f445, %f446, %p63;
	and.b32  	%r253, %r251, 2;
	selp.f32 	%f481, %f479, %f480, %p70;
	and.b32  	%r263, %r261, 2;
	selp.f32 	%f534, %f532, %f533, %p90;
	and.b32  	%r285, %r283, 2;
	selp.f32 	%f586, %f584, %f585, %p110;
	and.b32  	%r317, %r315, 2;
	fma.rn.f32 	%f638, %f636, %f630, 0f3F800000;
	fma.rn.f32 	%f639, %f629, 0f40490FDB, %f637;
	setp.eq.b32 	%p130, %r333, 1;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	setp.eq.b32 	%p150, %r357, 1;
	fma.rn.f32 	%f742, %f740, %f736, 0fC09DE9E6;
	fma.rn.f32 	%f743, %f739, %f741, 0f00000000;
	and.b32  	%r373, %r372, 1;
	mul.lo.s16 	%rs4, %rs3, 6144;
	setp.eq.s32 	%p17, %r175, 0;
	sub.f32 	%f178, %f177, %f176;
	setp.eq.s32 	%p23, %r182, 0;
	sub.f32 	%f212, %f177, %f210;
	setp.eq.s32 	%p29, %r193, 0;
	sub.f32 	%f247, %f177, %f245;
	setp.eq.s32 	%p35, %r200, 0;
	sub.f32 	%f281, %f177, %f279;
	setp.eq.s32 	%p41, %r211, 0;
	sub.f32 	%f316, %f177, %f314;
	setp.eq.s32 	%p47, %r218, 0;
	sub.f32 	%f350, %f177, %f348;
	setp.eq.s32 	%p53, %r229, 0;
	sub.f32 	%f385, %f177, %f383;
	setp.eq.s32 	%p59, %r236, 0;
	sub.f32 	%f419, %f177, %f417;
	setp.eq.s32 	%p64, %r253, 0;
	neg.f32 	%f449, %f447;
	add.s32 	%r254, %r251, 1;
	cvt.rzi.f32.f32 	%f454, %f427;
	setp.eq.s32 	%p71, %r263, 0;
	neg.f32 	%f483, %f481;
	add.s32 	%r264, %r261, 1;
	cvt.rzi.f32.f32 	%f487, %f461;
	setp.eq.s32 	%p91, %r285, 0;
	neg.f32 	%f536, %f534;
	add.s32 	%r286, %r283, 1;
	cvt.rzi.f32.f32 	%f541, %f841;
	setp.eq.s32 	%p111, %r317, 0;
	neg.f32 	%f588, %f586;
	add.s32 	%r318, %r315, 1;
	cvt.rzi.f32.f32 	%f593, %f825;
	selp.f32 	%f640, %f638, %f639, %p130;
	and.b32  	%r334, %r332, 2;
	selp.f32 	%f692, %f690, %f691, %p150;
	and.b32  	%r358, %r356, 2;
	fma.rn.f32 	%f744, %f742, %f736, 0f3F800000;
	fma.rn.f32 	%f745, %f735, 0f40490FDB, %f743;
	setp.eq.b32 	%p171, %r373, 1;
	sub.s16 	%rs5, %rs1, %rs4;
	selp.f32 	%f179, %f176, %f178, %p17;
	selp.f32 	%f213, %f210, %f212, %p23;
	selp.f32 	%f248, %f245, %f247, %p29;
	selp.f32 	%f282, %f279, %f281, %p35;
	selp.f32 	%f317, %f314, %f316, %p41;
	selp.f32 	%f351, %f348, %f350, %p47;
	selp.f32 	%f386, %f383, %f385, %p53;
	selp.f32 	%f420, %f417, %f419, %p59;
	selp.f32 	%f448, %f446, %f445, %p63;
	selp.f32 	%f450, %f447, %f449, %p64;
	and.b32  	%r255, %r254, 2;
	setp.eq.f32 	%p66, %f454, %f427;
	mul.f32 	%f455, %f427, 0f00000000;
	selp.f32 	%f482, %f480, %f479, %p70;
	selp.f32 	%f484, %f481, %f483, %p71;
	and.b32  	%r265, %r264, 2;
	setp.eq.f32 	%p73, %f487, %f461;
	mul.f32 	%f488, %f461, 0f00000000;
	selp.f32 	%f535, %f533, %f532, %p90;
	selp.f32 	%f537, %f534, %f536, %p91;
	and.b32  	%r287, %r286, 2;
	setp.eq.f32 	%p93, %f541, %f841;
	mul.f32 	%f542, %f841, 0f00000000;
	selp.f32 	%f587, %f585, %f584, %p110;
	selp.f32 	%f589, %f586, %f588, %p111;
	and.b32  	%r319, %r318, 2;
	setp.eq.f32 	%p113, %f593, %f825;
	mul.f32 	%f594, %f825, 0f00000000;
	setp.eq.s32 	%p131, %r334, 0;
	neg.f32 	%f642, %f640;
	add.s32 	%r335, %r332, 1;
	cvt.rzi.f32.f32 	%f647, %f829;
	setp.eq.s32 	%p151, %r358, 0;
	neg.f32 	%f694, %f692;
	add.s32 	%r359, %r356, 1;
	cvt.rzi.f32.f32 	%f699, %f833;
	selp.f32 	%f746, %f744, %f745, %p171;
	and.b32  	%r374, %r372, 2;
	cvt.u32.u16 	%r163, %rs5;
	mul.f32 	%f106, %f179, %f179;
	mul.f32 	%f4, %f213, %f213;
	mul.f32 	%f8, %f248, %f248;
	mul.f32 	%f13, %f282, %f282;
	mul.f32 	%f17, %f317, %f317;
	mul.f32 	%f22, %f351, %f351;
	mul.f32 	%f26, %f386, %f386;
	mul.f32 	%f31, %f420, %f420;
	setp.eq.s32 	%p65, %r255, 0;
	sub.f32 	%f452, %f177, %f448;
	selp.f32 	%f456, %f455, %f450, %p66;
	abs.f32 	%f457, %f427;
	setp.eq.s32 	%p72, %r265, 0;
	sub.f32 	%f485, %f177, %f482;
	selp.f32 	%f489, %f488, %f484, %p73;
	abs.f32 	%f490, %f461;
	setp.eq.s32 	%p92, %r287, 0;
	sub.f32 	%f539, %f177, %f535;
	selp.f32 	%f123, %f542, %f537, %p93;
	abs.f32 	%f543, %f841;
	setp.eq.s32 	%p112, %r319, 0;
	sub.f32 	%f591, %f177, %f587;
	selp.f32 	%f595, %f594, %f589, %p113;
	abs.f32 	%f596, %f825;
	selp.f32 	%f641, %f639, %f638, %p130;
	selp.f32 	%f643, %f640, %f642, %p131;
	and.b32  	%r336, %r335, 2;
	setp.eq.f32 	%p133, %f647, %f829;
	mul.f32 	%f648, %f829, 0f00000000;
	selp.f32 	%f693, %f691, %f690, %p150;
	selp.f32 	%f695, %f692, %f694, %p151;
	and.b32  	%r360, %r359, 2;
	setp.eq.f32 	%p153, %f699, %f833;
	mul.f32 	%f700, %f833, 0f00000000;
	setp.eq.s32 	%p172, %r374, 0;
	neg.f32 	%f748, %f746;
	add.s32 	%r375, %r372, 1;
	cvt.rzi.f32.f32 	%f753, %f845;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd50, %r163, 4;
	mul.f32 	%f183, %f106, 0f3C8A83B8;
	mul.f32 	%f217, %f4, 0f3C8A83B8;
	mul.f32 	%f252, %f8, 0f3C8A83B8;
	mul.f32 	%f286, %f13, 0f3C8A83B8;
	mul.f32 	%f321, %f17, 0f3C8A83B8;
	mul.f32 	%f355, %f22, 0f3C8A83B8;
	mul.f32 	%f390, %f26, 0f3C8A83B8;
	mul.f32 	%f423, %f31, 0f3C8A83B8;
	selp.f32 	%f453, %f448, %f452, %p65;
	setp.gt.f32 	%p67, %f457, 0f4B800000;
	add.f32 	%f458, %f456, 0f3F800000;
	selp.f32 	%f486, %f482, %f485, %p72;
	setp.gt.f32 	%p74, %f490, 0f4B800000;
	add.f32 	%f491, %f489, 0f3F800000;
	selp.f32 	%f540, %f535, %f539, %p92;
	setp.gt.f32 	%p94, %f543, 0f4B800000;
	add.f32 	%f544, %f123, 0f3F800000;
	selp.f32 	%f592, %f587, %f591, %p112;
	setp.gt.f32 	%p114, %f596, 0f4B800000;
	add.f32 	%f597, %f595, 0f3F800000;
	setp.eq.s32 	%p132, %r336, 0;
	sub.f32 	%f645, %f177, %f641;
	selp.f32 	%f69, %f648, %f643, %p133;
	abs.f32 	%f649, %f829;
	setp.eq.s32 	%p152, %r360, 0;
	sub.f32 	%f697, %f177, %f693;
	selp.f32 	%f701, %f700, %f695, %p153;
	abs.f32 	%f702, %f833;
	selp.f32 	%f747, %f745, %f744, %p171;
	selp.f32 	%f749, %f746, %f748, %p172;
	and.b32  	%r376, %r375, 2;
	setp.eq.f32 	%p174, %f753, %f845;
	mul.f32 	%f754, %f845, 0f00000000;
	add.s64 	%rd51, %rd1, %rd50;
	mul.f32 	%f3, %f183, %f815;
	mul.f32 	%f218, %f217, %f816;
	mul.f32 	%f12, %f252, %f817;
	mul.f32 	%f287, %f286, %f818;
	mul.f32 	%f21, %f321, %f819;
	mul.f32 	%f356, %f355, %f820;
	mul.f32 	%f30, %f390, %f821;
	mul.f32 	%f424, %f423, %f822;
	selp.f32 	%f459, %f458, %f453, %p67;
	selp.f32 	%f492, %f491, %f486, %p74;
	selp.f32 	%f124, %f544, %f540, %p94;
	selp.f32 	%f598, %f597, %f592, %p114;
	selp.f32 	%f646, %f641, %f645, %p132;
	setp.gt.f32 	%p134, %f649, 0f4B800000;
	add.f32 	%f650, %f69, 0f3F800000;
	selp.f32 	%f698, %f693, %f697, %p152;
	setp.gt.f32 	%p154, %f702, 0f4B800000;
	add.f32 	%f703, %f701, 0f3F800000;
	and.b32  	%r49, %r14, 1;
	setp.eq.s32 	%p173, %r376, 0;
	sub.f32 	%f751, %f177, %f747;
	selp.f32 	%f755, %f754, %f749, %p174;
	abs.f32 	%f756, %f845;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.global.u32 	%r87, [%rd51];
	mov.b32 	%r185, %f218;
	mov.b32 	%r184, %f3;
	mov.b32 	%r203, %f287;
	mov.b32 	%r202, %f12;
	mov.b32 	%r221, %f356;
	mov.b32 	%r220, %f21;
	mov.b32 	%r239, %f424;
	mov.b32 	%r238, %f30;
	mov.b32 	%r241, %f459;
	mov.b32 	%r242, %f492;
	mov.b32 	%r244, %f456;
	mov.b32 	%r245, %f489;
	mov.b32 	%r302, %f598;
	mov.b32 	%r301, %f124;
	mov.b32 	%r308, %f595;
	mov.b32 	%r307, %f123;
	selp.f32 	%f70, %f650, %f646, %p134;
	selp.f32 	%f704, %f703, %f698, %p154;
	setp.eq.s32 	%p168, %r49, %r90;
	selp.f32 	%f752, %f747, %f751, %p173;
	setp.gt.f32 	%p175, %f756, 0f4B800000;
	add.f32 	%f757, %f755, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r183, %r185, %r184;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r201, %r203, %r202;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r219, %r221, %r220;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r237, %r239, %r238;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r240, %r242, %r241;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r243, %r245, %r244;
	// end inline asm
	xor.b32  	%r305, %r308, -2147483648;
	xor.b32  	%r304, %r307, -2147483648;
	mov.b32 	%r349, %f704;
	mov.b32 	%r348, %f70;
	mov.b32 	%r352, %f701;
	mov.b32 	%r351, %f69;
	selp.f32 	%f758, %f757, %f752, %p175;
	selp.f32 	%f142, 0f3F800000, 0f00000000, %p168;
	// begin inline asm
	cvt.rn.f16x2.f32 %r300, %r302, %r301;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r303, %r305, %r304;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r306, %r308, %r307;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r309, %r302, %r301;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r347, %r349, %r348;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r350, %r352, %r351;
	// end inline asm
	mul.f32 	%f143, %f758, %f142;
	mul.f32 	%f144, %f755, %f142;
	add.f32 	%f781, %f837, %f837;
	mov.b32 	%r399, %f781;
	and.b32  	%r400, %r399, -2147483648;
	or.b32  	%r401, %r400, 1056964608;
	mov.b32 	%f782, %r401;
	add.f32 	%f783, %f781, %f782;
	cvt.rzi.f32.f32 	%f784, %f783;
	abs.f32 	%f785, %f781;
	setp.gt.f32 	%p189, %f785, 0f4B000000;
	selp.f32 	%f786, %f781, %f784, %p189;
	cvt.rzi.f32.f32 	%f787, %f781;
	setp.lt.f32 	%p190, %f785, 0f3F000000;
	selp.f32 	%f788, %f787, %f786, %p190;
	cvt.rzi.s32.f32 	%r402, %f788;
	fma.rn.f32 	%f789, %f788, 0fBF000000, %f837;
	mul.f32 	%f790, %f789, %f789;
	fma.rn.f32 	%f791, %f790, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f792, %f790, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f793, %f791, %f790, 0fC0A55DF6;
	fma.rn.f32 	%f794, %f792, %f790, 0f4081E0CF;
	fma.rn.f32 	%f795, %f790, %f789, 0f00000000;
	fma.rn.f32 	%f796, %f794, %f790, 0fC09DE9E6;
	fma.rn.f32 	%f797, %f793, %f795, 0f00000000;
	fma.rn.f32 	%f798, %f796, %f790, 0f3F800000;
	fma.rn.f32 	%f799, %f789, 0f40490FDB, %f797;
	and.b32  	%r403, %r402, 1;
	setp.eq.b32 	%p191, %r403, 1;
	selp.f32 	%f800, %f798, %f799, %p191;
	selp.f32 	%f801, %f799, %f798, %p191;
	and.b32  	%r404, %r402, 2;
	setp.eq.s32 	%p192, %r404, 0;
	neg.f32 	%f802, %f800;
	selp.f32 	%f803, %f800, %f802, %p192;
	add.s32 	%r405, %r402, 1;
	and.b32  	%r406, %r405, 2;
	setp.eq.s32 	%p193, %r406, 0;
	sub.f32 	%f805, %f177, %f801;
	selp.f32 	%f806, %f801, %f805, %p193;
	cvt.rzi.f32.f32 	%f807, %f837;
	setp.eq.f32 	%p194, %f807, %f837;
	mul.f32 	%f808, %f837, 0f00000000;
	selp.f32 	%f809, %f808, %f803, %p194;
	abs.f32 	%f810, %f837;
	setp.gt.f32 	%p195, %f810, 0f4B800000;
	add.f32 	%f811, %f809, 0f3F800000;
	selp.f32 	%f812, %f811, %f806, %p195;
	mul.f32 	%f813, %f812, %f142;
	mul.f32 	%f814, %f809, %f142;
	mov.b32 	%r389, %f813;
	mov.b32 	%r388, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r387, %r389, %r388;
	// end inline asm
	mov.b32 	%r395, %f814;
	xor.b32  	%r392, %r395, -2147483648;
	mov.b32 	%r394, %f144;
	xor.b32  	%r391, %r394, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r390, %r392, %r391;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r393, %r395, %r394;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r389, %r388;
	// end inline asm
	and.b32  	%r408, %r84, 12;
	cvt.u16.u32 	%rs6, %r81;
	mul.hi.u16 	%rs7, %rs6, -21845;
	shr.u16 	%rs8, %rs7, 8;
	mul.lo.s16 	%rs9, %rs8, 384;
	sub.s16 	%rs10, %rs6, %rs9;
	shl.b16 	%rs11, %rs10, 5;
	cvt.u32.u16 	%r409, %rs11;
	and.b32  	%r410, %r84, 16;
	and.b32  	%r411, %r88, 8;
	and.b32  	%r412, %r82, 16;
	or.b32  	%r63, %r411, %r412;
	shl.b32 	%r413, %r2, 2;
	and.b32  	%r64, %r413, 32;
	and.b32  	%r65, %r2, 7;
	and.b32  	%r414, %r84, 28;
	or.b32  	%r66, %r414, %r409;
	and.b32  	%r67, %r4, 8;
	shl.b32 	%r415, %r4, 4;
	or.b32  	%r416, %r415, %r67;
	shr.u32 	%r417, %r416, 2;
	and.b32  	%r418, %r417, 14;
	or.b32  	%r419, %r418, %r410;
	and.b32  	%r420, %r88, 2;
	or.b32  	%r68, %r408, %r420;
	shr.u32 	%r421, %r2, 1;
	and.b32  	%r422, %r3, 32;
	or.b32  	%r423, %r412, %r421;
	or.b32  	%r424, %r423, %r422;
	or.b32  	%r425, %r424, 8;
	or.b32  	%r426, %r83, %r86;
	or.b32  	%r427, %r426, %r85;
	bfe.u32 	%r428, %r427, 1, 4;
	mul.lo.s32 	%r429, %r428, 65;
	add.s32 	%r430, %r424, %r429;
	add.s32 	%r431, %r425, %r429;
	shl.b32 	%r432, %r2, 1;
	and.b32  	%r433, %r432, 14;
	mad.lo.s32 	%r434, %r145, 393216, -1179648;
	or.b32  	%r435, %r81, %r14;
	and.b32  	%r436, %r413, 28;
	or.b32  	%r437, %r435, %r436;
	cvt.u16.u32 	%rs12, %r437;
	mul.hi.u16 	%rs13, %rs12, -21845;
	shr.u16 	%rs14, %rs13, 13;
	mul.lo.s16 	%rs15, %rs14, 12288;
	sub.s16 	%rs16, %rs12, %rs15;
	mul.wide.u16 	%r438, %rs16, 32;
	or.b32  	%r69, %r438, %r414;
	cvt.s64.s32 	%rd5, %r434;
	shr.u32 	%r439, %r2, 3;
	or.b32  	%r440, %r439, 2;
	or.b32  	%r441, %r439, 4;
	or.b32  	%r442, %r439, 6;
	bfe.u32 	%r443, %r88, 3, 1;
	bfe.s32 	%r444, %r2, 1, 1;
	and.b32  	%r445, %r444, 260;
	bfe.s32 	%r446, %r2, 2, 1;
	and.b32  	%r447, %r446, 130;
	mul.lo.s32 	%r448, %r439, 1057;
	and.b32  	%r449, %r2, 1;
	neg.s32 	%r450, %r449;
	and.b32  	%r451, %r450, 520;
	add.s32 	%r452, %r451, %r419;
	add.s32 	%r453, %r452, %r445;
	mad.lo.s32 	%r454, %r443, 65, %r453;
	add.s32 	%r455, %r454, %r447;
	add.s32 	%r456, %r455, %r448;
	mul.wide.u32 	%rd52, %r456, 4;
	mov.u64 	%rd53, shmem;
	add.s64 	%rd6, %rd53, %rd52;
	add.s32 	%r457, %r455, 32;
	add.s32 	%r458, %r457, %r448;
	mul.wide.u32 	%rd54, %r458, 4;
	add.s64 	%rd7, %rd53, %rd54;
	add.s32 	%r459, %r455, 1;
	add.s32 	%r460, %r459, %r448;
	mul.wide.u32 	%rd55, %r460, 4;
	add.s64 	%rd8, %rd53, %rd55;
	add.s32 	%r461, %r455, 33;
	add.s32 	%r462, %r461, %r448;
	mul.wide.u32 	%rd56, %r462, 4;
	add.s64 	%rd9, %rd53, %rd56;
	mul.lo.s32 	%r463, %r440, 1057;
	add.s32 	%r464, %r455, %r463;
	mul.wide.u32 	%rd57, %r464, 4;
	add.s64 	%rd10, %rd53, %rd57;
	add.s32 	%r465, %r457, %r463;
	mul.wide.u32 	%rd58, %r465, 4;
	add.s64 	%rd11, %rd53, %rd58;
	add.s32 	%r466, %r459, %r463;
	mul.wide.u32 	%rd59, %r466, 4;
	add.s64 	%rd12, %rd53, %rd59;
	add.s32 	%r467, %r461, %r463;
	mul.wide.u32 	%rd60, %r467, 4;
	add.s64 	%rd13, %rd53, %rd60;
	mul.lo.s32 	%r468, %r441, 1057;
	add.s32 	%r469, %r455, %r468;
	mul.wide.u32 	%rd61, %r469, 4;
	add.s64 	%rd14, %rd53, %rd61;
	add.s32 	%r470, %r457, %r468;
	mul.wide.u32 	%rd62, %r470, 4;
	add.s64 	%rd15, %rd53, %rd62;
	add.s32 	%r471, %r459, %r468;
	mul.wide.u32 	%rd63, %r471, 4;
	add.s64 	%rd16, %rd53, %rd63;
	add.s32 	%r472, %r461, %r468;
	mul.wide.u32 	%rd64, %r472, 4;
	add.s64 	%rd17, %rd53, %rd64;
	mul.lo.s32 	%r473, %r442, 1057;
	add.s32 	%r474, %r455, %r473;
	mul.wide.u32 	%rd65, %r474, 4;
	add.s64 	%rd18, %rd53, %rd65;
	add.s32 	%r475, %r457, %r473;
	mul.wide.u32 	%rd66, %r475, 4;
	add.s64 	%rd19, %rd53, %rd66;
	add.s32 	%r476, %r459, %r473;
	mul.wide.u32 	%rd67, %r476, 4;
	add.s64 	%rd20, %rd53, %rd67;
	add.s32 	%r477, %r461, %r473;
	mul.wide.u32 	%rd68, %r477, 4;
	add.s64 	%rd21, %rd53, %rd68;
	mul.lo.s32 	%r478, %r92, 520;
	add.s32 	%r70, %r424, %r478;
	add.s32 	%r71, %r425, %r478;
	or.b32  	%r479, %r433, %r92;
	mul.lo.s32 	%r480, %r479, 65;
	add.s32 	%r481, %r480, %r410;
	add.s32 	%r482, %r481, %r418;
	add.s32 	%r483, %r482, %r448;
	mul.wide.u32 	%rd69, %r483, 4;
	add.s64 	%rd22, %rd53, %rd69;
	cvt.u64.u32 	%rd70, %r448;
	cvt.u64.u32 	%rd71, %r418;
	cvt.u64.u32 	%rd72, %r480;
	cvt.u64.u32 	%rd73, %r410;
	add.s64 	%rd74, %rd73, %rd72;
	add.s64 	%rd75, %rd74, %rd71;
	add.s64 	%rd76, %rd75, %rd70;
	shl.b64 	%rd77, %rd76, 2;
	add.s64 	%rd23, %rd53, %rd77;
	cvt.u64.u32 	%rd78, %r419;
	add.s64 	%rd79, %rd78, %rd72;
	add.s64 	%rd80, %rd79, %rd70;
	shl.b64 	%rd81, %rd80, 2;
	add.s64 	%rd24, %rd53, %rd81;
	add.s32 	%r484, %r482, %r463;
	mul.wide.u32 	%rd82, %r484, 4;
	add.s64 	%rd25, %rd53, %rd82;
	cvt.u64.u32 	%rd83, %r463;
	add.s64 	%rd84, %rd75, %rd83;
	shl.b64 	%rd85, %rd84, 2;
	add.s64 	%rd26, %rd53, %rd85;
	add.s64 	%rd86, %rd79, %rd83;
	shl.b64 	%rd87, %rd86, 2;
	add.s64 	%rd27, %rd53, %rd87;
	add.s32 	%r485, %r482, %r468;
	mul.wide.u32 	%rd88, %r485, 4;
	add.s64 	%rd28, %rd53, %rd88;
	cvt.u64.u32 	%rd89, %r468;
	add.s64 	%rd90, %rd75, %rd89;
	shl.b64 	%rd91, %rd90, 2;
	add.s64 	%rd29, %rd53, %rd91;
	add.s64 	%rd92, %rd79, %rd89;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd30, %rd53, %rd93;
	add.s32 	%r486, %r482, %r473;
	mul.wide.u32 	%rd94, %r486, 4;
	add.s64 	%rd31, %rd53, %rd94;
	cvt.u64.u32 	%rd95, %r473;
	add.s64 	%rd96, %rd75, %rd95;
	shl.b64 	%rd97, %rd96, 2;
	add.s64 	%rd32, %rd53, %rd97;
	add.s64 	%rd98, %rd79, %rd95;
	shl.b64 	%rd99, %rd98, 2;
	add.s64 	%rd33, %rd53, %rd99;
	mul.wide.u32 	%rd100, %r431, 4;
	add.s64 	%rd34, %rd53, %rd100;
	mul.wide.u32 	%rd101, %r430, 4;
	add.s64 	%rd35, %rd53, %rd101;
	setp.eq.s32 	%p197, %r67, 0;
	mov.u16 	%rs304, 25600;
	mov.u16 	%rs252, 21504;
	setp.lt.u32 	%p211, %r2, 8;
	mov.u32 	%r2546, %r2537;
	mov.u32 	%r2547, %r2537;
	mov.u32 	%r2548, %r2537;
	mov.u32 	%r2549, %r2537;
	mov.u32 	%r2558, %r2537;
	mov.u32 	%r2559, %r2537;
	mov.u32 	%r78, %r2537;
	bra.uni 	$L__BB0_90;
$L__BB0_94:                             // %pass9908
                                        //   in Loop: Header=BB0_90 Depth=1
	mad.lo.s32 	%r2532, %r127, 393216, %r69;
	cvt.s64.s32 	%rd128, %r2532;
	add.s64 	%rd129, %rd128, %rd5;
	mul.hi.s64 	%rd130, %rd129, 3074457345618258603;
	shr.u64 	%rd131, %rd130, 63;
	shr.s64 	%rd132, %rd130, 26;
	add.s64 	%rd133, %rd132, %rd131;
	setp.lt.s64 	%p217, %rd129, 0;
	mul.lo.s64 	%rd134, %rd133, 402653184;
	setp.ne.s64 	%p218, %rd134, %rd129;
	and.pred  	%p219, %p217, %p218;
	selp.s64 	%rd135, -1, 0, %p219;
	add.s64 	%rd136, %rd133, %rd135;
	mul.lo.s64 	%rd137, %rd136, 4611686018024734720;
	add.s64 	%rd138, %rd137, %rd129;
	shl.b64 	%rd139, %rd138, 2;
	add.s64 	%rd140, %rd3, %rd139;
	st.global.v4.u32 	[%rd140], {%r134, %r136, %r135, %r137};
	add.s32 	%r2533, %r2532, 786432;
	cvt.s64.s32 	%rd141, %r2533;
	add.s64 	%rd142, %rd141, %rd5;
	mul.hi.s64 	%rd143, %rd142, 3074457345618258603;
	shr.u64 	%rd144, %rd143, 63;
	shr.s64 	%rd145, %rd143, 26;
	add.s64 	%rd146, %rd145, %rd144;
	setp.lt.s64 	%p220, %rd142, 0;
	mul.lo.s64 	%rd147, %rd146, 402653184;
	setp.ne.s64 	%p221, %rd147, %rd142;
	and.pred  	%p222, %p220, %p221;
	selp.s64 	%rd148, -1, 0, %p222;
	add.s64 	%rd149, %rd146, %rd148;
	mul.lo.s64 	%rd150, %rd149, 4611686018024734720;
	add.s64 	%rd151, %rd150, %rd142;
	shl.b64 	%rd152, %rd151, 2;
	add.s64 	%rd153, %rd3, %rd152;
	st.global.v4.u32 	[%rd153], {%r138, %r140, %r139, %r141};
	setp.ne.s32 	%p223, %r78, 32512;
	add.s32 	%r78, %r78, 256;
	add.s32 	%r2534, %r78, %r143;
	setp.lt.s32 	%p224, %r2534, %r144;
	and.pred  	%p225, %p223, %p224;
	@%p225 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_95;
$L__BB0_90:                             // %L1352
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_91 Depth 2
	or.b32  	%r552, %r78, %r63;
	or.b32  	%r553, %r552, %r64;
	or.b32  	%r554, %r553, %r65;
	add.s32 	%r555, %r554, %r143;
	mad.lo.s32 	%r556, %r555, 12288, %r66;
	mul.hi.s32 	%r557, %r556, 715827883;
	shr.u32 	%r558, %r557, 31;
	shr.s32 	%r559, %r557, 26;
	add.s32 	%r560, %r559, %r558;
	setp.lt.s32 	%p198, %r556, 0;
	mul.lo.s32 	%r561, %r560, 402653184;
	setp.ne.s32 	%p199, %r561, %r556;
	and.pred  	%p200, %p198, %p199;
	selp.s32 	%r562, -1, 0, %p200;
	add.s32 	%r563, %r560, %r562;
	mad.lo.s32 	%r564, %r563, -402653184, %r556;
	mul.wide.s32 	%rd102, %r564, 4;
	add.s64 	%rd103, %rd2, %rd102;
	ld.global.v4.u32 	{%r565, %r566, %r567, %r568}, [%rd103];
	or.b32  	%r569, %r554, 64;
	add.s32 	%r570, %r569, %r143;
	mad.lo.s32 	%r571, %r570, 12288, %r66;
	mul.hi.s32 	%r572, %r571, 715827883;
	shr.u32 	%r573, %r572, 31;
	shr.s32 	%r574, %r572, 26;
	add.s32 	%r575, %r574, %r573;
	setp.lt.s32 	%p201, %r571, 0;
	mul.lo.s32 	%r576, %r575, 402653184;
	setp.ne.s32 	%p202, %r576, %r571;
	and.pred  	%p203, %p201, %p202;
	selp.s32 	%r577, -1, 0, %p203;
	add.s32 	%r578, %r575, %r577;
	mad.lo.s32 	%r579, %r578, -402653184, %r571;
	mul.wide.s32 	%rd104, %r579, 4;
	add.s64 	%rd105, %rd2, %rd104;
	ld.global.v4.u32 	{%r580, %r581, %r582, %r583}, [%rd105];
	or.b32  	%r584, %r554, 128;
	add.s32 	%r585, %r584, %r143;
	mad.lo.s32 	%r586, %r585, 12288, %r66;
	mul.hi.s32 	%r587, %r586, 715827883;
	shr.u32 	%r588, %r587, 31;
	shr.s32 	%r589, %r587, 26;
	add.s32 	%r590, %r589, %r588;
	setp.lt.s32 	%p204, %r586, 0;
	mul.lo.s32 	%r591, %r590, 402653184;
	setp.ne.s32 	%p205, %r591, %r586;
	and.pred  	%p206, %p204, %p205;
	selp.s32 	%r592, -1, 0, %p206;
	add.s32 	%r593, %r590, %r592;
	mad.lo.s32 	%r594, %r593, -402653184, %r586;
	mul.wide.s32 	%rd106, %r594, 4;
	add.s64 	%rd107, %rd2, %rd106;
	ld.global.v4.u32 	{%r595, %r596, %r597, %r598}, [%rd107];
	or.b32  	%r599, %r554, 192;
	add.s32 	%r600, %r599, %r143;
	mad.lo.s32 	%r601, %r600, 12288, %r66;
	mul.hi.s32 	%r602, %r601, 715827883;
	shr.u32 	%r603, %r602, 31;
	shr.s32 	%r604, %r602, 26;
	add.s32 	%r605, %r604, %r603;
	setp.lt.s32 	%p207, %r601, 0;
	mul.lo.s32 	%r606, %r605, 402653184;
	setp.ne.s32 	%p208, %r606, %r601;
	and.pred  	%p209, %p207, %p208;
	selp.s32 	%r607, -1, 0, %p209;
	add.s32 	%r608, %r605, %r607;
	mad.lo.s32 	%r609, %r608, -402653184, %r601;
	mul.wide.s32 	%rd108, %r609, 4;
	add.s64 	%rd109, %rd2, %rd108;
	ld.global.v4.u32 	{%r610, %r611, %r612, %r613}, [%rd109];
	selp.b32 	%r614, %r567, %r565, %p197;
	shfl.sync.bfly.b32	%r615, %r614, 8, 31, -1;
	selp.b32 	%r488, %r565, %r615, %p197;
	selp.b32 	%r489, %r615, %r567, %p197;
	selp.b32 	%r616, %r568, %r566, %p197;
	shfl.sync.bfly.b32	%r617, %r616, 8, 31, -1;
	selp.b32 	%r496, %r566, %r617, %p197;
	selp.b32 	%r497, %r617, %r568, %p197;
	selp.b32 	%r618, %r582, %r580, %p197;
	shfl.sync.bfly.b32	%r619, %r618, 8, 31, -1;
	selp.b32 	%r504, %r580, %r619, %p197;
	selp.b32 	%r505, %r619, %r582, %p197;
	selp.b32 	%r620, %r583, %r581, %p197;
	shfl.sync.bfly.b32	%r621, %r620, 8, 31, -1;
	selp.b32 	%r512, %r581, %r621, %p197;
	selp.b32 	%r513, %r621, %r583, %p197;
	selp.b32 	%r622, %r597, %r595, %p197;
	shfl.sync.bfly.b32	%r623, %r622, 8, 31, -1;
	selp.b32 	%r520, %r595, %r623, %p197;
	selp.b32 	%r521, %r623, %r597, %p197;
	selp.b32 	%r624, %r598, %r596, %p197;
	shfl.sync.bfly.b32	%r625, %r624, 8, 31, -1;
	selp.b32 	%r528, %r596, %r625, %p197;
	selp.b32 	%r529, %r625, %r598, %p197;
	selp.b32 	%r626, %r612, %r610, %p197;
	shfl.sync.bfly.b32	%r627, %r626, 8, 31, -1;
	selp.b32 	%r536, %r610, %r627, %p197;
	selp.b32 	%r537, %r627, %r612, %p197;
	selp.b32 	%r628, %r613, %r611, %p197;
	shfl.sync.bfly.b32	%r629, %r628, 8, 31, -1;
	selp.b32 	%r544, %r611, %r629, %p197;
	selp.b32 	%r545, %r629, %r613, %p197;
	mov.u32 	%r546, 21520;
	// begin inline asm
	prmt.b32 %r487, %r488, %r489, %r546;
	// end inline asm
	mov.u32 	%r550, 30258;
	// begin inline asm
	prmt.b32 %r491, %r488, %r489, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r495, %r496, %r497, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r499, %r496, %r497, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r503, %r504, %r505, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r507, %r504, %r505, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r511, %r512, %r513, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r512, %r513, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r520, %r521, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r520, %r521, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r528, %r529, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r528, %r529, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r536, %r537, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r536, %r537, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r544, %r545, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r544, %r545, %r550;
	// end inline asm
	st.shared.u32 	[%rd6], %r487;
	st.shared.u32 	[%rd7], %r491;
	st.shared.u32 	[%rd8], %r495;
	st.shared.u32 	[%rd9], %r499;
	st.shared.u32 	[%rd10], %r503;
	st.shared.u32 	[%rd11], %r507;
	st.shared.u32 	[%rd12], %r511;
	st.shared.u32 	[%rd13], %r515;
	st.shared.u32 	[%rd14], %r519;
	st.shared.u32 	[%rd15], %r523;
	st.shared.u32 	[%rd16], %r527;
	st.shared.u32 	[%rd17], %r531;
	st.shared.u32 	[%rd18], %r535;
	st.shared.u32 	[%rd19], %r539;
	st.shared.u32 	[%rd20], %r543;
	st.shared.u32 	[%rd21], %r547;
	bar.sync 	0;
	or.b32  	%r79, %r78, %r68;
	shr.u32 	%r2557, %r79, 5;
	mov.u64 	%rd156, %rd35;
	mov.u64 	%rd157, %rd34;
	mov.u32 	%r2560, %r2537;
	mov.u32 	%r2561, %r2549;
	mov.u32 	%r2562, %r2548;
	mov.u32 	%r2563, %r2547;
	mov.u32 	%r2564, %r2546;
$L__BB0_91:                             // %pass5647
                                        //   Parent Loop BB0_90 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2547, %r2559;
	mov.u32 	%r2546, %r2558;
	add.s32 	%r2426, %r79, %r2560;
	bfe.s32 	%r2427, %r2426, 3, 1;
	and.b32  	%r2428, %r2427, 65;
	bfe.s32 	%r2429, %r2426, 1, 1;
	and.b32  	%r2430, %r2429, 260;
	bfe.s32 	%r2431, %r2426, 2, 1;
	and.b32  	%r2432, %r2431, 130;
	and.b32  	%r2433, %r2557, 7;
	mul.lo.s32 	%r2434, %r2433, 1057;
	add.s32 	%r2435, %r70, %r2430;
	add.s32 	%r2436, %r2435, %r2428;
	add.s32 	%r2437, %r2436, %r2432;
	add.s32 	%r2438, %r2437, %r2434;
	mul.wide.u32 	%rd110, %r2438, 4;
	add.s64 	%rd112, %rd53, %rd110;
	ld.shared.u32 	%r2548, [%rd112];
	add.s32 	%r2439, %r71, %r2430;
	add.s32 	%r2440, %r2439, %r2428;
	add.s32 	%r2441, %r2440, %r2432;
	add.s32 	%r2442, %r2441, %r2434;
	mul.wide.u32 	%rd113, %r2442, 4;
	add.s64 	%rd114, %rd53, %rd113;
	ld.shared.u32 	%r2549, [%rd114];
	// begin inline asm
	mov.b32 %r635, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r646, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r634, %r2548, -2004318072;
	mov.u32 	%r633, 983055;
	// begin inline asm
	lop3.b32 %r632, %r633, %r634, %r635, 202;
	// end inline asm
	mov.u16 	%rs21, 18432;
	// begin inline asm
	mov.b32 %r636, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r637, %r635, %r636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r640, %r632, %r637;
	// end inline asm
	mov.u32 	%r644, 15728880;
	// begin inline asm
	lop3.b32 %r643, %r644, %r634, %r646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r647, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r648, %r646, %r647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r651, %r643, %r648;
	// end inline asm
	shr.u32 	%r656, %r634, 8;
	// begin inline asm
	lop3.b32 %r654, %r633, %r656, %r635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r658, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r659, %r635, %r658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r662, %r654, %r659;
	// end inline asm
	// begin inline asm
	lop3.b32 %r665, %r644, %r656, %r646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r669, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r670, %r646, %r669;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r673, %r665, %r670;
	// end inline asm
	// begin inline asm
	mov.b32 %r681, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r692, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r680, %r2549, -2004318072;
	// begin inline asm
	lop3.b32 %r678, %r633, %r680, %r681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r682, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r683, %r681, %r682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r686, %r678, %r683;
	// end inline asm
	// begin inline asm
	lop3.b32 %r689, %r644, %r680, %r692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r693, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r694, %r692, %r693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r697, %r689, %r694;
	// end inline asm
	shr.u32 	%r702, %r680, 8;
	// begin inline asm
	lop3.b32 %r700, %r633, %r702, %r681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r704, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r705, %r681, %r704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r708, %r700, %r705;
	// end inline asm
	// begin inline asm
	lop3.b32 %r711, %r644, %r702, %r692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r715, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r716, %r692, %r715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r719, %r711, %r716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r722, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r724, %r722, %r640;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r727, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r729, %r727, %r651;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r732, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r734, %r732, %r662;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r737, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r739, %r737, %r673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r742, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r744, %r742, %r686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r747, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r749, %r747, %r697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r752, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r754, %r752, %r708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r757, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r759, %r757, %r719;
	// end inline asm
	// begin inline asm
	mov.b32 %r767, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r778, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r766, %r2564, -2004318072;
	// begin inline asm
	lop3.b32 %r764, %r633, %r766, %r767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r769, %r767, %r768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r772, %r764, %r769;
	// end inline asm
	// begin inline asm
	lop3.b32 %r775, %r644, %r766, %r778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r779, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r780, %r778, %r779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r783, %r775, %r780;
	// end inline asm
	shr.u32 	%r788, %r766, 8;
	// begin inline asm
	lop3.b32 %r786, %r633, %r788, %r767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r790, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r791, %r767, %r790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r794, %r786, %r791;
	// end inline asm
	// begin inline asm
	lop3.b32 %r797, %r644, %r788, %r778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r801, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r802, %r778, %r801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r805, %r797, %r802;
	// end inline asm
	// begin inline asm
	mov.b32 %r813, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r824, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r812, %r2563, -2004318072;
	// begin inline asm
	lop3.b32 %r810, %r633, %r812, %r813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r814, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r815, %r813, %r814;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r818, %r810, %r815;
	// end inline asm
	// begin inline asm
	lop3.b32 %r821, %r644, %r812, %r824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r825, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r826, %r824, %r825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r829, %r821, %r826;
	// end inline asm
	shr.u32 	%r834, %r812, 8;
	// begin inline asm
	lop3.b32 %r832, %r633, %r834, %r813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r836, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r837, %r813, %r836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r840, %r832, %r837;
	// end inline asm
	// begin inline asm
	lop3.b32 %r843, %r644, %r834, %r824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r847, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r848, %r824, %r847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r851, %r843, %r848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r854, %r183, %r772, %r724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r858, %r183, %r783, %r729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r862, %r183, %r794, %r734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r866, %r183, %r805, %r739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r870, %r183, %r818, %r744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r874, %r183, %r829, %r749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r878, %r183, %r840, %r754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r882, %r183, %r851, %r759;
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r902, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r890, %r2562, -2004318072;
	// begin inline asm
	lop3.b32 %r888, %r633, %r890, %r891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r892, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r893, %r891, %r892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r896, %r888, %r893;
	// end inline asm
	// begin inline asm
	lop3.b32 %r899, %r644, %r890, %r902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r903, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r904, %r902, %r903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r907, %r899, %r904;
	// end inline asm
	shr.u32 	%r912, %r890, 8;
	// begin inline asm
	lop3.b32 %r910, %r633, %r912, %r891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r914, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r915, %r891, %r914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r918, %r910, %r915;
	// end inline asm
	// begin inline asm
	lop3.b32 %r921, %r644, %r912, %r902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r926, %r902, %r925;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r929, %r921, %r926;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r936, %r2561, -2004318072;
	// begin inline asm
	lop3.b32 %r934, %r633, %r936, %r937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r938, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r939, %r937, %r938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r942, %r934, %r939;
	// end inline asm
	// begin inline asm
	lop3.b32 %r945, %r644, %r936, %r948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r949, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r950, %r948, %r949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r953, %r945, %r950;
	// end inline asm
	shr.u32 	%r958, %r936, 8;
	// begin inline asm
	lop3.b32 %r956, %r633, %r958, %r937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r960, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r961, %r937, %r960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r964, %r956, %r961;
	// end inline asm
	// begin inline asm
	lop3.b32 %r967, %r644, %r958, %r948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r972, %r948, %r971;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r975, %r967, %r972;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r978, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r980, %r978, %r896, %r854;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r984, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r986, %r984, %r907, %r858;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r990, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r992, %r990, %r918, %r862;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r996, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r998, %r996, %r929, %r866;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1002, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1004, %r1002, %r942, %r870;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1008, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1010, %r1008, %r953, %r874;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1014, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1016, %r1014, %r964, %r878;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1020, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1022, %r1020, %r975, %r882;
	// end inline asm
	// begin inline asm
	mov.b32 %r1031, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1042, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r1030, %r2546, -2004318072;
	// begin inline asm
	lop3.b32 %r1028, %r633, %r1030, %r1031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1032, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1033, %r1031, %r1032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1036, %r1028, %r1033;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1039, %r644, %r1030, %r1042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1043, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1044, %r1042, %r1043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1047, %r1039, %r1044;
	// end inline asm
	shr.u32 	%r1052, %r1030, 8;
	// begin inline asm
	lop3.b32 %r1050, %r633, %r1052, %r1031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1054, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1055, %r1031, %r1054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1058, %r1050, %r1055;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1061, %r644, %r1052, %r1042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1065, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1066, %r1042, %r1065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1069, %r1061, %r1066;
	// end inline asm
	// begin inline asm
	mov.b32 %r1077, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1088, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r1076, %r2547, -2004318072;
	// begin inline asm
	lop3.b32 %r1074, %r633, %r1076, %r1077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1078, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1079, %r1077, %r1078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1082, %r1074, %r1079;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1085, %r644, %r1076, %r1088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1089, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1090, %r1088, %r1089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1093, %r1085, %r1090;
	// end inline asm
	shr.u32 	%r1098, %r1076, 8;
	// begin inline asm
	lop3.b32 %r1096, %r633, %r1098, %r1077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1100, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1101, %r1077, %r1100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1104, %r1096, %r1101;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1107, %r644, %r1098, %r1088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1111, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1112, %r1088, %r1111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1115, %r1107, %r1112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r219, %r1036, %r980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r219, %r1047, %r986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r219, %r1058, %r992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r219, %r1069, %r998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r219, %r1082, %r1004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r219, %r1093, %r1010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r219, %r1104, %r1016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r219, %r1115, %r1022;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1150, %r243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1152, %r1150, %r1154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1155, %r240, %r1157, %r1152;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1159, %r243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1161, %r1159, %r1163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1164, %r240, %r1166, %r1161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1168, %r243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1170, %r1168, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1173, %r240, %r1175, %r1170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1177, %r243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1179, %r1177, %r1181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1182, %r240, %r1184, %r1179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1186, %r243, %r1157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1189, %r240, %r1154, %r1186;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1193, %r243, %r1166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r240, %r1163, %r1193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r243, %r1175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r240, %r1172, %r1200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r243, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r240, %r1181, %r1207;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1261, %r1258}, {%r300, %r306, %r303, %r309}, {%r1155, %r1189}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1270, %r1267}, {%r300, %r306, %r303, %r309}, {%r1164, %r1196}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1279, %r1276}, {%r300, %r306, %r303, %r309}, {%r1173, %r1203}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1288, %r1285}, {%r300, %r306, %r303, %r309}, {%r1182, %r1210}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1254, %r350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1256, %r1254, %r1258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1259, %r347, %r1261, %r1256;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1263, %r350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1265, %r1263, %r1267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1268, %r347, %r1270, %r1265;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1272, %r350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1274, %r1272, %r1276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r347, %r1279, %r1274;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1281, %r350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1283, %r1281, %r1285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1286, %r347, %r1288, %r1283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1290, %r350, %r1261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1293, %r347, %r1258, %r1290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1297, %r350, %r1270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1300, %r347, %r1267, %r1297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r350, %r1279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1307, %r347, %r1276, %r1304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r350, %r1288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r347, %r1285, %r1311;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1318, %r1319}, {%r387, %r393, %r390, %r396}, {%r1259, %r1293}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1328, %r1329}, {%r387, %r393, %r390, %r396}, {%r1268, %r1300}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1338, %r1339}, {%r387, %r393, %r390, %r396}, {%r1277, %r1307}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1348, %r1349}, {%r387, %r393, %r390, %r396}, {%r1286, %r1314}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1358, %r87, %r1318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1361, %r87, %r1319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1364, %r87, %r1328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1367, %r87, %r1329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1370, %r87, %r1338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1373, %r87, %r1339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1376, %r87, %r1348;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r87, %r1349;
	// end inline asm
	mov.u16 	%rs113, -14592;
	// begin inline asm
	mov.b32 %r1382, {%rs113, %rs113};
	// end inline asm
	mov.u16 	%rs115, 18176;
	// begin inline asm
	mov.b32 %r1383, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1384, %r1358, %r1382;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1387, %r1384, %r1383;
	// end inline asm
	// begin inline asm
	mov.b32 %r1390, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r1391, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1392, %r1361, %r1390;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1395, %r1392, %r1391;
	// end inline asm
	// begin inline asm
	mov.b32 %r1398, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r1399, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1400, %r1364, %r1398;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1403, %r1400, %r1399;
	// end inline asm
	// begin inline asm
	mov.b32 %r1406, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r1407, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1408, %r1367, %r1406;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1411, %r1408, %r1407;
	// end inline asm
	// begin inline asm
	mov.b32 %r1414, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r1415, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1416, %r1370, %r1414;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1419, %r1416, %r1415;
	// end inline asm
	// begin inline asm
	mov.b32 %r1422, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r1423, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1424, %r1373, %r1422;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1427, %r1424, %r1423;
	// end inline asm
	// begin inline asm
	mov.b32 %r1430, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r1431, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1432, %r1376, %r1430;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1435, %r1432, %r1431;
	// end inline asm
	// begin inline asm
	mov.b32 %r1438, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r1439, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1440, %r1379, %r1438;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1443, %r1440, %r1439;
	// end inline asm
	// begin inline asm
	mov.b32 %r1449, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1447, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1448, %r1449, %r1447;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1451, %r1387, %r1448;
	// end inline asm
	// begin inline asm
	mov.b32 %r1454, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1455, %r1449, %r1454;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1458, %r1395, %r1455;
	// end inline asm
	// begin inline asm
	mov.b32 %r1461, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1462, %r1449, %r1461;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1465, %r1403, %r1462;
	// end inline asm
	// begin inline asm
	mov.b32 %r1468, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1469, %r1449, %r1468;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1472, %r1411, %r1469;
	// end inline asm
	mov.u32 	%r1478, 25152;
	// begin inline asm
	prmt.b32 %r1475, %r1451, %r1465, %r1478;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1479, %r1458, %r1472, %r1478;
	// end inline asm
	shl.b32 	%r1486, %r1479, 4;
	mov.u32 	%r1484, 252645135;
	// begin inline asm
	lop3.b32 %r1483, %r1484, %r1475, %r1486, 202;
	// end inline asm
	xor.b32  	%r2443, %r1483, -2004318072;
	// begin inline asm
	mov.b32 %r1490, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1488, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1489, %r1490, %r1488;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1492, %r1419, %r1489;
	// end inline asm
	// begin inline asm
	mov.b32 %r1495, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1496, %r1490, %r1495;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1499, %r1427, %r1496;
	// end inline asm
	// begin inline asm
	mov.b32 %r1502, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1503, %r1490, %r1502;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1506, %r1435, %r1503;
	// end inline asm
	// begin inline asm
	mov.b32 %r1509, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1510, %r1490, %r1509;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1513, %r1443, %r1510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1516, %r1492, %r1506, %r1478;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1520, %r1499, %r1513, %r1478;
	// end inline asm
	shl.b32 	%r1527, %r1520, 4;
	// begin inline asm
	lop3.b32 %r1524, %r1484, %r1516, %r1527, 202;
	// end inline asm
	xor.b32  	%r2444, %r1524, -2004318072;
	st.shared.u32 	[%rd156], %r2443;
	st.shared.u32 	[%rd157], %r2444;
	ld.shared.u32 	%r2558, [%rd112];
	ld.shared.u32 	%r2559, [%rd114];
	// begin inline asm
	mov.b32 %r1533, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1544, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r1532, %r2558, -2004318072;
	// begin inline asm
	lop3.b32 %r1530, %r633, %r1532, %r1533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1534, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1535, %r1533, %r1534;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1538, %r1530, %r1535;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1541, %r644, %r1532, %r1544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1545, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1546, %r1544, %r1545;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1549, %r1541, %r1546;
	// end inline asm
	shr.u32 	%r1554, %r1532, 8;
	// begin inline asm
	lop3.b32 %r1552, %r633, %r1554, %r1533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1556, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1557, %r1533, %r1556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1560, %r1552, %r1557;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1563, %r644, %r1554, %r1544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1567, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1568, %r1544, %r1567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1571, %r1563, %r1568;
	// end inline asm
	// begin inline asm
	mov.b32 %r1579, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1590, {%rs252, %rs252};
	// end inline asm
	xor.b32  	%r1578, %r2559, -2004318072;
	// begin inline asm
	lop3.b32 %r1576, %r633, %r1578, %r1579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1580, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1581, %r1579, %r1580;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1584, %r1576, %r1581;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1587, %r644, %r1578, %r1590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1591, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1592, %r1590, %r1591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1595, %r1587, %r1592;
	// end inline asm
	shr.u32 	%r1600, %r1578, 8;
	// begin inline asm
	lop3.b32 %r1598, %r633, %r1600, %r1579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1602, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1603, %r1579, %r1602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1606, %r1598, %r1603;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1609, %r644, %r1600, %r1590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1613, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1614, %r1590, %r1613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1617, %r1609, %r1614;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1620, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1622, %r1620, %r1538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1625, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1627, %r1625, %r1549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1630, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1632, %r1630, %r1560;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1635, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1637, %r1635, %r1571;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1640, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1642, %r1640, %r1584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1645, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1647, %r1645, %r1595;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1650, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r1650, %r1606;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1655, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1657, %r1655, %r1617;
	// end inline asm
	// begin inline asm
	mov.b32 %r1665, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1676, {%rs252, %rs252};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1662, %r633, %r890, %r1665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1666, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1667, %r1665, %r1666;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1670, %r1662, %r1667;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1673, %r644, %r890, %r1676, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1677, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1678, %r1676, %r1677;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1681, %r1673, %r1678;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1684, %r633, %r912, %r1665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1688, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1689, %r1665, %r1688;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1692, %r1684, %r1689;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1695, %r644, %r912, %r1676, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1699, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1700, %r1676, %r1699;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1703, %r1695, %r1700;
	// end inline asm
	// begin inline asm
	mov.b32 %r1711, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1722, {%rs252, %rs252};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1708, %r633, %r936, %r1711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1712, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1713, %r1711, %r1712;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1716, %r1708, %r1713;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1719, %r644, %r936, %r1722, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1723, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1724, %r1722, %r1723;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1727, %r1719, %r1724;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1730, %r633, %r958, %r1711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1734, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1735, %r1711, %r1734;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1738, %r1730, %r1735;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1741, %r644, %r958, %r1722, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1745, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1746, %r1722, %r1745;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1749, %r1741, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r183, %r1670, %r1622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r183, %r1681, %r1627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r183, %r1692, %r1632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r183, %r1703, %r1637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r183, %r1716, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r183, %r1727, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r183, %r1738, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r183, %r1749, %r1657;
	// end inline asm
	// begin inline asm
	mov.b32 %r1789, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1800, {%rs252, %rs252};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1786, %r633, %r1030, %r1789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1790, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1791, %r1789, %r1790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1794, %r1786, %r1791;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1797, %r644, %r1030, %r1800, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1801, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1802, %r1800, %r1801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1805, %r1797, %r1802;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1808, %r633, %r1052, %r1789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1812, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1813, %r1789, %r1812;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1816, %r1808, %r1813;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1819, %r644, %r1052, %r1800, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1823, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1824, %r1800, %r1823;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1827, %r1819, %r1824;
	// end inline asm
	// begin inline asm
	mov.b32 %r1835, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1846, {%rs252, %rs252};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1832, %r633, %r1076, %r1835, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1836, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1837, %r1835, %r1836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1840, %r1832, %r1837;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1843, %r644, %r1076, %r1846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1847, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1848, %r1846, %r1847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1851, %r1843, %r1848;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1854, %r633, %r1098, %r1835, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1858, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1859, %r1835, %r1858;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1862, %r1854, %r1859;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1865, %r644, %r1098, %r1846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1869, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1870, %r1846, %r1869;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1873, %r1865, %r1870;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1876, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r1876, %r1794, %r1752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1882, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r1882, %r1805, %r1756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1888, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r1888, %r1816, %r1760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1894, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r1894, %r1827, %r1764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1900, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r1900, %r1840, %r1768;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1906, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r1906, %r1851, %r1772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1912, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r1912, %r1862, %r1776;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1918, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r1918, %r1873, %r1780;
	// end inline asm
	// begin inline asm
	mov.b32 %r1929, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1940, {%rs252, %rs252};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1926, %r633, %r634, %r1929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1930, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1931, %r1929, %r1930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1934, %r1926, %r1931;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1937, %r644, %r634, %r1940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1941, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1942, %r1940, %r1941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1945, %r1937, %r1942;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1948, %r633, %r656, %r1929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1952, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1953, %r1929, %r1952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1956, %r1948, %r1953;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1959, %r644, %r656, %r1940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1963, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1964, %r1940, %r1963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1967, %r1959, %r1964;
	// end inline asm
	// begin inline asm
	mov.b32 %r1975, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r1986, {%rs252, %rs252};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1972, %r633, %r680, %r1975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1976, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1977, %r1975, %r1976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1980, %r1972, %r1977;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1983, %r644, %r680, %r1986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1987, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1988, %r1986, %r1987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1991, %r1983, %r1988;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1994, %r633, %r702, %r1975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1998, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1999, %r1975, %r1998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2002, %r1994, %r1999;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2005, %r644, %r702, %r1986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2009, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2010, %r1986, %r2009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2013, %r2005, %r2010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r219, %r1934, %r1878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r219, %r1945, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r219, %r1956, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r219, %r1967, %r1896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2073, %r219, %r1980, %r1902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r219, %r1991, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r219, %r2002, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2079, %r219, %r2013, %r1920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2048, %r243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r2048, %r2052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r240, %r2055, %r2050;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2057, %r243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2059, %r2057, %r2061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2062, %r240, %r2064, %r2059;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2066, %r243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2068, %r2066, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2071, %r240, %r2073, %r2068;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2075, %r243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2077, %r2075, %r2079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r240, %r2082, %r2077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2084, %r243, %r2055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2087, %r240, %r2052, %r2084;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2091, %r243, %r2064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r240, %r2061, %r2091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r243, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r240, %r2070, %r2098;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2105, %r243, %r2082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2108, %r240, %r2079, %r2105;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2159, %r2156}, {%r300, %r306, %r303, %r309}, {%r2053, %r2087}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2168, %r2165}, {%r300, %r306, %r303, %r309}, {%r2062, %r2094}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2177, %r2174}, {%r300, %r306, %r303, %r309}, {%r2071, %r2101}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2186, %r2183}, {%r300, %r306, %r303, %r309}, {%r2080, %r2108}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2152, %r350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2154, %r2152, %r2156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r347, %r2159, %r2154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2161, %r350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2163, %r2161, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r347, %r2168, %r2163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2170, %r350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r2170, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r347, %r2177, %r2172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2179, %r350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r2179, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r347, %r2186, %r2181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2188, %r350, %r2159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2191, %r347, %r2156, %r2188;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2195, %r350, %r2168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r347, %r2165, %r2195;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r350, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r347, %r2174, %r2202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r350, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r347, %r2183, %r2209;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2216, %r2217}, {%r387, %r393, %r390, %r396}, {%r2157, %r2191}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2226, %r2227}, {%r387, %r393, %r390, %r396}, {%r2166, %r2198}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2236, %r2237}, {%r387, %r393, %r390, %r396}, {%r2175, %r2205}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2246, %r2247}, {%r387, %r393, %r390, %r396}, {%r2184, %r2212}, {%r2537, %r2537};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2256, %r87, %r2216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2259, %r87, %r2217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2262, %r87, %r2226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2265, %r87, %r2227;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2268, %r87, %r2236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r87, %r2237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2274, %r87, %r2246;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2277, %r87, %r2247;
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r2281, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2282, %r2256, %r2280;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2285, %r2282, %r2281;
	// end inline asm
	// begin inline asm
	mov.b32 %r2288, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2290, %r2259, %r2288;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2293, %r2290, %r2289;
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r2297, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2298, %r2262, %r2296;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2301, %r2298, %r2297;
	// end inline asm
	// begin inline asm
	mov.b32 %r2304, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r2305, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2306, %r2265, %r2304;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2309, %r2306, %r2305;
	// end inline asm
	// begin inline asm
	mov.b32 %r2312, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r2313, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2314, %r2268, %r2312;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2317, %r2314, %r2313;
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2322, %r2271, %r2320;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2325, %r2322, %r2321;
	// end inline asm
	// begin inline asm
	mov.b32 %r2328, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2330, %r2274, %r2328;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2333, %r2330, %r2329;
	// end inline asm
	// begin inline asm
	mov.b32 %r2336, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2338, %r2277, %r2336;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2341, %r2338, %r2337;
	// end inline asm
	// begin inline asm
	mov.b32 %r2347, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r2345, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2346, %r2347, %r2345;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2349, %r2285, %r2346;
	// end inline asm
	// begin inline asm
	mov.b32 %r2352, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2353, %r2347, %r2352;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2356, %r2293, %r2353;
	// end inline asm
	// begin inline asm
	mov.b32 %r2359, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2347, %r2359;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2301, %r2360;
	// end inline asm
	// begin inline asm
	mov.b32 %r2366, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2367, %r2347, %r2366;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2370, %r2309, %r2367;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2373, %r2349, %r2363, %r1478;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2377, %r2356, %r2370, %r1478;
	// end inline asm
	shl.b32 	%r2384, %r2377, 4;
	// begin inline asm
	lop3.b32 %r2381, %r1484, %r2373, %r2384, 202;
	// end inline asm
	xor.b32  	%r2445, %r2381, -2004318072;
	// begin inline asm
	mov.b32 %r2388, {%rs304, %rs304};
	// end inline asm
	// begin inline asm
	mov.b32 %r2386, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2387, %r2388, %r2386;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2390, %r2317, %r2387;
	// end inline asm
	// begin inline asm
	mov.b32 %r2393, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2388, %r2393;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2397, %r2325, %r2394;
	// end inline asm
	// begin inline asm
	mov.b32 %r2400, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2401, %r2388, %r2400;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2404, %r2333, %r2401;
	// end inline asm
	// begin inline asm
	mov.b32 %r2407, {%rs21, %rs21};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2408, %r2388, %r2407;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2411, %r2341, %r2408;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2414, %r2390, %r2404, %r1478;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2418, %r2397, %r2411, %r1478;
	// end inline asm
	shl.b32 	%r2425, %r2418, 4;
	// begin inline asm
	lop3.b32 %r2422, %r1484, %r2414, %r2425, 202;
	// end inline asm
	xor.b32  	%r2446, %r2422, -2004318072;
	st.shared.u32 	[%rd156], %r2445;
	st.shared.u32 	[%rd157], %r2446;
	add.s32 	%r2560, %r2560, 32;
	add.s64 	%rd157, %rd157, 4228;
	add.s64 	%rd156, %rd156, 4228;
	add.s32 	%r2557, %r2557, 1;
	setp.eq.s32 	%p210, %r2560, 256;
	mov.u32 	%r2561, %r2549;
	mov.u32 	%r2562, %r2548;
	mov.u32 	%r2563, %r2547;
	mov.u32 	%r2564, %r2546;
	@%p210 bra 	$L__BB0_92;
	bra.uni 	$L__BB0_91;
$L__BB0_92:                             // %guard_exit10260
                                        //   in Loop: Header=BB0_90 Depth=1
	bar.sync 	0;
	or.b32  	%r2511, %r78, %r64;
	ld.shared.u32 	%r2452, [%rd22];
	ld.shared.u32 	%r2453, [%rd23+128];
	ld.shared.u32 	%r2460, [%rd24+4];
	ld.shared.u32 	%r2461, [%rd24+132];
	shr.u32 	%r126, %r2511, 5;
	ld.shared.u32 	%r2468, [%rd25];
	ld.shared.u32 	%r2469, [%rd26+128];
	ld.shared.u32 	%r2476, [%rd27+4];
	ld.shared.u32 	%r2477, [%rd27+132];
	or.b32  	%r127, %r126, 4;
	ld.shared.u32 	%r2484, [%rd28];
	ld.shared.u32 	%r2485, [%rd29+128];
	ld.shared.u32 	%r2492, [%rd30+4];
	ld.shared.u32 	%r2493, [%rd30+132];
	ld.shared.u32 	%r2500, [%rd31];
	ld.shared.u32 	%r2501, [%rd32+128];
	ld.shared.u32 	%r2508, [%rd33+4];
	ld.shared.u32 	%r2509, [%rd33+132];
	// begin inline asm
	prmt.b32 %r2447, %r2452, %r2453, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2451, %r2452, %r2453, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2455, %r2460, %r2461, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2459, %r2460, %r2461, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2463, %r2468, %r2469, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2467, %r2468, %r2469, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2471, %r2476, %r2477, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2475, %r2476, %r2477, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2479, %r2484, %r2485, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2483, %r2484, %r2485, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2487, %r2492, %r2493, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2491, %r2492, %r2493, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2495, %r2500, %r2501, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2499, %r2500, %r2501, %r550;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2503, %r2508, %r2509, %r546;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2507, %r2508, %r2509, %r550;
	// end inline asm
	selp.b32 	%r2512, %r2451, %r2447, %p197;
	shfl.sync.bfly.b32	%r2513, %r2512, 8, 31, -1;
	selp.b32 	%r2514, %r2459, %r2455, %p197;
	shfl.sync.bfly.b32	%r2515, %r2514, 8, 31, -1;
	selp.b32 	%r2516, %r2467, %r2463, %p197;
	shfl.sync.bfly.b32	%r132, %r2516, 8, 31, -1;
	selp.b32 	%r2517, %r2475, %r2471, %p197;
	shfl.sync.bfly.b32	%r133, %r2517, 8, 31, -1;
	selp.b32 	%r2518, %r2483, %r2479, %p197;
	shfl.sync.bfly.b32	%r2519, %r2518, 8, 31, -1;
	selp.b32 	%r134, %r2479, %r2519, %p197;
	selp.b32 	%r135, %r2519, %r2483, %p197;
	selp.b32 	%r2520, %r2491, %r2487, %p197;
	shfl.sync.bfly.b32	%r2521, %r2520, 8, 31, -1;
	selp.b32 	%r136, %r2487, %r2521, %p197;
	selp.b32 	%r137, %r2521, %r2491, %p197;
	selp.b32 	%r2522, %r2499, %r2495, %p197;
	shfl.sync.bfly.b32	%r2523, %r2522, 8, 31, -1;
	selp.b32 	%r138, %r2495, %r2523, %p197;
	selp.b32 	%r139, %r2523, %r2499, %p197;
	selp.b32 	%r2524, %r2507, %r2503, %p197;
	shfl.sync.bfly.b32	%r2525, %r2524, 8, 31, -1;
	selp.b32 	%r140, %r2503, %r2525, %p197;
	selp.b32 	%r141, %r2525, %r2507, %p197;
	@%p211 bra 	$L__BB0_94;
// %bb.93:                              // %pass9807
                                        //   in Loop: Header=BB0_90 Depth=1
	selp.b32 	%r2526, %r133, %r2475, %p197;
	selp.b32 	%r2527, %r2471, %r133, %p197;
	selp.b32 	%r2528, %r132, %r2467, %p197;
	selp.b32 	%r2529, %r2463, %r132, %p197;
	or.b32  	%r2530, %r126, 2;
	mad.lo.s32 	%r2531, %r2530, 393216, %r69;
	cvt.s64.s32 	%rd115, %r2531;
	add.s64 	%rd116, %rd115, %rd5;
	mul.hi.s64 	%rd117, %rd116, 3074457345618258603;
	shr.u64 	%rd118, %rd117, 63;
	shr.s64 	%rd119, %rd117, 26;
	add.s64 	%rd120, %rd119, %rd118;
	setp.lt.s64 	%p214, %rd116, 0;
	mul.lo.s64 	%rd121, %rd120, 402653184;
	setp.ne.s64 	%p215, %rd121, %rd116;
	and.pred  	%p216, %p214, %p215;
	selp.s64 	%rd122, -1, 0, %p216;
	add.s64 	%rd123, %rd120, %rd122;
	mul.lo.s64 	%rd124, %rd123, 4611686018024734720;
	add.s64 	%rd125, %rd124, %rd116;
	shl.b64 	%rd126, %rd125, 2;
	add.s64 	%rd127, %rd3, %rd126;
	st.global.v4.u32 	[%rd127], {%r2529, %r2527, %r2528, %r2526};
	bra.uni 	$L__BB0_94;
$L__BB0_95:                             // %L22411
	st.global.u32 	[%rd4], %r2537;
	ret;
$L__BB0_7:                              // %L156
	mov.u32 	%r2536, 2;
	st.global.u32 	[%rd4], %r2536;
	mov.u64 	%rd154, exception2050;
	cvta.global.u64 	%rd155, %rd154;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd155;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd42;
	st.param.b32 	[param0+8], %r142;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd47, exception1;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd42;
	st.param.b32 	[param0+8], %r142;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
