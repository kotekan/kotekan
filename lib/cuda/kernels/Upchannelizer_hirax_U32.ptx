// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2068[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<260>;
	.reg .b16 	%rs<297>;
	.reg .f32 	%f<929>;
	.reg .b32 	%r<2632>;
	.reg .b64 	%rd<235>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r164, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd65, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r165, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r165, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	ld.param.u64 	%rd82, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd66, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r166, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r167, %r166, %r1;
	or.b32  	%r168, %r167, %r4;
	mul.wide.u32 	%rd88, %r168, 4;
	add.s64 	%rd4, %rd82, %rd88;
	mov.u32 	%r169, 1;
	st.global.u32 	[%rd4], %r169;
	ld.global.u32 	%r5, [%rd66];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	LBB0_7;
// %bb.3:                               // %L231
	ld.param.u64 	%rd70, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd70];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_7;
// %bb.4:                               // %L241
	ld.param.u64 	%rd74, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd74];
	sub.s32 	%r170, %r6, %r5;
	and.b32  	%r171, %r170, 255;
	setp.ne.s32 	%p6, %r171, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB0_7;
// %bb.5:                               // %L247
	ld.param.u64 	%rd78, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd78];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 512;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	LBB0_7;
// %bb.6:                               // %L257
	sub.s32 	%r172, %r8, %r7;
	add.s32 	%r173, %r172, 3;
	and.b32  	%r174, %r173, 7;
	setp.eq.s32 	%p12, %r174, 0;
	@%p12 bra 	LBB0_8;
	bra.uni 	LBB0_7;
LBB0_8:                                 // %L396
	bfe.u32 	%r16, %r1, 1, 1;
	and.b32  	%r17, %r1, 1;
	bfe.u32 	%r18, %r1, 2, 1;
	shl.b32 	%r183, %r18, 1;
	shl.b32 	%r184, %r17, 2;
	shl.b32 	%r185, %r16, 3;
	or.b32  	%r186, %r184, %r185;
	or.b32  	%r187, %r183, %r186;
	shr.u32 	%r19, %r1, 4;
	or.b32  	%r20, %r19, %r187;
	or.b32  	%r21, %r20, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f1, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r20;
	sub.f32 	%f187, %f186, %f1;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r188, %f193;
	and.b32  	%r189, %r188, -2147483648;
	or.b32  	%r190, %r189, 1056964608;
	mov.b32 	%f194, %r190;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p15;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f3, %f187, %f216;
	setp.eq.f32 	%p18, %f3, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	LBB0_10;
// %bb.9:                               // %L614
	sin.approx.f32 	%f217, %f3;
	div.approx.f32 	%f889, %f217, %f3;
LBB0_10:                                // %L617
	cvt.rzi.s32.f32 	%r191, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r21;
	sub.f32 	%f221, %f220, %f1;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p19;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r195, %f227;
	and.b32  	%r196, %r195, -2147483648;
	or.b32  	%r197, %r196, 1056964608;
	mov.b32 	%f228, %r197;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p21;
	cvt.rzi.s32.f32 	%r198, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f8, %f221, %f216;
	setp.eq.f32 	%p24, %f8, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	LBB0_12;
// %bb.11:                              // %L634
	sin.approx.f32 	%f251, %f8;
	div.approx.f32 	%f890, %f251, %f8;
LBB0_12:                                // %L637
	add.s32 	%r192, %r191, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r199, %r198, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r205, %r20, 32;
	or.b32  	%r23, %r20, 48;
	cvt.rn.f32.s32 	%f255, %r205;
	sub.f32 	%f256, %f255, %f1;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p25;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r206, %f262;
	and.b32  	%r207, %r206, -2147483648;
	or.b32  	%r208, %r207, 1056964608;
	mov.b32 	%f263, %r208;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p27;
	cvt.rzi.s32.f32 	%r209, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r210, %r209, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f12, %f256, %f216;
	setp.eq.f32 	%p30, %f12, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	LBB0_14;
// %bb.13:                              // %L723
	sin.approx.f32 	%f286, %f12;
	div.approx.f32 	%f891, %f286, %f12;
LBB0_14:                                // %L726
	shl.b32 	%r9, %r1, 2;
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r193, %r192, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r200, %r199, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r211, %r210, 1;
	cvt.rn.f32.s32 	%f289, %r23;
	sub.f32 	%f290, %f289, %f1;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p31;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r213, %f296;
	and.b32  	%r214, %r213, -2147483648;
	or.b32  	%r215, %r214, 1056964608;
	mov.b32 	%f297, %r215;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p33;
	cvt.rzi.s32.f32 	%r216, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r217, %r216, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r218, %r217, 1;
	div.approx.f32 	%f17, %f290, %f216;
	setp.eq.f32 	%p36, %f17, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	LBB0_16;
// %bb.15:                              // %L743
	sin.approx.f32 	%f320, %f17;
	div.approx.f32 	%f892, %f320, %f17;
LBB0_16:                                // %L746
	and.b32  	%r175, %r9, 4;
	and.b32  	%r176, %r1, 16;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r193, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r200, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r211, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r218, 1;
	or.b32  	%r223, %r20, 64;
	or.b32  	%r25, %r20, 80;
	cvt.rn.f32.s32 	%f324, %r223;
	sub.f32 	%f325, %f324, %f1;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p37;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r224, %f331;
	and.b32  	%r225, %r224, -2147483648;
	or.b32  	%r226, %r225, 1056964608;
	mov.b32 	%f332, %r226;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p39;
	cvt.rzi.s32.f32 	%r227, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r228, %r227, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r229, %r228, 1;
	setp.eq.b32 	%p40, %r229, 1;
	div.approx.f32 	%f21, %f325, %f216;
	setp.eq.f32 	%p42, %f21, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	LBB0_18;
// %bb.17:                              // %L832
	sin.approx.f32 	%f355, %f21;
	div.approx.f32 	%f893, %f355, %f21;
LBB0_18:                                // %L835
	or.b32  	%r177, %r176, %r175;
	and.b32  	%r178, %r1, 2;
	shl.b32 	%r179, %r2, 3;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r194, %r192, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r201, %r199, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r212, %r210, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r219, %r217, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r230, %r228, 2;
	cvt.rn.f32.s32 	%f358, %r25;
	sub.f32 	%f359, %f358, %f1;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p43;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r231, %f365;
	and.b32  	%r232, %r231, -2147483648;
	or.b32  	%r233, %r232, 1056964608;
	mov.b32 	%f366, %r233;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p45;
	cvt.rzi.s32.f32 	%r234, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r235, %r234, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r236, %r235, 1;
	setp.eq.b32 	%p46, %r236, 1;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r237, %r235, 2;
	div.approx.f32 	%f26, %f359, %f216;
	setp.eq.f32 	%p48, %f26, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	LBB0_20;
// %bb.19:                              // %L852
	sin.approx.f32 	%f389, %f26;
	div.approx.f32 	%f894, %f389, %f26;
LBB0_20:                                // %L855
	or.b32  	%r10, %r177, %r178;
	and.b32  	%r11, %r179, 2016;
	shl.b32 	%r12, %r1, 1;
	setp.eq.s32 	%p17, %r194, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r201, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r212, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r219, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r230, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r237, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r241, %r20, 96;
	or.b32  	%r27, %r20, 112;
	cvt.rn.f32.s32 	%f393, %r241;
	sub.f32 	%f394, %f393, %f1;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p49;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r242, %f400;
	and.b32  	%r243, %r242, -2147483648;
	or.b32  	%r244, %r243, 1056964608;
	mov.b32 	%f401, %r244;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p51;
	cvt.rzi.s32.f32 	%r245, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r246, %r245, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r247, %r246, 1;
	setp.eq.b32 	%p52, %r247, 1;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r248, %r246, 2;
	setp.eq.s32 	%p53, %r248, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f30, %f394, %f216;
	setp.eq.f32 	%p54, %f30, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	LBB0_22;
// %bb.21:                              // %L941
	sin.approx.f32 	%f424, %f30;
	div.approx.f32 	%f895, %f424, %f30;
LBB0_22:                                // %L944
	or.b32  	%r180, %r10, %r11;
	and.b32  	%r13, %r12, 8;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	cvt.rn.f32.s32 	%f427, %r27;
	sub.f32 	%f428, %f427, %f1;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r249, %f434;
	and.b32  	%r250, %r249, -2147483648;
	or.b32  	%r251, %r250, 1056964608;
	mov.b32 	%f435, %r251;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p57;
	cvt.rzi.s32.f32 	%r252, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r253, %r252, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r254, %r253, 1;
	setp.eq.b32 	%p58, %r254, 1;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r255, %r253, 2;
	setp.eq.s32 	%p59, %r255, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p59;
	div.approx.f32 	%f35, %f428, %f216;
	setp.eq.f32 	%p60, %f35, 0f00000000;
	@%p60 bra 	LBB0_24;
// %bb.23:                              // %L961
	sin.approx.f32 	%f458, %f35;
	div.approx.f32 	%f896, %f458, %f35;
LBB0_24:                                // %L964
	or.b32  	%r181, %r180, %r13;
	mul.f32 	%f2, %f215, %f215;
	mul.f32 	%f7, %f249, %f249;
	mul.f32 	%f11, %f284, %f284;
	mul.f32 	%f16, %f318, %f318;
	mul.f32 	%f20, %f353, %f353;
	mul.f32 	%f25, %f387, %f387;
	mul.f32 	%f29, %f422, %f422;
	mul.f32 	%f34, %f456, %f456;
	mul.lo.s32 	%r29, %r20, 31;
	cvt.rn.f32.s32 	%f461, %r29;
	div.approx.f32 	%f38, %f461, %f216;
	abs.f32 	%f899, %f38;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	LBB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	LBB0_32;
	bra.uni 	LBB0_26;
LBB0_32:
	mov.b32 	%r31, %f899;
	and.b32  	%r259, %r31, 8388607;
	or.b32  	%r2601, %r259, 1065353216;
	mov.b32 	%f898, %r2601;
	add.s32 	%r260, %r31, -1073741824;
	and.b32  	%r2602, %r260, -8388608;
	setp.eq.s32 	%p68, %r2602, 0;
	@%p68 bra 	LBB0_35;
// %bb.33:                              // %.lr.ph1843.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_34:                                // %.lr.ph1843
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r261, %r2602, 192937984;
	add.s32 	%r262, %r261, %r2601;
	mov.b32 	%f473, %r262;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2602, %r2602, %r261;
	mov.b32 	%r2601, %f898;
	setp.ne.s32 	%p69, %r2602, 0;
	setp.ne.s32 	%p70, %r2601, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	LBB0_34;
LBB0_35:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r31, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	LBB0_36;
LBB0_26:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f40, %f464;
	fma.rn.f32 	%f41, %f40, 0fC0000000, %f899;
	mov.b32 	%r30, %f41;
	setp.lt.u32 	%p63, %r30, 1073741824;
	mov.f32 	%f897, %f40;
	@%p63 bra 	LBB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r30, -2147483647;
	@%p64 bra 	LBB0_29;
// %bb.28:
	add.f32 	%f469, %f40, 0fBF800000;
	setp.lt.f32 	%p67, %f41, 0fC0000000;
	selp.f32 	%f470, %f469, %f40, %p67;
	add.f32 	%f897, %f470, 0fBF800000;
	bra.uni 	LBB0_31;
LBB0_29:
	add.f32 	%f897, %f40, 0f3F800000;
	setp.ltu.f32 	%p65, %f41, 0f40800000;
	@%p65 bra 	LBB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f466, %f184, 0fC0400000, %f41;
	setp.ge.f32 	%p66, %f466, 0f00000000;
	selp.f32 	%f467, %f897, %f40, %p66;
	add.f32 	%f468, %f467, 0f3F800000;
	add.f32 	%f897, %f468, 0f3F800000;
LBB0_31:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
LBB0_36:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r182, %r181, 1;
	mul.f32 	%f219, %f2, 0f3C8A83B8;
	mul.f32 	%f253, %f7, 0f3C8A83B8;
	mul.f32 	%f288, %f11, 0f3C8A83B8;
	mul.f32 	%f322, %f16, 0f3C8A83B8;
	mul.f32 	%f357, %f20, 0f3C8A83B8;
	mul.f32 	%f391, %f25, 0f3C8A83B8;
	mul.f32 	%f426, %f29, 0f3C8A83B8;
	mul.f32 	%f459, %f34, 0f3C8A83B8;
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	LBB0_38;
// %bb.37:
	mov.b32 	%r263, %f38;
	and.b32  	%r264, %r263, -2147483648;
	mov.b32 	%r265, %f899;
	or.b32  	%r266, %r264, %r265;
	mov.b32 	%f899, %r266;
LBB0_38:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd89, %r182, 4;
	mul.f32 	%f6, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f15, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f24, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f33, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	add.f32 	%f483, %f899, %f899;
	mov.b32 	%r267, %f483;
	and.b32  	%r268, %r267, -2147483648;
	or.b32  	%r269, %r268, 1056964608;
	mov.b32 	%f484, %r269;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p75;
	cvt.rzi.s32.f32 	%r270, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r271, %r270, 1;
	setp.eq.b32 	%p76, %r271, 1;
	selp.f32 	%f502, %f500, %f501, %p76;
	selp.f32 	%f503, %f501, %f500, %p76;
	and.b32  	%r272, %r270, 2;
	setp.eq.s32 	%p77, %r272, 0;
	neg.f32 	%f504, %f502;
	selp.f32 	%f505, %f502, %f504, %p77;
	add.s32 	%r273, %r270, 1;
	and.b32  	%r274, %r273, 2;
	setp.eq.s32 	%p78, %r274, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f508, %f503, %f507, %p78;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f55, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f55, 0f3F800000;
	add.s32 	%r275, %r29, 496;
	cvt.rn.f32.s32 	%f513, %r275;
	div.approx.f32 	%f57, %f513, %f216;
	abs.f32 	%f903, %f57;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	LBB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	LBB0_46;
	bra.uni 	LBB0_40;
LBB0_46:
	mov.b32 	%r39, %f903;
	and.b32  	%r276, %r39, 8388607;
	or.b32  	%r2603, %r276, 1065353216;
	mov.b32 	%f902, %r2603;
	add.s32 	%r277, %r39, -1073741824;
	and.b32  	%r2604, %r277, -8388608;
	setp.eq.s32 	%p88, %r2604, 0;
	@%p88 bra 	LBB0_49;
// %bb.47:                              // %.lr.ph1838.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
LBB0_48:                                // %.lr.ph1838
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r278, %r2604, 192937984;
	add.s32 	%r279, %r278, %r2603;
	mov.b32 	%f525, %r279;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2604, %r2604, %r278;
	mov.b32 	%r2603, %f902;
	setp.ne.s32 	%p89, %r2604, 0;
	setp.ne.s32 	%p90, %r2603, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	LBB0_48;
LBB0_49:                                // %__internal_fmodf_slowpath_mod.exit.i.i1063
	setp.gt.u32 	%p92, %r39, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	LBB0_50;
LBB0_40:                                // %__nv_fast_fdividef.exit.i.i.i1029
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f59, %f516;
	fma.rn.f32 	%f60, %f59, 0fC0000000, %f903;
	mov.b32 	%r38, %f60;
	setp.lt.u32 	%p83, %r38, 1073741824;
	mov.f32 	%f901, %f59;
	@%p83 bra 	LBB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r38, -2147483647;
	@%p84 bra 	LBB0_43;
// %bb.42:
	add.f32 	%f521, %f59, 0fBF800000;
	setp.lt.f32 	%p87, %f60, 0fC0000000;
	selp.f32 	%f522, %f521, %f59, %p87;
	add.f32 	%f901, %f522, 0fBF800000;
	bra.uni 	LBB0_45;
LBB0_43:
	add.f32 	%f901, %f59, 0f3F800000;
	setp.ltu.f32 	%p85, %f60, 0f40800000;
	@%p85 bra 	LBB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i1034
	fma.rn.f32 	%f518, %f184, 0fC0400000, %f60;
	setp.ge.f32 	%p86, %f518, 0f00000000;
	selp.f32 	%f519, %f901, %f59, %p86;
	add.f32 	%f520, %f519, 0f3F800000;
	add.f32 	%f901, %f520, 0f3F800000;
LBB0_45:                                // %__internal_fmodf_fastpath_quot.exit.i.i1037
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
LBB0_50:                                // %__internal_fmodf_kernel.exit.i1066
	add.s64 	%rd90, %rd1, %rd89;
	mov.b32 	%r204, %f254;
	mov.b32 	%r203, %f6;
	mov.b32 	%r222, %f323;
	mov.b32 	%r221, %f15;
	mov.b32 	%r240, %f392;
	mov.b32 	%r239, %f24;
	mov.b32 	%r258, %f460;
	mov.b32 	%r257, %f33;
	selp.f32 	%f56, %f512, %f508, %p80;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	LBB0_52;
// %bb.51:
	mov.b32 	%r280, %f57;
	and.b32  	%r281, %r280, -2147483648;
	mov.b32 	%r282, %f903;
	or.b32  	%r283, %r281, %r282;
	mov.b32 	%f903, %r283;
LBB0_52:                                // %__nv_fmodf.exit1069
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.global.u32 	%r14, [%rd90];
	shr.u32 	%r15, %r1, 1;
	// begin inline asm
	cvt.rn.f16x2.f32 %r202, %r204, %r203;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r220, %r222, %r221;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r238, %r240, %r239;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r256, %r258, %r257;
	// end inline asm
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r290, %f535;
	and.b32  	%r291, %r290, -2147483648;
	or.b32  	%r292, %r291, 1056964608;
	mov.b32 	%f536, %r292;
	add.f32 	%f537, %f535, %f536;
	cvt.rzi.f32.f32 	%f538, %f537;
	abs.f32 	%f539, %f535;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f542, %f541, %f540, %p95;
	cvt.rzi.s32.f32 	%r293, %f542;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	and.b32  	%r294, %r293, 1;
	setp.eq.b32 	%p96, %r294, 1;
	selp.f32 	%f554, %f552, %f553, %p96;
	selp.f32 	%f555, %f553, %f552, %p96;
	and.b32  	%r295, %r293, 2;
	setp.eq.s32 	%p97, %r295, 0;
	neg.f32 	%f556, %f554;
	selp.f32 	%f557, %f554, %f556, %p97;
	add.s32 	%r296, %r293, 1;
	and.b32  	%r297, %r296, 2;
	setp.eq.s32 	%p98, %r297, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f560, %f555, %f559, %p98;
	cvt.rzi.f32.f32 	%f561, %f903;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r286, %f566;
	mov.b32 	%r285, %f56;
	// begin inline asm
	cvt.rn.f16x2.f32 %r46, %r286, %r285;
	// end inline asm
	mov.b32 	%r289, %f563;
	mov.b32 	%r288, %f55;
	// begin inline asm
	cvt.rn.f16x2.f32 %r47, %r289, %r288;
	// end inline asm
	mov.u64 	%rd222, 2;
	mov.u64 	%rd221, -2;
LBB0_53:                                // %L1086.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd222, %rd222, %rd222;
	add.s64 	%rd8, %rd221, 1;
	setp.ge.u64 	%p101, %rd8, %rd221;
	mov.u64 	%rd221, %rd8;
	@%p101 bra 	LBB0_53;
// %bb.54:                              // %L1093
	and.b64  	%rd93, %rd222, 9223372036854775807;
	setp.ne.s64 	%p102, %rd93, 16;
	@%p102 bra 	LBB0_132;
// %bb.55:                              // %L1095
	shr.u32 	%r48, %r1, 3;
	and.b32  	%r298, %r48, 2;
	or.b32  	%r49, %r18, %r298;
	and.b32  	%r299, %r15, 4;
	or.b32  	%r50, %r49, %r299;
	and.b32  	%r300, %r1, 3;
	mul.lo.s32 	%r301, %r300, %r50;
	shl.b32 	%r302, %r301, 1;
	neg.s32 	%r303, %r302;
	cvt.rn.f32.s32 	%f567, %r303;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f74, %f567, %f568;
	abs.f32 	%f907, %f74;
	setp.lt.f32 	%p103, %f907, 0f40000000;
	@%p103 bra 	LBB0_67;
// %bb.56:
	setp.gtu.f32 	%p104, %f907, 0f4B800000;
	@%p104 bra 	LBB0_63;
	bra.uni 	LBB0_57;
LBB0_63:
	mov.b32 	%r52, %f907;
	and.b32  	%r304, %r52, 8388607;
	or.b32  	%r2605, %r304, 1065353216;
	mov.b32 	%f906, %r2605;
	add.s32 	%r305, %r52, -1073741824;
	and.b32  	%r2606, %r305, -8388608;
	setp.eq.s32 	%p110, %r2606, 0;
	@%p110 bra 	LBB0_66;
// %bb.64:                              // %.lr.ph1823.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
LBB0_65:                                // %.lr.ph1823
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r306, %r2606, 192937984;
	add.s32 	%r307, %r306, %r2605;
	mov.b32 	%f579, %r307;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2606, %r2606, %r306;
	mov.b32 	%r2605, %f906;
	setp.ne.s32 	%p111, %r2606, 0;
	setp.ne.s32 	%p112, %r2605, 0;
	and.pred  	%p113, %p111, %p112;
	@%p113 bra 	LBB0_65;
LBB0_66:                                // %__internal_fmodf_slowpath_mod.exit.i.i1116
	setp.gt.u32 	%p114, %r52, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p114;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	LBB0_67;
LBB0_57:                                // %__nv_fast_fdividef.exit.i.i.i1082
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f76, %f570;
	fma.rn.f32 	%f77, %f76, 0fC0000000, %f907;
	mov.b32 	%r51, %f77;
	setp.lt.u32 	%p105, %r51, 1073741824;
	mov.f32 	%f905, %f76;
	@%p105 bra 	LBB0_62;
// %bb.58:
	setp.lt.u32 	%p106, %r51, -2147483647;
	@%p106 bra 	LBB0_60;
// %bb.59:
	add.f32 	%f575, %f76, 0fBF800000;
	setp.lt.f32 	%p109, %f77, 0fC0000000;
	selp.f32 	%f576, %f575, %f76, %p109;
	add.f32 	%f905, %f576, 0fBF800000;
	bra.uni 	LBB0_62;
LBB0_60:
	add.f32 	%f905, %f76, 0f3F800000;
	setp.ltu.f32 	%p107, %f77, 0f40800000;
	@%p107 bra 	LBB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i1087
	fma.rn.f32 	%f572, %f184, 0fC0400000, %f77;
	setp.ge.f32 	%p108, %f572, 0f00000000;
	selp.f32 	%f573, %f905, %f76, %p108;
	add.f32 	%f574, %f573, 0f3F800000;
	add.f32 	%f905, %f574, 0f3F800000;
LBB0_62:                                // %__internal_fmodf_fastpath_quot.exit.i.i1090
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_67:                                // %__internal_fmodf_kernel.exit.i1119
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p115, %f588, 0f7F800000;
	@%p115 bra 	LBB0_69;
// %bb.68:
	mov.b32 	%r308, %f74;
	and.b32  	%r309, %r308, -2147483648;
	mov.b32 	%r310, %f907;
	or.b32  	%r311, %r309, %r310;
	mov.b32 	%f907, %r311;
LBB0_69:                                // %__nv_fmodf.exit1122
	add.f32 	%f589, %f907, %f907;
	mov.b32 	%r312, %f589;
	and.b32  	%r313, %r312, -2147483648;
	or.b32  	%r314, %r313, 1056964608;
	mov.b32 	%f590, %r314;
	add.f32 	%f591, %f589, %f590;
	cvt.rzi.f32.f32 	%f592, %f591;
	abs.f32 	%f593, %f589;
	setp.gt.f32 	%p116, %f593, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p116;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p117, %f593, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p117;
	cvt.rzi.s32.f32 	%r315, %f596;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	mul.f32 	%f598, %f597, %f597;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	and.b32  	%r316, %r315, 1;
	setp.eq.b32 	%p118, %r316, 1;
	selp.f32 	%f608, %f606, %f607, %p118;
	selp.f32 	%f609, %f607, %f606, %p118;
	and.b32  	%r317, %r315, 2;
	setp.eq.s32 	%p119, %r317, 0;
	neg.f32 	%f610, %f608;
	selp.f32 	%f611, %f608, %f610, %p119;
	add.s32 	%r318, %r315, 1;
	and.b32  	%r319, %r318, 2;
	setp.eq.s32 	%p120, %r319, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f614, %f609, %f613, %p120;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.f32 	%p121, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f91, %f616, %f611, %p121;
	abs.f32 	%f617, %f907;
	setp.gt.f32 	%p122, %f617, 0f4B800000;
	add.f32 	%f618, %f91, 0f3F800000;
	and.b32  	%r320, %r12, 6;
	mov.u32 	%r321, -8;
	sub.s32 	%r322, %r321, %r320;
	mul.lo.s32 	%r323, %r50, %r322;
	cvt.rn.f32.s32 	%f619, %r323;
	div.approx.f32 	%f93, %f619, %f568;
	abs.f32 	%f911, %f93;
	setp.lt.f32 	%p123, %f911, 0f40000000;
	@%p123 bra 	LBB0_81;
// %bb.70:
	setp.gtu.f32 	%p124, %f911, 0f4B800000;
	@%p124 bra 	LBB0_77;
	bra.uni 	LBB0_71;
LBB0_77:
	mov.b32 	%r60, %f911;
	and.b32  	%r324, %r60, 8388607;
	or.b32  	%r2607, %r324, 1065353216;
	mov.b32 	%f910, %r2607;
	add.s32 	%r325, %r60, -1073741824;
	and.b32  	%r2608, %r325, -8388608;
	setp.eq.s32 	%p130, %r2608, 0;
	@%p130 bra 	LBB0_80;
// %bb.78:                              // %.lr.ph1813.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
LBB0_79:                                // %.lr.ph1813
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r326, %r2608, 192937984;
	add.s32 	%r327, %r326, %r2607;
	mov.b32 	%f631, %r327;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2608, %r2608, %r326;
	mov.b32 	%r2607, %f910;
	setp.ne.s32 	%p131, %r2608, 0;
	setp.ne.s32 	%p132, %r2607, 0;
	and.pred  	%p133, %p131, %p132;
	@%p133 bra 	LBB0_79;
LBB0_80:                                // %__internal_fmodf_slowpath_mod.exit.i.i1169
	setp.gt.u32 	%p134, %r60, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p134;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	LBB0_81;
LBB0_71:                                // %__nv_fast_fdividef.exit.i.i.i1135
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f95, %f622;
	fma.rn.f32 	%f96, %f95, 0fC0000000, %f911;
	mov.b32 	%r59, %f96;
	setp.lt.u32 	%p125, %r59, 1073741824;
	mov.f32 	%f909, %f95;
	@%p125 bra 	LBB0_76;
// %bb.72:
	setp.lt.u32 	%p126, %r59, -2147483647;
	@%p126 bra 	LBB0_74;
// %bb.73:
	add.f32 	%f627, %f95, 0fBF800000;
	setp.lt.f32 	%p129, %f96, 0fC0000000;
	selp.f32 	%f628, %f627, %f95, %p129;
	add.f32 	%f909, %f628, 0fBF800000;
	bra.uni 	LBB0_76;
LBB0_74:
	add.f32 	%f909, %f95, 0f3F800000;
	setp.ltu.f32 	%p127, %f96, 0f40800000;
	@%p127 bra 	LBB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i1140
	fma.rn.f32 	%f624, %f184, 0fC0400000, %f96;
	setp.ge.f32 	%p128, %f624, 0f00000000;
	selp.f32 	%f625, %f909, %f95, %p128;
	add.f32 	%f626, %f625, 0f3F800000;
	add.f32 	%f909, %f626, 0f3F800000;
LBB0_76:                                // %__internal_fmodf_fastpath_quot.exit.i.i1143
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_81:                                // %__internal_fmodf_kernel.exit.i1172
	selp.f32 	%f92, %f618, %f614, %p122;
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p135, %f640, 0f7F800000;
	@%p135 bra 	LBB0_83;
// %bb.82:
	mov.b32 	%r328, %f93;
	and.b32  	%r329, %r328, -2147483648;
	mov.b32 	%r330, %f911;
	or.b32  	%r331, %r329, %r330;
	mov.b32 	%f911, %r331;
LBB0_83:                                // %__nv_fmodf.exit1175
	add.f32 	%f641, %f911, %f911;
	mov.b32 	%r344, %f641;
	and.b32  	%r345, %r344, -2147483648;
	or.b32  	%r346, %r345, 1056964608;
	mov.b32 	%f642, %r346;
	add.f32 	%f643, %f641, %f642;
	cvt.rzi.f32.f32 	%f644, %f643;
	abs.f32 	%f645, %f641;
	setp.gt.f32 	%p136, %f645, 0f4B000000;
	selp.f32 	%f646, %f641, %f644, %p136;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p137, %f645, 0f3F000000;
	selp.f32 	%f648, %f647, %f646, %p137;
	cvt.rzi.s32.f32 	%r347, %f648;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	and.b32  	%r348, %r347, 1;
	setp.eq.b32 	%p138, %r348, 1;
	selp.f32 	%f660, %f658, %f659, %p138;
	selp.f32 	%f661, %f659, %f658, %p138;
	and.b32  	%r349, %r347, 2;
	setp.eq.s32 	%p139, %r349, 0;
	neg.f32 	%f662, %f660;
	selp.f32 	%f663, %f660, %f662, %p139;
	add.s32 	%r350, %r347, 1;
	and.b32  	%r351, %r350, 2;
	setp.eq.s32 	%p140, %r351, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f666, %f661, %f665, %p140;
	cvt.rzi.f32.f32 	%f667, %f911;
	setp.eq.f32 	%p141, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	selp.f32 	%f669, %f668, %f663, %p141;
	abs.f32 	%f670, %f911;
	setp.gt.f32 	%p142, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	selp.f32 	%f672, %f671, %f666, %p142;
	mov.b32 	%r334, %f672;
	mov.b32 	%r333, %f92;
	// begin inline asm
	cvt.rn.f16x2.f32 %r67, %r334, %r333;
	// end inline asm
	mov.b32 	%r340, %f669;
	xor.b32  	%r337, %r340, -2147483648;
	mov.b32 	%r339, %f91;
	xor.b32  	%r336, %r339, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r68, %r337, %r336;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r69, %r340, %r339;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r70, %r334, %r333;
	// end inline asm
	mov.u64 	%rd224, 2;
	mov.u64 	%rd223, -2;
LBB0_84:                                // %L1277.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd224, %rd224, %rd224;
	add.s64 	%rd12, %rd223, 1;
	setp.ge.u64 	%p143, %rd12, %rd223;
	mov.u64 	%rd223, %rd12;
	@%p143 bra 	LBB0_84;
// %bb.85:                              // %L1284
	and.b64  	%rd98, %rd224, 9223372036854775807;
	setp.ne.s64 	%p144, %rd98, 16;
	@%p144 bra 	LBB0_131;
// %bb.86:                              // %L1286
	shl.b32 	%r352, %r16, 1;
	neg.s32 	%r71, %r352;
	mov.u64 	%rd226, 2;
	mov.u64 	%rd225, -2;
LBB0_87:                                // %L1353.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd226, %rd226, %rd226;
	add.s64 	%rd16, %rd225, 1;
	setp.ge.u64 	%p145, %rd16, %rd225;
	mov.u64 	%rd225, %rd16;
	@%p145 bra 	LBB0_87;
// %bb.88:                              // %L1360
	mul.lo.s32 	%r72, %r71, %r50;
	cvt.rn.f32.s32 	%f673, %r72;
	shl.b64 	%rd103, %rd226, 1;
	cvt.rn.f32.s64 	%f674, %rd103;
	div.approx.f32 	%f110, %f673, %f674;
	abs.f32 	%f915, %f110;
	setp.lt.f32 	%p146, %f915, 0f40000000;
	@%p146 bra 	LBB0_100;
// %bb.89:
	setp.gtu.f32 	%p147, %f915, 0f4B800000;
	@%p147 bra 	LBB0_96;
	bra.uni 	LBB0_90;
LBB0_96:
	mov.b32 	%r74, %f915;
	and.b32  	%r353, %r74, 8388607;
	or.b32  	%r2609, %r353, 1065353216;
	mov.b32 	%f914, %r2609;
	add.s32 	%r354, %r74, -1073741824;
	and.b32  	%r2610, %r354, -8388608;
	setp.eq.s32 	%p153, %r2610, 0;
	@%p153 bra 	LBB0_99;
// %bb.97:                              // %.lr.ph1798.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
LBB0_98:                                // %.lr.ph1798
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r355, %r2610, 192937984;
	add.s32 	%r356, %r355, %r2609;
	mov.b32 	%f685, %r356;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2610, %r2610, %r355;
	mov.b32 	%r2609, %f914;
	setp.ne.s32 	%p154, %r2610, 0;
	setp.ne.s32 	%p155, %r2609, 0;
	and.pred  	%p156, %p154, %p155;
	@%p156 bra 	LBB0_98;
LBB0_99:                                // %__internal_fmodf_slowpath_mod.exit.i.i1222
	setp.gt.u32 	%p157, %r74, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p157;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	LBB0_100;
LBB0_90:                                // %__nv_fast_fdividef.exit.i.i.i1188
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f112, %f676;
	fma.rn.f32 	%f113, %f112, 0fC0000000, %f915;
	mov.b32 	%r73, %f113;
	setp.lt.u32 	%p148, %r73, 1073741824;
	mov.f32 	%f913, %f112;
	@%p148 bra 	LBB0_95;
// %bb.91:
	setp.lt.u32 	%p149, %r73, -2147483647;
	@%p149 bra 	LBB0_93;
// %bb.92:
	add.f32 	%f681, %f112, 0fBF800000;
	setp.lt.f32 	%p152, %f113, 0fC0000000;
	selp.f32 	%f682, %f681, %f112, %p152;
	add.f32 	%f913, %f682, 0fBF800000;
	bra.uni 	LBB0_95;
LBB0_93:
	add.f32 	%f913, %f112, 0f3F800000;
	setp.ltu.f32 	%p150, %f113, 0f40800000;
	@%p150 bra 	LBB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i1193
	fma.rn.f32 	%f678, %f184, 0fC0400000, %f113;
	setp.ge.f32 	%p151, %f678, 0f00000000;
	selp.f32 	%f679, %f913, %f112, %p151;
	add.f32 	%f680, %f679, 0f3F800000;
	add.f32 	%f913, %f680, 0f3F800000;
LBB0_95:                                // %__internal_fmodf_fastpath_quot.exit.i.i1196
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_100:                               // %__internal_fmodf_kernel.exit.i1225
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p158, %f694, 0f7F800000;
	@%p158 bra 	LBB0_102;
// %bb.101:
	mov.b32 	%r357, %f110;
	and.b32  	%r358, %r357, -2147483648;
	mov.b32 	%r359, %f915;
	or.b32  	%r360, %r358, %r359;
	mov.b32 	%f915, %r360;
LBB0_102:                               // %__nv_fmodf.exit1228
	add.f32 	%f695, %f915, %f915;
	mov.b32 	%r361, %f695;
	and.b32  	%r362, %r361, -2147483648;
	or.b32  	%r363, %r362, 1056964608;
	mov.b32 	%f696, %r363;
	add.f32 	%f697, %f695, %f696;
	cvt.rzi.f32.f32 	%f698, %f697;
	abs.f32 	%f699, %f695;
	setp.gt.f32 	%p159, %f699, 0f4B000000;
	selp.f32 	%f700, %f695, %f698, %p159;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p160, %f699, 0f3F000000;
	selp.f32 	%f702, %f701, %f700, %p160;
	cvt.rzi.s32.f32 	%r364, %f702;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	mul.f32 	%f704, %f703, %f703;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	and.b32  	%r365, %r364, 1;
	setp.eq.b32 	%p161, %r365, 1;
	selp.f32 	%f714, %f712, %f713, %p161;
	selp.f32 	%f715, %f713, %f712, %p161;
	and.b32  	%r366, %r364, 2;
	setp.eq.s32 	%p162, %r366, 0;
	neg.f32 	%f716, %f714;
	selp.f32 	%f717, %f714, %f716, %p162;
	add.s32 	%r367, %r364, 1;
	and.b32  	%r368, %r367, 2;
	setp.eq.s32 	%p163, %r368, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f720, %f715, %f719, %p163;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.f32 	%p164, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f127, %f722, %f717, %p164;
	abs.f32 	%f723, %f915;
	setp.gt.f32 	%p165, %f723, 0f4B800000;
	add.f32 	%f724, %f127, 0f3F800000;
	selp.f32 	%f128, %f724, %f720, %p165;
	mov.u64 	%rd228, 2;
	mov.u64 	%rd227, -2;
LBB0_103:                               // %L1395.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd228, %rd228, %rd228;
	add.s64 	%rd20, %rd227, 1;
	setp.ge.u64 	%p166, %rd20, %rd227;
	mov.u64 	%rd227, %rd20;
	@%p166 bra 	LBB0_103;
// %bb.104:                             // %L1402
	shl.b32 	%r369, %r50, 2;
	sub.s32 	%r370, %r72, %r369;
	cvt.rn.f32.s32 	%f725, %r370;
	shl.b64 	%rd106, %rd228, 1;
	cvt.rn.f32.s64 	%f726, %rd106;
	div.approx.f32 	%f129, %f725, %f726;
	abs.f32 	%f919, %f129;
	setp.lt.f32 	%p167, %f919, 0f40000000;
	@%p167 bra 	LBB0_116;
// %bb.105:
	setp.gtu.f32 	%p168, %f919, 0f4B800000;
	@%p168 bra 	LBB0_112;
	bra.uni 	LBB0_106;
LBB0_112:
	mov.b32 	%r82, %f919;
	and.b32  	%r371, %r82, 8388607;
	or.b32  	%r2611, %r371, 1065353216;
	mov.b32 	%f918, %r2611;
	add.s32 	%r372, %r82, -1073741824;
	and.b32  	%r2612, %r372, -8388608;
	setp.eq.s32 	%p174, %r2612, 0;
	@%p174 bra 	LBB0_115;
// %bb.113:                             // %.lr.ph1788.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
LBB0_114:                               // %.lr.ph1788
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r373, %r2612, 192937984;
	add.s32 	%r374, %r373, %r2611;
	mov.b32 	%f737, %r374;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2612, %r2612, %r373;
	mov.b32 	%r2611, %f918;
	setp.ne.s32 	%p175, %r2612, 0;
	setp.ne.s32 	%p176, %r2611, 0;
	and.pred  	%p177, %p175, %p176;
	@%p177 bra 	LBB0_114;
LBB0_115:                               // %__internal_fmodf_slowpath_mod.exit.i.i1275
	setp.gt.u32 	%p178, %r82, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p178;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	LBB0_116;
LBB0_106:                               // %__nv_fast_fdividef.exit.i.i.i1241
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f131, %f728;
	fma.rn.f32 	%f132, %f131, 0fC0000000, %f919;
	mov.b32 	%r81, %f132;
	setp.lt.u32 	%p169, %r81, 1073741824;
	mov.f32 	%f917, %f131;
	@%p169 bra 	LBB0_111;
// %bb.107:
	setp.lt.u32 	%p170, %r81, -2147483647;
	@%p170 bra 	LBB0_109;
// %bb.108:
	add.f32 	%f733, %f131, 0fBF800000;
	setp.lt.f32 	%p173, %f132, 0fC0000000;
	selp.f32 	%f734, %f733, %f131, %p173;
	add.f32 	%f917, %f734, 0fBF800000;
	bra.uni 	LBB0_111;
LBB0_109:
	add.f32 	%f917, %f131, 0f3F800000;
	setp.ltu.f32 	%p171, %f132, 0f40800000;
	@%p171 bra 	LBB0_111;
// %bb.110:                             // %__nv_fmaf_rn.exit.i.i.i1246
	fma.rn.f32 	%f730, %f184, 0fC0400000, %f132;
	setp.ge.f32 	%p172, %f730, 0f00000000;
	selp.f32 	%f731, %f917, %f131, %p172;
	add.f32 	%f732, %f731, 0f3F800000;
	add.f32 	%f917, %f732, 0f3F800000;
LBB0_111:                               // %__internal_fmodf_fastpath_quot.exit.i.i1249
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_116:                               // %__internal_fmodf_kernel.exit.i1278
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p179, %f746, 0f7F800000;
	@%p179 bra 	LBB0_118;
// %bb.117:
	mov.b32 	%r375, %f129;
	and.b32  	%r376, %r375, -2147483648;
	mov.b32 	%r377, %f919;
	or.b32  	%r378, %r376, %r377;
	mov.b32 	%f919, %r378;
LBB0_118:                               // %__nv_fmodf.exit1281
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r385, %f747;
	and.b32  	%r386, %r385, -2147483648;
	or.b32  	%r387, %r386, 1056964608;
	mov.b32 	%f748, %r387;
	add.f32 	%f749, %f747, %f748;
	cvt.rzi.f32.f32 	%f750, %f749;
	abs.f32 	%f751, %f747;
	setp.gt.f32 	%p180, %f751, 0f4B000000;
	selp.f32 	%f752, %f747, %f750, %p180;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p181, %f751, 0f3F000000;
	selp.f32 	%f754, %f753, %f752, %p181;
	cvt.rzi.s32.f32 	%r388, %f754;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	and.b32  	%r389, %r388, 1;
	setp.eq.b32 	%p182, %r389, 1;
	selp.f32 	%f766, %f764, %f765, %p182;
	selp.f32 	%f767, %f765, %f764, %p182;
	and.b32  	%r390, %r388, 2;
	setp.eq.s32 	%p183, %r390, 0;
	neg.f32 	%f768, %f766;
	selp.f32 	%f769, %f766, %f768, %p183;
	add.s32 	%r391, %r388, 1;
	and.b32  	%r392, %r391, 2;
	setp.eq.s32 	%p184, %r392, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f772, %f767, %f771, %p184;
	cvt.rzi.f32.f32 	%f773, %f919;
	setp.eq.f32 	%p185, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	selp.f32 	%f775, %f774, %f769, %p185;
	abs.f32 	%f776, %f919;
	setp.gt.f32 	%p186, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	selp.f32 	%f778, %f777, %f772, %p186;
	mov.b32 	%r381, %f778;
	mov.b32 	%r380, %f128;
	// begin inline asm
	cvt.rn.f16x2.f32 %r89, %r381, %r380;
	// end inline asm
	mov.b32 	%r384, %f775;
	mov.b32 	%r383, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r90, %r384, %r383;
	// end inline asm
	mov.u64 	%rd230, 2;
	mov.u64 	%rd229, -2;
LBB0_119:                               // %L1441.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd230, %rd230, %rd230;
	add.s64 	%rd24, %rd229, 1;
	setp.ge.u64 	%p187, %rd24, %rd229;
	mov.u64 	%rd229, %rd24;
	@%p187 bra 	LBB0_119;
// %bb.120:                             // %L1448
	and.b64  	%rd109, %rd230, 9223372036854775807;
	setp.ne.s64 	%p188, %rd109, 16;
	@%p188 bra 	LBB0_130;
// %bb.121:                             // %L1450
	mul.lo.s32 	%r92, %r71, %r49;
	cvt.rn.f32.s32 	%f779, %r92;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f146, %f779, %f780;
	abs.f32 	%f923, %f146;
	setp.lt.f32 	%p189, %f923, 0f40000000;
	@%p189 bra 	LBB0_140;
// %bb.122:
	setp.gtu.f32 	%p190, %f923, 0f4B800000;
	@%p190 bra 	LBB0_136;
	bra.uni 	LBB0_123;
LBB0_136:
	mov.b32 	%r114, %f923;
	and.b32  	%r393, %r114, 8388607;
	or.b32  	%r2627, %r393, 1065353216;
	mov.b32 	%f922, %r2627;
	add.s32 	%r394, %r114, -1073741824;
	and.b32  	%r2628, %r394, -8388608;
	setp.eq.s32 	%p196, %r2628, 0;
	@%p196 bra 	LBB0_139;
// %bb.137:                             // %.lr.ph1778.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
LBB0_138:                               // %.lr.ph1778
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r395, %r2628, 192937984;
	add.s32 	%r396, %r395, %r2627;
	mov.b32 	%f791, %r396;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f922, %f791, %f797;
	sub.s32 	%r2628, %r2628, %r395;
	mov.b32 	%r2627, %f922;
	setp.ne.s32 	%p197, %r2628, 0;
	setp.ne.s32 	%p198, %r2627, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	LBB0_138;
LBB0_139:                               // %__internal_fmodf_slowpath_mod.exit.i.i1328
	setp.gt.u32 	%p200, %r114, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f799, %f922, 0f34000000;
	mul.f32 	%f923, %f798, %f799;
	bra.uni 	LBB0_140;
LBB0_123:                               // %__nv_fast_fdividef.exit.i.i.i1294
	div.approx.f32 	%f782, %f923, %f184;
	cvt.rzi.f32.f32 	%f148, %f782;
	fma.rn.f32 	%f149, %f148, 0fC0000000, %f923;
	mov.b32 	%r113, %f149;
	setp.lt.u32 	%p191, %r113, 1073741824;
	mov.f32 	%f921, %f148;
	@%p191 bra 	LBB0_135;
// %bb.124:
	setp.lt.u32 	%p192, %r113, -2147483647;
	@%p192 bra 	LBB0_133;
// %bb.125:
	add.f32 	%f787, %f148, 0fBF800000;
	setp.lt.f32 	%p195, %f149, 0fC0000000;
	selp.f32 	%f788, %f787, %f148, %p195;
	add.f32 	%f921, %f788, 0fBF800000;
	bra.uni 	LBB0_135;
LBB0_133:
	add.f32 	%f921, %f148, 0f3F800000;
	setp.ltu.f32 	%p193, %f149, 0f40800000;
	@%p193 bra 	LBB0_135;
// %bb.134:                             // %__nv_fmaf_rn.exit.i.i.i1299
	fma.rn.f32 	%f784, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p194, %f784, 0f00000000;
	selp.f32 	%f785, %f921, %f148, %p194;
	add.f32 	%f786, %f785, 0f3F800000;
	add.f32 	%f921, %f786, 0f3F800000;
LBB0_135:                               // %__internal_fmodf_fastpath_quot.exit.i.i1302
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_140:                               // %__internal_fmodf_kernel.exit.i1331
	abs.f32 	%f800, %f923;
	setp.gtu.f32 	%p201, %f800, 0f7F800000;
	@%p201 bra 	LBB0_142;
// %bb.141:
	mov.b32 	%r397, %f146;
	and.b32  	%r398, %r397, -2147483648;
	mov.b32 	%r399, %f923;
	or.b32  	%r400, %r398, %r399;
	mov.b32 	%f923, %r400;
LBB0_142:                               // %__nv_fmodf.exit1334
	shl.b32 	%r409, %r49, 2;
	sub.s32 	%r410, %r92, %r409;
	cvt.rn.f32.s32 	%f833, %r410;
	div.approx.f32 	%f166, %f833, %f780;
	abs.f32 	%f927, %f166;
	setp.lt.f32 	%p210, %f927, 0f40000000;
	@%p210 bra 	LBB0_154;
// %bb.143:
	setp.gtu.f32 	%p211, %f927, 0f4B800000;
	@%p211 bra 	LBB0_150;
	bra.uni 	LBB0_144;
LBB0_150:
	mov.b32 	%r122, %f927;
	and.b32  	%r411, %r122, 8388607;
	or.b32  	%r2629, %r411, 1065353216;
	mov.b32 	%f926, %r2629;
	add.s32 	%r412, %r122, -1073741824;
	and.b32  	%r2630, %r412, -8388608;
	setp.eq.s32 	%p217, %r2630, 0;
	@%p217 bra 	LBB0_153;
// %bb.151:                             // %.lr.ph.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
LBB0_152:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r413, %r2630, 192937984;
	add.s32 	%r414, %r413, %r2629;
	mov.b32 	%f845, %r414;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f926, %f845, %f851;
	sub.s32 	%r2630, %r2630, %r413;
	mov.b32 	%r2629, %f926;
	setp.ne.s32 	%p218, %r2630, 0;
	setp.ne.s32 	%p219, %r2629, 0;
	and.pred  	%p220, %p218, %p219;
	@%p220 bra 	LBB0_152;
LBB0_153:                               // %__internal_fmodf_slowpath_mod.exit.i.i1381
	setp.gt.u32 	%p221, %r122, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p221;
	mul.f32 	%f853, %f926, 0f34000000;
	mul.f32 	%f927, %f852, %f853;
	bra.uni 	LBB0_154;
LBB0_144:                               // %__nv_fast_fdividef.exit.i.i.i1347
	div.approx.f32 	%f836, %f927, %f184;
	cvt.rzi.f32.f32 	%f168, %f836;
	fma.rn.f32 	%f169, %f168, 0fC0000000, %f927;
	mov.b32 	%r121, %f169;
	setp.lt.u32 	%p212, %r121, 1073741824;
	mov.f32 	%f925, %f168;
	@%p212 bra 	LBB0_149;
// %bb.145:
	setp.lt.u32 	%p213, %r121, -2147483647;
	@%p213 bra 	LBB0_147;
// %bb.146:
	add.f32 	%f841, %f168, 0fBF800000;
	setp.lt.f32 	%p216, %f169, 0fC0000000;
	selp.f32 	%f842, %f841, %f168, %p216;
	add.f32 	%f925, %f842, 0fBF800000;
	bra.uni 	LBB0_149;
LBB0_147:
	add.f32 	%f925, %f168, 0f3F800000;
	setp.ltu.f32 	%p214, %f169, 0f40800000;
	@%p214 bra 	LBB0_149;
// %bb.148:                             // %__nv_fmaf_rn.exit.i.i.i1352
	fma.rn.f32 	%f838, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p215, %f838, 0f00000000;
	selp.f32 	%f839, %f925, %f168, %p215;
	add.f32 	%f840, %f839, 0f3F800000;
	add.f32 	%f925, %f840, 0f3F800000;
LBB0_149:                               // %__internal_fmodf_fastpath_quot.exit.i.i1355
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_154:                               // %__internal_fmodf_kernel.exit.i1384
	abs.f32 	%f854, %f927;
	setp.gtu.f32 	%p222, %f854, 0f7F800000;
	@%p222 bra 	LBB0_156;
// %bb.155:
	mov.b32 	%r415, %f166;
	and.b32  	%r416, %r415, -2147483648;
	mov.b32 	%r417, %f927;
	or.b32  	%r418, %r416, %r417;
	mov.b32 	%f927, %r418;
LBB0_156:                               // %__nv_fmodf.exit1387
	setp.le.s32 	%p230, %r6, %r5;
	mov.u32 	%r2599, 0;
	@%p230 bra 	LBB0_160;
// %bb.157:                             // %L1572.lr.ph
	add.f32 	%f801, %f923, %f923;
	mov.b32 	%r401, %f801;
	and.b32  	%r402, %r401, -2147483648;
	or.b32  	%r403, %r402, 1056964608;
	mov.b32 	%f802, %r403;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p203, %f805, 0f4B000000;
	selp.f32 	%f806, %f801, %f804, %p203;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p204, %f805, 0f3F000000;
	selp.f32 	%f808, %f807, %f806, %p204;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f923;
	mul.f32 	%f810, %f809, %f809;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r404, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r405, %r404, 1;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p205, %r405, 1;
	selp.f32 	%f820, %f818, %f819, %p205;
	and.b32  	%r406, %r404, 2;
	setp.eq.s32 	%p206, %r406, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r407, %r404, 1;
	cvt.rzi.f32.f32 	%f827, %f923;
	selp.f32 	%f821, %f819, %f818, %p205;
	selp.f32 	%f823, %f820, %f822, %p206;
	and.b32  	%r408, %r407, 2;
	setp.eq.f32 	%p208, %f827, %f923;
	mul.f32 	%f828, %f923, 0f00000000;
	and.b32  	%r91, %r48, 1;
	setp.eq.s32 	%p207, %r408, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p208;
	abs.f32 	%f830, %f923;
	setp.eq.s32 	%p202, %r91, %r17;
	selp.f32 	%f826, %f821, %f825, %p207;
	setp.gt.f32 	%p209, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	selp.f32 	%f832, %f831, %f826, %p209;
	selp.f32 	%f163, 0f3F800000, 0f00000000, %p202;
	mul.f32 	%f164, %f832, %f163;
	mul.f32 	%f165, %f829, %f163;
	add.f32 	%f855, %f927, %f927;
	mov.b32 	%r431, %f855;
	and.b32  	%r432, %r431, -2147483648;
	or.b32  	%r433, %r432, 1056964608;
	mov.b32 	%f856, %r433;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p223, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p223;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p224, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p224;
	cvt.rzi.s32.f32 	%r434, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f927;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r435, %r434, 1;
	setp.eq.b32 	%p225, %r435, 1;
	selp.f32 	%f874, %f872, %f873, %p225;
	selp.f32 	%f875, %f873, %f872, %p225;
	and.b32  	%r436, %r434, 2;
	setp.eq.s32 	%p226, %r436, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p226;
	add.s32 	%r437, %r434, 1;
	and.b32  	%r438, %r437, 2;
	setp.eq.s32 	%p227, %r438, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p227;
	cvt.rzi.f32.f32 	%f881, %f927;
	setp.eq.f32 	%p228, %f881, %f927;
	mul.f32 	%f882, %f927, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p228;
	abs.f32 	%f884, %f927;
	setp.gt.f32 	%p229, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p229;
	mul.f32 	%f887, %f886, %f163;
	mul.f32 	%f888, %f883, %f163;
	mov.b32 	%r421, %f887;
	mov.b32 	%r420, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	mov.b32 	%r427, %f888;
	xor.b32  	%r424, %r427, -2147483648;
	mov.b32 	%r426, %f165;
	xor.b32  	%r423, %r426, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r423;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r421, %r420;
	// end inline asm
	shl.b32 	%r440, %r5, 13;
	shl.b32 	%r441, %r2, 10;
	and.b32  	%r442, %r441, 4096;
	shl.b32 	%r443, %r2, 5;
	and.b32  	%r133, %r443, 64;
	and.b32  	%r444, %r9, 28;
	and.b32  	%r445, %r443, 32;
	and.b32  	%r134, %r12, 16;
	and.b32  	%r135, %r3, 7;
	shl.b32 	%r446, %r3, 2;
	and.b32  	%r136, %r446, 32;
	and.b32  	%r137, %r15, 8;
	or.b32  	%r447, %r442, %r440;
	or.b32  	%r448, %r447, %r133;
	or.b32  	%r449, %r448, %r445;
	or.b32  	%r138, %r449, %r444;
	add.s32 	%r139, %r138, 524288;
	add.s32 	%r140, %r138, 1048576;
	add.s32 	%r141, %r138, 1572864;
	and.b32  	%r142, %r1, 8;
	shl.b32 	%r450, %r1, 4;
	or.b32  	%r451, %r450, %r142;
	shr.u32 	%r452, %r451, 2;
	and.b32  	%r453, %r452, 30;
	and.b32  	%r454, %r3, 1;
	mul.lo.s32 	%r455, %r454, 520;
	shr.u32 	%r456, %r3, 3;
	mul.lo.s32 	%r457, %r456, 1057;
	bfe.u32 	%r458, %r3, 1, 1;
	mul.lo.s32 	%r459, %r458, 260;
	mul.lo.s32 	%r460, %r19, 65;
	bfe.u32 	%r461, %r3, 2, 1;
	mul.lo.s32 	%r462, %r461, 130;
	add.s32 	%r463, %r453, %r455;
	add.s32 	%r464, %r463, %r457;
	add.s32 	%r465, %r464, %r459;
	add.s32 	%r466, %r465, %r460;
	add.s32 	%r467, %r466, %r462;
	mul.wide.u32 	%rd112, %r467, 4;
	mov.u64 	%rd113, shmem;
	add.s64 	%rd37, %rd113, %rd112;
	add.s32 	%r468, %r463, 32;
	add.s32 	%r469, %r468, %r457;
	add.s32 	%r470, %r469, %r459;
	add.s32 	%r471, %r470, %r460;
	add.s32 	%r472, %r471, %r462;
	mul.wide.u32 	%rd114, %r472, 4;
	add.s64 	%rd38, %rd113, %rd114;
	cvt.u64.u32 	%rd115, %r462;
	cvt.u64.u32 	%rd116, %r460;
	cvt.u64.u32 	%rd117, %r459;
	cvt.u64.u32 	%rd118, %r457;
	cvt.u64.u32 	%rd119, %r455;
	cvt.u64.u32 	%rd120, %r453;
	add.s64 	%rd121, %rd120, %rd119;
	add.s64 	%rd122, %rd121, %rd118;
	add.s64 	%rd123, %rd122, %rd117;
	add.s64 	%rd124, %rd123, %rd116;
	add.s64 	%rd125, %rd124, %rd115;
	shl.b64 	%rd126, %rd125, 2;
	add.s64 	%rd39, %rd113, %rd126;
	add.s32 	%r473, %r463, 33;
	or.b32  	%r474, %r456, 2;
	mul.lo.s32 	%r475, %r474, 1057;
	add.s32 	%r476, %r463, %r475;
	add.s32 	%r477, %r476, %r459;
	add.s32 	%r478, %r477, %r460;
	add.s32 	%r479, %r478, %r462;
	mul.wide.s32 	%rd127, %r479, 4;
	add.s64 	%rd40, %rd113, %rd127;
	add.s32 	%r480, %r468, %r475;
	add.s32 	%r481, %r480, %r459;
	add.s32 	%r482, %r481, %r460;
	add.s32 	%r483, %r482, %r462;
	mul.wide.s32 	%rd128, %r483, 4;
	add.s64 	%rd41, %rd113, %rd128;
	cvt.u64.u32 	%rd129, %r475;
	add.s64 	%rd130, %rd121, %rd129;
	add.s64 	%rd131, %rd130, %rd117;
	add.s64 	%rd132, %rd131, %rd116;
	add.s64 	%rd133, %rd132, %rd115;
	shl.b64 	%rd134, %rd133, 2;
	add.s64 	%rd42, %rd113, %rd134;
	add.s32 	%r484, %r473, %r475;
	add.s32 	%r485, %r484, %r459;
	add.s32 	%r486, %r485, %r460;
	add.s32 	%r487, %r486, %r462;
	mul.wide.s32 	%rd135, %r487, 4;
	add.s64 	%rd43, %rd113, %rd135;
	or.b32  	%r488, %r456, 4;
	mul.lo.s32 	%r489, %r488, 1057;
	add.s32 	%r490, %r463, %r489;
	add.s32 	%r491, %r490, %r459;
	add.s32 	%r492, %r491, %r460;
	add.s32 	%r493, %r492, %r462;
	mul.wide.s32 	%rd136, %r493, 4;
	add.s64 	%rd44, %rd113, %rd136;
	add.s32 	%r494, %r468, %r489;
	add.s32 	%r495, %r494, %r459;
	add.s32 	%r496, %r495, %r460;
	add.s32 	%r497, %r496, %r462;
	mul.wide.s32 	%rd137, %r497, 4;
	add.s64 	%rd45, %rd113, %rd137;
	cvt.u64.u32 	%rd138, %r489;
	add.s64 	%rd139, %rd121, %rd138;
	add.s64 	%rd140, %rd139, %rd117;
	add.s64 	%rd141, %rd140, %rd116;
	add.s64 	%rd142, %rd141, %rd115;
	shl.b64 	%rd143, %rd142, 2;
	add.s64 	%rd46, %rd113, %rd143;
	add.s32 	%r498, %r473, %r489;
	add.s32 	%r499, %r498, %r459;
	add.s32 	%r500, %r499, %r460;
	add.s32 	%r501, %r500, %r462;
	mul.wide.s32 	%rd144, %r501, 4;
	add.s64 	%rd47, %rd113, %rd144;
	or.b32  	%r502, %r456, 6;
	mul.lo.s32 	%r503, %r502, 1057;
	add.s32 	%r504, %r463, %r503;
	add.s32 	%r505, %r504, %r459;
	add.s32 	%r506, %r505, %r460;
	add.s32 	%r507, %r506, %r462;
	mul.wide.s32 	%rd145, %r507, 4;
	add.s64 	%rd48, %rd113, %rd145;
	add.s32 	%r508, %r468, %r503;
	add.s32 	%r509, %r508, %r459;
	add.s32 	%r510, %r509, %r460;
	add.s32 	%r511, %r510, %r462;
	mul.wide.s32 	%rd146, %r511, 4;
	add.s64 	%rd49, %rd113, %rd146;
	cvt.u64.u32 	%rd147, %r503;
	add.s64 	%rd148, %rd121, %rd147;
	add.s64 	%rd149, %rd148, %rd117;
	add.s64 	%rd150, %rd149, %rd116;
	add.s64 	%rd151, %rd150, %rd115;
	shl.b64 	%rd152, %rd151, 2;
	add.s64 	%rd50, %rd113, %rd152;
	add.s32 	%r512, %r473, %r503;
	add.s32 	%r513, %r512, %r459;
	add.s32 	%r514, %r513, %r460;
	add.s32 	%r515, %r514, %r462;
	mul.wide.s32 	%rd153, %r515, 4;
	add.s64 	%rd51, %rd113, %rd153;
	shl.b32 	%r516, %r1, 3;
	and.b32  	%r517, %r516, 64;
	shl.b32 	%r518, %r3, 1;
	or.b32  	%r519, %r518, %r517;
	shr.u32 	%r520, %r519, 2;
	mul.lo.s32 	%r521, %r19, 520;
	and.b32  	%r522, %r4, 32;
	mul.lo.s32 	%r523, %r18, 260;
	mul.lo.s32 	%r524, %r16, 65;
	mul.lo.s32 	%r525, %r17, 130;
	or.b32  	%r526, %r520, 8;
	or.b32  	%r527, %r10, %r13;
	shr.u32 	%r528, %r527, 1;
	mul.lo.s32 	%r529, %r528, 65;
	or.b32  	%r530, %r522, %r520;
	or.b32  	%r531, %r526, %r522;
	add.s32 	%r532, %r457, %r453;
	add.s32 	%r533, %r475, %r453;
	add.s32 	%r534, %r489, %r453;
	add.s32 	%r535, %r503, %r453;
	and.b32  	%r143, %r3, 8;
	shl.b32 	%r536, %r7, 18;
	add.s32 	%r537, %r536, -786432;
	shl.b32 	%r538, %r3, 15;
	and.b32  	%r144, %r538, 262144;
	or.b32  	%r145, %r445, %r444;
	and.b32  	%r539, %r446, 28;
	or.b32  	%r540, %r539, %r48;
	or.b32  	%r541, %r540, %r11;
	shl.b32 	%r146, %r541, 7;
	cvt.s64.s32 	%rd52, %r537;
	and.b32  	%r542, %r518, 14;
	or.b32  	%r543, %r542, %r19;
	mul.lo.s32 	%r544, %r543, 65;
	add.s32 	%r545, %r532, %r544;
	mul.wide.u32 	%rd154, %r545, 4;
	add.s64 	%rd53, %rd113, %rd154;
	cvt.u64.u32 	%rd155, %r544;
	add.s64 	%rd156, %rd120, %rd118;
	add.s64 	%rd157, %rd156, %rd155;
	shl.b64 	%rd158, %rd157, 2;
	add.s64 	%rd54, %rd113, %rd158;
	add.s32 	%r546, %r533, %r544;
	mul.wide.u32 	%rd159, %r546, 4;
	add.s64 	%rd55, %rd113, %rd159;
	add.s64 	%rd160, %rd120, %rd129;
	add.s64 	%rd161, %rd160, %rd155;
	shl.b64 	%rd162, %rd161, 2;
	add.s64 	%rd56, %rd113, %rd162;
	add.s32 	%r547, %r534, %r544;
	mul.wide.u32 	%rd163, %r547, 4;
	add.s64 	%rd57, %rd113, %rd163;
	add.s64 	%rd164, %rd120, %rd138;
	add.s64 	%rd165, %rd164, %rd155;
	shl.b64 	%rd166, %rd165, 2;
	add.s64 	%rd58, %rd113, %rd166;
	add.s32 	%r548, %r535, %r544;
	mul.wide.u32 	%rd167, %r548, 4;
	add.s64 	%rd59, %rd113, %rd167;
	add.s64 	%rd168, %rd120, %rd147;
	add.s64 	%rd169, %rd168, %rd155;
	shl.b64 	%rd170, %rd169, 2;
	add.s64 	%rd60, %rd113, %rd170;
	add.s32 	%r549, %r531, %r529;
	mul.wide.u32 	%rd171, %r549, 4;
	add.s64 	%rd61, %rd113, %rd171;
	add.s32 	%r550, %r530, %r529;
	mul.wide.u32 	%rd172, %r550, 4;
	add.s64 	%rd62, %rd113, %rd172;
	add.s32 	%r551, %r526, %r521;
	add.s32 	%r552, %r551, %r523;
	add.s32 	%r553, %r552, %r525;
	add.s32 	%r554, %r553, %r524;
	add.s32 	%r555, %r554, %r522;
	mul.wide.u32 	%rd173, %r555, 4;
	add.s64 	%rd63, %rd113, %rd173;
	add.s32 	%r556, %r520, %r521;
	add.s32 	%r557, %r556, %r523;
	add.s32 	%r558, %r557, %r525;
	add.s32 	%r559, %r558, %r524;
	add.s32 	%r560, %r559, %r522;
	mul.wide.u32 	%rd174, %r560, 4;
	add.s64 	%rd64, %rd113, %rd174;
	setp.eq.s32 	%p231, %r142, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	setp.ne.s32 	%p245, %r143, 0;
	mov.u32 	%r93, %r2599;
	mov.u32 	%r2626, %r2599;
	mov.u32 	%r2625, %r2599;
	mov.u32 	%r2616, %r2599;
	mov.u32 	%r2617, %r2599;
	mov.u32 	%r2618, %r2599;
	mov.u32 	%r2619, %r2599;
	bra.uni 	LBB0_126;
LBB0_158:                               // %L26113
                                        //   in Loop: Header=BB0_126 Depth=1
	selp.b32 	%r2581, %r154, %r2531, %p231;
	selp.b32 	%r2582, %r2527, %r154, %p231;
	selp.b32 	%r2583, %r153, %r2523, %p231;
	selp.b32 	%r2584, %r2519, %r153, %p231;
	or.b32  	%r2586, %r144, %r2600;
	or.b32  	%r2587, %r133, %r2586;
	or.b32  	%r2588, %r145, %r2587;
	or.b32  	%r2631, %r146, %r2588;
	or.b32  	%r2589, %r2631, 524288;
	cvt.s64.s32 	%rd183, %r2589;
	add.s64 	%rd184, %rd183, %rd52;
	shr.u64 	%rd185, %rd184, 38;
	add.s64 	%rd186, %rd184, %rd185;
	shr.s64 	%rd187, %rd186, 26;
	and.b64  	%rd188, %rd186, -67108864;
	setp.ne.s64 	%p248, %rd188, %rd184;
	setp.lt.s64 	%p249, %rd184, 0;
	and.pred  	%p250, %p249, %p248;
	selp.u64 	%rd189, 1, 0, %p250;
	sub.s64 	%rd190, %rd189, %rd187;
	shl.b64 	%rd191, %rd190, 26;
	add.s64 	%rd192, %rd191, %rd184;
	shl.b64 	%rd193, %rd192, 2;
	add.s64 	%rd194, %rd3, %rd193;
	st.global.v4.u32 	[%rd194], {%r2584, %r2582, %r2583, %r2581};
LBB0_159:                               // %pass8966
                                        //   in Loop: Header=BB0_126 Depth=1
	add.s32 	%r2594, %r2631, 1048576;
	cvt.s64.s32 	%rd195, %r2594;
	add.s64 	%rd196, %rd195, %rd52;
	shr.u64 	%rd197, %rd196, 38;
	add.s64 	%rd198, %rd196, %rd197;
	shr.s64 	%rd199, %rd198, 26;
	and.b64  	%rd200, %rd198, -67108864;
	setp.ne.s64 	%p251, %rd200, %rd196;
	setp.lt.s64 	%p252, %rd196, 0;
	and.pred  	%p253, %p252, %p251;
	selp.u64 	%rd201, 1, 0, %p253;
	sub.s64 	%rd202, %rd201, %rd199;
	shl.b64 	%rd203, %rd202, 26;
	add.s64 	%rd204, %rd203, %rd196;
	shl.b64 	%rd205, %rd204, 2;
	add.s64 	%rd206, %rd3, %rd205;
	st.global.v4.u32 	[%rd206], {%r155, %r157, %r156, %r158};
	add.s32 	%r2595, %r2631, 1572864;
	cvt.s64.s32 	%rd207, %r2595;
	add.s64 	%rd208, %rd207, %rd52;
	shr.u64 	%rd209, %rd208, 38;
	add.s64 	%rd210, %rd208, %rd209;
	shr.s64 	%rd211, %rd210, 26;
	and.b64  	%rd212, %rd210, -67108864;
	setp.ne.s64 	%p254, %rd212, %rd208;
	setp.lt.s64 	%p255, %rd208, 0;
	and.pred  	%p256, %p255, %p254;
	selp.u64 	%rd213, 1, 0, %p256;
	sub.s64 	%rd214, %rd213, %rd211;
	shl.b64 	%rd215, %rd214, 26;
	add.s64 	%rd216, %rd215, %rd208;
	shl.b64 	%rd217, %rd216, 2;
	add.s64 	%rd218, %rd3, %rd217;
	st.global.v4.u32 	[%rd218], {%r159, %r161, %r160, %r162};
	setp.ne.s32 	%p257, %r93, 7936;
	add.s32 	%r93, %r93, 256;
	add.s32 	%r2596, %r93, %r5;
	setp.gt.s32 	%p258, %r6, %r2596;
	and.pred  	%p259, %p257, %p258;
	@%p259 bra 	LBB0_126;
	bra.uni 	LBB0_160;
LBB0_126:                               // %L1572
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_127 Depth 2
	or.b32  	%r626, %r134, %r93;
	or.b32  	%r627, %r626, %r135;
	or.b32  	%r628, %r627, %r136;
	or.b32  	%r629, %r628, %r137;
	shl.b32 	%r630, %r629, 13;
	add.s32 	%r631, %r138, %r630;
	shr.s32 	%r632, %r631, 31;
	shr.u32 	%r633, %r632, 6;
	add.s32 	%r634, %r631, %r633;
	shr.s32 	%r635, %r634, 26;
	and.b32  	%r636, %r634, -67108864;
	setp.ne.s32 	%p232, %r636, %r631;
	setp.lt.s32 	%p233, %r631, 0;
	and.pred  	%p234, %p233, %p232;
	selp.u32 	%r637, 1, 0, %p234;
	sub.s32 	%r638, %r637, %r635;
	shl.b32 	%r639, %r638, 26;
	add.s32 	%r640, %r639, %r631;
	mul.wide.s32 	%rd175, %r640, 4;
	add.s64 	%rd176, %rd2, %rd175;
	ld.global.v4.u32 	{%r641, %r642, %r643, %r644}, [%rd176];
	add.s32 	%r645, %r139, %r630;
	shr.s32 	%r646, %r645, 31;
	shr.u32 	%r647, %r646, 6;
	add.s32 	%r648, %r645, %r647;
	shr.s32 	%r649, %r648, 26;
	and.b32  	%r650, %r648, -67108864;
	setp.ne.s32 	%p235, %r650, %r645;
	setp.lt.s32 	%p236, %r645, 0;
	and.pred  	%p237, %p236, %p235;
	selp.u32 	%r651, 1, 0, %p237;
	sub.s32 	%r652, %r651, %r649;
	shl.b32 	%r653, %r652, 26;
	add.s32 	%r654, %r653, %r645;
	mul.wide.s32 	%rd177, %r654, 4;
	add.s64 	%rd178, %rd2, %rd177;
	ld.global.v4.u32 	{%r655, %r656, %r657, %r658}, [%rd178];
	add.s32 	%r659, %r140, %r630;
	shr.s32 	%r660, %r659, 31;
	shr.u32 	%r661, %r660, 6;
	add.s32 	%r662, %r659, %r661;
	shr.s32 	%r663, %r662, 26;
	and.b32  	%r664, %r662, -67108864;
	setp.ne.s32 	%p238, %r664, %r659;
	setp.lt.s32 	%p239, %r659, 0;
	and.pred  	%p240, %p239, %p238;
	selp.u32 	%r665, 1, 0, %p240;
	sub.s32 	%r666, %r665, %r663;
	shl.b32 	%r667, %r666, 26;
	add.s32 	%r668, %r667, %r659;
	mul.wide.s32 	%rd179, %r668, 4;
	add.s64 	%rd180, %rd2, %rd179;
	ld.global.v4.u32 	{%r669, %r670, %r671, %r672}, [%rd180];
	add.s32 	%r673, %r141, %r630;
	shr.s32 	%r674, %r673, 31;
	shr.u32 	%r675, %r674, 6;
	add.s32 	%r676, %r673, %r675;
	shr.s32 	%r677, %r676, 26;
	and.b32  	%r678, %r676, -67108864;
	setp.ne.s32 	%p241, %r678, %r673;
	setp.lt.s32 	%p242, %r673, 0;
	and.pred  	%p243, %p242, %p241;
	selp.u32 	%r679, 1, 0, %p243;
	sub.s32 	%r680, %r679, %r677;
	shl.b32 	%r681, %r680, 26;
	add.s32 	%r682, %r681, %r673;
	mul.wide.s32 	%rd181, %r682, 4;
	add.s64 	%rd182, %rd2, %rd181;
	ld.global.v4.u32 	{%r683, %r684, %r685, %r686}, [%rd182];
	selp.b32 	%r687, %r643, %r641, %p231;
	shfl.sync.bfly.b32	%r688, %r687, 8, 31, -1;
	selp.b32 	%r562, %r641, %r688, %p231;
	selp.b32 	%r563, %r688, %r643, %p231;
	selp.b32 	%r689, %r644, %r642, %p231;
	shfl.sync.bfly.b32	%r690, %r689, 8, 31, -1;
	selp.b32 	%r570, %r642, %r690, %p231;
	selp.b32 	%r571, %r690, %r644, %p231;
	selp.b32 	%r691, %r657, %r655, %p231;
	shfl.sync.bfly.b32	%r692, %r691, 8, 31, -1;
	selp.b32 	%r578, %r655, %r692, %p231;
	selp.b32 	%r579, %r692, %r657, %p231;
	selp.b32 	%r693, %r658, %r656, %p231;
	shfl.sync.bfly.b32	%r694, %r693, 8, 31, -1;
	selp.b32 	%r586, %r656, %r694, %p231;
	selp.b32 	%r587, %r694, %r658, %p231;
	selp.b32 	%r695, %r671, %r669, %p231;
	shfl.sync.bfly.b32	%r696, %r695, 8, 31, -1;
	selp.b32 	%r594, %r669, %r696, %p231;
	selp.b32 	%r595, %r696, %r671, %p231;
	selp.b32 	%r697, %r672, %r670, %p231;
	shfl.sync.bfly.b32	%r698, %r697, 8, 31, -1;
	selp.b32 	%r602, %r670, %r698, %p231;
	selp.b32 	%r603, %r698, %r672, %p231;
	selp.b32 	%r699, %r685, %r683, %p231;
	shfl.sync.bfly.b32	%r700, %r699, 8, 31, -1;
	selp.b32 	%r610, %r683, %r700, %p231;
	selp.b32 	%r611, %r700, %r685, %p231;
	selp.b32 	%r701, %r686, %r684, %p231;
	shfl.sync.bfly.b32	%r702, %r701, 8, 31, -1;
	selp.b32 	%r618, %r684, %r702, %p231;
	selp.b32 	%r619, %r702, %r686, %p231;
	mov.u32 	%r620, 21520;
	// begin inline asm
	prmt.b32 %r561, %r562, %r563, %r620;
	// end inline asm
	mov.u32 	%r624, 30258;
	// begin inline asm
	prmt.b32 %r565, %r562, %r563, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r569, %r570, %r571, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r573, %r570, %r571, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r577, %r578, %r579, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r581, %r578, %r579, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r585, %r586, %r587, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r589, %r586, %r587, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r593, %r594, %r595, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r597, %r594, %r595, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r601, %r602, %r603, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r605, %r602, %r603, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r609, %r610, %r611, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r613, %r610, %r611, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r617, %r618, %r619, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r621, %r618, %r619, %r624;
	// end inline asm
	st.shared.u32 	[%rd37], %r561;
	st.shared.u32 	[%rd38], %r565;
	st.shared.u32 	[%rd39+4], %r569;
	st.shared.u32 	[%rd39+132], %r573;
	st.shared.u32 	[%rd40], %r577;
	st.shared.u32 	[%rd41], %r581;
	st.shared.u32 	[%rd42+4], %r585;
	st.shared.u32 	[%rd43], %r589;
	st.shared.u32 	[%rd44], %r593;
	st.shared.u32 	[%rd45], %r597;
	st.shared.u32 	[%rd46+4], %r601;
	st.shared.u32 	[%rd47], %r605;
	st.shared.u32 	[%rd48], %r609;
	st.shared.u32 	[%rd49], %r613;
	st.shared.u32 	[%rd50+4], %r617;
	st.shared.u32 	[%rd51], %r621;
	bar.sync 	0;
	mov.u32 	%r2620, 256;
	mov.u64 	%rd231, %rd64;
	mov.u64 	%rd232, %rd63;
	mov.u64 	%rd233, %rd62;
	mov.u64 	%rd234, %rd61;
	mov.u32 	%r2621, %r2619;
	mov.u32 	%r2622, %r2618;
	mov.u32 	%r2623, %r2617;
	mov.u32 	%r2624, %r2616;
LBB0_127:                               // %L13871
                                        //   Parent Loop BB0_126 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2618, %r2626;
	mov.u32 	%r2619, %r2625;
	ld.shared.u32 	%r2617, [%rd231];
	ld.shared.u32 	%r2616, [%rd232];
	// begin inline asm
	mov.b32 %r708, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r719, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r707, %r2617, -2004318072;
	mov.u32 	%r706, 983055;
	// begin inline asm
	lop3.b32 %r705, %r706, %r707, %r708, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r709, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r710, %r708, %r709;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r713, %r705, %r710;
	// end inline asm
	mov.u32 	%r717, 15728880;
	// begin inline asm
	lop3.b32 %r716, %r717, %r707, %r719, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r720, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r721, %r719, %r720;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r724, %r716, %r721;
	// end inline asm
	shr.u32 	%r729, %r707, 8;
	// begin inline asm
	lop3.b32 %r727, %r706, %r729, %r708, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r731, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r732, %r708, %r731;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r735, %r727, %r732;
	// end inline asm
	// begin inline asm
	lop3.b32 %r738, %r717, %r729, %r719, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r742, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r743, %r719, %r742;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r746, %r738, %r743;
	// end inline asm
	// begin inline asm
	mov.b32 %r754, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r765, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r753, %r2616, -2004318072;
	// begin inline asm
	lop3.b32 %r751, %r706, %r753, %r754, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r755, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r756, %r754, %r755;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r759, %r751, %r756;
	// end inline asm
	// begin inline asm
	lop3.b32 %r762, %r717, %r753, %r765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r766, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r767, %r765, %r766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r770, %r762, %r767;
	// end inline asm
	shr.u32 	%r775, %r753, 8;
	// begin inline asm
	lop3.b32 %r773, %r706, %r775, %r754, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r777, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r778, %r754, %r777;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r781, %r773, %r778;
	// end inline asm
	// begin inline asm
	lop3.b32 %r784, %r717, %r775, %r765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r788, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r789, %r765, %r788;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r792, %r784, %r789;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r795, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r797, %r795, %r713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r800, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r802, %r800, %r724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r805, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r807, %r805, %r735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r810, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r812, %r810, %r746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r815, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r817, %r815, %r759;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r820, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r822, %r820, %r770;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r825, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r827, %r825, %r781;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r830, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r832, %r830, %r792;
	// end inline asm
	// begin inline asm
	mov.b32 %r840, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r851, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r839, %r2621, -2004318072;
	// begin inline asm
	lop3.b32 %r837, %r706, %r839, %r840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r841, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r842, %r840, %r841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r845, %r837, %r842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r848, %r717, %r839, %r851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r852, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r853, %r851, %r852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r856, %r848, %r853;
	// end inline asm
	shr.u32 	%r861, %r839, 8;
	// begin inline asm
	lop3.b32 %r859, %r706, %r861, %r840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r863, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r864, %r840, %r863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r867, %r859, %r864;
	// end inline asm
	// begin inline asm
	lop3.b32 %r870, %r717, %r861, %r851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r874, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r875, %r851, %r874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r878, %r870, %r875;
	// end inline asm
	// begin inline asm
	mov.b32 %r886, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r885, %r2622, -2004318072;
	// begin inline asm
	lop3.b32 %r883, %r706, %r885, %r886, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r887, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r888, %r886, %r887;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r891, %r883, %r888;
	// end inline asm
	// begin inline asm
	lop3.b32 %r894, %r717, %r885, %r897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r898, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r899, %r897, %r898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r902, %r894, %r899;
	// end inline asm
	shr.u32 	%r907, %r885, 8;
	// begin inline asm
	lop3.b32 %r905, %r706, %r907, %r886, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r909, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r910, %r886, %r909;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r913, %r905, %r910;
	// end inline asm
	// begin inline asm
	lop3.b32 %r916, %r717, %r907, %r897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r920, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r921, %r897, %r920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r924, %r916, %r921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r927, %r202, %r845, %r797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r931, %r202, %r856, %r802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r935, %r202, %r867, %r807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r939, %r202, %r878, %r812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r943, %r202, %r891, %r817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r947, %r202, %r902, %r822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r951, %r202, %r913, %r827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r955, %r202, %r924, %r832;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r963, %r2623, -2004318072;
	// begin inline asm
	lop3.b32 %r961, %r706, %r963, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r964, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r972, %r717, %r963, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	shr.u32 	%r985, %r963, 8;
	// begin inline asm
	lop3.b32 %r983, %r706, %r985, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r988, %r964, %r987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r991, %r983, %r988;
	// end inline asm
	// begin inline asm
	lop3.b32 %r994, %r717, %r985, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r999, %r975, %r998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1002, %r994, %r999;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1009, %r2624, -2004318072;
	// begin inline asm
	lop3.b32 %r1007, %r706, %r1009, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1012, %r1010, %r1011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1015, %r1007, %r1012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1018, %r717, %r1009, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	shr.u32 	%r1031, %r1009, 8;
	// begin inline asm
	lop3.b32 %r1029, %r706, %r1031, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1034, %r1010, %r1033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1037, %r1029, %r1034;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1040, %r717, %r1031, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1045, %r1021, %r1044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1048, %r1040, %r1045;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1051, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1053, %r1051, %r969, %r927;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1057, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1059, %r1057, %r980, %r931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1063, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1065, %r1063, %r991, %r935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1069, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1071, %r1069, %r1002, %r939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1075, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1077, %r1075, %r1015, %r943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1081, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1083, %r1081, %r1026, %r947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1087, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1089, %r1087, %r1037, %r951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1093, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1095, %r1093, %r1048, %r955;
	// end inline asm
	// begin inline asm
	mov.b32 %r1104, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1115, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1103, %r2619, -2004318072;
	// begin inline asm
	lop3.b32 %r1101, %r706, %r1103, %r1104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1105, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1106, %r1104, %r1105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1109, %r1101, %r1106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1112, %r717, %r1103, %r1115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1116, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1117, %r1115, %r1116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1120, %r1112, %r1117;
	// end inline asm
	shr.u32 	%r1125, %r1103, 8;
	// begin inline asm
	lop3.b32 %r1123, %r706, %r1125, %r1104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1127, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1128, %r1104, %r1127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1131, %r1123, %r1128;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1134, %r717, %r1125, %r1115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1138, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1139, %r1115, %r1138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1142, %r1134, %r1139;
	// end inline asm
	// begin inline asm
	mov.b32 %r1150, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1161, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1149, %r2618, -2004318072;
	// begin inline asm
	lop3.b32 %r1147, %r706, %r1149, %r1150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1151, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1152, %r1150, %r1151;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1155, %r1147, %r1152;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1158, %r717, %r1149, %r1161, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1162, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1163, %r1161, %r1162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1166, %r1158, %r1163;
	// end inline asm
	shr.u32 	%r1171, %r1149, 8;
	// begin inline asm
	lop3.b32 %r1169, %r706, %r1171, %r1150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1173, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1174, %r1150, %r1173;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1177, %r1169, %r1174;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1180, %r717, %r1171, %r1161, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1184, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1185, %r1161, %r1184;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1188, %r1180, %r1185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r238, %r1109, %r1053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r238, %r1120, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r238, %r1131, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1236, %r238, %r1142, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r238, %r1155, %r1077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r238, %r1166, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r238, %r1177, %r1089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1254, %r238, %r1188, %r1095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1223, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1225, %r1223, %r1227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1228, %r46, %r1230, %r1225;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1232, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1234, %r1232, %r1236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1237, %r46, %r1239, %r1234;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1241, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1243, %r1241, %r1245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1246, %r46, %r1248, %r1243;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1250, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r1250, %r1254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r46, %r1257, %r1252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1259, %r47, %r1230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1262, %r46, %r1227, %r1259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1266, %r47, %r1239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r46, %r1236, %r1266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1273, %r47, %r1248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1276, %r46, %r1245, %r1273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1280, %r47, %r1257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1283, %r46, %r1254, %r1280;
	// end inline asm
	mov.u32 	%r1295, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1334, %r1331}, {%r67, %r69, %r68, %r70}, {%r1228, %r1262}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1343, %r1340}, {%r67, %r69, %r68, %r70}, {%r1237, %r1269}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1352, %r1349}, {%r67, %r69, %r68, %r70}, {%r1246, %r1276}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1361, %r1358}, {%r67, %r69, %r68, %r70}, {%r1255, %r1283}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1327, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1329, %r1327, %r1331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1332, %r89, %r1334, %r1329;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1336, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1338, %r1336, %r1340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1341, %r89, %r1343, %r1338;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1345, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1347, %r1345, %r1349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1350, %r89, %r1352, %r1347;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1354, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1356, %r1354, %r1358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r89, %r1361, %r1356;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1363, %r90, %r1334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1366, %r89, %r1331, %r1363;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1370, %r90, %r1343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r89, %r1340, %r1370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1377, %r90, %r1352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1380, %r89, %r1349, %r1377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1384, %r90, %r1361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1387, %r89, %r1358, %r1384;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1391, %r1392}, {%r419, %r425, %r422, %r428}, {%r1332, %r1366}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1401, %r1402}, {%r419, %r425, %r422, %r428}, {%r1341, %r1373}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1411, %r1412}, {%r419, %r425, %r422, %r428}, {%r1350, %r1380}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1421, %r1422}, {%r419, %r425, %r422, %r428}, {%r1359, %r1387}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1431, %r14, %r1391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1434, %r14, %r1392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1437, %r14, %r1401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1440, %r14, %r1402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1443, %r14, %r1411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1446, %r14, %r1412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1449, %r14, %r1421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1452, %r14, %r1422;
	// end inline asm
	// begin inline asm
	mov.b32 %r1455, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1456, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1457, %r1431, %r1455;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1460, %r1457, %r1456;
	// end inline asm
	// begin inline asm
	mov.b32 %r1463, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1464, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1465, %r1434, %r1463;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1468, %r1465, %r1464;
	// end inline asm
	// begin inline asm
	mov.b32 %r1471, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1472, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1473, %r1437, %r1471;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1476, %r1473, %r1472;
	// end inline asm
	// begin inline asm
	mov.b32 %r1479, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1480, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1481, %r1440, %r1479;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1484, %r1481, %r1480;
	// end inline asm
	// begin inline asm
	mov.b32 %r1487, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1488, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1489, %r1443, %r1487;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1492, %r1489, %r1488;
	// end inline asm
	// begin inline asm
	mov.b32 %r1495, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1496, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1497, %r1446, %r1495;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1500, %r1497, %r1496;
	// end inline asm
	// begin inline asm
	mov.b32 %r1503, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1504, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1505, %r1449, %r1503;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1508, %r1505, %r1504;
	// end inline asm
	// begin inline asm
	mov.b32 %r1511, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1512, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1513, %r1452, %r1511;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1516, %r1513, %r1512;
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1520, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1521, %r1522, %r1520;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1524, %r1460, %r1521;
	// end inline asm
	// begin inline asm
	mov.b32 %r1527, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1528, %r1522, %r1527;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1531, %r1468, %r1528;
	// end inline asm
	// begin inline asm
	mov.b32 %r1534, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1535, %r1522, %r1534;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1538, %r1476, %r1535;
	// end inline asm
	// begin inline asm
	mov.b32 %r1541, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1542, %r1522, %r1541;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1545, %r1484, %r1542;
	// end inline asm
	mov.u32 	%r1551, 25152;
	// begin inline asm
	prmt.b32 %r1548, %r1524, %r1538, %r1551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1552, %r1531, %r1545, %r1551;
	// end inline asm
	shl.b32 	%r1559, %r1552, 4;
	mov.u32 	%r1557, 252645135;
	// begin inline asm
	lop3.b32 %r1556, %r1557, %r1548, %r1559, 202;
	// end inline asm
	xor.b32  	%r2499, %r1556, -2004318072;
	// begin inline asm
	mov.b32 %r1563, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1561, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1562, %r1563, %r1561;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1565, %r1492, %r1562;
	// end inline asm
	// begin inline asm
	mov.b32 %r1568, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1569, %r1563, %r1568;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1572, %r1500, %r1569;
	// end inline asm
	// begin inline asm
	mov.b32 %r1575, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1576, %r1563, %r1575;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1579, %r1508, %r1576;
	// end inline asm
	// begin inline asm
	mov.b32 %r1582, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1583, %r1563, %r1582;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1586, %r1516, %r1583;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1589, %r1565, %r1579, %r1551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1593, %r1572, %r1586, %r1551;
	// end inline asm
	shl.b32 	%r1600, %r1593, 4;
	// begin inline asm
	lop3.b32 %r1597, %r1557, %r1589, %r1600, 202;
	// end inline asm
	xor.b32  	%r2500, %r1597, -2004318072;
	st.shared.u32 	[%rd233], %r2499;
	st.shared.u32 	[%rd234], %r2500;
	ld.shared.u32 	%r2625, [%rd231];
	ld.shared.u32 	%r2626, [%rd232];
	// begin inline asm
	mov.b32 %r1606, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1617, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1605, %r2625, -2004318072;
	// begin inline asm
	lop3.b32 %r1603, %r706, %r1605, %r1606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1607, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1608, %r1606, %r1607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1611, %r1603, %r1608;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1614, %r717, %r1605, %r1617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1618, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1619, %r1617, %r1618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1622, %r1614, %r1619;
	// end inline asm
	shr.u32 	%r1627, %r1605, 8;
	// begin inline asm
	lop3.b32 %r1625, %r706, %r1627, %r1606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1629, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1630, %r1606, %r1629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1633, %r1625, %r1630;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1636, %r717, %r1627, %r1617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1640, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1641, %r1617, %r1640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1644, %r1636, %r1641;
	// end inline asm
	// begin inline asm
	mov.b32 %r1652, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1663, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1651, %r2626, -2004318072;
	// begin inline asm
	lop3.b32 %r1649, %r706, %r1651, %r1652, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1653, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1654, %r1652, %r1653;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1657, %r1649, %r1654;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1660, %r717, %r1651, %r1663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1664, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1665, %r1663, %r1664;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1668, %r1660, %r1665;
	// end inline asm
	shr.u32 	%r1673, %r1651, 8;
	// begin inline asm
	lop3.b32 %r1671, %r706, %r1673, %r1652, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1675, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1676, %r1652, %r1675;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1679, %r1671, %r1676;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1682, %r717, %r1673, %r1663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1686, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1687, %r1663, %r1686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1690, %r1682, %r1687;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1693, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1695, %r1693, %r1611;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1698, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1698, %r1622;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1703, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r1703, %r1633;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1708, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1710, %r1708, %r1644;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1713, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1713, %r1657;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1718, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1720, %r1718, %r1668;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1723, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1725, %r1723, %r1679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1728, %r1690;
	// end inline asm
	// begin inline asm
	mov.b32 %r1738, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1749, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1735, %r706, %r963, %r1738, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1739, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1740, %r1738, %r1739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1743, %r1735, %r1740;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1746, %r717, %r963, %r1749, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1750, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1751, %r1749, %r1750;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1754, %r1746, %r1751;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1757, %r706, %r985, %r1738, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1761, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1762, %r1738, %r1761;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1765, %r1757, %r1762;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1768, %r717, %r985, %r1749, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1772, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1773, %r1749, %r1772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1776, %r1768, %r1773;
	// end inline asm
	// begin inline asm
	mov.b32 %r1784, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1795, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1781, %r706, %r1009, %r1784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1785, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1786, %r1784, %r1785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1789, %r1781, %r1786;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1792, %r717, %r1009, %r1795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1796, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1797, %r1795, %r1796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1800, %r1792, %r1797;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1803, %r706, %r1031, %r1784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1807, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1808, %r1784, %r1807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1811, %r1803, %r1808;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1814, %r717, %r1031, %r1795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1818, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1819, %r1795, %r1818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1822, %r1814, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r202, %r1743, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r202, %r1754, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1833, %r202, %r1765, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r202, %r1776, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1841, %r202, %r1789, %r1715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r202, %r1800, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1849, %r202, %r1811, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r202, %r1822, %r1730;
	// end inline asm
	// begin inline asm
	mov.b32 %r1862, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1873, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1859, %r706, %r1103, %r1862, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1863, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1864, %r1862, %r1863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1867, %r1859, %r1864;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1870, %r717, %r1103, %r1873, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1874, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1875, %r1873, %r1874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1878, %r1870, %r1875;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1881, %r706, %r1125, %r1862, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1885, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1886, %r1862, %r1885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1889, %r1881, %r1886;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1892, %r717, %r1125, %r1873, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1896, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1897, %r1873, %r1896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1900, %r1892, %r1897;
	// end inline asm
	// begin inline asm
	mov.b32 %r1908, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1919, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1905, %r706, %r1149, %r1908, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1909, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1910, %r1908, %r1909;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1913, %r1905, %r1910;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1916, %r717, %r1149, %r1919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1920, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1921, %r1919, %r1920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1924, %r1916, %r1921;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1927, %r706, %r1171, %r1908, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1931, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1932, %r1908, %r1931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1935, %r1927, %r1932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1938, %r717, %r1171, %r1919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1942, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1943, %r1919, %r1942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1946, %r1938, %r1943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1949, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r1949, %r1867, %r1825;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1955, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r1955, %r1878, %r1829;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1961, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r1961, %r1889, %r1833;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1967, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r1967, %r1900, %r1837;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1973, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r1973, %r1913, %r1841;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1979, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1979, %r1924, %r1845;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1985, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r1985, %r1935, %r1849;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1991, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r1991, %r1946, %r1853;
	// end inline asm
	// begin inline asm
	mov.b32 %r2002, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2013, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1999, %r706, %r707, %r2002, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2003, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2004, %r2002, %r2003;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2007, %r1999, %r2004;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2010, %r717, %r707, %r2013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2014, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2015, %r2013, %r2014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2018, %r2010, %r2015;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2021, %r706, %r729, %r2002, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2025, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2026, %r2002, %r2025;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2029, %r2021, %r2026;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2032, %r717, %r729, %r2013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2036, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2037, %r2013, %r2036;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2040, %r2032, %r2037;
	// end inline asm
	// begin inline asm
	mov.b32 %r2048, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2059, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2045, %r706, %r753, %r2048, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2049, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2050, %r2048, %r2049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2053, %r2045, %r2050;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2056, %r717, %r753, %r2059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2060, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2061, %r2059, %r2060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2064, %r2056, %r2061;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2067, %r706, %r775, %r2048, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2071, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2072, %r2048, %r2071;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2075, %r2067, %r2072;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2078, %r717, %r775, %r2059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2082, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2083, %r2059, %r2082;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2086, %r2078, %r2083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r238, %r2007, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2125, %r238, %r2018, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r238, %r2029, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2134, %r238, %r2040, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2146, %r238, %r2053, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2143, %r238, %r2064, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r238, %r2075, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r238, %r2086, %r1993;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2121, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r2121, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2126, %r46, %r2128, %r2123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2130, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r2130, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2135, %r46, %r2137, %r2132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2139, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r2139, %r2143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2144, %r46, %r2146, %r2141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2148, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r2148, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2153, %r46, %r2155, %r2150;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2157, %r47, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2160, %r46, %r2125, %r2157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2164, %r47, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2167, %r46, %r2134, %r2164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2171, %r47, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r46, %r2143, %r2171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2178, %r47, %r2155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2181, %r46, %r2152, %r2178;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2232, %r2229}, {%r67, %r69, %r68, %r70}, {%r2126, %r2160}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2241, %r2238}, {%r67, %r69, %r68, %r70}, {%r2135, %r2167}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2250, %r2247}, {%r67, %r69, %r68, %r70}, {%r2144, %r2174}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2259, %r2256}, {%r67, %r69, %r68, %r70}, {%r2153, %r2181}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2225, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2227, %r2225, %r2229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r89, %r2232, %r2227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2234, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2236, %r2234, %r2238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r89, %r2241, %r2236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2243, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r2243, %r2247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r89, %r2250, %r2245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2252, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r2252, %r2256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r89, %r2259, %r2254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2261, %r90, %r2232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2264, %r89, %r2229, %r2261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2268, %r90, %r2241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2271, %r89, %r2238, %r2268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2275, %r90, %r2250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2278, %r89, %r2247, %r2275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r90, %r2259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r89, %r2256, %r2282;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2289, %r2290}, {%r419, %r425, %r422, %r428}, {%r2230, %r2264}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2299, %r2300}, {%r419, %r425, %r422, %r428}, {%r2239, %r2271}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2309, %r2310}, {%r419, %r425, %r422, %r428}, {%r2248, %r2278}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2319, %r2320}, {%r419, %r425, %r422, %r428}, {%r2257, %r2285}, {%r1295, %r1295};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2329, %r14, %r2289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2332, %r14, %r2290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2335, %r14, %r2299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2338, %r14, %r2300;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2341, %r14, %r2309;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2344, %r14, %r2310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2347, %r14, %r2319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2350, %r14, %r2320;
	// end inline asm
	// begin inline asm
	mov.b32 %r2353, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2354, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2355, %r2329, %r2353;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2358, %r2355, %r2354;
	// end inline asm
	// begin inline asm
	mov.b32 %r2361, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2363, %r2332, %r2361;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2366, %r2363, %r2362;
	// end inline asm
	// begin inline asm
	mov.b32 %r2369, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2370, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2371, %r2335, %r2369;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2374, %r2371, %r2370;
	// end inline asm
	// begin inline asm
	mov.b32 %r2377, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2379, %r2338, %r2377;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2382, %r2379, %r2378;
	// end inline asm
	// begin inline asm
	mov.b32 %r2385, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2386, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2387, %r2341, %r2385;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2390, %r2387, %r2386;
	// end inline asm
	// begin inline asm
	mov.b32 %r2393, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2394, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2395, %r2344, %r2393;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2398, %r2395, %r2394;
	// end inline asm
	// begin inline asm
	mov.b32 %r2401, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2402, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2403, %r2347, %r2401;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2406, %r2403, %r2402;
	// end inline asm
	// begin inline asm
	mov.b32 %r2409, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2410, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2411, %r2350, %r2409;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2414, %r2411, %r2410;
	// end inline asm
	// begin inline asm
	mov.b32 %r2420, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2418, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2419, %r2420, %r2418;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2422, %r2358, %r2419;
	// end inline asm
	// begin inline asm
	mov.b32 %r2425, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2426, %r2420, %r2425;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2429, %r2366, %r2426;
	// end inline asm
	// begin inline asm
	mov.b32 %r2432, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2433, %r2420, %r2432;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2436, %r2374, %r2433;
	// end inline asm
	// begin inline asm
	mov.b32 %r2439, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2440, %r2420, %r2439;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2443, %r2382, %r2440;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2446, %r2422, %r2436, %r1551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2450, %r2429, %r2443, %r1551;
	// end inline asm
	shl.b32 	%r2457, %r2450, 4;
	// begin inline asm
	lop3.b32 %r2454, %r1557, %r2446, %r2457, 202;
	// end inline asm
	xor.b32  	%r2501, %r2454, -2004318072;
	// begin inline asm
	mov.b32 %r2461, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2459, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2460, %r2461, %r2459;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2463, %r2390, %r2460;
	// end inline asm
	// begin inline asm
	mov.b32 %r2466, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2467, %r2461, %r2466;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2470, %r2398, %r2467;
	// end inline asm
	// begin inline asm
	mov.b32 %r2473, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2474, %r2461, %r2473;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2477, %r2406, %r2474;
	// end inline asm
	// begin inline asm
	mov.b32 %r2480, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2481, %r2461, %r2480;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2484, %r2414, %r2481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2487, %r2463, %r2477, %r1551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2491, %r2470, %r2484, %r1551;
	// end inline asm
	shl.b32 	%r2498, %r2491, 4;
	// begin inline asm
	lop3.b32 %r2495, %r1557, %r2487, %r2498, 202;
	// end inline asm
	xor.b32  	%r2502, %r2495, -2004318072;
	st.shared.u32 	[%rd233], %r2501;
	st.shared.u32 	[%rd234], %r2502;
	add.s32 	%r2620, %r2620, -32;
	add.s64 	%rd234, %rd234, 4228;
	add.s64 	%rd233, %rd233, 4228;
	add.s64 	%rd232, %rd232, 4228;
	add.s64 	%rd231, %rd231, 4228;
	setp.eq.s32 	%p244, %r2620, 0;
	mov.u32 	%r2621, %r2619;
	mov.u32 	%r2622, %r2618;
	mov.u32 	%r2623, %r2617;
	mov.u32 	%r2624, %r2616;
	@%p244 bra 	LBB0_128;
	bra.uni 	LBB0_127;
LBB0_128:                               // %guard_pass9290
                                        //   in Loop: Header=BB0_126 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2508, [%rd53];
	ld.shared.u32 	%r2509, [%rd54+128];
	ld.shared.u32 	%r2516, [%rd54+4];
	ld.shared.u32 	%r2517, [%rd54+132];
	ld.shared.u32 	%r2524, [%rd55];
	ld.shared.u32 	%r2525, [%rd56+128];
	ld.shared.u32 	%r2532, [%rd56+4];
	ld.shared.u32 	%r2533, [%rd56+132];
	ld.shared.u32 	%r2540, [%rd57];
	ld.shared.u32 	%r2541, [%rd58+128];
	ld.shared.u32 	%r2548, [%rd58+4];
	ld.shared.u32 	%r2549, [%rd58+132];
	ld.shared.u32 	%r2556, [%rd59];
	ld.shared.u32 	%r2557, [%rd60+128];
	ld.shared.u32 	%r2564, [%rd60+4];
	ld.shared.u32 	%r2565, [%rd60+132];
	// begin inline asm
	prmt.b32 %r2503, %r2508, %r2509, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2507, %r2508, %r2509, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2511, %r2516, %r2517, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2515, %r2516, %r2517, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2519, %r2524, %r2525, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2523, %r2524, %r2525, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2527, %r2532, %r2533, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2531, %r2532, %r2533, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2535, %r2540, %r2541, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2539, %r2540, %r2541, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2543, %r2548, %r2549, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2547, %r2548, %r2549, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2551, %r2556, %r2557, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2555, %r2556, %r2557, %r624;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2559, %r2564, %r2565, %r620;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2563, %r2564, %r2565, %r624;
	// end inline asm
	selp.b32 	%r2567, %r2507, %r2503, %p231;
	shfl.sync.bfly.b32	%r2568, %r2567, 8, 31, -1;
	selp.b32 	%r2569, %r2515, %r2511, %p231;
	shfl.sync.bfly.b32	%r2570, %r2569, 8, 31, -1;
	selp.b32 	%r2571, %r2523, %r2519, %p231;
	shfl.sync.bfly.b32	%r153, %r2571, 8, 31, -1;
	selp.b32 	%r2572, %r2531, %r2527, %p231;
	shfl.sync.bfly.b32	%r154, %r2572, 8, 31, -1;
	selp.b32 	%r2573, %r2539, %r2535, %p231;
	shfl.sync.bfly.b32	%r2574, %r2573, 8, 31, -1;
	selp.b32 	%r155, %r2535, %r2574, %p231;
	selp.b32 	%r156, %r2574, %r2539, %p231;
	selp.b32 	%r2575, %r2547, %r2543, %p231;
	shfl.sync.bfly.b32	%r2576, %r2575, 8, 31, -1;
	selp.b32 	%r157, %r2543, %r2576, %p231;
	selp.b32 	%r158, %r2576, %r2547, %p231;
	selp.b32 	%r2577, %r2555, %r2551, %p231;
	shfl.sync.bfly.b32	%r2578, %r2577, 8, 31, -1;
	selp.b32 	%r159, %r2551, %r2578, %p231;
	selp.b32 	%r160, %r2578, %r2555, %p231;
	selp.b32 	%r2579, %r2563, %r2559, %p231;
	shfl.sync.bfly.b32	%r2580, %r2579, 8, 31, -1;
	selp.b32 	%r161, %r2559, %r2580, %p231;
	selp.b32 	%r162, %r2580, %r2563, %p231;
	shl.b32 	%r2600, %r93, 13;
	@%p245 bra 	LBB0_158;
// %bb.129:                             // %guard_pass9290.pass8966_crit_edge
                                        //   in Loop: Header=BB0_126 Depth=1
	or.b32  	%r2591, %r144, %r2600;
	or.b32  	%r2592, %r133, %r2591;
	or.b32  	%r2593, %r145, %r2592;
	or.b32  	%r2631, %r146, %r2593;
	bra.uni 	LBB0_159;
LBB0_160:                               // %L26893
	st.global.u32 	[%rd4], %r2599;
	ret;
LBB0_7:                                 // %L291
	mov.u32 	%r2598, 2;
	st.global.u32 	[%rd4], %r2598;
	mov.u64 	%rd219, exception2068;
	cvta.global.u64 	%rd220, %rd219;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd220;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd65;
	st.param.b32 	[param0+8], %r164;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L9
	mov.u64 	%rd86, exception1;
	cvta.global.u64 	%rd87, %rd86;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd87;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd65;
	st.param.b32 	[param0+8], %r164;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_132:                               // %L27004
	mov.u64 	%rd94, exception1;
	cvta.global.u64 	%rd95, %rd94;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd95;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd65;
	st.param.b32 	[param0+8], %r164;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_131:                               // %L27001
	mov.u64 	%rd99, exception1;
	cvta.global.u64 	%rd100, %rd99;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd100;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd65;
	st.param.b32 	[param0+8], %r164;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_130:                               // %L26998
	mov.u64 	%rd110, exception1;
	cvta.global.u64 	%rd111, %rd110;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd111;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd65;
	st.param.b32 	[param0+8], %r164;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
