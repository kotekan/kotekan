// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2101[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12122[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<237>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2584>;
	.reg .f32 	%f<847>;
	.reg .b64 	%rd<152>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r149, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r156, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r156, 67839;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd31, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u32 	%r150, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r157, %r4, 9;
	or.b32  	%r158, %r2, %r3;
	or.b32  	%r159, %r158, %r157;
	mul.wide.u32 	%rd37, %r159, 4;
	add.s64 	%rd4, %rd31, %rd37;
	mov.u32 	%r160, 1;
	st.global.u32 	[%rd4], %r160;
	setp.gt.u32 	%p2, %r150, 32767;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L120
	ld.param.u32 	%r151, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r151, %r150;
	setp.gt.s32 	%p4, %r151, 65535;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L127
	ld.param.u32 	%r152, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r161, %r151, %r150;
	and.b32  	%r162, %r161, 255;
	setp.ne.s32 	%p6, %r162, 0;
	setp.gt.u32 	%p7, %r152, 1023;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L138
	ld.param.u32 	%r153, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r153, %r152;
	setp.gt.s32 	%p10, %r153, 2047;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L145
	sub.s32 	%r163, %r153, %r152;
	add.s32 	%r164, %r163, 3;
	and.b32  	%r165, %r164, 7;
	setp.eq.s32 	%p12, %r165, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L260
	ld.param.u32 	%r154, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p13, %r154, 0;
	@%p13 bra 	$L__BB0_10;
// %bb.9:                               // %L262
	ld.param.u32 	%r155, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p14, %r154, %r155;
	setp.lt.s32 	%p15, %r155, 65;
	and.pred  	%p16, %p14, %p15;
	@%p16 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;
$L__BB0_11:                             // %pass180
	bfe.u32 	%r99, %r3, 1, 1;
	and.b32  	%r100, %r3, 1;
	bfe.u32 	%r101, %r3, 2, 1;
	shl.b32 	%r171, %r101, 1;
	shl.b32 	%r172, %r100, 2;
	shl.b32 	%r173, %r99, 3;
	or.b32  	%r174, %r172, %r173;
	or.b32  	%r175, %r171, %r174;
	shr.u32 	%r102, %r3, 4;
	or.b32  	%r103, %r102, %r175;
	or.b32  	%r104, %r103, 16;
	mov.f32 	%f148, 0f40000000;
	mov.f32 	%f149, 0f42FE0000;
	div.approx.f32 	%f86, %f149, %f148;
	cvt.rn.f32.s32 	%f150, %r103;
	sub.f32 	%f151, %f150, %f86;
	mov.f32 	%f180, 0f42000000;
	div.approx.f32 	%f88, %f151, %f180;
	setp.ne.f32 	%p22, %f88, 0f00000000;
	mov.f32 	%f822, 0f3F800000;
	mov.f32 	%f815, %f822;
	@%p22 bra 	$L__BB0_12;
	bra.uni 	$L__BB0_13;
$L__BB0_12:                             // %L579
	sin.approx.f32 	%f181, %f88;
	div.approx.f32 	%f815, %f181, %f88;
$L__BB0_13:                             // %L582
	cvt.rn.f32.s32 	%f184, %r104;
	sub.f32 	%f185, %f184, %f86;
	div.approx.f32 	%f5, %f185, %f180;
	setp.eq.f32 	%p28, %f5, 0f00000000;
	mov.f32 	%f816, %f822;
	@%p28 bra 	$L__BB0_15;
// %bb.14:                              // %L599
	sin.approx.f32 	%f215, %f5;
	div.approx.f32 	%f816, %f215, %f5;
$L__BB0_15:                             // %L602
	or.b32  	%r193, %r103, 32;
	or.b32  	%r6, %r103, 48;
	cvt.rn.f32.s32 	%f219, %r193;
	sub.f32 	%f220, %f219, %f86;
	div.approx.f32 	%f9, %f220, %f180;
	setp.eq.f32 	%p34, %f9, 0f00000000;
	mov.f32 	%f817, %f822;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L681
	sin.approx.f32 	%f250, %f9;
	div.approx.f32 	%f817, %f250, %f9;
$L__BB0_17:                             // %L684
	cvt.rn.f32.s32 	%f253, %r6;
	sub.f32 	%f254, %f253, %f86;
	div.approx.f32 	%f14, %f254, %f180;
	setp.eq.f32 	%p40, %f14, 0f00000000;
	mov.f32 	%f818, %f822;
	@%p40 bra 	$L__BB0_19;
// %bb.18:                              // %L701
	sin.approx.f32 	%f284, %f14;
	div.approx.f32 	%f818, %f284, %f14;
$L__BB0_19:                             // %L704
	or.b32  	%r211, %r103, 64;
	or.b32  	%r8, %r103, 80;
	cvt.rn.f32.s32 	%f288, %r211;
	sub.f32 	%f289, %f288, %f86;
	div.approx.f32 	%f18, %f289, %f180;
	setp.eq.f32 	%p46, %f18, 0f00000000;
	mov.f32 	%f819, %f822;
	@%p46 bra 	$L__BB0_21;
// %bb.20:                              // %L783
	sin.approx.f32 	%f319, %f18;
	div.approx.f32 	%f819, %f319, %f18;
$L__BB0_21:                             // %L786
	cvt.rn.f32.s32 	%f322, %r8;
	sub.f32 	%f323, %f322, %f86;
	div.approx.f32 	%f23, %f323, %f180;
	setp.eq.f32 	%p52, %f23, 0f00000000;
	mov.f32 	%f820, %f822;
	@%p52 bra 	$L__BB0_23;
// %bb.22:                              // %L803
	sin.approx.f32 	%f353, %f23;
	div.approx.f32 	%f820, %f353, %f23;
$L__BB0_23:                             // %L806
	or.b32  	%r229, %r103, 96;
	or.b32  	%r10, %r103, 112;
	cvt.rn.f32.s32 	%f357, %r229;
	sub.f32 	%f358, %f357, %f86;
	div.approx.f32 	%f27, %f358, %f180;
	setp.eq.f32 	%p58, %f27, 0f00000000;
	mov.f32 	%f821, %f822;
	@%p58 bra 	$L__BB0_25;
// %bb.24:                              // %L885
	sin.approx.f32 	%f388, %f27;
	div.approx.f32 	%f821, %f388, %f27;
$L__BB0_25:                             // %L888
	shr.u32 	%r98, %r3, 1;
	cvt.rn.f32.s32 	%f391, %r10;
	sub.f32 	%f392, %f391, %f86;
	div.approx.f32 	%f32, %f392, %f180;
	setp.eq.f32 	%p64, %f32, 0f00000000;
	@%p64 bra 	$L__BB0_27;
// %bb.26:                              // %L905
	sin.approx.f32 	%f422, %f32;
	div.approx.f32 	%f822, %f422, %f32;
$L__BB0_27:                             // %L908
	shr.u32 	%r14, %r3, 3;
	and.b32  	%r273, %r14, 2;
	and.b32  	%r274, %r98, 4;
	or.b32  	%r15, %r101, %r273;
	or.b32  	%r16, %r15, %r274;
	and.b32  	%r275, %r3, 3;
	mul.lo.s32 	%r276, %r275, %r16;
	shl.b32 	%r277, %r276, 1;
	neg.s32 	%r278, %r277;
	cvt.rn.f32.s32 	%f493, %r278;
	mov.f32 	%f494, 0f41000000;
	div.approx.f32 	%f35, %f493, %f494;
	abs.f32 	%f837, %f35;
	setp.lt.f32 	%p79, %f837, 0f40000000;
	@%p79 bra 	$L__BB0_98;
// %bb.28:
	setp.gtu.f32 	%p80, %f837, 0f4B800000;
	@%p80 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_29;
$L__BB0_94:
	mov.b32 	%r106, %f837;
	and.b32  	%r279, %r106, 8388607;
	or.b32  	%r2578, %r279, 1065353216;
	mov.b32 	%f836, %r2578;
	add.s32 	%r280, %r106, -1073741824;
	and.b32  	%r2579, %r280, -8388608;
	setp.eq.s32 	%p86, %r2579, 0;
	@%p86 bra 	$L__BB0_97;
// %bb.95:                              // %__nv_fmaf_rn.exit4.i.i.i649.preheader
	mov.f32 	%f504, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f503,%f504;
	// end inline asm
$L__BB0_96:                             // %__nv_fmaf_rn.exit4.i.i.i649
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r281, %r2579, 192937984;
	add.s32 	%r282, %r2578, %r281;
	mov.b32 	%f505, %r282;
	mul.f32 	%f506, %f503, %f505;
	sub.f32 	%f507, %f505, %f506;
	fma.rn.f32 	%f508, %f507, %f503, %f506;
	sub.f32 	%f509, %f505, %f508;
	fma.rz.f32 	%f510, %f509, %f503, %f508;
	cvt.rzi.f32.f32 	%f511, %f510;
	sub.f32 	%f836, %f505, %f511;
	sub.s32 	%r2579, %r2579, %r281;
	mov.b32 	%r2578, %f836;
	setp.ne.s32 	%p87, %r2579, 0;
	setp.ne.s32 	%p88, %r2578, 0;
	and.pred  	%p89, %p87, %p88;
	@%p89 bra 	$L__BB0_96;
$L__BB0_97:                             // %__internal_fmodf_slowpath_mod.exit.i.i651
	setp.gt.u32 	%p90, %r106, 2139095039;
	selp.f32 	%f512, 0f7FFFFFFF, 0f4B800000, %p90;
	mul.f32 	%f513, %f836, 0f34000000;
	mul.f32 	%f837, %f512, %f513;
	bra.uni 	$L__BB0_98;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i628
	div.approx.f32 	%f496, %f837, %f148;
	cvt.rzi.f32.f32 	%f835, %f496;
	fma.rn.f32 	%f90, %f835, 0fC0000000, %f837;
	mov.b32 	%r105, %f90;
	setp.lt.u32 	%p81, %r105, 1073741824;
	@%p81 bra 	$L__BB0_93;
// %bb.30:
	setp.lt.u32 	%p82, %r105, -2147483647;
	@%p82 bra 	$L__BB0_91;
// %bb.31:
	add.f32 	%f501, %f835, 0fBF800000;
	setp.lt.f32 	%p85, %f90, 0fC0000000;
	add.f32 	%f502, %f501, 0fBF800000;
	selp.f32 	%f835, %f502, %f501, %p85;
	bra.uni 	$L__BB0_93;
$L__BB0_91:
	add.f32 	%f835, %f835, 0f3F800000;
	setp.ltu.f32 	%p83, %f90, 0f40800000;
	@%p83 bra 	$L__BB0_93;
// %bb.92:                              // %__nv_fmaf_rn.exit.i.i.i632
	add.f32 	%f497, %f835, 0f3F800000;
	fma.rn.f32 	%f499, %f148, 0fC0400000, %f90;
	setp.ge.f32 	%p84, %f499, 0f00000000;
	add.f32 	%f500, %f497, 0f3F800000;
	selp.f32 	%f835, %f500, %f497, %p84;
$L__BB0_93:                             // %__internal_fmodf_fastpath_quot.exit.i.i635
	fma.rn.f32 	%f837, %f835, 0fC0000000, %f837;
$L__BB0_98:                             // %__internal_fmodf_kernel.exit.i654
	shl.b32 	%r94, %r3, 1;
	abs.f32 	%f514, %f837;
	setp.gtu.f32 	%p91, %f514, 0f7F800000;
	@%p91 bra 	$L__BB0_100;
// %bb.99:
	mov.b32 	%r283, %f35;
	and.b32  	%r284, %r283, -2147483648;
	mov.b32 	%r285, %f837;
	or.b32  	%r286, %r284, %r285;
	mov.b32 	%f837, %r286;
$L__BB0_100:                            // %__nv_fmodf.exit655
	and.b32  	%r295, %r94, 6;
	mov.u32 	%r296, -8;
	sub.s32 	%r297, %r296, %r295;
	mul.lo.s32 	%r298, %r16, %r297;
	cvt.rn.f32.s32 	%f545, %r298;
	div.approx.f32 	%f106, %f545, %f494;
	abs.f32 	%f825, %f106;
	setp.lt.f32 	%p99, %f825, 0f40000000;
	@%p99 bra 	$L__BB0_43;
// %bb.32:
	setp.gtu.f32 	%p100, %f825, 0f4B800000;
	@%p100 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_33;
$L__BB0_39:
	mov.b32 	%r18, %f825;
	and.b32  	%r299, %r18, 8388607;
	or.b32  	%r2557, %r299, 1065353216;
	mov.b32 	%f824, %r2557;
	add.s32 	%r300, %r18, -1073741824;
	and.b32  	%r2558, %r300, -8388608;
	setp.eq.s32 	%p106, %r2558, 0;
	@%p106 bra 	$L__BB0_42;
// %bb.40:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f556, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f555,%f556;
	// end inline asm
$L__BB0_41:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r301, %r2558, 192937984;
	add.s32 	%r302, %r2557, %r301;
	mov.b32 	%f557, %r302;
	mul.f32 	%f558, %f555, %f557;
	sub.f32 	%f559, %f557, %f558;
	fma.rn.f32 	%f560, %f559, %f555, %f558;
	sub.f32 	%f561, %f557, %f560;
	fma.rz.f32 	%f562, %f561, %f555, %f560;
	cvt.rzi.f32.f32 	%f563, %f562;
	sub.f32 	%f824, %f557, %f563;
	sub.s32 	%r2558, %r2558, %r301;
	mov.b32 	%r2557, %f824;
	setp.ne.s32 	%p107, %r2558, 0;
	setp.ne.s32 	%p108, %r2557, 0;
	and.pred  	%p109, %p107, %p108;
	@%p109 bra 	$L__BB0_41;
$L__BB0_42:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p110, %r18, 2139095039;
	selp.f32 	%f564, 0f7FFFFFFF, 0f4B800000, %p110;
	mul.f32 	%f565, %f824, 0f34000000;
	mul.f32 	%f825, %f564, %f565;
	bra.uni 	$L__BB0_43;
$L__BB0_33:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f548, %f825, %f148;
	cvt.rzi.f32.f32 	%f823, %f548;
	fma.rn.f32 	%f38, %f823, 0fC0000000, %f825;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p101, %r17, 1073741824;
	@%p101 bra 	$L__BB0_38;
// %bb.34:
	setp.lt.u32 	%p102, %r17, -2147483647;
	@%p102 bra 	$L__BB0_36;
// %bb.35:
	add.f32 	%f553, %f823, 0fBF800000;
	setp.lt.f32 	%p105, %f38, 0fC0000000;
	add.f32 	%f554, %f553, 0fBF800000;
	selp.f32 	%f823, %f554, %f553, %p105;
	bra.uni 	$L__BB0_38;
$L__BB0_36:
	add.f32 	%f823, %f823, 0f3F800000;
	setp.ltu.f32 	%p103, %f38, 0f40800000;
	@%p103 bra 	$L__BB0_38;
// %bb.37:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f549, %f823, 0f3F800000;
	fma.rn.f32 	%f551, %f148, 0fC0400000, %f38;
	setp.ge.f32 	%p104, %f551, 0f00000000;
	add.f32 	%f552, %f549, 0f3F800000;
	selp.f32 	%f823, %f552, %f549, %p104;
$L__BB0_38:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f825, %f823, 0fC0000000, %f825;
$L__BB0_43:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f566, %f825;
	setp.gtu.f32 	%p111, %f566, 0f7F800000;
	@%p111 bra 	$L__BB0_45;
// %bb.44:
	mov.b32 	%r303, %f106;
	and.b32  	%r304, %r303, -2147483648;
	mov.b32 	%r305, %f825;
	or.b32  	%r306, %r304, %r305;
	mov.b32 	%f825, %r306;
$L__BB0_45:                             // %__nv_fmodf.exit
	shl.b32 	%r327, %r99, 1;
	neg.s32 	%r29, %r327;
	mul.lo.s32 	%r30, %r29, %r16;
	cvt.rn.f32.s32 	%f599, %r30;
	div.approx.f32 	%f52, %f599, %f180;
	abs.f32 	%f841, %f52;
	setp.lt.f32 	%p119, %f841, 0f40000000;
	@%p119 bra 	$L__BB0_108;
// %bb.46:
	setp.gtu.f32 	%p120, %f841, 0f4B800000;
	@%p120 bra 	$L__BB0_104;
	bra.uni 	$L__BB0_47;
$L__BB0_104:
	mov.b32 	%r114, %f841;
	and.b32  	%r328, %r114, 8388607;
	or.b32  	%r2580, %r328, 1065353216;
	mov.b32 	%f840, %r2580;
	add.s32 	%r329, %r114, -1073741824;
	and.b32  	%r2581, %r329, -8388608;
	setp.eq.s32 	%p126, %r2581, 0;
	@%p126 bra 	$L__BB0_107;
// %bb.105:                             // %__nv_fmaf_rn.exit4.i.i.i680.preheader
	mov.f32 	%f610, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f609,%f610;
	// end inline asm
$L__BB0_106:                            // %__nv_fmaf_rn.exit4.i.i.i680
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r330, %r2581, 192937984;
	add.s32 	%r331, %r2580, %r330;
	mov.b32 	%f611, %r331;
	mul.f32 	%f612, %f609, %f611;
	sub.f32 	%f613, %f611, %f612;
	fma.rn.f32 	%f614, %f613, %f609, %f612;
	sub.f32 	%f615, %f611, %f614;
	fma.rz.f32 	%f616, %f615, %f609, %f614;
	cvt.rzi.f32.f32 	%f617, %f616;
	sub.f32 	%f840, %f611, %f617;
	sub.s32 	%r2581, %r2581, %r330;
	mov.b32 	%r2580, %f840;
	setp.ne.s32 	%p127, %r2581, 0;
	setp.ne.s32 	%p128, %r2580, 0;
	and.pred  	%p129, %p127, %p128;
	@%p129 bra 	$L__BB0_106;
$L__BB0_107:                            // %__internal_fmodf_slowpath_mod.exit.i.i682
	setp.gt.u32 	%p130, %r114, 2139095039;
	selp.f32 	%f618, 0f7FFFFFFF, 0f4B800000, %p130;
	mul.f32 	%f619, %f840, 0f34000000;
	mul.f32 	%f841, %f618, %f619;
	bra.uni 	$L__BB0_108;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i659
	div.approx.f32 	%f602, %f841, %f148;
	cvt.rzi.f32.f32 	%f839, %f602;
	fma.rn.f32 	%f109, %f839, 0fC0000000, %f841;
	mov.b32 	%r113, %f109;
	setp.lt.u32 	%p121, %r113, 1073741824;
	@%p121 bra 	$L__BB0_103;
// %bb.48:
	setp.lt.u32 	%p122, %r113, -2147483647;
	@%p122 bra 	$L__BB0_101;
// %bb.49:
	add.f32 	%f607, %f839, 0fBF800000;
	setp.lt.f32 	%p125, %f109, 0fC0000000;
	add.f32 	%f608, %f607, 0fBF800000;
	selp.f32 	%f839, %f608, %f607, %p125;
	bra.uni 	$L__BB0_103;
$L__BB0_101:
	add.f32 	%f839, %f839, 0f3F800000;
	setp.ltu.f32 	%p123, %f109, 0f40800000;
	@%p123 bra 	$L__BB0_103;
// %bb.102:                             // %__nv_fmaf_rn.exit.i.i.i663
	add.f32 	%f603, %f839, 0f3F800000;
	fma.rn.f32 	%f605, %f148, 0fC0400000, %f109;
	setp.ge.f32 	%p124, %f605, 0f00000000;
	add.f32 	%f606, %f603, 0f3F800000;
	selp.f32 	%f839, %f606, %f603, %p124;
$L__BB0_103:                            // %__internal_fmodf_fastpath_quot.exit.i.i666
	fma.rn.f32 	%f841, %f839, 0fC0000000, %f841;
$L__BB0_108:                            // %__internal_fmodf_kernel.exit.i685
	abs.f32 	%f620, %f841;
	setp.gtu.f32 	%p131, %f620, 0f7F800000;
	@%p131 bra 	$L__BB0_110;
// %bb.109:
	mov.b32 	%r332, %f52;
	and.b32  	%r333, %r332, -2147483648;
	mov.b32 	%r334, %f841;
	or.b32  	%r335, %r333, %r334;
	mov.b32 	%f841, %r335;
$L__BB0_110:                            // %__nv_fmodf.exit686
	shl.b32 	%r344, %r16, 2;
	sub.s32 	%r345, %r30, %r344;
	cvt.rn.f32.s32 	%f651, %r345;
	div.approx.f32 	%f125, %f651, %f180;
	abs.f32 	%f829, %f125;
	setp.lt.f32 	%p139, %f829, 0f40000000;
	@%p139 bra 	$L__BB0_61;
// %bb.50:
	setp.gtu.f32 	%p140, %f829, 0f4B800000;
	@%p140 bra 	$L__BB0_57;
	bra.uni 	$L__BB0_51;
$L__BB0_57:
	mov.b32 	%r32, %f829;
	and.b32  	%r346, %r32, 8388607;
	or.b32  	%r2559, %r346, 1065353216;
	mov.b32 	%f828, %r2559;
	add.s32 	%r347, %r32, -1073741824;
	and.b32  	%r2560, %r347, -8388608;
	setp.eq.s32 	%p146, %r2560, 0;
	@%p146 bra 	$L__BB0_60;
// %bb.58:                              // %__nv_fmaf_rn.exit4.i.i.i587.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_59:                             // %__nv_fmaf_rn.exit4.i.i.i587
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r2560, 192937984;
	add.s32 	%r349, %r2559, %r348;
	mov.b32 	%f663, %r349;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f828, %f663, %f669;
	sub.s32 	%r2560, %r2560, %r348;
	mov.b32 	%r2559, %f828;
	setp.ne.s32 	%p147, %r2560, 0;
	setp.ne.s32 	%p148, %r2559, 0;
	and.pred  	%p149, %p147, %p148;
	@%p149 bra 	$L__BB0_59;
$L__BB0_60:                             // %__internal_fmodf_slowpath_mod.exit.i.i589
	setp.gt.u32 	%p150, %r32, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p150;
	mul.f32 	%f671, %f828, 0f34000000;
	mul.f32 	%f829, %f670, %f671;
	bra.uni 	$L__BB0_61;
$L__BB0_51:                             // %__nv_fast_fdividef.exit.i.i.i566
	div.approx.f32 	%f654, %f829, %f148;
	cvt.rzi.f32.f32 	%f827, %f654;
	fma.rn.f32 	%f55, %f827, 0fC0000000, %f829;
	mov.b32 	%r31, %f55;
	setp.lt.u32 	%p141, %r31, 1073741824;
	@%p141 bra 	$L__BB0_56;
// %bb.52:
	setp.lt.u32 	%p142, %r31, -2147483647;
	@%p142 bra 	$L__BB0_54;
// %bb.53:
	add.f32 	%f659, %f827, 0fBF800000;
	setp.lt.f32 	%p145, %f55, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f827, %f660, %f659, %p145;
	bra.uni 	$L__BB0_56;
$L__BB0_54:
	add.f32 	%f827, %f827, 0f3F800000;
	setp.ltu.f32 	%p143, %f55, 0f40800000;
	@%p143 bra 	$L__BB0_56;
// %bb.55:                              // %__nv_fmaf_rn.exit.i.i.i570
	add.f32 	%f655, %f827, 0f3F800000;
	fma.rn.f32 	%f657, %f148, 0fC0400000, %f55;
	setp.ge.f32 	%p144, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f827, %f658, %f655, %p144;
$L__BB0_56:                             // %__internal_fmodf_fastpath_quot.exit.i.i573
	fma.rn.f32 	%f829, %f827, 0fC0000000, %f829;
$L__BB0_61:                             // %__internal_fmodf_kernel.exit.i592
	abs.f32 	%f672, %f829;
	setp.gtu.f32 	%p151, %f672, 0f7F800000;
	@%p151 bra 	$L__BB0_63;
// %bb.62:
	mov.b32 	%r350, %f125;
	and.b32  	%r351, %r350, -2147483648;
	mov.b32 	%r352, %f829;
	or.b32  	%r353, %r351, %r352;
	mov.b32 	%f829, %r353;
$L__BB0_63:                             // %__nv_fmodf.exit593
	mul.lo.s32 	%r42, %r29, %r15;
	cvt.rn.f32.s32 	%f705, %r42;
	mov.f32 	%f706, 0f40800000;
	div.approx.f32 	%f69, %f705, %f706;
	abs.f32 	%f845, %f69;
	setp.lt.f32 	%p159, %f845, 0f40000000;
	@%p159 bra 	$L__BB0_118;
// %bb.64:
	setp.gtu.f32 	%p160, %f845, 0f4B800000;
	@%p160 bra 	$L__BB0_114;
	bra.uni 	$L__BB0_65;
$L__BB0_114:
	mov.b32 	%r122, %f845;
	and.b32  	%r368, %r122, 8388607;
	or.b32  	%r2582, %r368, 1065353216;
	mov.b32 	%f844, %r2582;
	add.s32 	%r369, %r122, -1073741824;
	and.b32  	%r2583, %r369, -8388608;
	setp.eq.s32 	%p166, %r2583, 0;
	@%p166 bra 	$L__BB0_117;
// %bb.115:                             // %__nv_fmaf_rn.exit4.i.i.i711.preheader
	mov.f32 	%f716, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f715,%f716;
	// end inline asm
$L__BB0_116:                            // %__nv_fmaf_rn.exit4.i.i.i711
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r370, %r2583, 192937984;
	add.s32 	%r371, %r2582, %r370;
	mov.b32 	%f717, %r371;
	mul.f32 	%f718, %f715, %f717;
	sub.f32 	%f719, %f717, %f718;
	fma.rn.f32 	%f720, %f719, %f715, %f718;
	sub.f32 	%f721, %f717, %f720;
	fma.rz.f32 	%f722, %f721, %f715, %f720;
	cvt.rzi.f32.f32 	%f723, %f722;
	sub.f32 	%f844, %f717, %f723;
	sub.s32 	%r2583, %r2583, %r370;
	mov.b32 	%r2582, %f844;
	setp.ne.s32 	%p167, %r2583, 0;
	setp.ne.s32 	%p168, %r2582, 0;
	and.pred  	%p169, %p167, %p168;
	@%p169 bra 	$L__BB0_116;
$L__BB0_117:                            // %__internal_fmodf_slowpath_mod.exit.i.i713
	setp.gt.u32 	%p170, %r122, 2139095039;
	selp.f32 	%f724, 0f7FFFFFFF, 0f4B800000, %p170;
	mul.f32 	%f725, %f844, 0f34000000;
	mul.f32 	%f845, %f724, %f725;
	bra.uni 	$L__BB0_118;
$L__BB0_65:                             // %__nv_fast_fdividef.exit.i.i.i690
	div.approx.f32 	%f708, %f845, %f148;
	cvt.rzi.f32.f32 	%f843, %f708;
	fma.rn.f32 	%f128, %f843, 0fC0000000, %f845;
	mov.b32 	%r121, %f128;
	setp.lt.u32 	%p161, %r121, 1073741824;
	@%p161 bra 	$L__BB0_113;
// %bb.66:
	setp.lt.u32 	%p162, %r121, -2147483647;
	@%p162 bra 	$L__BB0_111;
// %bb.67:
	add.f32 	%f713, %f843, 0fBF800000;
	setp.lt.f32 	%p165, %f128, 0fC0000000;
	add.f32 	%f714, %f713, 0fBF800000;
	selp.f32 	%f843, %f714, %f713, %p165;
	bra.uni 	$L__BB0_113;
$L__BB0_111:
	add.f32 	%f843, %f843, 0f3F800000;
	setp.ltu.f32 	%p163, %f128, 0f40800000;
	@%p163 bra 	$L__BB0_113;
// %bb.112:                             // %__nv_fmaf_rn.exit.i.i.i694
	add.f32 	%f709, %f843, 0f3F800000;
	fma.rn.f32 	%f711, %f148, 0fC0400000, %f128;
	setp.ge.f32 	%p164, %f711, 0f00000000;
	add.f32 	%f712, %f709, 0f3F800000;
	selp.f32 	%f843, %f712, %f709, %p164;
$L__BB0_113:                            // %__internal_fmodf_fastpath_quot.exit.i.i697
	fma.rn.f32 	%f845, %f843, 0fC0000000, %f845;
$L__BB0_118:                            // %__internal_fmodf_kernel.exit.i716
	abs.f32 	%f726, %f845;
	setp.gtu.f32 	%p171, %f726, 0f7F800000;
	@%p171 bra 	$L__BB0_120;
// %bb.119:
	mov.b32 	%r372, %f69;
	and.b32  	%r373, %r372, -2147483648;
	mov.b32 	%r374, %f845;
	or.b32  	%r375, %r373, %r374;
	mov.b32 	%f845, %r375;
$L__BB0_120:                            // %__nv_fmodf.exit717
	shl.b32 	%r384, %r15, 2;
	sub.s32 	%r385, %r42, %r384;
	cvt.rn.f32.s32 	%f759, %r385;
	div.approx.f32 	%f145, %f759, %f706;
	abs.f32 	%f833, %f145;
	setp.lt.f32 	%p180, %f833, 0f40000000;
	@%p180 bra 	$L__BB0_79;
// %bb.68:
	setp.gtu.f32 	%p181, %f833, 0f4B800000;
	@%p181 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_69;
$L__BB0_75:
	mov.b32 	%r44, %f833;
	and.b32  	%r386, %r44, 8388607;
	or.b32  	%r2561, %r386, 1065353216;
	mov.b32 	%f832, %r2561;
	add.s32 	%r387, %r44, -1073741824;
	and.b32  	%r2562, %r387, -8388608;
	setp.eq.s32 	%p187, %r2562, 0;
	@%p187 bra 	$L__BB0_78;
// %bb.76:                              // %__nv_fmaf_rn.exit4.i.i.i618.preheader
	mov.f32 	%f770, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f769,%f770;
	// end inline asm
$L__BB0_77:                             // %__nv_fmaf_rn.exit4.i.i.i618
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r388, %r2562, 192937984;
	add.s32 	%r389, %r2561, %r388;
	mov.b32 	%f771, %r389;
	mul.f32 	%f772, %f769, %f771;
	sub.f32 	%f773, %f771, %f772;
	fma.rn.f32 	%f774, %f773, %f769, %f772;
	sub.f32 	%f775, %f771, %f774;
	fma.rz.f32 	%f776, %f775, %f769, %f774;
	cvt.rzi.f32.f32 	%f777, %f776;
	sub.f32 	%f832, %f771, %f777;
	sub.s32 	%r2562, %r2562, %r388;
	mov.b32 	%r2561, %f832;
	setp.ne.s32 	%p188, %r2562, 0;
	setp.ne.s32 	%p189, %r2561, 0;
	and.pred  	%p190, %p188, %p189;
	@%p190 bra 	$L__BB0_77;
$L__BB0_78:                             // %__internal_fmodf_slowpath_mod.exit.i.i620
	setp.gt.u32 	%p191, %r44, 2139095039;
	selp.f32 	%f778, 0f7FFFFFFF, 0f4B800000, %p191;
	mul.f32 	%f779, %f832, 0f34000000;
	mul.f32 	%f833, %f778, %f779;
	bra.uni 	$L__BB0_79;
$L__BB0_69:                             // %__nv_fast_fdividef.exit.i.i.i597
	div.approx.f32 	%f762, %f833, %f148;
	cvt.rzi.f32.f32 	%f831, %f762;
	fma.rn.f32 	%f72, %f831, 0fC0000000, %f833;
	mov.b32 	%r43, %f72;
	setp.lt.u32 	%p182, %r43, 1073741824;
	@%p182 bra 	$L__BB0_74;
// %bb.70:
	setp.lt.u32 	%p183, %r43, -2147483647;
	@%p183 bra 	$L__BB0_72;
// %bb.71:
	add.f32 	%f767, %f831, 0fBF800000;
	setp.lt.f32 	%p186, %f72, 0fC0000000;
	add.f32 	%f768, %f767, 0fBF800000;
	selp.f32 	%f831, %f768, %f767, %p186;
	bra.uni 	$L__BB0_74;
$L__BB0_72:
	add.f32 	%f831, %f831, 0f3F800000;
	setp.ltu.f32 	%p184, %f72, 0f40800000;
	@%p184 bra 	$L__BB0_74;
// %bb.73:                              // %__nv_fmaf_rn.exit.i.i.i601
	add.f32 	%f763, %f831, 0f3F800000;
	fma.rn.f32 	%f765, %f148, 0fC0400000, %f72;
	setp.ge.f32 	%p185, %f765, 0f00000000;
	add.f32 	%f766, %f763, 0f3F800000;
	selp.f32 	%f831, %f766, %f763, %p185;
$L__BB0_74:                             // %__internal_fmodf_fastpath_quot.exit.i.i604
	fma.rn.f32 	%f833, %f831, 0fC0000000, %f833;
$L__BB0_79:                             // %__internal_fmodf_kernel.exit.i623
	abs.f32 	%f780, %f833;
	setp.gtu.f32 	%p192, %f780, 0f7F800000;
	@%p192 bra 	$L__BB0_81;
// %bb.80:
	mov.b32 	%r390, %f145;
	and.b32  	%r391, %r390, -2147483648;
	mov.b32 	%r392, %f833;
	or.b32  	%r393, %r391, %r392;
	mov.b32 	%f833, %r393;
$L__BB0_81:                             // %__nv_fmodf.exit624
	setp.le.s32 	%p200, %r151, %r150;
	mov.u32 	%r2555, 0;
	@%p200 bra 	$L__BB0_90;
// %bb.82:                              // %L1414.lr.ph
	mov.f32 	%f152, 0f43010000;
	mul.lo.s32 	%r253, %r103, 31;
	div.approx.f32 	%f153, %f151, %f152;
	div.approx.f32 	%f187, %f185, %f152;
	div.approx.f32 	%f222, %f220, %f152;
	div.approx.f32 	%f256, %f254, %f152;
	div.approx.f32 	%f291, %f289, %f152;
	div.approx.f32 	%f325, %f323, %f152;
	div.approx.f32 	%f360, %f358, %f152;
	div.approx.f32 	%f394, %f392, %f152;
	add.s32 	%r263, %r253, 48;
	abs.f32 	%f154, %f153;
	abs.f32 	%f188, %f187;
	abs.f32 	%f223, %f222;
	abs.f32 	%f257, %f256;
	abs.f32 	%f292, %f291;
	abs.f32 	%f326, %f325;
	abs.f32 	%f361, %f360;
	abs.f32 	%f395, %f394;
	and.b32  	%r254, %r253, 63;
	and.b32  	%r264, %r263, 63;
	setp.gt.f32 	%p17, %f154, 0f4B800000;
	mul.f32 	%f155, %f153, 0f00000000;
	setp.gt.f32 	%p23, %f188, 0f4B800000;
	mul.f32 	%f189, %f187, 0f00000000;
	setp.gt.f32 	%p29, %f223, 0f4B800000;
	mul.f32 	%f224, %f222, 0f00000000;
	setp.gt.f32 	%p35, %f257, 0f4B800000;
	mul.f32 	%f258, %f256, 0f00000000;
	setp.gt.f32 	%p41, %f292, 0f4B800000;
	mul.f32 	%f293, %f291, 0f00000000;
	setp.gt.f32 	%p47, %f326, 0f4B800000;
	mul.f32 	%f327, %f325, 0f00000000;
	setp.gt.f32 	%p53, %f361, 0f4B800000;
	mul.f32 	%f362, %f360, 0f00000000;
	setp.gt.f32 	%p59, %f395, 0f4B800000;
	mul.f32 	%f396, %f394, 0f00000000;
	cvt.rn.f32.s32 	%f425, %r254;
	cvt.rn.f32.s32 	%f460, %r264;
	selp.f32 	%f156, %f155, %f153, %p17;
	selp.f32 	%f190, %f189, %f187, %p23;
	selp.f32 	%f225, %f224, %f222, %p29;
	selp.f32 	%f259, %f258, %f256, %p35;
	selp.f32 	%f294, %f293, %f291, %p41;
	selp.f32 	%f328, %f327, %f325, %p47;
	selp.f32 	%f363, %f362, %f360, %p53;
	selp.f32 	%f397, %f396, %f394, %p59;
	div.approx.f32 	%f427, %f425, %f180;
	div.approx.f32 	%f461, %f460, %f180;
	add.f32 	%f157, %f156, %f156;
	add.f32 	%f191, %f190, %f190;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f260, %f259, %f259;
	add.f32 	%f295, %f294, %f294;
	add.f32 	%f329, %f328, %f328;
	add.f32 	%f364, %f363, %f363;
	add.f32 	%f398, %f397, %f397;
	add.f32 	%f428, %f427, %f427;
	add.f32 	%f462, %f461, %f461;
	add.f32 	%f515, %f837, %f837;
	add.f32 	%f567, %f825, %f825;
	mov.b32 	%r176, %f157;
	mov.b32 	%r183, %f191;
	mov.b32 	%r194, %f226;
	mov.b32 	%r201, %f260;
	mov.b32 	%r212, %f295;
	mov.b32 	%r219, %f329;
	mov.b32 	%r230, %f364;
	mov.b32 	%r237, %f398;
	mov.b32 	%r255, %f428;
	mov.b32 	%r265, %f462;
	mov.b32 	%r287, %f515;
	mov.b32 	%r319, %f567;
	and.b32  	%r177, %r176, -2147483648;
	and.b32  	%r184, %r183, -2147483648;
	and.b32  	%r195, %r194, -2147483648;
	and.b32  	%r202, %r201, -2147483648;
	and.b32  	%r213, %r212, -2147483648;
	and.b32  	%r220, %r219, -2147483648;
	and.b32  	%r231, %r230, -2147483648;
	and.b32  	%r238, %r237, -2147483648;
	and.b32  	%r256, %r255, -2147483648;
	and.b32  	%r266, %r265, -2147483648;
	and.b32  	%r288, %r287, -2147483648;
	and.b32  	%r320, %r319, -2147483648;
	add.f32 	%f621, %f841, %f841;
	add.f32 	%f673, %f829, %f829;
	or.b32  	%r178, %r177, 1056964608;
	or.b32  	%r185, %r184, 1056964608;
	or.b32  	%r196, %r195, 1056964608;
	or.b32  	%r203, %r202, 1056964608;
	or.b32  	%r214, %r213, 1056964608;
	or.b32  	%r221, %r220, 1056964608;
	or.b32  	%r232, %r231, 1056964608;
	or.b32  	%r239, %r238, 1056964608;
	or.b32  	%r257, %r256, 1056964608;
	or.b32  	%r267, %r266, 1056964608;
	or.b32  	%r289, %r288, 1056964608;
	or.b32  	%r321, %r320, 1056964608;
	mov.b32 	%r336, %f621;
	mov.b32 	%r360, %f673;
	add.f32 	%f727, %f845, %f845;
	mov.b32 	%f158, %r178;
	mov.b32 	%f192, %r185;
	mov.b32 	%f227, %r196;
	mov.b32 	%f261, %r203;
	mov.b32 	%f296, %r214;
	mov.b32 	%f330, %r221;
	mov.b32 	%f365, %r232;
	mov.b32 	%f399, %r239;
	mov.b32 	%f429, %r257;
	mov.b32 	%f463, %r267;
	mov.b32 	%f516, %r289;
	mov.b32 	%f568, %r321;
	and.b32  	%r337, %r336, -2147483648;
	and.b32  	%r361, %r360, -2147483648;
	mov.b32 	%r376, %f727;
	add.f32 	%f159, %f157, %f158;
	abs.f32 	%f161, %f157;
	add.f32 	%f193, %f191, %f192;
	abs.f32 	%f195, %f191;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f262, %f260, %f261;
	abs.f32 	%f264, %f260;
	add.f32 	%f297, %f295, %f296;
	abs.f32 	%f299, %f295;
	add.f32 	%f331, %f329, %f330;
	abs.f32 	%f333, %f329;
	add.f32 	%f366, %f364, %f365;
	abs.f32 	%f368, %f364;
	add.f32 	%f400, %f398, %f399;
	abs.f32 	%f402, %f398;
	add.f32 	%f430, %f428, %f429;
	abs.f32 	%f432, %f428;
	add.f32 	%f464, %f462, %f463;
	abs.f32 	%f466, %f462;
	add.f32 	%f517, %f515, %f516;
	abs.f32 	%f519, %f515;
	add.f32 	%f569, %f567, %f568;
	abs.f32 	%f571, %f567;
	or.b32  	%r338, %r337, 1056964608;
	or.b32  	%r362, %r361, 1056964608;
	and.b32  	%r377, %r376, -2147483648;
	cvt.rzi.f32.f32 	%f160, %f159;
	setp.gt.f32 	%p18, %f161, 0f4B000000;
	cvt.rzi.f32.f32 	%f194, %f193;
	setp.gt.f32 	%p24, %f195, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p30, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f263, %f262;
	setp.gt.f32 	%p36, %f264, 0f4B000000;
	cvt.rzi.f32.f32 	%f298, %f297;
	setp.gt.f32 	%p42, %f299, 0f4B000000;
	cvt.rzi.f32.f32 	%f332, %f331;
	setp.gt.f32 	%p48, %f333, 0f4B000000;
	cvt.rzi.f32.f32 	%f367, %f366;
	setp.gt.f32 	%p54, %f368, 0f4B000000;
	cvt.rzi.f32.f32 	%f401, %f400;
	setp.gt.f32 	%p60, %f402, 0f4B000000;
	cvt.rzi.f32.f32 	%f431, %f430;
	setp.gt.f32 	%p65, %f432, 0f4B000000;
	cvt.rzi.f32.f32 	%f465, %f464;
	setp.gt.f32 	%p72, %f466, 0f4B000000;
	cvt.rzi.f32.f32 	%f518, %f517;
	setp.gt.f32 	%p92, %f519, 0f4B000000;
	cvt.rzi.f32.f32 	%f570, %f569;
	setp.gt.f32 	%p112, %f571, 0f4B000000;
	mov.b32 	%f622, %r338;
	mov.b32 	%f674, %r362;
	or.b32  	%r378, %r377, 1056964608;
	selp.f32 	%f162, %f157, %f160, %p18;
	cvt.rzi.f32.f32 	%f163, %f157;
	setp.lt.f32 	%p19, %f161, 0f3F000000;
	selp.f32 	%f196, %f191, %f194, %p24;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p25, %f195, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p30;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p31, %f230, 0f3F000000;
	selp.f32 	%f265, %f260, %f263, %p36;
	cvt.rzi.f32.f32 	%f266, %f260;
	setp.lt.f32 	%p37, %f264, 0f3F000000;
	selp.f32 	%f300, %f295, %f298, %p42;
	cvt.rzi.f32.f32 	%f301, %f295;
	setp.lt.f32 	%p43, %f299, 0f3F000000;
	selp.f32 	%f334, %f329, %f332, %p48;
	cvt.rzi.f32.f32 	%f335, %f329;
	setp.lt.f32 	%p49, %f333, 0f3F000000;
	selp.f32 	%f369, %f364, %f367, %p54;
	cvt.rzi.f32.f32 	%f370, %f364;
	setp.lt.f32 	%p55, %f368, 0f3F000000;
	selp.f32 	%f403, %f398, %f401, %p60;
	cvt.rzi.f32.f32 	%f404, %f398;
	setp.lt.f32 	%p61, %f402, 0f3F000000;
	selp.f32 	%f433, %f428, %f431, %p65;
	cvt.rzi.f32.f32 	%f434, %f428;
	setp.lt.f32 	%p66, %f432, 0f3F000000;
	selp.f32 	%f467, %f462, %f465, %p72;
	cvt.rzi.f32.f32 	%f468, %f462;
	setp.lt.f32 	%p73, %f466, 0f3F000000;
	selp.f32 	%f520, %f515, %f518, %p92;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p93, %f519, 0f3F000000;
	selp.f32 	%f572, %f567, %f570, %p112;
	cvt.rzi.f32.f32 	%f573, %f567;
	setp.lt.f32 	%p113, %f571, 0f3F000000;
	add.f32 	%f623, %f621, %f622;
	abs.f32 	%f625, %f621;
	add.f32 	%f675, %f673, %f674;
	abs.f32 	%f677, %f673;
	mov.b32 	%f728, %r378;
	selp.f32 	%f164, %f163, %f162, %p19;
	selp.f32 	%f198, %f197, %f196, %p25;
	selp.f32 	%f233, %f232, %f231, %p31;
	selp.f32 	%f267, %f266, %f265, %p37;
	selp.f32 	%f302, %f301, %f300, %p43;
	selp.f32 	%f336, %f335, %f334, %p49;
	selp.f32 	%f371, %f370, %f369, %p55;
	selp.f32 	%f405, %f404, %f403, %p61;
	selp.f32 	%f435, %f434, %f433, %p66;
	selp.f32 	%f469, %f468, %f467, %p73;
	selp.f32 	%f522, %f521, %f520, %p93;
	selp.f32 	%f574, %f573, %f572, %p113;
	cvt.rzi.f32.f32 	%f624, %f623;
	setp.gt.f32 	%p132, %f625, 0f4B000000;
	cvt.rzi.f32.f32 	%f676, %f675;
	setp.gt.f32 	%p152, %f677, 0f4B000000;
	add.f32 	%f729, %f727, %f728;
	abs.f32 	%f731, %f727;
	fma.rn.f32 	%f165, %f164, 0fBF000000, %f156;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f190;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f268, %f267, 0fBF000000, %f259;
	fma.rn.f32 	%f303, %f302, 0fBF000000, %f294;
	fma.rn.f32 	%f337, %f336, 0fBF000000, %f328;
	fma.rn.f32 	%f372, %f371, 0fBF000000, %f363;
	fma.rn.f32 	%f406, %f405, 0fBF000000, %f397;
	fma.rn.f32 	%f436, %f435, 0fBF000000, %f427;
	fma.rn.f32 	%f470, %f469, 0fBF000000, %f461;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f837;
	fma.rn.f32 	%f575, %f574, 0fBF000000, %f825;
	selp.f32 	%f626, %f621, %f624, %p132;
	cvt.rzi.f32.f32 	%f627, %f621;
	setp.lt.f32 	%p133, %f625, 0f3F000000;
	selp.f32 	%f678, %f673, %f676, %p152;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p153, %f677, 0f3F000000;
	cvt.rzi.f32.f32 	%f730, %f729;
	setp.gt.f32 	%p173, %f731, 0f4B000000;
	mul.f32 	%f166, %f165, %f165;
	mul.f32 	%f200, %f199, %f199;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f269, %f268, %f268;
	mul.f32 	%f304, %f303, %f303;
	mul.f32 	%f338, %f337, %f337;
	mul.f32 	%f373, %f372, %f372;
	mul.f32 	%f407, %f406, %f406;
	mul.f32 	%f437, %f436, %f436;
	mul.f32 	%f471, %f470, %f470;
	mul.f32 	%f524, %f523, %f523;
	mul.f32 	%f576, %f575, %f575;
	selp.f32 	%f628, %f627, %f626, %p133;
	selp.f32 	%f680, %f679, %f678, %p153;
	selp.f32 	%f732, %f727, %f730, %p173;
	cvt.rzi.f32.f32 	%f733, %f727;
	setp.lt.f32 	%p174, %f731, 0f3F000000;
	cvt.rzi.s32.f32 	%r179, %f164;
	fma.rn.f32 	%f167, %f166, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f168, %f166, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r186, %f198;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r197, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r204, %f267;
	fma.rn.f32 	%f270, %f269, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f271, %f269, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r215, %f302;
	fma.rn.f32 	%f305, %f304, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f306, %f304, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r222, %f336;
	fma.rn.f32 	%f339, %f338, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f340, %f338, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r233, %f371;
	fma.rn.f32 	%f374, %f373, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f375, %f373, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r240, %f405;
	fma.rn.f32 	%f408, %f407, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f409, %f407, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f438, %f437, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f439, %f437, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f472, %f471, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f473, %f471, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f577, %f576, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f578, %f576, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f629, %f628, 0fBF000000, %f841;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f829;
	selp.f32 	%f734, %f733, %f732, %p174;
	add.s32 	%r180, %r179, 1;
	fma.rn.f32 	%f169, %f167, %f166, 0fC0A55DF6;
	fma.rn.f32 	%f170, %f168, %f166, 0f4081E0CF;
	fma.rn.f32 	%f171, %f166, %f165, 0f00000000;
	add.s32 	%r187, %r186, 1;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	add.s32 	%r198, %r197, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r205, %r204, 1;
	fma.rn.f32 	%f272, %f270, %f269, 0fC0A55DF6;
	fma.rn.f32 	%f273, %f271, %f269, 0f4081E0CF;
	fma.rn.f32 	%f274, %f269, %f268, 0f00000000;
	add.s32 	%r216, %r215, 1;
	fma.rn.f32 	%f307, %f305, %f304, 0fC0A55DF6;
	fma.rn.f32 	%f308, %f306, %f304, 0f4081E0CF;
	fma.rn.f32 	%f309, %f304, %f303, 0f00000000;
	add.s32 	%r223, %r222, 1;
	fma.rn.f32 	%f341, %f339, %f338, 0fC0A55DF6;
	fma.rn.f32 	%f342, %f340, %f338, 0f4081E0CF;
	fma.rn.f32 	%f343, %f338, %f337, 0f00000000;
	add.s32 	%r234, %r233, 1;
	fma.rn.f32 	%f376, %f374, %f373, 0fC0A55DF6;
	fma.rn.f32 	%f377, %f375, %f373, 0f4081E0CF;
	fma.rn.f32 	%f378, %f373, %f372, 0f00000000;
	add.s32 	%r241, %r240, 1;
	fma.rn.f32 	%f410, %f408, %f407, 0fC0A55DF6;
	fma.rn.f32 	%f411, %f409, %f407, 0f4081E0CF;
	fma.rn.f32 	%f412, %f407, %f406, 0f00000000;
	cvt.rzi.s32.f32 	%r258, %f435;
	fma.rn.f32 	%f440, %f438, %f437, 0fC0A55DF6;
	fma.rn.f32 	%f441, %f439, %f437, 0f4081E0CF;
	fma.rn.f32 	%f442, %f437, %f436, 0f00000000;
	cvt.rzi.s32.f32 	%r268, %f469;
	fma.rn.f32 	%f474, %f472, %f471, 0fC0A55DF6;
	fma.rn.f32 	%f475, %f473, %f471, 0f4081E0CF;
	fma.rn.f32 	%f476, %f471, %f470, 0f00000000;
	cvt.rzi.s32.f32 	%r290, %f522;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	cvt.rzi.s32.f32 	%r322, %f574;
	fma.rn.f32 	%f579, %f577, %f576, 0fC0A55DF6;
	fma.rn.f32 	%f580, %f578, %f576, 0f4081E0CF;
	fma.rn.f32 	%f581, %f576, %f575, 0f00000000;
	mul.f32 	%f630, %f629, %f629;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f735, %f734, 0fBF000000, %f845;
	shl.b32 	%r166, %r4, 3;
	fma.rn.f32 	%f172, %f170, %f166, 0fC09DE9E6;
	fma.rn.f32 	%f173, %f169, %f171, 0f00000000;
	and.b32  	%r181, %r180, 1;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	and.b32  	%r188, %r187, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r199, %r198, 1;
	fma.rn.f32 	%f275, %f273, %f269, 0fC09DE9E6;
	fma.rn.f32 	%f276, %f272, %f274, 0f00000000;
	and.b32  	%r206, %r205, 1;
	fma.rn.f32 	%f310, %f308, %f304, 0fC09DE9E6;
	fma.rn.f32 	%f311, %f307, %f309, 0f00000000;
	and.b32  	%r217, %r216, 1;
	fma.rn.f32 	%f344, %f342, %f338, 0fC09DE9E6;
	fma.rn.f32 	%f345, %f341, %f343, 0f00000000;
	and.b32  	%r224, %r223, 1;
	fma.rn.f32 	%f379, %f377, %f373, 0fC09DE9E6;
	fma.rn.f32 	%f380, %f376, %f378, 0f00000000;
	and.b32  	%r235, %r234, 1;
	fma.rn.f32 	%f413, %f411, %f407, 0fC09DE9E6;
	fma.rn.f32 	%f414, %f410, %f412, 0f00000000;
	and.b32  	%r242, %r241, 1;
	fma.rn.f32 	%f443, %f441, %f437, 0fC09DE9E6;
	fma.rn.f32 	%f444, %f440, %f442, 0f00000000;
	and.b32  	%r259, %r258, 1;
	fma.rn.f32 	%f477, %f475, %f471, 0fC09DE9E6;
	fma.rn.f32 	%f478, %f474, %f476, 0f00000000;
	and.b32  	%r269, %r268, 1;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	and.b32  	%r291, %r290, 1;
	fma.rn.f32 	%f582, %f580, %f576, 0fC09DE9E6;
	fma.rn.f32 	%f583, %f579, %f581, 0f00000000;
	and.b32  	%r323, %r322, 1;
	fma.rn.f32 	%f631, %f630, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f632, %f630, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f736, %f735, %f735;
	shl.b32 	%r91, %r3, 2;
	and.b32  	%r93, %r166, 2016;
	and.b32  	%r96, %r3, 18;
	fma.rn.f32 	%f174, %f172, %f166, 0f3F800000;
	fma.rn.f32 	%f175, %f165, 0f40490FDB, %f173;
	setp.eq.b32 	%p20, %r181, 1;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	setp.eq.b32 	%p26, %r188, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p32, %r199, 1;
	fma.rn.f32 	%f277, %f275, %f269, 0f3F800000;
	fma.rn.f32 	%f278, %f268, 0f40490FDB, %f276;
	setp.eq.b32 	%p38, %r206, 1;
	fma.rn.f32 	%f312, %f310, %f304, 0f3F800000;
	fma.rn.f32 	%f313, %f303, 0f40490FDB, %f311;
	setp.eq.b32 	%p44, %r217, 1;
	fma.rn.f32 	%f346, %f344, %f338, 0f3F800000;
	fma.rn.f32 	%f347, %f337, 0f40490FDB, %f345;
	setp.eq.b32 	%p50, %r224, 1;
	fma.rn.f32 	%f381, %f379, %f373, 0f3F800000;
	fma.rn.f32 	%f382, %f372, 0f40490FDB, %f380;
	setp.eq.b32 	%p56, %r235, 1;
	fma.rn.f32 	%f415, %f413, %f407, 0f3F800000;
	fma.rn.f32 	%f416, %f406, 0f40490FDB, %f414;
	setp.eq.b32 	%p62, %r242, 1;
	fma.rn.f32 	%f445, %f443, %f437, 0f3F800000;
	fma.rn.f32 	%f446, %f436, 0f40490FDB, %f444;
	setp.eq.b32 	%p67, %r259, 1;
	fma.rn.f32 	%f479, %f477, %f471, 0f3F800000;
	fma.rn.f32 	%f480, %f470, 0f40490FDB, %f478;
	setp.eq.b32 	%p74, %r269, 1;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	setp.eq.b32 	%p94, %r291, 1;
	fma.rn.f32 	%f584, %f582, %f576, 0f3F800000;
	fma.rn.f32 	%f585, %f575, 0f40490FDB, %f583;
	setp.eq.b32 	%p114, %r323, 1;
	cvt.rzi.s32.f32 	%r339, %f628;
	fma.rn.f32 	%f633, %f631, %f630, 0fC0A55DF6;
	fma.rn.f32 	%f634, %f632, %f630, 0f4081E0CF;
	fma.rn.f32 	%f635, %f630, %f629, 0f00000000;
	cvt.rzi.s32.f32 	%r363, %f680;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f737, %f736, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f738, %f736, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r92, %r91, 4;
	or.b32  	%r167, %r96, %r93;
	selp.f32 	%f176, %f174, %f175, %p20;
	and.b32  	%r182, %r180, 2;
	mov.f32 	%f177, 0f00000000;
	selp.f32 	%f210, %f208, %f209, %p26;
	and.b32  	%r189, %r187, 2;
	selp.f32 	%f245, %f243, %f244, %p32;
	and.b32  	%r200, %r198, 2;
	selp.f32 	%f279, %f277, %f278, %p38;
	and.b32  	%r207, %r205, 2;
	selp.f32 	%f314, %f312, %f313, %p44;
	and.b32  	%r218, %r216, 2;
	selp.f32 	%f348, %f346, %f347, %p50;
	and.b32  	%r225, %r223, 2;
	selp.f32 	%f383, %f381, %f382, %p56;
	and.b32  	%r236, %r234, 2;
	selp.f32 	%f417, %f415, %f416, %p62;
	and.b32  	%r243, %r241, 2;
	selp.f32 	%f447, %f445, %f446, %p67;
	and.b32  	%r260, %r258, 2;
	selp.f32 	%f481, %f479, %f480, %p74;
	and.b32  	%r270, %r268, 2;
	selp.f32 	%f534, %f532, %f533, %p94;
	and.b32  	%r292, %r290, 2;
	selp.f32 	%f586, %f584, %f585, %p114;
	and.b32  	%r324, %r322, 2;
	fma.rn.f32 	%f636, %f634, %f630, 0fC09DE9E6;
	fma.rn.f32 	%f637, %f633, %f635, 0f00000000;
	and.b32  	%r340, %r339, 1;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	and.b32  	%r364, %r363, 1;
	cvt.rzi.s32.f32 	%r379, %f734;
	fma.rn.f32 	%f739, %f737, %f736, 0fC0A55DF6;
	fma.rn.f32 	%f740, %f738, %f736, 0f4081E0CF;
	fma.rn.f32 	%f741, %f736, %f735, 0f00000000;
	and.b32  	%r95, %r94, 8;
	or.b32  	%r168, %r167, %r92;
	setp.eq.s32 	%p21, %r182, 0;
	sub.f32 	%f178, %f177, %f176;
	setp.eq.s32 	%p27, %r189, 0;
	sub.f32 	%f212, %f177, %f210;
	setp.eq.s32 	%p33, %r200, 0;
	sub.f32 	%f247, %f177, %f245;
	setp.eq.s32 	%p39, %r207, 0;
	sub.f32 	%f281, %f177, %f279;
	setp.eq.s32 	%p45, %r218, 0;
	sub.f32 	%f316, %f177, %f314;
	setp.eq.s32 	%p51, %r225, 0;
	sub.f32 	%f350, %f177, %f348;
	setp.eq.s32 	%p57, %r236, 0;
	sub.f32 	%f385, %f177, %f383;
	setp.eq.s32 	%p63, %r243, 0;
	sub.f32 	%f419, %f177, %f417;
	setp.eq.s32 	%p68, %r260, 0;
	neg.f32 	%f449, %f447;
	add.s32 	%r261, %r258, 1;
	cvt.rzi.f32.f32 	%f454, %f427;
	setp.eq.s32 	%p75, %r270, 0;
	neg.f32 	%f483, %f481;
	add.s32 	%r271, %r268, 1;
	cvt.rzi.f32.f32 	%f487, %f461;
	setp.eq.s32 	%p95, %r292, 0;
	neg.f32 	%f536, %f534;
	add.s32 	%r293, %r290, 1;
	cvt.rzi.f32.f32 	%f541, %f837;
	setp.eq.s32 	%p115, %r324, 0;
	neg.f32 	%f588, %f586;
	add.s32 	%r325, %r322, 1;
	cvt.rzi.f32.f32 	%f593, %f825;
	fma.rn.f32 	%f638, %f636, %f630, 0f3F800000;
	fma.rn.f32 	%f639, %f629, 0f40490FDB, %f637;
	setp.eq.b32 	%p134, %r340, 1;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	setp.eq.b32 	%p154, %r364, 1;
	fma.rn.f32 	%f742, %f740, %f736, 0fC09DE9E6;
	fma.rn.f32 	%f743, %f739, %f741, 0f00000000;
	and.b32  	%r380, %r379, 1;
	or.b32  	%r169, %r168, %r95;
	selp.f32 	%f179, %f176, %f178, %p21;
	selp.f32 	%f213, %f210, %f212, %p27;
	selp.f32 	%f248, %f245, %f247, %p33;
	selp.f32 	%f282, %f279, %f281, %p39;
	selp.f32 	%f317, %f314, %f316, %p45;
	selp.f32 	%f351, %f348, %f350, %p51;
	selp.f32 	%f386, %f383, %f385, %p57;
	selp.f32 	%f420, %f417, %f419, %p63;
	selp.f32 	%f448, %f446, %f445, %p67;
	selp.f32 	%f450, %f447, %f449, %p68;
	and.b32  	%r262, %r261, 2;
	setp.eq.f32 	%p70, %f454, %f427;
	mul.f32 	%f455, %f427, 0f00000000;
	selp.f32 	%f482, %f480, %f479, %p74;
	selp.f32 	%f484, %f481, %f483, %p75;
	and.b32  	%r272, %r271, 2;
	setp.eq.f32 	%p77, %f487, %f461;
	mul.f32 	%f488, %f461, 0f00000000;
	selp.f32 	%f535, %f533, %f532, %p94;
	selp.f32 	%f537, %f534, %f536, %p95;
	and.b32  	%r294, %r293, 2;
	setp.eq.f32 	%p97, %f541, %f837;
	mul.f32 	%f542, %f837, 0f00000000;
	selp.f32 	%f587, %f585, %f584, %p114;
	selp.f32 	%f589, %f586, %f588, %p115;
	and.b32  	%r326, %r325, 2;
	setp.eq.f32 	%p117, %f593, %f825;
	mul.f32 	%f594, %f825, 0f00000000;
	selp.f32 	%f640, %f638, %f639, %p134;
	and.b32  	%r341, %r339, 2;
	selp.f32 	%f692, %f690, %f691, %p154;
	and.b32  	%r365, %r363, 2;
	fma.rn.f32 	%f744, %f742, %f736, 0f3F800000;
	fma.rn.f32 	%f745, %f735, 0f40490FDB, %f743;
	setp.eq.b32 	%p175, %r380, 1;
	shr.u32 	%r170, %r169, 1;
	mul.f32 	%f87, %f179, %f179;
	mul.f32 	%f4, %f213, %f213;
	mul.f32 	%f8, %f248, %f248;
	mul.f32 	%f13, %f282, %f282;
	mul.f32 	%f17, %f317, %f317;
	mul.f32 	%f22, %f351, %f351;
	mul.f32 	%f26, %f386, %f386;
	mul.f32 	%f31, %f420, %f420;
	setp.eq.s32 	%p69, %r262, 0;
	sub.f32 	%f452, %f177, %f448;
	selp.f32 	%f456, %f455, %f450, %p70;
	abs.f32 	%f457, %f427;
	setp.eq.s32 	%p76, %r272, 0;
	sub.f32 	%f485, %f177, %f482;
	selp.f32 	%f489, %f488, %f484, %p77;
	abs.f32 	%f490, %f461;
	setp.eq.s32 	%p96, %r294, 0;
	sub.f32 	%f539, %f177, %f535;
	selp.f32 	%f104, %f542, %f537, %p97;
	abs.f32 	%f543, %f837;
	setp.eq.s32 	%p116, %r326, 0;
	sub.f32 	%f591, %f177, %f587;
	selp.f32 	%f595, %f594, %f589, %p117;
	abs.f32 	%f596, %f825;
	setp.eq.s32 	%p135, %r341, 0;
	neg.f32 	%f642, %f640;
	add.s32 	%r342, %r339, 1;
	cvt.rzi.f32.f32 	%f647, %f841;
	setp.eq.s32 	%p155, %r365, 0;
	neg.f32 	%f694, %f692;
	add.s32 	%r366, %r363, 1;
	cvt.rzi.f32.f32 	%f699, %f829;
	selp.f32 	%f746, %f744, %f745, %p175;
	and.b32  	%r381, %r379, 2;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd38, %r170, 4;
	mul.f32 	%f183, %f87, 0f3C8A83B8;
	mul.f32 	%f217, %f4, 0f3C8A83B8;
	mul.f32 	%f252, %f8, 0f3C8A83B8;
	mul.f32 	%f286, %f13, 0f3C8A83B8;
	mul.f32 	%f321, %f17, 0f3C8A83B8;
	mul.f32 	%f355, %f22, 0f3C8A83B8;
	mul.f32 	%f390, %f26, 0f3C8A83B8;
	mul.f32 	%f423, %f31, 0f3C8A83B8;
	selp.f32 	%f453, %f448, %f452, %p69;
	setp.gt.f32 	%p71, %f457, 0f4B800000;
	add.f32 	%f458, %f456, 0f3F800000;
	selp.f32 	%f486, %f482, %f485, %p76;
	setp.gt.f32 	%p78, %f490, 0f4B800000;
	add.f32 	%f491, %f489, 0f3F800000;
	selp.f32 	%f540, %f535, %f539, %p96;
	setp.gt.f32 	%p98, %f543, 0f4B800000;
	add.f32 	%f544, %f104, 0f3F800000;
	selp.f32 	%f592, %f587, %f591, %p116;
	setp.gt.f32 	%p118, %f596, 0f4B800000;
	add.f32 	%f597, %f595, 0f3F800000;
	selp.f32 	%f641, %f639, %f638, %p134;
	selp.f32 	%f643, %f640, %f642, %p135;
	and.b32  	%r343, %r342, 2;
	setp.eq.f32 	%p137, %f647, %f841;
	mul.f32 	%f648, %f841, 0f00000000;
	selp.f32 	%f693, %f691, %f690, %p154;
	selp.f32 	%f695, %f692, %f694, %p155;
	and.b32  	%r367, %r366, 2;
	setp.eq.f32 	%p157, %f699, %f829;
	mul.f32 	%f700, %f829, 0f00000000;
	setp.eq.s32 	%p176, %r381, 0;
	neg.f32 	%f748, %f746;
	add.s32 	%r382, %r379, 1;
	cvt.rzi.f32.f32 	%f753, %f845;
	add.s64 	%rd39, %rd1, %rd38;
	mul.f32 	%f3, %f183, %f815;
	mul.f32 	%f218, %f217, %f816;
	mul.f32 	%f12, %f252, %f817;
	mul.f32 	%f287, %f286, %f818;
	mul.f32 	%f21, %f321, %f819;
	mul.f32 	%f356, %f355, %f820;
	mul.f32 	%f30, %f390, %f821;
	mul.f32 	%f424, %f423, %f822;
	selp.f32 	%f459, %f458, %f453, %p71;
	selp.f32 	%f492, %f491, %f486, %p78;
	selp.f32 	%f105, %f544, %f540, %p98;
	selp.f32 	%f598, %f597, %f592, %p118;
	setp.eq.s32 	%p136, %r343, 0;
	sub.f32 	%f645, %f177, %f641;
	selp.f32 	%f123, %f648, %f643, %p137;
	abs.f32 	%f649, %f841;
	setp.eq.s32 	%p156, %r367, 0;
	sub.f32 	%f697, %f177, %f693;
	selp.f32 	%f701, %f700, %f695, %p157;
	abs.f32 	%f702, %f829;
	selp.f32 	%f747, %f745, %f744, %p175;
	selp.f32 	%f749, %f746, %f748, %p176;
	and.b32  	%r383, %r382, 2;
	setp.eq.f32 	%p178, %f753, %f845;
	mul.f32 	%f754, %f845, 0f00000000;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.global.u32 	%r97, [%rd39];
	mov.b32 	%r192, %f218;
	mov.b32 	%r191, %f3;
	mov.b32 	%r210, %f287;
	mov.b32 	%r209, %f12;
	mov.b32 	%r228, %f356;
	mov.b32 	%r227, %f21;
	mov.b32 	%r246, %f424;
	mov.b32 	%r245, %f30;
	mov.b32 	%r248, %f459;
	mov.b32 	%r249, %f492;
	mov.b32 	%r251, %f456;
	mov.b32 	%r252, %f489;
	mov.b32 	%r309, %f598;
	mov.b32 	%r308, %f105;
	mov.b32 	%r315, %f595;
	mov.b32 	%r314, %f104;
	selp.f32 	%f646, %f641, %f645, %p136;
	setp.gt.f32 	%p138, %f649, 0f4B800000;
	add.f32 	%f650, %f123, 0f3F800000;
	selp.f32 	%f698, %f693, %f697, %p156;
	setp.gt.f32 	%p158, %f702, 0f4B800000;
	add.f32 	%f703, %f701, 0f3F800000;
	and.b32  	%r41, %r14, 1;
	setp.eq.s32 	%p177, %r383, 0;
	sub.f32 	%f751, %f177, %f747;
	selp.f32 	%f755, %f754, %f749, %p178;
	abs.f32 	%f756, %f845;
	// begin inline asm
	cvt.rn.f16x2.f32 %r190, %r192, %r191;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r208, %r210, %r209;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r226, %r228, %r227;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r244, %r246, %r245;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r247, %r249, %r248;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r250, %r252, %r251;
	// end inline asm
	xor.b32  	%r312, %r315, -2147483648;
	xor.b32  	%r311, %r314, -2147483648;
	selp.f32 	%f124, %f650, %f646, %p138;
	selp.f32 	%f704, %f703, %f698, %p158;
	setp.eq.s32 	%p172, %r41, %r100;
	selp.f32 	%f752, %f747, %f751, %p177;
	setp.gt.f32 	%p179, %f756, 0f4B800000;
	add.f32 	%f757, %f755, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r307, %r309, %r308;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r310, %r312, %r311;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r313, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r316, %r309, %r308;
	// end inline asm
	mov.b32 	%r356, %f704;
	mov.b32 	%r355, %f124;
	mov.b32 	%r359, %f701;
	mov.b32 	%r358, %f123;
	selp.f32 	%f758, %f757, %f752, %p179;
	selp.f32 	%f142, 0f3F800000, 0f00000000, %p172;
	// begin inline asm
	cvt.rn.f16x2.f32 %r354, %r356, %r355;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r357, %r359, %r358;
	// end inline asm
	mul.f32 	%f143, %f758, %f142;
	mul.f32 	%f144, %f755, %f142;
	add.f32 	%f781, %f833, %f833;
	mov.b32 	%r406, %f781;
	and.b32  	%r407, %r406, -2147483648;
	or.b32  	%r408, %r407, 1056964608;
	mov.b32 	%f782, %r408;
	add.f32 	%f783, %f781, %f782;
	cvt.rzi.f32.f32 	%f784, %f783;
	abs.f32 	%f785, %f781;
	setp.gt.f32 	%p193, %f785, 0f4B000000;
	selp.f32 	%f786, %f781, %f784, %p193;
	cvt.rzi.f32.f32 	%f787, %f781;
	setp.lt.f32 	%p194, %f785, 0f3F000000;
	selp.f32 	%f788, %f787, %f786, %p194;
	cvt.rzi.s32.f32 	%r409, %f788;
	fma.rn.f32 	%f789, %f788, 0fBF000000, %f833;
	mul.f32 	%f790, %f789, %f789;
	fma.rn.f32 	%f791, %f790, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f792, %f790, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f793, %f791, %f790, 0fC0A55DF6;
	fma.rn.f32 	%f794, %f792, %f790, 0f4081E0CF;
	fma.rn.f32 	%f795, %f790, %f789, 0f00000000;
	fma.rn.f32 	%f796, %f794, %f790, 0fC09DE9E6;
	fma.rn.f32 	%f797, %f793, %f795, 0f00000000;
	fma.rn.f32 	%f798, %f796, %f790, 0f3F800000;
	fma.rn.f32 	%f799, %f789, 0f40490FDB, %f797;
	and.b32  	%r410, %r409, 1;
	setp.eq.b32 	%p195, %r410, 1;
	selp.f32 	%f800, %f798, %f799, %p195;
	selp.f32 	%f801, %f799, %f798, %p195;
	and.b32  	%r411, %r409, 2;
	setp.eq.s32 	%p196, %r411, 0;
	neg.f32 	%f802, %f800;
	selp.f32 	%f803, %f800, %f802, %p196;
	add.s32 	%r412, %r409, 1;
	and.b32  	%r413, %r412, 2;
	setp.eq.s32 	%p197, %r413, 0;
	sub.f32 	%f805, %f177, %f801;
	selp.f32 	%f806, %f801, %f805, %p197;
	cvt.rzi.f32.f32 	%f807, %f833;
	setp.eq.f32 	%p198, %f807, %f833;
	mul.f32 	%f808, %f833, 0f00000000;
	selp.f32 	%f809, %f808, %f803, %p198;
	abs.f32 	%f810, %f833;
	setp.gt.f32 	%p199, %f810, 0f4B800000;
	add.f32 	%f811, %f809, 0f3F800000;
	selp.f32 	%f812, %f811, %f806, %p199;
	mul.f32 	%f813, %f812, %f142;
	mul.f32 	%f814, %f809, %f142;
	mov.b32 	%r396, %f813;
	mov.b32 	%r395, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r394, %r396, %r395;
	// end inline asm
	mov.b32 	%r402, %f814;
	xor.b32  	%r399, %r402, -2147483648;
	mov.b32 	%r401, %f144;
	xor.b32  	%r398, %r401, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r397, %r399, %r398;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r403, %r396, %r395;
	// end inline asm
	shl.b32 	%r415, %r150, 13;
	shl.b32 	%r416, %r154, 7;
	and.b32  	%r417, %r91, 28;
	shl.b32 	%r418, %r4, 5;
	and.b32  	%r419, %r418, 32;
	or.b32  	%r420, %r417, %r419;
	shl.b32 	%r421, %r4, 10;
	and.b32  	%r422, %r421, 4096;
	shl.b32 	%r423, %r1, 2;
	and.b32  	%r55, %r423, 32;
	or.b32  	%r424, %r422, %r420;
	and.b32  	%r56, %r1, 7;
	and.b32  	%r57, %r94, 16;
	and.b32  	%r58, %r98, 8;
	and.b32  	%r59, %r418, 64;
	or.b32  	%r425, %r415, %r59;
	or.b32  	%r426, %r425, %r424;
	add.s32 	%r60, %r426, %r416;
	and.b32  	%r61, %r3, 8;
	shl.b32 	%r427, %r3, 4;
	or.b32  	%r428, %r61, %r427;
	shr.u32 	%r429, %r428, 2;
	and.b32  	%r430, %r429, 30;
	and.b32  	%r62, %r98, 2;
	and.b32  	%r63, %r91, 12;
	and.b32  	%r431, %r2, 32;
	shl.b32 	%r432, %r3, 3;
	and.b32  	%r433, %r432, 64;
	shl.b32 	%r434, %r1, 1;
	or.b32  	%r435, %r433, %r434;
	shr.u32 	%r436, %r435, 2;
	or.b32  	%r64, %r436, %r431;
	or.b32  	%r65, %r64, 8;
	or.b32  	%r437, %r96, %r95;
	or.b32  	%r438, %r437, %r92;
	shr.u32 	%r439, %r438, 1;
	mul.lo.s32 	%r440, %r439, 65;
	add.s32 	%r441, %r64, %r440;
	add.s32 	%r442, %r65, %r440;
	shl.b32 	%r443, %r152, 18;
	add.s32 	%r444, %r443, -786432;
	or.b32  	%r445, %r93, %r14;
	and.b32  	%r446, %r423, 28;
	or.b32  	%r447, %r445, %r446;
	shl.b32 	%r448, %r447, 7;
	or.b32  	%r66, %r448, %r420;
	cvt.s64.s32 	%rd5, %r444;
	shr.u32 	%r449, %r1, 3;
	or.b32  	%r450, %r449, 2;
	or.b32  	%r451, %r449, 4;
	or.b32  	%r452, %r449, 6;
	and.b32  	%r453, %r1, 1;
	neg.s32 	%r454, %r453;
	setp.eq.b32 	%p201, %r453, 1;
	and.b32  	%r455, %r454, 520;
	bfe.s32 	%r456, %r1, 1, 1;
	and.b32  	%r457, %r1, 2;
	setp.eq.s32 	%p202, %r457, 0;
	and.b32  	%r458, %r456, 260;
	bfe.s32 	%r459, %r1, 2, 1;
	and.b32  	%r460, %r1, 4;
	setp.eq.s32 	%p203, %r460, 0;
	and.b32  	%r461, %r459, 130;
	mul.lo.s32 	%r462, %r449, 1057;
	mul.lo.s32 	%r463, %r102, 65;
	add.s32 	%r464, %r455, %r430;
	add.s32 	%r465, %r464, %r458;
	add.s32 	%r466, %r465, %r461;
	add.s32 	%r467, %r466, %r462;
	add.s32 	%r468, %r467, %r463;
	mul.wide.u32 	%rd40, %r468, 4;
	mov.u64 	%rd41, shmem;
	add.s64 	%rd6, %rd41, %rd40;
	cvt.u64.u32 	%rd42, %r463;
	cvt.u64.u32 	%rd43, %r462;
	selp.b64 	%rd44, 0, 130, %p203;
	selp.b64 	%rd45, 0, 260, %p202;
	selp.b64 	%rd46, 520, 0, %p201;
	cvt.u64.u32 	%rd47, %r430;
	add.s64 	%rd48, %rd47, %rd46;
	add.s64 	%rd49, %rd48, %rd45;
	add.s64 	%rd50, %rd49, %rd44;
	add.s64 	%rd51, %rd50, %rd43;
	add.s64 	%rd52, %rd51, %rd42;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd7, %rd41, %rd53;
	mul.lo.s32 	%r469, %r450, 1057;
	add.s32 	%r470, %r466, %r469;
	add.s32 	%r471, %r470, %r463;
	mul.wide.u32 	%rd54, %r471, 4;
	add.s64 	%rd8, %rd41, %rd54;
	cvt.u64.u32 	%rd55, %r469;
	add.s64 	%rd56, %rd50, %rd55;
	add.s64 	%rd57, %rd56, %rd42;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd9, %rd41, %rd58;
	mul.lo.s32 	%r472, %r451, 1057;
	add.s32 	%r473, %r466, %r472;
	add.s32 	%r474, %r473, %r463;
	mul.wide.u32 	%rd59, %r474, 4;
	add.s64 	%rd10, %rd41, %rd59;
	cvt.u64.u32 	%rd60, %r472;
	add.s64 	%rd61, %rd50, %rd60;
	add.s64 	%rd62, %rd61, %rd42;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd11, %rd41, %rd63;
	mul.lo.s32 	%r475, %r452, 1057;
	add.s32 	%r476, %r466, %r475;
	add.s32 	%r477, %r476, %r463;
	mul.wide.u32 	%rd64, %r477, 4;
	add.s64 	%rd12, %rd41, %rd64;
	cvt.u64.u32 	%rd65, %r475;
	add.s64 	%rd66, %rd50, %rd65;
	add.s64 	%rd67, %rd66, %rd42;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd13, %rd41, %rd68;
	and.b32  	%r478, %r434, 14;
	or.b32  	%r479, %r478, %r102;
	mul.lo.s32 	%r480, %r479, 65;
	add.s32 	%r481, %r430, %r480;
	add.s32 	%r482, %r481, %r462;
	mul.wide.u32 	%rd69, %r482, 4;
	add.s64 	%rd14, %rd41, %rd69;
	cvt.u64.u32 	%rd70, %r480;
	add.s64 	%rd71, %rd70, %rd47;
	add.s64 	%rd72, %rd71, %rd43;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd15, %rd41, %rd73;
	add.s32 	%r483, %r481, %r469;
	mul.wide.u32 	%rd74, %r483, 4;
	add.s64 	%rd16, %rd41, %rd74;
	add.s64 	%rd75, %rd71, %rd55;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd17, %rd41, %rd76;
	add.s32 	%r484, %r481, %r472;
	mul.wide.u32 	%rd77, %r484, 4;
	add.s64 	%rd18, %rd41, %rd77;
	add.s64 	%rd78, %rd71, %rd60;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd19, %rd41, %rd79;
	add.s32 	%r485, %r481, %r475;
	mul.wide.u32 	%rd80, %r485, 4;
	add.s64 	%rd20, %rd41, %rd80;
	add.s64 	%rd81, %rd71, %rd65;
	shl.b64 	%rd82, %rd81, 2;
	add.s64 	%rd21, %rd41, %rd82;
	mul.wide.u32 	%rd83, %r442, 4;
	add.s64 	%rd22, %rd41, %rd83;
	mul.wide.u32 	%rd84, %r441, 4;
	add.s64 	%rd23, %rd41, %rd84;
	setp.eq.s32 	%p204, %r61, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	mov.u32 	%r2563, %r2555;
	mov.u32 	%r2564, %r2555;
	mov.u32 	%r2565, %r2555;
	mov.u32 	%r2566, %r2555;
	mov.u32 	%r2575, %r2555;
	mov.u32 	%r2576, %r2555;
	mov.u32 	%r73, %r2555;
	bra.uni 	$L__BB0_83;
$L__BB0_89:                             // %pass10226
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r2547, %r2556, %r66;
	or.b32  	%r2548, %r2547, %r59;
	or.b32  	%r2549, %r2548, 1048576;
	cvt.s64.s32 	%rd122, %r2549;
	add.s64 	%rd123, %rd122, %rd5;
	shr.u64 	%rd124, %rd123, 36;
	add.s64 	%rd125, %rd123, %rd124;
	shr.s64 	%rd126, %rd125, 28;
	setp.lt.s64 	%p228, %rd123, 0;
	and.b64  	%rd127, %rd125, -268435456;
	setp.ne.s64 	%p229, %rd127, %rd123;
	and.pred  	%p230, %p228, %p229;
	selp.u64 	%rd128, 1, 0, %p230;
	sub.s64 	%rd129, %rd128, %rd126;
	shl.b64 	%rd130, %rd129, 28;
	add.s64 	%rd131, %rd130, %rd123;
	shl.b64 	%rd132, %rd131, 2;
	add.s64 	%rd133, %rd3, %rd132;
	st.global.v4.u32 	[%rd133], {%r141, %r143, %r142, %r144};
	or.b32  	%r2550, %r2548, 1572864;
	cvt.s64.s32 	%rd134, %r2550;
	add.s64 	%rd135, %rd134, %rd5;
	shr.u64 	%rd136, %rd135, 36;
	add.s64 	%rd137, %rd135, %rd136;
	shr.s64 	%rd138, %rd137, 28;
	setp.lt.s64 	%p231, %rd135, 0;
	and.b64  	%rd139, %rd137, -268435456;
	setp.ne.s64 	%p232, %rd139, %rd135;
	and.pred  	%p233, %p231, %p232;
	selp.u64 	%rd140, 1, 0, %p233;
	sub.s64 	%rd141, %rd140, %rd138;
	shl.b64 	%rd142, %rd141, 28;
	add.s64 	%rd143, %rd142, %rd135;
	shl.b64 	%rd144, %rd143, 2;
	add.s64 	%rd145, %rd3, %rd144;
	st.global.v4.u32 	[%rd145], {%r145, %r147, %r146, %r148};
	setp.ne.s32 	%p234, %r73, 32512;
	add.s32 	%r73, %r73, 256;
	add.s32 	%r2551, %r73, %r150;
	setp.lt.s32 	%p235, %r2551, %r151;
	and.pred  	%p236, %p234, %p235;
	@%p236 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_90;
$L__BB0_83:                             // %L1414
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_84 Depth 2
	or.b32  	%r74, %r73, %r55;
	or.b32  	%r551, %r74, %r56;
	or.b32  	%r552, %r551, %r57;
	or.b32  	%r553, %r552, %r58;
	shl.b32 	%r554, %r553, 13;
	add.s32 	%r555, %r60, %r554;
	shr.s32 	%r556, %r555, 31;
	shr.u32 	%r557, %r556, 4;
	add.s32 	%r558, %r555, %r557;
	shr.s32 	%r559, %r558, 28;
	setp.lt.s32 	%p205, %r555, 0;
	and.b32  	%r560, %r558, -268435456;
	setp.ne.s32 	%p206, %r560, %r555;
	and.pred  	%p207, %p205, %p206;
	selp.u32 	%r561, 1, 0, %p207;
	sub.s32 	%r562, %r561, %r559;
	shl.b32 	%r563, %r562, 28;
	or.b32  	%r564, %r555, 1;
	add.s32 	%r565, %r564, %r563;
	mul.wide.s32 	%rd85, %r565, 4;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.v4.u32 	{%r566, %r567, %r568, %r569}, [%rd86+-4];
	or.b32  	%r570, %r554, 524288;
	add.s32 	%r571, %r60, %r570;
	shr.s32 	%r572, %r571, 31;
	shr.u32 	%r573, %r572, 4;
	add.s32 	%r574, %r571, %r573;
	shr.s32 	%r575, %r574, 28;
	setp.lt.s32 	%p208, %r571, 0;
	and.b32  	%r576, %r574, -268435456;
	setp.ne.s32 	%p209, %r576, %r571;
	and.pred  	%p210, %p208, %p209;
	selp.u32 	%r577, 1, 0, %p210;
	sub.s32 	%r578, %r577, %r575;
	shl.b32 	%r579, %r578, 28;
	or.b32  	%r580, %r571, 1;
	add.s32 	%r581, %r580, %r579;
	mul.wide.s32 	%rd87, %r581, 4;
	add.s64 	%rd88, %rd2, %rd87;
	ld.global.v4.u32 	{%r582, %r583, %r584, %r585}, [%rd88+-4];
	or.b32  	%r586, %r554, 1048576;
	add.s32 	%r587, %r60, %r586;
	shr.s32 	%r588, %r587, 31;
	shr.u32 	%r589, %r588, 4;
	add.s32 	%r590, %r587, %r589;
	shr.s32 	%r591, %r590, 28;
	setp.lt.s32 	%p211, %r587, 0;
	and.b32  	%r592, %r590, -268435456;
	setp.ne.s32 	%p212, %r592, %r587;
	and.pred  	%p213, %p211, %p212;
	selp.u32 	%r593, 1, 0, %p213;
	sub.s32 	%r594, %r593, %r591;
	shl.b32 	%r595, %r594, 28;
	or.b32  	%r596, %r587, 1;
	add.s32 	%r597, %r596, %r595;
	mul.wide.s32 	%rd89, %r597, 4;
	add.s64 	%rd90, %rd2, %rd89;
	ld.global.v4.u32 	{%r598, %r599, %r600, %r601}, [%rd90+-4];
	or.b32  	%r602, %r554, 1572864;
	add.s32 	%r603, %r60, %r602;
	shr.s32 	%r604, %r603, 31;
	shr.u32 	%r605, %r604, 4;
	add.s32 	%r606, %r603, %r605;
	shr.s32 	%r607, %r606, 28;
	setp.lt.s32 	%p214, %r603, 0;
	and.b32  	%r608, %r606, -268435456;
	setp.ne.s32 	%p215, %r608, %r603;
	and.pred  	%p216, %p214, %p215;
	selp.u32 	%r609, 1, 0, %p216;
	sub.s32 	%r610, %r609, %r607;
	shl.b32 	%r611, %r610, 28;
	or.b32  	%r612, %r603, 1;
	add.s32 	%r613, %r612, %r611;
	mul.wide.s32 	%rd91, %r613, 4;
	add.s64 	%rd92, %rd2, %rd91;
	ld.global.v4.u32 	{%r614, %r615, %r616, %r617}, [%rd92+-4];
	selp.b32 	%r618, %r568, %r566, %p204;
	shfl.sync.bfly.b32	%r619, %r618, 8, 31, -1;
	selp.b32 	%r487, %r566, %r619, %p204;
	selp.b32 	%r488, %r619, %r568, %p204;
	selp.b32 	%r620, %r569, %r567, %p204;
	shfl.sync.bfly.b32	%r621, %r620, 8, 31, -1;
	selp.b32 	%r495, %r567, %r621, %p204;
	selp.b32 	%r496, %r621, %r569, %p204;
	selp.b32 	%r622, %r584, %r582, %p204;
	shfl.sync.bfly.b32	%r623, %r622, 8, 31, -1;
	selp.b32 	%r503, %r582, %r623, %p204;
	selp.b32 	%r504, %r623, %r584, %p204;
	selp.b32 	%r624, %r585, %r583, %p204;
	shfl.sync.bfly.b32	%r625, %r624, 8, 31, -1;
	selp.b32 	%r511, %r583, %r625, %p204;
	selp.b32 	%r512, %r625, %r585, %p204;
	selp.b32 	%r626, %r600, %r598, %p204;
	shfl.sync.bfly.b32	%r627, %r626, 8, 31, -1;
	selp.b32 	%r519, %r598, %r627, %p204;
	selp.b32 	%r520, %r627, %r600, %p204;
	selp.b32 	%r628, %r601, %r599, %p204;
	shfl.sync.bfly.b32	%r629, %r628, 8, 31, -1;
	selp.b32 	%r527, %r599, %r629, %p204;
	selp.b32 	%r528, %r629, %r601, %p204;
	selp.b32 	%r630, %r616, %r614, %p204;
	shfl.sync.bfly.b32	%r631, %r630, 8, 31, -1;
	selp.b32 	%r535, %r614, %r631, %p204;
	selp.b32 	%r536, %r631, %r616, %p204;
	selp.b32 	%r632, %r617, %r615, %p204;
	shfl.sync.bfly.b32	%r633, %r632, 8, 31, -1;
	selp.b32 	%r543, %r615, %r633, %p204;
	selp.b32 	%r544, %r633, %r617, %p204;
	mov.u32 	%r545, 21520;
	// begin inline asm
	prmt.b32 %r486, %r487, %r488, %r545;
	// end inline asm
	mov.u32 	%r549, 30258;
	// begin inline asm
	prmt.b32 %r490, %r487, %r488, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r494, %r495, %r496, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r498, %r495, %r496, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r502, %r503, %r504, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r506, %r503, %r504, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r510, %r511, %r512, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r514, %r511, %r512, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r519, %r520, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r519, %r520, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r527, %r528, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r527, %r528, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r535, %r536, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r535, %r536, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r543, %r544, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r543, %r544, %r549;
	// end inline asm
	st.shared.u32 	[%rd6], %r486;
	st.shared.u32 	[%rd7+128], %r490;
	st.shared.u32 	[%rd7+4], %r494;
	st.shared.u32 	[%rd7+132], %r498;
	st.shared.u32 	[%rd8], %r502;
	st.shared.u32 	[%rd9+128], %r506;
	st.shared.u32 	[%rd9+4], %r510;
	st.shared.u32 	[%rd9+132], %r514;
	st.shared.u32 	[%rd10], %r518;
	st.shared.u32 	[%rd11+128], %r522;
	st.shared.u32 	[%rd11+4], %r526;
	st.shared.u32 	[%rd11+132], %r530;
	st.shared.u32 	[%rd12], %r534;
	st.shared.u32 	[%rd13+128], %r538;
	st.shared.u32 	[%rd13+4], %r542;
	st.shared.u32 	[%rd13+132], %r546;
	bar.sync 	0;
	or.b32  	%r634, %r73, %r102;
	or.b32  	%r75, %r634, %r62;
	shr.u32 	%r2570, %r75, 5;
	mov.u64 	%rd150, %rd23;
	mov.u64 	%rd151, %rd22;
	mov.u32 	%r2571, %r2563;
	mov.u32 	%r2572, %r2564;
	mov.u32 	%r2573, %r2565;
	mov.u32 	%r2574, %r2566;
	mov.u32 	%r2577, %r2555;
$L__BB0_84:                             // %L12498
                                        //   Parent Loop BB0_83 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2564, %r2576;
	mov.u32 	%r2563, %r2575;
	add.s32 	%r2431, %r75, %r2577;
	and.b32  	%r2432, %r2431, 1;
	neg.s32 	%r2433, %r2432;
	and.b32  	%r2434, %r2433, 520;
	or.b32  	%r2435, %r2431, %r63;
	bfe.s32 	%r2436, %r2431, 1, 1;
	and.b32  	%r2437, %r2436, 260;
	bfe.s32 	%r2438, %r2435, 2, 1;
	and.b32  	%r2439, %r2438, 130;
	and.b32  	%r2440, %r2570, 7;
	mul.lo.s32 	%r2441, %r2440, 1057;
	bfe.s32 	%r2442, %r2435, 3, 1;
	and.b32  	%r2443, %r2442, 65;
	or.b32  	%r2444, %r64, %r2434;
	add.s32 	%r2445, %r2444, %r2437;
	add.s32 	%r2446, %r2445, %r2439;
	add.s32 	%r2447, %r2446, %r2441;
	add.s32 	%r2448, %r2447, %r2443;
	mul.wide.u32 	%rd93, %r2448, 4;
	add.s64 	%rd95, %rd41, %rd93;
	ld.shared.u32 	%r2565, [%rd95];
	add.s32 	%r2449, %r65, %r2434;
	add.s32 	%r2450, %r2449, %r2437;
	add.s32 	%r2451, %r2450, %r2439;
	add.s32 	%r2452, %r2451, %r2441;
	add.s32 	%r2453, %r2452, %r2443;
	mul.wide.u32 	%rd96, %r2453, 4;
	add.s64 	%rd97, %rd41, %rd96;
	ld.shared.u32 	%r2566, [%rd97];
	// begin inline asm
	mov.b32 %r640, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r651, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r639, %r2565, -2004318072;
	mov.u32 	%r638, 983055;
	// begin inline asm
	lop3.b32 %r637, %r638, %r639, %r640, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r641, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r642, %r640, %r641;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r645, %r637, %r642;
	// end inline asm
	mov.u32 	%r649, 15728880;
	// begin inline asm
	lop3.b32 %r648, %r649, %r639, %r651, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r652, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r653, %r651, %r652;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r656, %r648, %r653;
	// end inline asm
	shr.u32 	%r661, %r639, 8;
	// begin inline asm
	lop3.b32 %r659, %r638, %r661, %r640, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r663, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r664, %r640, %r663;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r667, %r659, %r664;
	// end inline asm
	// begin inline asm
	lop3.b32 %r670, %r649, %r661, %r651, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r674, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r675, %r651, %r674;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r678, %r670, %r675;
	// end inline asm
	// begin inline asm
	mov.b32 %r686, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r697, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r685, %r2566, -2004318072;
	// begin inline asm
	lop3.b32 %r683, %r638, %r685, %r686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r687, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r688, %r686, %r687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r691, %r683, %r688;
	// end inline asm
	// begin inline asm
	lop3.b32 %r694, %r649, %r685, %r697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r698, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r699, %r697, %r698;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r702, %r694, %r699;
	// end inline asm
	shr.u32 	%r707, %r685, 8;
	// begin inline asm
	lop3.b32 %r705, %r638, %r707, %r686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r709, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r710, %r686, %r709;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r713, %r705, %r710;
	// end inline asm
	// begin inline asm
	lop3.b32 %r716, %r649, %r707, %r697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r720, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r721, %r697, %r720;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r724, %r716, %r721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r727, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r729, %r727, %r645;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r732, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r734, %r732, %r656;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r737, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r739, %r737, %r667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r742, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r744, %r742, %r678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r747, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r749, %r747, %r691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r752, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r754, %r752, %r702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r757, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r759, %r757, %r713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r762, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r764, %r762, %r724;
	// end inline asm
	// begin inline asm
	mov.b32 %r772, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r783, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r771, %r2571, -2004318072;
	// begin inline asm
	lop3.b32 %r769, %r638, %r771, %r772, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r773, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r774, %r772, %r773;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r777, %r769, %r774;
	// end inline asm
	// begin inline asm
	lop3.b32 %r780, %r649, %r771, %r783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r784, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r785, %r783, %r784;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r788, %r780, %r785;
	// end inline asm
	shr.u32 	%r793, %r771, 8;
	// begin inline asm
	lop3.b32 %r791, %r638, %r793, %r772, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r795, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r796, %r772, %r795;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r799, %r791, %r796;
	// end inline asm
	// begin inline asm
	lop3.b32 %r802, %r649, %r793, %r783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r806, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r807, %r783, %r806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r810, %r802, %r807;
	// end inline asm
	// begin inline asm
	mov.b32 %r818, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r829, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r817, %r2572, -2004318072;
	// begin inline asm
	lop3.b32 %r815, %r638, %r817, %r818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r819, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r820, %r818, %r819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r823, %r815, %r820;
	// end inline asm
	// begin inline asm
	lop3.b32 %r826, %r649, %r817, %r829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r830, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r831, %r829, %r830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r834, %r826, %r831;
	// end inline asm
	shr.u32 	%r839, %r817, 8;
	// begin inline asm
	lop3.b32 %r837, %r638, %r839, %r818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r841, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r842, %r818, %r841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r845, %r837, %r842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r848, %r649, %r839, %r829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r852, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r853, %r829, %r852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r856, %r848, %r853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r859, %r190, %r777, %r729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r863, %r190, %r788, %r734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r867, %r190, %r799, %r739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r871, %r190, %r810, %r744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r875, %r190, %r823, %r749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r879, %r190, %r834, %r754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r883, %r190, %r845, %r759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r887, %r190, %r856, %r764;
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r907, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r895, %r2573, -2004318072;
	// begin inline asm
	lop3.b32 %r893, %r638, %r895, %r896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r898, %r896, %r897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r901, %r893, %r898;
	// end inline asm
	// begin inline asm
	lop3.b32 %r904, %r649, %r895, %r907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r908, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r909, %r907, %r908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r912, %r904, %r909;
	// end inline asm
	shr.u32 	%r917, %r895, 8;
	// begin inline asm
	lop3.b32 %r915, %r638, %r917, %r896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r896, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r926, %r649, %r917, %r907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r907, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r941, %r2574, -2004318072;
	// begin inline asm
	lop3.b32 %r939, %r638, %r941, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r942, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	lop3.b32 %r950, %r649, %r941, %r953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r954, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r955, %r953, %r954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r958, %r950, %r955;
	// end inline asm
	shr.u32 	%r963, %r941, 8;
	// begin inline asm
	lop3.b32 %r961, %r638, %r963, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r942, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r972, %r649, %r963, %r953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r953, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r983, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r985, %r983, %r901, %r859;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r989, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r991, %r989, %r912, %r863;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r995, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r997, %r995, %r923, %r867;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1001, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1003, %r1001, %r934, %r871;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1007, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1009, %r1007, %r947, %r875;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1013, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1015, %r1013, %r958, %r879;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1019, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1021, %r1019, %r969, %r883;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1025, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1027, %r1025, %r980, %r887;
	// end inline asm
	// begin inline asm
	mov.b32 %r1036, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1047, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1035, %r2563, -2004318072;
	// begin inline asm
	lop3.b32 %r1033, %r638, %r1035, %r1036, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1037, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1038, %r1036, %r1037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1041, %r1033, %r1038;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1044, %r649, %r1035, %r1047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1048, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1049, %r1047, %r1048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1052, %r1044, %r1049;
	// end inline asm
	shr.u32 	%r1057, %r1035, 8;
	// begin inline asm
	lop3.b32 %r1055, %r638, %r1057, %r1036, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1060, %r1036, %r1059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1063, %r1055, %r1060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1066, %r649, %r1057, %r1047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1047, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	mov.b32 %r1082, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1093, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1081, %r2564, -2004318072;
	// begin inline asm
	lop3.b32 %r1079, %r638, %r1081, %r1082, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1083, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1084, %r1082, %r1083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1087, %r1079, %r1084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1090, %r649, %r1081, %r1093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1094, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1095, %r1093, %r1094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1098, %r1090, %r1095;
	// end inline asm
	shr.u32 	%r1103, %r1081, 8;
	// begin inline asm
	lop3.b32 %r1101, %r638, %r1103, %r1082, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1105, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1106, %r1082, %r1105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1109, %r1101, %r1106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1112, %r649, %r1103, %r1093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1116, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1117, %r1093, %r1116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1120, %r1112, %r1117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1162, %r226, %r1041, %r985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r226, %r1052, %r991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1171, %r226, %r1063, %r997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1168, %r226, %r1074, %r1003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1180, %r226, %r1087, %r1009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r226, %r1098, %r1015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1189, %r226, %r1109, %r1021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r226, %r1120, %r1027;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1155, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r1155, %r1159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r247, %r1162, %r1157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1164, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r1164, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r247, %r1171, %r1166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1173, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1175, %r1173, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r247, %r1180, %r1175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1182, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r1182, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r247, %r1189, %r1184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1191, %r250, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r247, %r1159, %r1191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1198, %r250, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r247, %r1168, %r1198;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1205, %r250, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1208, %r247, %r1177, %r1205;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1212, %r250, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1215, %r247, %r1186, %r1212;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1266, %r1263}, {%r307, %r313, %r310, %r316}, {%r1160, %r1194}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1275, %r1272}, {%r307, %r313, %r310, %r316}, {%r1169, %r1201}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1284, %r1281}, {%r307, %r313, %r310, %r316}, {%r1178, %r1208}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1293, %r1290}, {%r307, %r313, %r310, %r316}, {%r1187, %r1215}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1259, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1261, %r1259, %r1263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1264, %r354, %r1266, %r1261;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1268, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1270, %r1268, %r1272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1273, %r354, %r1275, %r1270;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1277, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1279, %r1277, %r1281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1282, %r354, %r1284, %r1279;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1286, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1288, %r1286, %r1290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1291, %r354, %r1293, %r1288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1295, %r357, %r1266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1298, %r354, %r1263, %r1295;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1302, %r357, %r1275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1305, %r354, %r1272, %r1302;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1309, %r357, %r1284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1312, %r354, %r1281, %r1309;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1316, %r357, %r1293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1319, %r354, %r1290, %r1316;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1323, %r1324}, {%r394, %r400, %r397, %r403}, {%r1264, %r1298}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1333, %r1334}, {%r394, %r400, %r397, %r403}, {%r1273, %r1305}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1343, %r1344}, {%r394, %r400, %r397, %r403}, {%r1282, %r1312}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1353, %r1354}, {%r394, %r400, %r397, %r403}, {%r1291, %r1319}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1363, %r97, %r1323;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1366, %r97, %r1324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1369, %r97, %r1333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1372, %r97, %r1334;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1375, %r97, %r1343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r97, %r1344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1381, %r97, %r1353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1384, %r97, %r1354;
	// end inline asm
	// begin inline asm
	mov.b32 %r1387, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1388, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1389, %r1363, %r1387;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1392, %r1389, %r1388;
	// end inline asm
	// begin inline asm
	mov.b32 %r1395, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1396, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1397, %r1366, %r1395;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1400, %r1397, %r1396;
	// end inline asm
	// begin inline asm
	mov.b32 %r1403, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1404, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1405, %r1369, %r1403;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1408, %r1405, %r1404;
	// end inline asm
	// begin inline asm
	mov.b32 %r1411, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1412, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1413, %r1372, %r1411;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1416, %r1413, %r1412;
	// end inline asm
	// begin inline asm
	mov.b32 %r1419, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1420, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1421, %r1375, %r1419;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1424, %r1421, %r1420;
	// end inline asm
	// begin inline asm
	mov.b32 %r1427, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1428, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1429, %r1378, %r1427;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1432, %r1429, %r1428;
	// end inline asm
	// begin inline asm
	mov.b32 %r1435, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1436, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1437, %r1381, %r1435;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1440, %r1437, %r1436;
	// end inline asm
	// begin inline asm
	mov.b32 %r1443, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1444, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1445, %r1384, %r1443;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1448, %r1445, %r1444;
	// end inline asm
	// begin inline asm
	mov.b32 %r1454, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1452, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1453, %r1454, %r1452;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1456, %r1392, %r1453;
	// end inline asm
	// begin inline asm
	mov.b32 %r1459, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1460, %r1454, %r1459;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1463, %r1400, %r1460;
	// end inline asm
	// begin inline asm
	mov.b32 %r1466, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1467, %r1454, %r1466;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1470, %r1408, %r1467;
	// end inline asm
	// begin inline asm
	mov.b32 %r1473, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1474, %r1454, %r1473;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1477, %r1416, %r1474;
	// end inline asm
	mov.u32 	%r1483, 25152;
	// begin inline asm
	prmt.b32 %r1480, %r1456, %r1470, %r1483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1484, %r1463, %r1477, %r1483;
	// end inline asm
	shl.b32 	%r1491, %r1484, 4;
	mov.u32 	%r1489, 252645135;
	// begin inline asm
	lop3.b32 %r1488, %r1489, %r1480, %r1491, 202;
	// end inline asm
	xor.b32  	%r2454, %r1488, -2004318072;
	// begin inline asm
	mov.b32 %r1495, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1493, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1494, %r1495, %r1493;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1497, %r1424, %r1494;
	// end inline asm
	// begin inline asm
	mov.b32 %r1500, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1501, %r1495, %r1500;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1504, %r1432, %r1501;
	// end inline asm
	// begin inline asm
	mov.b32 %r1507, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1508, %r1495, %r1507;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1511, %r1440, %r1508;
	// end inline asm
	// begin inline asm
	mov.b32 %r1514, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1515, %r1495, %r1514;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1518, %r1448, %r1515;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1521, %r1497, %r1511, %r1483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1525, %r1504, %r1518, %r1483;
	// end inline asm
	shl.b32 	%r1532, %r1525, 4;
	// begin inline asm
	lop3.b32 %r1529, %r1489, %r1521, %r1532, 202;
	// end inline asm
	xor.b32  	%r2455, %r1529, -2004318072;
	st.shared.u32 	[%rd150], %r2454;
	st.shared.u32 	[%rd151], %r2455;
	ld.shared.u32 	%r2575, [%rd95];
	ld.shared.u32 	%r2576, [%rd97];
	// begin inline asm
	mov.b32 %r1538, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1549, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1537, %r2575, -2004318072;
	// begin inline asm
	lop3.b32 %r1535, %r638, %r1537, %r1538, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1539, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1540, %r1538, %r1539;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1543, %r1535, %r1540;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1546, %r649, %r1537, %r1549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1550, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1551, %r1549, %r1550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1554, %r1546, %r1551;
	// end inline asm
	shr.u32 	%r1559, %r1537, 8;
	// begin inline asm
	lop3.b32 %r1557, %r638, %r1559, %r1538, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1561, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1562, %r1538, %r1561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1565, %r1557, %r1562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1568, %r649, %r1559, %r1549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1572, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1573, %r1549, %r1572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1576, %r1568, %r1573;
	// end inline asm
	// begin inline asm
	mov.b32 %r1584, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1595, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1583, %r2576, -2004318072;
	// begin inline asm
	lop3.b32 %r1581, %r638, %r1583, %r1584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1585, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1586, %r1584, %r1585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1589, %r1581, %r1586;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1592, %r649, %r1583, %r1595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1596, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1597, %r1595, %r1596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1600, %r1592, %r1597;
	// end inline asm
	shr.u32 	%r1605, %r1583, 8;
	// begin inline asm
	lop3.b32 %r1603, %r638, %r1605, %r1584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1607, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1608, %r1584, %r1607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1611, %r1603, %r1608;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1614, %r649, %r1605, %r1595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1618, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1619, %r1595, %r1618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1622, %r1614, %r1619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1625, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1627, %r1625, %r1543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1630, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1632, %r1630, %r1554;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1635, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1637, %r1635, %r1565;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1640, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1642, %r1640, %r1576;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1645, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1647, %r1645, %r1589;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1650, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r1650, %r1600;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1655, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1657, %r1655, %r1611;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1660, %r244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1662, %r1660, %r1622;
	// end inline asm
	// begin inline asm
	mov.b32 %r1670, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1681, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1667, %r638, %r895, %r1670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1671, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1672, %r1670, %r1671;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1675, %r1667, %r1672;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1678, %r649, %r895, %r1681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1682, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1683, %r1681, %r1682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1686, %r1678, %r1683;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1689, %r638, %r917, %r1670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1693, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1694, %r1670, %r1693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1697, %r1689, %r1694;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1700, %r649, %r917, %r1681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1704, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1705, %r1681, %r1704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1708, %r1700, %r1705;
	// end inline asm
	// begin inline asm
	mov.b32 %r1716, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1727, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1713, %r638, %r941, %r1716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1717, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1718, %r1716, %r1717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1721, %r1713, %r1718;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1724, %r649, %r941, %r1727, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1728, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1729, %r1727, %r1728;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1732, %r1724, %r1729;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1735, %r638, %r963, %r1716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1739, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1740, %r1716, %r1739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1743, %r1735, %r1740;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1746, %r649, %r963, %r1727, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1750, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1751, %r1727, %r1750;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1754, %r1746, %r1751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r190, %r1675, %r1627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r190, %r1686, %r1632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r190, %r1697, %r1637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r190, %r1708, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r190, %r1721, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r190, %r1732, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r190, %r1743, %r1657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r190, %r1754, %r1662;
	// end inline asm
	// begin inline asm
	mov.b32 %r1794, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1805, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1791, %r638, %r1035, %r1794, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1795, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1796, %r1794, %r1795;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1799, %r1791, %r1796;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1802, %r649, %r1035, %r1805, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1806, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1807, %r1805, %r1806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1810, %r1802, %r1807;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1813, %r638, %r1057, %r1794, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1817, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1818, %r1794, %r1817;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1821, %r1813, %r1818;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1824, %r649, %r1057, %r1805, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1828, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1829, %r1805, %r1828;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1832, %r1824, %r1829;
	// end inline asm
	// begin inline asm
	mov.b32 %r1840, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1851, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1837, %r638, %r1081, %r1840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1841, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1842, %r1840, %r1841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1845, %r1837, %r1842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1848, %r649, %r1081, %r1851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1852, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1853, %r1851, %r1852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1856, %r1848, %r1853;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1859, %r638, %r1103, %r1840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1863, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1864, %r1840, %r1863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1867, %r1859, %r1864;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1870, %r649, %r1103, %r1851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1874, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1875, %r1851, %r1874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1878, %r1870, %r1875;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1881, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r1881, %r1799, %r1757;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1887, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r1887, %r1810, %r1761;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1893, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1895, %r1893, %r1821, %r1765;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1899, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r1899, %r1832, %r1769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1905, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r1905, %r1845, %r1773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1911, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r1911, %r1856, %r1777;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1917, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1919, %r1917, %r1867, %r1781;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1923, %r208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r1923, %r1878, %r1785;
	// end inline asm
	// begin inline asm
	mov.b32 %r1934, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1945, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1931, %r638, %r639, %r1934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1935, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1936, %r1934, %r1935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1939, %r1931, %r1936;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1942, %r649, %r639, %r1945, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1946, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1947, %r1945, %r1946;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1950, %r1942, %r1947;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1953, %r638, %r661, %r1934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1957, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1958, %r1934, %r1957;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1961, %r1953, %r1958;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1964, %r649, %r661, %r1945, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1968, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1969, %r1945, %r1968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1972, %r1964, %r1969;
	// end inline asm
	// begin inline asm
	mov.b32 %r1980, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1991, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1977, %r638, %r685, %r1980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1981, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1982, %r1980, %r1981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1985, %r1977, %r1982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1988, %r649, %r685, %r1991, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1992, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1993, %r1991, %r1992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1996, %r1988, %r1993;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1999, %r638, %r707, %r1980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2003, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2004, %r1980, %r2003;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2007, %r1999, %r2004;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2010, %r649, %r707, %r1991, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2014, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2015, %r1991, %r2014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2018, %r2010, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2060, %r226, %r1939, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r226, %r1950, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2069, %r226, %r1961, %r1895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2066, %r226, %r1972, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2078, %r226, %r1985, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2075, %r226, %r1996, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2087, %r226, %r2007, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2084, %r226, %r2018, %r1925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2053, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2055, %r2053, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2058, %r247, %r2060, %r2055;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2062, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2064, %r2062, %r2066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2067, %r247, %r2069, %r2064;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2071, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2073, %r2071, %r2075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r247, %r2078, %r2073;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2080, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2082, %r2080, %r2084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2085, %r247, %r2087, %r2082;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2089, %r250, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2092, %r247, %r2057, %r2089;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2096, %r250, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2099, %r247, %r2066, %r2096;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2103, %r250, %r2078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2106, %r247, %r2075, %r2103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r250, %r2087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r247, %r2084, %r2110;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2164, %r2161}, {%r307, %r313, %r310, %r316}, {%r2058, %r2092}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2173, %r2170}, {%r307, %r313, %r310, %r316}, {%r2067, %r2099}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2182, %r2179}, {%r307, %r313, %r310, %r316}, {%r2076, %r2106}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2191, %r2188}, {%r307, %r313, %r310, %r316}, {%r2085, %r2113}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2157, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r2157, %r2161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r354, %r2164, %r2159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2166, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2168, %r2166, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r354, %r2173, %r2168;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2175, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2177, %r2175, %r2179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2180, %r354, %r2182, %r2177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2184, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2186, %r2184, %r2188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r354, %r2191, %r2186;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2193, %r357, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2196, %r354, %r2161, %r2193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2200, %r357, %r2173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2203, %r354, %r2170, %r2200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2207, %r357, %r2182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2210, %r354, %r2179, %r2207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2214, %r357, %r2191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2217, %r354, %r2188, %r2214;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2221, %r2222}, {%r394, %r400, %r397, %r403}, {%r2162, %r2196}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2231, %r2232}, {%r394, %r400, %r397, %r403}, {%r2171, %r2203}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2241, %r2242}, {%r394, %r400, %r397, %r403}, {%r2180, %r2210}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2251, %r2252}, {%r394, %r400, %r397, %r403}, {%r2189, %r2217}, {%r2555, %r2555};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2261, %r97, %r2221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r97, %r2222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2267, %r97, %r2231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2270, %r97, %r2232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r97, %r2241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2276, %r97, %r2242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2279, %r97, %r2251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r97, %r2252;
	// end inline asm
	// begin inline asm
	mov.b32 %r2285, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2286, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2287, %r2261, %r2285;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2290, %r2287, %r2286;
	// end inline asm
	// begin inline asm
	mov.b32 %r2293, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2294, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2295, %r2264, %r2293;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2298, %r2295, %r2294;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2303, %r2267, %r2301;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2306, %r2303, %r2302;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2311, %r2270, %r2309;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2314, %r2311, %r2310;
	// end inline asm
	// begin inline asm
	mov.b32 %r2317, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2318, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2319, %r2273, %r2317;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2322, %r2319, %r2318;
	// end inline asm
	// begin inline asm
	mov.b32 %r2325, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2326, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2327, %r2276, %r2325;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2330, %r2327, %r2326;
	// end inline asm
	// begin inline asm
	mov.b32 %r2333, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2335, %r2279, %r2333;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2338, %r2335, %r2334;
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2343, %r2282, %r2341;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2346, %r2343, %r2342;
	// end inline asm
	// begin inline asm
	mov.b32 %r2352, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2351, %r2352, %r2350;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2354, %r2290, %r2351;
	// end inline asm
	// begin inline asm
	mov.b32 %r2357, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2358, %r2352, %r2357;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2361, %r2298, %r2358;
	// end inline asm
	// begin inline asm
	mov.b32 %r2364, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2365, %r2352, %r2364;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2368, %r2306, %r2365;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2352, %r2371;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2314, %r2372;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2378, %r2354, %r2368, %r1483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2382, %r2361, %r2375, %r1483;
	// end inline asm
	shl.b32 	%r2389, %r2382, 4;
	// begin inline asm
	lop3.b32 %r2386, %r1489, %r2378, %r2389, 202;
	// end inline asm
	xor.b32  	%r2456, %r2386, -2004318072;
	// begin inline asm
	mov.b32 %r2393, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2391, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2392, %r2393, %r2391;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2395, %r2322, %r2392;
	// end inline asm
	// begin inline asm
	mov.b32 %r2398, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2399, %r2393, %r2398;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2402, %r2330, %r2399;
	// end inline asm
	// begin inline asm
	mov.b32 %r2405, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2406, %r2393, %r2405;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2409, %r2338, %r2406;
	// end inline asm
	// begin inline asm
	mov.b32 %r2412, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2413, %r2393, %r2412;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2416, %r2346, %r2413;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2419, %r2395, %r2409, %r1483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2423, %r2402, %r2416, %r1483;
	// end inline asm
	shl.b32 	%r2430, %r2423, 4;
	// begin inline asm
	lop3.b32 %r2427, %r1489, %r2419, %r2430, 202;
	// end inline asm
	xor.b32  	%r2457, %r2427, -2004318072;
	st.shared.u32 	[%rd150], %r2456;
	st.shared.u32 	[%rd151], %r2457;
	add.s32 	%r2577, %r2577, 32;
	add.s64 	%rd151, %rd151, 4228;
	add.s64 	%rd150, %rd150, 4228;
	add.s32 	%r2570, %r2570, 1;
	setp.eq.s32 	%p217, %r2577, 256;
	mov.u32 	%r2571, %r2563;
	mov.u32 	%r2572, %r2564;
	mov.u32 	%r2573, %r2565;
	mov.u32 	%r2574, %r2566;
	@%p217 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;
$L__BB0_85:                             // %guard_exit10604
                                        //   in Loop: Header=BB0_83 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2463, [%rd14];
	ld.shared.u32 	%r2464, [%rd15+128];
	ld.shared.u32 	%r2471, [%rd15+4];
	ld.shared.u32 	%r2472, [%rd15+132];
	or.b32  	%r130, %r74, 64;
	ld.shared.u32 	%r2479, [%rd16];
	ld.shared.u32 	%r2480, [%rd17+128];
	ld.shared.u32 	%r2487, [%rd17+4];
	ld.shared.u32 	%r2488, [%rd17+132];
	ld.shared.u32 	%r2495, [%rd18];
	ld.shared.u32 	%r2496, [%rd19+128];
	ld.shared.u32 	%r2503, [%rd19+4];
	ld.shared.u32 	%r2504, [%rd19+132];
	ld.shared.u32 	%r2511, [%rd20];
	ld.shared.u32 	%r2512, [%rd21+128];
	ld.shared.u32 	%r2519, [%rd21+4];
	ld.shared.u32 	%r2520, [%rd21+132];
	// begin inline asm
	prmt.b32 %r2458, %r2463, %r2464, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2462, %r2463, %r2464, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2466, %r2471, %r2472, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2470, %r2471, %r2472, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2474, %r2479, %r2480, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2478, %r2479, %r2480, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2482, %r2487, %r2488, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2486, %r2487, %r2488, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2490, %r2495, %r2496, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2494, %r2495, %r2496, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2498, %r2503, %r2504, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2502, %r2503, %r2504, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2506, %r2511, %r2512, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2510, %r2511, %r2512, %r549;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2514, %r2519, %r2520, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2518, %r2519, %r2520, %r549;
	// end inline asm
	selp.b32 	%r2522, %r2462, %r2458, %p204;
	shfl.sync.bfly.b32	%r135, %r2522, 8, 31, -1;
	selp.b32 	%r2523, %r2470, %r2466, %p204;
	shfl.sync.bfly.b32	%r136, %r2523, 8, 31, -1;
	selp.b32 	%r2524, %r2478, %r2474, %p204;
	shfl.sync.bfly.b32	%r2525, %r2524, 8, 31, -1;
	selp.b32 	%r2526, %r2486, %r2482, %p204;
	shfl.sync.bfly.b32	%r2527, %r2526, 8, 31, -1;
	selp.b32 	%r2528, %r2494, %r2490, %p204;
	shfl.sync.bfly.b32	%r2529, %r2528, 8, 31, -1;
	selp.b32 	%r2530, %r2502, %r2498, %p204;
	shfl.sync.bfly.b32	%r2531, %r2530, 8, 31, -1;
	selp.b32 	%r2532, %r2510, %r2506, %p204;
	shfl.sync.bfly.b32	%r2533, %r2532, 8, 31, -1;
	selp.b32 	%r2534, %r2518, %r2514, %p204;
	shfl.sync.bfly.b32	%r2535, %r2534, 8, 31, -1;
	setp.lt.u32 	%p219, %r74, 96;
	shl.b32 	%r2556, %r74, 13;
	@%p219 bra 	$L__BB0_87;
// %bb.86:                              // %pass9976
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r2536, %r136, %r2470, %p204;
	selp.b32 	%r2537, %r2466, %r136, %p204;
	selp.b32 	%r2538, %r135, %r2462, %p204;
	selp.b32 	%r2539, %r2458, %r135, %p204;
	or.b32  	%r2541, %r2556, %r66;
	or.b32  	%r2542, %r2541, %r59;
	cvt.s64.s32 	%rd98, %r2542;
	add.s64 	%rd99, %rd98, %rd5;
	shr.u64 	%rd100, %rd99, 36;
	add.s64 	%rd101, %rd99, %rd100;
	shr.s64 	%rd102, %rd101, 28;
	setp.lt.s64 	%p221, %rd99, 0;
	and.b64  	%rd103, %rd101, -268435456;
	setp.ne.s64 	%p222, %rd103, %rd99;
	and.pred  	%p223, %p221, %p222;
	selp.u64 	%rd104, 1, 0, %p223;
	sub.s64 	%rd105, %rd104, %rd102;
	shl.b64 	%rd106, %rd105, 28;
	add.s64 	%rd107, %rd106, %rd99;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd109, %rd3, %rd108;
	st.global.v4.u32 	[%rd109], {%r2539, %r2537, %r2538, %r2536};
$L__BB0_87:                             // %pass9998
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r141, %r2490, %r2529, %p204;
	selp.b32 	%r142, %r2529, %r2494, %p204;
	selp.b32 	%r143, %r2498, %r2531, %p204;
	selp.b32 	%r144, %r2531, %r2502, %p204;
	selp.b32 	%r145, %r2506, %r2533, %p204;
	selp.b32 	%r146, %r2533, %r2510, %p204;
	selp.b32 	%r147, %r2514, %r2535, %p204;
	selp.b32 	%r148, %r2535, %r2518, %p204;
	setp.lt.u32 	%p224, %r130, 96;
	@%p224 bra 	$L__BB0_89;
// %bb.88:                              // %pass10101
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r137, %r2474, %r2525, %p204;
	selp.b32 	%r138, %r2525, %r2478, %p204;
	selp.b32 	%r139, %r2482, %r2527, %p204;
	selp.b32 	%r140, %r2527, %r2486, %p204;
	shl.b32 	%r2543, %r130, 13;
	or.b32  	%r2544, %r2543, %r66;
	or.b32  	%r2545, %r2544, %r59;
	cvt.s64.s32 	%rd110, %r2545;
	add.s64 	%rd111, %rd110, %rd5;
	shr.u64 	%rd112, %rd111, 36;
	add.s64 	%rd113, %rd111, %rd112;
	shr.s64 	%rd114, %rd113, 28;
	setp.lt.s64 	%p225, %rd111, 0;
	and.b64  	%rd115, %rd113, -268435456;
	setp.ne.s64 	%p226, %rd115, %rd111;
	and.pred  	%p227, %p225, %p226;
	selp.u64 	%rd116, 1, 0, %p227;
	sub.s64 	%rd117, %rd116, %rd114;
	shl.b64 	%rd118, %rd117, 28;
	add.s64 	%rd119, %rd118, %rd111;
	shl.b64 	%rd120, %rd119, 2;
	add.s64 	%rd121, %rd3, %rd120;
	st.global.v4.u32 	[%rd121], {%r137, %r139, %r138, %r140};
	bra.uni 	$L__BB0_89;
$L__BB0_90:                             // %L23889
	st.global.u32 	[%rd4], %r2555;
	ret;
$L__BB0_7:                              // %L167
	mov.u32 	%r2554, 2;
	st.global.u32 	[%rd4], %r2554;
	mov.u64 	%rd148, exception2101;
	cvta.global.u64 	%rd149, %rd148;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd149;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r149;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_10:                             // %L275
	mov.u32 	%r2553, 3;
	st.global.u32 	[%rd4], %r2553;
	mov.u64 	%rd146, exception2101;
	cvta.global.u64 	%rd147, %rd146;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd147;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r149;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd35, exception12122;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r149;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
