// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2084[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<257>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2586>;
	.reg .f32 	%f<929>;
	.reg .b64 	%rd<158>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r158, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd38, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r159, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r159, 67839;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd55, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd39, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r160, %r1, 9;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r161, %r160, %r2;
	or.b32  	%r162, %r161, %r4;
	mul.wide.u32 	%rd61, %r162, 4;
	add.s64 	%rd4, %rd55, %rd61;
	mov.u32 	%r163, 1;
	st.global.u32 	[%rd4], %r163;
	ld.global.u32 	%r5, [%rd39];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd43, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd43];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd47, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd47];
	sub.s32 	%r164, %r6, %r5;
	and.b32  	%r165, %r164, 255;
	setp.ne.s32 	%p6, %r165, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd51, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd51];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 512;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	sub.s32 	%r166, %r8, %r7;
	add.s32 	%r167, %r166, 3;
	and.b32  	%r168, %r167, 7;
	setp.eq.s32 	%p12, %r168, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass161
	bfe.u32 	%r113, %r2, 1, 1;
	and.b32  	%r114, %r2, 1;
	bfe.u32 	%r115, %r2, 2, 1;
	shl.b32 	%r176, %r115, 1;
	shl.b32 	%r177, %r114, 2;
	shl.b32 	%r178, %r113, 3;
	or.b32  	%r179, %r177, %r178;
	or.b32  	%r180, %r176, %r179;
	shr.u32 	%r116, %r2, 4;
	or.b32  	%r117, %r116, %r180;
	or.b32  	%r118, %r117, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f160, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r117;
	sub.f32 	%f187, %f186, %f160;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f162, %f187, %f216;
	setp.ne.f32 	%p18, %f162, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L550
	sin.approx.f32 	%f217, %f162;
	div.approx.f32 	%f889, %f217, %f162;
$L__BB0_10:                             // %L553
	cvt.rn.f32.s32 	%f220, %r118;
	sub.f32 	%f221, %f220, %f160;
	div.approx.f32 	%f5, %f221, %f216;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L570
	sin.approx.f32 	%f251, %f5;
	div.approx.f32 	%f890, %f251, %f5;
$L__BB0_12:                             // %L573
	or.b32  	%r198, %r117, 32;
	or.b32  	%r10, %r117, 48;
	cvt.rn.f32.s32 	%f255, %r198;
	sub.f32 	%f256, %f255, %f160;
	div.approx.f32 	%f9, %f256, %f216;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L652
	sin.approx.f32 	%f286, %f9;
	div.approx.f32 	%f891, %f286, %f9;
$L__BB0_14:                             // %L655
	cvt.rn.f32.s32 	%f289, %r10;
	sub.f32 	%f290, %f289, %f160;
	div.approx.f32 	%f14, %f290, %f216;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L672
	sin.approx.f32 	%f320, %f14;
	div.approx.f32 	%f892, %f320, %f14;
$L__BB0_16:                             // %L675
	or.b32  	%r216, %r117, 64;
	or.b32  	%r12, %r117, 80;
	cvt.rn.f32.s32 	%f324, %r216;
	sub.f32 	%f325, %f324, %f160;
	div.approx.f32 	%f18, %f325, %f216;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L754
	sin.approx.f32 	%f355, %f18;
	div.approx.f32 	%f893, %f355, %f18;
$L__BB0_18:                             // %L757
	cvt.rn.f32.s32 	%f358, %r12;
	sub.f32 	%f359, %f358, %f160;
	div.approx.f32 	%f23, %f359, %f216;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L774
	sin.approx.f32 	%f389, %f23;
	div.approx.f32 	%f894, %f389, %f23;
$L__BB0_20:                             // %L777
	or.b32  	%r234, %r117, 96;
	or.b32  	%r14, %r117, 112;
	cvt.rn.f32.s32 	%f393, %r234;
	sub.f32 	%f394, %f393, %f160;
	div.approx.f32 	%f27, %f394, %f216;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L856
	sin.approx.f32 	%f424, %f27;
	div.approx.f32 	%f895, %f424, %f27;
$L__BB0_22:                             // %L859
	cvt.rn.f32.s32 	%f427, %r14;
	sub.f32 	%f428, %f427, %f160;
	div.approx.f32 	%f32, %f428, %f216;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L876
	sin.approx.f32 	%f458, %f32;
	div.approx.f32 	%f896, %f458, %f32;
$L__BB0_24:                             // %L879
	mul.lo.s32 	%r16, %r117, 31;
	cvt.rn.f32.s32 	%f461, %r16;
	div.approx.f32 	%f35, %f461, %f216;
	abs.f32 	%f899, %f35;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f899;
	and.b32  	%r252, %r18, 8388607;
	or.b32  	%r2555, %r252, 1065353216;
	mov.b32 	%f898, %r2555;
	add.s32 	%r253, %r18, -1073741824;
	and.b32  	%r2556, %r253, -8388608;
	setp.eq.s32 	%p68, %r2556, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r254, %r2556, 192937984;
	add.s32 	%r255, %r2555, %r254;
	mov.b32 	%f473, %r255;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2556, %r2556, %r254;
	mov.b32 	%r2555, %f898;
	setp.ne.s32 	%p69, %r2556, 0;
	setp.ne.s32 	%p70, %r2555, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f897, %f464;
	fma.rn.f32 	%f38, %f897, 0fC0000000, %f899;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f469, %f897, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f897, %f470, %f469, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f897, %f897, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f897, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f897, %f468, %f465, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r256, %f35;
	and.b32  	%r257, %r256, -2147483648;
	mov.b32 	%r258, %f899;
	or.b32  	%r259, %r257, %r258;
	mov.b32 	%f899, %r259;
$L__BB0_38:                             // %__nv_fmodf.exit
	add.s32 	%r268, %r16, 496;
	cvt.rn.f32.s32 	%f513, %r268;
	div.approx.f32 	%f54, %f513, %f216;
	abs.f32 	%f903, %f54;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f903;
	and.b32  	%r269, %r26, 8388607;
	or.b32  	%r2557, %r269, 1065353216;
	mov.b32 	%f902, %r2557;
	add.s32 	%r270, %r26, -1073741824;
	and.b32  	%r2558, %r270, -8388608;
	setp.eq.s32 	%p88, %r2558, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i623.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i623
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r271, %r2558, 192937984;
	add.s32 	%r272, %r2557, %r271;
	mov.b32 	%f525, %r272;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2558, %r2558, %r271;
	mov.b32 	%r2557, %f902;
	setp.ne.s32 	%p89, %r2558, 0;
	setp.ne.s32 	%p90, %r2557, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i625
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i602
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f901, %f516;
	fma.rn.f32 	%f57, %f901, 0fC0000000, %f903;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f521, %f901, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f522, %f521, 0fBF800000;
	selp.f32 	%f901, %f522, %f521, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f901, %f901, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i606
	add.f32 	%f517, %f901, 0f3F800000;
	fma.rn.f32 	%f519, %f184, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f519, 0f00000000;
	add.f32 	%f520, %f517, 0f3F800000;
	selp.f32 	%f901, %f520, %f517, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i609
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i628
	shr.u32 	%r112, %r2, 1;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r273, %f54;
	and.b32  	%r274, %r273, -2147483648;
	mov.b32 	%r275, %f903;
	or.b32  	%r276, %r274, %r275;
	mov.b32 	%f903, %r276;
$L__BB0_52:                             // %__nv_fmodf.exit629
	shr.u32 	%r35, %r2, 3;
	and.b32  	%r291, %r35, 2;
	or.b32  	%r36, %r115, %r291;
	and.b32  	%r292, %r112, 4;
	or.b32  	%r37, %r36, %r292;
	and.b32  	%r293, %r2, 3;
	mul.lo.s32 	%r294, %r293, %r37;
	shl.b32 	%r295, %r294, 1;
	neg.s32 	%r296, %r295;
	cvt.rn.f32.s32 	%f567, %r296;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f71, %f567, %f568;
	abs.f32 	%f907, %f71;
	setp.lt.f32 	%p101, %f907, 0f40000000;
	@%p101 bra 	$L__BB0_64;
// %bb.53:
	setp.gtu.f32 	%p102, %f907, 0f4B800000;
	@%p102 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_54;
$L__BB0_60:
	mov.b32 	%r39, %f907;
	and.b32  	%r297, %r39, 8388607;
	or.b32  	%r2559, %r297, 1065353216;
	mov.b32 	%f906, %r2559;
	add.s32 	%r298, %r39, -1073741824;
	and.b32  	%r2560, %r298, -8388608;
	setp.eq.s32 	%p108, %r2560, 0;
	@%p108 bra 	$L__BB0_63;
// %bb.61:                              // %__nv_fmaf_rn.exit4.i.i.i654.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
$L__BB0_62:                             // %__nv_fmaf_rn.exit4.i.i.i654
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r299, %r2560, 192937984;
	add.s32 	%r300, %r2559, %r299;
	mov.b32 	%f579, %r300;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2560, %r2560, %r299;
	mov.b32 	%r2559, %f906;
	setp.ne.s32 	%p109, %r2560, 0;
	setp.ne.s32 	%p110, %r2559, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_62;
$L__BB0_63:                             // %__internal_fmodf_slowpath_mod.exit.i.i656
	setp.gt.u32 	%p112, %r39, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	$L__BB0_64;
$L__BB0_54:                             // %__nv_fast_fdividef.exit.i.i.i633
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f570;
	fma.rn.f32 	%f74, %f905, 0fC0000000, %f907;
	mov.b32 	%r38, %f74;
	setp.lt.u32 	%p103, %r38, 1073741824;
	@%p103 bra 	$L__BB0_59;
// %bb.55:
	setp.lt.u32 	%p104, %r38, -2147483647;
	@%p104 bra 	$L__BB0_57;
// %bb.56:
	add.f32 	%f575, %f905, 0fBF800000;
	setp.lt.f32 	%p107, %f74, 0fC0000000;
	add.f32 	%f576, %f575, 0fBF800000;
	selp.f32 	%f905, %f576, %f575, %p107;
	bra.uni 	$L__BB0_59;
$L__BB0_57:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p105, %f74, 0f40800000;
	@%p105 bra 	$L__BB0_59;
// %bb.58:                              // %__nv_fmaf_rn.exit.i.i.i637
	add.f32 	%f571, %f905, 0f3F800000;
	fma.rn.f32 	%f573, %f184, 0fC0400000, %f74;
	setp.ge.f32 	%p106, %f573, 0f00000000;
	add.f32 	%f574, %f571, 0f3F800000;
	selp.f32 	%f905, %f574, %f571, %p106;
$L__BB0_59:                             // %__internal_fmodf_fastpath_quot.exit.i.i640
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
$L__BB0_64:                             // %__internal_fmodf_kernel.exit.i659
	shl.b32 	%r107, %r2, 1;
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p113, %f588, 0f7F800000;
	@%p113 bra 	$L__BB0_66;
// %bb.65:
	mov.b32 	%r301, %f71;
	and.b32  	%r302, %r301, -2147483648;
	mov.b32 	%r303, %f907;
	or.b32  	%r304, %r302, %r303;
	mov.b32 	%f907, %r304;
$L__BB0_66:                             // %__nv_fmodf.exit660
	and.b32  	%r313, %r107, 6;
	mov.u32 	%r314, -8;
	sub.s32 	%r315, %r314, %r313;
	mul.lo.s32 	%r316, %r37, %r315;
	cvt.rn.f32.s32 	%f619, %r316;
	div.approx.f32 	%f90, %f619, %f568;
	abs.f32 	%f911, %f90;
	setp.lt.f32 	%p121, %f911, 0f40000000;
	@%p121 bra 	$L__BB0_78;
// %bb.67:
	setp.gtu.f32 	%p122, %f911, 0f4B800000;
	@%p122 bra 	$L__BB0_74;
	bra.uni 	$L__BB0_68;
$L__BB0_74:
	mov.b32 	%r47, %f911;
	and.b32  	%r317, %r47, 8388607;
	or.b32  	%r2561, %r317, 1065353216;
	mov.b32 	%f910, %r2561;
	add.s32 	%r318, %r47, -1073741824;
	and.b32  	%r2562, %r318, -8388608;
	setp.eq.s32 	%p128, %r2562, 0;
	@%p128 bra 	$L__BB0_77;
// %bb.75:                              // %__nv_fmaf_rn.exit4.i.i.i685.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
$L__BB0_76:                             // %__nv_fmaf_rn.exit4.i.i.i685
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r319, %r2562, 192937984;
	add.s32 	%r320, %r2561, %r319;
	mov.b32 	%f631, %r320;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2562, %r2562, %r319;
	mov.b32 	%r2561, %f910;
	setp.ne.s32 	%p129, %r2562, 0;
	setp.ne.s32 	%p130, %r2561, 0;
	and.pred  	%p131, %p129, %p130;
	@%p131 bra 	$L__BB0_76;
$L__BB0_77:                             // %__internal_fmodf_slowpath_mod.exit.i.i687
	setp.gt.u32 	%p132, %r47, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p132;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	$L__BB0_78;
$L__BB0_68:                             // %__nv_fast_fdividef.exit.i.i.i664
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f622;
	fma.rn.f32 	%f93, %f909, 0fC0000000, %f911;
	mov.b32 	%r46, %f93;
	setp.lt.u32 	%p123, %r46, 1073741824;
	@%p123 bra 	$L__BB0_73;
// %bb.69:
	setp.lt.u32 	%p124, %r46, -2147483647;
	@%p124 bra 	$L__BB0_71;
// %bb.70:
	add.f32 	%f627, %f909, 0fBF800000;
	setp.lt.f32 	%p127, %f93, 0fC0000000;
	add.f32 	%f628, %f627, 0fBF800000;
	selp.f32 	%f909, %f628, %f627, %p127;
	bra.uni 	$L__BB0_73;
$L__BB0_71:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p125, %f93, 0f40800000;
	@%p125 bra 	$L__BB0_73;
// %bb.72:                              // %__nv_fmaf_rn.exit.i.i.i668
	add.f32 	%f623, %f909, 0f3F800000;
	fma.rn.f32 	%f625, %f184, 0fC0400000, %f93;
	setp.ge.f32 	%p126, %f625, 0f00000000;
	add.f32 	%f626, %f623, 0f3F800000;
	selp.f32 	%f909, %f626, %f623, %p126;
$L__BB0_73:                             // %__internal_fmodf_fastpath_quot.exit.i.i671
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
$L__BB0_78:                             // %__internal_fmodf_kernel.exit.i690
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p133, %f640, 0f7F800000;
	@%p133 bra 	$L__BB0_80;
// %bb.79:
	mov.b32 	%r321, %f90;
	and.b32  	%r322, %r321, -2147483648;
	mov.b32 	%r323, %f911;
	or.b32  	%r324, %r322, %r323;
	mov.b32 	%f911, %r324;
$L__BB0_80:                             // %__nv_fmodf.exit691
	shl.b32 	%r345, %r113, 1;
	neg.s32 	%r58, %r345;
	mul.lo.s32 	%r59, %r58, %r37;
	cvt.rn.f32.s32 	%f673, %r59;
	div.approx.f32 	%f107, %f673, %f216;
	abs.f32 	%f915, %f107;
	setp.lt.f32 	%p141, %f915, 0f40000000;
	@%p141 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p142, %f915, 0f4B800000;
	@%p142 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r61, %f915;
	and.b32  	%r346, %r61, 8388607;
	or.b32  	%r2563, %r346, 1065353216;
	mov.b32 	%f914, %r2563;
	add.s32 	%r347, %r61, -1073741824;
	and.b32  	%r2564, %r347, -8388608;
	setp.eq.s32 	%p148, %r2564, 0;
	@%p148 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i716.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i716
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r2564, 192937984;
	add.s32 	%r349, %r2563, %r348;
	mov.b32 	%f685, %r349;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2564, %r2564, %r348;
	mov.b32 	%r2563, %f914;
	setp.ne.s32 	%p149, %r2564, 0;
	setp.ne.s32 	%p150, %r2563, 0;
	and.pred  	%p151, %p149, %p150;
	@%p151 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i718
	setp.gt.u32 	%p152, %r61, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p152;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i695
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f676;
	fma.rn.f32 	%f110, %f913, 0fC0000000, %f915;
	mov.b32 	%r60, %f110;
	setp.lt.u32 	%p143, %r60, 1073741824;
	@%p143 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p144, %r60, -2147483647;
	@%p144 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f681, %f913, 0fBF800000;
	setp.lt.f32 	%p147, %f110, 0fC0000000;
	add.f32 	%f682, %f681, 0fBF800000;
	selp.f32 	%f913, %f682, %f681, %p147;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p145, %f110, 0f40800000;
	@%p145 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i699
	add.f32 	%f677, %f913, 0f3F800000;
	fma.rn.f32 	%f679, %f184, 0fC0400000, %f110;
	setp.ge.f32 	%p146, %f679, 0f00000000;
	add.f32 	%f680, %f677, 0f3F800000;
	selp.f32 	%f913, %f680, %f677, %p146;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i702
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i721
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p153, %f694, 0f7F800000;
	@%p153 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r350, %f107;
	and.b32  	%r351, %r350, -2147483648;
	mov.b32 	%r352, %f915;
	or.b32  	%r353, %r351, %r352;
	mov.b32 	%f915, %r353;
$L__BB0_94:                             // %__nv_fmodf.exit722
	shl.b32 	%r362, %r37, 2;
	sub.s32 	%r363, %r59, %r362;
	cvt.rn.f32.s32 	%f725, %r363;
	div.approx.f32 	%f126, %f725, %f216;
	abs.f32 	%f919, %f126;
	setp.lt.f32 	%p161, %f919, 0f40000000;
	@%p161 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p162, %f919, 0f4B800000;
	@%p162 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r69, %f919;
	and.b32  	%r364, %r69, 8388607;
	or.b32  	%r2565, %r364, 1065353216;
	mov.b32 	%f918, %r2565;
	add.s32 	%r365, %r69, -1073741824;
	and.b32  	%r2566, %r365, -8388608;
	setp.eq.s32 	%p168, %r2566, 0;
	@%p168 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i747.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i747
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r366, %r2566, 192937984;
	add.s32 	%r367, %r2565, %r366;
	mov.b32 	%f737, %r367;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2566, %r2566, %r366;
	mov.b32 	%r2565, %f918;
	setp.ne.s32 	%p169, %r2566, 0;
	setp.ne.s32 	%p170, %r2565, 0;
	and.pred  	%p171, %p169, %p170;
	@%p171 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i749
	setp.gt.u32 	%p172, %r69, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p172;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i726
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f728;
	fma.rn.f32 	%f129, %f917, 0fC0000000, %f919;
	mov.b32 	%r68, %f129;
	setp.lt.u32 	%p163, %r68, 1073741824;
	@%p163 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p164, %r68, -2147483647;
	@%p164 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f733, %f917, 0fBF800000;
	setp.lt.f32 	%p167, %f129, 0fC0000000;
	add.f32 	%f734, %f733, 0fBF800000;
	selp.f32 	%f917, %f734, %f733, %p167;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p165, %f129, 0f40800000;
	@%p165 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i730
	add.f32 	%f729, %f917, 0f3F800000;
	fma.rn.f32 	%f731, %f184, 0fC0400000, %f129;
	setp.ge.f32 	%p166, %f731, 0f00000000;
	add.f32 	%f732, %f729, 0f3F800000;
	selp.f32 	%f917, %f732, %f729, %p166;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i733
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i752
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p173, %f746, 0f7F800000;
	@%p173 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r368, %f126;
	and.b32  	%r369, %r368, -2147483648;
	mov.b32 	%r370, %f919;
	or.b32  	%r371, %r369, %r370;
	mov.b32 	%f919, %r371;
$L__BB0_108:                            // %__nv_fmodf.exit753
	mul.lo.s32 	%r79, %r58, %r36;
	cvt.rn.f32.s32 	%f779, %r79;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f143, %f779, %f780;
	abs.f32 	%f927, %f143;
	setp.lt.f32 	%p181, %f927, 0f40000000;
	@%p181 bra 	$L__BB0_139;
// %bb.109:
	setp.gtu.f32 	%p182, %f927, 0f4B800000;
	@%p182 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_110;
$L__BB0_135:
	mov.b32 	%r120, %f927;
	and.b32  	%r386, %r120, 8388607;
	or.b32  	%r2576, %r386, 1065353216;
	mov.b32 	%f926, %r2576;
	add.s32 	%r387, %r120, -1073741824;
	and.b32  	%r2577, %r387, -8388608;
	setp.eq.s32 	%p188, %r2577, 0;
	@%p188 bra 	$L__BB0_138;
// %bb.136:                             // %__nv_fmaf_rn.exit4.i.i.i809.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
$L__BB0_137:                            // %__nv_fmaf_rn.exit4.i.i.i809
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r388, %r2577, 192937984;
	add.s32 	%r389, %r2576, %r388;
	mov.b32 	%f791, %r389;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f926, %f791, %f797;
	sub.s32 	%r2577, %r2577, %r388;
	mov.b32 	%r2576, %f926;
	setp.ne.s32 	%p189, %r2577, 0;
	setp.ne.s32 	%p190, %r2576, 0;
	and.pred  	%p191, %p189, %p190;
	@%p191 bra 	$L__BB0_137;
$L__BB0_138:                            // %__internal_fmodf_slowpath_mod.exit.i.i811
	setp.gt.u32 	%p192, %r120, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p192;
	mul.f32 	%f799, %f926, 0f34000000;
	mul.f32 	%f927, %f798, %f799;
	bra.uni 	$L__BB0_139;
$L__BB0_110:                            // %__nv_fast_fdividef.exit.i.i.i788
	div.approx.f32 	%f782, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f782;
	fma.rn.f32 	%f164, %f925, 0fC0000000, %f927;
	mov.b32 	%r119, %f164;
	setp.lt.u32 	%p183, %r119, 1073741824;
	@%p183 bra 	$L__BB0_134;
// %bb.111:
	setp.lt.u32 	%p184, %r119, -2147483647;
	@%p184 bra 	$L__BB0_132;
// %bb.112:
	add.f32 	%f787, %f925, 0fBF800000;
	setp.lt.f32 	%p187, %f164, 0fC0000000;
	add.f32 	%f788, %f787, 0fBF800000;
	selp.f32 	%f925, %f788, %f787, %p187;
	bra.uni 	$L__BB0_134;
$L__BB0_132:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p185, %f164, 0f40800000;
	@%p185 bra 	$L__BB0_134;
// %bb.133:                             // %__nv_fmaf_rn.exit.i.i.i792
	add.f32 	%f783, %f925, 0f3F800000;
	fma.rn.f32 	%f785, %f184, 0fC0400000, %f164;
	setp.ge.f32 	%p186, %f785, 0f00000000;
	add.f32 	%f786, %f783, 0f3F800000;
	selp.f32 	%f925, %f786, %f783, %p186;
$L__BB0_134:                            // %__internal_fmodf_fastpath_quot.exit.i.i795
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
$L__BB0_139:                            // %__internal_fmodf_kernel.exit.i814
	abs.f32 	%f800, %f927;
	setp.gtu.f32 	%p193, %f800, 0f7F800000;
	@%p193 bra 	$L__BB0_141;
// %bb.140:
	mov.b32 	%r390, %f143;
	and.b32  	%r391, %r390, -2147483648;
	mov.b32 	%r392, %f927;
	or.b32  	%r393, %r391, %r392;
	mov.b32 	%f927, %r393;
$L__BB0_141:                            // %__nv_fmodf.exit815
	shl.b32 	%r402, %r36, 2;
	sub.s32 	%r403, %r79, %r402;
	cvt.rn.f32.s32 	%f833, %r403;
	div.approx.f32 	%f181, %f833, %f780;
	abs.f32 	%f923, %f181;
	setp.lt.f32 	%p202, %f923, 0f40000000;
	@%p202 bra 	$L__BB0_124;
// %bb.113:
	setp.gtu.f32 	%p203, %f923, 0f4B800000;
	@%p203 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_114;
$L__BB0_120:
	mov.b32 	%r81, %f923;
	and.b32  	%r404, %r81, 8388607;
	or.b32  	%r2567, %r404, 1065353216;
	mov.b32 	%f922, %r2567;
	add.s32 	%r405, %r81, -1073741824;
	and.b32  	%r2568, %r405, -8388608;
	setp.eq.s32 	%p209, %r2568, 0;
	@%p209 bra 	$L__BB0_123;
// %bb.121:                             // %__nv_fmaf_rn.exit4.i.i.i778.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
$L__BB0_122:                            // %__nv_fmaf_rn.exit4.i.i.i778
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r2568, 192937984;
	add.s32 	%r407, %r2567, %r406;
	mov.b32 	%f845, %r407;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f922, %f845, %f851;
	sub.s32 	%r2568, %r2568, %r406;
	mov.b32 	%r2567, %f922;
	setp.ne.s32 	%p210, %r2568, 0;
	setp.ne.s32 	%p211, %r2567, 0;
	and.pred  	%p212, %p210, %p211;
	@%p212 bra 	$L__BB0_122;
$L__BB0_123:                            // %__internal_fmodf_slowpath_mod.exit.i.i780
	setp.gt.u32 	%p213, %r81, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p213;
	mul.f32 	%f853, %f922, 0f34000000;
	mul.f32 	%f923, %f852, %f853;
	bra.uni 	$L__BB0_124;
$L__BB0_114:                            // %__nv_fast_fdividef.exit.i.i.i757
	div.approx.f32 	%f836, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f836;
	fma.rn.f32 	%f146, %f921, 0fC0000000, %f923;
	mov.b32 	%r80, %f146;
	setp.lt.u32 	%p204, %r80, 1073741824;
	@%p204 bra 	$L__BB0_119;
// %bb.115:
	setp.lt.u32 	%p205, %r80, -2147483647;
	@%p205 bra 	$L__BB0_117;
// %bb.116:
	add.f32 	%f841, %f921, 0fBF800000;
	setp.lt.f32 	%p208, %f146, 0fC0000000;
	add.f32 	%f842, %f841, 0fBF800000;
	selp.f32 	%f921, %f842, %f841, %p208;
	bra.uni 	$L__BB0_119;
$L__BB0_117:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p206, %f146, 0f40800000;
	@%p206 bra 	$L__BB0_119;
// %bb.118:                             // %__nv_fmaf_rn.exit.i.i.i761
	add.f32 	%f837, %f921, 0f3F800000;
	fma.rn.f32 	%f839, %f184, 0fC0400000, %f146;
	setp.ge.f32 	%p207, %f839, 0f00000000;
	add.f32 	%f840, %f837, 0f3F800000;
	selp.f32 	%f921, %f840, %f837, %p207;
$L__BB0_119:                            // %__internal_fmodf_fastpath_quot.exit.i.i764
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
$L__BB0_124:                            // %__internal_fmodf_kernel.exit.i783
	abs.f32 	%f854, %f923;
	setp.gtu.f32 	%p214, %f854, 0f7F800000;
	@%p214 bra 	$L__BB0_126;
// %bb.125:
	mov.b32 	%r408, %f181;
	and.b32  	%r409, %r408, -2147483648;
	mov.b32 	%r410, %f923;
	or.b32  	%r411, %r409, %r410;
	mov.b32 	%f923, %r411;
$L__BB0_126:                            // %__nv_fmodf.exit784
	setp.le.s32 	%p222, %r6, %r5;
	mov.u32 	%r2553, 0;
	@%p222 bra 	$L__BB0_144;
// %bb.127:                             // %L1596.lr.ph
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	div.approx.f32 	%f223, %f221, %f188;
	div.approx.f32 	%f258, %f256, %f188;
	div.approx.f32 	%f292, %f290, %f188;
	div.approx.f32 	%f327, %f325, %f188;
	div.approx.f32 	%f361, %f359, %f188;
	div.approx.f32 	%f396, %f394, %f188;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f190, %f189;
	abs.f32 	%f224, %f223;
	abs.f32 	%f259, %f258;
	abs.f32 	%f293, %f292;
	abs.f32 	%f328, %f327;
	abs.f32 	%f362, %f361;
	abs.f32 	%f397, %f396;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	selp.f32 	%f226, %f225, %f223, %p19;
	selp.f32 	%f261, %f260, %f258, %p25;
	selp.f32 	%f295, %f294, %f292, %p31;
	selp.f32 	%f330, %f329, %f327, %p37;
	selp.f32 	%f364, %f363, %f361, %p43;
	selp.f32 	%f399, %f398, %f396, %p49;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f589, %f907, %f907;
	add.f32 	%f641, %f911, %f911;
	add.f32 	%f193, %f192, %f192;
	add.f32 	%f227, %f226, %f226;
	add.f32 	%f262, %f261, %f261;
	add.f32 	%f296, %f295, %f295;
	add.f32 	%f331, %f330, %f330;
	add.f32 	%f365, %f364, %f364;
	add.f32 	%f400, %f399, %f399;
	add.f32 	%f434, %f433, %f433;
	add.f32 	%f483, %f899, %f899;
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r305, %f589;
	mov.b32 	%r337, %f641;
	add.f32 	%f695, %f915, %f915;
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r181, %f193;
	mov.b32 	%r188, %f227;
	mov.b32 	%r199, %f262;
	mov.b32 	%r206, %f296;
	mov.b32 	%r217, %f331;
	mov.b32 	%r224, %f365;
	mov.b32 	%r235, %f400;
	mov.b32 	%r242, %f434;
	mov.b32 	%r260, %f483;
	mov.b32 	%r283, %f535;
	and.b32  	%r306, %r305, -2147483648;
	and.b32  	%r338, %r337, -2147483648;
	mov.b32 	%r354, %f695;
	mov.b32 	%r378, %f747;
	add.f32 	%f801, %f927, %f927;
	and.b32  	%r182, %r181, -2147483648;
	and.b32  	%r189, %r188, -2147483648;
	and.b32  	%r200, %r199, -2147483648;
	and.b32  	%r207, %r206, -2147483648;
	and.b32  	%r218, %r217, -2147483648;
	and.b32  	%r225, %r224, -2147483648;
	and.b32  	%r236, %r235, -2147483648;
	and.b32  	%r243, %r242, -2147483648;
	and.b32  	%r261, %r260, -2147483648;
	and.b32  	%r284, %r283, -2147483648;
	or.b32  	%r307, %r306, 1056964608;
	or.b32  	%r339, %r338, 1056964608;
	and.b32  	%r355, %r354, -2147483648;
	and.b32  	%r379, %r378, -2147483648;
	mov.b32 	%r394, %f801;
	or.b32  	%r183, %r182, 1056964608;
	or.b32  	%r190, %r189, 1056964608;
	or.b32  	%r201, %r200, 1056964608;
	or.b32  	%r208, %r207, 1056964608;
	or.b32  	%r219, %r218, 1056964608;
	or.b32  	%r226, %r225, 1056964608;
	or.b32  	%r237, %r236, 1056964608;
	or.b32  	%r244, %r243, 1056964608;
	or.b32  	%r262, %r261, 1056964608;
	or.b32  	%r285, %r284, 1056964608;
	mov.b32 	%f590, %r307;
	mov.b32 	%f642, %r339;
	or.b32  	%r356, %r355, 1056964608;
	or.b32  	%r380, %r379, 1056964608;
	and.b32  	%r395, %r394, -2147483648;
	mov.b32 	%f194, %r183;
	mov.b32 	%f228, %r190;
	mov.b32 	%f263, %r201;
	mov.b32 	%f297, %r208;
	mov.b32 	%f332, %r219;
	mov.b32 	%f366, %r226;
	mov.b32 	%f401, %r237;
	mov.b32 	%f435, %r244;
	mov.b32 	%f484, %r262;
	mov.b32 	%f536, %r285;
	add.f32 	%f591, %f589, %f590;
	abs.f32 	%f593, %f589;
	add.f32 	%f643, %f641, %f642;
	abs.f32 	%f645, %f641;
	mov.b32 	%f696, %r356;
	mov.b32 	%f748, %r380;
	or.b32  	%r396, %r395, 1056964608;
	add.f32 	%f195, %f193, %f194;
	abs.f32 	%f197, %f193;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	add.f32 	%f264, %f262, %f263;
	abs.f32 	%f266, %f262;
	add.f32 	%f298, %f296, %f297;
	abs.f32 	%f300, %f296;
	add.f32 	%f333, %f331, %f332;
	abs.f32 	%f335, %f331;
	add.f32 	%f367, %f365, %f366;
	abs.f32 	%f369, %f365;
	add.f32 	%f402, %f400, %f401;
	abs.f32 	%f404, %f400;
	add.f32 	%f436, %f434, %f435;
	abs.f32 	%f438, %f434;
	add.f32 	%f485, %f483, %f484;
	abs.f32 	%f487, %f483;
	add.f32 	%f537, %f535, %f536;
	abs.f32 	%f539, %f535;
	cvt.rzi.f32.f32 	%f592, %f591;
	setp.gt.f32 	%p114, %f593, 0f4B000000;
	cvt.rzi.f32.f32 	%f644, %f643;
	setp.gt.f32 	%p134, %f645, 0f4B000000;
	add.f32 	%f697, %f695, %f696;
	abs.f32 	%f699, %f695;
	add.f32 	%f749, %f747, %f748;
	abs.f32 	%f751, %f747;
	mov.b32 	%f802, %r396;
	cvt.rzi.f32.f32 	%f196, %f195;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	cvt.rzi.f32.f32 	%f265, %f264;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	cvt.rzi.f32.f32 	%f299, %f298;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	cvt.rzi.f32.f32 	%f334, %f333;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	cvt.rzi.f32.f32 	%f368, %f367;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	cvt.rzi.f32.f32 	%f403, %f402;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	cvt.rzi.f32.f32 	%f437, %f436;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	cvt.rzi.f32.f32 	%f486, %f485;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	cvt.rzi.f32.f32 	%f538, %f537;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p114;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p115, %f593, 0f3F000000;
	selp.f32 	%f646, %f641, %f644, %p134;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p135, %f645, 0f3F000000;
	cvt.rzi.f32.f32 	%f698, %f697;
	setp.gt.f32 	%p154, %f699, 0f4B000000;
	cvt.rzi.f32.f32 	%f750, %f749;
	setp.gt.f32 	%p174, %f751, 0f4B000000;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p115;
	selp.f32 	%f648, %f647, %f646, %p135;
	selp.f32 	%f700, %f695, %f698, %p154;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p155, %f699, 0f3F000000;
	selp.f32 	%f752, %f747, %f750, %p174;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p175, %f751, 0f3F000000;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p195, %f805, 0f4B000000;
	selp.f32 	%f200, %f199, %f198, %p15;
	selp.f32 	%f234, %f233, %f232, %p21;
	selp.f32 	%f269, %f268, %f267, %p27;
	selp.f32 	%f303, %f302, %f301, %p33;
	selp.f32 	%f338, %f337, %f336, %p39;
	selp.f32 	%f372, %f371, %f370, %p45;
	selp.f32 	%f407, %f406, %f405, %p51;
	selp.f32 	%f441, %f440, %f439, %p57;
	selp.f32 	%f490, %f489, %f488, %p75;
	selp.f32 	%f542, %f541, %f540, %p95;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	selp.f32 	%f702, %f701, %f700, %p155;
	selp.f32 	%f754, %f753, %f752, %p175;
	selp.f32 	%f806, %f801, %f804, %p195;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p196, %f805, 0f3F000000;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f598, %f597, %f597;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	selp.f32 	%f808, %f807, %f806, %p196;
	mul.f32 	%f202, %f201, %f201;
	mul.f32 	%f236, %f235, %f235;
	mul.f32 	%f271, %f270, %f270;
	mul.f32 	%f305, %f304, %f304;
	mul.f32 	%f340, %f339, %f339;
	mul.f32 	%f374, %f373, %f373;
	mul.f32 	%f409, %f408, %f408;
	mul.f32 	%f443, %f442, %f442;
	mul.f32 	%f492, %f491, %f491;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f704, %f703, %f703;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f927;
	cvt.rzi.s32.f32 	%r184, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r191, %f234;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r202, %f269;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r209, %f303;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r220, %f338;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r227, %f372;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r238, %f407;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r245, %f441;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r308, %f596;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	cvt.rzi.s32.f32 	%r340, %f648;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f810, %f809, %f809;
	add.s32 	%r185, %r184, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r192, %r191, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	add.s32 	%r203, %r202, 1;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	add.s32 	%r210, %r209, 1;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	add.s32 	%r221, %r220, 1;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	add.s32 	%r228, %r227, 1;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	add.s32 	%r239, %r238, 1;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	add.s32 	%r246, %r245, 1;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	cvt.rzi.s32.f32 	%r263, %f490;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	cvt.rzi.s32.f32 	%r286, %f542;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	and.b32  	%r309, %r308, 1;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	and.b32  	%r341, %r340, 1;
	cvt.rzi.s32.f32 	%r357, %f702;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	cvt.rzi.s32.f32 	%r381, %f754;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r186, %r185, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r193, %r192, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r204, %r203, 1;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r211, %r210, 1;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	and.b32  	%r222, %r221, 1;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	and.b32  	%r229, %r228, 1;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	and.b32  	%r240, %r239, 1;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	and.b32  	%r247, %r246, 1;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	and.b32  	%r264, %r263, 1;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	and.b32  	%r287, %r286, 1;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	setp.eq.b32 	%p116, %r309, 1;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	setp.eq.b32 	%p136, %r341, 1;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	and.b32  	%r358, %r357, 1;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	and.b32  	%r382, %r381, 1;
	cvt.rzi.s32.f32 	%r397, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	and.b32  	%r169, %r107, 8;
	shl.b32 	%r108, %r2, 2;
	and.b32  	%r172, %r2, 18;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r186, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r193, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r204, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r211, 1;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	setp.eq.b32 	%p40, %r222, 1;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	setp.eq.b32 	%p46, %r229, 1;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	setp.eq.b32 	%p52, %r240, 1;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	setp.eq.b32 	%p58, %r247, 1;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	setp.eq.b32 	%p76, %r264, 1;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	setp.eq.b32 	%p96, %r287, 1;
	selp.f32 	%f608, %f606, %f607, %p116;
	and.b32  	%r310, %r308, 2;
	selp.f32 	%f660, %f658, %f659, %p136;
	and.b32  	%r342, %r340, 2;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	setp.eq.b32 	%p156, %r358, 1;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	setp.eq.b32 	%p176, %r382, 1;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r398, %r397, 1;
	and.b32  	%r170, %r108, 4;
	shl.b32 	%r171, %r1, 3;
	or.b32  	%r173, %r172, %r169;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r187, %r185, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r194, %r192, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r205, %r203, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r212, %r210, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r223, %r221, 2;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r230, %r228, 2;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r241, %r239, 2;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r248, %r246, 2;
	selp.f32 	%f502, %f500, %f501, %p76;
	and.b32  	%r265, %r263, 2;
	selp.f32 	%f554, %f552, %f553, %p96;
	and.b32  	%r288, %r286, 2;
	setp.eq.s32 	%p117, %r310, 0;
	neg.f32 	%f610, %f608;
	add.s32 	%r311, %r308, 1;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.s32 	%p137, %r342, 0;
	neg.f32 	%f662, %f660;
	add.s32 	%r343, %r340, 1;
	cvt.rzi.f32.f32 	%f667, %f911;
	selp.f32 	%f714, %f712, %f713, %p156;
	and.b32  	%r359, %r357, 2;
	selp.f32 	%f766, %f764, %f765, %p176;
	and.b32  	%r383, %r381, 2;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p197, %r398, 1;
	and.b32  	%r109, %r171, 2016;
	or.b32  	%r110, %r173, %r170;
	setp.eq.s32 	%p17, %r187, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r194, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r205, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r212, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r223, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r230, 0;
	sub.f32 	%f386, %f213, %f384;
	setp.eq.s32 	%p53, %r241, 0;
	sub.f32 	%f421, %f213, %f419;
	setp.eq.s32 	%p59, %r248, 0;
	sub.f32 	%f455, %f213, %f453;
	setp.eq.s32 	%p77, %r265, 0;
	neg.f32 	%f504, %f502;
	add.s32 	%r266, %r263, 1;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.s32 	%p97, %r288, 0;
	neg.f32 	%f556, %f554;
	add.s32 	%r289, %r286, 1;
	cvt.rzi.f32.f32 	%f561, %f903;
	selp.f32 	%f609, %f607, %f606, %p116;
	selp.f32 	%f611, %f608, %f610, %p117;
	and.b32  	%r312, %r311, 2;
	setp.eq.f32 	%p119, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f661, %f659, %f658, %p136;
	selp.f32 	%f663, %f660, %f662, %p137;
	and.b32  	%r344, %r343, 2;
	setp.eq.f32 	%p139, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	setp.eq.s32 	%p157, %r359, 0;
	neg.f32 	%f716, %f714;
	add.s32 	%r360, %r357, 1;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.s32 	%p177, %r383, 0;
	neg.f32 	%f768, %f766;
	add.s32 	%r384, %r381, 1;
	cvt.rzi.f32.f32 	%f773, %f919;
	selp.f32 	%f820, %f818, %f819, %p197;
	and.b32  	%r399, %r397, 2;
	or.b32  	%r174, %r110, %r109;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	selp.f32 	%f456, %f453, %f455, %p59;
	selp.f32 	%f503, %f501, %f500, %p76;
	selp.f32 	%f505, %f502, %f504, %p77;
	and.b32  	%r267, %r266, 2;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f555, %f553, %f552, %p96;
	selp.f32 	%f557, %f554, %f556, %p97;
	and.b32  	%r290, %r289, 2;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	setp.eq.s32 	%p118, %r312, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f88, %f616, %f611, %p119;
	abs.f32 	%f617, %f907;
	setp.eq.s32 	%p138, %r344, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f669, %f668, %f663, %p139;
	abs.f32 	%f670, %f911;
	selp.f32 	%f715, %f713, %f712, %p156;
	selp.f32 	%f717, %f714, %f716, %p157;
	and.b32  	%r361, %r360, 2;
	setp.eq.f32 	%p159, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f767, %f765, %f764, %p176;
	selp.f32 	%f769, %f766, %f768, %p177;
	and.b32  	%r385, %r384, 2;
	setp.eq.f32 	%p179, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	setp.eq.s32 	%p198, %r399, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r400, %r397, 1;
	cvt.rzi.f32.f32 	%f827, %f927;
	shr.u32 	%r175, %r174, 1;
	mul.f32 	%f161, %f215, %f215;
	mul.f32 	%f4, %f249, %f249;
	mul.f32 	%f8, %f284, %f284;
	mul.f32 	%f13, %f318, %f318;
	mul.f32 	%f17, %f353, %f353;
	mul.f32 	%f22, %f387, %f387;
	mul.f32 	%f26, %f422, %f422;
	mul.f32 	%f31, %f456, %f456;
	setp.eq.s32 	%p78, %r267, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f52, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.eq.s32 	%p98, %r290, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	selp.f32 	%f614, %f609, %f613, %p118;
	setp.gt.f32 	%p120, %f617, 0f4B800000;
	add.f32 	%f618, %f88, 0f3F800000;
	selp.f32 	%f666, %f661, %f665, %p138;
	setp.gt.f32 	%p140, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	setp.eq.s32 	%p158, %r361, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f124, %f722, %f717, %p159;
	abs.f32 	%f723, %f915;
	setp.eq.s32 	%p178, %r385, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f775, %f774, %f769, %p179;
	abs.f32 	%f776, %f919;
	selp.f32 	%f821, %f819, %f818, %p197;
	selp.f32 	%f823, %f820, %f822, %p198;
	and.b32  	%r401, %r400, 2;
	setp.eq.f32 	%p200, %f827, %f927;
	mul.f32 	%f828, %f927, 0f00000000;
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd62, %r175, 4;
	mul.f32 	%f219, %f161, 0f3C8A83B8;
	mul.f32 	%f253, %f4, 0f3C8A83B8;
	mul.f32 	%f288, %f8, 0f3C8A83B8;
	mul.f32 	%f322, %f13, 0f3C8A83B8;
	mul.f32 	%f357, %f17, 0f3C8A83B8;
	mul.f32 	%f391, %f22, 0f3C8A83B8;
	mul.f32 	%f426, %f26, 0f3C8A83B8;
	mul.f32 	%f459, %f31, 0f3C8A83B8;
	selp.f32 	%f508, %f503, %f507, %p78;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f52, 0f3F800000;
	selp.f32 	%f560, %f555, %f559, %p98;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f89, %f618, %f614, %p120;
	selp.f32 	%f672, %f671, %f666, %p140;
	selp.f32 	%f720, %f715, %f719, %p158;
	setp.gt.f32 	%p160, %f723, 0f4B800000;
	add.f32 	%f724, %f124, 0f3F800000;
	selp.f32 	%f772, %f767, %f771, %p178;
	setp.gt.f32 	%p180, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	and.b32  	%r78, %r35, 1;
	setp.eq.s32 	%p199, %r401, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p200;
	abs.f32 	%f830, %f927;
	add.s64 	%rd63, %rd1, %rd62;
	mul.f32 	%f3, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f12, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f21, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f30, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	selp.f32 	%f53, %f512, %f508, %p80;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r327, %f672;
	mov.b32 	%r326, %f89;
	mov.b32 	%r333, %f669;
	mov.b32 	%r332, %f88;
	selp.f32 	%f125, %f724, %f720, %p160;
	selp.f32 	%f778, %f777, %f772, %p180;
	setp.eq.s32 	%p194, %r78, %r114;
	selp.f32 	%f826, %f821, %f825, %p199;
	setp.gt.f32 	%p201, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.global.u32 	%r111, [%rd63];
	mov.b32 	%r197, %f254;
	mov.b32 	%r196, %f3;
	mov.b32 	%r215, %f323;
	mov.b32 	%r214, %f12;
	mov.b32 	%r233, %f392;
	mov.b32 	%r232, %f21;
	mov.b32 	%r251, %f460;
	mov.b32 	%r250, %f30;
	mov.b32 	%r279, %f566;
	mov.b32 	%r278, %f53;
	mov.b32 	%r282, %f563;
	mov.b32 	%r281, %f52;
	xor.b32  	%r330, %r333, -2147483648;
	xor.b32  	%r329, %r332, -2147483648;
	mov.b32 	%r374, %f778;
	mov.b32 	%r373, %f125;
	mov.b32 	%r377, %f775;
	mov.b32 	%r376, %f124;
	selp.f32 	%f832, %f831, %f826, %p201;
	selp.f32 	%f178, 0f3F800000, 0f00000000, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r195, %r197, %r196;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r213, %r215, %r214;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r231, %r233, %r232;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r249, %r251, %r250;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r277, %r279, %r278;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r280, %r282, %r281;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r325, %r327, %r326;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r330, %r329;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r333, %r332;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r334, %r327, %r326;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r372, %r374, %r373;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r375, %r377, %r376;
	// end inline asm
	mul.f32 	%f179, %f832, %f178;
	mul.f32 	%f180, %f829, %f178;
	add.f32 	%f855, %f923, %f923;
	mov.b32 	%r424, %f855;
	and.b32  	%r425, %r424, -2147483648;
	or.b32  	%r426, %r425, 1056964608;
	mov.b32 	%f856, %r426;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p215, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p215;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p216, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p216;
	cvt.rzi.s32.f32 	%r427, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f923;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r428, %r427, 1;
	setp.eq.b32 	%p217, %r428, 1;
	selp.f32 	%f874, %f872, %f873, %p217;
	selp.f32 	%f875, %f873, %f872, %p217;
	and.b32  	%r429, %r427, 2;
	setp.eq.s32 	%p218, %r429, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p218;
	add.s32 	%r430, %r427, 1;
	and.b32  	%r431, %r430, 2;
	setp.eq.s32 	%p219, %r431, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p219;
	cvt.rzi.f32.f32 	%f881, %f923;
	setp.eq.f32 	%p220, %f881, %f923;
	mul.f32 	%f882, %f923, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p220;
	abs.f32 	%f884, %f923;
	setp.gt.f32 	%p221, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p221;
	mul.f32 	%f887, %f886, %f178;
	mul.f32 	%f888, %f883, %f178;
	mov.b32 	%r414, %f887;
	mov.b32 	%r413, %f179;
	// begin inline asm
	cvt.rn.f16x2.f32 %r412, %r414, %r413;
	// end inline asm
	mov.b32 	%r420, %f888;
	xor.b32  	%r417, %r420, -2147483648;
	mov.b32 	%r419, %f180;
	xor.b32  	%r416, %r419, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r415, %r417, %r416;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r418, %r420, %r419;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r421, %r414, %r413;
	// end inline asm
	shl.b32 	%r433, %r5, 13;
	and.b32  	%r434, %r108, 28;
	shl.b32 	%r435, %r1, 5;
	and.b32  	%r436, %r435, 32;
	or.b32  	%r92, %r434, %r436;
	and.b32  	%r437, %r3, 7;
	and.b32  	%r438, %r107, 16;
	or.b32  	%r93, %r437, %r438;
	shl.b32 	%r439, %r3, 2;
	and.b32  	%r94, %r439, 32;
	and.b32  	%r95, %r112, 8;
	shl.b32 	%r440, %r1, 10;
	and.b32  	%r441, %r440, 4096;
	and.b32  	%r96, %r435, 64;
	or.b32  	%r442, %r96, %r441;
	or.b32  	%r443, %r442, %r92;
	or.b32  	%r97, %r443, %r433;
	and.b32  	%r98, %r2, 8;
	shl.b32 	%r444, %r2, 4;
	or.b32  	%r445, %r98, %r444;
	shr.u32 	%r446, %r445, 2;
	and.b32  	%r447, %r446, 30;
	and.b32  	%r448, %r4, 32;
	shl.b32 	%r449, %r3, 1;
	shl.b32 	%r450, %r2, 3;
	and.b32  	%r451, %r450, 64;
	or.b32  	%r452, %r451, %r449;
	shr.u32 	%r453, %r452, 2;
	or.b32  	%r454, %r453, %r448;
	or.b32  	%r455, %r454, 8;
	shr.u32 	%r456, %r110, 1;
	mul.lo.s32 	%r457, %r456, 65;
	add.s32 	%r458, %r457, %r454;
	add.s32 	%r459, %r457, %r455;
	shl.b32 	%r460, %r7, 18;
	add.s32 	%r461, %r460, -786432;
	or.b32  	%r462, %r109, %r35;
	and.b32  	%r463, %r439, 28;
	or.b32  	%r464, %r462, %r463;
	shl.b32 	%r99, %r464, 7;
	cvt.s64.s32 	%rd5, %r461;
	setp.gt.u32 	%p223, %r2, 15;
	shr.u32 	%r465, %r3, 3;
	or.b32  	%r466, %r465, 2;
	or.b32  	%r467, %r465, 4;
	or.b32  	%r468, %r465, 6;
	bfe.s32 	%r469, %r3, 1, 1;
	and.b32  	%r470, %r3, 2;
	setp.eq.s32 	%p224, %r470, 0;
	and.b32  	%r471, %r469, 260;
	bfe.s32 	%r472, %r3, 2, 1;
	and.b32  	%r473, %r3, 4;
	setp.eq.s32 	%p225, %r473, 0;
	and.b32  	%r474, %r472, 130;
	and.b32  	%r475, %r3, 1;
	neg.s32 	%r476, %r475;
	setp.eq.b32 	%p226, %r475, 1;
	and.b32  	%r477, %r476, 520;
	mul.lo.s32 	%r478, %r116, 65;
	mul.lo.s32 	%r479, %r465, 1057;
	add.s32 	%r480, %r477, %r447;
	add.s32 	%r481, %r480, %r471;
	add.s32 	%r482, %r481, %r474;
	add.s32 	%r483, %r482, %r478;
	add.s32 	%r484, %r483, %r479;
	mul.wide.u32 	%rd64, %r484, 4;
	mov.u64 	%rd65, shmem;
	add.s64 	%rd6, %rd65, %rd64;
	cvt.u64.u32 	%rd66, %r479;
	cvt.u64.u32 	%rd67, %r478;
	selp.b64 	%rd68, 0, 130, %p225;
	selp.b64 	%rd69, 0, 260, %p224;
	selp.b64 	%rd70, 520, 0, %p226;
	cvt.u64.u32 	%rd71, %r447;
	add.s64 	%rd72, %rd71, %rd70;
	add.s64 	%rd73, %rd72, %rd69;
	add.s64 	%rd74, %rd73, %rd68;
	add.s64 	%rd75, %rd74, %rd67;
	add.s64 	%rd76, %rd75, %rd66;
	shl.b64 	%rd77, %rd76, 2;
	add.s64 	%rd7, %rd65, %rd77;
	mul.lo.s32 	%r485, %r466, 1057;
	add.s32 	%r486, %r483, %r485;
	mul.wide.u32 	%rd78, %r486, 4;
	add.s64 	%rd8, %rd65, %rd78;
	cvt.u64.u32 	%rd79, %r485;
	add.s64 	%rd80, %rd75, %rd79;
	shl.b64 	%rd81, %rd80, 2;
	add.s64 	%rd9, %rd65, %rd81;
	mul.lo.s32 	%r487, %r467, 1057;
	add.s32 	%r488, %r483, %r487;
	mul.wide.u32 	%rd82, %r488, 4;
	add.s64 	%rd10, %rd65, %rd82;
	cvt.u64.u32 	%rd83, %r487;
	add.s64 	%rd84, %rd75, %rd83;
	shl.b64 	%rd85, %rd84, 2;
	add.s64 	%rd11, %rd65, %rd85;
	mul.lo.s32 	%r489, %r468, 1057;
	add.s32 	%r490, %r483, %r489;
	mul.wide.u32 	%rd86, %r490, 4;
	add.s64 	%rd12, %rd65, %rd86;
	cvt.u64.u32 	%rd87, %r489;
	add.s64 	%rd88, %rd75, %rd87;
	shl.b64 	%rd89, %rd88, 2;
	add.s64 	%rd13, %rd65, %rd89;
	bfe.s32 	%r491, %r2, 2, 1;
	and.b32  	%r492, %r491, 260;
	setp.eq.s32 	%p227, %r114, 0;
	selp.b32 	%r493, 0, 130, %p227;
	selp.b32 	%r494, 520, 0, %p223;
	bfe.s32 	%r495, %r2, 1, 1;
	and.b32  	%r496, %r495, 65;
	or.b32  	%r497, %r494, %r454;
	and.b32  	%r498, %r449, 14;
	or.b32  	%r499, %r498, %r116;
	mul.lo.s32 	%r500, %r499, 65;
	add.s32 	%r501, %r447, %r500;
	add.s32 	%r502, %r501, %r479;
	mul.wide.u32 	%rd90, %r502, 4;
	add.s64 	%rd14, %rd65, %rd90;
	cvt.u64.u32 	%rd91, %r500;
	add.s64 	%rd92, %rd71, %rd91;
	add.s64 	%rd93, %rd92, %rd66;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd15, %rd65, %rd94;
	add.s32 	%r503, %r501, %r485;
	mul.wide.u32 	%rd95, %r503, 4;
	add.s64 	%rd16, %rd65, %rd95;
	add.s64 	%rd96, %rd92, %rd79;
	shl.b64 	%rd97, %rd96, 2;
	add.s64 	%rd17, %rd65, %rd97;
	add.s32 	%r504, %r501, %r487;
	mul.wide.u32 	%rd98, %r504, 4;
	add.s64 	%rd18, %rd65, %rd98;
	add.s64 	%rd99, %rd92, %rd83;
	shl.b64 	%rd100, %rd99, 2;
	add.s64 	%rd19, %rd65, %rd100;
	add.s32 	%r505, %r501, %r489;
	mul.wide.u32 	%rd101, %r505, 4;
	add.s64 	%rd20, %rd65, %rd101;
	add.s64 	%rd102, %rd92, %rd87;
	shl.b64 	%rd103, %rd102, 2;
	add.s64 	%rd21, %rd65, %rd103;
	mul.wide.u32 	%rd104, %r459, 4;
	add.s64 	%rd22, %rd65, %rd104;
	mul.wide.u32 	%rd105, %r458, 4;
	add.s64 	%rd23, %rd65, %rd105;
	or.b32  	%r506, %r492, %r493;
	or.b32  	%r507, %r506, %r496;
	or.b32  	%r508, %r507, %r494;
	add.s32 	%r509, %r508, %r455;
	mul.wide.u32 	%rd106, %r509, 4;
	add.s64 	%rd24, %rd65, %rd106;
	add.s32 	%r510, %r507, %r497;
	mul.wide.u32 	%rd107, %r510, 4;
	add.s64 	%rd25, %rd65, %rd107;
	setp.eq.s32 	%p228, %r98, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	setp.gt.u32 	%p242, %r3, 7;
	mov.u32 	%r2569, %r2553;
	mov.u32 	%r2570, %r2553;
	mov.u32 	%r2571, %r2553;
	mov.u32 	%r2572, %r2553;
	mov.u32 	%r2579, %r2553;
	mov.u32 	%r2580, %r2553;
	mov.u32 	%r106, %r2553;
	bra.uni 	$L__BB0_128;
$L__BB0_142:                            // %pass10042
                                        //   in Loop: Header=BB0_128 Depth=1
	selp.b32 	%r2537, %r148, %r2487, %p228;
	selp.b32 	%r2538, %r2483, %r148, %p228;
	selp.b32 	%r2539, %r147, %r2479, %p228;
	selp.b32 	%r2540, %r2475, %r147, %p228;
	or.b32  	%r2542, %r2554, %r92;
	or.b32  	%r2543, %r2542, %r96;
	or.b32  	%r2585, %r2543, %r99;
	or.b32  	%r2544, %r2585, 524288;
	cvt.s64.s32 	%rd116, %r2544;
	add.s64 	%rd117, %rd116, %rd5;
	shr.u64 	%rd118, %rd117, 38;
	add.s64 	%rd119, %rd117, %rd118;
	shr.s64 	%rd120, %rd119, 26;
	setp.lt.s64 	%p245, %rd117, 0;
	and.b64  	%rd121, %rd119, -67108864;
	setp.ne.s64 	%p246, %rd121, %rd117;
	and.pred  	%p247, %p245, %p246;
	selp.u64 	%rd122, 1, 0, %p247;
	sub.s64 	%rd123, %rd122, %rd120;
	shl.b64 	%rd124, %rd123, 26;
	add.s64 	%rd125, %rd124, %rd117;
	shl.b64 	%rd126, %rd125, 2;
	add.s64 	%rd127, %rd3, %rd126;
	st.global.v4.u32 	[%rd127], {%r2540, %r2538, %r2539, %r2537};
$L__BB0_143:                            // %pass10153
                                        //   in Loop: Header=BB0_128 Depth=1
	or.b32  	%r2548, %r2585, 1048576;
	cvt.s64.s32 	%rd128, %r2548;
	add.s64 	%rd129, %rd128, %rd5;
	shr.u64 	%rd130, %rd129, 38;
	add.s64 	%rd131, %rd129, %rd130;
	shr.s64 	%rd132, %rd131, 26;
	setp.lt.s64 	%p248, %rd129, 0;
	and.b64  	%rd133, %rd131, -67108864;
	setp.ne.s64 	%p249, %rd133, %rd129;
	and.pred  	%p250, %p248, %p249;
	selp.u64 	%rd134, 1, 0, %p250;
	sub.s64 	%rd135, %rd134, %rd132;
	shl.b64 	%rd136, %rd135, 26;
	add.s64 	%rd137, %rd136, %rd129;
	shl.b64 	%rd138, %rd137, 2;
	add.s64 	%rd139, %rd3, %rd138;
	st.global.v4.u32 	[%rd139], {%r149, %r151, %r150, %r152};
	or.b32  	%r2549, %r2585, 1572864;
	cvt.s64.s32 	%rd140, %r2549;
	add.s64 	%rd141, %rd140, %rd5;
	shr.u64 	%rd142, %rd141, 38;
	add.s64 	%rd143, %rd141, %rd142;
	shr.s64 	%rd144, %rd143, 26;
	setp.lt.s64 	%p251, %rd141, 0;
	and.b64  	%rd145, %rd143, -67108864;
	setp.ne.s64 	%p252, %rd145, %rd141;
	and.pred  	%p253, %p251, %p252;
	selp.u64 	%rd146, 1, 0, %p253;
	sub.s64 	%rd147, %rd146, %rd144;
	shl.b64 	%rd148, %rd147, 26;
	add.s64 	%rd149, %rd148, %rd141;
	shl.b64 	%rd150, %rd149, 2;
	add.s64 	%rd151, %rd3, %rd150;
	st.global.v4.u32 	[%rd151], {%r153, %r155, %r154, %r156};
	setp.ne.s32 	%p254, %r106, 7936;
	add.s32 	%r106, %r106, 256;
	add.s32 	%r2550, %r106, %r5;
	setp.gt.s32 	%p255, %r6, %r2550;
	and.pred  	%p256, %p254, %p255;
	@%p256 bra 	$L__BB0_128;
	bra.uni 	$L__BB0_144;
$L__BB0_128:                            // %L1596
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_129 Depth 2
	or.b32  	%r576, %r106, %r93;
	or.b32  	%r577, %r576, %r94;
	or.b32  	%r578, %r577, %r95;
	shl.b32 	%r579, %r578, 13;
	add.s32 	%r580, %r97, %r579;
	shr.s32 	%r581, %r580, 31;
	shr.u32 	%r582, %r581, 6;
	add.s32 	%r583, %r580, %r582;
	shr.s32 	%r584, %r583, 26;
	setp.lt.s32 	%p229, %r580, 0;
	and.b32  	%r585, %r583, -67108864;
	setp.ne.s32 	%p230, %r585, %r580;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r586, 1, 0, %p231;
	sub.s32 	%r587, %r586, %r584;
	shl.b32 	%r588, %r587, 26;
	or.b32  	%r589, %r580, 1;
	add.s32 	%r590, %r589, %r588;
	mul.wide.s32 	%rd108, %r590, 4;
	add.s64 	%rd109, %rd2, %rd108;
	ld.global.v4.u32 	{%r591, %r592, %r593, %r594}, [%rd109+-4];
	or.b32  	%r595, %r579, 524288;
	add.s32 	%r596, %r97, %r595;
	shr.s32 	%r597, %r596, 31;
	shr.u32 	%r598, %r597, 6;
	add.s32 	%r599, %r596, %r598;
	shr.s32 	%r600, %r599, 26;
	setp.lt.s32 	%p232, %r596, 0;
	and.b32  	%r601, %r599, -67108864;
	setp.ne.s32 	%p233, %r601, %r596;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r602, 1, 0, %p234;
	sub.s32 	%r603, %r602, %r600;
	shl.b32 	%r604, %r603, 26;
	or.b32  	%r605, %r596, 1;
	add.s32 	%r606, %r605, %r604;
	mul.wide.s32 	%rd110, %r606, 4;
	add.s64 	%rd111, %rd2, %rd110;
	ld.global.v4.u32 	{%r607, %r608, %r609, %r610}, [%rd111+-4];
	or.b32  	%r611, %r579, 1048576;
	add.s32 	%r612, %r97, %r611;
	shr.s32 	%r613, %r612, 31;
	shr.u32 	%r614, %r613, 6;
	add.s32 	%r615, %r612, %r614;
	shr.s32 	%r616, %r615, 26;
	setp.lt.s32 	%p235, %r612, 0;
	and.b32  	%r617, %r615, -67108864;
	setp.ne.s32 	%p236, %r617, %r612;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r618, 1, 0, %p237;
	sub.s32 	%r619, %r618, %r616;
	shl.b32 	%r620, %r619, 26;
	or.b32  	%r621, %r612, 1;
	add.s32 	%r622, %r621, %r620;
	mul.wide.s32 	%rd112, %r622, 4;
	add.s64 	%rd113, %rd2, %rd112;
	ld.global.v4.u32 	{%r623, %r624, %r625, %r626}, [%rd113+-4];
	or.b32  	%r627, %r579, 1572864;
	add.s32 	%r628, %r97, %r627;
	shr.s32 	%r629, %r628, 31;
	shr.u32 	%r630, %r629, 6;
	add.s32 	%r631, %r628, %r630;
	shr.s32 	%r632, %r631, 26;
	setp.lt.s32 	%p238, %r628, 0;
	and.b32  	%r633, %r631, -67108864;
	setp.ne.s32 	%p239, %r633, %r628;
	and.pred  	%p240, %p238, %p239;
	selp.u32 	%r634, 1, 0, %p240;
	sub.s32 	%r635, %r634, %r632;
	shl.b32 	%r636, %r635, 26;
	or.b32  	%r637, %r628, 1;
	add.s32 	%r638, %r637, %r636;
	mul.wide.s32 	%rd114, %r638, 4;
	add.s64 	%rd115, %rd2, %rd114;
	ld.global.v4.u32 	{%r639, %r640, %r641, %r642}, [%rd115+-4];
	selp.b32 	%r643, %r593, %r591, %p228;
	shfl.sync.bfly.b32	%r644, %r643, 8, 31, -1;
	selp.b32 	%r512, %r591, %r644, %p228;
	selp.b32 	%r513, %r644, %r593, %p228;
	selp.b32 	%r645, %r594, %r592, %p228;
	shfl.sync.bfly.b32	%r646, %r645, 8, 31, -1;
	selp.b32 	%r520, %r592, %r646, %p228;
	selp.b32 	%r521, %r646, %r594, %p228;
	selp.b32 	%r647, %r609, %r607, %p228;
	shfl.sync.bfly.b32	%r648, %r647, 8, 31, -1;
	selp.b32 	%r528, %r607, %r648, %p228;
	selp.b32 	%r529, %r648, %r609, %p228;
	selp.b32 	%r649, %r610, %r608, %p228;
	shfl.sync.bfly.b32	%r650, %r649, 8, 31, -1;
	selp.b32 	%r536, %r608, %r650, %p228;
	selp.b32 	%r537, %r650, %r610, %p228;
	selp.b32 	%r651, %r625, %r623, %p228;
	shfl.sync.bfly.b32	%r652, %r651, 8, 31, -1;
	selp.b32 	%r544, %r623, %r652, %p228;
	selp.b32 	%r545, %r652, %r625, %p228;
	selp.b32 	%r653, %r626, %r624, %p228;
	shfl.sync.bfly.b32	%r654, %r653, 8, 31, -1;
	selp.b32 	%r552, %r624, %r654, %p228;
	selp.b32 	%r553, %r654, %r626, %p228;
	selp.b32 	%r655, %r641, %r639, %p228;
	shfl.sync.bfly.b32	%r656, %r655, 8, 31, -1;
	selp.b32 	%r560, %r639, %r656, %p228;
	selp.b32 	%r561, %r656, %r641, %p228;
	selp.b32 	%r657, %r642, %r640, %p228;
	shfl.sync.bfly.b32	%r658, %r657, 8, 31, -1;
	selp.b32 	%r568, %r640, %r658, %p228;
	selp.b32 	%r569, %r658, %r642, %p228;
	mov.u32 	%r570, 21520;
	// begin inline asm
	prmt.b32 %r511, %r512, %r513, %r570;
	// end inline asm
	mov.u32 	%r574, 30258;
	// begin inline asm
	prmt.b32 %r515, %r512, %r513, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r520, %r521, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r520, %r521, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r528, %r529, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r528, %r529, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r536, %r537, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r536, %r537, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r544, %r545, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r544, %r545, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r552, %r553, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r552, %r553, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r560, %r561, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r560, %r561, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r567, %r568, %r569, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r568, %r569, %r574;
	// end inline asm
	st.shared.u32 	[%rd6], %r511;
	st.shared.u32 	[%rd7+128], %r515;
	st.shared.u32 	[%rd7+4], %r519;
	st.shared.u32 	[%rd7+132], %r523;
	st.shared.u32 	[%rd8], %r527;
	st.shared.u32 	[%rd9+128], %r531;
	st.shared.u32 	[%rd9+4], %r535;
	st.shared.u32 	[%rd9+132], %r539;
	st.shared.u32 	[%rd10], %r543;
	st.shared.u32 	[%rd11+128], %r547;
	st.shared.u32 	[%rd11+4], %r551;
	st.shared.u32 	[%rd11+132], %r555;
	st.shared.u32 	[%rd12], %r559;
	st.shared.u32 	[%rd13+128], %r563;
	st.shared.u32 	[%rd13+4], %r567;
	st.shared.u32 	[%rd13+132], %r571;
	bar.sync 	0;
	mov.u32 	%r2578, 256;
	mov.u64 	%rd154, %rd25;
	mov.u64 	%rd155, %rd24;
	mov.u64 	%rd156, %rd23;
	mov.u64 	%rd157, %rd22;
	mov.u32 	%r2581, %r2572;
	mov.u32 	%r2582, %r2571;
	mov.u32 	%r2583, %r2570;
	mov.u32 	%r2584, %r2569;
$L__BB0_129:                            // %pass5735
                                        //   Parent Loop BB0_128 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2570, %r2580;
	mov.u32 	%r2569, %r2579;
	ld.shared.u32 	%r2571, [%rd154];
	ld.shared.u32 	%r2572, [%rd155];
	// begin inline asm
	mov.b32 %r664, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r675, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r663, %r2571, -2004318072;
	mov.u32 	%r662, 983055;
	// begin inline asm
	lop3.b32 %r661, %r662, %r663, %r664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r665, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r666, %r664, %r665;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r669, %r661, %r666;
	// end inline asm
	mov.u32 	%r673, 15728880;
	// begin inline asm
	lop3.b32 %r672, %r673, %r663, %r675, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r676, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r677, %r675, %r676;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r680, %r672, %r677;
	// end inline asm
	shr.u32 	%r685, %r663, 8;
	// begin inline asm
	lop3.b32 %r683, %r662, %r685, %r664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r687, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r688, %r664, %r687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r691, %r683, %r688;
	// end inline asm
	// begin inline asm
	lop3.b32 %r694, %r673, %r685, %r675, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r698, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r699, %r675, %r698;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r702, %r694, %r699;
	// end inline asm
	// begin inline asm
	mov.b32 %r710, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r721, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r709, %r2572, -2004318072;
	// begin inline asm
	lop3.b32 %r707, %r662, %r709, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r712, %r710, %r711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r715, %r707, %r712;
	// end inline asm
	// begin inline asm
	lop3.b32 %r718, %r673, %r709, %r721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r722, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r723, %r721, %r722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r726, %r718, %r723;
	// end inline asm
	shr.u32 	%r731, %r709, 8;
	// begin inline asm
	lop3.b32 %r729, %r662, %r731, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r733, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r734, %r710, %r733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r737, %r729, %r734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r740, %r673, %r731, %r721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r744, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r745, %r721, %r744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r748, %r740, %r745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r751, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r753, %r751, %r669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r756, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r758, %r756, %r680;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r761, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r763, %r761, %r691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r766, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r768, %r766, %r702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r771, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r773, %r771, %r715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r776, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r778, %r776, %r726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r781, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r783, %r781, %r737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r786, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r788, %r786, %r748;
	// end inline asm
	// begin inline asm
	mov.b32 %r796, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r807, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r795, %r2584, -2004318072;
	// begin inline asm
	lop3.b32 %r793, %r662, %r795, %r796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r797, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r798, %r796, %r797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r801, %r793, %r798;
	// end inline asm
	// begin inline asm
	lop3.b32 %r804, %r673, %r795, %r807, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r808, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r809, %r807, %r808;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r812, %r804, %r809;
	// end inline asm
	shr.u32 	%r817, %r795, 8;
	// begin inline asm
	lop3.b32 %r815, %r662, %r817, %r796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r819, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r820, %r796, %r819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r823, %r815, %r820;
	// end inline asm
	// begin inline asm
	lop3.b32 %r826, %r673, %r817, %r807, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r830, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r831, %r807, %r830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r834, %r826, %r831;
	// end inline asm
	// begin inline asm
	mov.b32 %r842, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r853, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r841, %r2583, -2004318072;
	// begin inline asm
	lop3.b32 %r839, %r662, %r841, %r842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r843, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r844, %r842, %r843;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r847, %r839, %r844;
	// end inline asm
	// begin inline asm
	lop3.b32 %r850, %r673, %r841, %r853, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r854, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r855, %r853, %r854;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r858, %r850, %r855;
	// end inline asm
	shr.u32 	%r863, %r841, 8;
	// begin inline asm
	lop3.b32 %r861, %r662, %r863, %r842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r865, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r866, %r842, %r865;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r869, %r861, %r866;
	// end inline asm
	// begin inline asm
	lop3.b32 %r872, %r673, %r863, %r853, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r876, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r877, %r853, %r876;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r880, %r872, %r877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r883, %r195, %r801, %r753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r887, %r195, %r812, %r758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r891, %r195, %r823, %r763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r895, %r195, %r834, %r768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r899, %r195, %r847, %r773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r903, %r195, %r858, %r778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r907, %r195, %r869, %r783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r911, %r195, %r880, %r788;
	// end inline asm
	// begin inline asm
	mov.b32 %r920, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r919, %r2582, -2004318072;
	// begin inline asm
	lop3.b32 %r917, %r662, %r919, %r920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r921, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r922, %r920, %r921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r925, %r917, %r922;
	// end inline asm
	// begin inline asm
	lop3.b32 %r928, %r673, %r919, %r931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r932, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r933, %r931, %r932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r936, %r928, %r933;
	// end inline asm
	shr.u32 	%r941, %r919, 8;
	// begin inline asm
	lop3.b32 %r939, %r662, %r941, %r920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r920, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	lop3.b32 %r950, %r673, %r941, %r931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r954, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r955, %r931, %r954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r958, %r950, %r955;
	// end inline asm
	// begin inline asm
	mov.b32 %r966, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r965, %r2581, -2004318072;
	// begin inline asm
	lop3.b32 %r963, %r662, %r965, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r968, %r966, %r967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r971, %r963, %r968;
	// end inline asm
	// begin inline asm
	lop3.b32 %r974, %r673, %r965, %r977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r977, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	shr.u32 	%r987, %r965, 8;
	// begin inline asm
	lop3.b32 %r985, %r662, %r987, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r966, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	// begin inline asm
	lop3.b32 %r996, %r673, %r987, %r977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1000, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r977, %r1000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1004, %r996, %r1001;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1007, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1009, %r1007, %r925, %r883;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1013, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1015, %r1013, %r936, %r887;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1019, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1021, %r1019, %r947, %r891;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1025, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1027, %r1025, %r958, %r895;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1031, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1033, %r1031, %r971, %r899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1037, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1039, %r1037, %r982, %r903;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1043, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1045, %r1043, %r993, %r907;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1049, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1051, %r1049, %r1004, %r911;
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1071, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1059, %r2569, -2004318072;
	// begin inline asm
	lop3.b32 %r1057, %r662, %r1059, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1061, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1062, %r1060, %r1061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1065, %r1057, %r1062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1068, %r673, %r1059, %r1071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1072, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1073, %r1071, %r1072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1076, %r1068, %r1073;
	// end inline asm
	shr.u32 	%r1081, %r1059, 8;
	// begin inline asm
	lop3.b32 %r1079, %r662, %r1081, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1083, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1084, %r1060, %r1083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1087, %r1079, %r1084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1090, %r673, %r1081, %r1071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1094, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1095, %r1071, %r1094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1098, %r1090, %r1095;
	// end inline asm
	// begin inline asm
	mov.b32 %r1106, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1117, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1105, %r2570, -2004318072;
	// begin inline asm
	lop3.b32 %r1103, %r662, %r1105, %r1106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1107, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1108, %r1106, %r1107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1111, %r1103, %r1108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1114, %r673, %r1105, %r1117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1118, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1119, %r1117, %r1118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1122, %r1114, %r1119;
	// end inline asm
	shr.u32 	%r1127, %r1105, 8;
	// begin inline asm
	lop3.b32 %r1125, %r662, %r1127, %r1106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1129, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1130, %r1106, %r1129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1133, %r1125, %r1130;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1136, %r673, %r1127, %r1117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1140, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1141, %r1117, %r1140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1144, %r1136, %r1141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r231, %r1065, %r1009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r231, %r1076, %r1015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r231, %r1087, %r1021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1192, %r231, %r1098, %r1027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1204, %r231, %r1111, %r1033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r231, %r1122, %r1039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r231, %r1133, %r1045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r231, %r1144, %r1051;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1179, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1181, %r1179, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r277, %r1186, %r1181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1188, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1190, %r1188, %r1192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r277, %r1195, %r1190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1197, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r1197, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r277, %r1204, %r1199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1206, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r1206, %r1210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r277, %r1213, %r1208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1215, %r280, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1218, %r277, %r1183, %r1215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1222, %r280, %r1195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1225, %r277, %r1192, %r1222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1229, %r280, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1232, %r277, %r1201, %r1229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r280, %r1213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r277, %r1210, %r1236;
	// end inline asm
	mov.u32 	%r1251, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1290, %r1287}, {%r325, %r331, %r328, %r334}, {%r1184, %r1218}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1299, %r1296}, {%r325, %r331, %r328, %r334}, {%r1193, %r1225}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1308, %r1305}, {%r325, %r331, %r328, %r334}, {%r1202, %r1232}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1317, %r1314}, {%r325, %r331, %r328, %r334}, {%r1211, %r1239}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1283, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1285, %r1283, %r1287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1288, %r372, %r1290, %r1285;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1292, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1294, %r1292, %r1296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1297, %r372, %r1299, %r1294;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1301, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1303, %r1301, %r1305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1306, %r372, %r1308, %r1303;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1310, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1312, %r1310, %r1314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1315, %r372, %r1317, %r1312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1319, %r375, %r1290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1322, %r372, %r1287, %r1319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1326, %r375, %r1299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1329, %r372, %r1296, %r1326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1333, %r375, %r1308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1336, %r372, %r1305, %r1333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1340, %r375, %r1317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1343, %r372, %r1314, %r1340;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1347, %r1348}, {%r412, %r418, %r415, %r421}, {%r1288, %r1322}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1357, %r1358}, {%r412, %r418, %r415, %r421}, {%r1297, %r1329}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1367, %r1368}, {%r412, %r418, %r415, %r421}, {%r1306, %r1336}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1377, %r1378}, {%r412, %r418, %r415, %r421}, {%r1315, %r1343}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1387, %r111, %r1347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1390, %r111, %r1348;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1393, %r111, %r1357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1396, %r111, %r1358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1399, %r111, %r1367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1402, %r111, %r1368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1405, %r111, %r1377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1408, %r111, %r1378;
	// end inline asm
	// begin inline asm
	mov.b32 %r1411, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1412, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1413, %r1387, %r1411;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1416, %r1413, %r1412;
	// end inline asm
	// begin inline asm
	mov.b32 %r1419, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1420, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1421, %r1390, %r1419;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1424, %r1421, %r1420;
	// end inline asm
	// begin inline asm
	mov.b32 %r1427, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1428, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1429, %r1393, %r1427;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1432, %r1429, %r1428;
	// end inline asm
	// begin inline asm
	mov.b32 %r1435, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1436, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1437, %r1396, %r1435;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1440, %r1437, %r1436;
	// end inline asm
	// begin inline asm
	mov.b32 %r1443, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1444, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1445, %r1399, %r1443;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1448, %r1445, %r1444;
	// end inline asm
	// begin inline asm
	mov.b32 %r1451, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1452, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1453, %r1402, %r1451;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1456, %r1453, %r1452;
	// end inline asm
	// begin inline asm
	mov.b32 %r1459, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1460, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1461, %r1405, %r1459;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1464, %r1461, %r1460;
	// end inline asm
	// begin inline asm
	mov.b32 %r1467, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1468, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1469, %r1408, %r1467;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1472, %r1469, %r1468;
	// end inline asm
	// begin inline asm
	mov.b32 %r1478, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1476, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1477, %r1478, %r1476;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1480, %r1416, %r1477;
	// end inline asm
	// begin inline asm
	mov.b32 %r1483, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1484, %r1478, %r1483;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1487, %r1424, %r1484;
	// end inline asm
	// begin inline asm
	mov.b32 %r1490, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1491, %r1478, %r1490;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1494, %r1432, %r1491;
	// end inline asm
	// begin inline asm
	mov.b32 %r1497, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1498, %r1478, %r1497;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1501, %r1440, %r1498;
	// end inline asm
	mov.u32 	%r1507, 25152;
	// begin inline asm
	prmt.b32 %r1504, %r1480, %r1494, %r1507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1508, %r1487, %r1501, %r1507;
	// end inline asm
	shl.b32 	%r1515, %r1508, 4;
	mov.u32 	%r1513, 252645135;
	// begin inline asm
	lop3.b32 %r1512, %r1513, %r1504, %r1515, 202;
	// end inline asm
	xor.b32  	%r2455, %r1512, -2004318072;
	// begin inline asm
	mov.b32 %r1519, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1517, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1518, %r1519, %r1517;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1521, %r1448, %r1518;
	// end inline asm
	// begin inline asm
	mov.b32 %r1524, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1525, %r1519, %r1524;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1528, %r1456, %r1525;
	// end inline asm
	// begin inline asm
	mov.b32 %r1531, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1532, %r1519, %r1531;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1535, %r1464, %r1532;
	// end inline asm
	// begin inline asm
	mov.b32 %r1538, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1539, %r1519, %r1538;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1542, %r1472, %r1539;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1545, %r1521, %r1535, %r1507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1549, %r1528, %r1542, %r1507;
	// end inline asm
	shl.b32 	%r1556, %r1549, 4;
	// begin inline asm
	lop3.b32 %r1553, %r1513, %r1545, %r1556, 202;
	// end inline asm
	xor.b32  	%r2456, %r1553, -2004318072;
	st.shared.u32 	[%rd156], %r2455;
	st.shared.u32 	[%rd157], %r2456;
	ld.shared.u32 	%r2579, [%rd154];
	ld.shared.u32 	%r2580, [%rd155];
	// begin inline asm
	mov.b32 %r1562, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1573, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1561, %r2579, -2004318072;
	// begin inline asm
	lop3.b32 %r1559, %r662, %r1561, %r1562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1563, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1564, %r1562, %r1563;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1567, %r1559, %r1564;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1570, %r673, %r1561, %r1573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1574, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1575, %r1573, %r1574;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1578, %r1570, %r1575;
	// end inline asm
	shr.u32 	%r1583, %r1561, 8;
	// begin inline asm
	lop3.b32 %r1581, %r662, %r1583, %r1562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1585, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1586, %r1562, %r1585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1589, %r1581, %r1586;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1592, %r673, %r1583, %r1573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1596, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1597, %r1573, %r1596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1600, %r1592, %r1597;
	// end inline asm
	// begin inline asm
	mov.b32 %r1608, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1619, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1607, %r2580, -2004318072;
	// begin inline asm
	lop3.b32 %r1605, %r662, %r1607, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1609, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1610, %r1608, %r1609;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1613, %r1605, %r1610;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1616, %r673, %r1607, %r1619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1620, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1621, %r1619, %r1620;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1624, %r1616, %r1621;
	// end inline asm
	shr.u32 	%r1629, %r1607, 8;
	// begin inline asm
	lop3.b32 %r1627, %r662, %r1629, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1631, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1632, %r1608, %r1631;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1635, %r1627, %r1632;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1638, %r673, %r1629, %r1619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1642, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1643, %r1619, %r1642;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1646, %r1638, %r1643;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1649, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1651, %r1649, %r1567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1654, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1656, %r1654, %r1578;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1659, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1661, %r1659, %r1589;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1664, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1666, %r1664, %r1600;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1669, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1671, %r1669, %r1613;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1674, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1676, %r1674, %r1624;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1679, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1681, %r1679, %r1635;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1684, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1686, %r1684, %r1646;
	// end inline asm
	// begin inline asm
	mov.b32 %r1694, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1705, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1691, %r662, %r919, %r1694, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1695, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1696, %r1694, %r1695;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1699, %r1691, %r1696;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1702, %r673, %r919, %r1705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1706, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1707, %r1705, %r1706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1710, %r1702, %r1707;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1713, %r662, %r941, %r1694, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1717, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1718, %r1694, %r1717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1721, %r1713, %r1718;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1724, %r673, %r941, %r1705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1728, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1729, %r1705, %r1728;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1732, %r1724, %r1729;
	// end inline asm
	// begin inline asm
	mov.b32 %r1740, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1751, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1737, %r662, %r965, %r1740, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1741, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1742, %r1740, %r1741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1745, %r1737, %r1742;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1748, %r673, %r965, %r1751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1752, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1753, %r1751, %r1752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1756, %r1748, %r1753;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1759, %r662, %r987, %r1740, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1763, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1764, %r1740, %r1763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1767, %r1759, %r1764;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1770, %r673, %r987, %r1751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1774, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1775, %r1751, %r1774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1778, %r1770, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r195, %r1699, %r1651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r195, %r1710, %r1656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r195, %r1721, %r1661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r195, %r1732, %r1666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r195, %r1745, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r195, %r1756, %r1676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r195, %r1767, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r195, %r1778, %r1686;
	// end inline asm
	// begin inline asm
	mov.b32 %r1818, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1829, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1815, %r662, %r1059, %r1818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1819, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1820, %r1818, %r1819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1823, %r1815, %r1820;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1826, %r673, %r1059, %r1829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1830, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1831, %r1829, %r1830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1834, %r1826, %r1831;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1837, %r662, %r1081, %r1818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1841, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1842, %r1818, %r1841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1845, %r1837, %r1842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1848, %r673, %r1081, %r1829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1852, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1853, %r1829, %r1852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1856, %r1848, %r1853;
	// end inline asm
	// begin inline asm
	mov.b32 %r1864, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1875, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1861, %r662, %r1105, %r1864, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1865, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1866, %r1864, %r1865;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1869, %r1861, %r1866;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1872, %r673, %r1105, %r1875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1876, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1877, %r1875, %r1876;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1880, %r1872, %r1877;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1883, %r662, %r1127, %r1864, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1887, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1888, %r1864, %r1887;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1891, %r1883, %r1888;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1894, %r673, %r1127, %r1875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1898, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1899, %r1875, %r1898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1902, %r1894, %r1899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1905, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r1905, %r1823, %r1781;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1911, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r1911, %r1834, %r1785;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1917, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1919, %r1917, %r1845, %r1789;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1923, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r1923, %r1856, %r1793;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1929, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1931, %r1929, %r1869, %r1797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1935, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r1935, %r1880, %r1801;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1941, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r1941, %r1891, %r1805;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1947, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1949, %r1947, %r1902, %r1809;
	// end inline asm
	// begin inline asm
	mov.b32 %r1958, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1969, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1955, %r662, %r663, %r1958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1959, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1960, %r1958, %r1959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1963, %r1955, %r1960;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1966, %r673, %r663, %r1969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1970, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1971, %r1969, %r1970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1974, %r1966, %r1971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1977, %r662, %r685, %r1958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1981, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1982, %r1958, %r1981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1985, %r1977, %r1982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1988, %r673, %r685, %r1969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1992, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1993, %r1969, %r1992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1996, %r1988, %r1993;
	// end inline asm
	// begin inline asm
	mov.b32 %r2004, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2015, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2001, %r662, %r709, %r2004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2005, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2006, %r2004, %r2005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2009, %r2001, %r2006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2012, %r673, %r709, %r2015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2016, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2017, %r2015, %r2016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2020, %r2012, %r2017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2023, %r662, %r731, %r2004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2027, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2028, %r2004, %r2027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2031, %r2023, %r2028;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2034, %r673, %r731, %r2015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2038, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2039, %r2015, %r2038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2042, %r2034, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2084, %r231, %r1963, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2081, %r231, %r1974, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2093, %r231, %r1985, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2090, %r231, %r1996, %r1925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2102, %r231, %r2009, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2099, %r231, %r2020, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2111, %r231, %r2031, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2108, %r231, %r2042, %r1949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2077, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2079, %r2077, %r2081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r277, %r2084, %r2079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2086, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2088, %r2086, %r2090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r277, %r2093, %r2088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2095, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2097, %r2095, %r2099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r277, %r2102, %r2097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2104, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2106, %r2104, %r2108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2109, %r277, %r2111, %r2106;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2113, %r280, %r2084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2116, %r277, %r2081, %r2113;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r280, %r2093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r277, %r2090, %r2120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2127, %r280, %r2102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2130, %r277, %r2099, %r2127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r280, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r277, %r2108, %r2134;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2188, %r2185}, {%r325, %r331, %r328, %r334}, {%r2082, %r2116}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2197, %r2194}, {%r325, %r331, %r328, %r334}, {%r2091, %r2123}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2206, %r2203}, {%r325, %r331, %r328, %r334}, {%r2100, %r2130}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2215, %r2212}, {%r325, %r331, %r328, %r334}, {%r2109, %r2137}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2181, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2183, %r2181, %r2185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2186, %r372, %r2188, %r2183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2190, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2192, %r2190, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2195, %r372, %r2197, %r2192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2201, %r2199, %r2203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r372, %r2206, %r2201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2208, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r2208, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r372, %r2215, %r2210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r375, %r2188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r372, %r2185, %r2217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2224, %r375, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r372, %r2194, %r2224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r375, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r372, %r2203, %r2231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r375, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r372, %r2212, %r2238;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2245, %r2246}, {%r412, %r418, %r415, %r421}, {%r2186, %r2220}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2255, %r2256}, {%r412, %r418, %r415, %r421}, {%r2195, %r2227}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2265, %r2266}, {%r412, %r418, %r415, %r421}, {%r2204, %r2234}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2275, %r2276}, {%r412, %r418, %r415, %r421}, {%r2213, %r2241}, {%r1251, %r1251};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2285, %r111, %r2245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2288, %r111, %r2246;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2291, %r111, %r2255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2294, %r111, %r2256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2297, %r111, %r2265;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2300, %r111, %r2266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2303, %r111, %r2275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2306, %r111, %r2276;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2311, %r2285, %r2309;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2314, %r2311, %r2310;
	// end inline asm
	// begin inline asm
	mov.b32 %r2317, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2318, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2319, %r2288, %r2317;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2322, %r2319, %r2318;
	// end inline asm
	// begin inline asm
	mov.b32 %r2325, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2326, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2327, %r2291, %r2325;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2330, %r2327, %r2326;
	// end inline asm
	// begin inline asm
	mov.b32 %r2333, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2335, %r2294, %r2333;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2338, %r2335, %r2334;
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2343, %r2297, %r2341;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2346, %r2343, %r2342;
	// end inline asm
	// begin inline asm
	mov.b32 %r2349, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2351, %r2300, %r2349;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2354, %r2351, %r2350;
	// end inline asm
	// begin inline asm
	mov.b32 %r2357, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2358, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2359, %r2303, %r2357;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2362, %r2359, %r2358;
	// end inline asm
	// begin inline asm
	mov.b32 %r2365, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2366, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2367, %r2306, %r2365;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2370, %r2367, %r2366;
	// end inline asm
	// begin inline asm
	mov.b32 %r2376, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2374, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2376, %r2374;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2378, %r2314, %r2375;
	// end inline asm
	// begin inline asm
	mov.b32 %r2381, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2376, %r2381;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2385, %r2322, %r2382;
	// end inline asm
	// begin inline asm
	mov.b32 %r2388, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2389, %r2376, %r2388;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2392, %r2330, %r2389;
	// end inline asm
	// begin inline asm
	mov.b32 %r2395, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2396, %r2376, %r2395;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2399, %r2338, %r2396;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2402, %r2378, %r2392, %r1507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2406, %r2385, %r2399, %r1507;
	// end inline asm
	shl.b32 	%r2413, %r2406, 4;
	// begin inline asm
	lop3.b32 %r2410, %r1513, %r2402, %r2413, 202;
	// end inline asm
	xor.b32  	%r2457, %r2410, -2004318072;
	// begin inline asm
	mov.b32 %r2417, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2415, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2416, %r2417, %r2415;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2419, %r2346, %r2416;
	// end inline asm
	// begin inline asm
	mov.b32 %r2422, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2423, %r2417, %r2422;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2426, %r2354, %r2423;
	// end inline asm
	// begin inline asm
	mov.b32 %r2429, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2430, %r2417, %r2429;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2433, %r2362, %r2430;
	// end inline asm
	// begin inline asm
	mov.b32 %r2436, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2437, %r2417, %r2436;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2440, %r2370, %r2437;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2443, %r2419, %r2433, %r1507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2447, %r2426, %r2440, %r1507;
	// end inline asm
	shl.b32 	%r2454, %r2447, 4;
	// begin inline asm
	lop3.b32 %r2451, %r1513, %r2443, %r2454, 202;
	// end inline asm
	xor.b32  	%r2458, %r2451, -2004318072;
	st.shared.u32 	[%rd156], %r2457;
	st.shared.u32 	[%rd157], %r2458;
	add.s32 	%r2578, %r2578, -32;
	add.s64 	%rd157, %rd157, 4228;
	add.s64 	%rd156, %rd156, 4228;
	add.s64 	%rd155, %rd155, 4228;
	add.s64 	%rd154, %rd154, 4228;
	setp.eq.s32 	%p241, %r2578, 0;
	mov.u32 	%r2581, %r2572;
	mov.u32 	%r2582, %r2571;
	mov.u32 	%r2583, %r2570;
	mov.u32 	%r2584, %r2569;
	@%p241 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;
$L__BB0_130:                            // %guard_exit10584
                                        //   in Loop: Header=BB0_128 Depth=1
	bar.sync 	0;
	or.b32  	%r142, %r106, %r94;
	ld.shared.u32 	%r2464, [%rd14];
	ld.shared.u32 	%r2465, [%rd15+128];
	ld.shared.u32 	%r2472, [%rd15+4];
	ld.shared.u32 	%r2473, [%rd15+132];
	ld.shared.u32 	%r2480, [%rd16];
	ld.shared.u32 	%r2481, [%rd17+128];
	ld.shared.u32 	%r2488, [%rd17+4];
	ld.shared.u32 	%r2489, [%rd17+132];
	ld.shared.u32 	%r2496, [%rd18];
	ld.shared.u32 	%r2497, [%rd19+128];
	ld.shared.u32 	%r2504, [%rd19+4];
	ld.shared.u32 	%r2505, [%rd19+132];
	ld.shared.u32 	%r2512, [%rd20];
	ld.shared.u32 	%r2513, [%rd21+128];
	ld.shared.u32 	%r2520, [%rd21+4];
	ld.shared.u32 	%r2521, [%rd21+132];
	// begin inline asm
	prmt.b32 %r2459, %r2464, %r2465, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2463, %r2464, %r2465, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2467, %r2472, %r2473, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2471, %r2472, %r2473, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2475, %r2480, %r2481, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2479, %r2480, %r2481, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2483, %r2488, %r2489, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2487, %r2488, %r2489, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2491, %r2496, %r2497, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2495, %r2496, %r2497, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2499, %r2504, %r2505, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2503, %r2504, %r2505, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2507, %r2512, %r2513, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2511, %r2512, %r2513, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2515, %r2520, %r2521, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2519, %r2520, %r2521, %r574;
	// end inline asm
	selp.b32 	%r2523, %r2463, %r2459, %p228;
	shfl.sync.bfly.b32	%r2524, %r2523, 8, 31, -1;
	selp.b32 	%r2525, %r2471, %r2467, %p228;
	shfl.sync.bfly.b32	%r2526, %r2525, 8, 31, -1;
	selp.b32 	%r2527, %r2479, %r2475, %p228;
	shfl.sync.bfly.b32	%r147, %r2527, 8, 31, -1;
	selp.b32 	%r2528, %r2487, %r2483, %p228;
	shfl.sync.bfly.b32	%r148, %r2528, 8, 31, -1;
	selp.b32 	%r2529, %r2495, %r2491, %p228;
	shfl.sync.bfly.b32	%r2530, %r2529, 8, 31, -1;
	selp.b32 	%r149, %r2491, %r2530, %p228;
	selp.b32 	%r150, %r2530, %r2495, %p228;
	selp.b32 	%r2531, %r2503, %r2499, %p228;
	shfl.sync.bfly.b32	%r2532, %r2531, 8, 31, -1;
	selp.b32 	%r151, %r2499, %r2532, %p228;
	selp.b32 	%r152, %r2532, %r2503, %p228;
	selp.b32 	%r2533, %r2511, %r2507, %p228;
	shfl.sync.bfly.b32	%r2534, %r2533, 8, 31, -1;
	selp.b32 	%r153, %r2507, %r2534, %p228;
	selp.b32 	%r154, %r2534, %r2511, %p228;
	selp.b32 	%r2535, %r2519, %r2515, %p228;
	shfl.sync.bfly.b32	%r2536, %r2535, 8, 31, -1;
	selp.b32 	%r155, %r2515, %r2536, %p228;
	selp.b32 	%r156, %r2536, %r2519, %p228;
	shl.b32 	%r2554, %r142, 13;
	@%p242 bra 	$L__BB0_142;
// %bb.131:                             // %guard_exit10584.pass10153_crit_edge
                                        //   in Loop: Header=BB0_128 Depth=1
	or.b32  	%r2546, %r2554, %r92;
	or.b32  	%r2547, %r2546, %r96;
	or.b32  	%r2585, %r2547, %r99;
	bra.uni 	$L__BB0_143;
$L__BB0_144:                            // %L23967
	st.global.u32 	[%rd4], %r2553;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r2552, 2;
	st.global.u32 	[%rd4], %r2552;
	mov.u64 	%rd152, exception2084;
	cvta.global.u64 	%rd153, %rd152;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd153;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd38;
	st.param.b32 	[param0+8], %r158;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd59, exception1;
	cvta.global.u64 	%rd60, %rd59;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd60;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd38;
	st.param.b32 	[param0+8], %r158;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
