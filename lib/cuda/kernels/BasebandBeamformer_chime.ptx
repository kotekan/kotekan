// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2743[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<70>;
	.reg .b32 	%r<2400>;
	.reg .b64 	%rd<282>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r113, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r116, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r116, 32895;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r117, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r117, 43135;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r114, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r118, %r3, 7;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r119, %r118, %r4;
	or.b32  	%r120, %r119, %r2;
	mul.wide.u32 	%rd30, %r120, 4;
	add.s64 	%rd7, %rd5, %rd30;
	mov.u32 	%r121, 1;
	st.global.u32 	[%rd7], %r121;
	setp.gt.u32 	%p8, %r114, 65535;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r115, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r115, %r114;
	setp.gt.s32 	%p10, %r115, 131071;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r122, %r115, %r114;
	and.b32  	%r123, %r122, 127;
	setp.eq.s32 	%p12, %r123, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L245
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r124, %r3, 4;
	shl.b32 	%r125, %r1, 2;
	shr.u32 	%r5, %r4, 3;
	or.b32  	%r6, %r125, %r5;
	or.b32  	%r126, %r6, %r124;
	mul.wide.u32 	%rd31, %r126, 4;
	add.s64 	%rd32, %rd3, %rd31;
	ld.global.u32 	%r127, [%rd32];
	add.s32 	%r8, %r127, -5;
	setp.lt.u32 	%p13, %r8, 31;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r7, %r127, -4;
	or.b32  	%r129, %r4, %r1;
	setp.ne.s32 	%p1, %r129, 0;
	mul.wide.u32 	%rd35, %r3, 4;
	add.s64 	%rd8, %rd6, %rd35;
	mov.u32 	%r2391, 0;
	@%p1 bra 	$L__BB0_12;
// %bb.11:                              // %L487
	st.global.u32 	[%rd8], %r2391;
$L__BB0_12:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r644, %r4, 5;
	and.b32  	%r645, %r644, 96;
	shl.b32 	%r646, %r1, 7;
	or.b32  	%r647, %r645, %r646;
	shl.b32 	%r648, %r3, 13;
	shl.b32 	%r649, %r4, 7;
	and.b32  	%r650, %r649, 3584;
	or.b32  	%r651, %r650, %r648;
	or.b32  	%r652, %r651, %r647;
	mul.wide.u32 	%rd36, %r652, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.global.u32 	%r136, [%rd37];
	or.b32  	%r653, %r652, 4096;
	mul.wide.u32 	%rd38, %r653, 4;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.u32 	%r144, [%rd39];
	ld.global.u32 	%r137, [%rd37+4];
	or.b32  	%r654, %r652, 4097;
	mul.wide.u32 	%rd40, %r654, 4;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.u32 	%r145, [%rd41];
	ld.global.u32 	%r152, [%rd37+8];
	or.b32  	%r655, %r652, 4098;
	mul.wide.u32 	%rd42, %r655, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.u32 	%r160, [%rd43];
	ld.global.u32 	%r153, [%rd37+12];
	or.b32  	%r656, %r652, 4099;
	mul.wide.u32 	%rd44, %r656, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.global.u32 	%r161, [%rd45];
	ld.global.u32 	%r168, [%rd37+16];
	or.b32  	%r657, %r652, 4100;
	mul.wide.u32 	%rd46, %r657, 4;
	add.s64 	%rd47, %rd1, %rd46;
	ld.global.u32 	%r176, [%rd47];
	ld.global.u32 	%r169, [%rd37+20];
	or.b32  	%r658, %r652, 4101;
	mul.wide.u32 	%rd48, %r658, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.global.u32 	%r177, [%rd49];
	ld.global.u32 	%r184, [%rd37+24];
	or.b32  	%r659, %r652, 4102;
	mul.wide.u32 	%rd50, %r659, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r192, [%rd51];
	ld.global.u32 	%r185, [%rd37+28];
	or.b32  	%r660, %r652, 4103;
	mul.wide.u32 	%rd52, %r660, 4;
	add.s64 	%rd53, %rd1, %rd52;
	ld.global.u32 	%r193, [%rd53];
	ld.global.u32 	%r200, [%rd37+32];
	or.b32  	%r661, %r652, 4104;
	mul.wide.u32 	%rd54, %r661, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.global.u32 	%r208, [%rd55];
	ld.global.u32 	%r201, [%rd37+36];
	or.b32  	%r662, %r652, 4105;
	mul.wide.u32 	%rd56, %r662, 4;
	add.s64 	%rd57, %rd1, %rd56;
	ld.global.u32 	%r209, [%rd57];
	ld.global.u32 	%r216, [%rd37+40];
	or.b32  	%r663, %r652, 4106;
	mul.wide.u32 	%rd58, %r663, 4;
	add.s64 	%rd59, %rd1, %rd58;
	ld.global.u32 	%r224, [%rd59];
	ld.global.u32 	%r217, [%rd37+44];
	or.b32  	%r664, %r652, 4107;
	mul.wide.u32 	%rd60, %r664, 4;
	add.s64 	%rd61, %rd1, %rd60;
	ld.global.u32 	%r225, [%rd61];
	ld.global.u32 	%r232, [%rd37+48];
	or.b32  	%r665, %r652, 4108;
	mul.wide.u32 	%rd62, %r665, 4;
	add.s64 	%rd63, %rd1, %rd62;
	ld.global.u32 	%r240, [%rd63];
	ld.global.u32 	%r233, [%rd37+52];
	or.b32  	%r666, %r652, 4109;
	mul.wide.u32 	%rd64, %r666, 4;
	add.s64 	%rd65, %rd1, %rd64;
	ld.global.u32 	%r241, [%rd65];
	ld.global.u32 	%r248, [%rd37+56];
	or.b32  	%r667, %r652, 4110;
	mul.wide.u32 	%rd66, %r667, 4;
	add.s64 	%rd67, %rd1, %rd66;
	ld.global.u32 	%r256, [%rd67];
	ld.global.u32 	%r249, [%rd37+60];
	or.b32  	%r668, %r652, 4111;
	mul.wide.u32 	%rd68, %r668, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r257, [%rd69];
	ld.global.u32 	%r264, [%rd37+64];
	or.b32  	%r669, %r652, 4112;
	mul.wide.u32 	%rd70, %r669, 4;
	add.s64 	%rd71, %rd1, %rd70;
	ld.global.u32 	%r272, [%rd71];
	ld.global.u32 	%r265, [%rd37+68];
	or.b32  	%r670, %r652, 4113;
	mul.wide.u32 	%rd72, %r670, 4;
	add.s64 	%rd73, %rd1, %rd72;
	ld.global.u32 	%r273, [%rd73];
	ld.global.u32 	%r280, [%rd37+72];
	or.b32  	%r671, %r652, 4114;
	mul.wide.u32 	%rd74, %r671, 4;
	add.s64 	%rd75, %rd1, %rd74;
	ld.global.u32 	%r288, [%rd75];
	ld.global.u32 	%r281, [%rd37+76];
	or.b32  	%r672, %r652, 4115;
	mul.wide.u32 	%rd76, %r672, 4;
	add.s64 	%rd77, %rd1, %rd76;
	ld.global.u32 	%r289, [%rd77];
	ld.global.u32 	%r296, [%rd37+80];
	or.b32  	%r673, %r652, 4116;
	mul.wide.u32 	%rd78, %r673, 4;
	add.s64 	%rd79, %rd1, %rd78;
	ld.global.u32 	%r304, [%rd79];
	ld.global.u32 	%r297, [%rd37+84];
	or.b32  	%r674, %r652, 4117;
	mul.wide.u32 	%rd80, %r674, 4;
	add.s64 	%rd81, %rd1, %rd80;
	ld.global.u32 	%r305, [%rd81];
	ld.global.u32 	%r312, [%rd37+88];
	or.b32  	%r675, %r652, 4118;
	mul.wide.u32 	%rd82, %r675, 4;
	add.s64 	%rd83, %rd1, %rd82;
	ld.global.u32 	%r320, [%rd83];
	ld.global.u32 	%r313, [%rd37+92];
	or.b32  	%r676, %r652, 4119;
	mul.wide.u32 	%rd84, %r676, 4;
	add.s64 	%rd85, %rd1, %rd84;
	ld.global.u32 	%r321, [%rd85];
	ld.global.u32 	%r328, [%rd37+96];
	or.b32  	%r677, %r652, 4120;
	mul.wide.u32 	%rd86, %r677, 4;
	add.s64 	%rd87, %rd1, %rd86;
	ld.global.u32 	%r336, [%rd87];
	ld.global.u32 	%r329, [%rd37+100];
	or.b32  	%r678, %r652, 4121;
	mul.wide.u32 	%rd88, %r678, 4;
	add.s64 	%rd89, %rd1, %rd88;
	ld.global.u32 	%r337, [%rd89];
	ld.global.u32 	%r344, [%rd37+104];
	or.b32  	%r679, %r652, 4122;
	mul.wide.u32 	%rd90, %r679, 4;
	add.s64 	%rd91, %rd1, %rd90;
	ld.global.u32 	%r352, [%rd91];
	ld.global.u32 	%r345, [%rd37+108];
	or.b32  	%r680, %r652, 4123;
	mul.wide.u32 	%rd92, %r680, 4;
	add.s64 	%rd93, %rd1, %rd92;
	ld.global.u32 	%r353, [%rd93];
	ld.global.u32 	%r360, [%rd37+112];
	or.b32  	%r681, %r652, 4124;
	mul.wide.u32 	%rd94, %r681, 4;
	add.s64 	%rd95, %rd1, %rd94;
	ld.global.u32 	%r368, [%rd95];
	ld.global.u32 	%r361, [%rd37+116];
	or.b32  	%r682, %r652, 4125;
	mul.wide.u32 	%rd96, %r682, 4;
	add.s64 	%rd97, %rd1, %rd96;
	ld.global.u32 	%r369, [%rd97];
	ld.global.u32 	%r376, [%rd37+120];
	or.b32  	%r683, %r652, 4126;
	mul.wide.u32 	%rd98, %r683, 4;
	add.s64 	%rd99, %rd1, %rd98;
	ld.global.u32 	%r384, [%rd99];
	ld.global.u32 	%r377, [%rd37+124];
	or.b32  	%r684, %r652, 4127;
	mul.wide.u32 	%rd100, %r684, 4;
	add.s64 	%rd101, %rd1, %rd100;
	ld.global.u32 	%r385, [%rd101];
	mov.u32 	%r134, 21520;
	// begin inline asm
	prmt.b32 %r388, %r136, %r137, %r134;
	// end inline asm
	mov.u32 	%r138, 30258;
	// begin inline asm
	prmt.b32 %r389, %r136, %r137, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r396, %r144, %r145, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r397, %r144, %r145, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r404, %r152, %r153, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r405, %r152, %r153, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r412, %r160, %r161, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r413, %r160, %r161, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r420, %r168, %r169, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r421, %r168, %r169, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r428, %r176, %r177, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r429, %r176, %r177, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r436, %r184, %r185, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r437, %r184, %r185, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r444, %r192, %r193, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r445, %r192, %r193, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r452, %r200, %r201, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r453, %r200, %r201, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r460, %r208, %r209, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r461, %r208, %r209, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r468, %r216, %r217, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r469, %r216, %r217, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r476, %r224, %r225, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r477, %r224, %r225, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r484, %r232, %r233, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r485, %r232, %r233, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r492, %r240, %r241, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r493, %r240, %r241, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r500, %r248, %r249, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r501, %r248, %r249, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r508, %r256, %r257, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r509, %r256, %r257, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r516, %r264, %r265, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r517, %r264, %r265, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r524, %r272, %r273, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r272, %r273, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r532, %r280, %r281, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r280, %r281, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r540, %r288, %r289, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r288, %r289, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r548, %r296, %r297, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r549, %r296, %r297, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r556, %r304, %r305, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r557, %r304, %r305, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r564, %r312, %r313, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r565, %r312, %r313, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r572, %r320, %r321, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r573, %r320, %r321, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r328, %r329, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r581, %r328, %r329, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r336, %r337, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r589, %r336, %r337, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r344, %r345, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r597, %r344, %r345, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r352, %r353, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r605, %r352, %r353, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r360, %r361, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r613, %r360, %r361, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r620, %r368, %r369, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r621, %r368, %r369, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r628, %r376, %r377, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r629, %r376, %r377, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r636, %r384, %r385, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r637, %r384, %r385, %r138;
	// end inline asm
	mov.u32 	%r390, 25152;
	// begin inline asm
	prmt.b32 %r1079, %r388, %r389, %r390;
	// end inline asm
	mov.u32 	%r394, 29521;
	// begin inline asm
	prmt.b32 %r1085, %r388, %r389, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1597, %r396, %r397, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1603, %r396, %r397, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1111, %r404, %r405, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1117, %r404, %r405, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1629, %r412, %r413, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1635, %r412, %r413, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1143, %r420, %r421, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1149, %r420, %r421, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1661, %r428, %r429, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1667, %r428, %r429, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1175, %r436, %r437, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1181, %r436, %r437, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1693, %r444, %r445, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1699, %r444, %r445, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1207, %r452, %r453, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1213, %r452, %r453, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1725, %r460, %r461, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1731, %r460, %r461, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1239, %r468, %r469, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1245, %r468, %r469, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1757, %r476, %r477, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1763, %r476, %r477, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r484, %r485, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1277, %r484, %r485, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1789, %r492, %r493, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1795, %r492, %r493, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r500, %r501, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1309, %r500, %r501, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1821, %r508, %r509, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1827, %r508, %r509, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1335, %r516, %r517, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1341, %r516, %r517, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1853, %r524, %r525, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1859, %r524, %r525, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1367, %r532, %r533, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1373, %r532, %r533, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1885, %r540, %r541, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1891, %r540, %r541, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1399, %r548, %r549, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1405, %r548, %r549, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1917, %r556, %r557, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1923, %r556, %r557, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1431, %r564, %r565, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1437, %r564, %r565, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1949, %r572, %r573, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1955, %r572, %r573, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1463, %r580, %r581, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1469, %r580, %r581, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1981, %r588, %r589, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1987, %r588, %r589, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1495, %r596, %r597, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1501, %r596, %r597, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2013, %r604, %r605, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2019, %r604, %r605, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1527, %r612, %r613, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1533, %r612, %r613, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2045, %r620, %r621, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2051, %r620, %r621, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1559, %r628, %r629, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1565, %r628, %r629, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2077, %r636, %r637, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2083, %r636, %r637, %r394;
	// end inline asm
	shl.b32 	%r73, %r114, 13;
	shl.b32 	%r685, %r4, 2;
	and.b32  	%r686, %r685, 28;
	or.b32  	%r74, %r686, %r2;
	shl.b32 	%r687, %r3, 8;
	or.b32  	%r75, %r687, %r74;
	or.b32  	%r76, %r75, 128;
	or.b32  	%r77, %r74, 128;
	or.b32  	%r78, %r74, 129;
	or.b32  	%r79, %r74, 130;
	or.b32  	%r80, %r74, 131;
	shl.b32 	%r688, %r4, 4;
	and.b32  	%r689, %r688, 48;
	shl.b32 	%r690, %r1, 6;
	or.b32  	%r81, %r689, %r690;
	shr.u32 	%r82, %r4, 2;
	mul.lo.s32 	%r691, %r1, 640;
	shl.b32 	%r692, %r4, 1;
	and.b32  	%r83, %r692, 6;
	or.b32  	%r84, %r82, %r691;
	or.b32  	%r85, %r84, 8;
	and.b32  	%r693, %r4, 7;
	or.b32  	%r694, %r6, 640;
	or.b32  	%r695, %r6, 1280;
	or.b32  	%r696, %r6, 1920;
	shl.b32 	%r698, %r121, %r8;
	setp.gt.u32 	%p15, %r8, 31;
	selp.b32 	%r86, 0, %r698, %p15;
	min.u32 	%r87, %r7, 31;
	and.b32  	%r88, %r4, 1;
	and.b32  	%r89, %r4, 2;
	and.b32  	%r90, %r4, 4;
	shl.b32 	%r699, %r3, 14;
	shl.b32 	%r700, %r4, 3;
	and.b32  	%r701, %r700, 32;
	and.b32  	%r702, %r644, 64;
	shl.b32 	%r703, %r1, 21;
	shl.b32 	%r704, %r4, 16;
	and.b32  	%r705, %r704, 1572864;
	or.b32  	%r706, %r705, %r703;
	or.b32  	%r91, %r706, %r699;
	mul.lo.s32 	%r707, %r693, 20;
	add.s32 	%r708, %r707, %r6;
	mul.wide.u32 	%rd102, %r708, 4;
	mov.u64 	%rd103, shmem;
	add.s64 	%rd104, %rd103, 32896;
	add.s64 	%rd9, %rd104, %rd102;
	add.s32 	%r709, %r707, %r694;
	mul.wide.u32 	%rd105, %r709, 4;
	add.s64 	%rd10, %rd104, %rd105;
	add.s32 	%r710, %r707, %r695;
	mul.wide.u32 	%rd106, %r710, 4;
	add.s64 	%rd11, %rd104, %rd106;
	add.s32 	%r711, %r707, %r696;
	mul.wide.u32 	%rd107, %r711, 4;
	add.s64 	%rd12, %rd104, %rd107;
	add.s32 	%r712, %r707, 160;
	add.s32 	%r713, %r712, %r6;
	mul.wide.u32 	%rd108, %r713, 4;
	add.s64 	%rd13, %rd104, %rd108;
	add.s32 	%r714, %r712, %r694;
	mul.wide.u32 	%rd109, %r714, 4;
	add.s64 	%rd14, %rd104, %rd109;
	add.s32 	%r715, %r712, %r695;
	mul.wide.u32 	%rd110, %r715, 4;
	add.s64 	%rd15, %rd104, %rd110;
	add.s32 	%r716, %r712, %r696;
	mul.wide.u32 	%rd111, %r716, 4;
	add.s64 	%rd16, %rd104, %rd111;
	add.s32 	%r717, %r707, 320;
	add.s32 	%r718, %r717, %r6;
	mul.wide.u32 	%rd112, %r718, 4;
	add.s64 	%rd17, %rd104, %rd112;
	add.s32 	%r719, %r717, %r694;
	mul.wide.u32 	%rd113, %r719, 4;
	add.s64 	%rd18, %rd104, %rd113;
	add.s32 	%r720, %r717, %r695;
	mul.wide.u32 	%rd114, %r720, 4;
	add.s64 	%rd19, %rd104, %rd114;
	add.s32 	%r721, %r717, %r696;
	mul.wide.u32 	%rd115, %r721, 4;
	add.s64 	%rd20, %rd104, %rd115;
	or.b32  	%r722, %r4, 24;
	mul.lo.s32 	%r723, %r722, 20;
	add.s32 	%r724, %r723, %r6;
	mul.wide.u32 	%rd116, %r724, 4;
	add.s64 	%rd21, %rd104, %rd116;
	add.s32 	%r725, %r723, %r694;
	mul.wide.u32 	%rd117, %r725, 4;
	add.s64 	%rd22, %rd104, %rd117;
	add.s32 	%r726, %r723, %r695;
	mul.wide.u32 	%rd118, %r726, 4;
	add.s64 	%rd23, %rd104, %rd118;
	add.s32 	%r727, %r723, %r696;
	mul.wide.u32 	%rd119, %r727, 4;
	add.s64 	%rd24, %rd104, %rd119;
	and.b32  	%r728, %r688, 16;
	or.b32  	%r729, %r701, %r728;
	or.b32  	%r92, %r702, %r729;
	mov.pred 	%p69, 0;
$L__BB0_13:                             // %L9943
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_15 Depth 2
                                        //       Child Loop BB0_16 Depth 3
	add.s32 	%r730, %r2391, %r114;
	setp.ge.s32 	%p16, %r730, %r115;
	@%p16 bra 	$L__BB0_19;
// %bb.14:                              // %L9951.preheader
                                        //   in Loop: Header=BB0_13 Depth=1
	mov.u32 	%r1081, 0;
	mov.u32 	%r2392, %r1081;
	mov.u32 	%r2393, %r1081;
	mov.u32 	%r2394, %r1081;
	mov.u32 	%r2395, %r1081;
	mov.u32 	%r2396, %r1081;
	mov.u32 	%r2397, %r1081;
	mov.u32 	%r2398, %r1081;
$L__BB0_15:                             // %L9951
                                        //   Parent Loop BB0_13 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_16 Depth 3
	or.b32  	%r733, %r2392, %r5;
	add.s32 	%r734, %r733, %r2391;
	shl.b32 	%r735, %r734, 13;
	and.b32  	%r736, %r735, 536633344;
	or.b32  	%r737, %r75, %r736;
	add.s32 	%r738, %r737, %r73;
	shr.s32 	%r739, %r738, 31;
	shr.u32 	%r740, %r739, 3;
	add.s32 	%r741, %r738, %r740;
	shr.s32 	%r742, %r741, 29;
	setp.lt.s32 	%p17, %r738, 0;
	and.b32  	%r743, %r741, -536870912;
	setp.ne.s32 	%p18, %r743, %r738;
	and.pred  	%p19, %p17, %p18;
	selp.u32 	%r744, 1, 0, %p19;
	sub.s32 	%r745, %r744, %r742;
	shl.b32 	%r746, %r745, 29;
	or.b32  	%r747, %r738, 1;
	add.s32 	%r748, %r747, %r746;
	mul.wide.s32 	%rd120, %r748, 4;
	add.s64 	%rd121, %rd2, %rd120;
	ld.global.v4.u32 	{%r749, %r750, %r751, %r752}, [%rd121+-4];
	or.b32  	%r753, %r76, %r736;
	add.s32 	%r754, %r753, %r73;
	shr.s32 	%r755, %r754, 31;
	shr.u32 	%r756, %r755, 3;
	add.s32 	%r757, %r754, %r756;
	shr.u32 	%r758, %r757, 29;
	shr.u32 	%r759, %r754, 31;
	sub.s32 	%r760, %r759, %r758;
	shl.b32 	%r761, %r760, 29;
	or.b32  	%r762, %r754, 1;
	add.s32 	%r763, %r762, %r761;
	mul.wide.s32 	%rd122, %r763, 4;
	add.s64 	%rd123, %rd2, %rd122;
	ld.global.v4.u32 	{%r764, %r765, %r766, %r767}, [%rd123+-4];
	or.b32  	%r768, %r733, 4;
	add.s32 	%r769, %r768, %r2391;
	shl.b32 	%r770, %r769, 13;
	and.b32  	%r771, %r770, 536666112;
	or.b32  	%r772, %r75, %r771;
	add.s32 	%r773, %r772, %r73;
	shr.s32 	%r774, %r773, 31;
	shr.u32 	%r775, %r774, 3;
	add.s32 	%r776, %r773, %r775;
	shr.s32 	%r777, %r776, 29;
	setp.lt.s32 	%p20, %r773, 0;
	and.b32  	%r778, %r776, -536870912;
	setp.ne.s32 	%p21, %r778, %r773;
	and.pred  	%p22, %p20, %p21;
	selp.u32 	%r779, 1, 0, %p22;
	sub.s32 	%r780, %r779, %r777;
	shl.b32 	%r781, %r780, 29;
	or.b32  	%r782, %r773, 1;
	add.s32 	%r783, %r782, %r781;
	mul.wide.s32 	%rd124, %r783, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r784, %r785, %r786, %r787}, [%rd125+-4];
	or.b32  	%r788, %r76, %r771;
	add.s32 	%r789, %r788, %r73;
	shr.s32 	%r790, %r789, 31;
	shr.u32 	%r791, %r790, 3;
	add.s32 	%r792, %r789, %r791;
	shr.u32 	%r793, %r792, 29;
	shr.u32 	%r794, %r789, 31;
	sub.s32 	%r795, %r794, %r793;
	shl.b32 	%r796, %r795, 29;
	or.b32  	%r797, %r789, 1;
	add.s32 	%r798, %r797, %r796;
	mul.wide.s32 	%rd126, %r798, 4;
	add.s64 	%rd127, %rd2, %rd126;
	ld.global.v4.u32 	{%r799, %r800, %r801, %r802}, [%rd127+-4];
	or.b32  	%r803, %r733, 8;
	add.s32 	%r804, %r803, %r2391;
	shl.b32 	%r805, %r804, 13;
	and.b32  	%r806, %r805, 536698880;
	or.b32  	%r807, %r75, %r806;
	add.s32 	%r808, %r807, %r73;
	shr.s32 	%r809, %r808, 31;
	shr.u32 	%r810, %r809, 3;
	add.s32 	%r811, %r808, %r810;
	shr.s32 	%r812, %r811, 29;
	setp.lt.s32 	%p23, %r808, 0;
	and.b32  	%r813, %r811, -536870912;
	setp.ne.s32 	%p24, %r813, %r808;
	and.pred  	%p25, %p23, %p24;
	selp.u32 	%r814, 1, 0, %p25;
	sub.s32 	%r815, %r814, %r812;
	shl.b32 	%r816, %r815, 29;
	or.b32  	%r817, %r808, 1;
	add.s32 	%r818, %r817, %r816;
	mul.wide.s32 	%rd128, %r818, 4;
	add.s64 	%rd129, %rd2, %rd128;
	ld.global.v4.u32 	{%r819, %r820, %r821, %r822}, [%rd129+-4];
	or.b32  	%r823, %r76, %r806;
	add.s32 	%r824, %r823, %r73;
	shr.s32 	%r825, %r824, 31;
	shr.u32 	%r826, %r825, 3;
	add.s32 	%r827, %r824, %r826;
	shr.u32 	%r828, %r827, 29;
	shr.u32 	%r829, %r824, 31;
	sub.s32 	%r830, %r829, %r828;
	shl.b32 	%r831, %r830, 29;
	or.b32  	%r832, %r824, 1;
	add.s32 	%r833, %r832, %r831;
	mul.wide.s32 	%rd130, %r833, 4;
	add.s64 	%rd131, %rd2, %rd130;
	ld.global.v4.u32 	{%r834, %r835, %r836, %r837}, [%rd131+-4];
	or.b32  	%r838, %r733, 12;
	add.s32 	%r839, %r838, %r2391;
	shl.b32 	%r840, %r839, 13;
	and.b32  	%r841, %r840, 536731648;
	or.b32  	%r842, %r75, %r841;
	add.s32 	%r843, %r842, %r73;
	shr.s32 	%r844, %r843, 31;
	shr.u32 	%r845, %r844, 3;
	add.s32 	%r846, %r843, %r845;
	shr.s32 	%r847, %r846, 29;
	setp.lt.s32 	%p26, %r843, 0;
	and.b32  	%r848, %r846, -536870912;
	setp.ne.s32 	%p27, %r848, %r843;
	and.pred  	%p28, %p26, %p27;
	selp.u32 	%r849, 1, 0, %p28;
	sub.s32 	%r850, %r849, %r847;
	shl.b32 	%r851, %r850, 29;
	or.b32  	%r852, %r843, 1;
	add.s32 	%r853, %r852, %r851;
	mul.wide.s32 	%rd132, %r853, 4;
	add.s64 	%rd133, %rd2, %rd132;
	ld.global.v4.u32 	{%r854, %r855, %r856, %r857}, [%rd133+-4];
	or.b32  	%r858, %r76, %r841;
	add.s32 	%r859, %r858, %r73;
	shr.s32 	%r860, %r859, 31;
	shr.u32 	%r861, %r860, 3;
	add.s32 	%r862, %r859, %r861;
	shr.u32 	%r863, %r862, 29;
	shr.u32 	%r864, %r859, 31;
	sub.s32 	%r865, %r864, %r863;
	shl.b32 	%r866, %r865, 29;
	or.b32  	%r867, %r859, 1;
	add.s32 	%r868, %r867, %r866;
	mul.wide.s32 	%rd134, %r868, 4;
	add.s64 	%rd135, %rd2, %rd134;
	ld.global.v4.u32 	{%r869, %r870, %r871, %r872}, [%rd135+-4];
	or.b32  	%r873, %r733, 16;
	add.s32 	%r874, %r873, %r2391;
	shl.b32 	%r875, %r874, 13;
	and.b32  	%r876, %r875, 536764416;
	or.b32  	%r877, %r75, %r876;
	add.s32 	%r878, %r877, %r73;
	shr.s32 	%r879, %r878, 31;
	shr.u32 	%r880, %r879, 3;
	add.s32 	%r881, %r878, %r880;
	shr.s32 	%r882, %r881, 29;
	setp.lt.s32 	%p29, %r878, 0;
	and.b32  	%r883, %r881, -536870912;
	setp.ne.s32 	%p30, %r883, %r878;
	and.pred  	%p31, %p29, %p30;
	selp.u32 	%r884, 1, 0, %p31;
	sub.s32 	%r885, %r884, %r882;
	shl.b32 	%r886, %r885, 29;
	or.b32  	%r887, %r878, 1;
	add.s32 	%r888, %r887, %r886;
	mul.wide.s32 	%rd136, %r888, 4;
	add.s64 	%rd137, %rd2, %rd136;
	ld.global.v4.u32 	{%r889, %r890, %r891, %r892}, [%rd137+-4];
	or.b32  	%r893, %r76, %r876;
	add.s32 	%r894, %r893, %r73;
	shr.s32 	%r895, %r894, 31;
	shr.u32 	%r896, %r895, 3;
	add.s32 	%r897, %r894, %r896;
	shr.u32 	%r898, %r897, 29;
	shr.u32 	%r899, %r894, 31;
	sub.s32 	%r900, %r899, %r898;
	shl.b32 	%r901, %r900, 29;
	or.b32  	%r902, %r894, 1;
	add.s32 	%r903, %r902, %r901;
	mul.wide.s32 	%rd138, %r903, 4;
	add.s64 	%rd139, %rd2, %rd138;
	ld.global.v4.u32 	{%r904, %r905, %r906, %r907}, [%rd139+-4];
	or.b32  	%r908, %r733, 20;
	add.s32 	%r909, %r908, %r2391;
	shl.b32 	%r910, %r909, 13;
	and.b32  	%r911, %r910, 536797184;
	or.b32  	%r912, %r75, %r911;
	add.s32 	%r913, %r912, %r73;
	shr.s32 	%r914, %r913, 31;
	shr.u32 	%r915, %r914, 3;
	add.s32 	%r916, %r913, %r915;
	shr.s32 	%r917, %r916, 29;
	setp.lt.s32 	%p32, %r913, 0;
	and.b32  	%r918, %r916, -536870912;
	setp.ne.s32 	%p33, %r918, %r913;
	and.pred  	%p34, %p32, %p33;
	selp.u32 	%r919, 1, 0, %p34;
	sub.s32 	%r920, %r919, %r917;
	shl.b32 	%r921, %r920, 29;
	or.b32  	%r922, %r913, 1;
	add.s32 	%r923, %r922, %r921;
	mul.wide.s32 	%rd140, %r923, 4;
	add.s64 	%rd141, %rd2, %rd140;
	ld.global.v4.u32 	{%r924, %r925, %r926, %r927}, [%rd141+-4];
	or.b32  	%r928, %r76, %r911;
	add.s32 	%r929, %r928, %r73;
	shr.s32 	%r930, %r929, 31;
	shr.u32 	%r931, %r930, 3;
	add.s32 	%r932, %r929, %r931;
	shr.u32 	%r933, %r932, 29;
	shr.u32 	%r934, %r929, 31;
	sub.s32 	%r935, %r934, %r933;
	shl.b32 	%r936, %r935, 29;
	or.b32  	%r937, %r929, 1;
	add.s32 	%r938, %r937, %r936;
	mul.wide.s32 	%rd142, %r938, 4;
	add.s64 	%rd143, %rd2, %rd142;
	ld.global.v4.u32 	{%r939, %r940, %r941, %r942}, [%rd143+-4];
	or.b32  	%r943, %r733, 24;
	add.s32 	%r944, %r943, %r2391;
	shl.b32 	%r945, %r944, 13;
	and.b32  	%r946, %r945, 536829952;
	or.b32  	%r947, %r75, %r946;
	add.s32 	%r948, %r947, %r73;
	shr.s32 	%r949, %r948, 31;
	shr.u32 	%r950, %r949, 3;
	add.s32 	%r951, %r948, %r950;
	shr.s32 	%r952, %r951, 29;
	setp.lt.s32 	%p35, %r948, 0;
	and.b32  	%r953, %r951, -536870912;
	setp.ne.s32 	%p36, %r953, %r948;
	and.pred  	%p37, %p35, %p36;
	selp.u32 	%r954, 1, 0, %p37;
	sub.s32 	%r955, %r954, %r952;
	shl.b32 	%r956, %r955, 29;
	or.b32  	%r957, %r948, 1;
	add.s32 	%r958, %r957, %r956;
	mul.wide.s32 	%rd144, %r958, 4;
	add.s64 	%rd145, %rd2, %rd144;
	ld.global.v4.u32 	{%r959, %r960, %r961, %r962}, [%rd145+-4];
	or.b32  	%r963, %r76, %r946;
	add.s32 	%r964, %r963, %r73;
	shr.s32 	%r965, %r964, 31;
	shr.u32 	%r966, %r965, 3;
	add.s32 	%r967, %r964, %r966;
	shr.u32 	%r968, %r967, 29;
	shr.u32 	%r969, %r964, 31;
	sub.s32 	%r970, %r969, %r968;
	shl.b32 	%r971, %r970, 29;
	or.b32  	%r972, %r964, 1;
	add.s32 	%r973, %r972, %r971;
	mul.wide.s32 	%rd146, %r973, 4;
	add.s64 	%rd147, %rd2, %rd146;
	ld.global.v4.u32 	{%r974, %r975, %r976, %r977}, [%rd147+-4];
	or.b32  	%r978, %r733, 28;
	add.s32 	%r979, %r978, %r2391;
	shl.b32 	%r980, %r979, 13;
	and.b32  	%r981, %r980, 536862720;
	or.b32  	%r982, %r75, %r981;
	add.s32 	%r983, %r982, %r73;
	shr.s32 	%r984, %r983, 31;
	shr.u32 	%r985, %r984, 3;
	add.s32 	%r986, %r983, %r985;
	shr.s32 	%r987, %r986, 29;
	setp.lt.s32 	%p38, %r983, 0;
	and.b32  	%r988, %r986, -536870912;
	setp.ne.s32 	%p39, %r988, %r983;
	and.pred  	%p40, %p38, %p39;
	selp.u32 	%r989, 1, 0, %p40;
	sub.s32 	%r990, %r989, %r987;
	shl.b32 	%r991, %r990, 29;
	or.b32  	%r992, %r983, 1;
	add.s32 	%r993, %r992, %r991;
	mul.wide.s32 	%rd148, %r993, 4;
	add.s64 	%rd149, %rd2, %rd148;
	ld.global.v4.u32 	{%r994, %r995, %r996, %r997}, [%rd149+-4];
	or.b32  	%r998, %r76, %r981;
	add.s32 	%r999, %r998, %r73;
	shr.s32 	%r1000, %r999, 31;
	shr.u32 	%r1001, %r1000, 3;
	add.s32 	%r1002, %r999, %r1001;
	shr.u32 	%r1003, %r1002, 29;
	shr.u32 	%r1004, %r999, 31;
	sub.s32 	%r1005, %r1004, %r1003;
	shl.b32 	%r1006, %r1005, 29;
	or.b32  	%r1007, %r999, 1;
	add.s32 	%r1008, %r1007, %r1006;
	mul.wide.s32 	%rd150, %r1008, 4;
	add.s64 	%rd151, %rd2, %rd150;
	ld.global.v4.u32 	{%r1009, %r1010, %r1011, %r1012}, [%rd151+-4];
	and.b32  	%r1013, %r734, 3;
	mul.lo.s32 	%r1014, %r1013, 257;
	add.s32 	%r1015, %r74, %r1014;
	mul.wide.u32 	%rd152, %r1015, 4;
	add.s64 	%rd154, %rd103, %rd152;
	st.shared.u32 	[%rd154], %r749;
	cvt.u64.u32 	%rd155, %r1014;
	cvt.u64.u32 	%rd156, %r74;
	add.s64 	%rd157, %rd156, %rd155;
	shl.b64 	%rd158, %rd157, 2;
	add.s64 	%rd159, %rd103, %rd158;
	st.shared.u32 	[%rd159+4], %r750;
	st.shared.u32 	[%rd159+8], %r751;
	st.shared.u32 	[%rd159+12], %r752;
	add.s32 	%r1016, %r1014, %r77;
	mul.wide.u32 	%rd160, %r1016, 4;
	add.s64 	%rd161, %rd103, %rd160;
	st.shared.u32 	[%rd161], %r764;
	add.s32 	%r1017, %r1014, %r78;
	mul.wide.u32 	%rd162, %r1017, 4;
	add.s64 	%rd163, %rd103, %rd162;
	st.shared.u32 	[%rd163], %r765;
	add.s32 	%r1018, %r1014, %r79;
	mul.wide.u32 	%rd164, %r1018, 4;
	add.s64 	%rd165, %rd103, %rd164;
	st.shared.u32 	[%rd165], %r766;
	add.s32 	%r1019, %r1014, %r80;
	mul.wide.u32 	%rd166, %r1019, 4;
	add.s64 	%rd167, %rd103, %rd166;
	st.shared.u32 	[%rd167], %r767;
	and.b32  	%r1020, %r769, 7;
	mul.lo.s32 	%r1021, %r1020, 257;
	add.s32 	%r1022, %r74, %r1021;
	mul.wide.u32 	%rd168, %r1022, 4;
	add.s64 	%rd169, %rd103, %rd168;
	st.shared.u32 	[%rd169], %r784;
	cvt.u64.u32 	%rd170, %r1021;
	add.s64 	%rd171, %rd156, %rd170;
	shl.b64 	%rd172, %rd171, 2;
	add.s64 	%rd173, %rd103, %rd172;
	st.shared.u32 	[%rd173+4], %r785;
	st.shared.u32 	[%rd173+8], %r786;
	st.shared.u32 	[%rd173+12], %r787;
	add.s32 	%r1023, %r1021, %r77;
	mul.wide.u32 	%rd174, %r1023, 4;
	add.s64 	%rd175, %rd103, %rd174;
	st.shared.u32 	[%rd175], %r799;
	add.s32 	%r1024, %r1021, %r78;
	mul.wide.u32 	%rd176, %r1024, 4;
	add.s64 	%rd177, %rd103, %rd176;
	st.shared.u32 	[%rd177], %r800;
	add.s32 	%r1025, %r1021, %r79;
	mul.wide.u32 	%rd178, %r1025, 4;
	add.s64 	%rd179, %rd103, %rd178;
	st.shared.u32 	[%rd179], %r801;
	add.s32 	%r1026, %r1021, %r80;
	mul.wide.u32 	%rd180, %r1026, 4;
	add.s64 	%rd181, %rd103, %rd180;
	st.shared.u32 	[%rd181], %r802;
	and.b32  	%r1027, %r804, 11;
	mul.lo.s32 	%r1028, %r1027, 257;
	add.s32 	%r1029, %r74, %r1028;
	mul.wide.u32 	%rd182, %r1029, 4;
	add.s64 	%rd183, %rd103, %rd182;
	st.shared.u32 	[%rd183], %r819;
	cvt.u64.u32 	%rd184, %r1028;
	add.s64 	%rd185, %rd156, %rd184;
	shl.b64 	%rd186, %rd185, 2;
	add.s64 	%rd187, %rd103, %rd186;
	st.shared.u32 	[%rd187+4], %r820;
	st.shared.u32 	[%rd187+8], %r821;
	st.shared.u32 	[%rd187+12], %r822;
	add.s32 	%r1030, %r1028, %r77;
	mul.wide.u32 	%rd188, %r1030, 4;
	add.s64 	%rd189, %rd103, %rd188;
	st.shared.u32 	[%rd189], %r834;
	add.s32 	%r1031, %r1028, %r78;
	mul.wide.u32 	%rd190, %r1031, 4;
	add.s64 	%rd191, %rd103, %rd190;
	st.shared.u32 	[%rd191], %r835;
	add.s32 	%r1032, %r1028, %r79;
	mul.wide.u32 	%rd192, %r1032, 4;
	add.s64 	%rd193, %rd103, %rd192;
	st.shared.u32 	[%rd193], %r836;
	add.s32 	%r1033, %r1028, %r80;
	mul.wide.u32 	%rd194, %r1033, 4;
	add.s64 	%rd195, %rd103, %rd194;
	st.shared.u32 	[%rd195], %r837;
	and.b32  	%r1034, %r839, 15;
	mul.lo.s32 	%r1035, %r1034, 257;
	add.s32 	%r1036, %r74, %r1035;
	mul.wide.u32 	%rd196, %r1036, 4;
	add.s64 	%rd197, %rd103, %rd196;
	st.shared.u32 	[%rd197], %r854;
	cvt.u64.u32 	%rd198, %r1035;
	add.s64 	%rd199, %rd156, %rd198;
	shl.b64 	%rd200, %rd199, 2;
	add.s64 	%rd201, %rd103, %rd200;
	st.shared.u32 	[%rd201+4], %r855;
	st.shared.u32 	[%rd201+8], %r856;
	st.shared.u32 	[%rd201+12], %r857;
	add.s32 	%r1037, %r1035, %r77;
	mul.wide.u32 	%rd202, %r1037, 4;
	add.s64 	%rd203, %rd103, %rd202;
	st.shared.u32 	[%rd203], %r869;
	add.s32 	%r1038, %r1035, %r78;
	mul.wide.u32 	%rd204, %r1038, 4;
	add.s64 	%rd205, %rd103, %rd204;
	st.shared.u32 	[%rd205], %r870;
	add.s32 	%r1039, %r1035, %r79;
	mul.wide.u32 	%rd206, %r1039, 4;
	add.s64 	%rd207, %rd103, %rd206;
	st.shared.u32 	[%rd207], %r871;
	add.s32 	%r1040, %r1035, %r80;
	mul.wide.u32 	%rd208, %r1040, 4;
	add.s64 	%rd209, %rd103, %rd208;
	st.shared.u32 	[%rd209], %r872;
	and.b32  	%r1041, %r874, 19;
	mul.lo.s32 	%r1042, %r1041, 257;
	add.s32 	%r1043, %r74, %r1042;
	mul.wide.u32 	%rd210, %r1043, 4;
	add.s64 	%rd211, %rd103, %rd210;
	st.shared.u32 	[%rd211], %r889;
	cvt.u64.u32 	%rd212, %r1042;
	add.s64 	%rd213, %rd156, %rd212;
	shl.b64 	%rd214, %rd213, 2;
	add.s64 	%rd215, %rd103, %rd214;
	st.shared.u32 	[%rd215+4], %r890;
	st.shared.u32 	[%rd215+8], %r891;
	st.shared.u32 	[%rd215+12], %r892;
	add.s32 	%r1044, %r1042, %r77;
	mul.wide.u32 	%rd216, %r1044, 4;
	add.s64 	%rd217, %rd103, %rd216;
	st.shared.u32 	[%rd217], %r904;
	add.s32 	%r1045, %r1042, %r78;
	mul.wide.u32 	%rd218, %r1045, 4;
	add.s64 	%rd219, %rd103, %rd218;
	st.shared.u32 	[%rd219], %r905;
	add.s32 	%r1046, %r1042, %r79;
	mul.wide.u32 	%rd220, %r1046, 4;
	add.s64 	%rd221, %rd103, %rd220;
	st.shared.u32 	[%rd221], %r906;
	add.s32 	%r1047, %r1042, %r80;
	mul.wide.u32 	%rd222, %r1047, 4;
	add.s64 	%rd223, %rd103, %rd222;
	st.shared.u32 	[%rd223], %r907;
	and.b32  	%r1048, %r909, 23;
	mul.lo.s32 	%r1049, %r1048, 257;
	add.s32 	%r1050, %r74, %r1049;
	mul.wide.u32 	%rd224, %r1050, 4;
	add.s64 	%rd225, %rd103, %rd224;
	st.shared.u32 	[%rd225], %r924;
	cvt.u64.u32 	%rd226, %r1049;
	add.s64 	%rd227, %rd156, %rd226;
	shl.b64 	%rd228, %rd227, 2;
	add.s64 	%rd229, %rd103, %rd228;
	st.shared.u32 	[%rd229+4], %r925;
	st.shared.u32 	[%rd229+8], %r926;
	st.shared.u32 	[%rd229+12], %r927;
	add.s32 	%r1051, %r1049, %r77;
	mul.wide.u32 	%rd230, %r1051, 4;
	add.s64 	%rd231, %rd103, %rd230;
	st.shared.u32 	[%rd231], %r939;
	add.s32 	%r1052, %r1049, %r78;
	mul.wide.u32 	%rd232, %r1052, 4;
	add.s64 	%rd233, %rd103, %rd232;
	st.shared.u32 	[%rd233], %r940;
	add.s32 	%r1053, %r1049, %r79;
	mul.wide.u32 	%rd234, %r1053, 4;
	add.s64 	%rd235, %rd103, %rd234;
	st.shared.u32 	[%rd235], %r941;
	add.s32 	%r1054, %r1049, %r80;
	mul.wide.u32 	%rd236, %r1054, 4;
	add.s64 	%rd237, %rd103, %rd236;
	st.shared.u32 	[%rd237], %r942;
	and.b32  	%r1055, %r944, 27;
	mul.lo.s32 	%r1056, %r1055, 257;
	add.s32 	%r1057, %r74, %r1056;
	mul.wide.u32 	%rd238, %r1057, 4;
	add.s64 	%rd239, %rd103, %rd238;
	st.shared.u32 	[%rd239], %r959;
	cvt.u64.u32 	%rd240, %r1056;
	add.s64 	%rd241, %rd156, %rd240;
	shl.b64 	%rd242, %rd241, 2;
	add.s64 	%rd243, %rd103, %rd242;
	st.shared.u32 	[%rd243+4], %r960;
	st.shared.u32 	[%rd243+8], %r961;
	st.shared.u32 	[%rd243+12], %r962;
	add.s32 	%r1058, %r1056, %r77;
	mul.wide.u32 	%rd244, %r1058, 4;
	add.s64 	%rd245, %rd103, %rd244;
	st.shared.u32 	[%rd245], %r974;
	add.s32 	%r1059, %r1056, %r78;
	mul.wide.u32 	%rd246, %r1059, 4;
	add.s64 	%rd247, %rd103, %rd246;
	st.shared.u32 	[%rd247], %r975;
	add.s32 	%r1060, %r1056, %r79;
	mul.wide.u32 	%rd248, %r1060, 4;
	add.s64 	%rd249, %rd103, %rd248;
	st.shared.u32 	[%rd249], %r976;
	add.s32 	%r1061, %r1056, %r80;
	mul.wide.u32 	%rd250, %r1061, 4;
	add.s64 	%rd251, %rd103, %rd250;
	st.shared.u32 	[%rd251], %r977;
	and.b32  	%r1062, %r979, 31;
	mul.lo.s32 	%r1063, %r1062, 257;
	add.s32 	%r1064, %r74, %r1063;
	mul.wide.u32 	%rd252, %r1064, 4;
	add.s64 	%rd253, %rd103, %rd252;
	st.shared.u32 	[%rd253], %r994;
	cvt.u64.u32 	%rd254, %r1063;
	add.s64 	%rd255, %rd156, %rd254;
	shl.b64 	%rd256, %rd255, 2;
	add.s64 	%rd257, %rd103, %rd256;
	st.shared.u32 	[%rd257+4], %r995;
	st.shared.u32 	[%rd257+8], %r996;
	st.shared.u32 	[%rd257+12], %r997;
	add.s32 	%r1065, %r1063, %r77;
	mul.wide.u32 	%rd258, %r1065, 4;
	add.s64 	%rd259, %rd103, %rd258;
	st.shared.u32 	[%rd259], %r1009;
	add.s32 	%r1066, %r1063, %r78;
	mul.wide.u32 	%rd260, %r1066, 4;
	add.s64 	%rd261, %rd103, %rd260;
	st.shared.u32 	[%rd261], %r1010;
	add.s32 	%r1067, %r1063, %r79;
	mul.wide.u32 	%rd262, %r1067, 4;
	add.s64 	%rd263, %rd103, %rd262;
	st.shared.u32 	[%rd263], %r1011;
	add.s32 	%r1068, %r1063, %r80;
	mul.wide.u32 	%rd264, %r1068, 4;
	add.s64 	%rd265, %rd103, %rd264;
	st.shared.u32 	[%rd265], %r1012;
	bar.sync 	0;
	add.s32 	%r101, %r2392, %r2391;
	mov.u32 	%r2399, %r1081;
$L__BB0_16:                             // %L21862
                                        //   Parent Loop BB0_13 Depth=1
                                        //     Parent Loop BB0_15 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r2105, %r2399, %r82;
	add.s32 	%r2106, %r101, %r2105;
	shr.s32 	%r2107, %r2106, 31;
	shr.u32 	%r2108, %r2107, 27;
	add.s32 	%r2109, %r2106, %r2108;
	and.b32  	%r2110, %r2109, -32;
	sub.s32 	%r2111, %r2106, %r2110;
	mad.lo.s32 	%r2112, %r2111, 257, %r81;
	mul.wide.s32 	%rd266, %r2112, 4;
	add.s64 	%rd268, %rd103, %rd266;
	ld.shared.u32 	%r1070, [%rd268];
	mov.u32 	%r1071, 134744072;
	mov.u32 	%r1072, 252645135;
	// begin inline asm
	lop3.b32 %r1069, %r1070, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2113, %r1069, 2021161080;
	xor.b32  	%r1080, %r2113, -2139062144;
	shr.u32 	%r1074, %r1070, 4;
	// begin inline asm
	lop3.b32 %r1073, %r1074, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2114, %r1073, 2021161080;
	xor.b32  	%r1086, %r2114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1077, %r1078}, {%r1079}, {%r1080}, {%r1081, %r1081};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1083, %r1084}, {%r1085}, {%r1086}, {%r1081, %r1081};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1089, %r1090}, {%r1079}, {%r1086}, {%r1081, %r1081};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1095, %r1096}, {%r1085}, {%r1080}, {%r1089, %r1090};
	// end inline asm
	ld.shared.u32 	%r1102, [%rd268+4];
	// begin inline asm
	lop3.b32 %r1101, %r1102, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2115, %r1101, 2021161080;
	xor.b32  	%r1112, %r2115, -2139062144;
	shr.u32 	%r1106, %r1102, 4;
	// begin inline asm
	lop3.b32 %r1105, %r1106, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2116, %r1105, 2021161080;
	xor.b32  	%r1118, %r2116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1109, %r1110}, {%r1111}, {%r1112}, {%r1077, %r1078};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1115, %r1116}, {%r1117}, {%r1118}, {%r1083, %r1084};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1121, %r1122}, {%r1111}, {%r1118}, {%r1095, %r1096};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1127, %r1128}, {%r1117}, {%r1112}, {%r1121, %r1122};
	// end inline asm
	ld.shared.u32 	%r1134, [%rd268+8];
	// begin inline asm
	lop3.b32 %r1133, %r1134, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2117, %r1133, 2021161080;
	xor.b32  	%r1144, %r2117, -2139062144;
	shr.u32 	%r1138, %r1134, 4;
	// begin inline asm
	lop3.b32 %r1137, %r1138, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2118, %r1137, 2021161080;
	xor.b32  	%r1150, %r2118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1141, %r1142}, {%r1143}, {%r1144}, {%r1109, %r1110};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1147, %r1148}, {%r1149}, {%r1150}, {%r1115, %r1116};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1153, %r1154}, {%r1143}, {%r1150}, {%r1127, %r1128};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1159, %r1160}, {%r1149}, {%r1144}, {%r1153, %r1154};
	// end inline asm
	ld.shared.u32 	%r1166, [%rd268+12];
	// begin inline asm
	lop3.b32 %r1165, %r1166, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2119, %r1165, 2021161080;
	xor.b32  	%r1176, %r2119, -2139062144;
	shr.u32 	%r1170, %r1166, 4;
	// begin inline asm
	lop3.b32 %r1169, %r1170, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2120, %r1169, 2021161080;
	xor.b32  	%r1182, %r2120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1173, %r1174}, {%r1175}, {%r1176}, {%r1141, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1179, %r1180}, {%r1181}, {%r1182}, {%r1147, %r1148};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1185, %r1186}, {%r1175}, {%r1182}, {%r1159, %r1160};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1191, %r1192}, {%r1181}, {%r1176}, {%r1185, %r1186};
	// end inline asm
	ld.shared.u32 	%r1198, [%rd268+16];
	// begin inline asm
	lop3.b32 %r1197, %r1198, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2121, %r1197, 2021161080;
	xor.b32  	%r1208, %r2121, -2139062144;
	shr.u32 	%r1202, %r1198, 4;
	// begin inline asm
	lop3.b32 %r1201, %r1202, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2122, %r1201, 2021161080;
	xor.b32  	%r1214, %r2122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1205, %r1206}, {%r1207}, {%r1208}, {%r1173, %r1174};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1211, %r1212}, {%r1213}, {%r1214}, {%r1179, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1217, %r1218}, {%r1207}, {%r1214}, {%r1191, %r1192};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1223, %r1224}, {%r1213}, {%r1208}, {%r1217, %r1218};
	// end inline asm
	ld.shared.u32 	%r1230, [%rd268+20];
	// begin inline asm
	lop3.b32 %r1229, %r1230, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2123, %r1229, 2021161080;
	xor.b32  	%r1240, %r2123, -2139062144;
	shr.u32 	%r1234, %r1230, 4;
	// begin inline asm
	lop3.b32 %r1233, %r1234, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2124, %r1233, 2021161080;
	xor.b32  	%r1246, %r2124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1237, %r1238}, {%r1239}, {%r1240}, {%r1205, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1243, %r1244}, {%r1245}, {%r1246}, {%r1211, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1249, %r1250}, {%r1239}, {%r1246}, {%r1223, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1255, %r1256}, {%r1245}, {%r1240}, {%r1249, %r1250};
	// end inline asm
	ld.shared.u32 	%r1262, [%rd268+24];
	// begin inline asm
	lop3.b32 %r1261, %r1262, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2125, %r1261, 2021161080;
	xor.b32  	%r1272, %r2125, -2139062144;
	shr.u32 	%r1266, %r1262, 4;
	// begin inline asm
	lop3.b32 %r1265, %r1266, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2126, %r1265, 2021161080;
	xor.b32  	%r1278, %r2126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1269, %r1270}, {%r1271}, {%r1272}, {%r1237, %r1238};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1275, %r1276}, {%r1277}, {%r1278}, {%r1243, %r1244};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1281, %r1282}, {%r1271}, {%r1278}, {%r1255, %r1256};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1287, %r1288}, {%r1277}, {%r1272}, {%r1281, %r1282};
	// end inline asm
	ld.shared.u32 	%r1294, [%rd268+28];
	// begin inline asm
	lop3.b32 %r1293, %r1294, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2127, %r1293, 2021161080;
	xor.b32  	%r1304, %r2127, -2139062144;
	shr.u32 	%r1298, %r1294, 4;
	// begin inline asm
	lop3.b32 %r1297, %r1298, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2128, %r1297, 2021161080;
	xor.b32  	%r1310, %r2128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1301, %r1302}, {%r1303}, {%r1304}, {%r1269, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1307, %r1308}, {%r1309}, {%r1310}, {%r1275, %r1276};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1313, %r1314}, {%r1303}, {%r1310}, {%r1287, %r1288};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1319, %r1320}, {%r1309}, {%r1304}, {%r1313, %r1314};
	// end inline asm
	ld.shared.u32 	%r1326, [%rd268+32];
	// begin inline asm
	lop3.b32 %r1325, %r1326, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2129, %r1325, 2021161080;
	xor.b32  	%r1336, %r2129, -2139062144;
	shr.u32 	%r1330, %r1326, 4;
	// begin inline asm
	lop3.b32 %r1329, %r1330, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2130, %r1329, 2021161080;
	xor.b32  	%r1342, %r2130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1333, %r1334}, {%r1335}, {%r1336}, {%r1301, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1339, %r1340}, {%r1341}, {%r1342}, {%r1307, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1345, %r1346}, {%r1335}, {%r1342}, {%r1319, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1351, %r1352}, {%r1341}, {%r1336}, {%r1345, %r1346};
	// end inline asm
	ld.shared.u32 	%r1358, [%rd268+36];
	// begin inline asm
	lop3.b32 %r1357, %r1358, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2131, %r1357, 2021161080;
	xor.b32  	%r1368, %r2131, -2139062144;
	shr.u32 	%r1362, %r1358, 4;
	// begin inline asm
	lop3.b32 %r1361, %r1362, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2132, %r1361, 2021161080;
	xor.b32  	%r1374, %r2132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1365, %r1366}, {%r1367}, {%r1368}, {%r1333, %r1334};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1371, %r1372}, {%r1373}, {%r1374}, {%r1339, %r1340};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1377, %r1378}, {%r1367}, {%r1374}, {%r1351, %r1352};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1383, %r1384}, {%r1373}, {%r1368}, {%r1377, %r1378};
	// end inline asm
	ld.shared.u32 	%r1390, [%rd268+40];
	// begin inline asm
	lop3.b32 %r1389, %r1390, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2133, %r1389, 2021161080;
	xor.b32  	%r1400, %r2133, -2139062144;
	shr.u32 	%r1394, %r1390, 4;
	// begin inline asm
	lop3.b32 %r1393, %r1394, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2134, %r1393, 2021161080;
	xor.b32  	%r1406, %r2134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1397, %r1398}, {%r1399}, {%r1400}, {%r1365, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1403, %r1404}, {%r1405}, {%r1406}, {%r1371, %r1372};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1409, %r1410}, {%r1399}, {%r1406}, {%r1383, %r1384};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1415, %r1416}, {%r1405}, {%r1400}, {%r1409, %r1410};
	// end inline asm
	ld.shared.u32 	%r1422, [%rd268+44];
	// begin inline asm
	lop3.b32 %r1421, %r1422, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2135, %r1421, 2021161080;
	xor.b32  	%r1432, %r2135, -2139062144;
	shr.u32 	%r1426, %r1422, 4;
	// begin inline asm
	lop3.b32 %r1425, %r1426, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2136, %r1425, 2021161080;
	xor.b32  	%r1438, %r2136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1429, %r1430}, {%r1431}, {%r1432}, {%r1397, %r1398};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1435, %r1436}, {%r1437}, {%r1438}, {%r1403, %r1404};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1441, %r1442}, {%r1431}, {%r1438}, {%r1415, %r1416};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1447, %r1448}, {%r1437}, {%r1432}, {%r1441, %r1442};
	// end inline asm
	ld.shared.u32 	%r1454, [%rd268+48];
	// begin inline asm
	lop3.b32 %r1453, %r1454, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2137, %r1453, 2021161080;
	xor.b32  	%r1464, %r2137, -2139062144;
	shr.u32 	%r1458, %r1454, 4;
	// begin inline asm
	lop3.b32 %r1457, %r1458, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2138, %r1457, 2021161080;
	xor.b32  	%r1470, %r2138, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1461, %r1462}, {%r1463}, {%r1464}, {%r1429, %r1430};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1467, %r1468}, {%r1469}, {%r1470}, {%r1435, %r1436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1473, %r1474}, {%r1463}, {%r1470}, {%r1447, %r1448};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1479, %r1480}, {%r1469}, {%r1464}, {%r1473, %r1474};
	// end inline asm
	ld.shared.u32 	%r1486, [%rd268+52];
	// begin inline asm
	lop3.b32 %r1485, %r1486, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2139, %r1485, 2021161080;
	xor.b32  	%r1496, %r2139, -2139062144;
	shr.u32 	%r1490, %r1486, 4;
	// begin inline asm
	lop3.b32 %r1489, %r1490, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2140, %r1489, 2021161080;
	xor.b32  	%r1502, %r2140, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1493, %r1494}, {%r1495}, {%r1496}, {%r1461, %r1462};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1499, %r1500}, {%r1501}, {%r1502}, {%r1467, %r1468};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1505, %r1506}, {%r1495}, {%r1502}, {%r1479, %r1480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1511, %r1512}, {%r1501}, {%r1496}, {%r1505, %r1506};
	// end inline asm
	ld.shared.u32 	%r1518, [%rd268+56];
	// begin inline asm
	lop3.b32 %r1517, %r1518, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2141, %r1517, 2021161080;
	xor.b32  	%r1528, %r2141, -2139062144;
	shr.u32 	%r1522, %r1518, 4;
	// begin inline asm
	lop3.b32 %r1521, %r1522, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2142, %r1521, 2021161080;
	xor.b32  	%r1534, %r2142, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1525, %r1526}, {%r1527}, {%r1528}, {%r1493, %r1494};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1531, %r1532}, {%r1533}, {%r1534}, {%r1499, %r1500};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1537, %r1538}, {%r1527}, {%r1534}, {%r1511, %r1512};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1543, %r1544}, {%r1533}, {%r1528}, {%r1537, %r1538};
	// end inline asm
	ld.shared.u32 	%r1550, [%rd268+60];
	// begin inline asm
	lop3.b32 %r1549, %r1550, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2143, %r1549, 2021161080;
	xor.b32  	%r1560, %r2143, -2139062144;
	shr.u32 	%r1554, %r1550, 4;
	// begin inline asm
	lop3.b32 %r1553, %r1554, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2144, %r1553, 2021161080;
	xor.b32  	%r1566, %r2144, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1557, %r1558}, {%r1559}, {%r1560}, {%r1525, %r1526};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1563, %r1564}, {%r1565}, {%r1566}, {%r1531, %r1532};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1569, %r1570}, {%r1559}, {%r1566}, {%r1543, %r1544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1575, %r1576}, {%r1565}, {%r1560}, {%r1569, %r1570};
	// end inline asm
	sub.s32 	%r2145, %r1557, %r1563;
	add.s32 	%r2146, %r2145, 8;
	shr.s32 	%r1583, %r2146, 4;
	add.s32 	%r2147, %r1575, 8;
	shr.s32 	%r1582, %r2147, 4;
	sub.s32 	%r2148, %r1558, %r1564;
	add.s32 	%r2149, %r2148, 8;
	shr.s32 	%r1586, %r2149, 4;
	add.s32 	%r2150, %r1576, 8;
	shr.s32 	%r1585, %r2150, 4;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1581, %r1582, %r1583;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1584, %r1585, %r1586;
	// end inline asm
	or.b32  	%r2151, %r2399, %r83;
	mul.lo.s32 	%r2152, %r2151, 20;
	add.s32 	%r2153, %r2152, %r84;
	mul.wide.u32 	%rd269, %r2153, 4;
	add.s64 	%rd271, %rd104, %rd269;
	st.shared.u32 	[%rd271], %r1581;
	add.s32 	%r2154, %r2152, 20;
	add.s32 	%r2155, %r2154, %r84;
	mul.wide.u32 	%rd272, %r2155, 4;
	add.s64 	%rd273, %rd104, %rd272;
	st.shared.u32 	[%rd273], %r1584;
	ld.shared.u32 	%r1588, [%rd268];
	// begin inline asm
	lop3.b32 %r1587, %r1588, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2156, %r1587, 2021161080;
	xor.b32  	%r1598, %r2156, -2139062144;
	shr.u32 	%r1592, %r1588, 4;
	// begin inline asm
	lop3.b32 %r1591, %r1592, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2157, %r1591, 2021161080;
	xor.b32  	%r1604, %r2157, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1595, %r1596}, {%r1597}, {%r1598}, {%r1081, %r1081};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1601, %r1602}, {%r1603}, {%r1604}, {%r1081, %r1081};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1607, %r1608}, {%r1597}, {%r1604}, {%r1081, %r1081};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1613, %r1614}, {%r1603}, {%r1598}, {%r1607, %r1608};
	// end inline asm
	ld.shared.u32 	%r1620, [%rd268+4];
	// begin inline asm
	lop3.b32 %r1619, %r1620, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2158, %r1619, 2021161080;
	xor.b32  	%r1630, %r2158, -2139062144;
	shr.u32 	%r1624, %r1620, 4;
	// begin inline asm
	lop3.b32 %r1623, %r1624, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2159, %r1623, 2021161080;
	xor.b32  	%r1636, %r2159, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1627, %r1628}, {%r1629}, {%r1630}, {%r1595, %r1596};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1633, %r1634}, {%r1635}, {%r1636}, {%r1601, %r1602};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1639, %r1640}, {%r1629}, {%r1636}, {%r1613, %r1614};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1645, %r1646}, {%r1635}, {%r1630}, {%r1639, %r1640};
	// end inline asm
	ld.shared.u32 	%r1652, [%rd268+8];
	// begin inline asm
	lop3.b32 %r1651, %r1652, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2160, %r1651, 2021161080;
	xor.b32  	%r1662, %r2160, -2139062144;
	shr.u32 	%r1656, %r1652, 4;
	// begin inline asm
	lop3.b32 %r1655, %r1656, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2161, %r1655, 2021161080;
	xor.b32  	%r1668, %r2161, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1659, %r1660}, {%r1661}, {%r1662}, {%r1627, %r1628};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1665, %r1666}, {%r1667}, {%r1668}, {%r1633, %r1634};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1671, %r1672}, {%r1661}, {%r1668}, {%r1645, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1677, %r1678}, {%r1667}, {%r1662}, {%r1671, %r1672};
	// end inline asm
	ld.shared.u32 	%r1684, [%rd268+12];
	// begin inline asm
	lop3.b32 %r1683, %r1684, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2162, %r1683, 2021161080;
	xor.b32  	%r1694, %r2162, -2139062144;
	shr.u32 	%r1688, %r1684, 4;
	// begin inline asm
	lop3.b32 %r1687, %r1688, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2163, %r1687, 2021161080;
	xor.b32  	%r1700, %r2163, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1691, %r1692}, {%r1693}, {%r1694}, {%r1659, %r1660};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1697, %r1698}, {%r1699}, {%r1700}, {%r1665, %r1666};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1703, %r1704}, {%r1693}, {%r1700}, {%r1677, %r1678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1709, %r1710}, {%r1699}, {%r1694}, {%r1703, %r1704};
	// end inline asm
	ld.shared.u32 	%r1716, [%rd268+16];
	// begin inline asm
	lop3.b32 %r1715, %r1716, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2164, %r1715, 2021161080;
	xor.b32  	%r1726, %r2164, -2139062144;
	shr.u32 	%r1720, %r1716, 4;
	// begin inline asm
	lop3.b32 %r1719, %r1720, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2165, %r1719, 2021161080;
	xor.b32  	%r1732, %r2165, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1723, %r1724}, {%r1725}, {%r1726}, {%r1691, %r1692};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1729, %r1730}, {%r1731}, {%r1732}, {%r1697, %r1698};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1735, %r1736}, {%r1725}, {%r1732}, {%r1709, %r1710};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1741, %r1742}, {%r1731}, {%r1726}, {%r1735, %r1736};
	// end inline asm
	ld.shared.u32 	%r1748, [%rd268+20];
	// begin inline asm
	lop3.b32 %r1747, %r1748, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2166, %r1747, 2021161080;
	xor.b32  	%r1758, %r2166, -2139062144;
	shr.u32 	%r1752, %r1748, 4;
	// begin inline asm
	lop3.b32 %r1751, %r1752, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2167, %r1751, 2021161080;
	xor.b32  	%r1764, %r2167, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1755, %r1756}, {%r1757}, {%r1758}, {%r1723, %r1724};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1761, %r1762}, {%r1763}, {%r1764}, {%r1729, %r1730};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1767, %r1768}, {%r1757}, {%r1764}, {%r1741, %r1742};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1773, %r1774}, {%r1763}, {%r1758}, {%r1767, %r1768};
	// end inline asm
	ld.shared.u32 	%r1780, [%rd268+24];
	// begin inline asm
	lop3.b32 %r1779, %r1780, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2168, %r1779, 2021161080;
	xor.b32  	%r1790, %r2168, -2139062144;
	shr.u32 	%r1784, %r1780, 4;
	// begin inline asm
	lop3.b32 %r1783, %r1784, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2169, %r1783, 2021161080;
	xor.b32  	%r1796, %r2169, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1787, %r1788}, {%r1789}, {%r1790}, {%r1755, %r1756};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1793, %r1794}, {%r1795}, {%r1796}, {%r1761, %r1762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1799, %r1800}, {%r1789}, {%r1796}, {%r1773, %r1774};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1805, %r1806}, {%r1795}, {%r1790}, {%r1799, %r1800};
	// end inline asm
	ld.shared.u32 	%r1812, [%rd268+28];
	// begin inline asm
	lop3.b32 %r1811, %r1812, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2170, %r1811, 2021161080;
	xor.b32  	%r1822, %r2170, -2139062144;
	shr.u32 	%r1816, %r1812, 4;
	// begin inline asm
	lop3.b32 %r1815, %r1816, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2171, %r1815, 2021161080;
	xor.b32  	%r1828, %r2171, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1819, %r1820}, {%r1821}, {%r1822}, {%r1787, %r1788};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1825, %r1826}, {%r1827}, {%r1828}, {%r1793, %r1794};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1831, %r1832}, {%r1821}, {%r1828}, {%r1805, %r1806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1837, %r1838}, {%r1827}, {%r1822}, {%r1831, %r1832};
	// end inline asm
	ld.shared.u32 	%r1844, [%rd268+32];
	// begin inline asm
	lop3.b32 %r1843, %r1844, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2172, %r1843, 2021161080;
	xor.b32  	%r1854, %r2172, -2139062144;
	shr.u32 	%r1848, %r1844, 4;
	// begin inline asm
	lop3.b32 %r1847, %r1848, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2173, %r1847, 2021161080;
	xor.b32  	%r1860, %r2173, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1851, %r1852}, {%r1853}, {%r1854}, {%r1819, %r1820};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1857, %r1858}, {%r1859}, {%r1860}, {%r1825, %r1826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1863, %r1864}, {%r1853}, {%r1860}, {%r1837, %r1838};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1869, %r1870}, {%r1859}, {%r1854}, {%r1863, %r1864};
	// end inline asm
	ld.shared.u32 	%r1876, [%rd268+36];
	// begin inline asm
	lop3.b32 %r1875, %r1876, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2174, %r1875, 2021161080;
	xor.b32  	%r1886, %r2174, -2139062144;
	shr.u32 	%r1880, %r1876, 4;
	// begin inline asm
	lop3.b32 %r1879, %r1880, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2175, %r1879, 2021161080;
	xor.b32  	%r1892, %r2175, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1883, %r1884}, {%r1885}, {%r1886}, {%r1851, %r1852};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1889, %r1890}, {%r1891}, {%r1892}, {%r1857, %r1858};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1895, %r1896}, {%r1885}, {%r1892}, {%r1869, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1901, %r1902}, {%r1891}, {%r1886}, {%r1895, %r1896};
	// end inline asm
	ld.shared.u32 	%r1908, [%rd268+40];
	// begin inline asm
	lop3.b32 %r1907, %r1908, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2176, %r1907, 2021161080;
	xor.b32  	%r1918, %r2176, -2139062144;
	shr.u32 	%r1912, %r1908, 4;
	// begin inline asm
	lop3.b32 %r1911, %r1912, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2177, %r1911, 2021161080;
	xor.b32  	%r1924, %r2177, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1915, %r1916}, {%r1917}, {%r1918}, {%r1883, %r1884};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1921, %r1922}, {%r1923}, {%r1924}, {%r1889, %r1890};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1927, %r1928}, {%r1917}, {%r1924}, {%r1901, %r1902};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1933, %r1934}, {%r1923}, {%r1918}, {%r1927, %r1928};
	// end inline asm
	ld.shared.u32 	%r1940, [%rd268+44];
	// begin inline asm
	lop3.b32 %r1939, %r1940, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2178, %r1939, 2021161080;
	xor.b32  	%r1950, %r2178, -2139062144;
	shr.u32 	%r1944, %r1940, 4;
	// begin inline asm
	lop3.b32 %r1943, %r1944, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2179, %r1943, 2021161080;
	xor.b32  	%r1956, %r2179, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1947, %r1948}, {%r1949}, {%r1950}, {%r1915, %r1916};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1953, %r1954}, {%r1955}, {%r1956}, {%r1921, %r1922};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1959, %r1960}, {%r1949}, {%r1956}, {%r1933, %r1934};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1965, %r1966}, {%r1955}, {%r1950}, {%r1959, %r1960};
	// end inline asm
	ld.shared.u32 	%r1972, [%rd268+48];
	// begin inline asm
	lop3.b32 %r1971, %r1972, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2180, %r1971, 2021161080;
	xor.b32  	%r1982, %r2180, -2139062144;
	shr.u32 	%r1976, %r1972, 4;
	// begin inline asm
	lop3.b32 %r1975, %r1976, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2181, %r1975, 2021161080;
	xor.b32  	%r1988, %r2181, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1979, %r1980}, {%r1981}, {%r1982}, {%r1947, %r1948};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1985, %r1986}, {%r1987}, {%r1988}, {%r1953, %r1954};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1991, %r1992}, {%r1981}, {%r1988}, {%r1965, %r1966};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1997, %r1998}, {%r1987}, {%r1982}, {%r1991, %r1992};
	// end inline asm
	ld.shared.u32 	%r2004, [%rd268+52];
	// begin inline asm
	lop3.b32 %r2003, %r2004, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2182, %r2003, 2021161080;
	xor.b32  	%r2014, %r2182, -2139062144;
	shr.u32 	%r2008, %r2004, 4;
	// begin inline asm
	lop3.b32 %r2007, %r2008, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2183, %r2007, 2021161080;
	xor.b32  	%r2020, %r2183, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2011, %r2012}, {%r2013}, {%r2014}, {%r1979, %r1980};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2017, %r2018}, {%r2019}, {%r2020}, {%r1985, %r1986};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2023, %r2024}, {%r2013}, {%r2020}, {%r1997, %r1998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2029, %r2030}, {%r2019}, {%r2014}, {%r2023, %r2024};
	// end inline asm
	ld.shared.u32 	%r2036, [%rd268+56];
	// begin inline asm
	lop3.b32 %r2035, %r2036, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2184, %r2035, 2021161080;
	xor.b32  	%r2046, %r2184, -2139062144;
	shr.u32 	%r2040, %r2036, 4;
	// begin inline asm
	lop3.b32 %r2039, %r2040, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2185, %r2039, 2021161080;
	xor.b32  	%r2052, %r2185, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2043, %r2044}, {%r2045}, {%r2046}, {%r2011, %r2012};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2049, %r2050}, {%r2051}, {%r2052}, {%r2017, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2055, %r2056}, {%r2045}, {%r2052}, {%r2029, %r2030};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2061, %r2062}, {%r2051}, {%r2046}, {%r2055, %r2056};
	// end inline asm
	ld.shared.u32 	%r2068, [%rd268+60];
	// begin inline asm
	lop3.b32 %r2067, %r2068, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2186, %r2067, 2021161080;
	xor.b32  	%r2078, %r2186, -2139062144;
	shr.u32 	%r2072, %r2068, 4;
	// begin inline asm
	lop3.b32 %r2071, %r2072, %r1071, %r1072, 40;
	// end inline asm
	add.s32 	%r2187, %r2071, 2021161080;
	xor.b32  	%r2084, %r2187, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2075, %r2076}, {%r2077}, {%r2078}, {%r2043, %r2044};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2081, %r2082}, {%r2083}, {%r2084}, {%r2049, %r2050};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2087, %r2088}, {%r2077}, {%r2084}, {%r2061, %r2062};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2093, %r2094}, {%r2083}, {%r2078}, {%r2087, %r2088};
	// end inline asm
	sub.s32 	%r2188, %r2075, %r2081;
	add.s32 	%r2189, %r2188, 8;
	shr.s32 	%r2101, %r2189, 4;
	add.s32 	%r2190, %r2093, 8;
	shr.s32 	%r2100, %r2190, 4;
	sub.s32 	%r2191, %r2076, %r2082;
	add.s32 	%r2192, %r2191, 8;
	shr.s32 	%r2104, %r2192, 4;
	add.s32 	%r2193, %r2094, 8;
	shr.s32 	%r2103, %r2193, 4;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r2099, %r2100, %r2101;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r2102, %r2103, %r2104;
	// end inline asm
	add.s32 	%r2194, %r2152, %r85;
	mul.wide.u32 	%rd274, %r2194, 4;
	add.s64 	%rd275, %rd104, %rd274;
	st.shared.u32 	[%rd275], %r2099;
	add.s32 	%r2195, %r2154, %r85;
	mul.wide.u32 	%rd276, %r2195, 4;
	add.s64 	%rd277, %rd104, %rd276;
	st.shared.u32 	[%rd277], %r2102;
	add.s32 	%r2399, %r2399, 8;
	setp.ne.s32 	%p41, %r2399, 32;
	@%p41 bra 	$L__BB0_16;
// %bb.17:                              // %L28463
                                        //   in Loop: Header=BB0_15 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2214, [%rd9];
	ld.shared.u32 	%r2215, [%rd10];
	ld.shared.u32 	%r2216, [%rd11];
	ld.shared.u32 	%r2217, [%rd12];
	ld.shared.u32 	%r2218, [%rd13];
	ld.shared.u32 	%r2219, [%rd14];
	ld.shared.u32 	%r2220, [%rd15];
	ld.shared.u32 	%r2221, [%rd16];
	ld.shared.u32 	%r2222, [%rd17];
	ld.shared.u32 	%r2223, [%rd18];
	ld.shared.u32 	%r2224, [%rd19];
	ld.shared.u32 	%r2225, [%rd20];
	ld.shared.u32 	%r2226, [%rd21];
	ld.shared.u32 	%r2227, [%rd22];
	ld.shared.u32 	%r2228, [%rd23];
	ld.shared.u32 	%r2229, [%rd24];
	cvt.s32.s16 	%r2230, %r2214;
	shr.s32 	%r2231, %r2214, 16;
	cvt.s32.s16 	%r2232, %r2215;
	shr.s32 	%r2233, %r2215, 16;
	cvt.s32.s16 	%r2234, %r2216;
	shr.s32 	%r2235, %r2216, 16;
	cvt.s32.s16 	%r2236, %r2217;
	shr.s32 	%r2237, %r2217, 16;
	cvt.s32.s16 	%r2238, %r2218;
	shr.s32 	%r2239, %r2218, 16;
	cvt.s32.s16 	%r2240, %r2219;
	shr.s32 	%r2241, %r2219, 16;
	cvt.s32.s16 	%r2242, %r2220;
	shr.s32 	%r2243, %r2220, 16;
	cvt.s32.s16 	%r2244, %r2221;
	shr.s32 	%r2245, %r2221, 16;
	cvt.s32.s16 	%r2246, %r2222;
	shr.s32 	%r2247, %r2222, 16;
	cvt.s32.s16 	%r2248, %r2223;
	shr.s32 	%r2249, %r2223, 16;
	cvt.s32.s16 	%r2250, %r2224;
	shr.s32 	%r2251, %r2224, 16;
	cvt.s32.s16 	%r2252, %r2225;
	shr.s32 	%r2253, %r2225, 16;
	cvt.s32.s16 	%r2254, %r2226;
	shr.s32 	%r2255, %r2226, 16;
	cvt.s32.s16 	%r2256, %r2227;
	shr.s32 	%r2257, %r2227, 16;
	cvt.s32.s16 	%r2258, %r2228;
	shr.s32 	%r2259, %r2228, 16;
	cvt.s32.s16 	%r2260, %r2229;
	shr.s32 	%r2261, %r2229, 16;
	add.s32 	%r2262, %r2230, %r86;
	add.s32 	%r2263, %r2262, %r2232;
	add.s32 	%r2264, %r2263, %r2234;
	add.s32 	%r2265, %r2264, %r2236;
	shr.s32 	%r2266, %r2265, %r87;
	add.s32 	%r2267, %r2231, %r86;
	add.s32 	%r2268, %r2267, %r2233;
	add.s32 	%r2269, %r2268, %r2235;
	add.s32 	%r2270, %r2269, %r2237;
	shr.s32 	%r2271, %r2270, %r87;
	add.s32 	%r2272, %r2238, %r86;
	add.s32 	%r2273, %r2272, %r2240;
	add.s32 	%r2274, %r2273, %r2242;
	add.s32 	%r2275, %r2274, %r2244;
	shr.s32 	%r2276, %r2275, %r87;
	add.s32 	%r2277, %r2239, %r86;
	add.s32 	%r2278, %r2277, %r2241;
	add.s32 	%r2279, %r2278, %r2243;
	add.s32 	%r2280, %r2279, %r2245;
	shr.s32 	%r2281, %r2280, %r87;
	add.s32 	%r2282, %r2246, %r86;
	add.s32 	%r2283, %r2282, %r2248;
	add.s32 	%r2284, %r2283, %r2250;
	add.s32 	%r2285, %r2284, %r2252;
	shr.s32 	%r2286, %r2285, %r87;
	add.s32 	%r2287, %r2247, %r86;
	add.s32 	%r2288, %r2287, %r2249;
	add.s32 	%r2289, %r2288, %r2251;
	add.s32 	%r2290, %r2289, %r2253;
	shr.s32 	%r2291, %r2290, %r87;
	add.s32 	%r2292, %r2254, %r86;
	add.s32 	%r2293, %r2292, %r2256;
	add.s32 	%r2294, %r2293, %r2258;
	add.s32 	%r2295, %r2294, %r2260;
	shr.s32 	%r2296, %r2295, %r87;
	add.s32 	%r2297, %r2255, %r86;
	add.s32 	%r2298, %r2297, %r2257;
	add.s32 	%r2299, %r2298, %r2259;
	add.s32 	%r2300, %r2299, %r2261;
	shr.s32 	%r2301, %r2300, %r87;
	max.s32 	%r2302, %r2266, -7;
	min.s32 	%r2201, %r2302, 7;
	setp.ne.s32 	%p42, %r2201, %r2266;
	or.pred  	%p43, %p69, %p42;
	max.s32 	%r2303, %r2271, -7;
	min.s32 	%r2208, %r2303, 7;
	setp.ne.s32 	%p44, %r2208, %r2271;
	or.pred  	%p45, %p44, %p43;
	max.s32 	%r2304, %r2276, -7;
	min.s32 	%r2200, %r2304, 7;
	setp.ne.s32 	%p46, %r2200, %r2276;
	or.pred  	%p47, %p45, %p46;
	max.s32 	%r2305, %r2281, -7;
	min.s32 	%r2207, %r2305, 7;
	setp.ne.s32 	%p48, %r2207, %r2281;
	or.pred  	%p49, %p48, %p47;
	max.s32 	%r2306, %r2286, -7;
	min.s32 	%r2198, %r2306, 7;
	setp.ne.s32 	%p50, %r2198, %r2286;
	or.pred  	%p51, %p49, %p50;
	max.s32 	%r2307, %r2291, -7;
	min.s32 	%r2205, %r2307, 7;
	setp.ne.s32 	%p52, %r2205, %r2291;
	or.pred  	%p53, %p52, %p51;
	max.s32 	%r2308, %r2296, -7;
	min.s32 	%r2197, %r2308, 7;
	setp.ne.s32 	%p54, %r2197, %r2296;
	or.pred  	%p55, %p53, %p54;
	max.s32 	%r2309, %r2301, -7;
	min.s32 	%r2204, %r2309, 7;
	setp.ne.s32 	%p56, %r2204, %r2301;
	or.pred  	%p69, %p56, %p55;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2196, %r2197, %r2198, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2199, %r2200, %r2201, %r2196;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2203, %r2204, %r2205, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2206, %r2207, %r2208, %r2203;
	// end inline asm
	shl.b32 	%r2213, %r2206, 4;
	// begin inline asm
	lop3.b32 %r2320, %r1072, %r2199, %r2213, 202;
	// end inline asm
	setp.eq.s32 	%p57, %r2392, 0;
	selp.b32 	%r2397, %r2320, %r2397, %p57;
	selp.b32 	%r2398, %r2320, %r2398, %p57;
	setp.eq.s32 	%p58, %r2392, 32;
	selp.b32 	%r2393, %r2320, %r2393, %p58;
	selp.b32 	%r2394, %r2320, %r2394, %p58;
	setp.eq.s32 	%p59, %r2392, 64;
	selp.b32 	%r2395, %r2320, %r2395, %p59;
	selp.b32 	%r2396, %r2320, %r2396, %p59;
	add.s32 	%r111, %r2392, 32;
	setp.ne.s32 	%p60, %r2392, 96;
	mov.u32 	%r2392, %r111;
	@%p60 bra 	$L__BB0_15;
// %bb.18:                              // %L30869.L30875_crit_edge
                                        //   in Loop: Header=BB0_13 Depth=1
	setp.eq.s32 	%p61, %r90, 0;
	setp.eq.s32 	%p62, %r89, 0;
	setp.eq.s32 	%p63, %r88, 0;
	// begin inline asm
	prmt.b32 %r2310, %r2397, %r2393, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2314, %r2398, %r2394, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2318, %r2395, %r2320, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2322, %r2396, %r2320, %r394;
	// end inline asm
	selp.b32 	%r2358, %r2314, %r2310, %p63;
	shfl.sync.bfly.b32	%r2359, %r2358, 1, 31, -1;
	selp.b32 	%r2327, %r2310, %r2359, %p63;
	selp.b32 	%r2328, %r2359, %r2314, %p63;
	selp.b32 	%r2360, %r2322, %r2318, %p63;
	shfl.sync.bfly.b32	%r2361, %r2360, 1, 31, -1;
	selp.b32 	%r2335, %r2318, %r2361, %p63;
	selp.b32 	%r2336, %r2361, %r2322, %p63;
	// begin inline asm
	prmt.b32 %r2326, %r2327, %r2328, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2330, %r2327, %r2328, %r394;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2334, %r2335, %r2336, %r390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2338, %r2335, %r2336, %r394;
	// end inline asm
	selp.b32 	%r2362, %r2334, %r2326, %p62;
	shfl.sync.bfly.b32	%r2363, %r2362, 2, 31, -1;
	selp.b32 	%r2343, %r2326, %r2363, %p62;
	selp.b32 	%r2344, %r2363, %r2334, %p62;
	selp.b32 	%r2364, %r2338, %r2330, %p62;
	shfl.sync.bfly.b32	%r2365, %r2364, 2, 31, -1;
	selp.b32 	%r2351, %r2330, %r2365, %p62;
	selp.b32 	%r2352, %r2365, %r2338, %p62;
	// begin inline asm
	prmt.b32 %r2342, %r2343, %r2344, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2346, %r2343, %r2344, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2350, %r2351, %r2352, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2354, %r2351, %r2352, %r138;
	// end inline asm
	selp.b32 	%r2366, %r2350, %r2342, %p61;
	shfl.sync.bfly.b32	%r2367, %r2366, 4, 31, -1;
	selp.b32 	%r2368, %r2342, %r2367, %p61;
	selp.b32 	%r2369, %r2367, %r2350, %p61;
	selp.b32 	%r2370, %r2354, %r2346, %p61;
	shfl.sync.bfly.b32	%r2371, %r2370, 4, 31, -1;
	selp.b32 	%r2372, %r2346, %r2371, %p61;
	selp.b32 	%r2373, %r2371, %r2354, %p61;
	selp.b32 	%r2374, %r2372, %r2368, %p63;
	shfl.sync.bfly.b32	%r2375, %r2374, 1, 31, -1;
	selp.b32 	%r2376, %r2368, %r2375, %p63;
	selp.b32 	%r2377, %r2375, %r2372, %p63;
	selp.b32 	%r2378, %r2373, %r2369, %p63;
	shfl.sync.bfly.b32	%r2379, %r2378, 1, 31, -1;
	selp.b32 	%r2380, %r2369, %r2379, %p63;
	selp.b32 	%r2381, %r2379, %r2373, %p63;
	and.b32  	%r2382, %r2391, 16256;
	or.b32  	%r2383, %r2382, %r92;
	or.b32  	%r2384, %r91, %r2383;
	cvt.u64.u32 	%rd278, %r2384;
	add.s64 	%rd279, %rd4, %rd278;
	st.global.v4.u32 	[%rd279], {%r2376, %r2380, %r2377, %r2381};
	add.s32 	%r112, %r2391, 128;
	setp.ne.s32 	%p64, %r2391, 65408;
	mov.u32 	%r2391, %r112;
	@%p64 bra 	$L__BB0_13;
$L__BB0_19:                             // %L31256
	selp.u32 	%r2385, 1, 0, %p69;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r2385, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r2386, 1, 0, %p2; 
	}
	setp.eq.s32 	%p65, %r2386, 0;
	or.pred  	%p66, %p65, %p1;
	@%p66 bra 	$L__BB0_21;
// %bb.20:                              // %L31287
	st.global.u32 	[%rd8], %r121;
$L__BB0_21:                             // %L31333
	mov.u32 	%r2388, 0;
	st.global.u32 	[%rd7], %r2388;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r2389, 2;
	st.global.u32 	[%rd7], %r2389;
	mov.u64 	%rd280, exception2743;
	cvta.global.u64 	%rd281, %rd280;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd281;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r113;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd26, exception1;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r113;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd28, exception1;
	cvta.global.u64 	%rd29, %rd28;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd29;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r113;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_9:                              // %L370
	mov.u32 	%r128, 3;
	st.global.u32 	[%rd7], %r128;
	mov.u64 	%rd33, exception2743;
	cvta.global.u64 	%rd34, %rd33;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd34;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r113;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
