// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception476[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<28>;
	.reg .b32 	%r<682>;
	.reg .b64 	%rd<68>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r67, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r70, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r70, 4351;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r71, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r71, 9471;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r68, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r72, %r1, 7;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r73, %r2, 5;
	mov.u32 	%r3, %tid.x;
	or.b32  	%r74, %r73, %r3;
	or.b32  	%r75, %r74, %r72;
	mul.wide.u32 	%rd20, %r75, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r76, 1;
	st.global.u32 	[%rd6], %r76;
	setp.gt.u32 	%p3, %r68, 32767;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r69, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r69, %r68;
	setp.gt.s32 	%p5, %r69, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r77, %r69, %r68;
	and.b32  	%r78, %r77, 127;
	setp.eq.s32 	%p7, %r78, 0;
	@%p7 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_7;
$L__BB0_17:                             // %pass89
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shr.u32 	%r79, %r3, 3;
	shl.b32 	%r80, %r2, 2;
	or.b32  	%r37, %r79, %r80;
	shl.b32 	%r38, %r1, 5;
	or.b32  	%r81, %r37, %r38;
	mul.wide.u32 	%rd21, %r81, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r39, [%rd22];
	or.b32  	%r82, %r81, 16;
	mul.wide.u32 	%rd23, %r82, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r40, [%rd24];
	add.s32 	%r41, %r39, -3;
	setp.lt.u32 	%p8, %r41, 31;
	add.s32 	%r42, %r40, -3;
	setp.lt.u32 	%p9, %r42, 31;
	and.pred  	%p10, %p8, %p9;
	@!%p10 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_9;
$L__BB0_9:                              // %pass210
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	add.s32 	%r149, %r40, -2;
	add.s32 	%r150, %r39, -2;
	shl.b32 	%r151, %r2, 8;
	shl.b32 	%r152, %r3, 3;
	and.b32  	%r43, %r3, 4;
	and.b32  	%r153, %r152, 24;
	or.b32  	%r154, %r43, %r153;
	and.b32  	%r155, %r152, 448;
	and.b32  	%r156, %r151, 768;
	or.b32  	%r157, %r156, %r155;
	or.b32  	%r158, %r157, %r154;
	shl.b32 	%r159, %r1, 12;
	shl.b32 	%r160, %r158, 2;
	or.b32  	%r161, %r160, %r159;
	cvt.u64.u32 	%rd27, %r161;
	add.s64 	%rd28, %rd27, %rd1;
	ld.global.v4.u32 	{%r85, %r86, %r93, %r94}, [%rd28];
	ld.global.v4.u32 	{%r101, %r102, %r109, %r110}, [%rd28+128];
	mov.u32 	%r111, 21520;
	// begin inline asm
	prmt.b32 %r117, %r85, %r86, %r111;
	// end inline asm
	mov.u32 	%r115, 30258;
	// begin inline asm
	prmt.b32 %r118, %r85, %r86, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r125, %r93, %r94, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r126, %r93, %r94, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r133, %r101, %r102, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r134, %r101, %r102, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r141, %r109, %r110, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r142, %r109, %r110, %r115;
	// end inline asm
	mov.u32 	%r143, 25152;
	// begin inline asm
	prmt.b32 %r116, %r117, %r118, %r143;
	// end inline asm
	mov.u32 	%r147, 29521;
	// begin inline asm
	prmt.b32 %r120, %r117, %r118, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r124, %r125, %r126, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r128, %r125, %r126, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r132, %r133, %r134, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r136, %r133, %r134, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r140, %r141, %r142, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r144, %r141, %r142, %r147;
	// end inline asm
	setp.eq.s32 	%p11, %r43, 0;
	selp.b32 	%r162, %r132, %r116, %p11;
	shfl.sync.bfly.b32	%r163, %r162, 4, 31, -1;
	selp.b32 	%r44, %r116, %r163, %p11;
	selp.b32 	%r45, %r163, %r132, %p11;
	selp.b32 	%r164, %r136, %r120, %p11;
	shfl.sync.bfly.b32	%r165, %r164, 4, 31, -1;
	selp.b32 	%r46, %r120, %r165, %p11;
	selp.b32 	%r47, %r165, %r136, %p11;
	selp.b32 	%r166, %r140, %r124, %p11;
	shfl.sync.bfly.b32	%r167, %r166, 4, 31, -1;
	selp.b32 	%r48, %r124, %r167, %p11;
	selp.b32 	%r49, %r167, %r140, %p11;
	selp.b32 	%r168, %r144, %r128, %p11;
	shfl.sync.bfly.b32	%r169, %r168, 4, 31, -1;
	selp.b32 	%r50, %r128, %r169, %p11;
	selp.b32 	%r51, %r169, %r144, %p11;
	shl.b32 	%r170, %r3, 2;
	and.b32  	%r171, %r170, 12;
	shr.u32 	%r52, %r3, 2;
	shl.b32 	%r172, %r2, 4;
	and.b32  	%r173, %r172, 16;
	or.b32  	%r53, %r173, %r52;
	shl.b32 	%r174, %r2, 3;
	and.b32  	%r175, %r174, 16;
	or.b32  	%r176, %r171, %r38;
	or.b32  	%r54, %r176, %r175;
	shr.u32 	%r177, %r2, 1;
	mul.lo.s32 	%r178, %r177, 544;
	or.b32  	%r55, %r178, %r171;
	and.b32  	%r179, %r174, 8;
	or.b32  	%r180, %r179, %r52;
	shl.b32 	%r181, %r3, 1;
	and.b32  	%r56, %r181, 6;
	mul.lo.s32 	%r182, %r177, 640;
	or.b32  	%r57, %r180, %r182;
	and.b32  	%r183, %r3, 7;
	or.b32  	%r184, %r37, 640;
	shl.b32 	%r58, %r76, %r41;
	min.u32 	%r59, %r150, 31;
	shl.b32 	%r60, %r76, %r42;
	min.u32 	%r61, %r149, 31;
	and.b32  	%r62, %r3, 1;
	and.b32  	%r63, %r3, 2;
	shl.b32 	%r186, %r3, 5;
	and.b32  	%r187, %r186, 64;
	shl.b32 	%r188, %r3, 4;
	and.b32  	%r189, %r188, 16;
	or.b32  	%r190, %r187, %r189;
	and.b32  	%r191, %r152, 32;
	or.b32  	%r64, %r191, %r190;
	mad.lo.s32 	%r65, %r37, 1572864, %r159;
	or.b32  	%r66, %r65, 2048;
	mul.lo.s32 	%r192, %r183, 20;
	add.s32 	%r193, %r192, %r37;
	mul.wide.u32 	%rd29, %r193, 4;
	mov.u64 	%rd30, shmem;
	add.s64 	%rd31, %rd30, 4352;
	add.s64 	%rd7, %rd31, %rd29;
	add.s32 	%r194, %r184, %r192;
	mul.wide.u32 	%rd32, %r194, 4;
	add.s64 	%rd8, %rd31, %rd32;
	add.s32 	%r195, %r192, 160;
	add.s32 	%r196, %r195, %r37;
	mul.wide.u32 	%rd33, %r196, 4;
	add.s64 	%rd9, %rd31, %rd33;
	add.s32 	%r197, %r184, %r195;
	mul.wide.u32 	%rd34, %r197, 4;
	add.s64 	%rd10, %rd31, %rd34;
	add.s32 	%r198, %r192, 320;
	add.s32 	%r199, %r198, %r37;
	mul.wide.u32 	%rd35, %r199, 4;
	add.s64 	%rd11, %rd31, %rd35;
	add.s32 	%r200, %r184, %r198;
	mul.wide.u32 	%rd36, %r200, 4;
	add.s64 	%rd12, %rd31, %rd36;
	or.b32  	%r201, %r3, 24;
	mul.lo.s32 	%r202, %r201, 20;
	add.s32 	%r203, %r202, %r37;
	mul.wide.u32 	%rd37, %r203, 4;
	add.s64 	%rd13, %rd31, %rd37;
	add.s32 	%r204, %r184, %r202;
	mul.wide.u32 	%rd38, %r204, 4;
	add.s64 	%rd14, %rd31, %rd38;
	mov.u32 	%r667, 0;
$L__BB0_10:                             // %L950
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_12 Depth 2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r205, %r667, %r68;
	setp.ge.s32 	%p12, %r205, %r69;
	@%p12 bra 	$L__BB0_16;
// %bb.11:                              // %L957.preheader
                                        //   in Loop: Header=BB0_10 Depth=1
	mov.u32 	%r261, 0;
	mov.u32 	%r668, %r261;
	mov.u32 	%r669, %r261;
	mov.u32 	%r670, %r261;
	mov.u32 	%r671, %r261;
	mov.u32 	%r672, %r261;
	mov.u32 	%r673, %r261;
	mov.u32 	%r674, %r261;
	mov.u32 	%r675, %r261;
	mov.u32 	%r676, %r261;
	mov.u32 	%r677, %r261;
	mov.u32 	%r678, %r261;
	mov.u32 	%r679, %r261;
	mov.u32 	%r680, %r261;
$L__BB0_12:                             // %L957
                                        //   Parent Loop BB0_10 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_13 Depth 3
	or.b32  	%r208, %r53, %r668;
	add.s32 	%r209, %r208, %r667;
	and.b32  	%r210, %r209, 32759;
	add.s32 	%r211, %r210, %r68;
	mad.lo.s32 	%r212, %r211, 12288, %r54;
	mul.hi.s32 	%r213, %r212, 715827883;
	shr.u32 	%r214, %r213, 31;
	shr.s32 	%r215, %r213, 26;
	add.s32 	%r216, %r215, %r214;
	setp.lt.s32 	%p13, %r212, 0;
	mul.lo.s32 	%r217, %r216, 402653184;
	setp.ne.s32 	%p14, %r217, %r212;
	and.pred  	%p15, %p13, %p14;
	selp.s32 	%r218, -1, 0, %p15;
	add.s32 	%r219, %r216, %r218;
	mad.lo.s32 	%r220, %r219, -402653184, %r212;
	mul.wide.s32 	%rd39, %r220, 4;
	add.s64 	%rd40, %rd2, %rd39;
	ld.global.v4.u32 	{%r221, %r222, %r223, %r224}, [%rd40];
	or.b32  	%r225, %r208, 8;
	add.s32 	%r226, %r225, %r667;
	and.b32  	%r227, %r226, 32767;
	add.s32 	%r228, %r227, %r68;
	mad.lo.s32 	%r229, %r228, 12288, %r54;
	mul.hi.s32 	%r230, %r229, 715827883;
	shr.u32 	%r231, %r230, 31;
	shr.s32 	%r232, %r230, 26;
	add.s32 	%r233, %r232, %r231;
	setp.lt.s32 	%p16, %r229, 0;
	mul.lo.s32 	%r234, %r233, 402653184;
	setp.ne.s32 	%p17, %r234, %r229;
	and.pred  	%p18, %p16, %p17;
	selp.s32 	%r235, -1, 0, %p18;
	add.s32 	%r236, %r233, %r235;
	mad.lo.s32 	%r237, %r236, -402653184, %r229;
	mul.wide.s32 	%rd41, %r237, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.v4.u32 	{%r238, %r239, %r240, %r241}, [%rd42];
	and.b32  	%r242, %r209, 23;
	mul.lo.s32 	%r243, %r242, 17;
	add.s32 	%r244, %r55, %r243;
	mul.wide.u32 	%rd43, %r244, 4;
	add.s64 	%rd45, %rd30, %rd43;
	st.shared.u32 	[%rd45], %r221;
	cvt.u64.u32 	%rd46, %r243;
	cvt.u64.u32 	%rd47, %r55;
	add.s64 	%rd48, %rd47, %rd46;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd50, %rd30, %rd49;
	st.shared.u32 	[%rd50+4], %r222;
	st.shared.u32 	[%rd50+8], %r223;
	st.shared.u32 	[%rd50+12], %r224;
	and.b32  	%r245, %r226, 31;
	mul.lo.s32 	%r246, %r245, 17;
	add.s32 	%r247, %r55, %r246;
	mul.wide.u32 	%rd51, %r247, 4;
	add.s64 	%rd52, %rd30, %rd51;
	st.shared.u32 	[%rd52], %r238;
	cvt.u64.u32 	%rd53, %r246;
	add.s64 	%rd54, %rd47, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd56, %rd30, %rd55;
	st.shared.u32 	[%rd56+4], %r239;
	st.shared.u32 	[%rd56+8], %r240;
	st.shared.u32 	[%rd56+12], %r241;
	bar.sync 	0;
	or.b32  	%r248, %r668, %r52;
	add.s32 	%r18, %r667, %r248;
	mov.u32 	%r681, %r261;
$L__BB0_13:                             // %L2646
                                        //   Parent Loop BB0_10 Depth=1
                                        //     Parent Loop BB0_12 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r383, %r18, %r681;
	shr.s32 	%r384, %r383, 31;
	shr.u32 	%r385, %r384, 27;
	add.s32 	%r386, %r383, %r385;
	and.b32  	%r387, %r386, -32;
	sub.s32 	%r388, %r383, %r387;
	mad.lo.s32 	%r389, %r388, 17, %r55;
	mul.wide.s32 	%rd57, %r389, 4;
	add.s64 	%rd59, %rd30, %rd57;
	ld.shared.u32 	%r250, [%rd59];
	mov.u32 	%r251, 134744072;
	mov.u32 	%r421, 252645135;
	// begin inline asm
	lop3.b32 %r249, %r250, %r251, %r421, 40;
	// end inline asm
	add.s32 	%r390, %r249, 2021161080;
	xor.b32  	%r260, %r390, -2139062144;
	shr.u32 	%r254, %r250, 4;
	// begin inline asm
	lop3.b32 %r253, %r254, %r251, %r421, 40;
	// end inline asm
	add.s32 	%r391, %r253, 2021161080;
	xor.b32  	%r266, %r391, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r257, %r258}, {%r44}, {%r260}, {%r261, %r261};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r263, %r264}, {%r46}, {%r266}, {%r261, %r261};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r269, %r270}, {%r44}, {%r266}, {%r261, %r261};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r275, %r276}, {%r46}, {%r260}, {%r269, %r270};
	// end inline asm
	ld.shared.u32 	%r282, [%rd59+4];
	// begin inline asm
	lop3.b32 %r281, %r282, %r251, %r421, 40;
	// end inline asm
	add.s32 	%r392, %r281, 2021161080;
	xor.b32  	%r292, %r392, -2139062144;
	shr.u32 	%r286, %r282, 4;
	// begin inline asm
	lop3.b32 %r285, %r286, %r251, %r421, 40;
	// end inline asm
	add.s32 	%r393, %r285, 2021161080;
	xor.b32  	%r298, %r393, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r289, %r290}, {%r48}, {%r292}, {%r257, %r258};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r295, %r296}, {%r50}, {%r298}, {%r263, %r264};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r301, %r302}, {%r48}, {%r298}, {%r275, %r276};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r307, %r308}, {%r50}, {%r292}, {%r301, %r302};
	// end inline asm
	ld.shared.u32 	%r314, [%rd59+8];
	// begin inline asm
	lop3.b32 %r313, %r314, %r251, %r421, 40;
	// end inline asm
	add.s32 	%r394, %r313, 2021161080;
	xor.b32  	%r324, %r394, -2139062144;
	shr.u32 	%r318, %r314, 4;
	// begin inline asm
	lop3.b32 %r317, %r318, %r251, %r421, 40;
	// end inline asm
	add.s32 	%r395, %r317, 2021161080;
	xor.b32  	%r330, %r395, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r321, %r322}, {%r45}, {%r324}, {%r289, %r290};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r327, %r328}, {%r47}, {%r330}, {%r295, %r296};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r333, %r334}, {%r45}, {%r330}, {%r307, %r308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r339, %r340}, {%r47}, {%r324}, {%r333, %r334};
	// end inline asm
	ld.shared.u32 	%r346, [%rd59+12];
	// begin inline asm
	lop3.b32 %r345, %r346, %r251, %r421, 40;
	// end inline asm
	add.s32 	%r396, %r345, 2021161080;
	xor.b32  	%r356, %r396, -2139062144;
	shr.u32 	%r350, %r346, 4;
	// begin inline asm
	lop3.b32 %r349, %r350, %r251, %r421, 40;
	// end inline asm
	add.s32 	%r397, %r349, 2021161080;
	xor.b32  	%r362, %r397, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r353, %r354}, {%r49}, {%r356}, {%r321, %r322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r359, %r360}, {%r51}, {%r362}, {%r327, %r328};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r365, %r366}, {%r49}, {%r362}, {%r339, %r340};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r371, %r372}, {%r51}, {%r356}, {%r365, %r366};
	// end inline asm
	sub.s32 	%r398, %r353, %r359;
	add.s32 	%r399, %r398, 2;
	shr.s32 	%r379, %r399, 2;
	add.s32 	%r400, %r371, 2;
	shr.s32 	%r378, %r400, 2;
	sub.s32 	%r401, %r354, %r360;
	add.s32 	%r402, %r401, 2;
	shr.s32 	%r382, %r402, 2;
	add.s32 	%r403, %r372, 2;
	shr.s32 	%r381, %r403, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r377, %r378, %r379;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r380, %r381, %r382;
	// end inline asm
	or.b32  	%r404, %r56, %r681;
	mad.lo.s32 	%r405, %r404, 20, %r57;
	mul.wide.u32 	%rd60, %r405, 4;
	add.s64 	%rd61, %rd30, %rd60;
	st.shared.u32 	[%rd61+4352], %r377;
	st.shared.u32 	[%rd61+4432], %r380;
	add.s32 	%r681, %r681, 8;
	setp.ne.s32 	%p19, %r681, 32;
	@%p19 bra 	$L__BB0_13;
// %bb.14:                              // %L3780
                                        //   in Loop: Header=BB0_12 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r442, [%rd7];
	ld.shared.u32 	%r443, [%rd8];
	ld.shared.u32 	%r444, [%rd9];
	ld.shared.u32 	%r445, [%rd10];
	ld.shared.u32 	%r446, [%rd11];
	ld.shared.u32 	%r447, [%rd12];
	ld.shared.u32 	%r448, [%rd13];
	ld.shared.u32 	%r449, [%rd14];
	cvt.s32.s16 	%r450, %r442;
	shr.s32 	%r451, %r442, 16;
	cvt.s32.s16 	%r452, %r443;
	shr.s32 	%r453, %r443, 16;
	cvt.s32.s16 	%r454, %r444;
	shr.s32 	%r455, %r444, 16;
	cvt.s32.s16 	%r456, %r445;
	shr.s32 	%r457, %r445, 16;
	cvt.s32.s16 	%r458, %r446;
	shr.s32 	%r459, %r446, 16;
	cvt.s32.s16 	%r460, %r447;
	shr.s32 	%r461, %r447, 16;
	cvt.s32.s16 	%r462, %r448;
	shr.s32 	%r463, %r448, 16;
	cvt.s32.s16 	%r464, %r449;
	shr.s32 	%r465, %r449, 16;
	add.s32 	%r466, %r450, %r58;
	shr.s32 	%r467, %r466, %r59;
	add.s32 	%r468, %r451, %r58;
	shr.s32 	%r469, %r468, %r59;
	add.s32 	%r470, %r452, %r60;
	shr.s32 	%r471, %r470, %r61;
	add.s32 	%r472, %r453, %r60;
	shr.s32 	%r473, %r472, %r61;
	add.s32 	%r474, %r454, %r58;
	shr.s32 	%r475, %r474, %r59;
	add.s32 	%r476, %r455, %r58;
	shr.s32 	%r477, %r476, %r59;
	add.s32 	%r478, %r456, %r60;
	shr.s32 	%r479, %r478, %r61;
	add.s32 	%r480, %r457, %r60;
	shr.s32 	%r481, %r480, %r61;
	add.s32 	%r482, %r458, %r58;
	shr.s32 	%r483, %r482, %r59;
	add.s32 	%r484, %r459, %r58;
	shr.s32 	%r485, %r484, %r59;
	add.s32 	%r486, %r460, %r60;
	shr.s32 	%r487, %r486, %r61;
	add.s32 	%r488, %r461, %r60;
	shr.s32 	%r489, %r488, %r61;
	add.s32 	%r490, %r462, %r58;
	shr.s32 	%r491, %r490, %r59;
	add.s32 	%r492, %r463, %r58;
	shr.s32 	%r493, %r492, %r59;
	add.s32 	%r494, %r464, %r60;
	shr.s32 	%r495, %r494, %r61;
	add.s32 	%r496, %r465, %r60;
	shr.s32 	%r497, %r496, %r61;
	max.s32 	%r498, %r467, -7;
	min.s32 	%r411, %r498, 7;
	max.s32 	%r499, %r469, -7;
	min.s32 	%r418, %r499, 7;
	max.s32 	%r500, %r471, -7;
	min.s32 	%r429, %r500, 7;
	max.s32 	%r501, %r473, -7;
	min.s32 	%r436, %r501, 7;
	max.s32 	%r502, %r475, -7;
	min.s32 	%r410, %r502, 7;
	max.s32 	%r503, %r477, -7;
	min.s32 	%r417, %r503, 7;
	max.s32 	%r504, %r479, -7;
	min.s32 	%r428, %r504, 7;
	max.s32 	%r505, %r481, -7;
	min.s32 	%r435, %r505, 7;
	max.s32 	%r506, %r483, -7;
	min.s32 	%r408, %r506, 7;
	max.s32 	%r507, %r485, -7;
	min.s32 	%r415, %r507, 7;
	max.s32 	%r508, %r487, -7;
	min.s32 	%r426, %r508, 7;
	max.s32 	%r509, %r489, -7;
	min.s32 	%r433, %r509, 7;
	max.s32 	%r510, %r491, -7;
	min.s32 	%r407, %r510, 7;
	max.s32 	%r511, %r493, -7;
	min.s32 	%r414, %r511, 7;
	max.s32 	%r512, %r495, -7;
	min.s32 	%r425, %r512, 7;
	max.s32 	%r513, %r497, -7;
	min.s32 	%r432, %r513, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r406, %r407, %r408, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r409, %r410, %r411, %r406;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r413, %r414, %r415, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r416, %r417, %r418, %r413;
	// end inline asm
	shl.b32 	%r423, %r416, 4;
	// begin inline asm
	lop3.b32 %r532, %r421, %r409, %r423, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r424, %r425, %r426, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r427, %r428, %r429, %r424;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r431, %r432, %r433, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r434, %r435, %r436, %r431;
	// end inline asm
	shl.b32 	%r441, %r434, 4;
	// begin inline asm
	lop3.b32 %r540, %r421, %r427, %r441, 202;
	// end inline asm
	setp.eq.s32 	%p20, %r668, 0;
	selp.b32 	%r679, %r532, %r679, %p20;
	selp.b32 	%r680, %r532, %r680, %p20;
	setp.eq.s32 	%p21, %r668, 32;
	selp.b32 	%r671, %r532, %r671, %p21;
	selp.b32 	%r672, %r532, %r672, %p21;
	setp.eq.s32 	%p22, %r668, 64;
	selp.b32 	%r677, %r532, %r677, %p22;
	selp.b32 	%r678, %r532, %r678, %p22;
	selp.b32 	%r675, %r540, %r675, %p20;
	selp.b32 	%r676, %r540, %r676, %p20;
	selp.b32 	%r669, %r540, %r669, %p21;
	selp.b32 	%r670, %r540, %r670, %p21;
	selp.b32 	%r673, %r540, %r673, %p22;
	selp.b32 	%r674, %r540, %r674, %p22;
	add.s32 	%r35, %r668, 32;
	setp.ne.s32 	%p23, %r668, 96;
	mov.u32 	%r668, %r35;
	@%p23 bra 	$L__BB0_12;
// %bb.15:                              // %L5158
                                        //   in Loop: Header=BB0_10 Depth=1
	setp.eq.s32 	%p24, %r63, 0;
	setp.eq.s32 	%p25, %r62, 0;
	// begin inline asm
	prmt.b32 %r514, %r679, %r671, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r680, %r672, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r675, %r669, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r676, %r670, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r677, %r532, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r678, %r532, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r673, %r540, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r674, %r540, %r147;
	// end inline asm
	selp.b32 	%r610, %r518, %r514, %p25;
	shfl.sync.bfly.b32	%r611, %r610, 1, 31, -1;
	selp.b32 	%r547, %r514, %r611, %p25;
	selp.b32 	%r548, %r611, %r518, %p25;
	selp.b32 	%r612, %r526, %r522, %p25;
	shfl.sync.bfly.b32	%r613, %r612, 1, 31, -1;
	selp.b32 	%r555, %r522, %r613, %p25;
	selp.b32 	%r556, %r613, %r526, %p25;
	selp.b32 	%r614, %r534, %r530, %p25;
	shfl.sync.bfly.b32	%r615, %r614, 1, 31, -1;
	selp.b32 	%r563, %r530, %r615, %p25;
	selp.b32 	%r564, %r615, %r534, %p25;
	selp.b32 	%r616, %r542, %r538, %p25;
	shfl.sync.bfly.b32	%r617, %r616, 1, 31, -1;
	selp.b32 	%r571, %r538, %r617, %p25;
	selp.b32 	%r572, %r617, %r542, %p25;
	// begin inline asm
	prmt.b32 %r546, %r547, %r548, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r547, %r548, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r554, %r555, %r556, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r555, %r556, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r563, %r564, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r563, %r564, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r571, %r572, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r571, %r572, %r147;
	// end inline asm
	selp.b32 	%r618, %r562, %r546, %p24;
	shfl.sync.bfly.b32	%r619, %r618, 2, 31, -1;
	selp.b32 	%r579, %r546, %r619, %p24;
	selp.b32 	%r580, %r619, %r562, %p24;
	selp.b32 	%r620, %r570, %r554, %p24;
	shfl.sync.bfly.b32	%r621, %r620, 2, 31, -1;
	selp.b32 	%r587, %r554, %r621, %p24;
	selp.b32 	%r588, %r621, %r570, %p24;
	selp.b32 	%r622, %r566, %r550, %p24;
	shfl.sync.bfly.b32	%r623, %r622, 2, 31, -1;
	selp.b32 	%r595, %r550, %r623, %p24;
	selp.b32 	%r596, %r623, %r566, %p24;
	selp.b32 	%r624, %r574, %r558, %p24;
	shfl.sync.bfly.b32	%r625, %r624, 2, 31, -1;
	selp.b32 	%r603, %r558, %r625, %p24;
	selp.b32 	%r604, %r625, %r574, %p24;
	// begin inline asm
	prmt.b32 %r578, %r579, %r580, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r582, %r579, %r580, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r586, %r587, %r588, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r590, %r587, %r588, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r594, %r595, %r596, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r598, %r595, %r596, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r602, %r603, %r604, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r606, %r603, %r604, %r115;
	// end inline asm
	selp.b32 	%r626, %r594, %r578, %p11;
	shfl.sync.bfly.b32	%r627, %r626, 4, 31, -1;
	selp.b32 	%r628, %r578, %r627, %p11;
	selp.b32 	%r629, %r627, %r594, %p11;
	selp.b32 	%r630, %r602, %r586, %p11;
	shfl.sync.bfly.b32	%r631, %r630, 4, 31, -1;
	selp.b32 	%r632, %r586, %r631, %p11;
	selp.b32 	%r633, %r631, %r602, %p11;
	selp.b32 	%r634, %r598, %r582, %p11;
	shfl.sync.bfly.b32	%r635, %r634, 4, 31, -1;
	selp.b32 	%r636, %r582, %r635, %p11;
	selp.b32 	%r637, %r635, %r598, %p11;
	selp.b32 	%r638, %r606, %r590, %p11;
	shfl.sync.bfly.b32	%r639, %r638, 4, 31, -1;
	selp.b32 	%r640, %r590, %r639, %p11;
	selp.b32 	%r641, %r639, %r606, %p11;
	selp.b32 	%r642, %r636, %r628, %p25;
	shfl.sync.bfly.b32	%r643, %r642, 1, 31, -1;
	selp.b32 	%r644, %r628, %r643, %p25;
	selp.b32 	%r645, %r643, %r636, %p25;
	selp.b32 	%r646, %r640, %r632, %p25;
	shfl.sync.bfly.b32	%r647, %r646, 1, 31, -1;
	selp.b32 	%r648, %r632, %r647, %p25;
	selp.b32 	%r649, %r647, %r640, %p25;
	selp.b32 	%r650, %r637, %r629, %p25;
	shfl.sync.bfly.b32	%r651, %r650, 1, 31, -1;
	selp.b32 	%r652, %r629, %r651, %p25;
	selp.b32 	%r653, %r651, %r637, %p25;
	selp.b32 	%r654, %r641, %r633, %p25;
	shfl.sync.bfly.b32	%r655, %r654, 1, 31, -1;
	selp.b32 	%r656, %r633, %r655, %p25;
	selp.b32 	%r657, %r655, %r641, %p25;
	or.b32  	%r658, %r667, %r64;
	shr.u32 	%r659, %r658, 2;
	and.b32  	%r660, %r659, 2044;
	or.b32  	%r661, %r65, %r660;
	shl.b32 	%r662, %r661, 2;
	cvt.u64.u32 	%rd62, %r662;
	add.s64 	%rd63, %rd4, %rd62;
	st.global.v4.u32 	[%rd63], {%r644, %r652, %r645, %r653};
	or.b32  	%r663, %r66, %r660;
	shl.b32 	%r664, %r663, 2;
	cvt.u64.u32 	%rd64, %r664;
	add.s64 	%rd65, %rd4, %rd64;
	st.global.v4.u32 	[%rd65], {%r648, %r656, %r649, %r657};
	add.s32 	%r36, %r667, 128;
	setp.ne.s32 	%p27, %r667, 32640;
	mov.u32 	%r667, %r36;
	@%p27 bra 	$L__BB0_10;
$L__BB0_16:                             // %L5815
	mov.u32 	%r665, 0;
	st.global.u32 	[%rd6], %r665;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r666, 2;
	st.global.u32 	[%rd6], %r666;
	mov.u64 	%rd66, exception476;
	cvta.global.u64 	%rd67, %rd66;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd67;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r67;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r67;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r67;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L450
	mov.u32 	%r83, 2;
	st.global.u32 	[%rd6], %r83;
	mov.u64 	%rd25, exception476;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r67;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
