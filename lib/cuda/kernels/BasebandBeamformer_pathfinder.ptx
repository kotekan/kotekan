// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception480[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<72>;
	.reg .b32 	%r<685>;
	.reg .b64 	%rd<73>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r68, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r71, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r71, 4351;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r72, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r72, 9471;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r69, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r73, %r1, 5;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r74, %r3, 7;
	or.b32  	%r75, %r73, %r2;
	or.b32  	%r76, %r75, %r74;
	mul.wide.u32 	%rd22, %r76, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r77, 1;
	st.global.u32 	[%rd7], %r77;
	setp.gt.u32 	%p8, %r69, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r70, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r70, %r69;
	setp.gt.s32 	%p10, %r70, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r78, %r70, %r69;
	and.b32  	%r79, %r78, 127;
	setp.eq.s32 	%p12, %r79, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass89
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shr.u32 	%r80, %r2, 3;
	shl.b32 	%r81, %r1, 2;
	or.b32  	%r62, %r80, %r81;
	shl.b32 	%r63, %r3, 5;
	or.b32  	%r82, %r62, %r63;
	mul.wide.u32 	%rd23, %r82, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r83, [%rd24];
	or.b32  	%r84, %r82, 16;
	mul.wide.u32 	%rd25, %r84, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r85, [%rd26];
	add.s32 	%r66, %r83, -3;
	setp.lt.u32 	%p13, %r66, 31;
	add.s32 	%r67, %r85, -3;
	setp.lt.u32 	%p14, %r67, 31;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L543
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r64, %r83, -2;
	add.s32 	%r65, %r85, -2;
	or.b32  	%r87, %r2, %r1;
	setp.ne.s32 	%p1, %r87, 0;
	mul.wide.u32 	%rd29, %r3, 4;
	add.s64 	%rd8, %rd6, %rd29;
	mov.u32 	%r670, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L567
	st.global.u32 	[%rd8], %r670;
$L__BB0_10:                             // %L613
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r154, %r1, 8;
	shl.b32 	%r155, %r2, 3;
	shl.b32 	%r156, %r3, 10;
	and.b32  	%r4, %r2, 4;
	and.b32  	%r157, %r155, 24;
	or.b32  	%r158, %r4, %r157;
	and.b32  	%r159, %r155, 448;
	and.b32  	%r160, %r154, 768;
	or.b32  	%r161, %r160, %r159;
	or.b32  	%r162, %r161, %r156;
	or.b32  	%r163, %r162, %r158;
	shl.b32 	%r164, %r163, 2;
	cvt.u64.u32 	%rd30, %r164;
	add.s64 	%rd31, %rd30, %rd1;
	ld.global.v4.u32 	{%r90, %r91, %r98, %r99}, [%rd31];
	or.b32  	%r165, %r164, 128;
	cvt.u64.u32 	%rd32, %r165;
	add.s64 	%rd33, %rd32, %rd1;
	ld.global.v4.u32 	{%r106, %r107, %r114, %r115}, [%rd33];
	mov.u32 	%r92, 21520;
	// begin inline asm
	prmt.b32 %r122, %r90, %r91, %r92;
	// end inline asm
	mov.u32 	%r96, 30258;
	// begin inline asm
	prmt.b32 %r123, %r90, %r91, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r130, %r98, %r99, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r98, %r99, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r138, %r106, %r107, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r106, %r107, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r146, %r114, %r115, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r114, %r115, %r96;
	// end inline asm
	mov.u32 	%r124, 25152;
	// begin inline asm
	prmt.b32 %r121, %r122, %r123, %r124;
	// end inline asm
	mov.u32 	%r128, 29521;
	// begin inline asm
	prmt.b32 %r125, %r122, %r123, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r130, %r131, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r133, %r130, %r131, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r138, %r139, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r141, %r138, %r139, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r145, %r146, %r147, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r149, %r146, %r147, %r128;
	// end inline asm
	setp.eq.s32 	%p17, %r4, 0;
	selp.b32 	%r166, %r137, %r121, %p17;
	shfl.sync.bfly.b32	%r167, %r166, 4, 31, -1;
	selp.b32 	%r263, %r121, %r167, %p17;
	selp.b32 	%r327, %r167, %r137, %p17;
	selp.b32 	%r168, %r141, %r125, %p17;
	shfl.sync.bfly.b32	%r169, %r168, 4, 31, -1;
	selp.b32 	%r269, %r125, %r169, %p17;
	selp.b32 	%r333, %r169, %r141, %p17;
	selp.b32 	%r170, %r145, %r129, %p17;
	shfl.sync.bfly.b32	%r171, %r170, 4, 31, -1;
	selp.b32 	%r295, %r129, %r171, %p17;
	selp.b32 	%r359, %r171, %r145, %p17;
	selp.b32 	%r172, %r149, %r133, %p17;
	shfl.sync.bfly.b32	%r173, %r172, 4, 31, -1;
	selp.b32 	%r301, %r133, %r173, %p17;
	selp.b32 	%r365, %r173, %r149, %p17;
	shl.b32 	%r174, %r1, 3;
	and.b32  	%r175, %r174, 16;
	shl.b32 	%r176, %r2, 2;
	and.b32  	%r177, %r176, 12;
	shr.u32 	%r13, %r2, 2;
	shl.b32 	%r178, %r1, 4;
	and.b32  	%r179, %r178, 16;
	or.b32  	%r14, %r179, %r13;
	or.b32  	%r180, %r175, %r177;
	or.b32  	%r15, %r180, %r63;
	shr.u32 	%r181, %r1, 1;
	mul.lo.s32 	%r182, %r181, 544;
	or.b32  	%r16, %r182, %r177;
	mul.lo.s32 	%r183, %r181, 640;
	and.b32  	%r184, %r174, 8;
	or.b32  	%r185, %r184, %r13;
	shl.b32 	%r186, %r2, 1;
	and.b32  	%r17, %r186, 6;
	or.b32  	%r18, %r185, %r183;
	and.b32  	%r187, %r2, 7;
	or.b32  	%r188, %r62, 640;
	shl.b32 	%r190, %r77, %r66;
	setp.gt.u32 	%p18, %r66, 31;
	selp.b32 	%r19, 0, %r190, %p18;
	min.u32 	%r20, %r64, 31;
	shl.b32 	%r191, %r77, %r67;
	setp.gt.u32 	%p19, %r67, 31;
	selp.b32 	%r21, 0, %r191, %p19;
	min.u32 	%r22, %r65, 31;
	and.b32  	%r23, %r2, 1;
	and.b32  	%r24, %r2, 2;
	and.b32  	%r192, %r155, 32;
	shl.b32 	%r193, %r2, 4;
	and.b32  	%r194, %r193, 16;
	or.b32  	%r195, %r192, %r194;
	shl.b32 	%r196, %r2, 5;
	and.b32  	%r197, %r196, 64;
	or.b32  	%r25, %r197, %r195;
	shl.b32 	%r198, %r3, 12;
	mad.lo.s32 	%r26, %r62, 1572864, %r198;
	or.b32  	%r27, %r26, 2048;
	mul.lo.s32 	%r199, %r187, 20;
	add.s32 	%r200, %r199, %r62;
	mul.wide.u32 	%rd34, %r200, 4;
	mov.u64 	%rd35, shmem;
	add.s64 	%rd36, %rd35, 4352;
	add.s64 	%rd9, %rd36, %rd34;
	add.s32 	%r201, %r199, %r188;
	mul.wide.u32 	%rd37, %r201, 4;
	add.s64 	%rd10, %rd36, %rd37;
	add.s32 	%r202, %r199, 160;
	add.s32 	%r203, %r202, %r62;
	mul.wide.u32 	%rd38, %r203, 4;
	add.s64 	%rd11, %rd36, %rd38;
	add.s32 	%r204, %r202, %r188;
	mul.wide.u32 	%rd39, %r204, 4;
	add.s64 	%rd12, %rd36, %rd39;
	add.s32 	%r205, %r199, 320;
	add.s32 	%r206, %r205, %r62;
	mul.wide.u32 	%rd40, %r206, 4;
	add.s64 	%rd13, %rd36, %rd40;
	add.s32 	%r207, %r205, %r188;
	mul.wide.u32 	%rd41, %r207, 4;
	add.s64 	%rd14, %rd36, %rd41;
	or.b32  	%r208, %r2, 24;
	mul.lo.s32 	%r209, %r208, 20;
	add.s32 	%r210, %r209, %r62;
	mul.wide.u32 	%rd42, %r210, 4;
	add.s64 	%rd15, %rd36, %rd42;
	add.s32 	%r211, %r209, %r188;
	mul.wide.u32 	%rd43, %r211, 4;
	add.s64 	%rd16, %rd36, %rd43;
	mov.pred 	%p71, 0;
$L__BB0_11:                             // %L1026
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r212, %r670, %r69;
	setp.ge.s32 	%p20, %r212, %r70;
	@%p20 bra 	$L__BB0_17;
// %bb.12:                              // %L1034.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r29, %r14, %r670;
	or.b32  	%r30, %r29, 8;
	mov.u32 	%r265, 0;
	mov.u32 	%r671, %r265;
	mov.u32 	%r672, %r265;
	mov.u32 	%r673, %r265;
	mov.u32 	%r674, %r265;
	mov.u32 	%r675, %r265;
	mov.u32 	%r676, %r265;
	mov.u32 	%r677, %r265;
	mov.u32 	%r678, %r265;
	mov.u32 	%r679, %r265;
	mov.u32 	%r680, %r265;
	mov.u32 	%r681, %r265;
	mov.u32 	%r682, %r265;
	mov.u32 	%r683, %r265;
$L__BB0_13:                             // %L1034
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r215, %r671, %r29;
	and.b32  	%r216, %r215, 32759;
	add.s32 	%r217, %r216, %r69;
	mad.lo.s32 	%r218, %r217, 12288, %r15;
	mul.hi.s32 	%r219, %r218, 715827883;
	shr.u32 	%r220, %r219, 31;
	shr.s32 	%r221, %r219, 26;
	add.s32 	%r222, %r221, %r220;
	setp.lt.s32 	%p21, %r218, 0;
	mul.lo.s32 	%r223, %r222, 402653184;
	setp.ne.s32 	%p22, %r223, %r218;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r224, -1, 0, %p23;
	add.s32 	%r225, %r222, %r224;
	mad.lo.s32 	%r226, %r225, -402653184, %r218;
	mul.wide.s32 	%rd44, %r226, 4;
	add.s64 	%rd45, %rd2, %rd44;
	ld.global.v4.u32 	{%r227, %r228, %r229, %r230}, [%rd45];
	add.s32 	%r231, %r671, %r30;
	and.b32  	%r232, %r231, 32767;
	add.s32 	%r233, %r232, %r69;
	mad.lo.s32 	%r234, %r233, 12288, %r15;
	mul.hi.s32 	%r235, %r234, 715827883;
	shr.u32 	%r236, %r235, 31;
	shr.s32 	%r237, %r235, 26;
	add.s32 	%r238, %r237, %r236;
	setp.lt.s32 	%p24, %r234, 0;
	mul.lo.s32 	%r239, %r238, 402653184;
	setp.ne.s32 	%p25, %r239, %r234;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r240, -1, 0, %p26;
	add.s32 	%r241, %r238, %r240;
	mad.lo.s32 	%r242, %r241, -402653184, %r234;
	mul.wide.s32 	%rd46, %r242, 4;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.v4.u32 	{%r243, %r244, %r245, %r246}, [%rd47];
	and.b32  	%r247, %r215, 23;
	mul.lo.s32 	%r248, %r247, 17;
	add.s32 	%r249, %r16, %r248;
	mul.wide.u32 	%rd48, %r249, 4;
	add.s64 	%rd50, %rd35, %rd48;
	st.shared.u32 	[%rd50], %r227;
	cvt.u64.u32 	%rd51, %r248;
	cvt.u64.u32 	%rd52, %r16;
	add.s64 	%rd53, %rd52, %rd51;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd55, %rd35, %rd54;
	st.shared.u32 	[%rd55+4], %r228;
	st.shared.u32 	[%rd55+8], %r229;
	st.shared.u32 	[%rd55+12], %r230;
	and.b32  	%r250, %r231, 31;
	mul.lo.s32 	%r251, %r250, 17;
	add.s32 	%r252, %r16, %r251;
	mul.wide.u32 	%rd56, %r252, 4;
	add.s64 	%rd57, %rd35, %rd56;
	st.shared.u32 	[%rd57], %r243;
	cvt.u64.u32 	%rd58, %r251;
	add.s64 	%rd59, %rd52, %rd58;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd61, %rd35, %rd60;
	st.shared.u32 	[%rd61+4], %r244;
	st.shared.u32 	[%rd61+8], %r245;
	st.shared.u32 	[%rd61+12], %r246;
	bar.sync 	0;
	mov.u32 	%r684, %r265;
$L__BB0_14:                             // %L2733
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r387, %r13, %r684;
	mad.lo.s32 	%r388, %r387, 17, %r16;
	mul.wide.u32 	%rd62, %r388, 4;
	add.s64 	%rd64, %rd35, %rd62;
	ld.shared.u32 	%r254, [%rd64];
	mov.u32 	%r255, 134744072;
	mov.u32 	%r420, 252645135;
	// begin inline asm
	lop3.b32 %r253, %r254, %r255, %r420, 40;
	// end inline asm
	add.s32 	%r389, %r253, 2021161080;
	xor.b32  	%r264, %r389, -2139062144;
	shr.u32 	%r258, %r254, 4;
	// begin inline asm
	lop3.b32 %r257, %r258, %r255, %r420, 40;
	// end inline asm
	add.s32 	%r390, %r257, 2021161080;
	xor.b32  	%r270, %r390, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r261, %r262}, {%r263}, {%r264}, {%r265, %r265};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r267, %r268}, {%r269}, {%r270}, {%r265, %r265};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r273, %r274}, {%r263}, {%r270}, {%r265, %r265};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r279, %r280}, {%r269}, {%r264}, {%r273, %r274};
	// end inline asm
	ld.shared.u32 	%r286, [%rd64+4];
	// begin inline asm
	lop3.b32 %r285, %r286, %r255, %r420, 40;
	// end inline asm
	add.s32 	%r391, %r285, 2021161080;
	xor.b32  	%r296, %r391, -2139062144;
	shr.u32 	%r290, %r286, 4;
	// begin inline asm
	lop3.b32 %r289, %r290, %r255, %r420, 40;
	// end inline asm
	add.s32 	%r392, %r289, 2021161080;
	xor.b32  	%r302, %r392, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r293, %r294}, {%r295}, {%r296}, {%r261, %r262};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r299, %r300}, {%r301}, {%r302}, {%r267, %r268};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r305, %r306}, {%r295}, {%r302}, {%r279, %r280};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r311, %r312}, {%r301}, {%r296}, {%r305, %r306};
	// end inline asm
	ld.shared.u32 	%r318, [%rd64+8];
	// begin inline asm
	lop3.b32 %r317, %r318, %r255, %r420, 40;
	// end inline asm
	add.s32 	%r393, %r317, 2021161080;
	xor.b32  	%r328, %r393, -2139062144;
	shr.u32 	%r322, %r318, 4;
	// begin inline asm
	lop3.b32 %r321, %r322, %r255, %r420, 40;
	// end inline asm
	add.s32 	%r394, %r321, 2021161080;
	xor.b32  	%r334, %r394, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r325, %r326}, {%r327}, {%r328}, {%r293, %r294};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r331, %r332}, {%r333}, {%r334}, {%r299, %r300};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r337, %r338}, {%r327}, {%r334}, {%r311, %r312};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r343, %r344}, {%r333}, {%r328}, {%r337, %r338};
	// end inline asm
	ld.shared.u32 	%r350, [%rd64+12];
	// begin inline asm
	lop3.b32 %r349, %r350, %r255, %r420, 40;
	// end inline asm
	add.s32 	%r395, %r349, 2021161080;
	xor.b32  	%r360, %r395, -2139062144;
	shr.u32 	%r354, %r350, 4;
	// begin inline asm
	lop3.b32 %r353, %r354, %r255, %r420, 40;
	// end inline asm
	add.s32 	%r396, %r353, 2021161080;
	xor.b32  	%r366, %r396, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r357, %r358}, {%r359}, {%r360}, {%r325, %r326};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r363, %r364}, {%r365}, {%r366}, {%r331, %r332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r369, %r370}, {%r359}, {%r366}, {%r343, %r344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r375, %r376}, {%r365}, {%r360}, {%r369, %r370};
	// end inline asm
	sub.s32 	%r397, %r357, %r363;
	add.s32 	%r398, %r397, 2;
	shr.s32 	%r383, %r398, 2;
	add.s32 	%r399, %r375, 2;
	shr.s32 	%r382, %r399, 2;
	sub.s32 	%r400, %r358, %r364;
	add.s32 	%r401, %r400, 2;
	shr.s32 	%r386, %r401, 2;
	add.s32 	%r402, %r376, 2;
	shr.s32 	%r385, %r402, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r381, %r382, %r383;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r384, %r385, %r386;
	// end inline asm
	or.b32  	%r403, %r17, %r684;
	mad.lo.s32 	%r404, %r403, 20, %r18;
	mul.wide.u32 	%rd65, %r404, 4;
	add.s64 	%rd66, %rd35, %rd65;
	st.shared.u32 	[%rd66+4352], %r381;
	st.shared.u32 	[%rd66+4432], %r384;
	add.s32 	%r684, %r684, 8;
	setp.ne.s32 	%p27, %r684, 32;
	@%p27 bra 	$L__BB0_14;
// %bb.15:                              // %L3868
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r441, [%rd9];
	ld.shared.u32 	%r442, [%rd10];
	ld.shared.u32 	%r443, [%rd11];
	ld.shared.u32 	%r444, [%rd12];
	ld.shared.u32 	%r445, [%rd13];
	ld.shared.u32 	%r446, [%rd14];
	ld.shared.u32 	%r447, [%rd15];
	ld.shared.u32 	%r448, [%rd16];
	cvt.s32.s16 	%r449, %r441;
	shr.s32 	%r450, %r441, 16;
	cvt.s32.s16 	%r451, %r442;
	shr.s32 	%r452, %r442, 16;
	cvt.s32.s16 	%r453, %r443;
	shr.s32 	%r454, %r443, 16;
	cvt.s32.s16 	%r455, %r444;
	shr.s32 	%r456, %r444, 16;
	cvt.s32.s16 	%r457, %r445;
	shr.s32 	%r458, %r445, 16;
	cvt.s32.s16 	%r459, %r446;
	shr.s32 	%r460, %r446, 16;
	cvt.s32.s16 	%r461, %r447;
	shr.s32 	%r462, %r447, 16;
	cvt.s32.s16 	%r463, %r448;
	shr.s32 	%r464, %r448, 16;
	add.s32 	%r465, %r449, %r19;
	shr.s32 	%r466, %r465, %r20;
	add.s32 	%r467, %r450, %r19;
	shr.s32 	%r468, %r467, %r20;
	add.s32 	%r469, %r451, %r21;
	shr.s32 	%r470, %r469, %r22;
	add.s32 	%r471, %r452, %r21;
	shr.s32 	%r472, %r471, %r22;
	add.s32 	%r473, %r453, %r19;
	shr.s32 	%r474, %r473, %r20;
	add.s32 	%r475, %r454, %r19;
	shr.s32 	%r476, %r475, %r20;
	add.s32 	%r477, %r455, %r21;
	shr.s32 	%r478, %r477, %r22;
	add.s32 	%r479, %r456, %r21;
	shr.s32 	%r480, %r479, %r22;
	add.s32 	%r481, %r457, %r19;
	shr.s32 	%r482, %r481, %r20;
	add.s32 	%r483, %r458, %r19;
	shr.s32 	%r484, %r483, %r20;
	add.s32 	%r485, %r459, %r21;
	shr.s32 	%r486, %r485, %r22;
	add.s32 	%r487, %r460, %r21;
	shr.s32 	%r488, %r487, %r22;
	add.s32 	%r489, %r461, %r19;
	shr.s32 	%r490, %r489, %r20;
	add.s32 	%r491, %r462, %r19;
	shr.s32 	%r492, %r491, %r20;
	add.s32 	%r493, %r463, %r21;
	shr.s32 	%r494, %r493, %r22;
	add.s32 	%r495, %r464, %r21;
	shr.s32 	%r496, %r495, %r22;
	max.s32 	%r497, %r466, -7;
	min.s32 	%r410, %r497, 7;
	setp.ne.s32 	%p28, %r410, %r466;
	or.pred  	%p29, %p71, %p28;
	max.s32 	%r498, %r468, -7;
	min.s32 	%r417, %r498, 7;
	setp.ne.s32 	%p30, %r417, %r468;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r499, %r470, -7;
	min.s32 	%r428, %r499, 7;
	setp.ne.s32 	%p32, %r428, %r470;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r500, %r472, -7;
	min.s32 	%r435, %r500, 7;
	setp.ne.s32 	%p34, %r435, %r472;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r501, %r474, -7;
	min.s32 	%r409, %r501, 7;
	setp.ne.s32 	%p36, %r409, %r474;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r502, %r476, -7;
	min.s32 	%r416, %r502, 7;
	setp.ne.s32 	%p38, %r416, %r476;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r503, %r478, -7;
	min.s32 	%r427, %r503, 7;
	setp.ne.s32 	%p40, %r427, %r478;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r504, %r480, -7;
	min.s32 	%r434, %r504, 7;
	setp.ne.s32 	%p42, %r434, %r480;
	or.pred  	%p43, %p42, %p41;
	max.s32 	%r505, %r482, -7;
	min.s32 	%r407, %r505, 7;
	setp.ne.s32 	%p44, %r407, %r482;
	or.pred  	%p45, %p43, %p44;
	max.s32 	%r506, %r484, -7;
	min.s32 	%r414, %r506, 7;
	setp.ne.s32 	%p46, %r414, %r484;
	or.pred  	%p47, %p46, %p45;
	max.s32 	%r507, %r486, -7;
	min.s32 	%r425, %r507, 7;
	setp.ne.s32 	%p48, %r425, %r486;
	or.pred  	%p49, %p47, %p48;
	max.s32 	%r508, %r488, -7;
	min.s32 	%r432, %r508, 7;
	setp.ne.s32 	%p50, %r432, %r488;
	or.pred  	%p51, %p50, %p49;
	max.s32 	%r509, %r490, -7;
	min.s32 	%r406, %r509, 7;
	setp.ne.s32 	%p52, %r406, %r490;
	or.pred  	%p53, %p51, %p52;
	max.s32 	%r510, %r492, -7;
	min.s32 	%r413, %r510, 7;
	setp.ne.s32 	%p54, %r413, %r492;
	or.pred  	%p55, %p54, %p53;
	max.s32 	%r511, %r494, -7;
	min.s32 	%r424, %r511, 7;
	setp.ne.s32 	%p56, %r424, %r494;
	or.pred  	%p57, %p55, %p56;
	max.s32 	%r512, %r496, -7;
	min.s32 	%r431, %r512, 7;
	setp.ne.s32 	%p58, %r431, %r496;
	or.pred  	%p71, %p58, %p57;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r405, %r406, %r407, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r408, %r409, %r410, %r405;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r412, %r413, %r414, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r415, %r416, %r417, %r412;
	// end inline asm
	shl.b32 	%r422, %r415, 4;
	// begin inline asm
	lop3.b32 %r531, %r420, %r408, %r422, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r423, %r424, %r425, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r426, %r427, %r428, %r423;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r430, %r431, %r432, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r433, %r434, %r435, %r430;
	// end inline asm
	shl.b32 	%r440, %r433, 4;
	// begin inline asm
	lop3.b32 %r539, %r420, %r426, %r440, 202;
	// end inline asm
	setp.eq.s32 	%p59, %r671, 0;
	selp.b32 	%r682, %r531, %r682, %p59;
	selp.b32 	%r683, %r531, %r683, %p59;
	setp.eq.s32 	%p60, %r671, 32;
	selp.b32 	%r674, %r531, %r674, %p60;
	selp.b32 	%r675, %r531, %r675, %p60;
	setp.eq.s32 	%p61, %r671, 64;
	selp.b32 	%r680, %r531, %r680, %p61;
	selp.b32 	%r681, %r531, %r681, %p61;
	selp.b32 	%r678, %r539, %r678, %p59;
	selp.b32 	%r679, %r539, %r679, %p59;
	selp.b32 	%r672, %r539, %r672, %p60;
	selp.b32 	%r673, %r539, %r673, %p60;
	selp.b32 	%r676, %r539, %r676, %p61;
	selp.b32 	%r677, %r539, %r677, %p61;
	add.s32 	%r60, %r671, 32;
	setp.ne.s32 	%p62, %r671, 96;
	mov.u32 	%r671, %r60;
	@%p62 bra 	$L__BB0_13;
// %bb.16:                              // %L5290.L5296_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p63, %r24, 0;
	setp.eq.s32 	%p64, %r23, 0;
	// begin inline asm
	prmt.b32 %r513, %r682, %r674, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r517, %r683, %r675, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r521, %r678, %r672, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r679, %r673, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r529, %r680, %r531, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r681, %r531, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r537, %r676, %r539, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r677, %r539, %r128;
	// end inline asm
	selp.b32 	%r609, %r517, %r513, %p64;
	shfl.sync.bfly.b32	%r610, %r609, 1, 31, -1;
	selp.b32 	%r546, %r513, %r610, %p64;
	selp.b32 	%r547, %r610, %r517, %p64;
	selp.b32 	%r611, %r525, %r521, %p64;
	shfl.sync.bfly.b32	%r612, %r611, 1, 31, -1;
	selp.b32 	%r554, %r521, %r612, %p64;
	selp.b32 	%r555, %r612, %r525, %p64;
	selp.b32 	%r613, %r533, %r529, %p64;
	shfl.sync.bfly.b32	%r614, %r613, 1, 31, -1;
	selp.b32 	%r562, %r529, %r614, %p64;
	selp.b32 	%r563, %r614, %r533, %p64;
	selp.b32 	%r615, %r541, %r537, %p64;
	shfl.sync.bfly.b32	%r616, %r615, 1, 31, -1;
	selp.b32 	%r570, %r537, %r616, %p64;
	selp.b32 	%r571, %r616, %r541, %p64;
	// begin inline asm
	prmt.b32 %r545, %r546, %r547, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r549, %r546, %r547, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r553, %r554, %r555, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r557, %r554, %r555, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r561, %r562, %r563, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r565, %r562, %r563, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r569, %r570, %r571, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r573, %r570, %r571, %r128;
	// end inline asm
	selp.b32 	%r617, %r561, %r545, %p63;
	shfl.sync.bfly.b32	%r618, %r617, 2, 31, -1;
	selp.b32 	%r578, %r545, %r618, %p63;
	selp.b32 	%r579, %r618, %r561, %p63;
	selp.b32 	%r619, %r569, %r553, %p63;
	shfl.sync.bfly.b32	%r620, %r619, 2, 31, -1;
	selp.b32 	%r586, %r553, %r620, %p63;
	selp.b32 	%r587, %r620, %r569, %p63;
	selp.b32 	%r621, %r565, %r549, %p63;
	shfl.sync.bfly.b32	%r622, %r621, 2, 31, -1;
	selp.b32 	%r594, %r549, %r622, %p63;
	selp.b32 	%r595, %r622, %r565, %p63;
	selp.b32 	%r623, %r573, %r557, %p63;
	shfl.sync.bfly.b32	%r624, %r623, 2, 31, -1;
	selp.b32 	%r602, %r557, %r624, %p63;
	selp.b32 	%r603, %r624, %r573, %p63;
	// begin inline asm
	prmt.b32 %r577, %r578, %r579, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r581, %r578, %r579, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r585, %r586, %r587, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r589, %r586, %r587, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r593, %r594, %r595, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r597, %r594, %r595, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r601, %r602, %r603, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r605, %r602, %r603, %r96;
	// end inline asm
	selp.b32 	%r625, %r593, %r577, %p17;
	shfl.sync.bfly.b32	%r626, %r625, 4, 31, -1;
	selp.b32 	%r627, %r577, %r626, %p17;
	selp.b32 	%r628, %r626, %r593, %p17;
	selp.b32 	%r629, %r601, %r585, %p17;
	shfl.sync.bfly.b32	%r630, %r629, 4, 31, -1;
	selp.b32 	%r631, %r585, %r630, %p17;
	selp.b32 	%r632, %r630, %r601, %p17;
	selp.b32 	%r633, %r597, %r581, %p17;
	shfl.sync.bfly.b32	%r634, %r633, 4, 31, -1;
	selp.b32 	%r635, %r581, %r634, %p17;
	selp.b32 	%r636, %r634, %r597, %p17;
	selp.b32 	%r637, %r605, %r589, %p17;
	shfl.sync.bfly.b32	%r638, %r637, 4, 31, -1;
	selp.b32 	%r639, %r589, %r638, %p17;
	selp.b32 	%r640, %r638, %r605, %p17;
	selp.b32 	%r641, %r635, %r627, %p64;
	shfl.sync.bfly.b32	%r642, %r641, 1, 31, -1;
	selp.b32 	%r643, %r627, %r642, %p64;
	selp.b32 	%r644, %r642, %r635, %p64;
	selp.b32 	%r645, %r639, %r631, %p64;
	shfl.sync.bfly.b32	%r646, %r645, 1, 31, -1;
	selp.b32 	%r647, %r631, %r646, %p64;
	selp.b32 	%r648, %r646, %r639, %p64;
	selp.b32 	%r649, %r636, %r628, %p64;
	shfl.sync.bfly.b32	%r650, %r649, 1, 31, -1;
	selp.b32 	%r651, %r628, %r650, %p64;
	selp.b32 	%r652, %r650, %r636, %p64;
	selp.b32 	%r653, %r640, %r632, %p64;
	shfl.sync.bfly.b32	%r654, %r653, 1, 31, -1;
	selp.b32 	%r655, %r632, %r654, %p64;
	selp.b32 	%r656, %r654, %r640, %p64;
	or.b32  	%r657, %r670, %r25;
	shr.u32 	%r658, %r657, 2;
	and.b32  	%r659, %r658, 2044;
	or.b32  	%r660, %r26, %r659;
	shl.b32 	%r661, %r660, 2;
	cvt.u64.u32 	%rd67, %r661;
	add.s64 	%rd68, %rd4, %rd67;
	st.global.v4.u32 	[%rd68], {%r643, %r651, %r644, %r652};
	or.b32  	%r662, %r27, %r659;
	shl.b32 	%r663, %r662, 2;
	cvt.u64.u32 	%rd69, %r663;
	add.s64 	%rd70, %rd4, %rd69;
	st.global.v4.u32 	[%rd70], {%r647, %r655, %r648, %r656};
	add.s32 	%r61, %r670, 128;
	setp.ne.s32 	%p66, %r670, 32640;
	mov.u32 	%r670, %r61;
	@%p66 bra 	$L__BB0_11;
$L__BB0_17:                             // %L5956
	selp.u32 	%r664, 1, 0, %p71;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r664, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r665, 1, 0, %p2; 
	}
	setp.eq.s32 	%p67, %r665, 0;
	or.pred  	%p68, %p67, %p1;
	@%p68 bra 	$L__BB0_19;
// %bb.18:                              // %L5987
	st.global.u32 	[%rd8], %r77;
$L__BB0_19:                             // %L6033
	mov.u32 	%r667, 0;
	st.global.u32 	[%rd7], %r667;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r668, 2;
	st.global.u32 	[%rd7], %r668;
	mov.u64 	%rd71, exception480;
	cvta.global.u64 	%rd72, %rd71;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd72;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L450
	mov.u32 	%r86, 3;
	st.global.u32 	[%rd7], %r86;
	mov.u64 	%rd27, exception480;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
