// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception480[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1487[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<72>;
	.reg .b32 	%r<689>;
	.reg .b64 	%rd<71>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r68, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r71, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r71, 4351;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r72, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r72, 9471;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r69, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r73, %r1, 5;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r74, %r2, 7;
	mov.u32 	%r3, %tid.x;
	or.b32  	%r75, %r74, %r3;
	or.b32  	%r76, %r75, %r73;
	mul.wide.u32 	%rd22, %r76, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r77, 1;
	st.global.u32 	[%rd7], %r77;
	setp.gt.u32 	%p8, %r69, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r70, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r70, %r69;
	setp.gt.s32 	%p10, %r70, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r78, %r70, %r69;
	and.b32  	%r79, %r78, 127;
	setp.eq.s32 	%p12, %r79, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass89
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shr.u32 	%r80, %r3, 3;
	shl.b32 	%r81, %r1, 2;
	or.b32  	%r62, %r80, %r81;
	shl.b32 	%r63, %r2, 5;
	or.b32  	%r82, %r62, %r63;
	mul.wide.u32 	%rd23, %r82, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r83, [%rd24];
	or.b32  	%r84, %r82, 16;
	mul.wide.u32 	%rd25, %r84, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r85, [%rd26];
	add.s32 	%r66, %r83, -3;
	setp.lt.u32 	%p13, %r66, 31;
	add.s32 	%r67, %r85, -3;
	setp.lt.u32 	%p14, %r67, 31;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L543
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r64, %r83, -2;
	add.s32 	%r65, %r85, -2;
	or.b32  	%r87, %r3, %r1;
	setp.ne.s32 	%p1, %r87, 0;
	mul.wide.u32 	%rd29, %r2, 4;
	add.s64 	%rd8, %rd6, %rd29;
	mov.u32 	%r674, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L567
	st.global.u32 	[%rd8], %r674;
$L__BB0_10:                             // %L613
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r154, %r1, 8;
	shl.b32 	%r155, %r3, 3;
	and.b32  	%r4, %r3, 4;
	and.b32  	%r156, %r155, 24;
	or.b32  	%r157, %r4, %r156;
	and.b32  	%r158, %r155, 448;
	and.b32  	%r159, %r154, 768;
	or.b32  	%r160, %r159, %r158;
	or.b32  	%r161, %r160, %r157;
	shl.b32 	%r162, %r2, 12;
	shl.b32 	%r163, %r161, 2;
	or.b32  	%r164, %r163, %r162;
	cvt.u64.u32 	%rd30, %r164;
	add.s64 	%rd31, %rd30, %rd1;
	ld.global.v4.u32 	{%r90, %r91, %r98, %r99}, [%rd31];
	ld.global.v4.u32 	{%r106, %r107, %r114, %r115}, [%rd31+128];
	mov.u32 	%r92, 21520;
	// begin inline asm
	prmt.b32 %r122, %r90, %r91, %r92;
	// end inline asm
	mov.u32 	%r96, 30258;
	// begin inline asm
	prmt.b32 %r123, %r90, %r91, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r130, %r98, %r99, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r98, %r99, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r138, %r106, %r107, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r106, %r107, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r146, %r114, %r115, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r114, %r115, %r96;
	// end inline asm
	mov.u32 	%r124, 25152;
	// begin inline asm
	prmt.b32 %r121, %r122, %r123, %r124;
	// end inline asm
	mov.u32 	%r128, 29521;
	// begin inline asm
	prmt.b32 %r125, %r122, %r123, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r130, %r131, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r133, %r130, %r131, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r138, %r139, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r141, %r138, %r139, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r145, %r146, %r147, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r149, %r146, %r147, %r128;
	// end inline asm
	setp.eq.s32 	%p17, %r4, 0;
	selp.b32 	%r165, %r137, %r121, %p17;
	shfl.sync.bfly.b32	%r166, %r165, 4, 31, -1;
	selp.b32 	%r260, %r121, %r166, %p17;
	selp.b32 	%r324, %r166, %r137, %p17;
	selp.b32 	%r167, %r141, %r125, %p17;
	shfl.sync.bfly.b32	%r168, %r167, 4, 31, -1;
	selp.b32 	%r266, %r125, %r168, %p17;
	selp.b32 	%r330, %r168, %r141, %p17;
	selp.b32 	%r169, %r145, %r129, %p17;
	shfl.sync.bfly.b32	%r170, %r169, 4, 31, -1;
	selp.b32 	%r292, %r129, %r170, %p17;
	selp.b32 	%r356, %r170, %r145, %p17;
	selp.b32 	%r171, %r149, %r133, %p17;
	shfl.sync.bfly.b32	%r172, %r171, 4, 31, -1;
	selp.b32 	%r298, %r133, %r172, %p17;
	selp.b32 	%r362, %r172, %r149, %p17;
	shr.u32 	%r13, %r3, 2;
	shl.b32 	%r173, %r1, 4;
	and.b32  	%r174, %r173, 16;
	or.b32  	%r14, %r174, %r13;
	shl.b32 	%r175, %r3, 2;
	and.b32  	%r176, %r175, 12;
	shl.b32 	%r177, %r1, 3;
	and.b32  	%r178, %r177, 16;
	or.b32  	%r179, %r176, %r63;
	or.b32  	%r15, %r179, %r178;
	shr.u32 	%r180, %r1, 1;
	mul.lo.s32 	%r181, %r180, 544;
	or.b32  	%r16, %r181, %r176;
	and.b32  	%r182, %r177, 8;
	or.b32  	%r183, %r182, %r13;
	shl.b32 	%r184, %r3, 1;
	and.b32  	%r17, %r184, 6;
	mul.lo.s32 	%r185, %r180, 640;
	or.b32  	%r18, %r183, %r185;
	and.b32  	%r186, %r3, 7;
	or.b32  	%r187, %r62, 640;
	shl.b32 	%r189, %r77, %r66;
	setp.gt.u32 	%p18, %r66, 31;
	selp.b32 	%r19, 0, %r189, %p18;
	min.u32 	%r20, %r64, 31;
	shl.b32 	%r190, %r77, %r67;
	setp.gt.u32 	%p19, %r67, 31;
	selp.b32 	%r21, 0, %r190, %p19;
	min.u32 	%r22, %r65, 31;
	and.b32  	%r23, %r3, 1;
	and.b32  	%r24, %r3, 2;
	shl.b32 	%r191, %r3, 5;
	and.b32  	%r192, %r191, 64;
	and.b32  	%r193, %r155, 32;
	or.b32  	%r25, %r192, %r193;
	shl.b32 	%r194, %r3, 4;
	and.b32  	%r26, %r194, 16;
	mad.lo.s32 	%r27, %r62, 1572864, %r162;
	or.b32  	%r28, %r27, 2048;
	or.b32  	%r195, %r3, 24;
	mul.lo.s32 	%r196, %r195, 20;
	add.s32 	%r197, %r187, %r196;
	mul.wide.u32 	%rd32, %r197, 4;
	mov.u64 	%rd33, shmem;
	add.s64 	%rd34, %rd33, 4352;
	add.s64 	%rd9, %rd34, %rd32;
	mul.lo.s32 	%r198, %r186, 20;
	add.s32 	%r199, %r198, %r62;
	mul.wide.u32 	%rd35, %r199, 4;
	add.s64 	%rd10, %rd34, %rd35;
	add.s32 	%r200, %r187, %r198;
	mul.wide.u32 	%rd36, %r200, 4;
	add.s64 	%rd11, %rd34, %rd36;
	add.s32 	%r201, %r198, 160;
	add.s32 	%r202, %r201, %r62;
	mul.wide.u32 	%rd37, %r202, 4;
	add.s64 	%rd12, %rd34, %rd37;
	add.s32 	%r203, %r187, %r201;
	mul.wide.u32 	%rd38, %r203, 4;
	add.s64 	%rd13, %rd34, %rd38;
	add.s32 	%r204, %r198, 320;
	add.s32 	%r205, %r204, %r62;
	mul.wide.u32 	%rd39, %r205, 4;
	add.s64 	%rd14, %rd34, %rd39;
	add.s32 	%r206, %r187, %r204;
	mul.wide.u32 	%rd40, %r206, 4;
	add.s64 	%rd15, %rd34, %rd40;
	add.s32 	%r207, %r196, %r62;
	mul.wide.u32 	%rd41, %r207, 4;
	add.s64 	%rd16, %rd34, %rd41;
	mov.pred 	%p71, 0;
$L__BB0_11:                             // %L1026
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r208, %r674, %r69;
	setp.ge.s32 	%p20, %r208, %r70;
	@%p20 bra 	$L__BB0_17;
// %bb.12:                              // %L1034.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	mov.u32 	%r262, 0;
	mov.u32 	%r675, %r262;
	mov.u32 	%r676, %r262;
	mov.u32 	%r677, %r262;
	mov.u32 	%r678, %r262;
	mov.u32 	%r679, %r262;
	mov.u32 	%r680, %r262;
	mov.u32 	%r681, %r262;
	mov.u32 	%r682, %r262;
	mov.u32 	%r683, %r262;
	mov.u32 	%r684, %r262;
	mov.u32 	%r685, %r262;
	mov.u32 	%r686, %r262;
	mov.u32 	%r687, %r262;
$L__BB0_13:                             // %L1034
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	or.b32  	%r211, %r14, %r675;
	add.s32 	%r212, %r211, %r674;
	and.b32  	%r213, %r212, 32759;
	add.s32 	%r214, %r213, %r69;
	mad.lo.s32 	%r215, %r214, 12288, %r15;
	mul.hi.s32 	%r216, %r215, 715827883;
	shr.u32 	%r217, %r216, 31;
	shr.s32 	%r218, %r216, 26;
	add.s32 	%r219, %r218, %r217;
	setp.lt.s32 	%p21, %r215, 0;
	mul.lo.s32 	%r220, %r219, 402653184;
	setp.ne.s32 	%p22, %r220, %r215;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r221, -1, 0, %p23;
	add.s32 	%r222, %r219, %r221;
	mad.lo.s32 	%r223, %r222, -402653184, %r215;
	mul.wide.s32 	%rd42, %r223, 4;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.v4.u32 	{%r224, %r225, %r226, %r227}, [%rd43];
	or.b32  	%r228, %r212, 8;
	and.b32  	%r229, %r228, 32767;
	add.s32 	%r230, %r229, %r69;
	mad.lo.s32 	%r231, %r230, 12288, %r15;
	mul.hi.s32 	%r232, %r231, 715827883;
	shr.u32 	%r233, %r232, 31;
	shr.s32 	%r234, %r232, 26;
	add.s32 	%r235, %r234, %r233;
	setp.lt.s32 	%p24, %r231, 0;
	mul.lo.s32 	%r236, %r235, 402653184;
	setp.ne.s32 	%p25, %r236, %r231;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r237, -1, 0, %p26;
	add.s32 	%r238, %r235, %r237;
	mad.lo.s32 	%r239, %r238, -402653184, %r231;
	mul.wide.s32 	%rd44, %r239, 4;
	add.s64 	%rd45, %rd2, %rd44;
	ld.global.v4.u32 	{%r240, %r241, %r242, %r243}, [%rd45];
	and.b32  	%r244, %r212, 23;
	mul.lo.s32 	%r245, %r244, 17;
	add.s32 	%r246, %r16, %r245;
	mul.wide.u32 	%rd46, %r246, 4;
	add.s64 	%rd48, %rd33, %rd46;
	st.shared.u32 	[%rd48], %r224;
	cvt.u64.u32 	%rd49, %r245;
	cvt.u64.u32 	%rd50, %r16;
	add.s64 	%rd51, %rd50, %rd49;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd53, %rd33, %rd52;
	st.shared.u32 	[%rd53+4], %r225;
	st.shared.u32 	[%rd53+8], %r226;
	st.shared.u32 	[%rd53+12], %r227;
	and.b32  	%r247, %r228, 31;
	mul.lo.s32 	%r248, %r247, 17;
	add.s32 	%r249, %r16, %r248;
	mul.wide.u32 	%rd54, %r249, 4;
	add.s64 	%rd55, %rd33, %rd54;
	st.shared.u32 	[%rd55], %r240;
	cvt.u64.u32 	%rd56, %r248;
	add.s64 	%rd57, %rd50, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd59, %rd33, %rd58;
	st.shared.u32 	[%rd59+4], %r241;
	st.shared.u32 	[%rd59+8], %r242;
	st.shared.u32 	[%rd59+12], %r243;
	bar.sync 	0;
	add.s32 	%r43, %r675, %r674;
	mov.u32 	%r688, %r262;
$L__BB0_14:                             // %L2733
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r384, %r688, %r13;
	add.s32 	%r385, %r43, %r384;
	shr.s32 	%r386, %r385, 31;
	shr.u32 	%r387, %r386, 27;
	add.s32 	%r388, %r385, %r387;
	and.b32  	%r389, %r388, -32;
	sub.s32 	%r390, %r385, %r389;
	mad.lo.s32 	%r391, %r390, 17, %r16;
	mul.wide.s32 	%rd60, %r391, 4;
	add.s64 	%rd62, %rd33, %rd60;
	ld.shared.u32 	%r251, [%rd62];
	mov.u32 	%r252, 134744072;
	mov.u32 	%r423, 252645135;
	// begin inline asm
	lop3.b32 %r250, %r251, %r252, %r423, 40;
	// end inline asm
	add.s32 	%r392, %r250, 2021161080;
	xor.b32  	%r261, %r392, -2139062144;
	shr.u32 	%r255, %r251, 4;
	// begin inline asm
	lop3.b32 %r254, %r255, %r252, %r423, 40;
	// end inline asm
	add.s32 	%r393, %r254, 2021161080;
	xor.b32  	%r267, %r393, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r258, %r259}, {%r260}, {%r261}, {%r262, %r262};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r264, %r265}, {%r266}, {%r267}, {%r262, %r262};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r270, %r271}, {%r260}, {%r267}, {%r262, %r262};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r276, %r277}, {%r266}, {%r261}, {%r270, %r271};
	// end inline asm
	ld.shared.u32 	%r283, [%rd62+4];
	// begin inline asm
	lop3.b32 %r282, %r283, %r252, %r423, 40;
	// end inline asm
	add.s32 	%r394, %r282, 2021161080;
	xor.b32  	%r293, %r394, -2139062144;
	shr.u32 	%r287, %r283, 4;
	// begin inline asm
	lop3.b32 %r286, %r287, %r252, %r423, 40;
	// end inline asm
	add.s32 	%r395, %r286, 2021161080;
	xor.b32  	%r299, %r395, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r290, %r291}, {%r292}, {%r293}, {%r258, %r259};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r296, %r297}, {%r298}, {%r299}, {%r264, %r265};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r302, %r303}, {%r292}, {%r299}, {%r276, %r277};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r308, %r309}, {%r298}, {%r293}, {%r302, %r303};
	// end inline asm
	ld.shared.u32 	%r315, [%rd62+8];
	// begin inline asm
	lop3.b32 %r314, %r315, %r252, %r423, 40;
	// end inline asm
	add.s32 	%r396, %r314, 2021161080;
	xor.b32  	%r325, %r396, -2139062144;
	shr.u32 	%r319, %r315, 4;
	// begin inline asm
	lop3.b32 %r318, %r319, %r252, %r423, 40;
	// end inline asm
	add.s32 	%r397, %r318, 2021161080;
	xor.b32  	%r331, %r397, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r322, %r323}, {%r324}, {%r325}, {%r290, %r291};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r328, %r329}, {%r330}, {%r331}, {%r296, %r297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r334, %r335}, {%r324}, {%r331}, {%r308, %r309};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r340, %r341}, {%r330}, {%r325}, {%r334, %r335};
	// end inline asm
	ld.shared.u32 	%r347, [%rd62+12];
	// begin inline asm
	lop3.b32 %r346, %r347, %r252, %r423, 40;
	// end inline asm
	add.s32 	%r398, %r346, 2021161080;
	xor.b32  	%r357, %r398, -2139062144;
	shr.u32 	%r351, %r347, 4;
	// begin inline asm
	lop3.b32 %r350, %r351, %r252, %r423, 40;
	// end inline asm
	add.s32 	%r399, %r350, 2021161080;
	xor.b32  	%r363, %r399, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r354, %r355}, {%r356}, {%r357}, {%r322, %r323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r360, %r361}, {%r362}, {%r363}, {%r328, %r329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r366, %r367}, {%r356}, {%r363}, {%r340, %r341};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r372, %r373}, {%r362}, {%r357}, {%r366, %r367};
	// end inline asm
	sub.s32 	%r400, %r354, %r360;
	add.s32 	%r401, %r400, 2;
	shr.s32 	%r380, %r401, 2;
	add.s32 	%r402, %r372, 2;
	shr.s32 	%r379, %r402, 2;
	sub.s32 	%r403, %r355, %r361;
	add.s32 	%r404, %r403, 2;
	shr.s32 	%r383, %r404, 2;
	add.s32 	%r405, %r373, 2;
	shr.s32 	%r382, %r405, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r378, %r379, %r380;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r381, %r382, %r383;
	// end inline asm
	or.b32  	%r406, %r688, %r17;
	mad.lo.s32 	%r407, %r406, 20, %r18;
	mul.wide.u32 	%rd63, %r407, 4;
	add.s64 	%rd64, %rd33, %rd63;
	st.shared.u32 	[%rd64+4352], %r378;
	st.shared.u32 	[%rd64+4432], %r381;
	add.s32 	%r688, %r688, 8;
	setp.ne.s32 	%p27, %r688, 32;
	@%p27 bra 	$L__BB0_14;
// %bb.15:                              // %L3868
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r444, [%rd10];
	ld.shared.u32 	%r445, [%rd11];
	ld.shared.u32 	%r446, [%rd12];
	ld.shared.u32 	%r447, [%rd13];
	ld.shared.u32 	%r448, [%rd14];
	ld.shared.u32 	%r449, [%rd15];
	ld.shared.u32 	%r450, [%rd16];
	ld.shared.u32 	%r451, [%rd9];
	cvt.s32.s16 	%r452, %r444;
	shr.s32 	%r453, %r444, 16;
	cvt.s32.s16 	%r454, %r445;
	shr.s32 	%r455, %r445, 16;
	cvt.s32.s16 	%r456, %r446;
	shr.s32 	%r457, %r446, 16;
	cvt.s32.s16 	%r458, %r447;
	shr.s32 	%r459, %r447, 16;
	cvt.s32.s16 	%r460, %r448;
	shr.s32 	%r461, %r448, 16;
	cvt.s32.s16 	%r462, %r449;
	shr.s32 	%r463, %r449, 16;
	cvt.s32.s16 	%r464, %r450;
	shr.s32 	%r465, %r450, 16;
	cvt.s32.s16 	%r466, %r451;
	shr.s32 	%r467, %r451, 16;
	add.s32 	%r468, %r452, %r19;
	shr.s32 	%r469, %r468, %r20;
	add.s32 	%r470, %r453, %r19;
	shr.s32 	%r471, %r470, %r20;
	add.s32 	%r472, %r454, %r21;
	shr.s32 	%r473, %r472, %r22;
	add.s32 	%r474, %r455, %r21;
	shr.s32 	%r475, %r474, %r22;
	add.s32 	%r476, %r456, %r19;
	shr.s32 	%r477, %r476, %r20;
	add.s32 	%r478, %r457, %r19;
	shr.s32 	%r479, %r478, %r20;
	add.s32 	%r480, %r458, %r21;
	shr.s32 	%r481, %r480, %r22;
	add.s32 	%r482, %r459, %r21;
	shr.s32 	%r483, %r482, %r22;
	add.s32 	%r484, %r460, %r19;
	shr.s32 	%r485, %r484, %r20;
	add.s32 	%r486, %r461, %r19;
	shr.s32 	%r487, %r486, %r20;
	add.s32 	%r488, %r462, %r21;
	shr.s32 	%r489, %r488, %r22;
	add.s32 	%r490, %r463, %r21;
	shr.s32 	%r491, %r490, %r22;
	add.s32 	%r492, %r464, %r19;
	shr.s32 	%r493, %r492, %r20;
	add.s32 	%r494, %r465, %r19;
	shr.s32 	%r495, %r494, %r20;
	add.s32 	%r496, %r466, %r21;
	shr.s32 	%r497, %r496, %r22;
	add.s32 	%r498, %r467, %r21;
	shr.s32 	%r499, %r498, %r22;
	max.s32 	%r500, %r469, -7;
	min.s32 	%r413, %r500, 7;
	setp.ne.s32 	%p28, %r413, %r469;
	or.pred  	%p29, %p71, %p28;
	max.s32 	%r501, %r471, -7;
	min.s32 	%r420, %r501, 7;
	setp.ne.s32 	%p30, %r420, %r471;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r502, %r473, -7;
	min.s32 	%r431, %r502, 7;
	setp.ne.s32 	%p32, %r431, %r473;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r503, %r475, -7;
	min.s32 	%r438, %r503, 7;
	setp.ne.s32 	%p34, %r438, %r475;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r504, %r477, -7;
	min.s32 	%r412, %r504, 7;
	setp.ne.s32 	%p36, %r412, %r477;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r505, %r479, -7;
	min.s32 	%r419, %r505, 7;
	setp.ne.s32 	%p38, %r419, %r479;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r506, %r481, -7;
	min.s32 	%r430, %r506, 7;
	setp.ne.s32 	%p40, %r430, %r481;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r507, %r483, -7;
	min.s32 	%r437, %r507, 7;
	setp.ne.s32 	%p42, %r437, %r483;
	or.pred  	%p43, %p42, %p41;
	max.s32 	%r508, %r485, -7;
	min.s32 	%r410, %r508, 7;
	setp.ne.s32 	%p44, %r410, %r485;
	or.pred  	%p45, %p43, %p44;
	max.s32 	%r509, %r487, -7;
	min.s32 	%r417, %r509, 7;
	setp.ne.s32 	%p46, %r417, %r487;
	or.pred  	%p47, %p46, %p45;
	max.s32 	%r510, %r489, -7;
	min.s32 	%r428, %r510, 7;
	setp.ne.s32 	%p48, %r428, %r489;
	or.pred  	%p49, %p47, %p48;
	max.s32 	%r511, %r491, -7;
	min.s32 	%r435, %r511, 7;
	setp.ne.s32 	%p50, %r435, %r491;
	or.pred  	%p51, %p50, %p49;
	max.s32 	%r512, %r493, -7;
	min.s32 	%r409, %r512, 7;
	setp.ne.s32 	%p52, %r409, %r493;
	or.pred  	%p53, %p51, %p52;
	max.s32 	%r513, %r495, -7;
	min.s32 	%r416, %r513, 7;
	setp.ne.s32 	%p54, %r416, %r495;
	or.pred  	%p55, %p54, %p53;
	max.s32 	%r514, %r497, -7;
	min.s32 	%r427, %r514, 7;
	setp.ne.s32 	%p56, %r427, %r497;
	or.pred  	%p57, %p55, %p56;
	max.s32 	%r515, %r499, -7;
	min.s32 	%r434, %r515, 7;
	setp.ne.s32 	%p58, %r434, %r499;
	or.pred  	%p71, %p58, %p57;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r408, %r409, %r410, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r411, %r412, %r413, %r408;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r415, %r416, %r417, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r418, %r419, %r420, %r415;
	// end inline asm
	shl.b32 	%r425, %r418, 4;
	// begin inline asm
	lop3.b32 %r534, %r423, %r411, %r425, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r426, %r427, %r428, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r429, %r430, %r431, %r426;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r433, %r434, %r435, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r436, %r437, %r438, %r433;
	// end inline asm
	shl.b32 	%r443, %r436, 4;
	// begin inline asm
	lop3.b32 %r542, %r423, %r429, %r443, 202;
	// end inline asm
	setp.eq.s32 	%p59, %r675, 0;
	selp.b32 	%r686, %r534, %r686, %p59;
	selp.b32 	%r687, %r534, %r687, %p59;
	setp.eq.s32 	%p60, %r675, 32;
	selp.b32 	%r678, %r534, %r678, %p60;
	selp.b32 	%r679, %r534, %r679, %p60;
	setp.eq.s32 	%p61, %r675, 64;
	selp.b32 	%r684, %r534, %r684, %p61;
	selp.b32 	%r685, %r534, %r685, %p61;
	selp.b32 	%r682, %r542, %r682, %p59;
	selp.b32 	%r683, %r542, %r683, %p59;
	selp.b32 	%r676, %r542, %r676, %p60;
	selp.b32 	%r677, %r542, %r677, %p60;
	selp.b32 	%r680, %r542, %r680, %p61;
	selp.b32 	%r681, %r542, %r681, %p61;
	add.s32 	%r60, %r675, 32;
	setp.ne.s32 	%p62, %r675, 96;
	mov.u32 	%r675, %r60;
	@%p62 bra 	$L__BB0_13;
// %bb.16:                              // %L5290.L5296_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p63, %r24, 0;
	setp.eq.s32 	%p64, %r23, 0;
	// begin inline asm
	prmt.b32 %r516, %r686, %r678, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r520, %r687, %r679, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r524, %r682, %r676, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r528, %r683, %r677, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r532, %r684, %r534, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r536, %r685, %r534, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r540, %r680, %r542, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r544, %r681, %r542, %r128;
	// end inline asm
	selp.b32 	%r612, %r520, %r516, %p64;
	shfl.sync.bfly.b32	%r613, %r612, 1, 31, -1;
	selp.b32 	%r549, %r516, %r613, %p64;
	selp.b32 	%r550, %r613, %r520, %p64;
	selp.b32 	%r614, %r528, %r524, %p64;
	shfl.sync.bfly.b32	%r615, %r614, 1, 31, -1;
	selp.b32 	%r557, %r524, %r615, %p64;
	selp.b32 	%r558, %r615, %r528, %p64;
	selp.b32 	%r616, %r536, %r532, %p64;
	shfl.sync.bfly.b32	%r617, %r616, 1, 31, -1;
	selp.b32 	%r565, %r532, %r617, %p64;
	selp.b32 	%r566, %r617, %r536, %p64;
	selp.b32 	%r618, %r544, %r540, %p64;
	shfl.sync.bfly.b32	%r619, %r618, 1, 31, -1;
	selp.b32 	%r573, %r540, %r619, %p64;
	selp.b32 	%r574, %r619, %r544, %p64;
	// begin inline asm
	prmt.b32 %r548, %r549, %r550, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r552, %r549, %r550, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r556, %r557, %r558, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r560, %r557, %r558, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r564, %r565, %r566, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r568, %r565, %r566, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r572, %r573, %r574, %r124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r576, %r573, %r574, %r128;
	// end inline asm
	selp.b32 	%r620, %r564, %r548, %p63;
	shfl.sync.bfly.b32	%r621, %r620, 2, 31, -1;
	selp.b32 	%r581, %r548, %r621, %p63;
	selp.b32 	%r582, %r621, %r564, %p63;
	selp.b32 	%r622, %r572, %r556, %p63;
	shfl.sync.bfly.b32	%r623, %r622, 2, 31, -1;
	selp.b32 	%r589, %r556, %r623, %p63;
	selp.b32 	%r590, %r623, %r572, %p63;
	selp.b32 	%r624, %r568, %r552, %p63;
	shfl.sync.bfly.b32	%r625, %r624, 2, 31, -1;
	selp.b32 	%r597, %r552, %r625, %p63;
	selp.b32 	%r598, %r625, %r568, %p63;
	selp.b32 	%r626, %r576, %r560, %p63;
	shfl.sync.bfly.b32	%r627, %r626, 2, 31, -1;
	selp.b32 	%r605, %r560, %r627, %p63;
	selp.b32 	%r606, %r627, %r576, %p63;
	// begin inline asm
	prmt.b32 %r580, %r581, %r582, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r584, %r581, %r582, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r589, %r590, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r592, %r589, %r590, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r597, %r598, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r600, %r597, %r598, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r605, %r606, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r608, %r605, %r606, %r96;
	// end inline asm
	selp.b32 	%r628, %r596, %r580, %p17;
	shfl.sync.bfly.b32	%r629, %r628, 4, 31, -1;
	selp.b32 	%r630, %r580, %r629, %p17;
	selp.b32 	%r631, %r629, %r596, %p17;
	selp.b32 	%r632, %r604, %r588, %p17;
	shfl.sync.bfly.b32	%r633, %r632, 4, 31, -1;
	selp.b32 	%r634, %r588, %r633, %p17;
	selp.b32 	%r635, %r633, %r604, %p17;
	selp.b32 	%r636, %r600, %r584, %p17;
	shfl.sync.bfly.b32	%r637, %r636, 4, 31, -1;
	selp.b32 	%r638, %r584, %r637, %p17;
	selp.b32 	%r639, %r637, %r600, %p17;
	selp.b32 	%r640, %r608, %r592, %p17;
	shfl.sync.bfly.b32	%r641, %r640, 4, 31, -1;
	selp.b32 	%r642, %r592, %r641, %p17;
	selp.b32 	%r643, %r641, %r608, %p17;
	selp.b32 	%r644, %r638, %r630, %p64;
	shfl.sync.bfly.b32	%r645, %r644, 1, 31, -1;
	selp.b32 	%r646, %r630, %r645, %p64;
	selp.b32 	%r647, %r645, %r638, %p64;
	selp.b32 	%r648, %r642, %r634, %p64;
	shfl.sync.bfly.b32	%r649, %r648, 1, 31, -1;
	selp.b32 	%r650, %r634, %r649, %p64;
	selp.b32 	%r651, %r649, %r642, %p64;
	selp.b32 	%r652, %r639, %r631, %p64;
	shfl.sync.bfly.b32	%r653, %r652, 1, 31, -1;
	selp.b32 	%r654, %r631, %r653, %p64;
	selp.b32 	%r655, %r653, %r639, %p64;
	selp.b32 	%r656, %r643, %r635, %p64;
	shfl.sync.bfly.b32	%r657, %r656, 1, 31, -1;
	selp.b32 	%r658, %r635, %r657, %p64;
	selp.b32 	%r659, %r657, %r643, %p64;
	or.b32  	%r660, %r674, %r25;
	or.b32  	%r661, %r660, %r26;
	shr.u32 	%r662, %r661, 2;
	and.b32  	%r663, %r662, 2044;
	or.b32  	%r664, %r27, %r663;
	shl.b32 	%r665, %r664, 2;
	cvt.u64.u32 	%rd65, %r665;
	add.s64 	%rd66, %rd4, %rd65;
	st.global.v4.u32 	[%rd66], {%r646, %r654, %r647, %r655};
	or.b32  	%r666, %r28, %r663;
	shl.b32 	%r667, %r666, 2;
	cvt.u64.u32 	%rd67, %r667;
	add.s64 	%rd68, %rd4, %rd67;
	st.global.v4.u32 	[%rd68], {%r650, %r658, %r651, %r659};
	add.s32 	%r61, %r674, 128;
	setp.ne.s32 	%p66, %r674, 32640;
	mov.u32 	%r674, %r61;
	@%p66 bra 	$L__BB0_11;
$L__BB0_17:                             // %L5956
	selp.u32 	%r668, 1, 0, %p71;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r668, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r669, 1, 0, %p2; 
	}
	setp.eq.s32 	%p67, %r669, 0;
	or.pred  	%p68, %p67, %p1;
	@%p68 bra 	$L__BB0_19;
// %bb.18:                              // %L5987
	st.global.u32 	[%rd8], %r77;
$L__BB0_19:                             // %L6033
	mov.u32 	%r671, 0;
	st.global.u32 	[%rd7], %r671;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r672, 2;
	st.global.u32 	[%rd7], %r672;
	mov.u64 	%rd69, exception480;
	cvta.global.u64 	%rd70, %rd69;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd70;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1487;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1487;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L450
	mov.u32 	%r86, 3;
	st.global.u32 	[%rd7], %r86;
	mov.u64 	%rd27, exception480;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
