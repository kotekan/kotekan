// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception500[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<16>;
	.reg .b32 	%r<670>;
	.reg .b64 	%rd<68>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r70, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r71, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r71, 4351;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r72, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r72, 9471;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r73, %r2, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r74, %r3, 7;
	or.b32  	%r75, %r73, %r1;
	or.b32  	%r76, %r75, %r74;
	mul.wide.u32 	%rd20, %r76, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r77, 1;
	st.global.u32 	[%rd6], %r77;
	shr.u32 	%r78, %r1, 3;
	shl.b32 	%r79, %r2, 2;
	or.b32  	%r4, %r78, %r79;
	shl.b32 	%r80, %r3, 1;
	and.b32  	%r5, %r80, 4064;
	or.b32  	%r81, %r4, %r5;
	mul.wide.u32 	%rd21, %r81, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r6, [%rd22];
	or.b32  	%r82, %r81, 16;
	mul.wide.u32 	%rd23, %r82, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r7, [%rd24];
	add.s32 	%r8, %r6, -3;
	setp.lt.u32 	%p3, %r8, 31;
	add.s32 	%r9, %r7, -3;
	setp.lt.u32 	%p4, %r9, 31;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:                              // %pass164
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r149, %r7, -2;
	add.s32 	%r150, %r6, -2;
	shl.b32 	%r151, %r2, 8;
	and.b32  	%r152, %r151, 512;
	shl.b32 	%r153, %r1, 3;
	or.b32  	%r154, %r151, %r153;
	and.b32  	%r155, %r154, 448;
	and.b32  	%r44, %r1, 4;
	and.b32  	%r156, %r153, 24;
	shl.b32 	%r157, %r3, 6;
	and.b32  	%r158, %r157, 130048;
	or.b32  	%r159, %r152, %r44;
	or.b32  	%r160, %r159, %r156;
	or.b32  	%r161, %r160, %r158;
	or.b32  	%r162, %r161, %r155;
	shl.b32 	%r163, %r162, 2;
	cvt.u64.u32 	%rd27, %r163;
	add.s64 	%rd28, %rd27, %rd1;
	ld.global.v4.u32 	{%r85, %r86, %r93, %r94}, [%rd28];
	or.b32  	%r164, %r163, 128;
	cvt.u64.u32 	%rd29, %r164;
	add.s64 	%rd30, %rd29, %rd1;
	ld.global.v4.u32 	{%r101, %r102, %r109, %r110}, [%rd30];
	mov.u32 	%r111, 21520;
	// begin inline asm
	prmt.b32 %r117, %r85, %r86, %r111;
	// end inline asm
	mov.u32 	%r115, 30258;
	// begin inline asm
	prmt.b32 %r118, %r85, %r86, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r125, %r93, %r94, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r126, %r93, %r94, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r133, %r101, %r102, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r134, %r101, %r102, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r141, %r109, %r110, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r142, %r109, %r110, %r115;
	// end inline asm
	mov.u32 	%r143, 25152;
	// begin inline asm
	prmt.b32 %r116, %r117, %r118, %r143;
	// end inline asm
	mov.u32 	%r147, 29521;
	// begin inline asm
	prmt.b32 %r120, %r117, %r118, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r124, %r125, %r126, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r128, %r125, %r126, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r132, %r133, %r134, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r136, %r133, %r134, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r140, %r141, %r142, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r144, %r141, %r142, %r147;
	// end inline asm
	setp.eq.s32 	%p6, %r44, 0;
	selp.b32 	%r165, %r132, %r116, %p6;
	shfl.sync.bfly.b32	%r166, %r165, 4, 31, -1;
	selp.b32 	%r45, %r116, %r166, %p6;
	selp.b32 	%r46, %r166, %r132, %p6;
	selp.b32 	%r167, %r136, %r120, %p6;
	shfl.sync.bfly.b32	%r168, %r167, 4, 31, -1;
	selp.b32 	%r47, %r120, %r168, %p6;
	selp.b32 	%r48, %r168, %r136, %p6;
	selp.b32 	%r169, %r140, %r124, %p6;
	shfl.sync.bfly.b32	%r170, %r169, 4, 31, -1;
	selp.b32 	%r49, %r124, %r170, %p6;
	selp.b32 	%r50, %r170, %r140, %p6;
	selp.b32 	%r171, %r144, %r128, %p6;
	shfl.sync.bfly.b32	%r172, %r171, 4, 31, -1;
	selp.b32 	%r51, %r128, %r172, %p6;
	selp.b32 	%r52, %r172, %r144, %p6;
	shl.b32 	%r173, %r2, 3;
	and.b32  	%r53, %r173, 16;
	shl.b32 	%r174, %r2, 4;
	and.b32  	%r54, %r174, 16;
	shr.u32 	%r55, %r1, 2;
	shl.b32 	%r175, %r3, 11;
	and.b32  	%r56, %r175, 30720;
	shl.b32 	%r176, %r1, 2;
	and.b32  	%r57, %r176, 12;
	shr.u32 	%r177, %r2, 1;
	mul.lo.s32 	%r178, %r177, 544;
	or.b32  	%r58, %r178, %r57;
	mul.lo.s32 	%r179, %r177, 640;
	and.b32  	%r180, %r173, 8;
	or.b32  	%r181, %r180, %r55;
	shl.b32 	%r182, %r1, 1;
	and.b32  	%r59, %r182, 6;
	or.b32  	%r60, %r181, %r179;
	and.b32  	%r183, %r1, 7;
	or.b32  	%r184, %r4, 640;
	shl.b32 	%r61, %r77, %r8;
	min.u32 	%r62, %r150, 31;
	shl.b32 	%r63, %r77, %r9;
	min.u32 	%r64, %r149, 31;
	and.b32  	%r65, %r1, 1;
	and.b32  	%r66, %r1, 2;
	shl.b32 	%r186, %r2, 23;
	shl.b32 	%r187, %r1, 18;
	and.b32  	%r188, %r187, 6291456;
	or.b32  	%r189, %r188, %r186;
	shl.b32 	%r190, %r1, 5;
	and.b32  	%r191, %r190, 64;
	shl.b32 	%r192, %r1, 4;
	and.b32  	%r193, %r192, 16;
	and.b32  	%r194, %r153, 32;
	or.b32  	%r195, %r193, %r191;
	or.b32  	%r196, %r195, %r194;
	shl.b32 	%r197, %r3, 10;
	and.b32  	%r198, %r197, 2080768;
	or.b32  	%r67, %r189, %r198;
	or.b32  	%r68, %r67, 8192;
	or.b32  	%r199, %r1, 24;
	or.b32  	%r69, %r196, %r56;
	mul.lo.s32 	%r200, %r199, 20;
	add.s32 	%r201, %r200, %r184;
	mul.wide.u32 	%rd31, %r201, 4;
	mov.u64 	%rd32, shmem;
	add.s64 	%rd33, %rd32, 4352;
	add.s64 	%rd7, %rd33, %rd31;
	mul.lo.s32 	%r202, %r183, 20;
	add.s32 	%r203, %r202, %r4;
	mul.wide.u32 	%rd34, %r203, 4;
	add.s64 	%rd8, %rd33, %rd34;
	add.s32 	%r204, %r202, %r184;
	mul.wide.u32 	%rd35, %r204, 4;
	add.s64 	%rd9, %rd33, %rd35;
	add.s32 	%r205, %r202, 160;
	add.s32 	%r206, %r205, %r4;
	mul.wide.u32 	%rd36, %r206, 4;
	add.s64 	%rd10, %rd33, %rd36;
	add.s32 	%r207, %r205, %r184;
	mul.wide.u32 	%rd37, %r207, 4;
	add.s64 	%rd11, %rd33, %rd37;
	add.s32 	%r208, %r202, 320;
	add.s32 	%r209, %r208, %r4;
	mul.wide.u32 	%rd38, %r209, 4;
	add.s64 	%rd12, %rd33, %rd38;
	add.s32 	%r210, %r208, %r184;
	mul.wide.u32 	%rd39, %r210, 4;
	add.s64 	%rd13, %rd33, %rd39;
	add.s32 	%r211, %r200, %r4;
	mul.wide.u32 	%rd40, %r211, 4;
	add.s64 	%rd14, %rd33, %rd40;
	mov.u32 	%r148, 0;
	mov.u32 	%r655, %r148;
$L__BB0_7:                              // %L841
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	or.b32  	%r11, %r655, %r54;
	or.b32  	%r12, %r11, 8;
	mov.u32 	%r656, %r148;
	mov.u32 	%r657, %r148;
	mov.u32 	%r658, %r148;
	mov.u32 	%r659, %r148;
	mov.u32 	%r660, %r148;
	mov.u32 	%r661, %r148;
	mov.u32 	%r662, %r148;
	mov.u32 	%r663, %r148;
	mov.u32 	%r664, %r148;
	mov.u32 	%r665, %r148;
	mov.u32 	%r666, %r148;
	mov.u32 	%r667, %r148;
	mov.u32 	%r668, %r148;
$L__BB0_8:                              // %L844
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	add.s32 	%r214, %r11, %r656;
	or.b32  	%r215, %r214, %r55;
	add.s32 	%r216, %r215, %r56;
	shl.b32 	%r217, %r216, 12;
	and.b32  	%r218, %r217, 134180864;
	or.b32  	%r219, %r218, %r53;
	or.b32  	%r220, %r219, %r57;
	or.b32  	%r221, %r220, %r5;
	shl.b32 	%r222, %r221, 2;
	cvt.u64.u32 	%rd41, %r222;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.v4.u32 	{%r223, %r224, %r225, %r226}, [%rd42];
	add.s32 	%r227, %r12, %r656;
	or.b32  	%r228, %r227, %r55;
	add.s32 	%r229, %r228, %r56;
	shl.b32 	%r230, %r229, 12;
	and.b32  	%r231, %r230, 134213632;
	or.b32  	%r232, %r231, %r53;
	or.b32  	%r233, %r232, %r57;
	or.b32  	%r234, %r233, %r5;
	shl.b32 	%r235, %r234, 2;
	cvt.u64.u32 	%rd43, %r235;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.v4.u32 	{%r236, %r237, %r238, %r239}, [%rd44];
	and.b32  	%r240, %r216, 23;
	mul.lo.s32 	%r241, %r240, 17;
	add.s32 	%r242, %r58, %r241;
	mul.wide.u32 	%rd45, %r242, 4;
	add.s64 	%rd47, %rd32, %rd45;
	st.shared.u32 	[%rd47], %r223;
	cvt.u64.u32 	%rd48, %r241;
	cvt.u64.u32 	%rd49, %r58;
	add.s64 	%rd50, %rd49, %rd48;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd52, %rd32, %rd51;
	st.shared.u32 	[%rd52+4], %r224;
	st.shared.u32 	[%rd52+8], %r225;
	st.shared.u32 	[%rd52+12], %r226;
	and.b32  	%r243, %r229, 31;
	mul.lo.s32 	%r244, %r243, 17;
	add.s32 	%r245, %r58, %r244;
	mul.wide.u32 	%rd53, %r245, 4;
	add.s64 	%rd54, %rd32, %rd53;
	st.shared.u32 	[%rd54], %r236;
	cvt.u64.u32 	%rd55, %r244;
	add.s64 	%rd56, %rd49, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd58, %rd32, %rd57;
	st.shared.u32 	[%rd58+4], %r237;
	st.shared.u32 	[%rd58+8], %r238;
	st.shared.u32 	[%rd58+12], %r239;
	bar.sync 	0;
	mov.u32 	%r669, %r148;
$L__BB0_9:                              // %L2729
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r380, %r669, %r55;
	mad.lo.s32 	%r381, %r380, 17, %r58;
	mul.wide.u32 	%rd59, %r381, 4;
	add.s64 	%rd61, %rd32, %rd59;
	ld.shared.u32 	%r247, [%rd61];
	mov.u32 	%r248, 134744072;
	mov.u32 	%r413, 252645135;
	// begin inline asm
	lop3.b32 %r246, %r247, %r248, %r413, 40;
	// end inline asm
	add.s32 	%r382, %r246, 2021161080;
	xor.b32  	%r257, %r382, -2139062144;
	shr.u32 	%r251, %r247, 4;
	// begin inline asm
	lop3.b32 %r250, %r251, %r248, %r413, 40;
	// end inline asm
	add.s32 	%r383, %r250, 2021161080;
	xor.b32  	%r263, %r383, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r254, %r255}, {%r45}, {%r257}, {%r148, %r148};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r260, %r261}, {%r47}, {%r263}, {%r148, %r148};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r266, %r267}, {%r45}, {%r263}, {%r148, %r148};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r272, %r273}, {%r47}, {%r257}, {%r266, %r267};
	// end inline asm
	ld.shared.u32 	%r279, [%rd61+4];
	// begin inline asm
	lop3.b32 %r278, %r279, %r248, %r413, 40;
	// end inline asm
	add.s32 	%r384, %r278, 2021161080;
	xor.b32  	%r289, %r384, -2139062144;
	shr.u32 	%r283, %r279, 4;
	// begin inline asm
	lop3.b32 %r282, %r283, %r248, %r413, 40;
	// end inline asm
	add.s32 	%r385, %r282, 2021161080;
	xor.b32  	%r295, %r385, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r286, %r287}, {%r49}, {%r289}, {%r254, %r255};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r292, %r293}, {%r51}, {%r295}, {%r260, %r261};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r298, %r299}, {%r49}, {%r295}, {%r272, %r273};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r304, %r305}, {%r51}, {%r289}, {%r298, %r299};
	// end inline asm
	ld.shared.u32 	%r311, [%rd61+8];
	// begin inline asm
	lop3.b32 %r310, %r311, %r248, %r413, 40;
	// end inline asm
	add.s32 	%r386, %r310, 2021161080;
	xor.b32  	%r321, %r386, -2139062144;
	shr.u32 	%r315, %r311, 4;
	// begin inline asm
	lop3.b32 %r314, %r315, %r248, %r413, 40;
	// end inline asm
	add.s32 	%r387, %r314, 2021161080;
	xor.b32  	%r327, %r387, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r318, %r319}, {%r46}, {%r321}, {%r286, %r287};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r324, %r325}, {%r48}, {%r327}, {%r292, %r293};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r330, %r331}, {%r46}, {%r327}, {%r304, %r305};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r336, %r337}, {%r48}, {%r321}, {%r330, %r331};
	// end inline asm
	ld.shared.u32 	%r343, [%rd61+12];
	// begin inline asm
	lop3.b32 %r342, %r343, %r248, %r413, 40;
	// end inline asm
	add.s32 	%r388, %r342, 2021161080;
	xor.b32  	%r353, %r388, -2139062144;
	shr.u32 	%r347, %r343, 4;
	// begin inline asm
	lop3.b32 %r346, %r347, %r248, %r413, 40;
	// end inline asm
	add.s32 	%r389, %r346, 2021161080;
	xor.b32  	%r359, %r389, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r350, %r351}, {%r50}, {%r353}, {%r318, %r319};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r356, %r357}, {%r52}, {%r359}, {%r324, %r325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r362, %r363}, {%r50}, {%r359}, {%r336, %r337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r368, %r369}, {%r52}, {%r353}, {%r362, %r363};
	// end inline asm
	sub.s32 	%r390, %r350, %r356;
	add.s32 	%r391, %r390, 2;
	shr.s32 	%r376, %r391, 2;
	add.s32 	%r392, %r368, 2;
	shr.s32 	%r375, %r392, 2;
	sub.s32 	%r393, %r351, %r357;
	add.s32 	%r394, %r393, 2;
	shr.s32 	%r379, %r394, 2;
	add.s32 	%r395, %r369, 2;
	shr.s32 	%r378, %r395, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r374, %r375, %r376;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r377, %r378, %r379;
	// end inline asm
	or.b32  	%r396, %r59, %r669;
	mad.lo.s32 	%r397, %r396, 20, %r60;
	mul.wide.u32 	%rd62, %r397, 4;
	add.s64 	%rd63, %rd32, %rd62;
	st.shared.u32 	[%rd63+4352], %r374;
	st.shared.u32 	[%rd63+4432], %r377;
	add.s32 	%r669, %r669, 8;
	setp.ne.s32 	%p7, %r669, 32;
	@%p7 bra 	$L__BB0_9;
// %bb.10:                              // %L3995
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r434, [%rd8];
	ld.shared.u32 	%r435, [%rd9];
	ld.shared.u32 	%r436, [%rd10];
	ld.shared.u32 	%r437, [%rd11];
	ld.shared.u32 	%r438, [%rd12];
	ld.shared.u32 	%r439, [%rd13];
	ld.shared.u32 	%r440, [%rd14];
	ld.shared.u32 	%r441, [%rd7];
	cvt.s32.s16 	%r442, %r434;
	shr.s32 	%r443, %r434, 16;
	cvt.s32.s16 	%r444, %r435;
	shr.s32 	%r445, %r435, 16;
	cvt.s32.s16 	%r446, %r436;
	shr.s32 	%r447, %r436, 16;
	cvt.s32.s16 	%r448, %r437;
	shr.s32 	%r449, %r437, 16;
	cvt.s32.s16 	%r450, %r438;
	shr.s32 	%r451, %r438, 16;
	cvt.s32.s16 	%r452, %r439;
	shr.s32 	%r453, %r439, 16;
	cvt.s32.s16 	%r454, %r440;
	shr.s32 	%r455, %r440, 16;
	cvt.s32.s16 	%r456, %r441;
	shr.s32 	%r457, %r441, 16;
	add.s32 	%r458, %r442, %r61;
	shr.s32 	%r459, %r458, %r62;
	add.s32 	%r460, %r443, %r61;
	shr.s32 	%r461, %r460, %r62;
	add.s32 	%r462, %r444, %r63;
	shr.s32 	%r463, %r462, %r64;
	add.s32 	%r464, %r445, %r63;
	shr.s32 	%r465, %r464, %r64;
	add.s32 	%r466, %r446, %r61;
	shr.s32 	%r467, %r466, %r62;
	add.s32 	%r468, %r447, %r61;
	shr.s32 	%r469, %r468, %r62;
	add.s32 	%r470, %r448, %r63;
	shr.s32 	%r471, %r470, %r64;
	add.s32 	%r472, %r449, %r63;
	shr.s32 	%r473, %r472, %r64;
	add.s32 	%r474, %r450, %r61;
	shr.s32 	%r475, %r474, %r62;
	add.s32 	%r476, %r451, %r61;
	shr.s32 	%r477, %r476, %r62;
	add.s32 	%r478, %r452, %r63;
	shr.s32 	%r479, %r478, %r64;
	add.s32 	%r480, %r453, %r63;
	shr.s32 	%r481, %r480, %r64;
	add.s32 	%r482, %r454, %r61;
	shr.s32 	%r483, %r482, %r62;
	add.s32 	%r484, %r455, %r61;
	shr.s32 	%r485, %r484, %r62;
	add.s32 	%r486, %r456, %r63;
	shr.s32 	%r487, %r486, %r64;
	add.s32 	%r488, %r457, %r63;
	shr.s32 	%r489, %r488, %r64;
	max.s32 	%r490, %r459, -7;
	min.s32 	%r403, %r490, 7;
	max.s32 	%r491, %r461, -7;
	min.s32 	%r410, %r491, 7;
	max.s32 	%r492, %r463, -7;
	min.s32 	%r421, %r492, 7;
	max.s32 	%r493, %r465, -7;
	min.s32 	%r428, %r493, 7;
	max.s32 	%r494, %r467, -7;
	min.s32 	%r402, %r494, 7;
	max.s32 	%r495, %r469, -7;
	min.s32 	%r409, %r495, 7;
	max.s32 	%r496, %r471, -7;
	min.s32 	%r420, %r496, 7;
	max.s32 	%r497, %r473, -7;
	min.s32 	%r427, %r497, 7;
	max.s32 	%r498, %r475, -7;
	min.s32 	%r400, %r498, 7;
	max.s32 	%r499, %r477, -7;
	min.s32 	%r407, %r499, 7;
	max.s32 	%r500, %r479, -7;
	min.s32 	%r418, %r500, 7;
	max.s32 	%r501, %r481, -7;
	min.s32 	%r425, %r501, 7;
	max.s32 	%r502, %r483, -7;
	min.s32 	%r399, %r502, 7;
	max.s32 	%r503, %r485, -7;
	min.s32 	%r406, %r503, 7;
	max.s32 	%r504, %r487, -7;
	min.s32 	%r417, %r504, 7;
	max.s32 	%r505, %r489, -7;
	min.s32 	%r424, %r505, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r398, %r399, %r400, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r401, %r402, %r403, %r398;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r405, %r406, %r407, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r408, %r409, %r410, %r405;
	// end inline asm
	shl.b32 	%r415, %r408, 4;
	// begin inline asm
	lop3.b32 %r524, %r413, %r401, %r415, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r416, %r417, %r418, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r419, %r420, %r421, %r416;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r423, %r424, %r425, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r426, %r427, %r428, %r423;
	// end inline asm
	shl.b32 	%r433, %r426, 4;
	// begin inline asm
	lop3.b32 %r532, %r413, %r419, %r433, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r656, 0;
	selp.b32 	%r667, %r524, %r667, %p8;
	selp.b32 	%r668, %r524, %r668, %p8;
	setp.eq.s32 	%p9, %r656, 32;
	selp.b32 	%r659, %r524, %r659, %p9;
	selp.b32 	%r660, %r524, %r660, %p9;
	setp.eq.s32 	%p10, %r656, 64;
	selp.b32 	%r665, %r524, %r665, %p10;
	selp.b32 	%r666, %r524, %r666, %p10;
	selp.b32 	%r663, %r532, %r663, %p8;
	selp.b32 	%r664, %r532, %r664, %p8;
	selp.b32 	%r657, %r532, %r657, %p9;
	selp.b32 	%r658, %r532, %r658, %p9;
	selp.b32 	%r661, %r532, %r661, %p10;
	selp.b32 	%r662, %r532, %r662, %p10;
	add.s32 	%r42, %r656, 32;
	setp.ne.s32 	%p11, %r656, 96;
	mov.u32 	%r656, %r42;
	@%p11 bra 	$L__BB0_8;
// %bb.11:                              // %L5549
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p12, %r66, 0;
	setp.eq.s32 	%p13, %r65, 0;
	// begin inline asm
	prmt.b32 %r506, %r667, %r659, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r510, %r668, %r660, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r514, %r663, %r657, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r664, %r658, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r665, %r524, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r666, %r524, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r661, %r532, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r662, %r532, %r147;
	// end inline asm
	selp.b32 	%r602, %r510, %r506, %p13;
	shfl.sync.bfly.b32	%r603, %r602, 1, 31, -1;
	selp.b32 	%r539, %r506, %r603, %p13;
	selp.b32 	%r540, %r603, %r510, %p13;
	selp.b32 	%r604, %r518, %r514, %p13;
	shfl.sync.bfly.b32	%r605, %r604, 1, 31, -1;
	selp.b32 	%r547, %r514, %r605, %p13;
	selp.b32 	%r548, %r605, %r518, %p13;
	selp.b32 	%r606, %r526, %r522, %p13;
	shfl.sync.bfly.b32	%r607, %r606, 1, 31, -1;
	selp.b32 	%r555, %r522, %r607, %p13;
	selp.b32 	%r556, %r607, %r526, %p13;
	selp.b32 	%r608, %r534, %r530, %p13;
	shfl.sync.bfly.b32	%r609, %r608, 1, 31, -1;
	selp.b32 	%r563, %r530, %r609, %p13;
	selp.b32 	%r564, %r609, %r534, %p13;
	// begin inline asm
	prmt.b32 %r538, %r539, %r540, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r539, %r540, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r547, %r548, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r547, %r548, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r554, %r555, %r556, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r555, %r556, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r563, %r564, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r563, %r564, %r147;
	// end inline asm
	selp.b32 	%r610, %r554, %r538, %p12;
	shfl.sync.bfly.b32	%r611, %r610, 2, 31, -1;
	selp.b32 	%r571, %r538, %r611, %p12;
	selp.b32 	%r572, %r611, %r554, %p12;
	selp.b32 	%r612, %r562, %r546, %p12;
	shfl.sync.bfly.b32	%r613, %r612, 2, 31, -1;
	selp.b32 	%r579, %r546, %r613, %p12;
	selp.b32 	%r580, %r613, %r562, %p12;
	selp.b32 	%r614, %r558, %r542, %p12;
	shfl.sync.bfly.b32	%r615, %r614, 2, 31, -1;
	selp.b32 	%r587, %r542, %r615, %p12;
	selp.b32 	%r588, %r615, %r558, %p12;
	selp.b32 	%r616, %r566, %r550, %p12;
	shfl.sync.bfly.b32	%r617, %r616, 2, 31, -1;
	selp.b32 	%r595, %r550, %r617, %p12;
	selp.b32 	%r596, %r617, %r566, %p12;
	// begin inline asm
	prmt.b32 %r570, %r571, %r572, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r571, %r572, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r578, %r579, %r580, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r582, %r579, %r580, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r586, %r587, %r588, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r590, %r587, %r588, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r594, %r595, %r596, %r111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r598, %r595, %r596, %r115;
	// end inline asm
	selp.b32 	%r618, %r586, %r570, %p6;
	shfl.sync.bfly.b32	%r619, %r618, 4, 31, -1;
	selp.b32 	%r620, %r570, %r619, %p6;
	selp.b32 	%r621, %r619, %r586, %p6;
	selp.b32 	%r622, %r594, %r578, %p6;
	shfl.sync.bfly.b32	%r623, %r622, 4, 31, -1;
	selp.b32 	%r624, %r578, %r623, %p6;
	selp.b32 	%r625, %r623, %r594, %p6;
	selp.b32 	%r626, %r590, %r574, %p6;
	shfl.sync.bfly.b32	%r627, %r626, 4, 31, -1;
	selp.b32 	%r628, %r574, %r627, %p6;
	selp.b32 	%r629, %r627, %r590, %p6;
	selp.b32 	%r630, %r598, %r582, %p6;
	shfl.sync.bfly.b32	%r631, %r630, 4, 31, -1;
	selp.b32 	%r632, %r582, %r631, %p6;
	selp.b32 	%r633, %r631, %r598, %p6;
	selp.b32 	%r634, %r628, %r620, %p13;
	shfl.sync.bfly.b32	%r635, %r634, 1, 31, -1;
	selp.b32 	%r636, %r620, %r635, %p13;
	selp.b32 	%r637, %r635, %r628, %p13;
	selp.b32 	%r638, %r632, %r624, %p13;
	shfl.sync.bfly.b32	%r639, %r638, 1, 31, -1;
	selp.b32 	%r640, %r624, %r639, %p13;
	selp.b32 	%r641, %r639, %r632, %p13;
	selp.b32 	%r642, %r629, %r621, %p13;
	shfl.sync.bfly.b32	%r643, %r642, 1, 31, -1;
	selp.b32 	%r644, %r621, %r643, %p13;
	selp.b32 	%r645, %r643, %r629, %p13;
	selp.b32 	%r646, %r633, %r625, %p13;
	shfl.sync.bfly.b32	%r647, %r646, 1, 31, -1;
	selp.b32 	%r648, %r625, %r647, %p13;
	selp.b32 	%r649, %r647, %r633, %p13;
	add.s32 	%r650, %r69, %r655;
	shr.u32 	%r651, %r650, 2;
	add.s32 	%r652, %r67, %r651;
	mul.wide.u32 	%rd64, %r652, 4;
	add.s64 	%rd65, %rd4, %rd64;
	st.global.v4.u32 	[%rd65], {%r636, %r644, %r637, %r645};
	add.s32 	%r653, %r68, %r651;
	mul.wide.u32 	%rd66, %r653, 4;
	add.s64 	%rd67, %rd4, %rd66;
	st.global.v4.u32 	[%rd67], {%r640, %r648, %r641, %r649};
	add.s32 	%r43, %r655, 128;
	setp.ne.s32 	%p15, %r655, 1920;
	mov.u32 	%r655, %r43;
	@%p15 bra 	$L__BB0_7;
// %bb.12:                              // %L6256
	mov.u32 	%r654, 0;
	st.global.u32 	[%rd6], %r654;
	ret;
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r70;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L25
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r70;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_5:                              // %L335
	mov.u32 	%r83, 2;
	st.global.u32 	[%rd6], %r83;
	mov.u64 	%rd25, exception500;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r70;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
