// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception422[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1429[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<661>;
	.reg .b64 	%rd<69>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r66, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd14, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r67, 4351;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r68, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r68, 9471;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 7;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r69, %r4, 5;
	or.b32  	%r70, %r2, %r3;
	or.b32  	%r71, %r70, %r69;
	mul.wide.u32 	%rd23, %r71, 4;
	add.s64 	%rd5, %rd4, %rd23;
	mov.u32 	%r72, 1;
	st.global.u32 	[%rd5], %r72;
	shl.b32 	%r73, %r4, 2;
	shl.b32 	%r74, %r1, 1;
	and.b32  	%r5, %r74, 4064;
	shr.u32 	%r75, %r3, 3;
	or.b32  	%r6, %r73, %r75;
	or.b32  	%r76, %r6, %r5;
	mul.wide.u32 	%rd24, %r76, 4;
	add.s64 	%rd25, %rd3, %rd24;
	ld.global.u32 	%r7, [%rd25];
	or.b32  	%r77, %r76, 16;
	mul.wide.u32 	%rd26, %r77, 4;
	add.s64 	%rd27, %rd3, %rd26;
	ld.global.u32 	%r8, [%rd27];
	add.s32 	%r9, %r7, -3;
	setp.lt.u32 	%p3, %r9, 31;
	add.s32 	%r10, %r8, -3;
	setp.lt.u32 	%p4, %r10, 31;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:                              // %pass164
	ld.param.u64 	%rd15, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	add.s32 	%r144, %r8, -2;
	add.s32 	%r145, %r7, -2;
	shl.b32 	%r146, %r4, 8;
	and.b32  	%r147, %r146, 512;
	shl.b32 	%r148, %r1, 6;
	and.b32  	%r41, %r148, 130048;
	shl.b32 	%r42, %r3, 3;
	or.b32  	%r149, %r146, %r42;
	and.b32  	%r150, %r149, 448;
	and.b32  	%r43, %r3, 4;
	and.b32  	%r151, %r42, 24;
	or.b32  	%r152, %r43, %r151;
	or.b32  	%r153, %r147, %r41;
	or.b32  	%r154, %r153, %r150;
	or.b32  	%r155, %r154, %r152;
	shl.b32 	%r156, %r155, 2;
	cvt.u64.u32 	%rd30, %r156;
	add.s64 	%rd31, %rd30, %rd1;
	ld.global.v4.u32 	{%r80, %r81, %r88, %r89}, [%rd31];
	ld.global.v4.u32 	{%r96, %r97, %r104, %r105}, [%rd31+128];
	mov.u32 	%r106, 21520;
	// begin inline asm
	prmt.b32 %r112, %r80, %r81, %r106;
	// end inline asm
	mov.u32 	%r110, 30258;
	// begin inline asm
	prmt.b32 %r113, %r80, %r81, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r120, %r88, %r89, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r121, %r88, %r89, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r128, %r96, %r97, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r96, %r97, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r136, %r104, %r105, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r104, %r105, %r110;
	// end inline asm
	mov.u32 	%r138, 25152;
	// begin inline asm
	prmt.b32 %r111, %r112, %r113, %r138;
	// end inline asm
	mov.u32 	%r142, 29521;
	// begin inline asm
	prmt.b32 %r115, %r112, %r113, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r119, %r120, %r121, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r123, %r120, %r121, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r127, %r128, %r129, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r128, %r129, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r135, %r136, %r137, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r136, %r137, %r142;
	// end inline asm
	setp.eq.s32 	%p6, %r43, 0;
	selp.b32 	%r157, %r127, %r111, %p6;
	shfl.sync.bfly.b32	%r158, %r157, 4, 31, -1;
	selp.b32 	%r44, %r111, %r158, %p6;
	selp.b32 	%r45, %r158, %r127, %p6;
	selp.b32 	%r159, %r131, %r115, %p6;
	shfl.sync.bfly.b32	%r160, %r159, 4, 31, -1;
	selp.b32 	%r46, %r115, %r160, %p6;
	selp.b32 	%r47, %r160, %r131, %p6;
	selp.b32 	%r161, %r135, %r119, %p6;
	shfl.sync.bfly.b32	%r162, %r161, 4, 31, -1;
	selp.b32 	%r48, %r119, %r162, %p6;
	selp.b32 	%r49, %r162, %r135, %p6;
	selp.b32 	%r163, %r139, %r123, %p6;
	shfl.sync.bfly.b32	%r164, %r163, 4, 31, -1;
	selp.b32 	%r50, %r123, %r164, %p6;
	selp.b32 	%r51, %r164, %r139, %p6;
	shl.b32 	%r165, %r4, 3;
	and.b32  	%r166, %r165, 16;
	shl.b32 	%r52, %r3, 2;
	and.b32  	%r53, %r52, 12;
	shl.b32 	%r167, %r4, 4;
	and.b32  	%r54, %r167, 16;
	shr.u32 	%r55, %r3, 2;
	and.b32  	%r56, %r2, 1920;
	or.b32  	%r57, %r166, %r5;
	shr.u32 	%r168, %r4, 1;
	mul.lo.s32 	%r169, %r168, 544;
	or.b32  	%r58, %r169, %r53;
	shl.b32 	%r59, %r3, 1;
	and.b32  	%r60, %r59, 6;
	mul.lo.s32 	%r170, %r168, 640;
	and.b32  	%r171, %r165, 8;
	or.b32  	%r172, %r171, %r55;
	or.b32  	%r61, %r172, %r170;
	and.b32  	%r173, %r3, 7;
	or.b32  	%r174, %r6, 640;
	shl.b32 	%r62, %r72, %r9;
	min.u32 	%r63, %r145, 31;
	shl.b32 	%r64, %r72, %r10;
	min.u32 	%r65, %r144, 31;
	mul.lo.s32 	%r176, %r173, 20;
	add.s32 	%r177, %r176, %r6;
	mul.wide.u32 	%rd32, %r177, 4;
	mov.u64 	%rd33, shmem;
	add.s64 	%rd34, %rd33, 4352;
	add.s64 	%rd6, %rd34, %rd32;
	add.s32 	%r178, %r174, %r176;
	mul.wide.u32 	%rd35, %r178, 4;
	add.s64 	%rd7, %rd34, %rd35;
	add.s32 	%r179, %r176, 160;
	add.s32 	%r180, %r179, %r6;
	mul.wide.u32 	%rd36, %r180, 4;
	add.s64 	%rd8, %rd34, %rd36;
	add.s32 	%r181, %r174, %r179;
	mul.wide.u32 	%rd37, %r181, 4;
	add.s64 	%rd9, %rd34, %rd37;
	add.s32 	%r182, %r176, 320;
	add.s32 	%r183, %r182, %r6;
	mul.wide.u32 	%rd38, %r183, 4;
	add.s64 	%rd10, %rd34, %rd38;
	add.s32 	%r184, %r174, %r182;
	mul.wide.u32 	%rd39, %r184, 4;
	add.s64 	%rd11, %rd34, %rd39;
	or.b32  	%r185, %r3, 24;
	mul.lo.s32 	%r186, %r185, 20;
	add.s32 	%r187, %r186, %r6;
	mul.wide.u32 	%rd40, %r187, 4;
	add.s64 	%rd12, %rd34, %rd40;
	add.s32 	%r188, %r174, %r186;
	mul.wide.u32 	%rd41, %r188, 4;
	add.s64 	%rd13, %rd34, %rd41;
	mov.u32 	%r143, 0;
	mov.u32 	%r647, %r143;
	mov.u32 	%r648, %r143;
	mov.u32 	%r649, %r143;
	mov.u32 	%r650, %r143;
	mov.u32 	%r651, %r143;
	mov.u32 	%r652, %r143;
	mov.u32 	%r653, %r143;
	mov.u32 	%r654, %r143;
	mov.u32 	%r655, %r143;
	mov.u32 	%r656, %r143;
	mov.u32 	%r657, %r143;
	mov.u32 	%r658, %r143;
	mov.u32 	%r659, %r143;
$L__BB0_7:                              // %L842
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
	or.b32  	%r190, %r647, %r54;
	or.b32  	%r191, %r190, %r55;
	add.s32 	%r192, %r191, %r56;
	shl.b32 	%r193, %r192, 12;
	and.b32  	%r194, %r193, 8351744;
	or.b32  	%r195, %r194, %r57;
	or.b32  	%r196, %r195, %r53;
	shl.b32 	%r197, %r196, 2;
	cvt.u64.u32 	%rd42, %r197;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.v4.u32 	{%r198, %r199, %r200, %r201}, [%rd43];
	or.b32  	%r202, %r192, 8;
	shl.b32 	%r203, %r202, 12;
	and.b32  	%r204, %r203, 8384512;
	or.b32  	%r205, %r204, %r57;
	or.b32  	%r206, %r205, %r53;
	shl.b32 	%r207, %r206, 2;
	cvt.u64.u32 	%rd44, %r207;
	add.s64 	%rd45, %rd2, %rd44;
	ld.global.v4.u32 	{%r208, %r209, %r210, %r211}, [%rd45];
	and.b32  	%r212, %r192, 23;
	mul.lo.s32 	%r213, %r212, 17;
	add.s32 	%r214, %r58, %r213;
	mul.wide.u32 	%rd46, %r214, 4;
	add.s64 	%rd48, %rd33, %rd46;
	st.shared.u32 	[%rd48], %r198;
	cvt.u64.u32 	%rd49, %r213;
	cvt.u64.u32 	%rd50, %r58;
	add.s64 	%rd51, %rd50, %rd49;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd53, %rd33, %rd52;
	st.shared.u32 	[%rd53+4], %r199;
	st.shared.u32 	[%rd53+8], %r200;
	st.shared.u32 	[%rd53+12], %r201;
	and.b32  	%r215, %r202, 31;
	mul.lo.s32 	%r216, %r215, 17;
	add.s32 	%r217, %r58, %r216;
	mul.wide.u32 	%rd54, %r217, 4;
	add.s64 	%rd55, %rd33, %rd54;
	st.shared.u32 	[%rd55], %r208;
	cvt.u64.u32 	%rd56, %r216;
	add.s64 	%rd57, %rd50, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd59, %rd33, %rd58;
	st.shared.u32 	[%rd59+4], %r209;
	st.shared.u32 	[%rd59+8], %r210;
	st.shared.u32 	[%rd59+12], %r211;
	bar.sync 	0;
	mov.u32 	%r660, %r143;
$L__BB0_8:                              // %L2507
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r352, %r660, %r55;
	mad.lo.s32 	%r353, %r352, 17, %r58;
	mul.wide.u32 	%rd60, %r353, 4;
	add.s64 	%rd62, %rd33, %rd60;
	ld.shared.u32 	%r219, [%rd62];
	mov.u32 	%r220, 134744072;
	mov.u32 	%r385, 252645135;
	// begin inline asm
	lop3.b32 %r218, %r219, %r220, %r385, 40;
	// end inline asm
	add.s32 	%r354, %r218, 2021161080;
	xor.b32  	%r229, %r354, -2139062144;
	shr.u32 	%r223, %r219, 4;
	// begin inline asm
	lop3.b32 %r222, %r223, %r220, %r385, 40;
	// end inline asm
	add.s32 	%r355, %r222, 2021161080;
	xor.b32  	%r235, %r355, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r226, %r227}, {%r44}, {%r229}, {%r143, %r143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r232, %r233}, {%r46}, {%r235}, {%r143, %r143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r238, %r239}, {%r44}, {%r235}, {%r143, %r143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r244, %r245}, {%r46}, {%r229}, {%r238, %r239};
	// end inline asm
	ld.shared.u32 	%r251, [%rd62+4];
	// begin inline asm
	lop3.b32 %r250, %r251, %r220, %r385, 40;
	// end inline asm
	add.s32 	%r356, %r250, 2021161080;
	xor.b32  	%r261, %r356, -2139062144;
	shr.u32 	%r255, %r251, 4;
	// begin inline asm
	lop3.b32 %r254, %r255, %r220, %r385, 40;
	// end inline asm
	add.s32 	%r357, %r254, 2021161080;
	xor.b32  	%r267, %r357, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r258, %r259}, {%r48}, {%r261}, {%r226, %r227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r264, %r265}, {%r50}, {%r267}, {%r232, %r233};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r270, %r271}, {%r48}, {%r267}, {%r244, %r245};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r276, %r277}, {%r50}, {%r261}, {%r270, %r271};
	// end inline asm
	ld.shared.u32 	%r283, [%rd62+8];
	// begin inline asm
	lop3.b32 %r282, %r283, %r220, %r385, 40;
	// end inline asm
	add.s32 	%r358, %r282, 2021161080;
	xor.b32  	%r293, %r358, -2139062144;
	shr.u32 	%r287, %r283, 4;
	// begin inline asm
	lop3.b32 %r286, %r287, %r220, %r385, 40;
	// end inline asm
	add.s32 	%r359, %r286, 2021161080;
	xor.b32  	%r299, %r359, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r290, %r291}, {%r45}, {%r293}, {%r258, %r259};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r296, %r297}, {%r47}, {%r299}, {%r264, %r265};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r302, %r303}, {%r45}, {%r299}, {%r276, %r277};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r308, %r309}, {%r47}, {%r293}, {%r302, %r303};
	// end inline asm
	ld.shared.u32 	%r315, [%rd62+12];
	// begin inline asm
	lop3.b32 %r314, %r315, %r220, %r385, 40;
	// end inline asm
	add.s32 	%r360, %r314, 2021161080;
	xor.b32  	%r325, %r360, -2139062144;
	shr.u32 	%r319, %r315, 4;
	// begin inline asm
	lop3.b32 %r318, %r319, %r220, %r385, 40;
	// end inline asm
	add.s32 	%r361, %r318, 2021161080;
	xor.b32  	%r331, %r361, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r322, %r323}, {%r49}, {%r325}, {%r290, %r291};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r328, %r329}, {%r51}, {%r331}, {%r296, %r297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r334, %r335}, {%r49}, {%r331}, {%r308, %r309};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r340, %r341}, {%r51}, {%r325}, {%r334, %r335};
	// end inline asm
	sub.s32 	%r362, %r322, %r328;
	add.s32 	%r363, %r362, 2;
	shr.s32 	%r348, %r363, 2;
	add.s32 	%r364, %r340, 2;
	shr.s32 	%r347, %r364, 2;
	sub.s32 	%r365, %r323, %r329;
	add.s32 	%r366, %r365, 2;
	shr.s32 	%r351, %r366, 2;
	add.s32 	%r367, %r341, 2;
	shr.s32 	%r350, %r367, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r346, %r347, %r348;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r349, %r350, %r351;
	// end inline asm
	or.b32  	%r368, %r60, %r660;
	mad.lo.s32 	%r369, %r368, 20, %r61;
	mul.wide.u32 	%rd63, %r369, 4;
	add.s64 	%rd64, %rd33, %rd63;
	st.shared.u32 	[%rd64+4352], %r346;
	st.shared.u32 	[%rd64+4432], %r349;
	add.s32 	%r660, %r660, 8;
	setp.ne.s32 	%p7, %r660, 32;
	@%p7 bra 	$L__BB0_8;
// %bb.9:                               // %L3641
                                        //   in Loop: Header=BB0_7 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r406, [%rd6];
	ld.shared.u32 	%r407, [%rd7];
	ld.shared.u32 	%r408, [%rd8];
	ld.shared.u32 	%r409, [%rd9];
	ld.shared.u32 	%r410, [%rd10];
	ld.shared.u32 	%r411, [%rd11];
	ld.shared.u32 	%r412, [%rd12];
	ld.shared.u32 	%r413, [%rd13];
	cvt.s32.s16 	%r414, %r406;
	shr.s32 	%r415, %r406, 16;
	cvt.s32.s16 	%r416, %r407;
	shr.s32 	%r417, %r407, 16;
	cvt.s32.s16 	%r418, %r408;
	shr.s32 	%r419, %r408, 16;
	cvt.s32.s16 	%r420, %r409;
	shr.s32 	%r421, %r409, 16;
	cvt.s32.s16 	%r422, %r410;
	shr.s32 	%r423, %r410, 16;
	cvt.s32.s16 	%r424, %r411;
	shr.s32 	%r425, %r411, 16;
	cvt.s32.s16 	%r426, %r412;
	shr.s32 	%r427, %r412, 16;
	cvt.s32.s16 	%r428, %r413;
	shr.s32 	%r429, %r413, 16;
	add.s32 	%r430, %r414, %r62;
	shr.s32 	%r431, %r430, %r63;
	add.s32 	%r432, %r415, %r62;
	shr.s32 	%r433, %r432, %r63;
	add.s32 	%r434, %r416, %r64;
	shr.s32 	%r435, %r434, %r65;
	add.s32 	%r436, %r417, %r64;
	shr.s32 	%r437, %r436, %r65;
	add.s32 	%r438, %r418, %r62;
	shr.s32 	%r439, %r438, %r63;
	add.s32 	%r440, %r419, %r62;
	shr.s32 	%r441, %r440, %r63;
	add.s32 	%r442, %r420, %r64;
	shr.s32 	%r443, %r442, %r65;
	add.s32 	%r444, %r421, %r64;
	shr.s32 	%r445, %r444, %r65;
	add.s32 	%r446, %r422, %r62;
	shr.s32 	%r447, %r446, %r63;
	add.s32 	%r448, %r423, %r62;
	shr.s32 	%r449, %r448, %r63;
	add.s32 	%r450, %r424, %r64;
	shr.s32 	%r451, %r450, %r65;
	add.s32 	%r452, %r425, %r64;
	shr.s32 	%r453, %r452, %r65;
	add.s32 	%r454, %r426, %r62;
	shr.s32 	%r455, %r454, %r63;
	add.s32 	%r456, %r427, %r62;
	shr.s32 	%r457, %r456, %r63;
	add.s32 	%r458, %r428, %r64;
	shr.s32 	%r459, %r458, %r65;
	add.s32 	%r460, %r429, %r64;
	shr.s32 	%r461, %r460, %r65;
	max.s32 	%r462, %r431, -7;
	min.s32 	%r375, %r462, 7;
	max.s32 	%r463, %r433, -7;
	min.s32 	%r382, %r463, 7;
	max.s32 	%r464, %r435, -7;
	min.s32 	%r393, %r464, 7;
	max.s32 	%r465, %r437, -7;
	min.s32 	%r400, %r465, 7;
	max.s32 	%r466, %r439, -7;
	min.s32 	%r374, %r466, 7;
	max.s32 	%r467, %r441, -7;
	min.s32 	%r381, %r467, 7;
	max.s32 	%r468, %r443, -7;
	min.s32 	%r392, %r468, 7;
	max.s32 	%r469, %r445, -7;
	min.s32 	%r399, %r469, 7;
	max.s32 	%r470, %r447, -7;
	min.s32 	%r372, %r470, 7;
	max.s32 	%r471, %r449, -7;
	min.s32 	%r379, %r471, 7;
	max.s32 	%r472, %r451, -7;
	min.s32 	%r390, %r472, 7;
	max.s32 	%r473, %r453, -7;
	min.s32 	%r397, %r473, 7;
	max.s32 	%r474, %r455, -7;
	min.s32 	%r371, %r474, 7;
	max.s32 	%r475, %r457, -7;
	min.s32 	%r378, %r475, 7;
	max.s32 	%r476, %r459, -7;
	min.s32 	%r389, %r476, 7;
	max.s32 	%r477, %r461, -7;
	min.s32 	%r396, %r477, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r370, %r371, %r372, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r373, %r374, %r375, %r370;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r377, %r378, %r379, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r380, %r381, %r382, %r377;
	// end inline asm
	shl.b32 	%r387, %r380, 4;
	// begin inline asm
	lop3.b32 %r496, %r385, %r373, %r387, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r388, %r389, %r390, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r391, %r392, %r393, %r388;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r395, %r396, %r397, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r398, %r399, %r400, %r395;
	// end inline asm
	shl.b32 	%r405, %r398, 4;
	// begin inline asm
	lop3.b32 %r504, %r385, %r391, %r405, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r647, 0;
	selp.b32 	%r658, %r496, %r658, %p8;
	selp.b32 	%r659, %r496, %r659, %p8;
	setp.eq.s32 	%p9, %r647, 32;
	selp.b32 	%r650, %r496, %r650, %p9;
	selp.b32 	%r651, %r496, %r651, %p9;
	setp.eq.s32 	%p10, %r647, 64;
	selp.b32 	%r656, %r496, %r656, %p10;
	selp.b32 	%r657, %r496, %r657, %p10;
	selp.b32 	%r654, %r504, %r654, %p8;
	selp.b32 	%r655, %r504, %r655, %p8;
	selp.b32 	%r648, %r504, %r648, %p9;
	selp.b32 	%r649, %r504, %r649, %p9;
	selp.b32 	%r652, %r504, %r652, %p10;
	selp.b32 	%r653, %r504, %r653, %p10;
	add.s32 	%r40, %r647, 32;
	setp.ne.s32 	%p11, %r647, 96;
	mov.u32 	%r647, %r40;
	@%p11 bra 	$L__BB0_7;
// %bb.10:                              // %L5019
	// begin inline asm
	prmt.b32 %r478, %r658, %r650, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r482, %r659, %r651, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r486, %r654, %r648, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r490, %r655, %r649, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r494, %r656, %r496, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r498, %r657, %r496, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r502, %r652, %r504, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r506, %r653, %r504, %r142;
	// end inline asm
	and.b32  	%r574, %r3, 1;
	setp.eq.b32 	%p13, %r574, 1;
	selp.b32 	%r575, %r478, %r482, %p13;
	shfl.sync.bfly.b32	%r576, %r575, 1, 31, -1;
	selp.b32 	%r515, %r576, %r478, %p13;
	selp.b32 	%r516, %r482, %r576, %p13;
	selp.b32 	%r577, %r486, %r490, %p13;
	shfl.sync.bfly.b32	%r578, %r577, 1, 31, -1;
	selp.b32 	%r523, %r578, %r486, %p13;
	selp.b32 	%r524, %r490, %r578, %p13;
	selp.b32 	%r579, %r494, %r498, %p13;
	shfl.sync.bfly.b32	%r580, %r579, 1, 31, -1;
	selp.b32 	%r531, %r580, %r494, %p13;
	selp.b32 	%r532, %r498, %r580, %p13;
	selp.b32 	%r581, %r502, %r506, %p13;
	shfl.sync.bfly.b32	%r582, %r581, 1, 31, -1;
	selp.b32 	%r539, %r582, %r502, %p13;
	selp.b32 	%r540, %r506, %r582, %p13;
	// begin inline asm
	prmt.b32 %r510, %r515, %r516, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r514, %r515, %r516, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r523, %r524, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r523, %r524, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r531, %r532, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r531, %r532, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r539, %r540, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r539, %r540, %r142;
	// end inline asm
	and.b32  	%r583, %r3, 2;
	setp.eq.s32 	%p14, %r583, 0;
	selp.b32 	%r584, %r526, %r510, %p14;
	shfl.sync.bfly.b32	%r585, %r584, 2, 31, -1;
	selp.b32 	%r543, %r510, %r585, %p14;
	selp.b32 	%r544, %r585, %r526, %p14;
	selp.b32 	%r586, %r534, %r518, %p14;
	shfl.sync.bfly.b32	%r587, %r586, 2, 31, -1;
	selp.b32 	%r551, %r518, %r587, %p14;
	selp.b32 	%r552, %r587, %r534, %p14;
	selp.b32 	%r588, %r530, %r514, %p14;
	shfl.sync.bfly.b32	%r589, %r588, 2, 31, -1;
	selp.b32 	%r559, %r514, %r589, %p14;
	selp.b32 	%r560, %r589, %r530, %p14;
	selp.b32 	%r590, %r538, %r522, %p14;
	shfl.sync.bfly.b32	%r591, %r590, 2, 31, -1;
	selp.b32 	%r567, %r522, %r591, %p14;
	selp.b32 	%r568, %r591, %r538, %p14;
	// begin inline asm
	prmt.b32 %r542, %r543, %r544, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r543, %r544, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r551, %r552, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r554, %r551, %r552, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r559, %r560, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r559, %r560, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r567, %r568, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r567, %r568, %r110;
	// end inline asm
	selp.b32 	%r592, %r558, %r542, %p6;
	shfl.sync.bfly.b32	%r593, %r592, 4, 31, -1;
	selp.b32 	%r594, %r542, %r593, %p6;
	selp.b32 	%r595, %r593, %r558, %p6;
	selp.b32 	%r596, %r566, %r550, %p6;
	shfl.sync.bfly.b32	%r597, %r596, 4, 31, -1;
	selp.b32 	%r598, %r550, %r597, %p6;
	selp.b32 	%r599, %r597, %r566, %p6;
	selp.b32 	%r600, %r562, %r546, %p6;
	shfl.sync.bfly.b32	%r601, %r600, 4, 31, -1;
	selp.b32 	%r602, %r546, %r601, %p6;
	selp.b32 	%r603, %r601, %r562, %p6;
	selp.b32 	%r604, %r570, %r554, %p6;
	shfl.sync.bfly.b32	%r605, %r604, 4, 31, -1;
	selp.b32 	%r606, %r554, %r605, %p6;
	selp.b32 	%r607, %r605, %r570, %p6;
	selp.b32 	%r608, %r594, %r602, %p13;
	shfl.sync.bfly.b32	%r609, %r608, 1, 31, -1;
	selp.b32 	%r610, %r609, %r594, %p13;
	selp.b32 	%r611, %r602, %r609, %p13;
	selp.b32 	%r612, %r598, %r606, %p13;
	shfl.sync.bfly.b32	%r613, %r612, 1, 31, -1;
	selp.b32 	%r614, %r595, %r603, %p13;
	shfl.sync.bfly.b32	%r615, %r614, 1, 31, -1;
	selp.b32 	%r616, %r615, %r595, %p13;
	selp.b32 	%r617, %r603, %r615, %p13;
	selp.b32 	%r618, %r599, %r607, %p13;
	shfl.sync.bfly.b32	%r619, %r618, 1, 31, -1;
	and.b32  	%r620, %r59, 8;
	and.b32  	%r621, %r42, 16;
	or.b32  	%r622, %r620, %r621;
	and.b32  	%r623, %r52, 4;
	or.b32  	%r624, %r623, %r622;
	shl.b32 	%r625, %r1, 5;
	and.b32  	%r626, %r625, 480;
	or.b32  	%r627, %r626, %r624;
	shl.b32 	%r628, %r4, 19;
	shl.b32 	%r629, %r3, 14;
	and.b32  	%r630, %r629, 393216;
	or.b32  	%r631, %r630, %r628;
	or.b32  	%r632, %r41, %r627;
	or.b32  	%r633, %r632, %r631;
	or.b32  	%r634, %r633, 1;
	mul.wide.u32 	%rd65, %r634, 4;
	add.s64 	%rd66, %rd15, %rd65;
	st.global.v4.u32 	[%rd66+-4], {%r610, %r616, %r611, %r617};
	selp.b32 	%r635, %r607, %r619, %p13;
	selp.b32 	%r636, %r619, %r599, %p13;
	selp.b32 	%r637, %r606, %r613, %p13;
	selp.b32 	%r638, %r613, %r598, %p13;
	or.b32  	%r639, %r628, %r621;
	or.b32  	%r640, %r639, %r620;
	or.b32  	%r641, %r640, %r623;
	or.b32  	%r642, %r641, %r630;
	or.b32  	%r643, %r642, %r626;
	add.s32 	%r644, %r41, %r643;
	add.s32 	%r645, %r644, 512;
	mul.wide.u32 	%rd67, %r645, 4;
	add.s64 	%rd68, %rd15, %rd67;
	st.global.v4.u32 	[%rd68], {%r638, %r636, %r637, %r635};
	mov.u32 	%r646, 0;
	st.global.u32 	[%rd5], %r646;
	ret;
$L__BB0_1:                              // %L8
	mov.u64 	%rd19, exception1429;
	cvta.global.u64 	%rd20, %rd19;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd20;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r66;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L25
	mov.u64 	%rd21, exception1429;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r66;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_5:                              // %L335
	mov.u32 	%r78, 2;
	st.global.u32 	[%rd5], %r78;
	mov.u64 	%rd28, exception422;
	cvta.global.u64 	%rd29, %rd28;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd29;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r66;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
