// PTX kernel code for CUDA chimefrb beamformer
// This file has been generated automatically by `chimefrb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for chimefrb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=256, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception557[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 256, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<105>;
	.reg .b16 	%rs<80>;
	.reg .b32 	%r<2006>;
	.reg .f32 	%f<398>;
	.reg .b64 	%rd<76>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r151, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd21, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r156, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r156, 16383;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd22, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r152, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r157, %r1, 5;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r158, %r3, 8;
	or.b32  	%r4, %r157, %r2;
	or.b32  	%r159, %r4, %r158;
	mul.wide.u32 	%rd28, %r159, 4;
	add.s64 	%rd4, %rd22, %rd28;
	mov.u32 	%r160, 1;
	st.global.u32 	[%rd4], %r160;
	setp.gt.u32 	%p2, %r152, 4095;
	@%p2 bra 	$L__BB0_6;
// %bb.3:                               // %L116
	ld.param.u32 	%r153, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r153, %r152;
	setp.gt.s32 	%p4, %r153, 8191;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_6;
// %bb.4:                               // %L123
	ld.param.u32 	%r154, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r161, %r153, %r152;
	mul.hi.s32 	%r163, %r161, 715827883;
	shr.u32 	%r164, %r163, 31;
	shr.s32 	%r165, %r163, 2;
	add.s32 	%r5, %r165, %r164;
	mul.lo.s32 	%r166, %r5, -24;
	neg.s32 	%r167, %r161;
	setp.ne.s32 	%p6, %r166, %r167;
	setp.gt.u32 	%p7, %r154, 1023;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.5:                               // %L134
	ld.param.u32 	%r155, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p9, %r155, %r154;
	setp.lt.s32 	%p10, %r155, 2048;
	and.pred  	%p11, %p9, %p10;
	sub.s32 	%r168, %r155, %r154;
	setp.eq.s32 	%p12, %r168, %r5;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass107
	ld.param.u64 	%rd1, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	ld.param.u64 	%rd2, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z8chimefrb5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS1_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	shr.u32 	%r506, %r2, 2;
	cvt.u16.u32 	%rs6, %r2;
	and.b16  	%rs7, %rs6, 240;
	and.b16  	%rs8, %rs6, 15;
	shl.b16 	%rs9, %rs8, 4;
	shr.u16 	%rs10, %rs7, 4;
	or.b16  	%rs11, %rs10, %rs9;
	and.b16  	%rs12, %rs11, 51;
	shl.b16 	%rs13, %rs12, 2;
	shr.u16 	%rs14, %rs11, 2;
	and.b16  	%rs15, %rs14, 51;
	or.b16  	%rs16, %rs15, %rs13;
	shr.u16 	%rs17, %rs16, 1;
	and.b16  	%rs18, %rs16, 64;
	shl.b16 	%rs19, %rs18, 1;
	or.b16  	%rs20, %rs17, %rs19;
	and.b16  	%rs21, %rs20, 192;
	cvt.u32.u16 	%r507, %rs21;
	or.b16  	%rs22, %rs21, 2;
	cvt.u32.u16 	%r508, %rs22;
	or.b16  	%rs23, %rs21, 1;
	cvt.u32.u16 	%r509, %rs23;
	or.b16  	%rs24, %rs21, 3;
	cvt.u32.u16 	%r510, %rs24;
	mul.lo.s32 	%r511, %r506, %r507;
	and.b32  	%r512, %r511, 448;
	cvt.rn.f32.s32 	%f1, %r512;
	mul.f32 	%f2, %f1, 0f3B800000;
	add.f32 	%f3, %f2, %f2;
	mov.b32 	%r513, %f3;
	and.b32  	%r514, %r513, -2147483648;
	or.b32  	%r515, %r514, 1056964608;
	mov.b32 	%f4, %r515;
	add.f32 	%f5, %f3, %f4;
	cvt.rzi.f32.f32 	%f6, %f5;
	abs.f32 	%f7, %f3;
	setp.gt.f32 	%p14, %f7, 0f4B000000;
	selp.f32 	%f8, %f3, %f6, %p14;
	cvt.rzi.f32.f32 	%f9, %f3;
	setp.lt.f32 	%p15, %f7, 0f3F000000;
	selp.f32 	%f10, %f9, %f8, %p15;
	cvt.rzi.s32.f32 	%r516, %f10;
	fma.rn.f32 	%f11, %f10, 0fBF000000, %f2;
	mul.f32 	%f12, %f11, %f11;
	fma.rn.f32 	%f13, %f12, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f14, %f12, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f15, %f13, %f12, 0fC0A55DF6;
	fma.rn.f32 	%f16, %f14, %f12, 0f4081E0CF;
	fma.rn.f32 	%f17, %f12, %f11, 0f00000000;
	fma.rn.f32 	%f18, %f16, %f12, 0fC09DE9E6;
	fma.rn.f32 	%f19, %f15, %f17, 0f00000000;
	fma.rn.f32 	%f20, %f18, %f12, 0f3F800000;
	fma.rn.f32 	%f21, %f11, 0f40490FDB, %f19;
	and.b32  	%r517, %r516, 1;
	setp.eq.b32 	%p16, %r517, 1;
	selp.f32 	%f22, %f20, %f21, %p16;
	selp.f32 	%f23, %f21, %f20, %p16;
	and.b32  	%r518, %r516, 2;
	setp.eq.s32 	%p17, %r518, 0;
	neg.f32 	%f24, %f22;
	selp.f32 	%f25, %f22, %f24, %p17;
	add.s32 	%r519, %r516, 1;
	and.b32  	%r520, %r519, 2;
	setp.eq.s32 	%p18, %r520, 0;
	mov.f32 	%f26, 0f00000000;
	sub.f32 	%f27, %f26, %f23;
	selp.f32 	%f28, %f23, %f27, %p18;
	cvt.rzi.f32.f32 	%f29, %f2;
	setp.eq.f32 	%p19, %f29, %f2;
	mul.f32 	%f30, %f2, 0f00000000;
	selp.f32 	%f31, %f30, %f25, %p19;
	abs.f32 	%f32, %f2;
	setp.gt.f32 	%p20, %f32, 0f4B800000;
	add.f32 	%f33, %f31, 0f3F800000;
	selp.f32 	%f34, %f33, %f28, %p20;
	mul.lo.s32 	%r521, %r506, %r508;
	and.b32  	%r522, %r521, 510;
	cvt.rn.f32.s32 	%f35, %r522;
	mul.f32 	%f36, %f35, 0f3B800000;
	add.f32 	%f37, %f36, %f36;
	mov.b32 	%r523, %f37;
	and.b32  	%r524, %r523, -2147483648;
	or.b32  	%r525, %r524, 1056964608;
	mov.b32 	%f38, %r525;
	add.f32 	%f39, %f37, %f38;
	cvt.rzi.f32.f32 	%f40, %f39;
	abs.f32 	%f41, %f37;
	setp.gt.f32 	%p21, %f41, 0f4B000000;
	selp.f32 	%f42, %f37, %f40, %p21;
	cvt.rzi.f32.f32 	%f43, %f37;
	setp.lt.f32 	%p22, %f41, 0f3F000000;
	selp.f32 	%f44, %f43, %f42, %p22;
	cvt.rzi.s32.f32 	%r526, %f44;
	fma.rn.f32 	%f45, %f44, 0fBF000000, %f36;
	mul.f32 	%f46, %f45, %f45;
	fma.rn.f32 	%f47, %f46, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f48, %f46, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f49, %f47, %f46, 0fC0A55DF6;
	fma.rn.f32 	%f50, %f48, %f46, 0f4081E0CF;
	fma.rn.f32 	%f51, %f46, %f45, 0f00000000;
	fma.rn.f32 	%f52, %f50, %f46, 0fC09DE9E6;
	fma.rn.f32 	%f53, %f49, %f51, 0f00000000;
	fma.rn.f32 	%f54, %f52, %f46, 0f3F800000;
	fma.rn.f32 	%f55, %f45, 0f40490FDB, %f53;
	and.b32  	%r527, %r526, 1;
	setp.eq.b32 	%p23, %r527, 1;
	selp.f32 	%f56, %f54, %f55, %p23;
	selp.f32 	%f57, %f55, %f54, %p23;
	and.b32  	%r528, %r526, 2;
	setp.eq.s32 	%p24, %r528, 0;
	neg.f32 	%f58, %f56;
	selp.f32 	%f59, %f56, %f58, %p24;
	add.s32 	%r529, %r526, 1;
	and.b32  	%r530, %r529, 2;
	setp.eq.s32 	%p25, %r530, 0;
	sub.f32 	%f60, %f26, %f57;
	selp.f32 	%f61, %f57, %f60, %p25;
	cvt.rzi.f32.f32 	%f62, %f36;
	setp.eq.f32 	%p26, %f62, %f36;
	mul.f32 	%f63, %f36, 0f00000000;
	selp.f32 	%f64, %f63, %f59, %p26;
	abs.f32 	%f65, %f36;
	setp.gt.f32 	%p27, %f65, 0f4B800000;
	add.f32 	%f66, %f64, 0f3F800000;
	selp.f32 	%f67, %f66, %f61, %p27;
	mul.lo.s32 	%r531, %r506, %r509;
	and.b32  	%r532, %r531, 511;
	cvt.rn.f32.s32 	%f68, %r532;
	mul.f32 	%f69, %f68, 0f3B800000;
	add.f32 	%f70, %f69, %f69;
	mov.b32 	%r533, %f70;
	and.b32  	%r534, %r533, -2147483648;
	or.b32  	%r535, %r534, 1056964608;
	mov.b32 	%f71, %r535;
	add.f32 	%f72, %f70, %f71;
	cvt.rzi.f32.f32 	%f73, %f72;
	abs.f32 	%f74, %f70;
	setp.gt.f32 	%p28, %f74, 0f4B000000;
	selp.f32 	%f75, %f70, %f73, %p28;
	cvt.rzi.f32.f32 	%f76, %f70;
	setp.lt.f32 	%p29, %f74, 0f3F000000;
	selp.f32 	%f77, %f76, %f75, %p29;
	cvt.rzi.s32.f32 	%r536, %f77;
	fma.rn.f32 	%f78, %f77, 0fBF000000, %f69;
	mul.f32 	%f79, %f78, %f78;
	fma.rn.f32 	%f80, %f79, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f81, %f79, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f82, %f80, %f79, 0fC0A55DF6;
	fma.rn.f32 	%f83, %f81, %f79, 0f4081E0CF;
	fma.rn.f32 	%f84, %f79, %f78, 0f00000000;
	fma.rn.f32 	%f85, %f83, %f79, 0fC09DE9E6;
	fma.rn.f32 	%f86, %f82, %f84, 0f00000000;
	fma.rn.f32 	%f87, %f85, %f79, 0f3F800000;
	fma.rn.f32 	%f88, %f78, 0f40490FDB, %f86;
	and.b32  	%r537, %r536, 1;
	setp.eq.b32 	%p30, %r537, 1;
	selp.f32 	%f89, %f87, %f88, %p30;
	selp.f32 	%f90, %f88, %f87, %p30;
	and.b32  	%r538, %r536, 2;
	setp.eq.s32 	%p31, %r538, 0;
	neg.f32 	%f91, %f89;
	selp.f32 	%f92, %f89, %f91, %p31;
	add.s32 	%r539, %r536, 1;
	and.b32  	%r540, %r539, 2;
	setp.eq.s32 	%p32, %r540, 0;
	sub.f32 	%f93, %f26, %f90;
	selp.f32 	%f94, %f90, %f93, %p32;
	cvt.rzi.f32.f32 	%f95, %f69;
	setp.eq.f32 	%p33, %f95, %f69;
	mul.f32 	%f96, %f69, 0f00000000;
	selp.f32 	%f97, %f96, %f92, %p33;
	abs.f32 	%f98, %f69;
	setp.gt.f32 	%p34, %f98, 0f4B800000;
	add.f32 	%f99, %f97, 0f3F800000;
	selp.f32 	%f100, %f99, %f94, %p34;
	mul.lo.s32 	%r541, %r506, %r510;
	and.b32  	%r542, %r541, 511;
	cvt.rn.f32.s32 	%f101, %r542;
	mul.f32 	%f102, %f101, 0f3B800000;
	add.f32 	%f103, %f102, %f102;
	mov.b32 	%r543, %f103;
	and.b32  	%r544, %r543, -2147483648;
	or.b32  	%r545, %r544, 1056964608;
	mov.b32 	%f104, %r545;
	add.f32 	%f105, %f103, %f104;
	cvt.rzi.f32.f32 	%f106, %f105;
	abs.f32 	%f107, %f103;
	setp.gt.f32 	%p35, %f107, 0f4B000000;
	selp.f32 	%f108, %f103, %f106, %p35;
	cvt.rzi.f32.f32 	%f109, %f103;
	setp.lt.f32 	%p36, %f107, 0f3F000000;
	selp.f32 	%f110, %f109, %f108, %p36;
	cvt.rzi.s32.f32 	%r546, %f110;
	fma.rn.f32 	%f111, %f110, 0fBF000000, %f102;
	mul.f32 	%f112, %f111, %f111;
	fma.rn.f32 	%f113, %f112, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f114, %f112, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f115, %f113, %f112, 0fC0A55DF6;
	fma.rn.f32 	%f116, %f114, %f112, 0f4081E0CF;
	fma.rn.f32 	%f117, %f112, %f111, 0f00000000;
	fma.rn.f32 	%f118, %f116, %f112, 0fC09DE9E6;
	fma.rn.f32 	%f119, %f115, %f117, 0f00000000;
	fma.rn.f32 	%f120, %f118, %f112, 0f3F800000;
	fma.rn.f32 	%f121, %f111, 0f40490FDB, %f119;
	and.b32  	%r547, %r546, 1;
	setp.eq.b32 	%p37, %r547, 1;
	selp.f32 	%f122, %f120, %f121, %p37;
	selp.f32 	%f123, %f121, %f120, %p37;
	and.b32  	%r548, %r546, 2;
	setp.eq.s32 	%p38, %r548, 0;
	neg.f32 	%f124, %f122;
	selp.f32 	%f125, %f122, %f124, %p38;
	add.s32 	%r549, %r546, 1;
	and.b32  	%r550, %r549, 2;
	setp.eq.s32 	%p39, %r550, 0;
	sub.f32 	%f126, %f26, %f123;
	selp.f32 	%f127, %f123, %f126, %p39;
	cvt.rzi.f32.f32 	%f128, %f102;
	setp.eq.f32 	%p40, %f128, %f102;
	mul.f32 	%f129, %f102, 0f00000000;
	selp.f32 	%f130, %f129, %f125, %p40;
	abs.f32 	%f131, %f102;
	setp.gt.f32 	%p41, %f131, 0f4B800000;
	add.f32 	%f132, %f130, 0f3F800000;
	selp.f32 	%f133, %f132, %f127, %p41;
	mov.b32 	%r170, %f34;
	mov.b32 	%r176, %f31;
	xor.b32  	%r174, %r176, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r843, %r174, %r170;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r871, %r174, %r170;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r844, %r170, %r176;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r872, %r170, %r176;
	// end inline asm
	mov.b32 	%r182, %f67;
	mov.b32 	%r188, %f64;
	xor.b32  	%r186, %r188, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r857, %r186, %r182;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r885, %r186, %r182;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r858, %r182, %r188;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r886, %r182, %r188;
	// end inline asm
	mov.b32 	%r194, %f100;
	mov.b32 	%r200, %f97;
	xor.b32  	%r198, %r200, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r850, %r198, %r194;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r878, %r198, %r194;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r851, %r194, %r200;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r879, %r194, %r200;
	// end inline asm
	mov.b32 	%r206, %f133;
	mov.b32 	%r212, %f130;
	xor.b32  	%r210, %r212, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r864, %r210, %r206;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r892, %r210, %r206;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r865, %r206, %r212;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r893, %r206, %r212;
	// end inline asm
	shr.u16 	%rs25, %rs6, 8;
	shl.b16 	%rs26, %rs6, 8;
	or.b16  	%rs27, %rs26, %rs25;
	shl.b16 	%rs28, %rs27, 4;
	shr.u16 	%rs29, %rs27, 4;
	and.b16  	%rs30, %rs29, 3840;
	or.b16  	%rs31, %rs30, %rs28;
	and.b16  	%rs32, %rs31, 13107;
	shl.b16 	%rs33, %rs32, 2;
	shr.u16 	%rs34, %rs31, 2;
	and.b16  	%rs35, %rs34, 13107;
	or.b16  	%rs36, %rs35, %rs33;
	shr.u16 	%rs37, %rs36, 1;
	and.b16  	%rs38, %rs36, 16384;
	shl.b16 	%rs39, %rs38, 1;
	or.b16  	%rs40, %rs37, %rs39;
	shr.u16 	%rs41, %rs40, 11;
	and.b16  	%rs42, %rs41, 24;
	cvt.u32.u16 	%r551, %rs42;
	or.b16  	%rs43, %rs42, 4;
	cvt.u32.u16 	%r552, %rs43;
	mul.lo.s32 	%r553, %r506, %r551;
	cvt.rn.f32.s32 	%f134, %r553;
	mul.f32 	%f135, %f134, 0f3B800000;
	add.f32 	%f136, %f135, %f135;
	mov.b32 	%r554, %f136;
	and.b32  	%r555, %r554, -2147483648;
	or.b32  	%r556, %r555, 1056964608;
	mov.b32 	%f137, %r556;
	add.f32 	%f138, %f136, %f137;
	cvt.rzi.f32.f32 	%f139, %f138;
	abs.f32 	%f140, %f136;
	setp.gt.f32 	%p42, %f140, 0f4B000000;
	selp.f32 	%f141, %f136, %f139, %p42;
	cvt.rzi.f32.f32 	%f142, %f136;
	setp.lt.f32 	%p43, %f140, 0f3F000000;
	selp.f32 	%f143, %f142, %f141, %p43;
	cvt.rzi.s32.f32 	%r557, %f143;
	fma.rn.f32 	%f144, %f143, 0fBF000000, %f135;
	mul.f32 	%f145, %f144, %f144;
	fma.rn.f32 	%f146, %f145, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f147, %f145, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f148, %f146, %f145, 0fC0A55DF6;
	fma.rn.f32 	%f149, %f147, %f145, 0f4081E0CF;
	fma.rn.f32 	%f150, %f145, %f144, 0f00000000;
	fma.rn.f32 	%f151, %f149, %f145, 0fC09DE9E6;
	fma.rn.f32 	%f152, %f148, %f150, 0f00000000;
	fma.rn.f32 	%f153, %f151, %f145, 0f3F800000;
	fma.rn.f32 	%f154, %f144, 0f40490FDB, %f152;
	and.b32  	%r558, %r557, 1;
	setp.eq.b32 	%p44, %r558, 1;
	selp.f32 	%f155, %f153, %f154, %p44;
	selp.f32 	%f156, %f154, %f153, %p44;
	and.b32  	%r559, %r557, 2;
	setp.eq.s32 	%p45, %r559, 0;
	neg.f32 	%f157, %f155;
	selp.f32 	%f158, %f155, %f157, %p45;
	add.s32 	%r560, %r557, 1;
	and.b32  	%r561, %r560, 2;
	setp.eq.s32 	%p46, %r561, 0;
	sub.f32 	%f159, %f26, %f156;
	selp.f32 	%f160, %f156, %f159, %p46;
	cvt.rzi.f32.f32 	%f161, %f135;
	setp.eq.f32 	%p47, %f161, %f135;
	mul.f32 	%f162, %f135, 0f00000000;
	selp.f32 	%f163, %f162, %f158, %p47;
	abs.f32 	%f164, %f135;
	setp.gt.f32 	%p48, %f164, 0f4B800000;
	add.f32 	%f165, %f163, 0f3F800000;
	selp.f32 	%f166, %f165, %f160, %p48;
	mul.lo.s32 	%r562, %r506, %r552;
	cvt.rn.f32.s32 	%f167, %r562;
	mul.f32 	%f168, %f167, 0f3B800000;
	add.f32 	%f169, %f168, %f168;
	mov.b32 	%r563, %f169;
	and.b32  	%r564, %r563, -2147483648;
	or.b32  	%r565, %r564, 1056964608;
	mov.b32 	%f170, %r565;
	add.f32 	%f171, %f169, %f170;
	cvt.rzi.f32.f32 	%f172, %f171;
	abs.f32 	%f173, %f169;
	setp.gt.f32 	%p49, %f173, 0f4B000000;
	selp.f32 	%f174, %f169, %f172, %p49;
	cvt.rzi.f32.f32 	%f175, %f169;
	setp.lt.f32 	%p50, %f173, 0f3F000000;
	selp.f32 	%f176, %f175, %f174, %p50;
	cvt.rzi.s32.f32 	%r566, %f176;
	fma.rn.f32 	%f177, %f176, 0fBF000000, %f168;
	mul.f32 	%f178, %f177, %f177;
	fma.rn.f32 	%f179, %f178, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f180, %f178, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f181, %f179, %f178, 0fC0A55DF6;
	fma.rn.f32 	%f182, %f180, %f178, 0f4081E0CF;
	fma.rn.f32 	%f183, %f178, %f177, 0f00000000;
	fma.rn.f32 	%f184, %f182, %f178, 0fC09DE9E6;
	fma.rn.f32 	%f185, %f181, %f183, 0f00000000;
	fma.rn.f32 	%f186, %f184, %f178, 0f3F800000;
	fma.rn.f32 	%f187, %f177, 0f40490FDB, %f185;
	and.b32  	%r567, %r566, 1;
	setp.eq.b32 	%p51, %r567, 1;
	selp.f32 	%f188, %f186, %f187, %p51;
	selp.f32 	%f189, %f187, %f186, %p51;
	and.b32  	%r568, %r566, 2;
	setp.eq.s32 	%p52, %r568, 0;
	neg.f32 	%f190, %f188;
	selp.f32 	%f191, %f188, %f190, %p52;
	add.s32 	%r569, %r566, 1;
	and.b32  	%r570, %r569, 2;
	setp.eq.s32 	%p53, %r570, 0;
	sub.f32 	%f192, %f26, %f189;
	selp.f32 	%f193, %f189, %f192, %p53;
	cvt.rzi.f32.f32 	%f194, %f168;
	setp.eq.f32 	%p54, %f194, %f168;
	mul.f32 	%f195, %f168, 0f00000000;
	selp.f32 	%f196, %f195, %f191, %p54;
	abs.f32 	%f197, %f168;
	setp.gt.f32 	%p55, %f197, 0f4B800000;
	add.f32 	%f198, %f196, 0f3F800000;
	selp.f32 	%f199, %f198, %f193, %p55;
	mov.b32 	%r218, %f166;
	mov.b32 	%r219, %f199;
	// begin inline asm
	cvt.rn.f16x2.f32 %r41, %r219, %r218;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r42, %r219, %r218;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r43, %r219, %r218;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r44, %r219, %r218;
	// end inline asm
	mov.b32 	%r230, %f163;
	// begin inline asm
	cvt.rn.f16x2.f32 %r45, %r230, %r230;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r46, %r230, %r230;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r47, %r230, %r230;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r48, %r230, %r230;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r49, %r218, %r219;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r50, %r218, %r219;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r51, %r218, %r219;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r52, %r218, %r219;
	// end inline asm
	mov.b32 	%r254, %f196;
	// begin inline asm
	cvt.rn.f16x2.f32 %r53, %r254, %r254;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r54, %r254, %r254;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r55, %r254, %r254;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r56, %r254, %r254;
	// end inline asm
	shl.b32 	%r571, %r2, 1;
	and.b32  	%r572, %r571, 16;
	and.b32  	%r573, %r571, 56;
	mul.lo.s32 	%r574, %r573, %r551;
	and.b32  	%r575, %r574, 448;
	cvt.rn.f32.s32 	%f200, %r575;
	mul.f32 	%f201, %f200, 0f3B800000;
	add.f32 	%f202, %f201, %f201;
	mov.b32 	%r576, %f202;
	and.b32  	%r577, %r576, -2147483648;
	or.b32  	%r578, %r577, 1056964608;
	mov.b32 	%f203, %r578;
	add.f32 	%f204, %f202, %f203;
	cvt.rzi.f32.f32 	%f205, %f204;
	abs.f32 	%f206, %f202;
	setp.gt.f32 	%p56, %f206, 0f4B000000;
	selp.f32 	%f207, %f202, %f205, %p56;
	cvt.rzi.f32.f32 	%f208, %f202;
	setp.lt.f32 	%p57, %f206, 0f3F000000;
	selp.f32 	%f209, %f208, %f207, %p57;
	cvt.rzi.s32.f32 	%r579, %f209;
	fma.rn.f32 	%f210, %f209, 0fBF000000, %f201;
	mul.f32 	%f211, %f210, %f210;
	fma.rn.f32 	%f212, %f211, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f213, %f211, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f214, %f212, %f211, 0fC0A55DF6;
	fma.rn.f32 	%f215, %f213, %f211, 0f4081E0CF;
	fma.rn.f32 	%f216, %f211, %f210, 0f00000000;
	fma.rn.f32 	%f217, %f215, %f211, 0fC09DE9E6;
	fma.rn.f32 	%f218, %f214, %f216, 0f00000000;
	fma.rn.f32 	%f219, %f217, %f211, 0f3F800000;
	fma.rn.f32 	%f220, %f210, 0f40490FDB, %f218;
	and.b32  	%r580, %r579, 1;
	setp.eq.b32 	%p58, %r580, 1;
	selp.f32 	%f221, %f219, %f220, %p58;
	selp.f32 	%f222, %f220, %f219, %p58;
	and.b32  	%r581, %r579, 2;
	setp.eq.s32 	%p59, %r581, 0;
	neg.f32 	%f223, %f221;
	selp.f32 	%f224, %f221, %f223, %p59;
	add.s32 	%r582, %r579, 1;
	and.b32  	%r583, %r582, 2;
	setp.eq.s32 	%p60, %r583, 0;
	sub.f32 	%f225, %f26, %f222;
	selp.f32 	%f226, %f222, %f225, %p60;
	cvt.rzi.f32.f32 	%f227, %f201;
	setp.eq.f32 	%p61, %f227, %f201;
	mul.f32 	%f228, %f201, 0f00000000;
	selp.f32 	%f229, %f228, %f224, %p61;
	abs.f32 	%f230, %f201;
	setp.gt.f32 	%p62, %f230, 0f4B800000;
	add.f32 	%f231, %f229, 0f3F800000;
	selp.f32 	%f232, %f231, %f226, %p62;
	shl.b32 	%r584, %r573, 5;
	add.s32 	%r585, %r574, %r584;
	and.b32  	%r586, %r585, 448;
	cvt.rn.f32.s32 	%f233, %r586;
	mul.f32 	%f234, %f233, 0f3B800000;
	add.f32 	%f235, %f234, %f234;
	mov.b32 	%r587, %f235;
	and.b32  	%r588, %r587, -2147483648;
	or.b32  	%r589, %r588, 1056964608;
	mov.b32 	%f236, %r589;
	add.f32 	%f237, %f235, %f236;
	cvt.rzi.f32.f32 	%f238, %f237;
	abs.f32 	%f239, %f235;
	setp.gt.f32 	%p63, %f239, 0f4B000000;
	selp.f32 	%f240, %f235, %f238, %p63;
	cvt.rzi.f32.f32 	%f241, %f235;
	setp.lt.f32 	%p64, %f239, 0f3F000000;
	selp.f32 	%f242, %f241, %f240, %p64;
	cvt.rzi.s32.f32 	%r590, %f242;
	fma.rn.f32 	%f243, %f242, 0fBF000000, %f234;
	mul.f32 	%f244, %f243, %f243;
	fma.rn.f32 	%f245, %f244, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f246, %f244, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f247, %f245, %f244, 0fC0A55DF6;
	fma.rn.f32 	%f248, %f246, %f244, 0f4081E0CF;
	fma.rn.f32 	%f249, %f244, %f243, 0f00000000;
	fma.rn.f32 	%f250, %f248, %f244, 0fC09DE9E6;
	fma.rn.f32 	%f251, %f247, %f249, 0f00000000;
	fma.rn.f32 	%f252, %f250, %f244, 0f3F800000;
	fma.rn.f32 	%f253, %f243, 0f40490FDB, %f251;
	and.b32  	%r591, %r590, 1;
	setp.eq.b32 	%p65, %r591, 1;
	selp.f32 	%f254, %f252, %f253, %p65;
	selp.f32 	%f255, %f253, %f252, %p65;
	and.b32  	%r592, %r590, 2;
	setp.eq.s32 	%p66, %r592, 0;
	neg.f32 	%f256, %f254;
	selp.f32 	%f257, %f254, %f256, %p66;
	add.s32 	%r593, %r590, 1;
	and.b32  	%r594, %r593, 2;
	setp.eq.s32 	%p67, %r594, 0;
	sub.f32 	%f258, %f26, %f255;
	selp.f32 	%f259, %f255, %f258, %p67;
	cvt.rzi.f32.f32 	%f260, %f234;
	setp.eq.f32 	%p68, %f260, %f234;
	mul.f32 	%f261, %f234, 0f00000000;
	selp.f32 	%f262, %f261, %f257, %p68;
	abs.f32 	%f263, %f234;
	setp.gt.f32 	%p69, %f263, 0f4B800000;
	add.f32 	%f264, %f262, 0f3F800000;
	selp.f32 	%f265, %f264, %f259, %p69;
	mov.b32 	%r266, %f232;
	mov.b32 	%r267, %f265;
	// begin inline asm
	cvt.rn.f16x2.f32 %r1027, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1037, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1047, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1057, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1067, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1077, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1087, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1097, %r267, %r266;
	// end inline asm
	mov.b32 	%r314, %f229;
	xor.b32  	%r293, %r314, -2147483648;
	mov.b32 	%r315, %f262;
	xor.b32  	%r294, %r315, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r1028, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1038, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1048, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1058, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1068, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1078, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1088, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1098, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1029, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1039, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1049, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1059, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1069, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1079, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1089, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1099, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1030, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1040, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1050, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1060, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1070, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1080, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1090, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1100, %r267, %r266;
	// end inline asm
	and.b16  	%rs44, %rs6, 2;
	shl.b16 	%rs45, %rs6, 1;
	shr.u16 	%rs46, %rs44, 1;
	or.b16  	%rs47, %rs45, %rs46;
	and.b16  	%rs48, %rs47, 3;
	cvt.u32.u16 	%r595, %rs48;
	mul.lo.s32 	%r596, %r573, %r595;
	cvt.rn.f32.s32 	%f266, %r596;
	mul.f32 	%f267, %f266, 0f3B800000;
	add.f32 	%f268, %f267, %f267;
	mov.b32 	%r597, %f268;
	and.b32  	%r598, %r597, -2147483648;
	or.b32  	%r599, %r598, 1056964608;
	mov.b32 	%f269, %r599;
	add.f32 	%f270, %f268, %f269;
	cvt.rzi.f32.f32 	%f271, %f270;
	abs.f32 	%f272, %f268;
	setp.gt.f32 	%p70, %f272, 0f4B000000;
	selp.f32 	%f273, %f268, %f271, %p70;
	cvt.rzi.f32.f32 	%f274, %f268;
	setp.lt.f32 	%p71, %f272, 0f3F000000;
	selp.f32 	%f275, %f274, %f273, %p71;
	cvt.rzi.s32.f32 	%r600, %f275;
	fma.rn.f32 	%f276, %f275, 0fBF000000, %f267;
	mul.f32 	%f277, %f276, %f276;
	fma.rn.f32 	%f278, %f277, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f279, %f277, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f280, %f278, %f277, 0fC0A55DF6;
	fma.rn.f32 	%f281, %f279, %f277, 0f4081E0CF;
	fma.rn.f32 	%f282, %f277, %f276, 0f00000000;
	fma.rn.f32 	%f283, %f281, %f277, 0fC09DE9E6;
	fma.rn.f32 	%f284, %f280, %f282, 0f00000000;
	fma.rn.f32 	%f285, %f283, %f277, 0f3F800000;
	fma.rn.f32 	%f286, %f276, 0f40490FDB, %f284;
	and.b32  	%r601, %r600, 1;
	setp.eq.b32 	%p72, %r601, 1;
	selp.f32 	%f287, %f285, %f286, %p72;
	selp.f32 	%f288, %f286, %f285, %p72;
	and.b32  	%r602, %r600, 2;
	setp.eq.s32 	%p73, %r602, 0;
	neg.f32 	%f289, %f287;
	selp.f32 	%f290, %f287, %f289, %p73;
	add.s32 	%r603, %r600, 1;
	and.b32  	%r604, %r603, 2;
	setp.eq.s32 	%p74, %r604, 0;
	sub.f32 	%f291, %f26, %f288;
	selp.f32 	%f292, %f288, %f291, %p74;
	cvt.rzi.f32.f32 	%f293, %f267;
	setp.eq.f32 	%p75, %f293, %f267;
	mul.f32 	%f294, %f267, 0f00000000;
	selp.f32 	%f295, %f294, %f290, %p75;
	abs.f32 	%f296, %f267;
	setp.gt.f32 	%p76, %f296, 0f4B800000;
	add.f32 	%f297, %f295, 0f3F800000;
	selp.f32 	%f298, %f297, %f292, %p76;
	shl.b32 	%r605, %r573, 2;
	add.s32 	%r606, %r596, %r605;
	cvt.rn.f32.s32 	%f299, %r606;
	mul.f32 	%f300, %f299, 0f3B800000;
	add.f32 	%f301, %f300, %f300;
	mov.b32 	%r607, %f301;
	and.b32  	%r608, %r607, -2147483648;
	or.b32  	%r609, %r608, 1056964608;
	mov.b32 	%f302, %r609;
	add.f32 	%f303, %f301, %f302;
	cvt.rzi.f32.f32 	%f304, %f303;
	abs.f32 	%f305, %f301;
	setp.gt.f32 	%p77, %f305, 0f4B000000;
	selp.f32 	%f306, %f301, %f304, %p77;
	cvt.rzi.f32.f32 	%f307, %f301;
	setp.lt.f32 	%p78, %f305, 0f3F000000;
	selp.f32 	%f308, %f307, %f306, %p78;
	cvt.rzi.s32.f32 	%r610, %f308;
	fma.rn.f32 	%f309, %f308, 0fBF000000, %f300;
	mul.f32 	%f310, %f309, %f309;
	fma.rn.f32 	%f311, %f310, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f312, %f310, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f313, %f311, %f310, 0fC0A55DF6;
	fma.rn.f32 	%f314, %f312, %f310, 0f4081E0CF;
	fma.rn.f32 	%f315, %f310, %f309, 0f00000000;
	fma.rn.f32 	%f316, %f314, %f310, 0fC09DE9E6;
	fma.rn.f32 	%f317, %f313, %f315, 0f00000000;
	fma.rn.f32 	%f318, %f316, %f310, 0f3F800000;
	fma.rn.f32 	%f319, %f309, 0f40490FDB, %f317;
	and.b32  	%r611, %r610, 1;
	setp.eq.b32 	%p79, %r611, 1;
	selp.f32 	%f320, %f318, %f319, %p79;
	selp.f32 	%f321, %f319, %f318, %p79;
	and.b32  	%r612, %r610, 2;
	setp.eq.s32 	%p80, %r612, 0;
	neg.f32 	%f322, %f320;
	selp.f32 	%f323, %f320, %f322, %p80;
	add.s32 	%r613, %r610, 1;
	and.b32  	%r614, %r613, 2;
	setp.eq.s32 	%p81, %r614, 0;
	sub.f32 	%f324, %f26, %f321;
	selp.f32 	%f325, %f321, %f324, %p81;
	cvt.rzi.f32.f32 	%f326, %f300;
	setp.eq.f32 	%p82, %f326, %f300;
	mul.f32 	%f327, %f300, 0f00000000;
	selp.f32 	%f328, %f327, %f323, %p82;
	abs.f32 	%f329, %f300;
	setp.gt.f32 	%p83, %f329, 0f4B800000;
	add.f32 	%f330, %f328, 0f3F800000;
	selp.f32 	%f331, %f330, %f325, %p83;
	mov.b32 	%r362, %f298;
	mov.b32 	%r363, %f331;
	// begin inline asm
	cvt.rn.f16x2.f32 %r89, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r90, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r91, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r92, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r93, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r94, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r95, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r96, %r363, %r362;
	// end inline asm
	mov.b32 	%r386, %f295;
	mov.b32 	%r387, %f328;
	// begin inline asm
	cvt.rn.f16x2.f32 %r97, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r98, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r99, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r100, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r101, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r102, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r103, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r104, %r387, %r386;
	// end inline asm
	shl.b32 	%r615, %r2, 4;
	and.b32  	%r616, %r615, 448;
	mul.lo.s32 	%r617, %r616, %r595;
	and.b32  	%r618, %r617, 448;
	cvt.rn.f32.s32 	%f332, %r618;
	mul.f32 	%f333, %f332, 0f3B800000;
	add.f32 	%f334, %f333, %f333;
	mov.b32 	%r619, %f334;
	and.b32  	%r620, %r619, -2147483648;
	or.b32  	%r621, %r620, 1056964608;
	mov.b32 	%f335, %r621;
	add.f32 	%f336, %f334, %f335;
	cvt.rzi.f32.f32 	%f337, %f336;
	abs.f32 	%f338, %f334;
	setp.gt.f32 	%p84, %f338, 0f4B000000;
	selp.f32 	%f339, %f334, %f337, %p84;
	cvt.rzi.f32.f32 	%f340, %f334;
	setp.lt.f32 	%p85, %f338, 0f3F000000;
	selp.f32 	%f341, %f340, %f339, %p85;
	cvt.rzi.s32.f32 	%r622, %f341;
	fma.rn.f32 	%f342, %f341, 0fBF000000, %f333;
	mul.f32 	%f343, %f342, %f342;
	fma.rn.f32 	%f344, %f343, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f345, %f343, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f346, %f344, %f343, 0fC0A55DF6;
	fma.rn.f32 	%f347, %f345, %f343, 0f4081E0CF;
	fma.rn.f32 	%f348, %f343, %f342, 0f00000000;
	fma.rn.f32 	%f349, %f347, %f343, 0fC09DE9E6;
	fma.rn.f32 	%f350, %f346, %f348, 0f00000000;
	fma.rn.f32 	%f351, %f349, %f343, 0f3F800000;
	fma.rn.f32 	%f352, %f342, 0f40490FDB, %f350;
	and.b32  	%r623, %r622, 1;
	setp.eq.b32 	%p86, %r623, 1;
	selp.f32 	%f353, %f351, %f352, %p86;
	selp.f32 	%f354, %f352, %f351, %p86;
	and.b32  	%r624, %r622, 2;
	setp.eq.s32 	%p87, %r624, 0;
	neg.f32 	%f355, %f353;
	selp.f32 	%f356, %f353, %f355, %p87;
	add.s32 	%r625, %r622, 1;
	and.b32  	%r626, %r625, 2;
	setp.eq.s32 	%p88, %r626, 0;
	sub.f32 	%f357, %f26, %f354;
	selp.f32 	%f358, %f354, %f357, %p88;
	cvt.rzi.f32.f32 	%f359, %f333;
	setp.eq.f32 	%p89, %f359, %f333;
	mul.f32 	%f360, %f333, 0f00000000;
	selp.f32 	%f361, %f360, %f356, %p89;
	abs.f32 	%f362, %f333;
	setp.gt.f32 	%p90, %f362, 0f4B800000;
	add.f32 	%f363, %f361, 0f3F800000;
	selp.f32 	%f364, %f363, %f358, %p90;
	shl.b32 	%r627, %r616, 2;
	add.s32 	%r628, %r617, %r627;
	and.b32  	%r629, %r628, 448;
	cvt.rn.f32.s32 	%f365, %r629;
	mul.f32 	%f366, %f365, 0f3B800000;
	add.f32 	%f367, %f366, %f366;
	mov.b32 	%r630, %f367;
	and.b32  	%r631, %r630, -2147483648;
	or.b32  	%r632, %r631, 1056964608;
	mov.b32 	%f368, %r632;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p91, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p91;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p92, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p92;
	cvt.rzi.s32.f32 	%r633, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f366;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r634, %r633, 1;
	setp.eq.b32 	%p93, %r634, 1;
	selp.f32 	%f386, %f384, %f385, %p93;
	selp.f32 	%f387, %f385, %f384, %p93;
	and.b32  	%r635, %r633, 2;
	setp.eq.s32 	%p94, %r635, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p94;
	add.s32 	%r636, %r633, 1;
	and.b32  	%r637, %r636, 2;
	setp.eq.s32 	%p95, %r637, 0;
	sub.f32 	%f390, %f26, %f387;
	selp.f32 	%f391, %f387, %f390, %p95;
	cvt.rzi.f32.f32 	%f392, %f366;
	setp.eq.f32 	%p96, %f392, %f366;
	mul.f32 	%f393, %f366, 0f00000000;
	selp.f32 	%f394, %f393, %f389, %p96;
	abs.f32 	%f395, %f366;
	setp.gt.f32 	%p97, %f395, 0f4B800000;
	add.f32 	%f396, %f394, 0f3F800000;
	selp.f32 	%f397, %f396, %f391, %p97;
	mov.b32 	%r410, %f364;
	mov.b32 	%r411, %f397;
	// begin inline asm
	cvt.rn.f16x2.f32 %r1299, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1309, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1319, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1329, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1339, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1349, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1359, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1369, %r411, %r410;
	// end inline asm
	mov.b32 	%r458, %f361;
	xor.b32  	%r437, %r458, -2147483648;
	mov.b32 	%r459, %f394;
	xor.b32  	%r438, %r459, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r1300, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1310, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1320, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1330, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1340, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1350, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1360, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1370, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1301, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1311, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1321, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1331, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1341, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1351, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1361, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1371, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1302, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1312, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1322, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1332, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1342, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1352, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1362, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r1372, %r411, %r410;
	// end inline asm
	shl.b32 	%r638, %r3, 11;
	shl.b32 	%r639, %r1, 8;
	and.b32  	%r640, %r639, 1024;
	shr.u32 	%r641, %r2, 1;
	and.b32  	%r642, %r641, 8;
	shl.b32 	%r643, %r2, 5;
	and.b32  	%r644, %r643, 64;
	and.b32  	%r645, %r639, 768;
	shl.b32 	%r646, %r2, 7;
	and.b32  	%r647, %r646, 128;
	shl.b32 	%r648, %r2, 3;
	and.b32  	%r649, %r648, 32;
	or.b32  	%r650, %r640, %r638;
	or.b32  	%r651, %r650, %r572;
	or.b32  	%r652, %r651, %r647;
	or.b32  	%r653, %r652, %r649;
	or.b32  	%r654, %r653, %r645;
	or.b32  	%r655, %r654, %r644;
	add.s32 	%r656, %r655, %r642;
	mul.wide.u32 	%rd29, %r656, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.u32 	%r818, [%rd30];
	or.b32  	%r657, %r644, %r642;
	or.b32  	%r658, %r657, %r645;
	or.b32  	%r659, %r658, %r649;
	or.b32  	%r660, %r659, %r647;
	or.b32  	%r661, %r660, %r572;
	cvt.u64.u32 	%rd31, %r650;
	cvt.u64.u32 	%rd32, %r661;
	add.s64 	%rd33, %rd31, %rd32;
	shl.b64 	%rd34, %rd33, 2;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r821, [%rd35+4];
	ld.global.u32 	%r824, [%rd35+8];
	ld.global.u32 	%r827, [%rd35+12];
	ld.global.u32 	%r830, [%rd35+16];
	ld.global.u32 	%r833, [%rd35+20];
	ld.global.u32 	%r836, [%rd35+24];
	or.b32  	%r662, %r644, %r641;
	or.b32  	%r663, %r662, %r639;
	and.b32  	%r664, %r663, 840;
	or.b32  	%r665, %r664, %r649;
	or.b32  	%r666, %r665, %r647;
	or.b32  	%r667, %r666, %r572;
	or.b32  	%r668, %r650, %r667;
	mul.wide.u32 	%rd36, %r668, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.global.u32 	%r839, [%rd37+28];
	shl.b32 	%r145, %r152, 17;
	shr.u32 	%r669, %r661, 2;
	shl.b32 	%r670, %r1, 6;
	and.b32  	%r671, %r670, 256;
	shl.b32 	%r672, %r3, 9;
	or.b32  	%r673, %r671, %r672;
	or.b32  	%r146, %r673, %r669;
	and.b32  	%r147, %r2, 1;
	and.b32  	%r148, %r2, 2;
	shl.b32 	%r674, %r1, 9;
	or.b32  	%r675, %r615, %r674;
	mul.wide.u32 	%rd38, %r675, 4;
	mov.u64 	%rd39, shmem;
	add.s64 	%rd40, %rd38, %rd39;
	add.s64 	%rd5, %rd40, -4;
	or.b32  	%r676, %r670, %r571;
	mul.wide.u32 	%rd41, %r676, 4;
	add.s64 	%rd6, %rd39, %rd41;
	or.b32  	%r677, %r676, 512;
	mul.wide.u32 	%rd42, %r677, 4;
	add.s64 	%rd7, %rd39, %rd42;
	or.b32  	%r678, %r676, 513;
	mul.wide.u32 	%rd43, %r678, 4;
	add.s64 	%rd8, %rd39, %rd43;
	or.b32  	%r679, %r676, 1024;
	mul.wide.u32 	%rd44, %r679, 4;
	add.s64 	%rd9, %rd39, %rd44;
	or.b32  	%r680, %r676, 1025;
	mul.wide.u32 	%rd45, %r680, 4;
	add.s64 	%rd10, %rd39, %rd45;
	or.b32  	%r681, %r676, 1536;
	mul.wide.u32 	%rd46, %r681, 4;
	add.s64 	%rd11, %rd39, %rd46;
	or.b32  	%r682, %r676, 1537;
	mul.wide.u32 	%rd47, %r682, 4;
	add.s64 	%rd12, %rd39, %rd47;
	or.b32  	%r683, %r676, 2048;
	mul.wide.u32 	%rd48, %r683, 4;
	add.s64 	%rd13, %rd39, %rd48;
	or.b32  	%r684, %r676, 2049;
	mul.wide.u32 	%rd49, %r684, 4;
	add.s64 	%rd14, %rd39, %rd49;
	or.b32  	%r685, %r676, 2560;
	mul.wide.u32 	%rd50, %r685, 4;
	add.s64 	%rd15, %rd39, %rd50;
	or.b32  	%r686, %r676, 2561;
	mul.wide.u32 	%rd51, %r686, 4;
	add.s64 	%rd16, %rd39, %rd51;
	or.b32  	%r687, %r676, 3072;
	mul.wide.u32 	%rd52, %r687, 4;
	add.s64 	%rd17, %rd39, %rd52;
	or.b32  	%r688, %r676, 3073;
	mul.wide.u32 	%rd53, %r688, 4;
	add.s64 	%rd18, %rd39, %rd53;
	or.b32  	%r689, %r676, 3584;
	mul.wide.u32 	%rd54, %r689, 4;
	add.s64 	%rd19, %rd39, %rd54;
	or.b32  	%r690, %r676, 3585;
	mul.wide.u32 	%rd55, %r690, 4;
	add.s64 	%rd20, %rd39, %rd55;
	or.b32  	%r149, %r4, %r638;
	mov.u32 	%r505, 0;
	mov.u16 	%rs78, 0;
	mov.u32 	%r1996, %r505;
$L__BB0_8:                              // %L2812
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_9 Depth 2
	mov.u32 	%r1997, 24;
	mov.u16 	%rs79, %rs78;
	mov.u32 	%r1998, %r505;
	mov.u32 	%r1999, %r505;
	mov.u32 	%r2000, %r505;
	mov.u32 	%r2001, %r505;
	mov.u32 	%r2002, %r505;
	mov.u32 	%r2003, %r505;
	mov.u32 	%r2004, %r505;
	mov.u32 	%r2005, %r505;
$L__BB0_9:                              // %L2815
                                        //   Parent Loop BB0_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p98, %r148, 0;
	setp.eq.s32 	%p99, %r147, 0;
	shr.s16 	%rs73, %rs79, 15;
	shr.u16 	%rs74, %rs73, 4;
	add.s16 	%rs75, %rs79, %rs74;
	and.b16  	%rs76, %rs75, 28672;
	sub.s16 	%rs77, %rs79, %rs76;
	cvt.u32.u16 	%r1921, %rs77;
	shl.b32 	%r1922, %r1921, 17;
	or.b32  	%r1923, %r146, %r1922;
	add.s32 	%r1924, %r1923, %r145;
	shr.s32 	%r1925, %r1924, 31;
	shr.u32 	%r1926, %r1925, 3;
	add.s32 	%r1927, %r1924, %r1926;
	shr.s32 	%r1928, %r1927, 29;
	setp.lt.s32 	%p100, %r1924, 0;
	and.b32  	%r1929, %r1927, -536870912;
	setp.ne.s32 	%p101, %r1929, %r1924;
	and.pred  	%p102, %p100, %p101;
	selp.u32 	%r1930, 1, 0, %p102;
	sub.s32 	%r1931, %r1930, %r1928;
	shl.b32 	%r1932, %r1931, 29;
	add.s32 	%r1933, %r1924, %r1932;
	add.s32 	%r1934, %r1933, 1;
	mul.wide.s32 	%rd56, %r1934, 4;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.v2.u32 	{%r1935, %r1936}, [%rd57+-4];
	mov.u16 	%rs49, 25600;
	// begin inline asm
	mov.b32 %r698, {%rs49, %rs49};
	// end inline asm
	mov.u16 	%rs51, 21504;
	// begin inline asm
	mov.b32 %r709, {%rs51, %rs51};
	// end inline asm
	xor.b32  	%r697, %r1935, -2004318072;
	mov.u32 	%r696, 983055;
	// begin inline asm
	lop3.b32 %r695, %r696, %r697, %r698, 202;
	// end inline asm
	mov.u16 	%rs53, 18432;
	// begin inline asm
	mov.b32 %r699, {%rs53, %rs53};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r700, %r698, %r699;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r786, %r695, %r700;
	// end inline asm
	mov.u32 	%r707, 15728880;
	// begin inline asm
	lop3.b32 %r706, %r707, %r697, %r709, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r710, {%rs53, %rs53};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r711, %r709, %r710;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r787, %r706, %r711;
	// end inline asm
	shr.u32 	%r719, %r697, 8;
	// begin inline asm
	lop3.b32 %r717, %r696, %r719, %r698, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r721, {%rs53, %rs53};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r722, %r698, %r721;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r794, %r717, %r722;
	// end inline asm
	// begin inline asm
	lop3.b32 %r728, %r707, %r719, %r709, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r732, {%rs53, %rs53};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r733, %r709, %r732;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r795, %r728, %r733;
	// end inline asm
	// begin inline asm
	mov.b32 %r744, {%rs49, %rs49};
	// end inline asm
	// begin inline asm
	mov.b32 %r755, {%rs51, %rs51};
	// end inline asm
	xor.b32  	%r743, %r1936, -2004318072;
	// begin inline asm
	lop3.b32 %r741, %r696, %r743, %r744, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r745, {%rs53, %rs53};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r746, %r744, %r745;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r802, %r741, %r746;
	// end inline asm
	// begin inline asm
	lop3.b32 %r752, %r707, %r743, %r755, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r756, {%rs53, %rs53};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r757, %r755, %r756;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r803, %r752, %r757;
	// end inline asm
	shr.u32 	%r765, %r743, 8;
	// begin inline asm
	lop3.b32 %r763, %r696, %r765, %r744, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r767, {%rs53, %rs53};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r768, %r744, %r767;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r810, %r763, %r768;
	// end inline asm
	// begin inline asm
	lop3.b32 %r774, %r707, %r765, %r755, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r778, {%rs53, %rs53};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r779, %r755, %r778;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r811, %r774, %r779;
	// end inline asm
	mov.u32 	%r788, 21520;
	// begin inline asm
	prmt.b32 %r785, %r786, %r787, %r788;
	// end inline asm
	mov.u32 	%r792, 30258;
	// begin inline asm
	prmt.b32 %r789, %r786, %r787, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r794, %r795, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r794, %r795, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r802, %r803, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r802, %r803, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r810, %r811, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r810, %r811, %r792;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r818;
    mov.b32 {%r2re, %r2im}, %r785;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r817, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r821;
    mov.b32 {%r2re, %r2im}, %r793;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r820, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r824;
    mov.b32 {%r2re, %r2im}, %r789;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r823, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r827;
    mov.b32 {%r2re, %r2im}, %r797;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r826, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r830;
    mov.b32 {%r2re, %r2im}, %r801;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r829, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r833;
    mov.b32 {%r2re, %r2im}, %r809;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r832, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r836;
    mov.b32 {%r2re, %r2im}, %r805;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r835, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r839;
    mov.b32 {%r2re, %r2im}, %r813;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r838, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r904, %r901}, {%r843, %r844}, {%r817}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r913, %r910}, {%r850, %r851}, {%r820}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r922, %r919}, {%r857, %r858}, {%r823}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r931, %r928}, {%r864, %r865}, {%r826}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r940, %r937}, {%r871, %r872}, {%r829}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r949, %r946}, {%r878, %r879}, {%r832}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r958, %r955}, {%r885, %r886}, {%r835}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r967, %r964}, {%r892, %r893}, {%r838}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r897, %r45;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r899, %r897, %r901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r902, %r41, %r904, %r899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r906, %r46;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r908, %r906, %r910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r911, %r42, %r913, %r908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r915, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r917, %r915, %r919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r920, %r43, %r922, %r917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r924, %r48;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r926, %r924, %r928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r929, %r44, %r931, %r926;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r933, %r53;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r935, %r933, %r937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r938, %r49, %r940, %r935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r942, %r54;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r944, %r942, %r946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r947, %r50, %r949, %r944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r951, %r55;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r953, %r951, %r955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r956, %r51, %r958, %r953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r960, %r56;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r962, %r960, %r964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r965, %r52, %r967, %r962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r969, %r45, %r904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r972, %r41, %r901, %r969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r976, %r46, %r913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r979, %r42, %r910, %r976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r983, %r47, %r922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r986, %r43, %r919, %r983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r990, %r48, %r931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r993, %r44, %r928, %r990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r997, %r53, %r940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1000, %r49, %r937, %r997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1004, %r54, %r949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1007, %r50, %r946, %r1004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1011, %r55, %r958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1014, %r51, %r955, %r1011;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1018, %r56, %r967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1021, %r52, %r964, %r1018;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1106, %r1114}, {%r1027, %r1028, %r1029, %r1030}, {%r902, %r972}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1122, %r1130}, {%r1037, %r1038, %r1039, %r1040}, {%r911, %r979}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1138, %r1146}, {%r1047, %r1048, %r1049, %r1050}, {%r920, %r986}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1154, %r1162}, {%r1057, %r1058, %r1059, %r1060}, {%r929, %r993}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1107, %r1115}, {%r1067, %r1068, %r1069, %r1070}, {%r938, %r1000}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1123, %r1131}, {%r1077, %r1078, %r1079, %r1080}, {%r947, %r1007}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1139, %r1147}, {%r1087, %r1088, %r1089, %r1090}, {%r956, %r1014}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1155, %r1163}, {%r1097, %r1098, %r1099, %r1100}, {%r965, %r1021}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1105, %r1106, %r1107, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1109, %r1106, %r1107, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1113, %r1114, %r1115, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1117, %r1114, %r1115, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1121, %r1122, %r1123, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1125, %r1122, %r1123, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1129, %r1130, %r1131, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1133, %r1130, %r1131, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1137, %r1138, %r1139, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1141, %r1138, %r1139, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1145, %r1146, %r1147, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1149, %r1146, %r1147, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1153, %r1154, %r1155, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1157, %r1154, %r1155, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1161, %r1162, %r1163, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1165, %r1162, %r1163, %r792;
	// end inline asm
	selp.b32 	%r1937, %r1137, %r1105, %p99;
	shfl.sync.bfly.b32	%r1938, %r1937, 1, 31, -1;
	selp.b32 	%r1939, %r1105, %r1938, %p99;
	selp.b32 	%r1940, %r1938, %r1137, %p99;
	selp.b32 	%r1941, %r1141, %r1109, %p99;
	shfl.sync.bfly.b32	%r1942, %r1941, 1, 31, -1;
	selp.b32 	%r1943, %r1109, %r1942, %p99;
	selp.b32 	%r1944, %r1942, %r1141, %p99;
	selp.b32 	%r1945, %r1145, %r1113, %p99;
	shfl.sync.bfly.b32	%r1946, %r1945, 1, 31, -1;
	selp.b32 	%r1947, %r1113, %r1946, %p99;
	selp.b32 	%r1948, %r1946, %r1145, %p99;
	selp.b32 	%r1949, %r1149, %r1117, %p99;
	shfl.sync.bfly.b32	%r1950, %r1949, 1, 31, -1;
	selp.b32 	%r1951, %r1117, %r1950, %p99;
	selp.b32 	%r1952, %r1950, %r1149, %p99;
	selp.b32 	%r1953, %r1153, %r1121, %p99;
	shfl.sync.bfly.b32	%r1954, %r1953, 1, 31, -1;
	selp.b32 	%r1955, %r1121, %r1954, %p99;
	selp.b32 	%r1956, %r1954, %r1153, %p99;
	selp.b32 	%r1957, %r1157, %r1125, %p99;
	shfl.sync.bfly.b32	%r1958, %r1957, 1, 31, -1;
	selp.b32 	%r1959, %r1125, %r1958, %p99;
	selp.b32 	%r1960, %r1958, %r1157, %p99;
	selp.b32 	%r1961, %r1161, %r1129, %p99;
	shfl.sync.bfly.b32	%r1962, %r1961, 1, 31, -1;
	selp.b32 	%r1963, %r1129, %r1962, %p99;
	selp.b32 	%r1964, %r1962, %r1161, %p99;
	selp.b32 	%r1965, %r1165, %r1133, %p99;
	shfl.sync.bfly.b32	%r1966, %r1965, 1, 31, -1;
	selp.b32 	%r1967, %r1133, %r1966, %p99;
	selp.b32 	%r1968, %r1966, %r1165, %p99;
	selp.b32 	%r1969, %r1955, %r1939, %p98;
	shfl.sync.bfly.b32	%r1970, %r1969, 2, 31, -1;
	selp.b32 	%r1176, %r1939, %r1970, %p98;
	selp.b32 	%r1212, %r1970, %r1955, %p98;
	selp.b32 	%r1971, %r1959, %r1943, %p98;
	shfl.sync.bfly.b32	%r1972, %r1971, 2, 31, -1;
	selp.b32 	%r1185, %r1943, %r1972, %p98;
	selp.b32 	%r1221, %r1972, %r1959, %p98;
	selp.b32 	%r1973, %r1956, %r1940, %p98;
	shfl.sync.bfly.b32	%r1974, %r1973, 2, 31, -1;
	selp.b32 	%r1194, %r1940, %r1974, %p98;
	selp.b32 	%r1230, %r1974, %r1956, %p98;
	selp.b32 	%r1975, %r1960, %r1944, %p98;
	shfl.sync.bfly.b32	%r1976, %r1975, 2, 31, -1;
	selp.b32 	%r1203, %r1944, %r1976, %p98;
	selp.b32 	%r1239, %r1976, %r1960, %p98;
	selp.b32 	%r1977, %r1963, %r1947, %p98;
	shfl.sync.bfly.b32	%r1978, %r1977, 2, 31, -1;
	selp.b32 	%r1173, %r1947, %r1978, %p98;
	selp.b32 	%r1209, %r1978, %r1963, %p98;
	selp.b32 	%r1979, %r1967, %r1951, %p98;
	shfl.sync.bfly.b32	%r1980, %r1979, 2, 31, -1;
	selp.b32 	%r1182, %r1951, %r1980, %p98;
	selp.b32 	%r1218, %r1980, %r1967, %p98;
	selp.b32 	%r1981, %r1964, %r1948, %p98;
	shfl.sync.bfly.b32	%r1982, %r1981, 2, 31, -1;
	selp.b32 	%r1191, %r1948, %r1982, %p98;
	selp.b32 	%r1227, %r1982, %r1964, %p98;
	selp.b32 	%r1983, %r1968, %r1952, %p98;
	shfl.sync.bfly.b32	%r1984, %r1983, 2, 31, -1;
	selp.b32 	%r1200, %r1952, %r1984, %p98;
	selp.b32 	%r1236, %r1984, %r1968, %p98;
	// begin inline asm
	neg.f16x2 %r1169, %r97;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r1169, %r1173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r89, %r1176, %r1171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1178, %r98;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1180, %r1178, %r1182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r90, %r1185, %r1180;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1187, %r99;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1189, %r1187, %r1191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1192, %r91, %r1194, %r1189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1196, %r100;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1198, %r1196, %r1200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r92, %r1203, %r1198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1205, %r101;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r1205, %r1209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r93, %r1212, %r1207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1214, %r102;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1216, %r1214, %r1218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1219, %r94, %r1221, %r1216;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1223, %r103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1225, %r1223, %r1227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1228, %r95, %r1230, %r1225;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1232, %r104;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1234, %r1232, %r1236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1237, %r96, %r1239, %r1234;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1241, %r97, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1244, %r89, %r1173, %r1241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1248, %r98, %r1185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r90, %r1182, %r1248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1255, %r99, %r1194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1258, %r91, %r1191, %r1255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1262, %r100, %r1203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1265, %r92, %r1200, %r1262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1269, %r101, %r1212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1272, %r93, %r1209, %r1269;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1276, %r102, %r1221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1279, %r94, %r1218, %r1276;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1283, %r103, %r1230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1286, %r95, %r1227, %r1283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1290, %r104, %r1239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1293, %r96, %r1236, %r1290;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1378, %r1410}, {%r1299, %r1300, %r1301, %r1302}, {%r1174, %r1244}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1379, %r1411}, {%r1309, %r1310, %r1311, %r1312}, {%r1183, %r1251}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1386, %r1418}, {%r1319, %r1320, %r1321, %r1322}, {%r1192, %r1258}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1387, %r1419}, {%r1329, %r1330, %r1331, %r1332}, {%r1201, %r1265}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1394, %r1426}, {%r1339, %r1340, %r1341, %r1342}, {%r1210, %r1272}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1395, %r1427}, {%r1349, %r1350, %r1351, %r1352}, {%r1219, %r1279}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1402, %r1434}, {%r1359, %r1360, %r1361, %r1362}, {%r1228, %r1286}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1403, %r1435}, {%r1369, %r1370, %r1371, %r1372}, {%r1237, %r1293}, {%r505, %r505};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1377, %r1378, %r1379, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1381, %r1378, %r1379, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1385, %r1386, %r1387, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1389, %r1386, %r1387, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1393, %r1394, %r1395, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1397, %r1394, %r1395, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1401, %r1402, %r1403, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1405, %r1402, %r1403, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1409, %r1410, %r1411, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1413, %r1410, %r1411, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1417, %r1418, %r1419, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1421, %r1418, %r1419, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1425, %r1426, %r1427, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1429, %r1426, %r1427, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1433, %r1434, %r1435, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1437, %r1434, %r1435, %r792;
	// end inline asm
	st.shared.v4.u32 	[%rd5+4], {%r1377, %r1409, %r1385, %r1417};
	st.shared.v4.u32 	[%rd5+20], {%r1393, %r1425, %r1401, %r1433};
	st.shared.v4.u32 	[%rd5+36], {%r1381, %r1413, %r1389, %r1421};
	st.shared.v4.u32 	[%rd5+52], {%r1397, %r1429, %r1405, %r1437};
	bar.sync 	0;
	ld.shared.v2.u32 	{%r1442, %r1460}, [%rd6];
	ld.shared.u32 	%r1490, [%rd7];
	ld.shared.u32 	%r1516, [%rd8];
	ld.shared.u32 	%r1509, [%rd9];
	ld.shared.u32 	%r1480, [%rd10];
	ld.shared.u32 	%r1512, [%rd11];
	ld.shared.u32 	%r1486, [%rd12];
	ld.shared.u32 	%r1497, [%rd13];
	ld.shared.u32 	%r1519, [%rd14];
	ld.shared.u32 	%r1505, [%rd15];
	ld.shared.u32 	%r1527, [%rd16];
	ld.shared.u32 	%r1520, [%rd17];
	ld.shared.u32 	%r1495, [%rd18];
	ld.shared.u32 	%r1523, [%rd19];
	ld.shared.u32 	%r1501, [%rd20];
	// begin inline asm
	add.rn.f16x2 %r1441, %r1442, %r1490;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1444, %r1441, %r1509;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1447, %r1444, %r1512;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1450, %r1497, %r1505;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1453, %r1450, %r1520;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1456, %r1453, %r1523;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1459, %r1460, %r1516;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1462, %r1459, %r1480;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1465, %r1462, %r1486;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1468, %r1519, %r1527;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1471, %r1468, %r1495;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1474, %r1471, %r1501;
	// end inline asm
	mov.u32 	%r1478, 967326120;
	// begin inline asm
	neg.f16x2 %r1477, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1479, %r1480;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1481, %r1442, %r1479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r1477, %r1486, %r1481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r1478, %r1490, %r1484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1492, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1494, %r1495;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1496, %r1497, %r1494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1499, %r1492, %r1501, %r1496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r1478, %r1505, %r1499;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1507, %r1460, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r1478, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r1478, %r1516, %r1510;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1518, %r1519, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r1478, %r1523, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r1478, %r1527, %r1521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1529, %r1516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1531, %r1509;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1533, %r1442, %r1529;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1536, %r1533, %r1531;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1539, %r1536, %r1486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1542, %r1527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1544, %r1520;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1546, %r1497, %r1542;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1549, %r1546, %r1544;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1552, %r1549, %r1501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1555, %r1480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1557, %r1512;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1559, %r1460, %r1490;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1562, %r1559, %r1555;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1565, %r1562, %r1557;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1568, %r1495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1570, %r1523;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1572, %r1519, %r1505;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1575, %r1572, %r1568;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1578, %r1575, %r1570;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1581, %r1478;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1583, %r1442, %r1480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1586, %r1478, %r1512, %r1583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r1581, %r1516, %r1586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1594, %r1478;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1596, %r1497, %r1495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1599, %r1478, %r1523, %r1596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1603, %r1594, %r1527, %r1599;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1607, %r1509;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1609, %r1460, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r1478, %r1486, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r1478, %r1490, %r1612;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1620, %r1520;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1622, %r1519, %r1620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1625, %r1478, %r1501, %r1622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1629, %r1478, %r1505, %r1625;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1633, %r1490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1635, %r1512;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1637, %r1442, %r1633;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1640, %r1637, %r1509;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1643, %r1640, %r1635;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1646, %r1505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1648, %r1523;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1650, %r1497, %r1646;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1653, %r1650, %r1520;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1656, %r1653, %r1648;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1659, %r1516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1661, %r1486;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1663, %r1460, %r1659;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1666, %r1663, %r1480;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1669, %r1666, %r1661;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1672, %r1527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1674, %r1501;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1676, %r1519, %r1672;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1679, %r1676, %r1495;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1682, %r1679, %r1674;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1685, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1687, %r1480;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1689, %r1442, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1692, %r1478, %r1486, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r1685, %r1490, %r1692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1700, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1702, %r1495;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1704, %r1497, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r1478, %r1501, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r1700, %r1505, %r1707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1715, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1717, %r1478;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1719, %r1460, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r1717, %r1512, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r1715, %r1516, %r1722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1730, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1732, %r1478;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1734, %r1519, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r1732, %r1523, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r1730, %r1527, %r1737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1745, %r1509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1747, %r1486;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1749, %r1442, %r1516;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1752, %r1749, %r1745;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1755, %r1752, %r1747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1758, %r1520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1760, %r1501;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1762, %r1497, %r1527;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1765, %r1762, %r1758;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1768, %r1765, %r1760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1771, %r1490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1773, %r1480;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1775, %r1460, %r1771;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1778, %r1775, %r1773;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1781, %r1778, %r1512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1784, %r1505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1786, %r1495;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1788, %r1519, %r1784;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1791, %r1788, %r1786;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1794, %r1791, %r1523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1797, %r1478;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1799, %r1442, %r1480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r1797, %r1512, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r1478, %r1516, %r1802;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1810, %r1478;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1812, %r1497, %r1495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r1810, %r1523, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r1478, %r1527, %r1815;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1823, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1825, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1827, %r1509;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1829, %r1460, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r1825, %r1486, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r1823, %r1490, %r1832;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1840, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1842, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1844, %r1520;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1846, %r1519, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1849, %r1842, %r1501, %r1846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r1840, %r1505, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r1447, %r1465, %r2005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r1456, %r1474, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r1488, %r1514, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r1503, %r1525, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r1539, %r1565, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r1552, %r1578, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r1590, %r1616, %r2002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r1603, %r1629, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r1643, %r1669, %r2001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2001, %r1656, %r1682, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1897, %r1696, %r1726, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r1711, %r1741, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1905, %r1755, %r1781, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r1768, %r1794, %r1905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r1806, %r1836, %r1998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r1819, %r1853, %r1913;
	// end inline asm
	add.s32 	%r1997, %r1997, -1;
	add.s16 	%rs79, %rs79, 1;
	setp.eq.s32 	%p103, %r1997, 0;
	@%p103 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %guard_exit3272
                                        //   in Loop: Header=BB0_8 Depth=1
	shl.b32 	%r1985, %r1996, 19;
	or.b32  	%r1986, %r149, %r1985;
	mul.wide.u32 	%rd58, %r1986, 4;
	add.s64 	%rd59, %rd3, %rd58;
	st.global.u32 	[%rd59], %r2005;
	or.b32  	%r1987, %r1986, 256;
	mul.wide.u32 	%rd60, %r1987, 4;
	add.s64 	%rd61, %rd3, %rd60;
	st.global.u32 	[%rd61], %r2004;
	or.b32  	%r1988, %r1986, 512;
	mul.wide.u32 	%rd62, %r1988, 4;
	add.s64 	%rd63, %rd3, %rd62;
	st.global.u32 	[%rd63], %r2003;
	or.b32  	%r1989, %r1986, 768;
	mul.wide.u32 	%rd64, %r1989, 4;
	add.s64 	%rd65, %rd3, %rd64;
	st.global.u32 	[%rd65], %r2002;
	or.b32  	%r1990, %r1986, 1024;
	mul.wide.u32 	%rd66, %r1990, 4;
	add.s64 	%rd67, %rd3, %rd66;
	st.global.u32 	[%rd67], %r2001;
	or.b32  	%r1991, %r1986, 1280;
	mul.wide.u32 	%rd68, %r1991, 4;
	add.s64 	%rd69, %rd3, %rd68;
	st.global.u32 	[%rd69], %r2000;
	or.b32  	%r1992, %r1986, 1536;
	mul.wide.u32 	%rd70, %r1992, 4;
	add.s64 	%rd71, %rd3, %rd70;
	st.global.u32 	[%rd71], %r1999;
	or.b32  	%r1993, %r1986, 1792;
	mul.wide.u32 	%rd72, %r1993, 4;
	add.s64 	%rd73, %rd3, %rd72;
	st.global.u32 	[%rd73], %r1998;
	add.s32 	%r150, %r1996, 1;
	add.s16 	%rs78, %rs78, 24;
	setp.eq.s32 	%p104, %r1996, 1023;
	mov.u32 	%r1996, %r150;
	@%p104 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_8;
$L__BB0_11:                             // %L7896
	mov.u32 	%r1994, 0;
	st.global.u32 	[%rd4], %r1994;
	ret;
$L__BB0_6:                              // %L162
	mov.u32 	%r1995, 2;
	st.global.u32 	[%rd4], %r1995;
	mov.u64 	%rd74, exception557;
	cvta.global.u64 	%rd75, %rd74;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd75;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd21;
	st.param.b32 	[param0+8], %r151;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd26, exception1;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd21;
	st.param.b32 	[param0+8], %r151;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
