// PTX CompilerJob of bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) in world 33554 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1345>;
	.reg .b64 	%rd<92>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd15, [_Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r81, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r81, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r82, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r82, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r83, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r84, %r83, %r2;
	add.s32 	%r85, %r84, %r4;
	mul.wide.u32 	%rd20, %r85, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r86, 1;
	st.global.u32 	[%rd6], %r86;
	shr.u32 	%r5, %r1, 5;
	shl.b32 	%r87, %r3, 2;
	shr.u32 	%r6, %r2, 3;
	or.b32  	%r88, %r87, %r6;
	mul.hi.u32 	%r89, %r88, -1431655765;
	shr.u32 	%r90, %r89, 6;
	mul.lo.s32 	%r91, %r90, 96;
	sub.s32 	%r7, %r88, %r91;
	bfe.u32 	%r8, %r1, 4, 1;
	mad.lo.s32 	%r92, %r5, 192, %r7;
	mad.lo.s32 	%r93, %r8, 96, %r92;
	mul.wide.u32 	%rd21, %r93, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r9, [%rd22];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L344
	ld.param.u64 	%rd1, [_Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_357913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r352, %r9, -3;
	shl.b32 	%r353, %r2, 4;
	and.b32  	%r354, %r353, 16;
	shl.b32 	%r355, %r3, 6;
	shl.b32 	%r356, %r2, 1;
	and.b32  	%r357, %r356, 12;
	and.b32  	%r358, %r355, 192;
	mul.lo.s32 	%r359, %r5, 49152;
	shr.u32 	%r11, %r2, 2;
	and.b32  	%r360, %r11, 6;
	shr.u32 	%r361, %r3, 2;
	cvt.u16.u32 	%rs4, %r361;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r362, %rs9;
	and.b32  	%r363, %r362, 240;
	or.b32  	%r364, %r360, %r363;
	cvt.u16.u32 	%rs10, %r364;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r365, %rs15, 256;
	or.b32  	%r366, %r354, %r358;
	or.b32  	%r367, %r366, %r357;
	or.b32  	%r368, %r367, %r359;
	mad.lo.s32 	%r369, %r8, 24576, %r368;
	add.s32 	%r370, %r369, %r365;
	shl.b32 	%r371, %r370, 2;
	cvt.u64.u32 	%rd25, %r371;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r96, %r97, %r112, %r113}, [%rd26];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r372, %rs21, 256;
	add.s32 	%r373, %r369, %r372;
	shl.b32 	%r374, %r373, 2;
	cvt.u64.u32 	%rd27, %r374;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r104, %r105, %r120, %r121}, [%rd28];
	or.b32  	%r375, %r369, 33;
	add.s32 	%r376, %r375, %r365;
	mul.wide.u32 	%rd29, %r376, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r128, %r129, %r144, %r145}, [%rd30+-4];
	add.s32 	%r377, %r375, %r372;
	mul.wide.u32 	%rd31, %r377, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r136, %r137, %r152, %r153}, [%rd32+-4];
	or.b32  	%r378, %r11, %r363;
	or.b32  	%r379, %r378, 1;
	mul.hi.u32 	%r380, %r379, -1431655765;
	shr.u32 	%r381, %r380, 6;
	mul.lo.s32 	%r382, %r381, 96;
	sub.s32 	%r383, %r379, %r382;
	shl.b32 	%r384, %r383, 8;
	add.s32 	%r385, %r369, %r384;
	shl.b32 	%r386, %r385, 2;
	cvt.u64.u32 	%rd33, %r386;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r160, %r161, %r176, %r177}, [%rd34];
	or.b32  	%r387, %r378, 9;
	mul.hi.u32 	%r388, %r387, -1431655765;
	shr.u32 	%r389, %r388, 6;
	mul.lo.s32 	%r390, %r389, 96;
	sub.s32 	%r391, %r387, %r390;
	shl.b32 	%r392, %r391, 8;
	add.s32 	%r393, %r369, %r392;
	shl.b32 	%r394, %r393, 2;
	cvt.u64.u32 	%rd35, %r394;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r168, %r169, %r184, %r185}, [%rd36];
	add.s32 	%r395, %r375, %r384;
	mul.wide.u32 	%rd37, %r395, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r192, %r193, %r208, %r209}, [%rd38+-4];
	add.s32 	%r396, %r375, %r392;
	mul.wide.u32 	%rd39, %r396, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r200, %r201, %r216, %r217}, [%rd40+-4];
	mov.u32 	%r98, 21520;
	// begin inline asm
	prmt.b32 %r224, %r96, %r97, %r98;
	// end inline asm
	mov.u32 	%r102, 30258;
	// begin inline asm
	prmt.b32 %r225, %r96, %r97, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r104, %r105, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r104, %r105, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r112, %r113, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r112, %r113, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r120, %r121, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r120, %r121, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r128, %r129, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r128, %r129, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r136, %r137, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r136, %r137, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r144, %r145, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r144, %r145, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r152, %r153, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r152, %r153, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r160, %r161, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r160, %r161, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r168, %r169, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r168, %r169, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r176, %r177, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r176, %r177, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r184, %r185, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r184, %r185, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r192, %r193, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r192, %r193, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r200, %r201, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r200, %r201, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r208, %r209, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r208, %r209, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r216, %r217, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r216, %r217, %r102;
	// end inline asm
	mov.u32 	%r226, 25152;
	// begin inline asm
	prmt.b32 %r223, %r224, %r225, %r226;
	// end inline asm
	mov.u32 	%r230, 29521;
	// begin inline asm
	prmt.b32 %r227, %r224, %r225, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r232, %r233, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r232, %r233, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r240, %r241, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r240, %r241, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r248, %r249, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r248, %r249, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r256, %r257, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r256, %r257, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r264, %r265, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r264, %r265, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r272, %r273, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r272, %r273, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r280, %r281, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r280, %r281, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r288, %r289, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r288, %r289, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r296, %r297, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r296, %r297, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r304, %r305, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r304, %r305, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r312, %r313, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r312, %r313, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r320, %r321, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r320, %r321, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r328, %r329, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r328, %r329, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r336, %r337, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r336, %r337, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r344, %r345, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r344, %r345, %r230;
	// end inline asm
	cvt.u16.u32 	%rs22, %r2;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r397, %r255, %r223, %p4;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r223, %r398, %p4;
	selp.b32 	%r400, %r398, %r255, %p4;
	selp.b32 	%r401, %r263, %r231, %p4;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r231, %r402, %p4;
	selp.b32 	%r404, %r402, %r263, %p4;
	selp.b32 	%r405, %r259, %r227, %p4;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r227, %r406, %p4;
	selp.b32 	%r408, %r406, %r259, %p4;
	selp.b32 	%r409, %r267, %r235, %p4;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r235, %r410, %p4;
	selp.b32 	%r412, %r410, %r267, %p4;
	selp.b32 	%r413, %r271, %r239, %p4;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r239, %r414, %p4;
	selp.b32 	%r416, %r414, %r271, %p4;
	selp.b32 	%r417, %r279, %r247, %p4;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r247, %r418, %p4;
	selp.b32 	%r420, %r418, %r279, %p4;
	selp.b32 	%r421, %r275, %r243, %p4;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r243, %r422, %p4;
	selp.b32 	%r424, %r422, %r275, %p4;
	selp.b32 	%r425, %r283, %r251, %p4;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r251, %r426, %p4;
	selp.b32 	%r428, %r426, %r283, %p4;
	selp.b32 	%r429, %r319, %r287, %p4;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r287, %r430, %p4;
	selp.b32 	%r432, %r430, %r319, %p4;
	selp.b32 	%r433, %r327, %r295, %p4;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r295, %r434, %p4;
	selp.b32 	%r436, %r434, %r327, %p4;
	selp.b32 	%r437, %r323, %r291, %p4;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r291, %r438, %p4;
	selp.b32 	%r440, %r438, %r323, %p4;
	selp.b32 	%r441, %r331, %r299, %p4;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r299, %r442, %p4;
	selp.b32 	%r444, %r442, %r331, %p4;
	selp.b32 	%r445, %r335, %r303, %p4;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r303, %r446, %p4;
	selp.b32 	%r448, %r446, %r335, %p4;
	selp.b32 	%r449, %r343, %r311, %p4;
	shfl.sync.bfly.b32	%r450, %r449, 2, 31, -1;
	selp.b32 	%r451, %r311, %r450, %p4;
	selp.b32 	%r452, %r450, %r343, %p4;
	selp.b32 	%r453, %r339, %r307, %p4;
	shfl.sync.bfly.b32	%r454, %r453, 2, 31, -1;
	selp.b32 	%r455, %r307, %r454, %p4;
	selp.b32 	%r456, %r454, %r339, %p4;
	selp.b32 	%r457, %r347, %r315, %p4;
	shfl.sync.bfly.b32	%r458, %r457, 2, 31, -1;
	selp.b32 	%r459, %r315, %r458, %p4;
	selp.b32 	%r460, %r458, %r347, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r461, %r431, %r399, %p5;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r573, %r399, %r462, %p5;
	selp.b32 	%r701, %r462, %r431, %p5;
	selp.b32 	%r463, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r835, %r403, %r464, %p5;
	selp.b32 	%r963, %r464, %r435, %p5;
	selp.b32 	%r465, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r579, %r407, %r466, %p5;
	selp.b32 	%r707, %r466, %r439, %p5;
	selp.b32 	%r467, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r841, %r411, %r468, %p5;
	selp.b32 	%r969, %r468, %r443, %p5;
	selp.b32 	%r469, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r605, %r415, %r470, %p5;
	selp.b32 	%r733, %r470, %r447, %p5;
	selp.b32 	%r471, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r867, %r419, %r472, %p5;
	selp.b32 	%r995, %r472, %r451, %p5;
	selp.b32 	%r473, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r611, %r423, %r474, %p5;
	selp.b32 	%r739, %r474, %r455, %p5;
	selp.b32 	%r475, %r459, %r427, %p5;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r873, %r427, %r476, %p5;
	selp.b32 	%r1001, %r476, %r459, %p5;
	selp.b32 	%r477, %r432, %r400, %p5;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r637, %r400, %r478, %p5;
	selp.b32 	%r765, %r478, %r432, %p5;
	selp.b32 	%r479, %r436, %r404, %p5;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r899, %r404, %r480, %p5;
	selp.b32 	%r1027, %r480, %r436, %p5;
	selp.b32 	%r481, %r440, %r408, %p5;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r643, %r408, %r482, %p5;
	selp.b32 	%r771, %r482, %r440, %p5;
	selp.b32 	%r483, %r444, %r412, %p5;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r905, %r412, %r484, %p5;
	selp.b32 	%r1033, %r484, %r444, %p5;
	selp.b32 	%r485, %r448, %r416, %p5;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r669, %r416, %r486, %p5;
	selp.b32 	%r797, %r486, %r448, %p5;
	selp.b32 	%r487, %r452, %r420, %p5;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r931, %r420, %r488, %p5;
	selp.b32 	%r1059, %r488, %r452, %p5;
	selp.b32 	%r489, %r456, %r424, %p5;
	shfl.sync.bfly.b32	%r490, %r489, 4, 31, -1;
	selp.b32 	%r675, %r424, %r490, %p5;
	selp.b32 	%r803, %r490, %r456, %p5;
	selp.b32 	%r491, %r460, %r428, %p5;
	shfl.sync.bfly.b32	%r492, %r491, 4, 31, -1;
	selp.b32 	%r937, %r428, %r492, %p5;
	selp.b32 	%r1065, %r492, %r460, %p5;
	shl.b32 	%r493, %r2, 2;
	and.b32  	%r494, %r493, 28;
	and.b32  	%r495, %r4, 96;
	or.b32  	%r44, %r494, %r495;
	shl.b32 	%r496, %r1, 11;
	and.b32  	%r45, %r496, 30720;
	or.b32  	%r46, %r45, %r6;
	and.b32  	%r47, %r3, 12;
	shl.b32 	%r497, %r1, 2;
	and.b32  	%r48, %r497, 1920;
	shl.b32 	%r498, %r1, 7;
	and.b32  	%r49, %r498, 2048;
	shl.b32 	%r499, %r2, 3;
	and.b32  	%r500, %r499, 24;
	or.b32  	%r50, %r500, %r495;
	and.b32  	%r51, %r356, 6;
	and.b32  	%r501, %r3, 3;
	mul.lo.s32 	%r502, %r501, 3200;
	mul.hi.u32 	%r503, %r378, -1431655765;
	shr.u32 	%r504, %r503, 6;
	mul.lo.s32 	%r505, %r504, 96;
	sub.s32 	%r506, %r378, %r505;
	or.b32  	%r52, %r506, %r502;
	or.b32  	%r507, %r378, 8;
	mul.hi.u32 	%r508, %r507, -1431655765;
	shr.u32 	%r509, %r508, 6;
	mul.lo.s32 	%r510, %r509, 96;
	sub.s32 	%r511, %r507, %r510;
	or.b32  	%r53, %r511, %r502;
	and.b32  	%r512, %r2, 7;
	shl.b32 	%r54, %r86, %r10;
	min.u32 	%r55, %r352, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r514, %r1, 9;
	shl.b32 	%r515, %r2, 5;
	and.b32  	%r516, %r515, 64;
	shl.b32 	%r517, %r7, 18;
	and.b32  	%r518, %r514, 253952;
	or.b32  	%r56, %r518, %r517;
	or.b32  	%r519, %r2, 24;
	mul.lo.s32 	%r520, %r512, 100;
	add.s32 	%r521, %r520, %r7;
	mul.wide.u32 	%rd41, %r521, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r520;
	cvt.u64.u32 	%rd45, %r7;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r522, %r520, 800;
	add.s32 	%r523, %r522, %r7;
	mul.wide.u32 	%rd48, %r523, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r522;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r524, %r520, 1600;
	add.s32 	%r525, %r524, %r7;
	mul.wide.u32 	%rd52, %r525, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r524;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	mul.lo.s32 	%r526, %r519, 100;
	add.s32 	%r527, %r526, %r7;
	mul.wide.u32 	%rd56, %r527, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r526;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r528, %r499, 32;
	or.b32  	%r529, %r516, %r528;
	or.b32  	%r530, %r529, %r45;
	or.b32  	%r57, %r530, %r354;
	mov.u32 	%r351, 0;
	setp.gt.u32 	%p6, %r3, 15;
	mov.u32 	%r1335, %r351;
LBB0_7:                                 // %L2387
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	add.s32 	%r59, %r46, %r1335;
	or.b32  	%r532, %r1335, %r11;
	add.s32 	%r1336, %r532, %r45;
	mov.u32 	%r1337, %r351;
	mov.u32 	%r1338, %r351;
	mov.u32 	%r1339, %r351;
	mov.u32 	%r1340, %r351;
	mov.u32 	%r1341, %r351;
	mov.u32 	%r1342, %r351;
	mov.u32 	%r1343, %r351;
LBB0_8:                                 // %L2390
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2410
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r533, %r59, %r1337;
	or.b32  	%r534, %r533, %r47;
	shl.b32 	%r535, %r534, 12;
	and.b32  	%r536, %r535, 134213632;
	or.b32  	%r537, %r536, %r44;
	or.b32  	%r538, %r537, %r48;
	or.b32  	%r539, %r538, %r49;
	shl.b32 	%r540, %r539, 2;
	cvt.u64.u32 	%rd60, %r540;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r541, %r542, %r543, %r544}, [%rd61];
	or.b32  	%r545, %r534, 16;
	shl.b32 	%r546, %r545, 12;
	and.b32  	%r547, %r546, 134213632;
	or.b32  	%r548, %r547, %r44;
	or.b32  	%r549, %r548, %r48;
	or.b32  	%r550, %r549, %r49;
	shl.b32 	%r551, %r550, 2;
	cvt.u64.u32 	%rd62, %r551;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r552, %r553, %r554, %r555}, [%rd63];
	and.b32  	%r556, %r534, 31;
	mul.lo.s32 	%r557, %r556, 129;
	add.s32 	%r558, %r44, %r557;
	mul.wide.u32 	%rd64, %r558, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r541;
	cvt.u64.u32 	%rd67, %r557;
	cvt.u64.u32 	%rd68, %r44;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r542;
	st.shared.u32 	[%rd71+8], %r543;
	st.shared.u32 	[%rd71+12], %r544;
	and.b32  	%r559, %r545, 31;
	mul.lo.s32 	%r560, %r559, 129;
	add.s32 	%r561, %r44, %r560;
	mul.wide.u32 	%rd72, %r561, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r552;
	cvt.u64.u32 	%rd74, %r560;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r553;
	st.shared.u32 	[%rd77+8], %r554;
	st.shared.u32 	[%rd77+12], %r555;
LBB0_10:                                // %L4288
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r575, 0;
	mov.u32 	%r1344, %r575;
LBB0_11:                                // %L4290
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r1087, %r1336, %r1344;
	shr.s32 	%r1088, %r1087, 31;
	shr.u32 	%r1089, %r1088, 27;
	add.s32 	%r1090, %r1087, %r1089;
	and.b32  	%r1091, %r1090, -32;
	sub.s32 	%r1092, %r1087, %r1091;
	mad.lo.s32 	%r1093, %r1092, 129, %r50;
	mul.wide.s32 	%rd78, %r1093, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r564, [%rd80];
	mov.u32 	%r565, 134744072;
	mov.u32 	%r566, 252645135;
	// begin inline asm
	lop3.b32 %r563, %r564, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1094, %r563, 2021161080;
	xor.b32  	%r574, %r1094, -2139062144;
	shr.u32 	%r568, %r564, 4;
	// begin inline asm
	lop3.b32 %r567, %r568, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1095, %r567, 2021161080;
	xor.b32  	%r580, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r571, %r572}, {%r573}, {%r574}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r577, %r578}, {%r579}, {%r580}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r583, %r584}, {%r573}, {%r580}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r589, %r590}, {%r579}, {%r574}, {%r583, %r584};
	// end inline asm
	ld.shared.u32 	%r596, [%rd80+4];
	// begin inline asm
	lop3.b32 %r595, %r596, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1096, %r595, 2021161080;
	xor.b32  	%r606, %r1096, -2139062144;
	shr.u32 	%r600, %r596, 4;
	// begin inline asm
	lop3.b32 %r599, %r600, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1097, %r599, 2021161080;
	xor.b32  	%r612, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r603, %r604}, {%r605}, {%r606}, {%r571, %r572};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r609, %r610}, {%r611}, {%r612}, {%r577, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r615, %r616}, {%r605}, {%r612}, {%r589, %r590};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r621, %r622}, {%r611}, {%r606}, {%r615, %r616};
	// end inline asm
	ld.shared.u32 	%r628, [%rd80+8];
	// begin inline asm
	lop3.b32 %r627, %r628, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1098, %r627, 2021161080;
	xor.b32  	%r638, %r1098, -2139062144;
	shr.u32 	%r632, %r628, 4;
	// begin inline asm
	lop3.b32 %r631, %r632, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1099, %r631, 2021161080;
	xor.b32  	%r644, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r635, %r636}, {%r637}, {%r638}, {%r603, %r604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r641, %r642}, {%r643}, {%r644}, {%r609, %r610};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r647, %r648}, {%r637}, {%r644}, {%r621, %r622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r653, %r654}, {%r643}, {%r638}, {%r647, %r648};
	// end inline asm
	ld.shared.u32 	%r660, [%rd80+12];
	// begin inline asm
	lop3.b32 %r659, %r660, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1100, %r659, 2021161080;
	xor.b32  	%r670, %r1100, -2139062144;
	shr.u32 	%r664, %r660, 4;
	// begin inline asm
	lop3.b32 %r663, %r664, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1101, %r663, 2021161080;
	xor.b32  	%r676, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r667, %r668}, {%r669}, {%r670}, {%r635, %r636};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r673, %r674}, {%r675}, {%r676}, {%r641, %r642};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r679, %r680}, {%r669}, {%r676}, {%r653, %r654};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r685, %r686}, {%r675}, {%r670}, {%r679, %r680};
	// end inline asm
	ld.shared.u32 	%r692, [%rd80+16];
	// begin inline asm
	lop3.b32 %r691, %r692, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1102, %r691, 2021161080;
	xor.b32  	%r702, %r1102, -2139062144;
	shr.u32 	%r696, %r692, 4;
	// begin inline asm
	lop3.b32 %r695, %r696, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1103, %r695, 2021161080;
	xor.b32  	%r708, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r699, %r700}, {%r701}, {%r702}, {%r667, %r668};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r705, %r706}, {%r707}, {%r708}, {%r673, %r674};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r711, %r712}, {%r701}, {%r708}, {%r685, %r686};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r717, %r718}, {%r707}, {%r702}, {%r711, %r712};
	// end inline asm
	ld.shared.u32 	%r724, [%rd80+20];
	// begin inline asm
	lop3.b32 %r723, %r724, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1104, %r723, 2021161080;
	xor.b32  	%r734, %r1104, -2139062144;
	shr.u32 	%r728, %r724, 4;
	// begin inline asm
	lop3.b32 %r727, %r728, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1105, %r727, 2021161080;
	xor.b32  	%r740, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r731, %r732}, {%r733}, {%r734}, {%r699, %r700};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r737, %r738}, {%r739}, {%r740}, {%r705, %r706};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r743, %r744}, {%r733}, {%r740}, {%r717, %r718};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r749, %r750}, {%r739}, {%r734}, {%r743, %r744};
	// end inline asm
	ld.shared.u32 	%r756, [%rd80+24];
	// begin inline asm
	lop3.b32 %r755, %r756, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1106, %r755, 2021161080;
	xor.b32  	%r766, %r1106, -2139062144;
	shr.u32 	%r760, %r756, 4;
	// begin inline asm
	lop3.b32 %r759, %r760, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1107, %r759, 2021161080;
	xor.b32  	%r772, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r763, %r764}, {%r765}, {%r766}, {%r731, %r732};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r769, %r770}, {%r771}, {%r772}, {%r737, %r738};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r775, %r776}, {%r765}, {%r772}, {%r749, %r750};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r781, %r782}, {%r771}, {%r766}, {%r775, %r776};
	// end inline asm
	ld.shared.u32 	%r788, [%rd80+28];
	// begin inline asm
	lop3.b32 %r787, %r788, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1108, %r787, 2021161080;
	xor.b32  	%r798, %r1108, -2139062144;
	shr.u32 	%r792, %r788, 4;
	// begin inline asm
	lop3.b32 %r791, %r792, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1109, %r791, 2021161080;
	xor.b32  	%r804, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r795, %r796}, {%r797}, {%r798}, {%r763, %r764};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r801, %r802}, {%r803}, {%r804}, {%r769, %r770};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r807, %r808}, {%r797}, {%r804}, {%r781, %r782};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r813, %r814}, {%r803}, {%r798}, {%r807, %r808};
	// end inline asm
	sub.s32 	%r1110, %r795, %r801;
	add.s32 	%r1111, %r1110, 4;
	shr.s32 	%r821, %r1111, 3;
	add.s32 	%r1112, %r813, 4;
	shr.s32 	%r820, %r1112, 3;
	sub.s32 	%r1113, %r796, %r802;
	add.s32 	%r1114, %r1113, 4;
	shr.s32 	%r824, %r1114, 3;
	add.s32 	%r1115, %r814, 4;
	shr.s32 	%r823, %r1115, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r819, %r820, %r821;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r822, %r823, %r824;
	// end inline asm
	or.b32  	%r1116, %r51, %r1344;
	mul.lo.s32 	%r1117, %r1116, 100;
	add.s32 	%r1118, %r52, %r1117;
	mul.wide.u32 	%rd81, %r1118, 4;
	add.s64 	%rd83, %rd43, %rd81;
	st.shared.u32 	[%rd83], %r819;
	add.s32 	%r1119, %r1117, 100;
	add.s32 	%r1120, %r52, %r1119;
	mul.wide.u32 	%rd84, %r1120, 4;
	add.s64 	%rd85, %rd43, %rd84;
	st.shared.u32 	[%rd85], %r822;
	ld.shared.u32 	%r826, [%rd80];
	// begin inline asm
	lop3.b32 %r825, %r826, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1121, %r825, 2021161080;
	xor.b32  	%r836, %r1121, -2139062144;
	shr.u32 	%r830, %r826, 4;
	// begin inline asm
	lop3.b32 %r829, %r830, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1122, %r829, 2021161080;
	xor.b32  	%r842, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r833, %r834}, {%r835}, {%r836}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r839, %r840}, {%r841}, {%r842}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r845, %r846}, {%r835}, {%r842}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r851, %r852}, {%r841}, {%r836}, {%r845, %r846};
	// end inline asm
	ld.shared.u32 	%r858, [%rd80+4];
	// begin inline asm
	lop3.b32 %r857, %r858, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1123, %r857, 2021161080;
	xor.b32  	%r868, %r1123, -2139062144;
	shr.u32 	%r862, %r858, 4;
	// begin inline asm
	lop3.b32 %r861, %r862, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1124, %r861, 2021161080;
	xor.b32  	%r874, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r865, %r866}, {%r867}, {%r868}, {%r833, %r834};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r871, %r872}, {%r873}, {%r874}, {%r839, %r840};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r877, %r878}, {%r867}, {%r874}, {%r851, %r852};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r883, %r884}, {%r873}, {%r868}, {%r877, %r878};
	// end inline asm
	ld.shared.u32 	%r890, [%rd80+8];
	// begin inline asm
	lop3.b32 %r889, %r890, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1125, %r889, 2021161080;
	xor.b32  	%r900, %r1125, -2139062144;
	shr.u32 	%r894, %r890, 4;
	// begin inline asm
	lop3.b32 %r893, %r894, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1126, %r893, 2021161080;
	xor.b32  	%r906, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r897, %r898}, {%r899}, {%r900}, {%r865, %r866};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r903, %r904}, {%r905}, {%r906}, {%r871, %r872};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r909, %r910}, {%r899}, {%r906}, {%r883, %r884};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r915, %r916}, {%r905}, {%r900}, {%r909, %r910};
	// end inline asm
	ld.shared.u32 	%r922, [%rd80+12];
	// begin inline asm
	lop3.b32 %r921, %r922, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1127, %r921, 2021161080;
	xor.b32  	%r932, %r1127, -2139062144;
	shr.u32 	%r926, %r922, 4;
	// begin inline asm
	lop3.b32 %r925, %r926, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1128, %r925, 2021161080;
	xor.b32  	%r938, %r1128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r929, %r930}, {%r931}, {%r932}, {%r897, %r898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r935, %r936}, {%r937}, {%r938}, {%r903, %r904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r941, %r942}, {%r931}, {%r938}, {%r915, %r916};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r947, %r948}, {%r937}, {%r932}, {%r941, %r942};
	// end inline asm
	ld.shared.u32 	%r954, [%rd80+16];
	// begin inline asm
	lop3.b32 %r953, %r954, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1129, %r953, 2021161080;
	xor.b32  	%r964, %r1129, -2139062144;
	shr.u32 	%r958, %r954, 4;
	// begin inline asm
	lop3.b32 %r957, %r958, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1130, %r957, 2021161080;
	xor.b32  	%r970, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r961, %r962}, {%r963}, {%r964}, {%r929, %r930};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r967, %r968}, {%r969}, {%r970}, {%r935, %r936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r973, %r974}, {%r963}, {%r970}, {%r947, %r948};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r979, %r980}, {%r969}, {%r964}, {%r973, %r974};
	// end inline asm
	ld.shared.u32 	%r986, [%rd80+20];
	// begin inline asm
	lop3.b32 %r985, %r986, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1131, %r985, 2021161080;
	xor.b32  	%r996, %r1131, -2139062144;
	shr.u32 	%r990, %r986, 4;
	// begin inline asm
	lop3.b32 %r989, %r990, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1132, %r989, 2021161080;
	xor.b32  	%r1002, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r993, %r994}, {%r995}, {%r996}, {%r961, %r962};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r999, %r1000}, {%r1001}, {%r1002}, {%r967, %r968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1005, %r1006}, {%r995}, {%r1002}, {%r979, %r980};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1011, %r1012}, {%r1001}, {%r996}, {%r1005, %r1006};
	// end inline asm
	ld.shared.u32 	%r1018, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1017, %r1018, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1133, %r1017, 2021161080;
	xor.b32  	%r1028, %r1133, -2139062144;
	shr.u32 	%r1022, %r1018, 4;
	// begin inline asm
	lop3.b32 %r1021, %r1022, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1134, %r1021, 2021161080;
	xor.b32  	%r1034, %r1134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1025, %r1026}, {%r1027}, {%r1028}, {%r993, %r994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1031, %r1032}, {%r1033}, {%r1034}, {%r999, %r1000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1037, %r1038}, {%r1027}, {%r1034}, {%r1011, %r1012};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1043, %r1044}, {%r1033}, {%r1028}, {%r1037, %r1038};
	// end inline asm
	ld.shared.u32 	%r1050, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1049, %r1050, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1135, %r1049, 2021161080;
	xor.b32  	%r1060, %r1135, -2139062144;
	shr.u32 	%r1054, %r1050, 4;
	// begin inline asm
	lop3.b32 %r1053, %r1054, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1136, %r1053, 2021161080;
	xor.b32  	%r1066, %r1136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1057, %r1058}, {%r1059}, {%r1060}, {%r1025, %r1026};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1063, %r1064}, {%r1065}, {%r1066}, {%r1031, %r1032};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1069, %r1070}, {%r1059}, {%r1066}, {%r1043, %r1044};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1075, %r1076}, {%r1065}, {%r1060}, {%r1069, %r1070};
	// end inline asm
	sub.s32 	%r1137, %r1057, %r1063;
	add.s32 	%r1138, %r1137, 4;
	shr.s32 	%r1083, %r1138, 3;
	add.s32 	%r1139, %r1075, 4;
	shr.s32 	%r1082, %r1139, 3;
	sub.s32 	%r1140, %r1058, %r1064;
	add.s32 	%r1141, %r1140, 4;
	shr.s32 	%r1086, %r1141, 3;
	add.s32 	%r1142, %r1076, 4;
	shr.s32 	%r1085, %r1142, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1081, %r1082, %r1083;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1084, %r1085, %r1086;
	// end inline asm
	add.s32 	%r1143, %r53, %r1117;
	mul.wide.u32 	%rd86, %r1143, 4;
	add.s64 	%rd87, %rd43, %rd86;
	st.shared.u32 	[%rd87], %r1081;
	add.s32 	%r1144, %r53, %r1119;
	mul.wide.u32 	%rd88, %r1144, 4;
	add.s64 	%rd89, %rd43, %rd88;
	st.shared.u32 	[%rd89], %r1084;
	add.s32 	%r1344, %r1344, 8;
	setp.ne.s32 	%p7, %r1344, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8469
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1163, [%rd7];
	ld.shared.u32 	%r1164, [%rd8+12800];
	ld.shared.u32 	%r1165, [%rd8+25600];
	ld.shared.u32 	%r1166, [%rd8+38400];
	ld.shared.u32 	%r1167, [%rd9];
	ld.shared.u32 	%r1168, [%rd10+12800];
	ld.shared.u32 	%r1169, [%rd10+25600];
	ld.shared.u32 	%r1170, [%rd10+38400];
	ld.shared.u32 	%r1171, [%rd11];
	ld.shared.u32 	%r1172, [%rd12+12800];
	ld.shared.u32 	%r1173, [%rd12+25600];
	ld.shared.u32 	%r1174, [%rd12+38400];
	ld.shared.u32 	%r1175, [%rd13];
	ld.shared.u32 	%r1176, [%rd14+12800];
	ld.shared.u32 	%r1177, [%rd14+25600];
	ld.shared.u32 	%r1178, [%rd14+38400];
	cvt.s32.s16 	%r1179, %r1163;
	shr.s32 	%r1180, %r1163, 16;
	cvt.s32.s16 	%r1181, %r1164;
	shr.s32 	%r1182, %r1164, 16;
	cvt.s32.s16 	%r1183, %r1165;
	shr.s32 	%r1184, %r1165, 16;
	cvt.s32.s16 	%r1185, %r1166;
	shr.s32 	%r1186, %r1166, 16;
	cvt.s32.s16 	%r1187, %r1167;
	shr.s32 	%r1188, %r1167, 16;
	cvt.s32.s16 	%r1189, %r1168;
	shr.s32 	%r1190, %r1168, 16;
	cvt.s32.s16 	%r1191, %r1169;
	shr.s32 	%r1192, %r1169, 16;
	cvt.s32.s16 	%r1193, %r1170;
	shr.s32 	%r1194, %r1170, 16;
	cvt.s32.s16 	%r1195, %r1171;
	shr.s32 	%r1196, %r1171, 16;
	cvt.s32.s16 	%r1197, %r1172;
	shr.s32 	%r1198, %r1172, 16;
	cvt.s32.s16 	%r1199, %r1173;
	shr.s32 	%r1200, %r1173, 16;
	cvt.s32.s16 	%r1201, %r1174;
	shr.s32 	%r1202, %r1174, 16;
	cvt.s32.s16 	%r1203, %r1175;
	shr.s32 	%r1204, %r1175, 16;
	cvt.s32.s16 	%r1205, %r1176;
	shr.s32 	%r1206, %r1176, 16;
	cvt.s32.s16 	%r1207, %r1177;
	shr.s32 	%r1208, %r1177, 16;
	cvt.s32.s16 	%r1209, %r1178;
	shr.s32 	%r1210, %r1178, 16;
	add.s32 	%r1211, %r1179, %r54;
	add.s32 	%r1212, %r1211, %r1181;
	add.s32 	%r1213, %r1212, %r1183;
	add.s32 	%r1214, %r1213, %r1185;
	shr.s32 	%r1215, %r1214, %r55;
	add.s32 	%r1216, %r1180, %r54;
	add.s32 	%r1217, %r1216, %r1182;
	add.s32 	%r1218, %r1217, %r1184;
	add.s32 	%r1219, %r1218, %r1186;
	shr.s32 	%r1220, %r1219, %r55;
	add.s32 	%r1221, %r1187, %r54;
	add.s32 	%r1222, %r1221, %r1189;
	add.s32 	%r1223, %r1222, %r1191;
	add.s32 	%r1224, %r1223, %r1193;
	shr.s32 	%r1225, %r1224, %r55;
	add.s32 	%r1226, %r1188, %r54;
	add.s32 	%r1227, %r1226, %r1190;
	add.s32 	%r1228, %r1227, %r1192;
	add.s32 	%r1229, %r1228, %r1194;
	shr.s32 	%r1230, %r1229, %r55;
	add.s32 	%r1231, %r1195, %r54;
	add.s32 	%r1232, %r1231, %r1197;
	add.s32 	%r1233, %r1232, %r1199;
	add.s32 	%r1234, %r1233, %r1201;
	shr.s32 	%r1235, %r1234, %r55;
	add.s32 	%r1236, %r1196, %r54;
	add.s32 	%r1237, %r1236, %r1198;
	add.s32 	%r1238, %r1237, %r1200;
	add.s32 	%r1239, %r1238, %r1202;
	shr.s32 	%r1240, %r1239, %r55;
	add.s32 	%r1241, %r1203, %r54;
	add.s32 	%r1242, %r1241, %r1205;
	add.s32 	%r1243, %r1242, %r1207;
	add.s32 	%r1244, %r1243, %r1209;
	shr.s32 	%r1245, %r1244, %r55;
	add.s32 	%r1246, %r1204, %r54;
	add.s32 	%r1247, %r1246, %r1206;
	add.s32 	%r1248, %r1247, %r1208;
	add.s32 	%r1249, %r1248, %r1210;
	shr.s32 	%r1250, %r1249, %r55;
	max.s32 	%r1251, %r1215, -7;
	min.s32 	%r1150, %r1251, 7;
	max.s32 	%r1252, %r1220, -7;
	min.s32 	%r1157, %r1252, 7;
	max.s32 	%r1253, %r1225, -7;
	min.s32 	%r1149, %r1253, 7;
	max.s32 	%r1254, %r1230, -7;
	min.s32 	%r1156, %r1254, 7;
	max.s32 	%r1255, %r1235, -7;
	min.s32 	%r1147, %r1255, 7;
	max.s32 	%r1256, %r1240, -7;
	min.s32 	%r1154, %r1256, 7;
	max.s32 	%r1257, %r1245, -7;
	min.s32 	%r1146, %r1257, 7;
	max.s32 	%r1258, %r1250, -7;
	min.s32 	%r1153, %r1258, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1145, %r1146, %r1147, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1148, %r1149, %r1150, %r1145;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1152, %r1153, %r1154, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1155, %r1156, %r1157, %r1152;
	// end inline asm
	shl.b32 	%r1162, %r1155, 4;
	// begin inline asm
	lop3.b32 %r1269, %r566, %r1148, %r1162, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1337, 0;
	selp.b32 	%r1342, %r1269, %r1342, %p8;
	selp.b32 	%r1343, %r1269, %r1343, %p8;
	setp.eq.s32 	%p9, %r1337, 32;
	selp.b32 	%r1338, %r1269, %r1338, %p9;
	selp.b32 	%r1339, %r1269, %r1339, %p9;
	setp.eq.s32 	%p10, %r1337, 64;
	selp.b32 	%r1340, %r1269, %r1340, %p10;
	selp.b32 	%r1341, %r1269, %r1341, %p10;
	add.s32 	%r78, %r1337, 32;
	add.s32 	%r1336, %r1336, 32;
	setp.ne.s32 	%p11, %r1337, 96;
	mov.u32 	%r1337, %r78;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11221
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1259, %r1342, %r1338, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1263, %r1343, %r1339, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1340, %r1269, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1341, %r1269, %r230;
	// end inline asm
	selp.b32 	%r1307, %r1263, %r1259, %p12;
	shfl.sync.bfly.b32	%r1308, %r1307, 1, 31, -1;
	selp.b32 	%r1276, %r1259, %r1308, %p12;
	selp.b32 	%r1277, %r1308, %r1263, %p12;
	selp.b32 	%r1309, %r1271, %r1267, %p12;
	shfl.sync.bfly.b32	%r1310, %r1309, 1, 31, -1;
	selp.b32 	%r1284, %r1267, %r1310, %p12;
	selp.b32 	%r1285, %r1310, %r1271, %p12;
	// begin inline asm
	prmt.b32 %r1275, %r1276, %r1277, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1279, %r1276, %r1277, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1284, %r1285, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1284, %r1285, %r230;
	// end inline asm
	selp.b32 	%r1311, %r1283, %r1275, %p4;
	shfl.sync.bfly.b32	%r1312, %r1311, 2, 31, -1;
	selp.b32 	%r1292, %r1275, %r1312, %p4;
	selp.b32 	%r1293, %r1312, %r1283, %p4;
	selp.b32 	%r1313, %r1287, %r1279, %p4;
	shfl.sync.bfly.b32	%r1314, %r1313, 2, 31, -1;
	selp.b32 	%r1300, %r1279, %r1314, %p4;
	selp.b32 	%r1301, %r1314, %r1287, %p4;
	// begin inline asm
	prmt.b32 %r1291, %r1292, %r1293, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1295, %r1292, %r1293, %r102;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1299, %r1300, %r1301, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r1300, %r1301, %r102;
	// end inline asm
	selp.b32 	%r1315, %r1299, %r1291, %p5;
	shfl.sync.bfly.b32	%r1316, %r1315, 4, 31, -1;
	selp.b32 	%r1317, %r1291, %r1316, %p5;
	selp.b32 	%r1318, %r1316, %r1299, %p5;
	selp.b32 	%r1319, %r1303, %r1295, %p5;
	shfl.sync.bfly.b32	%r1320, %r1319, 4, 31, -1;
	selp.b32 	%r1321, %r1295, %r1320, %p5;
	selp.b32 	%r1322, %r1320, %r1303, %p5;
	selp.b32 	%r1323, %r1321, %r1317, %p12;
	shfl.sync.bfly.b32	%r1324, %r1323, 1, 31, -1;
	selp.b32 	%r1325, %r1317, %r1324, %p12;
	selp.b32 	%r1326, %r1324, %r1321, %p12;
	selp.b32 	%r1327, %r1322, %r1318, %p12;
	shfl.sync.bfly.b32	%r1328, %r1327, 1, 31, -1;
	selp.b32 	%r1329, %r1318, %r1328, %p12;
	selp.b32 	%r1330, %r1328, %r1322, %p12;
	add.s32 	%r1331, %r57, %r1335;
	shr.u32 	%r1332, %r1331, 2;
	add.s32 	%r1333, %r56, %r1332;
	mul.wide.u32 	%rd90, %r1333, 4;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1325, %r1329, %r1326, %r1330};
	add.s32 	%r80, %r1335, 128;
	setp.ne.s32 	%p15, %r1335, 1920;
	mov.u32 	%r1335, %r80;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11624
	mov.u32 	%r1334, 0;
	st.global.u32 	[%rd6], %r1334;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L252
	mov.u32 	%r94, 2;
	st.global.u32 	[%rd6], %r94;
	mov.u64 	%rd23, exception925;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
