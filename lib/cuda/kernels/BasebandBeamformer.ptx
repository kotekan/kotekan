// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1931[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1331>;
	.reg .b64 	%rd<91>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r75, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r75, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r76, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r76, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r77, %r1, 768, %r3;
	or.b32  	%r78, %r77, %r4;
	mul.wide.u32 	%rd24, %r78, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r79, 1;
	st.global.u32 	[%rd6], %r79;
	shr.u32 	%r5, %r4, 3;
	shl.b32 	%r80, %r2, 2;
	or.b32  	%r81, %r5, %r80;
	mul.hi.u32 	%r82, %r81, -1431655765;
	shr.u32 	%r83, %r82, 6;
	mul.lo.s32 	%r84, %r83, 96;
	sub.s32 	%r6, %r81, %r84;
	bfe.u32 	%r7, %r1, 4, 1;
	shr.u32 	%r8, %r1, 5;
	mul.lo.s32 	%r85, %r8, 192;
	mad.lo.s32 	%r86, %r7, 96, %r85;
	add.s32 	%r87, %r86, %r6;
	mul.wide.u32 	%rd25, %r87, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r9, [%rd26];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L345
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r346, %r9, -3;
	shr.u32 	%r347, %r2, 2;
	cvt.u16.u32 	%rs4, %r347;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r348, %rs9;
	and.b32  	%r349, %r348, 240;
	shr.u32 	%r11, %r4, 2;
	and.b32  	%r350, %r11, 6;
	or.b32  	%r351, %r350, %r349;
	cvt.u16.u32 	%rs10, %r351;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r352, %rs15, 256;
	shl.b32 	%r353, %r2, 6;
	shl.b32 	%r354, %r4, 1;
	and.b32  	%r355, %r354, 12;
	shl.b32 	%r356, %r4, 4;
	and.b32  	%r357, %r356, 16;
	and.b32  	%r358, %r353, 192;
	mul.lo.s32 	%r359, %r8, 49152;
	or.b32  	%r360, %r355, %r357;
	or.b32  	%r361, %r360, %r358;
	or.b32  	%r362, %r361, %r359;
	mad.lo.s32 	%r363, %r7, 24576, %r362;
	add.s32 	%r364, %r363, %r352;
	shl.b32 	%r365, %r364, 2;
	cvt.u64.u32 	%rd29, %r365;
	add.s64 	%rd30, %rd29, %rd1;
	ld.global.v4.u32 	{%r90, %r91, %r106, %r107}, [%rd30];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r366, %rs21, 256;
	add.s32 	%r367, %r363, %r366;
	shl.b32 	%r368, %r367, 2;
	cvt.u64.u32 	%rd31, %r368;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r98, %r99, %r114, %r115}, [%rd32];
	or.b32  	%r369, %r363, 32;
	add.s32 	%r370, %r369, %r352;
	shl.b32 	%r371, %r370, 2;
	cvt.u64.u32 	%rd33, %r371;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r122, %r123, %r138, %r139}, [%rd34];
	add.s32 	%r372, %r369, %r366;
	shl.b32 	%r373, %r372, 2;
	cvt.u64.u32 	%rd35, %r373;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r130, %r131, %r146, %r147}, [%rd36];
	or.b32  	%r374, %r11, %r349;
	or.b32  	%r375, %r374, 1;
	mul.hi.u32 	%r376, %r375, -1431655765;
	shr.u32 	%r377, %r376, 6;
	mul.lo.s32 	%r378, %r377, 96;
	sub.s32 	%r379, %r375, %r378;
	shl.b32 	%r380, %r379, 8;
	add.s32 	%r381, %r363, %r380;
	shl.b32 	%r382, %r381, 2;
	cvt.u64.u32 	%rd37, %r382;
	add.s64 	%rd38, %rd37, %rd1;
	ld.global.v4.u32 	{%r154, %r155, %r170, %r171}, [%rd38];
	or.b32  	%r383, %r374, 9;
	mul.hi.u32 	%r384, %r383, -1431655765;
	shr.u32 	%r385, %r384, 6;
	mul.lo.s32 	%r386, %r385, 96;
	sub.s32 	%r387, %r383, %r386;
	shl.b32 	%r388, %r387, 8;
	add.s32 	%r389, %r363, %r388;
	shl.b32 	%r390, %r389, 2;
	cvt.u64.u32 	%rd39, %r390;
	add.s64 	%rd40, %rd39, %rd1;
	ld.global.v4.u32 	{%r162, %r163, %r178, %r179}, [%rd40];
	add.s32 	%r391, %r369, %r380;
	shl.b32 	%r392, %r391, 2;
	cvt.u64.u32 	%rd41, %r392;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r186, %r187, %r202, %r203}, [%rd42];
	add.s32 	%r393, %r369, %r388;
	shl.b32 	%r394, %r393, 2;
	cvt.u64.u32 	%rd43, %r394;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.v4.u32 	{%r194, %r195, %r210, %r211}, [%rd44];
	mov.u32 	%r92, 21520;
	// begin inline asm
	prmt.b32 %r218, %r90, %r91, %r92;
	// end inline asm
	mov.u32 	%r96, 30258;
	// begin inline asm
	prmt.b32 %r219, %r90, %r91, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r226, %r98, %r99, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r98, %r99, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r106, %r107, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r106, %r107, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r114, %r115, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r114, %r115, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r122, %r123, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r122, %r123, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r130, %r131, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r130, %r131, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r138, %r139, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r138, %r139, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r146, %r147, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r146, %r147, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r154, %r155, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r154, %r155, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r162, %r163, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r162, %r163, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r170, %r171, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r170, %r171, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r178, %r179, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r178, %r179, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r186, %r187, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r186, %r187, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r194, %r195, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r194, %r195, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r202, %r203, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r202, %r203, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r210, %r211, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r210, %r211, %r96;
	// end inline asm
	mov.u32 	%r220, 25152;
	// begin inline asm
	prmt.b32 %r217, %r218, %r219, %r220;
	// end inline asm
	mov.u32 	%r224, 29521;
	// begin inline asm
	prmt.b32 %r221, %r218, %r219, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r225, %r226, %r227, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r226, %r227, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r234, %r235, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r234, %r235, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r242, %r243, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r242, %r243, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r250, %r251, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r250, %r251, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r258, %r259, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r258, %r259, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r266, %r267, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r266, %r267, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r274, %r275, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r274, %r275, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r282, %r283, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r282, %r283, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r290, %r291, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r290, %r291, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r298, %r299, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r298, %r299, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r306, %r307, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r306, %r307, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r314, %r315, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r314, %r315, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r322, %r323, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r322, %r323, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r330, %r331, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r330, %r331, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r338, %r339, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r338, %r339, %r224;
	// end inline asm
	cvt.u16.u32 	%rs22, %r4;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r395, %r249, %r217, %p4;
	shfl.sync.bfly.b32	%r396, %r395, 2, 31, -1;
	selp.b32 	%r397, %r217, %r396, %p4;
	selp.b32 	%r398, %r396, %r249, %p4;
	selp.b32 	%r399, %r257, %r225, %p4;
	shfl.sync.bfly.b32	%r400, %r399, 2, 31, -1;
	selp.b32 	%r401, %r225, %r400, %p4;
	selp.b32 	%r402, %r400, %r257, %p4;
	selp.b32 	%r403, %r253, %r221, %p4;
	shfl.sync.bfly.b32	%r404, %r403, 2, 31, -1;
	selp.b32 	%r405, %r221, %r404, %p4;
	selp.b32 	%r406, %r404, %r253, %p4;
	selp.b32 	%r407, %r261, %r229, %p4;
	shfl.sync.bfly.b32	%r408, %r407, 2, 31, -1;
	selp.b32 	%r409, %r229, %r408, %p4;
	selp.b32 	%r410, %r408, %r261, %p4;
	selp.b32 	%r411, %r265, %r233, %p4;
	shfl.sync.bfly.b32	%r412, %r411, 2, 31, -1;
	selp.b32 	%r413, %r233, %r412, %p4;
	selp.b32 	%r414, %r412, %r265, %p4;
	selp.b32 	%r415, %r273, %r241, %p4;
	shfl.sync.bfly.b32	%r416, %r415, 2, 31, -1;
	selp.b32 	%r417, %r241, %r416, %p4;
	selp.b32 	%r418, %r416, %r273, %p4;
	selp.b32 	%r419, %r269, %r237, %p4;
	shfl.sync.bfly.b32	%r420, %r419, 2, 31, -1;
	selp.b32 	%r421, %r237, %r420, %p4;
	selp.b32 	%r422, %r420, %r269, %p4;
	selp.b32 	%r423, %r277, %r245, %p4;
	shfl.sync.bfly.b32	%r424, %r423, 2, 31, -1;
	selp.b32 	%r425, %r245, %r424, %p4;
	selp.b32 	%r426, %r424, %r277, %p4;
	selp.b32 	%r427, %r313, %r281, %p4;
	shfl.sync.bfly.b32	%r428, %r427, 2, 31, -1;
	selp.b32 	%r429, %r281, %r428, %p4;
	selp.b32 	%r430, %r428, %r313, %p4;
	selp.b32 	%r431, %r321, %r289, %p4;
	shfl.sync.bfly.b32	%r432, %r431, 2, 31, -1;
	selp.b32 	%r433, %r289, %r432, %p4;
	selp.b32 	%r434, %r432, %r321, %p4;
	selp.b32 	%r435, %r317, %r285, %p4;
	shfl.sync.bfly.b32	%r436, %r435, 2, 31, -1;
	selp.b32 	%r437, %r285, %r436, %p4;
	selp.b32 	%r438, %r436, %r317, %p4;
	selp.b32 	%r439, %r325, %r293, %p4;
	shfl.sync.bfly.b32	%r440, %r439, 2, 31, -1;
	selp.b32 	%r441, %r293, %r440, %p4;
	selp.b32 	%r442, %r440, %r325, %p4;
	selp.b32 	%r443, %r329, %r297, %p4;
	shfl.sync.bfly.b32	%r444, %r443, 2, 31, -1;
	selp.b32 	%r445, %r297, %r444, %p4;
	selp.b32 	%r446, %r444, %r329, %p4;
	selp.b32 	%r447, %r337, %r305, %p4;
	shfl.sync.bfly.b32	%r448, %r447, 2, 31, -1;
	selp.b32 	%r449, %r305, %r448, %p4;
	selp.b32 	%r450, %r448, %r337, %p4;
	selp.b32 	%r451, %r333, %r301, %p4;
	shfl.sync.bfly.b32	%r452, %r451, 2, 31, -1;
	selp.b32 	%r453, %r301, %r452, %p4;
	selp.b32 	%r454, %r452, %r333, %p4;
	selp.b32 	%r455, %r341, %r309, %p4;
	shfl.sync.bfly.b32	%r456, %r455, 2, 31, -1;
	selp.b32 	%r457, %r309, %r456, %p4;
	selp.b32 	%r458, %r456, %r341, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r459, %r429, %r397, %p5;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r564, %r397, %r460, %p5;
	selp.b32 	%r692, %r460, %r429, %p5;
	selp.b32 	%r461, %r433, %r401, %p5;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r826, %r401, %r462, %p5;
	selp.b32 	%r954, %r462, %r433, %p5;
	selp.b32 	%r463, %r437, %r405, %p5;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r570, %r405, %r464, %p5;
	selp.b32 	%r698, %r464, %r437, %p5;
	selp.b32 	%r465, %r441, %r409, %p5;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r832, %r409, %r466, %p5;
	selp.b32 	%r960, %r466, %r441, %p5;
	selp.b32 	%r467, %r445, %r413, %p5;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r596, %r413, %r468, %p5;
	selp.b32 	%r724, %r468, %r445, %p5;
	selp.b32 	%r469, %r449, %r417, %p5;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r858, %r417, %r470, %p5;
	selp.b32 	%r986, %r470, %r449, %p5;
	selp.b32 	%r471, %r453, %r421, %p5;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r602, %r421, %r472, %p5;
	selp.b32 	%r730, %r472, %r453, %p5;
	selp.b32 	%r473, %r457, %r425, %p5;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r864, %r425, %r474, %p5;
	selp.b32 	%r992, %r474, %r457, %p5;
	selp.b32 	%r475, %r430, %r398, %p5;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r628, %r398, %r476, %p5;
	selp.b32 	%r756, %r476, %r430, %p5;
	selp.b32 	%r477, %r434, %r402, %p5;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r890, %r402, %r478, %p5;
	selp.b32 	%r1018, %r478, %r434, %p5;
	selp.b32 	%r479, %r438, %r406, %p5;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r634, %r406, %r480, %p5;
	selp.b32 	%r762, %r480, %r438, %p5;
	selp.b32 	%r481, %r442, %r410, %p5;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r896, %r410, %r482, %p5;
	selp.b32 	%r1024, %r482, %r442, %p5;
	selp.b32 	%r483, %r446, %r414, %p5;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r660, %r414, %r484, %p5;
	selp.b32 	%r788, %r484, %r446, %p5;
	selp.b32 	%r485, %r450, %r418, %p5;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r922, %r418, %r486, %p5;
	selp.b32 	%r1050, %r486, %r450, %p5;
	selp.b32 	%r487, %r454, %r422, %p5;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r666, %r422, %r488, %p5;
	selp.b32 	%r794, %r488, %r454, %p5;
	selp.b32 	%r489, %r458, %r426, %p5;
	shfl.sync.bfly.b32	%r490, %r489, 4, 31, -1;
	selp.b32 	%r928, %r426, %r490, %p5;
	selp.b32 	%r1056, %r490, %r458, %p5;
	shl.b32 	%r491, %r1, 7;
	and.b32  	%r492, %r491, 2048;
	shl.b32 	%r493, %r4, 2;
	and.b32  	%r494, %r493, 28;
	and.b32  	%r495, %r3, 96;
	or.b32  	%r496, %r494, %r495;
	shl.b32 	%r497, %r1, 2;
	and.b32  	%r498, %r497, 1920;
	and.b32  	%r44, %r2, 12;
	shl.b32 	%r499, %r1, 11;
	and.b32  	%r45, %r499, 30720;
	or.b32  	%r500, %r496, %r492;
	or.b32  	%r46, %r500, %r498;
	or.b32  	%r501, %r44, %r5;
	mul.lo.s32 	%r502, %r501, 129;
	add.s32 	%r503, %r496, %r502;
	mul.wide.u32 	%rd45, %r503, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r502;
	cvt.u64.u32 	%rd48, %r496;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd8, %rd46, %rd50;
	or.b32  	%r504, %r501, 16;
	mul.lo.s32 	%r505, %r504, 129;
	add.s32 	%r506, %r496, %r505;
	mul.wide.u32 	%rd51, %r506, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r505;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd10, %rd46, %rd54;
	shl.b32 	%r507, %r4, 3;
	and.b32  	%r508, %r507, 24;
	or.b32  	%r47, %r508, %r495;
	and.b32  	%r48, %r354, 6;
	and.b32  	%r509, %r2, 3;
	mul.hi.u32 	%r510, %r374, -1431655765;
	shr.u32 	%r511, %r510, 6;
	mul.lo.s32 	%r512, %r511, 96;
	sub.s32 	%r513, %r374, %r512;
	mul.lo.s32 	%r514, %r509, 3200;
	or.b32  	%r49, %r513, %r514;
	or.b32  	%r515, %r374, 8;
	mul.hi.u32 	%r516, %r515, -1431655765;
	shr.u32 	%r517, %r516, 6;
	mul.lo.s32 	%r518, %r517, 96;
	sub.s32 	%r519, %r515, %r518;
	or.b32  	%r50, %r519, %r514;
	and.b32  	%r520, %r4, 7;
	mul.lo.s32 	%r521, %r520, 100;
	add.s32 	%r522, %r6, %r521;
	mul.wide.u32 	%rd55, %r522, 4;
	add.s64 	%rd56, %rd46, 16512;
	add.s64 	%rd11, %rd56, %rd55;
	cvt.u64.u32 	%rd57, %r6;
	cvt.u64.u32 	%rd58, %r521;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd12, %rd56, %rd60;
	add.s32 	%r523, %r521, 800;
	add.s32 	%r524, %r523, %r6;
	mul.wide.u32 	%rd61, %r524, 4;
	add.s64 	%rd13, %rd56, %rd61;
	cvt.u64.u32 	%rd62, %r523;
	add.s64 	%rd63, %rd57, %rd62;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd14, %rd56, %rd64;
	add.s32 	%r525, %r521, 1600;
	add.s32 	%r526, %r525, %r6;
	mul.wide.u32 	%rd65, %r526, 4;
	add.s64 	%rd15, %rd56, %rd65;
	cvt.u64.u32 	%rd66, %r525;
	add.s64 	%rd67, %rd57, %rd66;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd16, %rd56, %rd68;
	or.b32  	%r527, %r4, 24;
	mul.lo.s32 	%r528, %r527, 100;
	add.s32 	%r529, %r6, %r528;
	mul.wide.u32 	%rd69, %r529, 4;
	add.s64 	%rd17, %rd56, %rd69;
	cvt.u64.u32 	%rd70, %r528;
	add.s64 	%rd71, %rd70, %rd57;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd18, %rd56, %rd72;
	shl.b32 	%r51, %r79, %r10;
	min.u32 	%r52, %r346, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r53, %r6, 18;
	shl.b32 	%r531, %r4, 5;
	and.b32  	%r532, %r531, 64;
	shl.b32 	%r533, %r1, 9;
	and.b32  	%r54, %r533, 253952;
	and.b32  	%r534, %r507, 32;
	or.b32  	%r535, %r534, %r45;
	or.b32  	%r536, %r535, %r532;
	or.b32  	%r55, %r536, %r357;
	mov.u32 	%r345, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1322, %r345;
LBB0_7:                                 // %L2388
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1323, %r345;
	mov.u32 	%r1324, %r345;
	mov.u32 	%r1325, %r345;
	mov.u32 	%r1326, %r345;
	mov.u32 	%r1327, %r345;
	mov.u32 	%r1328, %r345;
	mov.u32 	%r1329, %r345;
LBB0_8:                                 // %L2391
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2411
                                        //   in Loop: Header=BB0_8 Depth=2
	or.b32  	%r538, %r1323, %r1322;
	or.b32  	%r539, %r538, %r44;
	or.b32  	%r540, %r539, %r5;
	or.b32  	%r541, %r540, %r45;
	shl.b32 	%r542, %r541, 12;
	or.b32  	%r543, %r46, %r542;
	mul.wide.s32 	%rd73, %r543, 4;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.v4.u32 	{%r544, %r545, %r546, %r547}, [%rd74];
	or.b32  	%r548, %r543, 65536;
	mul.wide.s32 	%rd75, %r548, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.v4.u32 	{%r549, %r550, %r551, %r552}, [%rd76];
	st.shared.u32 	[%rd7], %r544;
	st.shared.u32 	[%rd8+4], %r545;
	st.shared.u32 	[%rd8+8], %r546;
	st.shared.u32 	[%rd8+12], %r547;
	st.shared.u32 	[%rd9], %r549;
	st.shared.u32 	[%rd10+4], %r550;
	st.shared.u32 	[%rd10+8], %r551;
	st.shared.u32 	[%rd10+12], %r552;
LBB0_10:                                // %L4289
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r566, 0;
	mov.u32 	%r1330, %r566;
LBB0_11:                                // %L4291
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1078, %r1330, %r11;
	mad.lo.s32 	%r1079, %r1078, 129, %r47;
	mul.wide.u32 	%rd77, %r1079, 4;
	add.s64 	%rd79, %rd46, %rd77;
	ld.shared.u32 	%r555, [%rd79];
	mov.u32 	%r556, 134744072;
	mov.u32 	%r557, 252645135;
	// begin inline asm
	lop3.b32 %r554, %r555, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1080, %r554, 2021161080;
	xor.b32  	%r565, %r1080, -2139062144;
	shr.u32 	%r559, %r555, 4;
	// begin inline asm
	lop3.b32 %r558, %r559, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1081, %r558, 2021161080;
	xor.b32  	%r571, %r1081, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r562, %r563}, {%r564}, {%r565}, {%r566, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r568, %r569}, {%r570}, {%r571}, {%r566, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r574, %r575}, {%r564}, {%r571}, {%r566, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r580, %r581}, {%r570}, {%r565}, {%r574, %r575};
	// end inline asm
	ld.shared.u32 	%r587, [%rd79+4];
	// begin inline asm
	lop3.b32 %r586, %r587, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1082, %r586, 2021161080;
	xor.b32  	%r597, %r1082, -2139062144;
	shr.u32 	%r591, %r587, 4;
	// begin inline asm
	lop3.b32 %r590, %r591, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1083, %r590, 2021161080;
	xor.b32  	%r603, %r1083, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r594, %r595}, {%r596}, {%r597}, {%r562, %r563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r600, %r601}, {%r602}, {%r603}, {%r568, %r569};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r606, %r607}, {%r596}, {%r603}, {%r580, %r581};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r612, %r613}, {%r602}, {%r597}, {%r606, %r607};
	// end inline asm
	ld.shared.u32 	%r619, [%rd79+8];
	// begin inline asm
	lop3.b32 %r618, %r619, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1084, %r618, 2021161080;
	xor.b32  	%r629, %r1084, -2139062144;
	shr.u32 	%r623, %r619, 4;
	// begin inline asm
	lop3.b32 %r622, %r623, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1085, %r622, 2021161080;
	xor.b32  	%r635, %r1085, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r626, %r627}, {%r628}, {%r629}, {%r594, %r595};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r632, %r633}, {%r634}, {%r635}, {%r600, %r601};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r638, %r639}, {%r628}, {%r635}, {%r612, %r613};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r644, %r645}, {%r634}, {%r629}, {%r638, %r639};
	// end inline asm
	ld.shared.u32 	%r651, [%rd79+12];
	// begin inline asm
	lop3.b32 %r650, %r651, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1086, %r650, 2021161080;
	xor.b32  	%r661, %r1086, -2139062144;
	shr.u32 	%r655, %r651, 4;
	// begin inline asm
	lop3.b32 %r654, %r655, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1087, %r654, 2021161080;
	xor.b32  	%r667, %r1087, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r658, %r659}, {%r660}, {%r661}, {%r626, %r627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r664, %r665}, {%r666}, {%r667}, {%r632, %r633};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r670, %r671}, {%r660}, {%r667}, {%r644, %r645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r676, %r677}, {%r666}, {%r661}, {%r670, %r671};
	// end inline asm
	ld.shared.u32 	%r683, [%rd79+16];
	// begin inline asm
	lop3.b32 %r682, %r683, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1088, %r682, 2021161080;
	xor.b32  	%r693, %r1088, -2139062144;
	shr.u32 	%r687, %r683, 4;
	// begin inline asm
	lop3.b32 %r686, %r687, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1089, %r686, 2021161080;
	xor.b32  	%r699, %r1089, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r690, %r691}, {%r692}, {%r693}, {%r658, %r659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r696, %r697}, {%r698}, {%r699}, {%r664, %r665};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r702, %r703}, {%r692}, {%r699}, {%r676, %r677};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r708, %r709}, {%r698}, {%r693}, {%r702, %r703};
	// end inline asm
	ld.shared.u32 	%r715, [%rd79+20];
	// begin inline asm
	lop3.b32 %r714, %r715, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1090, %r714, 2021161080;
	xor.b32  	%r725, %r1090, -2139062144;
	shr.u32 	%r719, %r715, 4;
	// begin inline asm
	lop3.b32 %r718, %r719, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1091, %r718, 2021161080;
	xor.b32  	%r731, %r1091, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r722, %r723}, {%r724}, {%r725}, {%r690, %r691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r728, %r729}, {%r730}, {%r731}, {%r696, %r697};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r734, %r735}, {%r724}, {%r731}, {%r708, %r709};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r740, %r741}, {%r730}, {%r725}, {%r734, %r735};
	// end inline asm
	ld.shared.u32 	%r747, [%rd79+24];
	// begin inline asm
	lop3.b32 %r746, %r747, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1092, %r746, 2021161080;
	xor.b32  	%r757, %r1092, -2139062144;
	shr.u32 	%r751, %r747, 4;
	// begin inline asm
	lop3.b32 %r750, %r751, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1093, %r750, 2021161080;
	xor.b32  	%r763, %r1093, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r754, %r755}, {%r756}, {%r757}, {%r722, %r723};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r760, %r761}, {%r762}, {%r763}, {%r728, %r729};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r766, %r767}, {%r756}, {%r763}, {%r740, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r772, %r773}, {%r762}, {%r757}, {%r766, %r767};
	// end inline asm
	ld.shared.u32 	%r779, [%rd79+28];
	// begin inline asm
	lop3.b32 %r778, %r779, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1094, %r778, 2021161080;
	xor.b32  	%r789, %r1094, -2139062144;
	shr.u32 	%r783, %r779, 4;
	// begin inline asm
	lop3.b32 %r782, %r783, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1095, %r782, 2021161080;
	xor.b32  	%r795, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r786, %r787}, {%r788}, {%r789}, {%r754, %r755};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r792, %r793}, {%r794}, {%r795}, {%r760, %r761};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r798, %r799}, {%r788}, {%r795}, {%r772, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r804, %r805}, {%r794}, {%r789}, {%r798, %r799};
	// end inline asm
	sub.s32 	%r1096, %r786, %r792;
	add.s32 	%r1097, %r1096, 4;
	shr.s32 	%r812, %r1097, 3;
	add.s32 	%r1098, %r804, 4;
	shr.s32 	%r811, %r1098, 3;
	sub.s32 	%r1099, %r787, %r793;
	add.s32 	%r1100, %r1099, 4;
	shr.s32 	%r815, %r1100, 3;
	add.s32 	%r1101, %r805, 4;
	shr.s32 	%r814, %r1101, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r810, %r811, %r812;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r813, %r814, %r815;
	// end inline asm
	or.b32  	%r1102, %r1330, %r48;
	mul.lo.s32 	%r1103, %r1102, 100;
	add.s32 	%r1104, %r49, %r1103;
	mul.wide.u32 	%rd80, %r1104, 4;
	add.s64 	%rd82, %rd56, %rd80;
	st.shared.u32 	[%rd82], %r810;
	add.s32 	%r1105, %r1103, 100;
	add.s32 	%r1106, %r49, %r1105;
	mul.wide.u32 	%rd83, %r1106, 4;
	add.s64 	%rd84, %rd56, %rd83;
	st.shared.u32 	[%rd84], %r813;
	ld.shared.u32 	%r817, [%rd79];
	// begin inline asm
	lop3.b32 %r816, %r817, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1107, %r816, 2021161080;
	xor.b32  	%r827, %r1107, -2139062144;
	shr.u32 	%r821, %r817, 4;
	// begin inline asm
	lop3.b32 %r820, %r821, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1108, %r820, 2021161080;
	xor.b32  	%r833, %r1108, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r824, %r825}, {%r826}, {%r827}, {%r566, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r830, %r831}, {%r832}, {%r833}, {%r566, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r836, %r837}, {%r826}, {%r833}, {%r566, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r842, %r843}, {%r832}, {%r827}, {%r836, %r837};
	// end inline asm
	ld.shared.u32 	%r849, [%rd79+4];
	// begin inline asm
	lop3.b32 %r848, %r849, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1109, %r848, 2021161080;
	xor.b32  	%r859, %r1109, -2139062144;
	shr.u32 	%r853, %r849, 4;
	// begin inline asm
	lop3.b32 %r852, %r853, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1110, %r852, 2021161080;
	xor.b32  	%r865, %r1110, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r856, %r857}, {%r858}, {%r859}, {%r824, %r825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r862, %r863}, {%r864}, {%r865}, {%r830, %r831};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r868, %r869}, {%r858}, {%r865}, {%r842, %r843};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r874, %r875}, {%r864}, {%r859}, {%r868, %r869};
	// end inline asm
	ld.shared.u32 	%r881, [%rd79+8];
	// begin inline asm
	lop3.b32 %r880, %r881, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1111, %r880, 2021161080;
	xor.b32  	%r891, %r1111, -2139062144;
	shr.u32 	%r885, %r881, 4;
	// begin inline asm
	lop3.b32 %r884, %r885, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1112, %r884, 2021161080;
	xor.b32  	%r897, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r888, %r889}, {%r890}, {%r891}, {%r856, %r857};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r894, %r895}, {%r896}, {%r897}, {%r862, %r863};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r900, %r901}, {%r890}, {%r897}, {%r874, %r875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r906, %r907}, {%r896}, {%r891}, {%r900, %r901};
	// end inline asm
	ld.shared.u32 	%r913, [%rd79+12];
	// begin inline asm
	lop3.b32 %r912, %r913, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1113, %r912, 2021161080;
	xor.b32  	%r923, %r1113, -2139062144;
	shr.u32 	%r917, %r913, 4;
	// begin inline asm
	lop3.b32 %r916, %r917, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1114, %r916, 2021161080;
	xor.b32  	%r929, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r920, %r921}, {%r922}, {%r923}, {%r888, %r889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r926, %r927}, {%r928}, {%r929}, {%r894, %r895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r932, %r933}, {%r922}, {%r929}, {%r906, %r907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r938, %r939}, {%r928}, {%r923}, {%r932, %r933};
	// end inline asm
	ld.shared.u32 	%r945, [%rd79+16];
	// begin inline asm
	lop3.b32 %r944, %r945, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1115, %r944, 2021161080;
	xor.b32  	%r955, %r1115, -2139062144;
	shr.u32 	%r949, %r945, 4;
	// begin inline asm
	lop3.b32 %r948, %r949, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1116, %r948, 2021161080;
	xor.b32  	%r961, %r1116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r952, %r953}, {%r954}, {%r955}, {%r920, %r921};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r958, %r959}, {%r960}, {%r961}, {%r926, %r927};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r964, %r965}, {%r954}, {%r961}, {%r938, %r939};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r970, %r971}, {%r960}, {%r955}, {%r964, %r965};
	// end inline asm
	ld.shared.u32 	%r977, [%rd79+20];
	// begin inline asm
	lop3.b32 %r976, %r977, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1117, %r976, 2021161080;
	xor.b32  	%r987, %r1117, -2139062144;
	shr.u32 	%r981, %r977, 4;
	// begin inline asm
	lop3.b32 %r980, %r981, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1118, %r980, 2021161080;
	xor.b32  	%r993, %r1118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r984, %r985}, {%r986}, {%r987}, {%r952, %r953};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r990, %r991}, {%r992}, {%r993}, {%r958, %r959};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r996, %r997}, {%r986}, {%r993}, {%r970, %r971};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1002, %r1003}, {%r992}, {%r987}, {%r996, %r997};
	// end inline asm
	ld.shared.u32 	%r1009, [%rd79+24];
	// begin inline asm
	lop3.b32 %r1008, %r1009, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1119, %r1008, 2021161080;
	xor.b32  	%r1019, %r1119, -2139062144;
	shr.u32 	%r1013, %r1009, 4;
	// begin inline asm
	lop3.b32 %r1012, %r1013, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1120, %r1012, 2021161080;
	xor.b32  	%r1025, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1016, %r1017}, {%r1018}, {%r1019}, {%r984, %r985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1022, %r1023}, {%r1024}, {%r1025}, {%r990, %r991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1028, %r1029}, {%r1018}, {%r1025}, {%r1002, %r1003};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1034, %r1035}, {%r1024}, {%r1019}, {%r1028, %r1029};
	// end inline asm
	ld.shared.u32 	%r1041, [%rd79+28];
	// begin inline asm
	lop3.b32 %r1040, %r1041, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1121, %r1040, 2021161080;
	xor.b32  	%r1051, %r1121, -2139062144;
	shr.u32 	%r1045, %r1041, 4;
	// begin inline asm
	lop3.b32 %r1044, %r1045, %r556, %r557, 40;
	// end inline asm
	add.s32 	%r1122, %r1044, 2021161080;
	xor.b32  	%r1057, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1048, %r1049}, {%r1050}, {%r1051}, {%r1016, %r1017};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1054, %r1055}, {%r1056}, {%r1057}, {%r1022, %r1023};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1060, %r1061}, {%r1050}, {%r1057}, {%r1034, %r1035};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1066, %r1067}, {%r1056}, {%r1051}, {%r1060, %r1061};
	// end inline asm
	sub.s32 	%r1123, %r1048, %r1054;
	add.s32 	%r1124, %r1123, 4;
	shr.s32 	%r1074, %r1124, 3;
	add.s32 	%r1125, %r1066, 4;
	shr.s32 	%r1073, %r1125, 3;
	sub.s32 	%r1126, %r1049, %r1055;
	add.s32 	%r1127, %r1126, 4;
	shr.s32 	%r1077, %r1127, 3;
	add.s32 	%r1128, %r1067, 4;
	shr.s32 	%r1076, %r1128, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1072, %r1073, %r1074;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1075, %r1076, %r1077;
	// end inline asm
	add.s32 	%r1129, %r50, %r1103;
	mul.wide.u32 	%rd85, %r1129, 4;
	add.s64 	%rd86, %rd56, %rd85;
	st.shared.u32 	[%rd86], %r1072;
	add.s32 	%r1130, %r50, %r1105;
	mul.wide.u32 	%rd87, %r1130, 4;
	add.s64 	%rd88, %rd56, %rd87;
	st.shared.u32 	[%rd88], %r1075;
	add.s32 	%r1330, %r1330, 8;
	setp.ne.s32 	%p7, %r1330, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8454
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1149, [%rd11];
	ld.shared.u32 	%r1150, [%rd12+12800];
	ld.shared.u32 	%r1151, [%rd12+25600];
	ld.shared.u32 	%r1152, [%rd12+38400];
	ld.shared.u32 	%r1153, [%rd13];
	ld.shared.u32 	%r1154, [%rd14+12800];
	ld.shared.u32 	%r1155, [%rd14+25600];
	ld.shared.u32 	%r1156, [%rd14+38400];
	ld.shared.u32 	%r1157, [%rd15];
	ld.shared.u32 	%r1158, [%rd16+12800];
	ld.shared.u32 	%r1159, [%rd16+25600];
	ld.shared.u32 	%r1160, [%rd16+38400];
	ld.shared.u32 	%r1161, [%rd17];
	ld.shared.u32 	%r1162, [%rd18+12800];
	ld.shared.u32 	%r1163, [%rd18+25600];
	ld.shared.u32 	%r1164, [%rd18+38400];
	cvt.s32.s16 	%r1165, %r1149;
	shr.s32 	%r1166, %r1149, 16;
	cvt.s32.s16 	%r1167, %r1150;
	shr.s32 	%r1168, %r1150, 16;
	cvt.s32.s16 	%r1169, %r1151;
	shr.s32 	%r1170, %r1151, 16;
	cvt.s32.s16 	%r1171, %r1152;
	shr.s32 	%r1172, %r1152, 16;
	cvt.s32.s16 	%r1173, %r1153;
	shr.s32 	%r1174, %r1153, 16;
	cvt.s32.s16 	%r1175, %r1154;
	shr.s32 	%r1176, %r1154, 16;
	cvt.s32.s16 	%r1177, %r1155;
	shr.s32 	%r1178, %r1155, 16;
	cvt.s32.s16 	%r1179, %r1156;
	shr.s32 	%r1180, %r1156, 16;
	cvt.s32.s16 	%r1181, %r1157;
	shr.s32 	%r1182, %r1157, 16;
	cvt.s32.s16 	%r1183, %r1158;
	shr.s32 	%r1184, %r1158, 16;
	cvt.s32.s16 	%r1185, %r1159;
	shr.s32 	%r1186, %r1159, 16;
	cvt.s32.s16 	%r1187, %r1160;
	shr.s32 	%r1188, %r1160, 16;
	cvt.s32.s16 	%r1189, %r1161;
	shr.s32 	%r1190, %r1161, 16;
	cvt.s32.s16 	%r1191, %r1162;
	shr.s32 	%r1192, %r1162, 16;
	cvt.s32.s16 	%r1193, %r1163;
	shr.s32 	%r1194, %r1163, 16;
	cvt.s32.s16 	%r1195, %r1164;
	shr.s32 	%r1196, %r1164, 16;
	add.s32 	%r1197, %r1165, %r51;
	add.s32 	%r1198, %r1197, %r1167;
	add.s32 	%r1199, %r1198, %r1169;
	add.s32 	%r1200, %r1199, %r1171;
	shr.s32 	%r1201, %r1200, %r52;
	add.s32 	%r1202, %r1166, %r51;
	add.s32 	%r1203, %r1202, %r1168;
	add.s32 	%r1204, %r1203, %r1170;
	add.s32 	%r1205, %r1204, %r1172;
	shr.s32 	%r1206, %r1205, %r52;
	add.s32 	%r1207, %r1173, %r51;
	add.s32 	%r1208, %r1207, %r1175;
	add.s32 	%r1209, %r1208, %r1177;
	add.s32 	%r1210, %r1209, %r1179;
	shr.s32 	%r1211, %r1210, %r52;
	add.s32 	%r1212, %r1174, %r51;
	add.s32 	%r1213, %r1212, %r1176;
	add.s32 	%r1214, %r1213, %r1178;
	add.s32 	%r1215, %r1214, %r1180;
	shr.s32 	%r1216, %r1215, %r52;
	add.s32 	%r1217, %r1181, %r51;
	add.s32 	%r1218, %r1217, %r1183;
	add.s32 	%r1219, %r1218, %r1185;
	add.s32 	%r1220, %r1219, %r1187;
	shr.s32 	%r1221, %r1220, %r52;
	add.s32 	%r1222, %r1182, %r51;
	add.s32 	%r1223, %r1222, %r1184;
	add.s32 	%r1224, %r1223, %r1186;
	add.s32 	%r1225, %r1224, %r1188;
	shr.s32 	%r1226, %r1225, %r52;
	add.s32 	%r1227, %r1189, %r51;
	add.s32 	%r1228, %r1227, %r1191;
	add.s32 	%r1229, %r1228, %r1193;
	add.s32 	%r1230, %r1229, %r1195;
	shr.s32 	%r1231, %r1230, %r52;
	add.s32 	%r1232, %r1190, %r51;
	add.s32 	%r1233, %r1232, %r1192;
	add.s32 	%r1234, %r1233, %r1194;
	add.s32 	%r1235, %r1234, %r1196;
	shr.s32 	%r1236, %r1235, %r52;
	max.s32 	%r1237, %r1201, -7;
	min.s32 	%r1136, %r1237, 7;
	max.s32 	%r1238, %r1206, -7;
	min.s32 	%r1143, %r1238, 7;
	max.s32 	%r1239, %r1211, -7;
	min.s32 	%r1135, %r1239, 7;
	max.s32 	%r1240, %r1216, -7;
	min.s32 	%r1142, %r1240, 7;
	max.s32 	%r1241, %r1221, -7;
	min.s32 	%r1133, %r1241, 7;
	max.s32 	%r1242, %r1226, -7;
	min.s32 	%r1140, %r1242, 7;
	max.s32 	%r1243, %r1231, -7;
	min.s32 	%r1132, %r1243, 7;
	max.s32 	%r1244, %r1236, -7;
	min.s32 	%r1139, %r1244, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1131, %r1132, %r1133, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1134, %r1135, %r1136, %r1131;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1138, %r1139, %r1140, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1141, %r1142, %r1143, %r1138;
	// end inline asm
	shl.b32 	%r1148, %r1141, 4;
	// begin inline asm
	lop3.b32 %r1255, %r557, %r1134, %r1148, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1323, 0;
	selp.b32 	%r1328, %r1255, %r1328, %p8;
	selp.b32 	%r1329, %r1255, %r1329, %p8;
	setp.eq.s32 	%p9, %r1323, 32;
	selp.b32 	%r1324, %r1255, %r1324, %p9;
	selp.b32 	%r1325, %r1255, %r1325, %p9;
	setp.eq.s32 	%p10, %r1323, 64;
	selp.b32 	%r1326, %r1255, %r1326, %p10;
	selp.b32 	%r1327, %r1255, %r1327, %p10;
	add.s32 	%r73, %r1323, 32;
	setp.ne.s32 	%p11, %r1323, 96;
	mov.u32 	%r1323, %r73;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11190
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1245, %r1328, %r1324, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1249, %r1329, %r1325, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1253, %r1326, %r1255, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1257, %r1327, %r1255, %r224;
	// end inline asm
	selp.b32 	%r1293, %r1249, %r1245, %p12;
	shfl.sync.bfly.b32	%r1294, %r1293, 1, 31, -1;
	selp.b32 	%r1262, %r1245, %r1294, %p12;
	selp.b32 	%r1263, %r1294, %r1249, %p12;
	selp.b32 	%r1295, %r1257, %r1253, %p12;
	shfl.sync.bfly.b32	%r1296, %r1295, 1, 31, -1;
	selp.b32 	%r1270, %r1253, %r1296, %p12;
	selp.b32 	%r1271, %r1296, %r1257, %p12;
	// begin inline asm
	prmt.b32 %r1261, %r1262, %r1263, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1265, %r1262, %r1263, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1269, %r1270, %r1271, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1273, %r1270, %r1271, %r224;
	// end inline asm
	selp.b32 	%r1297, %r1269, %r1261, %p4;
	shfl.sync.bfly.b32	%r1298, %r1297, 2, 31, -1;
	selp.b32 	%r1278, %r1261, %r1298, %p4;
	selp.b32 	%r1279, %r1298, %r1269, %p4;
	selp.b32 	%r1299, %r1273, %r1265, %p4;
	shfl.sync.bfly.b32	%r1300, %r1299, 2, 31, -1;
	selp.b32 	%r1286, %r1265, %r1300, %p4;
	selp.b32 	%r1287, %r1300, %r1273, %p4;
	// begin inline asm
	prmt.b32 %r1277, %r1278, %r1279, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1281, %r1278, %r1279, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1285, %r1286, %r1287, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1289, %r1286, %r1287, %r96;
	// end inline asm
	selp.b32 	%r1301, %r1285, %r1277, %p5;
	shfl.sync.bfly.b32	%r1302, %r1301, 4, 31, -1;
	selp.b32 	%r1303, %r1277, %r1302, %p5;
	selp.b32 	%r1304, %r1302, %r1285, %p5;
	selp.b32 	%r1305, %r1289, %r1281, %p5;
	shfl.sync.bfly.b32	%r1306, %r1305, 4, 31, -1;
	selp.b32 	%r1307, %r1281, %r1306, %p5;
	selp.b32 	%r1308, %r1306, %r1289, %p5;
	selp.b32 	%r1309, %r1307, %r1303, %p12;
	shfl.sync.bfly.b32	%r1310, %r1309, 1, 31, -1;
	selp.b32 	%r1311, %r1303, %r1310, %p12;
	selp.b32 	%r1312, %r1310, %r1307, %p12;
	selp.b32 	%r1313, %r1308, %r1304, %p12;
	shfl.sync.bfly.b32	%r1314, %r1313, 1, 31, -1;
	selp.b32 	%r1315, %r1304, %r1314, %p12;
	selp.b32 	%r1316, %r1314, %r1308, %p12;
	or.b32  	%r1317, %r55, %r1322;
	shr.u32 	%r1318, %r1317, 2;
	or.b32  	%r1319, %r1318, %r53;
	add.s32 	%r1320, %r54, %r1319;
	mul.wide.u32 	%rd89, %r1320, 4;
	add.s64 	%rd90, %rd4, %rd89;
	st.global.v4.u32 	[%rd90], {%r1311, %r1315, %r1312, %r1316};
	add.s32 	%r74, %r1322, 128;
	setp.ne.s32 	%p15, %r1322, 1920;
	mov.u32 	%r1322, %r74;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11593
	mov.u32 	%r1321, 0;
	st.global.u32 	[%rd6], %r1321;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1931;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1931;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L252
	mov.u32 	%r88, 2;
	st.global.u32 	[%rd6], %r88;
	mov.u64 	%rd27, exception925;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
