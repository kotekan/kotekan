// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1329>;
	.reg .b64 	%rd<91>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r75, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r76, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r76, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r77, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r77, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r78, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r79, %r78, %r2;
	add.s32 	%r80, %r79, %r4;
	mul.wide.u32 	%rd24, %r80, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r81, 1;
	st.global.u32 	[%rd6], %r81;
	bfe.u32 	%r5, %r1, 4, 1;
	shl.b32 	%r82, %r3, 2;
	shr.u32 	%r6, %r1, 5;
	mul.lo.s32 	%r83, %r6, 192;
	shr.u32 	%r7, %r2, 3;
	or.b32  	%r84, %r82, %r7;
	mul.hi.u32 	%r85, %r84, -1431655765;
	shr.u32 	%r86, %r85, 6;
	mul.lo.s32 	%r87, %r86, 96;
	sub.s32 	%r8, %r84, %r87;
	mad.lo.s32 	%r88, %r5, 96, %r83;
	add.s32 	%r89, %r88, %r8;
	mul.wide.u32 	%rd25, %r89, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r9, [%rd26];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L345
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r348, %r9, -3;
	shl.b32 	%r349, %r2, 1;
	and.b32  	%r350, %r349, 12;
	shl.b32 	%r351, %r2, 4;
	and.b32  	%r352, %r351, 16;
	shl.b32 	%r353, %r3, 6;
	and.b32  	%r354, %r353, 192;
	mul.lo.s32 	%r355, %r6, 49152;
	shr.u32 	%r11, %r2, 2;
	and.b32  	%r356, %r11, 6;
	shr.u32 	%r357, %r3, 2;
	cvt.u16.u32 	%rs4, %r357;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r358, %rs9;
	and.b32  	%r359, %r358, 240;
	or.b32  	%r360, %r356, %r359;
	cvt.u16.u32 	%rs10, %r360;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r361, %rs15, 256;
	or.b32  	%r362, %r350, %r352;
	or.b32  	%r363, %r362, %r354;
	or.b32  	%r364, %r363, %r355;
	mad.lo.s32 	%r365, %r5, 24576, %r364;
	add.s32 	%r366, %r365, %r361;
	shl.b32 	%r367, %r366, 2;
	cvt.u64.u32 	%rd29, %r367;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r92, %r93, %r108, %r109}, [%rd30];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r368, %rs21, 256;
	add.s32 	%r369, %r365, %r368;
	shl.b32 	%r370, %r369, 2;
	cvt.u64.u32 	%rd31, %r370;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r100, %r101, %r116, %r117}, [%rd32];
	or.b32  	%r371, %r365, 33;
	add.s32 	%r372, %r371, %r361;
	mul.wide.u32 	%rd33, %r372, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r124, %r125, %r140, %r141}, [%rd34+-4];
	add.s32 	%r373, %r371, %r368;
	mul.wide.u32 	%rd35, %r373, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r132, %r133, %r148, %r149}, [%rd36+-4];
	or.b32  	%r374, %r11, %r359;
	or.b32  	%r375, %r374, 1;
	mul.hi.u32 	%r376, %r375, -1431655765;
	shr.u32 	%r377, %r376, 6;
	mul.lo.s32 	%r378, %r377, 96;
	sub.s32 	%r379, %r375, %r378;
	shl.b32 	%r380, %r379, 8;
	add.s32 	%r381, %r365, %r380;
	shl.b32 	%r382, %r381, 2;
	cvt.u64.u32 	%rd37, %r382;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r156, %r157, %r172, %r173}, [%rd38];
	or.b32  	%r383, %r374, 9;
	mul.hi.u32 	%r384, %r383, -1431655765;
	shr.u32 	%r385, %r384, 6;
	mul.lo.s32 	%r386, %r385, 96;
	sub.s32 	%r387, %r383, %r386;
	shl.b32 	%r388, %r387, 8;
	add.s32 	%r389, %r365, %r388;
	shl.b32 	%r390, %r389, 2;
	cvt.u64.u32 	%rd39, %r390;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r164, %r165, %r180, %r181}, [%rd40];
	add.s32 	%r391, %r371, %r380;
	mul.wide.u32 	%rd41, %r391, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r188, %r189, %r204, %r205}, [%rd42+-4];
	add.s32 	%r392, %r371, %r388;
	mul.wide.u32 	%rd43, %r392, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.v4.u32 	{%r196, %r197, %r212, %r213}, [%rd44+-4];
	mov.u32 	%r94, 21520;
	// begin inline asm
	prmt.b32 %r220, %r92, %r93, %r94;
	// end inline asm
	mov.u32 	%r98, 30258;
	// begin inline asm
	prmt.b32 %r221, %r92, %r93, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r100, %r101, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r100, %r101, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r108, %r109, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r108, %r109, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r116, %r117, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r116, %r117, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r124, %r125, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r124, %r125, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r132, %r133, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r132, %r133, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r140, %r141, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r140, %r141, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r148, %r149, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r148, %r149, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r156, %r157, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r156, %r157, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r164, %r165, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r164, %r165, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r172, %r173, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r172, %r173, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r180, %r181, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r180, %r181, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r188, %r189, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r188, %r189, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r196, %r197, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r196, %r197, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r204, %r205, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r204, %r205, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r212, %r213, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r212, %r213, %r98;
	// end inline asm
	mov.u32 	%r222, 25152;
	// begin inline asm
	prmt.b32 %r219, %r220, %r221, %r222;
	// end inline asm
	mov.u32 	%r226, 29521;
	// begin inline asm
	prmt.b32 %r223, %r220, %r221, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r228, %r229, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r228, %r229, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r236, %r237, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r236, %r237, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r244, %r245, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r244, %r245, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r252, %r253, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r252, %r253, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r260, %r261, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r260, %r261, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r268, %r269, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r268, %r269, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r276, %r277, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r276, %r277, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r284, %r285, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r284, %r285, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r292, %r293, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r292, %r293, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r300, %r301, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r300, %r301, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r308, %r309, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r308, %r309, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r316, %r317, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r316, %r317, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r324, %r325, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r324, %r325, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r332, %r333, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r332, %r333, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r340, %r341, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r340, %r341, %r226;
	// end inline asm
	cvt.u16.u32 	%rs22, %r2;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r393, %r251, %r219, %p4;
	shfl.sync.bfly.b32	%r394, %r393, 2, 31, -1;
	selp.b32 	%r395, %r219, %r394, %p4;
	selp.b32 	%r396, %r394, %r251, %p4;
	selp.b32 	%r397, %r259, %r227, %p4;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r227, %r398, %p4;
	selp.b32 	%r400, %r398, %r259, %p4;
	selp.b32 	%r401, %r255, %r223, %p4;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r223, %r402, %p4;
	selp.b32 	%r404, %r402, %r255, %p4;
	selp.b32 	%r405, %r263, %r231, %p4;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r231, %r406, %p4;
	selp.b32 	%r408, %r406, %r263, %p4;
	selp.b32 	%r409, %r267, %r235, %p4;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r235, %r410, %p4;
	selp.b32 	%r412, %r410, %r267, %p4;
	selp.b32 	%r413, %r275, %r243, %p4;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r243, %r414, %p4;
	selp.b32 	%r416, %r414, %r275, %p4;
	selp.b32 	%r417, %r271, %r239, %p4;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r239, %r418, %p4;
	selp.b32 	%r420, %r418, %r271, %p4;
	selp.b32 	%r421, %r279, %r247, %p4;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r247, %r422, %p4;
	selp.b32 	%r424, %r422, %r279, %p4;
	selp.b32 	%r425, %r315, %r283, %p4;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r283, %r426, %p4;
	selp.b32 	%r428, %r426, %r315, %p4;
	selp.b32 	%r429, %r323, %r291, %p4;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r291, %r430, %p4;
	selp.b32 	%r432, %r430, %r323, %p4;
	selp.b32 	%r433, %r319, %r287, %p4;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r287, %r434, %p4;
	selp.b32 	%r436, %r434, %r319, %p4;
	selp.b32 	%r437, %r327, %r295, %p4;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r295, %r438, %p4;
	selp.b32 	%r440, %r438, %r327, %p4;
	selp.b32 	%r441, %r331, %r299, %p4;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r299, %r442, %p4;
	selp.b32 	%r444, %r442, %r331, %p4;
	selp.b32 	%r445, %r339, %r307, %p4;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r307, %r446, %p4;
	selp.b32 	%r448, %r446, %r339, %p4;
	selp.b32 	%r449, %r335, %r303, %p4;
	shfl.sync.bfly.b32	%r450, %r449, 2, 31, -1;
	selp.b32 	%r451, %r303, %r450, %p4;
	selp.b32 	%r452, %r450, %r335, %p4;
	selp.b32 	%r453, %r343, %r311, %p4;
	shfl.sync.bfly.b32	%r454, %r453, 2, 31, -1;
	selp.b32 	%r455, %r311, %r454, %p4;
	selp.b32 	%r456, %r454, %r343, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r457, %r427, %r395, %p5;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r565, %r395, %r458, %p5;
	selp.b32 	%r693, %r458, %r427, %p5;
	selp.b32 	%r459, %r431, %r399, %p5;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r827, %r399, %r460, %p5;
	selp.b32 	%r955, %r460, %r431, %p5;
	selp.b32 	%r461, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r571, %r403, %r462, %p5;
	selp.b32 	%r699, %r462, %r435, %p5;
	selp.b32 	%r463, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r833, %r407, %r464, %p5;
	selp.b32 	%r961, %r464, %r439, %p5;
	selp.b32 	%r465, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r597, %r411, %r466, %p5;
	selp.b32 	%r725, %r466, %r443, %p5;
	selp.b32 	%r467, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r859, %r415, %r468, %p5;
	selp.b32 	%r987, %r468, %r447, %p5;
	selp.b32 	%r469, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r603, %r419, %r470, %p5;
	selp.b32 	%r731, %r470, %r451, %p5;
	selp.b32 	%r471, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r865, %r423, %r472, %p5;
	selp.b32 	%r993, %r472, %r455, %p5;
	selp.b32 	%r473, %r428, %r396, %p5;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r629, %r396, %r474, %p5;
	selp.b32 	%r757, %r474, %r428, %p5;
	selp.b32 	%r475, %r432, %r400, %p5;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r891, %r400, %r476, %p5;
	selp.b32 	%r1019, %r476, %r432, %p5;
	selp.b32 	%r477, %r436, %r404, %p5;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r635, %r404, %r478, %p5;
	selp.b32 	%r763, %r478, %r436, %p5;
	selp.b32 	%r479, %r440, %r408, %p5;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r897, %r408, %r480, %p5;
	selp.b32 	%r1025, %r480, %r440, %p5;
	selp.b32 	%r481, %r444, %r412, %p5;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r661, %r412, %r482, %p5;
	selp.b32 	%r789, %r482, %r444, %p5;
	selp.b32 	%r483, %r448, %r416, %p5;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r923, %r416, %r484, %p5;
	selp.b32 	%r1051, %r484, %r448, %p5;
	selp.b32 	%r485, %r452, %r420, %p5;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r667, %r420, %r486, %p5;
	selp.b32 	%r795, %r486, %r452, %p5;
	selp.b32 	%r487, %r456, %r424, %p5;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r929, %r424, %r488, %p5;
	selp.b32 	%r1057, %r488, %r456, %p5;
	and.b32  	%r44, %r3, 12;
	shl.b32 	%r489, %r1, 11;
	and.b32  	%r45, %r489, 30720;
	shl.b32 	%r490, %r2, 2;
	and.b32  	%r491, %r490, 28;
	and.b32  	%r492, %r4, 96;
	or.b32  	%r46, %r492, %r491;
	shl.b32 	%r493, %r1, 2;
	and.b32  	%r47, %r493, 1920;
	shl.b32 	%r494, %r1, 7;
	and.b32  	%r48, %r494, 2048;
	or.b32  	%r495, %r7, %r44;
	mul.lo.s32 	%r496, %r495, 129;
	add.s32 	%r497, %r46, %r496;
	mul.wide.u32 	%rd45, %r497, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r496;
	cvt.u64.u32 	%rd48, %r46;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd8, %rd46, %rd50;
	or.b32  	%r498, %r495, 16;
	mul.lo.s32 	%r499, %r498, 129;
	add.s32 	%r500, %r46, %r499;
	mul.wide.u32 	%rd51, %r500, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r499;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd10, %rd46, %rd54;
	shl.b32 	%r501, %r2, 3;
	and.b32  	%r502, %r501, 24;
	or.b32  	%r49, %r502, %r492;
	and.b32  	%r50, %r349, 6;
	and.b32  	%r503, %r3, 3;
	mul.hi.u32 	%r504, %r374, -1431655765;
	shr.u32 	%r505, %r504, 6;
	mul.lo.s32 	%r506, %r505, 96;
	sub.s32 	%r507, %r374, %r506;
	mul.lo.s32 	%r508, %r503, 3200;
	or.b32  	%r51, %r507, %r508;
	or.b32  	%r509, %r374, 8;
	mul.hi.u32 	%r510, %r509, -1431655765;
	shr.u32 	%r511, %r510, 6;
	mul.lo.s32 	%r512, %r511, 96;
	sub.s32 	%r513, %r509, %r512;
	or.b32  	%r52, %r513, %r508;
	and.b32  	%r514, %r2, 7;
	mul.lo.s32 	%r515, %r514, 100;
	add.s32 	%r516, %r8, %r515;
	mul.wide.u32 	%rd55, %r516, 4;
	add.s64 	%rd56, %rd46, 16512;
	add.s64 	%rd11, %rd56, %rd55;
	cvt.u64.u32 	%rd57, %r8;
	cvt.u64.u32 	%rd58, %r515;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd12, %rd56, %rd60;
	add.s32 	%r517, %r515, 800;
	add.s32 	%r518, %r517, %r8;
	mul.wide.u32 	%rd61, %r518, 4;
	add.s64 	%rd13, %rd56, %rd61;
	cvt.u64.u32 	%rd62, %r517;
	add.s64 	%rd63, %rd57, %rd62;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd14, %rd56, %rd64;
	add.s32 	%r519, %r515, 1600;
	add.s32 	%r520, %r519, %r8;
	mul.wide.u32 	%rd65, %r520, 4;
	add.s64 	%rd15, %rd56, %rd65;
	cvt.u64.u32 	%rd66, %r519;
	add.s64 	%rd67, %rd57, %rd66;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd16, %rd56, %rd68;
	or.b32  	%r521, %r2, 24;
	mul.lo.s32 	%r522, %r521, 100;
	add.s32 	%r523, %r8, %r522;
	mul.wide.u32 	%rd69, %r523, 4;
	add.s64 	%rd17, %rd56, %rd69;
	cvt.u64.u32 	%rd70, %r522;
	add.s64 	%rd71, %rd70, %rd57;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd18, %rd56, %rd72;
	shl.b32 	%r53, %r81, %r10;
	min.u32 	%r54, %r348, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r525, %r2, 5;
	and.b32  	%r526, %r525, 64;
	and.b32  	%r527, %r489, 32768;
	and.b32  	%r528, %r489, 983040;
	shl.b32 	%r529, %r8, 20;
	and.b32  	%r530, %r501, 32;
	or.b32  	%r531, %r352, %r530;
	or.b32  	%r532, %r531, %r45;
	or.b32  	%r533, %r532, %r526;
	or.b32  	%r534, %r533, %r527;
	or.b32  	%r535, %r534, %r528;
	or.b32  	%r55, %r535, %r529;
	mov.u32 	%r347, 0;
	setp.gt.u32 	%p6, %r3, 15;
	mov.u32 	%r1320, %r347;
LBB0_7:                                 // %L2388
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1321, %r347;
	mov.u32 	%r1322, %r347;
	mov.u32 	%r1323, %r347;
	mov.u32 	%r1324, %r347;
	mov.u32 	%r1325, %r347;
	mov.u32 	%r1326, %r347;
	mov.u32 	%r1327, %r347;
LBB0_8:                                 // %L2391
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2411
                                        //   in Loop: Header=BB0_8 Depth=2
	or.b32  	%r537, %r1321, %r1320;
	or.b32  	%r538, %r537, %r7;
	or.b32  	%r539, %r538, %r44;
	or.b32  	%r540, %r539, %r45;
	shl.b32 	%r541, %r540, 12;
	or.b32  	%r542, %r541, %r46;
	or.b32  	%r543, %r542, %r47;
	or.b32  	%r544, %r543, %r48;
	mul.wide.s32 	%rd73, %r544, 4;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.v4.u32 	{%r545, %r546, %r547, %r548}, [%rd74];
	or.b32  	%r549, %r544, 65536;
	mul.wide.s32 	%rd75, %r549, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.v4.u32 	{%r550, %r551, %r552, %r553}, [%rd76];
	st.shared.u32 	[%rd7], %r545;
	st.shared.u32 	[%rd8+4], %r546;
	st.shared.u32 	[%rd8+8], %r547;
	st.shared.u32 	[%rd8+12], %r548;
	st.shared.u32 	[%rd9], %r550;
	st.shared.u32 	[%rd10+4], %r551;
	st.shared.u32 	[%rd10+8], %r552;
	st.shared.u32 	[%rd10+12], %r553;
LBB0_10:                                // %L4289
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r567, 0;
	mov.u32 	%r1328, %r567;
LBB0_11:                                // %L4291
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1079, %r1328, %r11;
	mad.lo.s32 	%r1080, %r1079, 129, %r49;
	mul.wide.u32 	%rd77, %r1080, 4;
	add.s64 	%rd79, %rd46, %rd77;
	ld.shared.u32 	%r556, [%rd79];
	mov.u32 	%r557, 134744072;
	mov.u32 	%r558, 252645135;
	// begin inline asm
	lop3.b32 %r555, %r556, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1081, %r555, 2021161080;
	xor.b32  	%r566, %r1081, -2139062144;
	shr.u32 	%r560, %r556, 4;
	// begin inline asm
	lop3.b32 %r559, %r560, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1082, %r559, 2021161080;
	xor.b32  	%r572, %r1082, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r563, %r564}, {%r565}, {%r566}, {%r567, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r569, %r570}, {%r571}, {%r572}, {%r567, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r575, %r576}, {%r565}, {%r572}, {%r567, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r581, %r582}, {%r571}, {%r566}, {%r575, %r576};
	// end inline asm
	ld.shared.u32 	%r588, [%rd79+4];
	// begin inline asm
	lop3.b32 %r587, %r588, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1083, %r587, 2021161080;
	xor.b32  	%r598, %r1083, -2139062144;
	shr.u32 	%r592, %r588, 4;
	// begin inline asm
	lop3.b32 %r591, %r592, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1084, %r591, 2021161080;
	xor.b32  	%r604, %r1084, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r595, %r596}, {%r597}, {%r598}, {%r563, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r601, %r602}, {%r603}, {%r604}, {%r569, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r607, %r608}, {%r597}, {%r604}, {%r581, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r613, %r614}, {%r603}, {%r598}, {%r607, %r608};
	// end inline asm
	ld.shared.u32 	%r620, [%rd79+8];
	// begin inline asm
	lop3.b32 %r619, %r620, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1085, %r619, 2021161080;
	xor.b32  	%r630, %r1085, -2139062144;
	shr.u32 	%r624, %r620, 4;
	// begin inline asm
	lop3.b32 %r623, %r624, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1086, %r623, 2021161080;
	xor.b32  	%r636, %r1086, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r627, %r628}, {%r629}, {%r630}, {%r595, %r596};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r633, %r634}, {%r635}, {%r636}, {%r601, %r602};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r639, %r640}, {%r629}, {%r636}, {%r613, %r614};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r645, %r646}, {%r635}, {%r630}, {%r639, %r640};
	// end inline asm
	ld.shared.u32 	%r652, [%rd79+12];
	// begin inline asm
	lop3.b32 %r651, %r652, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1087, %r651, 2021161080;
	xor.b32  	%r662, %r1087, -2139062144;
	shr.u32 	%r656, %r652, 4;
	// begin inline asm
	lop3.b32 %r655, %r656, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1088, %r655, 2021161080;
	xor.b32  	%r668, %r1088, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r659, %r660}, {%r661}, {%r662}, {%r627, %r628};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r665, %r666}, {%r667}, {%r668}, {%r633, %r634};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r671, %r672}, {%r661}, {%r668}, {%r645, %r646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r677, %r678}, {%r667}, {%r662}, {%r671, %r672};
	// end inline asm
	ld.shared.u32 	%r684, [%rd79+16];
	// begin inline asm
	lop3.b32 %r683, %r684, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1089, %r683, 2021161080;
	xor.b32  	%r694, %r1089, -2139062144;
	shr.u32 	%r688, %r684, 4;
	// begin inline asm
	lop3.b32 %r687, %r688, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1090, %r687, 2021161080;
	xor.b32  	%r700, %r1090, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r691, %r692}, {%r693}, {%r694}, {%r659, %r660};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r697, %r698}, {%r699}, {%r700}, {%r665, %r666};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r703, %r704}, {%r693}, {%r700}, {%r677, %r678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r709, %r710}, {%r699}, {%r694}, {%r703, %r704};
	// end inline asm
	ld.shared.u32 	%r716, [%rd79+20];
	// begin inline asm
	lop3.b32 %r715, %r716, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1091, %r715, 2021161080;
	xor.b32  	%r726, %r1091, -2139062144;
	shr.u32 	%r720, %r716, 4;
	// begin inline asm
	lop3.b32 %r719, %r720, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1092, %r719, 2021161080;
	xor.b32  	%r732, %r1092, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r723, %r724}, {%r725}, {%r726}, {%r691, %r692};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r729, %r730}, {%r731}, {%r732}, {%r697, %r698};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r735, %r736}, {%r725}, {%r732}, {%r709, %r710};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r741, %r742}, {%r731}, {%r726}, {%r735, %r736};
	// end inline asm
	ld.shared.u32 	%r748, [%rd79+24];
	// begin inline asm
	lop3.b32 %r747, %r748, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1093, %r747, 2021161080;
	xor.b32  	%r758, %r1093, -2139062144;
	shr.u32 	%r752, %r748, 4;
	// begin inline asm
	lop3.b32 %r751, %r752, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1094, %r751, 2021161080;
	xor.b32  	%r764, %r1094, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r755, %r756}, {%r757}, {%r758}, {%r723, %r724};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r761, %r762}, {%r763}, {%r764}, {%r729, %r730};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r767, %r768}, {%r757}, {%r764}, {%r741, %r742};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r773, %r774}, {%r763}, {%r758}, {%r767, %r768};
	// end inline asm
	ld.shared.u32 	%r780, [%rd79+28];
	// begin inline asm
	lop3.b32 %r779, %r780, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1095, %r779, 2021161080;
	xor.b32  	%r790, %r1095, -2139062144;
	shr.u32 	%r784, %r780, 4;
	// begin inline asm
	lop3.b32 %r783, %r784, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1096, %r783, 2021161080;
	xor.b32  	%r796, %r1096, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r787, %r788}, {%r789}, {%r790}, {%r755, %r756};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r793, %r794}, {%r795}, {%r796}, {%r761, %r762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r799, %r800}, {%r789}, {%r796}, {%r773, %r774};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r805, %r806}, {%r795}, {%r790}, {%r799, %r800};
	// end inline asm
	sub.s32 	%r1097, %r787, %r793;
	add.s32 	%r1098, %r1097, 4;
	shr.s32 	%r813, %r1098, 3;
	add.s32 	%r1099, %r805, 4;
	shr.s32 	%r812, %r1099, 3;
	sub.s32 	%r1100, %r788, %r794;
	add.s32 	%r1101, %r1100, 4;
	shr.s32 	%r816, %r1101, 3;
	add.s32 	%r1102, %r806, 4;
	shr.s32 	%r815, %r1102, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r811, %r812, %r813;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r814, %r815, %r816;
	// end inline asm
	or.b32  	%r1103, %r1328, %r50;
	mul.lo.s32 	%r1104, %r1103, 100;
	add.s32 	%r1105, %r51, %r1104;
	mul.wide.u32 	%rd80, %r1105, 4;
	add.s64 	%rd82, %rd56, %rd80;
	st.shared.u32 	[%rd82], %r811;
	add.s32 	%r1106, %r1104, 100;
	add.s32 	%r1107, %r51, %r1106;
	mul.wide.u32 	%rd83, %r1107, 4;
	add.s64 	%rd84, %rd56, %rd83;
	st.shared.u32 	[%rd84], %r814;
	ld.shared.u32 	%r818, [%rd79];
	// begin inline asm
	lop3.b32 %r817, %r818, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1108, %r817, 2021161080;
	xor.b32  	%r828, %r1108, -2139062144;
	shr.u32 	%r822, %r818, 4;
	// begin inline asm
	lop3.b32 %r821, %r822, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1109, %r821, 2021161080;
	xor.b32  	%r834, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r825, %r826}, {%r827}, {%r828}, {%r567, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r831, %r832}, {%r833}, {%r834}, {%r567, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r837, %r838}, {%r827}, {%r834}, {%r567, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r843, %r844}, {%r833}, {%r828}, {%r837, %r838};
	// end inline asm
	ld.shared.u32 	%r850, [%rd79+4];
	// begin inline asm
	lop3.b32 %r849, %r850, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1110, %r849, 2021161080;
	xor.b32  	%r860, %r1110, -2139062144;
	shr.u32 	%r854, %r850, 4;
	// begin inline asm
	lop3.b32 %r853, %r854, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1111, %r853, 2021161080;
	xor.b32  	%r866, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r857, %r858}, {%r859}, {%r860}, {%r825, %r826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r863, %r864}, {%r865}, {%r866}, {%r831, %r832};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r869, %r870}, {%r859}, {%r866}, {%r843, %r844};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r875, %r876}, {%r865}, {%r860}, {%r869, %r870};
	// end inline asm
	ld.shared.u32 	%r882, [%rd79+8];
	// begin inline asm
	lop3.b32 %r881, %r882, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1112, %r881, 2021161080;
	xor.b32  	%r892, %r1112, -2139062144;
	shr.u32 	%r886, %r882, 4;
	// begin inline asm
	lop3.b32 %r885, %r886, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1113, %r885, 2021161080;
	xor.b32  	%r898, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r889, %r890}, {%r891}, {%r892}, {%r857, %r858};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r895, %r896}, {%r897}, {%r898}, {%r863, %r864};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r901, %r902}, {%r891}, {%r898}, {%r875, %r876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r907, %r908}, {%r897}, {%r892}, {%r901, %r902};
	// end inline asm
	ld.shared.u32 	%r914, [%rd79+12];
	// begin inline asm
	lop3.b32 %r913, %r914, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1114, %r913, 2021161080;
	xor.b32  	%r924, %r1114, -2139062144;
	shr.u32 	%r918, %r914, 4;
	// begin inline asm
	lop3.b32 %r917, %r918, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1115, %r917, 2021161080;
	xor.b32  	%r930, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r921, %r922}, {%r923}, {%r924}, {%r889, %r890};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r927, %r928}, {%r929}, {%r930}, {%r895, %r896};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r933, %r934}, {%r923}, {%r930}, {%r907, %r908};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r939, %r940}, {%r929}, {%r924}, {%r933, %r934};
	// end inline asm
	ld.shared.u32 	%r946, [%rd79+16];
	// begin inline asm
	lop3.b32 %r945, %r946, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1116, %r945, 2021161080;
	xor.b32  	%r956, %r1116, -2139062144;
	shr.u32 	%r950, %r946, 4;
	// begin inline asm
	lop3.b32 %r949, %r950, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1117, %r949, 2021161080;
	xor.b32  	%r962, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r953, %r954}, {%r955}, {%r956}, {%r921, %r922};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r959, %r960}, {%r961}, {%r962}, {%r927, %r928};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r965, %r966}, {%r955}, {%r962}, {%r939, %r940};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r971, %r972}, {%r961}, {%r956}, {%r965, %r966};
	// end inline asm
	ld.shared.u32 	%r978, [%rd79+20];
	// begin inline asm
	lop3.b32 %r977, %r978, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1118, %r977, 2021161080;
	xor.b32  	%r988, %r1118, -2139062144;
	shr.u32 	%r982, %r978, 4;
	// begin inline asm
	lop3.b32 %r981, %r982, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1119, %r981, 2021161080;
	xor.b32  	%r994, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r985, %r986}, {%r987}, {%r988}, {%r953, %r954};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r991, %r992}, {%r993}, {%r994}, {%r959, %r960};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r997, %r998}, {%r987}, {%r994}, {%r971, %r972};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1003, %r1004}, {%r993}, {%r988}, {%r997, %r998};
	// end inline asm
	ld.shared.u32 	%r1010, [%rd79+24];
	// begin inline asm
	lop3.b32 %r1009, %r1010, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1120, %r1009, 2021161080;
	xor.b32  	%r1020, %r1120, -2139062144;
	shr.u32 	%r1014, %r1010, 4;
	// begin inline asm
	lop3.b32 %r1013, %r1014, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1121, %r1013, 2021161080;
	xor.b32  	%r1026, %r1121, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1017, %r1018}, {%r1019}, {%r1020}, {%r985, %r986};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1023, %r1024}, {%r1025}, {%r1026}, {%r991, %r992};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1029, %r1030}, {%r1019}, {%r1026}, {%r1003, %r1004};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1035, %r1036}, {%r1025}, {%r1020}, {%r1029, %r1030};
	// end inline asm
	ld.shared.u32 	%r1042, [%rd79+28];
	// begin inline asm
	lop3.b32 %r1041, %r1042, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1122, %r1041, 2021161080;
	xor.b32  	%r1052, %r1122, -2139062144;
	shr.u32 	%r1046, %r1042, 4;
	// begin inline asm
	lop3.b32 %r1045, %r1046, %r557, %r558, 40;
	// end inline asm
	add.s32 	%r1123, %r1045, 2021161080;
	xor.b32  	%r1058, %r1123, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1049, %r1050}, {%r1051}, {%r1052}, {%r1017, %r1018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1055, %r1056}, {%r1057}, {%r1058}, {%r1023, %r1024};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1061, %r1062}, {%r1051}, {%r1058}, {%r1035, %r1036};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1067, %r1068}, {%r1057}, {%r1052}, {%r1061, %r1062};
	// end inline asm
	sub.s32 	%r1124, %r1049, %r1055;
	add.s32 	%r1125, %r1124, 4;
	shr.s32 	%r1075, %r1125, 3;
	add.s32 	%r1126, %r1067, 4;
	shr.s32 	%r1074, %r1126, 3;
	sub.s32 	%r1127, %r1050, %r1056;
	add.s32 	%r1128, %r1127, 4;
	shr.s32 	%r1078, %r1128, 3;
	add.s32 	%r1129, %r1068, 4;
	shr.s32 	%r1077, %r1129, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1073, %r1074, %r1075;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1076, %r1077, %r1078;
	// end inline asm
	add.s32 	%r1130, %r52, %r1104;
	mul.wide.u32 	%rd85, %r1130, 4;
	add.s64 	%rd86, %rd56, %rd85;
	st.shared.u32 	[%rd86], %r1073;
	add.s32 	%r1131, %r52, %r1106;
	mul.wide.u32 	%rd87, %r1131, 4;
	add.s64 	%rd88, %rd56, %rd87;
	st.shared.u32 	[%rd88], %r1076;
	add.s32 	%r1328, %r1328, 8;
	setp.ne.s32 	%p7, %r1328, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8454
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1150, [%rd11];
	ld.shared.u32 	%r1151, [%rd12+12800];
	ld.shared.u32 	%r1152, [%rd12+25600];
	ld.shared.u32 	%r1153, [%rd12+38400];
	ld.shared.u32 	%r1154, [%rd13];
	ld.shared.u32 	%r1155, [%rd14+12800];
	ld.shared.u32 	%r1156, [%rd14+25600];
	ld.shared.u32 	%r1157, [%rd14+38400];
	ld.shared.u32 	%r1158, [%rd15];
	ld.shared.u32 	%r1159, [%rd16+12800];
	ld.shared.u32 	%r1160, [%rd16+25600];
	ld.shared.u32 	%r1161, [%rd16+38400];
	ld.shared.u32 	%r1162, [%rd17];
	ld.shared.u32 	%r1163, [%rd18+12800];
	ld.shared.u32 	%r1164, [%rd18+25600];
	ld.shared.u32 	%r1165, [%rd18+38400];
	cvt.s32.s16 	%r1166, %r1150;
	shr.s32 	%r1167, %r1150, 16;
	cvt.s32.s16 	%r1168, %r1151;
	shr.s32 	%r1169, %r1151, 16;
	cvt.s32.s16 	%r1170, %r1152;
	shr.s32 	%r1171, %r1152, 16;
	cvt.s32.s16 	%r1172, %r1153;
	shr.s32 	%r1173, %r1153, 16;
	cvt.s32.s16 	%r1174, %r1154;
	shr.s32 	%r1175, %r1154, 16;
	cvt.s32.s16 	%r1176, %r1155;
	shr.s32 	%r1177, %r1155, 16;
	cvt.s32.s16 	%r1178, %r1156;
	shr.s32 	%r1179, %r1156, 16;
	cvt.s32.s16 	%r1180, %r1157;
	shr.s32 	%r1181, %r1157, 16;
	cvt.s32.s16 	%r1182, %r1158;
	shr.s32 	%r1183, %r1158, 16;
	cvt.s32.s16 	%r1184, %r1159;
	shr.s32 	%r1185, %r1159, 16;
	cvt.s32.s16 	%r1186, %r1160;
	shr.s32 	%r1187, %r1160, 16;
	cvt.s32.s16 	%r1188, %r1161;
	shr.s32 	%r1189, %r1161, 16;
	cvt.s32.s16 	%r1190, %r1162;
	shr.s32 	%r1191, %r1162, 16;
	cvt.s32.s16 	%r1192, %r1163;
	shr.s32 	%r1193, %r1163, 16;
	cvt.s32.s16 	%r1194, %r1164;
	shr.s32 	%r1195, %r1164, 16;
	cvt.s32.s16 	%r1196, %r1165;
	shr.s32 	%r1197, %r1165, 16;
	add.s32 	%r1198, %r1166, %r53;
	add.s32 	%r1199, %r1198, %r1168;
	add.s32 	%r1200, %r1199, %r1170;
	add.s32 	%r1201, %r1200, %r1172;
	shr.s32 	%r1202, %r1201, %r54;
	add.s32 	%r1203, %r1167, %r53;
	add.s32 	%r1204, %r1203, %r1169;
	add.s32 	%r1205, %r1204, %r1171;
	add.s32 	%r1206, %r1205, %r1173;
	shr.s32 	%r1207, %r1206, %r54;
	add.s32 	%r1208, %r1174, %r53;
	add.s32 	%r1209, %r1208, %r1176;
	add.s32 	%r1210, %r1209, %r1178;
	add.s32 	%r1211, %r1210, %r1180;
	shr.s32 	%r1212, %r1211, %r54;
	add.s32 	%r1213, %r1175, %r53;
	add.s32 	%r1214, %r1213, %r1177;
	add.s32 	%r1215, %r1214, %r1179;
	add.s32 	%r1216, %r1215, %r1181;
	shr.s32 	%r1217, %r1216, %r54;
	add.s32 	%r1218, %r1182, %r53;
	add.s32 	%r1219, %r1218, %r1184;
	add.s32 	%r1220, %r1219, %r1186;
	add.s32 	%r1221, %r1220, %r1188;
	shr.s32 	%r1222, %r1221, %r54;
	add.s32 	%r1223, %r1183, %r53;
	add.s32 	%r1224, %r1223, %r1185;
	add.s32 	%r1225, %r1224, %r1187;
	add.s32 	%r1226, %r1225, %r1189;
	shr.s32 	%r1227, %r1226, %r54;
	add.s32 	%r1228, %r1190, %r53;
	add.s32 	%r1229, %r1228, %r1192;
	add.s32 	%r1230, %r1229, %r1194;
	add.s32 	%r1231, %r1230, %r1196;
	shr.s32 	%r1232, %r1231, %r54;
	add.s32 	%r1233, %r1191, %r53;
	add.s32 	%r1234, %r1233, %r1193;
	add.s32 	%r1235, %r1234, %r1195;
	add.s32 	%r1236, %r1235, %r1197;
	shr.s32 	%r1237, %r1236, %r54;
	max.s32 	%r1238, %r1202, -7;
	min.s32 	%r1137, %r1238, 7;
	max.s32 	%r1239, %r1207, -7;
	min.s32 	%r1144, %r1239, 7;
	max.s32 	%r1240, %r1212, -7;
	min.s32 	%r1136, %r1240, 7;
	max.s32 	%r1241, %r1217, -7;
	min.s32 	%r1143, %r1241, 7;
	max.s32 	%r1242, %r1222, -7;
	min.s32 	%r1134, %r1242, 7;
	max.s32 	%r1243, %r1227, -7;
	min.s32 	%r1141, %r1243, 7;
	max.s32 	%r1244, %r1232, -7;
	min.s32 	%r1133, %r1244, 7;
	max.s32 	%r1245, %r1237, -7;
	min.s32 	%r1140, %r1245, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1132, %r1133, %r1134, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1135, %r1136, %r1137, %r1132;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1139, %r1140, %r1141, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1142, %r1143, %r1144, %r1139;
	// end inline asm
	shl.b32 	%r1149, %r1142, 4;
	// begin inline asm
	lop3.b32 %r1256, %r558, %r1135, %r1149, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1321, 0;
	selp.b32 	%r1326, %r1256, %r1326, %p8;
	selp.b32 	%r1327, %r1256, %r1327, %p8;
	setp.eq.s32 	%p9, %r1321, 32;
	selp.b32 	%r1322, %r1256, %r1322, %p9;
	selp.b32 	%r1323, %r1256, %r1323, %p9;
	setp.eq.s32 	%p10, %r1321, 64;
	selp.b32 	%r1324, %r1256, %r1324, %p10;
	selp.b32 	%r1325, %r1256, %r1325, %p10;
	add.s32 	%r73, %r1321, 32;
	setp.ne.s32 	%p11, %r1321, 96;
	mov.u32 	%r1321, %r73;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11190
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1246, %r1326, %r1322, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1250, %r1327, %r1323, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1254, %r1324, %r1256, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1258, %r1325, %r1256, %r226;
	// end inline asm
	selp.b32 	%r1294, %r1250, %r1246, %p12;
	shfl.sync.bfly.b32	%r1295, %r1294, 1, 31, -1;
	selp.b32 	%r1263, %r1246, %r1295, %p12;
	selp.b32 	%r1264, %r1295, %r1250, %p12;
	selp.b32 	%r1296, %r1258, %r1254, %p12;
	shfl.sync.bfly.b32	%r1297, %r1296, 1, 31, -1;
	selp.b32 	%r1271, %r1254, %r1297, %p12;
	selp.b32 	%r1272, %r1297, %r1258, %p12;
	// begin inline asm
	prmt.b32 %r1262, %r1263, %r1264, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1266, %r1263, %r1264, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1270, %r1271, %r1272, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1274, %r1271, %r1272, %r226;
	// end inline asm
	selp.b32 	%r1298, %r1270, %r1262, %p4;
	shfl.sync.bfly.b32	%r1299, %r1298, 2, 31, -1;
	selp.b32 	%r1279, %r1262, %r1299, %p4;
	selp.b32 	%r1280, %r1299, %r1270, %p4;
	selp.b32 	%r1300, %r1274, %r1266, %p4;
	shfl.sync.bfly.b32	%r1301, %r1300, 2, 31, -1;
	selp.b32 	%r1287, %r1266, %r1301, %p4;
	selp.b32 	%r1288, %r1301, %r1274, %p4;
	// begin inline asm
	prmt.b32 %r1278, %r1279, %r1280, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1279, %r1280, %r98;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1287, %r1288, %r94;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1287, %r1288, %r98;
	// end inline asm
	selp.b32 	%r1302, %r1286, %r1278, %p5;
	shfl.sync.bfly.b32	%r1303, %r1302, 4, 31, -1;
	selp.b32 	%r1304, %r1278, %r1303, %p5;
	selp.b32 	%r1305, %r1303, %r1286, %p5;
	selp.b32 	%r1306, %r1290, %r1282, %p5;
	shfl.sync.bfly.b32	%r1307, %r1306, 4, 31, -1;
	selp.b32 	%r1308, %r1282, %r1307, %p5;
	selp.b32 	%r1309, %r1307, %r1290, %p5;
	selp.b32 	%r1310, %r1308, %r1304, %p12;
	shfl.sync.bfly.b32	%r1311, %r1310, 1, 31, -1;
	selp.b32 	%r1312, %r1304, %r1311, %p12;
	selp.b32 	%r1313, %r1311, %r1308, %p12;
	selp.b32 	%r1314, %r1309, %r1305, %p12;
	shfl.sync.bfly.b32	%r1315, %r1314, 1, 31, -1;
	selp.b32 	%r1316, %r1305, %r1315, %p12;
	selp.b32 	%r1317, %r1315, %r1309, %p12;
	or.b32  	%r1318, %r55, %r1320;
	cvt.u64.u32 	%rd89, %r1318;
	add.s64 	%rd90, %rd4, %rd89;
	st.global.v4.u32 	[%rd90], {%r1312, %r1316, %r1313, %r1317};
	add.s32 	%r74, %r1320, 128;
	setp.ne.s32 	%p15, %r1320, 1920;
	mov.u32 	%r1320, %r74;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11593
	mov.u32 	%r1319, 0;
	st.global.u32 	[%rd6], %r1319;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r75;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r75;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L252
	mov.u32 	%r90, 2;
	st.global.u32 	[%rd6], %r90;
	mov.u64 	%rd27, exception925;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r75;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
