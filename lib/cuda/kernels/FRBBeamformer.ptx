// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<142>;
	.reg .b16 	%rs<289>;
	.reg .b32 	%r<3501>;
	.reg .f32 	%f<402>;
	.reg .b64 	%rd<283>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r291, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r291, 76895;
	@%p1 bra 	LBB0_94;
	bra.uni 	LBB0_1;
LBB0_94:                                // %L10
	ld.param.u64 	%rd14, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r292, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r293, %r292, %r1;
	add.s32 	%r294, %r293, %r4;
	mul.wide.u32 	%rd20, %r294, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r295, 1;
	st.global.u32 	[%rd5], %r295;
	and.b32  	%r5, %r1, 3;
	shr.u32 	%r6, %r1, 2;
	mul.lo.s32 	%r296, %r5, %r6;
	and.b32  	%r297, %r296, 7;
	cvt.rn.f32.u32 	%f102, %r297;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f400, %f1;
	setp.lt.f32 	%p2, %f400, 0f40000000;
	@%p2 bra 	LBB0_106;
// %bb.95:
	setp.gtu.f32 	%p3, %f400, 0f4B800000;
	@%p3 bra 	LBB0_102;
	bra.uni 	LBB0_96;
LBB0_102:
	mov.b32 	%r222, %f400;
	and.b32  	%r298, %r222, 8388607;
	or.b32  	%r3499, %r298, 1065353216;
	mov.b32 	%f399, %r3499;
	add.s32 	%r299, %r222, -1073741824;
	and.b32  	%r3500, %r299, -8388608;
	setp.eq.s32 	%p9, %r3500, 0;
	@%p9 bra 	LBB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i1286.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_104:                               // %__nv_fmaf_rn.exit4.i.i.i1286
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r300, %r3500, 192937984;
	add.s32 	%r301, %r300, %r3499;
	mov.b32 	%f114, %r301;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f399, %f114, %f120;
	sub.s32 	%r3500, %r3500, %r300;
	mov.b32 	%r3499, %f399;
	setp.ne.s32 	%p10, %r3500, 0;
	setp.ne.s32 	%p11, %r3499, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_104;
LBB0_105:                               // %__internal_fmodf_slowpath_mod.exit.i.i1288
	setp.gt.u32 	%p13, %r222, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f399, 0f34000000;
	mul.f32 	%f400, %f121, %f122;
	bra.uni 	LBB0_106;
LBB0_96:                                // %__nv_fast_fdividef.exit.i.i.i1258
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f400, %f104;
	cvt.rzi.f32.f32 	%f398, %f105;
	fma.rn.f32 	%f88, %f398, 0fC0000000, %f400;
	mov.b32 	%r221, %f88;
	setp.lt.u32 	%p4, %r221, 1073741824;
	@%p4 bra 	LBB0_101;
// %bb.97:
	setp.lt.u32 	%p5, %r221, -2147483647;
	@%p5 bra 	LBB0_99;
// %bb.98:
	add.f32 	%f110, %f398, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	add.f32 	%f111, %f110, 0fBF800000;
	selp.f32 	%f398, %f111, %f110, %p8;
	bra.uni 	LBB0_101;
LBB0_99:
	add.f32 	%f398, %f398, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i1263
	add.f32 	%f106, %f398, 0f3F800000;
	fma.rn.f32 	%f108, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f108, 0f00000000;
	add.f32 	%f109, %f106, 0f3F800000;
	selp.f32 	%f398, %f109, %f106, %p7;
LBB0_101:                               // %__internal_fmodf_fastpath_quot.exit.i.i1267
	fma.rn.f32 	%f400, %f398, 0fC0000000, %f400;
LBB0_106:                               // %__internal_fmodf_kernel.exit.i1292
	abs.f32 	%f123, %f400;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_108;
// %bb.107:
	mov.b32 	%r302, %f1;
	and.b32  	%r303, %r302, -2147483648;
	mov.b32 	%r304, %f400;
	or.b32  	%r305, %r303, %r304;
	mov.b32 	%f400, %r305;
LBB0_108:                               // %__nv_fmodf.exit1293
	add.f32 	%f125, %f400, %f400;
	mov.b32 	%r312, %f125;
	and.b32  	%r313, %r312, -2147483648;
	or.b32  	%r314, %r313, 1056964608;
	mov.b32 	%f126, %r314;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r315, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f400;
	mul.f32 	%f134, %f133, 0f34222169;
	fma.rn.f32 	%f135, %f133, 0f40490FDA, %f134;
	mul.f32 	%f136, %f135, %f135;
	fma.rn.f32 	%f137, %f136, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f138, %f137, %f136, 0f3D2AAABB;
	fma.rn.f32 	%f139, %f138, %f136, 0fBEFFFFFF;
	fma.rn.f32 	%f140, %f139, %f136, 0f3F800000;
	fma.rn.f32 	%f141, %f136, %f135, 0f00000000;
	fma.rn.f32 	%f142, %f136, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f143, %f142, %f136, 0fBE2AAAA8;
	fma.rn.f32 	%f144, %f143, %f141, %f135;
	and.b32  	%r316, %r315, 1;
	setp.eq.b32 	%p17, %r316, 1;
	selp.f32 	%f145, %f140, %f144, %p17;
	selp.f32 	%f146, %f144, %f140, %p17;
	and.b32  	%r317, %r315, 2;
	setp.eq.s32 	%p18, %r317, 0;
	neg.f32 	%f147, %f145;
	selp.f32 	%f148, %f145, %f147, %p18;
	add.s32 	%r318, %r315, 1;
	and.b32  	%r319, %r318, 2;
	mov.f32 	%f396, 0f00000000;
	cvt.rzi.f32.f32 	%f151, %f400;
	setp.eq.f32 	%p20, %f151, %f400;
	mul.f32 	%f152, %f400, 0f00000000;
	shl.b32 	%r231, %r1, 1;
	and.b32  	%r232, %r231, 6;
	or.b32  	%r233, %r232, 1;
	setp.eq.s32 	%p22, %r232, 6;
	mov.f32 	%f372, 0f41C00000;
	mul.lo.s32 	%r3400, %r232, %r6;
	mov.f32 	%f378, %f396;
	mov.f32 	%f379, %f396;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L186
	cvt.u16.u32 	%rs3, %r3400;
	and.b16  	%rs4, %rs3, 255;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 13;
	mul.lo.s16 	%rs7, %rs6, 48;
	sub.s16 	%rs8, %rs3, %rs7;
	and.b16  	%rs9, %rs8, 255;
	cvt.rn.f32.u16 	%f157, %rs9;
	div.approx.f32 	%f3, %f157, %f372;
	abs.f32 	%f376, %f3;
	setp.lt.f32 	%p23, %f376, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f376, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f376;
	and.b32  	%r321, %r8, 8388607;
	or.b32  	%r3403, %r321, 1065353216;
	mov.b32 	%f375, %r3403;
	add.s32 	%r322, %r8, -1073741824;
	and.b32  	%r3404, %r322, -8388608;
	setp.eq.s32 	%p30, %r3404, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f168, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f167,%f168;
	// end inline asm
LBB0_12:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r323, %r3404, 192937984;
	add.s32 	%r324, %r323, %r3403;
	mov.b32 	%f169, %r324;
	mul.f32 	%f170, %f167, %f169;
	sub.f32 	%f171, %f169, %f170;
	fma.rn.f32 	%f172, %f171, %f167, %f170;
	sub.f32 	%f173, %f169, %f172;
	fma.rz.f32 	%f174, %f173, %f167, %f172;
	cvt.rzi.f32.f32 	%f175, %f174;
	sub.f32 	%f375, %f169, %f175;
	sub.s32 	%r3404, %r3404, %r323;
	mov.b32 	%r3403, %f375;
	setp.ne.s32 	%p31, %r3404, 0;
	setp.ne.s32 	%p32, %r3403, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f176, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f177, %f375, 0f34000000;
	mul.f32 	%f376, %f176, %f177;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f159, 0f40000000;
	div.approx.f32 	%f160, %f376, %f159;
	cvt.rzi.f32.f32 	%f374, %f160;
	fma.rn.f32 	%f6, %f374, 0fC0000000, %f376;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f165, %f374, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	add.f32 	%f166, %f165, 0fBF800000;
	selp.f32 	%f374, %f166, %f165, %p29;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f374, %f374, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f161, %f374, 0f3F800000;
	fma.rn.f32 	%f163, %f159, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f163, 0f00000000;
	add.f32 	%f164, %f161, 0f3F800000;
	selp.f32 	%f374, %f164, %f161, %p28;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f376, %f374, 0fC0000000, %f376;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f178, %f376;
	setp.gtu.f32 	%p35, %f178, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r325, %f3;
	and.b32  	%r326, %r325, -2147483648;
	mov.b32 	%r327, %f376;
	or.b32  	%r328, %r326, %r327;
	mov.b32 	%f376, %r328;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f179, %f376, %f376;
	mov.b32 	%r329, %f179;
	and.b32  	%r330, %r329, -2147483648;
	or.b32  	%r331, %r330, 1056964608;
	mov.b32 	%f180, %r331;
	add.f32 	%f181, %f179, %f180;
	cvt.rzi.f32.f32 	%f182, %f181;
	abs.f32 	%f183, %f179;
	setp.gt.f32 	%p36, %f183, 0f4B000000;
	selp.f32 	%f184, %f179, %f182, %p36;
	cvt.rzi.f32.f32 	%f185, %f179;
	setp.lt.f32 	%p37, %f183, 0f3F000000;
	selp.f32 	%f186, %f185, %f184, %p37;
	cvt.rzi.s32.f32 	%r332, %f186;
	fma.rn.f32 	%f187, %f186, 0fBF000000, %f376;
	mul.f32 	%f188, %f187, 0f34222169;
	fma.rn.f32 	%f189, %f187, 0f40490FDA, %f188;
	mul.f32 	%f190, %f189, %f189;
	fma.rn.f32 	%f191, %f190, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f192, %f191, %f190, 0f3D2AAABB;
	fma.rn.f32 	%f193, %f192, %f190, 0fBEFFFFFF;
	fma.rn.f32 	%f194, %f193, %f190, 0f3F800000;
	fma.rn.f32 	%f195, %f190, %f189, 0f00000000;
	fma.rn.f32 	%f196, %f190, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f197, %f196, %f190, 0fBE2AAAA8;
	fma.rn.f32 	%f198, %f197, %f195, %f189;
	and.b32  	%r333, %r332, 1;
	setp.eq.b32 	%p38, %r333, 1;
	selp.f32 	%f199, %f194, %f198, %p38;
	selp.f32 	%f200, %f198, %f194, %p38;
	and.b32  	%r334, %r332, 2;
	setp.eq.s32 	%p39, %r334, 0;
	neg.f32 	%f201, %f199;
	selp.f32 	%f202, %f199, %f201, %p39;
	add.s32 	%r335, %r332, 1;
	and.b32  	%r336, %r335, 2;
	setp.eq.s32 	%p40, %r336, 0;
	mov.f32 	%f203, 0f00000000;
	sub.f32 	%f204, %f203, %f200;
	selp.f32 	%f205, %f200, %f204, %p40;
	cvt.rzi.f32.f32 	%f206, %f376;
	setp.eq.f32 	%p41, %f206, %f376;
	mul.f32 	%f207, %f376, 0f00000000;
	selp.f32 	%f379, %f207, %f202, %p41;
	abs.f32 	%f208, %f376;
	setp.gt.f32 	%p42, %f208, 0f4B800000;
	add.f32 	%f209, %f379, 0f3F800000;
	selp.f32 	%f378, %f209, %f205, %p42;
LBB0_17:                                // %L202
	setp.eq.s32 	%p19, %r319, 0;
	sub.f32 	%f149, %f396, %f146;
	selp.f32 	%f153, %f152, %f148, %p20;
	abs.f32 	%f154, %f400;
	setp.gt.u32 	%p43, %r233, 5;
	mul.lo.s32 	%r3401, %r233, %r6;
	mov.f32 	%f384, %f396;
	mov.f32 	%f385, %f396;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L206
	mul.hi.u32 	%r338, %r3401, -1431655765;
	shr.u32 	%r339, %r338, 5;
	mul.lo.s32 	%r340, %r339, 48;
	sub.s32 	%r341, %r3401, %r340;
	cvt.rn.f32.s32 	%f211, %r341;
	div.approx.f32 	%f24, %f211, %f372;
	abs.f32 	%f382, %f24;
	setp.lt.f32 	%p44, %f382, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f382, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f382;
	and.b32  	%r342, %r16, 8388607;
	or.b32  	%r3405, %r342, 1065353216;
	mov.b32 	%f381, %r3405;
	add.s32 	%r343, %r16, -1073741824;
	and.b32  	%r3406, %r343, -8388608;
	setp.eq.s32 	%p51, %r3406, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1148.preheader
	mov.f32 	%f222, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f221,%f222;
	// end inline asm
LBB0_28:                                // %__nv_fmaf_rn.exit4.i.i.i1148
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r3406, 192937984;
	add.s32 	%r345, %r344, %r3405;
	mov.b32 	%f223, %r345;
	mul.f32 	%f224, %f221, %f223;
	sub.f32 	%f225, %f223, %f224;
	fma.rn.f32 	%f226, %f225, %f221, %f224;
	sub.f32 	%f227, %f223, %f226;
	fma.rz.f32 	%f228, %f227, %f221, %f226;
	cvt.rzi.f32.f32 	%f229, %f228;
	sub.f32 	%f381, %f223, %f229;
	sub.s32 	%r3406, %r3406, %r344;
	mov.b32 	%r3405, %f381;
	setp.ne.s32 	%p52, %r3406, 0;
	setp.ne.s32 	%p53, %r3405, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1150
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f230, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f231, %f381, 0f34000000;
	mul.f32 	%f382, %f230, %f231;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1120
	mov.f32 	%f213, 0f40000000;
	div.approx.f32 	%f214, %f382, %f213;
	cvt.rzi.f32.f32 	%f380, %f214;
	fma.rn.f32 	%f27, %f380, 0fC0000000, %f382;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f219, %f380, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	add.f32 	%f220, %f219, 0fBF800000;
	selp.f32 	%f380, %f220, %f219, %p50;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f380, %f380, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1125
	add.f32 	%f215, %f380, 0f3F800000;
	fma.rn.f32 	%f217, %f213, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f217, 0f00000000;
	add.f32 	%f218, %f215, 0f3F800000;
	selp.f32 	%f380, %f218, %f215, %p49;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f382, %f380, 0fC0000000, %f382;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1154
	abs.f32 	%f232, %f382;
	setp.gtu.f32 	%p56, %f232, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r346, %f24;
	and.b32  	%r347, %r346, -2147483648;
	mov.b32 	%r348, %f382;
	or.b32  	%r349, %r347, %r348;
	mov.b32 	%f382, %r349;
LBB0_32:                                // %__nv_fmodf.exit1155
	add.f32 	%f233, %f382, %f382;
	mov.b32 	%r350, %f233;
	and.b32  	%r351, %r350, -2147483648;
	or.b32  	%r352, %r351, 1056964608;
	mov.b32 	%f234, %r352;
	add.f32 	%f235, %f233, %f234;
	cvt.rzi.f32.f32 	%f236, %f235;
	abs.f32 	%f237, %f233;
	setp.gt.f32 	%p57, %f237, 0f4B000000;
	selp.f32 	%f238, %f233, %f236, %p57;
	cvt.rzi.f32.f32 	%f239, %f233;
	setp.lt.f32 	%p58, %f237, 0f3F000000;
	selp.f32 	%f240, %f239, %f238, %p58;
	cvt.rzi.s32.f32 	%r353, %f240;
	fma.rn.f32 	%f241, %f240, 0fBF000000, %f382;
	mul.f32 	%f242, %f241, 0f34222169;
	fma.rn.f32 	%f243, %f241, 0f40490FDA, %f242;
	mul.f32 	%f244, %f243, %f243;
	fma.rn.f32 	%f245, %f244, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f246, %f245, %f244, 0f3D2AAABB;
	fma.rn.f32 	%f247, %f246, %f244, 0fBEFFFFFF;
	fma.rn.f32 	%f248, %f247, %f244, 0f3F800000;
	fma.rn.f32 	%f249, %f244, %f243, 0f00000000;
	fma.rn.f32 	%f250, %f244, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f251, %f250, %f244, 0fBE2AAAA8;
	fma.rn.f32 	%f252, %f251, %f249, %f243;
	and.b32  	%r354, %r353, 1;
	setp.eq.b32 	%p59, %r354, 1;
	selp.f32 	%f253, %f248, %f252, %p59;
	selp.f32 	%f254, %f252, %f248, %p59;
	and.b32  	%r355, %r353, 2;
	setp.eq.s32 	%p60, %r355, 0;
	neg.f32 	%f255, %f253;
	selp.f32 	%f256, %f253, %f255, %p60;
	add.s32 	%r356, %r353, 1;
	and.b32  	%r357, %r356, 2;
	setp.eq.s32 	%p61, %r357, 0;
	mov.f32 	%f257, 0f00000000;
	sub.f32 	%f258, %f257, %f254;
	selp.f32 	%f259, %f254, %f258, %p61;
	cvt.rzi.f32.f32 	%f260, %f382;
	setp.eq.f32 	%p62, %f260, %f382;
	mul.f32 	%f261, %f382, 0f00000000;
	selp.f32 	%f385, %f261, %f256, %p62;
	abs.f32 	%f262, %f382;
	setp.gt.f32 	%p63, %f262, 0f4B800000;
	add.f32 	%f263, %f385, 0f3F800000;
	selp.f32 	%f384, %f263, %f259, %p63;
LBB0_33:                                // %L222
	selp.f32 	%f150, %f146, %f149, %p19;
	setp.gt.f32 	%p21, %f154, 0f4B800000;
	add.f32 	%f155, %f153, 0f3F800000;
	setp.gt.u32 	%p65, %r1, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f373, 0f40400000;
	mov.f32 	%f390, %f396;
	mov.f32 	%f391, %f396;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L259
	cvt.u16.u32 	%rs10, %r3400;
	and.b16  	%rs11, %rs10, 255;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 10;
	mul.lo.s16 	%rs14, %rs13, 6;
	sub.s16 	%rs15, %rs10, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f265, %rs16;
	div.approx.f32 	%f45, %f265, %f373;
	abs.f32 	%f388, %f45;
	setp.lt.f32 	%p67, %f388, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f388, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f388;
	and.b32  	%r365, %r26, 8388607;
	or.b32  	%r3407, %r365, 1065353216;
	mov.b32 	%f387, %r3407;
	add.s32 	%r366, %r26, -1073741824;
	and.b32  	%r3408, %r366, -8388608;
	setp.eq.s32 	%p74, %r3408, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1194.preheader
	mov.f32 	%f276, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f275,%f276;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i1194
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r3408, 192937984;
	add.s32 	%r368, %r367, %r3407;
	mov.b32 	%f277, %r368;
	mul.f32 	%f278, %f275, %f277;
	sub.f32 	%f279, %f277, %f278;
	fma.rn.f32 	%f280, %f279, %f275, %f278;
	sub.f32 	%f281, %f277, %f280;
	fma.rz.f32 	%f282, %f281, %f275, %f280;
	cvt.rzi.f32.f32 	%f283, %f282;
	sub.f32 	%f387, %f277, %f283;
	sub.s32 	%r3408, %r3408, %r367;
	mov.b32 	%r3407, %f387;
	setp.ne.s32 	%p75, %r3408, 0;
	setp.ne.s32 	%p76, %r3407, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1196
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f284, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f285, %f387, 0f34000000;
	mul.f32 	%f388, %f284, %f285;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1166
	mov.f32 	%f267, 0f40000000;
	div.approx.f32 	%f268, %f388, %f267;
	cvt.rzi.f32.f32 	%f386, %f268;
	fma.rn.f32 	%f48, %f386, 0fC0000000, %f388;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f273, %f386, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	add.f32 	%f274, %f273, 0fBF800000;
	selp.f32 	%f386, %f274, %f273, %p73;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f386, %f386, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1171
	add.f32 	%f269, %f386, 0f3F800000;
	fma.rn.f32 	%f271, %f267, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f271, 0f00000000;
	add.f32 	%f272, %f269, 0f3F800000;
	selp.f32 	%f386, %f272, %f269, %p72;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1175
	fma.rn.f32 	%f388, %f386, 0fC0000000, %f388;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1200
	abs.f32 	%f286, %f388;
	setp.gtu.f32 	%p79, %f286, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r369, %f45;
	and.b32  	%r370, %r369, -2147483648;
	mov.b32 	%r371, %f388;
	or.b32  	%r372, %r370, %r371;
	mov.b32 	%f388, %r372;
LBB0_48:                                // %__nv_fmodf.exit1201
	add.f32 	%f287, %f388, %f388;
	mov.b32 	%r373, %f287;
	and.b32  	%r374, %r373, -2147483648;
	or.b32  	%r375, %r374, 1056964608;
	mov.b32 	%f288, %r375;
	add.f32 	%f289, %f287, %f288;
	cvt.rzi.f32.f32 	%f290, %f289;
	abs.f32 	%f291, %f287;
	setp.gt.f32 	%p80, %f291, 0f4B000000;
	selp.f32 	%f292, %f287, %f290, %p80;
	cvt.rzi.f32.f32 	%f293, %f287;
	setp.lt.f32 	%p81, %f291, 0f3F000000;
	selp.f32 	%f294, %f293, %f292, %p81;
	cvt.rzi.s32.f32 	%r376, %f294;
	fma.rn.f32 	%f295, %f294, 0fBF000000, %f388;
	mul.f32 	%f296, %f295, 0f34222169;
	fma.rn.f32 	%f297, %f295, 0f40490FDA, %f296;
	mul.f32 	%f298, %f297, %f297;
	fma.rn.f32 	%f299, %f298, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f300, %f299, %f298, 0f3D2AAABB;
	fma.rn.f32 	%f301, %f300, %f298, 0fBEFFFFFF;
	fma.rn.f32 	%f302, %f301, %f298, 0f3F800000;
	fma.rn.f32 	%f303, %f298, %f297, 0f00000000;
	fma.rn.f32 	%f304, %f298, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f305, %f304, %f298, 0fBE2AAAA8;
	fma.rn.f32 	%f306, %f305, %f303, %f297;
	and.b32  	%r377, %r376, 1;
	setp.eq.b32 	%p82, %r377, 1;
	selp.f32 	%f307, %f302, %f306, %p82;
	selp.f32 	%f308, %f306, %f302, %p82;
	and.b32  	%r378, %r376, 2;
	setp.eq.s32 	%p83, %r378, 0;
	neg.f32 	%f309, %f307;
	selp.f32 	%f310, %f307, %f309, %p83;
	add.s32 	%r379, %r376, 1;
	and.b32  	%r380, %r379, 2;
	setp.eq.s32 	%p84, %r380, 0;
	mov.f32 	%f311, 0f00000000;
	sub.f32 	%f312, %f311, %f308;
	selp.f32 	%f313, %f308, %f312, %p84;
	cvt.rzi.f32.f32 	%f314, %f388;
	setp.eq.f32 	%p85, %f314, %f388;
	mul.f32 	%f315, %f388, 0f00000000;
	selp.f32 	%f391, %f315, %f310, %p85;
	abs.f32 	%f316, %f388;
	setp.gt.f32 	%p86, %f316, 0f4B800000;
	add.f32 	%f317, %f391, 0f3F800000;
	selp.f32 	%f390, %f317, %f313, %p86;
LBB0_49:                                // %L275
	selp.f32 	%f156, %f155, %f150, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f397, %f396;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L283
	mul.hi.u32 	%r382, %r3401, -1431655765;
	shr.u32 	%r383, %r382, 2;
	mul.lo.s32 	%r384, %r383, 6;
	sub.s32 	%r385, %r3401, %r384;
	cvt.rn.f32.s32 	%f319, %r385;
	div.approx.f32 	%f66, %f319, %f373;
	abs.f32 	%f394, %f66;
	setp.lt.f32 	%p90, %f394, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f394, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f394;
	and.b32  	%r386, %r34, 8388607;
	or.b32  	%r3409, %r386, 1065353216;
	mov.b32 	%f393, %r3409;
	add.s32 	%r387, %r34, -1073741824;
	and.b32  	%r3410, %r387, -8388608;
	setp.eq.s32 	%p97, %r3410, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1240.preheader
	mov.f32 	%f330, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f329,%f330;
	// end inline asm
LBB0_60:                                // %__nv_fmaf_rn.exit4.i.i.i1240
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r388, %r3410, 192937984;
	add.s32 	%r389, %r388, %r3409;
	mov.b32 	%f331, %r389;
	mul.f32 	%f332, %f329, %f331;
	sub.f32 	%f333, %f331, %f332;
	fma.rn.f32 	%f334, %f333, %f329, %f332;
	sub.f32 	%f335, %f331, %f334;
	fma.rz.f32 	%f336, %f335, %f329, %f334;
	cvt.rzi.f32.f32 	%f337, %f336;
	sub.f32 	%f393, %f331, %f337;
	sub.s32 	%r3410, %r3410, %r388;
	mov.b32 	%r3409, %f393;
	setp.ne.s32 	%p98, %r3410, 0;
	setp.ne.s32 	%p99, %r3409, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1242
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f338, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f339, %f393, 0f34000000;
	mul.f32 	%f394, %f338, %f339;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f321, 0f40000000;
	div.approx.f32 	%f322, %f394, %f321;
	cvt.rzi.f32.f32 	%f392, %f322;
	fma.rn.f32 	%f69, %f392, 0fC0000000, %f394;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f327, %f392, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f328, %f327, 0fBF800000;
	selp.f32 	%f392, %f328, %f327, %p96;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f392, %f392, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1217
	add.f32 	%f323, %f392, 0f3F800000;
	fma.rn.f32 	%f325, %f321, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f325, 0f00000000;
	add.f32 	%f326, %f323, 0f3F800000;
	selp.f32 	%f392, %f326, %f323, %p95;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1221
	fma.rn.f32 	%f394, %f392, 0fC0000000, %f394;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1246
	abs.f32 	%f340, %f394;
	setp.gtu.f32 	%p102, %f340, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r390, %f66;
	and.b32  	%r391, %r390, -2147483648;
	mov.b32 	%r392, %f394;
	or.b32  	%r393, %r391, %r392;
	mov.b32 	%f394, %r393;
LBB0_64:                                // %__nv_fmodf.exit1247
	add.f32 	%f341, %f394, %f394;
	mov.b32 	%r394, %f341;
	and.b32  	%r395, %r394, -2147483648;
	or.b32  	%r396, %r395, 1056964608;
	mov.b32 	%f342, %r396;
	add.f32 	%f343, %f341, %f342;
	cvt.rzi.f32.f32 	%f344, %f343;
	abs.f32 	%f345, %f341;
	setp.gt.f32 	%p103, %f345, 0f4B000000;
	selp.f32 	%f346, %f341, %f344, %p103;
	cvt.rzi.f32.f32 	%f347, %f341;
	setp.lt.f32 	%p104, %f345, 0f3F000000;
	selp.f32 	%f348, %f347, %f346, %p104;
	cvt.rzi.s32.f32 	%r397, %f348;
	fma.rn.f32 	%f349, %f348, 0fBF000000, %f394;
	mul.f32 	%f350, %f349, 0f34222169;
	fma.rn.f32 	%f351, %f349, 0f40490FDA, %f350;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f353, %f352, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f354, %f353, %f352, 0f3D2AAABB;
	fma.rn.f32 	%f355, %f354, %f352, 0fBEFFFFFF;
	fma.rn.f32 	%f356, %f355, %f352, 0f3F800000;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	fma.rn.f32 	%f358, %f352, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f359, %f358, %f352, 0fBE2AAAA8;
	fma.rn.f32 	%f360, %f359, %f357, %f351;
	and.b32  	%r398, %r397, 1;
	setp.eq.b32 	%p105, %r398, 1;
	selp.f32 	%f361, %f356, %f360, %p105;
	selp.f32 	%f362, %f360, %f356, %p105;
	and.b32  	%r399, %r397, 2;
	setp.eq.s32 	%p106, %r399, 0;
	neg.f32 	%f363, %f361;
	selp.f32 	%f364, %f361, %f363, %p106;
	add.s32 	%r400, %r397, 1;
	and.b32  	%r401, %r400, 2;
	setp.eq.s32 	%p107, %r401, 0;
	mov.f32 	%f365, 0f00000000;
	sub.f32 	%f366, %f365, %f362;
	selp.f32 	%f367, %f362, %f366, %p107;
	cvt.rzi.f32.f32 	%f368, %f394;
	setp.eq.f32 	%p108, %f368, %f394;
	mul.f32 	%f369, %f394, 0f00000000;
	selp.f32 	%f397, %f369, %f364, %p108;
	abs.f32 	%f370, %f394;
	setp.gt.f32 	%p109, %f370, 0f4B800000;
	add.f32 	%f371, %f397, 0f3F800000;
	selp.f32 	%f396, %f371, %f367, %p109;
LBB0_65:                                // %L299
	mov.b32 	%r308, %f156;
	mov.b32 	%r311, %f153;
	mov.b32 	%r403, %f390;
	mov.b32 	%r404, %f396;
	mov.b32 	%r409, %f391;
	mov.b32 	%r410, %f397;
	mov.u32 	%r3411, 999999999;
	cvt.u16.u32 	%rs287, %r1;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L335
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs18, %rs287, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 12;
	mul.lo.s16 	%rs21, %rs20, 24;
	sub.s16 	%rs22, %rs287, %rs21;
	cvt.u32.u16 	%r415, %rs22;
	and.b32  	%r416, %r415, 255;
	mad.lo.s32 	%r417, %r416, 24, %r3;
	cvt.u16.u32 	%rs23, %r417;
	mul.hi.u16 	%rs24, %rs23, -7281;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 576;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r418, %rs27;
	mul.wide.u32 	%rd21, %r418, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r419, [%rd22];
	cvt.s32.s16 	%r420, %r419;
	shr.s32 	%r421, %r419, 16;
	mul.lo.s32 	%r422, %r421, 801;
	mad.lo.s32 	%r3411, %r420, 33, %r422;
LBB0_67:                                // %L412
	xor.b32  	%r307, %r311, -2147483648;
	mov.b32 	%r359, %f378;
	mov.b32 	%r360, %f384;
	mov.b32 	%r362, %f379;
	mov.b32 	%r363, %f385;
	xor.b32  	%r406, %r409, -2147483648;
	xor.b32  	%r407, %r410, -2147483648;
	and.b32  	%r47, %r1, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs1, %r3;
	cvt.u16.u32 	%rs288, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L412.L717_crit_edge
	and.b16  	%rs40, %rs1, 255;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs1, %rs43;
	cvt.u32.u16 	%r436, %rs44;
	and.b32  	%r3415, %r436, 255;
	mul.lo.s16 	%rs46, %rs288, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs288, %rs48;
	cvt.u32.u16 	%r437, %rs49;
	and.b32  	%r3414, %r437, 255;
	cvt.u32.u16 	%r3413, %rs42;
	mul.wide.u16 	%r3412, %rs42, 6;
	mov.u32 	%r3416, 0;
	mov.u32 	%r3417, %r3416;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L438
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	and.b16  	%rs29, %rs1, 255;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 10;
	cvt.u32.u16 	%r3413, %rs31;
	mul.wide.u16 	%r3412, %rs31, 6;
	mul.lo.s16 	%rs33, %rs288, 171;
	shr.u16 	%rs34, %rs33, 10;
	mul.lo.s16 	%rs35, %rs34, 6;
	sub.s16 	%rs36, %rs288, %rs35;
	cvt.u32.u16 	%r423, %rs36;
	and.b32  	%r3414, %r423, 255;
	and.b16  	%rs37, %rs36, 255;
	mul.wide.u16 	%r424, %rs37, 24;
	mul.lo.s16 	%rs38, %rs31, -6;
	add.s16 	%rs39, %rs38, %rs1;
	cvt.u32.u16 	%r425, %rs39;
	and.b32  	%r3415, %r425, 255;
	mul.lo.s32 	%r426, %r2, 576;
	mad.lo.s32 	%r427, %r5, 144, %r426;
	or.b32  	%r428, %r427, %r3415;
	add.s32 	%r429, %r428, %r3412;
	add.s32 	%r430, %r429, %r424;
	mul.wide.u32 	%rd23, %r430, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3416, [%rd24];
	add.s32 	%r431, %r427, 147456;
	or.b32  	%r432, %r431, %r3415;
	add.s32 	%r433, %r432, %r3412;
	add.s32 	%r434, %r433, %r424;
	mul.wide.u32 	%rd25, %r434, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3417, [%rd26];
LBB0_70:                                // %L717
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r306, %r308, %r307;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r309, %r311, %r308;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r360, %r359;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r361, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r407, %r406;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r408, %r410, %r409;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r404, %r403;
	// end inline asm
	mov.u32 	%r3402, 0;
	shl.b32 	%r439, %r2, 7;
	shl.b32 	%r440, %r1, 2;
	and.b32  	%r441, %r440, 60;
	shl.b32 	%r442, %r1, 11;
	and.b32  	%r443, %r442, 32768;
	or.b32  	%r444, %r443, %r439;
	or.b32  	%r64, %r444, %r441;
	or.b32  	%r445, %r440, %r439;
	or.b32  	%r446, %r445, %r443;
	or.b32  	%r65, %r446, 64;
	add.s32 	%r66, %r3, 24;
	and.b16  	%rs2, %rs287, 16;
	and.b32  	%r447, %r231, 30;
	shr.u32 	%r448, %r1, 4;
	or.b32  	%r449, %r447, %r448;
	mul.lo.s32 	%r67, %r449, 257;
	or.b32  	%r450, %r448, %r231;
	or.b32  	%r451, %r450, 32;
	mul.lo.s32 	%r68, %r451, 257;
	and.b16  	%rs51, %rs287, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs287, %rs54;
	cvt.u32.u16 	%r452, %rs55;
	and.b32  	%r69, %r452, 255;
	shr.u32 	%r453, %r3, 3;
	and.b32  	%r454, %r4, 224;
	mad.lo.s32 	%r70, %r453, 257, %r454;
	shr.u32 	%r455, %r66, 3;
	mad.lo.s32 	%r71, %r455, 257, %r454;
	add.s32 	%r456, %r3, 48;
	shr.u32 	%r457, %r456, 3;
	mad.lo.s32 	%r72, %r457, 257, %r454;
	add.s32 	%r458, %r3, 72;
	shr.u32 	%r459, %r458, 3;
	mad.lo.s32 	%r73, %r459, 257, %r454;
	or.b32  	%r460, %r453, 12;
	mad.lo.s32 	%r74, %r460, 257, %r454;
	add.s32 	%r461, %r3, 120;
	shr.u32 	%r462, %r461, 3;
	mad.lo.s32 	%r75, %r462, 257, %r454;
	add.s32 	%r463, %r3, 144;
	shr.u32 	%r464, %r463, 3;
	mad.lo.s32 	%r76, %r464, 257, %r454;
	add.s32 	%r465, %r3, 168;
	shr.u32 	%r466, %r465, 3;
	mad.lo.s32 	%r77, %r466, 257, %r454;
	or.b32  	%r467, %r453, 24;
	mad.lo.s32 	%r78, %r467, 257, %r454;
	add.s32 	%r468, %r3, 216;
	shr.u32 	%r469, %r468, 3;
	mad.lo.s32 	%r79, %r469, 257, %r454;
	add.s32 	%r470, %r3, 240;
	shr.u32 	%r471, %r470, 3;
	mad.lo.s32 	%r80, %r471, 257, %r454;
	add.s32 	%r472, %r3, 264;
	shr.u32 	%r473, %r472, 3;
	mad.lo.s32 	%r81, %r473, 257, %r454;
	or.b32  	%r474, %r453, 36;
	mad.lo.s32 	%r82, %r474, 257, %r454;
	add.s32 	%r475, %r3, 312;
	shr.u32 	%r476, %r475, 3;
	mad.lo.s32 	%r83, %r476, 257, %r454;
	add.s32 	%r477, %r3, 336;
	shr.u32 	%r478, %r477, 3;
	mad.lo.s32 	%r84, %r478, 257, %r454;
	add.s32 	%r479, %r3, 360;
	shr.u32 	%r480, %r479, 3;
	mad.lo.s32 	%r85, %r480, 257, %r454;
	or.b32  	%r481, %r453, 48;
	mad.lo.s32 	%r86, %r481, 257, %r454;
	add.s32 	%r482, %r3, 408;
	shr.u32 	%r483, %r482, 3;
	mad.lo.s32 	%r87, %r483, 257, %r454;
	add.s32 	%r484, %r3, 432;
	shr.u32 	%r485, %r484, 3;
	mad.lo.s32 	%r88, %r485, 257, %r454;
	add.s32 	%r486, %r3, 456;
	shr.u32 	%r487, %r486, 3;
	mad.lo.s32 	%r89, %r487, 257, %r454;
	or.b32  	%r488, %r453, 60;
	mad.lo.s32 	%r90, %r488, 257, %r454;
	add.s32 	%r489, %r3, 504;
	bfe.u32 	%r490, %r489, 3, 6;
	mad.lo.s32 	%r91, %r490, 257, %r454;
	mul.lo.s32 	%r491, %r5, 4806;
	mad.lo.s32 	%r492, %r3415, 33, %r491;
	mad.lo.s32 	%r493, %r3413, 198, %r492;
	mad.lo.s32 	%r494, %r3414, 801, %r493;
	and.b32  	%r495, %r1, 1;
	mul.lo.s32 	%r496, %r495, 4112;
	mul.lo.s32 	%r497, %r448, 257;
	and.b32  	%r498, %r6, 1;
	mul.lo.s32 	%r499, %r498, 1028;
	bfe.u32 	%r500, %r1, 1, 1;
	mul.lo.s32 	%r501, %r500, 2056;
	bfe.u32 	%r502, %r1, 3, 1;
	mul.lo.s32 	%r503, %r502, 514;
	add.s32 	%r504, %r497, %r496;
	add.s32 	%r505, %r504, %r3415;
	add.s32 	%r506, %r505, %r499;
	add.s32 	%r507, %r506, %r501;
	add.s32 	%r508, %r507, %r503;
	add.s32 	%r92, %r508, %r3412;
	mul.wide.u32 	%rd27, %r92, 4;
	mov.u64 	%rd28, shmem;
	add.s64 	%rd6, %rd28, %rd27;
	add.s32 	%r93, %r92, 8256;
	cvt.u64.u32 	%rd29, %r3412;
	cvt.u64.u32 	%rd30, %r503;
	cvt.u64.u32 	%rd31, %r501;
	cvt.u64.u32 	%rd32, %r499;
	cvt.u64.u32 	%rd33, %r3415;
	cvt.u64.u32 	%rd34, %r497;
	cvt.u64.u32 	%rd35, %r496;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd33;
	add.s64 	%rd38, %rd37, %rd32;
	add.s64 	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	add.s64 	%rd41, %rd40, %rd29;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd7, %rd28, %rd42;
	add.s32 	%r94, %r92, 32;
	add.s32 	%r95, %r92, 8288;
	and.b32  	%r509, %r3, 1;
	mul.lo.s32 	%r510, %r509, 4112;
	shr.u32 	%r511, %r3, 4;
	bfe.u32 	%r512, %r3, 2, 1;
	bfe.u32 	%r513, %r3, 1, 1;
	bfe.u32 	%r514, %r3, 3, 1;
	mad.lo.s32 	%r515, %r511, 257, %r510;
	mad.lo.s32 	%r516, %r5, 6, %r515;
	mad.lo.s32 	%r517, %r512, 1028, %r516;
	mad.lo.s32 	%r518, %r513, 2056, %r517;
	mad.lo.s32 	%r519, %r514, 514, %r518;
	add.s32 	%r96, %r519, %r3414;
	mul.wide.u32 	%rd43, %r96, 4;
	add.s64 	%rd8, %rd28, %rd43;
	add.s32 	%r97, %r96, 8256;
	mul.wide.u32 	%rd44, %r97, 4;
	add.s64 	%rd9, %rd28, %rd44;
	add.s32 	%r98, %r96, 32;
	mul.wide.u32 	%rd45, %r98, 4;
	add.s64 	%rd10, %rd28, %rd45;
	add.s32 	%r99, %r96, 8288;
	mul.wide.u32 	%rd46, %r99, 4;
	add.s64 	%rd11, %rd28, %rd46;
	shl.b16 	%rs57, %rs1, 1;
	and.b16  	%rs58, %rs57, 254;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r520, %rs62;
	and.b32  	%r521, %r520, 254;
	mul.lo.s32 	%r522, %r2, 58752;
	or.b32  	%r523, %r522, %r69;
	mad.lo.s32 	%r100, %r521, 24, %r523;
	or.b16  	%rs63, %rs57, 1;
	and.b16  	%rs64, %rs63, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 13;
	mul.lo.s16 	%rs67, %rs66, 48;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r524, %rs68;
	and.b32  	%r525, %r524, 255;
	mad.lo.s32 	%r101, %r525, 24, %r523;
	mul.wide.u32 	%rd47, %r494, 4;
	add.s64 	%rd12, %rd28, %rd47;
	setp.gt.u32 	%p112, %r3, 7;
	setp.eq.s16 	%p113, %rs2, 0;
	setp.lt.u32 	%p115, %r1, 24;
	mov.u32 	%r3418, %r3402;
	mov.u32 	%r3449, %r3402;
	mov.u32 	%r3450, %r3402;
	mov.u32 	%r3451, %r3402;
	mov.u32 	%r3452, %r3402;
	bra.uni 	LBB0_71;
LBB0_92:                                // %L31318
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r220, %r3418, 48;
	setp.ne.s32 	%p141, %r3418, 2016;
	mov.u32 	%r3418, %r220;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L720
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r719, %r3418, -1431655765;
	shr.u32 	%r720, %r719, 5;
	mul.lo.s32 	%r107, %r720, 48;
	add.s32 	%r721, %r107, %r3;
	cvt.u16.u32 	%rs69, %r721;
	mul.hi.s16 	%rs70, %rs69, 16257;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 9;
	add.s16 	%rs73, %rs72, %rs71;
	mul.lo.s16 	%rs74, %rs73, 2064;
	sub.s16 	%rs75, %rs69, %rs74;
	cvt.u32.u16 	%r722, %rs75;
	shl.b32 	%r723, %r722, 16;
	or.b32  	%r724, %r64, %r723;
	mul.wide.s32 	%rd48, %r724, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r725, %r726, %r727, %r728}, [%rd49];
	or.b32  	%r729, %r65, %r723;
	mul.wide.s32 	%rd50, %r729, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r730, %r731, %r732, %r733}, [%rd51];
	add.s32 	%r734, %r66, %r107;
	cvt.u16.u32 	%rs76, %r734;
	mul.hi.s16 	%rs77, %rs76, 16257;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 9;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 2064;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.u32.u16 	%r735, %rs82;
	shl.b32 	%r736, %r735, 16;
	or.b32  	%r737, %r64, %r736;
	mul.wide.s32 	%rd52, %r737, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r738, %r739, %r740, %r741}, [%rd53];
	or.b32  	%r742, %r65, %r736;
	mul.wide.s32 	%rd54, %r742, 4;
	add.s64 	%rd55, %rd3, %rd54;
	ld.global.v4.u32 	{%r743, %r744, %r745, %r746}, [%rd55];
	selp.b32 	%r747, %r727, %r725, %p113;
	shfl.sync.bfly.b32	%r748, %r747, 16, 31, -1;
	selp.b32 	%r528, %r725, %r748, %p113;
	selp.b32 	%r533, %r748, %r727, %p113;
	selp.b32 	%r749, %r728, %r726, %p113;
	shfl.sync.bfly.b32	%r750, %r749, 16, 31, -1;
	selp.b32 	%r536, %r726, %r750, %p113;
	selp.b32 	%r541, %r750, %r728, %p113;
	selp.b32 	%r751, %r732, %r730, %p113;
	shfl.sync.bfly.b32	%r752, %r751, 16, 31, -1;
	selp.b32 	%r544, %r730, %r752, %p113;
	selp.b32 	%r549, %r752, %r732, %p113;
	selp.b32 	%r753, %r733, %r731, %p113;
	shfl.sync.bfly.b32	%r754, %r753, 16, 31, -1;
	selp.b32 	%r552, %r731, %r754, %p113;
	selp.b32 	%r557, %r754, %r733, %p113;
	selp.b32 	%r755, %r740, %r738, %p113;
	shfl.sync.bfly.b32	%r756, %r755, 16, 31, -1;
	selp.b32 	%r560, %r738, %r756, %p113;
	selp.b32 	%r565, %r756, %r740, %p113;
	selp.b32 	%r757, %r741, %r739, %p113;
	shfl.sync.bfly.b32	%r758, %r757, 16, 31, -1;
	selp.b32 	%r568, %r739, %r758, %p113;
	selp.b32 	%r573, %r758, %r741, %p113;
	selp.b32 	%r759, %r745, %r743, %p113;
	shfl.sync.bfly.b32	%r760, %r759, 16, 31, -1;
	selp.b32 	%r576, %r743, %r760, %p113;
	selp.b32 	%r581, %r760, %r745, %p113;
	selp.b32 	%r761, %r746, %r744, %p113;
	shfl.sync.bfly.b32	%r762, %r761, 16, 31, -1;
	selp.b32 	%r584, %r744, %r762, %p113;
	selp.b32 	%r589, %r762, %r746, %p113;
	shl.b32 	%r529, %r533, 4;
	mov.u32 	%r527, 252645135;
	// begin inline asm
	lop3.b32 %r591, %r527, %r528, %r529, 202;
	// end inline asm
	shr.u32 	%r532, %r528, 4;
	// begin inline asm
	lop3.b32 %r607, %r527, %r532, %r533, 202;
	// end inline asm
	shl.b32 	%r537, %r541, 4;
	// begin inline asm
	lop3.b32 %r599, %r527, %r536, %r537, 202;
	// end inline asm
	shr.u32 	%r540, %r536, 4;
	// begin inline asm
	lop3.b32 %r615, %r527, %r540, %r541, 202;
	// end inline asm
	shl.b32 	%r545, %r549, 4;
	// begin inline asm
	lop3.b32 %r623, %r527, %r544, %r545, 202;
	// end inline asm
	shr.u32 	%r548, %r544, 4;
	// begin inline asm
	lop3.b32 %r639, %r527, %r548, %r549, 202;
	// end inline asm
	shl.b32 	%r553, %r557, 4;
	// begin inline asm
	lop3.b32 %r631, %r527, %r552, %r553, 202;
	// end inline asm
	shr.u32 	%r556, %r552, 4;
	// begin inline asm
	lop3.b32 %r647, %r527, %r556, %r557, 202;
	// end inline asm
	shl.b32 	%r561, %r565, 4;
	// begin inline asm
	lop3.b32 %r592, %r527, %r560, %r561, 202;
	// end inline asm
	shr.u32 	%r564, %r560, 4;
	// begin inline asm
	lop3.b32 %r608, %r527, %r564, %r565, 202;
	// end inline asm
	shl.b32 	%r569, %r573, 4;
	// begin inline asm
	lop3.b32 %r600, %r527, %r568, %r569, 202;
	// end inline asm
	shr.u32 	%r572, %r568, 4;
	// begin inline asm
	lop3.b32 %r616, %r527, %r572, %r573, 202;
	// end inline asm
	shl.b32 	%r577, %r581, 4;
	// begin inline asm
	lop3.b32 %r624, %r527, %r576, %r577, 202;
	// end inline asm
	shr.u32 	%r580, %r576, 4;
	// begin inline asm
	lop3.b32 %r640, %r527, %r580, %r581, 202;
	// end inline asm
	shl.b32 	%r585, %r589, 4;
	// begin inline asm
	lop3.b32 %r632, %r527, %r584, %r585, 202;
	// end inline asm
	shr.u32 	%r588, %r584, 4;
	// begin inline asm
	lop3.b32 %r648, %r527, %r588, %r589, 202;
	// end inline asm
	mov.u32 	%r593, 25152;
	// begin inline asm
	prmt.b32 %r655, %r591, %r592, %r593;
	// end inline asm
	mov.u32 	%r597, 29521;
	// begin inline asm
	prmt.b32 %r687, %r591, %r592, %r597;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r599, %r600, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r599, %r600, %r597;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r607, %r608, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r607, %r608, %r597;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r615, %r616, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r615, %r616, %r597;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r623, %r624, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r623, %r624, %r597;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r631, %r632, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r631, %r632, %r597;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r639, %r640, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r639, %r640, %r597;
	// end inline asm
	// begin inline asm
	prmt.b32 %r680, %r647, %r648, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r647, %r648, %r597;
	// end inline asm
	mov.u32 	%r713, 21520;
	// begin inline asm
	prmt.b32 %r654, %r655, %r656, %r713;
	// end inline asm
	mov.u32 	%r717, 30258;
	// begin inline asm
	prmt.b32 %r658, %r655, %r656, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r663, %r664, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r666, %r663, %r664, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r671, %r672, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r674, %r671, %r672, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r679, %r680, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r682, %r679, %r680, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r687, %r688, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r690, %r687, %r688, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r695, %r696, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r698, %r695, %r696, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r703, %r704, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r703, %r704, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r711, %r712, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r714, %r711, %r712, %r717;
	// end inline asm
	mul.hi.s16 	%rs83, %rs69, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs69, %rs87;
	cvt.s32.s16 	%r763, %rs88;
	add.s32 	%r764, %r67, %r763;
	mul.wide.s32 	%rd56, %r764, 4;
	add.s64 	%rd58, %rd28, %rd56;
	st.shared.u32 	[%rd58], %r654;
	st.shared.u32 	[%rd58+512], %r662;
	st.shared.u32 	[%rd58+256], %r658;
	st.shared.u32 	[%rd58+768], %r666;
	add.s32 	%r765, %r68, %r763;
	mul.wide.s32 	%rd59, %r765, 4;
	add.s64 	%rd60, %rd28, %rd59;
	st.shared.u32 	[%rd60], %r670;
	st.shared.u32 	[%rd60+512], %r678;
	st.shared.u32 	[%rd60+256], %r674;
	st.shared.u32 	[%rd60+768], %r682;
	st.shared.u32 	[%rd58+128], %r686;
	st.shared.u32 	[%rd58+640], %r694;
	st.shared.u32 	[%rd58+384], %r690;
	st.shared.u32 	[%rd58+896], %r698;
	st.shared.u32 	[%rd60+128], %r702;
	st.shared.u32 	[%rd60+640], %r710;
	st.shared.u32 	[%rd60+384], %r706;
	st.shared.u32 	[%rd60+896], %r714;
	bar.sync 	0;
	add.s32 	%r766, %r107, %r69;
	cvt.u16.u32 	%rs89, %r766;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r767, %rs95;
	add.s32 	%r768, %r70, %r767;
	mul.wide.s32 	%rd61, %r768, 4;
	add.s64 	%rd62, %rd28, %rd61;
	ld.shared.u32 	%r769, [%rd62];
	add.s32 	%r770, %r71, %r767;
	mul.wide.u32 	%rd63, %r770, 4;
	add.s64 	%rd64, %rd28, %rd63;
	ld.shared.u32 	%r771, [%rd64];
	add.s32 	%r772, %r72, %r767;
	mul.wide.u32 	%rd65, %r772, 4;
	add.s64 	%rd66, %rd28, %rd65;
	ld.shared.u32 	%r773, [%rd66];
	add.s32 	%r774, %r73, %r767;
	mul.wide.u32 	%rd67, %r774, 4;
	add.s64 	%rd68, %rd28, %rd67;
	ld.shared.u32 	%r775, [%rd68];
	add.s32 	%r776, %r74, %r767;
	mul.wide.s32 	%rd69, %r776, 4;
	add.s64 	%rd70, %rd28, %rd69;
	ld.shared.u32 	%r777, [%rd70];
	add.s32 	%r778, %r75, %r767;
	mul.wide.u32 	%rd71, %r778, 4;
	add.s64 	%rd72, %rd28, %rd71;
	ld.shared.u32 	%r779, [%rd72];
	add.s32 	%r780, %r76, %r767;
	mul.wide.u32 	%rd73, %r780, 4;
	add.s64 	%rd74, %rd28, %rd73;
	ld.shared.u32 	%r781, [%rd74];
	add.s32 	%r782, %r77, %r767;
	mul.wide.u32 	%rd75, %r782, 4;
	add.s64 	%rd76, %rd28, %rd75;
	ld.shared.u32 	%r783, [%rd76];
	add.s32 	%r784, %r78, %r767;
	mul.wide.s32 	%rd77, %r784, 4;
	add.s64 	%rd78, %rd28, %rd77;
	ld.shared.u32 	%r785, [%rd78];
	add.s32 	%r786, %r79, %r767;
	mul.wide.u32 	%rd79, %r786, 4;
	add.s64 	%rd80, %rd28, %rd79;
	ld.shared.u32 	%r787, [%rd80];
	add.s32 	%r788, %r80, %r767;
	mul.wide.u32 	%rd81, %r788, 4;
	add.s64 	%rd82, %rd28, %rd81;
	ld.shared.u32 	%r789, [%rd82];
	add.s32 	%r790, %r81, %r767;
	mul.wide.u32 	%rd83, %r790, 4;
	add.s64 	%rd84, %rd28, %rd83;
	ld.shared.u32 	%r791, [%rd84];
	add.s32 	%r792, %r82, %r767;
	mul.wide.s32 	%rd85, %r792, 4;
	add.s64 	%rd86, %rd28, %rd85;
	ld.shared.u32 	%r793, [%rd86];
	add.s32 	%r794, %r83, %r767;
	mul.wide.u32 	%rd87, %r794, 4;
	add.s64 	%rd88, %rd28, %rd87;
	ld.shared.u32 	%r795, [%rd88];
	add.s32 	%r796, %r84, %r767;
	mul.wide.u32 	%rd89, %r796, 4;
	add.s64 	%rd90, %rd28, %rd89;
	ld.shared.u32 	%r797, [%rd90];
	add.s32 	%r798, %r85, %r767;
	mul.wide.u32 	%rd91, %r798, 4;
	add.s64 	%rd92, %rd28, %rd91;
	ld.shared.u32 	%r799, [%rd92];
	add.s32 	%r800, %r86, %r767;
	mul.wide.s32 	%rd93, %r800, 4;
	add.s64 	%rd94, %rd28, %rd93;
	ld.shared.u32 	%r801, [%rd94];
	add.s32 	%r802, %r87, %r767;
	mul.wide.u32 	%rd95, %r802, 4;
	add.s64 	%rd96, %rd28, %rd95;
	ld.shared.u32 	%r803, [%rd96];
	add.s32 	%r804, %r88, %r767;
	mul.wide.u32 	%rd97, %r804, 4;
	add.s64 	%rd98, %rd28, %rd97;
	ld.shared.u32 	%r805, [%rd98];
	add.s32 	%r806, %r89, %r767;
	mul.wide.u32 	%rd99, %r806, 4;
	add.s64 	%rd100, %rd28, %rd99;
	ld.shared.u32 	%r807, [%rd100];
	add.s32 	%r808, %r90, %r767;
	mul.wide.s32 	%rd101, %r808, 4;
	add.s64 	%rd102, %rd28, %rd101;
	ld.shared.u32 	%r809, [%rd102];
	add.s32 	%r810, %r91, %r767;
	mul.wide.s32 	%rd103, %r810, 4;
	add.s64 	%rd104, %rd28, %rd103;
	ld.shared.u32 	%r811, [%rd104];
	bar.sync 	0;
	shfl.sync.idx.b32	%r812, %r3411, 0, 31, -1;
	shfl.sync.idx.b32	%r813, %r3411, 1, 31, -1;
	shfl.sync.idx.b32	%r814, %r3411, 2, 31, -1;
	shfl.sync.idx.b32	%r815, %r3411, 3, 31, -1;
	shfl.sync.idx.b32	%r816, %r3411, 4, 31, -1;
	shfl.sync.idx.b32	%r817, %r3411, 5, 31, -1;
	shfl.sync.idx.b32	%r818, %r3411, 6, 31, -1;
	shfl.sync.idx.b32	%r819, %r3411, 7, 31, -1;
	shfl.sync.idx.b32	%r820, %r3411, 8, 31, -1;
	shfl.sync.idx.b32	%r821, %r3411, 9, 31, -1;
	shfl.sync.idx.b32	%r822, %r3411, 10, 31, -1;
	shfl.sync.idx.b32	%r823, %r3411, 11, 31, -1;
	shfl.sync.idx.b32	%r824, %r3411, 12, 31, -1;
	shfl.sync.idx.b32	%r825, %r3411, 13, 31, -1;
	shfl.sync.idx.b32	%r826, %r3411, 14, 31, -1;
	shfl.sync.idx.b32	%r827, %r3411, 15, 31, -1;
	shfl.sync.idx.b32	%r828, %r3411, 16, 31, -1;
	shfl.sync.idx.b32	%r829, %r3411, 17, 31, -1;
	shfl.sync.idx.b32	%r830, %r3411, 18, 31, -1;
	shfl.sync.idx.b32	%r831, %r3411, 19, 31, -1;
	shfl.sync.idx.b32	%r832, %r3411, 20, 31, -1;
	shfl.sync.idx.b32	%r833, %r3411, 21, 31, -1;
	shfl.sync.idx.b32	%r834, %r3411, 22, 31, -1;
	shfl.sync.idx.b32	%r835, %r3411, 23, 31, -1;
	add.s32 	%r836, %r812, %r767;
	mul.wide.s32 	%rd105, %r836, 4;
	add.s64 	%rd106, %rd28, %rd105;
	st.shared.u32 	[%rd106], %r769;
	add.s32 	%r837, %r813, %r767;
	mul.wide.s32 	%rd107, %r837, 4;
	add.s64 	%rd108, %rd28, %rd107;
	st.shared.u32 	[%rd108], %r771;
	add.s32 	%r838, %r814, %r767;
	mul.wide.s32 	%rd109, %r838, 4;
	add.s64 	%rd110, %rd28, %rd109;
	st.shared.u32 	[%rd110], %r773;
	add.s32 	%r839, %r815, %r767;
	mul.wide.s32 	%rd111, %r839, 4;
	add.s64 	%rd112, %rd28, %rd111;
	st.shared.u32 	[%rd112], %r775;
	add.s32 	%r840, %r816, %r767;
	mul.wide.s32 	%rd113, %r840, 4;
	add.s64 	%rd114, %rd28, %rd113;
	st.shared.u32 	[%rd114], %r777;
	add.s32 	%r841, %r817, %r767;
	mul.wide.s32 	%rd115, %r841, 4;
	add.s64 	%rd116, %rd28, %rd115;
	st.shared.u32 	[%rd116], %r779;
	add.s32 	%r842, %r818, %r767;
	mul.wide.s32 	%rd117, %r842, 4;
	add.s64 	%rd118, %rd28, %rd117;
	st.shared.u32 	[%rd118], %r781;
	add.s32 	%r843, %r819, %r767;
	mul.wide.s32 	%rd119, %r843, 4;
	add.s64 	%rd120, %rd28, %rd119;
	st.shared.u32 	[%rd120], %r783;
	add.s32 	%r844, %r820, %r767;
	mul.wide.s32 	%rd121, %r844, 4;
	add.s64 	%rd122, %rd28, %rd121;
	st.shared.u32 	[%rd122], %r785;
	add.s32 	%r845, %r821, %r767;
	mul.wide.s32 	%rd123, %r845, 4;
	add.s64 	%rd124, %rd28, %rd123;
	st.shared.u32 	[%rd124], %r787;
	add.s32 	%r846, %r822, %r767;
	mul.wide.s32 	%rd125, %r846, 4;
	add.s64 	%rd126, %rd28, %rd125;
	st.shared.u32 	[%rd126], %r789;
	add.s32 	%r847, %r823, %r767;
	mul.wide.s32 	%rd127, %r847, 4;
	add.s64 	%rd128, %rd28, %rd127;
	st.shared.u32 	[%rd128], %r791;
	add.s32 	%r848, %r824, %r767;
	mul.wide.s32 	%rd129, %r848, 4;
	add.s64 	%rd130, %rd28, %rd129;
	st.shared.u32 	[%rd130], %r793;
	add.s32 	%r849, %r825, %r767;
	mul.wide.s32 	%rd131, %r849, 4;
	add.s64 	%rd132, %rd28, %rd131;
	st.shared.u32 	[%rd132], %r795;
	add.s32 	%r850, %r826, %r767;
	mul.wide.s32 	%rd133, %r850, 4;
	add.s64 	%rd134, %rd28, %rd133;
	st.shared.u32 	[%rd134], %r797;
	add.s32 	%r851, %r827, %r767;
	mul.wide.s32 	%rd135, %r851, 4;
	add.s64 	%rd136, %rd28, %rd135;
	st.shared.u32 	[%rd136], %r799;
	add.s32 	%r852, %r828, %r767;
	mul.wide.s32 	%rd137, %r852, 4;
	add.s64 	%rd138, %rd28, %rd137;
	st.shared.u32 	[%rd138], %r801;
	add.s32 	%r853, %r829, %r767;
	mul.wide.s32 	%rd139, %r853, 4;
	add.s64 	%rd140, %rd28, %rd139;
	st.shared.u32 	[%rd140], %r803;
	add.s32 	%r854, %r830, %r767;
	mul.wide.s32 	%rd141, %r854, 4;
	add.s64 	%rd142, %rd28, %rd141;
	st.shared.u32 	[%rd142], %r805;
	add.s32 	%r855, %r831, %r767;
	mul.wide.s32 	%rd143, %r855, 4;
	add.s64 	%rd144, %rd28, %rd143;
	st.shared.u32 	[%rd144], %r807;
	add.s32 	%r856, %r832, %r767;
	mul.wide.s32 	%rd145, %r856, 4;
	add.s64 	%rd146, %rd28, %rd145;
	st.shared.u32 	[%rd146], %r809;
	selp.b32 	%r857, 0, %r811, %p112;
	add.s32 	%r858, %r833, %r767;
	mul.wide.s32 	%rd147, %r858, 4;
	add.s64 	%rd148, %rd28, %rd147;
	st.shared.u32 	[%rd148], %r857;
	add.s32 	%r859, %r834, %r767;
	mul.wide.s32 	%rd149, %r859, 4;
	add.s64 	%rd150, %rd28, %rd149;
	st.shared.u32 	[%rd150], %r3402;
	add.s32 	%r860, %r835, %r767;
	mul.wide.s32 	%rd151, %r860, 4;
	add.s64 	%rd152, %rd28, %rd151;
	st.shared.u32 	[%rd152], %r3402;
	bar.sync 	0;
	mov.u32 	%r3423, %r3402;
	mov.u32 	%r3424, %r3402;
	mov.u32 	%r3425, %r3402;
	mov.u32 	%r3426, %r3402;
	mov.u32 	%r3427, %r3402;
	mov.u32 	%r3428, %r3402;
	mov.u32 	%r3429, %r3402;
	mov.u32 	%r3430, %r3402;
	mov.u32 	%r3431, %r3402;
	mov.u32 	%r3432, %r3402;
	mov.u32 	%r3433, %r3402;
	mov.u32 	%r3434, %r3402;
	mov.u32 	%r3435, %r3402;
	mov.u32 	%r3436, %r3402;
	mov.u32 	%r3437, %r3402;
	mov.u32 	%r3438, %r3402;
	mov.u32 	%r3439, %r3402;
	mov.u32 	%r3440, %r3402;
	mov.u32 	%r3441, %r3402;
	mov.u32 	%r3442, %r3402;
	mov.u32 	%r3443, %r3402;
	mov.u32 	%r3444, %r3402;
	mov.u32 	%r3445, %r3402;
	mov.u32 	%r3446, %r3402;
	@%p111 bra 	LBB0_109;
	bra.uni 	LBB0_72;
LBB0_109:                               // %oksrem3319
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs96, %r107;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r861, %rs102;
	mul.wide.s32 	%rd153, %r861, 4;
	add.s64 	%rd154, %rd12, %rd153;
	ld.shared.u32 	%r3423, [%rd154];
	ld.shared.u32 	%r3424, [%rd12+4];
	ld.shared.u32 	%r3425, [%rd12+8];
	ld.shared.u32 	%r3426, [%rd12+12];
	ld.shared.u32 	%r3427, [%rd12+16];
	ld.shared.u32 	%r3428, [%rd12+20];
	ld.shared.u32 	%r3429, [%rd12+24];
	ld.shared.u32 	%r3430, [%rd12+28];
	ld.shared.u32 	%r3431, [%rd12+32];
	ld.shared.u32 	%r3432, [%rd12+36];
	ld.shared.u32 	%r3433, [%rd12+40];
	ld.shared.u32 	%r3434, [%rd12+44];
	ld.shared.u32 	%r3435, [%rd12+48];
	ld.shared.u32 	%r3436, [%rd12+52];
	ld.shared.u32 	%r3437, [%rd12+56];
	ld.shared.u32 	%r3438, [%rd12+60];
	add.s16 	%rs103, %rs96, 16;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r862, %rs109;
	mul.wide.s32 	%rd155, %r862, 4;
	add.s64 	%rd156, %rd12, %rd155;
	ld.shared.u32 	%r3439, [%rd156];
	add.s16 	%rs110, %rs96, 17;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r863, %rs116;
	mul.wide.s32 	%rd157, %r863, 4;
	add.s64 	%rd158, %rd12, %rd157;
	ld.shared.u32 	%r3440, [%rd158];
	add.s16 	%rs117, %rs96, 18;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r864, %rs123;
	mul.wide.s32 	%rd159, %r864, 4;
	add.s64 	%rd160, %rd12, %rd159;
	ld.shared.u32 	%r3441, [%rd160];
	add.s16 	%rs124, %rs96, 19;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r865, %rs130;
	mul.wide.s32 	%rd161, %r865, 4;
	add.s64 	%rd162, %rd12, %rd161;
	ld.shared.u32 	%r3442, [%rd162];
	add.s16 	%rs131, %rs96, 20;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r866, %rs137;
	mul.wide.s32 	%rd163, %r866, 4;
	add.s64 	%rd164, %rd12, %rd163;
	ld.shared.u32 	%r3443, [%rd164];
	add.s16 	%rs138, %rs96, 21;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r867, %rs144;
	mul.wide.s32 	%rd165, %r867, 4;
	add.s64 	%rd166, %rd12, %rd165;
	ld.shared.u32 	%r3444, [%rd166];
	add.s16 	%rs145, %rs96, 22;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r868, %rs151;
	mul.wide.s32 	%rd167, %r868, 4;
	add.s64 	%rd168, %rd12, %rd167;
	ld.shared.u32 	%r3445, [%rd168];
	add.s16 	%rs152, %rs96, 23;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r869, %rs158;
	mul.wide.s32 	%rd169, %r869, 4;
	add.s64 	%rd170, %rd12, %rd169;
	ld.shared.u32 	%r3446, [%rd170];
LBB0_72:                                // %L11293
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	add.s32 	%r132, %r107, 1;
	add.s32 	%r133, %r107, 2;
	add.s32 	%r134, %r107, 3;
	mov.u32 	%r3447, 12;
	mov.u32 	%r3448, %r3402;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L21296
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3450, %r3450, 1;
	mov.u32 	%r3449, 0;
	mov.u32 	%r3451, %r3449;
	mov.u32 	%r3452, %r3449;
LBB0_81:                                // %L21297
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3448, %r3448, 1;
	add.s32 	%r3447, %r3447, -4;
	setp.ne.s32 	%p127, %r3447, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L11319
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3447, 12;
	selp.b32 	%r1409, %r3423, 0, %p116;
	setp.eq.s32 	%p117, %r3447, 8;
	selp.b32 	%r1410, %r3427, %r1409, %p117;
	setp.eq.s32 	%p118, %r3447, 4;
	selp.b32 	%r1411, %r3431, %r1410, %p118;
	setp.eq.s32 	%p119, %r3447, 0;
	selp.b32 	%r1412, %r3435, %r1411, %p119;
	setp.eq.s32 	%p120, %r3447, -4;
	selp.b32 	%r1413, %r3439, %r1412, %p120;
	setp.eq.s32 	%p121, %r3447, -8;
	selp.b32 	%r1414, %r3443, %r1413, %p121;
	selp.b32 	%r1415, %r3424, 0, %p116;
	selp.b32 	%r1416, %r3428, %r1415, %p117;
	selp.b32 	%r1417, %r3432, %r1416, %p118;
	selp.b32 	%r1418, %r3436, %r1417, %p119;
	selp.b32 	%r1419, %r3440, %r1418, %p120;
	selp.b32 	%r1420, %r3444, %r1419, %p121;
	selp.b32 	%r1421, %r3425, 0, %p116;
	selp.b32 	%r1422, %r3429, %r1421, %p117;
	selp.b32 	%r1423, %r3433, %r1422, %p118;
	selp.b32 	%r1424, %r3437, %r1423, %p119;
	selp.b32 	%r1425, %r3441, %r1424, %p120;
	selp.b32 	%r1426, %r3445, %r1425, %p121;
	selp.b32 	%r1427, %r3426, 0, %p116;
	selp.b32 	%r1428, %r3430, %r1427, %p117;
	selp.b32 	%r1429, %r3434, %r1428, %p118;
	selp.b32 	%r1430, %r3438, %r1429, %p119;
	selp.b32 	%r1431, %r3442, %r1430, %p120;
	selp.b32 	%r1432, %r3446, %r1431, %p121;
	mov.u16 	%rs196, 25600;
	// begin inline asm
	mov.b32 %r877, {%rs196, %rs196};
	// end inline asm
	mov.u16 	%rs198, 21504;
	// begin inline asm
	mov.b32 %r888, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r876, %r1414, -2004318072;
	mov.u32 	%r1013, 983055;
	// begin inline asm
	lop3.b32 %r874, %r1013, %r876, %r877, 202;
	// end inline asm
	mov.u16 	%rs202, 18432;
	// begin inline asm
	mov.b32 %r878, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r879, %r877, %r878;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r882, %r874, %r879;
	// end inline asm
	mov.u32 	%r1024, 15728880;
	// begin inline asm
	lop3.b32 %r885, %r1024, %r876, %r888, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r889, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r890, %r888, %r889;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r893, %r885, %r890;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r922, %r1420, -2004318072;
	// begin inline asm
	lop3.b32 %r920, %r1013, %r922, %r923, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r925, %r923, %r924;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r928, %r920, %r925;
	// end inline asm
	// begin inline asm
	lop3.b32 %r931, %r1024, %r922, %r934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r936, %r934, %r935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r939, %r931, %r936;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r968, %r1426, -2004318072;
	// begin inline asm
	lop3.b32 %r966, %r1013, %r968, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r969, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r977, %r1024, %r968, %r980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r982, %r980, %r981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r985, %r977, %r982;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r1014, %r1432, -2004318072;
	// begin inline asm
	lop3.b32 %r1012, %r1013, %r1014, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r1015, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1023, %r1024, %r1014, %r1026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1027, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1028, %r1026, %r1027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1031, %r1023, %r1028;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3416;
    mov.b32 {%r2re, %r2im}, %r882;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1056, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3417;
    mov.b32 {%r2re, %r2im}, %r893;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1059, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3416;
    mov.b32 {%r2re, %r2im}, %r928;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1062, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3417;
    mov.b32 {%r2re, %r2im}, %r939;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1065, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3416;
    mov.b32 {%r2re, %r2im}, %r974;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1068, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3417;
    mov.b32 {%r2re, %r2im}, %r985;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1071, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3416;
    mov.b32 {%r2re, %r2im}, %r1020;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1074, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3417;
    mov.b32 {%r2re, %r2im}, %r1031;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1077, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1143, %r1140}, {%r306, %r309}, {%r1056}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1152, %r1149}, {%r306, %r309}, {%r1059}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1161, %r1158}, {%r306, %r309}, {%r1062}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1170, %r1167}, {%r306, %r309}, {%r1065}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1179, %r1176}, {%r306, %r309}, {%r1068}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1188, %r1185}, {%r306, %r309}, {%r1071}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1197, %r1194}, {%r306, %r309}, {%r1074}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1206, %r1203}, {%r306, %r309}, {%r1077}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1136, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1138, %r1136, %r1140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r358, %r1143, %r1138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1145, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1147, %r1145, %r1149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1150, %r358, %r1152, %r1147;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1154, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1156, %r1154, %r1158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r358, %r1161, %r1156;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1163, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1165, %r1163, %r1167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1168, %r358, %r1170, %r1165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1172, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1174, %r1172, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r358, %r1179, %r1174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1181, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1183, %r1181, %r1185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r358, %r1188, %r1183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1190, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r1190, %r1194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r358, %r1197, %r1192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1199, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1201, %r1199, %r1203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1204, %r358, %r1206, %r1201;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r361, %r1143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r358, %r1140, %r1208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1215, %r361, %r1152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1218, %r358, %r1149, %r1215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1222, %r361, %r1161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1225, %r358, %r1158, %r1222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1229, %r361, %r1170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1232, %r358, %r1167, %r1229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r361, %r1179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r358, %r1176, %r1236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1243, %r361, %r1188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1246, %r358, %r1185, %r1243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1250, %r361, %r1197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1253, %r358, %r1194, %r1250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r361, %r1206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r358, %r1203, %r1257;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1345, %r1346}, {%r402, %r408, %r405, %r411}, {%r1141, %r1211}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1353, %r1354}, {%r402, %r408, %r405, %r411}, {%r1150, %r1218}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1361, %r1362}, {%r402, %r408, %r405, %r411}, {%r1159, %r1225}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1369, %r1370}, {%r402, %r408, %r405, %r411}, {%r1168, %r1232}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1377, %r1378}, {%r402, %r408, %r405, %r411}, {%r1177, %r1239}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1385, %r1386}, {%r402, %r408, %r405, %r411}, {%r1186, %r1246}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1393, %r1394}, {%r402, %r408, %r405, %r411}, {%r1195, %r1253}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1401, %r1402}, {%r402, %r408, %r405, %r411}, {%r1204, %r1260}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1344, %r1345, %r1346, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1348, %r1345, %r1346, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1352, %r1353, %r1354, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1356, %r1353, %r1354, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1360, %r1361, %r1362, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1364, %r1361, %r1362, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1368, %r1369, %r1370, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1372, %r1369, %r1370, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1376, %r1377, %r1378, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1380, %r1377, %r1378, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1384, %r1385, %r1386, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1388, %r1385, %r1386, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1392, %r1393, %r1394, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1396, %r1393, %r1394, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1400, %r1401, %r1402, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1404, %r1401, %r1402, %r717;
	// end inline asm
	st.shared.u32 	[%rd6], %r1344;
	st.shared.u32 	[%rd7+33024], %r1348;
	st.shared.u32 	[%rd7+128], %r1352;
	st.shared.u32 	[%rd7+33152], %r1356;
	cvt.u16.u32 	%rs207, %r3448;
	and.b16  	%rs208, %rs207, 255;
	mul.lo.s16 	%rs209, %rs208, 171;
	shr.u16 	%rs210, %rs209, 10;
	mul.lo.s16 	%rs211, %rs210, 6;
	sub.s16 	%rs212, %rs207, %rs211;
	shl.b16 	%rs213, %rs212, 2;
	cvt.u32.u16 	%r1433, %rs213;
	and.b32  	%r1434, %r1433, 252;
	add.s32 	%r1435, %r132, %r1434;
	shr.s32 	%r1436, %r1435, 31;
	shr.u32 	%r1437, %r1436, 30;
	add.s32 	%r1438, %r1435, %r1437;
	and.b32  	%r1439, %r1438, 67108860;
	sub.s32 	%r1440, %r1435, %r1439;
	shl.b32 	%r141, %r1440, 6;
	add.s32 	%r1441, %r92, %r141;
	mul.wide.s32 	%rd171, %r1441, 4;
	add.s64 	%rd173, %rd28, %rd171;
	st.shared.u32 	[%rd173], %r1360;
	add.s32 	%r1442, %r93, %r141;
	mul.wide.u32 	%rd174, %r1442, 4;
	add.s64 	%rd175, %rd28, %rd174;
	st.shared.u32 	[%rd175], %r1364;
	add.s32 	%r1443, %r94, %r141;
	mul.wide.s32 	%rd176, %r1443, 4;
	add.s64 	%rd177, %rd28, %rd176;
	st.shared.u32 	[%rd177], %r1368;
	add.s32 	%r1444, %r95, %r141;
	mul.wide.u32 	%rd178, %r1444, 4;
	add.s64 	%rd179, %rd28, %rd178;
	st.shared.u32 	[%rd179], %r1372;
	add.s32 	%r1445, %r133, %r1434;
	shr.s32 	%r1446, %r1445, 31;
	shr.u32 	%r1447, %r1446, 30;
	add.s32 	%r1448, %r1445, %r1447;
	and.b32  	%r1449, %r1448, 67108860;
	sub.s32 	%r1450, %r1445, %r1449;
	shl.b32 	%r142, %r1450, 6;
	add.s32 	%r1451, %r92, %r142;
	mul.wide.s32 	%rd180, %r1451, 4;
	add.s64 	%rd181, %rd28, %rd180;
	st.shared.u32 	[%rd181], %r1376;
	add.s32 	%r1452, %r93, %r142;
	mul.wide.u32 	%rd182, %r1452, 4;
	add.s64 	%rd183, %rd28, %rd182;
	st.shared.u32 	[%rd183], %r1380;
	add.s32 	%r1453, %r94, %r142;
	mul.wide.s32 	%rd184, %r1453, 4;
	add.s64 	%rd185, %rd28, %rd184;
	st.shared.u32 	[%rd185], %r1384;
	add.s32 	%r1454, %r95, %r142;
	mul.wide.u32 	%rd186, %r1454, 4;
	add.s64 	%rd187, %rd28, %rd186;
	st.shared.u32 	[%rd187], %r1388;
	add.s32 	%r1455, %r134, %r1434;
	shr.s32 	%r1456, %r1455, 31;
	shr.u32 	%r1457, %r1456, 30;
	add.s32 	%r1458, %r1455, %r1457;
	and.b32  	%r1459, %r1458, 67108860;
	sub.s32 	%r1460, %r1455, %r1459;
	shl.b32 	%r143, %r1460, 6;
	add.s32 	%r1461, %r92, %r143;
	mul.wide.s32 	%rd188, %r1461, 4;
	add.s64 	%rd189, %rd28, %rd188;
	st.shared.u32 	[%rd189], %r1392;
	add.s32 	%r1462, %r93, %r143;
	mul.wide.u32 	%rd190, %r1462, 4;
	add.s64 	%rd191, %rd28, %rd190;
	st.shared.u32 	[%rd191], %r1396;
	add.s32 	%r1463, %r94, %r143;
	mul.wide.s32 	%rd192, %r1463, 4;
	add.s64 	%rd193, %rd28, %rd192;
	st.shared.u32 	[%rd193], %r1400;
	add.s32 	%r1464, %r95, %r143;
	mul.wide.u32 	%rd194, %r1464, 4;
	add.s64 	%rd195, %rd28, %rd194;
	st.shared.u32 	[%rd195], %r1404;
	bar.sync 	0;
	mov.u32 	%r3453, %r3402;
	mov.u32 	%r3454, %r3402;
	mov.u32 	%r3455, %r3402;
	mov.u32 	%r3456, %r3402;
	@%p115 bra 	LBB0_110;
	bra.uni 	LBB0_74;
LBB0_110:                               // %oksrem7067
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3453, [%rd8];
	ld.shared.u32 	%r3454, [%rd9];
	ld.shared.u32 	%r3455, [%rd10];
	ld.shared.u32 	%r3456, [%rd11];
LBB0_74:                                // %L17194
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1500, %r1497}, {%r306, %r309}, {%r3453}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1509, %r1506}, {%r306, %r309}, {%r3454}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1518, %r1515}, {%r306, %r309}, {%r3455}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1527, %r1524}, {%r306, %r309}, {%r3456}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1493, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1495, %r1493, %r1497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1498, %r358, %r1500, %r1495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1502, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1504, %r1502, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r358, %r1509, %r1504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1511, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r1511, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r358, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1520, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r1520, %r1524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r358, %r1527, %r1522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1529, %r361, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r358, %r1497, %r1529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1536, %r361, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r358, %r1506, %r1536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1543, %r361, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r358, %r1515, %r1543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1550, %r361, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1553, %r358, %r1524, %r1550;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1598, %r1602}, {%r402, %r408, %r405, %r411}, {%r1498, %r1532}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1614, %r1618}, {%r402, %r408, %r405, %r411}, {%r1507, %r1539}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1606, %r1610}, {%r402, %r408, %r405, %r411}, {%r1516, %r1546}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1622, %r1626}, {%r402, %r408, %r405, %r411}, {%r1525, %r1553}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1597, %r1598, %r1598, %r3452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1601, %r1602, %r1602, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r1606, %r1606, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r1610, %r1610, %r1605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1613, %r1614, %r1614, %r3451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1617, %r1618, %r1618, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1621, %r1622, %r1622, %r1617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1625, %r1626, %r1626, %r1621;
	// end inline asm
	mov.u32 	%r3457, %r3402;
	mov.u32 	%r3458, %r3402;
	mov.u32 	%r3459, %r3402;
	mov.u32 	%r3460, %r3402;
	@%p115 bra 	LBB0_111;
	bra.uni 	LBB0_75;
LBB0_111:                               // %oksrem7602
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1630, %r96, %r141;
	mul.wide.s32 	%rd196, %r1630, 4;
	add.s64 	%rd198, %rd28, %rd196;
	ld.shared.u32 	%r3457, [%rd198];
	add.s32 	%r1631, %r97, %r141;
	mul.wide.u32 	%rd199, %r1631, 4;
	add.s64 	%rd200, %rd28, %rd199;
	ld.shared.u32 	%r3458, [%rd200];
	add.s32 	%r1632, %r98, %r141;
	mul.wide.s32 	%rd201, %r1632, 4;
	add.s64 	%rd202, %rd28, %rd201;
	ld.shared.u32 	%r3459, [%rd202];
	add.s32 	%r1633, %r99, %r141;
	mul.wide.u32 	%rd203, %r1633, 4;
	add.s64 	%rd204, %rd28, %rd203;
	ld.shared.u32 	%r3460, [%rd204];
LBB0_75:                                // %L18415
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1669, %r1666}, {%r306, %r309}, {%r3457}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1678, %r1675}, {%r306, %r309}, {%r3458}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1687, %r1684}, {%r306, %r309}, {%r3459}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1696, %r1693}, {%r306, %r309}, {%r3460}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1662, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1664, %r1662, %r1666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1667, %r358, %r1669, %r1664;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1671, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r1671, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r358, %r1678, %r1673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1680, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1682, %r1680, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1685, %r358, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1689, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1689, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r358, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1698, %r361, %r1669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r358, %r1666, %r1698;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r361, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r358, %r1675, %r1705;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1712, %r361, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r358, %r1684, %r1712;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1719, %r361, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r358, %r1693, %r1719;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1767, %r1771}, {%r402, %r408, %r405, %r411}, {%r1667, %r1701}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1783, %r1787}, {%r402, %r408, %r405, %r411}, {%r1676, %r1708}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1775, %r1779}, {%r402, %r408, %r405, %r411}, {%r1685, %r1715}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1791, %r1795}, {%r402, %r408, %r405, %r411}, {%r1694, %r1722}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r1767, %r1767, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r1771, %r1771, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r1775, %r1775, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r1779, %r1779, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r1783, %r1783, %r1625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1787, %r1787, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1791, %r1791, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1795, %r1795, %r1790;
	// end inline asm
	mov.u32 	%r3461, %r3402;
	mov.u32 	%r3462, %r3402;
	mov.u32 	%r3463, %r3402;
	mov.u32 	%r3464, %r3402;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_76;
LBB0_112:                               // %oksrem8137
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1799, %r96, %r142;
	mul.wide.s32 	%rd205, %r1799, 4;
	add.s64 	%rd207, %rd28, %rd205;
	ld.shared.u32 	%r3461, [%rd207];
	add.s32 	%r1800, %r97, %r142;
	mul.wide.u32 	%rd208, %r1800, 4;
	add.s64 	%rd209, %rd28, %rd208;
	ld.shared.u32 	%r3462, [%rd209];
	add.s32 	%r1801, %r98, %r142;
	mul.wide.s32 	%rd210, %r1801, 4;
	add.s64 	%rd211, %rd28, %rd210;
	ld.shared.u32 	%r3463, [%rd211];
	add.s32 	%r1802, %r99, %r142;
	mul.wide.u32 	%rd212, %r1802, 4;
	add.s64 	%rd213, %rd28, %rd212;
	ld.shared.u32 	%r3464, [%rd213];
LBB0_76:                                // %L19636
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1838, %r1835}, {%r306, %r309}, {%r3461}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1847, %r1844}, {%r306, %r309}, {%r3462}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1856, %r1853}, {%r306, %r309}, {%r3463}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1865, %r1862}, {%r306, %r309}, {%r3464}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1831, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1833, %r1831, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r358, %r1838, %r1833;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1840, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1842, %r1840, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r358, %r1847, %r1842;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1849, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1851, %r1849, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1854, %r358, %r1856, %r1851;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1858, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1860, %r1858, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r358, %r1865, %r1860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1867, %r361, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1870, %r358, %r1835, %r1867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r361, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r358, %r1844, %r1874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1881, %r361, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r358, %r1853, %r1881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1888, %r361, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1891, %r358, %r1862, %r1888;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1936, %r1940}, {%r402, %r408, %r405, %r411}, {%r1836, %r1870}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1952, %r1956}, {%r402, %r408, %r405, %r411}, {%r1845, %r1877}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1944, %r1948}, {%r402, %r408, %r405, %r411}, {%r1854, %r1884}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1960, %r1964}, {%r402, %r408, %r405, %r411}, {%r1863, %r1891}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r1936, %r1936, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1939, %r1940, %r1940, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r1944, %r1944, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r1948, %r1948, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r1952, %r1952, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r1956, %r1956, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r1960, %r1960, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r1964, %r1964, %r1959;
	// end inline asm
	mov.u32 	%r3465, %r3402;
	mov.u32 	%r3466, %r3402;
	mov.u32 	%r3467, %r3402;
	mov.u32 	%r3468, %r3402;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_77;
LBB0_113:                               // %oksrem8672
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1968, %r96, %r143;
	mul.wide.s32 	%rd214, %r1968, 4;
	add.s64 	%rd216, %rd28, %rd214;
	ld.shared.u32 	%r3465, [%rd216];
	add.s32 	%r1969, %r97, %r143;
	mul.wide.u32 	%rd217, %r1969, 4;
	add.s64 	%rd218, %rd28, %rd217;
	ld.shared.u32 	%r3466, [%rd218];
	add.s32 	%r1970, %r98, %r143;
	mul.wide.s32 	%rd219, %r1970, 4;
	add.s64 	%rd220, %rd28, %rd219;
	ld.shared.u32 	%r3467, [%rd220];
	add.s32 	%r1971, %r99, %r143;
	mul.wide.u32 	%rd221, %r1971, 4;
	add.s64 	%rd222, %rd28, %rd221;
	ld.shared.u32 	%r3468, [%rd222];
LBB0_77:                                // %L20857
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2007, %r2004}, {%r306, %r309}, {%r3465}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2016, %r2013}, {%r306, %r309}, {%r3466}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2025, %r2022}, {%r306, %r309}, {%r3467}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2034, %r2031}, {%r306, %r309}, {%r3468}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2000, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2002, %r2000, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r358, %r2007, %r2002;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2009, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r2009, %r2013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r358, %r2016, %r2011;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2018, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2020, %r2018, %r2022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r358, %r2025, %r2020;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2027, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2029, %r2027, %r2031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r358, %r2034, %r2029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2036, %r361, %r2007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2039, %r358, %r2004, %r2036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2043, %r361, %r2016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r358, %r2013, %r2043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r361, %r2025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r358, %r2022, %r2050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2057, %r361, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2060, %r358, %r2031, %r2057;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2105, %r2109}, {%r402, %r408, %r405, %r411}, {%r2005, %r2039}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2121, %r2125}, {%r402, %r408, %r405, %r411}, {%r2014, %r2046}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2113, %r2117}, {%r402, %r408, %r405, %r411}, {%r2023, %r2053}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2129, %r2133}, {%r402, %r408, %r405, %r411}, {%r2032, %r2060}, {%r3402, %r3402};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2104, %r2105, %r2105, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2108, %r2109, %r2109, %r2104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2112, %r2113, %r2113, %r2108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3452, %r2117, %r2117, %r2112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2120, %r2121, %r2121, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2124, %r2125, %r2125, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r2129, %r2129, %r2124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3451, %r2133, %r2133, %r2128;
	// end inline asm
	add.s32 	%r3449, %r3449, 4;
	setp.ne.s32 	%p125, %r3449, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L21003
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L21062
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2136, %r3450, 1152;
	add.s32 	%r2137, %r100, %r2136;
	mul.wide.u32 	%rd223, %r2137, 4;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r3452;
	add.s32 	%r2138, %r101, %r2136;
	mul.wide.u32 	%rd225, %r2138, 4;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r3451;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L21322.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r176, %r107, 25;
	add.s32 	%r177, %r107, 26;
	add.s32 	%r178, %r107, 27;
	mov.u32 	%r2141, 0;
	mov.u32 	%r3473, 12;
	mov.u32 	%r3474, %r2141;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L31299
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3450, %r3450, 1;
	mov.u32 	%r3449, 0;
	mov.u32 	%r3451, %r3449;
	mov.u32 	%r3452, %r3449;
LBB0_91:                                // %L31300
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3474, %r3474, 1;
	add.s32 	%r3473, %r3473, -4;
	setp.ne.s32 	%p140, %r3473, -12;
	@%p140 bra 	LBB0_83;
	bra.uni 	LBB0_92;
LBB0_83:                                // %L21322
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3473, 12;
	selp.b32 	%r2679, %r3423, 0, %p129;
	setp.eq.s32 	%p130, %r3473, 8;
	selp.b32 	%r2680, %r3427, %r2679, %p130;
	setp.eq.s32 	%p131, %r3473, 4;
	selp.b32 	%r2681, %r3431, %r2680, %p131;
	setp.eq.s32 	%p132, %r3473, 0;
	selp.b32 	%r2682, %r3435, %r2681, %p132;
	setp.eq.s32 	%p133, %r3473, -4;
	selp.b32 	%r2683, %r3439, %r2682, %p133;
	setp.eq.s32 	%p134, %r3473, -8;
	selp.b32 	%r2684, %r3443, %r2683, %p134;
	selp.b32 	%r2685, %r3424, 0, %p129;
	selp.b32 	%r2686, %r3428, %r2685, %p130;
	selp.b32 	%r2687, %r3432, %r2686, %p131;
	selp.b32 	%r2688, %r3436, %r2687, %p132;
	selp.b32 	%r2689, %r3440, %r2688, %p133;
	selp.b32 	%r2690, %r3444, %r2689, %p134;
	selp.b32 	%r2691, %r3425, 0, %p129;
	selp.b32 	%r2692, %r3429, %r2691, %p130;
	selp.b32 	%r2693, %r3433, %r2692, %p131;
	selp.b32 	%r2694, %r3437, %r2693, %p132;
	selp.b32 	%r2695, %r3441, %r2694, %p133;
	selp.b32 	%r2696, %r3445, %r2695, %p134;
	selp.b32 	%r2697, %r3426, 0, %p129;
	selp.b32 	%r2698, %r3430, %r2697, %p130;
	selp.b32 	%r2699, %r3434, %r2698, %p131;
	selp.b32 	%r2700, %r3438, %r2699, %p132;
	selp.b32 	%r2701, %r3442, %r2700, %p133;
	selp.b32 	%r2702, %r3446, %r2701, %p134;
	// begin inline asm
	mov.b32 %r2169, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2180, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2703, %r2684, 8;
	xor.b32  	%r2179, %r2703, 8947848;
	// begin inline asm
	lop3.b32 %r2166, %r1013, %r2179, %r2169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2170, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2171, %r2169, %r2170;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2174, %r2166, %r2171;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2177, %r1024, %r2179, %r2180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2182, %r2180, %r2181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2185, %r2177, %r2182;
	// end inline asm
	// begin inline asm
	mov.b32 %r2215, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2704, %r2690, 8;
	xor.b32  	%r2225, %r2704, 8947848;
	// begin inline asm
	lop3.b32 %r2212, %r1013, %r2225, %r2215, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2216, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2217, %r2215, %r2216;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2220, %r2212, %r2217;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2223, %r1024, %r2225, %r2226, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2228, %r2226, %r2227;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2231, %r2223, %r2228;
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2272, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2705, %r2696, 8;
	xor.b32  	%r2271, %r2705, 8947848;
	// begin inline asm
	lop3.b32 %r2258, %r1013, %r2271, %r2261, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2263, %r2261, %r2262;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2266, %r2258, %r2263;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2269, %r1024, %r2271, %r2272, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2274, %r2272, %r2273;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2277, %r2269, %r2274;
	// end inline asm
	// begin inline asm
	mov.b32 %r2307, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2318, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2706, %r2702, 8;
	xor.b32  	%r2317, %r2706, 8947848;
	// begin inline asm
	lop3.b32 %r2304, %r1013, %r2317, %r2307, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2308, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2309, %r2307, %r2308;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2312, %r2304, %r2309;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2315, %r1024, %r2317, %r2318, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2319, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2320, %r2318, %r2319;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2323, %r2315, %r2320;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3416;
    mov.b32 {%r2re, %r2im}, %r2174;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2326, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3417;
    mov.b32 {%r2re, %r2im}, %r2185;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2329, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3416;
    mov.b32 {%r2re, %r2im}, %r2220;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2332, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3417;
    mov.b32 {%r2re, %r2im}, %r2231;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2335, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3416;
    mov.b32 {%r2re, %r2im}, %r2266;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2338, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3417;
    mov.b32 {%r2re, %r2im}, %r2277;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2341, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3416;
    mov.b32 {%r2re, %r2im}, %r2312;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2344, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3417;
    mov.b32 {%r2re, %r2im}, %r2323;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2347, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2413, %r2410}, {%r306, %r309}, {%r2326}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2422, %r2419}, {%r306, %r309}, {%r2329}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2431, %r2428}, {%r306, %r309}, {%r2332}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2440, %r2437}, {%r306, %r309}, {%r2335}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2449, %r2446}, {%r306, %r309}, {%r2338}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2458, %r2455}, {%r306, %r309}, {%r2341}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2467, %r2464}, {%r306, %r309}, {%r2344}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2476, %r2473}, {%r306, %r309}, {%r2347}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2406, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2408, %r2406, %r2410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2411, %r358, %r2413, %r2408;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2415, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2417, %r2415, %r2419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2420, %r358, %r2422, %r2417;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2424, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2426, %r2424, %r2428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2429, %r358, %r2431, %r2426;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2433, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2435, %r2433, %r2437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2438, %r358, %r2440, %r2435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2442, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2444, %r2442, %r2446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2447, %r358, %r2449, %r2444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2451, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2453, %r2451, %r2455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2456, %r358, %r2458, %r2453;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2460, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2462, %r2460, %r2464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2465, %r358, %r2467, %r2462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2469, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r2469, %r2473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r358, %r2476, %r2471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2478, %r361, %r2413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2481, %r358, %r2410, %r2478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2485, %r361, %r2422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2488, %r358, %r2419, %r2485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2492, %r361, %r2431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2495, %r358, %r2428, %r2492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2499, %r361, %r2440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2502, %r358, %r2437, %r2499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r361, %r2449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r358, %r2446, %r2506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2513, %r361, %r2458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2516, %r358, %r2455, %r2513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2520, %r361, %r2467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2523, %r358, %r2464, %r2520;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2527, %r361, %r2476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2530, %r358, %r2473, %r2527;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2615, %r2616}, {%r402, %r408, %r405, %r411}, {%r2411, %r2481}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2623, %r2624}, {%r402, %r408, %r405, %r411}, {%r2420, %r2488}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2631, %r2632}, {%r402, %r408, %r405, %r411}, {%r2429, %r2495}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2639, %r2640}, {%r402, %r408, %r405, %r411}, {%r2438, %r2502}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2647, %r2648}, {%r402, %r408, %r405, %r411}, {%r2447, %r2509}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2655, %r2656}, {%r402, %r408, %r405, %r411}, {%r2456, %r2516}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2663, %r2664}, {%r402, %r408, %r405, %r411}, {%r2465, %r2523}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2671, %r2672}, {%r402, %r408, %r405, %r411}, {%r2474, %r2530}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2614, %r2615, %r2616, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2618, %r2615, %r2616, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2622, %r2623, %r2624, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2626, %r2623, %r2624, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2630, %r2631, %r2632, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2634, %r2631, %r2632, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2638, %r2639, %r2640, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2642, %r2639, %r2640, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2646, %r2647, %r2648, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2650, %r2647, %r2648, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2654, %r2655, %r2656, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2658, %r2655, %r2656, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2662, %r2663, %r2664, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2666, %r2663, %r2664, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2670, %r2671, %r2672, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2674, %r2671, %r2672, %r717;
	// end inline asm
	st.shared.u32 	[%rd6], %r2614;
	st.shared.u32 	[%rd7+33024], %r2618;
	st.shared.u32 	[%rd7+128], %r2622;
	st.shared.u32 	[%rd7+33152], %r2626;
	cvt.u16.u32 	%rs262, %r3474;
	and.b16  	%rs263, %rs262, 255;
	mul.lo.s16 	%rs264, %rs263, 171;
	shr.u16 	%rs265, %rs264, 10;
	mul.lo.s16 	%rs266, %rs265, 6;
	sub.s16 	%rs267, %rs262, %rs266;
	shl.b16 	%rs268, %rs267, 2;
	cvt.u32.u16 	%r2707, %rs268;
	and.b32  	%r2708, %r2707, 252;
	add.s32 	%r2709, %r176, %r2708;
	cvt.u16.u32 	%rs269, %r2709;
	shr.s16 	%rs270, %rs269, 15;
	shr.u16 	%rs271, %rs270, 14;
	add.s16 	%rs272, %rs269, %rs271;
	and.b16  	%rs273, %rs272, -4;
	sub.s16 	%rs274, %rs269, %rs273;
	mul.wide.s16 	%r185, %rs274, 64;
	add.s32 	%r2710, %r92, %r185;
	mul.wide.s32 	%rd227, %r2710, 4;
	add.s64 	%rd229, %rd28, %rd227;
	st.shared.u32 	[%rd229], %r2630;
	add.s32 	%r2711, %r93, %r185;
	mul.wide.u32 	%rd230, %r2711, 4;
	add.s64 	%rd231, %rd28, %rd230;
	st.shared.u32 	[%rd231], %r2634;
	add.s32 	%r2712, %r94, %r185;
	mul.wide.s32 	%rd232, %r2712, 4;
	add.s64 	%rd233, %rd28, %rd232;
	st.shared.u32 	[%rd233], %r2638;
	add.s32 	%r2713, %r95, %r185;
	mul.wide.u32 	%rd234, %r2713, 4;
	add.s64 	%rd235, %rd28, %rd234;
	st.shared.u32 	[%rd235], %r2642;
	add.s32 	%r2714, %r177, %r2708;
	cvt.u16.u32 	%rs275, %r2714;
	shr.s16 	%rs276, %rs275, 15;
	shr.u16 	%rs277, %rs276, 14;
	add.s16 	%rs278, %rs275, %rs277;
	and.b16  	%rs279, %rs278, -4;
	sub.s16 	%rs280, %rs275, %rs279;
	mul.wide.s16 	%r186, %rs280, 64;
	add.s32 	%r2715, %r92, %r186;
	mul.wide.s32 	%rd236, %r2715, 4;
	add.s64 	%rd237, %rd28, %rd236;
	st.shared.u32 	[%rd237], %r2646;
	add.s32 	%r2716, %r93, %r186;
	mul.wide.u32 	%rd238, %r2716, 4;
	add.s64 	%rd239, %rd28, %rd238;
	st.shared.u32 	[%rd239], %r2650;
	add.s32 	%r2717, %r94, %r186;
	mul.wide.s32 	%rd240, %r2717, 4;
	add.s64 	%rd241, %rd28, %rd240;
	st.shared.u32 	[%rd241], %r2654;
	add.s32 	%r2718, %r95, %r186;
	mul.wide.u32 	%rd242, %r2718, 4;
	add.s64 	%rd243, %rd28, %rd242;
	st.shared.u32 	[%rd243], %r2658;
	add.s32 	%r2719, %r178, %r2708;
	cvt.u16.u32 	%rs281, %r2719;
	shr.s16 	%rs282, %rs281, 15;
	shr.u16 	%rs283, %rs282, 14;
	add.s16 	%rs284, %rs281, %rs283;
	and.b16  	%rs285, %rs284, -4;
	sub.s16 	%rs286, %rs281, %rs285;
	mul.wide.s16 	%r187, %rs286, 64;
	add.s32 	%r2720, %r92, %r187;
	mul.wide.s32 	%rd244, %r2720, 4;
	add.s64 	%rd245, %rd28, %rd244;
	st.shared.u32 	[%rd245], %r2662;
	add.s32 	%r2721, %r93, %r187;
	mul.wide.u32 	%rd246, %r2721, 4;
	add.s64 	%rd247, %rd28, %rd246;
	st.shared.u32 	[%rd247], %r2666;
	add.s32 	%r2722, %r94, %r187;
	mul.wide.s32 	%rd248, %r2722, 4;
	add.s64 	%rd249, %rd28, %rd248;
	st.shared.u32 	[%rd249], %r2670;
	add.s32 	%r2723, %r95, %r187;
	mul.wide.u32 	%rd250, %r2723, 4;
	add.s64 	%rd251, %rd28, %rd250;
	st.shared.u32 	[%rd251], %r2674;
	bar.sync 	0;
	mov.u32 	%r3479, %r2141;
	mov.u32 	%r3480, %r2141;
	mov.u32 	%r3481, %r2141;
	mov.u32 	%r3482, %r2141;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_84;
LBB0_114:                               // %oksrem11465
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3482, [%rd8];
	ld.shared.u32 	%r3481, [%rd9];
	ld.shared.u32 	%r3480, [%rd10];
	ld.shared.u32 	%r3479, [%rd11];
LBB0_84:                                // %L27197
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2759, %r2756}, {%r306, %r309}, {%r3482}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2768, %r2765}, {%r306, %r309}, {%r3481}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2777, %r2774}, {%r306, %r309}, {%r3480}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2786, %r2783}, {%r306, %r309}, {%r3479}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2752, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2754, %r2752, %r2756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2757, %r358, %r2759, %r2754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2761, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2763, %r2761, %r2765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r358, %r2768, %r2763;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2770, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2772, %r2770, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2775, %r358, %r2777, %r2772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2779, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2781, %r2779, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r358, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2788, %r361, %r2759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2791, %r358, %r2756, %r2788;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2795, %r361, %r2768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2798, %r358, %r2765, %r2795;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2802, %r361, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2805, %r358, %r2774, %r2802;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2809, %r361, %r2786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2812, %r358, %r2783, %r2809;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2857, %r2861}, {%r402, %r408, %r405, %r411}, {%r2757, %r2791}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2873, %r2877}, {%r402, %r408, %r405, %r411}, {%r2766, %r2798}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2865, %r2869}, {%r402, %r408, %r405, %r411}, {%r2775, %r2805}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2881, %r2885}, {%r402, %r408, %r405, %r411}, {%r2784, %r2812}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2856, %r2857, %r2857, %r3452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2860, %r2861, %r2861, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2864, %r2865, %r2865, %r2860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2868, %r2869, %r2869, %r2864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2872, %r2873, %r2873, %r3451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2876, %r2877, %r2877, %r2872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r2881, %r2881, %r2876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r2885, %r2885, %r2880;
	// end inline asm
	mov.u32 	%r3483, %r2141;
	mov.u32 	%r3484, %r2141;
	mov.u32 	%r3485, %r2141;
	mov.u32 	%r3486, %r2141;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_85;
LBB0_115:                               // %oksrem12000
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2889, %r96, %r185;
	mul.wide.s32 	%rd252, %r2889, 4;
	add.s64 	%rd254, %rd28, %rd252;
	ld.shared.u32 	%r3486, [%rd254];
	add.s32 	%r2890, %r97, %r185;
	mul.wide.u32 	%rd255, %r2890, 4;
	add.s64 	%rd256, %rd28, %rd255;
	ld.shared.u32 	%r3485, [%rd256];
	add.s32 	%r2891, %r98, %r185;
	mul.wide.s32 	%rd257, %r2891, 4;
	add.s64 	%rd258, %rd28, %rd257;
	ld.shared.u32 	%r3484, [%rd258];
	add.s32 	%r2892, %r99, %r185;
	mul.wide.u32 	%rd259, %r2892, 4;
	add.s64 	%rd260, %rd28, %rd259;
	ld.shared.u32 	%r3483, [%rd260];
LBB0_85:                                // %L28418
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2928, %r2925}, {%r306, %r309}, {%r3486}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2937, %r2934}, {%r306, %r309}, {%r3485}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2946, %r2943}, {%r306, %r309}, {%r3484}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2955, %r2952}, {%r306, %r309}, {%r3483}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2921, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2923, %r2921, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2926, %r358, %r2928, %r2923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2930, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2932, %r2930, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2935, %r358, %r2937, %r2932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2939, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2941, %r2939, %r2943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r358, %r2946, %r2941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2948, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2950, %r2948, %r2952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r358, %r2955, %r2950;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2957, %r361, %r2928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r358, %r2925, %r2957;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2964, %r361, %r2937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2967, %r358, %r2934, %r2964;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2971, %r361, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r358, %r2943, %r2971;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2978, %r361, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r358, %r2952, %r2978;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3026, %r3030}, {%r402, %r408, %r405, %r411}, {%r2926, %r2960}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3042, %r3046}, {%r402, %r408, %r405, %r411}, {%r2935, %r2967}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3034, %r3038}, {%r402, %r408, %r405, %r411}, {%r2944, %r2974}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3050, %r3054}, {%r402, %r408, %r405, %r411}, {%r2953, %r2981}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3025, %r3026, %r3026, %r2868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3029, %r3030, %r3030, %r3025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3033, %r3034, %r3034, %r3029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r3038, %r3038, %r3033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3041, %r3042, %r3042, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3045, %r3046, %r3046, %r3041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3049, %r3050, %r3050, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r3054, %r3054, %r3049;
	// end inline asm
	mov.u32 	%r3487, %r2141;
	mov.u32 	%r3488, %r2141;
	mov.u32 	%r3489, %r2141;
	mov.u32 	%r3490, %r2141;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_86;
LBB0_116:                               // %oksrem12535
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3058, %r96, %r186;
	mul.wide.s32 	%rd261, %r3058, 4;
	add.s64 	%rd263, %rd28, %rd261;
	ld.shared.u32 	%r3490, [%rd263];
	add.s32 	%r3059, %r97, %r186;
	mul.wide.u32 	%rd264, %r3059, 4;
	add.s64 	%rd265, %rd28, %rd264;
	ld.shared.u32 	%r3489, [%rd265];
	add.s32 	%r3060, %r98, %r186;
	mul.wide.s32 	%rd266, %r3060, 4;
	add.s64 	%rd267, %rd28, %rd266;
	ld.shared.u32 	%r3488, [%rd267];
	add.s32 	%r3061, %r99, %r186;
	mul.wide.u32 	%rd268, %r3061, 4;
	add.s64 	%rd269, %rd28, %rd268;
	ld.shared.u32 	%r3487, [%rd269];
LBB0_86:                                // %L29639
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3097, %r3094}, {%r306, %r309}, {%r3490}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3106, %r3103}, {%r306, %r309}, {%r3489}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3115, %r3112}, {%r306, %r309}, {%r3488}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3124, %r3121}, {%r306, %r309}, {%r3487}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3090, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3092, %r3090, %r3094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3095, %r358, %r3097, %r3092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3099, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3101, %r3099, %r3103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r358, %r3106, %r3101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3108, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r3108, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r358, %r3115, %r3110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3117, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3119, %r3117, %r3121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r358, %r3124, %r3119;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3126, %r361, %r3097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3129, %r358, %r3094, %r3126;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3133, %r361, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3136, %r358, %r3103, %r3133;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r361, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r358, %r3112, %r3140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3147, %r361, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3150, %r358, %r3121, %r3147;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3195, %r3199}, {%r402, %r408, %r405, %r411}, {%r3095, %r3129}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3211, %r3215}, {%r402, %r408, %r405, %r411}, {%r3104, %r3136}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3203, %r3207}, {%r402, %r408, %r405, %r411}, {%r3113, %r3143}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3219, %r3223}, {%r402, %r408, %r405, %r411}, {%r3122, %r3150}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r3195, %r3195, %r3037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3198, %r3199, %r3199, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r3203, %r3203, %r3198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r3207, %r3207, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r3211, %r3211, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r3215, %r3215, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r3219, %r3219, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r3223, %r3223, %r3218;
	// end inline asm
	mov.u32 	%r3491, %r2141;
	mov.u32 	%r3492, %r2141;
	mov.u32 	%r3493, %r2141;
	mov.u32 	%r3494, %r2141;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_87;
LBB0_117:                               // %oksrem13070
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3227, %r96, %r187;
	mul.wide.s32 	%rd270, %r3227, 4;
	add.s64 	%rd272, %rd28, %rd270;
	ld.shared.u32 	%r3494, [%rd272];
	add.s32 	%r3228, %r97, %r187;
	mul.wide.u32 	%rd273, %r3228, 4;
	add.s64 	%rd274, %rd28, %rd273;
	ld.shared.u32 	%r3493, [%rd274];
	add.s32 	%r3229, %r98, %r187;
	mul.wide.s32 	%rd275, %r3229, 4;
	add.s64 	%rd276, %rd28, %rd275;
	ld.shared.u32 	%r3492, [%rd276];
	add.s32 	%r3230, %r99, %r187;
	mul.wide.u32 	%rd277, %r3230, 4;
	add.s64 	%rd278, %rd28, %rd277;
	ld.shared.u32 	%r3491, [%rd278];
LBB0_87:                                // %L30860
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3266, %r3263}, {%r306, %r309}, {%r3494}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3275, %r3272}, {%r306, %r309}, {%r3493}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3284, %r3281}, {%r306, %r309}, {%r3492}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3293, %r3290}, {%r306, %r309}, {%r3491}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3259, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3261, %r3259, %r3263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3264, %r358, %r3266, %r3261;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3268, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3270, %r3268, %r3272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3273, %r358, %r3275, %r3270;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3277, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3279, %r3277, %r3281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3282, %r358, %r3284, %r3279;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3286, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3288, %r3286, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r358, %r3293, %r3288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3295, %r361, %r3266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r358, %r3263, %r3295;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3302, %r361, %r3275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3305, %r358, %r3272, %r3302;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3309, %r361, %r3284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3312, %r358, %r3281, %r3309;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3316, %r361, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3319, %r358, %r3290, %r3316;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3364, %r3368}, {%r402, %r408, %r405, %r411}, {%r3264, %r3298}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3380, %r3384}, {%r402, %r408, %r405, %r411}, {%r3273, %r3305}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3372, %r3376}, {%r402, %r408, %r405, %r411}, {%r3282, %r3312}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3388, %r3392}, {%r402, %r408, %r405, %r411}, {%r3291, %r3319}, {%r2141, %r2141};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3363, %r3364, %r3364, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3367, %r3368, %r3368, %r3363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3371, %r3372, %r3372, %r3367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3452, %r3376, %r3376, %r3371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3379, %r3380, %r3380, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3383, %r3384, %r3384, %r3379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3387, %r3388, %r3388, %r3383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3451, %r3392, %r3392, %r3387;
	// end inline asm
	add.s32 	%r3449, %r3449, 4;
	setp.ne.s32 	%p138, %r3449, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L31006
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L31065
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3395, %r3450, 1152;
	add.s32 	%r3396, %r100, %r3395;
	mul.wide.u32 	%rd279, %r3396, 4;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3452;
	add.s32 	%r3397, %r101, %r3395;
	mul.wide.u32 	%rd281, %r3397, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3451;
	bra.uni 	LBB0_90;
LBB0_93:                                // %L31335
	mov.u32 	%r3399, 0;
	st.global.u32 	[%rd5], %r3399;
	ret;
LBB0_1:                                 // %L8
	ld.param.u32 	%r290, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd13, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r290;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
