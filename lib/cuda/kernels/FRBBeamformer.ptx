// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<142>;
	.reg .b16 	%rs<289>;
	.reg .b32 	%r<3552>;
	.reg .f32 	%f<402>;
	.reg .b64 	%rd<283>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r290, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r290, 76895;
	@%p1 bra 	LBB0_94;
	bra.uni 	LBB0_1;
LBB0_94:                                // %L10
	ld.param.u64 	%rd14, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r291, %r2, %r3;
	mad.lo.s32 	%r292, %r4, 768, %r291;
	mul.wide.u32 	%rd20, %r292, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r293, 1;
	st.global.u32 	[%rd5], %r293;
	and.b32  	%r5, %r3, 3;
	shr.u32 	%r6, %r3, 2;
	mul.lo.s32 	%r294, %r5, %r6;
	and.b32  	%r295, %r294, 7;
	cvt.rn.f32.u32 	%f102, %r295;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f400, %f1;
	setp.lt.f32 	%p2, %f400, 0f40000000;
	@%p2 bra 	LBB0_106;
// %bb.95:
	setp.gtu.f32 	%p3, %f400, 0f4B800000;
	@%p3 bra 	LBB0_102;
	bra.uni 	LBB0_96;
LBB0_102:
	mov.b32 	%r221, %f400;
	and.b32  	%r296, %r221, 8388607;
	or.b32  	%r3550, %r296, 1065353216;
	mov.b32 	%f399, %r3550;
	add.s32 	%r297, %r221, -1073741824;
	and.b32  	%r3551, %r297, -8388608;
	setp.eq.s32 	%p9, %r3551, 0;
	@%p9 bra 	LBB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i1286.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_104:                               // %__nv_fmaf_rn.exit4.i.i.i1286
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r298, %r3551, 192937984;
	add.s32 	%r299, %r298, %r3550;
	mov.b32 	%f114, %r299;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f399, %f114, %f120;
	sub.s32 	%r3551, %r3551, %r298;
	mov.b32 	%r3550, %f399;
	setp.ne.s32 	%p10, %r3551, 0;
	setp.ne.s32 	%p11, %r3550, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_104;
LBB0_105:                               // %__internal_fmodf_slowpath_mod.exit.i.i1288
	setp.gt.u32 	%p13, %r221, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f399, 0f34000000;
	mul.f32 	%f400, %f121, %f122;
	bra.uni 	LBB0_106;
LBB0_96:                                // %__nv_fast_fdividef.exit.i.i.i1258
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f400, %f104;
	cvt.rzi.f32.f32 	%f398, %f105;
	fma.rn.f32 	%f88, %f398, 0fC0000000, %f400;
	mov.b32 	%r220, %f88;
	setp.lt.u32 	%p4, %r220, 1073741824;
	@%p4 bra 	LBB0_101;
// %bb.97:
	setp.lt.u32 	%p5, %r220, -2147483647;
	@%p5 bra 	LBB0_99;
// %bb.98:
	add.f32 	%f110, %f398, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	add.f32 	%f111, %f110, 0fBF800000;
	selp.f32 	%f398, %f111, %f110, %p8;
	bra.uni 	LBB0_101;
LBB0_99:
	add.f32 	%f398, %f398, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i1263
	add.f32 	%f106, %f398, 0f3F800000;
	fma.rn.f32 	%f108, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f108, 0f00000000;
	add.f32 	%f109, %f106, 0f3F800000;
	selp.f32 	%f398, %f109, %f106, %p7;
LBB0_101:                               // %__internal_fmodf_fastpath_quot.exit.i.i1267
	fma.rn.f32 	%f400, %f398, 0fC0000000, %f400;
LBB0_106:                               // %__internal_fmodf_kernel.exit.i1292
	abs.f32 	%f123, %f400;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_108;
// %bb.107:
	mov.b32 	%r300, %f1;
	and.b32  	%r301, %r300, -2147483648;
	mov.b32 	%r302, %f400;
	or.b32  	%r303, %r301, %r302;
	mov.b32 	%f400, %r303;
LBB0_108:                               // %__nv_fmodf.exit1293
	add.f32 	%f125, %f400, %f400;
	mov.b32 	%r310, %f125;
	and.b32  	%r311, %r310, -2147483648;
	or.b32  	%r312, %r311, 1056964608;
	mov.b32 	%f126, %r312;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r313, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f400;
	mul.f32 	%f134, %f133, 0f34222169;
	fma.rn.f32 	%f135, %f133, 0f40490FDA, %f134;
	mul.f32 	%f136, %f135, %f135;
	fma.rn.f32 	%f137, %f136, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f138, %f137, %f136, 0f3D2AAABB;
	fma.rn.f32 	%f139, %f138, %f136, 0fBEFFFFFF;
	fma.rn.f32 	%f140, %f139, %f136, 0f3F800000;
	fma.rn.f32 	%f141, %f136, %f135, 0f00000000;
	fma.rn.f32 	%f142, %f136, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f143, %f142, %f136, 0fBE2AAAA8;
	fma.rn.f32 	%f144, %f143, %f141, %f135;
	and.b32  	%r314, %r313, 1;
	setp.eq.b32 	%p17, %r314, 1;
	selp.f32 	%f145, %f140, %f144, %p17;
	selp.f32 	%f146, %f144, %f140, %p17;
	and.b32  	%r315, %r313, 2;
	setp.eq.s32 	%p18, %r315, 0;
	neg.f32 	%f147, %f145;
	selp.f32 	%f148, %f145, %f147, %p18;
	add.s32 	%r316, %r313, 1;
	and.b32  	%r317, %r316, 2;
	mov.f32 	%f396, 0f00000000;
	cvt.rzi.f32.f32 	%f151, %f400;
	setp.eq.f32 	%p20, %f151, %f400;
	mul.f32 	%f152, %f400, 0f00000000;
	shl.b32 	%r230, %r3, 1;
	and.b32  	%r231, %r230, 6;
	or.b32  	%r232, %r231, 1;
	setp.eq.s32 	%p22, %r231, 6;
	mov.f32 	%f372, 0f41C00000;
	mul.lo.s32 	%r3451, %r231, %r6;
	mov.f32 	%f378, %f396;
	mov.f32 	%f379, %f396;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L186
	cvt.u16.u32 	%rs2, %r3451;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f157, %rs8;
	div.approx.f32 	%f3, %f157, %f372;
	abs.f32 	%f376, %f3;
	setp.lt.f32 	%p23, %f376, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f376, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f376;
	and.b32  	%r319, %r8, 8388607;
	or.b32  	%r3454, %r319, 1065353216;
	mov.b32 	%f375, %r3454;
	add.s32 	%r320, %r8, -1073741824;
	and.b32  	%r3455, %r320, -8388608;
	setp.eq.s32 	%p30, %r3455, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f168, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f167,%f168;
	// end inline asm
LBB0_12:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r321, %r3455, 192937984;
	add.s32 	%r322, %r321, %r3454;
	mov.b32 	%f169, %r322;
	mul.f32 	%f170, %f167, %f169;
	sub.f32 	%f171, %f169, %f170;
	fma.rn.f32 	%f172, %f171, %f167, %f170;
	sub.f32 	%f173, %f169, %f172;
	fma.rz.f32 	%f174, %f173, %f167, %f172;
	cvt.rzi.f32.f32 	%f175, %f174;
	sub.f32 	%f375, %f169, %f175;
	sub.s32 	%r3455, %r3455, %r321;
	mov.b32 	%r3454, %f375;
	setp.ne.s32 	%p31, %r3455, 0;
	setp.ne.s32 	%p32, %r3454, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f176, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f177, %f375, 0f34000000;
	mul.f32 	%f376, %f176, %f177;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f159, 0f40000000;
	div.approx.f32 	%f160, %f376, %f159;
	cvt.rzi.f32.f32 	%f374, %f160;
	fma.rn.f32 	%f6, %f374, 0fC0000000, %f376;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f165, %f374, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	add.f32 	%f166, %f165, 0fBF800000;
	selp.f32 	%f374, %f166, %f165, %p29;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f374, %f374, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f161, %f374, 0f3F800000;
	fma.rn.f32 	%f163, %f159, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f163, 0f00000000;
	add.f32 	%f164, %f161, 0f3F800000;
	selp.f32 	%f374, %f164, %f161, %p28;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f376, %f374, 0fC0000000, %f376;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f178, %f376;
	setp.gtu.f32 	%p35, %f178, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r323, %f3;
	and.b32  	%r324, %r323, -2147483648;
	mov.b32 	%r325, %f376;
	or.b32  	%r326, %r324, %r325;
	mov.b32 	%f376, %r326;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f179, %f376, %f376;
	mov.b32 	%r327, %f179;
	and.b32  	%r328, %r327, -2147483648;
	or.b32  	%r329, %r328, 1056964608;
	mov.b32 	%f180, %r329;
	add.f32 	%f181, %f179, %f180;
	cvt.rzi.f32.f32 	%f182, %f181;
	abs.f32 	%f183, %f179;
	setp.gt.f32 	%p36, %f183, 0f4B000000;
	selp.f32 	%f184, %f179, %f182, %p36;
	cvt.rzi.f32.f32 	%f185, %f179;
	setp.lt.f32 	%p37, %f183, 0f3F000000;
	selp.f32 	%f186, %f185, %f184, %p37;
	cvt.rzi.s32.f32 	%r330, %f186;
	fma.rn.f32 	%f187, %f186, 0fBF000000, %f376;
	mul.f32 	%f188, %f187, 0f34222169;
	fma.rn.f32 	%f189, %f187, 0f40490FDA, %f188;
	mul.f32 	%f190, %f189, %f189;
	fma.rn.f32 	%f191, %f190, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f192, %f191, %f190, 0f3D2AAABB;
	fma.rn.f32 	%f193, %f192, %f190, 0fBEFFFFFF;
	fma.rn.f32 	%f194, %f193, %f190, 0f3F800000;
	fma.rn.f32 	%f195, %f190, %f189, 0f00000000;
	fma.rn.f32 	%f196, %f190, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f197, %f196, %f190, 0fBE2AAAA8;
	fma.rn.f32 	%f198, %f197, %f195, %f189;
	and.b32  	%r331, %r330, 1;
	setp.eq.b32 	%p38, %r331, 1;
	selp.f32 	%f199, %f194, %f198, %p38;
	selp.f32 	%f200, %f198, %f194, %p38;
	and.b32  	%r332, %r330, 2;
	setp.eq.s32 	%p39, %r332, 0;
	neg.f32 	%f201, %f199;
	selp.f32 	%f202, %f199, %f201, %p39;
	add.s32 	%r333, %r330, 1;
	and.b32  	%r334, %r333, 2;
	setp.eq.s32 	%p40, %r334, 0;
	mov.f32 	%f203, 0f00000000;
	sub.f32 	%f204, %f203, %f200;
	selp.f32 	%f205, %f200, %f204, %p40;
	cvt.rzi.f32.f32 	%f206, %f376;
	setp.eq.f32 	%p41, %f206, %f376;
	mul.f32 	%f207, %f376, 0f00000000;
	selp.f32 	%f379, %f207, %f202, %p41;
	abs.f32 	%f208, %f376;
	setp.gt.f32 	%p42, %f208, 0f4B800000;
	add.f32 	%f209, %f379, 0f3F800000;
	selp.f32 	%f378, %f209, %f205, %p42;
LBB0_17:                                // %L202
	setp.eq.s32 	%p19, %r317, 0;
	sub.f32 	%f149, %f396, %f146;
	selp.f32 	%f153, %f152, %f148, %p20;
	abs.f32 	%f154, %f400;
	setp.gt.u32 	%p43, %r232, 5;
	mul.lo.s32 	%r3452, %r232, %r6;
	mov.f32 	%f384, %f396;
	mov.f32 	%f385, %f396;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L206
	mul.hi.u32 	%r336, %r3452, -1431655765;
	shr.u32 	%r337, %r336, 5;
	mul.lo.s32 	%r338, %r337, 48;
	sub.s32 	%r339, %r3452, %r338;
	cvt.rn.f32.s32 	%f211, %r339;
	div.approx.f32 	%f24, %f211, %f372;
	abs.f32 	%f382, %f24;
	setp.lt.f32 	%p44, %f382, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f382, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f382;
	and.b32  	%r340, %r16, 8388607;
	or.b32  	%r3456, %r340, 1065353216;
	mov.b32 	%f381, %r3456;
	add.s32 	%r341, %r16, -1073741824;
	and.b32  	%r3457, %r341, -8388608;
	setp.eq.s32 	%p51, %r3457, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1148.preheader
	mov.f32 	%f222, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f221,%f222;
	// end inline asm
LBB0_28:                                // %__nv_fmaf_rn.exit4.i.i.i1148
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r342, %r3457, 192937984;
	add.s32 	%r343, %r342, %r3456;
	mov.b32 	%f223, %r343;
	mul.f32 	%f224, %f221, %f223;
	sub.f32 	%f225, %f223, %f224;
	fma.rn.f32 	%f226, %f225, %f221, %f224;
	sub.f32 	%f227, %f223, %f226;
	fma.rz.f32 	%f228, %f227, %f221, %f226;
	cvt.rzi.f32.f32 	%f229, %f228;
	sub.f32 	%f381, %f223, %f229;
	sub.s32 	%r3457, %r3457, %r342;
	mov.b32 	%r3456, %f381;
	setp.ne.s32 	%p52, %r3457, 0;
	setp.ne.s32 	%p53, %r3456, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1150
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f230, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f231, %f381, 0f34000000;
	mul.f32 	%f382, %f230, %f231;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1120
	mov.f32 	%f213, 0f40000000;
	div.approx.f32 	%f214, %f382, %f213;
	cvt.rzi.f32.f32 	%f380, %f214;
	fma.rn.f32 	%f27, %f380, 0fC0000000, %f382;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f219, %f380, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	add.f32 	%f220, %f219, 0fBF800000;
	selp.f32 	%f380, %f220, %f219, %p50;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f380, %f380, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1125
	add.f32 	%f215, %f380, 0f3F800000;
	fma.rn.f32 	%f217, %f213, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f217, 0f00000000;
	add.f32 	%f218, %f215, 0f3F800000;
	selp.f32 	%f380, %f218, %f215, %p49;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f382, %f380, 0fC0000000, %f382;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1154
	abs.f32 	%f232, %f382;
	setp.gtu.f32 	%p56, %f232, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r344, %f24;
	and.b32  	%r345, %r344, -2147483648;
	mov.b32 	%r346, %f382;
	or.b32  	%r347, %r345, %r346;
	mov.b32 	%f382, %r347;
LBB0_32:                                // %__nv_fmodf.exit1155
	add.f32 	%f233, %f382, %f382;
	mov.b32 	%r348, %f233;
	and.b32  	%r349, %r348, -2147483648;
	or.b32  	%r350, %r349, 1056964608;
	mov.b32 	%f234, %r350;
	add.f32 	%f235, %f233, %f234;
	cvt.rzi.f32.f32 	%f236, %f235;
	abs.f32 	%f237, %f233;
	setp.gt.f32 	%p57, %f237, 0f4B000000;
	selp.f32 	%f238, %f233, %f236, %p57;
	cvt.rzi.f32.f32 	%f239, %f233;
	setp.lt.f32 	%p58, %f237, 0f3F000000;
	selp.f32 	%f240, %f239, %f238, %p58;
	cvt.rzi.s32.f32 	%r351, %f240;
	fma.rn.f32 	%f241, %f240, 0fBF000000, %f382;
	mul.f32 	%f242, %f241, 0f34222169;
	fma.rn.f32 	%f243, %f241, 0f40490FDA, %f242;
	mul.f32 	%f244, %f243, %f243;
	fma.rn.f32 	%f245, %f244, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f246, %f245, %f244, 0f3D2AAABB;
	fma.rn.f32 	%f247, %f246, %f244, 0fBEFFFFFF;
	fma.rn.f32 	%f248, %f247, %f244, 0f3F800000;
	fma.rn.f32 	%f249, %f244, %f243, 0f00000000;
	fma.rn.f32 	%f250, %f244, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f251, %f250, %f244, 0fBE2AAAA8;
	fma.rn.f32 	%f252, %f251, %f249, %f243;
	and.b32  	%r352, %r351, 1;
	setp.eq.b32 	%p59, %r352, 1;
	selp.f32 	%f253, %f248, %f252, %p59;
	selp.f32 	%f254, %f252, %f248, %p59;
	and.b32  	%r353, %r351, 2;
	setp.eq.s32 	%p60, %r353, 0;
	neg.f32 	%f255, %f253;
	selp.f32 	%f256, %f253, %f255, %p60;
	add.s32 	%r354, %r351, 1;
	and.b32  	%r355, %r354, 2;
	setp.eq.s32 	%p61, %r355, 0;
	mov.f32 	%f257, 0f00000000;
	sub.f32 	%f258, %f257, %f254;
	selp.f32 	%f259, %f254, %f258, %p61;
	cvt.rzi.f32.f32 	%f260, %f382;
	setp.eq.f32 	%p62, %f260, %f382;
	mul.f32 	%f261, %f382, 0f00000000;
	selp.f32 	%f385, %f261, %f256, %p62;
	abs.f32 	%f262, %f382;
	setp.gt.f32 	%p63, %f262, 0f4B800000;
	add.f32 	%f263, %f385, 0f3F800000;
	selp.f32 	%f384, %f263, %f259, %p63;
LBB0_33:                                // %L222
	selp.f32 	%f150, %f146, %f149, %p19;
	setp.gt.f32 	%p21, %f154, 0f4B800000;
	add.f32 	%f155, %f153, 0f3F800000;
	setp.gt.u32 	%p65, %r3, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f373, 0f40400000;
	mov.f32 	%f390, %f396;
	mov.f32 	%f391, %f396;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L259
	cvt.u16.u32 	%rs9, %r3451;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 10;
	mul.lo.s16 	%rs13, %rs12, 6;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f265, %rs15;
	div.approx.f32 	%f45, %f265, %f373;
	abs.f32 	%f388, %f45;
	setp.lt.f32 	%p67, %f388, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f388, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f388;
	and.b32  	%r363, %r26, 8388607;
	or.b32  	%r3458, %r363, 1065353216;
	mov.b32 	%f387, %r3458;
	add.s32 	%r364, %r26, -1073741824;
	and.b32  	%r3459, %r364, -8388608;
	setp.eq.s32 	%p74, %r3459, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1194.preheader
	mov.f32 	%f276, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f275,%f276;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i1194
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r365, %r3459, 192937984;
	add.s32 	%r366, %r365, %r3458;
	mov.b32 	%f277, %r366;
	mul.f32 	%f278, %f275, %f277;
	sub.f32 	%f279, %f277, %f278;
	fma.rn.f32 	%f280, %f279, %f275, %f278;
	sub.f32 	%f281, %f277, %f280;
	fma.rz.f32 	%f282, %f281, %f275, %f280;
	cvt.rzi.f32.f32 	%f283, %f282;
	sub.f32 	%f387, %f277, %f283;
	sub.s32 	%r3459, %r3459, %r365;
	mov.b32 	%r3458, %f387;
	setp.ne.s32 	%p75, %r3459, 0;
	setp.ne.s32 	%p76, %r3458, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1196
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f284, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f285, %f387, 0f34000000;
	mul.f32 	%f388, %f284, %f285;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1166
	mov.f32 	%f267, 0f40000000;
	div.approx.f32 	%f268, %f388, %f267;
	cvt.rzi.f32.f32 	%f386, %f268;
	fma.rn.f32 	%f48, %f386, 0fC0000000, %f388;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f273, %f386, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	add.f32 	%f274, %f273, 0fBF800000;
	selp.f32 	%f386, %f274, %f273, %p73;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f386, %f386, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1171
	add.f32 	%f269, %f386, 0f3F800000;
	fma.rn.f32 	%f271, %f267, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f271, 0f00000000;
	add.f32 	%f272, %f269, 0f3F800000;
	selp.f32 	%f386, %f272, %f269, %p72;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1175
	fma.rn.f32 	%f388, %f386, 0fC0000000, %f388;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1200
	abs.f32 	%f286, %f388;
	setp.gtu.f32 	%p79, %f286, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r367, %f45;
	and.b32  	%r368, %r367, -2147483648;
	mov.b32 	%r369, %f388;
	or.b32  	%r370, %r368, %r369;
	mov.b32 	%f388, %r370;
LBB0_48:                                // %__nv_fmodf.exit1201
	add.f32 	%f287, %f388, %f388;
	mov.b32 	%r371, %f287;
	and.b32  	%r372, %r371, -2147483648;
	or.b32  	%r373, %r372, 1056964608;
	mov.b32 	%f288, %r373;
	add.f32 	%f289, %f287, %f288;
	cvt.rzi.f32.f32 	%f290, %f289;
	abs.f32 	%f291, %f287;
	setp.gt.f32 	%p80, %f291, 0f4B000000;
	selp.f32 	%f292, %f287, %f290, %p80;
	cvt.rzi.f32.f32 	%f293, %f287;
	setp.lt.f32 	%p81, %f291, 0f3F000000;
	selp.f32 	%f294, %f293, %f292, %p81;
	cvt.rzi.s32.f32 	%r374, %f294;
	fma.rn.f32 	%f295, %f294, 0fBF000000, %f388;
	mul.f32 	%f296, %f295, 0f34222169;
	fma.rn.f32 	%f297, %f295, 0f40490FDA, %f296;
	mul.f32 	%f298, %f297, %f297;
	fma.rn.f32 	%f299, %f298, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f300, %f299, %f298, 0f3D2AAABB;
	fma.rn.f32 	%f301, %f300, %f298, 0fBEFFFFFF;
	fma.rn.f32 	%f302, %f301, %f298, 0f3F800000;
	fma.rn.f32 	%f303, %f298, %f297, 0f00000000;
	fma.rn.f32 	%f304, %f298, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f305, %f304, %f298, 0fBE2AAAA8;
	fma.rn.f32 	%f306, %f305, %f303, %f297;
	and.b32  	%r375, %r374, 1;
	setp.eq.b32 	%p82, %r375, 1;
	selp.f32 	%f307, %f302, %f306, %p82;
	selp.f32 	%f308, %f306, %f302, %p82;
	and.b32  	%r376, %r374, 2;
	setp.eq.s32 	%p83, %r376, 0;
	neg.f32 	%f309, %f307;
	selp.f32 	%f310, %f307, %f309, %p83;
	add.s32 	%r377, %r374, 1;
	and.b32  	%r378, %r377, 2;
	setp.eq.s32 	%p84, %r378, 0;
	mov.f32 	%f311, 0f00000000;
	sub.f32 	%f312, %f311, %f308;
	selp.f32 	%f313, %f308, %f312, %p84;
	cvt.rzi.f32.f32 	%f314, %f388;
	setp.eq.f32 	%p85, %f314, %f388;
	mul.f32 	%f315, %f388, 0f00000000;
	selp.f32 	%f391, %f315, %f310, %p85;
	abs.f32 	%f316, %f388;
	setp.gt.f32 	%p86, %f316, 0f4B800000;
	add.f32 	%f317, %f391, 0f3F800000;
	selp.f32 	%f390, %f317, %f313, %p86;
LBB0_49:                                // %L275
	selp.f32 	%f156, %f155, %f150, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f397, %f396;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L283
	mul.hi.u32 	%r380, %r3452, -1431655765;
	shr.u32 	%r381, %r380, 2;
	mul.lo.s32 	%r382, %r381, 6;
	sub.s32 	%r383, %r3452, %r382;
	cvt.rn.f32.s32 	%f319, %r383;
	div.approx.f32 	%f66, %f319, %f373;
	abs.f32 	%f394, %f66;
	setp.lt.f32 	%p90, %f394, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f394, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f394;
	and.b32  	%r384, %r34, 8388607;
	or.b32  	%r3460, %r384, 1065353216;
	mov.b32 	%f393, %r3460;
	add.s32 	%r385, %r34, -1073741824;
	and.b32  	%r3461, %r385, -8388608;
	setp.eq.s32 	%p97, %r3461, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1240.preheader
	mov.f32 	%f330, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f329,%f330;
	// end inline asm
LBB0_60:                                // %__nv_fmaf_rn.exit4.i.i.i1240
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r386, %r3461, 192937984;
	add.s32 	%r387, %r386, %r3460;
	mov.b32 	%f331, %r387;
	mul.f32 	%f332, %f329, %f331;
	sub.f32 	%f333, %f331, %f332;
	fma.rn.f32 	%f334, %f333, %f329, %f332;
	sub.f32 	%f335, %f331, %f334;
	fma.rz.f32 	%f336, %f335, %f329, %f334;
	cvt.rzi.f32.f32 	%f337, %f336;
	sub.f32 	%f393, %f331, %f337;
	sub.s32 	%r3461, %r3461, %r386;
	mov.b32 	%r3460, %f393;
	setp.ne.s32 	%p98, %r3461, 0;
	setp.ne.s32 	%p99, %r3460, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1242
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f338, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f339, %f393, 0f34000000;
	mul.f32 	%f394, %f338, %f339;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f321, 0f40000000;
	div.approx.f32 	%f322, %f394, %f321;
	cvt.rzi.f32.f32 	%f392, %f322;
	fma.rn.f32 	%f69, %f392, 0fC0000000, %f394;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f327, %f392, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f328, %f327, 0fBF800000;
	selp.f32 	%f392, %f328, %f327, %p96;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f392, %f392, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1217
	add.f32 	%f323, %f392, 0f3F800000;
	fma.rn.f32 	%f325, %f321, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f325, 0f00000000;
	add.f32 	%f326, %f323, 0f3F800000;
	selp.f32 	%f392, %f326, %f323, %p95;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1221
	fma.rn.f32 	%f394, %f392, 0fC0000000, %f394;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1246
	abs.f32 	%f340, %f394;
	setp.gtu.f32 	%p102, %f340, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r388, %f66;
	and.b32  	%r389, %r388, -2147483648;
	mov.b32 	%r390, %f394;
	or.b32  	%r391, %r389, %r390;
	mov.b32 	%f394, %r391;
LBB0_64:                                // %__nv_fmodf.exit1247
	add.f32 	%f341, %f394, %f394;
	mov.b32 	%r392, %f341;
	and.b32  	%r393, %r392, -2147483648;
	or.b32  	%r394, %r393, 1056964608;
	mov.b32 	%f342, %r394;
	add.f32 	%f343, %f341, %f342;
	cvt.rzi.f32.f32 	%f344, %f343;
	abs.f32 	%f345, %f341;
	setp.gt.f32 	%p103, %f345, 0f4B000000;
	selp.f32 	%f346, %f341, %f344, %p103;
	cvt.rzi.f32.f32 	%f347, %f341;
	setp.lt.f32 	%p104, %f345, 0f3F000000;
	selp.f32 	%f348, %f347, %f346, %p104;
	cvt.rzi.s32.f32 	%r395, %f348;
	fma.rn.f32 	%f349, %f348, 0fBF000000, %f394;
	mul.f32 	%f350, %f349, 0f34222169;
	fma.rn.f32 	%f351, %f349, 0f40490FDA, %f350;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f353, %f352, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f354, %f353, %f352, 0f3D2AAABB;
	fma.rn.f32 	%f355, %f354, %f352, 0fBEFFFFFF;
	fma.rn.f32 	%f356, %f355, %f352, 0f3F800000;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	fma.rn.f32 	%f358, %f352, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f359, %f358, %f352, 0fBE2AAAA8;
	fma.rn.f32 	%f360, %f359, %f357, %f351;
	and.b32  	%r396, %r395, 1;
	setp.eq.b32 	%p105, %r396, 1;
	selp.f32 	%f361, %f356, %f360, %p105;
	selp.f32 	%f362, %f360, %f356, %p105;
	and.b32  	%r397, %r395, 2;
	setp.eq.s32 	%p106, %r397, 0;
	neg.f32 	%f363, %f361;
	selp.f32 	%f364, %f361, %f363, %p106;
	add.s32 	%r398, %r395, 1;
	and.b32  	%r399, %r398, 2;
	setp.eq.s32 	%p107, %r399, 0;
	mov.f32 	%f365, 0f00000000;
	sub.f32 	%f366, %f365, %f362;
	selp.f32 	%f367, %f362, %f366, %p107;
	cvt.rzi.f32.f32 	%f368, %f394;
	setp.eq.f32 	%p108, %f368, %f394;
	mul.f32 	%f369, %f394, 0f00000000;
	selp.f32 	%f397, %f369, %f364, %p108;
	abs.f32 	%f370, %f394;
	setp.gt.f32 	%p109, %f370, 0f4B800000;
	add.f32 	%f371, %f397, 0f3F800000;
	selp.f32 	%f396, %f371, %f367, %p109;
LBB0_65:                                // %L299
	mov.b32 	%r306, %f156;
	mov.b32 	%r309, %f153;
	mov.b32 	%r401, %f390;
	mov.b32 	%r402, %f396;
	mov.b32 	%r407, %f391;
	mov.b32 	%r408, %f397;
	mov.u32 	%r3462, 999999999;
	cvt.u16.u32 	%rs287, %r3;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L335
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs17, %rs287, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 12;
	mul.lo.s16 	%rs20, %rs19, 24;
	sub.s16 	%rs21, %rs287, %rs20;
	cvt.u32.u16 	%r413, %rs21;
	and.b32  	%r414, %r413, 255;
	mad.lo.s32 	%r415, %r414, 24, %r1;
	cvt.u16.u32 	%rs22, %r415;
	mul.hi.u16 	%rs23, %rs22, -7281;
	shr.u16 	%rs24, %rs23, 9;
	mul.lo.s16 	%rs25, %rs24, 576;
	sub.s16 	%rs26, %rs22, %rs25;
	cvt.u32.u16 	%r416, %rs26;
	mul.wide.u32 	%rd21, %r416, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r417, [%rd22];
	cvt.s32.s16 	%r418, %r417;
	shr.s32 	%r419, %r417, 16;
	mul.lo.s32 	%r420, %r419, 801;
	mad.lo.s32 	%r3462, %r418, 33, %r420;
LBB0_67:                                // %L412
	xor.b32  	%r305, %r309, -2147483648;
	mov.b32 	%r357, %f378;
	mov.b32 	%r358, %f384;
	mov.b32 	%r360, %f379;
	mov.b32 	%r361, %f385;
	xor.b32  	%r404, %r407, -2147483648;
	xor.b32  	%r405, %r408, -2147483648;
	and.b32  	%r47, %r3, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs288, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L412.L717_crit_edge
	cvt.u16.u32 	%rs39, %r1;
	and.b16  	%rs40, %rs39, 255;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, -6;
	add.s16 	%rs44, %rs43, %rs39;
	cvt.u32.u16 	%r436, %rs44;
	and.b32  	%r3466, %r436, 255;
	mul.lo.s16 	%rs46, %rs288, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs288, %rs48;
	cvt.u32.u16 	%r437, %rs49;
	and.b32  	%r3465, %r437, 255;
	cvt.u32.u16 	%r3464, %rs42;
	mul.wide.u16 	%r3463, %rs42, 6;
	mov.u32 	%r3467, 0;
	mov.u32 	%r3468, %r3467;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L438
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	cvt.u16.u32 	%rs27, %r1;
	and.b16  	%rs28, %rs27, 255;
	mul.lo.s16 	%rs29, %rs28, 171;
	shr.u16 	%rs30, %rs29, 10;
	mul.lo.s16 	%rs31, %rs30, -6;
	add.s16 	%rs32, %rs31, %rs27;
	cvt.u32.u16 	%r422, %rs32;
	and.b32  	%r3466, %r422, 255;
	cvt.u32.u16 	%r3464, %rs30;
	mul.wide.u16 	%r3463, %rs30, 6;
	mul.lo.s16 	%rs34, %rs288, 171;
	shr.u16 	%rs35, %rs34, 10;
	mul.lo.s16 	%rs36, %rs35, 6;
	sub.s16 	%rs37, %rs288, %rs36;
	cvt.u32.u16 	%r423, %rs37;
	and.b32  	%r3465, %r423, 255;
	and.b16  	%rs38, %rs37, 255;
	mul.wide.u16 	%r424, %rs38, 24;
	mul.lo.s32 	%r425, %r4, 576;
	mad.lo.s32 	%r426, %r5, 144, %r425;
	or.b32  	%r427, %r426, %r3466;
	add.s32 	%r428, %r427, %r3463;
	add.s32 	%r429, %r428, %r424;
	mul.wide.u32 	%rd23, %r429, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3467, [%rd24];
	add.s32 	%r430, %r426, 147456;
	or.b32  	%r431, %r430, %r3466;
	add.s32 	%r432, %r431, %r3463;
	add.s32 	%r433, %r432, %r424;
	mul.wide.s32 	%rd25, %r433, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3468, [%rd26];
LBB0_70:                                // %L717
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r304, %r306, %r305;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r307, %r309, %r306;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r356, %r358, %r357;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r359, %r361, %r360;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r403, %r405, %r404;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r406, %r408, %r407;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r409, %r402, %r401;
	// end inline asm
	mov.u32 	%r3453, 0;
	shl.b32 	%r439, %r3, 2;
	shl.b32 	%r440, %r3, 11;
	or.b32  	%r441, %r439, %r440;
	and.b32  	%r442, %r440, 32768;
	shl.b32 	%r64, %r4, 7;
	and.b32  	%r65, %r441, 32828;
	or.b32  	%r66, %r442, %r439;
	or.b32  	%r67, %r64, 65;
	add.s32 	%r68, %r1, 24;
	and.b16  	%rs1, %rs287, 16;
	and.b32  	%r443, %r230, 30;
	shr.u32 	%r444, %r3, 4;
	or.b32  	%r445, %r443, %r444;
	mul.lo.s32 	%r69, %r445, 257;
	or.b32  	%r446, %r444, %r230;
	or.b32  	%r447, %r446, 32;
	mul.lo.s32 	%r70, %r447, 257;
	and.b32  	%r448, %r2, 224;
	shr.u32 	%r449, %r1, 3;
	and.b16  	%rs51, %rs287, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs287, %rs54;
	cvt.u32.u16 	%r450, %rs55;
	and.b32  	%r71, %r450, 255;
	mad.lo.s32 	%r72, %r449, 257, %r448;
	shr.u32 	%r451, %r68, 3;
	mad.lo.s32 	%r73, %r451, 257, %r448;
	add.s32 	%r452, %r1, 48;
	shr.u32 	%r453, %r452, 3;
	mad.lo.s32 	%r74, %r453, 257, %r448;
	add.s32 	%r454, %r1, 72;
	shr.u32 	%r455, %r454, 3;
	mad.lo.s32 	%r75, %r455, 257, %r448;
	or.b32  	%r456, %r449, 12;
	mad.lo.s32 	%r76, %r456, 257, %r448;
	add.s32 	%r457, %r1, 120;
	shr.u32 	%r458, %r457, 3;
	mad.lo.s32 	%r77, %r458, 257, %r448;
	add.s32 	%r459, %r1, 144;
	shr.u32 	%r460, %r459, 3;
	mad.lo.s32 	%r78, %r460, 257, %r448;
	add.s32 	%r461, %r1, 168;
	shr.u32 	%r462, %r461, 3;
	mad.lo.s32 	%r79, %r462, 257, %r448;
	or.b32  	%r463, %r449, 24;
	mad.lo.s32 	%r80, %r463, 257, %r448;
	add.s32 	%r464, %r1, 216;
	shr.u32 	%r465, %r464, 3;
	mad.lo.s32 	%r81, %r465, 257, %r448;
	add.s32 	%r466, %r1, 240;
	shr.u32 	%r467, %r466, 3;
	mad.lo.s32 	%r82, %r467, 257, %r448;
	add.s32 	%r468, %r1, 264;
	shr.u32 	%r469, %r468, 3;
	mad.lo.s32 	%r83, %r469, 257, %r448;
	or.b32  	%r470, %r449, 36;
	mad.lo.s32 	%r84, %r470, 257, %r448;
	add.s32 	%r471, %r1, 312;
	shr.u32 	%r472, %r471, 3;
	mad.lo.s32 	%r85, %r472, 257, %r448;
	add.s32 	%r473, %r1, 336;
	shr.u32 	%r474, %r473, 3;
	mad.lo.s32 	%r86, %r474, 257, %r448;
	add.s32 	%r475, %r1, 360;
	shr.u32 	%r476, %r475, 3;
	mad.lo.s32 	%r87, %r476, 257, %r448;
	or.b32  	%r477, %r449, 48;
	mad.lo.s32 	%r88, %r477, 257, %r448;
	add.s32 	%r478, %r1, 408;
	shr.u32 	%r479, %r478, 3;
	mad.lo.s32 	%r89, %r479, 257, %r448;
	add.s32 	%r480, %r1, 432;
	shr.u32 	%r481, %r480, 3;
	mad.lo.s32 	%r90, %r481, 257, %r448;
	add.s32 	%r482, %r1, 456;
	shr.u32 	%r483, %r482, 3;
	mad.lo.s32 	%r91, %r483, 257, %r448;
	or.b32  	%r484, %r449, 60;
	mad.lo.s32 	%r92, %r484, 257, %r448;
	add.s32 	%r485, %r1, 504;
	bfe.u32 	%r486, %r485, 3, 6;
	mad.lo.s32 	%r93, %r486, 257, %r448;
	mul.lo.s32 	%r487, %r5, 4806;
	mad.lo.s32 	%r488, %r3466, 33, %r487;
	mad.lo.s32 	%r489, %r3464, 198, %r488;
	mad.lo.s32 	%r490, %r3465, 801, %r489;
	bfe.u32 	%r491, %r3, 3, 1;
	mul.lo.s32 	%r492, %r491, 514;
	and.b32  	%r493, %r6, 1;
	mul.lo.s32 	%r494, %r493, 1028;
	mul.lo.s32 	%r495, %r444, 257;
	and.b32  	%r496, %r3, 1;
	mul.lo.s32 	%r497, %r496, 4112;
	bfe.u32 	%r498, %r3, 1, 1;
	mul.lo.s32 	%r499, %r498, 2056;
	add.s32 	%r500, %r497, %r495;
	add.s32 	%r501, %r500, %r494;
	add.s32 	%r502, %r501, %r492;
	add.s32 	%r503, %r502, %r3466;
	add.s32 	%r504, %r503, %r499;
	add.s32 	%r94, %r504, %r3463;
	mul.wide.u32 	%rd27, %r94, 4;
	mov.u64 	%rd28, shmem;
	add.s64 	%rd6, %rd28, %rd27;
	add.s32 	%r95, %r94, 8256;
	cvt.u64.u32 	%rd29, %r3463;
	cvt.u64.u32 	%rd30, %r499;
	cvt.u64.u32 	%rd31, %r3466;
	cvt.u64.u32 	%rd32, %r492;
	cvt.u64.u32 	%rd33, %r494;
	cvt.u64.u32 	%rd34, %r497;
	cvt.u64.u32 	%rd35, %r495;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd33;
	add.s64 	%rd38, %rd37, %rd32;
	add.s64 	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	add.s64 	%rd41, %rd40, %rd29;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd7, %rd28, %rd42;
	add.s32 	%r96, %r94, 32;
	add.s32 	%r97, %r94, 8288;
	bfe.u32 	%r505, %r1, 3, 1;
	bfe.u32 	%r506, %r1, 2, 1;
	shr.u32 	%r507, %r1, 4;
	mul.lo.s32 	%r508, %r507, 257;
	and.b32  	%r509, %r1, 1;
	bfe.u32 	%r510, %r1, 1, 1;
	mad.lo.s32 	%r511, %r509, 4112, %r508;
	mad.lo.s32 	%r512, %r5, 6, %r511;
	mad.lo.s32 	%r513, %r506, 1028, %r512;
	mad.lo.s32 	%r514, %r505, 514, %r513;
	mad.lo.s32 	%r515, %r510, 2056, %r514;
	add.s32 	%r98, %r515, %r3465;
	mul.wide.u32 	%rd43, %r98, 4;
	add.s64 	%rd8, %rd28, %rd43;
	add.s32 	%r99, %r98, 8256;
	mul.wide.u32 	%rd44, %r99, 4;
	add.s64 	%rd9, %rd28, %rd44;
	add.s32 	%r100, %r98, 32;
	mul.wide.u32 	%rd45, %r100, 4;
	add.s64 	%rd10, %rd28, %rd45;
	add.s32 	%r101, %r98, 8288;
	mul.wide.u32 	%rd46, %r101, 4;
	add.s64 	%rd11, %rd28, %rd46;
	cvt.u16.u32 	%rs56, %r1;
	shl.b16 	%rs57, %rs56, 1;
	and.b16  	%rs58, %rs57, 254;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r516, %rs62;
	and.b32  	%r517, %r516, 254;
	mul.lo.s32 	%r518, %r4, 58752;
	or.b32  	%r519, %r518, %r71;
	mad.lo.s32 	%r102, %r517, 24, %r519;
	or.b16  	%rs63, %rs57, 1;
	and.b16  	%rs64, %rs63, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 13;
	mul.lo.s16 	%rs67, %rs66, 48;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r520, %rs68;
	and.b32  	%r521, %r520, 255;
	mad.lo.s32 	%r103, %r521, 24, %r519;
	mul.wide.u32 	%rd47, %r490, 4;
	add.s64 	%rd12, %rd28, %rd47;
	setp.gt.u32 	%p112, %r1, 7;
	setp.eq.s16 	%p113, %rs1, 0;
	setp.lt.u32 	%p115, %r3, 24;
	mov.u32 	%r3469, %r3453;
	mov.u32 	%r3500, %r3453;
	mov.u32 	%r3501, %r3453;
	mov.u32 	%r3502, %r3453;
	mov.u32 	%r3503, %r3453;
	bra.uni 	LBB0_71;
LBB0_92:                                // %L31338
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r219, %r3469, 48;
	setp.ne.s32 	%p141, %r3469, 2016;
	mov.u32 	%r3469, %r219;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L720
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r715, %r3469, -1431655765;
	shr.u32 	%r716, %r715, 5;
	mul.lo.s32 	%r109, %r716, 48;
	add.s32 	%r717, %r109, %r1;
	cvt.u16.u32 	%rs69, %r717;
	mul.hi.s16 	%rs70, %rs69, 16257;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 9;
	add.s16 	%rs73, %rs72, %rs71;
	mul.lo.s16 	%rs74, %rs73, 2064;
	sub.s16 	%rs75, %rs69, %rs74;
	cvt.u32.u16 	%r718, %rs75;
	shl.b32 	%r719, %r718, 16;
	or.b32  	%r720, %r719, %r65;
	or.b32  	%r721, %r720, %r64;
	mul.wide.s32 	%rd48, %r721, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r722, %r723, %r724, %r725}, [%rd49];
	or.b32  	%r726, %r719, %r66;
	or.b32  	%r727, %r67, %r726;
	add.s32 	%r728, %r727, -1;
	mul.wide.s32 	%rd50, %r728, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r729, %r730, %r731, %r732}, [%rd51];
	add.s32 	%r733, %r68, %r109;
	cvt.u16.u32 	%rs76, %r733;
	mul.hi.s16 	%rs77, %rs76, 16257;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 9;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 2064;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.u32.u16 	%r734, %rs82;
	shl.b32 	%r735, %r734, 16;
	or.b32  	%r736, %r735, %r65;
	or.b32  	%r737, %r736, %r64;
	mul.wide.s32 	%rd52, %r737, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r738, %r739, %r740, %r741}, [%rd53];
	or.b32  	%r742, %r735, %r66;
	or.b32  	%r743, %r67, %r742;
	add.s32 	%r744, %r743, -1;
	mul.wide.s32 	%rd54, %r744, 4;
	add.s64 	%rd55, %rd3, %rd54;
	ld.global.v4.u32 	{%r745, %r746, %r747, %r748}, [%rd55];
	selp.b32 	%r749, %r724, %r722, %p113;
	shfl.sync.bfly.b32	%r750, %r749, 16, 31, -1;
	selp.b32 	%r524, %r722, %r750, %p113;
	selp.b32 	%r529, %r750, %r724, %p113;
	selp.b32 	%r751, %r725, %r723, %p113;
	shfl.sync.bfly.b32	%r752, %r751, 16, 31, -1;
	selp.b32 	%r532, %r723, %r752, %p113;
	selp.b32 	%r537, %r752, %r725, %p113;
	selp.b32 	%r753, %r731, %r729, %p113;
	shfl.sync.bfly.b32	%r754, %r753, 16, 31, -1;
	selp.b32 	%r540, %r729, %r754, %p113;
	selp.b32 	%r545, %r754, %r731, %p113;
	selp.b32 	%r755, %r732, %r730, %p113;
	shfl.sync.bfly.b32	%r756, %r755, 16, 31, -1;
	selp.b32 	%r548, %r730, %r756, %p113;
	selp.b32 	%r553, %r756, %r732, %p113;
	selp.b32 	%r757, %r740, %r738, %p113;
	shfl.sync.bfly.b32	%r758, %r757, 16, 31, -1;
	selp.b32 	%r556, %r738, %r758, %p113;
	selp.b32 	%r561, %r758, %r740, %p113;
	selp.b32 	%r759, %r741, %r739, %p113;
	shfl.sync.bfly.b32	%r760, %r759, 16, 31, -1;
	selp.b32 	%r564, %r739, %r760, %p113;
	selp.b32 	%r569, %r760, %r741, %p113;
	selp.b32 	%r761, %r747, %r745, %p113;
	shfl.sync.bfly.b32	%r762, %r761, 16, 31, -1;
	selp.b32 	%r572, %r745, %r762, %p113;
	selp.b32 	%r577, %r762, %r747, %p113;
	selp.b32 	%r763, %r748, %r746, %p113;
	shfl.sync.bfly.b32	%r764, %r763, 16, 31, -1;
	selp.b32 	%r580, %r746, %r764, %p113;
	selp.b32 	%r585, %r764, %r748, %p113;
	shl.b32 	%r525, %r529, 4;
	mov.u32 	%r523, 252645135;
	// begin inline asm
	lop3.b32 %r587, %r523, %r524, %r525, 202;
	// end inline asm
	shr.u32 	%r528, %r524, 4;
	// begin inline asm
	lop3.b32 %r603, %r523, %r528, %r529, 202;
	// end inline asm
	shl.b32 	%r533, %r537, 4;
	// begin inline asm
	lop3.b32 %r595, %r523, %r532, %r533, 202;
	// end inline asm
	shr.u32 	%r536, %r532, 4;
	// begin inline asm
	lop3.b32 %r611, %r523, %r536, %r537, 202;
	// end inline asm
	shl.b32 	%r541, %r545, 4;
	// begin inline asm
	lop3.b32 %r619, %r523, %r540, %r541, 202;
	// end inline asm
	shr.u32 	%r544, %r540, 4;
	// begin inline asm
	lop3.b32 %r635, %r523, %r544, %r545, 202;
	// end inline asm
	shl.b32 	%r549, %r553, 4;
	// begin inline asm
	lop3.b32 %r627, %r523, %r548, %r549, 202;
	// end inline asm
	shr.u32 	%r552, %r548, 4;
	// begin inline asm
	lop3.b32 %r643, %r523, %r552, %r553, 202;
	// end inline asm
	shl.b32 	%r557, %r561, 4;
	// begin inline asm
	lop3.b32 %r588, %r523, %r556, %r557, 202;
	// end inline asm
	shr.u32 	%r560, %r556, 4;
	// begin inline asm
	lop3.b32 %r604, %r523, %r560, %r561, 202;
	// end inline asm
	shl.b32 	%r565, %r569, 4;
	// begin inline asm
	lop3.b32 %r596, %r523, %r564, %r565, 202;
	// end inline asm
	shr.u32 	%r568, %r564, 4;
	// begin inline asm
	lop3.b32 %r612, %r523, %r568, %r569, 202;
	// end inline asm
	shl.b32 	%r573, %r577, 4;
	// begin inline asm
	lop3.b32 %r620, %r523, %r572, %r573, 202;
	// end inline asm
	shr.u32 	%r576, %r572, 4;
	// begin inline asm
	lop3.b32 %r636, %r523, %r576, %r577, 202;
	// end inline asm
	shl.b32 	%r581, %r585, 4;
	// begin inline asm
	lop3.b32 %r628, %r523, %r580, %r581, 202;
	// end inline asm
	shr.u32 	%r584, %r580, 4;
	// begin inline asm
	lop3.b32 %r644, %r523, %r584, %r585, 202;
	// end inline asm
	mov.u32 	%r589, 25152;
	// begin inline asm
	prmt.b32 %r651, %r587, %r588, %r589;
	// end inline asm
	mov.u32 	%r593, 29521;
	// begin inline asm
	prmt.b32 %r683, %r587, %r588, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r595, %r596, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r691, %r595, %r596, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r652, %r603, %r604, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r684, %r603, %r604, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r611, %r612, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r692, %r611, %r612, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r667, %r619, %r620, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r699, %r619, %r620, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r675, %r627, %r628, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r627, %r628, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r668, %r635, %r636, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r635, %r636, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r676, %r643, %r644, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r643, %r644, %r593;
	// end inline asm
	mov.u32 	%r709, 21520;
	// begin inline asm
	prmt.b32 %r650, %r651, %r652, %r709;
	// end inline asm
	mov.u32 	%r713, 30258;
	// begin inline asm
	prmt.b32 %r654, %r651, %r652, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r659, %r660, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r659, %r660, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r666, %r667, %r668, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r667, %r668, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r674, %r675, %r676, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r675, %r676, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r682, %r683, %r684, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r683, %r684, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r690, %r691, %r692, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r691, %r692, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r698, %r699, %r700, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r699, %r700, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r707, %r708, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r707, %r708, %r713;
	// end inline asm
	mul.hi.s16 	%rs83, %rs69, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs69, %rs87;
	cvt.s32.s16 	%r765, %rs88;
	add.s32 	%r766, %r69, %r765;
	mul.wide.s32 	%rd56, %r766, 4;
	add.s64 	%rd58, %rd28, %rd56;
	st.shared.u32 	[%rd58], %r650;
	st.shared.u32 	[%rd58+512], %r658;
	st.shared.u32 	[%rd58+256], %r654;
	st.shared.u32 	[%rd58+768], %r662;
	add.s32 	%r767, %r70, %r765;
	mul.wide.s32 	%rd59, %r767, 4;
	add.s64 	%rd60, %rd28, %rd59;
	st.shared.u32 	[%rd60], %r666;
	st.shared.u32 	[%rd60+512], %r674;
	st.shared.u32 	[%rd60+256], %r670;
	st.shared.u32 	[%rd60+768], %r678;
	st.shared.u32 	[%rd58+128], %r682;
	st.shared.u32 	[%rd58+640], %r690;
	st.shared.u32 	[%rd58+384], %r686;
	st.shared.u32 	[%rd58+896], %r694;
	st.shared.u32 	[%rd60+128], %r698;
	st.shared.u32 	[%rd60+640], %r706;
	st.shared.u32 	[%rd60+384], %r702;
	st.shared.u32 	[%rd60+896], %r710;
	bar.sync 	0;
	add.s32 	%r768, %r109, %r71;
	cvt.u16.u32 	%rs89, %r768;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r769, %rs95;
	add.s32 	%r770, %r72, %r769;
	mul.wide.s32 	%rd61, %r770, 4;
	add.s64 	%rd62, %rd28, %rd61;
	ld.shared.u32 	%r771, [%rd62];
	add.s32 	%r772, %r73, %r769;
	mul.wide.u32 	%rd63, %r772, 4;
	add.s64 	%rd64, %rd28, %rd63;
	ld.shared.u32 	%r773, [%rd64];
	add.s32 	%r774, %r74, %r769;
	mul.wide.u32 	%rd65, %r774, 4;
	add.s64 	%rd66, %rd28, %rd65;
	ld.shared.u32 	%r775, [%rd66];
	add.s32 	%r776, %r75, %r769;
	mul.wide.u32 	%rd67, %r776, 4;
	add.s64 	%rd68, %rd28, %rd67;
	ld.shared.u32 	%r777, [%rd68];
	add.s32 	%r778, %r76, %r769;
	mul.wide.s32 	%rd69, %r778, 4;
	add.s64 	%rd70, %rd28, %rd69;
	ld.shared.u32 	%r779, [%rd70];
	add.s32 	%r780, %r77, %r769;
	mul.wide.u32 	%rd71, %r780, 4;
	add.s64 	%rd72, %rd28, %rd71;
	ld.shared.u32 	%r781, [%rd72];
	add.s32 	%r782, %r78, %r769;
	mul.wide.u32 	%rd73, %r782, 4;
	add.s64 	%rd74, %rd28, %rd73;
	ld.shared.u32 	%r783, [%rd74];
	add.s32 	%r784, %r79, %r769;
	mul.wide.u32 	%rd75, %r784, 4;
	add.s64 	%rd76, %rd28, %rd75;
	ld.shared.u32 	%r785, [%rd76];
	add.s32 	%r786, %r80, %r769;
	mul.wide.s32 	%rd77, %r786, 4;
	add.s64 	%rd78, %rd28, %rd77;
	ld.shared.u32 	%r787, [%rd78];
	add.s32 	%r788, %r81, %r769;
	mul.wide.u32 	%rd79, %r788, 4;
	add.s64 	%rd80, %rd28, %rd79;
	ld.shared.u32 	%r789, [%rd80];
	add.s32 	%r790, %r82, %r769;
	mul.wide.u32 	%rd81, %r790, 4;
	add.s64 	%rd82, %rd28, %rd81;
	ld.shared.u32 	%r791, [%rd82];
	add.s32 	%r792, %r83, %r769;
	mul.wide.u32 	%rd83, %r792, 4;
	add.s64 	%rd84, %rd28, %rd83;
	ld.shared.u32 	%r793, [%rd84];
	add.s32 	%r794, %r84, %r769;
	mul.wide.s32 	%rd85, %r794, 4;
	add.s64 	%rd86, %rd28, %rd85;
	ld.shared.u32 	%r795, [%rd86];
	add.s32 	%r796, %r85, %r769;
	mul.wide.u32 	%rd87, %r796, 4;
	add.s64 	%rd88, %rd28, %rd87;
	ld.shared.u32 	%r797, [%rd88];
	add.s32 	%r798, %r86, %r769;
	mul.wide.u32 	%rd89, %r798, 4;
	add.s64 	%rd90, %rd28, %rd89;
	ld.shared.u32 	%r799, [%rd90];
	add.s32 	%r800, %r87, %r769;
	mul.wide.u32 	%rd91, %r800, 4;
	add.s64 	%rd92, %rd28, %rd91;
	ld.shared.u32 	%r801, [%rd92];
	add.s32 	%r802, %r88, %r769;
	mul.wide.s32 	%rd93, %r802, 4;
	add.s64 	%rd94, %rd28, %rd93;
	ld.shared.u32 	%r803, [%rd94];
	add.s32 	%r804, %r89, %r769;
	mul.wide.u32 	%rd95, %r804, 4;
	add.s64 	%rd96, %rd28, %rd95;
	ld.shared.u32 	%r805, [%rd96];
	add.s32 	%r806, %r90, %r769;
	mul.wide.u32 	%rd97, %r806, 4;
	add.s64 	%rd98, %rd28, %rd97;
	ld.shared.u32 	%r807, [%rd98];
	add.s32 	%r808, %r91, %r769;
	mul.wide.u32 	%rd99, %r808, 4;
	add.s64 	%rd100, %rd28, %rd99;
	ld.shared.u32 	%r809, [%rd100];
	add.s32 	%r810, %r92, %r769;
	mul.wide.s32 	%rd101, %r810, 4;
	add.s64 	%rd102, %rd28, %rd101;
	ld.shared.u32 	%r811, [%rd102];
	add.s32 	%r812, %r93, %r769;
	mul.wide.s32 	%rd103, %r812, 4;
	add.s64 	%rd104, %rd28, %rd103;
	ld.shared.u32 	%r813, [%rd104];
	bar.sync 	0;
	shfl.sync.idx.b32	%r814, %r3462, 0, 31, -1;
	shfl.sync.idx.b32	%r815, %r3462, 1, 31, -1;
	shfl.sync.idx.b32	%r816, %r3462, 2, 31, -1;
	shfl.sync.idx.b32	%r817, %r3462, 3, 31, -1;
	shfl.sync.idx.b32	%r818, %r3462, 4, 31, -1;
	shfl.sync.idx.b32	%r819, %r3462, 5, 31, -1;
	shfl.sync.idx.b32	%r820, %r3462, 6, 31, -1;
	shfl.sync.idx.b32	%r821, %r3462, 7, 31, -1;
	shfl.sync.idx.b32	%r822, %r3462, 8, 31, -1;
	shfl.sync.idx.b32	%r823, %r3462, 9, 31, -1;
	shfl.sync.idx.b32	%r824, %r3462, 10, 31, -1;
	shfl.sync.idx.b32	%r825, %r3462, 11, 31, -1;
	shfl.sync.idx.b32	%r826, %r3462, 12, 31, -1;
	shfl.sync.idx.b32	%r827, %r3462, 13, 31, -1;
	shfl.sync.idx.b32	%r828, %r3462, 14, 31, -1;
	shfl.sync.idx.b32	%r829, %r3462, 15, 31, -1;
	shfl.sync.idx.b32	%r830, %r3462, 16, 31, -1;
	shfl.sync.idx.b32	%r831, %r3462, 17, 31, -1;
	shfl.sync.idx.b32	%r832, %r3462, 18, 31, -1;
	shfl.sync.idx.b32	%r833, %r3462, 19, 31, -1;
	shfl.sync.idx.b32	%r834, %r3462, 20, 31, -1;
	shfl.sync.idx.b32	%r835, %r3462, 21, 31, -1;
	shfl.sync.idx.b32	%r836, %r3462, 22, 31, -1;
	shfl.sync.idx.b32	%r837, %r3462, 23, 31, -1;
	add.s32 	%r838, %r814, %r769;
	mul.wide.s32 	%rd105, %r838, 4;
	add.s64 	%rd106, %rd28, %rd105;
	st.shared.u32 	[%rd106], %r771;
	add.s32 	%r839, %r815, %r769;
	mul.wide.s32 	%rd107, %r839, 4;
	add.s64 	%rd108, %rd28, %rd107;
	st.shared.u32 	[%rd108], %r773;
	add.s32 	%r840, %r816, %r769;
	mul.wide.s32 	%rd109, %r840, 4;
	add.s64 	%rd110, %rd28, %rd109;
	st.shared.u32 	[%rd110], %r775;
	add.s32 	%r841, %r817, %r769;
	mul.wide.s32 	%rd111, %r841, 4;
	add.s64 	%rd112, %rd28, %rd111;
	st.shared.u32 	[%rd112], %r777;
	add.s32 	%r842, %r818, %r769;
	mul.wide.s32 	%rd113, %r842, 4;
	add.s64 	%rd114, %rd28, %rd113;
	st.shared.u32 	[%rd114], %r779;
	add.s32 	%r843, %r819, %r769;
	mul.wide.s32 	%rd115, %r843, 4;
	add.s64 	%rd116, %rd28, %rd115;
	st.shared.u32 	[%rd116], %r781;
	add.s32 	%r844, %r820, %r769;
	mul.wide.s32 	%rd117, %r844, 4;
	add.s64 	%rd118, %rd28, %rd117;
	st.shared.u32 	[%rd118], %r783;
	add.s32 	%r845, %r821, %r769;
	mul.wide.s32 	%rd119, %r845, 4;
	add.s64 	%rd120, %rd28, %rd119;
	st.shared.u32 	[%rd120], %r785;
	add.s32 	%r846, %r822, %r769;
	mul.wide.s32 	%rd121, %r846, 4;
	add.s64 	%rd122, %rd28, %rd121;
	st.shared.u32 	[%rd122], %r787;
	add.s32 	%r847, %r823, %r769;
	mul.wide.s32 	%rd123, %r847, 4;
	add.s64 	%rd124, %rd28, %rd123;
	st.shared.u32 	[%rd124], %r789;
	add.s32 	%r848, %r824, %r769;
	mul.wide.s32 	%rd125, %r848, 4;
	add.s64 	%rd126, %rd28, %rd125;
	st.shared.u32 	[%rd126], %r791;
	add.s32 	%r849, %r825, %r769;
	mul.wide.s32 	%rd127, %r849, 4;
	add.s64 	%rd128, %rd28, %rd127;
	st.shared.u32 	[%rd128], %r793;
	add.s32 	%r850, %r826, %r769;
	mul.wide.s32 	%rd129, %r850, 4;
	add.s64 	%rd130, %rd28, %rd129;
	st.shared.u32 	[%rd130], %r795;
	add.s32 	%r851, %r827, %r769;
	mul.wide.s32 	%rd131, %r851, 4;
	add.s64 	%rd132, %rd28, %rd131;
	st.shared.u32 	[%rd132], %r797;
	add.s32 	%r852, %r828, %r769;
	mul.wide.s32 	%rd133, %r852, 4;
	add.s64 	%rd134, %rd28, %rd133;
	st.shared.u32 	[%rd134], %r799;
	add.s32 	%r853, %r829, %r769;
	mul.wide.s32 	%rd135, %r853, 4;
	add.s64 	%rd136, %rd28, %rd135;
	st.shared.u32 	[%rd136], %r801;
	add.s32 	%r854, %r830, %r769;
	mul.wide.s32 	%rd137, %r854, 4;
	add.s64 	%rd138, %rd28, %rd137;
	st.shared.u32 	[%rd138], %r803;
	add.s32 	%r855, %r831, %r769;
	mul.wide.s32 	%rd139, %r855, 4;
	add.s64 	%rd140, %rd28, %rd139;
	st.shared.u32 	[%rd140], %r805;
	add.s32 	%r856, %r832, %r769;
	mul.wide.s32 	%rd141, %r856, 4;
	add.s64 	%rd142, %rd28, %rd141;
	st.shared.u32 	[%rd142], %r807;
	add.s32 	%r857, %r833, %r769;
	mul.wide.s32 	%rd143, %r857, 4;
	add.s64 	%rd144, %rd28, %rd143;
	st.shared.u32 	[%rd144], %r809;
	add.s32 	%r858, %r834, %r769;
	mul.wide.s32 	%rd145, %r858, 4;
	add.s64 	%rd146, %rd28, %rd145;
	st.shared.u32 	[%rd146], %r811;
	selp.b32 	%r859, 0, %r813, %p112;
	add.s32 	%r860, %r835, %r769;
	mul.wide.s32 	%rd147, %r860, 4;
	add.s64 	%rd148, %rd28, %rd147;
	st.shared.u32 	[%rd148], %r859;
	add.s32 	%r861, %r836, %r769;
	mul.wide.s32 	%rd149, %r861, 4;
	add.s64 	%rd150, %rd28, %rd149;
	st.shared.u32 	[%rd150], %r3453;
	add.s32 	%r862, %r837, %r769;
	mul.wide.s32 	%rd151, %r862, 4;
	add.s64 	%rd152, %rd28, %rd151;
	st.shared.u32 	[%rd152], %r3453;
	bar.sync 	0;
	mov.u32 	%r3474, %r3453;
	mov.u32 	%r3475, %r3453;
	mov.u32 	%r3476, %r3453;
	mov.u32 	%r3477, %r3453;
	mov.u32 	%r3478, %r3453;
	mov.u32 	%r3479, %r3453;
	mov.u32 	%r3480, %r3453;
	mov.u32 	%r3481, %r3453;
	mov.u32 	%r3482, %r3453;
	mov.u32 	%r3483, %r3453;
	mov.u32 	%r3484, %r3453;
	mov.u32 	%r3485, %r3453;
	mov.u32 	%r3486, %r3453;
	mov.u32 	%r3487, %r3453;
	mov.u32 	%r3488, %r3453;
	mov.u32 	%r3489, %r3453;
	mov.u32 	%r3490, %r3453;
	mov.u32 	%r3491, %r3453;
	mov.u32 	%r3492, %r3453;
	mov.u32 	%r3493, %r3453;
	mov.u32 	%r3494, %r3453;
	mov.u32 	%r3495, %r3453;
	mov.u32 	%r3496, %r3453;
	mov.u32 	%r3497, %r3453;
	@%p111 bra 	LBB0_109;
	bra.uni 	LBB0_72;
LBB0_109:                               // %oksrem3282
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs96, %r109;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r863, %rs102;
	mul.wide.s32 	%rd153, %r863, 4;
	add.s64 	%rd154, %rd12, %rd153;
	ld.shared.u32 	%r3474, [%rd154];
	ld.shared.u32 	%r3475, [%rd12+4];
	ld.shared.u32 	%r3476, [%rd12+8];
	ld.shared.u32 	%r3477, [%rd12+12];
	ld.shared.u32 	%r3478, [%rd12+16];
	ld.shared.u32 	%r3479, [%rd12+20];
	ld.shared.u32 	%r3480, [%rd12+24];
	ld.shared.u32 	%r3481, [%rd12+28];
	ld.shared.u32 	%r3482, [%rd12+32];
	ld.shared.u32 	%r3483, [%rd12+36];
	ld.shared.u32 	%r3484, [%rd12+40];
	ld.shared.u32 	%r3485, [%rd12+44];
	ld.shared.u32 	%r3486, [%rd12+48];
	ld.shared.u32 	%r3487, [%rd12+52];
	ld.shared.u32 	%r3488, [%rd12+56];
	ld.shared.u32 	%r3489, [%rd12+60];
	add.s16 	%rs103, %rs96, 16;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r864, %rs109;
	mul.wide.s32 	%rd155, %r864, 4;
	add.s64 	%rd156, %rd12, %rd155;
	ld.shared.u32 	%r3490, [%rd156];
	add.s16 	%rs110, %rs96, 17;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r865, %rs116;
	mul.wide.s32 	%rd157, %r865, 4;
	add.s64 	%rd158, %rd12, %rd157;
	ld.shared.u32 	%r3491, [%rd158];
	add.s16 	%rs117, %rs96, 18;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r866, %rs123;
	mul.wide.s32 	%rd159, %r866, 4;
	add.s64 	%rd160, %rd12, %rd159;
	ld.shared.u32 	%r3492, [%rd160];
	add.s16 	%rs124, %rs96, 19;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r867, %rs130;
	mul.wide.s32 	%rd161, %r867, 4;
	add.s64 	%rd162, %rd12, %rd161;
	ld.shared.u32 	%r3493, [%rd162];
	add.s16 	%rs131, %rs96, 20;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r868, %rs137;
	mul.wide.s32 	%rd163, %r868, 4;
	add.s64 	%rd164, %rd12, %rd163;
	ld.shared.u32 	%r3494, [%rd164];
	add.s16 	%rs138, %rs96, 21;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r869, %rs144;
	mul.wide.s32 	%rd165, %r869, 4;
	add.s64 	%rd166, %rd12, %rd165;
	ld.shared.u32 	%r3495, [%rd166];
	add.s16 	%rs145, %rs96, 22;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r870, %rs151;
	mul.wide.s32 	%rd167, %r870, 4;
	add.s64 	%rd168, %rd12, %rd167;
	ld.shared.u32 	%r3496, [%rd168];
	add.s16 	%rs152, %rs96, 23;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r871, %rs158;
	mul.wide.s32 	%rd169, %r871, 4;
	add.s64 	%rd170, %rd12, %rd169;
	ld.shared.u32 	%r3497, [%rd170];
LBB0_72:                                // %L11281
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	mov.u32 	%r3498, 12;
	mov.u32 	%r3499, %r3453;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L21300
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3500, 0;
	mov.u32 	%r3502, %r3500;
	mov.u32 	%r3503, %r3500;
LBB0_81:                                // %L21301
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3499, %r3499, 1;
	add.s32 	%r3498, %r3498, -4;
	setp.ne.s32 	%p127, %r3498, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L11307
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3498, 12;
	selp.b32 	%r1411, %r3474, 0, %p116;
	setp.eq.s32 	%p117, %r3498, 8;
	selp.b32 	%r1412, %r3478, %r1411, %p117;
	setp.eq.s32 	%p118, %r3498, 4;
	selp.b32 	%r1413, %r3482, %r1412, %p118;
	setp.eq.s32 	%p119, %r3498, 0;
	selp.b32 	%r1414, %r3486, %r1413, %p119;
	setp.eq.s32 	%p120, %r3498, -4;
	selp.b32 	%r1415, %r3490, %r1414, %p120;
	setp.eq.s32 	%p121, %r3498, -8;
	selp.b32 	%r1416, %r3494, %r1415, %p121;
	selp.b32 	%r1417, %r3475, 0, %p116;
	selp.b32 	%r1418, %r3479, %r1417, %p117;
	selp.b32 	%r1419, %r3483, %r1418, %p118;
	selp.b32 	%r1420, %r3487, %r1419, %p119;
	selp.b32 	%r1421, %r3491, %r1420, %p120;
	selp.b32 	%r1422, %r3495, %r1421, %p121;
	selp.b32 	%r1423, %r3476, 0, %p116;
	selp.b32 	%r1424, %r3480, %r1423, %p117;
	selp.b32 	%r1425, %r3484, %r1424, %p118;
	selp.b32 	%r1426, %r3488, %r1425, %p119;
	selp.b32 	%r1427, %r3492, %r1426, %p120;
	selp.b32 	%r1428, %r3496, %r1427, %p121;
	selp.b32 	%r1429, %r3477, 0, %p116;
	selp.b32 	%r1430, %r3481, %r1429, %p117;
	selp.b32 	%r1431, %r3485, %r1430, %p118;
	selp.b32 	%r1432, %r3489, %r1431, %p119;
	selp.b32 	%r1433, %r3493, %r1432, %p120;
	selp.b32 	%r1434, %r3497, %r1433, %p121;
	mov.u16 	%rs196, 25600;
	// begin inline asm
	mov.b32 %r879, {%rs196, %rs196};
	// end inline asm
	mov.u16 	%rs198, 21504;
	// begin inline asm
	mov.b32 %r890, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r878, %r1416, -2004318072;
	mov.u32 	%r1015, 983055;
	// begin inline asm
	lop3.b32 %r876, %r1015, %r878, %r879, 202;
	// end inline asm
	mov.u16 	%rs202, 18432;
	// begin inline asm
	mov.b32 %r880, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r881, %r879, %r880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r884, %r876, %r881;
	// end inline asm
	mov.u32 	%r1026, 15728880;
	// begin inline asm
	lop3.b32 %r887, %r1026, %r878, %r890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r892, %r890, %r891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r895, %r887, %r892;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r924, %r1422, -2004318072;
	// begin inline asm
	lop3.b32 %r922, %r1015, %r924, %r925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r927, %r925, %r926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r930, %r922, %r927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r933, %r1026, %r924, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r970, %r1428, -2004318072;
	// begin inline asm
	lop3.b32 %r968, %r1015, %r970, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r973, %r971, %r972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r976, %r968, %r973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r979, %r1026, %r970, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r1016, %r1434, -2004318072;
	// begin inline asm
	lop3.b32 %r1014, %r1015, %r1016, %r1017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1019, %r1017, %r1018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1022, %r1014, %r1019;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1025, %r1026, %r1016, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1030, %r1028, %r1029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1033, %r1025, %r1030;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3467;
    mov.b32 {%r2re, %r2im}, %r884;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1058, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r895;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1061, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3467;
    mov.b32 {%r2re, %r2im}, %r930;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1064, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r941;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1067, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3467;
    mov.b32 {%r2re, %r2im}, %r976;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1070, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r987;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1073, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3467;
    mov.b32 {%r2re, %r2im}, %r1022;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1076, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r1033;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1079, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1145, %r1142}, {%r304, %r307}, {%r1058}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1154, %r1151}, {%r304, %r307}, {%r1061}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1163, %r1160}, {%r304, %r307}, {%r1064}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1172, %r1169}, {%r304, %r307}, {%r1067}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1181, %r1178}, {%r304, %r307}, {%r1070}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1190, %r1187}, {%r304, %r307}, {%r1073}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1199, %r1196}, {%r304, %r307}, {%r1076}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1208, %r1205}, {%r304, %r307}, {%r1079}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1138, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1140, %r1138, %r1142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r356, %r1145, %r1140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1147, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1149, %r1147, %r1151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r356, %r1154, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1156, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r1156, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r356, %r1163, %r1158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1165, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r1165, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r356, %r1172, %r1167;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1174, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1176, %r1174, %r1178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r356, %r1181, %r1176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1183, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r1183, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r356, %r1190, %r1185;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1192, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1194, %r1192, %r1196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1197, %r356, %r1199, %r1194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1201, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1203, %r1201, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1206, %r356, %r1208, %r1203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1210, %r359, %r1145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r356, %r1142, %r1210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r359, %r1154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r356, %r1151, %r1217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1224, %r359, %r1163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r356, %r1160, %r1224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1231, %r359, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1234, %r356, %r1169, %r1231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1238, %r359, %r1181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1241, %r356, %r1178, %r1238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r359, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r356, %r1187, %r1245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r359, %r1199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r356, %r1196, %r1252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1259, %r359, %r1208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1262, %r356, %r1205, %r1259;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1347, %r1348}, {%r400, %r406, %r403, %r409}, {%r1143, %r1213}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1355, %r1356}, {%r400, %r406, %r403, %r409}, {%r1152, %r1220}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1363, %r1364}, {%r400, %r406, %r403, %r409}, {%r1161, %r1227}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1371, %r1372}, {%r400, %r406, %r403, %r409}, {%r1170, %r1234}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1379, %r1380}, {%r400, %r406, %r403, %r409}, {%r1179, %r1241}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1387, %r1388}, {%r400, %r406, %r403, %r409}, {%r1188, %r1248}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1395, %r1396}, {%r400, %r406, %r403, %r409}, {%r1197, %r1255}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1403, %r1404}, {%r400, %r406, %r403, %r409}, {%r1206, %r1262}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1346, %r1347, %r1348, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1350, %r1347, %r1348, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1354, %r1355, %r1356, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1358, %r1355, %r1356, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1362, %r1363, %r1364, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1366, %r1363, %r1364, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1370, %r1371, %r1372, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1374, %r1371, %r1372, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1378, %r1379, %r1380, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1382, %r1379, %r1380, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1386, %r1387, %r1388, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1390, %r1387, %r1388, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1394, %r1395, %r1396, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1398, %r1395, %r1396, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1402, %r1403, %r1404, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1406, %r1403, %r1404, %r713;
	// end inline asm
	st.shared.u32 	[%rd6], %r1346;
	st.shared.u32 	[%rd7+33024], %r1350;
	st.shared.u32 	[%rd7+128], %r1354;
	st.shared.u32 	[%rd7+33152], %r1358;
	cvt.u16.u32 	%rs207, %r3499;
	and.b16  	%rs208, %rs207, 255;
	mul.lo.s16 	%rs209, %rs208, 171;
	shr.u16 	%rs210, %rs209, 10;
	mul.lo.s16 	%rs211, %rs210, 6;
	sub.s16 	%rs212, %rs207, %rs211;
	shl.b16 	%rs213, %rs212, 2;
	cvt.u32.u16 	%r1435, %rs213;
	and.b32  	%r1436, %r1435, 252;
	add.s32 	%r1437, %r109, %r1436;
	add.s32 	%r1438, %r1437, 1;
	shr.s32 	%r1439, %r1438, 31;
	shr.u32 	%r1440, %r1439, 30;
	add.s32 	%r1441, %r1438, %r1440;
	and.b32  	%r1442, %r1441, 67108860;
	sub.s32 	%r1443, %r1438, %r1442;
	shl.b32 	%r140, %r1443, 6;
	add.s32 	%r1444, %r94, %r140;
	mul.wide.s32 	%rd171, %r1444, 4;
	add.s64 	%rd173, %rd28, %rd171;
	st.shared.u32 	[%rd173], %r1362;
	add.s32 	%r1445, %r95, %r140;
	mul.wide.u32 	%rd174, %r1445, 4;
	add.s64 	%rd175, %rd28, %rd174;
	st.shared.u32 	[%rd175], %r1366;
	add.s32 	%r1446, %r96, %r140;
	mul.wide.s32 	%rd176, %r1446, 4;
	add.s64 	%rd177, %rd28, %rd176;
	st.shared.u32 	[%rd177], %r1370;
	add.s32 	%r1447, %r97, %r140;
	mul.wide.u32 	%rd178, %r1447, 4;
	add.s64 	%rd179, %rd28, %rd178;
	st.shared.u32 	[%rd179], %r1374;
	add.s32 	%r1448, %r1437, 2;
	shr.s32 	%r1449, %r1448, 31;
	shr.u32 	%r1450, %r1449, 30;
	add.s32 	%r1451, %r1448, %r1450;
	and.b32  	%r1452, %r1451, 67108860;
	sub.s32 	%r1453, %r1448, %r1452;
	shl.b32 	%r141, %r1453, 6;
	add.s32 	%r1454, %r94, %r141;
	mul.wide.s32 	%rd180, %r1454, 4;
	add.s64 	%rd181, %rd28, %rd180;
	st.shared.u32 	[%rd181], %r1378;
	add.s32 	%r1455, %r95, %r141;
	mul.wide.u32 	%rd182, %r1455, 4;
	add.s64 	%rd183, %rd28, %rd182;
	st.shared.u32 	[%rd183], %r1382;
	add.s32 	%r1456, %r96, %r141;
	mul.wide.s32 	%rd184, %r1456, 4;
	add.s64 	%rd185, %rd28, %rd184;
	st.shared.u32 	[%rd185], %r1386;
	add.s32 	%r1457, %r97, %r141;
	mul.wide.u32 	%rd186, %r1457, 4;
	add.s64 	%rd187, %rd28, %rd186;
	st.shared.u32 	[%rd187], %r1390;
	add.s32 	%r1458, %r1437, 3;
	shr.s32 	%r1459, %r1458, 31;
	shr.u32 	%r1460, %r1459, 30;
	add.s32 	%r1461, %r1458, %r1460;
	and.b32  	%r1462, %r1461, 67108860;
	sub.s32 	%r1463, %r1458, %r1462;
	shl.b32 	%r142, %r1463, 6;
	add.s32 	%r1464, %r94, %r142;
	mul.wide.s32 	%rd188, %r1464, 4;
	add.s64 	%rd189, %rd28, %rd188;
	st.shared.u32 	[%rd189], %r1394;
	add.s32 	%r1465, %r95, %r142;
	mul.wide.u32 	%rd190, %r1465, 4;
	add.s64 	%rd191, %rd28, %rd190;
	st.shared.u32 	[%rd191], %r1398;
	add.s32 	%r1466, %r96, %r142;
	mul.wide.s32 	%rd192, %r1466, 4;
	add.s64 	%rd193, %rd28, %rd192;
	st.shared.u32 	[%rd193], %r1402;
	add.s32 	%r1467, %r97, %r142;
	mul.wide.u32 	%rd194, %r1467, 4;
	add.s64 	%rd195, %rd28, %rd194;
	st.shared.u32 	[%rd195], %r1406;
	bar.sync 	0;
	mov.u32 	%r3504, %r3453;
	mov.u32 	%r3505, %r3453;
	mov.u32 	%r3506, %r3453;
	mov.u32 	%r3507, %r3453;
	@%p115 bra 	LBB0_110;
	bra.uni 	LBB0_74;
LBB0_110:                               // %oksrem7092
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3504, [%rd8];
	ld.shared.u32 	%r3505, [%rd9];
	ld.shared.u32 	%r3506, [%rd10];
	ld.shared.u32 	%r3507, [%rd11];
LBB0_74:                                // %L17182
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1503, %r1500}, {%r304, %r307}, {%r3504}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1512, %r1509}, {%r304, %r307}, {%r3505}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r304, %r307}, {%r3506}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1530, %r1527}, {%r304, %r307}, {%r3507}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1496, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1498, %r1496, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1501, %r356, %r1503, %r1498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1505, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1505, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r356, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r356, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1523, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1525, %r1523, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r356, %r1530, %r1525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r359, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r356, %r1500, %r1532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1539, %r359, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1542, %r356, %r1509, %r1539;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1546, %r359, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1549, %r356, %r1518, %r1546;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1553, %r359, %r1530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1556, %r356, %r1527, %r1553;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1601, %r1604}, {%r400, %r406, %r403, %r409}, {%r1501, %r1535}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1620, %r1623}, {%r400, %r406, %r403, %r409}, {%r1510, %r1542}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1608, %r1612}, {%r400, %r406, %r403, %r409}, {%r1519, %r1549}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1627, %r1631}, {%r400, %r406, %r403, %r409}, {%r1528, %r1556}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1600, %r1601, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1603, %r1604, %r1604, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r1608, %r1608, %r1603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r1612, %r1612, %r1607;
	// end inline asm
	mov.u32 	%r1635, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1615, %r1635, %r1611, %r3503;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1619, %r1620, %r1620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r1623, %r1623, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r1627, %r1627, %r1622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r1631, %r1631, %r1626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1634, %r1635, %r1630, %r3502;
	// end inline asm
	mov.u32 	%r3508, %r3453;
	mov.u32 	%r3509, %r3453;
	mov.u32 	%r3510, %r3453;
	mov.u32 	%r3511, %r3453;
	@%p115 bra 	LBB0_111;
	bra.uni 	LBB0_75;
LBB0_111:                               // %oksrem7627
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1639, %r98, %r140;
	mul.wide.s32 	%rd196, %r1639, 4;
	add.s64 	%rd198, %rd28, %rd196;
	ld.shared.u32 	%r3508, [%rd198];
	add.s32 	%r1640, %r99, %r140;
	mul.wide.u32 	%rd199, %r1640, 4;
	add.s64 	%rd200, %rd28, %rd199;
	ld.shared.u32 	%r3509, [%rd200];
	add.s32 	%r1641, %r100, %r140;
	mul.wide.s32 	%rd201, %r1641, 4;
	add.s64 	%rd202, %rd28, %rd201;
	ld.shared.u32 	%r3510, [%rd202];
	add.s32 	%r1642, %r101, %r140;
	mul.wide.u32 	%rd203, %r1642, 4;
	add.s64 	%rd204, %rd28, %rd203;
	ld.shared.u32 	%r3511, [%rd204];
LBB0_75:                                // %L18407
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1678, %r1675}, {%r304, %r307}, {%r3508}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1687, %r1684}, {%r304, %r307}, {%r3509}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1696, %r1693}, {%r304, %r307}, {%r3510}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1705, %r1702}, {%r304, %r307}, {%r3511}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1671, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r1671, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r356, %r1678, %r1673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1680, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1682, %r1680, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1685, %r356, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1689, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1689, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r356, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1698, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1698, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r356, %r1705, %r1700;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1707, %r359, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r356, %r1675, %r1707;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r359, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r356, %r1684, %r1714;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1721, %r359, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r356, %r1693, %r1721;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1728, %r359, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r356, %r1702, %r1728;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1776, %r1779}, {%r400, %r406, %r403, %r409}, {%r1676, %r1710}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1795, %r1798}, {%r400, %r406, %r403, %r409}, {%r1685, %r1717}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1783, %r1787}, {%r400, %r406, %r403, %r409}, {%r1694, %r1724}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1802, %r1806}, {%r400, %r406, %r403, %r409}, {%r1703, %r1731}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r1776, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r1779, %r1779, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r1783, %r1783, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1787, %r1787, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1635, %r1786, %r1615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r1795, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r1798, %r1798, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1802, %r1802, %r1797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1635, %r1805, %r1634;
	// end inline asm
	mov.u32 	%r3512, %r3453;
	mov.u32 	%r3513, %r3453;
	mov.u32 	%r3514, %r3453;
	mov.u32 	%r3515, %r3453;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_76;
LBB0_112:                               // %oksrem8162
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1814, %r98, %r141;
	mul.wide.s32 	%rd205, %r1814, 4;
	add.s64 	%rd207, %rd28, %rd205;
	ld.shared.u32 	%r3512, [%rd207];
	add.s32 	%r1815, %r99, %r141;
	mul.wide.u32 	%rd208, %r1815, 4;
	add.s64 	%rd209, %rd28, %rd208;
	ld.shared.u32 	%r3513, [%rd209];
	add.s32 	%r1816, %r100, %r141;
	mul.wide.s32 	%rd210, %r1816, 4;
	add.s64 	%rd211, %rd28, %rd210;
	ld.shared.u32 	%r3514, [%rd211];
	add.s32 	%r1817, %r101, %r141;
	mul.wide.u32 	%rd212, %r1817, 4;
	add.s64 	%rd213, %rd28, %rd212;
	ld.shared.u32 	%r3515, [%rd213];
LBB0_76:                                // %L19632
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1853, %r1850}, {%r304, %r307}, {%r3512}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1862, %r1859}, {%r304, %r307}, {%r3513}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1871, %r1868}, {%r304, %r307}, {%r3514}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1880, %r1877}, {%r304, %r307}, {%r3515}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1846, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r1846, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r356, %r1853, %r1848;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1855, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r1855, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r356, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1864, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r1864, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r356, %r1871, %r1866;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1873, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r1873, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r356, %r1880, %r1875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1882, %r359, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r356, %r1850, %r1882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1889, %r359, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r356, %r1859, %r1889;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1896, %r359, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r356, %r1868, %r1896;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1903, %r359, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r356, %r1877, %r1903;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1951, %r1954}, {%r400, %r406, %r403, %r409}, {%r1851, %r1885}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1970, %r1973}, {%r400, %r406, %r403, %r409}, {%r1860, %r1892}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1958, %r1962}, {%r400, %r406, %r403, %r409}, {%r1869, %r1899}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1977, %r1981}, {%r400, %r406, %r403, %r409}, {%r1878, %r1906}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1950, %r1951, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r1954, %r1954, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r1958, %r1958, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r1962, %r1962, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r1635, %r1961, %r1790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r1970, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r1973, %r1973, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r1977, %r1977, %r1972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r1981, %r1981, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r1635, %r1980, %r1809;
	// end inline asm
	mov.u32 	%r3516, %r3453;
	mov.u32 	%r3517, %r3453;
	mov.u32 	%r3518, %r3453;
	mov.u32 	%r3519, %r3453;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_77;
LBB0_113:                               // %oksrem8697
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1989, %r98, %r142;
	mul.wide.s32 	%rd214, %r1989, 4;
	add.s64 	%rd216, %rd28, %rd214;
	ld.shared.u32 	%r3516, [%rd216];
	add.s32 	%r1990, %r99, %r142;
	mul.wide.u32 	%rd217, %r1990, 4;
	add.s64 	%rd218, %rd28, %rd217;
	ld.shared.u32 	%r3517, [%rd218];
	add.s32 	%r1991, %r100, %r142;
	mul.wide.s32 	%rd219, %r1991, 4;
	add.s64 	%rd220, %rd28, %rd219;
	ld.shared.u32 	%r3518, [%rd220];
	add.s32 	%r1992, %r101, %r142;
	mul.wide.u32 	%rd221, %r1992, 4;
	add.s64 	%rd222, %rd28, %rd221;
	ld.shared.u32 	%r3519, [%rd222];
LBB0_77:                                // %L20857
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2028, %r2025}, {%r304, %r307}, {%r3516}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2037, %r2034}, {%r304, %r307}, {%r3517}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2046, %r2043}, {%r304, %r307}, {%r3518}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2055, %r2052}, {%r304, %r307}, {%r3519}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2021, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2023, %r2021, %r2025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r356, %r2028, %r2023;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2030, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2032, %r2030, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r356, %r2037, %r2032;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2039, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2041, %r2039, %r2043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r356, %r2046, %r2041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2048, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r2048, %r2052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r356, %r2055, %r2050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2057, %r359, %r2028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2060, %r356, %r2025, %r2057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2064, %r359, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2067, %r356, %r2034, %r2064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2071, %r359, %r2046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r356, %r2043, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2078, %r359, %r2055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2081, %r356, %r2052, %r2078;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2126, %r2129}, {%r400, %r406, %r403, %r409}, {%r2026, %r2060}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2145, %r2148}, {%r400, %r406, %r403, %r409}, {%r2035, %r2067}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2133, %r2137}, {%r400, %r406, %r403, %r409}, {%r2044, %r2074}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2152, %r2156}, {%r400, %r406, %r403, %r409}, {%r2053, %r2081}, {%r3453, %r3453};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r2126, %r2126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r2129, %r2129, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2132, %r2133, %r2133, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r2137, %r2137, %r2132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r1635, %r2136, %r1965;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r2145, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2147, %r2148, %r2148, %r2144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r2152, %r2152, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r2156, %r2156, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r1635, %r2155, %r1984;
	// end inline asm
	add.s32 	%r3500, %r3500, 4;
	setp.ne.s32 	%p125, %r3500, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L21007
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L21066
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2163, %r3501, 1152;
	add.s32 	%r2164, %r102, %r2163;
	mul.wide.u32 	%rd223, %r2164, 4;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r3503;
	add.s32 	%r2165, %r103, %r2163;
	mul.wide.u32 	%rd225, %r2165, 4;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r3502;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L21326.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r175, %r109, 25;
	add.s32 	%r176, %r109, 26;
	add.s32 	%r177, %r109, 27;
	mov.u32 	%r2168, 0;
	mov.u32 	%r3524, 12;
	mov.u32 	%r3525, %r2168;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L31319
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3500, 0;
	mov.u32 	%r3502, %r3500;
	mov.u32 	%r3503, %r3500;
LBB0_91:                                // %L31320
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3525, %r3525, 1;
	add.s32 	%r3524, %r3524, -4;
	setp.ne.s32 	%p140, %r3524, -12;
	@%p140 bra 	LBB0_83;
	bra.uni 	LBB0_92;
LBB0_83:                                // %L21326
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3524, 12;
	selp.b32 	%r2706, %r3474, 0, %p129;
	setp.eq.s32 	%p130, %r3524, 8;
	selp.b32 	%r2707, %r3478, %r2706, %p130;
	setp.eq.s32 	%p131, %r3524, 4;
	selp.b32 	%r2708, %r3482, %r2707, %p131;
	setp.eq.s32 	%p132, %r3524, 0;
	selp.b32 	%r2709, %r3486, %r2708, %p132;
	setp.eq.s32 	%p133, %r3524, -4;
	selp.b32 	%r2710, %r3490, %r2709, %p133;
	setp.eq.s32 	%p134, %r3524, -8;
	selp.b32 	%r2711, %r3494, %r2710, %p134;
	selp.b32 	%r2712, %r3475, 0, %p129;
	selp.b32 	%r2713, %r3479, %r2712, %p130;
	selp.b32 	%r2714, %r3483, %r2713, %p131;
	selp.b32 	%r2715, %r3487, %r2714, %p132;
	selp.b32 	%r2716, %r3491, %r2715, %p133;
	selp.b32 	%r2717, %r3495, %r2716, %p134;
	selp.b32 	%r2718, %r3476, 0, %p129;
	selp.b32 	%r2719, %r3480, %r2718, %p130;
	selp.b32 	%r2720, %r3484, %r2719, %p131;
	selp.b32 	%r2721, %r3488, %r2720, %p132;
	selp.b32 	%r2722, %r3492, %r2721, %p133;
	selp.b32 	%r2723, %r3496, %r2722, %p134;
	selp.b32 	%r2724, %r3477, 0, %p129;
	selp.b32 	%r2725, %r3481, %r2724, %p130;
	selp.b32 	%r2726, %r3485, %r2725, %p131;
	selp.b32 	%r2727, %r3489, %r2726, %p132;
	selp.b32 	%r2728, %r3493, %r2727, %p133;
	selp.b32 	%r2729, %r3497, %r2728, %p134;
	// begin inline asm
	mov.b32 %r2196, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2730, %r2711, 8;
	xor.b32  	%r2206, %r2730, 8947848;
	// begin inline asm
	lop3.b32 %r2193, %r1015, %r2206, %r2196, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2198, %r2196, %r2197;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2201, %r2193, %r2198;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2204, %r1026, %r2206, %r2207, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2208, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2209, %r2207, %r2208;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2212, %r2204, %r2209;
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2731, %r2717, 8;
	xor.b32  	%r2252, %r2731, 8947848;
	// begin inline asm
	lop3.b32 %r2239, %r1015, %r2252, %r2242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2244, %r2242, %r2243;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2247, %r2239, %r2244;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2250, %r1026, %r2252, %r2253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2255, %r2253, %r2254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2258, %r2250, %r2255;
	// end inline asm
	// begin inline asm
	mov.b32 %r2288, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2299, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2732, %r2723, 8;
	xor.b32  	%r2298, %r2732, 8947848;
	// begin inline asm
	lop3.b32 %r2285, %r1015, %r2298, %r2288, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2288, %r2289;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2293, %r2285, %r2290;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2296, %r1026, %r2298, %r2299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2301, %r2299, %r2300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2304, %r2296, %r2301;
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2345, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2733, %r2729, 8;
	xor.b32  	%r2344, %r2733, 8947848;
	// begin inline asm
	lop3.b32 %r2331, %r1015, %r2344, %r2334, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2336, %r2334, %r2335;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2339, %r2331, %r2336;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2342, %r1026, %r2344, %r2345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2346, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2347, %r2345, %r2346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2350, %r2342, %r2347;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3467;
    mov.b32 {%r2re, %r2im}, %r2201;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2353, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r2212;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2356, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3467;
    mov.b32 {%r2re, %r2im}, %r2247;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2359, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r2258;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2362, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3467;
    mov.b32 {%r2re, %r2im}, %r2293;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2365, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r2304;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2368, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3467;
    mov.b32 {%r2re, %r2im}, %r2339;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2371, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r2350;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2374, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2440, %r2437}, {%r304, %r307}, {%r2353}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2449, %r2446}, {%r304, %r307}, {%r2356}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2458, %r2455}, {%r304, %r307}, {%r2359}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2467, %r2464}, {%r304, %r307}, {%r2362}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2476, %r2473}, {%r304, %r307}, {%r2365}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2485, %r2482}, {%r304, %r307}, {%r2368}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2494, %r2491}, {%r304, %r307}, {%r2371}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2503, %r2500}, {%r304, %r307}, {%r2374}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2433, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2435, %r2433, %r2437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2438, %r356, %r2440, %r2435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2442, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2444, %r2442, %r2446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2447, %r356, %r2449, %r2444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2451, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2453, %r2451, %r2455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2456, %r356, %r2458, %r2453;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2460, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2462, %r2460, %r2464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2465, %r356, %r2467, %r2462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2469, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r2469, %r2473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r356, %r2476, %r2471;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2478, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2480, %r2478, %r2482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2483, %r356, %r2485, %r2480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2487, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2489, %r2487, %r2491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2492, %r356, %r2494, %r2489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2496, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2498, %r2496, %r2500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2501, %r356, %r2503, %r2498;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2505, %r359, %r2440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2508, %r356, %r2437, %r2505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2512, %r359, %r2449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2515, %r356, %r2446, %r2512;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2519, %r359, %r2458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2522, %r356, %r2455, %r2519;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2526, %r359, %r2467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2529, %r356, %r2464, %r2526;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2533, %r359, %r2476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2536, %r356, %r2473, %r2533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2540, %r359, %r2485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2543, %r356, %r2482, %r2540;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2547, %r359, %r2494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2550, %r356, %r2491, %r2547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2554, %r359, %r2503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2557, %r356, %r2500, %r2554;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2642, %r2643}, {%r400, %r406, %r403, %r409}, {%r2438, %r2508}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2650, %r2651}, {%r400, %r406, %r403, %r409}, {%r2447, %r2515}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2658, %r2659}, {%r400, %r406, %r403, %r409}, {%r2456, %r2522}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2666, %r2667}, {%r400, %r406, %r403, %r409}, {%r2465, %r2529}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2674, %r2675}, {%r400, %r406, %r403, %r409}, {%r2474, %r2536}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2682, %r2683}, {%r400, %r406, %r403, %r409}, {%r2483, %r2543}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2690, %r2691}, {%r400, %r406, %r403, %r409}, {%r2492, %r2550}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2698, %r2699}, {%r400, %r406, %r403, %r409}, {%r2501, %r2557}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2641, %r2642, %r2643, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2645, %r2642, %r2643, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2649, %r2650, %r2651, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2653, %r2650, %r2651, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2657, %r2658, %r2659, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2661, %r2658, %r2659, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2665, %r2666, %r2667, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2669, %r2666, %r2667, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2673, %r2674, %r2675, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2677, %r2674, %r2675, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2681, %r2682, %r2683, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2685, %r2682, %r2683, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2689, %r2690, %r2691, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2693, %r2690, %r2691, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2697, %r2698, %r2699, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2701, %r2698, %r2699, %r713;
	// end inline asm
	st.shared.u32 	[%rd6], %r2641;
	st.shared.u32 	[%rd7+33024], %r2645;
	st.shared.u32 	[%rd7+128], %r2649;
	st.shared.u32 	[%rd7+33152], %r2653;
	cvt.u16.u32 	%rs262, %r3525;
	and.b16  	%rs263, %rs262, 255;
	mul.lo.s16 	%rs264, %rs263, 171;
	shr.u16 	%rs265, %rs264, 10;
	mul.lo.s16 	%rs266, %rs265, 6;
	sub.s16 	%rs267, %rs262, %rs266;
	shl.b16 	%rs268, %rs267, 2;
	cvt.u32.u16 	%r2734, %rs268;
	and.b32  	%r2735, %r2734, 252;
	add.s32 	%r2736, %r175, %r2735;
	cvt.u16.u32 	%rs269, %r2736;
	shr.s16 	%rs270, %rs269, 15;
	shr.u16 	%rs271, %rs270, 14;
	add.s16 	%rs272, %rs269, %rs271;
	and.b16  	%rs273, %rs272, -4;
	sub.s16 	%rs274, %rs269, %rs273;
	mul.wide.s16 	%r184, %rs274, 64;
	add.s32 	%r2737, %r94, %r184;
	mul.wide.s32 	%rd227, %r2737, 4;
	add.s64 	%rd229, %rd28, %rd227;
	st.shared.u32 	[%rd229], %r2657;
	add.s32 	%r2738, %r95, %r184;
	mul.wide.u32 	%rd230, %r2738, 4;
	add.s64 	%rd231, %rd28, %rd230;
	st.shared.u32 	[%rd231], %r2661;
	add.s32 	%r2739, %r96, %r184;
	mul.wide.s32 	%rd232, %r2739, 4;
	add.s64 	%rd233, %rd28, %rd232;
	st.shared.u32 	[%rd233], %r2665;
	add.s32 	%r2740, %r97, %r184;
	mul.wide.u32 	%rd234, %r2740, 4;
	add.s64 	%rd235, %rd28, %rd234;
	st.shared.u32 	[%rd235], %r2669;
	add.s32 	%r2741, %r176, %r2735;
	cvt.u16.u32 	%rs275, %r2741;
	shr.s16 	%rs276, %rs275, 15;
	shr.u16 	%rs277, %rs276, 14;
	add.s16 	%rs278, %rs275, %rs277;
	and.b16  	%rs279, %rs278, -4;
	sub.s16 	%rs280, %rs275, %rs279;
	mul.wide.s16 	%r185, %rs280, 64;
	add.s32 	%r2742, %r94, %r185;
	mul.wide.s32 	%rd236, %r2742, 4;
	add.s64 	%rd237, %rd28, %rd236;
	st.shared.u32 	[%rd237], %r2673;
	add.s32 	%r2743, %r95, %r185;
	mul.wide.u32 	%rd238, %r2743, 4;
	add.s64 	%rd239, %rd28, %rd238;
	st.shared.u32 	[%rd239], %r2677;
	add.s32 	%r2744, %r96, %r185;
	mul.wide.s32 	%rd240, %r2744, 4;
	add.s64 	%rd241, %rd28, %rd240;
	st.shared.u32 	[%rd241], %r2681;
	add.s32 	%r2745, %r97, %r185;
	mul.wide.u32 	%rd242, %r2745, 4;
	add.s64 	%rd243, %rd28, %rd242;
	st.shared.u32 	[%rd243], %r2685;
	add.s32 	%r2746, %r177, %r2735;
	cvt.u16.u32 	%rs281, %r2746;
	shr.s16 	%rs282, %rs281, 15;
	shr.u16 	%rs283, %rs282, 14;
	add.s16 	%rs284, %rs281, %rs283;
	and.b16  	%rs285, %rs284, -4;
	sub.s16 	%rs286, %rs281, %rs285;
	mul.wide.s16 	%r186, %rs286, 64;
	add.s32 	%r2747, %r94, %r186;
	mul.wide.s32 	%rd244, %r2747, 4;
	add.s64 	%rd245, %rd28, %rd244;
	st.shared.u32 	[%rd245], %r2689;
	add.s32 	%r2748, %r95, %r186;
	mul.wide.u32 	%rd246, %r2748, 4;
	add.s64 	%rd247, %rd28, %rd246;
	st.shared.u32 	[%rd247], %r2693;
	add.s32 	%r2749, %r96, %r186;
	mul.wide.s32 	%rd248, %r2749, 4;
	add.s64 	%rd249, %rd28, %rd248;
	st.shared.u32 	[%rd249], %r2697;
	add.s32 	%r2750, %r97, %r186;
	mul.wide.u32 	%rd250, %r2750, 4;
	add.s64 	%rd251, %rd28, %rd250;
	st.shared.u32 	[%rd251], %r2701;
	bar.sync 	0;
	mov.u32 	%r3530, %r2168;
	mov.u32 	%r3531, %r2168;
	mov.u32 	%r3532, %r2168;
	mov.u32 	%r3533, %r2168;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_84;
LBB0_114:                               // %oksrem11490
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3533, [%rd8];
	ld.shared.u32 	%r3532, [%rd9];
	ld.shared.u32 	%r3531, [%rd10];
	ld.shared.u32 	%r3530, [%rd11];
LBB0_84:                                // %L27201
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2786, %r2783}, {%r304, %r307}, {%r3533}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2795, %r2792}, {%r304, %r307}, {%r3532}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2804, %r2801}, {%r304, %r307}, {%r3531}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2813, %r2810}, {%r304, %r307}, {%r3530}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2779, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2781, %r2779, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r356, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2788, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2790, %r2788, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r356, %r2795, %r2790;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2797, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2799, %r2797, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2802, %r356, %r2804, %r2799;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2806, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2808, %r2806, %r2810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2811, %r356, %r2813, %r2808;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2815, %r359, %r2786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2818, %r356, %r2783, %r2815;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2822, %r359, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2825, %r356, %r2792, %r2822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2829, %r359, %r2804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2832, %r356, %r2801, %r2829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2836, %r359, %r2813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2839, %r356, %r2810, %r2836;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2884, %r2887}, {%r400, %r406, %r403, %r409}, {%r2784, %r2818}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2903, %r2906}, {%r400, %r406, %r403, %r409}, {%r2793, %r2825}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2891, %r2895}, {%r400, %r406, %r403, %r409}, {%r2802, %r2832}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2910, %r2914}, {%r400, %r406, %r403, %r409}, {%r2811, %r2839}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2883, %r2884, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2886, %r2887, %r2887, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r2891, %r2891, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2894, %r2895, %r2895, %r2890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r1635, %r2894, %r3503;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2902, %r2903, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r2906, %r2906, %r2902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r2910, %r2910, %r2905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r2914, %r2914, %r2909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r1635, %r2913, %r3502;
	// end inline asm
	mov.u32 	%r3534, %r2168;
	mov.u32 	%r3535, %r2168;
	mov.u32 	%r3536, %r2168;
	mov.u32 	%r3537, %r2168;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_85;
LBB0_115:                               // %oksrem12025
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2922, %r98, %r184;
	mul.wide.s32 	%rd252, %r2922, 4;
	add.s64 	%rd254, %rd28, %rd252;
	ld.shared.u32 	%r3537, [%rd254];
	add.s32 	%r2923, %r99, %r184;
	mul.wide.u32 	%rd255, %r2923, 4;
	add.s64 	%rd256, %rd28, %rd255;
	ld.shared.u32 	%r3536, [%rd256];
	add.s32 	%r2924, %r100, %r184;
	mul.wide.s32 	%rd257, %r2924, 4;
	add.s64 	%rd258, %rd28, %rd257;
	ld.shared.u32 	%r3535, [%rd258];
	add.s32 	%r2925, %r101, %r184;
	mul.wide.u32 	%rd259, %r2925, 4;
	add.s64 	%rd260, %rd28, %rd259;
	ld.shared.u32 	%r3534, [%rd260];
LBB0_85:                                // %L28426
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2961, %r2958}, {%r304, %r307}, {%r3537}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2970, %r2967}, {%r304, %r307}, {%r3536}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2979, %r2976}, {%r304, %r307}, {%r3535}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2988, %r2985}, {%r304, %r307}, {%r3534}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2954, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2956, %r2954, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2959, %r356, %r2961, %r2956;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2963, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2965, %r2963, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2968, %r356, %r2970, %r2965;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2972, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2974, %r2972, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r356, %r2979, %r2974;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2981, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r2981, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r356, %r2988, %r2983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2990, %r359, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r356, %r2958, %r2990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2997, %r359, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3000, %r356, %r2967, %r2997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3004, %r359, %r2979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3007, %r356, %r2976, %r3004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3011, %r359, %r2988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3014, %r356, %r2985, %r3011;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3059, %r3062}, {%r400, %r406, %r403, %r409}, {%r2959, %r2993}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3078, %r3081}, {%r400, %r406, %r403, %r409}, {%r2968, %r3000}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3066, %r3070}, {%r400, %r406, %r403, %r409}, {%r2977, %r3007}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3085, %r3089}, {%r400, %r406, %r403, %r409}, {%r2986, %r3014}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3058, %r3059, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r3062, %r3062, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r3066, %r3066, %r3061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r3070, %r3070, %r3065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r1635, %r3069, %r2898;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3077, %r3078, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r3081, %r3081, %r3077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3084, %r3085, %r3085, %r3080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r3089, %r3089, %r3084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3092, %r1635, %r3088, %r2917;
	// end inline asm
	mov.u32 	%r3538, %r2168;
	mov.u32 	%r3539, %r2168;
	mov.u32 	%r3540, %r2168;
	mov.u32 	%r3541, %r2168;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_86;
LBB0_116:                               // %oksrem12560
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3097, %r98, %r185;
	mul.wide.s32 	%rd261, %r3097, 4;
	add.s64 	%rd263, %rd28, %rd261;
	ld.shared.u32 	%r3541, [%rd263];
	add.s32 	%r3098, %r99, %r185;
	mul.wide.u32 	%rd264, %r3098, 4;
	add.s64 	%rd265, %rd28, %rd264;
	ld.shared.u32 	%r3540, [%rd265];
	add.s32 	%r3099, %r100, %r185;
	mul.wide.s32 	%rd266, %r3099, 4;
	add.s64 	%rd267, %rd28, %rd266;
	ld.shared.u32 	%r3539, [%rd267];
	add.s32 	%r3100, %r101, %r185;
	mul.wide.u32 	%rd268, %r3100, 4;
	add.s64 	%rd269, %rd28, %rd268;
	ld.shared.u32 	%r3538, [%rd269];
LBB0_86:                                // %L29651
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3136, %r3133}, {%r304, %r307}, {%r3541}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3145, %r3142}, {%r304, %r307}, {%r3540}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3154, %r3151}, {%r304, %r307}, {%r3539}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3163, %r3160}, {%r304, %r307}, {%r3538}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3129, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r3129, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r356, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3138, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r3138, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r356, %r3145, %r3140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3147, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3149, %r3147, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r356, %r3154, %r3149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3156, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3158, %r3156, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r356, %r3163, %r3158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3165, %r359, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r356, %r3133, %r3165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3172, %r359, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r356, %r3142, %r3172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3179, %r359, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r356, %r3151, %r3179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3186, %r359, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3189, %r356, %r3160, %r3186;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3234, %r3237}, {%r400, %r406, %r403, %r409}, {%r3134, %r3168}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3253, %r3256}, {%r400, %r406, %r403, %r409}, {%r3143, %r3175}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3241, %r3245}, {%r400, %r406, %r403, %r409}, {%r3152, %r3182}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3260, %r3264}, {%r400, %r406, %r403, %r409}, {%r3161, %r3189}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3233, %r3234, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r3237, %r3237, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3240, %r3241, %r3241, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3244, %r3245, %r3245, %r3240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r1635, %r3244, %r3073;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3252, %r3253, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r3256, %r3256, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r3260, %r3260, %r3255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3263, %r3264, %r3264, %r3259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3267, %r1635, %r3263, %r3092;
	// end inline asm
	mov.u32 	%r3542, %r2168;
	mov.u32 	%r3543, %r2168;
	mov.u32 	%r3544, %r2168;
	mov.u32 	%r3545, %r2168;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_87;
LBB0_117:                               // %oksrem13095
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3272, %r98, %r186;
	mul.wide.s32 	%rd270, %r3272, 4;
	add.s64 	%rd272, %rd28, %rd270;
	ld.shared.u32 	%r3545, [%rd272];
	add.s32 	%r3273, %r99, %r186;
	mul.wide.u32 	%rd273, %r3273, 4;
	add.s64 	%rd274, %rd28, %rd273;
	ld.shared.u32 	%r3544, [%rd274];
	add.s32 	%r3274, %r100, %r186;
	mul.wide.s32 	%rd275, %r3274, 4;
	add.s64 	%rd276, %rd28, %rd275;
	ld.shared.u32 	%r3543, [%rd276];
	add.s32 	%r3275, %r101, %r186;
	mul.wide.u32 	%rd277, %r3275, 4;
	add.s64 	%rd278, %rd28, %rd277;
	ld.shared.u32 	%r3542, [%rd278];
LBB0_87:                                // %L30876
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3311, %r3308}, {%r304, %r307}, {%r3545}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3320, %r3317}, {%r304, %r307}, {%r3544}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3329, %r3326}, {%r304, %r307}, {%r3543}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3338, %r3335}, {%r304, %r307}, {%r3542}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3304, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3306, %r3304, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3309, %r356, %r3311, %r3306;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3313, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3315, %r3313, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r356, %r3320, %r3315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3322, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3324, %r3322, %r3326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3327, %r356, %r3329, %r3324;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3331, %r359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3333, %r3331, %r3335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3336, %r356, %r3338, %r3333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3340, %r359, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3343, %r356, %r3308, %r3340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3347, %r359, %r3320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3350, %r356, %r3317, %r3347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3354, %r359, %r3329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3357, %r356, %r3326, %r3354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3361, %r359, %r3338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r356, %r3335, %r3361;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3409, %r3412}, {%r400, %r406, %r403, %r409}, {%r3309, %r3343}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3428, %r3431}, {%r400, %r406, %r403, %r409}, {%r3318, %r3350}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3416, %r3420}, {%r400, %r406, %r403, %r409}, {%r3327, %r3357}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3435, %r3439}, {%r400, %r406, %r403, %r409}, {%r3336, %r3364}, {%r2168, %r2168};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3408, %r3409, %r3409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3411, %r3412, %r3412, %r3408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3415, %r3416, %r3416, %r3411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3419, %r3420, %r3420, %r3415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r1635, %r3419, %r3248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3427, %r3428, %r3428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3430, %r3431, %r3431, %r3427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3434, %r3435, %r3435, %r3430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3438, %r3439, %r3439, %r3434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r1635, %r3438, %r3267;
	// end inline asm
	add.s32 	%r3500, %r3500, 4;
	setp.ne.s32 	%p138, %r3500, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L31026
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L31085
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3446, %r3501, 1152;
	add.s32 	%r3447, %r102, %r3446;
	mul.wide.u32 	%rd279, %r3447, 4;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3503;
	add.s32 	%r3448, %r103, %r3446;
	mul.wide.u32 	%rd281, %r3448, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3502;
	bra.uni 	LBB0_90;
LBB0_93:                                // %L31355
	mov.u32 	%r3450, 0;
	st.global.u32 	[%rd5], %r3450;
	ret;
LBB0_1:                                 // %L8
	ld.param.u32 	%r289, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd13, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r289;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
