// PTX CompilerJob of frb(CuDeviceVector{Int16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}) in world 33561 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<143>;
	.reg .b16 	%rs<289>;
	.reg .b32 	%r<3506>;
	.reg .f32 	%f<402>;
	.reg .b64 	%rd<287>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r292, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r292, 76895;
	@%p1 bra 	LBB0_96;
	bra.uni 	LBB0_1;
LBB0_96:                                // %L10
	ld.param.u64 	%rd14, [_Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r293, %r3, %r1;
	mad.lo.s32 	%r294, %r4, 768, %r293;
	mul.wide.u32 	%rd20, %r294, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r295, 1;
	st.global.u32 	[%rd5], %r295;
	and.b32  	%r5, %r1, 3;
	shr.u32 	%r6, %r1, 2;
	mul.lo.s32 	%r296, %r5, %r6;
	and.b32  	%r297, %r296, 7;
	cvt.rn.f32.u32 	%f102, %r297;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f400, %f1;
	setp.lt.f32 	%p2, %f400, 0f40000000;
	@%p2 bra 	LBB0_108;
// %bb.97:
	setp.gtu.f32 	%p3, %f400, 0f4B800000;
	@%p3 bra 	LBB0_104;
	bra.uni 	LBB0_98;
LBB0_104:
	mov.b32 	%r223, %f400;
	and.b32  	%r298, %r223, 8388607;
	or.b32  	%r3504, %r298, 1065353216;
	mov.b32 	%f399, %r3504;
	add.s32 	%r299, %r223, -1073741824;
	and.b32  	%r3505, %r299, -8388608;
	setp.eq.s32 	%p9, %r3505, 0;
	@%p9 bra 	LBB0_107;
// %bb.105:                             // %__nv_fmaf_rn.exit4.i.i.i1407.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_106:                               // %__nv_fmaf_rn.exit4.i.i.i1407
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r300, %r3505, 192937984;
	add.s32 	%r301, %r300, %r3504;
	mov.b32 	%f114, %r301;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f399, %f114, %f120;
	sub.s32 	%r3505, %r3505, %r300;
	mov.b32 	%r3504, %f399;
	setp.ne.s32 	%p10, %r3505, 0;
	setp.ne.s32 	%p11, %r3504, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_106;
LBB0_107:                               // %__internal_fmodf_slowpath_mod.exit.i.i1409
	setp.gt.u32 	%p13, %r223, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f399, 0f34000000;
	mul.f32 	%f400, %f121, %f122;
	bra.uni 	LBB0_108;
LBB0_98:                                // %__nv_fast_fdividef.exit.i.i.i1379
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f400, %f104;
	cvt.rzi.f32.f32 	%f398, %f105;
	fma.rn.f32 	%f88, %f398, 0fC0000000, %f400;
	mov.b32 	%r222, %f88;
	setp.lt.u32 	%p4, %r222, 1073741824;
	@%p4 bra 	LBB0_103;
// %bb.99:
	setp.lt.u32 	%p5, %r222, -2147483647;
	@%p5 bra 	LBB0_101;
// %bb.100:
	add.f32 	%f110, %f398, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	add.f32 	%f111, %f110, 0fBF800000;
	selp.f32 	%f398, %f111, %f110, %p8;
	bra.uni 	LBB0_103;
LBB0_101:
	add.f32 	%f398, %f398, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_103;
// %bb.102:                             // %__nv_fmaf_rn.exit.i.i.i1384
	add.f32 	%f106, %f398, 0f3F800000;
	fma.rn.f32 	%f108, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f108, 0f00000000;
	add.f32 	%f109, %f106, 0f3F800000;
	selp.f32 	%f398, %f109, %f106, %p7;
LBB0_103:                               // %__internal_fmodf_fastpath_quot.exit.i.i1388
	fma.rn.f32 	%f400, %f398, 0fC0000000, %f400;
LBB0_108:                               // %__internal_fmodf_kernel.exit.i1413
	abs.f32 	%f123, %f400;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_110;
// %bb.109:
	mov.b32 	%r302, %f1;
	and.b32  	%r303, %r302, -2147483648;
	mov.b32 	%r304, %f400;
	or.b32  	%r305, %r303, %r304;
	mov.b32 	%f400, %r305;
LBB0_110:                               // %__nv_fmodf.exit1414
	add.f32 	%f125, %f400, %f400;
	mov.b32 	%r312, %f125;
	and.b32  	%r313, %r312, -2147483648;
	or.b32  	%r314, %r313, 1056964608;
	mov.b32 	%f126, %r314;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r315, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f400;
	mul.f32 	%f134, %f133, 0f34222169;
	fma.rn.f32 	%f135, %f133, 0f40490FDA, %f134;
	mul.f32 	%f136, %f135, %f135;
	fma.rn.f32 	%f137, %f136, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f138, %f137, %f136, 0f3D2AAABB;
	fma.rn.f32 	%f139, %f138, %f136, 0fBEFFFFFF;
	fma.rn.f32 	%f140, %f139, %f136, 0f3F800000;
	fma.rn.f32 	%f141, %f136, %f135, 0f00000000;
	fma.rn.f32 	%f142, %f136, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f143, %f142, %f136, 0fBE2AAAA8;
	fma.rn.f32 	%f144, %f143, %f141, %f135;
	and.b32  	%r316, %r315, 1;
	setp.eq.b32 	%p17, %r316, 1;
	selp.f32 	%f145, %f140, %f144, %p17;
	selp.f32 	%f146, %f144, %f140, %p17;
	and.b32  	%r317, %r315, 2;
	setp.eq.s32 	%p18, %r317, 0;
	neg.f32 	%f147, %f145;
	selp.f32 	%f148, %f145, %f147, %p18;
	add.s32 	%r318, %r315, 1;
	and.b32  	%r319, %r318, 2;
	mov.f32 	%f396, 0f00000000;
	cvt.rzi.f32.f32 	%f151, %f400;
	setp.eq.f32 	%p20, %f151, %f400;
	mul.f32 	%f152, %f400, 0f00000000;
	shl.b32 	%r232, %r1, 1;
	and.b32  	%r233, %r232, 6;
	or.b32  	%r234, %r233, 1;
	setp.eq.s32 	%p22, %r233, 6;
	mov.f32 	%f372, 0f41C00000;
	mul.lo.s32 	%r3405, %r233, %r6;
	mov.f32 	%f378, %f396;
	mov.f32 	%f379, %f396;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L206
	cvt.u16.u32 	%rs2, %r3405;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f157, %rs8;
	div.approx.f32 	%f3, %f157, %f372;
	abs.f32 	%f376, %f3;
	setp.lt.f32 	%p23, %f376, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f376, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f376;
	and.b32  	%r321, %r8, 8388607;
	or.b32  	%r3408, %r321, 1065353216;
	mov.b32 	%f375, %r3408;
	add.s32 	%r322, %r8, -1073741824;
	and.b32  	%r3409, %r322, -8388608;
	setp.eq.s32 	%p30, %r3409, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f168, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f167,%f168;
	// end inline asm
LBB0_12:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r323, %r3409, 192937984;
	add.s32 	%r324, %r323, %r3408;
	mov.b32 	%f169, %r324;
	mul.f32 	%f170, %f167, %f169;
	sub.f32 	%f171, %f169, %f170;
	fma.rn.f32 	%f172, %f171, %f167, %f170;
	sub.f32 	%f173, %f169, %f172;
	fma.rz.f32 	%f174, %f173, %f167, %f172;
	cvt.rzi.f32.f32 	%f175, %f174;
	sub.f32 	%f375, %f169, %f175;
	sub.s32 	%r3409, %r3409, %r323;
	mov.b32 	%r3408, %f375;
	setp.ne.s32 	%p31, %r3409, 0;
	setp.ne.s32 	%p32, %r3408, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f176, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f177, %f375, 0f34000000;
	mul.f32 	%f376, %f176, %f177;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f159, 0f40000000;
	div.approx.f32 	%f160, %f376, %f159;
	cvt.rzi.f32.f32 	%f374, %f160;
	fma.rn.f32 	%f6, %f374, 0fC0000000, %f376;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f165, %f374, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	add.f32 	%f166, %f165, 0fBF800000;
	selp.f32 	%f374, %f166, %f165, %p29;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f374, %f374, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f161, %f374, 0f3F800000;
	fma.rn.f32 	%f163, %f159, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f163, 0f00000000;
	add.f32 	%f164, %f161, 0f3F800000;
	selp.f32 	%f374, %f164, %f161, %p28;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f376, %f374, 0fC0000000, %f376;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f178, %f376;
	setp.gtu.f32 	%p35, %f178, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r325, %f3;
	and.b32  	%r326, %r325, -2147483648;
	mov.b32 	%r327, %f376;
	or.b32  	%r328, %r326, %r327;
	mov.b32 	%f376, %r328;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f179, %f376, %f376;
	mov.b32 	%r329, %f179;
	and.b32  	%r330, %r329, -2147483648;
	or.b32  	%r331, %r330, 1056964608;
	mov.b32 	%f180, %r331;
	add.f32 	%f181, %f179, %f180;
	cvt.rzi.f32.f32 	%f182, %f181;
	abs.f32 	%f183, %f179;
	setp.gt.f32 	%p36, %f183, 0f4B000000;
	selp.f32 	%f184, %f179, %f182, %p36;
	cvt.rzi.f32.f32 	%f185, %f179;
	setp.lt.f32 	%p37, %f183, 0f3F000000;
	selp.f32 	%f186, %f185, %f184, %p37;
	cvt.rzi.s32.f32 	%r332, %f186;
	fma.rn.f32 	%f187, %f186, 0fBF000000, %f376;
	mul.f32 	%f188, %f187, 0f34222169;
	fma.rn.f32 	%f189, %f187, 0f40490FDA, %f188;
	mul.f32 	%f190, %f189, %f189;
	fma.rn.f32 	%f191, %f190, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f192, %f191, %f190, 0f3D2AAABB;
	fma.rn.f32 	%f193, %f192, %f190, 0fBEFFFFFF;
	fma.rn.f32 	%f194, %f193, %f190, 0f3F800000;
	fma.rn.f32 	%f195, %f190, %f189, 0f00000000;
	fma.rn.f32 	%f196, %f190, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f197, %f196, %f190, 0fBE2AAAA8;
	fma.rn.f32 	%f198, %f197, %f195, %f189;
	and.b32  	%r333, %r332, 1;
	setp.eq.b32 	%p38, %r333, 1;
	selp.f32 	%f199, %f194, %f198, %p38;
	selp.f32 	%f200, %f198, %f194, %p38;
	and.b32  	%r334, %r332, 2;
	setp.eq.s32 	%p39, %r334, 0;
	neg.f32 	%f201, %f199;
	selp.f32 	%f202, %f199, %f201, %p39;
	add.s32 	%r335, %r332, 1;
	and.b32  	%r336, %r335, 2;
	setp.eq.s32 	%p40, %r336, 0;
	mov.f32 	%f203, 0f00000000;
	sub.f32 	%f204, %f203, %f200;
	selp.f32 	%f205, %f200, %f204, %p40;
	cvt.rzi.f32.f32 	%f206, %f376;
	setp.eq.f32 	%p41, %f206, %f376;
	mul.f32 	%f207, %f376, 0f00000000;
	selp.f32 	%f379, %f207, %f202, %p41;
	abs.f32 	%f208, %f376;
	setp.gt.f32 	%p42, %f208, 0f4B800000;
	add.f32 	%f209, %f379, 0f3F800000;
	selp.f32 	%f378, %f209, %f205, %p42;
LBB0_17:                                // %L222
	setp.eq.s32 	%p19, %r319, 0;
	sub.f32 	%f149, %f396, %f146;
	selp.f32 	%f153, %f152, %f148, %p20;
	abs.f32 	%f154, %f400;
	setp.gt.u32 	%p43, %r234, 5;
	mul.lo.s32 	%r3406, %r234, %r6;
	mov.f32 	%f384, %f396;
	mov.f32 	%f385, %f396;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L226
	mul.hi.u32 	%r338, %r3406, -1431655765;
	shr.u32 	%r339, %r338, 5;
	mul.lo.s32 	%r340, %r339, 48;
	sub.s32 	%r341, %r3406, %r340;
	cvt.rn.f32.s32 	%f211, %r341;
	div.approx.f32 	%f24, %f211, %f372;
	abs.f32 	%f382, %f24;
	setp.lt.f32 	%p44, %f382, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f382, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f382;
	and.b32  	%r342, %r16, 8388607;
	or.b32  	%r3410, %r342, 1065353216;
	mov.b32 	%f381, %r3410;
	add.s32 	%r343, %r16, -1073741824;
	and.b32  	%r3411, %r343, -8388608;
	setp.eq.s32 	%p51, %r3411, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1269.preheader
	mov.f32 	%f222, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f221,%f222;
	// end inline asm
LBB0_28:                                // %__nv_fmaf_rn.exit4.i.i.i1269
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r3411, 192937984;
	add.s32 	%r345, %r344, %r3410;
	mov.b32 	%f223, %r345;
	mul.f32 	%f224, %f221, %f223;
	sub.f32 	%f225, %f223, %f224;
	fma.rn.f32 	%f226, %f225, %f221, %f224;
	sub.f32 	%f227, %f223, %f226;
	fma.rz.f32 	%f228, %f227, %f221, %f226;
	cvt.rzi.f32.f32 	%f229, %f228;
	sub.f32 	%f381, %f223, %f229;
	sub.s32 	%r3411, %r3411, %r344;
	mov.b32 	%r3410, %f381;
	setp.ne.s32 	%p52, %r3411, 0;
	setp.ne.s32 	%p53, %r3410, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1271
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f230, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f231, %f381, 0f34000000;
	mul.f32 	%f382, %f230, %f231;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1241
	mov.f32 	%f213, 0f40000000;
	div.approx.f32 	%f214, %f382, %f213;
	cvt.rzi.f32.f32 	%f380, %f214;
	fma.rn.f32 	%f27, %f380, 0fC0000000, %f382;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f219, %f380, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	add.f32 	%f220, %f219, 0fBF800000;
	selp.f32 	%f380, %f220, %f219, %p50;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f380, %f380, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1246
	add.f32 	%f215, %f380, 0f3F800000;
	fma.rn.f32 	%f217, %f213, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f217, 0f00000000;
	add.f32 	%f218, %f215, 0f3F800000;
	selp.f32 	%f380, %f218, %f215, %p49;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1250
	fma.rn.f32 	%f382, %f380, 0fC0000000, %f382;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1275
	abs.f32 	%f232, %f382;
	setp.gtu.f32 	%p56, %f232, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r346, %f24;
	and.b32  	%r347, %r346, -2147483648;
	mov.b32 	%r348, %f382;
	or.b32  	%r349, %r347, %r348;
	mov.b32 	%f382, %r349;
LBB0_32:                                // %__nv_fmodf.exit1276
	add.f32 	%f233, %f382, %f382;
	mov.b32 	%r350, %f233;
	and.b32  	%r351, %r350, -2147483648;
	or.b32  	%r352, %r351, 1056964608;
	mov.b32 	%f234, %r352;
	add.f32 	%f235, %f233, %f234;
	cvt.rzi.f32.f32 	%f236, %f235;
	abs.f32 	%f237, %f233;
	setp.gt.f32 	%p57, %f237, 0f4B000000;
	selp.f32 	%f238, %f233, %f236, %p57;
	cvt.rzi.f32.f32 	%f239, %f233;
	setp.lt.f32 	%p58, %f237, 0f3F000000;
	selp.f32 	%f240, %f239, %f238, %p58;
	cvt.rzi.s32.f32 	%r353, %f240;
	fma.rn.f32 	%f241, %f240, 0fBF000000, %f382;
	mul.f32 	%f242, %f241, 0f34222169;
	fma.rn.f32 	%f243, %f241, 0f40490FDA, %f242;
	mul.f32 	%f244, %f243, %f243;
	fma.rn.f32 	%f245, %f244, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f246, %f245, %f244, 0f3D2AAABB;
	fma.rn.f32 	%f247, %f246, %f244, 0fBEFFFFFF;
	fma.rn.f32 	%f248, %f247, %f244, 0f3F800000;
	fma.rn.f32 	%f249, %f244, %f243, 0f00000000;
	fma.rn.f32 	%f250, %f244, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f251, %f250, %f244, 0fBE2AAAA8;
	fma.rn.f32 	%f252, %f251, %f249, %f243;
	and.b32  	%r354, %r353, 1;
	setp.eq.b32 	%p59, %r354, 1;
	selp.f32 	%f253, %f248, %f252, %p59;
	selp.f32 	%f254, %f252, %f248, %p59;
	and.b32  	%r355, %r353, 2;
	setp.eq.s32 	%p60, %r355, 0;
	neg.f32 	%f255, %f253;
	selp.f32 	%f256, %f253, %f255, %p60;
	add.s32 	%r356, %r353, 1;
	and.b32  	%r357, %r356, 2;
	setp.eq.s32 	%p61, %r357, 0;
	mov.f32 	%f257, 0f00000000;
	sub.f32 	%f258, %f257, %f254;
	selp.f32 	%f259, %f254, %f258, %p61;
	cvt.rzi.f32.f32 	%f260, %f382;
	setp.eq.f32 	%p62, %f260, %f382;
	mul.f32 	%f261, %f382, 0f00000000;
	selp.f32 	%f385, %f261, %f256, %p62;
	abs.f32 	%f262, %f382;
	setp.gt.f32 	%p63, %f262, 0f4B800000;
	add.f32 	%f263, %f385, 0f3F800000;
	selp.f32 	%f384, %f263, %f259, %p63;
LBB0_33:                                // %L242
	selp.f32 	%f150, %f146, %f149, %p19;
	setp.gt.f32 	%p21, %f154, 0f4B800000;
	add.f32 	%f155, %f153, 0f3F800000;
	setp.gt.u32 	%p65, %r1, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f373, 0f40400000;
	mov.f32 	%f390, %f396;
	mov.f32 	%f391, %f396;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L279
	cvt.u16.u32 	%rs9, %r3405;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 10;
	mul.lo.s16 	%rs13, %rs12, 6;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f265, %rs15;
	div.approx.f32 	%f45, %f265, %f373;
	abs.f32 	%f388, %f45;
	setp.lt.f32 	%p67, %f388, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f388, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f388;
	and.b32  	%r365, %r26, 8388607;
	or.b32  	%r3412, %r365, 1065353216;
	mov.b32 	%f387, %r3412;
	add.s32 	%r366, %r26, -1073741824;
	and.b32  	%r3413, %r366, -8388608;
	setp.eq.s32 	%p74, %r3413, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1315.preheader
	mov.f32 	%f276, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f275,%f276;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i1315
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r3413, 192937984;
	add.s32 	%r368, %r367, %r3412;
	mov.b32 	%f277, %r368;
	mul.f32 	%f278, %f275, %f277;
	sub.f32 	%f279, %f277, %f278;
	fma.rn.f32 	%f280, %f279, %f275, %f278;
	sub.f32 	%f281, %f277, %f280;
	fma.rz.f32 	%f282, %f281, %f275, %f280;
	cvt.rzi.f32.f32 	%f283, %f282;
	sub.f32 	%f387, %f277, %f283;
	sub.s32 	%r3413, %r3413, %r367;
	mov.b32 	%r3412, %f387;
	setp.ne.s32 	%p75, %r3413, 0;
	setp.ne.s32 	%p76, %r3412, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1317
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f284, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f285, %f387, 0f34000000;
	mul.f32 	%f388, %f284, %f285;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1287
	mov.f32 	%f267, 0f40000000;
	div.approx.f32 	%f268, %f388, %f267;
	cvt.rzi.f32.f32 	%f386, %f268;
	fma.rn.f32 	%f48, %f386, 0fC0000000, %f388;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f273, %f386, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	add.f32 	%f274, %f273, 0fBF800000;
	selp.f32 	%f386, %f274, %f273, %p73;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f386, %f386, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1292
	add.f32 	%f269, %f386, 0f3F800000;
	fma.rn.f32 	%f271, %f267, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f271, 0f00000000;
	add.f32 	%f272, %f269, 0f3F800000;
	selp.f32 	%f386, %f272, %f269, %p72;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1296
	fma.rn.f32 	%f388, %f386, 0fC0000000, %f388;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1321
	abs.f32 	%f286, %f388;
	setp.gtu.f32 	%p79, %f286, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r369, %f45;
	and.b32  	%r370, %r369, -2147483648;
	mov.b32 	%r371, %f388;
	or.b32  	%r372, %r370, %r371;
	mov.b32 	%f388, %r372;
LBB0_48:                                // %__nv_fmodf.exit1322
	add.f32 	%f287, %f388, %f388;
	mov.b32 	%r373, %f287;
	and.b32  	%r374, %r373, -2147483648;
	or.b32  	%r375, %r374, 1056964608;
	mov.b32 	%f288, %r375;
	add.f32 	%f289, %f287, %f288;
	cvt.rzi.f32.f32 	%f290, %f289;
	abs.f32 	%f291, %f287;
	setp.gt.f32 	%p80, %f291, 0f4B000000;
	selp.f32 	%f292, %f287, %f290, %p80;
	cvt.rzi.f32.f32 	%f293, %f287;
	setp.lt.f32 	%p81, %f291, 0f3F000000;
	selp.f32 	%f294, %f293, %f292, %p81;
	cvt.rzi.s32.f32 	%r376, %f294;
	fma.rn.f32 	%f295, %f294, 0fBF000000, %f388;
	mul.f32 	%f296, %f295, 0f34222169;
	fma.rn.f32 	%f297, %f295, 0f40490FDA, %f296;
	mul.f32 	%f298, %f297, %f297;
	fma.rn.f32 	%f299, %f298, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f300, %f299, %f298, 0f3D2AAABB;
	fma.rn.f32 	%f301, %f300, %f298, 0fBEFFFFFF;
	fma.rn.f32 	%f302, %f301, %f298, 0f3F800000;
	fma.rn.f32 	%f303, %f298, %f297, 0f00000000;
	fma.rn.f32 	%f304, %f298, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f305, %f304, %f298, 0fBE2AAAA8;
	fma.rn.f32 	%f306, %f305, %f303, %f297;
	and.b32  	%r377, %r376, 1;
	setp.eq.b32 	%p82, %r377, 1;
	selp.f32 	%f307, %f302, %f306, %p82;
	selp.f32 	%f308, %f306, %f302, %p82;
	and.b32  	%r378, %r376, 2;
	setp.eq.s32 	%p83, %r378, 0;
	neg.f32 	%f309, %f307;
	selp.f32 	%f310, %f307, %f309, %p83;
	add.s32 	%r379, %r376, 1;
	and.b32  	%r380, %r379, 2;
	setp.eq.s32 	%p84, %r380, 0;
	mov.f32 	%f311, 0f00000000;
	sub.f32 	%f312, %f311, %f308;
	selp.f32 	%f313, %f308, %f312, %p84;
	cvt.rzi.f32.f32 	%f314, %f388;
	setp.eq.f32 	%p85, %f314, %f388;
	mul.f32 	%f315, %f388, 0f00000000;
	selp.f32 	%f391, %f315, %f310, %p85;
	abs.f32 	%f316, %f388;
	setp.gt.f32 	%p86, %f316, 0f4B800000;
	add.f32 	%f317, %f391, 0f3F800000;
	selp.f32 	%f390, %f317, %f313, %p86;
LBB0_49:                                // %L295
	selp.f32 	%f156, %f155, %f150, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f397, %f396;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L303
	mul.hi.u32 	%r382, %r3406, -1431655765;
	shr.u32 	%r383, %r382, 2;
	mul.lo.s32 	%r384, %r383, 6;
	sub.s32 	%r385, %r3406, %r384;
	cvt.rn.f32.s32 	%f319, %r385;
	div.approx.f32 	%f66, %f319, %f373;
	abs.f32 	%f394, %f66;
	setp.lt.f32 	%p90, %f394, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f394, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f394;
	and.b32  	%r386, %r34, 8388607;
	or.b32  	%r3414, %r386, 1065353216;
	mov.b32 	%f393, %r3414;
	add.s32 	%r387, %r34, -1073741824;
	and.b32  	%r3415, %r387, -8388608;
	setp.eq.s32 	%p97, %r3415, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1361.preheader
	mov.f32 	%f330, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f329,%f330;
	// end inline asm
LBB0_60:                                // %__nv_fmaf_rn.exit4.i.i.i1361
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r388, %r3415, 192937984;
	add.s32 	%r389, %r388, %r3414;
	mov.b32 	%f331, %r389;
	mul.f32 	%f332, %f329, %f331;
	sub.f32 	%f333, %f331, %f332;
	fma.rn.f32 	%f334, %f333, %f329, %f332;
	sub.f32 	%f335, %f331, %f334;
	fma.rz.f32 	%f336, %f335, %f329, %f334;
	cvt.rzi.f32.f32 	%f337, %f336;
	sub.f32 	%f393, %f331, %f337;
	sub.s32 	%r3415, %r3415, %r388;
	mov.b32 	%r3414, %f393;
	setp.ne.s32 	%p98, %r3415, 0;
	setp.ne.s32 	%p99, %r3414, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1363
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f338, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f339, %f393, 0f34000000;
	mul.f32 	%f394, %f338, %f339;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1333
	mov.f32 	%f321, 0f40000000;
	div.approx.f32 	%f322, %f394, %f321;
	cvt.rzi.f32.f32 	%f392, %f322;
	fma.rn.f32 	%f69, %f392, 0fC0000000, %f394;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f327, %f392, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f328, %f327, 0fBF800000;
	selp.f32 	%f392, %f328, %f327, %p96;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f392, %f392, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1338
	add.f32 	%f323, %f392, 0f3F800000;
	fma.rn.f32 	%f325, %f321, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f325, 0f00000000;
	add.f32 	%f326, %f323, 0f3F800000;
	selp.f32 	%f392, %f326, %f323, %p95;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1342
	fma.rn.f32 	%f394, %f392, 0fC0000000, %f394;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1367
	abs.f32 	%f340, %f394;
	setp.gtu.f32 	%p102, %f340, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r390, %f66;
	and.b32  	%r391, %r390, -2147483648;
	mov.b32 	%r392, %f394;
	or.b32  	%r393, %r391, %r392;
	mov.b32 	%f394, %r393;
LBB0_64:                                // %__nv_fmodf.exit1368
	add.f32 	%f341, %f394, %f394;
	mov.b32 	%r394, %f341;
	and.b32  	%r395, %r394, -2147483648;
	or.b32  	%r396, %r395, 1056964608;
	mov.b32 	%f342, %r396;
	add.f32 	%f343, %f341, %f342;
	cvt.rzi.f32.f32 	%f344, %f343;
	abs.f32 	%f345, %f341;
	setp.gt.f32 	%p103, %f345, 0f4B000000;
	selp.f32 	%f346, %f341, %f344, %p103;
	cvt.rzi.f32.f32 	%f347, %f341;
	setp.lt.f32 	%p104, %f345, 0f3F000000;
	selp.f32 	%f348, %f347, %f346, %p104;
	cvt.rzi.s32.f32 	%r397, %f348;
	fma.rn.f32 	%f349, %f348, 0fBF000000, %f394;
	mul.f32 	%f350, %f349, 0f34222169;
	fma.rn.f32 	%f351, %f349, 0f40490FDA, %f350;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f353, %f352, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f354, %f353, %f352, 0f3D2AAABB;
	fma.rn.f32 	%f355, %f354, %f352, 0fBEFFFFFF;
	fma.rn.f32 	%f356, %f355, %f352, 0f3F800000;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	fma.rn.f32 	%f358, %f352, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f359, %f358, %f352, 0fBE2AAAA8;
	fma.rn.f32 	%f360, %f359, %f357, %f351;
	and.b32  	%r398, %r397, 1;
	setp.eq.b32 	%p105, %r398, 1;
	selp.f32 	%f361, %f356, %f360, %p105;
	selp.f32 	%f362, %f360, %f356, %p105;
	and.b32  	%r399, %r397, 2;
	setp.eq.s32 	%p106, %r399, 0;
	neg.f32 	%f363, %f361;
	selp.f32 	%f364, %f361, %f363, %p106;
	add.s32 	%r400, %r397, 1;
	and.b32  	%r401, %r400, 2;
	setp.eq.s32 	%p107, %r401, 0;
	mov.f32 	%f365, 0f00000000;
	sub.f32 	%f366, %f365, %f362;
	selp.f32 	%f367, %f362, %f366, %p107;
	cvt.rzi.f32.f32 	%f368, %f394;
	setp.eq.f32 	%p108, %f368, %f394;
	mul.f32 	%f369, %f394, 0f00000000;
	selp.f32 	%f397, %f369, %f364, %p108;
	abs.f32 	%f370, %f394;
	setp.gt.f32 	%p109, %f370, 0f4B800000;
	add.f32 	%f371, %f397, 0f3F800000;
	selp.f32 	%f396, %f371, %f367, %p109;
LBB0_65:                                // %L319
	mov.b32 	%r308, %f156;
	mov.b32 	%r311, %f153;
	mov.b32 	%r403, %f390;
	mov.b32 	%r404, %f396;
	mov.b32 	%r409, %f391;
	mov.b32 	%r410, %f397;
	mov.u32 	%r3416, 999999999;
	cvt.u16.u32 	%rs287, %r1;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L355
	ld.param.u64 	%rd1, [_Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs17, %rs287, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 12;
	mul.lo.s16 	%rs20, %rs19, 24;
	sub.s16 	%rs21, %rs287, %rs20;
	cvt.u32.u16 	%r415, %rs21;
	and.b32  	%r416, %r415, 255;
	mad.lo.s32 	%r417, %r416, 24, %r2;
	cvt.u16.u32 	%rs22, %r417;
	mul.hi.u16 	%rs23, %rs22, -7281;
	shr.u16 	%rs24, %rs23, 9;
	mul.lo.s16 	%rs25, %rs24, 576;
	sub.s16 	%rs26, %rs22, %rs25;
	cvt.u32.u16 	%r418, %rs26;
	mul.wide.u32 	%rd21, %r418, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r419, [%rd22];
	cvt.s32.s16 	%r420, %r419;
	shr.s32 	%r421, %r419, 16;
	mul.lo.s32 	%r422, %r421, 801;
	mad.lo.s32 	%r3416, %r420, 33, %r422;
LBB0_67:                                // %L433
	xor.b32  	%r307, %r311, -2147483648;
	mov.b32 	%r359, %f378;
	mov.b32 	%r360, %f384;
	mov.b32 	%r362, %f379;
	mov.b32 	%r363, %f385;
	xor.b32  	%r406, %r409, -2147483648;
	xor.b32  	%r407, %r410, -2147483648;
	and.b32  	%r47, %r1, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs288, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L433.L740_crit_edge
	mul.lo.s16 	%rs40, %rs288, 171;
	shr.u16 	%rs41, %rs40, 10;
	mul.lo.s16 	%rs42, %rs41, 6;
	sub.s16 	%rs43, %rs288, %rs42;
	cvt.u32.u16 	%r437, %rs43;
	and.b32  	%r3420, %r437, 255;
	cvt.u16.u32 	%rs44, %r2;
	and.b16  	%rs45, %rs44, 255;
	mul.lo.s16 	%rs46, %rs45, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, -6;
	add.s16 	%rs49, %rs48, %rs44;
	cvt.u32.u16 	%r439, %rs49;
	and.b32  	%r3419, %r439, 255;
	cvt.u32.u16 	%r3418, %rs47;
	mul.wide.u16 	%r3417, %rs47, 6;
	mov.u32 	%r3421, 0;
	mov.u32 	%r3422, %r3421;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L459
	ld.param.u64 	%rd2, [_Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	cvt.u16.u32 	%rs27, %r2;
	and.b16  	%rs28, %rs27, 255;
	mul.lo.s16 	%rs29, %rs28, 171;
	shr.u16 	%rs30, %rs29, 10;
	mul.lo.s16 	%rs31, %rs30, -6;
	add.s16 	%rs32, %rs31, %rs27;
	cvt.u32.u16 	%r424, %rs32;
	and.b32  	%r3419, %r424, 255;
	mul.lo.s32 	%r425, %r4, 576;
	mul.lo.s16 	%rs34, %rs288, 171;
	shr.u16 	%rs35, %rs34, 10;
	mul.lo.s16 	%rs36, %rs35, 6;
	sub.s16 	%rs37, %rs288, %rs36;
	cvt.u32.u16 	%r426, %rs37;
	and.b32  	%r3420, %r426, 255;
	and.b16  	%rs38, %rs37, 255;
	mul.wide.u16 	%r427, %rs38, 24;
	cvt.u32.u16 	%r3418, %rs30;
	mul.wide.u16 	%r3417, %rs30, 6;
	mad.lo.s32 	%r428, %r5, 144, %r425;
	or.b32  	%r429, %r428, %r3419;
	add.s32 	%r430, %r429, %r3417;
	add.s32 	%r431, %r430, %r427;
	mul.wide.u32 	%rd23, %r431, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3421, [%rd24];
	add.s32 	%r432, %r428, 147456;
	or.b32  	%r433, %r432, %r3419;
	add.s32 	%r434, %r433, %r3417;
	add.s32 	%r435, %r434, %r427;
	mul.wide.s32 	%rd25, %r435, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3422, [%rd26];
LBB0_70:                                // %L740
	ld.param.u64 	%rd3, [_Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r306, %r308, %r307;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r309, %r311, %r308;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r360, %r359;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r361, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r407, %r406;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r408, %r410, %r409;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r404, %r403;
	// end inline asm
	mov.u32 	%r3407, 0;
	shl.b32 	%r441, %r1, 11;
	and.b32  	%r64, %r441, 32768;
	shl.b32 	%r442, %r1, 2;
	and.b32  	%r65, %r442, 60;
	shl.b32 	%r66, %r4, 7;
	or.b32  	%r67, %r442, 64;
	add.s32 	%r68, %r2, 24;
	and.b16  	%rs1, %rs287, 16;
	and.b32  	%r443, %r232, 30;
	shr.u32 	%r444, %r1, 4;
	or.b32  	%r445, %r443, %r444;
	mul.lo.s32 	%r69, %r445, 257;
	or.b32  	%r446, %r444, %r232;
	or.b32  	%r447, %r446, 32;
	mul.lo.s32 	%r70, %r447, 257;
	shr.u32 	%r448, %r2, 3;
	and.b32  	%r449, %r3, 224;
	and.b16  	%rs51, %rs287, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs287, %rs54;
	cvt.u32.u16 	%r450, %rs55;
	and.b32  	%r71, %r450, 255;
	mad.lo.s32 	%r72, %r448, 257, %r449;
	shr.u32 	%r451, %r68, 3;
	mad.lo.s32 	%r73, %r451, 257, %r449;
	add.s32 	%r452, %r2, 48;
	shr.u32 	%r453, %r452, 3;
	mad.lo.s32 	%r74, %r453, 257, %r449;
	add.s32 	%r454, %r2, 72;
	shr.u32 	%r455, %r454, 3;
	mad.lo.s32 	%r75, %r455, 257, %r449;
	or.b32  	%r456, %r448, 12;
	mad.lo.s32 	%r76, %r456, 257, %r449;
	add.s32 	%r457, %r2, 120;
	shr.u32 	%r458, %r457, 3;
	mad.lo.s32 	%r77, %r458, 257, %r449;
	add.s32 	%r459, %r2, 144;
	shr.u32 	%r460, %r459, 3;
	mad.lo.s32 	%r78, %r460, 257, %r449;
	add.s32 	%r461, %r2, 168;
	shr.u32 	%r462, %r461, 3;
	mad.lo.s32 	%r79, %r462, 257, %r449;
	or.b32  	%r463, %r448, 24;
	mad.lo.s32 	%r80, %r463, 257, %r449;
	add.s32 	%r464, %r2, 216;
	shr.u32 	%r465, %r464, 3;
	mad.lo.s32 	%r81, %r465, 257, %r449;
	add.s32 	%r466, %r2, 240;
	shr.u32 	%r467, %r466, 3;
	mad.lo.s32 	%r82, %r467, 257, %r449;
	add.s32 	%r468, %r2, 264;
	shr.u32 	%r469, %r468, 3;
	mad.lo.s32 	%r83, %r469, 257, %r449;
	or.b32  	%r470, %r448, 36;
	mad.lo.s32 	%r84, %r470, 257, %r449;
	add.s32 	%r471, %r2, 312;
	shr.u32 	%r472, %r471, 3;
	mad.lo.s32 	%r85, %r472, 257, %r449;
	add.s32 	%r473, %r2, 336;
	shr.u32 	%r474, %r473, 3;
	mad.lo.s32 	%r86, %r474, 257, %r449;
	add.s32 	%r475, %r2, 360;
	shr.u32 	%r476, %r475, 3;
	mad.lo.s32 	%r87, %r476, 257, %r449;
	or.b32  	%r477, %r448, 48;
	mad.lo.s32 	%r88, %r477, 257, %r449;
	add.s32 	%r478, %r2, 408;
	shr.u32 	%r479, %r478, 3;
	mad.lo.s32 	%r89, %r479, 257, %r449;
	add.s32 	%r480, %r2, 432;
	shr.u32 	%r481, %r480, 3;
	mad.lo.s32 	%r90, %r481, 257, %r449;
	add.s32 	%r482, %r2, 456;
	shr.u32 	%r483, %r482, 3;
	mad.lo.s32 	%r91, %r483, 257, %r449;
	or.b32  	%r484, %r448, 60;
	mad.lo.s32 	%r92, %r484, 257, %r449;
	add.s32 	%r485, %r2, 504;
	bfe.u32 	%r486, %r485, 3, 6;
	mad.lo.s32 	%r93, %r486, 257, %r449;
	mul.lo.s32 	%r487, %r5, 4806;
	mad.lo.s32 	%r488, %r3419, 33, %r487;
	mad.lo.s32 	%r489, %r3418, 198, %r488;
	mad.lo.s32 	%r490, %r3420, 801, %r489;
	bfe.u32 	%r491, %r1, 3, 1;
	mul.lo.s32 	%r492, %r491, 514;
	mul.lo.s32 	%r493, %r444, 257;
	and.b32  	%r494, %r1, 1;
	mul.lo.s32 	%r495, %r494, 4112;
	and.b32  	%r496, %r6, 1;
	mul.lo.s32 	%r497, %r496, 1028;
	bfe.u32 	%r498, %r1, 1, 1;
	mul.lo.s32 	%r499, %r498, 2056;
	add.s32 	%r500, %r495, %r493;
	add.s32 	%r501, %r500, %r492;
	add.s32 	%r502, %r501, %r497;
	add.s32 	%r503, %r502, %r3419;
	add.s32 	%r504, %r503, %r499;
	add.s32 	%r94, %r504, %r3417;
	mul.wide.u32 	%rd27, %r94, 4;
	mov.u64 	%rd28, shmem;
	add.s64 	%rd6, %rd28, %rd27;
	add.s32 	%r95, %r94, 8256;
	cvt.u64.u32 	%rd29, %r3417;
	cvt.u64.u32 	%rd30, %r499;
	cvt.u64.u32 	%rd31, %r3419;
	cvt.u64.u32 	%rd32, %r497;
	cvt.u64.u32 	%rd33, %r492;
	cvt.u64.u32 	%rd34, %r495;
	cvt.u64.u32 	%rd35, %r493;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd33;
	add.s64 	%rd38, %rd37, %rd32;
	add.s64 	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	add.s64 	%rd41, %rd40, %rd29;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd7, %rd28, %rd42;
	add.s32 	%r96, %r94, 32;
	add.s32 	%r97, %r94, 8288;
	bfe.u32 	%r505, %r2, 3, 1;
	shr.u32 	%r506, %r2, 4;
	mul.lo.s32 	%r507, %r506, 257;
	and.b32  	%r508, %r2, 1;
	bfe.u32 	%r509, %r2, 2, 1;
	bfe.u32 	%r510, %r2, 1, 1;
	mad.lo.s32 	%r511, %r508, 4112, %r507;
	mad.lo.s32 	%r512, %r5, 6, %r511;
	mad.lo.s32 	%r513, %r505, 514, %r512;
	mad.lo.s32 	%r514, %r509, 1028, %r513;
	mad.lo.s32 	%r515, %r510, 2056, %r514;
	add.s32 	%r98, %r515, %r3420;
	mul.wide.u32 	%rd43, %r98, 4;
	add.s64 	%rd8, %rd28, %rd43;
	add.s32 	%r99, %r98, 8256;
	mul.wide.u32 	%rd44, %r99, 4;
	add.s64 	%rd9, %rd28, %rd44;
	add.s32 	%r100, %r98, 32;
	mul.wide.u32 	%rd45, %r100, 4;
	add.s64 	%rd10, %rd28, %rd45;
	add.s32 	%r101, %r98, 8288;
	mul.wide.u32 	%rd46, %r101, 4;
	add.s64 	%rd11, %rd28, %rd46;
	mul.lo.s32 	%r516, %r4, 59904;
	cvt.u16.u32 	%rs56, %r2;
	shl.b16 	%rs57, %rs56, 1;
	and.b16  	%rs58, %rs57, 254;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r517, %rs62;
	and.b32  	%r518, %r517, 254;
	or.b32  	%r519, %r516, %r71;
	mad.lo.s32 	%r102, %r518, 24, %r519;
	or.b16  	%rs63, %rs57, 1;
	and.b16  	%rs64, %rs63, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 13;
	mul.lo.s16 	%rs67, %rs66, 48;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r520, %rs68;
	and.b32  	%r521, %r520, 255;
	mad.lo.s32 	%r103, %r521, 24, %r519;
	mul.wide.u32 	%rd47, %r490, 4;
	add.s64 	%rd12, %rd28, %rd47;
	setp.gt.u32 	%p112, %r2, 7;
	setp.eq.s16 	%p113, %rs1, 0;
	setp.lt.u32 	%p115, %r1, 24;
	mov.u32 	%r3423, %r3407;
	mov.u32 	%r3454, %r3407;
	mov.u32 	%r3455, %r3407;
	mov.u32 	%r3456, %r3407;
	mov.u32 	%r3457, %r3407;
	bra.uni 	LBB0_71;
LBB0_92:                                // %guard_pass14622
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r291, %r3423, 48;
	setp.ne.s32 	%p141, %r3423, 2016;
	mov.u32 	%r3423, %r291;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L743
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r715, %r3423, -1431655765;
	shr.u32 	%r716, %r715, 5;
	mul.lo.s32 	%r109, %r716, 48;
	add.s32 	%r717, %r109, %r2;
	cvt.u16.u32 	%rs69, %r717;
	mul.hi.s16 	%rs70, %rs69, 16257;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 9;
	add.s16 	%rs73, %rs72, %rs71;
	mul.lo.s16 	%rs74, %rs73, 2064;
	sub.s16 	%rs75, %rs69, %rs74;
	cvt.u32.u16 	%r718, %rs75;
	shl.b32 	%r719, %r718, 16;
	or.b32  	%r720, %r719, %r64;
	or.b32  	%r721, %r720, %r65;
	or.b32  	%r722, %r721, %r66;
	mul.wide.s32 	%rd48, %r722, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r723, %r724, %r725, %r726}, [%rd49];
	or.b32  	%r727, %r720, %r67;
	or.b32  	%r728, %r727, %r66;
	mul.wide.s32 	%rd50, %r728, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r729, %r730, %r731, %r732}, [%rd51];
	add.s32 	%r733, %r68, %r109;
	cvt.u16.u32 	%rs76, %r733;
	mul.hi.s16 	%rs77, %rs76, 16257;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 9;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 2064;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.u32.u16 	%r734, %rs82;
	shl.b32 	%r735, %r734, 16;
	or.b32  	%r736, %r735, %r64;
	or.b32  	%r737, %r736, %r65;
	or.b32  	%r738, %r737, %r66;
	mul.wide.s32 	%rd52, %r738, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r739, %r740, %r741, %r742}, [%rd53];
	or.b32  	%r743, %r736, %r67;
	or.b32  	%r744, %r743, %r66;
	mul.wide.s32 	%rd54, %r744, 4;
	add.s64 	%rd55, %rd3, %rd54;
	ld.global.v4.u32 	{%r745, %r746, %r747, %r748}, [%rd55];
	selp.b32 	%r749, %r725, %r723, %p113;
	shfl.sync.bfly.b32	%r750, %r749, 16, 31, -1;
	selp.b32 	%r524, %r723, %r750, %p113;
	selp.b32 	%r529, %r750, %r725, %p113;
	selp.b32 	%r751, %r726, %r724, %p113;
	shfl.sync.bfly.b32	%r752, %r751, 16, 31, -1;
	selp.b32 	%r532, %r724, %r752, %p113;
	selp.b32 	%r537, %r752, %r726, %p113;
	selp.b32 	%r753, %r731, %r729, %p113;
	shfl.sync.bfly.b32	%r754, %r753, 16, 31, -1;
	selp.b32 	%r540, %r729, %r754, %p113;
	selp.b32 	%r545, %r754, %r731, %p113;
	selp.b32 	%r755, %r732, %r730, %p113;
	shfl.sync.bfly.b32	%r756, %r755, 16, 31, -1;
	selp.b32 	%r548, %r730, %r756, %p113;
	selp.b32 	%r553, %r756, %r732, %p113;
	selp.b32 	%r757, %r741, %r739, %p113;
	shfl.sync.bfly.b32	%r758, %r757, 16, 31, -1;
	selp.b32 	%r556, %r739, %r758, %p113;
	selp.b32 	%r561, %r758, %r741, %p113;
	selp.b32 	%r759, %r742, %r740, %p113;
	shfl.sync.bfly.b32	%r760, %r759, 16, 31, -1;
	selp.b32 	%r564, %r740, %r760, %p113;
	selp.b32 	%r569, %r760, %r742, %p113;
	selp.b32 	%r761, %r747, %r745, %p113;
	shfl.sync.bfly.b32	%r762, %r761, 16, 31, -1;
	selp.b32 	%r572, %r745, %r762, %p113;
	selp.b32 	%r577, %r762, %r747, %p113;
	selp.b32 	%r763, %r748, %r746, %p113;
	shfl.sync.bfly.b32	%r764, %r763, 16, 31, -1;
	selp.b32 	%r580, %r746, %r764, %p113;
	selp.b32 	%r585, %r764, %r748, %p113;
	shl.b32 	%r525, %r529, 4;
	mov.u32 	%r523, 252645135;
	// begin inline asm
	lop3.b32 %r587, %r523, %r524, %r525, 202;
	// end inline asm
	shr.u32 	%r528, %r524, 4;
	// begin inline asm
	lop3.b32 %r603, %r523, %r528, %r529, 202;
	// end inline asm
	shl.b32 	%r533, %r537, 4;
	// begin inline asm
	lop3.b32 %r595, %r523, %r532, %r533, 202;
	// end inline asm
	shr.u32 	%r536, %r532, 4;
	// begin inline asm
	lop3.b32 %r611, %r523, %r536, %r537, 202;
	// end inline asm
	shl.b32 	%r541, %r545, 4;
	// begin inline asm
	lop3.b32 %r619, %r523, %r540, %r541, 202;
	// end inline asm
	shr.u32 	%r544, %r540, 4;
	// begin inline asm
	lop3.b32 %r635, %r523, %r544, %r545, 202;
	// end inline asm
	shl.b32 	%r549, %r553, 4;
	// begin inline asm
	lop3.b32 %r627, %r523, %r548, %r549, 202;
	// end inline asm
	shr.u32 	%r552, %r548, 4;
	// begin inline asm
	lop3.b32 %r643, %r523, %r552, %r553, 202;
	// end inline asm
	shl.b32 	%r557, %r561, 4;
	// begin inline asm
	lop3.b32 %r588, %r523, %r556, %r557, 202;
	// end inline asm
	shr.u32 	%r560, %r556, 4;
	// begin inline asm
	lop3.b32 %r604, %r523, %r560, %r561, 202;
	// end inline asm
	shl.b32 	%r565, %r569, 4;
	// begin inline asm
	lop3.b32 %r596, %r523, %r564, %r565, 202;
	// end inline asm
	shr.u32 	%r568, %r564, 4;
	// begin inline asm
	lop3.b32 %r612, %r523, %r568, %r569, 202;
	// end inline asm
	shl.b32 	%r573, %r577, 4;
	// begin inline asm
	lop3.b32 %r620, %r523, %r572, %r573, 202;
	// end inline asm
	shr.u32 	%r576, %r572, 4;
	// begin inline asm
	lop3.b32 %r636, %r523, %r576, %r577, 202;
	// end inline asm
	shl.b32 	%r581, %r585, 4;
	// begin inline asm
	lop3.b32 %r628, %r523, %r580, %r581, 202;
	// end inline asm
	shr.u32 	%r584, %r580, 4;
	// begin inline asm
	lop3.b32 %r644, %r523, %r584, %r585, 202;
	// end inline asm
	mov.u32 	%r589, 25152;
	// begin inline asm
	prmt.b32 %r651, %r587, %r588, %r589;
	// end inline asm
	mov.u32 	%r593, 29521;
	// begin inline asm
	prmt.b32 %r683, %r587, %r588, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r595, %r596, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r691, %r595, %r596, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r652, %r603, %r604, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r684, %r603, %r604, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r611, %r612, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r692, %r611, %r612, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r667, %r619, %r620, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r699, %r619, %r620, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r675, %r627, %r628, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r627, %r628, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r668, %r635, %r636, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r635, %r636, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r676, %r643, %r644, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r643, %r644, %r593;
	// end inline asm
	mov.u32 	%r709, 21520;
	// begin inline asm
	prmt.b32 %r650, %r651, %r652, %r709;
	// end inline asm
	mov.u32 	%r713, 30258;
	// begin inline asm
	prmt.b32 %r654, %r651, %r652, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r659, %r660, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r659, %r660, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r666, %r667, %r668, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r667, %r668, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r674, %r675, %r676, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r675, %r676, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r682, %r683, %r684, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r683, %r684, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r690, %r691, %r692, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r691, %r692, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r698, %r699, %r700, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r699, %r700, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r707, %r708, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r707, %r708, %r713;
	// end inline asm
	mul.hi.s16 	%rs83, %rs69, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs69, %rs87;
	cvt.s32.s16 	%r765, %rs88;
	add.s32 	%r766, %r69, %r765;
	mul.wide.s32 	%rd56, %r766, 4;
	add.s64 	%rd58, %rd28, %rd56;
	st.shared.u32 	[%rd58], %r650;
	st.shared.u32 	[%rd58+512], %r658;
	st.shared.u32 	[%rd58+256], %r654;
	st.shared.u32 	[%rd58+768], %r662;
	add.s32 	%r767, %r70, %r765;
	mul.wide.s32 	%rd59, %r767, 4;
	add.s64 	%rd60, %rd28, %rd59;
	st.shared.u32 	[%rd60], %r666;
	st.shared.u32 	[%rd60+512], %r674;
	st.shared.u32 	[%rd60+256], %r670;
	st.shared.u32 	[%rd60+768], %r678;
	st.shared.u32 	[%rd58+128], %r682;
	st.shared.u32 	[%rd58+640], %r690;
	st.shared.u32 	[%rd58+384], %r686;
	st.shared.u32 	[%rd58+896], %r694;
	st.shared.u32 	[%rd60+128], %r698;
	st.shared.u32 	[%rd60+640], %r706;
	st.shared.u32 	[%rd60+384], %r702;
	st.shared.u32 	[%rd60+896], %r710;
	bar.sync 	0;
	add.s32 	%r768, %r109, %r71;
	cvt.u16.u32 	%rs89, %r768;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r769, %rs95;
	add.s32 	%r770, %r72, %r769;
	mul.wide.s32 	%rd61, %r770, 4;
	add.s64 	%rd62, %rd28, %rd61;
	ld.shared.u32 	%r771, [%rd62];
	add.s32 	%r772, %r73, %r769;
	mul.wide.u32 	%rd63, %r772, 4;
	add.s64 	%rd64, %rd28, %rd63;
	ld.shared.u32 	%r773, [%rd64];
	add.s32 	%r774, %r74, %r769;
	mul.wide.u32 	%rd65, %r774, 4;
	add.s64 	%rd66, %rd28, %rd65;
	ld.shared.u32 	%r775, [%rd66];
	add.s32 	%r776, %r75, %r769;
	mul.wide.u32 	%rd67, %r776, 4;
	add.s64 	%rd68, %rd28, %rd67;
	ld.shared.u32 	%r777, [%rd68];
	add.s32 	%r778, %r76, %r769;
	mul.wide.s32 	%rd69, %r778, 4;
	add.s64 	%rd70, %rd28, %rd69;
	ld.shared.u32 	%r779, [%rd70];
	add.s32 	%r780, %r77, %r769;
	mul.wide.u32 	%rd71, %r780, 4;
	add.s64 	%rd72, %rd28, %rd71;
	ld.shared.u32 	%r781, [%rd72];
	add.s32 	%r782, %r78, %r769;
	mul.wide.u32 	%rd73, %r782, 4;
	add.s64 	%rd74, %rd28, %rd73;
	ld.shared.u32 	%r783, [%rd74];
	add.s32 	%r784, %r79, %r769;
	mul.wide.u32 	%rd75, %r784, 4;
	add.s64 	%rd76, %rd28, %rd75;
	ld.shared.u32 	%r785, [%rd76];
	add.s32 	%r786, %r80, %r769;
	mul.wide.s32 	%rd77, %r786, 4;
	add.s64 	%rd78, %rd28, %rd77;
	ld.shared.u32 	%r787, [%rd78];
	add.s32 	%r788, %r81, %r769;
	mul.wide.u32 	%rd79, %r788, 4;
	add.s64 	%rd80, %rd28, %rd79;
	ld.shared.u32 	%r789, [%rd80];
	add.s32 	%r790, %r82, %r769;
	mul.wide.u32 	%rd81, %r790, 4;
	add.s64 	%rd82, %rd28, %rd81;
	ld.shared.u32 	%r791, [%rd82];
	add.s32 	%r792, %r83, %r769;
	mul.wide.u32 	%rd83, %r792, 4;
	add.s64 	%rd84, %rd28, %rd83;
	ld.shared.u32 	%r793, [%rd84];
	add.s32 	%r794, %r84, %r769;
	mul.wide.s32 	%rd85, %r794, 4;
	add.s64 	%rd86, %rd28, %rd85;
	ld.shared.u32 	%r795, [%rd86];
	add.s32 	%r796, %r85, %r769;
	mul.wide.u32 	%rd87, %r796, 4;
	add.s64 	%rd88, %rd28, %rd87;
	ld.shared.u32 	%r797, [%rd88];
	add.s32 	%r798, %r86, %r769;
	mul.wide.u32 	%rd89, %r798, 4;
	add.s64 	%rd90, %rd28, %rd89;
	ld.shared.u32 	%r799, [%rd90];
	add.s32 	%r800, %r87, %r769;
	mul.wide.u32 	%rd91, %r800, 4;
	add.s64 	%rd92, %rd28, %rd91;
	ld.shared.u32 	%r801, [%rd92];
	add.s32 	%r802, %r88, %r769;
	mul.wide.s32 	%rd93, %r802, 4;
	add.s64 	%rd94, %rd28, %rd93;
	ld.shared.u32 	%r803, [%rd94];
	add.s32 	%r804, %r89, %r769;
	mul.wide.u32 	%rd95, %r804, 4;
	add.s64 	%rd96, %rd28, %rd95;
	ld.shared.u32 	%r805, [%rd96];
	add.s32 	%r806, %r90, %r769;
	mul.wide.u32 	%rd97, %r806, 4;
	add.s64 	%rd98, %rd28, %rd97;
	ld.shared.u32 	%r807, [%rd98];
	add.s32 	%r808, %r91, %r769;
	mul.wide.u32 	%rd99, %r808, 4;
	add.s64 	%rd100, %rd28, %rd99;
	ld.shared.u32 	%r809, [%rd100];
	add.s32 	%r810, %r92, %r769;
	mul.wide.s32 	%rd101, %r810, 4;
	add.s64 	%rd102, %rd28, %rd101;
	ld.shared.u32 	%r811, [%rd102];
	add.s32 	%r812, %r93, %r769;
	mul.wide.s32 	%rd103, %r812, 4;
	add.s64 	%rd104, %rd28, %rd103;
	ld.shared.u32 	%r813, [%rd104];
	bar.sync 	0;
	shfl.sync.idx.b32	%r814, %r3416, 0, 31, -1;
	shfl.sync.idx.b32	%r815, %r3416, 1, 31, -1;
	shfl.sync.idx.b32	%r816, %r3416, 2, 31, -1;
	shfl.sync.idx.b32	%r817, %r3416, 3, 31, -1;
	shfl.sync.idx.b32	%r818, %r3416, 4, 31, -1;
	shfl.sync.idx.b32	%r819, %r3416, 5, 31, -1;
	shfl.sync.idx.b32	%r820, %r3416, 6, 31, -1;
	shfl.sync.idx.b32	%r821, %r3416, 7, 31, -1;
	shfl.sync.idx.b32	%r822, %r3416, 8, 31, -1;
	shfl.sync.idx.b32	%r823, %r3416, 9, 31, -1;
	shfl.sync.idx.b32	%r824, %r3416, 10, 31, -1;
	shfl.sync.idx.b32	%r825, %r3416, 11, 31, -1;
	shfl.sync.idx.b32	%r826, %r3416, 12, 31, -1;
	shfl.sync.idx.b32	%r827, %r3416, 13, 31, -1;
	shfl.sync.idx.b32	%r828, %r3416, 14, 31, -1;
	shfl.sync.idx.b32	%r829, %r3416, 15, 31, -1;
	shfl.sync.idx.b32	%r830, %r3416, 16, 31, -1;
	shfl.sync.idx.b32	%r831, %r3416, 17, 31, -1;
	shfl.sync.idx.b32	%r832, %r3416, 18, 31, -1;
	shfl.sync.idx.b32	%r833, %r3416, 19, 31, -1;
	shfl.sync.idx.b32	%r834, %r3416, 20, 31, -1;
	shfl.sync.idx.b32	%r835, %r3416, 21, 31, -1;
	shfl.sync.idx.b32	%r836, %r3416, 22, 31, -1;
	shfl.sync.idx.b32	%r837, %r3416, 23, 31, -1;
	add.s32 	%r838, %r814, %r769;
	mul.wide.s32 	%rd105, %r838, 4;
	add.s64 	%rd106, %rd28, %rd105;
	st.shared.u32 	[%rd106], %r771;
	add.s32 	%r839, %r815, %r769;
	mul.wide.s32 	%rd107, %r839, 4;
	add.s64 	%rd108, %rd28, %rd107;
	st.shared.u32 	[%rd108], %r773;
	add.s32 	%r840, %r816, %r769;
	mul.wide.s32 	%rd109, %r840, 4;
	add.s64 	%rd110, %rd28, %rd109;
	st.shared.u32 	[%rd110], %r775;
	add.s32 	%r841, %r817, %r769;
	mul.wide.s32 	%rd111, %r841, 4;
	add.s64 	%rd112, %rd28, %rd111;
	st.shared.u32 	[%rd112], %r777;
	add.s32 	%r842, %r818, %r769;
	mul.wide.s32 	%rd113, %r842, 4;
	add.s64 	%rd114, %rd28, %rd113;
	st.shared.u32 	[%rd114], %r779;
	add.s32 	%r843, %r819, %r769;
	mul.wide.s32 	%rd115, %r843, 4;
	add.s64 	%rd116, %rd28, %rd115;
	st.shared.u32 	[%rd116], %r781;
	add.s32 	%r844, %r820, %r769;
	mul.wide.s32 	%rd117, %r844, 4;
	add.s64 	%rd118, %rd28, %rd117;
	st.shared.u32 	[%rd118], %r783;
	add.s32 	%r845, %r821, %r769;
	mul.wide.s32 	%rd119, %r845, 4;
	add.s64 	%rd120, %rd28, %rd119;
	st.shared.u32 	[%rd120], %r785;
	add.s32 	%r846, %r822, %r769;
	mul.wide.s32 	%rd121, %r846, 4;
	add.s64 	%rd122, %rd28, %rd121;
	st.shared.u32 	[%rd122], %r787;
	add.s32 	%r847, %r823, %r769;
	mul.wide.s32 	%rd123, %r847, 4;
	add.s64 	%rd124, %rd28, %rd123;
	st.shared.u32 	[%rd124], %r789;
	add.s32 	%r848, %r824, %r769;
	mul.wide.s32 	%rd125, %r848, 4;
	add.s64 	%rd126, %rd28, %rd125;
	st.shared.u32 	[%rd126], %r791;
	add.s32 	%r849, %r825, %r769;
	mul.wide.s32 	%rd127, %r849, 4;
	add.s64 	%rd128, %rd28, %rd127;
	st.shared.u32 	[%rd128], %r793;
	add.s32 	%r850, %r826, %r769;
	mul.wide.s32 	%rd129, %r850, 4;
	add.s64 	%rd130, %rd28, %rd129;
	st.shared.u32 	[%rd130], %r795;
	add.s32 	%r851, %r827, %r769;
	mul.wide.s32 	%rd131, %r851, 4;
	add.s64 	%rd132, %rd28, %rd131;
	st.shared.u32 	[%rd132], %r797;
	add.s32 	%r852, %r828, %r769;
	mul.wide.s32 	%rd133, %r852, 4;
	add.s64 	%rd134, %rd28, %rd133;
	st.shared.u32 	[%rd134], %r799;
	add.s32 	%r853, %r829, %r769;
	mul.wide.s32 	%rd135, %r853, 4;
	add.s64 	%rd136, %rd28, %rd135;
	st.shared.u32 	[%rd136], %r801;
	add.s32 	%r854, %r830, %r769;
	mul.wide.s32 	%rd137, %r854, 4;
	add.s64 	%rd138, %rd28, %rd137;
	st.shared.u32 	[%rd138], %r803;
	add.s32 	%r855, %r831, %r769;
	mul.wide.s32 	%rd139, %r855, 4;
	add.s64 	%rd140, %rd28, %rd139;
	st.shared.u32 	[%rd140], %r805;
	add.s32 	%r856, %r832, %r769;
	mul.wide.s32 	%rd141, %r856, 4;
	add.s64 	%rd142, %rd28, %rd141;
	st.shared.u32 	[%rd142], %r807;
	add.s32 	%r857, %r833, %r769;
	mul.wide.s32 	%rd143, %r857, 4;
	add.s64 	%rd144, %rd28, %rd143;
	st.shared.u32 	[%rd144], %r809;
	add.s32 	%r858, %r834, %r769;
	mul.wide.s32 	%rd145, %r858, 4;
	add.s64 	%rd146, %rd28, %rd145;
	st.shared.u32 	[%rd146], %r811;
	selp.b32 	%r859, 0, %r813, %p112;
	add.s32 	%r860, %r835, %r769;
	mul.wide.s32 	%rd147, %r860, 4;
	add.s64 	%rd148, %rd28, %rd147;
	st.shared.u32 	[%rd148], %r859;
	add.s32 	%r861, %r836, %r769;
	mul.wide.s32 	%rd149, %r861, 4;
	add.s64 	%rd150, %rd28, %rd149;
	st.shared.u32 	[%rd150], %r3407;
	add.s32 	%r862, %r837, %r769;
	mul.wide.s32 	%rd151, %r862, 4;
	add.s64 	%rd152, %rd28, %rd151;
	st.shared.u32 	[%rd152], %r3407;
	bar.sync 	0;
	mov.u32 	%r3428, %r3407;
	mov.u32 	%r3429, %r3407;
	mov.u32 	%r3430, %r3407;
	mov.u32 	%r3431, %r3407;
	mov.u32 	%r3432, %r3407;
	mov.u32 	%r3433, %r3407;
	mov.u32 	%r3434, %r3407;
	mov.u32 	%r3435, %r3407;
	mov.u32 	%r3436, %r3407;
	mov.u32 	%r3437, %r3407;
	mov.u32 	%r3438, %r3407;
	mov.u32 	%r3439, %r3407;
	mov.u32 	%r3440, %r3407;
	mov.u32 	%r3441, %r3407;
	mov.u32 	%r3442, %r3407;
	mov.u32 	%r3443, %r3407;
	mov.u32 	%r3444, %r3407;
	mov.u32 	%r3445, %r3407;
	mov.u32 	%r3446, %r3407;
	mov.u32 	%r3447, %r3407;
	mov.u32 	%r3448, %r3407;
	mov.u32 	%r3449, %r3407;
	mov.u32 	%r3450, %r3407;
	mov.u32 	%r3451, %r3407;
	@%p111 bra 	LBB0_111;
	bra.uni 	LBB0_72;
LBB0_111:                               // %oksrem3295
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs96, %r109;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r863, %rs102;
	mul.wide.s32 	%rd153, %r863, 4;
	add.s64 	%rd154, %rd12, %rd153;
	ld.shared.u32 	%r3428, [%rd154];
	ld.shared.u32 	%r3429, [%rd12+4];
	ld.shared.u32 	%r3430, [%rd12+8];
	ld.shared.u32 	%r3431, [%rd12+12];
	ld.shared.u32 	%r3432, [%rd12+16];
	ld.shared.u32 	%r3433, [%rd12+20];
	ld.shared.u32 	%r3434, [%rd12+24];
	ld.shared.u32 	%r3435, [%rd12+28];
	ld.shared.u32 	%r3436, [%rd12+32];
	ld.shared.u32 	%r3437, [%rd12+36];
	ld.shared.u32 	%r3438, [%rd12+40];
	ld.shared.u32 	%r3439, [%rd12+44];
	ld.shared.u32 	%r3440, [%rd12+48];
	ld.shared.u32 	%r3441, [%rd12+52];
	ld.shared.u32 	%r3442, [%rd12+56];
	ld.shared.u32 	%r3443, [%rd12+60];
	add.s16 	%rs103, %rs96, 16;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r864, %rs109;
	mul.wide.s32 	%rd155, %r864, 4;
	add.s64 	%rd156, %rd12, %rd155;
	ld.shared.u32 	%r3444, [%rd156];
	add.s16 	%rs110, %rs96, 17;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r865, %rs116;
	mul.wide.s32 	%rd157, %r865, 4;
	add.s64 	%rd158, %rd12, %rd157;
	ld.shared.u32 	%r3445, [%rd158];
	add.s16 	%rs117, %rs96, 18;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r866, %rs123;
	mul.wide.s32 	%rd159, %r866, 4;
	add.s64 	%rd160, %rd12, %rd159;
	ld.shared.u32 	%r3446, [%rd160];
	add.s16 	%rs124, %rs96, 19;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r867, %rs130;
	mul.wide.s32 	%rd161, %r867, 4;
	add.s64 	%rd162, %rd12, %rd161;
	ld.shared.u32 	%r3447, [%rd162];
	add.s16 	%rs131, %rs96, 20;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r868, %rs137;
	mul.wide.s32 	%rd163, %r868, 4;
	add.s64 	%rd164, %rd12, %rd163;
	ld.shared.u32 	%r3448, [%rd164];
	add.s16 	%rs138, %rs96, 21;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r869, %rs144;
	mul.wide.s32 	%rd165, %r869, 4;
	add.s64 	%rd166, %rd12, %rd165;
	ld.shared.u32 	%r3449, [%rd166];
	add.s16 	%rs145, %rs96, 22;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r870, %rs151;
	mul.wide.s32 	%rd167, %r870, 4;
	add.s64 	%rd168, %rd12, %rd167;
	ld.shared.u32 	%r3450, [%rd168];
	add.s16 	%rs152, %rs96, 23;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r871, %rs158;
	mul.wide.s32 	%rd169, %r871, 4;
	add.s64 	%rd170, %rd12, %rd169;
	ld.shared.u32 	%r3451, [%rd170];
LBB0_72:                                // %L11376
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	add.s32 	%r134, %r109, 1;
	add.s32 	%r135, %r109, 2;
	add.s32 	%r136, %r109, 3;
	mov.u32 	%r3452, 12;
	mov.u32 	%r3453, %r3407;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L21393
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3455, %r3455, 1;
	mov.u32 	%r3454, 0;
	mov.u32 	%r3456, %r3454;
	mov.u32 	%r3457, %r3454;
LBB0_81:                                // %L21394
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3453, %r3453, 1;
	add.s32 	%r3452, %r3452, -4;
	setp.ne.s32 	%p127, %r3452, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L11402
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3452, 12;
	selp.b32 	%r1411, %r3428, 0, %p116;
	setp.eq.s32 	%p117, %r3452, 8;
	selp.b32 	%r1412, %r3432, %r1411, %p117;
	setp.eq.s32 	%p118, %r3452, 4;
	selp.b32 	%r1413, %r3436, %r1412, %p118;
	setp.eq.s32 	%p119, %r3452, 0;
	selp.b32 	%r1414, %r3440, %r1413, %p119;
	setp.eq.s32 	%p120, %r3452, -4;
	selp.b32 	%r1415, %r3444, %r1414, %p120;
	setp.eq.s32 	%p121, %r3452, -8;
	selp.b32 	%r1416, %r3448, %r1415, %p121;
	selp.b32 	%r1417, %r3429, 0, %p116;
	selp.b32 	%r1418, %r3433, %r1417, %p117;
	selp.b32 	%r1419, %r3437, %r1418, %p118;
	selp.b32 	%r1420, %r3441, %r1419, %p119;
	selp.b32 	%r1421, %r3445, %r1420, %p120;
	selp.b32 	%r1422, %r3449, %r1421, %p121;
	selp.b32 	%r1423, %r3430, 0, %p116;
	selp.b32 	%r1424, %r3434, %r1423, %p117;
	selp.b32 	%r1425, %r3438, %r1424, %p118;
	selp.b32 	%r1426, %r3442, %r1425, %p119;
	selp.b32 	%r1427, %r3446, %r1426, %p120;
	selp.b32 	%r1428, %r3450, %r1427, %p121;
	selp.b32 	%r1429, %r3431, 0, %p116;
	selp.b32 	%r1430, %r3435, %r1429, %p117;
	selp.b32 	%r1431, %r3439, %r1430, %p118;
	selp.b32 	%r1432, %r3443, %r1431, %p119;
	selp.b32 	%r1433, %r3447, %r1432, %p120;
	selp.b32 	%r1434, %r3451, %r1433, %p121;
	mov.u16 	%rs196, 25600;
	// begin inline asm
	mov.b32 %r879, {%rs196, %rs196};
	// end inline asm
	mov.u16 	%rs198, 21504;
	// begin inline asm
	mov.b32 %r890, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r878, %r1416, -2004318072;
	mov.u32 	%r1015, 983055;
	// begin inline asm
	lop3.b32 %r876, %r1015, %r878, %r879, 202;
	// end inline asm
	mov.u16 	%rs202, 18432;
	// begin inline asm
	mov.b32 %r880, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r881, %r879, %r880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r884, %r876, %r881;
	// end inline asm
	mov.u32 	%r1026, 15728880;
	// begin inline asm
	lop3.b32 %r887, %r1026, %r878, %r890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r892, %r890, %r891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r895, %r887, %r892;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r924, %r1422, -2004318072;
	// begin inline asm
	lop3.b32 %r922, %r1015, %r924, %r925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r927, %r925, %r926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r930, %r922, %r927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r933, %r1026, %r924, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r970, %r1428, -2004318072;
	// begin inline asm
	lop3.b32 %r968, %r1015, %r970, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r973, %r971, %r972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r976, %r968, %r973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r979, %r1026, %r970, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r1016, %r1434, -2004318072;
	// begin inline asm
	lop3.b32 %r1014, %r1015, %r1016, %r1017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1019, %r1017, %r1018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1022, %r1014, %r1019;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1025, %r1026, %r1016, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1030, %r1028, %r1029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1033, %r1025, %r1030;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r884;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1058, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r895;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1061, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r930;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1064, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r941;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1067, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r976;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1070, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r987;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1073, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r1022;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1076, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r1033;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1079, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1145, %r1142}, {%r306, %r309}, {%r1058}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1154, %r1151}, {%r306, %r309}, {%r1061}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1163, %r1160}, {%r306, %r309}, {%r1064}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1172, %r1169}, {%r306, %r309}, {%r1067}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1181, %r1178}, {%r306, %r309}, {%r1070}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1190, %r1187}, {%r306, %r309}, {%r1073}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1199, %r1196}, {%r306, %r309}, {%r1076}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1208, %r1205}, {%r306, %r309}, {%r1079}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1138, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1140, %r1138, %r1142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r358, %r1145, %r1140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1147, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1149, %r1147, %r1151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r358, %r1154, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1156, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r1156, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r358, %r1163, %r1158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1165, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r1165, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r358, %r1172, %r1167;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1174, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1176, %r1174, %r1178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r358, %r1181, %r1176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1183, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r1183, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r358, %r1190, %r1185;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1192, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1194, %r1192, %r1196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1197, %r358, %r1199, %r1194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1201, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1203, %r1201, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1206, %r358, %r1208, %r1203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1210, %r361, %r1145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r358, %r1142, %r1210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r361, %r1154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r358, %r1151, %r1217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1224, %r361, %r1163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r358, %r1160, %r1224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1231, %r361, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1234, %r358, %r1169, %r1231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1238, %r361, %r1181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1241, %r358, %r1178, %r1238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r361, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r358, %r1187, %r1245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r361, %r1199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r358, %r1196, %r1252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1259, %r361, %r1208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1262, %r358, %r1205, %r1259;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1347, %r1348}, {%r402, %r408, %r405, %r411}, {%r1143, %r1213}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1355, %r1356}, {%r402, %r408, %r405, %r411}, {%r1152, %r1220}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1363, %r1364}, {%r402, %r408, %r405, %r411}, {%r1161, %r1227}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1371, %r1372}, {%r402, %r408, %r405, %r411}, {%r1170, %r1234}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1379, %r1380}, {%r402, %r408, %r405, %r411}, {%r1179, %r1241}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1387, %r1388}, {%r402, %r408, %r405, %r411}, {%r1188, %r1248}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1395, %r1396}, {%r402, %r408, %r405, %r411}, {%r1197, %r1255}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1403, %r1404}, {%r402, %r408, %r405, %r411}, {%r1206, %r1262}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1346, %r1347, %r1348, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1350, %r1347, %r1348, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1354, %r1355, %r1356, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1358, %r1355, %r1356, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1362, %r1363, %r1364, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1366, %r1363, %r1364, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1370, %r1371, %r1372, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1374, %r1371, %r1372, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1378, %r1379, %r1380, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1382, %r1379, %r1380, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1386, %r1387, %r1388, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1390, %r1387, %r1388, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1394, %r1395, %r1396, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1398, %r1395, %r1396, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1402, %r1403, %r1404, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1406, %r1403, %r1404, %r713;
	// end inline asm
	st.shared.u32 	[%rd6], %r1346;
	st.shared.u32 	[%rd7+33024], %r1350;
	st.shared.u32 	[%rd7+128], %r1354;
	st.shared.u32 	[%rd7+33152], %r1358;
	cvt.u16.u32 	%rs207, %r3453;
	and.b16  	%rs208, %rs207, 255;
	mul.lo.s16 	%rs209, %rs208, 171;
	shr.u16 	%rs210, %rs209, 10;
	mul.lo.s16 	%rs211, %rs210, 6;
	sub.s16 	%rs212, %rs207, %rs211;
	shl.b16 	%rs213, %rs212, 2;
	cvt.u32.u16 	%r1435, %rs213;
	and.b32  	%r1436, %r1435, 252;
	add.s32 	%r1437, %r134, %r1436;
	shr.s32 	%r1438, %r1437, 31;
	shr.u32 	%r1439, %r1438, 30;
	add.s32 	%r1440, %r1437, %r1439;
	and.b32  	%r1441, %r1440, 67108860;
	sub.s32 	%r1442, %r1437, %r1441;
	shl.b32 	%r143, %r1442, 6;
	add.s32 	%r1443, %r94, %r143;
	mul.wide.s32 	%rd171, %r1443, 4;
	add.s64 	%rd173, %rd28, %rd171;
	st.shared.u32 	[%rd173], %r1362;
	add.s32 	%r1444, %r95, %r143;
	mul.wide.u32 	%rd174, %r1444, 4;
	add.s64 	%rd175, %rd28, %rd174;
	st.shared.u32 	[%rd175], %r1366;
	add.s32 	%r1445, %r96, %r143;
	mul.wide.s32 	%rd176, %r1445, 4;
	add.s64 	%rd177, %rd28, %rd176;
	st.shared.u32 	[%rd177], %r1370;
	add.s32 	%r1446, %r97, %r143;
	mul.wide.u32 	%rd178, %r1446, 4;
	add.s64 	%rd179, %rd28, %rd178;
	st.shared.u32 	[%rd179], %r1374;
	add.s32 	%r1447, %r135, %r1436;
	shr.s32 	%r1448, %r1447, 31;
	shr.u32 	%r1449, %r1448, 30;
	add.s32 	%r1450, %r1447, %r1449;
	and.b32  	%r1451, %r1450, 67108860;
	sub.s32 	%r1452, %r1447, %r1451;
	shl.b32 	%r144, %r1452, 6;
	add.s32 	%r1453, %r94, %r144;
	mul.wide.s32 	%rd180, %r1453, 4;
	add.s64 	%rd181, %rd28, %rd180;
	st.shared.u32 	[%rd181], %r1378;
	add.s32 	%r1454, %r95, %r144;
	mul.wide.u32 	%rd182, %r1454, 4;
	add.s64 	%rd183, %rd28, %rd182;
	st.shared.u32 	[%rd183], %r1382;
	add.s32 	%r1455, %r96, %r144;
	mul.wide.s32 	%rd184, %r1455, 4;
	add.s64 	%rd185, %rd28, %rd184;
	st.shared.u32 	[%rd185], %r1386;
	add.s32 	%r1456, %r97, %r144;
	mul.wide.u32 	%rd186, %r1456, 4;
	add.s64 	%rd187, %rd28, %rd186;
	st.shared.u32 	[%rd187], %r1390;
	add.s32 	%r1457, %r136, %r1436;
	shr.s32 	%r1458, %r1457, 31;
	shr.u32 	%r1459, %r1458, 30;
	add.s32 	%r1460, %r1457, %r1459;
	and.b32  	%r1461, %r1460, 67108860;
	sub.s32 	%r1462, %r1457, %r1461;
	shl.b32 	%r145, %r1462, 6;
	add.s32 	%r1463, %r94, %r145;
	mul.wide.s32 	%rd188, %r1463, 4;
	add.s64 	%rd189, %rd28, %rd188;
	st.shared.u32 	[%rd189], %r1394;
	add.s32 	%r1464, %r95, %r145;
	mul.wide.u32 	%rd190, %r1464, 4;
	add.s64 	%rd191, %rd28, %rd190;
	st.shared.u32 	[%rd191], %r1398;
	add.s32 	%r1465, %r96, %r145;
	mul.wide.s32 	%rd192, %r1465, 4;
	add.s64 	%rd193, %rd28, %rd192;
	st.shared.u32 	[%rd193], %r1402;
	add.s32 	%r1466, %r97, %r145;
	mul.wide.u32 	%rd194, %r1466, 4;
	add.s64 	%rd195, %rd28, %rd194;
	st.shared.u32 	[%rd195], %r1406;
	bar.sync 	0;
	mov.u32 	%r3458, %r3407;
	mov.u32 	%r3459, %r3407;
	mov.u32 	%r3460, %r3407;
	mov.u32 	%r3461, %r3407;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_74;
LBB0_112:                               // %oksrem7030
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3458, [%rd8];
	ld.shared.u32 	%r3459, [%rd9];
	ld.shared.u32 	%r3460, [%rd10];
	ld.shared.u32 	%r3461, [%rd11];
LBB0_74:                                // %L17281
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1502, %r1499}, {%r306, %r309}, {%r3458}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1511, %r1508}, {%r306, %r309}, {%r3459}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1520, %r1517}, {%r306, %r309}, {%r3460}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1529, %r1526}, {%r306, %r309}, {%r3461}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1495, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r1495, %r1499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r358, %r1502, %r1497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1504, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1506, %r1504, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r358, %r1511, %r1506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1513, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1515, %r1513, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r358, %r1520, %r1515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1522, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r1522, %r1526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r358, %r1529, %r1524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1531, %r361, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r358, %r1499, %r1531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1538, %r361, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r358, %r1508, %r1538;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1545, %r361, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r358, %r1517, %r1545;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1552, %r361, %r1529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1555, %r358, %r1526, %r1552;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1600, %r1604}, {%r402, %r408, %r405, %r411}, {%r1500, %r1534}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1616, %r1620}, {%r402, %r408, %r405, %r411}, {%r1509, %r1541}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1608, %r1612}, {%r402, %r408, %r405, %r411}, {%r1518, %r1548}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1624, %r1628}, {%r402, %r408, %r405, %r411}, {%r1527, %r1555}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1599, %r1600, %r1600, %r3457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1603, %r1604, %r1604, %r1599;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r1608, %r1608, %r1603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r1612, %r1612, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1615, %r1616, %r1616, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r1620, %r1620, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r1624, %r1624, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1627, %r1628, %r1628, %r1623;
	// end inline asm
	mov.u32 	%r3462, %r3407;
	mov.u32 	%r3463, %r3407;
	mov.u32 	%r3464, %r3407;
	mov.u32 	%r3465, %r3407;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_75;
LBB0_113:                               // %oksrem7565
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1632, %r98, %r143;
	mul.wide.s32 	%rd196, %r1632, 4;
	add.s64 	%rd198, %rd28, %rd196;
	ld.shared.u32 	%r3462, [%rd198];
	add.s32 	%r1633, %r99, %r143;
	mul.wide.u32 	%rd199, %r1633, 4;
	add.s64 	%rd200, %rd28, %rd199;
	ld.shared.u32 	%r3463, [%rd200];
	add.s32 	%r1634, %r100, %r143;
	mul.wide.s32 	%rd201, %r1634, 4;
	add.s64 	%rd202, %rd28, %rd201;
	ld.shared.u32 	%r3464, [%rd202];
	add.s32 	%r1635, %r101, %r143;
	mul.wide.u32 	%rd203, %r1635, 4;
	add.s64 	%rd204, %rd28, %rd203;
	ld.shared.u32 	%r3465, [%rd204];
LBB0_75:                                // %L18506
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1671, %r1668}, {%r306, %r309}, {%r3462}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1680, %r1677}, {%r306, %r309}, {%r3463}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1689, %r1686}, {%r306, %r309}, {%r3464}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1698, %r1695}, {%r306, %r309}, {%r3465}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1664, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1666, %r1664, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1669, %r358, %r1671, %r1666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1673, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1675, %r1673, %r1677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1678, %r358, %r1680, %r1675;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1682, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1684, %r1682, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r358, %r1689, %r1684;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1691, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1693, %r1691, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r358, %r1698, %r1693;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r361, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r358, %r1668, %r1700;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1707, %r361, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r358, %r1677, %r1707;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r361, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r358, %r1686, %r1714;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1721, %r361, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r358, %r1695, %r1721;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1769, %r1773}, {%r402, %r408, %r405, %r411}, {%r1669, %r1703}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1785, %r1789}, {%r402, %r408, %r405, %r411}, {%r1678, %r1710}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1777, %r1781}, {%r402, %r408, %r405, %r411}, {%r1687, %r1717}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1793, %r1797}, {%r402, %r408, %r405, %r411}, {%r1696, %r1724}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r1769, %r1769, %r1611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r1773, %r1773, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r1777, %r1777, %r1772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r1781, %r1781, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r1785, %r1785, %r1627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r1789, %r1789, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r1793, %r1793, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r1797, %r1797, %r1792;
	// end inline asm
	mov.u32 	%r3466, %r3407;
	mov.u32 	%r3467, %r3407;
	mov.u32 	%r3468, %r3407;
	mov.u32 	%r3469, %r3407;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_76;
LBB0_114:                               // %oksrem8100
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1801, %r98, %r144;
	mul.wide.s32 	%rd205, %r1801, 4;
	add.s64 	%rd207, %rd28, %rd205;
	ld.shared.u32 	%r3466, [%rd207];
	add.s32 	%r1802, %r99, %r144;
	mul.wide.u32 	%rd208, %r1802, 4;
	add.s64 	%rd209, %rd28, %rd208;
	ld.shared.u32 	%r3467, [%rd209];
	add.s32 	%r1803, %r100, %r144;
	mul.wide.s32 	%rd210, %r1803, 4;
	add.s64 	%rd211, %rd28, %rd210;
	ld.shared.u32 	%r3468, [%rd211];
	add.s32 	%r1804, %r101, %r144;
	mul.wide.u32 	%rd212, %r1804, 4;
	add.s64 	%rd213, %rd28, %rd212;
	ld.shared.u32 	%r3469, [%rd213];
LBB0_76:                                // %L19731
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1840, %r1837}, {%r306, %r309}, {%r3466}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1849, %r1846}, {%r306, %r309}, {%r3467}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1858, %r1855}, {%r306, %r309}, {%r3468}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1867, %r1864}, {%r306, %r309}, {%r3469}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1833, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1835, %r1833, %r1837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1838, %r358, %r1840, %r1835;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1842, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1844, %r1842, %r1846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r358, %r1849, %r1844;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1851, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1853, %r1851, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r358, %r1858, %r1853;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1860, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r1860, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r358, %r1867, %r1862;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1869, %r361, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r358, %r1837, %r1869;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1876, %r361, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1879, %r358, %r1846, %r1876;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1883, %r361, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r358, %r1855, %r1883;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1890, %r361, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r358, %r1864, %r1890;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1938, %r1942}, {%r402, %r408, %r405, %r411}, {%r1838, %r1872}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1954, %r1958}, {%r402, %r408, %r405, %r411}, {%r1847, %r1879}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1946, %r1950}, {%r402, %r408, %r405, %r411}, {%r1856, %r1886}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1962, %r1966}, {%r402, %r408, %r405, %r411}, {%r1865, %r1893}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r1938, %r1938, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1941, %r1942, %r1942, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r1946, %r1946, %r1941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1949, %r1950, %r1950, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r1954, %r1954, %r1796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r1958, %r1958, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r1962, %r1962, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r1966, %r1966, %r1961;
	// end inline asm
	mov.u32 	%r3470, %r3407;
	mov.u32 	%r3471, %r3407;
	mov.u32 	%r3472, %r3407;
	mov.u32 	%r3473, %r3407;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_77;
LBB0_115:                               // %oksrem8635
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1970, %r98, %r145;
	mul.wide.s32 	%rd214, %r1970, 4;
	add.s64 	%rd216, %rd28, %rd214;
	ld.shared.u32 	%r3470, [%rd216];
	add.s32 	%r1971, %r99, %r145;
	mul.wide.u32 	%rd217, %r1971, 4;
	add.s64 	%rd218, %rd28, %rd217;
	ld.shared.u32 	%r3471, [%rd218];
	add.s32 	%r1972, %r100, %r145;
	mul.wide.s32 	%rd219, %r1972, 4;
	add.s64 	%rd220, %rd28, %rd219;
	ld.shared.u32 	%r3472, [%rd220];
	add.s32 	%r1973, %r101, %r145;
	mul.wide.u32 	%rd221, %r1973, 4;
	add.s64 	%rd222, %rd28, %rd221;
	ld.shared.u32 	%r3473, [%rd222];
LBB0_77:                                // %L20956
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2009, %r2006}, {%r306, %r309}, {%r3470}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2018, %r2015}, {%r306, %r309}, {%r3471}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2027, %r2024}, {%r306, %r309}, {%r3472}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2036, %r2033}, {%r306, %r309}, {%r3473}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2002, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r2002, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r358, %r2009, %r2004;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2011, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r2011, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r358, %r2018, %r2013;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2020, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2022, %r2020, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r358, %r2027, %r2022;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2029, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2031, %r2029, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r358, %r2036, %r2031;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2038, %r361, %r2009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r358, %r2006, %r2038;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2045, %r361, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r358, %r2015, %r2045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r361, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r358, %r2024, %r2052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2059, %r361, %r2036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2062, %r358, %r2033, %r2059;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2107, %r2111}, {%r402, %r408, %r405, %r411}, {%r2007, %r2041}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2123, %r2127}, {%r402, %r408, %r405, %r411}, {%r2016, %r2048}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2115, %r2119}, {%r402, %r408, %r405, %r411}, {%r2025, %r2055}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2131, %r2135}, {%r402, %r408, %r405, %r411}, {%r2034, %r2062}, {%r3407, %r3407};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2106, %r2107, %r2107, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2110, %r2111, %r2111, %r2106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2114, %r2115, %r2115, %r2110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3457, %r2119, %r2119, %r2114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2122, %r2123, %r2123, %r1965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2126, %r2127, %r2127, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2130, %r2131, %r2131, %r2126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3456, %r2135, %r2135, %r2130;
	// end inline asm
	add.s32 	%r3454, %r3454, 4;
	setp.ne.s32 	%p125, %r3454, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L21102
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L21161
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2138, %r3455, 1152;
	add.s32 	%r2139, %r102, %r2138;
	mul.wide.u32 	%rd223, %r2139, 4;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r3457;
	add.s32 	%r2140, %r103, %r2138;
	mul.wide.u32 	%rd225, %r2140, 4;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r3456;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L21423.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r178, %r109, 25;
	add.s32 	%r179, %r109, 26;
	add.s32 	%r180, %r109, 27;
	mov.u32 	%r2143, 0;
	mov.u32 	%r3478, 12;
	mov.u32 	%r3479, %r2143;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L31414
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3455, %r3455, 1;
	mov.u32 	%r3456, 0;
	mov.u32 	%r3457, %r3456;
	mov.u32 	%r3454, %r3456;
LBB0_91:                                // %L31415
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3479, %r3479, 1;
	add.s32 	%r3478, %r3478, -4;
	setp.eq.s32 	%p140, %r3478, -12;
	@%p140 bra 	LBB0_92;
LBB0_83:                                // %L21423
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3478, 12;
	selp.b32 	%r2681, %r3428, 0, %p129;
	setp.eq.s32 	%p130, %r3478, 8;
	selp.b32 	%r2682, %r3432, %r2681, %p130;
	setp.eq.s32 	%p131, %r3478, 4;
	selp.b32 	%r2683, %r3436, %r2682, %p131;
	setp.eq.s32 	%p132, %r3478, 0;
	selp.b32 	%r2684, %r3440, %r2683, %p132;
	setp.eq.s32 	%p133, %r3478, -4;
	selp.b32 	%r2685, %r3444, %r2684, %p133;
	setp.eq.s32 	%p134, %r3478, -8;
	selp.b32 	%r2686, %r3448, %r2685, %p134;
	selp.b32 	%r2687, %r3429, 0, %p129;
	selp.b32 	%r2688, %r3433, %r2687, %p130;
	selp.b32 	%r2689, %r3437, %r2688, %p131;
	selp.b32 	%r2690, %r3441, %r2689, %p132;
	selp.b32 	%r2691, %r3445, %r2690, %p133;
	selp.b32 	%r2692, %r3449, %r2691, %p134;
	selp.b32 	%r2693, %r3430, 0, %p129;
	selp.b32 	%r2694, %r3434, %r2693, %p130;
	selp.b32 	%r2695, %r3438, %r2694, %p131;
	selp.b32 	%r2696, %r3442, %r2695, %p132;
	selp.b32 	%r2697, %r3446, %r2696, %p133;
	selp.b32 	%r2698, %r3450, %r2697, %p134;
	selp.b32 	%r2699, %r3431, 0, %p129;
	selp.b32 	%r2700, %r3435, %r2699, %p130;
	selp.b32 	%r2701, %r3439, %r2700, %p131;
	selp.b32 	%r2702, %r3443, %r2701, %p132;
	selp.b32 	%r2703, %r3447, %r2702, %p133;
	selp.b32 	%r2704, %r3451, %r2703, %p134;
	// begin inline asm
	mov.b32 %r2171, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2705, %r2686, 8;
	xor.b32  	%r2181, %r2705, 8947848;
	// begin inline asm
	lop3.b32 %r2168, %r1015, %r2181, %r2171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2172, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2173, %r2171, %r2172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2176, %r2168, %r2173;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2179, %r1026, %r2181, %r2182, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2183, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2184, %r2182, %r2183;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2187, %r2179, %r2184;
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2228, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2706, %r2692, 8;
	xor.b32  	%r2227, %r2706, 8947848;
	// begin inline asm
	lop3.b32 %r2214, %r1015, %r2227, %r2217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2219, %r2217, %r2218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2222, %r2214, %r2219;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2225, %r1026, %r2227, %r2228, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2230, %r2228, %r2229;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2233, %r2225, %r2230;
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2707, %r2698, 8;
	xor.b32  	%r2273, %r2707, 8947848;
	// begin inline asm
	lop3.b32 %r2260, %r1015, %r2273, %r2263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2265, %r2263, %r2264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2268, %r2260, %r2265;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2271, %r1026, %r2273, %r2274, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2276, %r2274, %r2275;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2279, %r2271, %r2276;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2708, %r2704, 8;
	xor.b32  	%r2319, %r2708, 8947848;
	// begin inline asm
	lop3.b32 %r2306, %r1015, %r2319, %r2309, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2309, %r2310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2314, %r2306, %r2311;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2317, %r1026, %r2319, %r2320, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2322, %r2320, %r2321;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2325, %r2317, %r2322;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r2176;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2328, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r2187;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2331, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r2222;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2334, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r2233;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2337, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r2268;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2340, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r2279;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2343, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3421;
    mov.b32 {%r2re, %r2im}, %r2314;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2346, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3422;
    mov.b32 {%r2re, %r2im}, %r2325;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2349, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2415, %r2412}, {%r306, %r309}, {%r2328}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2424, %r2421}, {%r306, %r309}, {%r2331}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2433, %r2430}, {%r306, %r309}, {%r2334}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2442, %r2439}, {%r306, %r309}, {%r2337}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2451, %r2448}, {%r306, %r309}, {%r2340}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2460, %r2457}, {%r306, %r309}, {%r2343}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2469, %r2466}, {%r306, %r309}, {%r2346}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2478, %r2475}, {%r306, %r309}, {%r2349}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2408, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2410, %r2408, %r2412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2413, %r358, %r2415, %r2410;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2417, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2419, %r2417, %r2421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2422, %r358, %r2424, %r2419;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2426, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2428, %r2426, %r2430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2431, %r358, %r2433, %r2428;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2435, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2437, %r2435, %r2439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2440, %r358, %r2442, %r2437;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2444, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2446, %r2444, %r2448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2449, %r358, %r2451, %r2446;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2453, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2455, %r2453, %r2457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2458, %r358, %r2460, %r2455;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2462, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2464, %r2462, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2467, %r358, %r2469, %r2464;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2471, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2473, %r2471, %r2475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2476, %r358, %r2478, %r2473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2480, %r361, %r2415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2483, %r358, %r2412, %r2480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2487, %r361, %r2424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2490, %r358, %r2421, %r2487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2494, %r361, %r2433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2497, %r358, %r2430, %r2494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2501, %r361, %r2442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2504, %r358, %r2439, %r2501;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2508, %r361, %r2451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r358, %r2448, %r2508;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r361, %r2460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r358, %r2457, %r2515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2522, %r361, %r2469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2525, %r358, %r2466, %r2522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r361, %r2478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r358, %r2475, %r2529;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2617, %r2618}, {%r402, %r408, %r405, %r411}, {%r2413, %r2483}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2625, %r2626}, {%r402, %r408, %r405, %r411}, {%r2422, %r2490}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2633, %r2634}, {%r402, %r408, %r405, %r411}, {%r2431, %r2497}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2641, %r2642}, {%r402, %r408, %r405, %r411}, {%r2440, %r2504}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2649, %r2650}, {%r402, %r408, %r405, %r411}, {%r2449, %r2511}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2657, %r2658}, {%r402, %r408, %r405, %r411}, {%r2458, %r2518}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2665, %r2666}, {%r402, %r408, %r405, %r411}, {%r2467, %r2525}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2673, %r2674}, {%r402, %r408, %r405, %r411}, {%r2476, %r2532}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2616, %r2617, %r2618, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2620, %r2617, %r2618, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2624, %r2625, %r2626, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2628, %r2625, %r2626, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2632, %r2633, %r2634, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2636, %r2633, %r2634, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2640, %r2641, %r2642, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2644, %r2641, %r2642, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2648, %r2649, %r2650, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2652, %r2649, %r2650, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2656, %r2657, %r2658, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2660, %r2657, %r2658, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2664, %r2665, %r2666, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2668, %r2665, %r2666, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2672, %r2673, %r2674, %r709;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2676, %r2673, %r2674, %r713;
	// end inline asm
	st.shared.u32 	[%rd6], %r2616;
	st.shared.u32 	[%rd7+33024], %r2620;
	st.shared.u32 	[%rd7+128], %r2624;
	st.shared.u32 	[%rd7+33152], %r2628;
	cvt.u16.u32 	%rs262, %r3479;
	and.b16  	%rs263, %rs262, 255;
	mul.lo.s16 	%rs264, %rs263, 171;
	shr.u16 	%rs265, %rs264, 10;
	mul.lo.s16 	%rs266, %rs265, 6;
	sub.s16 	%rs267, %rs262, %rs266;
	shl.b16 	%rs268, %rs267, 2;
	cvt.u32.u16 	%r2709, %rs268;
	and.b32  	%r2710, %r2709, 252;
	add.s32 	%r2711, %r178, %r2710;
	cvt.u16.u32 	%rs269, %r2711;
	shr.s16 	%rs270, %rs269, 15;
	shr.u16 	%rs271, %rs270, 14;
	add.s16 	%rs272, %rs269, %rs271;
	and.b16  	%rs273, %rs272, -4;
	sub.s16 	%rs274, %rs269, %rs273;
	mul.wide.s16 	%r187, %rs274, 64;
	add.s32 	%r2712, %r94, %r187;
	mul.wide.s32 	%rd227, %r2712, 4;
	add.s64 	%rd229, %rd28, %rd227;
	st.shared.u32 	[%rd229], %r2632;
	add.s32 	%r2713, %r95, %r187;
	mul.wide.u32 	%rd230, %r2713, 4;
	add.s64 	%rd231, %rd28, %rd230;
	st.shared.u32 	[%rd231], %r2636;
	add.s32 	%r2714, %r96, %r187;
	mul.wide.s32 	%rd232, %r2714, 4;
	add.s64 	%rd233, %rd28, %rd232;
	st.shared.u32 	[%rd233], %r2640;
	add.s32 	%r2715, %r97, %r187;
	mul.wide.u32 	%rd234, %r2715, 4;
	add.s64 	%rd235, %rd28, %rd234;
	st.shared.u32 	[%rd235], %r2644;
	add.s32 	%r2716, %r179, %r2710;
	cvt.u16.u32 	%rs275, %r2716;
	shr.s16 	%rs276, %rs275, 15;
	shr.u16 	%rs277, %rs276, 14;
	add.s16 	%rs278, %rs275, %rs277;
	and.b16  	%rs279, %rs278, -4;
	sub.s16 	%rs280, %rs275, %rs279;
	mul.wide.s16 	%r188, %rs280, 64;
	add.s32 	%r2717, %r94, %r188;
	mul.wide.s32 	%rd236, %r2717, 4;
	add.s64 	%rd237, %rd28, %rd236;
	st.shared.u32 	[%rd237], %r2648;
	add.s32 	%r2718, %r95, %r188;
	mul.wide.u32 	%rd238, %r2718, 4;
	add.s64 	%rd239, %rd28, %rd238;
	st.shared.u32 	[%rd239], %r2652;
	add.s32 	%r2719, %r96, %r188;
	mul.wide.s32 	%rd240, %r2719, 4;
	add.s64 	%rd241, %rd28, %rd240;
	st.shared.u32 	[%rd241], %r2656;
	add.s32 	%r2720, %r97, %r188;
	mul.wide.u32 	%rd242, %r2720, 4;
	add.s64 	%rd243, %rd28, %rd242;
	st.shared.u32 	[%rd243], %r2660;
	add.s32 	%r2721, %r180, %r2710;
	cvt.u16.u32 	%rs281, %r2721;
	shr.s16 	%rs282, %rs281, 15;
	shr.u16 	%rs283, %rs282, 14;
	add.s16 	%rs284, %rs281, %rs283;
	and.b16  	%rs285, %rs284, -4;
	sub.s16 	%rs286, %rs281, %rs285;
	mul.wide.s16 	%r189, %rs286, 64;
	add.s32 	%r2722, %r94, %r189;
	mul.wide.s32 	%rd244, %r2722, 4;
	add.s64 	%rd245, %rd28, %rd244;
	st.shared.u32 	[%rd245], %r2664;
	add.s32 	%r2723, %r95, %r189;
	mul.wide.u32 	%rd246, %r2723, 4;
	add.s64 	%rd247, %rd28, %rd246;
	st.shared.u32 	[%rd247], %r2668;
	add.s32 	%r2724, %r96, %r189;
	mul.wide.s32 	%rd248, %r2724, 4;
	add.s64 	%rd249, %rd28, %rd248;
	st.shared.u32 	[%rd249], %r2672;
	add.s32 	%r2725, %r97, %r189;
	mul.wide.u32 	%rd250, %r2725, 4;
	add.s64 	%rd251, %rd28, %rd250;
	st.shared.u32 	[%rd251], %r2676;
	bar.sync 	0;
	mov.u32 	%r3484, %r2143;
	mov.u32 	%r3485, %r2143;
	mov.u32 	%r3486, %r2143;
	mov.u32 	%r3487, %r2143;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_84;
LBB0_116:                               // %oksrem11428
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3487, [%rd8];
	ld.shared.u32 	%r3486, [%rd9];
	ld.shared.u32 	%r3485, [%rd10];
	ld.shared.u32 	%r3484, [%rd11];
LBB0_84:                                // %L27302
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2761, %r2758}, {%r306, %r309}, {%r3487}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2770, %r2767}, {%r306, %r309}, {%r3486}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2779, %r2776}, {%r306, %r309}, {%r3485}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2788, %r2785}, {%r306, %r309}, {%r3484}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2754, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r2754, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r358, %r2761, %r2756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2763, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2765, %r2763, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r358, %r2770, %r2765;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2772, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2774, %r2772, %r2776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r358, %r2779, %r2774;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2781, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2783, %r2781, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2786, %r358, %r2788, %r2783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2790, %r361, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r358, %r2758, %r2790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2797, %r361, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r358, %r2767, %r2797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2804, %r361, %r2779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r358, %r2776, %r2804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2811, %r361, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2814, %r358, %r2785, %r2811;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2859, %r2863}, {%r402, %r408, %r405, %r411}, {%r2759, %r2793}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2875, %r2879}, {%r402, %r408, %r405, %r411}, {%r2768, %r2800}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2867, %r2871}, {%r402, %r408, %r405, %r411}, {%r2777, %r2807}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2883, %r2887}, {%r402, %r408, %r405, %r411}, {%r2786, %r2814}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2858, %r2859, %r2859, %r3457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2862, %r2863, %r2863, %r2858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2866, %r2867, %r2867, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r2871, %r2871, %r2866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2874, %r2875, %r2875, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2878, %r2879, %r2879, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2882, %r2883, %r2883, %r2878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2886, %r2887, %r2887, %r2882;
	// end inline asm
	mov.u32 	%r3488, %r2143;
	mov.u32 	%r3489, %r2143;
	mov.u32 	%r3490, %r2143;
	mov.u32 	%r3491, %r2143;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_85;
LBB0_117:                               // %oksrem11963
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2891, %r98, %r187;
	mul.wide.s32 	%rd252, %r2891, 4;
	add.s64 	%rd254, %rd28, %rd252;
	ld.shared.u32 	%r3491, [%rd254];
	add.s32 	%r2892, %r99, %r187;
	mul.wide.u32 	%rd255, %r2892, 4;
	add.s64 	%rd256, %rd28, %rd255;
	ld.shared.u32 	%r3490, [%rd256];
	add.s32 	%r2893, %r100, %r187;
	mul.wide.s32 	%rd257, %r2893, 4;
	add.s64 	%rd258, %rd28, %rd257;
	ld.shared.u32 	%r3489, [%rd258];
	add.s32 	%r2894, %r101, %r187;
	mul.wide.u32 	%rd259, %r2894, 4;
	add.s64 	%rd260, %rd28, %rd259;
	ld.shared.u32 	%r3488, [%rd260];
LBB0_85:                                // %L28527
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2930, %r2927}, {%r306, %r309}, {%r3491}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2939, %r2936}, {%r306, %r309}, {%r3490}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2948, %r2945}, {%r306, %r309}, {%r3489}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2957, %r2954}, {%r306, %r309}, {%r3488}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2923, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2925, %r2923, %r2927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r358, %r2930, %r2925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2932, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2934, %r2932, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r358, %r2939, %r2934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2941, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r2941, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r358, %r2948, %r2943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2950, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2952, %r2950, %r2954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2955, %r358, %r2957, %r2952;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2959, %r361, %r2930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2962, %r358, %r2927, %r2959;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2966, %r361, %r2939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r358, %r2936, %r2966;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2973, %r361, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2976, %r358, %r2945, %r2973;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2980, %r361, %r2957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2983, %r358, %r2954, %r2980;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3028, %r3032}, {%r402, %r408, %r405, %r411}, {%r2928, %r2962}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3044, %r3048}, {%r402, %r408, %r405, %r411}, {%r2937, %r2969}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3036, %r3040}, {%r402, %r408, %r405, %r411}, {%r2946, %r2976}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3052, %r3056}, {%r402, %r408, %r405, %r411}, {%r2955, %r2983}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r3028, %r3028, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3031, %r3032, %r3032, %r3027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r3036, %r3036, %r3031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3039, %r3040, %r3040, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3043, %r3044, %r3044, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3047, %r3048, %r3048, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r3052, %r3052, %r3047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r3056, %r3056, %r3051;
	// end inline asm
	mov.u32 	%r3492, %r2143;
	mov.u32 	%r3493, %r2143;
	mov.u32 	%r3494, %r2143;
	mov.u32 	%r3495, %r2143;
	@%p115 bra 	LBB0_118;
	bra.uni 	LBB0_86;
LBB0_118:                               // %oksrem12498
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3060, %r98, %r188;
	mul.wide.s32 	%rd261, %r3060, 4;
	add.s64 	%rd263, %rd28, %rd261;
	ld.shared.u32 	%r3495, [%rd263];
	add.s32 	%r3061, %r99, %r188;
	mul.wide.u32 	%rd264, %r3061, 4;
	add.s64 	%rd265, %rd28, %rd264;
	ld.shared.u32 	%r3494, [%rd265];
	add.s32 	%r3062, %r100, %r188;
	mul.wide.s32 	%rd266, %r3062, 4;
	add.s64 	%rd267, %rd28, %rd266;
	ld.shared.u32 	%r3493, [%rd267];
	add.s32 	%r3063, %r101, %r188;
	mul.wide.u32 	%rd268, %r3063, 4;
	add.s64 	%rd269, %rd28, %rd268;
	ld.shared.u32 	%r3492, [%rd269];
LBB0_86:                                // %L29752
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3099, %r3096}, {%r306, %r309}, {%r3495}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3108, %r3105}, {%r306, %r309}, {%r3494}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3117, %r3114}, {%r306, %r309}, {%r3493}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3126, %r3123}, {%r306, %r309}, {%r3492}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3092, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3094, %r3092, %r3096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3097, %r358, %r3099, %r3094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3101, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3103, %r3101, %r3105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3106, %r358, %r3108, %r3103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3110, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3112, %r3110, %r3114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3115, %r358, %r3117, %r3112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3119, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3121, %r3119, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3124, %r358, %r3126, %r3121;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r361, %r3099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r358, %r3096, %r3128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3135, %r361, %r3108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r358, %r3105, %r3135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3142, %r361, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r358, %r3114, %r3142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3149, %r361, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r358, %r3123, %r3149;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3197, %r3201}, {%r402, %r408, %r405, %r411}, {%r3097, %r3131}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3213, %r3217}, {%r402, %r408, %r405, %r411}, {%r3106, %r3138}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3205, %r3209}, {%r402, %r408, %r405, %r411}, {%r3115, %r3145}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3221, %r3225}, {%r402, %r408, %r405, %r411}, {%r3124, %r3152}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3196, %r3197, %r3197, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3200, %r3201, %r3201, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3204, %r3205, %r3205, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r3209, %r3209, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r3213, %r3213, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3216, %r3217, %r3217, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r3221, %r3221, %r3216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r3225, %r3225, %r3220;
	// end inline asm
	mov.u32 	%r3496, %r2143;
	mov.u32 	%r3497, %r2143;
	mov.u32 	%r3498, %r2143;
	mov.u32 	%r3499, %r2143;
	@%p115 bra 	LBB0_119;
	bra.uni 	LBB0_87;
LBB0_119:                               // %oksrem13033
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3229, %r98, %r189;
	mul.wide.s32 	%rd270, %r3229, 4;
	add.s64 	%rd272, %rd28, %rd270;
	ld.shared.u32 	%r3499, [%rd272];
	add.s32 	%r3230, %r99, %r189;
	mul.wide.u32 	%rd273, %r3230, 4;
	add.s64 	%rd274, %rd28, %rd273;
	ld.shared.u32 	%r3498, [%rd274];
	add.s32 	%r3231, %r100, %r189;
	mul.wide.s32 	%rd275, %r3231, 4;
	add.s64 	%rd276, %rd28, %rd275;
	ld.shared.u32 	%r3497, [%rd276];
	add.s32 	%r3232, %r101, %r189;
	mul.wide.u32 	%rd277, %r3232, 4;
	add.s64 	%rd278, %rd28, %rd277;
	ld.shared.u32 	%r3496, [%rd278];
LBB0_87:                                // %L30977
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3268, %r3265}, {%r306, %r309}, {%r3499}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3277, %r3274}, {%r306, %r309}, {%r3498}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3286, %r3283}, {%r306, %r309}, {%r3497}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3295, %r3292}, {%r306, %r309}, {%r3496}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3261, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3263, %r3261, %r3265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3266, %r358, %r3268, %r3263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3270, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3272, %r3270, %r3274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3275, %r358, %r3277, %r3272;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3279, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3281, %r3279, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3284, %r358, %r3286, %r3281;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3288, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3290, %r3288, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r358, %r3295, %r3290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r361, %r3268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r358, %r3265, %r3297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r361, %r3277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r358, %r3274, %r3304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r361, %r3286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r358, %r3283, %r3311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3318, %r361, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3321, %r358, %r3292, %r3318;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3366, %r3370}, {%r402, %r408, %r405, %r411}, {%r3266, %r3300}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3382, %r3386}, {%r402, %r408, %r405, %r411}, {%r3275, %r3307}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3374, %r3378}, {%r402, %r408, %r405, %r411}, {%r3284, %r3314}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3390, %r3394}, {%r402, %r408, %r405, %r411}, {%r3293, %r3321}, {%r2143, %r2143};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3365, %r3366, %r3366, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3369, %r3370, %r3370, %r3365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3373, %r3374, %r3374, %r3369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3457, %r3378, %r3378, %r3373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3381, %r3382, %r3382, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3385, %r3386, %r3386, %r3381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3389, %r3390, %r3390, %r3385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3456, %r3394, %r3394, %r3389;
	// end inline asm
	add.s32 	%r3454, %r3454, 4;
	setp.ne.s32 	%p138, %r3454, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L31123
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L31182
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3397, %r3455, 1152;
	add.s32 	%r3398, %r102, %r3397;
	mul.wide.u32 	%rd279, %r3398, 4;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3457;
	add.s32 	%r3399, %r103, %r3397;
	mul.wide.u32 	%rd281, %r3399, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3456;
	bra.uni 	LBB0_90;
LBB0_93:                                // %guard_pass14638
	@%p65 bra 	LBB0_95;
// %bb.94:                              // %L31516
	mul.lo.s32 	%r3401, %r3455, 1152;
	add.s32 	%r3402, %r102, %r3401;
	mul.wide.u32 	%rd283, %r3402, 4;
	add.s64 	%rd284, %rd4, %rd283;
	st.global.u32 	[%rd284], %r3457;
	add.s32 	%r3403, %r103, %r3401;
	mul.wide.u32 	%rd285, %r3403, 4;
	add.s64 	%rd286, %rd4, %rd285;
	st.global.u32 	[%rd286], %r3456;
LBB0_95:                                // %L31748
	mov.u32 	%r3404, 0;
	st.global.u32 	[%rd5], %r3404;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd13, [_Z15julia_frb_1025613CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd13;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
