// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2337[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2385[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<299>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3353>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<266>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r214, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r223, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r223, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r215, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r224, %r2, %r3;
	or.b32  	%r225, %r224, %r5;
	mul.wide.u32 	%rd67, %r225, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r226, 1;
	st.global.u32 	[%rd6], %r226;
	setp.gt.u32 	%p3, %r215, 16383;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r216, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r216, %r215;
	setp.gt.s32 	%p5, %r216, 32767;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r217, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r216, %r215;
	and.b32  	%r227, %r6, 63;
	setp.ne.s32 	%p7, %r227, 0;
	setp.gt.u32 	%p8, %r217, 511;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r218, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r218, %r217;
	setp.lt.s32 	%p11, %r218, 1024;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r228, %r218, %r217;
	mul.hi.s32 	%r229, %r6, 1374389535;
	shr.u32 	%r230, %r229, 31;
	shr.s32 	%r231, %r229, 6;
	add.s32 	%r232, %r231, %r230;
	setp.eq.s32 	%p13, %r228, %r232;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r219, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r219, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r220, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r220, %r219;
	setp.gt.s32 	%p16, %r220, 2;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r221, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r220, %r219;
	and.b32  	%r233, %r7, 1;
	setp.eq.b32 	%p18, %r233, 1;
	setp.lt.s32 	%p19, %r221, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r222, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r222, %r221;
	setp.gt.s32 	%p22, %r222, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r234, %r222, %r221;
	and.b32  	%r235, %r234, 1;
	setp.eq.b32 	%p24, %r235, 1;
	not.pred 	%p25, %p24;
	setp.eq.s32 	%p26, %r234, %r7;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_13;
$L__BB0_158:                            // %pass162
	and.b32  	%r128, %r3, 3;
	shr.u32 	%r129, %r3, 2;
	mul.lo.s32 	%r236, %r128, %r129;
	and.b32  	%r237, %r236, 7;
	cvt.rn.f32.s32 	%f185, %r237;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p28, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p294, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p28 bra 	$L__BB0_170;
// %bb.159:
	@%p294 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_160;
$L__BB0_166:
	mov.b32 	%r131, %f750;
	and.b32  	%r238, %r131, 8388607;
	or.b32  	%r3348, %r238, 1065353216;
	mov.b32 	%f745, %r3348;
	add.s32 	%r239, %r131, -1073741824;
	and.b32  	%r3349, %r239, -8388608;
	setp.eq.s32 	%p35, %r3349, 0;
	@%p35 bra 	$L__BB0_169;
// %bb.167:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_168:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r240, %r3349, 192937984;
	add.s32 	%r241, %r3348, %r240;
	mov.b32 	%f197, %r241;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3349, %r3349, %r240;
	mov.b32 	%r3348, %f745;
	setp.ne.s32 	%p36, %r3349, 0;
	setp.ne.s32 	%p37, %r3348, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_168;
$L__BB0_169:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r131, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_170;
$L__BB0_160:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r130, %f154;
	setp.lt.u32 	%p30, %r130, 1073741824;
	@%p30 bra 	$L__BB0_165;
// %bb.161:
	setp.lt.u32 	%p31, %r130, -2147483647;
	@%p31 bra 	$L__BB0_163;
// %bb.162:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p34, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p34;
	bra.uni 	$L__BB0_165;
$L__BB0_163:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p32, %f154, 0f40800000;
	@%p32 bra 	$L__BB0_165;
// %bb.164:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p33, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p33;
$L__BB0_165:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_170:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p40, %f206, 0f7F800000;
	mov.b32 	%r242, %f151;
	and.b32  	%r138, %r242, -2147483648;
	@%p40 bra 	$L__BB0_172;
// %bb.171:
	mov.b32 	%r243, %f746;
	or.b32  	%r244, %r138, %r243;
	mov.b32 	%f746, %r244;
$L__BB0_172:                            // %__nv_fmodf.exit
	shl.b32 	%r141, %r3, 1;
	and.b32  	%r259, %r141, 2;
	mul.lo.s32 	%r142, %r259, %r129;
	cvt.rn.f32.s32 	%f239, %r142;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p48, %f726, 0f40000000;
	setp.gtu.f32 	%p295, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p48 bra 	$L__BB0_25;
// %bb.14:
	@%p295 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r260, %r9, 8388607;
	or.b32  	%r3314, %r260, 1065353216;
	mov.b32 	%f705, %r3314;
	add.s32 	%r261, %r9, -1073741824;
	and.b32  	%r3315, %r261, -8388608;
	setp.eq.s32 	%p55, %r3315, 0;
	@%p55 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r262, %r3315, 192937984;
	add.s32 	%r263, %r3314, %r262;
	mov.b32 	%f251, %r263;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3315, %r3315, %r262;
	mov.b32 	%r3314, %f705;
	setp.ne.s32 	%p56, %r3315, 0;
	setp.ne.s32 	%p57, %r3314, 0;
	and.pred  	%p58, %p56, %p57;
	@%p58 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p59, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p59;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p50, %r8, 1073741824;
	@%p50 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p51, %r8, -2147483647;
	@%p51 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p54, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p54;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p52, %f2, 0f40800000;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p53, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p53;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2336
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p60, %f260, 0f7F800000;
	mov.b32 	%r264, %f168;
	and.b32  	%r16, %r264, -2147483648;
	@%p60 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r265, %f706;
	or.b32  	%r266, %r16, %r265;
	mov.b32 	%f706, %r266;
$L__BB0_27:                             // %__nv_fmodf.exit2337
	add.s32 	%r275, %r142, %r129;
	cvt.rn.f32.s32 	%f291, %r275;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p68, %f730, 0f40000000;
	setp.gtu.f32 	%p296, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p68 bra 	$L__BB0_39;
// %bb.28:
	@%p296 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r276, %r18, 8388607;
	or.b32  	%r3316, %r276, 1065353216;
	mov.b32 	%f709, %r3316;
	add.s32 	%r277, %r18, -1073741824;
	and.b32  	%r3317, %r277, -8388608;
	setp.eq.s32 	%p75, %r3317, 0;
	@%p75 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r278, %r3317, 192937984;
	add.s32 	%r279, %r3316, %r278;
	mov.b32 	%f303, %r279;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3317, %r3317, %r278;
	mov.b32 	%r3316, %f709;
	setp.ne.s32 	%p76, %r3317, 0;
	setp.ne.s32 	%p77, %r3316, 0;
	and.pred  	%p78, %p76, %p77;
	@%p78 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p79, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p79;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p70, %r17, 1073741824;
	@%p70 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p71, %r17, -2147483647;
	@%p71 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p74, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p74;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p72, %f21, 0f40800000;
	@%p72 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p73, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p73;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2367
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p80, %f312, 0f7F800000;
	mov.b32 	%r280, %f18;
	and.b32  	%r25, %r280, -2147483648;
	@%p80 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r281, %f710;
	or.b32  	%r282, %r25, %r281;
	mov.b32 	%f710, %r282;
$L__BB0_41:                             // %__nv_fmodf.exit2368
	mul.lo.s32 	%r28, %r141, %r129;
	and.b32  	%r297, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r297;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p88, %f734, 0f40000000;
	setp.gtu.f32 	%p297, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p88 bra 	$L__BB0_53;
// %bb.42:
	@%p297 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r298, %r30, 8388607;
	or.b32  	%r3318, %r298, 1065353216;
	mov.b32 	%f713, %r3318;
	add.s32 	%r299, %r30, -1073741824;
	and.b32  	%r3319, %r299, -8388608;
	setp.eq.s32 	%p95, %r3319, 0;
	@%p95 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r300, %r3319, 192937984;
	add.s32 	%r301, %r3318, %r300;
	mov.b32 	%f357, %r301;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3319, %r3319, %r300;
	mov.b32 	%r3318, %f713;
	setp.ne.s32 	%p96, %r3319, 0;
	setp.ne.s32 	%p97, %r3318, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p99, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p90, %r29, 1073741824;
	@%p90 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p91, %r29, -2147483647;
	@%p91 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p94, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p94;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p92, %f38, 0f40800000;
	@%p92 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p93, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p93;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2398
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p100, %f366, 0f7F800000;
	mov.b32 	%r302, %f35;
	and.b32  	%r37, %r302, -2147483648;
	@%p100 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r303, %f714;
	or.b32  	%r304, %r37, %r303;
	mov.b32 	%f714, %r304;
$L__BB0_55:                             // %__nv_fmodf.exit2399
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r305, %f367;
	and.b32  	%r306, %r305, -2147483648;
	or.b32  	%r307, %r306, 1056964608;
	mov.b32 	%f368, %r307;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p101, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p101;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p102, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p102;
	cvt.rzi.s32.f32 	%r308, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r309, %r308, 1;
	setp.eq.b32 	%p103, %r309, 1;
	selp.f32 	%f386, %f384, %f385, %p103;
	selp.f32 	%f387, %f385, %f384, %p103;
	and.b32  	%r310, %r308, 2;
	setp.eq.s32 	%p104, %r310, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p104;
	add.s32 	%r311, %r308, 1;
	and.b32  	%r312, %r311, 2;
	setp.eq.s32 	%p105, %r312, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p106, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p106;
	abs.f32 	%f395, %f714;
	add.s32 	%r313, %r28, %r129;
	and.b32  	%r314, %r313, 3;
	cvt.rn.f32.s32 	%f397, %r314;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p108, %f738, 0f40000000;
	setp.gtu.f32 	%p298, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p108 bra 	$L__BB0_67;
// %bb.56:
	@%p298 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r315, %r39, 8388607;
	or.b32  	%r3320, %r315, 1065353216;
	mov.b32 	%f717, %r3320;
	add.s32 	%r316, %r39, -1073741824;
	and.b32  	%r3321, %r316, -8388608;
	setp.eq.s32 	%p115, %r3321, 0;
	@%p115 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r317, %r3321, 192937984;
	add.s32 	%r318, %r3320, %r317;
	mov.b32 	%f409, %r318;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3321, %r3321, %r317;
	mov.b32 	%r3320, %f717;
	setp.ne.s32 	%p116, %r3321, 0;
	setp.ne.s32 	%p117, %r3320, 0;
	and.pred  	%p118, %p116, %p117;
	@%p118 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p119, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p119;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p110, %r38, 1073741824;
	@%p110 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p111, %r38, -2147483647;
	@%p111 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p114, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p114;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p112, %f57, 0f40800000;
	@%p112 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p113, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p113;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2429
	selp.f32 	%f392, %f387, %f391, %p105;
	setp.gt.f32 	%p107, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p120, %f418, 0f7F800000;
	mov.b32 	%r319, %f54;
	and.b32  	%r46, %r319, -2147483648;
	@%p120 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r320, %f718;
	or.b32  	%r321, %r46, %r320;
	mov.b32 	%f718, %r321;
$L__BB0_69:                             // %__nv_fmodf.exit2430
	selp.f32 	%f53, %f396, %f392, %p107;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r322, %f419;
	and.b32  	%r323, %r322, -2147483648;
	or.b32  	%r324, %r323, 1056964608;
	mov.b32 	%f420, %r324;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p121, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p121;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p122, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p122;
	cvt.rzi.s32.f32 	%r325, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r326, %r325, 1;
	setp.eq.b32 	%p123, %r326, 1;
	selp.f32 	%f438, %f436, %f437, %p123;
	selp.f32 	%f439, %f437, %f436, %p123;
	and.b32  	%r327, %r325, 2;
	setp.eq.s32 	%p124, %r327, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p124;
	add.s32 	%r328, %r325, 1;
	and.b32  	%r329, %r328, 2;
	setp.eq.s32 	%p125, %r329, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p125;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p126, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p126;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p127, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p127;
	and.b32  	%r47, %r3, 2;
	setp.eq.s32 	%p128, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p128 bra 	$L__BB0_71;
// %bb.70:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L690
	@%p28 bra 	$L__BB0_180;
// %bb.72:
	@%p294 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_73;
$L__BB0_176:
	mov.b32 	%r144, %f750;
	and.b32  	%r336, %r144, 8388607;
	or.b32  	%r3350, %r336, 1065353216;
	mov.b32 	%f749, %r3350;
	add.s32 	%r337, %r144, -1073741824;
	and.b32  	%r3351, %r337, -8388608;
	setp.eq.s32 	%p136, %r3351, 0;
	@%p136 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r338, %r3351, 192937984;
	add.s32 	%r339, %r3350, %r338;
	mov.b32 	%f459, %r339;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3351, %r3351, %r338;
	mov.b32 	%r3350, %f749;
	setp.ne.s32 	%p137, %r3351, 0;
	setp.ne.s32 	%p138, %r3350, 0;
	and.pred  	%p139, %p137, %p138;
	@%p139 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p140, %r144, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p140;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_180;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r143, %f171;
	setp.lt.u32 	%p131, %r143, 1073741824;
	@%p131 bra 	$L__BB0_175;
// %bb.74:
	setp.lt.u32 	%p132, %r143, -2147483647;
	@%p132 bra 	$L__BB0_173;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p135, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p135;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p133, %f171, 0f40800000;
	@%p133 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p134, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p134;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i2460
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p141, %f468, 0f7F800000;
	@%p141 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r340, %f750;
	or.b32  	%r341, %r138, %r340;
	mov.b32 	%f750, %r341;
$L__BB0_182:                            // %__nv_fmodf.exit2461
	@%p48 bra 	$L__BB0_87;
// %bb.76:
	@%p295 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r356, %r51, 8388607;
	or.b32  	%r3322, %r356, 1065353216;
	mov.b32 	%f725, %r3322;
	add.s32 	%r357, %r51, -1073741824;
	and.b32  	%r3323, %r357, -8388608;
	setp.eq.s32 	%p156, %r3323, 0;
	@%p156 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r358, %r3323, 192937984;
	add.s32 	%r359, %r3322, %r358;
	mov.b32 	%f511, %r359;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3323, %r3323, %r358;
	mov.b32 	%r3322, %f725;
	setp.ne.s32 	%p157, %r3323, 0;
	setp.ne.s32 	%p158, %r3322, 0;
	and.pred  	%p159, %p157, %p158;
	@%p159 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p160, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p160;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p151, %r50, 1073741824;
	@%p151 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p152, %r50, -2147483647;
	@%p152 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p155, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p155;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p153, %f80, 0f40800000;
	@%p153 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p154, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p154;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2491
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p161, %f520, 0f7F800000;
	@%p161 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r360, %f726;
	or.b32  	%r361, %r16, %r360;
	mov.b32 	%f726, %r361;
$L__BB0_89:                             // %__nv_fmodf.exit2492
	@%p68 bra 	$L__BB0_101;
// %bb.90:
	@%p296 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r370, %r59, 8388607;
	or.b32  	%r3324, %r370, 1065353216;
	mov.b32 	%f729, %r3324;
	add.s32 	%r371, %r59, -1073741824;
	and.b32  	%r3325, %r371, -8388608;
	setp.eq.s32 	%p176, %r3325, 0;
	@%p176 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r3325, 192937984;
	add.s32 	%r373, %r3324, %r372;
	mov.b32 	%f561, %r373;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3325, %r3325, %r372;
	mov.b32 	%r3324, %f729;
	setp.ne.s32 	%p177, %r3325, 0;
	setp.ne.s32 	%p178, %r3324, 0;
	and.pred  	%p179, %p177, %p178;
	@%p179 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p180, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p180;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p171, %r58, 1073741824;
	@%p171 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p172, %r58, -2147483647;
	@%p172 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p175, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p175;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p173, %f97, 0f40800000;
	@%p173 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p174, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p174;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2522
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p181, %f570, 0f7F800000;
	@%p181 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r374, %f730;
	or.b32  	%r375, %r25, %r374;
	mov.b32 	%f730, %r375;
$L__BB0_103:                            // %__nv_fmodf.exit2523
	@%p88 bra 	$L__BB0_115;
// %bb.104:
	@%p297 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r390, %r69, 8388607;
	or.b32  	%r3326, %r390, 1065353216;
	mov.b32 	%f733, %r3326;
	add.s32 	%r391, %r69, -1073741824;
	and.b32  	%r3327, %r391, -8388608;
	setp.eq.s32 	%p196, %r3327, 0;
	@%p196 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r3327, 192937984;
	add.s32 	%r393, %r3326, %r392;
	mov.b32 	%f613, %r393;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3327, %r3327, %r392;
	mov.b32 	%r3326, %f733;
	setp.ne.s32 	%p197, %r3327, 0;
	setp.ne.s32 	%p198, %r3326, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p200, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p191, %r68, 1073741824;
	@%p191 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p192, %r68, -2147483647;
	@%p192 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p195, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p195;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p193, %f112, 0f40800000;
	@%p193 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p194, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p194;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2553
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p201, %f622, 0f7F800000;
	@%p201 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r394, %f734;
	or.b32  	%r395, %r37, %r394;
	mov.b32 	%f734, %r395;
$L__BB0_117:                            // %__nv_fmodf.exit2554
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r396, %f623;
	and.b32  	%r397, %r396, -2147483648;
	or.b32  	%r398, %r397, 1056964608;
	mov.b32 	%f624, %r398;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p203, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p203;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p204, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p204;
	cvt.rzi.s32.f32 	%r399, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r400, %r399, 1;
	setp.eq.b32 	%p205, %r400, 1;
	selp.f32 	%f642, %f640, %f641, %p205;
	selp.f32 	%f643, %f641, %f640, %p205;
	and.b32  	%r401, %r399, 2;
	setp.eq.s32 	%p206, %r401, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p206;
	add.s32 	%r402, %r399, 1;
	and.b32  	%r403, %r402, 2;
	setp.eq.s32 	%p207, %r403, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p208, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p208;
	abs.f32 	%f651, %f734;
	@%p108 bra 	$L__BB0_129;
// %bb.118:
	@%p298 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r404, %r77, 8388607;
	or.b32  	%r3328, %r404, 1065353216;
	mov.b32 	%f737, %r3328;
	add.s32 	%r405, %r77, -1073741824;
	and.b32  	%r3329, %r405, -8388608;
	setp.eq.s32 	%p216, %r3329, 0;
	@%p216 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3329, 192937984;
	add.s32 	%r407, %r3328, %r406;
	mov.b32 	%f663, %r407;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3329, %r3329, %r406;
	mov.b32 	%r3328, %f737;
	setp.ne.s32 	%p217, %r3329, 0;
	setp.ne.s32 	%p218, %r3328, 0;
	and.pred  	%p219, %p217, %p218;
	@%p219 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p220, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p220;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p211, %r76, 1073741824;
	@%p211 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p212, %r76, -2147483647;
	@%p212 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p215, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p215;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p213, %f129, 0f40800000;
	@%p213 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p214, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p214;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f648, %f643, %f647, %p207;
	setp.gt.f32 	%p209, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p221, %f672, 0f7F800000;
	@%p221 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r408, %f738;
	or.b32  	%r409, %r46, %r408;
	mov.b32 	%f738, %r409;
$L__BB0_131:                            // %__nv_fmodf.exit2585
	selp.f32 	%f127, %f652, %f648, %p209;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r410, %f673;
	and.b32  	%r411, %r410, -2147483648;
	or.b32  	%r412, %r411, 1056964608;
	mov.b32 	%f674, %r412;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p223, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p223;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p224, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p224;
	cvt.rzi.s32.f32 	%r413, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r414, %r413, 1;
	setp.eq.b32 	%p225, %r414, 1;
	selp.f32 	%f692, %f690, %f691, %p225;
	selp.f32 	%f693, %f691, %f690, %p225;
	and.b32  	%r415, %r413, 2;
	setp.eq.s32 	%p226, %r415, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p226;
	add.s32 	%r416, %r413, 1;
	and.b32  	%r417, %r416, 2;
	setp.eq.s32 	%p227, %r417, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p227;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p228, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p228;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p229, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p229;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p128 bra 	$L__BB0_133;
// %bb.132:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L983
	setp.gt.u32 	%p230, %r3, 15;
	mov.u32 	%r153, 999999999;
	@%p230 bra 	$L__BB0_184;
// %bb.134:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r425, %r3, 4;
	and.b32  	%r426, %r425, 240;
	or.b32  	%r427, %r426, %r1;
	mul.wide.u32 	%rd68, %r427, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r428, [%rd69];
	shl.b32 	%r429, %r428, 16;
	cvt.s32.s16 	%r86, %r428;
	shr.s32 	%r87, %r428, 16;
	or.b32  	%r430, %r429, 65535;
	setp.lt.u32 	%p231, %r430, 1114111;
	setp.lt.u32 	%p232, %r428, 1048576;
	and.pred  	%p233, %p231, %p232;
	@%p233 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_135;
$L__BB0_183:                            // %L1255
	mul.lo.s32 	%r434, %r87, 546;
	mad.lo.s32 	%r153, %r86, 33, %r434;
$L__BB0_184:                            // %pass565
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r251, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r252, %r251, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r348, %f469;
	or.b32  	%r253, %r252, 1056964608;
	mov.b32 	%r267, %f261;
	mov.b32 	%r289, %f313;
	and.b32  	%r349, %r348, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r253;
	and.b32  	%r268, %r267, -2147483648;
	and.b32  	%r290, %r289, -2147483648;
	or.b32  	%r350, %r349, 1056964608;
	mov.b32 	%r362, %f521;
	mov.b32 	%r382, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r269, %r268, 1056964608;
	or.b32  	%r291, %r290, 1056964608;
	mov.b32 	%f470, %r350;
	and.b32  	%r363, %r362, -2147483648;
	and.b32  	%r383, %r382, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p41, %f211, 0f4B000000;
	mov.b32 	%f262, %r269;
	mov.b32 	%f314, %r291;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r364, %r363, 1056964608;
	or.b32  	%r384, %r383, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p41;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p42, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p143, %f473, 0f4B000000;
	mov.b32 	%f522, %r364;
	mov.b32 	%f572, %r384;
	selp.f32 	%f214, %f213, %f212, %p42;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p61, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p81, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p143;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p144, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p61;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p62, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p81;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p82, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p144;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p163, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p183, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p62;
	selp.f32 	%f320, %f319, %f318, %p82;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p163;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p164, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p183;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p184, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p164;
	selp.f32 	%f578, %f577, %f576, %p184;
	cvt.rzi.s32.f32 	%r254, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r255, %r254, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r351, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p43, %r255, 1;
	cvt.rzi.s32.f32 	%r270, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r292, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r352, %r351, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p43;
	and.b32  	%r256, %r254, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r271, %r270, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r293, %r292, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p145, %r352, 1;
	cvt.rzi.s32.f32 	%r365, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r385, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p44, %r256, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r257, %r254, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p63, %r271, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p83, %r293, 1;
	selp.f32 	%f488, %f486, %f487, %p145;
	and.b32  	%r353, %r351, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r366, %r365, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r386, %r385, 1;
	selp.f32 	%f227, %f225, %f224, %p43;
	selp.f32 	%f229, %f226, %f228, %p44;
	and.b32  	%r258, %r257, 2;
	setp.eq.f32 	%p46, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p63;
	and.b32  	%r272, %r270, 2;
	selp.f32 	%f332, %f330, %f331, %p83;
	and.b32  	%r294, %r292, 2;
	setp.eq.s32 	%p146, %r353, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r354, %r351, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p165, %r366, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p185, %r386, 1;
	setp.eq.s32 	%p45, %r258, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p46;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p64, %r272, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r273, %r270, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p84, %r294, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r295, %r292, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p145;
	selp.f32 	%f491, %f488, %f490, %p146;
	and.b32  	%r355, %r354, 2;
	setp.eq.f32 	%p148, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p165;
	and.b32  	%r367, %r365, 2;
	selp.f32 	%f590, %f588, %f589, %p185;
	and.b32  	%r387, %r385, 2;
	selp.f32 	%f232, %f227, %f231, %p45;
	setp.gt.f32 	%p47, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p63;
	selp.f32 	%f283, %f280, %f282, %p64;
	and.b32  	%r274, %r273, 2;
	setp.eq.f32 	%p66, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p83;
	selp.f32 	%f335, %f332, %f334, %p84;
	and.b32  	%r296, %r295, 2;
	setp.eq.f32 	%p86, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p147, %r355, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p148;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p166, %r367, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r368, %r365, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p186, %r387, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r388, %r385, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p47;
	setp.eq.s32 	%p65, %r274, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p66;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p85, %r296, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p86;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p147;
	setp.gt.f32 	%p149, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p165;
	selp.f32 	%f543, %f540, %f542, %p166;
	and.b32  	%r369, %r368, 2;
	setp.eq.f32 	%p168, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p185;
	selp.f32 	%f593, %f590, %f592, %p186;
	and.b32  	%r389, %r388, 2;
	setp.eq.f32 	%p188, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r247, %f238;
	mov.b32 	%r250, %f235;
	selp.f32 	%f286, %f281, %f285, %p65;
	setp.gt.f32 	%p67, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p85;
	setp.gt.f32 	%p87, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p149;
	setp.eq.s32 	%p167, %r369, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p168;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p187, %r389, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p188;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r246, %r250, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p67;
	selp.f32 	%f344, %f343, %f338, %p87;
	mov.b32 	%r344, %f500;
	mov.b32 	%r347, %f497;
	selp.f32 	%f546, %f541, %f545, %p167;
	setp.gt.f32 	%p169, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p187;
	setp.gt.f32 	%p189, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r245, %r247, %r246;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r248, %r250, %r247;
	// end inline asm
	mov.b32 	%r285, %f344;
	mov.b32 	%r284, %f17;
	mov.b32 	%r288, %f341;
	mov.b32 	%r287, %f16;
	mov.b32 	%r331, %f75;
	mov.b32 	%r332, %f77;
	mov.b32 	%r334, %f76;
	mov.b32 	%r335, %f78;
	xor.b32  	%r343, %r347, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p169;
	selp.f32 	%f602, %f601, %f596, %p189;
	// begin inline asm
	cvt.rn.f16x2.f32 %r283, %r285, %r284;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r286, %r288, %r287;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r330, %r332, %r331;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r333, %r335, %r334;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r342, %r344, %r343;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r345, %r347, %r344;
	// end inline asm
	mov.b32 	%r378, %f602;
	mov.b32 	%r377, %f95;
	mov.b32 	%r381, %f599;
	mov.b32 	%r380, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r380;
	// end inline asm
	mov.b32 	%r419, %f147;
	mov.b32 	%r420, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r418, %r420, %r419;
	// end inline asm
	mov.b32 	%r422, %f148;
	mov.b32 	%r423, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r421, %r423, %r422;
	// end inline asm
	shl.b32 	%r436, %r3, 6;
	and.b32  	%r437, %r436, 192;
	and.b32  	%r438, %r129, 1;
	shr.u32 	%r439, %r3, 3;
	and.b32  	%r440, %r439, 2;
	or.b32  	%r441, %r438, %r440;
	shl.b32 	%r442, %r441, 4;
	bfe.u32 	%r443, %r3, 3, 1;
	shl.b32 	%r444, %r1, 1;
	and.b32  	%r445, %r444, 14;
	or.b32  	%r446, %r443, %r445;
	or.b32  	%r447, %r442, %r437;
	or.b32  	%r448, %r447, %r446;
	or.b32  	%r449, %r448, %r5;
	mul.wide.u32 	%rd75, %r449, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r154, [%rd76];
	ld.global.u32 	%r155, [%rd76+1024];
	shl.b32 	%r450, %r215, 8;
	shl.b32 	%r451, %r219, 7;
	add.s32 	%r156, %r451, %r450;
	shl.b32 	%r452, %r4, 7;
	shl.b32 	%r453, %r3, 2;
	or.b32  	%r157, %r453, %r452;
	and.b32  	%r158, %r3, 16;
	shr.u32 	%r454, %r3, 4;
	and.b32  	%r455, %r141, 30;
	or.b32  	%r456, %r455, %r454;
	mul.lo.s32 	%r457, %r456, 257;
	shr.u32 	%r458, %r1, 3;
	and.b32  	%r459, %r2, 224;
	mad.lo.s32 	%r460, %r458, 257, %r459;
	or.b32  	%r461, %r458, 2;
	mad.lo.s32 	%r462, %r461, 257, %r459;
	or.b32  	%r463, %r458, 4;
	mad.lo.s32 	%r464, %r463, 257, %r459;
	or.b32  	%r465, %r458, 6;
	mad.lo.s32 	%r466, %r465, 257, %r459;
	or.b32  	%r467, %r458, 8;
	mad.lo.s32 	%r468, %r467, 257, %r459;
	or.b32  	%r469, %r458, 10;
	mad.lo.s32 	%r470, %r469, 257, %r459;
	or.b32  	%r471, %r458, 12;
	mad.lo.s32 	%r472, %r471, 257, %r459;
	or.b32  	%r473, %r458, 14;
	mad.lo.s32 	%r474, %r473, 257, %r459;
	or.b32  	%r475, %r458, 16;
	mad.lo.s32 	%r476, %r475, 257, %r459;
	or.b32  	%r477, %r458, 18;
	mad.lo.s32 	%r478, %r477, 257, %r459;
	or.b32  	%r479, %r458, 20;
	mad.lo.s32 	%r480, %r479, 257, %r459;
	or.b32  	%r481, %r458, 22;
	mad.lo.s32 	%r482, %r481, 257, %r459;
	or.b32  	%r483, %r458, 24;
	mad.lo.s32 	%r484, %r483, 257, %r459;
	or.b32  	%r485, %r458, 26;
	mad.lo.s32 	%r486, %r485, 257, %r459;
	or.b32  	%r487, %r458, 28;
	mad.lo.s32 	%r488, %r487, 257, %r459;
	or.b32  	%r489, %r458, 30;
	mad.lo.s32 	%r490, %r489, 257, %r459;
	mul.lo.s32 	%r491, %r128, 2184;
	mad.lo.s32 	%r492, %r441, 546, %r491;
	mad.lo.s32 	%r493, %r446, 33, %r492;
	setp.lt.u32 	%p234, %r3, 4;
	setp.eq.s32 	%p235, %r129, 4;
	setp.eq.s32 	%p236, %r129, 5;
	bfe.s32 	%r494, %r1, 1, 1;
	and.b32  	%r495, %r494, 1032;
	bfe.s32 	%r496, %r3, 3, 1;
	and.b32  	%r497, %r3, 8;
	setp.eq.s32 	%p237, %r497, 0;
	and.b32  	%r498, %r496, 4144;
	mul.lo.s32 	%r499, %r458, 258;
	and.b32  	%r500, %r453, 12;
	and.b32  	%r501, %r1, 1;
	neg.s32 	%r502, %r501;
	setp.eq.b32 	%p238, %r501, 1;
	and.b32  	%r503, %r502, 2064;
	bfe.s32 	%r504, %r1, 2, 1;
	and.b32  	%r505, %r1, 4;
	setp.eq.s32 	%p239, %r505, 0;
	and.b32  	%r506, %r504, 516;
	or.b32  	%r507, %r441, %r495;
	add.s32 	%r508, %r500, %r499;
	add.s32 	%r509, %r508, %r498;
	add.s32 	%r510, %r509, %r503;
	add.s32 	%r511, %r510, %r506;
	add.s32 	%r512, %r511, %r507;
	mul.wide.u32 	%rd77, %r512, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	cvt.u64.u32 	%rd79, %r507;
	selp.b64 	%rd80, 0, 516, %p239;
	selp.b64 	%rd81, 2064, 0, %p238;
	selp.b64 	%rd82, 0, 4144, %p237;
	cvt.u64.u32 	%rd83, %r500;
	cvt.u64.u32 	%rd84, %r499;
	add.s64 	%rd85, %rd84, %rd83;
	add.s64 	%rd86, %rd85, %rd82;
	add.s64 	%rd87, %rd86, %rd81;
	add.s64 	%rd88, %rd87, %rd80;
	add.s64 	%rd89, %rd88, %rd79;
	shl.b64 	%rd90, %rd89, 2;
	add.s64 	%rd8, %rd78, %rd90;
	shl.b32 	%r513, %r217, 20;
	shl.b32 	%r514, %r221, 9;
	add.s32 	%r515, %r514, %r513;
	or.b32  	%r159, %r158, %r2;
	and.b32  	%r160, %r3, 15;
	cvt.s64.s32 	%rd9, %r515;
	add.s32 	%r516, %r1, %r457;
	mul.wide.u32 	%rd91, %r516, 4;
	add.s64 	%rd10, %rd78, %rd91;
	cvt.u64.u32 	%rd92, %r1;
	cvt.u64.u32 	%rd11, %r457;
	add.s64 	%rd93, %rd11, %rd92;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd12, %rd78, %rd94;
	add.s32 	%r517, %r460, %r3;
	mul.wide.u32 	%rd95, %r517, 4;
	add.s64 	%rd13, %rd78, %rd95;
	add.s32 	%r518, %r462, %r3;
	mul.wide.u32 	%rd96, %r518, 4;
	add.s64 	%rd14, %rd78, %rd96;
	add.s32 	%r519, %r464, %r3;
	mul.wide.u32 	%rd97, %r519, 4;
	add.s64 	%rd15, %rd78, %rd97;
	add.s32 	%r520, %r466, %r3;
	mul.wide.u32 	%rd98, %r520, 4;
	add.s64 	%rd16, %rd78, %rd98;
	add.s32 	%r521, %r468, %r3;
	mul.wide.u32 	%rd99, %r521, 4;
	add.s64 	%rd17, %rd78, %rd99;
	add.s32 	%r522, %r470, %r3;
	mul.wide.u32 	%rd100, %r522, 4;
	add.s64 	%rd18, %rd78, %rd100;
	add.s32 	%r523, %r472, %r3;
	mul.wide.u32 	%rd101, %r523, 4;
	add.s64 	%rd19, %rd78, %rd101;
	add.s32 	%r524, %r474, %r3;
	mul.wide.u32 	%rd102, %r524, 4;
	add.s64 	%rd20, %rd78, %rd102;
	add.s32 	%r525, %r476, %r3;
	mul.wide.u32 	%rd103, %r525, 4;
	add.s64 	%rd21, %rd78, %rd103;
	add.s32 	%r526, %r478, %r3;
	mul.wide.u32 	%rd104, %r526, 4;
	add.s64 	%rd22, %rd78, %rd104;
	add.s32 	%r527, %r480, %r3;
	mul.wide.u32 	%rd105, %r527, 4;
	add.s64 	%rd23, %rd78, %rd105;
	add.s32 	%r528, %r482, %r3;
	mul.wide.u32 	%rd106, %r528, 4;
	add.s64 	%rd24, %rd78, %rd106;
	add.s32 	%r529, %r484, %r3;
	mul.wide.u32 	%rd107, %r529, 4;
	add.s64 	%rd25, %rd78, %rd107;
	add.s32 	%r530, %r486, %r3;
	mul.wide.u32 	%rd108, %r530, 4;
	add.s64 	%rd26, %rd78, %rd108;
	add.s32 	%r531, %r488, %r3;
	mul.wide.u32 	%rd109, %r531, 4;
	add.s64 	%rd27, %rd78, %rd109;
	add.s32 	%r532, %r490, %r3;
	mul.wide.u32 	%rd110, %r532, 4;
	add.s64 	%rd28, %rd78, %rd110;
	add.s32 	%r533, %r493, %r458;
	mul.wide.u32 	%rd111, %r533, 4;
	add.s64 	%rd29, %rd78, %rd111;
	add.s32 	%r534, %r493, %r461;
	mul.wide.u32 	%rd112, %r534, 4;
	add.s64 	%rd30, %rd78, %rd112;
	add.s32 	%r535, %r493, %r463;
	mul.wide.u32 	%rd113, %r535, 4;
	add.s64 	%rd31, %rd78, %rd113;
	add.s32 	%r536, %r493, %r465;
	mul.wide.u32 	%rd114, %r536, 4;
	add.s64 	%rd32, %rd78, %rd114;
	add.s32 	%r537, %r493, %r467;
	mul.wide.u32 	%rd115, %r537, 4;
	add.s64 	%rd33, %rd78, %rd115;
	add.s32 	%r538, %r493, %r469;
	mul.wide.u32 	%rd116, %r538, 4;
	add.s64 	%rd34, %rd78, %rd116;
	add.s32 	%r539, %r493, %r471;
	mul.wide.u32 	%rd117, %r539, 4;
	add.s64 	%rd35, %rd78, %rd117;
	add.s32 	%r540, %r493, %r473;
	mul.wide.u32 	%rd118, %r540, 4;
	add.s64 	%rd36, %rd78, %rd118;
	add.s32 	%r541, %r493, %r475;
	mul.wide.u32 	%rd119, %r541, 4;
	add.s64 	%rd37, %rd78, %rd119;
	add.s32 	%r542, %r493, %r477;
	mul.wide.u32 	%rd120, %r542, 4;
	add.s64 	%rd38, %rd78, %rd120;
	add.s32 	%r543, %r493, %r479;
	mul.wide.u32 	%rd121, %r543, 4;
	add.s64 	%rd39, %rd78, %rd121;
	add.s32 	%r544, %r493, %r481;
	mul.wide.u32 	%rd122, %r544, 4;
	add.s64 	%rd40, %rd78, %rd122;
	add.s32 	%r545, %r493, %r483;
	mul.wide.u32 	%rd123, %r545, 4;
	add.s64 	%rd41, %rd78, %rd123;
	add.s32 	%r546, %r493, %r485;
	mul.wide.u32 	%rd124, %r546, 4;
	add.s64 	%rd42, %rd78, %rd124;
	add.s32 	%r547, %r493, %r487;
	mul.wide.u32 	%rd125, %r547, 4;
	add.s64 	%rd43, %rd78, %rd125;
	add.s32 	%r548, %r493, %r489;
	mul.wide.u32 	%rd126, %r548, 4;
	add.s64 	%rd44, %rd78, %rd126;
	add.s32 	%r549, %r129, -1;
	setp.lt.u32 	%p240, %r549, 3;
	or.pred  	%p241, %p234, %p240;
	or.pred  	%p242, %p241, %p235;
	and.b32  	%r550, %r3, 24;
	setp.eq.s32 	%p243, %r550, 24;
	or.pred  	%p244, %p236, %p243;
	selp.b32 	%r161, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	add.s32 	%r551, %r512, 32;
	mul.wide.u32 	%rd127, %r551, 4;
	add.s64 	%rd45, %rd78, %rd127;
	add.s32 	%r552, %r512, 48;
	mul.wide.u32 	%rd128, %r552, 4;
	add.s64 	%rd46, %rd78, %rd128;
	add.s32 	%r553, %r512, 64;
	mul.wide.u32 	%rd129, %r553, 4;
	add.s64 	%rd47, %rd78, %rd129;
	add.s32 	%r554, %r512, 80;
	mul.wide.u32 	%rd130, %r554, 4;
	add.s64 	%rd48, %rd78, %rd130;
	add.s32 	%r555, %r512, 96;
	mul.wide.u32 	%rd131, %r555, 4;
	add.s64 	%rd49, %rd78, %rd131;
	add.s32 	%r556, %r512, 112;
	mul.wide.u32 	%rd132, %r556, 4;
	add.s64 	%rd50, %rd78, %rd132;
	add.s32 	%r557, %r512, 128;
	mul.wide.u32 	%rd133, %r557, 4;
	add.s64 	%rd51, %rd78, %rd133;
	add.s32 	%r558, %r512, 144;
	mul.wide.u32 	%rd134, %r558, 4;
	add.s64 	%rd52, %rd78, %rd134;
	add.s32 	%r559, %r512, 160;
	mul.wide.u32 	%rd135, %r559, 4;
	add.s64 	%rd53, %rd78, %rd135;
	add.s32 	%r560, %r512, 176;
	mul.wide.u32 	%rd136, %r560, 4;
	add.s64 	%rd54, %rd78, %rd136;
	add.s32 	%r561, %r512, 192;
	mul.wide.u32 	%rd137, %r561, 4;
	add.s64 	%rd55, %rd78, %rd137;
	add.s32 	%r562, %r512, 208;
	mul.wide.u32 	%rd138, %r562, 4;
	add.s64 	%rd56, %rd78, %rd138;
	add.s32 	%r563, %r512, 224;
	mul.wide.u32 	%rd139, %r563, 4;
	add.s64 	%rd57, %rd78, %rd139;
	add.s32 	%r564, %r512, 240;
	mul.wide.u32 	%rd140, %r564, 4;
	add.s64 	%rd58, %rd78, %rd140;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r158, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3342, %r89;
	mov.u32 	%r3343, %r89;
	mov.u32 	%r3347, %r89;
	bra.uni 	$L__BB0_185;
$L__BB0_156:                            // %L29357
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r127, %r89, 64;
	setp.ne.s32 	%p293, %r89, 16320;
	mov.u32 	%r89, %r127;
	@%p293 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_157;
$L__BB0_185:                            // %L1610
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_203 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r565, %r89, %r215;
	setp.lt.s32 	%p245, %r565, %r216;
	@%p245 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_157;
$L__BB0_186:                            // %pass722
                                        //   in Loop: Header=BB0_185 Depth=1
	cvt.u32.u64 	%r758, %rd11;
	or.b32  	%r759, %r89, %r1;
	shl.b32 	%r760, %r759, 8;
	and.b32  	%r761, %r760, 4181760;
	or.b32  	%r762, %r157, %r761;
	add.s32 	%r763, %r156, %r762;
	shr.s32 	%r764, %r763, 31;
	shr.u32 	%r765, %r764, 10;
	add.s32 	%r766, %r763, %r765;
	shr.s32 	%r767, %r766, 22;
	setp.lt.s32 	%p247, %r763, 0;
	and.b32  	%r768, %r766, -4194304;
	setp.ne.s32 	%p248, %r768, %r763;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r769, 1, 0, %p249;
	sub.s32 	%r770, %r769, %r767;
	shl.b32 	%r771, %r770, 22;
	add.s32 	%r772, %r771, %r763;
	mul.wide.s32 	%rd141, %r772, 4;
	add.s64 	%rd142, %rd3, %rd141;
	ld.global.v4.u32 	{%r773, %r774, %r775, %r776}, [%rd142];
	or.b32  	%r777, %r759, 16;
	shl.b32 	%r778, %r777, 8;
	and.b32  	%r779, %r778, 4185856;
	or.b32  	%r780, %r157, %r779;
	add.s32 	%r781, %r156, %r780;
	shr.s32 	%r782, %r781, 31;
	shr.u32 	%r783, %r782, 10;
	add.s32 	%r784, %r781, %r783;
	shr.s32 	%r785, %r784, 22;
	setp.lt.s32 	%p250, %r781, 0;
	and.b32  	%r786, %r784, -4194304;
	setp.ne.s32 	%p251, %r786, %r781;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r787, 1, 0, %p252;
	sub.s32 	%r788, %r787, %r785;
	shl.b32 	%r789, %r788, 22;
	add.s32 	%r790, %r789, %r781;
	mul.wide.s32 	%rd143, %r790, 4;
	add.s64 	%rd144, %rd3, %rd143;
	ld.global.v4.u32 	{%r791, %r792, %r793, %r794}, [%rd144];
	and.b32  	%r795, %r89, 16320;
	or.b32  	%r796, %r1, %r795;
	shl.b32 	%r797, %r796, 8;
	or.b32  	%r798, %r797, %r157;
	or.b32  	%r799, %r798, 8192;
	add.s32 	%r800, %r156, %r799;
	shr.s32 	%r801, %r800, 31;
	shr.u32 	%r802, %r801, 10;
	add.s32 	%r803, %r800, %r802;
	shr.s32 	%r804, %r803, 22;
	setp.lt.s32 	%p253, %r800, 0;
	and.b32  	%r805, %r803, -4194304;
	setp.ne.s32 	%p254, %r805, %r800;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r806, 1, 0, %p255;
	sub.s32 	%r807, %r806, %r804;
	shl.b32 	%r808, %r807, 22;
	add.s32 	%r809, %r808, %r800;
	mul.wide.s32 	%rd145, %r809, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r810, %r811, %r812, %r813}, [%rd146];
	or.b32  	%r814, %r798, 12288;
	add.s32 	%r815, %r156, %r814;
	shr.s32 	%r816, %r815, 31;
	shr.u32 	%r817, %r816, 10;
	add.s32 	%r818, %r815, %r817;
	shr.s32 	%r819, %r818, 22;
	setp.lt.s32 	%p256, %r815, 0;
	and.b32  	%r820, %r818, -4194304;
	setp.ne.s32 	%p257, %r820, %r815;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r821, 1, 0, %p258;
	sub.s32 	%r822, %r821, %r819;
	shl.b32 	%r823, %r822, 22;
	add.s32 	%r824, %r823, %r815;
	mul.wide.s32 	%rd147, %r824, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r825, %r826, %r827, %r828}, [%rd148];
	selp.b32 	%r829, %r775, %r773, %p246;
	shfl.sync.bfly.b32	%r830, %r829, 16, 31, -1;
	selp.b32 	%r568, %r773, %r830, %p246;
	selp.b32 	%r573, %r830, %r775, %p246;
	selp.b32 	%r831, %r776, %r774, %p246;
	shfl.sync.bfly.b32	%r832, %r831, 16, 31, -1;
	selp.b32 	%r576, %r774, %r832, %p246;
	selp.b32 	%r581, %r832, %r776, %p246;
	selp.b32 	%r833, %r793, %r791, %p246;
	shfl.sync.bfly.b32	%r834, %r833, 16, 31, -1;
	selp.b32 	%r584, %r791, %r834, %p246;
	selp.b32 	%r589, %r834, %r793, %p246;
	selp.b32 	%r835, %r794, %r792, %p246;
	shfl.sync.bfly.b32	%r836, %r835, 16, 31, -1;
	selp.b32 	%r592, %r792, %r836, %p246;
	selp.b32 	%r597, %r836, %r794, %p246;
	selp.b32 	%r837, %r812, %r810, %p246;
	shfl.sync.bfly.b32	%r838, %r837, 16, 31, -1;
	selp.b32 	%r600, %r810, %r838, %p246;
	selp.b32 	%r605, %r838, %r812, %p246;
	selp.b32 	%r839, %r813, %r811, %p246;
	shfl.sync.bfly.b32	%r840, %r839, 16, 31, -1;
	selp.b32 	%r608, %r811, %r840, %p246;
	selp.b32 	%r613, %r840, %r813, %p246;
	selp.b32 	%r841, %r827, %r825, %p246;
	shfl.sync.bfly.b32	%r842, %r841, 16, 31, -1;
	selp.b32 	%r616, %r825, %r842, %p246;
	selp.b32 	%r621, %r842, %r827, %p246;
	selp.b32 	%r843, %r828, %r826, %p246;
	shfl.sync.bfly.b32	%r844, %r843, 16, 31, -1;
	selp.b32 	%r624, %r826, %r844, %p246;
	selp.b32 	%r629, %r844, %r828, %p246;
	shl.b32 	%r569, %r573, 4;
	mov.u32 	%r567, 252645135;
	// begin inline asm
	lop3.b32 %r631, %r567, %r568, %r569, 202;
	// end inline asm
	shr.u32 	%r572, %r568, 4;
	// begin inline asm
	lop3.b32 %r647, %r567, %r572, %r573, 202;
	// end inline asm
	shl.b32 	%r577, %r581, 4;
	// begin inline asm
	lop3.b32 %r639, %r567, %r576, %r577, 202;
	// end inline asm
	shr.u32 	%r580, %r576, 4;
	// begin inline asm
	lop3.b32 %r655, %r567, %r580, %r581, 202;
	// end inline asm
	shl.b32 	%r585, %r589, 4;
	// begin inline asm
	lop3.b32 %r663, %r567, %r584, %r585, 202;
	// end inline asm
	shr.u32 	%r588, %r584, 4;
	// begin inline asm
	lop3.b32 %r679, %r567, %r588, %r589, 202;
	// end inline asm
	shl.b32 	%r593, %r597, 4;
	// begin inline asm
	lop3.b32 %r671, %r567, %r592, %r593, 202;
	// end inline asm
	shr.u32 	%r596, %r592, 4;
	// begin inline asm
	lop3.b32 %r687, %r567, %r596, %r597, 202;
	// end inline asm
	shl.b32 	%r601, %r605, 4;
	// begin inline asm
	lop3.b32 %r632, %r567, %r600, %r601, 202;
	// end inline asm
	shr.u32 	%r604, %r600, 4;
	// begin inline asm
	lop3.b32 %r648, %r567, %r604, %r605, 202;
	// end inline asm
	shl.b32 	%r609, %r613, 4;
	// begin inline asm
	lop3.b32 %r640, %r567, %r608, %r609, 202;
	// end inline asm
	shr.u32 	%r612, %r608, 4;
	// begin inline asm
	lop3.b32 %r656, %r567, %r612, %r613, 202;
	// end inline asm
	shl.b32 	%r617, %r621, 4;
	// begin inline asm
	lop3.b32 %r664, %r567, %r616, %r617, 202;
	// end inline asm
	shr.u32 	%r620, %r616, 4;
	// begin inline asm
	lop3.b32 %r680, %r567, %r620, %r621, 202;
	// end inline asm
	shl.b32 	%r625, %r629, 4;
	// begin inline asm
	lop3.b32 %r672, %r567, %r624, %r625, 202;
	// end inline asm
	shr.u32 	%r628, %r624, 4;
	// begin inline asm
	lop3.b32 %r688, %r567, %r628, %r629, 202;
	// end inline asm
	mov.u32 	%r633, 25152;
	// begin inline asm
	prmt.b32 %r695, %r631, %r632, %r633;
	// end inline asm
	mov.u32 	%r637, 29521;
	// begin inline asm
	prmt.b32 %r727, %r631, %r632, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r639, %r640, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r735, %r639, %r640, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r647, %r648, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r728, %r647, %r648, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r655, %r656, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r736, %r655, %r656, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r663, %r664, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r743, %r663, %r664, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r671, %r672, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r751, %r671, %r672, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r679, %r680, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r744, %r679, %r680, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r720, %r687, %r688, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r752, %r687, %r688, %r637;
	// end inline asm
	mov.u32 	%r697, 21520;
	// begin inline asm
	prmt.b32 %r694, %r695, %r696, %r697;
	// end inline asm
	mov.u32 	%r701, 30258;
	// begin inline asm
	prmt.b32 %r698, %r695, %r696, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r703, %r704, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r703, %r704, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r711, %r712, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r714, %r711, %r712, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r719, %r720, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r722, %r719, %r720, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r726, %r727, %r728, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r730, %r727, %r728, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r734, %r735, %r736, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r738, %r735, %r736, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r742, %r743, %r744, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r746, %r743, %r744, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r750, %r751, %r752, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r754, %r751, %r752, %r701;
	// end inline asm
	st.shared.u32 	[%rd10], %r694;
	st.shared.u32 	[%rd12+512], %r702;
	st.shared.u32 	[%rd12+256], %r698;
	st.shared.u32 	[%rd12+768], %r706;
	and.b32  	%r845, %r777, 31;
	add.s32 	%r846, %r845, %r758;
	mul.wide.u32 	%rd149, %r846, 4;
	add.s64 	%rd151, %rd78, %rd149;
	st.shared.u32 	[%rd151], %r710;
	cvt.u64.u32 	%rd152, %r845;
	add.s64 	%rd153, %rd11, %rd152;
	shl.b64 	%rd154, %rd153, 2;
	add.s64 	%rd155, %rd78, %rd154;
	st.shared.u32 	[%rd155+512], %r718;
	st.shared.u32 	[%rd155+256], %r714;
	st.shared.u32 	[%rd155+768], %r722;
	st.shared.u32 	[%rd12+128], %r726;
	st.shared.u32 	[%rd12+640], %r734;
	st.shared.u32 	[%rd12+384], %r730;
	st.shared.u32 	[%rd12+896], %r738;
	st.shared.u32 	[%rd155+128], %r742;
	st.shared.u32 	[%rd155+640], %r750;
	st.shared.u32 	[%rd155+384], %r746;
	st.shared.u32 	[%rd155+896], %r754;
	bar.sync 	0;
	ld.shared.u32 	%r162, [%rd13];
	ld.shared.u32 	%r163, [%rd14];
	ld.shared.u32 	%r164, [%rd15];
	ld.shared.u32 	%r165, [%rd16];
	ld.shared.u32 	%r166, [%rd17];
	ld.shared.u32 	%r167, [%rd18];
	ld.shared.u32 	%r168, [%rd19];
	ld.shared.u32 	%r169, [%rd20];
	ld.shared.u32 	%r170, [%rd21];
	ld.shared.u32 	%r171, [%rd22];
	ld.shared.u32 	%r172, [%rd23];
	ld.shared.u32 	%r173, [%rd24];
	ld.shared.u32 	%r174, [%rd25];
	ld.shared.u32 	%r175, [%rd26];
	ld.shared.u32 	%r176, [%rd27];
	ld.shared.u32 	%r177, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r178, %r153, 0, 31, -1;
	shfl.sync.idx.b32	%r179, %r153, 1, 31, -1;
	shfl.sync.idx.b32	%r180, %r153, 2, 31, -1;
	shfl.sync.idx.b32	%r181, %r153, 3, 31, -1;
	shfl.sync.idx.b32	%r182, %r153, 4, 31, -1;
	shfl.sync.idx.b32	%r183, %r153, 5, 31, -1;
	shfl.sync.idx.b32	%r184, %r153, 6, 31, -1;
	shfl.sync.idx.b32	%r185, %r153, 7, 31, -1;
	shfl.sync.idx.b32	%r186, %r153, 8, 31, -1;
	shfl.sync.idx.b32	%r187, %r153, 9, 31, -1;
	shfl.sync.idx.b32	%r188, %r153, 10, 31, -1;
	shfl.sync.idx.b32	%r189, %r153, 11, 31, -1;
	shfl.sync.idx.b32	%r190, %r153, 12, 31, -1;
	shfl.sync.idx.b32	%r191, %r153, 13, 31, -1;
	shfl.sync.idx.b32	%r192, %r153, 14, 31, -1;
	shfl.sync.idx.b32	%r193, %r153, 15, 31, -1;
	setp.eq.s32 	%p259, %r178, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.187:                             // %pass3077
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r847, %r178, %r3;
	mul.wide.s32 	%rd156, %r847, 4;
	add.s64 	%rd158, %rd78, %rd156;
	st.shared.u32 	[%rd158], %r162;
	setp.eq.s32 	%p260, %r179, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.188:                             // %pass3145
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r848, %r179, %r3;
	mul.wide.s32 	%rd159, %r848, 4;
	add.s64 	%rd161, %rd78, %rd159;
	st.shared.u32 	[%rd161], %r163;
	setp.eq.s32 	%p261, %r180, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.189:                             // %pass3213
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r849, %r180, %r3;
	mul.wide.s32 	%rd162, %r849, 4;
	add.s64 	%rd164, %rd78, %rd162;
	st.shared.u32 	[%rd164], %r164;
	setp.eq.s32 	%p262, %r181, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.190:                             // %pass3281
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r850, %r181, %r3;
	mul.wide.s32 	%rd165, %r850, 4;
	add.s64 	%rd167, %rd78, %rd165;
	st.shared.u32 	[%rd167], %r165;
	setp.eq.s32 	%p263, %r182, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.191:                             // %pass3349
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r851, %r182, %r3;
	mul.wide.s32 	%rd168, %r851, 4;
	add.s64 	%rd170, %rd78, %rd168;
	st.shared.u32 	[%rd170], %r166;
	setp.eq.s32 	%p264, %r183, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.192:                             // %pass3417
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r852, %r183, %r3;
	mul.wide.s32 	%rd171, %r852, 4;
	add.s64 	%rd173, %rd78, %rd171;
	st.shared.u32 	[%rd173], %r167;
	setp.eq.s32 	%p265, %r184, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.193:                             // %pass3485
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r853, %r184, %r3;
	mul.wide.s32 	%rd174, %r853, 4;
	add.s64 	%rd176, %rd78, %rd174;
	st.shared.u32 	[%rd176], %r168;
	setp.eq.s32 	%p266, %r185, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.194:                             // %pass3553
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r854, %r185, %r3;
	mul.wide.s32 	%rd177, %r854, 4;
	add.s64 	%rd179, %rd78, %rd177;
	st.shared.u32 	[%rd179], %r169;
	setp.eq.s32 	%p267, %r186, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.195:                             // %pass3621
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r855, %r186, %r3;
	mul.wide.s32 	%rd180, %r855, 4;
	add.s64 	%rd182, %rd78, %rd180;
	st.shared.u32 	[%rd182], %r170;
	setp.eq.s32 	%p268, %r187, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.196:                             // %pass3689
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r856, %r187, %r3;
	mul.wide.s32 	%rd183, %r856, 4;
	add.s64 	%rd185, %rd78, %rd183;
	st.shared.u32 	[%rd185], %r171;
	setp.eq.s32 	%p269, %r188, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.197:                             // %pass3757
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r857, %r188, %r3;
	mul.wide.s32 	%rd186, %r857, 4;
	add.s64 	%rd188, %rd78, %rd186;
	st.shared.u32 	[%rd188], %r172;
	setp.eq.s32 	%p270, %r189, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.198:                             // %pass3825
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r858, %r189, %r3;
	mul.wide.s32 	%rd189, %r858, 4;
	add.s64 	%rd191, %rd78, %rd189;
	st.shared.u32 	[%rd191], %r173;
	setp.eq.s32 	%p271, %r190, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.199:                             // %pass3893
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r859, %r190, %r3;
	mul.wide.s32 	%rd192, %r859, 4;
	add.s64 	%rd194, %rd78, %rd192;
	st.shared.u32 	[%rd194], %r174;
	setp.eq.s32 	%p272, %r191, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.200:                             // %pass3961
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r860, %r191, %r3;
	mul.wide.s32 	%rd195, %r860, 4;
	add.s64 	%rd197, %rd78, %rd195;
	st.shared.u32 	[%rd197], %r175;
	setp.eq.s32 	%p273, %r192, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.201:                             // %pass4029
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r861, %r192, %r3;
	mul.wide.s32 	%rd198, %r861, 4;
	add.s64 	%rd200, %rd78, %rd198;
	st.shared.u32 	[%rd200], %r176;
	setp.eq.s32 	%p274, %r193, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.202:                             // %pass4097
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r863, %r193, %r3;
	mul.wide.s32 	%rd201, %r863, 4;
	add.s64 	%rd203, %rd78, %rd201;
	st.shared.u32 	[%rd203], %r177;
	bar.sync 	0;
	ld.shared.u32 	%r194, [%rd29];
	ld.shared.u32 	%r195, [%rd30];
	ld.shared.u32 	%r196, [%rd31];
	ld.shared.u32 	%r197, [%rd32];
	ld.shared.u32 	%r198, [%rd33];
	ld.shared.u32 	%r199, [%rd34];
	ld.shared.u32 	%r200, [%rd35];
	ld.shared.u32 	%r201, [%rd36];
	ld.shared.u32 	%r202, [%rd37];
	ld.shared.u32 	%r203, [%rd38];
	ld.shared.u32 	%r204, [%rd39];
	ld.shared.u32 	%r205, [%rd40];
	ld.shared.u32 	%r206, [%rd41];
	ld.shared.u32 	%r207, [%rd42];
	ld.shared.u32 	%r208, [%rd43];
	ld.shared.u32 	%r209, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3334, 16;
	bra.uni 	$L__BB0_203;
$L__BB0_152:                            // %L20827
                                        //   in Loop: Header=BB0_203 Depth=2
	bar.sync 	0;
	add.s32 	%r3334, %r3334, -8;
	setp.ne.s32 	%p283, %r3334, -16;
	@%p283 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_153;
$L__BB0_203:                            // %L12334
                                        //   Parent Loop BB0_185 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3334, 16;
	selp.b32 	%r1256, %r194, 0, %p275;
	setp.eq.s32 	%p276, %r3334, 8;
	selp.b32 	%r1257, %r198, %r1256, %p276;
	setp.eq.s32 	%p277, %r3334, 0;
	selp.b32 	%r1258, %r202, %r1257, %p277;
	setp.eq.s32 	%p278, %r3334, -8;
	selp.b32 	%r1259, %r206, %r1258, %p278;
	selp.b32 	%r1260, %r195, 0, %p275;
	selp.b32 	%r1261, %r199, %r1260, %p276;
	selp.b32 	%r1262, %r203, %r1261, %p277;
	selp.b32 	%r1263, %r207, %r1262, %p278;
	selp.b32 	%r1264, %r196, 0, %p275;
	selp.b32 	%r1265, %r200, %r1264, %p276;
	selp.b32 	%r1266, %r204, %r1265, %p277;
	selp.b32 	%r1267, %r208, %r1266, %p278;
	selp.b32 	%r1268, %r197, 0, %p275;
	selp.b32 	%r1269, %r201, %r1268, %p276;
	selp.b32 	%r1270, %r205, %r1269, %p277;
	selp.b32 	%r1271, %r209, %r1270, %p278;
	// begin inline asm
	mov.b32 %r869, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r880, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r868, %r1259, -2004318072;
	mov.u32 	%r1005, 983055;
	// begin inline asm
	lop3.b32 %r866, %r1005, %r868, %r869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r870, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r871, %r869, %r870;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r874, %r866, %r871;
	// end inline asm
	mov.u32 	%r1016, 15728880;
	// begin inline asm
	lop3.b32 %r877, %r1016, %r868, %r880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r882, %r880, %r881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r885, %r877, %r882;
	// end inline asm
	// begin inline asm
	mov.b32 %r915, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r914, %r1263, -2004318072;
	// begin inline asm
	lop3.b32 %r912, %r1005, %r914, %r915, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r916, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r917, %r915, %r916;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r920, %r912, %r917;
	// end inline asm
	// begin inline asm
	lop3.b32 %r923, %r1016, %r914, %r926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r927, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r928, %r926, %r927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r931, %r923, %r928;
	// end inline asm
	// begin inline asm
	mov.b32 %r961, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r960, %r1267, -2004318072;
	// begin inline asm
	lop3.b32 %r958, %r1005, %r960, %r961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r962, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r963, %r961, %r962;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r966, %r958, %r963;
	// end inline asm
	// begin inline asm
	lop3.b32 %r969, %r1016, %r960, %r972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r973, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r974, %r972, %r973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r977, %r969, %r974;
	// end inline asm
	// begin inline asm
	mov.b32 %r1007, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1006, %r1271, -2004318072;
	// begin inline asm
	lop3.b32 %r1004, %r1005, %r1006, %r1007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1008, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1009, %r1007, %r1008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1012, %r1004, %r1009;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1015, %r1016, %r1006, %r1018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1019, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1020, %r1018, %r1019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1023, %r1015, %r1020;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r874;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1048, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r885;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1051, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r920;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1054, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r931;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1057, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r966;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r977;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1012;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1023;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1069, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1127, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1072, %r1073}, {%r245, %r248}, {%r1048}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1079, %r1080}, {%r245, %r248}, {%r1051}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1086, %r1087}, {%r245, %r248}, {%r1054}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1093, %r1094}, {%r245, %r248}, {%r1057}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1100, %r1101}, {%r245, %r248}, {%r1060}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1107, %r1108}, {%r245, %r248}, {%r1063}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1114, %r1115}, {%r245, %r248}, {%r1066}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1121, %r1122}, {%r245, %r248}, {%r1069}, {%r1127, %r1127};
	// end inline asm
	@%p1 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_204;
$L__BB0_205:                            // %pass5517
                                        //   in Loop: Header=BB0_203 Depth=2
	// begin inline asm
	neg.f16x2 %r1128, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r1128, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r283, %r1072, %r1130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1137, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r1137, %r1080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r283, %r1079, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1146, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r1146, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r283, %r1086, %r1148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1155, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r1155, %r1094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r283, %r1093, %r1157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1164, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r1164, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r283, %r1100, %r1166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1173, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1175, %r1173, %r1108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r283, %r1107, %r1175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1182, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r1182, %r1115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r283, %r1114, %r1184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1191, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1193, %r1191, %r1122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r283, %r1121, %r1193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r286, %r1072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r283, %r1073, %r1200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r286, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r283, %r1080, %r1207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1214, %r286, %r1086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r283, %r1087, %r1214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r286, %r1093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r283, %r1094, %r1221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r286, %r1100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r283, %r1101, %r1228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1235, %r286, %r1107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r283, %r1108, %r1235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1242, %r286, %r1114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r283, %r1115, %r1242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r286, %r1121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r283, %r1122, %r1249;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1272, %r1273}, {%r330, %r333}, {%r1133, %r1203}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1281, %r1282}, {%r330, %r333}, {%r1142, %r1210}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1290, %r1291}, {%r330, %r333}, {%r1151, %r1217}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1299, %r1300}, {%r330, %r333}, {%r1160, %r1224}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1308, %r1309}, {%r330, %r333}, {%r1169, %r1231}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1317, %r1318}, {%r330, %r333}, {%r1178, %r1238}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1326, %r1327}, {%r330, %r333}, {%r1187, %r1245}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1335, %r1336}, {%r330, %r333}, {%r1196, %r1252}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1412, [%rd7];
	ld.shared.u32 	%r1419, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1429, %r1426}, {%r342, %r345}, {%r1412}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1438, %r1435}, {%r342, %r345}, {%r1419}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1422, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r1422, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r376, %r1429, %r1424;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1431, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r1431, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r376, %r1438, %r1433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1440, %r379, %r1429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r376, %r1426, %r1440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1447, %r379, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1450, %r376, %r1435, %r1447;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1473, %r1476}, {%r418, %r421}, {%r1427, %r1443}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1480, %r1484}, {%r418, %r421}, {%r1436, %r1450}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1472, %r1473, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1475, %r1476, %r1476, %r1472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r1480, %r1480, %r1475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r1484, %r1484, %r1479;
	// end inline asm
	mov.u32 	%r2069, 287248671;
	// begin inline asm
	fma.rn.f16x2 %r1487, %r2069, %r1483, %r3347;
	// end inline asm
	ld.shared.u32 	%r1495, [%rd45];
	ld.shared.u32 	%r1502, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1512, %r1509}, {%r342, %r345}, {%r1495}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r342, %r345}, {%r1502}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1505, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1505, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r376, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r376, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1523, %r379, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1526, %r376, %r1509, %r1523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1530, %r379, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r376, %r1518, %r1530;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1556, %r1559}, {%r418, %r421}, {%r1510, %r1526}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1563, %r1567}, {%r418, %r421}, {%r1519, %r1533}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1555, %r1556, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r1559, %r1559, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r1563, %r1563, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r1567, %r1567, %r1562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r2069, %r1566, %r1487;
	// end inline asm
	ld.shared.u32 	%r1578, [%rd47];
	ld.shared.u32 	%r1585, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1595, %r1592}, {%r342, %r345}, {%r1578}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1604, %r1601}, {%r342, %r345}, {%r1585}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1588, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r1588, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r376, %r1595, %r1590;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1597, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1599, %r1597, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r376, %r1604, %r1599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1606, %r379, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r376, %r1592, %r1606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1613, %r379, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r376, %r1601, %r1613;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1639, %r1642}, {%r418, %r421}, {%r1593, %r1609}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1646, %r1650}, {%r418, %r421}, {%r1602, %r1616}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1638, %r1639, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r1642, %r1642, %r1638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1645, %r1646, %r1646, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1649, %r1650, %r1650, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r2069, %r1649, %r1570;
	// end inline asm
	ld.shared.u32 	%r1661, [%rd49];
	ld.shared.u32 	%r1668, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1678, %r1675}, {%r342, %r345}, {%r1661}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1687, %r1684}, {%r342, %r345}, {%r1668}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1671, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r1671, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r376, %r1678, %r1673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1680, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1682, %r1680, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1685, %r376, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1689, %r379, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1692, %r376, %r1675, %r1689;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1696, %r379, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r376, %r1684, %r1696;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1722, %r1725}, {%r418, %r421}, {%r1676, %r1692}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1729, %r1733}, {%r418, %r421}, {%r1685, %r1699}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1721, %r1722, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r1725, %r1725, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r1729, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r1733, %r1733, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r2069, %r1732, %r1653;
	// end inline asm
	ld.shared.u32 	%r1744, [%rd51];
	ld.shared.u32 	%r1751, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1761, %r1758}, {%r342, %r345}, {%r1744}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1770, %r1767}, {%r342, %r345}, {%r1751}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1754, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r1754, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r376, %r1761, %r1756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1763, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1765, %r1763, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r376, %r1770, %r1765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1772, %r379, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r376, %r1758, %r1772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r379, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r376, %r1767, %r1779;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1805, %r1808}, {%r418, %r421}, {%r1759, %r1775}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1812, %r1816}, {%r418, %r421}, {%r1768, %r1782}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1804, %r1805, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r1808, %r1808, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r1812, %r1812, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r1816, %r1816, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r2069, %r1815, %r1736;
	// end inline asm
	ld.shared.u32 	%r1827, [%rd53];
	ld.shared.u32 	%r1834, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1844, %r1841}, {%r342, %r345}, {%r1827}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1853, %r1850}, {%r342, %r345}, {%r1834}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1837, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1839, %r1837, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r376, %r1844, %r1839;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1846, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r1846, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r376, %r1853, %r1848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1855, %r379, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r376, %r1841, %r1855;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r379, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r376, %r1850, %r1862;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1888, %r1891}, {%r418, %r421}, {%r1842, %r1858}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1895, %r1899}, {%r418, %r421}, {%r1851, %r1865}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1887, %r1888, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r1891, %r1891, %r1887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r1895, %r1895, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r1899, %r1899, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r2069, %r1898, %r1819;
	// end inline asm
	ld.shared.u32 	%r1910, [%rd55];
	ld.shared.u32 	%r1917, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1927, %r1924}, {%r342, %r345}, {%r1910}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1936, %r1933}, {%r342, %r345}, {%r1917}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1920, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r1920, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r376, %r1927, %r1922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1929, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1931, %r1929, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1934, %r376, %r1936, %r1931;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1938, %r379, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1941, %r376, %r1924, %r1938;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1945, %r379, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r376, %r1933, %r1945;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1971, %r1974}, {%r418, %r421}, {%r1925, %r1941}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1978, %r1982}, {%r418, %r421}, {%r1934, %r1948}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1970, %r1971, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r1974, %r1974, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r1978, %r1978, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1982, %r1982, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r2069, %r1981, %r1902;
	// end inline asm
	ld.shared.u32 	%r1993, [%rd57];
	ld.shared.u32 	%r2000, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2010, %r2007}, {%r342, %r345}, {%r1993}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2019, %r2016}, {%r342, %r345}, {%r2000}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2003, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2005, %r2003, %r2007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2008, %r376, %r2010, %r2005;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2012, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2014, %r2012, %r2016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2017, %r376, %r2019, %r2014;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2021, %r379, %r2010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r376, %r2007, %r2021;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r379, %r2019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r376, %r2016, %r2028;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2054, %r2057}, {%r418, %r421}, {%r2008, %r2024}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2061, %r2065}, {%r418, %r421}, {%r2017, %r2031}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2053, %r2054, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2056, %r2057, %r2057, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2060, %r2061, %r2061, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r2065, %r2065, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r2069, %r2064, %r1985;
	// end inline asm
	add.s32 	%r3342, %r3342, 8;
	setp.ne.s32 	%p279, %r3342, 200;
	@%p279 bra 	$L__BB0_152;
// %bb.206:                             // %pass8927
                                        //   in Loop: Header=BB0_203 Depth=2
	shl.b32 	%r2073, %r3343, 20;
	or.b32  	%r2074, %r2073, %r159;
	or.b32  	%r2075, %r2074, %r160;
	or.b32  	%r2076, %r2075, %r5;
	cvt.u64.u32 	%rd206, %r2076;
	add.s64 	%rd207, %rd206, %rd9;
	shr.u64 	%rd208, %rd207, 35;
	add.s64 	%rd209, %rd207, %rd208;
	shr.s64 	%rd210, %rd209, 29;
	setp.lt.s64 	%p280, %rd207, 0;
	and.b64  	%rd211, %rd209, -536870912;
	setp.ne.s64 	%p281, %rd211, %rd207;
	and.pred  	%p282, %p280, %p281;
	selp.u64 	%rd212, 1, 0, %p282;
	sub.s64 	%rd213, %rd212, %rd210;
	shl.b64 	%rd214, %rd213, 29;
	add.s64 	%rd215, %rd214, %rd207;
	shl.b64 	%rd216, %rd215, 2;
	add.s64 	%rd217, %rd4, %rd216;
	st.global.u32 	[%rd217], %r3347;
	add.s32 	%r3343, %r3343, 1;
	mov.u32 	%r3342, 0;
	mov.u32 	%r3347, %r3342;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L20848.preheader
                                        //   in Loop: Header=BB0_185 Depth=1
	mov.u32 	%r3341, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_155:                            // %L29341
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3341, %r3341, -8;
	setp.ne.s32 	%p292, %r3341, -16;
	@%p292 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L20848
                                        //   Parent Loop BB0_185 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p284, %r3341, 16;
	selp.b32 	%r3270, %r194, 0, %p284;
	setp.eq.s32 	%p285, %r3341, 8;
	selp.b32 	%r3271, %r198, %r3270, %p285;
	setp.eq.s32 	%p286, %r3341, 0;
	selp.b32 	%r3272, %r202, %r3271, %p286;
	setp.eq.s32 	%p287, %r3341, -8;
	selp.b32 	%r3273, %r206, %r3272, %p287;
	selp.b32 	%r3274, %r195, 0, %p284;
	selp.b32 	%r3275, %r199, %r3274, %p285;
	selp.b32 	%r3276, %r203, %r3275, %p286;
	selp.b32 	%r3277, %r207, %r3276, %p287;
	selp.b32 	%r3278, %r196, 0, %p284;
	selp.b32 	%r3279, %r200, %r3278, %p285;
	selp.b32 	%r3280, %r204, %r3279, %p286;
	selp.b32 	%r3281, %r208, %r3280, %p287;
	selp.b32 	%r3282, %r197, 0, %p284;
	selp.b32 	%r3283, %r201, %r3282, %p285;
	selp.b32 	%r3284, %r205, %r3283, %p286;
	selp.b32 	%r3285, %r209, %r3284, %p287;
	// begin inline asm
	mov.b32 %r2105, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2116, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3286, %r3273, 8;
	xor.b32  	%r2115, %r3286, 8947848;
	// begin inline asm
	lop3.b32 %r2102, %r1005, %r2115, %r2105, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2106, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2107, %r2105, %r2106;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2110, %r2102, %r2107;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2113, %r1016, %r2115, %r2116, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2117, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2118, %r2116, %r2117;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2121, %r2113, %r2118;
	// end inline asm
	// begin inline asm
	mov.b32 %r2151, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2162, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3287, %r3277, 8;
	xor.b32  	%r2161, %r3287, 8947848;
	// begin inline asm
	lop3.b32 %r2148, %r1005, %r2161, %r2151, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2152, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2153, %r2151, %r2152;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2156, %r2148, %r2153;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2159, %r1016, %r2161, %r2162, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2163, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2164, %r2162, %r2163;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2167, %r2159, %r2164;
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2208, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3288, %r3281, 8;
	xor.b32  	%r2207, %r3288, 8947848;
	// begin inline asm
	lop3.b32 %r2194, %r1005, %r2207, %r2197, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2199, %r2197, %r2198;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2202, %r2194, %r2199;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2205, %r1016, %r2207, %r2208, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2210, %r2208, %r2209;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2213, %r2205, %r2210;
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3289, %r3285, 8;
	xor.b32  	%r2253, %r3289, 8947848;
	// begin inline asm
	lop3.b32 %r2240, %r1005, %r2253, %r2243, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2244, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2245, %r2243, %r2244;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2248, %r2240, %r2245;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2251, %r1016, %r2253, %r2254, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2256, %r2254, %r2255;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2259, %r2251, %r2256;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2110;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2262, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2121;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2265, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2156;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2268, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2167;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2271, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2202;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2274, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2213;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2277, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2248;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2280, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2259;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2283, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2349, %r2346}, {%r245, %r248}, {%r2262}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2358, %r2355}, {%r245, %r248}, {%r2265}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2367, %r2364}, {%r245, %r248}, {%r2268}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2376, %r2373}, {%r245, %r248}, {%r2271}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2385, %r2382}, {%r245, %r248}, {%r2274}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2394, %r2391}, {%r245, %r248}, {%r2277}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2403, %r2400}, {%r245, %r248}, {%r2280}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2412, %r2409}, {%r245, %r248}, {%r2283}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2342, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2344, %r2342, %r2346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2347, %r283, %r2349, %r2344;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2351, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2353, %r2351, %r2355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2356, %r283, %r2358, %r2353;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2360, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2362, %r2360, %r2364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2365, %r283, %r2367, %r2362;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2369, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2371, %r2369, %r2373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2374, %r283, %r2376, %r2371;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2378, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2380, %r2378, %r2382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2383, %r283, %r2385, %r2380;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2387, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2389, %r2387, %r2391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2392, %r283, %r2394, %r2389;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2396, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2398, %r2396, %r2400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2401, %r283, %r2403, %r2398;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2405, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2407, %r2405, %r2409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2410, %r283, %r2412, %r2407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2414, %r286, %r2349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2417, %r283, %r2346, %r2414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2421, %r286, %r2358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2424, %r283, %r2355, %r2421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2428, %r286, %r2367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2431, %r283, %r2364, %r2428;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2435, %r286, %r2376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2438, %r283, %r2373, %r2435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2442, %r286, %r2385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2445, %r283, %r2382, %r2442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2449, %r286, %r2394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2452, %r283, %r2391, %r2449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2456, %r286, %r2403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2459, %r283, %r2400, %r2456;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2463, %r286, %r2412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2466, %r283, %r2409, %r2463;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2470, %r2471}, {%r330, %r333}, {%r2347, %r2417}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2479, %r2480}, {%r330, %r333}, {%r2356, %r2424}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2488, %r2489}, {%r330, %r333}, {%r2365, %r2431}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2497, %r2498}, {%r330, %r333}, {%r2374, %r2438}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2506, %r2507}, {%r330, %r333}, {%r2383, %r2445}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2515, %r2516}, {%r330, %r333}, {%r2392, %r2452}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2524, %r2525}, {%r330, %r333}, {%r2401, %r2459}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2533, %r2534}, {%r330, %r333}, {%r2410, %r2466}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2610, [%rd7];
	ld.shared.u32 	%r2617, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2627, %r2624}, {%r342, %r345}, {%r2610}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2636, %r2633}, {%r342, %r345}, {%r2617}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2620, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2622, %r2620, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2625, %r376, %r2627, %r2622;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2629, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2631, %r2629, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2634, %r376, %r2636, %r2631;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2638, %r379, %r2627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2641, %r376, %r2624, %r2638;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2645, %r379, %r2636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2648, %r376, %r2633, %r2645;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2671, %r2674}, {%r418, %r421}, {%r2625, %r2641}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2678, %r2682}, {%r418, %r421}, {%r2634, %r2648}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r2671, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2673, %r2674, %r2674, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2677, %r2678, %r2678, %r2673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2681, %r2682, %r2682, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r2069, %r2681, %r3347;
	// end inline asm
	ld.shared.u32 	%r2693, [%rd45];
	ld.shared.u32 	%r2700, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2710, %r2707}, {%r342, %r345}, {%r2693}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2719, %r2716}, {%r342, %r345}, {%r2700}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2703, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2705, %r2703, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2708, %r376, %r2710, %r2705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2712, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2714, %r2712, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2717, %r376, %r2719, %r2714;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2721, %r379, %r2710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2724, %r376, %r2707, %r2721;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2728, %r379, %r2719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2731, %r376, %r2716, %r2728;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2754, %r2757}, {%r418, %r421}, {%r2708, %r2724}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2761, %r2765}, {%r418, %r421}, {%r2717, %r2731}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2753, %r2754, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r2757, %r2757, %r2753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2760, %r2761, %r2761, %r2756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2764, %r2765, %r2765, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r2069, %r2764, %r2685;
	// end inline asm
	ld.shared.u32 	%r2776, [%rd47];
	ld.shared.u32 	%r2783, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2793, %r2790}, {%r342, %r345}, {%r2776}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2802, %r2799}, {%r342, %r345}, {%r2783}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2786, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2788, %r2786, %r2790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2791, %r376, %r2793, %r2788;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2795, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2797, %r2795, %r2799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r376, %r2802, %r2797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2804, %r379, %r2793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r376, %r2790, %r2804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2811, %r379, %r2802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2814, %r376, %r2799, %r2811;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2837, %r2840}, {%r418, %r421}, {%r2791, %r2807}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2844, %r2848}, {%r418, %r421}, {%r2800, %r2814}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2836, %r2837, %r2837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2839, %r2840, %r2840, %r2836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2843, %r2844, %r2844, %r2839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2847, %r2848, %r2848, %r2843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2851, %r2069, %r2847, %r2768;
	// end inline asm
	ld.shared.u32 	%r2859, [%rd49];
	ld.shared.u32 	%r2866, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2876, %r2873}, {%r342, %r345}, {%r2859}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2885, %r2882}, {%r342, %r345}, {%r2866}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2869, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2871, %r2869, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2874, %r376, %r2876, %r2871;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2878, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2880, %r2878, %r2882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2883, %r376, %r2885, %r2880;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2887, %r379, %r2876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r376, %r2873, %r2887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2894, %r379, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r376, %r2882, %r2894;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2920, %r2923}, {%r418, %r421}, {%r2874, %r2890}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2927, %r2931}, {%r418, %r421}, {%r2883, %r2897}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2919, %r2920, %r2920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2922, %r2923, %r2923, %r2919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2926, %r2927, %r2927, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r2931, %r2931, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r2069, %r2930, %r2851;
	// end inline asm
	ld.shared.u32 	%r2942, [%rd51];
	ld.shared.u32 	%r2949, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2959, %r2956}, {%r342, %r345}, {%r2942}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2968, %r2965}, {%r342, %r345}, {%r2949}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2952, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2954, %r2952, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r376, %r2959, %r2954;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2961, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2963, %r2961, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2966, %r376, %r2968, %r2963;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2970, %r379, %r2959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r376, %r2956, %r2970;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2977, %r379, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2980, %r376, %r2965, %r2977;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3003, %r3006}, {%r418, %r421}, {%r2957, %r2973}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3010, %r3014}, {%r418, %r421}, {%r2966, %r2980}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3002, %r3003, %r3003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r3006, %r3006, %r3002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3009, %r3010, %r3010, %r3005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3013, %r3014, %r3014, %r3009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3017, %r2069, %r3013, %r2934;
	// end inline asm
	ld.shared.u32 	%r3025, [%rd53];
	ld.shared.u32 	%r3032, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3042, %r3039}, {%r342, %r345}, {%r3025}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3051, %r3048}, {%r342, %r345}, {%r3032}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3035, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3037, %r3035, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3040, %r376, %r3042, %r3037;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3044, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3046, %r3044, %r3048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3049, %r376, %r3051, %r3046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3053, %r379, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r376, %r3039, %r3053;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3060, %r379, %r3051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3063, %r376, %r3048, %r3060;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3086, %r3089}, {%r418, %r421}, {%r3040, %r3056}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3093, %r3097}, {%r418, %r421}, {%r3049, %r3063}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3085, %r3086, %r3086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r3089, %r3089, %r3085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3092, %r3093, %r3093, %r3088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3096, %r3097, %r3097, %r3092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3100, %r2069, %r3096, %r3017;
	// end inline asm
	ld.shared.u32 	%r3108, [%rd55];
	ld.shared.u32 	%r3115, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3125, %r3122}, {%r342, %r345}, {%r3108}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3134, %r3131}, {%r342, %r345}, {%r3115}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3118, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3120, %r3118, %r3122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3123, %r376, %r3125, %r3120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3127, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3129, %r3127, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3132, %r376, %r3134, %r3129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3136, %r379, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r376, %r3122, %r3136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3143, %r379, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r376, %r3131, %r3143;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3169, %r3172}, {%r418, %r421}, {%r3123, %r3139}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3176, %r3180}, {%r418, %r421}, {%r3132, %r3146}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3168, %r3169, %r3169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r3172, %r3172, %r3168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r3176, %r3176, %r3171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3180, %r3180, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3183, %r2069, %r3179, %r3100;
	// end inline asm
	ld.shared.u32 	%r3191, [%rd57];
	ld.shared.u32 	%r3198, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3208, %r3205}, {%r342, %r345}, {%r3191}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3217, %r3214}, {%r342, %r345}, {%r3198}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3203, %r3201, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r376, %r3208, %r3203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3210, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3212, %r3210, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r376, %r3217, %r3212;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3219, %r379, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r376, %r3205, %r3219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3226, %r379, %r3217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r376, %r3214, %r3226;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3252, %r3255}, {%r418, %r421}, {%r3206, %r3222}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3259, %r3263}, {%r418, %r421}, {%r3215, %r3229}, {%r1127, %r1127}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3251, %r3252, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r3255, %r3255, %r3251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3258, %r3259, %r3259, %r3254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3262, %r3263, %r3263, %r3258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r2069, %r3262, %r3183;
	// end inline asm
	add.s32 	%r3342, %r3342, 8;
	setp.eq.s32 	%p288, %r3342, 200;
	@%p288 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_155;
$L__BB0_207:                            // %pass12464
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3291, %r3343, 20;
	or.b32  	%r3292, %r3291, %r159;
	or.b32  	%r3293, %r3292, %r160;
	or.b32  	%r3294, %r3293, %r5;
	cvt.u64.u32 	%rd218, %r3294;
	add.s64 	%rd219, %rd218, %rd9;
	shr.u64 	%rd220, %rd219, 35;
	add.s64 	%rd221, %rd219, %rd220;
	shr.s64 	%rd222, %rd221, 29;
	setp.lt.s64 	%p289, %rd219, 0;
	and.b64  	%rd223, %rd221, -536870912;
	setp.ne.s64 	%p290, %rd223, %rd219;
	and.pred  	%p291, %p289, %p290;
	selp.u64 	%rd224, 1, 0, %p291;
	sub.s64 	%rd225, %rd224, %rd222;
	shl.b64 	%rd226, %rd225, 29;
	add.s64 	%rd227, %rd226, %rd219;
	shl.b64 	%rd228, %rd227, 2;
	add.s64 	%rd229, %rd4, %rd228;
	st.global.u32 	[%rd229], %r3347;
	add.s32 	%r3343, %r3343, 1;
	mov.u32 	%r3342, %r1127;
	mov.u32 	%r3347, %r1127;
	bra.uni 	$L__BB0_155;
$L__BB0_157:                            // %L29372
	mov.u32 	%r3295, 0;
	st.global.u32 	[%rd6], %r3295;
	ret;
$L__BB0_204:                            // %post_box_union
	mov.u64 	%rd204, exception2385;
	cvta.global.u64 	%rd205, %rd204;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd205;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6864
	mov.u32 	%r3311, 5;
	st.global.u32 	[%rd6], %r3311;
	mov.u64 	%rd260, exception2337;
	cvta.global.u64 	%rd261, %rd260;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd261;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7024
	mov.u32 	%r3310, 5;
	st.global.u32 	[%rd6], %r3310;
	mov.u64 	%rd258, exception2337;
	cvta.global.u64 	%rd259, %rd258;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd259;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7184
	mov.u32 	%r3309, 5;
	st.global.u32 	[%rd6], %r3309;
	mov.u64 	%rd256, exception2337;
	cvta.global.u64 	%rd257, %rd256;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd257;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7344
	mov.u32 	%r3308, 5;
	st.global.u32 	[%rd6], %r3308;
	mov.u64 	%rd254, exception2337;
	cvta.global.u64 	%rd255, %rd254;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd255;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7504
	mov.u32 	%r3307, 5;
	st.global.u32 	[%rd6], %r3307;
	mov.u64 	%rd252, exception2337;
	cvta.global.u64 	%rd253, %rd252;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd253;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7664
	mov.u32 	%r3306, 5;
	st.global.u32 	[%rd6], %r3306;
	mov.u64 	%rd250, exception2337;
	cvta.global.u64 	%rd251, %rd250;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd251;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7824
	mov.u32 	%r3305, 5;
	st.global.u32 	[%rd6], %r3305;
	mov.u64 	%rd248, exception2337;
	cvta.global.u64 	%rd249, %rd248;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd249;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7984
	mov.u32 	%r3304, 5;
	st.global.u32 	[%rd6], %r3304;
	mov.u64 	%rd246, exception2337;
	cvta.global.u64 	%rd247, %rd246;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd247;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8144
	mov.u32 	%r3303, 5;
	st.global.u32 	[%rd6], %r3303;
	mov.u64 	%rd244, exception2337;
	cvta.global.u64 	%rd245, %rd244;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd245;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8304
	mov.u32 	%r3302, 5;
	st.global.u32 	[%rd6], %r3302;
	mov.u64 	%rd242, exception2337;
	cvta.global.u64 	%rd243, %rd242;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd243;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8464
	mov.u32 	%r3301, 5;
	st.global.u32 	[%rd6], %r3301;
	mov.u64 	%rd240, exception2337;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8624
	mov.u32 	%r3300, 5;
	st.global.u32 	[%rd6], %r3300;
	mov.u64 	%rd238, exception2337;
	cvta.global.u64 	%rd239, %rd238;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd239;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8784
	mov.u32 	%r3299, 5;
	st.global.u32 	[%rd6], %r3299;
	mov.u64 	%rd236, exception2337;
	cvta.global.u64 	%rd237, %rd236;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd237;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8944
	mov.u32 	%r3298, 5;
	st.global.u32 	[%rd6], %r3298;
	mov.u64 	%rd234, exception2337;
	cvta.global.u64 	%rd235, %rd234;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd235;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9104
	mov.u32 	%r3297, 5;
	st.global.u32 	[%rd6], %r3297;
	mov.u64 	%rd232, exception2337;
	cvta.global.u64 	%rd233, %rd232;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd233;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9264
	mov.u32 	%r3296, 5;
	st.global.u32 	[%rd6], %r3296;
	mov.u64 	%rd230, exception2337;
	cvta.global.u64 	%rd231, %rd230;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd231;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3313, 2;
	st.global.u32 	[%rd6], %r3313;
	mov.u64 	%rd264, exception2337;
	cvta.global.u64 	%rd265, %rd264;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd265;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r3312, 3;
	st.global.u32 	[%rd6], %r3312;
	mov.u64 	%rd262, exception2337;
	cvta.global.u64 	%rd263, %rd262;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd263;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r431, [retval0+0];
	} // callseq 47
	mov.u32 	%r433, 4;
	st.global.u32 	[%rd6], %r433;
	mov.u64 	%rd73, exception2337;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
