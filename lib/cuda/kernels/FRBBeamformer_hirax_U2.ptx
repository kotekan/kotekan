// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4066[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4114[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<304>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3409>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<299>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r245, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd67, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r254, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r254, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd68, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r246, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 9;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r255, %r2, %r3;
	or.b32  	%r256, %r255, %r5;
	mul.wide.u32 	%rd75, %r256, 4;
	add.s64 	%rd6, %rd68, %rd75;
	mov.u32 	%r257, 1;
	st.global.u32 	[%rd6], %r257;
	setp.gt.u32 	%p3, %r246, 32767;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r247, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r247, %r246;
	setp.gt.s32 	%p5, %r247, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r248, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r247, %r246;
	and.b32  	%r258, %r6, 63;
	setp.ne.s32 	%p7, %r258, 0;
	setp.gt.u32 	%p8, %r248, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r249, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r249, %r248;
	setp.lt.s32 	%p11, %r249, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r259, %r249, %r248;
	mul.hi.s32 	%r260, %r6, 715827883;
	shr.u32 	%r261, %r260, 31;
	shr.s32 	%r262, %r260, 5;
	add.s32 	%r263, %r262, %r261;
	setp.eq.s32 	%p13, %r259, %r263;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r250, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r250, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r251, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r251, %r250;
	setp.gt.s32 	%p16, %r251, 2;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r252, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r251, %r250;
	and.b32  	%r264, %r7, 1;
	setp.eq.b32 	%p18, %r264, 1;
	setp.lt.s32 	%p19, %r252, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r253, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r253, %r252;
	setp.gt.s32 	%p22, %r253, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r265, %r253, %r252;
	and.b32  	%r266, %r265, 1;
	setp.eq.b32 	%p24, %r266, 1;
	not.pred 	%p25, %p24;
	setp.eq.s32 	%p26, %r265, %r7;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_13;
$L__BB0_160:                            // %pass162
	and.b32  	%r146, %r3, 3;
	shr.u32 	%r147, %r3, 2;
	mul.lo.s32 	%r267, %r146, %r147;
	and.b32  	%r268, %r267, 7;
	cvt.rn.f32.s32 	%f185, %r268;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p28, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p299, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p28 bra 	$L__BB0_172;
// %bb.161:
	@%p299 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_162;
$L__BB0_168:
	mov.b32 	%r149, %f750;
	and.b32  	%r269, %r149, 8388607;
	or.b32  	%r3404, %r269, 1065353216;
	mov.b32 	%f745, %r3404;
	add.s32 	%r270, %r149, -1073741824;
	and.b32  	%r3405, %r270, -8388608;
	setp.eq.s32 	%p35, %r3405, 0;
	@%p35 bra 	$L__BB0_171;
// %bb.169:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_170:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r271, %r3405, 192937984;
	add.s32 	%r272, %r3404, %r271;
	mov.b32 	%f197, %r272;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3405, %r3405, %r271;
	mov.b32 	%r3404, %f745;
	setp.ne.s32 	%p36, %r3405, 0;
	setp.ne.s32 	%p37, %r3404, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_170;
$L__BB0_171:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r149, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_172;
$L__BB0_162:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r148, %f154;
	setp.lt.u32 	%p30, %r148, 1073741824;
	@%p30 bra 	$L__BB0_167;
// %bb.163:
	setp.lt.u32 	%p31, %r148, -2147483647;
	@%p31 bra 	$L__BB0_165;
// %bb.164:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p34, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p34;
	bra.uni 	$L__BB0_167;
$L__BB0_165:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p32, %f154, 0f40800000;
	@%p32 bra 	$L__BB0_167;
// %bb.166:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p33, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p33;
$L__BB0_167:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_172:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p40, %f206, 0f7F800000;
	mov.b32 	%r273, %f151;
	and.b32  	%r156, %r273, -2147483648;
	@%p40 bra 	$L__BB0_174;
// %bb.173:
	mov.b32 	%r274, %f746;
	or.b32  	%r275, %r156, %r274;
	mov.b32 	%f746, %r275;
$L__BB0_174:                            // %__nv_fmodf.exit
	shl.b32 	%r159, %r3, 1;
	and.b32  	%r290, %r159, 2;
	mul.lo.s32 	%r160, %r290, %r147;
	cvt.rn.f32.s32 	%f239, %r160;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p48, %f726, 0f40000000;
	setp.gtu.f32 	%p300, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p48 bra 	$L__BB0_25;
// %bb.14:
	@%p300 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r291, %r9, 8388607;
	or.b32  	%r3370, %r291, 1065353216;
	mov.b32 	%f705, %r3370;
	add.s32 	%r292, %r9, -1073741824;
	and.b32  	%r3371, %r292, -8388608;
	setp.eq.s32 	%p55, %r3371, 0;
	@%p55 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2363.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2363
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r293, %r3371, 192937984;
	add.s32 	%r294, %r3370, %r293;
	mov.b32 	%f251, %r294;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3371, %r3371, %r293;
	mov.b32 	%r3370, %f705;
	setp.ne.s32 	%p56, %r3371, 0;
	setp.ne.s32 	%p57, %r3370, 0;
	and.pred  	%p58, %p56, %p57;
	@%p58 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2365
	setp.gt.u32 	%p59, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p59;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2342
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p50, %r8, 1073741824;
	@%p50 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p51, %r8, -2147483647;
	@%p51 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p54, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p54;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p52, %f2, 0f40800000;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2346
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p53, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p53;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2349
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2368
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p60, %f260, 0f7F800000;
	mov.b32 	%r295, %f168;
	and.b32  	%r16, %r295, -2147483648;
	@%p60 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r296, %f706;
	or.b32  	%r297, %r16, %r296;
	mov.b32 	%f706, %r297;
$L__BB0_27:                             // %__nv_fmodf.exit2369
	add.s32 	%r306, %r160, %r147;
	cvt.rn.f32.s32 	%f291, %r306;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p68, %f730, 0f40000000;
	setp.gtu.f32 	%p301, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p68 bra 	$L__BB0_39;
// %bb.28:
	@%p301 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r307, %r18, 8388607;
	or.b32  	%r3372, %r307, 1065353216;
	mov.b32 	%f709, %r3372;
	add.s32 	%r308, %r18, -1073741824;
	and.b32  	%r3373, %r308, -8388608;
	setp.eq.s32 	%p75, %r3373, 0;
	@%p75 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2394.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2394
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r309, %r3373, 192937984;
	add.s32 	%r310, %r3372, %r309;
	mov.b32 	%f303, %r310;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3373, %r3373, %r309;
	mov.b32 	%r3372, %f709;
	setp.ne.s32 	%p76, %r3373, 0;
	setp.ne.s32 	%p77, %r3372, 0;
	and.pred  	%p78, %p76, %p77;
	@%p78 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2396
	setp.gt.u32 	%p79, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p79;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2373
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p70, %r17, 1073741824;
	@%p70 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p71, %r17, -2147483647;
	@%p71 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p74, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p74;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p72, %f21, 0f40800000;
	@%p72 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2377
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p73, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p73;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2380
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2399
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p80, %f312, 0f7F800000;
	mov.b32 	%r311, %f18;
	and.b32  	%r25, %r311, -2147483648;
	@%p80 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r312, %f710;
	or.b32  	%r313, %r25, %r312;
	mov.b32 	%f710, %r313;
$L__BB0_41:                             // %__nv_fmodf.exit2400
	mul.lo.s32 	%r28, %r159, %r147;
	and.b32  	%r328, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r328;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p88, %f734, 0f40000000;
	setp.gtu.f32 	%p302, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p88 bra 	$L__BB0_53;
// %bb.42:
	@%p302 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r329, %r30, 8388607;
	or.b32  	%r3374, %r329, 1065353216;
	mov.b32 	%f713, %r3374;
	add.s32 	%r330, %r30, -1073741824;
	and.b32  	%r3375, %r330, -8388608;
	setp.eq.s32 	%p95, %r3375, 0;
	@%p95 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2425.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2425
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r3375, 192937984;
	add.s32 	%r332, %r3374, %r331;
	mov.b32 	%f357, %r332;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3375, %r3375, %r331;
	mov.b32 	%r3374, %f713;
	setp.ne.s32 	%p96, %r3375, 0;
	setp.ne.s32 	%p97, %r3374, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2427
	setp.gt.u32 	%p99, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2404
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p90, %r29, 1073741824;
	@%p90 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p91, %r29, -2147483647;
	@%p91 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p94, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p94;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p92, %f38, 0f40800000;
	@%p92 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2408
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p93, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p93;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2411
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2430
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p100, %f366, 0f7F800000;
	mov.b32 	%r333, %f35;
	and.b32  	%r37, %r333, -2147483648;
	@%p100 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r334, %f714;
	or.b32  	%r335, %r37, %r334;
	mov.b32 	%f714, %r335;
$L__BB0_55:                             // %__nv_fmodf.exit2431
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r336, %f367;
	and.b32  	%r337, %r336, -2147483648;
	or.b32  	%r338, %r337, 1056964608;
	mov.b32 	%f368, %r338;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p101, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p101;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p102, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p102;
	cvt.rzi.s32.f32 	%r339, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r340, %r339, 1;
	setp.eq.b32 	%p103, %r340, 1;
	selp.f32 	%f386, %f384, %f385, %p103;
	selp.f32 	%f387, %f385, %f384, %p103;
	and.b32  	%r341, %r339, 2;
	setp.eq.s32 	%p104, %r341, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p104;
	add.s32 	%r342, %r339, 1;
	and.b32  	%r343, %r342, 2;
	setp.eq.s32 	%p105, %r343, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p106, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p106;
	abs.f32 	%f395, %f714;
	add.s32 	%r344, %r28, %r147;
	and.b32  	%r345, %r344, 3;
	cvt.rn.f32.s32 	%f397, %r345;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p108, %f738, 0f40000000;
	setp.gtu.f32 	%p303, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p108 bra 	$L__BB0_67;
// %bb.56:
	@%p303 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r346, %r39, 8388607;
	or.b32  	%r3376, %r346, 1065353216;
	mov.b32 	%f717, %r3376;
	add.s32 	%r347, %r39, -1073741824;
	and.b32  	%r3377, %r347, -8388608;
	setp.eq.s32 	%p115, %r3377, 0;
	@%p115 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2456.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2456
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r3377, 192937984;
	add.s32 	%r349, %r3376, %r348;
	mov.b32 	%f409, %r349;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3377, %r3377, %r348;
	mov.b32 	%r3376, %f717;
	setp.ne.s32 	%p116, %r3377, 0;
	setp.ne.s32 	%p117, %r3376, 0;
	and.pred  	%p118, %p116, %p117;
	@%p118 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2458
	setp.gt.u32 	%p119, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p119;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2435
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p110, %r38, 1073741824;
	@%p110 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p111, %r38, -2147483647;
	@%p111 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p114, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p114;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p112, %f57, 0f40800000;
	@%p112 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2439
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p113, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p113;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2442
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2461
	selp.f32 	%f392, %f387, %f391, %p105;
	setp.gt.f32 	%p107, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p120, %f418, 0f7F800000;
	mov.b32 	%r350, %f54;
	and.b32  	%r46, %r350, -2147483648;
	@%p120 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r351, %f718;
	or.b32  	%r352, %r46, %r351;
	mov.b32 	%f718, %r352;
$L__BB0_69:                             // %__nv_fmodf.exit2462
	selp.f32 	%f53, %f396, %f392, %p107;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r353, %f419;
	and.b32  	%r354, %r353, -2147483648;
	or.b32  	%r355, %r354, 1056964608;
	mov.b32 	%f420, %r355;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p121, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p121;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p122, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p122;
	cvt.rzi.s32.f32 	%r356, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r357, %r356, 1;
	setp.eq.b32 	%p123, %r357, 1;
	selp.f32 	%f438, %f436, %f437, %p123;
	selp.f32 	%f439, %f437, %f436, %p123;
	and.b32  	%r358, %r356, 2;
	setp.eq.s32 	%p124, %r358, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p124;
	add.s32 	%r359, %r356, 1;
	and.b32  	%r360, %r359, 2;
	setp.eq.s32 	%p125, %r360, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p125;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p126, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p126;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p127, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p127;
	and.b32  	%r47, %r3, 2;
	setp.eq.s32 	%p128, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p128 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p28 bra 	$L__BB0_182;
// %bb.72:
	@%p299 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_73;
$L__BB0_178:
	mov.b32 	%r162, %f750;
	and.b32  	%r367, %r162, 8388607;
	or.b32  	%r3406, %r367, 1065353216;
	mov.b32 	%f749, %r3406;
	add.s32 	%r368, %r162, -1073741824;
	and.b32  	%r3407, %r368, -8388608;
	setp.eq.s32 	%p136, %r3407, 0;
	@%p136 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i2487.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i2487
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r369, %r3407, 192937984;
	add.s32 	%r370, %r3406, %r369;
	mov.b32 	%f459, %r370;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3407, %r3407, %r369;
	mov.b32 	%r3406, %f749;
	setp.ne.s32 	%p137, %r3407, 0;
	setp.ne.s32 	%p138, %r3406, 0;
	and.pred  	%p139, %p137, %p138;
	@%p139 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i2489
	setp.gt.u32 	%p140, %r162, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p140;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_182;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2466
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r161, %f171;
	setp.lt.u32 	%p131, %r161, 1073741824;
	@%p131 bra 	$L__BB0_177;
// %bb.74:
	setp.lt.u32 	%p132, %r161, -2147483647;
	@%p132 bra 	$L__BB0_175;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p135, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p135;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p133, %f171, 0f40800000;
	@%p133 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i2470
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p134, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p134;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i2473
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i2492
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p141, %f468, 0f7F800000;
	@%p141 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r371, %f750;
	or.b32  	%r372, %r156, %r371;
	mov.b32 	%f750, %r372;
$L__BB0_184:                            // %__nv_fmodf.exit2493
	@%p48 bra 	$L__BB0_87;
// %bb.76:
	@%p300 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r387, %r51, 8388607;
	or.b32  	%r3378, %r387, 1065353216;
	mov.b32 	%f725, %r3378;
	add.s32 	%r388, %r51, -1073741824;
	and.b32  	%r3379, %r388, -8388608;
	setp.eq.s32 	%p156, %r3379, 0;
	@%p156 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2518.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2518
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r389, %r3379, 192937984;
	add.s32 	%r390, %r3378, %r389;
	mov.b32 	%f511, %r390;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3379, %r3379, %r389;
	mov.b32 	%r3378, %f725;
	setp.ne.s32 	%p157, %r3379, 0;
	setp.ne.s32 	%p158, %r3378, 0;
	and.pred  	%p159, %p157, %p158;
	@%p159 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2520
	setp.gt.u32 	%p160, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p160;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2497
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p151, %r50, 1073741824;
	@%p151 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p152, %r50, -2147483647;
	@%p152 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p155, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p155;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p153, %f80, 0f40800000;
	@%p153 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2501
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p154, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p154;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2504
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2523
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p161, %f520, 0f7F800000;
	@%p161 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r391, %f726;
	or.b32  	%r392, %r16, %r391;
	mov.b32 	%f726, %r392;
$L__BB0_89:                             // %__nv_fmodf.exit2524
	@%p68 bra 	$L__BB0_101;
// %bb.90:
	@%p301 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r401, %r59, 8388607;
	or.b32  	%r3380, %r401, 1065353216;
	mov.b32 	%f729, %r3380;
	add.s32 	%r402, %r59, -1073741824;
	and.b32  	%r3381, %r402, -8388608;
	setp.eq.s32 	%p176, %r3381, 0;
	@%p176 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2549.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2549
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r403, %r3381, 192937984;
	add.s32 	%r404, %r3380, %r403;
	mov.b32 	%f561, %r404;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3381, %r3381, %r403;
	mov.b32 	%r3380, %f729;
	setp.ne.s32 	%p177, %r3381, 0;
	setp.ne.s32 	%p178, %r3380, 0;
	and.pred  	%p179, %p177, %p178;
	@%p179 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2551
	setp.gt.u32 	%p180, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p180;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2528
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p171, %r58, 1073741824;
	@%p171 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p172, %r58, -2147483647;
	@%p172 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p175, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p175;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p173, %f97, 0f40800000;
	@%p173 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2532
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p174, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p174;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2535
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2554
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p181, %f570, 0f7F800000;
	@%p181 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r405, %f730;
	or.b32  	%r406, %r25, %r405;
	mov.b32 	%f730, %r406;
$L__BB0_103:                            // %__nv_fmodf.exit2555
	@%p88 bra 	$L__BB0_115;
// %bb.104:
	@%p302 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r421, %r69, 8388607;
	or.b32  	%r3382, %r421, 1065353216;
	mov.b32 	%f733, %r3382;
	add.s32 	%r422, %r69, -1073741824;
	and.b32  	%r3383, %r422, -8388608;
	setp.eq.s32 	%p196, %r3383, 0;
	@%p196 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2580.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2580
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r423, %r3383, 192937984;
	add.s32 	%r424, %r3382, %r423;
	mov.b32 	%f613, %r424;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3383, %r3383, %r423;
	mov.b32 	%r3382, %f733;
	setp.ne.s32 	%p197, %r3383, 0;
	setp.ne.s32 	%p198, %r3382, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2582
	setp.gt.u32 	%p200, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2559
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p191, %r68, 1073741824;
	@%p191 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p192, %r68, -2147483647;
	@%p192 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p195, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p195;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p193, %f112, 0f40800000;
	@%p193 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2563
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p194, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p194;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2566
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2585
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p201, %f622, 0f7F800000;
	@%p201 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r425, %f734;
	or.b32  	%r426, %r37, %r425;
	mov.b32 	%f734, %r426;
$L__BB0_117:                            // %__nv_fmodf.exit2586
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r427, %f623;
	and.b32  	%r428, %r427, -2147483648;
	or.b32  	%r429, %r428, 1056964608;
	mov.b32 	%f624, %r429;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p203, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p203;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p204, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p204;
	cvt.rzi.s32.f32 	%r430, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r431, %r430, 1;
	setp.eq.b32 	%p205, %r431, 1;
	selp.f32 	%f642, %f640, %f641, %p205;
	selp.f32 	%f643, %f641, %f640, %p205;
	and.b32  	%r432, %r430, 2;
	setp.eq.s32 	%p206, %r432, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p206;
	add.s32 	%r433, %r430, 1;
	and.b32  	%r434, %r433, 2;
	setp.eq.s32 	%p207, %r434, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p208, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p208;
	abs.f32 	%f651, %f734;
	@%p108 bra 	$L__BB0_129;
// %bb.118:
	@%p303 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r435, %r77, 8388607;
	or.b32  	%r3384, %r435, 1065353216;
	mov.b32 	%f737, %r3384;
	add.s32 	%r436, %r77, -1073741824;
	and.b32  	%r3385, %r436, -8388608;
	setp.eq.s32 	%p216, %r3385, 0;
	@%p216 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2611.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2611
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r437, %r3385, 192937984;
	add.s32 	%r438, %r3384, %r437;
	mov.b32 	%f663, %r438;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3385, %r3385, %r437;
	mov.b32 	%r3384, %f737;
	setp.ne.s32 	%p217, %r3385, 0;
	setp.ne.s32 	%p218, %r3384, 0;
	and.pred  	%p219, %p217, %p218;
	@%p219 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2613
	setp.gt.u32 	%p220, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p220;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2590
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p211, %r76, 1073741824;
	@%p211 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p212, %r76, -2147483647;
	@%p212 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p215, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p215;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p213, %f129, 0f40800000;
	@%p213 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2594
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p214, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p214;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2597
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2616
	selp.f32 	%f648, %f643, %f647, %p207;
	setp.gt.f32 	%p209, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p221, %f672, 0f7F800000;
	@%p221 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r439, %f738;
	or.b32  	%r440, %r46, %r439;
	mov.b32 	%f738, %r440;
$L__BB0_131:                            // %__nv_fmodf.exit2617
	selp.f32 	%f127, %f652, %f648, %p209;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r441, %f673;
	and.b32  	%r442, %r441, -2147483648;
	or.b32  	%r443, %r442, 1056964608;
	mov.b32 	%f674, %r443;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p223, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p223;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p224, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p224;
	cvt.rzi.s32.f32 	%r444, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r445, %r444, 1;
	setp.eq.b32 	%p225, %r445, 1;
	selp.f32 	%f692, %f690, %f691, %p225;
	selp.f32 	%f693, %f691, %f690, %p225;
	and.b32  	%r446, %r444, 2;
	setp.eq.s32 	%p226, %r446, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p226;
	add.s32 	%r447, %r444, 1;
	and.b32  	%r448, %r447, 2;
	setp.eq.s32 	%p227, %r448, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p227;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p228, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p228;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p229, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p229;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p128 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p230, %r3, 15;
	mov.u32 	%r171, 999999999;
	@%p230 bra 	$L__BB0_186;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r456, %r3, 4;
	and.b32  	%r457, %r456, 240;
	or.b32  	%r458, %r457, %r4;
	mul.wide.u32 	%rd76, %r458, 4;
	add.s64 	%rd77, %rd1, %rd76;
	ld.global.u32 	%r459, [%rd77];
	shl.b32 	%r460, %r459, 16;
	cvt.s32.s16 	%r86, %r459;
	shr.s32 	%r87, %r459, 16;
	or.b32  	%r461, %r460, 65535;
	setp.lt.u32 	%p231, %r461, 1114111;
	setp.lt.u32 	%p232, %r459, 1048576;
	and.pred  	%p233, %p231, %p232;
	@%p233 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_135;
$L__BB0_185:                            // %L1247
	mul.lo.s32 	%r465, %r87, 546;
	mad.lo.s32 	%r171, %r86, 33, %r465;
$L__BB0_186:                            // %pass527
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r282, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r283, %r282, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r379, %f469;
	or.b32  	%r284, %r283, 1056964608;
	mov.b32 	%r298, %f261;
	mov.b32 	%r320, %f313;
	and.b32  	%r380, %r379, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r284;
	and.b32  	%r299, %r298, -2147483648;
	and.b32  	%r321, %r320, -2147483648;
	or.b32  	%r381, %r380, 1056964608;
	mov.b32 	%r393, %f521;
	mov.b32 	%r413, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r300, %r299, 1056964608;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%f470, %r381;
	and.b32  	%r394, %r393, -2147483648;
	and.b32  	%r414, %r413, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p41, %f211, 0f4B000000;
	mov.b32 	%f262, %r300;
	mov.b32 	%f314, %r322;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r395, %r394, 1056964608;
	or.b32  	%r415, %r414, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p41;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p42, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p143, %f473, 0f4B000000;
	mov.b32 	%f522, %r395;
	mov.b32 	%f572, %r415;
	selp.f32 	%f214, %f213, %f212, %p42;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p61, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p81, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p143;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p144, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p61;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p62, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p81;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p82, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p144;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p163, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p183, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p62;
	selp.f32 	%f320, %f319, %f318, %p82;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p163;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p164, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p183;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p184, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p164;
	selp.f32 	%f578, %f577, %f576, %p184;
	cvt.rzi.s32.f32 	%r285, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r286, %r285, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r382, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p43, %r286, 1;
	cvt.rzi.s32.f32 	%r301, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r323, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r383, %r382, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p43;
	and.b32  	%r287, %r285, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r302, %r301, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r324, %r323, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p145, %r383, 1;
	cvt.rzi.s32.f32 	%r396, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r416, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p44, %r287, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r288, %r285, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p63, %r302, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p83, %r324, 1;
	selp.f32 	%f488, %f486, %f487, %p145;
	and.b32  	%r384, %r382, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r397, %r396, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r417, %r416, 1;
	selp.f32 	%f227, %f225, %f224, %p43;
	selp.f32 	%f229, %f226, %f228, %p44;
	and.b32  	%r289, %r288, 2;
	setp.eq.f32 	%p46, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p63;
	and.b32  	%r303, %r301, 2;
	selp.f32 	%f332, %f330, %f331, %p83;
	and.b32  	%r325, %r323, 2;
	setp.eq.s32 	%p146, %r384, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r385, %r382, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p165, %r397, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p185, %r417, 1;
	setp.eq.s32 	%p45, %r289, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p46;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p64, %r303, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r304, %r301, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p84, %r325, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r326, %r323, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p145;
	selp.f32 	%f491, %f488, %f490, %p146;
	and.b32  	%r386, %r385, 2;
	setp.eq.f32 	%p148, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p165;
	and.b32  	%r398, %r396, 2;
	selp.f32 	%f590, %f588, %f589, %p185;
	and.b32  	%r418, %r416, 2;
	selp.f32 	%f232, %f227, %f231, %p45;
	setp.gt.f32 	%p47, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p63;
	selp.f32 	%f283, %f280, %f282, %p64;
	and.b32  	%r305, %r304, 2;
	setp.eq.f32 	%p66, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p83;
	selp.f32 	%f335, %f332, %f334, %p84;
	and.b32  	%r327, %r326, 2;
	setp.eq.f32 	%p86, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p147, %r386, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p148;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p166, %r398, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r399, %r396, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p186, %r418, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r419, %r416, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p47;
	setp.eq.s32 	%p65, %r305, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p66;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p85, %r327, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p86;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p147;
	setp.gt.f32 	%p149, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p165;
	selp.f32 	%f543, %f540, %f542, %p166;
	and.b32  	%r400, %r399, 2;
	setp.eq.f32 	%p168, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p185;
	selp.f32 	%f593, %f590, %f592, %p186;
	and.b32  	%r420, %r419, 2;
	setp.eq.f32 	%p188, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r278, %f238;
	mov.b32 	%r281, %f235;
	selp.f32 	%f286, %f281, %f285, %p65;
	setp.gt.f32 	%p67, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p85;
	setp.gt.f32 	%p87, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p149;
	setp.eq.s32 	%p167, %r400, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p168;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p187, %r420, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p188;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r277, %r281, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p67;
	selp.f32 	%f344, %f343, %f338, %p87;
	mov.b32 	%r375, %f500;
	mov.b32 	%r378, %f497;
	selp.f32 	%f546, %f541, %f545, %p167;
	setp.gt.f32 	%p169, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p187;
	setp.gt.f32 	%p189, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r276, %r278, %r277;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r281, %r278;
	// end inline asm
	mov.b32 	%r316, %f344;
	mov.b32 	%r315, %f17;
	mov.b32 	%r319, %f341;
	mov.b32 	%r318, %f16;
	mov.b32 	%r362, %f75;
	mov.b32 	%r363, %f77;
	mov.b32 	%r365, %f76;
	mov.b32 	%r366, %f78;
	xor.b32  	%r374, %r378, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p169;
	selp.f32 	%f602, %f601, %f596, %p189;
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r316, %r315;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r318;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r361, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r373, %r375, %r374;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r375;
	// end inline asm
	mov.b32 	%r409, %f602;
	mov.b32 	%r408, %f95;
	mov.b32 	%r412, %f599;
	mov.b32 	%r411, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r407, %r409, %r408;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	mov.b32 	%r450, %f147;
	mov.b32 	%r451, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r449, %r451, %r450;
	// end inline asm
	mov.b32 	%r453, %f148;
	mov.b32 	%r454, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r452, %r454, %r453;
	// end inline asm
	shl.b32 	%r467, %r3, 6;
	and.b32  	%r468, %r467, 192;
	shr.u32 	%r469, %r3, 3;
	bfe.u32 	%r470, %r3, 3, 1;
	shl.b32 	%r471, %r4, 1;
	and.b32  	%r472, %r471, 14;
	or.b32  	%r473, %r470, %r472;
	and.b32  	%r474, %r469, 2;
	and.b32  	%r475, %r147, 1;
	or.b32  	%r476, %r474, %r475;
	shl.b32 	%r477, %r476, 4;
	or.b32  	%r478, %r468, %r2;
	or.b32  	%r479, %r478, %r473;
	or.b32  	%r480, %r479, %r477;
	mul.wide.u32 	%rd83, %r480, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.u32 	%r172, [%rd84];
	ld.global.u32 	%r173, [%rd84+1024];
	shl.b32 	%r481, %r246, 8;
	shl.b32 	%r482, %r250, 7;
	add.s32 	%r174, %r482, %r481;
	shl.b32 	%r483, %r3, 2;
	shl.b32 	%r484, %r1, 7;
	or.b32  	%r175, %r483, %r484;
	and.b32  	%r176, %r3, 16;
	shr.u32 	%r485, %r3, 4;
	and.b32  	%r486, %r159, 30;
	or.b32  	%r487, %r486, %r485;
	mul.lo.s32 	%r488, %r487, 257;
	shr.u32 	%r489, %r4, 3;
	and.b32  	%r490, %r5, 224;
	mad.lo.s32 	%r491, %r489, 257, %r490;
	or.b32  	%r492, %r489, 2;
	mad.lo.s32 	%r493, %r492, 257, %r490;
	or.b32  	%r494, %r489, 4;
	mad.lo.s32 	%r495, %r494, 257, %r490;
	or.b32  	%r496, %r489, 6;
	mad.lo.s32 	%r497, %r496, 257, %r490;
	or.b32  	%r498, %r489, 8;
	mad.lo.s32 	%r499, %r498, 257, %r490;
	or.b32  	%r500, %r489, 10;
	mad.lo.s32 	%r501, %r500, 257, %r490;
	or.b32  	%r502, %r489, 12;
	mad.lo.s32 	%r503, %r502, 257, %r490;
	or.b32  	%r504, %r489, 14;
	mad.lo.s32 	%r505, %r504, 257, %r490;
	or.b32  	%r506, %r489, 16;
	mad.lo.s32 	%r507, %r506, 257, %r490;
	or.b32  	%r508, %r489, 18;
	mad.lo.s32 	%r509, %r508, 257, %r490;
	or.b32  	%r510, %r489, 20;
	mad.lo.s32 	%r511, %r510, 257, %r490;
	or.b32  	%r512, %r489, 22;
	mad.lo.s32 	%r513, %r512, 257, %r490;
	or.b32  	%r514, %r489, 24;
	mad.lo.s32 	%r515, %r514, 257, %r490;
	or.b32  	%r516, %r489, 26;
	mad.lo.s32 	%r517, %r516, 257, %r490;
	or.b32  	%r518, %r489, 28;
	mad.lo.s32 	%r519, %r518, 257, %r490;
	or.b32  	%r520, %r489, 30;
	mad.lo.s32 	%r521, %r520, 257, %r490;
	mul.lo.s32 	%r522, %r146, 2184;
	mad.lo.s32 	%r523, %r473, 33, %r522;
	mad.lo.s32 	%r524, %r476, 546, %r523;
	setp.lt.u32 	%p235, %r3, 4;
	setp.eq.s32 	%p236, %r147, 4;
	setp.eq.s32 	%p237, %r147, 5;
	selp.b32 	%r525, 0, 1032, %p128;
	or.b32  	%r526, %r472, %r485;
	and.b32  	%r527, %r3, 1;
	neg.s32 	%r528, %r527;
	setp.eq.b32 	%p238, %r527, 1;
	and.b32  	%r529, %r528, 2064;
	bfe.s32 	%r530, %r3, 3, 1;
	and.b32  	%r531, %r3, 8;
	setp.eq.s32 	%p239, %r531, 0;
	and.b32  	%r532, %r530, 258;
	bfe.s32 	%r533, %r3, 2, 1;
	and.b32  	%r534, %r3, 4;
	setp.eq.s32 	%p240, %r534, 0;
	and.b32  	%r535, %r533, 516;
	add.s32 	%r536, %r526, %r525;
	add.s32 	%r537, %r536, %r529;
	add.s32 	%r538, %r537, %r532;
	add.s32 	%r539, %r538, %r535;
	bfe.s32 	%r540, %r4, 1, 1;
	and.b32  	%r541, %r540, 1032;
	and.b32  	%r542, %r530, 4144;
	and.b32  	%r543, %r4, 1;
	neg.s32 	%r544, %r543;
	setp.eq.b32 	%p241, %r543, 1;
	and.b32  	%r545, %r544, 2064;
	and.b32  	%r546, %r483, 12;
	mul.lo.s32 	%r547, %r489, 258;
	bfe.s32 	%r548, %r4, 2, 1;
	and.b32  	%r549, %r4, 4;
	setp.eq.s32 	%p242, %r549, 0;
	and.b32  	%r550, %r548, 516;
	or.b32  	%r551, %r541, %r476;
	add.s32 	%r552, %r547, %r546;
	add.s32 	%r553, %r552, %r542;
	add.s32 	%r554, %r553, %r545;
	add.s32 	%r555, %r554, %r550;
	add.s32 	%r556, %r555, %r551;
	mul.wide.u32 	%rd85, %r556, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd7, %rd86, %rd85;
	cvt.u64.u32 	%rd87, %r551;
	selp.b64 	%rd88, 0, 516, %p242;
	selp.b64 	%rd89, 2064, 0, %p241;
	selp.b64 	%rd90, 0, 4144, %p239;
	cvt.u64.u32 	%rd91, %r547;
	cvt.u64.u32 	%rd92, %r546;
	add.s64 	%rd93, %rd92, %rd91;
	add.s64 	%rd94, %rd93, %rd90;
	add.s64 	%rd95, %rd94, %rd89;
	add.s64 	%rd96, %rd95, %rd88;
	add.s64 	%rd97, %rd96, %rd87;
	shl.b64 	%rd98, %rd97, 2;
	add.s64 	%rd8, %rd86, %rd98;
	add.s32 	%r557, %r552, %r476;
	add.s32 	%r558, %r557, %r541;
	add.s32 	%r559, %r558, %r542;
	add.s32 	%r560, %r559, %r545;
	add.s32 	%r561, %r560, %r550;
	shl.b32 	%r562, %r248, 20;
	shl.b32 	%r563, %r252, 9;
	add.s32 	%r564, %r563, %r562;
	or.b32  	%r565, %r176, %r5;
	and.b32  	%r566, %r3, 15;
	or.b32  	%r567, %r565, %r566;
	or.b32  	%r177, %r567, %r2;
	cvt.s64.s32 	%rd9, %r564;
	add.s32 	%r568, %r4, %r488;
	mul.wide.u32 	%rd99, %r568, 4;
	add.s64 	%rd10, %rd86, %rd99;
	cvt.u64.u32 	%rd100, %r4;
	cvt.u64.u32 	%rd11, %r488;
	add.s64 	%rd101, %rd11, %rd100;
	shl.b64 	%rd102, %rd101, 2;
	add.s64 	%rd12, %rd86, %rd102;
	add.s32 	%r569, %r491, %r3;
	mul.wide.u32 	%rd103, %r569, 4;
	add.s64 	%rd13, %rd86, %rd103;
	add.s32 	%r570, %r493, %r3;
	mul.wide.u32 	%rd104, %r570, 4;
	add.s64 	%rd14, %rd86, %rd104;
	add.s32 	%r571, %r495, %r3;
	mul.wide.u32 	%rd105, %r571, 4;
	add.s64 	%rd15, %rd86, %rd105;
	add.s32 	%r572, %r497, %r3;
	mul.wide.u32 	%rd106, %r572, 4;
	add.s64 	%rd16, %rd86, %rd106;
	add.s32 	%r573, %r499, %r3;
	mul.wide.u32 	%rd107, %r573, 4;
	add.s64 	%rd17, %rd86, %rd107;
	add.s32 	%r574, %r501, %r3;
	mul.wide.u32 	%rd108, %r574, 4;
	add.s64 	%rd18, %rd86, %rd108;
	add.s32 	%r575, %r503, %r3;
	mul.wide.u32 	%rd109, %r575, 4;
	add.s64 	%rd19, %rd86, %rd109;
	add.s32 	%r576, %r505, %r3;
	mul.wide.u32 	%rd110, %r576, 4;
	add.s64 	%rd20, %rd86, %rd110;
	add.s32 	%r577, %r507, %r3;
	mul.wide.u32 	%rd111, %r577, 4;
	add.s64 	%rd21, %rd86, %rd111;
	add.s32 	%r578, %r509, %r3;
	mul.wide.u32 	%rd112, %r578, 4;
	add.s64 	%rd22, %rd86, %rd112;
	add.s32 	%r579, %r511, %r3;
	mul.wide.u32 	%rd113, %r579, 4;
	add.s64 	%rd23, %rd86, %rd113;
	add.s32 	%r580, %r513, %r3;
	mul.wide.u32 	%rd114, %r580, 4;
	add.s64 	%rd24, %rd86, %rd114;
	add.s32 	%r581, %r515, %r3;
	mul.wide.u32 	%rd115, %r581, 4;
	add.s64 	%rd25, %rd86, %rd115;
	add.s32 	%r582, %r517, %r3;
	mul.wide.u32 	%rd116, %r582, 4;
	add.s64 	%rd26, %rd86, %rd116;
	add.s32 	%r583, %r519, %r3;
	mul.wide.u32 	%rd117, %r583, 4;
	add.s64 	%rd27, %rd86, %rd117;
	add.s32 	%r584, %r521, %r3;
	mul.wide.u32 	%rd118, %r584, 4;
	add.s64 	%rd28, %rd86, %rd118;
	add.s32 	%r585, %r524, %r489;
	mul.wide.u32 	%rd119, %r585, 4;
	add.s64 	%rd29, %rd86, %rd119;
	add.s32 	%r586, %r524, %r492;
	mul.wide.u32 	%rd120, %r586, 4;
	add.s64 	%rd30, %rd86, %rd120;
	add.s32 	%r587, %r524, %r494;
	mul.wide.u32 	%rd121, %r587, 4;
	add.s64 	%rd31, %rd86, %rd121;
	add.s32 	%r588, %r524, %r496;
	mul.wide.u32 	%rd122, %r588, 4;
	add.s64 	%rd32, %rd86, %rd122;
	add.s32 	%r589, %r524, %r498;
	mul.wide.u32 	%rd123, %r589, 4;
	add.s64 	%rd33, %rd86, %rd123;
	add.s32 	%r590, %r524, %r500;
	mul.wide.u32 	%rd124, %r590, 4;
	add.s64 	%rd34, %rd86, %rd124;
	add.s32 	%r591, %r524, %r502;
	mul.wide.u32 	%rd125, %r591, 4;
	add.s64 	%rd35, %rd86, %rd125;
	add.s32 	%r592, %r524, %r504;
	mul.wide.u32 	%rd126, %r592, 4;
	add.s64 	%rd36, %rd86, %rd126;
	add.s32 	%r593, %r524, %r506;
	mul.wide.u32 	%rd127, %r593, 4;
	add.s64 	%rd37, %rd86, %rd127;
	add.s32 	%r594, %r524, %r508;
	mul.wide.u32 	%rd128, %r594, 4;
	add.s64 	%rd38, %rd86, %rd128;
	add.s32 	%r595, %r524, %r510;
	mul.wide.u32 	%rd129, %r595, 4;
	add.s64 	%rd39, %rd86, %rd129;
	add.s32 	%r596, %r524, %r512;
	mul.wide.u32 	%rd130, %r596, 4;
	add.s64 	%rd40, %rd86, %rd130;
	add.s32 	%r597, %r524, %r514;
	mul.wide.u32 	%rd131, %r597, 4;
	add.s64 	%rd41, %rd86, %rd131;
	add.s32 	%r598, %r524, %r516;
	mul.wide.u32 	%rd132, %r598, 4;
	add.s64 	%rd42, %rd86, %rd132;
	add.s32 	%r599, %r524, %r518;
	mul.wide.u32 	%rd133, %r599, 4;
	add.s64 	%rd43, %rd86, %rd133;
	add.s32 	%r600, %r524, %r520;
	mul.wide.u32 	%rd134, %r600, 4;
	add.s64 	%rd44, %rd86, %rd134;
	add.s32 	%r601, %r147, -1;
	setp.lt.u32 	%p243, %r601, 3;
	or.pred  	%p244, %p235, %p243;
	or.pred  	%p245, %p244, %p236;
	and.b32  	%r602, %r3, 24;
	setp.eq.s32 	%p246, %r602, 24;
	or.pred  	%p247, %p237, %p246;
	selp.b32 	%r178, 1145324612, -286331154, %p244;
	or.pred  	%p1, %p245, %p247;
	shl.b32 	%r603, %r489, 5;
	add.s32 	%r604, %r539, %r603;
	mul.wide.u32 	%rd135, %r604, 4;
	add.s64 	%rd45, %rd86, %rd135;
	cvt.u64.u32 	%rd136, %r603;
	selp.b64 	%rd137, 0, 516, %p240;
	selp.b64 	%rd138, 0, 258, %p239;
	selp.b64 	%rd139, 2064, 0, %p238;
	cvt.u64.u32 	%rd140, %r526;
	selp.b64 	%rd141, 0, 1032, %p128;
	add.s64 	%rd142, %rd141, %rd140;
	add.s64 	%rd143, %rd142, %rd139;
	add.s64 	%rd144, %rd143, %rd138;
	add.s64 	%rd145, %rd144, %rd137;
	add.s64 	%rd146, %rd145, %rd136;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd46, %rd86, %rd147;
	or.b32  	%r605, %r603, 64;
	add.s32 	%r606, %r539, %r605;
	mul.wide.u32 	%rd148, %r606, 4;
	add.s64 	%rd47, %rd86, %rd148;
	cvt.u64.u32 	%rd149, %r605;
	add.s64 	%rd150, %rd145, %rd149;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd48, %rd86, %rd151;
	or.b32  	%r607, %r603, 128;
	add.s32 	%r608, %r539, %r607;
	mul.wide.u32 	%rd152, %r608, 4;
	add.s64 	%rd49, %rd86, %rd152;
	cvt.u64.u32 	%rd153, %r607;
	add.s64 	%rd154, %rd145, %rd153;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd50, %rd86, %rd155;
	or.b32  	%r609, %r603, 192;
	add.s32 	%r610, %r539, %r609;
	mul.wide.u32 	%rd156, %r610, 4;
	add.s64 	%rd51, %rd86, %rd156;
	cvt.u64.u32 	%rd157, %r609;
	add.s64 	%rd158, %rd145, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd52, %rd86, %rd159;
	add.s32 	%r611, %r561, 32;
	mul.wide.u32 	%rd160, %r611, 4;
	add.s64 	%rd53, %rd86, %rd160;
	add.s32 	%r612, %r561, 48;
	mul.wide.u32 	%rd161, %r612, 4;
	add.s64 	%rd54, %rd86, %rd161;
	add.s32 	%r613, %r561, 64;
	mul.wide.u32 	%rd162, %r613, 4;
	add.s64 	%rd55, %rd86, %rd162;
	add.s32 	%r614, %r561, 80;
	mul.wide.u32 	%rd163, %r614, 4;
	add.s64 	%rd56, %rd86, %rd163;
	add.s32 	%r615, %r561, 96;
	mul.wide.u32 	%rd164, %r615, 4;
	add.s64 	%rd57, %rd86, %rd164;
	add.s32 	%r616, %r561, 112;
	mul.wide.u32 	%rd165, %r616, 4;
	add.s64 	%rd58, %rd86, %rd165;
	add.s32 	%r617, %r561, 128;
	mul.wide.u32 	%rd166, %r617, 4;
	add.s64 	%rd59, %rd86, %rd166;
	add.s32 	%r618, %r561, 144;
	mul.wide.u32 	%rd167, %r618, 4;
	add.s64 	%rd60, %rd86, %rd167;
	add.s32 	%r619, %r561, 160;
	mul.wide.u32 	%rd168, %r619, 4;
	add.s64 	%rd61, %rd86, %rd168;
	add.s32 	%r620, %r561, 176;
	mul.wide.u32 	%rd169, %r620, 4;
	add.s64 	%rd62, %rd86, %rd169;
	add.s32 	%r621, %r561, 192;
	mul.wide.u32 	%rd170, %r621, 4;
	add.s64 	%rd63, %rd86, %rd170;
	add.s32 	%r622, %r561, 208;
	mul.wide.u32 	%rd171, %r622, 4;
	add.s64 	%rd64, %rd86, %rd171;
	add.s32 	%r623, %r561, 224;
	mul.wide.u32 	%rd172, %r623, 4;
	add.s64 	%rd65, %rd86, %rd172;
	add.s32 	%r624, %r561, 240;
	mul.wide.u32 	%rd173, %r624, 4;
	add.s64 	%rd66, %rd86, %rd173;
	mov.u32 	%r89, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3398, %r89;
	mov.u32 	%r3399, %r89;
	mov.u32 	%r3400, %r89;
	bra.uni 	$L__BB0_187;
$L__BB0_158:                            // %L46133
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r145, %r89, 64;
	setp.ne.s32 	%p298, %r89, 32704;
	mov.u32 	%r89, %r145;
	@%p298 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_159;
$L__BB0_187:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_205 Depth 2
                                        //     Child Loop BB0_155 Depth 2
	add.s32 	%r625, %r89, %r246;
	setp.lt.s32 	%p248, %r625, %r247;
	@%p248 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_159;
$L__BB0_188:                            // %pass780
                                        //   in Loop: Header=BB0_187 Depth=1
	cvt.u32.u64 	%r818, %rd11;
	setp.eq.s32 	%p249, %r176, 0;
	or.b32  	%r819, %r89, %r4;
	shl.b32 	%r820, %r819, 8;
	and.b32  	%r821, %r820, 8376064;
	or.b32  	%r822, %r821, %r175;
	add.s32 	%r823, %r174, %r822;
	shr.s32 	%r824, %r823, 31;
	shr.u32 	%r825, %r824, 9;
	add.s32 	%r826, %r823, %r825;
	shr.s32 	%r827, %r826, 23;
	setp.lt.s32 	%p250, %r823, 0;
	and.b32  	%r828, %r826, -8388608;
	setp.ne.s32 	%p251, %r828, %r823;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r829, 1, 0, %p252;
	sub.s32 	%r830, %r829, %r827;
	shl.b32 	%r831, %r830, 23;
	add.s32 	%r832, %r831, %r823;
	mul.wide.s32 	%rd174, %r832, 4;
	add.s64 	%rd175, %rd3, %rd174;
	ld.global.v4.u32 	{%r833, %r834, %r835, %r836}, [%rd175];
	or.b32  	%r837, %r819, 16;
	shl.b32 	%r838, %r837, 8;
	and.b32  	%r839, %r838, 8380160;
	or.b32  	%r840, %r839, %r175;
	add.s32 	%r841, %r174, %r840;
	shr.s32 	%r842, %r841, 31;
	shr.u32 	%r843, %r842, 9;
	add.s32 	%r844, %r841, %r843;
	shr.s32 	%r845, %r844, 23;
	setp.lt.s32 	%p253, %r841, 0;
	and.b32  	%r846, %r844, -8388608;
	setp.ne.s32 	%p254, %r846, %r841;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r847, 1, 0, %p255;
	sub.s32 	%r848, %r847, %r845;
	shl.b32 	%r849, %r848, 23;
	add.s32 	%r850, %r849, %r841;
	mul.wide.s32 	%rd176, %r850, 4;
	add.s64 	%rd177, %rd3, %rd176;
	ld.global.v4.u32 	{%r851, %r852, %r853, %r854}, [%rd177];
	and.b32  	%r855, %r89, 32704;
	or.b32  	%r856, %r4, %r855;
	shl.b32 	%r857, %r856, 8;
	or.b32  	%r858, %r857, %r175;
	or.b32  	%r859, %r858, 8192;
	add.s32 	%r860, %r174, %r859;
	shr.s32 	%r861, %r860, 31;
	shr.u32 	%r862, %r861, 9;
	add.s32 	%r863, %r860, %r862;
	shr.s32 	%r864, %r863, 23;
	setp.lt.s32 	%p256, %r860, 0;
	and.b32  	%r865, %r863, -8388608;
	setp.ne.s32 	%p257, %r865, %r860;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r866, 1, 0, %p258;
	sub.s32 	%r867, %r866, %r864;
	shl.b32 	%r868, %r867, 23;
	add.s32 	%r869, %r868, %r860;
	mul.wide.s32 	%rd178, %r869, 4;
	add.s64 	%rd179, %rd3, %rd178;
	ld.global.v4.u32 	{%r870, %r871, %r872, %r873}, [%rd179];
	or.b32  	%r874, %r858, 12288;
	add.s32 	%r875, %r174, %r874;
	shr.s32 	%r876, %r875, 31;
	shr.u32 	%r877, %r876, 9;
	add.s32 	%r878, %r875, %r877;
	shr.s32 	%r879, %r878, 23;
	setp.lt.s32 	%p259, %r875, 0;
	and.b32  	%r880, %r878, -8388608;
	setp.ne.s32 	%p260, %r880, %r875;
	and.pred  	%p261, %p259, %p260;
	selp.u32 	%r881, 1, 0, %p261;
	sub.s32 	%r882, %r881, %r879;
	shl.b32 	%r883, %r882, 23;
	add.s32 	%r884, %r883, %r875;
	mul.wide.s32 	%rd180, %r884, 4;
	add.s64 	%rd181, %rd3, %rd180;
	ld.global.v4.u32 	{%r885, %r886, %r887, %r888}, [%rd181];
	selp.b32 	%r889, %r835, %r833, %p249;
	shfl.sync.bfly.b32	%r890, %r889, 16, 31, -1;
	selp.b32 	%r628, %r833, %r890, %p249;
	selp.b32 	%r633, %r890, %r835, %p249;
	selp.b32 	%r891, %r836, %r834, %p249;
	shfl.sync.bfly.b32	%r892, %r891, 16, 31, -1;
	selp.b32 	%r636, %r834, %r892, %p249;
	selp.b32 	%r641, %r892, %r836, %p249;
	selp.b32 	%r893, %r853, %r851, %p249;
	shfl.sync.bfly.b32	%r894, %r893, 16, 31, -1;
	selp.b32 	%r644, %r851, %r894, %p249;
	selp.b32 	%r649, %r894, %r853, %p249;
	selp.b32 	%r895, %r854, %r852, %p249;
	shfl.sync.bfly.b32	%r896, %r895, 16, 31, -1;
	selp.b32 	%r652, %r852, %r896, %p249;
	selp.b32 	%r657, %r896, %r854, %p249;
	selp.b32 	%r897, %r872, %r870, %p249;
	shfl.sync.bfly.b32	%r898, %r897, 16, 31, -1;
	selp.b32 	%r660, %r870, %r898, %p249;
	selp.b32 	%r665, %r898, %r872, %p249;
	selp.b32 	%r899, %r873, %r871, %p249;
	shfl.sync.bfly.b32	%r900, %r899, 16, 31, -1;
	selp.b32 	%r668, %r871, %r900, %p249;
	selp.b32 	%r673, %r900, %r873, %p249;
	selp.b32 	%r901, %r887, %r885, %p249;
	shfl.sync.bfly.b32	%r902, %r901, 16, 31, -1;
	selp.b32 	%r676, %r885, %r902, %p249;
	selp.b32 	%r681, %r902, %r887, %p249;
	selp.b32 	%r903, %r888, %r886, %p249;
	shfl.sync.bfly.b32	%r904, %r903, 16, 31, -1;
	selp.b32 	%r684, %r886, %r904, %p249;
	selp.b32 	%r689, %r904, %r888, %p249;
	shl.b32 	%r629, %r633, 4;
	mov.u32 	%r627, 252645135;
	// begin inline asm
	lop3.b32 %r691, %r627, %r628, %r629, 202;
	// end inline asm
	shr.u32 	%r632, %r628, 4;
	// begin inline asm
	lop3.b32 %r707, %r627, %r632, %r633, 202;
	// end inline asm
	shl.b32 	%r637, %r641, 4;
	// begin inline asm
	lop3.b32 %r699, %r627, %r636, %r637, 202;
	// end inline asm
	shr.u32 	%r640, %r636, 4;
	// begin inline asm
	lop3.b32 %r715, %r627, %r640, %r641, 202;
	// end inline asm
	shl.b32 	%r645, %r649, 4;
	// begin inline asm
	lop3.b32 %r723, %r627, %r644, %r645, 202;
	// end inline asm
	shr.u32 	%r648, %r644, 4;
	// begin inline asm
	lop3.b32 %r739, %r627, %r648, %r649, 202;
	// end inline asm
	shl.b32 	%r653, %r657, 4;
	// begin inline asm
	lop3.b32 %r731, %r627, %r652, %r653, 202;
	// end inline asm
	shr.u32 	%r656, %r652, 4;
	// begin inline asm
	lop3.b32 %r747, %r627, %r656, %r657, 202;
	// end inline asm
	shl.b32 	%r661, %r665, 4;
	// begin inline asm
	lop3.b32 %r692, %r627, %r660, %r661, 202;
	// end inline asm
	shr.u32 	%r664, %r660, 4;
	// begin inline asm
	lop3.b32 %r708, %r627, %r664, %r665, 202;
	// end inline asm
	shl.b32 	%r669, %r673, 4;
	// begin inline asm
	lop3.b32 %r700, %r627, %r668, %r669, 202;
	// end inline asm
	shr.u32 	%r672, %r668, 4;
	// begin inline asm
	lop3.b32 %r716, %r627, %r672, %r673, 202;
	// end inline asm
	shl.b32 	%r677, %r681, 4;
	// begin inline asm
	lop3.b32 %r724, %r627, %r676, %r677, 202;
	// end inline asm
	shr.u32 	%r680, %r676, 4;
	// begin inline asm
	lop3.b32 %r740, %r627, %r680, %r681, 202;
	// end inline asm
	shl.b32 	%r685, %r689, 4;
	// begin inline asm
	lop3.b32 %r732, %r627, %r684, %r685, 202;
	// end inline asm
	shr.u32 	%r688, %r684, 4;
	// begin inline asm
	lop3.b32 %r748, %r627, %r688, %r689, 202;
	// end inline asm
	mov.u32 	%r693, 25152;
	// begin inline asm
	prmt.b32 %r755, %r691, %r692, %r693;
	// end inline asm
	mov.u32 	%r697, 29521;
	// begin inline asm
	prmt.b32 %r787, %r691, %r692, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r763, %r699, %r700, %r693;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r699, %r700, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r756, %r707, %r708, %r693;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r707, %r708, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r715, %r716, %r693;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r715, %r716, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r771, %r723, %r724, %r693;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r723, %r724, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r731, %r732, %r693;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r731, %r732, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r772, %r739, %r740, %r693;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r739, %r740, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r747, %r748, %r693;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r747, %r748, %r697;
	// end inline asm
	mov.u32 	%r813, 21520;
	// begin inline asm
	prmt.b32 %r754, %r755, %r756, %r813;
	// end inline asm
	mov.u32 	%r817, 30258;
	// begin inline asm
	prmt.b32 %r758, %r755, %r756, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r762, %r763, %r764, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r766, %r763, %r764, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r770, %r771, %r772, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r774, %r771, %r772, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r778, %r779, %r780, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r782, %r779, %r780, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r786, %r787, %r788, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r787, %r788, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r794, %r795, %r796, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r798, %r795, %r796, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r802, %r803, %r804, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r806, %r803, %r804, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r810, %r811, %r812, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r814, %r811, %r812, %r817;
	// end inline asm
	st.shared.u32 	[%rd10], %r754;
	st.shared.u32 	[%rd12+512], %r762;
	st.shared.u32 	[%rd12+256], %r758;
	st.shared.u32 	[%rd12+768], %r766;
	and.b32  	%r905, %r837, 31;
	add.s32 	%r906, %r905, %r818;
	mul.wide.u32 	%rd182, %r906, 4;
	add.s64 	%rd184, %rd86, %rd182;
	st.shared.u32 	[%rd184], %r770;
	cvt.u64.u32 	%rd185, %r905;
	add.s64 	%rd186, %rd11, %rd185;
	shl.b64 	%rd187, %rd186, 2;
	add.s64 	%rd188, %rd86, %rd187;
	st.shared.u32 	[%rd188+512], %r778;
	st.shared.u32 	[%rd188+256], %r774;
	st.shared.u32 	[%rd188+768], %r782;
	st.shared.u32 	[%rd12+128], %r786;
	st.shared.u32 	[%rd12+640], %r794;
	st.shared.u32 	[%rd12+384], %r790;
	st.shared.u32 	[%rd12+896], %r798;
	st.shared.u32 	[%rd188+128], %r802;
	st.shared.u32 	[%rd188+640], %r810;
	st.shared.u32 	[%rd188+384], %r806;
	st.shared.u32 	[%rd188+896], %r814;
	bar.sync 	0;
	ld.shared.u32 	%r179, [%rd13];
	ld.shared.u32 	%r180, [%rd14];
	ld.shared.u32 	%r181, [%rd15];
	ld.shared.u32 	%r182, [%rd16];
	ld.shared.u32 	%r183, [%rd17];
	ld.shared.u32 	%r184, [%rd18];
	ld.shared.u32 	%r185, [%rd19];
	ld.shared.u32 	%r186, [%rd20];
	ld.shared.u32 	%r187, [%rd21];
	ld.shared.u32 	%r188, [%rd22];
	ld.shared.u32 	%r189, [%rd23];
	ld.shared.u32 	%r190, [%rd24];
	ld.shared.u32 	%r191, [%rd25];
	ld.shared.u32 	%r192, [%rd26];
	ld.shared.u32 	%r193, [%rd27];
	ld.shared.u32 	%r194, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r195, %r171, 0, 31, -1;
	shfl.sync.idx.b32	%r196, %r171, 1, 31, -1;
	shfl.sync.idx.b32	%r197, %r171, 2, 31, -1;
	shfl.sync.idx.b32	%r198, %r171, 3, 31, -1;
	shfl.sync.idx.b32	%r199, %r171, 4, 31, -1;
	shfl.sync.idx.b32	%r200, %r171, 5, 31, -1;
	shfl.sync.idx.b32	%r201, %r171, 6, 31, -1;
	shfl.sync.idx.b32	%r202, %r171, 7, 31, -1;
	shfl.sync.idx.b32	%r203, %r171, 8, 31, -1;
	shfl.sync.idx.b32	%r204, %r171, 9, 31, -1;
	shfl.sync.idx.b32	%r205, %r171, 10, 31, -1;
	shfl.sync.idx.b32	%r206, %r171, 11, 31, -1;
	shfl.sync.idx.b32	%r207, %r171, 12, 31, -1;
	shfl.sync.idx.b32	%r208, %r171, 13, 31, -1;
	shfl.sync.idx.b32	%r209, %r171, 14, 31, -1;
	shfl.sync.idx.b32	%r210, %r171, 15, 31, -1;
	setp.eq.s32 	%p262, %r195, 999999999;
	@%p262 bra 	$L__BB0_136;
// %bb.189:                             // %pass3077
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r907, %r195, %r3;
	mul.wide.s32 	%rd189, %r907, 4;
	add.s64 	%rd191, %rd86, %rd189;
	st.shared.u32 	[%rd191], %r179;
	setp.eq.s32 	%p263, %r196, 999999999;
	@%p263 bra 	$L__BB0_137;
// %bb.190:                             // %pass3145
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r908, %r196, %r3;
	mul.wide.s32 	%rd192, %r908, 4;
	add.s64 	%rd194, %rd86, %rd192;
	st.shared.u32 	[%rd194], %r180;
	setp.eq.s32 	%p264, %r197, 999999999;
	@%p264 bra 	$L__BB0_138;
// %bb.191:                             // %pass3213
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r909, %r197, %r3;
	mul.wide.s32 	%rd195, %r909, 4;
	add.s64 	%rd197, %rd86, %rd195;
	st.shared.u32 	[%rd197], %r181;
	setp.eq.s32 	%p265, %r198, 999999999;
	@%p265 bra 	$L__BB0_139;
// %bb.192:                             // %pass3281
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r910, %r198, %r3;
	mul.wide.s32 	%rd198, %r910, 4;
	add.s64 	%rd200, %rd86, %rd198;
	st.shared.u32 	[%rd200], %r182;
	setp.eq.s32 	%p266, %r199, 999999999;
	@%p266 bra 	$L__BB0_140;
// %bb.193:                             // %pass3349
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r911, %r199, %r3;
	mul.wide.s32 	%rd201, %r911, 4;
	add.s64 	%rd203, %rd86, %rd201;
	st.shared.u32 	[%rd203], %r183;
	setp.eq.s32 	%p267, %r200, 999999999;
	@%p267 bra 	$L__BB0_141;
// %bb.194:                             // %pass3417
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r912, %r200, %r3;
	mul.wide.s32 	%rd204, %r912, 4;
	add.s64 	%rd206, %rd86, %rd204;
	st.shared.u32 	[%rd206], %r184;
	setp.eq.s32 	%p268, %r201, 999999999;
	@%p268 bra 	$L__BB0_142;
// %bb.195:                             // %pass3485
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r913, %r201, %r3;
	mul.wide.s32 	%rd207, %r913, 4;
	add.s64 	%rd209, %rd86, %rd207;
	st.shared.u32 	[%rd209], %r185;
	setp.eq.s32 	%p269, %r202, 999999999;
	@%p269 bra 	$L__BB0_143;
// %bb.196:                             // %pass3553
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r914, %r202, %r3;
	mul.wide.s32 	%rd210, %r914, 4;
	add.s64 	%rd212, %rd86, %rd210;
	st.shared.u32 	[%rd212], %r186;
	setp.eq.s32 	%p270, %r203, 999999999;
	@%p270 bra 	$L__BB0_144;
// %bb.197:                             // %pass3621
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r915, %r203, %r3;
	mul.wide.s32 	%rd213, %r915, 4;
	add.s64 	%rd215, %rd86, %rd213;
	st.shared.u32 	[%rd215], %r187;
	setp.eq.s32 	%p271, %r204, 999999999;
	@%p271 bra 	$L__BB0_145;
// %bb.198:                             // %pass3689
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r916, %r204, %r3;
	mul.wide.s32 	%rd216, %r916, 4;
	add.s64 	%rd218, %rd86, %rd216;
	st.shared.u32 	[%rd218], %r188;
	setp.eq.s32 	%p272, %r205, 999999999;
	@%p272 bra 	$L__BB0_146;
// %bb.199:                             // %pass3757
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r917, %r205, %r3;
	mul.wide.s32 	%rd219, %r917, 4;
	add.s64 	%rd221, %rd86, %rd219;
	st.shared.u32 	[%rd221], %r189;
	setp.eq.s32 	%p273, %r206, 999999999;
	@%p273 bra 	$L__BB0_147;
// %bb.200:                             // %pass3825
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r918, %r206, %r3;
	mul.wide.s32 	%rd222, %r918, 4;
	add.s64 	%rd224, %rd86, %rd222;
	st.shared.u32 	[%rd224], %r190;
	setp.eq.s32 	%p274, %r207, 999999999;
	@%p274 bra 	$L__BB0_148;
// %bb.201:                             // %pass3893
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r919, %r207, %r3;
	mul.wide.s32 	%rd225, %r919, 4;
	add.s64 	%rd227, %rd86, %rd225;
	st.shared.u32 	[%rd227], %r191;
	setp.eq.s32 	%p275, %r208, 999999999;
	@%p275 bra 	$L__BB0_149;
// %bb.202:                             // %pass3961
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r920, %r208, %r3;
	mul.wide.s32 	%rd228, %r920, 4;
	add.s64 	%rd230, %rd86, %rd228;
	st.shared.u32 	[%rd230], %r192;
	setp.eq.s32 	%p276, %r209, 999999999;
	@%p276 bra 	$L__BB0_150;
// %bb.203:                             // %pass4029
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r921, %r209, %r3;
	mul.wide.s32 	%rd231, %r921, 4;
	add.s64 	%rd233, %rd86, %rd231;
	st.shared.u32 	[%rd233], %r193;
	setp.eq.s32 	%p277, %r210, 999999999;
	@%p277 bra 	$L__BB0_151;
// %bb.204:                             // %pass4097
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r923, %r210, %r3;
	mul.wide.s32 	%rd234, %r923, 4;
	add.s64 	%rd236, %rd86, %rd234;
	st.shared.u32 	[%rd236], %r194;
	bar.sync 	0;
	ld.shared.u32 	%r211, [%rd29];
	ld.shared.u32 	%r212, [%rd30];
	ld.shared.u32 	%r213, [%rd31];
	ld.shared.u32 	%r214, [%rd32];
	ld.shared.u32 	%r215, [%rd33];
	ld.shared.u32 	%r216, [%rd34];
	ld.shared.u32 	%r217, [%rd35];
	ld.shared.u32 	%r218, [%rd36];
	ld.shared.u32 	%r219, [%rd37];
	ld.shared.u32 	%r220, [%rd38];
	ld.shared.u32 	%r221, [%rd39];
	ld.shared.u32 	%r222, [%rd40];
	ld.shared.u32 	%r223, [%rd41];
	ld.shared.u32 	%r224, [%rd42];
	ld.shared.u32 	%r225, [%rd43];
	ld.shared.u32 	%r226, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3390, 16;
	bra.uni 	$L__BB0_205;
$L__BB0_152:                            // %L21619
                                        //   in Loop: Header=BB0_205 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1472, [%rd7];
	ld.shared.u32 	%r1479, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1489, %r1486}, {%r373, %r376}, {%r1472}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1498, %r1495}, {%r373, %r376}, {%r1479}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1482, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1484, %r1482, %r1486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1487, %r407, %r1489, %r1484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1491, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1493, %r1491, %r1495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1496, %r407, %r1498, %r1493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1500, %r410, %r1489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r407, %r1486, %r1500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r410, %r1498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r407, %r1495, %r1507;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1533, %r1536}, {%r449, %r452}, {%r1487, %r1503}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1540, %r1544}, {%r449, %r452}, {%r1496, %r1510}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r1533, %r1533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r1536, %r1536, %r1532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r1540, %r1540, %r1535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1543, %r1544, %r1544, %r1539;
	// end inline asm
	mov.u32 	%r2129, 290787669;
	// begin inline asm
	fma.rn.f16x2 %r1547, %r2129, %r1543, %r3400;
	// end inline asm
	ld.shared.u32 	%r1555, [%rd53];
	ld.shared.u32 	%r1562, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1572, %r1569}, {%r373, %r376}, {%r1555}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1581, %r1578}, {%r373, %r376}, {%r1562}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1565, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1567, %r1565, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r407, %r1572, %r1567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1574, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r1574, %r1578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r407, %r1581, %r1576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1583, %r410, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1586, %r407, %r1569, %r1583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r410, %r1581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r407, %r1578, %r1590;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1616, %r1619}, {%r449, %r452}, {%r1570, %r1586}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1623, %r1627}, {%r449, %r452}, {%r1579, %r1593}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r1616, %r1616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r1619, %r1619, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r1623, %r1623, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r1627, %r1627, %r1622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r2129, %r1626, %r1547;
	// end inline asm
	ld.shared.u32 	%r1638, [%rd55];
	ld.shared.u32 	%r1645, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1655, %r1652}, {%r373, %r376}, {%r1638}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1664, %r1661}, {%r373, %r376}, {%r1645}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1648, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1650, %r1648, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r407, %r1655, %r1650;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1657, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1659, %r1657, %r1661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r407, %r1664, %r1659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1666, %r410, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1669, %r407, %r1652, %r1666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r410, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r407, %r1661, %r1673;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1699, %r1702}, {%r449, %r452}, {%r1653, %r1669}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1706, %r1710}, {%r449, %r452}, {%r1662, %r1676}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1698, %r1699, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r1702, %r1702, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r1706, %r1706, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r1710, %r1710, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1713, %r2129, %r1709, %r1630;
	// end inline asm
	ld.shared.u32 	%r1721, [%rd57];
	ld.shared.u32 	%r1728, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1738, %r1735}, {%r373, %r376}, {%r1721}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1747, %r1744}, {%r373, %r376}, {%r1728}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r407, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r1740, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r407, %r1747, %r1742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r410, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r407, %r1735, %r1749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r410, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r407, %r1744, %r1756;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1782, %r1785}, {%r449, %r452}, {%r1736, %r1752}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1789, %r1793}, {%r449, %r452}, {%r1745, %r1759}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1781, %r1782, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r1785, %r1785, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r1789, %r1789, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r1793, %r1793, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r2129, %r1792, %r1713;
	// end inline asm
	ld.shared.u32 	%r1804, [%rd59];
	ld.shared.u32 	%r1811, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1821, %r1818}, {%r373, %r376}, {%r1804}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1830, %r1827}, {%r373, %r376}, {%r1811}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1814, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1816, %r1814, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r407, %r1821, %r1816;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1823, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r1823, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r407, %r1830, %r1825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1832, %r410, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r407, %r1818, %r1832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1839, %r410, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r407, %r1827, %r1839;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1865, %r1868}, {%r449, %r452}, {%r1819, %r1835}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1872, %r1876}, {%r449, %r452}, {%r1828, %r1842}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1864, %r1865, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r1868, %r1868, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r1872, %r1872, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1875, %r1876, %r1876, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1879, %r2129, %r1875, %r1796;
	// end inline asm
	ld.shared.u32 	%r1887, [%rd61];
	ld.shared.u32 	%r1894, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1904, %r1901}, {%r373, %r376}, {%r1887}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1913, %r1910}, {%r373, %r376}, {%r1894}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1897, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r1897, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r407, %r1904, %r1899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1906, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r1906, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r407, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1915, %r410, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r407, %r1901, %r1915;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r410, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r407, %r1910, %r1922;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1948, %r1951}, {%r449, %r452}, {%r1902, %r1918}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1955, %r1959}, {%r449, %r452}, {%r1911, %r1925}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1947, %r1948, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1950, %r1951, %r1951, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r1955, %r1955, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r1959, %r1959, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r2129, %r1958, %r1879;
	// end inline asm
	ld.shared.u32 	%r1970, [%rd63];
	ld.shared.u32 	%r1977, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1987, %r1984}, {%r373, %r376}, {%r1970}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1996, %r1993}, {%r373, %r376}, {%r1977}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1980, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1982, %r1980, %r1984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r407, %r1987, %r1982;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1989, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1991, %r1989, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1994, %r407, %r1996, %r1991;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1998, %r410, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2001, %r407, %r1984, %r1998;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2005, %r410, %r1996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2008, %r407, %r1993, %r2005;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2031, %r2034}, {%r449, %r452}, {%r1985, %r2001}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2038, %r2042}, {%r449, %r452}, {%r1994, %r2008}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2030, %r2031, %r2031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2033, %r2034, %r2034, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r2038, %r2038, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r2042, %r2042, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r2129, %r2041, %r1962;
	// end inline asm
	ld.shared.u32 	%r2053, [%rd65];
	ld.shared.u32 	%r2060, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2070, %r2067}, {%r373, %r376}, {%r2053}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2079, %r2076}, {%r373, %r376}, {%r2060}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2063, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2065, %r2063, %r2067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2068, %r407, %r2070, %r2065;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2072, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2074, %r2072, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2077, %r407, %r2079, %r2074;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2081, %r410, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2084, %r407, %r2067, %r2081;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2088, %r410, %r2079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r407, %r2076, %r2088;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2114, %r2117}, {%r449, %r452}, {%r2068, %r2084}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2121, %r2125}, {%r449, %r452}, {%r2077, %r2091}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2113, %r2114, %r2114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2116, %r2117, %r2117, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2120, %r2121, %r2121, %r2116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2124, %r2125, %r2125, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r2129, %r2124, %r2045;
	// end inline asm
	add.s32 	%r3398, %r3398, 8;
	setp.eq.s32 	%p283, %r3398, 192;
	@%p283 bra 	$L__BB0_209;
$L__BB0_153:                            // %L29179
                                        //   in Loop: Header=BB0_205 Depth=2
	bar.sync 	0;
	add.s32 	%r3390, %r3390, -8;
	setp.ne.s32 	%p287, %r3390, -16;
	@%p287 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_154;
$L__BB0_205:                            // %L12262
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p278, %r3390, 16;
	selp.b32 	%r1316, %r211, 0, %p278;
	setp.eq.s32 	%p279, %r3390, 8;
	selp.b32 	%r1317, %r215, %r1316, %p279;
	setp.eq.s32 	%p280, %r3390, 0;
	selp.b32 	%r1318, %r219, %r1317, %p280;
	setp.eq.s32 	%p281, %r3390, -8;
	selp.b32 	%r1319, %r223, %r1318, %p281;
	selp.b32 	%r1320, %r212, 0, %p278;
	selp.b32 	%r1321, %r216, %r1320, %p279;
	selp.b32 	%r1322, %r220, %r1321, %p280;
	selp.b32 	%r1323, %r224, %r1322, %p281;
	selp.b32 	%r1324, %r213, 0, %p278;
	selp.b32 	%r1325, %r217, %r1324, %p279;
	selp.b32 	%r1326, %r221, %r1325, %p280;
	selp.b32 	%r1327, %r225, %r1326, %p281;
	selp.b32 	%r1328, %r214, 0, %p278;
	selp.b32 	%r1329, %r218, %r1328, %p279;
	selp.b32 	%r1330, %r222, %r1329, %p280;
	selp.b32 	%r1331, %r226, %r1330, %p281;
	// begin inline asm
	mov.b32 %r929, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r940, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r928, %r1319, -2004318072;
	mov.u32 	%r1065, 983055;
	// begin inline asm
	lop3.b32 %r926, %r1065, %r928, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	mov.u32 	%r1076, 15728880;
	// begin inline asm
	lop3.b32 %r937, %r1076, %r928, %r940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r942, %r940, %r941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r945, %r937, %r942;
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r974, %r1323, -2004318072;
	// begin inline asm
	lop3.b32 %r972, %r1065, %r974, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	lop3.b32 %r983, %r1076, %r974, %r986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r988, %r986, %r987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r991, %r983, %r988;
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1032, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1020, %r1327, -2004318072;
	// begin inline asm
	lop3.b32 %r1018, %r1065, %r1020, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1029, %r1076, %r1020, %r1032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1034, %r1032, %r1033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1037, %r1029, %r1034;
	// end inline asm
	// begin inline asm
	mov.b32 %r1067, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1078, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1066, %r1331, -2004318072;
	// begin inline asm
	lop3.b32 %r1064, %r1065, %r1066, %r1067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1069, %r1067, %r1068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1072, %r1064, %r1069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1075, %r1076, %r1066, %r1078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1079, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1080, %r1078, %r1079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1083, %r1075, %r1080;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r934;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1108, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r945;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1111, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r980;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1114, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r991;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1117, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1026;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1120, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1037;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1123, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1072;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1126, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1083;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1129, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1187, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1132, %r1133}, {%r276, %r279}, {%r1108}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1139, %r1140}, {%r276, %r279}, {%r1111}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1146, %r1147}, {%r276, %r279}, {%r1114}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1153, %r1154}, {%r276, %r279}, {%r1117}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1160, %r1161}, {%r276, %r279}, {%r1120}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1167, %r1168}, {%r276, %r279}, {%r1123}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1174, %r1175}, {%r276, %r279}, {%r1126}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1181, %r1182}, {%r276, %r279}, {%r1129}, {%r1187, %r1187};
	// end inline asm
	@%p1 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;
$L__BB0_207:                            // %pass5517
                                        //   in Loop: Header=BB0_205 Depth=2
	// begin inline asm
	neg.f16x2 %r1188, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1190, %r1188, %r1133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r314, %r1132, %r1190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1197, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r1197, %r1140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r314, %r1139, %r1199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1206, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r1206, %r1147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r314, %r1146, %r1208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1215, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r1215, %r1154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r314, %r1153, %r1217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1224, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1226, %r1224, %r1161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1229, %r314, %r1160, %r1226;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1233, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1235, %r1233, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r314, %r1167, %r1235;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1242, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1244, %r1242, %r1175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1247, %r314, %r1174, %r1244;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1251, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1253, %r1251, %r1182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1256, %r314, %r1181, %r1253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1260, %r317, %r1132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1263, %r314, %r1133, %r1260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1267, %r317, %r1139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r314, %r1140, %r1267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1274, %r317, %r1146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r314, %r1147, %r1274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1281, %r317, %r1153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1284, %r314, %r1154, %r1281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1288, %r317, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1291, %r314, %r1161, %r1288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1295, %r317, %r1167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1298, %r314, %r1168, %r1295;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1302, %r317, %r1174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1305, %r314, %r1175, %r1302;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1309, %r317, %r1181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1312, %r314, %r1182, %r1309;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1405, %r1406}, {%r361, %r364}, {%r1193, %r1263}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1413, %r1414}, {%r361, %r364}, {%r1202, %r1270}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1421, %r1422}, {%r361, %r364}, {%r1211, %r1277}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1429, %r1430}, {%r361, %r364}, {%r1220, %r1284}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1437, %r1438}, {%r361, %r364}, {%r1229, %r1291}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1445, %r1446}, {%r361, %r364}, {%r1238, %r1298}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1453, %r1454}, {%r361, %r364}, {%r1247, %r1305}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1461, %r1462}, {%r361, %r364}, {%r1256, %r1312}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r1405, %r1406, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r1405, %r1406, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r1413, %r1414, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1413, %r1414, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1421, %r1422, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1421, %r1422, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1429, %r1430, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1429, %r1430, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1437, %r1438, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1437, %r1438, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1445, %r1446, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1445, %r1446, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1453, %r1454, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1453, %r1454, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1461, %r1462, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1461, %r1462, %r817;
	// end inline asm
	st.shared.u32 	[%rd45], %r227;
	st.shared.u32 	[%rd46+16576], %r228;
	st.shared.u32 	[%rd46+64], %r229;
	st.shared.u32 	[%rd46+16640], %r230;
	st.shared.u32 	[%rd47], %r231;
	st.shared.u32 	[%rd48+16576], %r232;
	st.shared.u32 	[%rd48+64], %r233;
	st.shared.u32 	[%rd48+16640], %r234;
	st.shared.u32 	[%rd49], %r235;
	st.shared.u32 	[%rd50+16576], %r236;
	st.shared.u32 	[%rd50+64], %r237;
	st.shared.u32 	[%rd50+16640], %r238;
	st.shared.u32 	[%rd51], %r239;
	st.shared.u32 	[%rd52+16576], %r240;
	st.shared.u32 	[%rd52+64], %r241;
	st.shared.u32 	[%rd52+16640], %r242;
	@%p230 bra 	$L__BB0_152;
// %bb.208:                             // %pass7916
                                        //   in Loop: Header=BB0_205 Depth=2
	st.shared.u32 	[%rd45], %r227;
	st.shared.u32 	[%rd46+16576], %r228;
	st.shared.u32 	[%rd46+64], %r229;
	st.shared.u32 	[%rd46+16640], %r230;
	st.shared.u32 	[%rd47], %r231;
	st.shared.u32 	[%rd48+16576], %r232;
	st.shared.u32 	[%rd48+64], %r233;
	st.shared.u32 	[%rd48+16640], %r234;
	st.shared.u32 	[%rd49], %r235;
	st.shared.u32 	[%rd50+16576], %r236;
	st.shared.u32 	[%rd50+64], %r237;
	st.shared.u32 	[%rd50+16640], %r238;
	st.shared.u32 	[%rd51], %r239;
	st.shared.u32 	[%rd52+16576], %r240;
	st.shared.u32 	[%rd52+64], %r241;
	st.shared.u32 	[%rd52+16640], %r242;
	bra.uni 	$L__BB0_152;
$L__BB0_209:                            // %pass13225
                                        //   in Loop: Header=BB0_205 Depth=2
	shl.b32 	%r2133, %r3399, 20;
	or.b32  	%r2134, %r177, %r2133;
	cvt.u64.u32 	%rd239, %r2134;
	add.s64 	%rd240, %rd239, %rd9;
	shr.u64 	%rd241, %rd240, 34;
	add.s64 	%rd242, %rd240, %rd241;
	shr.s64 	%rd243, %rd242, 30;
	setp.lt.s64 	%p284, %rd240, 0;
	and.b64  	%rd244, %rd242, -1073741824;
	setp.ne.s64 	%p285, %rd244, %rd240;
	and.pred  	%p286, %p284, %p285;
	selp.u64 	%rd245, 1, 0, %p286;
	sub.s64 	%rd246, %rd245, %rd243;
	shl.b64 	%rd247, %rd246, 30;
	add.s64 	%rd248, %rd247, %rd240;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r3400;
	add.s32 	%r3399, %r3399, 1;
	mov.u32 	%r3398, 0;
	mov.u32 	%r3400, %r3398;
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L29200.preheader
                                        //   in Loop: Header=BB0_187 Depth=1
	mov.u32 	%r3397, 16;
	bra.uni 	$L__BB0_155;
$L__BB0_156:                            // %L38557
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2688, [%rd7];
	ld.shared.u32 	%r2695, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2705, %r2702}, {%r373, %r376}, {%r2688}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2714, %r2711}, {%r373, %r376}, {%r2695}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2698, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r2698, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2703, %r407, %r2705, %r2700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2707, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r2707, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r407, %r2714, %r2709;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r410, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r407, %r2702, %r2716;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2723, %r410, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2726, %r407, %r2711, %r2723;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2749, %r2752}, {%r449, %r452}, {%r2703, %r2719}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2756, %r2760}, {%r449, %r452}, {%r2712, %r2726}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2748, %r2749, %r2749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2751, %r2752, %r2752, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2755, %r2756, %r2756, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r2760, %r2760, %r2755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2763, %r2129, %r2759, %r3400;
	// end inline asm
	ld.shared.u32 	%r2771, [%rd53];
	ld.shared.u32 	%r2778, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2788, %r2785}, {%r373, %r376}, {%r2771}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2797, %r2794}, {%r373, %r376}, {%r2778}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2781, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2783, %r2781, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2786, %r407, %r2788, %r2783;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2790, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2792, %r2790, %r2794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r407, %r2797, %r2792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2799, %r410, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2802, %r407, %r2785, %r2799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2806, %r410, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2809, %r407, %r2794, %r2806;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2832, %r2835}, {%r449, %r452}, {%r2786, %r2802}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2839, %r2843}, {%r449, %r452}, {%r2795, %r2809}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2831, %r2832, %r2832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2834, %r2835, %r2835, %r2831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2838, %r2839, %r2839, %r2834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2842, %r2843, %r2843, %r2838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2846, %r2129, %r2842, %r2763;
	// end inline asm
	ld.shared.u32 	%r2854, [%rd55];
	ld.shared.u32 	%r2861, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2871, %r2868}, {%r373, %r376}, {%r2854}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2880, %r2877}, {%r373, %r376}, {%r2861}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2864, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2866, %r2864, %r2868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2869, %r407, %r2871, %r2866;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2873, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2875, %r2873, %r2877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2878, %r407, %r2880, %r2875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2882, %r410, %r2871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r407, %r2868, %r2882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2889, %r410, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2892, %r407, %r2877, %r2889;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2915, %r2918}, {%r449, %r452}, {%r2869, %r2885}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2922, %r2926}, {%r449, %r452}, {%r2878, %r2892}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2914, %r2915, %r2915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r2918, %r2918, %r2914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r2922, %r2922, %r2917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r2926, %r2926, %r2921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r2129, %r2925, %r2846;
	// end inline asm
	ld.shared.u32 	%r2937, [%rd57];
	ld.shared.u32 	%r2944, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2954, %r2951}, {%r373, %r376}, {%r2937}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2963, %r2960}, {%r373, %r376}, {%r2944}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2947, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2949, %r2947, %r2951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2952, %r407, %r2954, %r2949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2956, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2958, %r2956, %r2960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r407, %r2963, %r2958;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2965, %r410, %r2954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2968, %r407, %r2951, %r2965;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2972, %r410, %r2963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r407, %r2960, %r2972;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2998, %r3001}, {%r449, %r452}, {%r2952, %r2968}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3005, %r3009}, {%r449, %r452}, {%r2961, %r2975}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2997, %r2998, %r2998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3000, %r3001, %r3001, %r2997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r3005, %r3005, %r3000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3008, %r3009, %r3009, %r3004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3012, %r2129, %r3008, %r2929;
	// end inline asm
	ld.shared.u32 	%r3020, [%rd59];
	ld.shared.u32 	%r3027, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3037, %r3034}, {%r373, %r376}, {%r3020}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3046, %r3043}, {%r373, %r376}, {%r3027}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3030, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3032, %r3030, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r407, %r3037, %r3032;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3039, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3041, %r3039, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r407, %r3046, %r3041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3048, %r410, %r3037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r407, %r3034, %r3048;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3055, %r410, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r407, %r3043, %r3055;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3081, %r3084}, {%r449, %r452}, {%r3035, %r3051}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3088, %r3092}, {%r449, %r452}, {%r3044, %r3058}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3080, %r3081, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3083, %r3084, %r3084, %r3080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3087, %r3088, %r3088, %r3083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3091, %r3092, %r3092, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3095, %r2129, %r3091, %r3012;
	// end inline asm
	ld.shared.u32 	%r3103, [%rd61];
	ld.shared.u32 	%r3110, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3120, %r3117}, {%r373, %r376}, {%r3103}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3129, %r3126}, {%r373, %r376}, {%r3110}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3113, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3115, %r3113, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3118, %r407, %r3120, %r3115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3122, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r3122, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r407, %r3129, %r3124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r410, %r3120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r407, %r3117, %r3131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3138, %r410, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3141, %r407, %r3126, %r3138;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3164, %r3167}, {%r449, %r452}, {%r3118, %r3134}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3171, %r3175}, {%r449, %r452}, {%r3127, %r3141}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3163, %r3164, %r3164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3166, %r3167, %r3167, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3170, %r3171, %r3171, %r3166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3174, %r3175, %r3175, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3178, %r2129, %r3174, %r3095;
	// end inline asm
	ld.shared.u32 	%r3186, [%rd63];
	ld.shared.u32 	%r3193, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3203, %r3200}, {%r373, %r376}, {%r3186}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3212, %r3209}, {%r373, %r376}, {%r3193}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3196, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3198, %r3196, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3201, %r407, %r3203, %r3198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3205, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3207, %r3205, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r407, %r3212, %r3207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3214, %r410, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3217, %r407, %r3200, %r3214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3221, %r410, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r407, %r3209, %r3221;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3247, %r3250}, {%r449, %r452}, {%r3201, %r3217}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3254, %r3258}, {%r449, %r452}, {%r3210, %r3224}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3246, %r3247, %r3247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3249, %r3250, %r3250, %r3246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3253, %r3254, %r3254, %r3249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3257, %r3258, %r3258, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3261, %r2129, %r3257, %r3178;
	// end inline asm
	ld.shared.u32 	%r3269, [%rd65];
	ld.shared.u32 	%r3276, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3286, %r3283}, {%r373, %r376}, {%r3269}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3295, %r3292}, {%r373, %r376}, {%r3276}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3279, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3281, %r3279, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3284, %r407, %r3286, %r3281;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3288, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3290, %r3288, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r407, %r3295, %r3290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r410, %r3286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r407, %r3283, %r3297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r410, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r407, %r3292, %r3304;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3330, %r3333}, {%r449, %r452}, {%r3284, %r3300}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3337, %r3341}, {%r449, %r452}, {%r3293, %r3307}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3329, %r3330, %r3330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3332, %r3333, %r3333, %r3329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3336, %r3337, %r3337, %r3332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3340, %r3341, %r3341, %r3336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r2129, %r3340, %r3261;
	// end inline asm
	add.s32 	%r3398, %r3398, 8;
	setp.eq.s32 	%p293, %r3398, 192;
	@%p293 bra 	$L__BB0_211;
$L__BB0_157:                            // %L46117
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	add.s32 	%r3397, %r3397, -8;
	setp.ne.s32 	%p297, %r3397, -16;
	@%p297 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_158;
$L__BB0_155:                            // %L29200
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p288, %r3, 16;
	setp.eq.s32 	%p289, %r3397, 16;
	selp.b32 	%r2664, %r211, 0, %p289;
	setp.eq.s32 	%p290, %r3397, 8;
	selp.b32 	%r2665, %r215, %r2664, %p290;
	setp.eq.s32 	%p291, %r3397, 0;
	selp.b32 	%r2666, %r219, %r2665, %p291;
	setp.eq.s32 	%p292, %r3397, -8;
	selp.b32 	%r2667, %r223, %r2666, %p292;
	selp.b32 	%r2668, %r212, 0, %p289;
	selp.b32 	%r2669, %r216, %r2668, %p290;
	selp.b32 	%r2670, %r220, %r2669, %p291;
	selp.b32 	%r2671, %r224, %r2670, %p292;
	selp.b32 	%r2672, %r213, 0, %p289;
	selp.b32 	%r2673, %r217, %r2672, %p290;
	selp.b32 	%r2674, %r221, %r2673, %p291;
	selp.b32 	%r2675, %r225, %r2674, %p292;
	selp.b32 	%r2676, %r214, 0, %p289;
	selp.b32 	%r2677, %r218, %r2676, %p290;
	selp.b32 	%r2678, %r222, %r2677, %p291;
	selp.b32 	%r2679, %r226, %r2678, %p292;
	// begin inline asm
	mov.b32 %r2163, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2174, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2680, %r2667, 8;
	xor.b32  	%r2173, %r2680, 8947848;
	// begin inline asm
	lop3.b32 %r2160, %r1065, %r2173, %r2163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2164, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2165, %r2163, %r2164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2168, %r2160, %r2165;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2171, %r1076, %r2173, %r2174, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2175, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2176, %r2174, %r2175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2179, %r2171, %r2176;
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2681, %r2671, 8;
	xor.b32  	%r2219, %r2681, 8947848;
	// begin inline asm
	lop3.b32 %r2206, %r1065, %r2219, %r2209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2210, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2211, %r2209, %r2210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2214, %r2206, %r2211;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2217, %r1076, %r2219, %r2220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2222, %r2220, %r2221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2225, %r2217, %r2222;
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2682, %r2675, 8;
	xor.b32  	%r2265, %r2682, 8947848;
	// begin inline asm
	lop3.b32 %r2252, %r1065, %r2265, %r2255, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2257, %r2255, %r2256;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2260, %r2252, %r2257;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2263, %r1076, %r2265, %r2266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2268, %r2266, %r2267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2271, %r2263, %r2268;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2312, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2683, %r2679, 8;
	xor.b32  	%r2311, %r2683, 8947848;
	// begin inline asm
	lop3.b32 %r2298, %r1065, %r2311, %r2301, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2303, %r2301, %r2302;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2306, %r2298, %r2303;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2309, %r1076, %r2311, %r2312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2313, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2314, %r2312, %r2313;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2317, %r2309, %r2314;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2168;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2320, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2179;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2323, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2214;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2326, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2225;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2329, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2260;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2332, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2271;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2335, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2306;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2338, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2317;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2341, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2407, %r2404}, {%r276, %r279}, {%r2320}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2416, %r2413}, {%r276, %r279}, {%r2323}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2425, %r2422}, {%r276, %r279}, {%r2326}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2434, %r2431}, {%r276, %r279}, {%r2329}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2443, %r2440}, {%r276, %r279}, {%r2332}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2452, %r2449}, {%r276, %r279}, {%r2335}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2461, %r2458}, {%r276, %r279}, {%r2338}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2470, %r2467}, {%r276, %r279}, {%r2341}, {%r1187, %r1187};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2400, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2402, %r2400, %r2404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2405, %r314, %r2407, %r2402;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2409, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2411, %r2409, %r2413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2414, %r314, %r2416, %r2411;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2418, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2420, %r2418, %r2422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2423, %r314, %r2425, %r2420;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2427, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2429, %r2427, %r2431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2432, %r314, %r2434, %r2429;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2436, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2438, %r2436, %r2440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2441, %r314, %r2443, %r2438;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2445, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2447, %r2445, %r2449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2450, %r314, %r2452, %r2447;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2454, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2456, %r2454, %r2458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2459, %r314, %r2461, %r2456;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2463, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2465, %r2463, %r2467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2468, %r314, %r2470, %r2465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2472, %r317, %r2407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2475, %r314, %r2404, %r2472;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2479, %r317, %r2416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r314, %r2413, %r2479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2486, %r317, %r2425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2489, %r314, %r2422, %r2486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2493, %r317, %r2434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r314, %r2431, %r2493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2500, %r317, %r2443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r314, %r2440, %r2500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2507, %r317, %r2452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r314, %r2449, %r2507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2514, %r317, %r2461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2517, %r314, %r2458, %r2514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2521, %r317, %r2470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2524, %r314, %r2467, %r2521;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2601, %r2602}, {%r361, %r364}, {%r2405, %r2475}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2609, %r2610}, {%r361, %r364}, {%r2414, %r2482}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2617, %r2618}, {%r361, %r364}, {%r2423, %r2489}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2625, %r2626}, {%r361, %r364}, {%r2432, %r2496}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2633, %r2634}, {%r361, %r364}, {%r2441, %r2503}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2641, %r2642}, {%r361, %r364}, {%r2450, %r2510}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2649, %r2650}, {%r361, %r364}, {%r2459, %r2517}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2657, %r2658}, {%r361, %r364}, {%r2468, %r2524}, {%r1187, %r1187}, %r178, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2600, %r2601, %r2602, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2604, %r2601, %r2602, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2608, %r2609, %r2610, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2612, %r2609, %r2610, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2616, %r2617, %r2618, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2620, %r2617, %r2618, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2624, %r2625, %r2626, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2628, %r2625, %r2626, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2632, %r2633, %r2634, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2636, %r2633, %r2634, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2640, %r2641, %r2642, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2644, %r2641, %r2642, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2648, %r2649, %r2650, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2652, %r2649, %r2650, %r817;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2656, %r2657, %r2658, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2660, %r2657, %r2658, %r817;
	// end inline asm
	st.shared.u32 	[%rd45], %r2600;
	st.shared.u32 	[%rd46+16576], %r2604;
	st.shared.u32 	[%rd46+64], %r2608;
	st.shared.u32 	[%rd46+16640], %r2612;
	st.shared.u32 	[%rd47], %r2616;
	st.shared.u32 	[%rd48+16576], %r2620;
	st.shared.u32 	[%rd48+64], %r2624;
	st.shared.u32 	[%rd48+16640], %r2628;
	st.shared.u32 	[%rd49], %r2632;
	st.shared.u32 	[%rd50+16576], %r2636;
	st.shared.u32 	[%rd50+64], %r2640;
	st.shared.u32 	[%rd50+16640], %r2644;
	st.shared.u32 	[%rd51], %r2648;
	st.shared.u32 	[%rd52+16576], %r2652;
	st.shared.u32 	[%rd52+64], %r2656;
	st.shared.u32 	[%rd52+16640], %r2660;
	@%p288 bra 	$L__BB0_210;
	bra.uni 	$L__BB0_156;
$L__BB0_210:                            // %pass15726
                                        //   in Loop: Header=BB0_155 Depth=2
	st.shared.u32 	[%rd45], %r2600;
	st.shared.u32 	[%rd46+16576], %r2604;
	st.shared.u32 	[%rd46+64], %r2608;
	st.shared.u32 	[%rd46+16640], %r2612;
	st.shared.u32 	[%rd47], %r2616;
	st.shared.u32 	[%rd48+16576], %r2620;
	st.shared.u32 	[%rd48+64], %r2624;
	st.shared.u32 	[%rd48+16640], %r2628;
	st.shared.u32 	[%rd49], %r2632;
	st.shared.u32 	[%rd50+16576], %r2636;
	st.shared.u32 	[%rd50+64], %r2640;
	st.shared.u32 	[%rd50+16640], %r2644;
	st.shared.u32 	[%rd51], %r2648;
	st.shared.u32 	[%rd52+16576], %r2652;
	st.shared.u32 	[%rd52+64], %r2656;
	st.shared.u32 	[%rd52+16640], %r2660;
	bra.uni 	$L__BB0_156;
$L__BB0_211:                            // %pass21035
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3349, %r3399, 20;
	or.b32  	%r3350, %r177, %r3349;
	cvt.u64.u32 	%rd251, %r3350;
	add.s64 	%rd252, %rd251, %rd9;
	shr.u64 	%rd253, %rd252, 34;
	add.s64 	%rd254, %rd252, %rd253;
	shr.s64 	%rd255, %rd254, 30;
	setp.lt.s64 	%p294, %rd252, 0;
	and.b64  	%rd256, %rd254, -1073741824;
	setp.ne.s64 	%p295, %rd256, %rd252;
	and.pred  	%p296, %p294, %p295;
	selp.u64 	%rd257, 1, 0, %p296;
	sub.s64 	%rd258, %rd257, %rd255;
	shl.b64 	%rd259, %rd258, 30;
	add.s64 	%rd260, %rd259, %rd252;
	shl.b64 	%rd261, %rd260, 2;
	add.s64 	%rd262, %rd4, %rd261;
	st.global.u32 	[%rd262], %r3400;
	add.s32 	%r3399, %r3399, 1;
	mov.u32 	%r3398, %r1187;
	mov.u32 	%r3400, %r1187;
	bra.uni 	$L__BB0_157;
$L__BB0_159:                            // %L46148
	mov.u32 	%r3351, 0;
	st.global.u32 	[%rd6], %r3351;
	ret;
$L__BB0_206:                            // %post_box_union
	mov.u64 	%rd237, exception4114;
	cvta.global.u64 	%rd238, %rd237;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd238;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3367, 5;
	st.global.u32 	[%rd6], %r3367;
	mov.u64 	%rd293, exception4066;
	cvta.global.u64 	%rd294, %rd293;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd294;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3366, 5;
	st.global.u32 	[%rd6], %r3366;
	mov.u64 	%rd291, exception4066;
	cvta.global.u64 	%rd292, %rd291;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd292;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3365, 5;
	st.global.u32 	[%rd6], %r3365;
	mov.u64 	%rd289, exception4066;
	cvta.global.u64 	%rd290, %rd289;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd290;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3364, 5;
	st.global.u32 	[%rd6], %r3364;
	mov.u64 	%rd287, exception4066;
	cvta.global.u64 	%rd288, %rd287;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd288;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3363, 5;
	st.global.u32 	[%rd6], %r3363;
	mov.u64 	%rd285, exception4066;
	cvta.global.u64 	%rd286, %rd285;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd286;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3362, 5;
	st.global.u32 	[%rd6], %r3362;
	mov.u64 	%rd283, exception4066;
	cvta.global.u64 	%rd284, %rd283;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd284;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3361, 5;
	st.global.u32 	[%rd6], %r3361;
	mov.u64 	%rd281, exception4066;
	cvta.global.u64 	%rd282, %rd281;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd282;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3360, 5;
	st.global.u32 	[%rd6], %r3360;
	mov.u64 	%rd279, exception4066;
	cvta.global.u64 	%rd280, %rd279;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd280;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3359, 5;
	st.global.u32 	[%rd6], %r3359;
	mov.u64 	%rd277, exception4066;
	cvta.global.u64 	%rd278, %rd277;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd278;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3358, 5;
	st.global.u32 	[%rd6], %r3358;
	mov.u64 	%rd275, exception4066;
	cvta.global.u64 	%rd276, %rd275;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd276;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3357, 5;
	st.global.u32 	[%rd6], %r3357;
	mov.u64 	%rd273, exception4066;
	cvta.global.u64 	%rd274, %rd273;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd274;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3356, 5;
	st.global.u32 	[%rd6], %r3356;
	mov.u64 	%rd271, exception4066;
	cvta.global.u64 	%rd272, %rd271;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd272;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3355, 5;
	st.global.u32 	[%rd6], %r3355;
	mov.u64 	%rd269, exception4066;
	cvta.global.u64 	%rd270, %rd269;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd270;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3354, 5;
	st.global.u32 	[%rd6], %r3354;
	mov.u64 	%rd267, exception4066;
	cvta.global.u64 	%rd268, %rd267;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd268;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3353, 5;
	st.global.u32 	[%rd6], %r3353;
	mov.u64 	%rd265, exception4066;
	cvta.global.u64 	%rd266, %rd265;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd266;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3352, 5;
	st.global.u32 	[%rd6], %r3352;
	mov.u64 	%rd263, exception4066;
	cvta.global.u64 	%rd264, %rd263;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd264;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3369, 2;
	st.global.u32 	[%rd6], %r3369;
	mov.u64 	%rd297, exception4066;
	cvta.global.u64 	%rd298, %rd297;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd298;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3368, 3;
	st.global.u32 	[%rd6], %r3368;
	mov.u64 	%rd295, exception4066;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd73, exception1;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd72, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd78, __unnamed_1;
	cvta.global.u64 	%rd79, %rd78;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd79;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd72;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r462, [retval0+0];
	} // callseq 47
	mov.u32 	%r464, 4;
	st.global.u32 	[%rd6], %r464;
	mov.u64 	%rd81, exception4066;
	cvta.global.u64 	%rd82, %rd81;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd82;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r245;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
