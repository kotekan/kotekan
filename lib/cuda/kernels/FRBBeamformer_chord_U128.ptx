// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2371[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<358>;
	.reg .b16 	%rs<242>;
	.reg .b32 	%r<3724>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<498>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r346, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r355, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r355, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r347, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r356, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r357, %r356, %r1;
	add.s32 	%r358, %r357, %r4;
	mul.wide.u32 	%rd33, %r358, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r359, 1;
	st.global.u32 	[%rd6], %r359;
	setp.gt.u32 	%p4, %r347, 255;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r348, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r348, %r347;
	setp.gt.s32 	%p6, %r348, 511;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r349, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r348, %r347;
	mad.lo.s32 	%r360, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r361, %r360, %r360, 4;
	setp.gt.u32 	%p8, %r361, 89478484;
	setp.gt.u32 	%p9, %r349, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r350, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r350, %r349;
	setp.lt.s32 	%p12, %r350, 2048;
	and.pred  	%p13, %p11, %p12;
	sub.s32 	%r362, %r350, %r349;
	setp.eq.s32 	%p14, %r362, %r5;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %L262
	ld.param.u32 	%r351, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r351, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.8:                               // %L264
	ld.param.u32 	%r352, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r352, %r351;
	setp.gt.s32 	%p18, %r352, 128;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.9:                               // %L274
	ld.param.u32 	%r353, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r352, %r351;
	and.b32  	%r363, %r6, 127;
	setp.ne.s32 	%p20, %r363, 0;
	setp.lt.s32 	%p21, %r353, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.10:                              // %L280
	ld.param.u32 	%r354, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r354, %r353;
	setp.gt.s32 	%p24, %r354, 512;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_12;
// %bb.11:                              // %L290
	sub.s32 	%r364, %r354, %r353;
	and.b32  	%r365, %r364, 127;
	setp.eq.s32 	%p26, %r365, 0;
	setp.eq.s32 	%p27, %r364, %r6;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_12;
$L__BB0_197:                            // %pass162
	and.b32  	%r210, %r1, 3;
	shr.u32 	%r211, %r1, 2;
	mul.lo.s32 	%r366, %r210, %r211;
	and.b32  	%r367, %r366, 7;
	cvt.rn.f32.s32 	%f201, %r367;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p29, %f785, 0f40000000;
	setp.gtu.f32 	%p357, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p29 bra 	$L__BB0_209;
// %bb.198:
	@%p357 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_199;
$L__BB0_205:
	mov.b32 	%r213, %f785;
	and.b32  	%r368, %r213, 8388607;
	or.b32  	%r3719, %r368, 1065353216;
	mov.b32 	%f780, %r3719;
	add.s32 	%r369, %r213, -1073741824;
	and.b32  	%r3720, %r369, -8388608;
	setp.eq.s32 	%p36, %r3720, 0;
	@%p36 bra 	$L__BB0_208;
// %bb.206:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_207:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r370, %r3720, 192937984;
	add.s32 	%r371, %r3719, %r370;
	mov.b32 	%f213, %r371;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3720, %r3720, %r370;
	mov.b32 	%r3719, %f780;
	setp.ne.s32 	%p37, %r3720, 0;
	setp.ne.s32 	%p38, %r3719, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_207;
$L__BB0_208:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r213, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_209;
$L__BB0_199:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r212, %f172;
	setp.lt.u32 	%p31, %r212, 1073741824;
	@%p31 bra 	$L__BB0_204;
// %bb.200:
	setp.lt.u32 	%p32, %r212, -2147483647;
	@%p32 bra 	$L__BB0_202;
// %bb.201:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p35;
	bra.uni 	$L__BB0_204;
$L__BB0_202:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_204;
// %bb.203:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p34;
$L__BB0_204:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_209:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p41, %f222, 0f7F800000;
	mov.b32 	%r372, %f169;
	and.b32  	%r220, %r372, -2147483648;
	@%p41 bra 	$L__BB0_211;
// %bb.210:
	mov.b32 	%r373, %f781;
	or.b32  	%r374, %r220, %r373;
	mov.b32 	%f781, %r374;
$L__BB0_211:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r223, %r1, 1;
	and.b32  	%r224, %r223, 6;
	or.b32  	%r225, %r224, 1;
	setp.eq.s32 	%p49, %r224, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3634, %r224, %r211;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p49 bra 	$L__BB0_28;
// %bb.13:                              // %L493
	cvt.u16.u32 	%rs1, %r3634;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p50, %f733, 0f40000000;
	@%p50 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p51, %f733, 0f4B800000;
	@%p51 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r8, %f733;
	and.b32  	%r390, %r8, 8388607;
	or.b32  	%r3638, %r390, 1065353216;
	mov.b32 	%f732, %r3638;
	add.s32 	%r391, %r8, -1073741824;
	and.b32  	%r3639, %r391, -8388608;
	setp.eq.s32 	%p57, %r3639, 0;
	@%p57 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r3639, 192937984;
	add.s32 	%r393, %r3638, %r392;
	mov.b32 	%f267, %r393;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3639, %r3639, %r392;
	mov.b32 	%r3638, %f732;
	setp.ne.s32 	%p58, %r3639, 0;
	setp.ne.s32 	%p59, %r3638, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p61, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i964
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p52, %r7, 1073741824;
	@%p52 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p53, %r7, -2147483647;
	@%p53 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p56, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p56;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p54, %f4, 0f40800000;
	@%p54 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p55, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p55;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p62, %f276, 0f7F800000;
	@%p62 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r394, %f1;
	and.b32  	%r395, %r394, -2147483648;
	mov.b32 	%r396, %f733;
	or.b32  	%r397, %r395, %r396;
	mov.b32 	%f733, %r397;
$L__BB0_27:                             // %__nv_fmodf.exit991
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r398, %f277;
	and.b32  	%r399, %r398, -2147483648;
	or.b32  	%r400, %r399, 1056964608;
	mov.b32 	%f278, %r400;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p63, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p63;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p64, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p64;
	cvt.rzi.s32.f32 	%r401, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r402, %r401, 1;
	setp.eq.b32 	%p65, %r402, 1;
	selp.f32 	%f296, %f294, %f295, %p65;
	selp.f32 	%f297, %f295, %f294, %p65;
	and.b32  	%r403, %r401, 2;
	setp.eq.s32 	%p66, %r403, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p66;
	add.s32 	%r404, %r401, 1;
	and.b32  	%r405, %r404, 2;
	setp.eq.s32 	%p67, %r405, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p67;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p68, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p68;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p69, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p69;
$L__BB0_28:                             // %L527
	setp.gt.u32 	%p70, %r225, 5;
	mul.lo.s32 	%r3635, %r225, %r211;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p70 bra 	$L__BB0_44;
// %bb.29:                              // %L531
	mul.hi.u32 	%r407, %r3635, -1431655765;
	shr.u32 	%r408, %r407, 5;
	mul.lo.s32 	%r409, %r408, 48;
	sub.s32 	%r410, %r3635, %r409;
	cvt.rn.f32.s32 	%f308, %r410;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p71, %f739, 0f40000000;
	@%p71 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p72, %f739, 0f4B800000;
	@%p72 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r16, %f739;
	and.b32  	%r411, %r16, 8388607;
	or.b32  	%r3640, %r411, 1065353216;
	mov.b32 	%f738, %r3640;
	add.s32 	%r412, %r16, -1073741824;
	and.b32  	%r3641, %r412, -8388608;
	setp.eq.s32 	%p78, %r3641, 0;
	@%p78 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1016.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1016
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r413, %r3641, 192937984;
	add.s32 	%r414, %r3640, %r413;
	mov.b32 	%f320, %r414;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3641, %r3641, %r413;
	mov.b32 	%r3640, %f738;
	setp.ne.s32 	%p79, %r3641, 0;
	setp.ne.s32 	%p80, %r3640, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1018
	setp.gt.u32 	%p82, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i995
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p73, %r15, 1073741824;
	@%p73 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p74, %r15, -2147483647;
	@%p74 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p77, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p77;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p75, %f25, 0f40800000;
	@%p75 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i999
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p76, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p76;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1002
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1021
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p83, %f329, 0f7F800000;
	@%p83 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r415, %f22;
	and.b32  	%r416, %r415, -2147483648;
	mov.b32 	%r417, %f739;
	or.b32  	%r418, %r416, %r417;
	mov.b32 	%f739, %r418;
$L__BB0_43:                             // %__nv_fmodf.exit1022
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r419, %f330;
	and.b32  	%r420, %r419, -2147483648;
	or.b32  	%r421, %r420, 1056964608;
	mov.b32 	%f331, %r421;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p84, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p84;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p85, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p85;
	cvt.rzi.s32.f32 	%r422, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r423, %r422, 1;
	setp.eq.b32 	%p86, %r423, 1;
	selp.f32 	%f349, %f347, %f348, %p86;
	selp.f32 	%f350, %f348, %f347, %p86;
	and.b32  	%r424, %r422, 2;
	setp.eq.s32 	%p87, %r424, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p87;
	add.s32 	%r425, %r422, 1;
	and.b32  	%r426, %r425, 2;
	setp.eq.s32 	%p88, %r426, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p88;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p89, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p89;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p90, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p90;
$L__BB0_44:                             // %L565
	setp.gt.u32 	%p92, %r1, 23;
	or.pred  	%p1, %p49, %p92;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L603
	cvt.u16.u32 	%rs8, %r3634;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p93, %f745, 0f40000000;
	@%p93 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p94, %f745, 0f4B800000;
	@%p94 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r26, %f745;
	and.b32  	%r434, %r26, 8388607;
	or.b32  	%r3642, %r434, 1065353216;
	mov.b32 	%f744, %r3642;
	add.s32 	%r435, %r26, -1073741824;
	and.b32  	%r3643, %r435, -8388608;
	setp.eq.s32 	%p100, %r3643, 0;
	@%p100 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1047.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1047
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r436, %r3643, 192937984;
	add.s32 	%r437, %r3642, %r436;
	mov.b32 	%f373, %r437;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3643, %r3643, %r436;
	mov.b32 	%r3642, %f744;
	setp.ne.s32 	%p101, %r3643, 0;
	setp.ne.s32 	%p102, %r3642, 0;
	and.pred  	%p103, %p101, %p102;
	@%p103 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1049
	setp.gt.u32 	%p104, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p104;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1026
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p95, %r25, 1073741824;
	@%p95 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p96, %r25, -2147483647;
	@%p96 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p99, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p99;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p97, %f46, 0f40800000;
	@%p97 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1030
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p98, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p98;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1033
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1052
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p105, %f382, 0f7F800000;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r438, %f43;
	and.b32  	%r439, %r438, -2147483648;
	mov.b32 	%r440, %f745;
	or.b32  	%r441, %r439, %r440;
	mov.b32 	%f745, %r441;
$L__BB0_59:                             // %__nv_fmodf.exit1053
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r442, %f383;
	and.b32  	%r443, %r442, -2147483648;
	or.b32  	%r444, %r443, 1056964608;
	mov.b32 	%f384, %r444;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p106, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p106;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p107, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p107;
	cvt.rzi.s32.f32 	%r445, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r446, %r445, 1;
	setp.eq.b32 	%p108, %r446, 1;
	selp.f32 	%f402, %f400, %f401, %p108;
	selp.f32 	%f403, %f401, %f400, %p108;
	and.b32  	%r447, %r445, 2;
	setp.eq.s32 	%p109, %r447, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p109;
	add.s32 	%r448, %r445, 1;
	and.b32  	%r449, %r448, 2;
	setp.eq.s32 	%p110, %r449, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p110;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p111, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p111;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p112, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p112;
$L__BB0_60:                             // %L637
	or.pred  	%p2, %p70, %p92;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L645
	mul.hi.u32 	%r451, %r3635, -1431655765;
	shr.u32 	%r452, %r451, 2;
	mul.lo.s32 	%r453, %r452, 6;
	sub.s32 	%r454, %r3635, %r453;
	cvt.rn.f32.s32 	%f414, %r454;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p115, %f751, 0f40000000;
	@%p115 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p116, %f751, 0f4B800000;
	@%p116 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r34, %f751;
	and.b32  	%r455, %r34, 8388607;
	or.b32  	%r3644, %r455, 1065353216;
	mov.b32 	%f750, %r3644;
	add.s32 	%r456, %r34, -1073741824;
	and.b32  	%r3645, %r456, -8388608;
	setp.eq.s32 	%p122, %r3645, 0;
	@%p122 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1078.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1078
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r457, %r3645, 192937984;
	add.s32 	%r458, %r3644, %r457;
	mov.b32 	%f426, %r458;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3645, %r3645, %r457;
	mov.b32 	%r3644, %f750;
	setp.ne.s32 	%p123, %r3645, 0;
	setp.ne.s32 	%p124, %r3644, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1080
	setp.gt.u32 	%p126, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1057
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p117, %r33, 1073741824;
	@%p117 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p118, %r33, -2147483647;
	@%p118 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p121, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p121;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p119, %f67, 0f40800000;
	@%p119 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1061
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p120, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p120;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1064
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1083
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p127, %f435, 0f7F800000;
	@%p127 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r459, %f64;
	and.b32  	%r460, %r459, -2147483648;
	mov.b32 	%r461, %f751;
	or.b32  	%r462, %r460, %r461;
	mov.b32 	%f751, %r462;
$L__BB0_75:                             // %__nv_fmodf.exit1084
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r463, %f436;
	and.b32  	%r464, %r463, -2147483648;
	or.b32  	%r465, %r464, 1056964608;
	mov.b32 	%f437, %r465;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p128, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p128;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p129, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p129;
	cvt.rzi.s32.f32 	%r466, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r467, %r466, 1;
	setp.eq.b32 	%p130, %r467, 1;
	selp.f32 	%f455, %f453, %f454, %p130;
	selp.f32 	%f456, %f454, %f453, %p130;
	and.b32  	%r468, %r466, 2;
	setp.eq.s32 	%p131, %r468, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p131;
	add.s32 	%r469, %r466, 1;
	and.b32  	%r470, %r469, 2;
	setp.eq.s32 	%p132, %r470, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p132;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p133, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p133;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p134, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p134;
$L__BB0_76:                             // %L679
	@%p29 bra 	$L__BB0_219;
// %bb.77:
	@%p357 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_78;
$L__BB0_215:
	mov.b32 	%r227, %f785;
	and.b32  	%r483, %r227, 8388607;
	or.b32  	%r3721, %r483, 1065353216;
	mov.b32 	%f784, %r3721;
	add.s32 	%r484, %r227, -1073741824;
	and.b32  	%r3722, %r484, -8388608;
	setp.eq.s32 	%p142, %r3722, 0;
	@%p142 bra 	$L__BB0_218;
// %bb.216:                             // %__nv_fmaf_rn.exit4.i.i.i1109.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_217:                            // %__nv_fmaf_rn.exit4.i.i.i1109
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r485, %r3722, 192937984;
	add.s32 	%r486, %r3721, %r485;
	mov.b32 	%f476, %r486;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3722, %r3722, %r485;
	mov.b32 	%r3721, %f784;
	setp.ne.s32 	%p143, %r3722, 0;
	setp.ne.s32 	%p144, %r3721, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_217;
$L__BB0_218:                            // %__internal_fmodf_slowpath_mod.exit.i.i1111
	setp.gt.u32 	%p146, %r227, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_219;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1088
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r226, %f187;
	setp.lt.u32 	%p137, %r226, 1073741824;
	@%p137 bra 	$L__BB0_214;
// %bb.79:
	setp.lt.u32 	%p138, %r226, -2147483647;
	@%p138 bra 	$L__BB0_212;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p141, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p141;
	bra.uni 	$L__BB0_214;
$L__BB0_212:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p139, %f187, 0f40800000;
	@%p139 bra 	$L__BB0_214;
// %bb.213:                             // %__nv_fmaf_rn.exit.i.i.i1092
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p140, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p140;
$L__BB0_214:                            // %__internal_fmodf_fastpath_quot.exit.i.i1095
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_219:                            // %__internal_fmodf_kernel.exit.i1114
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p147, %f485, 0f7F800000;
	@%p147 bra 	$L__BB0_221;
// %bb.220:
	mov.b32 	%r487, %f785;
	or.b32  	%r488, %r220, %r487;
	mov.b32 	%f785, %r488;
$L__BB0_221:                            // %__nv_fmodf.exit1115
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p49 bra 	$L__BB0_96;
// %bb.81:                              // %L781
	cvt.u16.u32 	%rs15, %r3634;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p156, %f757, 0f40000000;
	@%p156 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p157, %f757, 0f4B800000;
	@%p157 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r46, %f757;
	and.b32  	%r504, %r46, 8388607;
	or.b32  	%r3646, %r504, 1065353216;
	mov.b32 	%f756, %r3646;
	add.s32 	%r505, %r46, -1073741824;
	and.b32  	%r3647, %r505, -8388608;
	setp.eq.s32 	%p163, %r3647, 0;
	@%p163 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1140.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1140
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r506, %r3647, 192937984;
	add.s32 	%r507, %r3646, %r506;
	mov.b32 	%f530, %r507;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3647, %r3647, %r506;
	mov.b32 	%r3646, %f756;
	setp.ne.s32 	%p164, %r3647, 0;
	setp.ne.s32 	%p165, %r3646, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1142
	setp.gt.u32 	%p167, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1119
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p158, %r45, 1073741824;
	@%p158 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p159, %r45, -2147483647;
	@%p159 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p162;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1123
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p161;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1126
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1145
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p168, %f539, 0f7F800000;
	@%p168 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r508, %f85;
	and.b32  	%r509, %r508, -2147483648;
	mov.b32 	%r510, %f757;
	or.b32  	%r511, %r509, %r510;
	mov.b32 	%f757, %r511;
$L__BB0_95:                             // %__nv_fmodf.exit1146
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r512, %f540;
	and.b32  	%r513, %r512, -2147483648;
	or.b32  	%r514, %r513, 1056964608;
	mov.b32 	%f541, %r514;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p169, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p169;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p170, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p170;
	cvt.rzi.s32.f32 	%r515, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r516, %r515, 1;
	setp.eq.b32 	%p171, %r516, 1;
	selp.f32 	%f559, %f557, %f558, %p171;
	selp.f32 	%f560, %f558, %f557, %p171;
	and.b32  	%r517, %r515, 2;
	setp.eq.s32 	%p172, %r517, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p172;
	add.s32 	%r518, %r515, 1;
	and.b32  	%r519, %r518, 2;
	setp.eq.s32 	%p173, %r519, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p173;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p174, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p174;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p175, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p175;
$L__BB0_96:                             // %L815
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p70 bra 	$L__BB0_112;
// %bb.97:                              // %L819
	mul.hi.u32 	%r521, %r3635, -1431655765;
	shr.u32 	%r522, %r521, 5;
	mul.lo.s32 	%r523, %r522, 48;
	sub.s32 	%r524, %r3635, %r523;
	cvt.rn.f32.s32 	%f571, %r524;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p177, %f763, 0f40000000;
	@%p177 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p178, %f763, 0f4B800000;
	@%p178 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r54, %f763;
	and.b32  	%r525, %r54, 8388607;
	or.b32  	%r3648, %r525, 1065353216;
	mov.b32 	%f762, %r3648;
	add.s32 	%r526, %r54, -1073741824;
	and.b32  	%r3649, %r526, -8388608;
	setp.eq.s32 	%p184, %r3649, 0;
	@%p184 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1171.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1171
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r527, %r3649, 192937984;
	add.s32 	%r528, %r3648, %r527;
	mov.b32 	%f583, %r528;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3649, %r3649, %r527;
	mov.b32 	%r3648, %f762;
	setp.ne.s32 	%p185, %r3649, 0;
	setp.ne.s32 	%p186, %r3648, 0;
	and.pred  	%p187, %p185, %p186;
	@%p187 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1173
	setp.gt.u32 	%p188, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p188;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1150
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p179, %r53, 1073741824;
	@%p179 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p180, %r53, -2147483647;
	@%p180 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p183, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p183;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p181, %f109, 0f40800000;
	@%p181 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1154
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p182, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p182;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1157
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1176
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p189, %f592, 0f7F800000;
	@%p189 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r529, %f106;
	and.b32  	%r530, %r529, -2147483648;
	mov.b32 	%r531, %f763;
	or.b32  	%r532, %r530, %r531;
	mov.b32 	%f763, %r532;
$L__BB0_111:                            // %__nv_fmodf.exit1177
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r533, %f593;
	and.b32  	%r534, %r533, -2147483648;
	or.b32  	%r535, %r534, 1056964608;
	mov.b32 	%f594, %r535;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p190, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p190;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p191, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p191;
	cvt.rzi.s32.f32 	%r536, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r537, %r536, 1;
	setp.eq.b32 	%p192, %r537, 1;
	selp.f32 	%f612, %f610, %f611, %p192;
	selp.f32 	%f613, %f611, %f610, %p192;
	and.b32  	%r538, %r536, 2;
	setp.eq.s32 	%p193, %r538, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p193;
	add.s32 	%r539, %r536, 1;
	and.b32  	%r540, %r539, 2;
	setp.eq.s32 	%p194, %r540, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p194;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p195, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p195;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p196, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p196;
$L__BB0_112:                            // %L853
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L891
	cvt.u16.u32 	%rs22, %r3634;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p197, %f769, 0f40000000;
	@%p197 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p198, %f769, 0f4B800000;
	@%p198 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r64, %f769;
	and.b32  	%r548, %r64, 8388607;
	or.b32  	%r3650, %r548, 1065353216;
	mov.b32 	%f768, %r3650;
	add.s32 	%r549, %r64, -1073741824;
	and.b32  	%r3651, %r549, -8388608;
	setp.eq.s32 	%p204, %r3651, 0;
	@%p204 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1202.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1202
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r550, %r3651, 192937984;
	add.s32 	%r551, %r3650, %r550;
	mov.b32 	%f636, %r551;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3651, %r3651, %r550;
	mov.b32 	%r3650, %f768;
	setp.ne.s32 	%p205, %r3651, 0;
	setp.ne.s32 	%p206, %r3650, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1204
	setp.gt.u32 	%p208, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1181
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p199, %r63, 1073741824;
	@%p199 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p200, %r63, -2147483647;
	@%p200 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p203, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p203;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p201, %f130, 0f40800000;
	@%p201 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1185
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p202, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p202;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1188
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1207
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p209, %f645, 0f7F800000;
	@%p209 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r552, %f127;
	and.b32  	%r553, %r552, -2147483648;
	mov.b32 	%r554, %f769;
	or.b32  	%r555, %r553, %r554;
	mov.b32 	%f769, %r555;
$L__BB0_127:                            // %__nv_fmodf.exit1208
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r556, %f646;
	and.b32  	%r557, %r556, -2147483648;
	or.b32  	%r558, %r557, 1056964608;
	mov.b32 	%f647, %r558;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p210, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p210;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p211, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p211;
	cvt.rzi.s32.f32 	%r559, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r560, %r559, 1;
	setp.eq.b32 	%p212, %r560, 1;
	selp.f32 	%f665, %f663, %f664, %p212;
	selp.f32 	%f666, %f664, %f663, %p212;
	and.b32  	%r561, %r559, 2;
	setp.eq.s32 	%p213, %r561, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p213;
	add.s32 	%r562, %r559, 1;
	and.b32  	%r563, %r562, 2;
	setp.eq.s32 	%p214, %r563, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p214;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p215, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p215;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p216, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p216;
$L__BB0_128:                            // %L925
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L933
	mul.hi.u32 	%r565, %r3635, -1431655765;
	shr.u32 	%r566, %r565, 2;
	mul.lo.s32 	%r567, %r566, 6;
	sub.s32 	%r568, %r3635, %r567;
	cvt.rn.f32.s32 	%f677, %r568;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p217, %f775, 0f40000000;
	@%p217 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p218, %f775, 0f4B800000;
	@%p218 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r72, %f775;
	and.b32  	%r569, %r72, 8388607;
	or.b32  	%r3652, %r569, 1065353216;
	mov.b32 	%f774, %r3652;
	add.s32 	%r570, %r72, -1073741824;
	and.b32  	%r3653, %r570, -8388608;
	setp.eq.s32 	%p224, %r3653, 0;
	@%p224 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1233.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1233
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r571, %r3653, 192937984;
	add.s32 	%r572, %r3652, %r571;
	mov.b32 	%f689, %r572;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3653, %r3653, %r571;
	mov.b32 	%r3652, %f774;
	setp.ne.s32 	%p225, %r3653, 0;
	setp.ne.s32 	%p226, %r3652, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1235
	setp.gt.u32 	%p228, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p219, %r71, 1073741824;
	@%p219 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p220, %r71, -2147483647;
	@%p220 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p223, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p223;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p221, %f151, 0f40800000;
	@%p221 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1216
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p222, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p222;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1219
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1238
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p229, %f698, 0f7F800000;
	@%p229 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r573, %f148;
	and.b32  	%r574, %r573, -2147483648;
	mov.b32 	%r575, %f775;
	or.b32  	%r576, %r574, %r575;
	mov.b32 	%f775, %r576;
$L__BB0_143:                            // %__nv_fmodf.exit1239
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r577, %f699;
	and.b32  	%r578, %r577, -2147483648;
	or.b32  	%r579, %r578, 1056964608;
	mov.b32 	%f700, %r579;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p230, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p230;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p231, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p231;
	cvt.rzi.s32.f32 	%r580, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r581, %r580, 1;
	setp.eq.b32 	%p232, %r581, 1;
	selp.f32 	%f718, %f716, %f717, %p232;
	selp.f32 	%f719, %f717, %f716, %p232;
	and.b32  	%r582, %r580, 2;
	setp.eq.s32 	%p233, %r582, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p233;
	add.s32 	%r583, %r580, 1;
	and.b32  	%r584, %r583, 2;
	setp.eq.s32 	%p234, %r584, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p234;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p235, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p235;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p236, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p236;
$L__BB0_144:                            // %L967
	mov.u32 	%r236, 999999999;
	cvt.u16.u32 	%rs241, %r1;
	@%p92 bra 	$L__BB0_223;
// %bb.145:                             // %L1003
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs241, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs241, %rs33;
	cvt.u32.u16 	%r598, %rs34;
	and.b32  	%r599, %r598, 255;
	mad.lo.s32 	%r600, %r599, 24, %r3;
	cvt.u16.u32 	%rs35, %r600;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r601, %rs39;
	mul.wide.u32 	%rd34, %r601, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r602, [%rd35];
	shl.b32 	%r603, %r602, 16;
	cvt.s32.s16 	%r83, %r602;
	shr.s32 	%r84, %r602, 16;
	or.b32  	%r604, %r603, 65535;
	setp.lt.u32 	%p238, %r604, 1638399;
	setp.lt.u32 	%p239, %r602, 1572864;
	and.pred  	%p240, %p238, %p239;
	@%p240 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_146;
$L__BB0_222:                            // %L1245
	mul.lo.s32 	%r608, %r84, 801;
	mad.lo.s32 	%r236, %r83, 33, %r608;
$L__BB0_223:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r381, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r382, %r381, -2147483648;
	mov.b32 	%r495, %f487;
	or.b32  	%r383, %r382, 1056964608;
	and.b32  	%r496, %r495, -2147483648;
	mov.b32 	%f225, %r383;
	or.b32  	%r497, %r496, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r497;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p42, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p42;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p43, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p149, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p43;
	selp.f32 	%f492, %f487, %f490, %p149;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p150, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p150;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r384, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r385, %r384, 1;
	cvt.rzi.s32.f32 	%r498, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p44, %r385, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r499, %r498, 1;
	selp.f32 	%f243, %f241, %f242, %p44;
	and.b32  	%r386, %r384, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p151, %r499, 1;
	setp.eq.s32 	%p45, %r386, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r387, %r384, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p151;
	and.b32  	%r500, %r498, 2;
	selp.f32 	%f244, %f242, %f241, %p44;
	selp.f32 	%f246, %f243, %f245, %p45;
	and.b32  	%r388, %r387, 2;
	setp.eq.f32 	%p47, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p152, %r500, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r501, %r498, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p46, %r388, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p47;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p151;
	selp.f32 	%f509, %f506, %f508, %p152;
	and.b32  	%r502, %r501, 2;
	setp.eq.f32 	%p154, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p46;
	setp.gt.f32 	%p48, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p153, %r502, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p154;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p48;
	selp.f32 	%f511, %f507, %f510, %p153;
	setp.gt.f32 	%p155, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r377, %f254;
	mov.b32 	%r380, %f251;
	selp.f32 	%f517, %f516, %f511, %p155;
	xor.b32  	%r376, %r380, -2147483648;
	mov.b32 	%r472, %f62;
	mov.b32 	%r473, %f83;
	mov.b32 	%r478, %f63;
	mov.b32 	%r479, %f84;
	mov.b32 	%r491, %f517;
	mov.b32 	%r494, %f514;
	mov.b32 	%r428, %f20;
	mov.b32 	%r429, %f41;
	mov.b32 	%r431, %f21;
	mov.b32 	%r432, %f42;
	xor.b32  	%r475, %r478, -2147483648;
	xor.b32  	%r476, %r479, -2147483648;
	xor.b32  	%r490, %r494, -2147483648;
	mov.b32 	%r542, %f104;
	mov.b32 	%r543, %f125;
	mov.b32 	%r545, %f105;
	mov.b32 	%r546, %f126;
	mov.b32 	%r586, %f146;
	mov.b32 	%r587, %f167;
	mov.b32 	%r592, %f147;
	xor.b32  	%r589, %r592, -2147483648;
	mov.b32 	%r593, %f168;
	xor.b32  	%r590, %r593, -2147483648;
	and.b32  	%r609, %r1, 24;
	setp.ne.s32 	%p241, %r609, 24;
	cvt.u16.u32 	%rs40, %r211;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs40, %rs43;
	cvt.u32.u16 	%r610, %rs44;
	and.b32  	%r237, %r610, 255;
	mul.lo.s32 	%r3654, %r2, 1152;
	@%p241 bra 	$L__BB0_147;
// %bb.224:                             // %pass503.L1505_crit_edge
	mov.u32 	%r87, 0;
	mov.u32 	%r88, %r87;
	bra.uni 	$L__BB0_148;
$L__BB0_147:                            // %pass518
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r611, %r237, 24;
	mul.lo.s32 	%r612, %r210, 144;
	or.b32  	%r613, %r3654, %r3;
	add.s32 	%r614, %r613, %r612;
	add.s32 	%r615, %r614, %r611;
	mul.wide.u32 	%rd41, %r615, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r87, [%rd42];
	or.b32  	%r616, %r3, 576;
	add.s32 	%r617, %r3654, %r616;
	add.s32 	%r618, %r617, %r612;
	add.s32 	%r619, %r618, %r611;
	mul.wide.u32 	%rd43, %r619, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.u32 	%r88, [%rd44];
$L__BB0_148:                            // %L1505
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r375, %r377, %r376;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r378, %r380, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r427, %r429, %r428;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r430, %r432, %r431;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r471, %r473, %r472;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r474, %r476, %r475;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r477, %r479, %r478;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r480, %r473, %r472;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r489, %r491, %r490;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r492, %r494, %r491;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r541, %r543, %r542;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r544, %r546, %r545;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r585, %r587, %r586;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r588, %r590, %r589;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r591, %r593, %r592;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r594, %r587, %r586;
	// end inline asm
	mov.u32 	%r123, 0;
	shl.b32 	%r622, %r347, 15;
	shl.b32 	%r623, %r351, 8;
	add.s32 	%r89, %r623, %r622;
	shl.b32 	%r90, %r1, 2;
	and.b32  	%r91, %r90, 60;
	shl.b32 	%r624, %r1, 3;
	and.b32  	%r92, %r624, 128;
	shl.b32 	%r93, %r2, 8;
	or.b32  	%r625, %r93, %r92;
	or.b32  	%r94, %r625, 64;
	add.s32 	%r95, %r3, 24;
	and.b32  	%r626, %r223, 30;
	shr.u32 	%r627, %r1, 4;
	or.b32  	%r628, %r626, %r627;
	mul.lo.s32 	%r96, %r628, 257;
	or.b32  	%r629, %r627, %r223;
	or.b32  	%r630, %r629, 32;
	mul.lo.s32 	%r97, %r630, 257;
	and.b16  	%rs46, %rs241, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 12;
	mul.lo.s16 	%rs49, %rs48, 24;
	sub.s16 	%rs50, %rs241, %rs49;
	cvt.u32.u16 	%r631, %rs50;
	and.b32  	%r98, %r631, 255;
	shr.u32 	%r632, %r3, 3;
	and.b32  	%r633, %r4, 224;
	mad.lo.s32 	%r99, %r632, 257, %r633;
	shr.u32 	%r634, %r95, 3;
	mad.lo.s32 	%r100, %r634, 257, %r633;
	add.s32 	%r635, %r3, 48;
	shr.u32 	%r636, %r635, 3;
	mad.lo.s32 	%r101, %r636, 257, %r633;
	add.s32 	%r637, %r3, 72;
	shr.u32 	%r638, %r637, 3;
	mad.lo.s32 	%r102, %r638, 257, %r633;
	or.b32  	%r639, %r632, 12;
	mad.lo.s32 	%r103, %r639, 257, %r633;
	add.s32 	%r640, %r3, 120;
	shr.u32 	%r641, %r640, 3;
	mad.lo.s32 	%r104, %r641, 257, %r633;
	add.s32 	%r642, %r3, 144;
	shr.u32 	%r643, %r642, 3;
	mad.lo.s32 	%r105, %r643, 257, %r633;
	add.s32 	%r644, %r3, 168;
	shr.u32 	%r645, %r644, 3;
	mad.lo.s32 	%r106, %r645, 257, %r633;
	or.b32  	%r646, %r632, 24;
	mad.lo.s32 	%r107, %r646, 257, %r633;
	add.s32 	%r647, %r3, 216;
	shr.u32 	%r648, %r647, 3;
	mad.lo.s32 	%r108, %r648, 257, %r633;
	add.s32 	%r649, %r3, 240;
	shr.u32 	%r650, %r649, 3;
	mad.lo.s32 	%r109, %r650, 257, %r633;
	add.s32 	%r651, %r3, 264;
	shr.u32 	%r652, %r651, 3;
	mad.lo.s32 	%r110, %r652, 257, %r633;
	or.b32  	%r653, %r632, 36;
	mad.lo.s32 	%r111, %r653, 257, %r633;
	add.s32 	%r654, %r3, 312;
	shr.u32 	%r655, %r654, 3;
	mad.lo.s32 	%r112, %r655, 257, %r633;
	add.s32 	%r656, %r3, 336;
	shr.u32 	%r657, %r656, 3;
	mad.lo.s32 	%r113, %r657, 257, %r633;
	add.s32 	%r658, %r3, 360;
	shr.u32 	%r659, %r658, 3;
	mad.lo.s32 	%r114, %r659, 257, %r633;
	or.b32  	%r660, %r632, 48;
	mad.lo.s32 	%r115, %r660, 257, %r633;
	add.s32 	%r661, %r3, 408;
	shr.u32 	%r662, %r661, 3;
	mad.lo.s32 	%r116, %r662, 257, %r633;
	add.s32 	%r663, %r3, 432;
	shr.u32 	%r664, %r663, 3;
	mad.lo.s32 	%r117, %r664, 257, %r633;
	add.s32 	%r665, %r3, 456;
	shr.u32 	%r666, %r665, 3;
	mad.lo.s32 	%r118, %r666, 257, %r633;
	or.b32  	%r667, %r632, 60;
	mad.lo.s32 	%r119, %r667, 257, %r633;
	add.s32 	%r668, %r3, 504;
	bfe.u32 	%r669, %r668, 3, 6;
	mad.lo.s32 	%r120, %r669, 257, %r633;
	mul.lo.s32 	%r670, %r3, 33;
	mad.lo.s32 	%r671, %r210, 4806, %r670;
	mad.lo.s32 	%r672, %r237, 801, %r671;
	shr.u32 	%r673, %r3, 4;
	bfe.s32 	%r674, %r3, 2, 1;
	and.b32  	%r675, %r674, 2056;
	mul.lo.s32 	%r676, %r210, 6;
	bfe.s32 	%r677, %r3, 3, 1;
	and.b32  	%r678, %r3, 8;
	setp.eq.s32 	%p242, %r678, 0;
	and.b32  	%r679, %r677, 1028;
	and.b32  	%r680, %r3, 1;
	neg.s32 	%r681, %r680;
	and.b32  	%r682, %r681, 8256;
	bfe.s32 	%r683, %r3, 1, 1;
	and.b32  	%r684, %r683, 4112;
	mad.lo.s32 	%r685, %r673, 514, %r676;
	add.s32 	%r686, %r685, %r675;
	add.s32 	%r687, %r686, %r679;
	add.s32 	%r688, %r687, %r682;
	add.s32 	%r689, %r688, %r684;
	add.s32 	%r690, %r689, %r237;
	mul.wide.u32 	%rd45, %r690, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	bfe.s32 	%r691, %r95, 4, 1;
	and.b32  	%r692, %r95, 16;
	setp.eq.s32 	%p243, %r692, 0;
	and.b32  	%r693, %r691, 514;
	shr.u32 	%r694, %r95, 5;
	selp.b32 	%r695, 1028, 0, %p242;
	mad.lo.s32 	%r696, %r694, 257, %r676;
	add.s32 	%r697, %r696, %r675;
	add.s32 	%r698, %r697, %r695;
	add.s32 	%r699, %r698, %r682;
	add.s32 	%r700, %r699, %r684;
	add.s32 	%r701, %r700, %r693;
	add.s32 	%r702, %r701, %r237;
	mul.wide.u32 	%rd47, %r702, 4;
	add.s64 	%rd8, %rd46, %rd47;
	add.s32 	%r703, %r690, 32;
	mul.wide.u32 	%rd48, %r703, 4;
	add.s64 	%rd9, %rd46, %rd48;
	selp.b32 	%r704, 32, 546, %p243;
	add.s32 	%r705, %r700, %r704;
	add.s32 	%r706, %r705, %r237;
	mul.wide.u32 	%rd49, %r706, 4;
	add.s64 	%rd10, %rd46, %rd49;
	mul.lo.s32 	%r707, %r349, 589824;
	mad.lo.s32 	%r708, %r353, 1152, %r707;
	cvt.s64.s32 	%rd11, %r708;
	cvt.u16.u32 	%rs51, %r95;
	and.b16  	%rs52, %rs51, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r709, %rs56;
	and.b32  	%r710, %r709, 255;
	or.b32  	%r711, %r3654, %r98;
	mul.wide.u32 	%rd50, %r672, 4;
	add.s64 	%rd12, %rd46, %rd50;
	add.s32 	%r712, %r690, 64;
	mul.wide.u32 	%rd51, %r712, 4;
	add.s64 	%rd13, %rd46, %rd51;
	add.s32 	%r713, %r702, 64;
	mul.wide.u32 	%rd52, %r713, 4;
	add.s64 	%rd14, %rd46, %rd52;
	add.s32 	%r714, %r690, 96;
	mul.wide.u32 	%rd53, %r714, 4;
	add.s64 	%rd15, %rd46, %rd53;
	add.s32 	%r715, %r706, 64;
	mul.wide.u32 	%rd54, %r715, 4;
	add.s64 	%rd16, %rd46, %rd54;
	add.s32 	%r716, %r690, 128;
	mul.wide.u32 	%rd55, %r716, 4;
	add.s64 	%rd17, %rd46, %rd55;
	add.s32 	%r717, %r702, 128;
	mul.wide.u32 	%rd56, %r717, 4;
	add.s64 	%rd18, %rd46, %rd56;
	add.s32 	%r718, %r690, 160;
	mul.wide.u32 	%rd57, %r718, 4;
	add.s64 	%rd19, %rd46, %rd57;
	add.s32 	%r719, %r706, 128;
	mul.wide.u32 	%rd58, %r719, 4;
	add.s64 	%rd20, %rd46, %rd58;
	add.s32 	%r720, %r690, 192;
	mul.wide.u32 	%rd59, %r720, 4;
	add.s64 	%rd21, %rd46, %rd59;
	add.s32 	%r721, %r702, 192;
	mul.wide.u32 	%rd60, %r721, 4;
	add.s64 	%rd22, %rd46, %rd60;
	add.s32 	%r722, %r690, 224;
	mul.wide.u32 	%rd61, %r722, 4;
	add.s64 	%rd23, %rd46, %rd61;
	add.s32 	%r723, %r706, 192;
	mul.wide.u32 	%rd62, %r723, 4;
	add.s64 	%rd24, %rd46, %rd62;
	mad.lo.s32 	%r121, %r710, 24, %r711;
	mad.lo.s32 	%r724, %r3, 24, %r3654;
	add.s32 	%r122, %r724, %r98;
	setp.lt.u32 	%p245, %r1, 16;
	setp.gt.u32 	%p274, %r3, 7;
	setp.lt.u32 	%p278, %r1, 24;
	mov.u32 	%r124, %r123;
	bra.uni 	$L__BB0_149;
$L__BB0_195:                            // %L28049
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r209, %r123, 48;
	setp.ne.s32 	%p356, %r123, 192;
	mov.u32 	%r123, %r209;
	@%p356 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_196;
$L__BB0_149:                            // %L1508
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_176 Depth 2
                                        //     Child Loop BB0_186 Depth 2
	add.s32 	%r725, %r123, %r347;
	setp.lt.s32 	%p244, %r725, %r348;
	@%p244 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_196;
$L__BB0_150:                            // %oksrem674
                                        //   in Loop: Header=BB0_149 Depth=1
	mul.hi.u32 	%r918, %r123, -1431655765;
	shr.u32 	%r919, %r918, 5;
	mul.lo.s32 	%r242, %r919, 48;
	add.s32 	%r920, %r242, %r3;
	cvt.u16.u32 	%rs57, %r920;
	shr.s16 	%rs58, %rs57, 15;
	shr.u16 	%rs59, %rs58, 8;
	add.s16 	%rs60, %rs57, %rs59;
	and.b16  	%rs61, %rs60, -256;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.s32.s16 	%r921, %rs62;
	shl.b32 	%r922, %r921, 15;
	or.b32  	%r923, %r922, %r91;
	or.b32  	%r924, %r923, %r92;
	or.b32  	%r925, %r924, %r93;
	add.s32 	%r926, %r89, %r925;
	shr.s32 	%r927, %r926, 31;
	shr.u32 	%r928, %r927, 9;
	add.s32 	%r929, %r926, %r928;
	shr.s32 	%r930, %r929, 23;
	setp.lt.s32 	%p246, %r926, 0;
	and.b32  	%r931, %r929, -8388608;
	setp.ne.s32 	%p247, %r931, %r926;
	and.pred  	%p248, %p246, %p247;
	selp.u32 	%r932, 1, 0, %p248;
	sub.s32 	%r933, %r932, %r930;
	shl.b32 	%r934, %r933, 23;
	add.s32 	%r935, %r934, %r926;
	mul.wide.s32 	%rd63, %r935, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r936, %r937, %r938, %r939}, [%rd64];
	or.b32  	%r940, %r922, %r90;
	or.b32  	%r941, %r94, %r940;
	add.s32 	%r942, %r89, %r941;
	shr.s32 	%r943, %r942, 31;
	shr.u32 	%r944, %r943, 9;
	add.s32 	%r945, %r942, %r944;
	shr.u32 	%r946, %r945, 23;
	shr.u32 	%r947, %r942, 31;
	sub.s32 	%r948, %r947, %r946;
	shl.b32 	%r949, %r948, 23;
	or.b32  	%r950, %r942, 1;
	add.s32 	%r951, %r950, %r949;
	mul.wide.s32 	%rd65, %r951, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r952, %r953, %r954, %r955}, [%rd66+-4];
	add.s32 	%r956, %r95, %r242;
	cvt.u16.u32 	%rs63, %r956;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 8;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -256;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.s32.s16 	%r957, %rs68;
	shl.b32 	%r958, %r957, 15;
	or.b32  	%r959, %r958, %r91;
	or.b32  	%r960, %r959, %r92;
	or.b32  	%r961, %r960, %r93;
	add.s32 	%r962, %r89, %r961;
	shr.s32 	%r963, %r962, 31;
	shr.u32 	%r964, %r963, 9;
	add.s32 	%r965, %r962, %r964;
	shr.s32 	%r966, %r965, 23;
	setp.lt.s32 	%p249, %r962, 0;
	and.b32  	%r967, %r965, -8388608;
	setp.ne.s32 	%p250, %r967, %r962;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r968, 1, 0, %p251;
	sub.s32 	%r969, %r968, %r966;
	shl.b32 	%r970, %r969, 23;
	add.s32 	%r971, %r970, %r962;
	mul.wide.s32 	%rd67, %r971, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r972, %r973, %r974, %r975}, [%rd68];
	or.b32  	%r976, %r958, %r90;
	or.b32  	%r977, %r94, %r976;
	add.s32 	%r978, %r89, %r977;
	shr.s32 	%r979, %r978, 31;
	shr.u32 	%r980, %r979, 9;
	add.s32 	%r981, %r978, %r980;
	shr.u32 	%r982, %r981, 23;
	shr.u32 	%r983, %r978, 31;
	sub.s32 	%r984, %r983, %r982;
	shl.b32 	%r985, %r984, 23;
	or.b32  	%r986, %r978, 1;
	add.s32 	%r987, %r986, %r985;
	mul.wide.s32 	%rd69, %r987, 4;
	add.s64 	%rd70, %rd3, %rd69;
	ld.global.v4.u32 	{%r988, %r989, %r990, %r991}, [%rd70+-4];
	selp.b32 	%r992, %r938, %r936, %p245;
	shfl.sync.bfly.b32	%r993, %r992, 16, 31, -1;
	selp.b32 	%r728, %r936, %r993, %p245;
	selp.b32 	%r733, %r993, %r938, %p245;
	selp.b32 	%r994, %r939, %r937, %p245;
	shfl.sync.bfly.b32	%r995, %r994, 16, 31, -1;
	selp.b32 	%r736, %r937, %r995, %p245;
	selp.b32 	%r741, %r995, %r939, %p245;
	selp.b32 	%r996, %r954, %r952, %p245;
	shfl.sync.bfly.b32	%r997, %r996, 16, 31, -1;
	selp.b32 	%r744, %r952, %r997, %p245;
	selp.b32 	%r749, %r997, %r954, %p245;
	selp.b32 	%r998, %r955, %r953, %p245;
	shfl.sync.bfly.b32	%r999, %r998, 16, 31, -1;
	selp.b32 	%r752, %r953, %r999, %p245;
	selp.b32 	%r757, %r999, %r955, %p245;
	selp.b32 	%r1000, %r974, %r972, %p245;
	shfl.sync.bfly.b32	%r1001, %r1000, 16, 31, -1;
	selp.b32 	%r760, %r972, %r1001, %p245;
	selp.b32 	%r765, %r1001, %r974, %p245;
	selp.b32 	%r1002, %r975, %r973, %p245;
	shfl.sync.bfly.b32	%r1003, %r1002, 16, 31, -1;
	selp.b32 	%r768, %r973, %r1003, %p245;
	selp.b32 	%r773, %r1003, %r975, %p245;
	selp.b32 	%r1004, %r990, %r988, %p245;
	shfl.sync.bfly.b32	%r1005, %r1004, 16, 31, -1;
	selp.b32 	%r776, %r988, %r1005, %p245;
	selp.b32 	%r781, %r1005, %r990, %p245;
	selp.b32 	%r1006, %r991, %r989, %p245;
	shfl.sync.bfly.b32	%r1007, %r1006, 16, 31, -1;
	selp.b32 	%r784, %r989, %r1007, %p245;
	selp.b32 	%r789, %r1007, %r991, %p245;
	shl.b32 	%r729, %r733, 4;
	mov.u32 	%r727, 252645135;
	// begin inline asm
	lop3.b32 %r791, %r727, %r728, %r729, 202;
	// end inline asm
	shr.u32 	%r732, %r728, 4;
	// begin inline asm
	lop3.b32 %r807, %r727, %r732, %r733, 202;
	// end inline asm
	shl.b32 	%r737, %r741, 4;
	// begin inline asm
	lop3.b32 %r799, %r727, %r736, %r737, 202;
	// end inline asm
	shr.u32 	%r740, %r736, 4;
	// begin inline asm
	lop3.b32 %r815, %r727, %r740, %r741, 202;
	// end inline asm
	shl.b32 	%r745, %r749, 4;
	// begin inline asm
	lop3.b32 %r823, %r727, %r744, %r745, 202;
	// end inline asm
	shr.u32 	%r748, %r744, 4;
	// begin inline asm
	lop3.b32 %r839, %r727, %r748, %r749, 202;
	// end inline asm
	shl.b32 	%r753, %r757, 4;
	// begin inline asm
	lop3.b32 %r831, %r727, %r752, %r753, 202;
	// end inline asm
	shr.u32 	%r756, %r752, 4;
	// begin inline asm
	lop3.b32 %r847, %r727, %r756, %r757, 202;
	// end inline asm
	shl.b32 	%r761, %r765, 4;
	// begin inline asm
	lop3.b32 %r792, %r727, %r760, %r761, 202;
	// end inline asm
	shr.u32 	%r764, %r760, 4;
	// begin inline asm
	lop3.b32 %r808, %r727, %r764, %r765, 202;
	// end inline asm
	shl.b32 	%r769, %r773, 4;
	// begin inline asm
	lop3.b32 %r800, %r727, %r768, %r769, 202;
	// end inline asm
	shr.u32 	%r772, %r768, 4;
	// begin inline asm
	lop3.b32 %r816, %r727, %r772, %r773, 202;
	// end inline asm
	shl.b32 	%r777, %r781, 4;
	// begin inline asm
	lop3.b32 %r824, %r727, %r776, %r777, 202;
	// end inline asm
	shr.u32 	%r780, %r776, 4;
	// begin inline asm
	lop3.b32 %r840, %r727, %r780, %r781, 202;
	// end inline asm
	shl.b32 	%r785, %r789, 4;
	// begin inline asm
	lop3.b32 %r832, %r727, %r784, %r785, 202;
	// end inline asm
	shr.u32 	%r788, %r784, 4;
	// begin inline asm
	lop3.b32 %r848, %r727, %r788, %r789, 202;
	// end inline asm
	mov.u32 	%r793, 25152;
	// begin inline asm
	prmt.b32 %r855, %r791, %r792, %r793;
	// end inline asm
	mov.u32 	%r797, 29521;
	// begin inline asm
	prmt.b32 %r887, %r791, %r792, %r797;
	// end inline asm
	// begin inline asm
	prmt.b32 %r863, %r799, %r800, %r793;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r799, %r800, %r797;
	// end inline asm
	// begin inline asm
	prmt.b32 %r856, %r807, %r808, %r793;
	// end inline asm
	// begin inline asm
	prmt.b32 %r888, %r807, %r808, %r797;
	// end inline asm
	// begin inline asm
	prmt.b32 %r864, %r815, %r816, %r793;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r815, %r816, %r797;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r823, %r824, %r793;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r823, %r824, %r797;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r831, %r832, %r793;
	// end inline asm
	// begin inline asm
	prmt.b32 %r911, %r831, %r832, %r797;
	// end inline asm
	// begin inline asm
	prmt.b32 %r872, %r839, %r840, %r793;
	// end inline asm
	// begin inline asm
	prmt.b32 %r904, %r839, %r840, %r797;
	// end inline asm
	// begin inline asm
	prmt.b32 %r880, %r847, %r848, %r793;
	// end inline asm
	// begin inline asm
	prmt.b32 %r912, %r847, %r848, %r797;
	// end inline asm
	mov.u32 	%r857, 21520;
	// begin inline asm
	prmt.b32 %r854, %r855, %r856, %r857;
	// end inline asm
	mov.u32 	%r861, 30258;
	// begin inline asm
	prmt.b32 %r858, %r855, %r856, %r861;
	// end inline asm
	// begin inline asm
	prmt.b32 %r862, %r863, %r864, %r857;
	// end inline asm
	// begin inline asm
	prmt.b32 %r866, %r863, %r864, %r861;
	// end inline asm
	// begin inline asm
	prmt.b32 %r870, %r871, %r872, %r857;
	// end inline asm
	// begin inline asm
	prmt.b32 %r874, %r871, %r872, %r861;
	// end inline asm
	// begin inline asm
	prmt.b32 %r878, %r879, %r880, %r857;
	// end inline asm
	// begin inline asm
	prmt.b32 %r882, %r879, %r880, %r861;
	// end inline asm
	// begin inline asm
	prmt.b32 %r886, %r887, %r888, %r857;
	// end inline asm
	// begin inline asm
	prmt.b32 %r890, %r887, %r888, %r861;
	// end inline asm
	// begin inline asm
	prmt.b32 %r894, %r895, %r896, %r857;
	// end inline asm
	// begin inline asm
	prmt.b32 %r898, %r895, %r896, %r861;
	// end inline asm
	// begin inline asm
	prmt.b32 %r902, %r903, %r904, %r857;
	// end inline asm
	// begin inline asm
	prmt.b32 %r906, %r903, %r904, %r861;
	// end inline asm
	// begin inline asm
	prmt.b32 %r910, %r911, %r912, %r857;
	// end inline asm
	// begin inline asm
	prmt.b32 %r914, %r911, %r912, %r861;
	// end inline asm
	mul.hi.s16 	%rs69, %rs57, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs57, %rs73;
	cvt.s32.s16 	%r1008, %rs74;
	add.s32 	%r1009, %r96, %r1008;
	mul.wide.s32 	%rd71, %r1009, 4;
	add.s64 	%rd73, %rd46, %rd71;
	st.shared.u32 	[%rd73], %r854;
	add.s32 	%r1010, %r1009, 128;
	mul.wide.u32 	%rd74, %r1010, 4;
	add.s64 	%rd75, %rd46, %rd74;
	st.shared.u32 	[%rd75], %r862;
	add.s32 	%r1011, %r1009, 64;
	mul.wide.u32 	%rd76, %r1011, 4;
	add.s64 	%rd77, %rd46, %rd76;
	st.shared.u32 	[%rd77], %r858;
	add.s32 	%r1012, %r1009, 192;
	mul.wide.u32 	%rd78, %r1012, 4;
	add.s64 	%rd79, %rd46, %rd78;
	st.shared.u32 	[%rd79], %r866;
	add.s32 	%r1013, %r97, %r1008;
	mul.wide.u32 	%rd80, %r1013, 4;
	add.s64 	%rd81, %rd46, %rd80;
	st.shared.u32 	[%rd81], %r870;
	add.s32 	%r1014, %r1013, 128;
	mul.wide.u32 	%rd82, %r1014, 4;
	add.s64 	%rd83, %rd46, %rd82;
	st.shared.u32 	[%rd83], %r878;
	add.s32 	%r1015, %r1013, 64;
	mul.wide.u32 	%rd84, %r1015, 4;
	add.s64 	%rd85, %rd46, %rd84;
	st.shared.u32 	[%rd85], %r874;
	add.s32 	%r1016, %r1013, 192;
	mul.wide.u32 	%rd86, %r1016, 4;
	add.s64 	%rd87, %rd46, %rd86;
	st.shared.u32 	[%rd87], %r882;
	add.s32 	%r1017, %r1009, 32;
	mul.wide.u32 	%rd88, %r1017, 4;
	add.s64 	%rd89, %rd46, %rd88;
	st.shared.u32 	[%rd89], %r886;
	add.s32 	%r1018, %r1009, 160;
	mul.wide.u32 	%rd90, %r1018, 4;
	add.s64 	%rd91, %rd46, %rd90;
	st.shared.u32 	[%rd91], %r894;
	add.s32 	%r1019, %r1009, 96;
	mul.wide.u32 	%rd92, %r1019, 4;
	add.s64 	%rd93, %rd46, %rd92;
	st.shared.u32 	[%rd93], %r890;
	add.s32 	%r1020, %r1009, 224;
	mul.wide.u32 	%rd94, %r1020, 4;
	add.s64 	%rd95, %rd46, %rd94;
	st.shared.u32 	[%rd95], %r898;
	add.s32 	%r1021, %r1013, 32;
	mul.wide.u32 	%rd96, %r1021, 4;
	add.s64 	%rd97, %rd46, %rd96;
	st.shared.u32 	[%rd97], %r902;
	add.s32 	%r1022, %r1013, 160;
	mul.wide.u32 	%rd98, %r1022, 4;
	add.s64 	%rd99, %rd46, %rd98;
	st.shared.u32 	[%rd99], %r910;
	add.s32 	%r1023, %r1013, 96;
	mul.wide.u32 	%rd100, %r1023, 4;
	add.s64 	%rd101, %rd46, %rd100;
	st.shared.u32 	[%rd101], %r906;
	add.s32 	%r1024, %r1013, 224;
	mul.wide.u32 	%rd102, %r1024, 4;
	add.s64 	%rd103, %rd46, %rd102;
	st.shared.u32 	[%rd103], %r914;
	bar.sync 	0;
	add.s32 	%r1025, %r242, %r98;
	cvt.u16.u32 	%rs75, %r1025;
	mul.hi.s16 	%rs76, %rs75, 10923;
	shr.u16 	%rs77, %rs76, 15;
	shr.s16 	%rs78, %rs76, 2;
	add.s16 	%rs79, %rs78, %rs77;
	mul.lo.s16 	%rs80, %rs79, 24;
	sub.s16 	%rs81, %rs75, %rs80;
	cvt.s32.s16 	%r243, %rs81;
	add.s32 	%r1026, %r99, %r243;
	mul.wide.s32 	%rd104, %r1026, 4;
	add.s64 	%rd105, %rd46, %rd104;
	ld.shared.u32 	%r244, [%rd105];
	add.s32 	%r1027, %r100, %r243;
	mul.wide.u32 	%rd106, %r1027, 4;
	add.s64 	%rd107, %rd46, %rd106;
	ld.shared.u32 	%r245, [%rd107];
	add.s32 	%r1028, %r101, %r243;
	mul.wide.u32 	%rd108, %r1028, 4;
	add.s64 	%rd109, %rd46, %rd108;
	ld.shared.u32 	%r246, [%rd109];
	add.s32 	%r1029, %r102, %r243;
	mul.wide.u32 	%rd110, %r1029, 4;
	add.s64 	%rd111, %rd46, %rd110;
	ld.shared.u32 	%r247, [%rd111];
	add.s32 	%r1030, %r103, %r243;
	mul.wide.u32 	%rd112, %r1030, 4;
	add.s64 	%rd113, %rd46, %rd112;
	ld.shared.u32 	%r248, [%rd113];
	add.s32 	%r1031, %r104, %r243;
	mul.wide.u32 	%rd114, %r1031, 4;
	add.s64 	%rd115, %rd46, %rd114;
	ld.shared.u32 	%r249, [%rd115];
	add.s32 	%r1032, %r105, %r243;
	mul.wide.u32 	%rd116, %r1032, 4;
	add.s64 	%rd117, %rd46, %rd116;
	ld.shared.u32 	%r250, [%rd117];
	add.s32 	%r1033, %r106, %r243;
	mul.wide.u32 	%rd118, %r1033, 4;
	add.s64 	%rd119, %rd46, %rd118;
	ld.shared.u32 	%r251, [%rd119];
	add.s32 	%r1034, %r107, %r243;
	mul.wide.u32 	%rd120, %r1034, 4;
	add.s64 	%rd121, %rd46, %rd120;
	ld.shared.u32 	%r252, [%rd121];
	add.s32 	%r1035, %r108, %r243;
	mul.wide.u32 	%rd122, %r1035, 4;
	add.s64 	%rd123, %rd46, %rd122;
	ld.shared.u32 	%r253, [%rd123];
	add.s32 	%r1036, %r109, %r243;
	mul.wide.u32 	%rd124, %r1036, 4;
	add.s64 	%rd125, %rd46, %rd124;
	ld.shared.u32 	%r254, [%rd125];
	add.s32 	%r1037, %r110, %r243;
	mul.wide.u32 	%rd126, %r1037, 4;
	add.s64 	%rd127, %rd46, %rd126;
	ld.shared.u32 	%r255, [%rd127];
	add.s32 	%r1038, %r111, %r243;
	mul.wide.u32 	%rd128, %r1038, 4;
	add.s64 	%rd129, %rd46, %rd128;
	ld.shared.u32 	%r256, [%rd129];
	add.s32 	%r1039, %r112, %r243;
	mul.wide.u32 	%rd130, %r1039, 4;
	add.s64 	%rd131, %rd46, %rd130;
	ld.shared.u32 	%r257, [%rd131];
	add.s32 	%r1040, %r113, %r243;
	mul.wide.u32 	%rd132, %r1040, 4;
	add.s64 	%rd133, %rd46, %rd132;
	ld.shared.u32 	%r258, [%rd133];
	add.s32 	%r1041, %r114, %r243;
	mul.wide.u32 	%rd134, %r1041, 4;
	add.s64 	%rd135, %rd46, %rd134;
	ld.shared.u32 	%r259, [%rd135];
	add.s32 	%r1042, %r115, %r243;
	mul.wide.u32 	%rd136, %r1042, 4;
	add.s64 	%rd137, %rd46, %rd136;
	ld.shared.u32 	%r260, [%rd137];
	add.s32 	%r1043, %r116, %r243;
	mul.wide.u32 	%rd138, %r1043, 4;
	add.s64 	%rd139, %rd46, %rd138;
	ld.shared.u32 	%r261, [%rd139];
	add.s32 	%r1044, %r117, %r243;
	mul.wide.u32 	%rd140, %r1044, 4;
	add.s64 	%rd141, %rd46, %rd140;
	ld.shared.u32 	%r262, [%rd141];
	add.s32 	%r1045, %r118, %r243;
	mul.wide.u32 	%rd142, %r1045, 4;
	add.s64 	%rd143, %rd46, %rd142;
	ld.shared.u32 	%r263, [%rd143];
	add.s32 	%r1046, %r119, %r243;
	mul.wide.u32 	%rd144, %r1046, 4;
	add.s64 	%rd145, %rd46, %rd144;
	ld.shared.u32 	%r264, [%rd145];
	add.s32 	%r1047, %r120, %r243;
	mul.wide.s32 	%rd146, %r1047, 4;
	add.s64 	%rd147, %rd46, %rd146;
	ld.shared.u32 	%r265, [%rd147];
	bar.sync 	0;
	shfl.sync.idx.b32	%r266, %r236, 0, 31, -1;
	shfl.sync.idx.b32	%r267, %r236, 1, 31, -1;
	shfl.sync.idx.b32	%r268, %r236, 2, 31, -1;
	shfl.sync.idx.b32	%r269, %r236, 3, 31, -1;
	shfl.sync.idx.b32	%r270, %r236, 4, 31, -1;
	shfl.sync.idx.b32	%r271, %r236, 5, 31, -1;
	shfl.sync.idx.b32	%r272, %r236, 6, 31, -1;
	shfl.sync.idx.b32	%r273, %r236, 7, 31, -1;
	shfl.sync.idx.b32	%r274, %r236, 8, 31, -1;
	shfl.sync.idx.b32	%r275, %r236, 9, 31, -1;
	shfl.sync.idx.b32	%r276, %r236, 10, 31, -1;
	shfl.sync.idx.b32	%r277, %r236, 11, 31, -1;
	shfl.sync.idx.b32	%r278, %r236, 12, 31, -1;
	shfl.sync.idx.b32	%r279, %r236, 13, 31, -1;
	shfl.sync.idx.b32	%r280, %r236, 14, 31, -1;
	shfl.sync.idx.b32	%r281, %r236, 15, 31, -1;
	shfl.sync.idx.b32	%r282, %r236, 16, 31, -1;
	shfl.sync.idx.b32	%r283, %r236, 17, 31, -1;
	shfl.sync.idx.b32	%r284, %r236, 18, 31, -1;
	shfl.sync.idx.b32	%r285, %r236, 19, 31, -1;
	shfl.sync.idx.b32	%r286, %r236, 20, 31, -1;
	shfl.sync.idx.b32	%r287, %r236, 21, 31, -1;
	shfl.sync.idx.b32	%r288, %r236, 22, 31, -1;
	shfl.sync.idx.b32	%r289, %r236, 23, 31, -1;
	setp.eq.s32 	%p252, %r266, 999999999;
	@%p252 bra 	$L__BB0_151;
// %bb.225:                             // %oksrem3327
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1048, %r266, %r243;
	mul.wide.s32 	%rd148, %r1048, 4;
	add.s64 	%rd150, %rd46, %rd148;
	st.shared.u32 	[%rd150], %r244;
	setp.eq.s32 	%p253, %r267, 999999999;
	@%p253 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3395
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1049, %r267, %r243;
	mul.wide.s32 	%rd151, %r1049, 4;
	add.s64 	%rd153, %rd46, %rd151;
	st.shared.u32 	[%rd153], %r245;
	setp.eq.s32 	%p254, %r268, 999999999;
	@%p254 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3463
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1050, %r268, %r243;
	mul.wide.s32 	%rd154, %r1050, 4;
	add.s64 	%rd156, %rd46, %rd154;
	st.shared.u32 	[%rd156], %r246;
	setp.eq.s32 	%p255, %r269, 999999999;
	@%p255 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3531
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1051, %r269, %r243;
	mul.wide.s32 	%rd157, %r1051, 4;
	add.s64 	%rd159, %rd46, %rd157;
	st.shared.u32 	[%rd159], %r247;
	setp.eq.s32 	%p256, %r270, 999999999;
	@%p256 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3599
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1052, %r270, %r243;
	mul.wide.s32 	%rd160, %r1052, 4;
	add.s64 	%rd162, %rd46, %rd160;
	st.shared.u32 	[%rd162], %r248;
	setp.eq.s32 	%p257, %r271, 999999999;
	@%p257 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3667
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1053, %r271, %r243;
	mul.wide.s32 	%rd163, %r1053, 4;
	add.s64 	%rd165, %rd46, %rd163;
	st.shared.u32 	[%rd165], %r249;
	setp.eq.s32 	%p258, %r272, 999999999;
	@%p258 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3735
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1054, %r272, %r243;
	mul.wide.s32 	%rd166, %r1054, 4;
	add.s64 	%rd168, %rd46, %rd166;
	st.shared.u32 	[%rd168], %r250;
	setp.eq.s32 	%p259, %r273, 999999999;
	@%p259 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3803
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1055, %r273, %r243;
	mul.wide.s32 	%rd169, %r1055, 4;
	add.s64 	%rd171, %rd46, %rd169;
	st.shared.u32 	[%rd171], %r251;
	setp.eq.s32 	%p260, %r274, 999999999;
	@%p260 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3871
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1056, %r274, %r243;
	mul.wide.s32 	%rd172, %r1056, 4;
	add.s64 	%rd174, %rd46, %rd172;
	st.shared.u32 	[%rd174], %r252;
	setp.eq.s32 	%p261, %r275, 999999999;
	@%p261 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3939
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1057, %r275, %r243;
	mul.wide.s32 	%rd175, %r1057, 4;
	add.s64 	%rd177, %rd46, %rd175;
	st.shared.u32 	[%rd177], %r253;
	setp.eq.s32 	%p262, %r276, 999999999;
	@%p262 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem4007
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1058, %r276, %r243;
	mul.wide.s32 	%rd178, %r1058, 4;
	add.s64 	%rd180, %rd46, %rd178;
	st.shared.u32 	[%rd180], %r254;
	setp.eq.s32 	%p263, %r277, 999999999;
	@%p263 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4075
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1059, %r277, %r243;
	mul.wide.s32 	%rd181, %r1059, 4;
	add.s64 	%rd183, %rd46, %rd181;
	st.shared.u32 	[%rd183], %r255;
	setp.eq.s32 	%p264, %r278, 999999999;
	@%p264 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4143
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1060, %r278, %r243;
	mul.wide.s32 	%rd184, %r1060, 4;
	add.s64 	%rd186, %rd46, %rd184;
	st.shared.u32 	[%rd186], %r256;
	setp.eq.s32 	%p265, %r279, 999999999;
	@%p265 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4211
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1061, %r279, %r243;
	mul.wide.s32 	%rd187, %r1061, 4;
	add.s64 	%rd189, %rd46, %rd187;
	st.shared.u32 	[%rd189], %r257;
	setp.eq.s32 	%p266, %r280, 999999999;
	@%p266 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4279
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1062, %r280, %r243;
	mul.wide.s32 	%rd190, %r1062, 4;
	add.s64 	%rd192, %rd46, %rd190;
	st.shared.u32 	[%rd192], %r258;
	setp.eq.s32 	%p267, %r281, 999999999;
	@%p267 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4347
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1063, %r281, %r243;
	mul.wide.s32 	%rd193, %r1063, 4;
	add.s64 	%rd195, %rd46, %rd193;
	st.shared.u32 	[%rd195], %r259;
	setp.eq.s32 	%p268, %r282, 999999999;
	@%p268 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4415
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1064, %r282, %r243;
	mul.wide.s32 	%rd196, %r1064, 4;
	add.s64 	%rd198, %rd46, %rd196;
	st.shared.u32 	[%rd198], %r260;
	setp.eq.s32 	%p269, %r283, 999999999;
	@%p269 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4483
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1065, %r283, %r243;
	mul.wide.s32 	%rd199, %r1065, 4;
	add.s64 	%rd201, %rd46, %rd199;
	st.shared.u32 	[%rd201], %r261;
	setp.eq.s32 	%p270, %r284, 999999999;
	@%p270 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4551
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1066, %r284, %r243;
	mul.wide.s32 	%rd202, %r1066, 4;
	add.s64 	%rd204, %rd46, %rd202;
	st.shared.u32 	[%rd204], %r262;
	setp.eq.s32 	%p271, %r285, 999999999;
	@%p271 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4619
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1067, %r285, %r243;
	mul.wide.s32 	%rd205, %r1067, 4;
	add.s64 	%rd207, %rd46, %rd205;
	st.shared.u32 	[%rd207], %r263;
	setp.eq.s32 	%p272, %r286, 999999999;
	@%p272 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4687
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1068, %r286, %r243;
	mul.wide.s32 	%rd208, %r1068, 4;
	add.s64 	%rd210, %rd46, %rd208;
	st.shared.u32 	[%rd210], %r264;
	setp.eq.s32 	%p273, %r287, 999999999;
	@%p273 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4756
                                        //   in Loop: Header=BB0_149 Depth=1
	selp.b32 	%r1069, 0, %r265, %p274;
	add.s32 	%r1070, %r287, %r243;
	mul.wide.s32 	%rd211, %r1070, 4;
	add.s64 	%rd213, %rd46, %rd211;
	st.shared.u32 	[%rd213], %r1069;
	setp.eq.s32 	%p275, %r288, 999999999;
	@%p275 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4824
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1071, %r288, %r243;
	mul.wide.s32 	%rd214, %r1071, 4;
	add.s64 	%rd216, %rd46, %rd214;
	mov.u32 	%r1072, 0;
	st.shared.u32 	[%rd216], %r1072;
	setp.eq.s32 	%p276, %r289, 999999999;
	@%p276 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4891
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1074, %r289, %r243;
	mul.wide.s32 	%rd217, %r1074, 4;
	add.s64 	%rd219, %rd46, %rd217;
	st.shared.u32 	[%rd219], %r1072;
	bar.sync 	0;
	mov.u32 	%r3659, %r1072;
	mov.u32 	%r3660, %r1072;
	mov.u32 	%r3661, %r1072;
	mov.u32 	%r3662, %r1072;
	mov.u32 	%r3663, %r1072;
	mov.u32 	%r3664, %r1072;
	mov.u32 	%r3665, %r1072;
	mov.u32 	%r3666, %r1072;
	mov.u32 	%r3667, %r1072;
	mov.u32 	%r3668, %r1072;
	mov.u32 	%r3669, %r1072;
	mov.u32 	%r3670, %r1072;
	mov.u32 	%r3671, %r1072;
	mov.u32 	%r3672, %r1072;
	mov.u32 	%r3673, %r1072;
	mov.u32 	%r3674, %r1072;
	mov.u32 	%r3675, %r1072;
	mov.u32 	%r3676, %r1072;
	mov.u32 	%r3677, %r1072;
	mov.u32 	%r3678, %r1072;
	mov.u32 	%r3679, %r1072;
	mov.u32 	%r3680, %r1072;
	mov.u32 	%r3681, %r1072;
	mov.u32 	%r3682, %r1072;
	@%p92 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4954
                                        //   in Loop: Header=BB0_149 Depth=1
	cvt.u16.u32 	%rs82, %r242;
	mul.hi.s16 	%rs83, %rs82, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs82, %rs87;
	cvt.s32.s16 	%r1075, %rs88;
	mul.wide.s32 	%rd220, %r1075, 4;
	add.s64 	%rd221, %rd12, %rd220;
	ld.shared.u32 	%r3659, [%rd221];
	ld.shared.u32 	%r3660, [%rd12+4];
	ld.shared.u32 	%r3661, [%rd12+8];
	ld.shared.u32 	%r3662, [%rd12+12];
	ld.shared.u32 	%r3663, [%rd12+16];
	ld.shared.u32 	%r3664, [%rd12+20];
	ld.shared.u32 	%r3665, [%rd12+24];
	ld.shared.u32 	%r3666, [%rd12+28];
	ld.shared.u32 	%r3667, [%rd12+32];
	ld.shared.u32 	%r3668, [%rd12+36];
	ld.shared.u32 	%r3669, [%rd12+40];
	ld.shared.u32 	%r3670, [%rd12+44];
	ld.shared.u32 	%r3671, [%rd12+48];
	ld.shared.u32 	%r3672, [%rd12+52];
	ld.shared.u32 	%r3673, [%rd12+56];
	ld.shared.u32 	%r3674, [%rd12+60];
	add.s16 	%rs89, %rs82, 16;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r1076, %rs95;
	mul.wide.s32 	%rd222, %r1076, 4;
	add.s64 	%rd223, %rd12, %rd222;
	ld.shared.u32 	%r3675, [%rd223];
	add.s16 	%rs96, %rs82, 17;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r1077, %rs102;
	mul.wide.s32 	%rd224, %r1077, 4;
	add.s64 	%rd225, %rd12, %rd224;
	ld.shared.u32 	%r3676, [%rd225];
	add.s16 	%rs103, %rs82, 18;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r1078, %rs109;
	mul.wide.s32 	%rd226, %r1078, 4;
	add.s64 	%rd227, %rd12, %rd226;
	ld.shared.u32 	%r3677, [%rd227];
	add.s16 	%rs110, %rs82, 19;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r1079, %rs116;
	mul.wide.s32 	%rd228, %r1079, 4;
	add.s64 	%rd229, %rd12, %rd228;
	ld.shared.u32 	%r3678, [%rd229];
	add.s16 	%rs117, %rs82, 20;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r1080, %rs123;
	mul.wide.s32 	%rd230, %r1080, 4;
	add.s64 	%rd231, %rd12, %rd230;
	ld.shared.u32 	%r3679, [%rd231];
	add.s16 	%rs124, %rs82, 21;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r1081, %rs130;
	mul.wide.s32 	%rd232, %r1081, 4;
	add.s64 	%rd233, %rd12, %rd232;
	ld.shared.u32 	%r3680, [%rd233];
	add.s16 	%rs131, %rs82, 22;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r1082, %rs137;
	mul.wide.s32 	%rd234, %r1082, 4;
	add.s64 	%rd235, %rd12, %rd234;
	ld.shared.u32 	%r3681, [%rd235];
	add.s16 	%rs138, %rs82, 23;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r1083, %rs144;
	mul.wide.s32 	%rd236, %r1083, 4;
	add.s64 	%rd237, %rd12, %rd236;
	ld.shared.u32 	%r3682, [%rd237];
$L__BB0_175:                            // %L14037
                                        //   in Loop: Header=BB0_149 Depth=1
	bar.sync 	0;
	mul.lo.s32 	%r1085, %r124, 589824;
	add.s32 	%r149, %r121, %r1085;
	add.s32 	%r150, %r122, %r1085;
	mov.u32 	%r3683, %r1072;
	bra.uni 	$L__BB0_176;
$L__BB0_184:                            // %L21041
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r124, %r124, 4;
	bar.sync 	0;
	add.s32 	%r3683, %r3683, 2359296;
	setp.ne.s32 	%p316, %r3683, 14155776;
	@%p316 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_185;
$L__BB0_176:                            // %L14063
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p279, %r3683, 0;
	selp.b32 	%r1623, %r3659, 0, %p279;
	setp.eq.s32 	%p280, %r3683, 2359296;
	selp.b32 	%r1624, %r3663, %r1623, %p280;
	setp.eq.s32 	%p281, %r3683, 4718592;
	selp.b32 	%r1625, %r3667, %r1624, %p281;
	setp.eq.s32 	%p282, %r3683, 7077888;
	selp.b32 	%r1626, %r3671, %r1625, %p282;
	setp.eq.s32 	%p283, %r3683, 9437184;
	selp.b32 	%r1627, %r3675, %r1626, %p283;
	setp.eq.s32 	%p284, %r3683, 11796480;
	selp.b32 	%r1628, %r3679, %r1627, %p284;
	selp.b32 	%r1629, %r3660, 0, %p279;
	selp.b32 	%r1630, %r3664, %r1629, %p280;
	selp.b32 	%r1631, %r3668, %r1630, %p281;
	selp.b32 	%r1632, %r3672, %r1631, %p282;
	selp.b32 	%r1633, %r3676, %r1632, %p283;
	selp.b32 	%r1634, %r3680, %r1633, %p284;
	selp.b32 	%r1635, %r3661, 0, %p279;
	selp.b32 	%r1636, %r3665, %r1635, %p280;
	selp.b32 	%r1637, %r3669, %r1636, %p281;
	selp.b32 	%r1638, %r3673, %r1637, %p282;
	selp.b32 	%r1639, %r3677, %r1638, %p283;
	selp.b32 	%r1640, %r3681, %r1639, %p284;
	selp.b32 	%r1641, %r3662, 0, %p279;
	selp.b32 	%r1642, %r3666, %r1641, %p280;
	selp.b32 	%r1643, %r3670, %r1642, %p281;
	selp.b32 	%r1644, %r3674, %r1643, %p282;
	selp.b32 	%r1645, %r3678, %r1644, %p283;
	selp.b32 	%r1646, %r3682, %r1645, %p284;
	mov.u16 	%rs182, 25600;
	// begin inline asm
	mov.b32 %r1091, {%rs182, %rs182};
	// end inline asm
	mov.u16 	%rs184, 21504;
	// begin inline asm
	mov.b32 %r1102, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1090, %r1628, -2004318072;
	mov.u32 	%r1227, 983055;
	// begin inline asm
	lop3.b32 %r1088, %r1227, %r1090, %r1091, 202;
	// end inline asm
	mov.u16 	%rs188, 18432;
	// begin inline asm
	mov.b32 %r1092, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1093, %r1091, %r1092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1096, %r1088, %r1093;
	// end inline asm
	mov.u32 	%r1238, 15728880;
	// begin inline asm
	lop3.b32 %r1099, %r1238, %r1090, %r1102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1103, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1104, %r1102, %r1103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1107, %r1099, %r1104;
	// end inline asm
	// begin inline asm
	mov.b32 %r1137, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1148, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1136, %r1634, -2004318072;
	// begin inline asm
	lop3.b32 %r1134, %r1227, %r1136, %r1137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1138, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1139, %r1137, %r1138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1142, %r1134, %r1139;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1145, %r1238, %r1136, %r1148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1149, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1150, %r1148, %r1149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1153, %r1145, %r1150;
	// end inline asm
	// begin inline asm
	mov.b32 %r1183, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1194, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1182, %r1640, -2004318072;
	// begin inline asm
	lop3.b32 %r1180, %r1227, %r1182, %r1183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1184, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1185, %r1183, %r1184;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1188, %r1180, %r1185;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1191, %r1238, %r1182, %r1194, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1195, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1196, %r1194, %r1195;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1199, %r1191, %r1196;
	// end inline asm
	// begin inline asm
	mov.b32 %r1229, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1240, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1228, %r1646, -2004318072;
	// begin inline asm
	lop3.b32 %r1226, %r1227, %r1228, %r1229, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1230, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1231, %r1229, %r1230;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1234, %r1226, %r1231;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1237, %r1238, %r1228, %r1240, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1241, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1242, %r1240, %r1241;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1245, %r1237, %r1242;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1096;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1270, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1107;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1273, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1142;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1276, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1153;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1279, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1188;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1282, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1199;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1285, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1234;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1288, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1245;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1291, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1357, %r1354}, {%r375, %r378}, {%r1270}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1366, %r1363}, {%r375, %r378}, {%r1273}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1375, %r1372}, {%r375, %r378}, {%r1276}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1384, %r1381}, {%r375, %r378}, {%r1279}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1393, %r1390}, {%r375, %r378}, {%r1282}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1402, %r1399}, {%r375, %r378}, {%r1285}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1411, %r1408}, {%r375, %r378}, {%r1288}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1420, %r1417}, {%r375, %r378}, {%r1291}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1350, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1352, %r1350, %r1354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r427, %r1357, %r1352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1359, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1361, %r1359, %r1363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r427, %r1366, %r1361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1368, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1370, %r1368, %r1372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r427, %r1375, %r1370;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1377, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r1377, %r1381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r427, %r1384, %r1379;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1386, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r1386, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r427, %r1393, %r1388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1397, %r1395, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1400, %r427, %r1402, %r1397;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1404, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1406, %r1404, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r427, %r1411, %r1406;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1413, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1415, %r1413, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r427, %r1420, %r1415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1422, %r430, %r1357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r427, %r1354, %r1422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1429, %r430, %r1366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1432, %r427, %r1363, %r1429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1436, %r430, %r1375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1439, %r427, %r1372, %r1436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1443, %r430, %r1384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1446, %r427, %r1381, %r1443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1450, %r430, %r1393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1453, %r427, %r1390, %r1450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1457, %r430, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1460, %r427, %r1399, %r1457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1464, %r430, %r1411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1467, %r427, %r1408, %r1464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r430, %r1420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r427, %r1417, %r1471;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1478, %r1479}, {%r471, %r477, %r474, %r480}, {%r1355, %r1425}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1488, %r1489}, {%r471, %r477, %r474, %r480}, {%r1364, %r1432}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1498, %r1499}, {%r471, %r477, %r474, %r480}, {%r1373, %r1439}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1508, %r1509}, {%r471, %r477, %r474, %r480}, {%r1382, %r1446}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1518, %r1519}, {%r471, %r477, %r474, %r480}, {%r1391, %r1453}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1528, %r1529}, {%r471, %r477, %r474, %r480}, {%r1400, %r1460}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1538, %r1539}, {%r471, %r477, %r474, %r480}, {%r1409, %r1467}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1548, %r1549}, {%r471, %r477, %r474, %r480}, {%r1418, %r1474}, {%r1072, %r1072};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3685, %r1072;
	mov.u32 	%r3686, %r1072;
	mov.u32 	%r3687, %r1072;
	mov.u32 	%r3688, %r1072;
	@%p278 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_177;
$L__BB0_250:                            // %oksrem6468
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3685, [%rd7];
	ld.shared.u32 	%r3686, [%rd8];
	ld.shared.u32 	%r3687, [%rd9];
	ld.shared.u32 	%r3688, [%rd10];
$L__BB0_177:                            // %L15693
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1682, %r1679}, {%r489, %r492}, {%r3685}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1691, %r1688}, {%r489, %r492}, {%r3686}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1700, %r1697}, {%r489, %r492}, {%r3687}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1709, %r1706}, {%r489, %r492}, {%r3688}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1675, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1677, %r1675, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r541, %r1682, %r1677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1684, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1686, %r1684, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r541, %r1691, %r1686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1693, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1695, %r1693, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r541, %r1700, %r1695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1702, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r1702, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r541, %r1709, %r1704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1711, %r544, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r541, %r1679, %r1711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r544, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r541, %r1688, %r1718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1725, %r544, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r541, %r1697, %r1725;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1732, %r544, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r541, %r1706, %r1732;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1739, %r1740}, {%r585, %r591, %r588, %r594}, {%r1680, %r1714}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1749, %r1750}, {%r585, %r591, %r588, %r594}, {%r1689, %r1721}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1759, %r1760}, {%r585, %r591, %r588, %r594}, {%r1698, %r1728}, {%r1072, %r1072};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1769, %r1770}, {%r585, %r591, %r588, %r594}, {%r1707, %r1735}, {%r1072, %r1072};
	// end inline asm
	mov.u32 	%r1814, 805318656;
	@%p278 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %pass6960
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r1779, %r1739, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r1740, %r1740, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1759, %r1759, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1760, %r1760, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1814, %r1790, %r1072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1798, %r1749, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1750, %r1750, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1769, %r1769, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1770, %r1770, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1814, %r1809, %r1072;
	// end inline asm
	add.s32 	%r1817, %r150, %r3683;
	cvt.s64.s32 	%rd238, %r1817;
	add.s64 	%rd239, %rd238, %rd11;
	mul.hi.s64 	%rd240, %rd239, 1024819115206086201;
	shr.u64 	%rd241, %rd240, 63;
	shr.s64 	%rd242, %rd240, 25;
	add.s64 	%rd243, %rd242, %rd241;
	setp.lt.s64 	%p286, %rd239, 0;
	mul.lo.s64 	%rd244, %rd243, 603979776;
	setp.ne.s64 	%p287, %rd244, %rd239;
	and.pred  	%p288, %p286, %p287;
	selp.s64 	%rd245, -1, 0, %p288;
	add.s64 	%rd246, %rd243, %rd245;
	mul.lo.s64 	%rd247, %rd246, -603979776;
	add.s64 	%rd248, %rd247, %rd239;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r1794;
	add.s32 	%r1818, %r149, %r3683;
	cvt.s64.s32 	%rd251, %r1818;
	add.s64 	%rd252, %rd251, %rd11;
	mul.hi.s64 	%rd253, %rd252, 1024819115206086201;
	shr.u64 	%rd254, %rd253, 63;
	shr.s64 	%rd255, %rd253, 25;
	add.s64 	%rd256, %rd255, %rd254;
	setp.lt.s64 	%p289, %rd252, 0;
	mul.lo.s64 	%rd257, %rd256, 603979776;
	setp.ne.s64 	%p290, %rd257, %rd252;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd258, -1, 0, %p291;
	add.s64 	%rd259, %rd256, %rd258;
	mul.lo.s64 	%rd260, %rd259, -603979776;
	add.s64 	%rd261, %rd260, %rd252;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd263, %rd4, %rd262;
	st.global.u32 	[%rd263], %r1813;
$L__BB0_178:                            // %L16223
                                        //   in Loop: Header=BB0_176 Depth=2
	mov.u32 	%r1819, 0;
	mov.u32 	%r3689, %r1819;
	mov.u32 	%r3690, %r1819;
	mov.u32 	%r3691, %r1819;
	mov.u32 	%r3692, %r1819;
	@%p278 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_179;
$L__BB0_252:                            // %oksrem7240
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3689, [%rd13];
	ld.shared.u32 	%r3690, [%rd14];
	ld.shared.u32 	%r3691, [%rd15];
	ld.shared.u32 	%r3692, [%rd16];
$L__BB0_179:                            // %L17299
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1855, %r1852}, {%r489, %r492}, {%r3689}, {%r1819, %r1819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1864, %r1861}, {%r489, %r492}, {%r3690}, {%r1819, %r1819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1873, %r1870}, {%r489, %r492}, {%r3691}, {%r1819, %r1819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1882, %r1879}, {%r489, %r492}, {%r3692}, {%r1819, %r1819};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1848, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1850, %r1848, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r541, %r1855, %r1850;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1857, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1859, %r1857, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1862, %r541, %r1864, %r1859;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1866, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r1866, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r541, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1875, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r1875, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r541, %r1882, %r1877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1884, %r544, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1887, %r541, %r1852, %r1884;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1891, %r544, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r541, %r1861, %r1891;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1898, %r544, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r541, %r1870, %r1898;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r544, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r541, %r1879, %r1905;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1912, %r1913}, {%r585, %r591, %r588, %r594}, {%r1853, %r1887}, {%r1819, %r1819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1922, %r1923}, {%r585, %r591, %r588, %r594}, {%r1862, %r1894}, {%r1819, %r1819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1932, %r1933}, {%r585, %r591, %r588, %r594}, {%r1871, %r1901}, {%r1819, %r1819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1942, %r1943}, {%r585, %r591, %r588, %r594}, {%r1880, %r1908}, {%r1819, %r1819};
	// end inline asm
	@%p278 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_180;
$L__BB0_253:                            // %pass7732
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r1952, %r1912, %r1912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r1913, %r1913, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r1932, %r1932, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r1933, %r1933, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1967, %r1814, %r1963, %r1819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1971, %r1922, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r1923, %r1923, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1978, %r1942, %r1942, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1982, %r1943, %r1943, %r1978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r1814, %r1982, %r1819;
	// end inline asm
	add.s32 	%r1990, %r150, %r3683;
	add.s32 	%r1991, %r1990, 589824;
	cvt.s64.s32 	%rd264, %r1991;
	add.s64 	%rd265, %rd264, %rd11;
	mul.hi.s64 	%rd266, %rd265, 1024819115206086201;
	shr.u64 	%rd267, %rd266, 63;
	shr.s64 	%rd268, %rd266, 25;
	add.s64 	%rd269, %rd268, %rd267;
	setp.lt.s64 	%p294, %rd265, 0;
	mul.lo.s64 	%rd270, %rd269, 603979776;
	setp.ne.s64 	%p295, %rd270, %rd265;
	and.pred  	%p296, %p294, %p295;
	selp.s64 	%rd271, -1, 0, %p296;
	add.s64 	%rd272, %rd269, %rd271;
	mul.lo.s64 	%rd273, %rd272, -603979776;
	add.s64 	%rd274, %rd273, %rd265;
	shl.b64 	%rd275, %rd274, 2;
	add.s64 	%rd276, %rd4, %rd275;
	st.global.u32 	[%rd276], %r1967;
	add.s32 	%r1992, %r149, %r3683;
	add.s32 	%r1993, %r1992, 589824;
	cvt.s64.s32 	%rd277, %r1993;
	add.s64 	%rd278, %rd277, %rd11;
	mul.hi.s64 	%rd279, %rd278, 1024819115206086201;
	shr.u64 	%rd280, %rd279, 63;
	shr.s64 	%rd281, %rd279, 25;
	add.s64 	%rd282, %rd281, %rd280;
	setp.lt.s64 	%p297, %rd278, 0;
	mul.lo.s64 	%rd283, %rd282, 603979776;
	setp.ne.s64 	%p298, %rd283, %rd278;
	and.pred  	%p299, %p297, %p298;
	selp.s64 	%rd284, -1, 0, %p299;
	add.s64 	%rd285, %rd282, %rd284;
	mul.lo.s64 	%rd286, %rd285, -603979776;
	add.s64 	%rd287, %rd286, %rd278;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r1986;
$L__BB0_180:                            // %L17829
                                        //   in Loop: Header=BB0_176 Depth=2
	mov.u32 	%r1994, 0;
	mov.u32 	%r3693, %r1994;
	mov.u32 	%r3694, %r1994;
	mov.u32 	%r3695, %r1994;
	mov.u32 	%r3696, %r1994;
	@%p278 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_181;
$L__BB0_254:                            // %oksrem8012
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3693, [%rd17];
	ld.shared.u32 	%r3694, [%rd18];
	ld.shared.u32 	%r3695, [%rd19];
	ld.shared.u32 	%r3696, [%rd20];
$L__BB0_181:                            // %L18905
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2030, %r2027}, {%r489, %r492}, {%r3693}, {%r1994, %r1994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2039, %r2036}, {%r489, %r492}, {%r3694}, {%r1994, %r1994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2048, %r2045}, {%r489, %r492}, {%r3695}, {%r1994, %r1994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2057, %r2054}, {%r489, %r492}, {%r3696}, {%r1994, %r1994};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2023, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2025, %r2023, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r541, %r2030, %r2025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2032, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2034, %r2032, %r2036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r541, %r2039, %r2034;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2041, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2043, %r2041, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r541, %r2048, %r2043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2050, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r2050, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r541, %r2057, %r2052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2059, %r544, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2062, %r541, %r2027, %r2059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2066, %r544, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2069, %r541, %r2036, %r2066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2073, %r544, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r541, %r2045, %r2073;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2080, %r544, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2083, %r541, %r2054, %r2080;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2087, %r2088}, {%r585, %r591, %r588, %r594}, {%r2028, %r2062}, {%r1994, %r1994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2097, %r2098}, {%r585, %r591, %r588, %r594}, {%r2037, %r2069}, {%r1994, %r1994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2107, %r2108}, {%r585, %r591, %r588, %r594}, {%r2046, %r2076}, {%r1994, %r1994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2117, %r2118}, {%r585, %r591, %r588, %r594}, {%r2055, %r2083}, {%r1994, %r1994};
	// end inline asm
	@%p278 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_182;
$L__BB0_255:                            // %pass8504
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2127, %r2087, %r2087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2130, %r2088, %r2088, %r2127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2134, %r2107, %r2107, %r2130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2138, %r2108, %r2108, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r1814, %r2138, %r1994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r2097, %r2097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r2098, %r2098, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2153, %r2117, %r2117, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r2118, %r2118, %r2153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2161, %r1814, %r2157, %r1994;
	// end inline asm
	add.s32 	%r2165, %r150, %r3683;
	add.s32 	%r2166, %r2165, 1179648;
	cvt.s64.s32 	%rd290, %r2166;
	add.s64 	%rd291, %rd290, %rd11;
	mul.hi.s64 	%rd292, %rd291, 1024819115206086201;
	shr.u64 	%rd293, %rd292, 63;
	shr.s64 	%rd294, %rd292, 25;
	add.s64 	%rd295, %rd294, %rd293;
	setp.lt.s64 	%p302, %rd291, 0;
	mul.lo.s64 	%rd296, %rd295, 603979776;
	setp.ne.s64 	%p303, %rd296, %rd291;
	and.pred  	%p304, %p302, %p303;
	selp.s64 	%rd297, -1, 0, %p304;
	add.s64 	%rd298, %rd295, %rd297;
	mul.lo.s64 	%rd299, %rd298, -603979776;
	add.s64 	%rd300, %rd299, %rd291;
	shl.b64 	%rd301, %rd300, 2;
	add.s64 	%rd302, %rd4, %rd301;
	st.global.u32 	[%rd302], %r2142;
	add.s32 	%r2167, %r149, %r3683;
	add.s32 	%r2168, %r2167, 1179648;
	cvt.s64.s32 	%rd303, %r2168;
	add.s64 	%rd304, %rd303, %rd11;
	mul.hi.s64 	%rd305, %rd304, 1024819115206086201;
	shr.u64 	%rd306, %rd305, 63;
	shr.s64 	%rd307, %rd305, 25;
	add.s64 	%rd308, %rd307, %rd306;
	setp.lt.s64 	%p305, %rd304, 0;
	mul.lo.s64 	%rd309, %rd308, 603979776;
	setp.ne.s64 	%p306, %rd309, %rd304;
	and.pred  	%p307, %p305, %p306;
	selp.s64 	%rd310, -1, 0, %p307;
	add.s64 	%rd311, %rd308, %rd310;
	mul.lo.s64 	%rd312, %rd311, -603979776;
	add.s64 	%rd313, %rd312, %rd304;
	shl.b64 	%rd314, %rd313, 2;
	add.s64 	%rd315, %rd4, %rd314;
	st.global.u32 	[%rd315], %r2161;
$L__BB0_182:                            // %L19435
                                        //   in Loop: Header=BB0_176 Depth=2
	mov.u32 	%r2169, 0;
	mov.u32 	%r3697, %r2169;
	mov.u32 	%r3698, %r2169;
	mov.u32 	%r3699, %r2169;
	mov.u32 	%r3700, %r2169;
	@%p278 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_183;
$L__BB0_256:                            // %oksrem8784
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3697, [%rd21];
	ld.shared.u32 	%r3698, [%rd22];
	ld.shared.u32 	%r3699, [%rd23];
	ld.shared.u32 	%r3700, [%rd24];
$L__BB0_183:                            // %L20511
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2205, %r2202}, {%r489, %r492}, {%r3697}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2214, %r2211}, {%r489, %r492}, {%r3698}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2223, %r2220}, {%r489, %r492}, {%r3699}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2232, %r2229}, {%r489, %r492}, {%r3700}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2198, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2200, %r2198, %r2202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2203, %r541, %r2205, %r2200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2207, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r2207, %r2211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r541, %r2214, %r2209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2216, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2218, %r2216, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2221, %r541, %r2223, %r2218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2225, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2227, %r2225, %r2229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r541, %r2232, %r2227;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2234, %r544, %r2205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2237, %r541, %r2202, %r2234;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2241, %r544, %r2214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2244, %r541, %r2211, %r2241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2248, %r544, %r2223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2251, %r541, %r2220, %r2248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r544, %r2232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2258, %r541, %r2229, %r2255;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2262, %r2263}, {%r585, %r591, %r588, %r594}, {%r2203, %r2237}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2272, %r2273}, {%r585, %r591, %r588, %r594}, {%r2212, %r2244}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2282, %r2283}, {%r585, %r591, %r588, %r594}, {%r2221, %r2251}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2292, %r2293}, {%r585, %r591, %r588, %r594}, {%r2230, %r2258}, {%r2169, %r2169};
	// end inline asm
	@%p278 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_184;
$L__BB0_257:                            // %pass9276
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2302, %r2262, %r2262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2305, %r2263, %r2263, %r2302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2309, %r2282, %r2282, %r2305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2313, %r2283, %r2283, %r2309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2317, %r1814, %r2313, %r2169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2321, %r2272, %r2272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2324, %r2273, %r2273, %r2321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2328, %r2292, %r2292, %r2324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2332, %r2293, %r2293, %r2328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2336, %r1814, %r2332, %r2169;
	// end inline asm
	add.s32 	%r2340, %r150, %r3683;
	add.s32 	%r2341, %r2340, 1769472;
	cvt.s64.s32 	%rd316, %r2341;
	add.s64 	%rd317, %rd316, %rd11;
	mul.hi.s64 	%rd318, %rd317, 1024819115206086201;
	shr.u64 	%rd319, %rd318, 63;
	shr.s64 	%rd320, %rd318, 25;
	add.s64 	%rd321, %rd320, %rd319;
	setp.lt.s64 	%p310, %rd317, 0;
	mul.lo.s64 	%rd322, %rd321, 603979776;
	setp.ne.s64 	%p311, %rd322, %rd317;
	and.pred  	%p312, %p310, %p311;
	selp.s64 	%rd323, -1, 0, %p312;
	add.s64 	%rd324, %rd321, %rd323;
	mul.lo.s64 	%rd325, %rd324, -603979776;
	add.s64 	%rd326, %rd325, %rd317;
	shl.b64 	%rd327, %rd326, 2;
	add.s64 	%rd328, %rd4, %rd327;
	st.global.u32 	[%rd328], %r2317;
	add.s32 	%r2342, %r149, %r3683;
	add.s32 	%r2343, %r2342, 1769472;
	cvt.s64.s32 	%rd329, %r2343;
	add.s64 	%rd330, %rd329, %rd11;
	mul.hi.s64 	%rd331, %rd330, 1024819115206086201;
	shr.u64 	%rd332, %rd331, 63;
	shr.s64 	%rd333, %rd331, 25;
	add.s64 	%rd334, %rd333, %rd332;
	setp.lt.s64 	%p313, %rd330, 0;
	mul.lo.s64 	%rd335, %rd334, 603979776;
	setp.ne.s64 	%p314, %rd335, %rd330;
	and.pred  	%p315, %p313, %p314;
	selp.s64 	%rd336, -1, 0, %p315;
	add.s64 	%rd337, %rd334, %rd336;
	mul.lo.s64 	%rd338, %rd337, -603979776;
	add.s64 	%rd339, %rd338, %rd330;
	shl.b64 	%rd340, %rd339, 2;
	add.s64 	%rd341, %rd4, %rd340;
	st.global.u32 	[%rd341], %r2336;
	bra.uni 	$L__BB0_184;
$L__BB0_185:                            // %L21057.preheader
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r179, %r149, %r3683;
	add.s32 	%r180, %r150, %r3683;
	mov.u32 	%r2344, 0;
	mov.u32 	%r3701, %r2344;
	bra.uni 	$L__BB0_186;
$L__BB0_194:                            // %L28035
                                        //   in Loop: Header=BB0_186 Depth=2
	add.s32 	%r124, %r124, 4;
	bar.sync 	0;
	add.s32 	%r3701, %r3701, 2359296;
	setp.ne.s32 	%p355, %r3701, 14155776;
	@%p355 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_195;
$L__BB0_186:                            // %L21057
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p318, %r3701, 0;
	selp.b32 	%r2882, %r3659, 0, %p318;
	setp.eq.s32 	%p319, %r3701, 2359296;
	selp.b32 	%r2883, %r3663, %r2882, %p319;
	setp.eq.s32 	%p320, %r3701, 4718592;
	selp.b32 	%r2884, %r3667, %r2883, %p320;
	setp.eq.s32 	%p321, %r3701, 7077888;
	selp.b32 	%r2885, %r3671, %r2884, %p321;
	setp.eq.s32 	%p322, %r3701, 9437184;
	selp.b32 	%r2886, %r3675, %r2885, %p322;
	setp.eq.s32 	%p323, %r3701, 11796480;
	selp.b32 	%r2887, %r3679, %r2886, %p323;
	selp.b32 	%r2888, %r3660, 0, %p318;
	selp.b32 	%r2889, %r3664, %r2888, %p319;
	selp.b32 	%r2890, %r3668, %r2889, %p320;
	selp.b32 	%r2891, %r3672, %r2890, %p321;
	selp.b32 	%r2892, %r3676, %r2891, %p322;
	selp.b32 	%r2893, %r3680, %r2892, %p323;
	selp.b32 	%r2894, %r3661, 0, %p318;
	selp.b32 	%r2895, %r3665, %r2894, %p319;
	selp.b32 	%r2896, %r3669, %r2895, %p320;
	selp.b32 	%r2897, %r3673, %r2896, %p321;
	selp.b32 	%r2898, %r3677, %r2897, %p322;
	selp.b32 	%r2899, %r3681, %r2898, %p323;
	selp.b32 	%r2900, %r3662, 0, %p318;
	selp.b32 	%r2901, %r3666, %r2900, %p319;
	selp.b32 	%r2902, %r3670, %r2901, %p320;
	selp.b32 	%r2903, %r3674, %r2902, %p321;
	selp.b32 	%r2904, %r3678, %r2903, %p322;
	selp.b32 	%r2905, %r3682, %r2904, %p323;
	// begin inline asm
	mov.b32 %r2372, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2383, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2906, %r2887, 8;
	xor.b32  	%r2382, %r2906, 8947848;
	// begin inline asm
	lop3.b32 %r2369, %r1227, %r2382, %r2372, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2373, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2374, %r2372, %r2373;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2377, %r2369, %r2374;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2380, %r1238, %r2382, %r2383, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2384, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2385, %r2383, %r2384;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2388, %r2380, %r2385;
	// end inline asm
	// begin inline asm
	mov.b32 %r2418, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2429, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2907, %r2893, 8;
	xor.b32  	%r2428, %r2907, 8947848;
	// begin inline asm
	lop3.b32 %r2415, %r1227, %r2428, %r2418, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2418, %r2419;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2423, %r2415, %r2420;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2426, %r1238, %r2428, %r2429, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2430, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2431, %r2429, %r2430;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2434, %r2426, %r2431;
	// end inline asm
	// begin inline asm
	mov.b32 %r2464, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2908, %r2899, 8;
	xor.b32  	%r2474, %r2908, 8947848;
	// begin inline asm
	lop3.b32 %r2461, %r1227, %r2474, %r2464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2465, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2466, %r2464, %r2465;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2469, %r2461, %r2466;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2472, %r1238, %r2474, %r2475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2476, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2477, %r2475, %r2476;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2480, %r2472, %r2477;
	// end inline asm
	// begin inline asm
	mov.b32 %r2510, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2521, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2909, %r2905, 8;
	xor.b32  	%r2520, %r2909, 8947848;
	// begin inline asm
	lop3.b32 %r2507, %r1227, %r2520, %r2510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2511, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2512, %r2510, %r2511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2515, %r2507, %r2512;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2518, %r1238, %r2520, %r2521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2522, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2523, %r2521, %r2522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2526, %r2518, %r2523;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2377;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2529, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2388;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2532, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2423;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2535, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2434;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2538, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2469;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2541, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2480;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2544, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2515;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2547, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2526;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2550, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2616, %r2613}, {%r375, %r378}, {%r2529}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2625, %r2622}, {%r375, %r378}, {%r2532}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2634, %r2631}, {%r375, %r378}, {%r2535}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2643, %r2640}, {%r375, %r378}, {%r2538}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2652, %r2649}, {%r375, %r378}, {%r2541}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2661, %r2658}, {%r375, %r378}, {%r2544}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2670, %r2667}, {%r375, %r378}, {%r2547}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2679, %r2676}, {%r375, %r378}, {%r2550}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2609, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2611, %r2609, %r2613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2614, %r427, %r2616, %r2611;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2618, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2620, %r2618, %r2622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2623, %r427, %r2625, %r2620;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2627, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2629, %r2627, %r2631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2632, %r427, %r2634, %r2629;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2636, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2638, %r2636, %r2640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2641, %r427, %r2643, %r2638;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2645, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2647, %r2645, %r2649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2650, %r427, %r2652, %r2647;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2654, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2656, %r2654, %r2658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2659, %r427, %r2661, %r2656;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2663, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2665, %r2663, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2668, %r427, %r2670, %r2665;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2672, %r430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2674, %r2672, %r2676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2677, %r427, %r2679, %r2674;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r430, %r2616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2684, %r427, %r2613, %r2681;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r430, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r427, %r2622, %r2688;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r430, %r2634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r427, %r2631, %r2695;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r430, %r2643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r427, %r2640, %r2702;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r430, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r427, %r2649, %r2709;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r430, %r2661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r427, %r2658, %r2716;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2723, %r430, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2726, %r427, %r2667, %r2723;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r430, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r427, %r2676, %r2730;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2737, %r2738}, {%r471, %r477, %r474, %r480}, {%r2614, %r2684}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2747, %r2748}, {%r471, %r477, %r474, %r480}, {%r2623, %r2691}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2757, %r2758}, {%r471, %r477, %r474, %r480}, {%r2632, %r2698}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2767, %r2768}, {%r471, %r477, %r474, %r480}, {%r2641, %r2705}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2777, %r2778}, {%r471, %r477, %r474, %r480}, {%r2650, %r2712}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2787, %r2788}, {%r471, %r477, %r474, %r480}, {%r2659, %r2719}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2797, %r2798}, {%r471, %r477, %r474, %r480}, {%r2668, %r2726}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2807, %r2808}, {%r471, %r477, %r474, %r480}, {%r2677, %r2733}, {%r2344, %r2344};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3703, %r2344;
	mov.u32 	%r3704, %r2344;
	mov.u32 	%r3705, %r2344;
	mov.u32 	%r3706, %r2344;
	@%p278 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_187;
$L__BB0_258:                            // %oksrem9607
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3706, [%rd7];
	ld.shared.u32 	%r3705, [%rd8];
	ld.shared.u32 	%r3704, [%rd9];
	ld.shared.u32 	%r3703, [%rd10];
$L__BB0_187:                            // %L22687
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2945, %r2942}, {%r489, %r492}, {%r3706}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2954, %r2951}, {%r489, %r492}, {%r3705}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2963, %r2960}, {%r489, %r492}, {%r3704}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2972, %r2969}, {%r489, %r492}, {%r3703}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2938, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2940, %r2938, %r2942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2943, %r541, %r2945, %r2940;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2947, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2949, %r2947, %r2951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2952, %r541, %r2954, %r2949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2956, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2958, %r2956, %r2960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r541, %r2963, %r2958;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2965, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2967, %r2965, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r541, %r2972, %r2967;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2974, %r544, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r541, %r2942, %r2974;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2981, %r544, %r2954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2984, %r541, %r2951, %r2981;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2988, %r544, %r2963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2991, %r541, %r2960, %r2988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2995, %r544, %r2972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2998, %r541, %r2969, %r2995;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3002, %r3003}, {%r585, %r591, %r588, %r594}, {%r2943, %r2977}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3012, %r3013}, {%r585, %r591, %r588, %r594}, {%r2952, %r2984}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3022, %r3023}, {%r585, %r591, %r588, %r594}, {%r2961, %r2991}, {%r2344, %r2344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3032, %r3033}, {%r585, %r591, %r588, %r594}, {%r2970, %r2998}, {%r2344, %r2344};
	// end inline asm
	@%p278 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_188;
$L__BB0_259:                            // %pass10099
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3042, %r3002, %r3002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3045, %r3003, %r3003, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3049, %r3022, %r3022, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r3023, %r3023, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r1814, %r3053, %r2344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3061, %r3012, %r3012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r3013, %r3013, %r3061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r3032, %r3032, %r3064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3072, %r3033, %r3033, %r3068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3076, %r1814, %r3072, %r2344;
	// end inline asm
	add.s32 	%r3080, %r180, %r3701;
	cvt.s64.s32 	%rd342, %r3080;
	add.s64 	%rd343, %rd342, %rd11;
	mul.hi.s64 	%rd344, %rd343, 1024819115206086201;
	shr.u64 	%rd345, %rd344, 63;
	shr.s64 	%rd346, %rd344, 25;
	add.s64 	%rd347, %rd346, %rd345;
	setp.lt.s64 	%p325, %rd343, 0;
	mul.lo.s64 	%rd348, %rd347, 603979776;
	setp.ne.s64 	%p326, %rd348, %rd343;
	and.pred  	%p327, %p325, %p326;
	selp.s64 	%rd349, -1, 0, %p327;
	add.s64 	%rd350, %rd347, %rd349;
	mul.lo.s64 	%rd351, %rd350, -603979776;
	add.s64 	%rd352, %rd351, %rd343;
	shl.b64 	%rd353, %rd352, 2;
	add.s64 	%rd354, %rd4, %rd353;
	st.global.u32 	[%rd354], %r3057;
	add.s32 	%r3081, %r179, %r3701;
	cvt.s64.s32 	%rd355, %r3081;
	add.s64 	%rd356, %rd355, %rd11;
	mul.hi.s64 	%rd357, %rd356, 1024819115206086201;
	shr.u64 	%rd358, %rd357, 63;
	shr.s64 	%rd359, %rd357, 25;
	add.s64 	%rd360, %rd359, %rd358;
	setp.lt.s64 	%p328, %rd356, 0;
	mul.lo.s64 	%rd361, %rd360, 603979776;
	setp.ne.s64 	%p329, %rd361, %rd356;
	and.pred  	%p330, %p328, %p329;
	selp.s64 	%rd362, -1, 0, %p330;
	add.s64 	%rd363, %rd360, %rd362;
	mul.lo.s64 	%rd364, %rd363, -603979776;
	add.s64 	%rd365, %rd364, %rd356;
	shl.b64 	%rd366, %rd365, 2;
	add.s64 	%rd367, %rd4, %rd366;
	st.global.u32 	[%rd367], %r3076;
$L__BB0_188:                            // %L23217
                                        //   in Loop: Header=BB0_186 Depth=2
	mov.u32 	%r3082, 0;
	mov.u32 	%r3707, %r3082;
	mov.u32 	%r3708, %r3082;
	mov.u32 	%r3709, %r3082;
	mov.u32 	%r3710, %r3082;
	@%p278 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_189;
$L__BB0_260:                            // %oksrem10379
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3710, [%rd13];
	ld.shared.u32 	%r3709, [%rd14];
	ld.shared.u32 	%r3708, [%rd15];
	ld.shared.u32 	%r3707, [%rd16];
$L__BB0_189:                            // %L24293
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3118, %r3115}, {%r489, %r492}, {%r3710}, {%r3082, %r3082};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3127, %r3124}, {%r489, %r492}, {%r3709}, {%r3082, %r3082};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3136, %r3133}, {%r489, %r492}, {%r3708}, {%r3082, %r3082};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3145, %r3142}, {%r489, %r492}, {%r3707}, {%r3082, %r3082};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3111, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3113, %r3111, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r541, %r3118, %r3113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3120, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3122, %r3120, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3125, %r541, %r3127, %r3122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3129, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r3129, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r541, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3138, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r3138, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r541, %r3145, %r3140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3147, %r544, %r3118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3150, %r541, %r3115, %r3147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3154, %r544, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3157, %r541, %r3124, %r3154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3161, %r544, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3164, %r541, %r3133, %r3161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3168, %r544, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r541, %r3142, %r3168;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3175, %r3176}, {%r585, %r591, %r588, %r594}, {%r3116, %r3150}, {%r3082, %r3082};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3185, %r3186}, {%r585, %r591, %r588, %r594}, {%r3125, %r3157}, {%r3082, %r3082};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3195, %r3196}, {%r585, %r591, %r588, %r594}, {%r3134, %r3164}, {%r3082, %r3082};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3205, %r3206}, {%r585, %r591, %r588, %r594}, {%r3143, %r3171}, {%r3082, %r3082};
	// end inline asm
	@%p278 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_190;
$L__BB0_261:                            // %pass10871
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3215, %r3175, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r3176, %r3176, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r3195, %r3195, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r3196, %r3196, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r1814, %r3226, %r3082;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3234, %r3185, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r3186, %r3186, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r3205, %r3205, %r3237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r3206, %r3206, %r3241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3249, %r1814, %r3245, %r3082;
	// end inline asm
	add.s32 	%r3253, %r180, %r3701;
	add.s32 	%r3254, %r3253, 589824;
	cvt.s64.s32 	%rd368, %r3254;
	add.s64 	%rd369, %rd368, %rd11;
	mul.hi.s64 	%rd370, %rd369, 1024819115206086201;
	shr.u64 	%rd371, %rd370, 63;
	shr.s64 	%rd372, %rd370, 25;
	add.s64 	%rd373, %rd372, %rd371;
	setp.lt.s64 	%p333, %rd369, 0;
	mul.lo.s64 	%rd374, %rd373, 603979776;
	setp.ne.s64 	%p334, %rd374, %rd369;
	and.pred  	%p335, %p333, %p334;
	selp.s64 	%rd375, -1, 0, %p335;
	add.s64 	%rd376, %rd373, %rd375;
	mul.lo.s64 	%rd377, %rd376, -603979776;
	add.s64 	%rd378, %rd377, %rd369;
	shl.b64 	%rd379, %rd378, 2;
	add.s64 	%rd380, %rd4, %rd379;
	st.global.u32 	[%rd380], %r3230;
	add.s32 	%r3255, %r179, %r3701;
	add.s32 	%r3256, %r3255, 589824;
	cvt.s64.s32 	%rd381, %r3256;
	add.s64 	%rd382, %rd381, %rd11;
	mul.hi.s64 	%rd383, %rd382, 1024819115206086201;
	shr.u64 	%rd384, %rd383, 63;
	shr.s64 	%rd385, %rd383, 25;
	add.s64 	%rd386, %rd385, %rd384;
	setp.lt.s64 	%p336, %rd382, 0;
	mul.lo.s64 	%rd387, %rd386, 603979776;
	setp.ne.s64 	%p337, %rd387, %rd382;
	and.pred  	%p338, %p336, %p337;
	selp.s64 	%rd388, -1, 0, %p338;
	add.s64 	%rd389, %rd386, %rd388;
	mul.lo.s64 	%rd390, %rd389, -603979776;
	add.s64 	%rd391, %rd390, %rd382;
	shl.b64 	%rd392, %rd391, 2;
	add.s64 	%rd393, %rd4, %rd392;
	st.global.u32 	[%rd393], %r3249;
$L__BB0_190:                            // %L24823
                                        //   in Loop: Header=BB0_186 Depth=2
	mov.u32 	%r3257, 0;
	mov.u32 	%r3711, %r3257;
	mov.u32 	%r3712, %r3257;
	mov.u32 	%r3713, %r3257;
	mov.u32 	%r3714, %r3257;
	@%p278 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_191;
$L__BB0_262:                            // %oksrem11151
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3714, [%rd17];
	ld.shared.u32 	%r3713, [%rd18];
	ld.shared.u32 	%r3712, [%rd19];
	ld.shared.u32 	%r3711, [%rd20];
$L__BB0_191:                            // %L25899
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3293, %r3290}, {%r489, %r492}, {%r3714}, {%r3257, %r3257};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3302, %r3299}, {%r489, %r492}, {%r3713}, {%r3257, %r3257};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3311, %r3308}, {%r489, %r492}, {%r3712}, {%r3257, %r3257};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3320, %r3317}, {%r489, %r492}, {%r3711}, {%r3257, %r3257};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3286, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3288, %r3286, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r541, %r3293, %r3288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3295, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r3295, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r541, %r3302, %r3297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3304, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3306, %r3304, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3309, %r541, %r3311, %r3306;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3313, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3315, %r3313, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r541, %r3320, %r3315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3322, %r544, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r541, %r3290, %r3322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3329, %r544, %r3302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3332, %r541, %r3299, %r3329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3336, %r544, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3339, %r541, %r3308, %r3336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3343, %r544, %r3320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3346, %r541, %r3317, %r3343;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3350, %r3351}, {%r585, %r591, %r588, %r594}, {%r3291, %r3325}, {%r3257, %r3257};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3360, %r3361}, {%r585, %r591, %r588, %r594}, {%r3300, %r3332}, {%r3257, %r3257};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3370, %r3371}, {%r585, %r591, %r588, %r594}, {%r3309, %r3339}, {%r3257, %r3257};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3380, %r3381}, {%r585, %r591, %r588, %r594}, {%r3318, %r3346}, {%r3257, %r3257};
	// end inline asm
	@%p278 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_192;
$L__BB0_263:                            // %pass11643
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3390, %r3350, %r3350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3393, %r3351, %r3351, %r3390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3397, %r3370, %r3370, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3401, %r3371, %r3371, %r3397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3405, %r1814, %r3401, %r3257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3409, %r3360, %r3360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3412, %r3361, %r3361, %r3409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3416, %r3380, %r3380, %r3412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3420, %r3381, %r3381, %r3416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3424, %r1814, %r3420, %r3257;
	// end inline asm
	add.s32 	%r3428, %r180, %r3701;
	add.s32 	%r3429, %r3428, 1179648;
	cvt.s64.s32 	%rd394, %r3429;
	add.s64 	%rd395, %rd394, %rd11;
	mul.hi.s64 	%rd396, %rd395, 1024819115206086201;
	shr.u64 	%rd397, %rd396, 63;
	shr.s64 	%rd398, %rd396, 25;
	add.s64 	%rd399, %rd398, %rd397;
	setp.lt.s64 	%p341, %rd395, 0;
	mul.lo.s64 	%rd400, %rd399, 603979776;
	setp.ne.s64 	%p342, %rd400, %rd395;
	and.pred  	%p343, %p341, %p342;
	selp.s64 	%rd401, -1, 0, %p343;
	add.s64 	%rd402, %rd399, %rd401;
	mul.lo.s64 	%rd403, %rd402, -603979776;
	add.s64 	%rd404, %rd403, %rd395;
	shl.b64 	%rd405, %rd404, 2;
	add.s64 	%rd406, %rd4, %rd405;
	st.global.u32 	[%rd406], %r3405;
	add.s32 	%r3430, %r179, %r3701;
	add.s32 	%r3431, %r3430, 1179648;
	cvt.s64.s32 	%rd407, %r3431;
	add.s64 	%rd408, %rd407, %rd11;
	mul.hi.s64 	%rd409, %rd408, 1024819115206086201;
	shr.u64 	%rd410, %rd409, 63;
	shr.s64 	%rd411, %rd409, 25;
	add.s64 	%rd412, %rd411, %rd410;
	setp.lt.s64 	%p344, %rd408, 0;
	mul.lo.s64 	%rd413, %rd412, 603979776;
	setp.ne.s64 	%p345, %rd413, %rd408;
	and.pred  	%p346, %p344, %p345;
	selp.s64 	%rd414, -1, 0, %p346;
	add.s64 	%rd415, %rd412, %rd414;
	mul.lo.s64 	%rd416, %rd415, -603979776;
	add.s64 	%rd417, %rd416, %rd408;
	shl.b64 	%rd418, %rd417, 2;
	add.s64 	%rd419, %rd4, %rd418;
	st.global.u32 	[%rd419], %r3424;
$L__BB0_192:                            // %L26429
                                        //   in Loop: Header=BB0_186 Depth=2
	mov.u32 	%r3432, 0;
	mov.u32 	%r3715, %r3432;
	mov.u32 	%r3716, %r3432;
	mov.u32 	%r3717, %r3432;
	mov.u32 	%r3718, %r3432;
	@%p278 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_193;
$L__BB0_264:                            // %oksrem11923
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3718, [%rd21];
	ld.shared.u32 	%r3717, [%rd22];
	ld.shared.u32 	%r3716, [%rd23];
	ld.shared.u32 	%r3715, [%rd24];
$L__BB0_193:                            // %L27505
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3468, %r3465}, {%r489, %r492}, {%r3718}, {%r3432, %r3432};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3477, %r3474}, {%r489, %r492}, {%r3717}, {%r3432, %r3432};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3486, %r3483}, {%r489, %r492}, {%r3716}, {%r3432, %r3432};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3495, %r3492}, {%r489, %r492}, {%r3715}, {%r3432, %r3432};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3461, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3463, %r3461, %r3465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3466, %r541, %r3468, %r3463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3470, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3472, %r3470, %r3474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3475, %r541, %r3477, %r3472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3479, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3481, %r3479, %r3483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r541, %r3486, %r3481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3488, %r544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3490, %r3488, %r3492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3493, %r541, %r3495, %r3490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3497, %r544, %r3468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r541, %r3465, %r3497;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3504, %r544, %r3477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r541, %r3474, %r3504;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3511, %r544, %r3486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r541, %r3483, %r3511;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3518, %r544, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r541, %r3492, %r3518;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3525, %r3526}, {%r585, %r591, %r588, %r594}, {%r3466, %r3500}, {%r3432, %r3432};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3535, %r3536}, {%r585, %r591, %r588, %r594}, {%r3475, %r3507}, {%r3432, %r3432};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3545, %r3546}, {%r585, %r591, %r588, %r594}, {%r3484, %r3514}, {%r3432, %r3432};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3555, %r3556}, {%r585, %r591, %r588, %r594}, {%r3493, %r3521}, {%r3432, %r3432};
	// end inline asm
	@%p278 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_194;
$L__BB0_265:                            // %pass12415
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3565, %r3525, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3568, %r3526, %r3526, %r3565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3572, %r3545, %r3545, %r3568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3576, %r3546, %r3546, %r3572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3580, %r1814, %r3576, %r3432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3584, %r3535, %r3535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3587, %r3536, %r3536, %r3584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3591, %r3555, %r3555, %r3587;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3595, %r3556, %r3556, %r3591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3599, %r1814, %r3595, %r3432;
	// end inline asm
	add.s32 	%r3603, %r180, %r3701;
	add.s32 	%r3604, %r3603, 1769472;
	cvt.s64.s32 	%rd420, %r3604;
	add.s64 	%rd421, %rd420, %rd11;
	mul.hi.s64 	%rd422, %rd421, 1024819115206086201;
	shr.u64 	%rd423, %rd422, 63;
	shr.s64 	%rd424, %rd422, 25;
	add.s64 	%rd425, %rd424, %rd423;
	setp.lt.s64 	%p349, %rd421, 0;
	mul.lo.s64 	%rd426, %rd425, 603979776;
	setp.ne.s64 	%p350, %rd426, %rd421;
	and.pred  	%p351, %p349, %p350;
	selp.s64 	%rd427, -1, 0, %p351;
	add.s64 	%rd428, %rd425, %rd427;
	mul.lo.s64 	%rd429, %rd428, -603979776;
	add.s64 	%rd430, %rd429, %rd421;
	shl.b64 	%rd431, %rd430, 2;
	add.s64 	%rd432, %rd4, %rd431;
	st.global.u32 	[%rd432], %r3580;
	add.s32 	%r3605, %r179, %r3701;
	add.s32 	%r3606, %r3605, 1769472;
	cvt.s64.s32 	%rd433, %r3606;
	add.s64 	%rd434, %rd433, %rd11;
	mul.hi.s64 	%rd435, %rd434, 1024819115206086201;
	shr.u64 	%rd436, %rd435, 63;
	shr.s64 	%rd437, %rd435, 25;
	add.s64 	%rd438, %rd437, %rd436;
	setp.lt.s64 	%p352, %rd434, 0;
	mul.lo.s64 	%rd439, %rd438, 603979776;
	setp.ne.s64 	%p353, %rd439, %rd434;
	and.pred  	%p354, %p352, %p353;
	selp.s64 	%rd440, -1, 0, %p354;
	add.s64 	%rd441, %rd438, %rd440;
	mul.lo.s64 	%rd442, %rd441, -603979776;
	add.s64 	%rd443, %rd442, %rd434;
	shl.b64 	%rd444, %rd443, 2;
	add.s64 	%rd445, %rd4, %rd444;
	st.global.u32 	[%rd445], %r3599;
	bra.uni 	$L__BB0_194;
$L__BB0_196:                            // %L28061
	mov.u32 	%r3607, 0;
	st.global.u32 	[%rd6], %r3607;
	ret;
$L__BB0_151:                            // %L7479
	mov.u32 	%r3631, 5;
	st.global.u32 	[%rd6], %r3631;
	mov.u64 	%rd492, exception2371;
	cvta.global.u64 	%rd493, %rd492;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd493;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7639
	mov.u32 	%r3630, 5;
	st.global.u32 	[%rd6], %r3630;
	mov.u64 	%rd490, exception2371;
	cvta.global.u64 	%rd491, %rd490;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd491;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7799
	mov.u32 	%r3629, 5;
	st.global.u32 	[%rd6], %r3629;
	mov.u64 	%rd488, exception2371;
	cvta.global.u64 	%rd489, %rd488;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd489;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7959
	mov.u32 	%r3628, 5;
	st.global.u32 	[%rd6], %r3628;
	mov.u64 	%rd486, exception2371;
	cvta.global.u64 	%rd487, %rd486;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd487;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8119
	mov.u32 	%r3627, 5;
	st.global.u32 	[%rd6], %r3627;
	mov.u64 	%rd484, exception2371;
	cvta.global.u64 	%rd485, %rd484;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd485;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8279
	mov.u32 	%r3626, 5;
	st.global.u32 	[%rd6], %r3626;
	mov.u64 	%rd482, exception2371;
	cvta.global.u64 	%rd483, %rd482;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd483;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8439
	mov.u32 	%r3625, 5;
	st.global.u32 	[%rd6], %r3625;
	mov.u64 	%rd480, exception2371;
	cvta.global.u64 	%rd481, %rd480;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd481;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8599
	mov.u32 	%r3624, 5;
	st.global.u32 	[%rd6], %r3624;
	mov.u64 	%rd478, exception2371;
	cvta.global.u64 	%rd479, %rd478;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd479;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8759
	mov.u32 	%r3623, 5;
	st.global.u32 	[%rd6], %r3623;
	mov.u64 	%rd476, exception2371;
	cvta.global.u64 	%rd477, %rd476;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd477;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8919
	mov.u32 	%r3622, 5;
	st.global.u32 	[%rd6], %r3622;
	mov.u64 	%rd474, exception2371;
	cvta.global.u64 	%rd475, %rd474;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd475;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L9079
	mov.u32 	%r3621, 5;
	st.global.u32 	[%rd6], %r3621;
	mov.u64 	%rd472, exception2371;
	cvta.global.u64 	%rd473, %rd472;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd473;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9239
	mov.u32 	%r3620, 5;
	st.global.u32 	[%rd6], %r3620;
	mov.u64 	%rd470, exception2371;
	cvta.global.u64 	%rd471, %rd470;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd471;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9399
	mov.u32 	%r3619, 5;
	st.global.u32 	[%rd6], %r3619;
	mov.u64 	%rd468, exception2371;
	cvta.global.u64 	%rd469, %rd468;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd469;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9559
	mov.u32 	%r3618, 5;
	st.global.u32 	[%rd6], %r3618;
	mov.u64 	%rd466, exception2371;
	cvta.global.u64 	%rd467, %rd466;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd467;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9719
	mov.u32 	%r3617, 5;
	st.global.u32 	[%rd6], %r3617;
	mov.u64 	%rd464, exception2371;
	cvta.global.u64 	%rd465, %rd464;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd465;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9879
	mov.u32 	%r3616, 5;
	st.global.u32 	[%rd6], %r3616;
	mov.u64 	%rd462, exception2371;
	cvta.global.u64 	%rd463, %rd462;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd463;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L10039
	mov.u32 	%r3615, 5;
	st.global.u32 	[%rd6], %r3615;
	mov.u64 	%rd460, exception2371;
	cvta.global.u64 	%rd461, %rd460;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd461;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10199
	mov.u32 	%r3614, 5;
	st.global.u32 	[%rd6], %r3614;
	mov.u64 	%rd458, exception2371;
	cvta.global.u64 	%rd459, %rd458;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd459;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10359
	mov.u32 	%r3613, 5;
	st.global.u32 	[%rd6], %r3613;
	mov.u64 	%rd456, exception2371;
	cvta.global.u64 	%rd457, %rd456;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd457;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10519
	mov.u32 	%r3612, 5;
	st.global.u32 	[%rd6], %r3612;
	mov.u64 	%rd454, exception2371;
	cvta.global.u64 	%rd455, %rd454;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd455;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10679
	mov.u32 	%r3611, 5;
	st.global.u32 	[%rd6], %r3611;
	mov.u64 	%rd452, exception2371;
	cvta.global.u64 	%rd453, %rd452;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd453;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10865
	mov.u32 	%r3610, 5;
	st.global.u32 	[%rd6], %r3610;
	mov.u64 	%rd450, exception2371;
	cvta.global.u64 	%rd451, %rd450;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd451;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L11025
	mov.u32 	%r3609, 5;
	st.global.u32 	[%rd6], %r3609;
	mov.u64 	%rd448, exception2371;
	cvta.global.u64 	%rd449, %rd448;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd449;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11185
	mov.u32 	%r3608, 5;
	st.global.u32 	[%rd6], %r3608;
	mov.u64 	%rd446, exception2371;
	cvta.global.u64 	%rd447, %rd446;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd447;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L312
	mov.u32 	%r3632, 3;
	st.global.u32 	[%rd6], %r3632;
	mov.u64 	%rd494, exception2371;
	cvta.global.u64 	%rd495, %rd494;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd495;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3633, 2;
	st.global.u32 	[%rd6], %r3633;
	mov.u64 	%rd496, exception2371;
	cvta.global.u64 	%rd497, %rd496;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd497;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1149
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r3};
	st.local.v2.u32 	[%rd5+8], {%r2, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r605, [retval0+0];
	} // callseq 61
	mov.u32 	%r607, 4;
	st.global.u32 	[%rd6], %r607;
	mov.u64 	%rd39, exception2371;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r346;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
