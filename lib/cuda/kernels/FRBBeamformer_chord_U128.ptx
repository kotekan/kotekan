// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4036[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<360>;
	.reg .b16 	%rs<242>;
	.reg .b32 	%r<3799>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<530>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r376, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r385, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r385, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd42, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r377, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r386, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r387, %r386, %r1;
	add.s32 	%r388, %r387, %r4;
	mul.wide.u32 	%rd49, %r388, 4;
	add.s64 	%rd6, %rd42, %rd49;
	mov.u32 	%r389, 1;
	st.global.u32 	[%rd6], %r389;
	setp.gt.u32 	%p4, %r377, 255;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r378, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r378, %r377;
	setp.gt.s32 	%p6, %r378, 511;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r379, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r378, %r377;
	mad.lo.s32 	%r390, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r391, %r390, %r390, 4;
	setp.gt.u32 	%p8, %r391, 89478484;
	setp.gt.u32 	%p9, %r379, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r380, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r380, %r379;
	setp.lt.s32 	%p12, %r380, 2048;
	and.pred  	%p13, %p11, %p12;
	sub.s32 	%r392, %r380, %r379;
	setp.eq.s32 	%p14, %r392, %r5;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %L258
	ld.param.u32 	%r381, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r381, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.8:                               // %L260
	ld.param.u32 	%r382, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r382, %r381;
	setp.gt.s32 	%p18, %r382, 128;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.9:                               // %L270
	ld.param.u32 	%r383, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r382, %r381;
	and.b32  	%r393, %r6, 127;
	setp.ne.s32 	%p20, %r393, 0;
	setp.lt.s32 	%p21, %r383, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r384, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r384, %r383;
	setp.gt.s32 	%p24, %r384, 512;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r394, %r384, %r383;
	and.b32  	%r395, %r394, 127;
	setp.eq.s32 	%p26, %r395, 0;
	setp.eq.s32 	%p27, %r394, %r6;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_12;
$L__BB0_199:                            // %pass162
	and.b32  	%r240, %r1, 3;
	shr.u32 	%r241, %r1, 2;
	mul.lo.s32 	%r396, %r240, %r241;
	and.b32  	%r397, %r396, 7;
	cvt.rn.f32.s32 	%f201, %r397;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p29, %f785, 0f40000000;
	setp.gtu.f32 	%p359, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p29 bra 	$L__BB0_211;
// %bb.200:
	@%p359 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_201;
$L__BB0_207:
	mov.b32 	%r243, %f785;
	and.b32  	%r398, %r243, 8388607;
	or.b32  	%r3794, %r398, 1065353216;
	mov.b32 	%f780, %r3794;
	add.s32 	%r399, %r243, -1073741824;
	and.b32  	%r3795, %r399, -8388608;
	setp.eq.s32 	%p36, %r3795, 0;
	@%p36 bra 	$L__BB0_210;
// %bb.208:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_209:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r400, %r3795, 192937984;
	add.s32 	%r401, %r3794, %r400;
	mov.b32 	%f213, %r401;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3795, %r3795, %r400;
	mov.b32 	%r3794, %f780;
	setp.ne.s32 	%p37, %r3795, 0;
	setp.ne.s32 	%p38, %r3794, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_209;
$L__BB0_210:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r243, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_211;
$L__BB0_201:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r242, %f172;
	setp.lt.u32 	%p31, %r242, 1073741824;
	@%p31 bra 	$L__BB0_206;
// %bb.202:
	setp.lt.u32 	%p32, %r242, -2147483647;
	@%p32 bra 	$L__BB0_204;
// %bb.203:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p35;
	bra.uni 	$L__BB0_206;
$L__BB0_204:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_206;
// %bb.205:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p34;
$L__BB0_206:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_211:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p41, %f222, 0f7F800000;
	mov.b32 	%r402, %f169;
	and.b32  	%r250, %r402, -2147483648;
	@%p41 bra 	$L__BB0_213;
// %bb.212:
	mov.b32 	%r403, %f781;
	or.b32  	%r404, %r250, %r403;
	mov.b32 	%f781, %r404;
$L__BB0_213:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r253, %r1, 1;
	and.b32  	%r254, %r253, 6;
	or.b32  	%r255, %r254, 1;
	setp.eq.s32 	%p49, %r254, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3709, %r254, %r241;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p49 bra 	$L__BB0_28;
// %bb.13:                              // %L487
	cvt.u16.u32 	%rs1, %r3709;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p50, %f733, 0f40000000;
	@%p50 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p51, %f733, 0f4B800000;
	@%p51 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r8, %f733;
	and.b32  	%r420, %r8, 8388607;
	or.b32  	%r3713, %r420, 1065353216;
	mov.b32 	%f732, %r3713;
	add.s32 	%r421, %r8, -1073741824;
	and.b32  	%r3714, %r421, -8388608;
	setp.eq.s32 	%p57, %r3714, 0;
	@%p57 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1017.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1017
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r422, %r3714, 192937984;
	add.s32 	%r423, %r3713, %r422;
	mov.b32 	%f267, %r423;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3714, %r3714, %r422;
	mov.b32 	%r3713, %f732;
	setp.ne.s32 	%p58, %r3714, 0;
	setp.ne.s32 	%p59, %r3713, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1019
	setp.gt.u32 	%p61, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i996
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p52, %r7, 1073741824;
	@%p52 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p53, %r7, -2147483647;
	@%p53 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p56, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p56;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p54, %f4, 0f40800000;
	@%p54 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1000
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p55, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p55;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1003
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1022
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p62, %f276, 0f7F800000;
	@%p62 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r424, %f1;
	and.b32  	%r425, %r424, -2147483648;
	mov.b32 	%r426, %f733;
	or.b32  	%r427, %r425, %r426;
	mov.b32 	%f733, %r427;
$L__BB0_27:                             // %__nv_fmodf.exit1023
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r428, %f277;
	and.b32  	%r429, %r428, -2147483648;
	or.b32  	%r430, %r429, 1056964608;
	mov.b32 	%f278, %r430;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p63, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p63;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p64, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p64;
	cvt.rzi.s32.f32 	%r431, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r432, %r431, 1;
	setp.eq.b32 	%p65, %r432, 1;
	selp.f32 	%f296, %f294, %f295, %p65;
	selp.f32 	%f297, %f295, %f294, %p65;
	and.b32  	%r433, %r431, 2;
	setp.eq.s32 	%p66, %r433, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p66;
	add.s32 	%r434, %r431, 1;
	and.b32  	%r435, %r434, 2;
	setp.eq.s32 	%p67, %r435, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p67;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p68, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p68;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p69, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p69;
$L__BB0_28:                             // %L521
	setp.gt.u32 	%p70, %r255, 5;
	mul.lo.s32 	%r3710, %r255, %r241;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p70 bra 	$L__BB0_44;
// %bb.29:                              // %L525
	mul.hi.u32 	%r437, %r3710, -1431655765;
	shr.u32 	%r438, %r437, 5;
	mul.lo.s32 	%r439, %r438, 48;
	sub.s32 	%r440, %r3710, %r439;
	cvt.rn.f32.s32 	%f308, %r440;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p71, %f739, 0f40000000;
	@%p71 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p72, %f739, 0f4B800000;
	@%p72 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r16, %f739;
	and.b32  	%r441, %r16, 8388607;
	or.b32  	%r3715, %r441, 1065353216;
	mov.b32 	%f738, %r3715;
	add.s32 	%r442, %r16, -1073741824;
	and.b32  	%r3716, %r442, -8388608;
	setp.eq.s32 	%p78, %r3716, 0;
	@%p78 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1048.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1048
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r443, %r3716, 192937984;
	add.s32 	%r444, %r3715, %r443;
	mov.b32 	%f320, %r444;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3716, %r3716, %r443;
	mov.b32 	%r3715, %f738;
	setp.ne.s32 	%p79, %r3716, 0;
	setp.ne.s32 	%p80, %r3715, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1050
	setp.gt.u32 	%p82, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i1027
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p73, %r15, 1073741824;
	@%p73 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p74, %r15, -2147483647;
	@%p74 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p77, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p77;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p75, %f25, 0f40800000;
	@%p75 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i1031
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p76, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p76;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1034
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1053
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p83, %f329, 0f7F800000;
	@%p83 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r445, %f22;
	and.b32  	%r446, %r445, -2147483648;
	mov.b32 	%r447, %f739;
	or.b32  	%r448, %r446, %r447;
	mov.b32 	%f739, %r448;
$L__BB0_43:                             // %__nv_fmodf.exit1054
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r449, %f330;
	and.b32  	%r450, %r449, -2147483648;
	or.b32  	%r451, %r450, 1056964608;
	mov.b32 	%f331, %r451;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p84, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p84;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p85, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p85;
	cvt.rzi.s32.f32 	%r452, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r453, %r452, 1;
	setp.eq.b32 	%p86, %r453, 1;
	selp.f32 	%f349, %f347, %f348, %p86;
	selp.f32 	%f350, %f348, %f347, %p86;
	and.b32  	%r454, %r452, 2;
	setp.eq.s32 	%p87, %r454, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p87;
	add.s32 	%r455, %r452, 1;
	and.b32  	%r456, %r455, 2;
	setp.eq.s32 	%p88, %r456, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p88;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p89, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p89;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p90, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p90;
$L__BB0_44:                             // %L559
	setp.gt.u32 	%p92, %r1, 23;
	or.pred  	%p1, %p49, %p92;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L597
	cvt.u16.u32 	%rs8, %r3709;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p93, %f745, 0f40000000;
	@%p93 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p94, %f745, 0f4B800000;
	@%p94 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r26, %f745;
	and.b32  	%r464, %r26, 8388607;
	or.b32  	%r3717, %r464, 1065353216;
	mov.b32 	%f744, %r3717;
	add.s32 	%r465, %r26, -1073741824;
	and.b32  	%r3718, %r465, -8388608;
	setp.eq.s32 	%p100, %r3718, 0;
	@%p100 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1079.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1079
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r466, %r3718, 192937984;
	add.s32 	%r467, %r3717, %r466;
	mov.b32 	%f373, %r467;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3718, %r3718, %r466;
	mov.b32 	%r3717, %f744;
	setp.ne.s32 	%p101, %r3718, 0;
	setp.ne.s32 	%p102, %r3717, 0;
	and.pred  	%p103, %p101, %p102;
	@%p103 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1081
	setp.gt.u32 	%p104, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p104;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1058
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p95, %r25, 1073741824;
	@%p95 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p96, %r25, -2147483647;
	@%p96 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p99, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p99;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p97, %f46, 0f40800000;
	@%p97 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1062
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p98, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p98;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1065
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1084
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p105, %f382, 0f7F800000;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r468, %f43;
	and.b32  	%r469, %r468, -2147483648;
	mov.b32 	%r470, %f745;
	or.b32  	%r471, %r469, %r470;
	mov.b32 	%f745, %r471;
$L__BB0_59:                             // %__nv_fmodf.exit1085
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r472, %f383;
	and.b32  	%r473, %r472, -2147483648;
	or.b32  	%r474, %r473, 1056964608;
	mov.b32 	%f384, %r474;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p106, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p106;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p107, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p107;
	cvt.rzi.s32.f32 	%r475, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r476, %r475, 1;
	setp.eq.b32 	%p108, %r476, 1;
	selp.f32 	%f402, %f400, %f401, %p108;
	selp.f32 	%f403, %f401, %f400, %p108;
	and.b32  	%r477, %r475, 2;
	setp.eq.s32 	%p109, %r477, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p109;
	add.s32 	%r478, %r475, 1;
	and.b32  	%r479, %r478, 2;
	setp.eq.s32 	%p110, %r479, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p110;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p111, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p111;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p112, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p112;
$L__BB0_60:                             // %L631
	or.pred  	%p2, %p70, %p92;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L639
	mul.hi.u32 	%r481, %r3710, -1431655765;
	shr.u32 	%r482, %r481, 2;
	mul.lo.s32 	%r483, %r482, 6;
	sub.s32 	%r484, %r3710, %r483;
	cvt.rn.f32.s32 	%f414, %r484;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p115, %f751, 0f40000000;
	@%p115 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p116, %f751, 0f4B800000;
	@%p116 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r34, %f751;
	and.b32  	%r485, %r34, 8388607;
	or.b32  	%r3719, %r485, 1065353216;
	mov.b32 	%f750, %r3719;
	add.s32 	%r486, %r34, -1073741824;
	and.b32  	%r3720, %r486, -8388608;
	setp.eq.s32 	%p122, %r3720, 0;
	@%p122 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1110.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1110
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r487, %r3720, 192937984;
	add.s32 	%r488, %r3719, %r487;
	mov.b32 	%f426, %r488;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3720, %r3720, %r487;
	mov.b32 	%r3719, %f750;
	setp.ne.s32 	%p123, %r3720, 0;
	setp.ne.s32 	%p124, %r3719, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1112
	setp.gt.u32 	%p126, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1089
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p117, %r33, 1073741824;
	@%p117 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p118, %r33, -2147483647;
	@%p118 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p121, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p121;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p119, %f67, 0f40800000;
	@%p119 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1093
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p120, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p120;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1096
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1115
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p127, %f435, 0f7F800000;
	@%p127 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r489, %f64;
	and.b32  	%r490, %r489, -2147483648;
	mov.b32 	%r491, %f751;
	or.b32  	%r492, %r490, %r491;
	mov.b32 	%f751, %r492;
$L__BB0_75:                             // %__nv_fmodf.exit1116
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r493, %f436;
	and.b32  	%r494, %r493, -2147483648;
	or.b32  	%r495, %r494, 1056964608;
	mov.b32 	%f437, %r495;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p128, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p128;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p129, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p129;
	cvt.rzi.s32.f32 	%r496, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r497, %r496, 1;
	setp.eq.b32 	%p130, %r497, 1;
	selp.f32 	%f455, %f453, %f454, %p130;
	selp.f32 	%f456, %f454, %f453, %p130;
	and.b32  	%r498, %r496, 2;
	setp.eq.s32 	%p131, %r498, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p131;
	add.s32 	%r499, %r496, 1;
	and.b32  	%r500, %r499, 2;
	setp.eq.s32 	%p132, %r500, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p132;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p133, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p133;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p134, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p134;
$L__BB0_76:                             // %L673
	@%p29 bra 	$L__BB0_221;
// %bb.77:
	@%p359 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_78;
$L__BB0_217:
	mov.b32 	%r257, %f785;
	and.b32  	%r513, %r257, 8388607;
	or.b32  	%r3796, %r513, 1065353216;
	mov.b32 	%f784, %r3796;
	add.s32 	%r514, %r257, -1073741824;
	and.b32  	%r3797, %r514, -8388608;
	setp.eq.s32 	%p142, %r3797, 0;
	@%p142 bra 	$L__BB0_220;
// %bb.218:                             // %__nv_fmaf_rn.exit4.i.i.i1141.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_219:                            // %__nv_fmaf_rn.exit4.i.i.i1141
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r515, %r3797, 192937984;
	add.s32 	%r516, %r3796, %r515;
	mov.b32 	%f476, %r516;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3797, %r3797, %r515;
	mov.b32 	%r3796, %f784;
	setp.ne.s32 	%p143, %r3797, 0;
	setp.ne.s32 	%p144, %r3796, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_219;
$L__BB0_220:                            // %__internal_fmodf_slowpath_mod.exit.i.i1143
	setp.gt.u32 	%p146, %r257, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_221;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1120
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r256, %f187;
	setp.lt.u32 	%p137, %r256, 1073741824;
	@%p137 bra 	$L__BB0_216;
// %bb.79:
	setp.lt.u32 	%p138, %r256, -2147483647;
	@%p138 bra 	$L__BB0_214;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p141, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p141;
	bra.uni 	$L__BB0_216;
$L__BB0_214:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p139, %f187, 0f40800000;
	@%p139 bra 	$L__BB0_216;
// %bb.215:                             // %__nv_fmaf_rn.exit.i.i.i1124
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p140, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p140;
$L__BB0_216:                            // %__internal_fmodf_fastpath_quot.exit.i.i1127
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_221:                            // %__internal_fmodf_kernel.exit.i1146
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p147, %f485, 0f7F800000;
	@%p147 bra 	$L__BB0_223;
// %bb.222:
	mov.b32 	%r517, %f785;
	or.b32  	%r518, %r250, %r517;
	mov.b32 	%f785, %r518;
$L__BB0_223:                            // %__nv_fmodf.exit1147
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p49 bra 	$L__BB0_96;
// %bb.81:                              // %L775
	cvt.u16.u32 	%rs15, %r3709;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p156, %f757, 0f40000000;
	@%p156 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p157, %f757, 0f4B800000;
	@%p157 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r46, %f757;
	and.b32  	%r534, %r46, 8388607;
	or.b32  	%r3721, %r534, 1065353216;
	mov.b32 	%f756, %r3721;
	add.s32 	%r535, %r46, -1073741824;
	and.b32  	%r3722, %r535, -8388608;
	setp.eq.s32 	%p163, %r3722, 0;
	@%p163 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1172.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1172
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r536, %r3722, 192937984;
	add.s32 	%r537, %r3721, %r536;
	mov.b32 	%f530, %r537;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3722, %r3722, %r536;
	mov.b32 	%r3721, %f756;
	setp.ne.s32 	%p164, %r3722, 0;
	setp.ne.s32 	%p165, %r3721, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1174
	setp.gt.u32 	%p167, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1151
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p158, %r45, 1073741824;
	@%p158 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p159, %r45, -2147483647;
	@%p159 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p162;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1155
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p161;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1158
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1177
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p168, %f539, 0f7F800000;
	@%p168 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r538, %f85;
	and.b32  	%r539, %r538, -2147483648;
	mov.b32 	%r540, %f757;
	or.b32  	%r541, %r539, %r540;
	mov.b32 	%f757, %r541;
$L__BB0_95:                             // %__nv_fmodf.exit1178
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r542, %f540;
	and.b32  	%r543, %r542, -2147483648;
	or.b32  	%r544, %r543, 1056964608;
	mov.b32 	%f541, %r544;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p169, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p169;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p170, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p170;
	cvt.rzi.s32.f32 	%r545, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r546, %r545, 1;
	setp.eq.b32 	%p171, %r546, 1;
	selp.f32 	%f559, %f557, %f558, %p171;
	selp.f32 	%f560, %f558, %f557, %p171;
	and.b32  	%r547, %r545, 2;
	setp.eq.s32 	%p172, %r547, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p172;
	add.s32 	%r548, %r545, 1;
	and.b32  	%r549, %r548, 2;
	setp.eq.s32 	%p173, %r549, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p173;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p174, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p174;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p175, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p175;
$L__BB0_96:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p70 bra 	$L__BB0_112;
// %bb.97:                              // %L813
	mul.hi.u32 	%r551, %r3710, -1431655765;
	shr.u32 	%r552, %r551, 5;
	mul.lo.s32 	%r553, %r552, 48;
	sub.s32 	%r554, %r3710, %r553;
	cvt.rn.f32.s32 	%f571, %r554;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p177, %f763, 0f40000000;
	@%p177 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p178, %f763, 0f4B800000;
	@%p178 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r54, %f763;
	and.b32  	%r555, %r54, 8388607;
	or.b32  	%r3723, %r555, 1065353216;
	mov.b32 	%f762, %r3723;
	add.s32 	%r556, %r54, -1073741824;
	and.b32  	%r3724, %r556, -8388608;
	setp.eq.s32 	%p184, %r3724, 0;
	@%p184 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1203.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1203
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r557, %r3724, 192937984;
	add.s32 	%r558, %r3723, %r557;
	mov.b32 	%f583, %r558;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3724, %r3724, %r557;
	mov.b32 	%r3723, %f762;
	setp.ne.s32 	%p185, %r3724, 0;
	setp.ne.s32 	%p186, %r3723, 0;
	and.pred  	%p187, %p185, %p186;
	@%p187 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1205
	setp.gt.u32 	%p188, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p188;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1182
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p179, %r53, 1073741824;
	@%p179 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p180, %r53, -2147483647;
	@%p180 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p183, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p183;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p181, %f109, 0f40800000;
	@%p181 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1186
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p182, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p182;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1189
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1208
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p189, %f592, 0f7F800000;
	@%p189 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r559, %f106;
	and.b32  	%r560, %r559, -2147483648;
	mov.b32 	%r561, %f763;
	or.b32  	%r562, %r560, %r561;
	mov.b32 	%f763, %r562;
$L__BB0_111:                            // %__nv_fmodf.exit1209
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r563, %f593;
	and.b32  	%r564, %r563, -2147483648;
	or.b32  	%r565, %r564, 1056964608;
	mov.b32 	%f594, %r565;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p190, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p190;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p191, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p191;
	cvt.rzi.s32.f32 	%r566, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r567, %r566, 1;
	setp.eq.b32 	%p192, %r567, 1;
	selp.f32 	%f612, %f610, %f611, %p192;
	selp.f32 	%f613, %f611, %f610, %p192;
	and.b32  	%r568, %r566, 2;
	setp.eq.s32 	%p193, %r568, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p193;
	add.s32 	%r569, %r566, 1;
	and.b32  	%r570, %r569, 2;
	setp.eq.s32 	%p194, %r570, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p194;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p195, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p195;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p196, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p196;
$L__BB0_112:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L885
	cvt.u16.u32 	%rs22, %r3709;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p197, %f769, 0f40000000;
	@%p197 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p198, %f769, 0f4B800000;
	@%p198 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r64, %f769;
	and.b32  	%r578, %r64, 8388607;
	or.b32  	%r3725, %r578, 1065353216;
	mov.b32 	%f768, %r3725;
	add.s32 	%r579, %r64, -1073741824;
	and.b32  	%r3726, %r579, -8388608;
	setp.eq.s32 	%p204, %r3726, 0;
	@%p204 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1234.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1234
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r580, %r3726, 192937984;
	add.s32 	%r581, %r3725, %r580;
	mov.b32 	%f636, %r581;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3726, %r3726, %r580;
	mov.b32 	%r3725, %f768;
	setp.ne.s32 	%p205, %r3726, 0;
	setp.ne.s32 	%p206, %r3725, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1236
	setp.gt.u32 	%p208, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1213
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p199, %r63, 1073741824;
	@%p199 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p200, %r63, -2147483647;
	@%p200 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p203, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p203;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p201, %f130, 0f40800000;
	@%p201 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1217
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p202, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p202;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1220
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1239
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p209, %f645, 0f7F800000;
	@%p209 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r582, %f127;
	and.b32  	%r583, %r582, -2147483648;
	mov.b32 	%r584, %f769;
	or.b32  	%r585, %r583, %r584;
	mov.b32 	%f769, %r585;
$L__BB0_127:                            // %__nv_fmodf.exit1240
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r586, %f646;
	and.b32  	%r587, %r586, -2147483648;
	or.b32  	%r588, %r587, 1056964608;
	mov.b32 	%f647, %r588;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p210, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p210;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p211, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p211;
	cvt.rzi.s32.f32 	%r589, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r590, %r589, 1;
	setp.eq.b32 	%p212, %r590, 1;
	selp.f32 	%f665, %f663, %f664, %p212;
	selp.f32 	%f666, %f664, %f663, %p212;
	and.b32  	%r591, %r589, 2;
	setp.eq.s32 	%p213, %r591, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p213;
	add.s32 	%r592, %r589, 1;
	and.b32  	%r593, %r592, 2;
	setp.eq.s32 	%p214, %r593, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p214;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p215, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p215;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p216, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p216;
$L__BB0_128:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L927
	mul.hi.u32 	%r595, %r3710, -1431655765;
	shr.u32 	%r596, %r595, 2;
	mul.lo.s32 	%r597, %r596, 6;
	sub.s32 	%r598, %r3710, %r597;
	cvt.rn.f32.s32 	%f677, %r598;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p217, %f775, 0f40000000;
	@%p217 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p218, %f775, 0f4B800000;
	@%p218 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r72, %f775;
	and.b32  	%r599, %r72, 8388607;
	or.b32  	%r3727, %r599, 1065353216;
	mov.b32 	%f774, %r3727;
	add.s32 	%r600, %r72, -1073741824;
	and.b32  	%r3728, %r600, -8388608;
	setp.eq.s32 	%p224, %r3728, 0;
	@%p224 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1265.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1265
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r601, %r3728, 192937984;
	add.s32 	%r602, %r3727, %r601;
	mov.b32 	%f689, %r602;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3728, %r3728, %r601;
	mov.b32 	%r3727, %f774;
	setp.ne.s32 	%p225, %r3728, 0;
	setp.ne.s32 	%p226, %r3727, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1267
	setp.gt.u32 	%p228, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1244
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p219, %r71, 1073741824;
	@%p219 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p220, %r71, -2147483647;
	@%p220 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p223, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p223;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p221, %f151, 0f40800000;
	@%p221 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1248
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p222, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p222;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1251
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1270
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p229, %f698, 0f7F800000;
	@%p229 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r603, %f148;
	and.b32  	%r604, %r603, -2147483648;
	mov.b32 	%r605, %f775;
	or.b32  	%r606, %r604, %r605;
	mov.b32 	%f775, %r606;
$L__BB0_143:                            // %__nv_fmodf.exit1271
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r607, %f699;
	and.b32  	%r608, %r607, -2147483648;
	or.b32  	%r609, %r608, 1056964608;
	mov.b32 	%f700, %r609;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p230, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p230;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p231, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p231;
	cvt.rzi.s32.f32 	%r610, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r611, %r610, 1;
	setp.eq.b32 	%p232, %r611, 1;
	selp.f32 	%f718, %f716, %f717, %p232;
	selp.f32 	%f719, %f717, %f716, %p232;
	and.b32  	%r612, %r610, 2;
	setp.eq.s32 	%p233, %r612, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p233;
	add.s32 	%r613, %r610, 1;
	and.b32  	%r614, %r613, 2;
	setp.eq.s32 	%p234, %r614, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p234;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p235, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p235;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p236, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p236;
$L__BB0_144:                            // %L961
	mov.u32 	%r266, 999999999;
	cvt.u16.u32 	%rs241, %r1;
	@%p92 bra 	$L__BB0_225;
// %bb.145:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs241, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs241, %rs33;
	cvt.u32.u16 	%r628, %rs34;
	and.b32  	%r629, %r628, 255;
	mad.lo.s32 	%r630, %r629, 24, %r3;
	cvt.u16.u32 	%rs35, %r630;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r631, %rs39;
	mul.wide.u32 	%rd50, %r631, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r632, [%rd51];
	shl.b32 	%r633, %r632, 16;
	cvt.s32.s16 	%r83, %r632;
	shr.s32 	%r84, %r632, 16;
	or.b32  	%r634, %r633, 65535;
	setp.lt.u32 	%p238, %r634, 1638399;
	setp.lt.u32 	%p239, %r632, 1572864;
	and.pred  	%p240, %p238, %p239;
	@%p240 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_146;
$L__BB0_224:                            // %L1237
	mul.lo.s32 	%r638, %r84, 801;
	mad.lo.s32 	%r266, %r83, 33, %r638;
$L__BB0_225:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r411, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r412, %r411, -2147483648;
	mov.b32 	%r525, %f487;
	or.b32  	%r413, %r412, 1056964608;
	and.b32  	%r526, %r525, -2147483648;
	mov.b32 	%f225, %r413;
	or.b32  	%r527, %r526, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r527;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p42, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p42;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p43, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p149, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p43;
	selp.f32 	%f492, %f487, %f490, %p149;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p150, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p150;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r414, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r415, %r414, 1;
	cvt.rzi.s32.f32 	%r528, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p44, %r415, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r529, %r528, 1;
	selp.f32 	%f243, %f241, %f242, %p44;
	and.b32  	%r416, %r414, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p151, %r529, 1;
	setp.eq.s32 	%p45, %r416, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r417, %r414, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p151;
	and.b32  	%r530, %r528, 2;
	selp.f32 	%f244, %f242, %f241, %p44;
	selp.f32 	%f246, %f243, %f245, %p45;
	and.b32  	%r418, %r417, 2;
	setp.eq.f32 	%p47, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p152, %r530, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r531, %r528, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p46, %r418, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p47;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p151;
	selp.f32 	%f509, %f506, %f508, %p152;
	and.b32  	%r532, %r531, 2;
	setp.eq.f32 	%p154, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p46;
	setp.gt.f32 	%p48, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p153, %r532, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p154;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p48;
	selp.f32 	%f511, %f507, %f510, %p153;
	setp.gt.f32 	%p155, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r407, %f254;
	mov.b32 	%r410, %f251;
	selp.f32 	%f517, %f516, %f511, %p155;
	xor.b32  	%r406, %r410, -2147483648;
	mov.b32 	%r502, %f62;
	mov.b32 	%r503, %f83;
	mov.b32 	%r508, %f63;
	mov.b32 	%r509, %f84;
	mov.b32 	%r521, %f517;
	mov.b32 	%r524, %f514;
	mov.b32 	%r458, %f20;
	mov.b32 	%r459, %f41;
	mov.b32 	%r461, %f21;
	mov.b32 	%r462, %f42;
	xor.b32  	%r505, %r508, -2147483648;
	xor.b32  	%r506, %r509, -2147483648;
	xor.b32  	%r520, %r524, -2147483648;
	mov.b32 	%r572, %f104;
	mov.b32 	%r573, %f125;
	mov.b32 	%r575, %f105;
	mov.b32 	%r576, %f126;
	mov.b32 	%r616, %f146;
	mov.b32 	%r617, %f167;
	mov.b32 	%r622, %f147;
	xor.b32  	%r619, %r622, -2147483648;
	mov.b32 	%r623, %f168;
	xor.b32  	%r620, %r623, -2147483648;
	and.b32  	%r639, %r1, 24;
	setp.ne.s32 	%p241, %r639, 24;
	cvt.u16.u32 	%rs40, %r241;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs40, %rs43;
	cvt.u32.u16 	%r640, %rs44;
	and.b32  	%r267, %r640, 255;
	mul.lo.s32 	%r3729, %r2, 1152;
	@%p241 bra 	$L__BB0_147;
// %bb.226:                             // %pass503.L1497_crit_edge
	mov.u32 	%r87, 0;
	mov.u32 	%r88, %r87;
	bra.uni 	$L__BB0_148;
$L__BB0_147:                            // %pass507
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r641, %r267, 24;
	mul.lo.s32 	%r642, %r240, 144;
	or.b32  	%r643, %r3729, %r3;
	add.s32 	%r644, %r643, %r642;
	add.s32 	%r645, %r644, %r641;
	mul.wide.u32 	%rd57, %r645, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.u32 	%r87, [%rd58];
	or.b32  	%r646, %r3, 576;
	add.s32 	%r647, %r646, %r3729;
	add.s32 	%r648, %r647, %r642;
	add.s32 	%r649, %r648, %r641;
	mul.wide.u32 	%rd59, %r649, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.u32 	%r88, [%rd60];
$L__BB0_148:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r407, %r406;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r408, %r410, %r407;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r457, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r460, %r462, %r461;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r501, %r503, %r502;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r504, %r506, %r505;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r509, %r508;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r510, %r503, %r502;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r519, %r521, %r520;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r522, %r524, %r521;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r571, %r573, %r572;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r574, %r576, %r575;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r615, %r617, %r616;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r618, %r620, %r619;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r621, %r623, %r622;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r624, %r617, %r616;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r652, %r377, 15;
	shl.b32 	%r653, %r381, 8;
	add.s32 	%r89, %r653, %r652;
	shl.b32 	%r654, %r1, 3;
	and.b32  	%r90, %r654, 128;
	shl.b32 	%r655, %r2, 8;
	shl.b32 	%r656, %r1, 2;
	and.b32  	%r657, %r656, 60;
	or.b32  	%r91, %r657, %r655;
	or.b32  	%r658, %r656, %r655;
	or.b32  	%r92, %r658, 64;
	add.s32 	%r93, %r3, 24;
	shr.u32 	%r659, %r1, 4;
	and.b32  	%r660, %r253, 30;
	or.b32  	%r661, %r660, %r659;
	mul.lo.s32 	%r94, %r661, 257;
	or.b32  	%r662, %r253, %r659;
	or.b32  	%r663, %r662, 32;
	mul.lo.s32 	%r95, %r663, 257;
	shr.u32 	%r664, %r3, 3;
	and.b16  	%rs46, %rs241, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 12;
	mul.lo.s16 	%rs49, %rs48, 24;
	sub.s16 	%rs50, %rs241, %rs49;
	cvt.u32.u16 	%r665, %rs50;
	and.b32  	%r96, %r665, 255;
	and.b32  	%r666, %r4, 224;
	mad.lo.s32 	%r97, %r664, 257, %r666;
	shr.u32 	%r667, %r93, 3;
	mad.lo.s32 	%r98, %r667, 257, %r666;
	add.s32 	%r668, %r3, 48;
	shr.u32 	%r669, %r668, 3;
	mad.lo.s32 	%r99, %r669, 257, %r666;
	add.s32 	%r670, %r3, 72;
	shr.u32 	%r671, %r670, 3;
	mad.lo.s32 	%r100, %r671, 257, %r666;
	or.b32  	%r672, %r664, 12;
	mad.lo.s32 	%r101, %r672, 257, %r666;
	add.s32 	%r673, %r3, 120;
	shr.u32 	%r674, %r673, 3;
	mad.lo.s32 	%r102, %r674, 257, %r666;
	add.s32 	%r675, %r3, 144;
	shr.u32 	%r676, %r675, 3;
	mad.lo.s32 	%r103, %r676, 257, %r666;
	add.s32 	%r677, %r3, 168;
	shr.u32 	%r678, %r677, 3;
	mad.lo.s32 	%r104, %r678, 257, %r666;
	or.b32  	%r679, %r664, 24;
	mad.lo.s32 	%r105, %r679, 257, %r666;
	add.s32 	%r680, %r3, 216;
	shr.u32 	%r681, %r680, 3;
	mad.lo.s32 	%r106, %r681, 257, %r666;
	add.s32 	%r682, %r3, 240;
	shr.u32 	%r683, %r682, 3;
	mad.lo.s32 	%r107, %r683, 257, %r666;
	add.s32 	%r684, %r3, 264;
	shr.u32 	%r685, %r684, 3;
	mad.lo.s32 	%r108, %r685, 257, %r666;
	or.b32  	%r686, %r664, 36;
	mad.lo.s32 	%r109, %r686, 257, %r666;
	add.s32 	%r687, %r3, 312;
	shr.u32 	%r688, %r687, 3;
	mad.lo.s32 	%r110, %r688, 257, %r666;
	add.s32 	%r689, %r3, 336;
	shr.u32 	%r690, %r689, 3;
	mad.lo.s32 	%r111, %r690, 257, %r666;
	add.s32 	%r691, %r3, 360;
	shr.u32 	%r692, %r691, 3;
	mad.lo.s32 	%r112, %r692, 257, %r666;
	or.b32  	%r693, %r664, 48;
	mad.lo.s32 	%r113, %r693, 257, %r666;
	add.s32 	%r694, %r3, 408;
	shr.u32 	%r695, %r694, 3;
	mad.lo.s32 	%r114, %r695, 257, %r666;
	add.s32 	%r696, %r3, 432;
	shr.u32 	%r697, %r696, 3;
	mad.lo.s32 	%r115, %r697, 257, %r666;
	add.s32 	%r698, %r3, 456;
	shr.u32 	%r699, %r698, 3;
	mad.lo.s32 	%r116, %r699, 257, %r666;
	or.b32  	%r700, %r664, 60;
	mad.lo.s32 	%r117, %r700, 257, %r666;
	add.s32 	%r701, %r3, 504;
	bfe.u32 	%r702, %r701, 3, 6;
	mad.lo.s32 	%r118, %r702, 257, %r666;
	mul.lo.s32 	%r703, %r3, 33;
	mad.lo.s32 	%r704, %r240, 4806, %r703;
	mad.lo.s32 	%r705, %r267, 801, %r704;
	bfe.s32 	%r706, %r1, 1, 1;
	and.b32  	%r707, %r706, 2056;
	mul.lo.s32 	%r708, %r659, 257;
	and.b32  	%r709, %r1, 1;
	neg.s32 	%r710, %r709;
	and.b32  	%r711, %r710, 4112;
	bfe.s32 	%r712, %r1, 3, 1;
	and.b32  	%r713, %r712, 514;
	bfe.s32 	%r714, %r1, 2, 1;
	and.b32  	%r715, %r714, 1028;
	add.s32 	%r716, %r708, %r3;
	add.s32 	%r717, %r716, %r707;
	add.s32 	%r718, %r717, %r711;
	add.s32 	%r719, %r718, %r713;
	add.s32 	%r720, %r719, %r715;
	mul.wide.u32 	%rd61, %r720, 4;
	mov.u64 	%rd62, shmem;
	add.s64 	%rd7, %rd62, %rd61;
	or.b32  	%r721, %r3, 8256;
	add.s32 	%r722, %r721, %r708;
	add.s32 	%r723, %r722, %r707;
	add.s32 	%r724, %r723, %r711;
	add.s32 	%r725, %r724, %r713;
	add.s32 	%r726, %r725, %r715;
	mul.wide.u32 	%rd63, %r726, 4;
	add.s64 	%rd8, %rd62, %rd63;
	or.b32  	%r727, %r3, 32;
	add.s32 	%r728, %r727, %r708;
	add.s32 	%r729, %r728, %r707;
	add.s32 	%r730, %r729, %r711;
	add.s32 	%r731, %r730, %r713;
	add.s32 	%r732, %r731, %r715;
	mul.wide.u32 	%rd64, %r732, 4;
	add.s64 	%rd9, %rd62, %rd64;
	or.b32  	%r733, %r3, 8288;
	add.s32 	%r734, %r733, %r708;
	add.s32 	%r735, %r734, %r707;
	add.s32 	%r736, %r735, %r711;
	add.s32 	%r737, %r736, %r713;
	add.s32 	%r738, %r737, %r715;
	mul.wide.u32 	%rd65, %r738, 4;
	add.s64 	%rd10, %rd62, %rd65;
	bfe.s32 	%r739, %r3, 2, 1;
	and.b32  	%r740, %r3, 4;
	setp.eq.s32 	%p242, %r740, 0;
	and.b32  	%r741, %r739, 2056;
	and.b32  	%r742, %r3, 1;
	neg.s32 	%r743, %r742;
	and.b32  	%r744, %r743, 8256;
	bfe.s32 	%r745, %r3, 1, 1;
	and.b32  	%r746, %r745, 4112;
	mul.lo.s32 	%r747, %r240, 6;
	shr.u32 	%r748, %r3, 4;
	bfe.s32 	%r749, %r3, 3, 1;
	and.b32  	%r750, %r3, 8;
	setp.eq.s32 	%p243, %r750, 0;
	and.b32  	%r751, %r749, 1028;
	mad.lo.s32 	%r752, %r748, 514, %r747;
	add.s32 	%r753, %r752, %r741;
	add.s32 	%r754, %r753, %r744;
	add.s32 	%r755, %r754, %r746;
	add.s32 	%r756, %r755, %r751;
	add.s32 	%r757, %r756, %r267;
	mul.wide.u32 	%rd66, %r757, 4;
	add.s64 	%rd11, %rd62, %rd66;
	shr.u32 	%r758, %r93, 5;
	bfe.s32 	%r759, %r93, 4, 1;
	and.b32  	%r760, %r759, 514;
	selp.b32 	%r761, 1028, 0, %p243;
	mad.lo.s32 	%r762, %r758, 257, %r747;
	add.s32 	%r763, %r762, %r741;
	add.s32 	%r764, %r763, %r744;
	add.s32 	%r765, %r764, %r746;
	add.s32 	%r766, %r765, %r761;
	add.s32 	%r767, %r766, %r267;
	add.s32 	%r768, %r767, %r760;
	mul.wide.u32 	%rd67, %r768, 4;
	add.s64 	%rd12, %rd62, %rd67;
	selp.b32 	%r769, 32, 2088, %p242;
	add.s32 	%r770, %r752, %r769;
	add.s32 	%r771, %r770, %r744;
	add.s32 	%r772, %r771, %r746;
	add.s32 	%r773, %r772, %r751;
	add.s32 	%r774, %r773, %r267;
	mul.wide.u32 	%rd68, %r774, 4;
	add.s64 	%rd13, %rd62, %rd68;
	add.s32 	%r775, %r768, 32;
	mul.wide.u32 	%rd69, %r775, 4;
	add.s64 	%rd14, %rd62, %rd69;
	mul.lo.s32 	%r776, %r379, 589824;
	mad.lo.s32 	%r777, %r383, 1152, %r776;
	cvt.s64.s32 	%rd15, %r777;
	cvt.u16.u32 	%rs51, %r93;
	and.b16  	%rs52, %rs51, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r778, %rs56;
	and.b32  	%r779, %r778, 255;
	or.b32  	%r780, %r3729, %r96;
	mul.wide.u32 	%rd70, %r705, 4;
	add.s64 	%rd16, %rd62, %rd70;
	add.s32 	%r781, %r720, 64;
	mul.wide.u32 	%rd71, %r781, 4;
	add.s64 	%rd17, %rd62, %rd71;
	add.s32 	%r782, %r726, 64;
	mul.wide.u32 	%rd72, %r782, 4;
	add.s64 	%rd18, %rd62, %rd72;
	add.s32 	%r783, %r732, 64;
	mul.wide.u32 	%rd73, %r783, 4;
	add.s64 	%rd19, %rd62, %rd73;
	add.s32 	%r784, %r738, 64;
	mul.wide.u32 	%rd74, %r784, 4;
	add.s64 	%rd20, %rd62, %rd74;
	add.s32 	%r785, %r720, 128;
	mul.wide.u32 	%rd75, %r785, 4;
	add.s64 	%rd21, %rd62, %rd75;
	add.s32 	%r786, %r726, 128;
	mul.wide.u32 	%rd76, %r786, 4;
	add.s64 	%rd22, %rd62, %rd76;
	add.s32 	%r787, %r732, 128;
	mul.wide.u32 	%rd77, %r787, 4;
	add.s64 	%rd23, %rd62, %rd77;
	add.s32 	%r788, %r738, 128;
	mul.wide.u32 	%rd78, %r788, 4;
	add.s64 	%rd24, %rd62, %rd78;
	add.s32 	%r789, %r720, 192;
	mul.wide.u32 	%rd79, %r789, 4;
	add.s64 	%rd25, %rd62, %rd79;
	add.s32 	%r790, %r726, 192;
	mul.wide.u32 	%rd80, %r790, 4;
	add.s64 	%rd26, %rd62, %rd80;
	add.s32 	%r791, %r732, 192;
	mul.wide.u32 	%rd81, %r791, 4;
	add.s64 	%rd27, %rd62, %rd81;
	add.s32 	%r792, %r738, 192;
	mul.wide.u32 	%rd82, %r792, 4;
	add.s64 	%rd28, %rd62, %rd82;
	add.s32 	%r793, %r757, 64;
	mul.wide.u32 	%rd83, %r793, 4;
	add.s64 	%rd29, %rd62, %rd83;
	add.s32 	%r794, %r768, 64;
	mul.wide.u32 	%rd84, %r794, 4;
	add.s64 	%rd30, %rd62, %rd84;
	add.s32 	%r795, %r774, 64;
	mul.wide.u32 	%rd85, %r795, 4;
	add.s64 	%rd31, %rd62, %rd85;
	add.s32 	%r796, %r768, 96;
	mul.wide.u32 	%rd86, %r796, 4;
	add.s64 	%rd32, %rd62, %rd86;
	add.s32 	%r797, %r757, 128;
	mul.wide.u32 	%rd87, %r797, 4;
	add.s64 	%rd33, %rd62, %rd87;
	add.s32 	%r798, %r768, 128;
	mul.wide.u32 	%rd88, %r798, 4;
	add.s64 	%rd34, %rd62, %rd88;
	add.s32 	%r799, %r774, 128;
	mul.wide.u32 	%rd89, %r799, 4;
	add.s64 	%rd35, %rd62, %rd89;
	add.s32 	%r800, %r768, 160;
	mul.wide.u32 	%rd90, %r800, 4;
	add.s64 	%rd36, %rd62, %rd90;
	add.s32 	%r801, %r757, 192;
	mul.wide.u32 	%rd91, %r801, 4;
	add.s64 	%rd37, %rd62, %rd91;
	add.s32 	%r802, %r768, 192;
	mul.wide.u32 	%rd92, %r802, 4;
	add.s64 	%rd38, %rd62, %rd92;
	add.s32 	%r803, %r774, 192;
	mul.wide.u32 	%rd93, %r803, 4;
	add.s64 	%rd39, %rd62, %rd93;
	add.s32 	%r804, %r768, 224;
	mul.wide.u32 	%rd94, %r804, 4;
	add.s64 	%rd40, %rd62, %rd94;
	mad.lo.s32 	%r119, %r779, 24, %r780;
	mad.lo.s32 	%r805, %r3, 24, %r3729;
	add.s32 	%r120, %r805, %r96;
	setp.lt.u32 	%p245, %r1, 16;
	setp.gt.u32 	%p274, %r3, 7;
	setp.lt.u32 	%p278, %r1, 24;
	mov.u32 	%r122, %r121;
	bra.uni 	$L__BB0_149;
$L__BB0_197:                            // %L43545
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r239, %r121, 48;
	setp.ne.s32 	%p358, %r121, 192;
	mov.u32 	%r121, %r239;
	@%p358 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_198;
$L__BB0_149:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_176 Depth 2
                                        //     Child Loop BB0_187 Depth 2
	add.s32 	%r806, %r121, %r377;
	setp.lt.s32 	%p244, %r806, %r378;
	@%p244 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_198;
$L__BB0_150:                            // %oksrem668
                                        //   in Loop: Header=BB0_149 Depth=1
	mul.hi.u32 	%r999, %r121, -1431655765;
	shr.u32 	%r1000, %r999, 5;
	mul.lo.s32 	%r272, %r1000, 48;
	add.s32 	%r1001, %r272, %r3;
	cvt.u16.u32 	%rs57, %r1001;
	shr.s16 	%rs58, %rs57, 15;
	shr.u16 	%rs59, %rs58, 8;
	add.s16 	%rs60, %rs57, %rs59;
	and.b16  	%rs61, %rs60, -256;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.s32.s16 	%r1002, %rs62;
	shl.b32 	%r1003, %r1002, 15;
	or.b32  	%r1004, %r1003, %r90;
	or.b32  	%r1005, %r91, %r1004;
	add.s32 	%r1006, %r89, %r1005;
	shr.s32 	%r1007, %r1006, 31;
	shr.u32 	%r1008, %r1007, 9;
	add.s32 	%r1009, %r1006, %r1008;
	shr.s32 	%r1010, %r1009, 23;
	setp.lt.s32 	%p246, %r1006, 0;
	and.b32  	%r1011, %r1009, -8388608;
	setp.ne.s32 	%p247, %r1011, %r1006;
	and.pred  	%p248, %p246, %p247;
	selp.u32 	%r1012, 1, 0, %p248;
	sub.s32 	%r1013, %r1012, %r1010;
	shl.b32 	%r1014, %r1013, 23;
	add.s32 	%r1015, %r1014, %r1006;
	mul.wide.s32 	%rd95, %r1015, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r1016, %r1017, %r1018, %r1019}, [%rd96];
	or.b32  	%r1020, %r92, %r1004;
	add.s32 	%r1021, %r89, %r1020;
	shr.s32 	%r1022, %r1021, 31;
	shr.u32 	%r1023, %r1022, 9;
	add.s32 	%r1024, %r1021, %r1023;
	shr.u32 	%r1025, %r1024, 23;
	shr.u32 	%r1026, %r1021, 31;
	sub.s32 	%r1027, %r1026, %r1025;
	shl.b32 	%r1028, %r1027, 23;
	add.s32 	%r1029, %r1028, %r1021;
	mul.wide.s32 	%rd97, %r1029, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r1030, %r1031, %r1032, %r1033}, [%rd98];
	add.s32 	%r1034, %r93, %r272;
	cvt.u16.u32 	%rs63, %r1034;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 8;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -256;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.s32.s16 	%r1035, %rs68;
	shl.b32 	%r1036, %r1035, 15;
	or.b32  	%r1037, %r1036, %r90;
	or.b32  	%r1038, %r91, %r1037;
	add.s32 	%r1039, %r89, %r1038;
	shr.s32 	%r1040, %r1039, 31;
	shr.u32 	%r1041, %r1040, 9;
	add.s32 	%r1042, %r1039, %r1041;
	shr.s32 	%r1043, %r1042, 23;
	setp.lt.s32 	%p249, %r1039, 0;
	and.b32  	%r1044, %r1042, -8388608;
	setp.ne.s32 	%p250, %r1044, %r1039;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r1045, 1, 0, %p251;
	sub.s32 	%r1046, %r1045, %r1043;
	shl.b32 	%r1047, %r1046, 23;
	add.s32 	%r1048, %r1047, %r1039;
	mul.wide.s32 	%rd99, %r1048, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r1049, %r1050, %r1051, %r1052}, [%rd100];
	or.b32  	%r1053, %r92, %r1037;
	add.s32 	%r1054, %r89, %r1053;
	shr.s32 	%r1055, %r1054, 31;
	shr.u32 	%r1056, %r1055, 9;
	add.s32 	%r1057, %r1054, %r1056;
	shr.u32 	%r1058, %r1057, 23;
	shr.u32 	%r1059, %r1054, 31;
	sub.s32 	%r1060, %r1059, %r1058;
	shl.b32 	%r1061, %r1060, 23;
	add.s32 	%r1062, %r1061, %r1054;
	mul.wide.s32 	%rd101, %r1062, 4;
	add.s64 	%rd102, %rd3, %rd101;
	ld.global.v4.u32 	{%r1063, %r1064, %r1065, %r1066}, [%rd102];
	selp.b32 	%r1067, %r1018, %r1016, %p245;
	shfl.sync.bfly.b32	%r1068, %r1067, 16, 31, -1;
	selp.b32 	%r809, %r1016, %r1068, %p245;
	selp.b32 	%r814, %r1068, %r1018, %p245;
	selp.b32 	%r1069, %r1019, %r1017, %p245;
	shfl.sync.bfly.b32	%r1070, %r1069, 16, 31, -1;
	selp.b32 	%r817, %r1017, %r1070, %p245;
	selp.b32 	%r822, %r1070, %r1019, %p245;
	selp.b32 	%r1071, %r1032, %r1030, %p245;
	shfl.sync.bfly.b32	%r1072, %r1071, 16, 31, -1;
	selp.b32 	%r825, %r1030, %r1072, %p245;
	selp.b32 	%r830, %r1072, %r1032, %p245;
	selp.b32 	%r1073, %r1033, %r1031, %p245;
	shfl.sync.bfly.b32	%r1074, %r1073, 16, 31, -1;
	selp.b32 	%r833, %r1031, %r1074, %p245;
	selp.b32 	%r838, %r1074, %r1033, %p245;
	selp.b32 	%r1075, %r1051, %r1049, %p245;
	shfl.sync.bfly.b32	%r1076, %r1075, 16, 31, -1;
	selp.b32 	%r841, %r1049, %r1076, %p245;
	selp.b32 	%r846, %r1076, %r1051, %p245;
	selp.b32 	%r1077, %r1052, %r1050, %p245;
	shfl.sync.bfly.b32	%r1078, %r1077, 16, 31, -1;
	selp.b32 	%r849, %r1050, %r1078, %p245;
	selp.b32 	%r854, %r1078, %r1052, %p245;
	selp.b32 	%r1079, %r1065, %r1063, %p245;
	shfl.sync.bfly.b32	%r1080, %r1079, 16, 31, -1;
	selp.b32 	%r857, %r1063, %r1080, %p245;
	selp.b32 	%r862, %r1080, %r1065, %p245;
	selp.b32 	%r1081, %r1066, %r1064, %p245;
	shfl.sync.bfly.b32	%r1082, %r1081, 16, 31, -1;
	selp.b32 	%r865, %r1064, %r1082, %p245;
	selp.b32 	%r870, %r1082, %r1066, %p245;
	shl.b32 	%r810, %r814, 4;
	mov.u32 	%r808, 252645135;
	// begin inline asm
	lop3.b32 %r872, %r808, %r809, %r810, 202;
	// end inline asm
	shr.u32 	%r813, %r809, 4;
	// begin inline asm
	lop3.b32 %r888, %r808, %r813, %r814, 202;
	// end inline asm
	shl.b32 	%r818, %r822, 4;
	// begin inline asm
	lop3.b32 %r880, %r808, %r817, %r818, 202;
	// end inline asm
	shr.u32 	%r821, %r817, 4;
	// begin inline asm
	lop3.b32 %r896, %r808, %r821, %r822, 202;
	// end inline asm
	shl.b32 	%r826, %r830, 4;
	// begin inline asm
	lop3.b32 %r904, %r808, %r825, %r826, 202;
	// end inline asm
	shr.u32 	%r829, %r825, 4;
	// begin inline asm
	lop3.b32 %r920, %r808, %r829, %r830, 202;
	// end inline asm
	shl.b32 	%r834, %r838, 4;
	// begin inline asm
	lop3.b32 %r912, %r808, %r833, %r834, 202;
	// end inline asm
	shr.u32 	%r837, %r833, 4;
	// begin inline asm
	lop3.b32 %r928, %r808, %r837, %r838, 202;
	// end inline asm
	shl.b32 	%r842, %r846, 4;
	// begin inline asm
	lop3.b32 %r873, %r808, %r841, %r842, 202;
	// end inline asm
	shr.u32 	%r845, %r841, 4;
	// begin inline asm
	lop3.b32 %r889, %r808, %r845, %r846, 202;
	// end inline asm
	shl.b32 	%r850, %r854, 4;
	// begin inline asm
	lop3.b32 %r881, %r808, %r849, %r850, 202;
	// end inline asm
	shr.u32 	%r853, %r849, 4;
	// begin inline asm
	lop3.b32 %r897, %r808, %r853, %r854, 202;
	// end inline asm
	shl.b32 	%r858, %r862, 4;
	// begin inline asm
	lop3.b32 %r905, %r808, %r857, %r858, 202;
	// end inline asm
	shr.u32 	%r861, %r857, 4;
	// begin inline asm
	lop3.b32 %r921, %r808, %r861, %r862, 202;
	// end inline asm
	shl.b32 	%r866, %r870, 4;
	// begin inline asm
	lop3.b32 %r913, %r808, %r865, %r866, 202;
	// end inline asm
	shr.u32 	%r869, %r865, 4;
	// begin inline asm
	lop3.b32 %r929, %r808, %r869, %r870, 202;
	// end inline asm
	mov.u32 	%r874, 25152;
	// begin inline asm
	prmt.b32 %r936, %r872, %r873, %r874;
	// end inline asm
	mov.u32 	%r878, 29521;
	// begin inline asm
	prmt.b32 %r968, %r872, %r873, %r878;
	// end inline asm
	// begin inline asm
	prmt.b32 %r944, %r880, %r881, %r874;
	// end inline asm
	// begin inline asm
	prmt.b32 %r976, %r880, %r881, %r878;
	// end inline asm
	// begin inline asm
	prmt.b32 %r937, %r888, %r889, %r874;
	// end inline asm
	// begin inline asm
	prmt.b32 %r969, %r888, %r889, %r878;
	// end inline asm
	// begin inline asm
	prmt.b32 %r945, %r896, %r897, %r874;
	// end inline asm
	// begin inline asm
	prmt.b32 %r977, %r896, %r897, %r878;
	// end inline asm
	// begin inline asm
	prmt.b32 %r952, %r904, %r905, %r874;
	// end inline asm
	// begin inline asm
	prmt.b32 %r984, %r904, %r905, %r878;
	// end inline asm
	// begin inline asm
	prmt.b32 %r960, %r912, %r913, %r874;
	// end inline asm
	// begin inline asm
	prmt.b32 %r992, %r912, %r913, %r878;
	// end inline asm
	// begin inline asm
	prmt.b32 %r953, %r920, %r921, %r874;
	// end inline asm
	// begin inline asm
	prmt.b32 %r985, %r920, %r921, %r878;
	// end inline asm
	// begin inline asm
	prmt.b32 %r961, %r928, %r929, %r874;
	// end inline asm
	// begin inline asm
	prmt.b32 %r993, %r928, %r929, %r878;
	// end inline asm
	mov.u32 	%r994, 21520;
	// begin inline asm
	prmt.b32 %r935, %r936, %r937, %r994;
	// end inline asm
	mov.u32 	%r998, 30258;
	// begin inline asm
	prmt.b32 %r939, %r936, %r937, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r943, %r944, %r945, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r947, %r944, %r945, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r951, %r952, %r953, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r955, %r952, %r953, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r959, %r960, %r961, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r963, %r960, %r961, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r967, %r968, %r969, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r971, %r968, %r969, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r975, %r976, %r977, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r976, %r977, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r983, %r984, %r985, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r984, %r985, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r991, %r992, %r993, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r995, %r992, %r993, %r998;
	// end inline asm
	mul.hi.s16 	%rs69, %rs57, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs57, %rs73;
	cvt.s32.s16 	%r1083, %rs74;
	add.s32 	%r1084, %r94, %r1083;
	mul.wide.s32 	%rd103, %r1084, 4;
	add.s64 	%rd105, %rd62, %rd103;
	st.shared.u32 	[%rd105], %r935;
	add.s32 	%r1085, %r1084, 128;
	mul.wide.u32 	%rd106, %r1085, 4;
	add.s64 	%rd107, %rd62, %rd106;
	st.shared.u32 	[%rd107], %r943;
	add.s32 	%r1086, %r1084, 64;
	mul.wide.u32 	%rd108, %r1086, 4;
	add.s64 	%rd109, %rd62, %rd108;
	st.shared.u32 	[%rd109], %r939;
	add.s32 	%r1087, %r1084, 192;
	mul.wide.u32 	%rd110, %r1087, 4;
	add.s64 	%rd111, %rd62, %rd110;
	st.shared.u32 	[%rd111], %r947;
	add.s32 	%r1088, %r95, %r1083;
	mul.wide.u32 	%rd112, %r1088, 4;
	add.s64 	%rd113, %rd62, %rd112;
	st.shared.u32 	[%rd113], %r951;
	add.s32 	%r1089, %r1088, 128;
	mul.wide.u32 	%rd114, %r1089, 4;
	add.s64 	%rd115, %rd62, %rd114;
	st.shared.u32 	[%rd115], %r959;
	add.s32 	%r1090, %r1088, 64;
	mul.wide.u32 	%rd116, %r1090, 4;
	add.s64 	%rd117, %rd62, %rd116;
	st.shared.u32 	[%rd117], %r955;
	add.s32 	%r1091, %r1088, 192;
	mul.wide.u32 	%rd118, %r1091, 4;
	add.s64 	%rd119, %rd62, %rd118;
	st.shared.u32 	[%rd119], %r963;
	add.s32 	%r1092, %r1084, 32;
	mul.wide.u32 	%rd120, %r1092, 4;
	add.s64 	%rd121, %rd62, %rd120;
	st.shared.u32 	[%rd121], %r967;
	add.s32 	%r1093, %r1084, 160;
	mul.wide.u32 	%rd122, %r1093, 4;
	add.s64 	%rd123, %rd62, %rd122;
	st.shared.u32 	[%rd123], %r975;
	add.s32 	%r1094, %r1084, 96;
	mul.wide.u32 	%rd124, %r1094, 4;
	add.s64 	%rd125, %rd62, %rd124;
	st.shared.u32 	[%rd125], %r971;
	add.s32 	%r1095, %r1084, 224;
	mul.wide.u32 	%rd126, %r1095, 4;
	add.s64 	%rd127, %rd62, %rd126;
	st.shared.u32 	[%rd127], %r979;
	add.s32 	%r1096, %r1088, 32;
	mul.wide.u32 	%rd128, %r1096, 4;
	add.s64 	%rd129, %rd62, %rd128;
	st.shared.u32 	[%rd129], %r983;
	add.s32 	%r1097, %r1088, 160;
	mul.wide.u32 	%rd130, %r1097, 4;
	add.s64 	%rd131, %rd62, %rd130;
	st.shared.u32 	[%rd131], %r991;
	add.s32 	%r1098, %r1088, 96;
	mul.wide.u32 	%rd132, %r1098, 4;
	add.s64 	%rd133, %rd62, %rd132;
	st.shared.u32 	[%rd133], %r987;
	add.s32 	%r1099, %r1088, 224;
	mul.wide.u32 	%rd134, %r1099, 4;
	add.s64 	%rd135, %rd62, %rd134;
	st.shared.u32 	[%rd135], %r995;
	bar.sync 	0;
	add.s32 	%r1100, %r272, %r96;
	cvt.u16.u32 	%rs75, %r1100;
	mul.hi.s16 	%rs76, %rs75, 10923;
	shr.u16 	%rs77, %rs76, 15;
	shr.s16 	%rs78, %rs76, 2;
	add.s16 	%rs79, %rs78, %rs77;
	mul.lo.s16 	%rs80, %rs79, 24;
	sub.s16 	%rs81, %rs75, %rs80;
	cvt.s32.s16 	%r273, %rs81;
	add.s32 	%r1101, %r97, %r273;
	mul.wide.s32 	%rd136, %r1101, 4;
	add.s64 	%rd137, %rd62, %rd136;
	ld.shared.u32 	%r274, [%rd137];
	add.s32 	%r1102, %r98, %r273;
	mul.wide.u32 	%rd138, %r1102, 4;
	add.s64 	%rd139, %rd62, %rd138;
	ld.shared.u32 	%r275, [%rd139];
	add.s32 	%r1103, %r99, %r273;
	mul.wide.u32 	%rd140, %r1103, 4;
	add.s64 	%rd141, %rd62, %rd140;
	ld.shared.u32 	%r276, [%rd141];
	add.s32 	%r1104, %r100, %r273;
	mul.wide.u32 	%rd142, %r1104, 4;
	add.s64 	%rd143, %rd62, %rd142;
	ld.shared.u32 	%r277, [%rd143];
	add.s32 	%r1105, %r101, %r273;
	mul.wide.u32 	%rd144, %r1105, 4;
	add.s64 	%rd145, %rd62, %rd144;
	ld.shared.u32 	%r278, [%rd145];
	add.s32 	%r1106, %r102, %r273;
	mul.wide.u32 	%rd146, %r1106, 4;
	add.s64 	%rd147, %rd62, %rd146;
	ld.shared.u32 	%r279, [%rd147];
	add.s32 	%r1107, %r103, %r273;
	mul.wide.u32 	%rd148, %r1107, 4;
	add.s64 	%rd149, %rd62, %rd148;
	ld.shared.u32 	%r280, [%rd149];
	add.s32 	%r1108, %r104, %r273;
	mul.wide.u32 	%rd150, %r1108, 4;
	add.s64 	%rd151, %rd62, %rd150;
	ld.shared.u32 	%r281, [%rd151];
	add.s32 	%r1109, %r105, %r273;
	mul.wide.u32 	%rd152, %r1109, 4;
	add.s64 	%rd153, %rd62, %rd152;
	ld.shared.u32 	%r282, [%rd153];
	add.s32 	%r1110, %r106, %r273;
	mul.wide.u32 	%rd154, %r1110, 4;
	add.s64 	%rd155, %rd62, %rd154;
	ld.shared.u32 	%r283, [%rd155];
	add.s32 	%r1111, %r107, %r273;
	mul.wide.u32 	%rd156, %r1111, 4;
	add.s64 	%rd157, %rd62, %rd156;
	ld.shared.u32 	%r284, [%rd157];
	add.s32 	%r1112, %r108, %r273;
	mul.wide.u32 	%rd158, %r1112, 4;
	add.s64 	%rd159, %rd62, %rd158;
	ld.shared.u32 	%r285, [%rd159];
	add.s32 	%r1113, %r109, %r273;
	mul.wide.u32 	%rd160, %r1113, 4;
	add.s64 	%rd161, %rd62, %rd160;
	ld.shared.u32 	%r286, [%rd161];
	add.s32 	%r1114, %r110, %r273;
	mul.wide.u32 	%rd162, %r1114, 4;
	add.s64 	%rd163, %rd62, %rd162;
	ld.shared.u32 	%r287, [%rd163];
	add.s32 	%r1115, %r111, %r273;
	mul.wide.u32 	%rd164, %r1115, 4;
	add.s64 	%rd165, %rd62, %rd164;
	ld.shared.u32 	%r288, [%rd165];
	add.s32 	%r1116, %r112, %r273;
	mul.wide.u32 	%rd166, %r1116, 4;
	add.s64 	%rd167, %rd62, %rd166;
	ld.shared.u32 	%r289, [%rd167];
	add.s32 	%r1117, %r113, %r273;
	mul.wide.u32 	%rd168, %r1117, 4;
	add.s64 	%rd169, %rd62, %rd168;
	ld.shared.u32 	%r290, [%rd169];
	add.s32 	%r1118, %r114, %r273;
	mul.wide.u32 	%rd170, %r1118, 4;
	add.s64 	%rd171, %rd62, %rd170;
	ld.shared.u32 	%r291, [%rd171];
	add.s32 	%r1119, %r115, %r273;
	mul.wide.u32 	%rd172, %r1119, 4;
	add.s64 	%rd173, %rd62, %rd172;
	ld.shared.u32 	%r292, [%rd173];
	add.s32 	%r1120, %r116, %r273;
	mul.wide.u32 	%rd174, %r1120, 4;
	add.s64 	%rd175, %rd62, %rd174;
	ld.shared.u32 	%r293, [%rd175];
	add.s32 	%r1121, %r117, %r273;
	mul.wide.u32 	%rd176, %r1121, 4;
	add.s64 	%rd177, %rd62, %rd176;
	ld.shared.u32 	%r294, [%rd177];
	add.s32 	%r1122, %r118, %r273;
	mul.wide.s32 	%rd178, %r1122, 4;
	add.s64 	%rd179, %rd62, %rd178;
	ld.shared.u32 	%r295, [%rd179];
	bar.sync 	0;
	shfl.sync.idx.b32	%r296, %r266, 0, 31, -1;
	shfl.sync.idx.b32	%r297, %r266, 1, 31, -1;
	shfl.sync.idx.b32	%r298, %r266, 2, 31, -1;
	shfl.sync.idx.b32	%r299, %r266, 3, 31, -1;
	shfl.sync.idx.b32	%r300, %r266, 4, 31, -1;
	shfl.sync.idx.b32	%r301, %r266, 5, 31, -1;
	shfl.sync.idx.b32	%r302, %r266, 6, 31, -1;
	shfl.sync.idx.b32	%r303, %r266, 7, 31, -1;
	shfl.sync.idx.b32	%r304, %r266, 8, 31, -1;
	shfl.sync.idx.b32	%r305, %r266, 9, 31, -1;
	shfl.sync.idx.b32	%r306, %r266, 10, 31, -1;
	shfl.sync.idx.b32	%r307, %r266, 11, 31, -1;
	shfl.sync.idx.b32	%r308, %r266, 12, 31, -1;
	shfl.sync.idx.b32	%r309, %r266, 13, 31, -1;
	shfl.sync.idx.b32	%r310, %r266, 14, 31, -1;
	shfl.sync.idx.b32	%r311, %r266, 15, 31, -1;
	shfl.sync.idx.b32	%r312, %r266, 16, 31, -1;
	shfl.sync.idx.b32	%r313, %r266, 17, 31, -1;
	shfl.sync.idx.b32	%r314, %r266, 18, 31, -1;
	shfl.sync.idx.b32	%r315, %r266, 19, 31, -1;
	shfl.sync.idx.b32	%r316, %r266, 20, 31, -1;
	shfl.sync.idx.b32	%r317, %r266, 21, 31, -1;
	shfl.sync.idx.b32	%r318, %r266, 22, 31, -1;
	shfl.sync.idx.b32	%r319, %r266, 23, 31, -1;
	setp.eq.s32 	%p252, %r296, 999999999;
	@%p252 bra 	$L__BB0_151;
// %bb.227:                             // %oksrem3321
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1123, %r296, %r273;
	mul.wide.s32 	%rd180, %r1123, 4;
	add.s64 	%rd182, %rd62, %rd180;
	st.shared.u32 	[%rd182], %r274;
	setp.eq.s32 	%p253, %r297, 999999999;
	@%p253 bra 	$L__BB0_152;
// %bb.228:                             // %oksrem3389
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1124, %r297, %r273;
	mul.wide.s32 	%rd183, %r1124, 4;
	add.s64 	%rd185, %rd62, %rd183;
	st.shared.u32 	[%rd185], %r275;
	setp.eq.s32 	%p254, %r298, 999999999;
	@%p254 bra 	$L__BB0_153;
// %bb.229:                             // %oksrem3457
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1125, %r298, %r273;
	mul.wide.s32 	%rd186, %r1125, 4;
	add.s64 	%rd188, %rd62, %rd186;
	st.shared.u32 	[%rd188], %r276;
	setp.eq.s32 	%p255, %r299, 999999999;
	@%p255 bra 	$L__BB0_154;
// %bb.230:                             // %oksrem3525
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1126, %r299, %r273;
	mul.wide.s32 	%rd189, %r1126, 4;
	add.s64 	%rd191, %rd62, %rd189;
	st.shared.u32 	[%rd191], %r277;
	setp.eq.s32 	%p256, %r300, 999999999;
	@%p256 bra 	$L__BB0_155;
// %bb.231:                             // %oksrem3593
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1127, %r300, %r273;
	mul.wide.s32 	%rd192, %r1127, 4;
	add.s64 	%rd194, %rd62, %rd192;
	st.shared.u32 	[%rd194], %r278;
	setp.eq.s32 	%p257, %r301, 999999999;
	@%p257 bra 	$L__BB0_156;
// %bb.232:                             // %oksrem3661
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1128, %r301, %r273;
	mul.wide.s32 	%rd195, %r1128, 4;
	add.s64 	%rd197, %rd62, %rd195;
	st.shared.u32 	[%rd197], %r279;
	setp.eq.s32 	%p258, %r302, 999999999;
	@%p258 bra 	$L__BB0_157;
// %bb.233:                             // %oksrem3729
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1129, %r302, %r273;
	mul.wide.s32 	%rd198, %r1129, 4;
	add.s64 	%rd200, %rd62, %rd198;
	st.shared.u32 	[%rd200], %r280;
	setp.eq.s32 	%p259, %r303, 999999999;
	@%p259 bra 	$L__BB0_158;
// %bb.234:                             // %oksrem3797
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1130, %r303, %r273;
	mul.wide.s32 	%rd201, %r1130, 4;
	add.s64 	%rd203, %rd62, %rd201;
	st.shared.u32 	[%rd203], %r281;
	setp.eq.s32 	%p260, %r304, 999999999;
	@%p260 bra 	$L__BB0_159;
// %bb.235:                             // %oksrem3865
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1131, %r304, %r273;
	mul.wide.s32 	%rd204, %r1131, 4;
	add.s64 	%rd206, %rd62, %rd204;
	st.shared.u32 	[%rd206], %r282;
	setp.eq.s32 	%p261, %r305, 999999999;
	@%p261 bra 	$L__BB0_160;
// %bb.236:                             // %oksrem3933
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1132, %r305, %r273;
	mul.wide.s32 	%rd207, %r1132, 4;
	add.s64 	%rd209, %rd62, %rd207;
	st.shared.u32 	[%rd209], %r283;
	setp.eq.s32 	%p262, %r306, 999999999;
	@%p262 bra 	$L__BB0_161;
// %bb.237:                             // %oksrem4001
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1133, %r306, %r273;
	mul.wide.s32 	%rd210, %r1133, 4;
	add.s64 	%rd212, %rd62, %rd210;
	st.shared.u32 	[%rd212], %r284;
	setp.eq.s32 	%p263, %r307, 999999999;
	@%p263 bra 	$L__BB0_162;
// %bb.238:                             // %oksrem4069
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1134, %r307, %r273;
	mul.wide.s32 	%rd213, %r1134, 4;
	add.s64 	%rd215, %rd62, %rd213;
	st.shared.u32 	[%rd215], %r285;
	setp.eq.s32 	%p264, %r308, 999999999;
	@%p264 bra 	$L__BB0_163;
// %bb.239:                             // %oksrem4137
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1135, %r308, %r273;
	mul.wide.s32 	%rd216, %r1135, 4;
	add.s64 	%rd218, %rd62, %rd216;
	st.shared.u32 	[%rd218], %r286;
	setp.eq.s32 	%p265, %r309, 999999999;
	@%p265 bra 	$L__BB0_164;
// %bb.240:                             // %oksrem4205
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1136, %r309, %r273;
	mul.wide.s32 	%rd219, %r1136, 4;
	add.s64 	%rd221, %rd62, %rd219;
	st.shared.u32 	[%rd221], %r287;
	setp.eq.s32 	%p266, %r310, 999999999;
	@%p266 bra 	$L__BB0_165;
// %bb.241:                             // %oksrem4273
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1137, %r310, %r273;
	mul.wide.s32 	%rd222, %r1137, 4;
	add.s64 	%rd224, %rd62, %rd222;
	st.shared.u32 	[%rd224], %r288;
	setp.eq.s32 	%p267, %r311, 999999999;
	@%p267 bra 	$L__BB0_166;
// %bb.242:                             // %oksrem4341
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1138, %r311, %r273;
	mul.wide.s32 	%rd225, %r1138, 4;
	add.s64 	%rd227, %rd62, %rd225;
	st.shared.u32 	[%rd227], %r289;
	setp.eq.s32 	%p268, %r312, 999999999;
	@%p268 bra 	$L__BB0_167;
// %bb.243:                             // %oksrem4409
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1139, %r312, %r273;
	mul.wide.s32 	%rd228, %r1139, 4;
	add.s64 	%rd230, %rd62, %rd228;
	st.shared.u32 	[%rd230], %r290;
	setp.eq.s32 	%p269, %r313, 999999999;
	@%p269 bra 	$L__BB0_168;
// %bb.244:                             // %oksrem4477
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1140, %r313, %r273;
	mul.wide.s32 	%rd231, %r1140, 4;
	add.s64 	%rd233, %rd62, %rd231;
	st.shared.u32 	[%rd233], %r291;
	setp.eq.s32 	%p270, %r314, 999999999;
	@%p270 bra 	$L__BB0_169;
// %bb.245:                             // %oksrem4545
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1141, %r314, %r273;
	mul.wide.s32 	%rd234, %r1141, 4;
	add.s64 	%rd236, %rd62, %rd234;
	st.shared.u32 	[%rd236], %r292;
	setp.eq.s32 	%p271, %r315, 999999999;
	@%p271 bra 	$L__BB0_170;
// %bb.246:                             // %oksrem4613
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1142, %r315, %r273;
	mul.wide.s32 	%rd237, %r1142, 4;
	add.s64 	%rd239, %rd62, %rd237;
	st.shared.u32 	[%rd239], %r293;
	setp.eq.s32 	%p272, %r316, 999999999;
	@%p272 bra 	$L__BB0_171;
// %bb.247:                             // %oksrem4681
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1143, %r316, %r273;
	mul.wide.s32 	%rd240, %r1143, 4;
	add.s64 	%rd242, %rd62, %rd240;
	st.shared.u32 	[%rd242], %r294;
	setp.eq.s32 	%p273, %r317, 999999999;
	@%p273 bra 	$L__BB0_172;
// %bb.248:                             // %oksrem4750
                                        //   in Loop: Header=BB0_149 Depth=1
	selp.b32 	%r1144, 0, %r295, %p274;
	add.s32 	%r1145, %r317, %r273;
	mul.wide.s32 	%rd243, %r1145, 4;
	add.s64 	%rd245, %rd62, %rd243;
	st.shared.u32 	[%rd245], %r1144;
	setp.eq.s32 	%p275, %r318, 999999999;
	@%p275 bra 	$L__BB0_173;
// %bb.249:                             // %oksrem4818
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1146, %r318, %r273;
	mul.wide.s32 	%rd246, %r1146, 4;
	add.s64 	%rd248, %rd62, %rd246;
	mov.u32 	%r1147, 0;
	st.shared.u32 	[%rd248], %r1147;
	setp.eq.s32 	%p276, %r319, 999999999;
	@%p276 bra 	$L__BB0_174;
// %bb.250:                             // %oksrem4885
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1149, %r319, %r273;
	mul.wide.s32 	%rd249, %r1149, 4;
	add.s64 	%rd251, %rd62, %rd249;
	st.shared.u32 	[%rd251], %r1147;
	bar.sync 	0;
	mov.u32 	%r3734, %r1147;
	mov.u32 	%r3735, %r1147;
	mov.u32 	%r3736, %r1147;
	mov.u32 	%r3737, %r1147;
	mov.u32 	%r3738, %r1147;
	mov.u32 	%r3739, %r1147;
	mov.u32 	%r3740, %r1147;
	mov.u32 	%r3741, %r1147;
	mov.u32 	%r3742, %r1147;
	mov.u32 	%r3743, %r1147;
	mov.u32 	%r3744, %r1147;
	mov.u32 	%r3745, %r1147;
	mov.u32 	%r3746, %r1147;
	mov.u32 	%r3747, %r1147;
	mov.u32 	%r3748, %r1147;
	mov.u32 	%r3749, %r1147;
	mov.u32 	%r3750, %r1147;
	mov.u32 	%r3751, %r1147;
	mov.u32 	%r3752, %r1147;
	mov.u32 	%r3753, %r1147;
	mov.u32 	%r3754, %r1147;
	mov.u32 	%r3755, %r1147;
	mov.u32 	%r3756, %r1147;
	mov.u32 	%r3757, %r1147;
	@%p92 bra 	$L__BB0_175;
// %bb.251:                             // %oksrem4954
                                        //   in Loop: Header=BB0_149 Depth=1
	cvt.u16.u32 	%rs82, %r272;
	mul.hi.s16 	%rs83, %rs82, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs82, %rs87;
	cvt.s32.s16 	%r1150, %rs88;
	mul.wide.s32 	%rd252, %r1150, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3734, [%rd253];
	ld.shared.u32 	%r3735, [%rd16+4];
	ld.shared.u32 	%r3736, [%rd16+8];
	ld.shared.u32 	%r3737, [%rd16+12];
	ld.shared.u32 	%r3738, [%rd16+16];
	ld.shared.u32 	%r3739, [%rd16+20];
	ld.shared.u32 	%r3740, [%rd16+24];
	ld.shared.u32 	%r3741, [%rd16+28];
	ld.shared.u32 	%r3742, [%rd16+32];
	ld.shared.u32 	%r3743, [%rd16+36];
	ld.shared.u32 	%r3744, [%rd16+40];
	ld.shared.u32 	%r3745, [%rd16+44];
	ld.shared.u32 	%r3746, [%rd16+48];
	ld.shared.u32 	%r3747, [%rd16+52];
	ld.shared.u32 	%r3748, [%rd16+56];
	ld.shared.u32 	%r3749, [%rd16+60];
	add.s16 	%rs89, %rs82, 16;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r1151, %rs95;
	mul.wide.s32 	%rd254, %r1151, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3750, [%rd255];
	add.s16 	%rs96, %rs82, 17;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r1152, %rs102;
	mul.wide.s32 	%rd256, %r1152, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3751, [%rd257];
	add.s16 	%rs103, %rs82, 18;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r1153, %rs109;
	mul.wide.s32 	%rd258, %r1153, 4;
	add.s64 	%rd259, %rd16, %rd258;
	ld.shared.u32 	%r3752, [%rd259];
	add.s16 	%rs110, %rs82, 19;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r1154, %rs116;
	mul.wide.s32 	%rd260, %r1154, 4;
	add.s64 	%rd261, %rd16, %rd260;
	ld.shared.u32 	%r3753, [%rd261];
	add.s16 	%rs117, %rs82, 20;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r1155, %rs123;
	mul.wide.s32 	%rd262, %r1155, 4;
	add.s64 	%rd263, %rd16, %rd262;
	ld.shared.u32 	%r3754, [%rd263];
	add.s16 	%rs124, %rs82, 21;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r1156, %rs130;
	mul.wide.s32 	%rd264, %r1156, 4;
	add.s64 	%rd265, %rd16, %rd264;
	ld.shared.u32 	%r3755, [%rd265];
	add.s16 	%rs131, %rs82, 22;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r1157, %rs137;
	mul.wide.s32 	%rd266, %r1157, 4;
	add.s64 	%rd267, %rd16, %rd266;
	ld.shared.u32 	%r3756, [%rd267];
	add.s16 	%rs138, %rs82, 23;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r1158, %rs144;
	mul.wide.s32 	%rd268, %r1158, 4;
	add.s64 	%rd269, %rd16, %rd268;
	ld.shared.u32 	%r3757, [%rd269];
$L__BB0_175:                            // %L13901
                                        //   in Loop: Header=BB0_149 Depth=1
	bar.sync 	0;
	mul.lo.s32 	%r1160, %r122, 589824;
	add.s32 	%r147, %r119, %r1160;
	add.s32 	%r148, %r120, %r1160;
	mov.u32 	%r3758, %r1147;
	bra.uni 	$L__BB0_176;
$L__BB0_185:                            // %L28721
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r122, %r122, 4;
	bar.sync 	0;
	add.s32 	%r3758, %r3758, 2359296;
	setp.ne.s32 	%p317, %r3758, 14155776;
	@%p317 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_186;
$L__BB0_176:                            // %L13927
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p279, %r3758, 0;
	selp.b32 	%r1697, %r3734, 0, %p279;
	setp.eq.s32 	%p280, %r3758, 2359296;
	selp.b32 	%r1698, %r3738, %r1697, %p280;
	setp.eq.s32 	%p281, %r3758, 4718592;
	selp.b32 	%r1699, %r3742, %r1698, %p281;
	setp.eq.s32 	%p282, %r3758, 7077888;
	selp.b32 	%r1700, %r3746, %r1699, %p282;
	setp.eq.s32 	%p283, %r3758, 9437184;
	selp.b32 	%r1701, %r3750, %r1700, %p283;
	setp.eq.s32 	%p284, %r3758, 11796480;
	selp.b32 	%r1702, %r3754, %r1701, %p284;
	selp.b32 	%r1703, %r3735, 0, %p279;
	selp.b32 	%r1704, %r3739, %r1703, %p280;
	selp.b32 	%r1705, %r3743, %r1704, %p281;
	selp.b32 	%r1706, %r3747, %r1705, %p282;
	selp.b32 	%r1707, %r3751, %r1706, %p283;
	selp.b32 	%r1708, %r3755, %r1707, %p284;
	selp.b32 	%r1709, %r3736, 0, %p279;
	selp.b32 	%r1710, %r3740, %r1709, %p280;
	selp.b32 	%r1711, %r3744, %r1710, %p281;
	selp.b32 	%r1712, %r3748, %r1711, %p282;
	selp.b32 	%r1713, %r3752, %r1712, %p283;
	selp.b32 	%r1714, %r3756, %r1713, %p284;
	selp.b32 	%r1715, %r3737, 0, %p279;
	selp.b32 	%r1716, %r3741, %r1715, %p280;
	selp.b32 	%r1717, %r3745, %r1716, %p281;
	selp.b32 	%r1718, %r3749, %r1717, %p282;
	selp.b32 	%r1719, %r3753, %r1718, %p283;
	selp.b32 	%r1720, %r3757, %r1719, %p284;
	mov.u16 	%rs182, 25600;
	// begin inline asm
	mov.b32 %r1166, {%rs182, %rs182};
	// end inline asm
	mov.u16 	%rs184, 21504;
	// begin inline asm
	mov.b32 %r1177, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1165, %r1702, -2004318072;
	mov.u32 	%r1302, 983055;
	// begin inline asm
	lop3.b32 %r1163, %r1302, %r1165, %r1166, 202;
	// end inline asm
	mov.u16 	%rs188, 18432;
	// begin inline asm
	mov.b32 %r1167, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1168, %r1166, %r1167;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1171, %r1163, %r1168;
	// end inline asm
	mov.u32 	%r1313, 15728880;
	// begin inline asm
	lop3.b32 %r1174, %r1313, %r1165, %r1177, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1178, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1179, %r1177, %r1178;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1182, %r1174, %r1179;
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1223, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1211, %r1708, -2004318072;
	// begin inline asm
	lop3.b32 %r1209, %r1302, %r1211, %r1212, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1213, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1214, %r1212, %r1213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1217, %r1209, %r1214;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1220, %r1313, %r1211, %r1223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1224, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1225, %r1223, %r1224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1228, %r1220, %r1225;
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1269, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1257, %r1714, -2004318072;
	// begin inline asm
	lop3.b32 %r1255, %r1302, %r1257, %r1258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1259, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1260, %r1258, %r1259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1263, %r1255, %r1260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1266, %r1313, %r1257, %r1269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1270, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1271, %r1269, %r1270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1274, %r1266, %r1271;
	// end inline asm
	// begin inline asm
	mov.b32 %r1304, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1315, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1303, %r1720, -2004318072;
	// begin inline asm
	lop3.b32 %r1301, %r1302, %r1303, %r1304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1305, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1306, %r1304, %r1305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1309, %r1301, %r1306;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1312, %r1313, %r1303, %r1315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1316, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1317, %r1315, %r1316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1320, %r1312, %r1317;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1171;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1345, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1182;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1348, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1217;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1351, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1228;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1354, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1263;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1357, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1274;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1360, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1309;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1363, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1320;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1366, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1432, %r1429}, {%r405, %r408}, {%r1345}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1441, %r1438}, {%r405, %r408}, {%r1348}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1450, %r1447}, {%r405, %r408}, {%r1351}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1459, %r1456}, {%r405, %r408}, {%r1354}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1468, %r1465}, {%r405, %r408}, {%r1357}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1477, %r1474}, {%r405, %r408}, {%r1360}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1486, %r1483}, {%r405, %r408}, {%r1363}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1495, %r1492}, {%r405, %r408}, {%r1366}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1425, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1427, %r1425, %r1429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r457, %r1432, %r1427;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1434, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1436, %r1434, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1439, %r457, %r1441, %r1436;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1443, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1445, %r1443, %r1447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1448, %r457, %r1450, %r1445;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1452, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1454, %r1452, %r1456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1457, %r457, %r1459, %r1454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1461, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1463, %r1461, %r1465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1466, %r457, %r1468, %r1463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1470, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1472, %r1470, %r1474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1475, %r457, %r1477, %r1472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1479, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1481, %r1479, %r1483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r457, %r1486, %r1481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1488, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1490, %r1488, %r1492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r457, %r1495, %r1490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r460, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r457, %r1429, %r1497;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1504, %r460, %r1441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r457, %r1438, %r1504;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1511, %r460, %r1450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r457, %r1447, %r1511;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1518, %r460, %r1459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r457, %r1456, %r1518;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1525, %r460, %r1468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r457, %r1465, %r1525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r460, %r1477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r457, %r1474, %r1532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1539, %r460, %r1486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1542, %r457, %r1483, %r1539;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1546, %r460, %r1495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1549, %r457, %r1492, %r1546;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1634, %r1635}, {%r501, %r507, %r504, %r510}, {%r1430, %r1500}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1642, %r1643}, {%r501, %r507, %r504, %r510}, {%r1439, %r1507}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1650, %r1651}, {%r501, %r507, %r504, %r510}, {%r1448, %r1514}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1658, %r1659}, {%r501, %r507, %r504, %r510}, {%r1457, %r1521}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1666, %r1667}, {%r501, %r507, %r504, %r510}, {%r1466, %r1528}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1674, %r1675}, {%r501, %r507, %r504, %r510}, {%r1475, %r1535}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1682, %r1683}, {%r501, %r507, %r504, %r510}, {%r1484, %r1542}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1690, %r1691}, {%r501, %r507, %r504, %r510}, {%r1493, %r1549}, {%r1147, %r1147};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1633, %r1634, %r1635, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1637, %r1634, %r1635, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1641, %r1642, %r1643, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1645, %r1642, %r1643, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1649, %r1650, %r1651, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1653, %r1650, %r1651, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1657, %r1658, %r1659, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1661, %r1658, %r1659, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1665, %r1666, %r1667, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1669, %r1666, %r1667, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1673, %r1674, %r1675, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1677, %r1674, %r1675, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1681, %r1682, %r1683, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1685, %r1682, %r1683, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1689, %r1690, %r1691, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1693, %r1690, %r1691, %r998;
	// end inline asm
	st.shared.u32 	[%rd7], %r1633;
	st.shared.u32 	[%rd8], %r1637;
	st.shared.u32 	[%rd9], %r1641;
	st.shared.u32 	[%rd10], %r1645;
	st.shared.u32 	[%rd17], %r1649;
	st.shared.u32 	[%rd18], %r1653;
	st.shared.u32 	[%rd19], %r1657;
	st.shared.u32 	[%rd20], %r1661;
	st.shared.u32 	[%rd21], %r1665;
	st.shared.u32 	[%rd22], %r1669;
	st.shared.u32 	[%rd23], %r1673;
	st.shared.u32 	[%rd24], %r1677;
	st.shared.u32 	[%rd25], %r1681;
	st.shared.u32 	[%rd26], %r1685;
	st.shared.u32 	[%rd27], %r1689;
	st.shared.u32 	[%rd28], %r1693;
	@%p278 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_177;
$L__BB0_252:                            // %pass8542
                                        //   in Loop: Header=BB0_176 Depth=2
	st.shared.u32 	[%rd7], %r1633;
	st.shared.u32 	[%rd8], %r1637;
	st.shared.u32 	[%rd9], %r1641;
	st.shared.u32 	[%rd10], %r1645;
	st.shared.u32 	[%rd17], %r1649;
	st.shared.u32 	[%rd18], %r1653;
	st.shared.u32 	[%rd19], %r1657;
	st.shared.u32 	[%rd20], %r1661;
	st.shared.u32 	[%rd21], %r1665;
	st.shared.u32 	[%rd22], %r1669;
	st.shared.u32 	[%rd23], %r1673;
	st.shared.u32 	[%rd24], %r1677;
	st.shared.u32 	[%rd25], %r1681;
	st.shared.u32 	[%rd26], %r1685;
	st.shared.u32 	[%rd27], %r1689;
	st.shared.u32 	[%rd28], %r1693;
$L__BB0_177:                            // %L22298
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	mov.u32 	%r1721, 0;
	mov.u32 	%r3760, %r1721;
	mov.u32 	%r3761, %r1721;
	mov.u32 	%r3762, %r1721;
	mov.u32 	%r3763, %r1721;
	@%p278 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_178;
$L__BB0_253:                            // %pass10637
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3760, [%rd11];
	ld.shared.u32 	%r3761, [%rd12];
	ld.shared.u32 	%r3762, [%rd13];
	ld.shared.u32 	%r3763, [%rd14];
$L__BB0_178:                            // %L23373
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1757, %r1754}, {%r519, %r522}, {%r3760}, {%r1721, %r1721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1766, %r1763}, {%r519, %r522}, {%r3761}, {%r1721, %r1721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1775, %r1772}, {%r519, %r522}, {%r3762}, {%r1721, %r1721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1784, %r1781}, {%r519, %r522}, {%r3763}, {%r1721, %r1721};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1750, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1752, %r1750, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r571, %r1757, %r1752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1759, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r1759, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r571, %r1766, %r1761;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1768, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r1768, %r1772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r571, %r1775, %r1770;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1777, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r1777, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r571, %r1784, %r1779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1786, %r574, %r1757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r571, %r1754, %r1786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1793, %r574, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r571, %r1763, %r1793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1800, %r574, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r571, %r1772, %r1800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1807, %r574, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r571, %r1781, %r1807;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1814, %r1815}, {%r615, %r621, %r618, %r624}, {%r1755, %r1789}, {%r1721, %r1721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1824, %r1825}, {%r615, %r621, %r618, %r624}, {%r1764, %r1796}, {%r1721, %r1721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1834, %r1835}, {%r615, %r621, %r618, %r624}, {%r1773, %r1803}, {%r1721, %r1721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1844, %r1845}, {%r615, %r621, %r618, %r624}, {%r1782, %r1810}, {%r1721, %r1721};
	// end inline asm
	mov.u32 	%r1889, 805318656;
	@%p278 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_179;
$L__BB0_254:                            // %pass11131
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r1854, %r1814, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r1815, %r1815, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r1834, %r1834, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r1835, %r1835, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r1889, %r1865, %r1721;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1873, %r1824, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1825, %r1825, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r1844, %r1844, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r1845, %r1845, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r1889, %r1884, %r1721;
	// end inline asm
	add.s32 	%r1892, %r148, %r3758;
	cvt.s64.s32 	%rd270, %r1892;
	add.s64 	%rd271, %rd270, %rd15;
	mul.hi.s64 	%rd272, %rd271, 1024819115206086201;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 25;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p287, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 603979776;
	setp.ne.s64 	%p288, %rd276, %rd271;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd277, -1, 0, %p289;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -603979776;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r1869;
	add.s32 	%r1893, %r147, %r3758;
	cvt.s64.s32 	%rd283, %r1893;
	add.s64 	%rd284, %rd283, %rd15;
	mul.hi.s64 	%rd285, %rd284, 1024819115206086201;
	shr.u64 	%rd286, %rd285, 63;
	shr.s64 	%rd287, %rd285, 25;
	add.s64 	%rd288, %rd287, %rd286;
	setp.lt.s64 	%p290, %rd284, 0;
	mul.lo.s64 	%rd289, %rd288, 603979776;
	setp.ne.s64 	%p291, %rd289, %rd284;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd290, -1, 0, %p292;
	add.s64 	%rd291, %rd288, %rd290;
	mul.lo.s64 	%rd292, %rd291, -603979776;
	add.s64 	%rd293, %rd292, %rd284;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r1888;
$L__BB0_179:                            // %L23903
                                        //   in Loop: Header=BB0_176 Depth=2
	mov.u32 	%r1894, 0;
	mov.u32 	%r3764, %r1894;
	mov.u32 	%r3765, %r1894;
	mov.u32 	%r3766, %r1894;
	mov.u32 	%r3767, %r1894;
	@%p278 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_180;
$L__BB0_255:                            // %pass11409
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3764, [%rd29];
	ld.shared.u32 	%r3765, [%rd30];
	ld.shared.u32 	%r3766, [%rd31];
	ld.shared.u32 	%r3767, [%rd32];
$L__BB0_180:                            // %L24979
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1930, %r1927}, {%r519, %r522}, {%r3764}, {%r1894, %r1894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1939, %r1936}, {%r519, %r522}, {%r3765}, {%r1894, %r1894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1948, %r1945}, {%r519, %r522}, {%r3766}, {%r1894, %r1894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1957, %r1954}, {%r519, %r522}, {%r3767}, {%r1894, %r1894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1923, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1925, %r1923, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1928, %r571, %r1930, %r1925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1932, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1934, %r1932, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r571, %r1939, %r1934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1941, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1943, %r1941, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1946, %r571, %r1948, %r1943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1950, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1952, %r1950, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r571, %r1957, %r1952;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1959, %r574, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r571, %r1927, %r1959;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1966, %r574, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r571, %r1936, %r1966;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r574, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r571, %r1945, %r1973;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1980, %r574, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r571, %r1954, %r1980;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1987, %r1988}, {%r615, %r621, %r618, %r624}, {%r1928, %r1962}, {%r1894, %r1894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1997, %r1998}, {%r615, %r621, %r618, %r624}, {%r1937, %r1969}, {%r1894, %r1894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2007, %r2008}, {%r615, %r621, %r618, %r624}, {%r1946, %r1976}, {%r1894, %r1894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2017, %r2018}, {%r615, %r621, %r618, %r624}, {%r1955, %r1983}, {%r1894, %r1894};
	// end inline asm
	@%p278 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_181;
$L__BB0_256:                            // %pass11903
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2027, %r1987, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r1988, %r1988, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r2007, %r2007, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r2008, %r2008, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r1889, %r2038, %r1894;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2046, %r1997, %r1997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r1998, %r1998, %r2046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r2017, %r2017, %r2049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r2018, %r2018, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r1889, %r2057, %r1894;
	// end inline asm
	add.s32 	%r2065, %r148, %r3758;
	add.s32 	%r2066, %r2065, 589824;
	cvt.s64.s32 	%rd296, %r2066;
	add.s64 	%rd297, %rd296, %rd15;
	mul.hi.s64 	%rd298, %rd297, 1024819115206086201;
	shr.u64 	%rd299, %rd298, 63;
	shr.s64 	%rd300, %rd298, 25;
	add.s64 	%rd301, %rd300, %rd299;
	setp.lt.s64 	%p295, %rd297, 0;
	mul.lo.s64 	%rd302, %rd301, 603979776;
	setp.ne.s64 	%p296, %rd302, %rd297;
	and.pred  	%p297, %p295, %p296;
	selp.s64 	%rd303, -1, 0, %p297;
	add.s64 	%rd304, %rd301, %rd303;
	mul.lo.s64 	%rd305, %rd304, -603979776;
	add.s64 	%rd306, %rd305, %rd297;
	shl.b64 	%rd307, %rd306, 2;
	add.s64 	%rd308, %rd4, %rd307;
	st.global.u32 	[%rd308], %r2042;
	add.s32 	%r2067, %r147, %r3758;
	add.s32 	%r2068, %r2067, 589824;
	cvt.s64.s32 	%rd309, %r2068;
	add.s64 	%rd310, %rd309, %rd15;
	mul.hi.s64 	%rd311, %rd310, 1024819115206086201;
	shr.u64 	%rd312, %rd311, 63;
	shr.s64 	%rd313, %rd311, 25;
	add.s64 	%rd314, %rd313, %rd312;
	setp.lt.s64 	%p298, %rd310, 0;
	mul.lo.s64 	%rd315, %rd314, 603979776;
	setp.ne.s64 	%p299, %rd315, %rd310;
	and.pred  	%p300, %p298, %p299;
	selp.s64 	%rd316, -1, 0, %p300;
	add.s64 	%rd317, %rd314, %rd316;
	mul.lo.s64 	%rd318, %rd317, -603979776;
	add.s64 	%rd319, %rd318, %rd310;
	shl.b64 	%rd320, %rd319, 2;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r2061;
$L__BB0_181:                            // %L25509
                                        //   in Loop: Header=BB0_176 Depth=2
	mov.u32 	%r2069, 0;
	mov.u32 	%r3768, %r2069;
	mov.u32 	%r3769, %r2069;
	mov.u32 	%r3770, %r2069;
	mov.u32 	%r3771, %r2069;
	@%p278 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_182;
$L__BB0_257:                            // %pass12181
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3768, [%rd33];
	ld.shared.u32 	%r3769, [%rd34];
	ld.shared.u32 	%r3770, [%rd35];
	ld.shared.u32 	%r3771, [%rd36];
$L__BB0_182:                            // %L26585
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2105, %r2102}, {%r519, %r522}, {%r3768}, {%r2069, %r2069};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2114, %r2111}, {%r519, %r522}, {%r3769}, {%r2069, %r2069};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2123, %r2120}, {%r519, %r522}, {%r3770}, {%r2069, %r2069};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2132, %r2129}, {%r519, %r522}, {%r3771}, {%r2069, %r2069};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2098, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2100, %r2098, %r2102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2103, %r571, %r2105, %r2100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2107, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2109, %r2107, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2112, %r571, %r2114, %r2109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2116, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2118, %r2116, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2121, %r571, %r2123, %r2118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2125, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2127, %r2125, %r2129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2130, %r571, %r2132, %r2127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r574, %r2105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r571, %r2102, %r2134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r574, %r2114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2144, %r571, %r2111, %r2141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2148, %r574, %r2123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r571, %r2120, %r2148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r574, %r2132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r571, %r2129, %r2155;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2162, %r2163}, {%r615, %r621, %r618, %r624}, {%r2103, %r2137}, {%r2069, %r2069};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2172, %r2173}, {%r615, %r621, %r618, %r624}, {%r2112, %r2144}, {%r2069, %r2069};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2182, %r2183}, {%r615, %r621, %r618, %r624}, {%r2121, %r2151}, {%r2069, %r2069};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2192, %r2193}, {%r615, %r621, %r618, %r624}, {%r2130, %r2158}, {%r2069, %r2069};
	// end inline asm
	@%p278 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_183;
$L__BB0_258:                            // %pass12675
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2202, %r2162, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r2163, %r2163, %r2202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r2182, %r2182, %r2205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r2183, %r2183, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2217, %r1889, %r2213, %r2069;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2221, %r2172, %r2172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r2173, %r2173, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2228, %r2192, %r2192, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r2193, %r2193, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r1889, %r2232, %r2069;
	// end inline asm
	add.s32 	%r2240, %r148, %r3758;
	add.s32 	%r2241, %r2240, 1179648;
	cvt.s64.s32 	%rd322, %r2241;
	add.s64 	%rd323, %rd322, %rd15;
	mul.hi.s64 	%rd324, %rd323, 1024819115206086201;
	shr.u64 	%rd325, %rd324, 63;
	shr.s64 	%rd326, %rd324, 25;
	add.s64 	%rd327, %rd326, %rd325;
	setp.lt.s64 	%p303, %rd323, 0;
	mul.lo.s64 	%rd328, %rd327, 603979776;
	setp.ne.s64 	%p304, %rd328, %rd323;
	and.pred  	%p305, %p303, %p304;
	selp.s64 	%rd329, -1, 0, %p305;
	add.s64 	%rd330, %rd327, %rd329;
	mul.lo.s64 	%rd331, %rd330, -603979776;
	add.s64 	%rd332, %rd331, %rd323;
	shl.b64 	%rd333, %rd332, 2;
	add.s64 	%rd334, %rd4, %rd333;
	st.global.u32 	[%rd334], %r2217;
	add.s32 	%r2242, %r147, %r3758;
	add.s32 	%r2243, %r2242, 1179648;
	cvt.s64.s32 	%rd335, %r2243;
	add.s64 	%rd336, %rd335, %rd15;
	mul.hi.s64 	%rd337, %rd336, 1024819115206086201;
	shr.u64 	%rd338, %rd337, 63;
	shr.s64 	%rd339, %rd337, 25;
	add.s64 	%rd340, %rd339, %rd338;
	setp.lt.s64 	%p306, %rd336, 0;
	mul.lo.s64 	%rd341, %rd340, 603979776;
	setp.ne.s64 	%p307, %rd341, %rd336;
	and.pred  	%p308, %p306, %p307;
	selp.s64 	%rd342, -1, 0, %p308;
	add.s64 	%rd343, %rd340, %rd342;
	mul.lo.s64 	%rd344, %rd343, -603979776;
	add.s64 	%rd345, %rd344, %rd336;
	shl.b64 	%rd346, %rd345, 2;
	add.s64 	%rd347, %rd4, %rd346;
	st.global.u32 	[%rd347], %r2236;
$L__BB0_183:                            // %L27115
                                        //   in Loop: Header=BB0_176 Depth=2
	mov.u32 	%r2244, 0;
	mov.u32 	%r3772, %r2244;
	mov.u32 	%r3773, %r2244;
	mov.u32 	%r3774, %r2244;
	mov.u32 	%r3775, %r2244;
	@%p278 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_184;
$L__BB0_259:                            // %pass12953
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3772, [%rd37];
	ld.shared.u32 	%r3773, [%rd38];
	ld.shared.u32 	%r3774, [%rd39];
	ld.shared.u32 	%r3775, [%rd40];
$L__BB0_184:                            // %L28191
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2280, %r2277}, {%r519, %r522}, {%r3772}, {%r2244, %r2244};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2289, %r2286}, {%r519, %r522}, {%r3773}, {%r2244, %r2244};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2298, %r2295}, {%r519, %r522}, {%r3774}, {%r2244, %r2244};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2307, %r2304}, {%r519, %r522}, {%r3775}, {%r2244, %r2244};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2273, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2275, %r2273, %r2277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2278, %r571, %r2280, %r2275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2282, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2284, %r2282, %r2286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2287, %r571, %r2289, %r2284;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2291, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2293, %r2291, %r2295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2296, %r571, %r2298, %r2293;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2300, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2302, %r2300, %r2304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2305, %r571, %r2307, %r2302;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2309, %r574, %r2280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2312, %r571, %r2277, %r2309;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2316, %r574, %r2289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2319, %r571, %r2286, %r2316;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2323, %r574, %r2298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2326, %r571, %r2295, %r2323;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2330, %r574, %r2307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2333, %r571, %r2304, %r2330;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2337, %r2338}, {%r615, %r621, %r618, %r624}, {%r2278, %r2312}, {%r2244, %r2244};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2347, %r2348}, {%r615, %r621, %r618, %r624}, {%r2287, %r2319}, {%r2244, %r2244};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2357, %r2358}, {%r615, %r621, %r618, %r624}, {%r2296, %r2326}, {%r2244, %r2244};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2367, %r2368}, {%r615, %r621, %r618, %r624}, {%r2305, %r2333}, {%r2244, %r2244};
	// end inline asm
	@%p278 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_185;
$L__BB0_260:                            // %pass13447
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2377, %r2337, %r2337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2380, %r2338, %r2338, %r2377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2384, %r2357, %r2357, %r2380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2388, %r2358, %r2358, %r2384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2392, %r1889, %r2388, %r2244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2396, %r2347, %r2347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2399, %r2348, %r2348, %r2396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2403, %r2367, %r2367, %r2399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2407, %r2368, %r2368, %r2403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2411, %r1889, %r2407, %r2244;
	// end inline asm
	add.s32 	%r2415, %r148, %r3758;
	add.s32 	%r2416, %r2415, 1769472;
	cvt.s64.s32 	%rd348, %r2416;
	add.s64 	%rd349, %rd348, %rd15;
	mul.hi.s64 	%rd350, %rd349, 1024819115206086201;
	shr.u64 	%rd351, %rd350, 63;
	shr.s64 	%rd352, %rd350, 25;
	add.s64 	%rd353, %rd352, %rd351;
	setp.lt.s64 	%p311, %rd349, 0;
	mul.lo.s64 	%rd354, %rd353, 603979776;
	setp.ne.s64 	%p312, %rd354, %rd349;
	and.pred  	%p313, %p311, %p312;
	selp.s64 	%rd355, -1, 0, %p313;
	add.s64 	%rd356, %rd353, %rd355;
	mul.lo.s64 	%rd357, %rd356, -603979776;
	add.s64 	%rd358, %rd357, %rd349;
	shl.b64 	%rd359, %rd358, 2;
	add.s64 	%rd360, %rd4, %rd359;
	st.global.u32 	[%rd360], %r2392;
	add.s32 	%r2417, %r147, %r3758;
	add.s32 	%r2418, %r2417, 1769472;
	cvt.s64.s32 	%rd361, %r2418;
	add.s64 	%rd362, %rd361, %rd15;
	mul.hi.s64 	%rd363, %rd362, 1024819115206086201;
	shr.u64 	%rd364, %rd363, 63;
	shr.s64 	%rd365, %rd363, 25;
	add.s64 	%rd366, %rd365, %rd364;
	setp.lt.s64 	%p314, %rd362, 0;
	mul.lo.s64 	%rd367, %rd366, 603979776;
	setp.ne.s64 	%p315, %rd367, %rd362;
	and.pred  	%p316, %p314, %p315;
	selp.s64 	%rd368, -1, 0, %p316;
	add.s64 	%rd369, %rd366, %rd368;
	mul.lo.s64 	%rd370, %rd369, -603979776;
	add.s64 	%rd371, %rd370, %rd362;
	shl.b64 	%rd372, %rd371, 2;
	add.s64 	%rd373, %rd4, %rd372;
	st.global.u32 	[%rd373], %r2411;
	bra.uni 	$L__BB0_185;
$L__BB0_186:                            // %L28737.preheader
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r193, %r147, %r3758;
	add.s32 	%r194, %r148, %r3758;
	mov.u32 	%r2419, 0;
	mov.u32 	%r3776, %r2419;
	bra.uni 	$L__BB0_187;
$L__BB0_196:                            // %L43531
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r122, %r122, 4;
	bar.sync 	0;
	add.s32 	%r3776, %r3776, 2359296;
	setp.ne.s32 	%p357, %r3776, 14155776;
	@%p357 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_197;
$L__BB0_187:                            // %L28737
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p319, %r3776, 0;
	selp.b32 	%r2956, %r3734, 0, %p319;
	setp.eq.s32 	%p320, %r3776, 2359296;
	selp.b32 	%r2957, %r3738, %r2956, %p320;
	setp.eq.s32 	%p321, %r3776, 4718592;
	selp.b32 	%r2958, %r3742, %r2957, %p321;
	setp.eq.s32 	%p322, %r3776, 7077888;
	selp.b32 	%r2959, %r3746, %r2958, %p322;
	setp.eq.s32 	%p323, %r3776, 9437184;
	selp.b32 	%r2960, %r3750, %r2959, %p323;
	setp.eq.s32 	%p324, %r3776, 11796480;
	selp.b32 	%r2961, %r3754, %r2960, %p324;
	selp.b32 	%r2962, %r3735, 0, %p319;
	selp.b32 	%r2963, %r3739, %r2962, %p320;
	selp.b32 	%r2964, %r3743, %r2963, %p321;
	selp.b32 	%r2965, %r3747, %r2964, %p322;
	selp.b32 	%r2966, %r3751, %r2965, %p323;
	selp.b32 	%r2967, %r3755, %r2966, %p324;
	selp.b32 	%r2968, %r3736, 0, %p319;
	selp.b32 	%r2969, %r3740, %r2968, %p320;
	selp.b32 	%r2970, %r3744, %r2969, %p321;
	selp.b32 	%r2971, %r3748, %r2970, %p322;
	selp.b32 	%r2972, %r3752, %r2971, %p323;
	selp.b32 	%r2973, %r3756, %r2972, %p324;
	selp.b32 	%r2974, %r3737, 0, %p319;
	selp.b32 	%r2975, %r3741, %r2974, %p320;
	selp.b32 	%r2976, %r3745, %r2975, %p321;
	selp.b32 	%r2977, %r3749, %r2976, %p322;
	selp.b32 	%r2978, %r3753, %r2977, %p323;
	selp.b32 	%r2979, %r3757, %r2978, %p324;
	// begin inline asm
	mov.b32 %r2447, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2458, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2980, %r2961, 8;
	xor.b32  	%r2457, %r2980, 8947848;
	// begin inline asm
	lop3.b32 %r2444, %r1302, %r2457, %r2447, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2448, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2449, %r2447, %r2448;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2452, %r2444, %r2449;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2455, %r1313, %r2457, %r2458, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2459, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2460, %r2458, %r2459;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2463, %r2455, %r2460;
	// end inline asm
	// begin inline asm
	mov.b32 %r2493, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2504, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2981, %r2967, 8;
	xor.b32  	%r2503, %r2981, 8947848;
	// begin inline asm
	lop3.b32 %r2490, %r1302, %r2503, %r2493, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2494, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2495, %r2493, %r2494;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2498, %r2490, %r2495;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2501, %r1313, %r2503, %r2504, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2505, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2506, %r2504, %r2505;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2509, %r2501, %r2506;
	// end inline asm
	// begin inline asm
	mov.b32 %r2539, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2550, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2982, %r2973, 8;
	xor.b32  	%r2549, %r2982, 8947848;
	// begin inline asm
	lop3.b32 %r2536, %r1302, %r2549, %r2539, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2540, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2541, %r2539, %r2540;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2544, %r2536, %r2541;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2547, %r1313, %r2549, %r2550, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2551, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2552, %r2550, %r2551;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2555, %r2547, %r2552;
	// end inline asm
	// begin inline asm
	mov.b32 %r2585, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2596, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2983, %r2979, 8;
	xor.b32  	%r2595, %r2983, 8947848;
	// begin inline asm
	lop3.b32 %r2582, %r1302, %r2595, %r2585, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2586, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2587, %r2585, %r2586;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2590, %r2582, %r2587;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2593, %r1313, %r2595, %r2596, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2597, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2598, %r2596, %r2597;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2601, %r2593, %r2598;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2452;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2604, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2463;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2607, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2498;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2610, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2509;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2613, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2544;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2616, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2555;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2619, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2590;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2622, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2601;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2625, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2691, %r2688}, {%r405, %r408}, {%r2604}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2700, %r2697}, {%r405, %r408}, {%r2607}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2709, %r2706}, {%r405, %r408}, {%r2610}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2718, %r2715}, {%r405, %r408}, {%r2613}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2727, %r2724}, {%r405, %r408}, {%r2616}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2736, %r2733}, {%r405, %r408}, {%r2619}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2745, %r2742}, {%r405, %r408}, {%r2622}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2754, %r2751}, {%r405, %r408}, {%r2625}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2684, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r2684, %r2688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r457, %r2691, %r2686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2693, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r2693, %r2697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r457, %r2700, %r2695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2702, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2704, %r2702, %r2706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2707, %r457, %r2709, %r2704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2711, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r2711, %r2715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r457, %r2718, %r2713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2720, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r2720, %r2724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r457, %r2727, %r2722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2729, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2731, %r2729, %r2733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2734, %r457, %r2736, %r2731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2738, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2740, %r2738, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2743, %r457, %r2745, %r2740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2747, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r2747, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r457, %r2754, %r2749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r460, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r457, %r2688, %r2756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2763, %r460, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r457, %r2697, %r2763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2770, %r460, %r2709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2773, %r457, %r2706, %r2770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2777, %r460, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2780, %r457, %r2715, %r2777;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2784, %r460, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2787, %r457, %r2724, %r2784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2791, %r460, %r2736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2794, %r457, %r2733, %r2791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2798, %r460, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r457, %r2742, %r2798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2805, %r460, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r457, %r2751, %r2805;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2893, %r2894}, {%r501, %r507, %r504, %r510}, {%r2689, %r2759}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2901, %r2902}, {%r501, %r507, %r504, %r510}, {%r2698, %r2766}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2909, %r2910}, {%r501, %r507, %r504, %r510}, {%r2707, %r2773}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2917, %r2918}, {%r501, %r507, %r504, %r510}, {%r2716, %r2780}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2925, %r2926}, {%r501, %r507, %r504, %r510}, {%r2725, %r2787}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2933, %r2934}, {%r501, %r507, %r504, %r510}, {%r2734, %r2794}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2941, %r2942}, {%r501, %r507, %r504, %r510}, {%r2743, %r2801}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2949, %r2950}, {%r501, %r507, %r504, %r510}, {%r2752, %r2808}, {%r2419, %r2419};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2892, %r2893, %r2894, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2896, %r2893, %r2894, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2900, %r2901, %r2902, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2904, %r2901, %r2902, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2908, %r2909, %r2910, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2912, %r2909, %r2910, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2916, %r2917, %r2918, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2920, %r2917, %r2918, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2924, %r2925, %r2926, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2928, %r2925, %r2926, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2932, %r2933, %r2934, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2936, %r2933, %r2934, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2940, %r2941, %r2942, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2944, %r2941, %r2942, %r998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2948, %r2949, %r2950, %r994;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2952, %r2949, %r2950, %r998;
	// end inline asm
	st.shared.u32 	[%rd7], %r2892;
	st.shared.u32 	[%rd8], %r2896;
	st.shared.u32 	[%rd9], %r2900;
	st.shared.u32 	[%rd10], %r2904;
	st.shared.u32 	[%rd17], %r2908;
	st.shared.u32 	[%rd18], %r2912;
	st.shared.u32 	[%rd19], %r2916;
	st.shared.u32 	[%rd20], %r2920;
	st.shared.u32 	[%rd21], %r2924;
	st.shared.u32 	[%rd22], %r2928;
	st.shared.u32 	[%rd23], %r2932;
	st.shared.u32 	[%rd24], %r2936;
	st.shared.u32 	[%rd25], %r2940;
	st.shared.u32 	[%rd26], %r2944;
	st.shared.u32 	[%rd27], %r2948;
	st.shared.u32 	[%rd28], %r2952;
	@%p278 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_188;
$L__BB0_261:                            // %pass15826
                                        //   in Loop: Header=BB0_187 Depth=2
	st.shared.u32 	[%rd7], %r2892;
	st.shared.u32 	[%rd8], %r2896;
	st.shared.u32 	[%rd9], %r2900;
	st.shared.u32 	[%rd10], %r2904;
	st.shared.u32 	[%rd17], %r2908;
	st.shared.u32 	[%rd18], %r2912;
	st.shared.u32 	[%rd19], %r2916;
	st.shared.u32 	[%rd20], %r2920;
	st.shared.u32 	[%rd21], %r2924;
	st.shared.u32 	[%rd22], %r2928;
	st.shared.u32 	[%rd23], %r2932;
	st.shared.u32 	[%rd24], %r2936;
	st.shared.u32 	[%rd25], %r2940;
	st.shared.u32 	[%rd26], %r2944;
	st.shared.u32 	[%rd27], %r2948;
	st.shared.u32 	[%rd28], %r2952;
$L__BB0_188:                            // %L37108
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	mov.u32 	%r2984, 0;
	mov.u32 	%r3778, %r2984;
	mov.u32 	%r3779, %r2984;
	mov.u32 	%r3780, %r2984;
	mov.u32 	%r3781, %r2984;
	@%p278 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_189;
$L__BB0_262:                            // %pass17921
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3781, [%rd11];
	ld.shared.u32 	%r3780, [%rd12];
	ld.shared.u32 	%r3779, [%rd13];
	ld.shared.u32 	%r3778, [%rd14];
$L__BB0_189:                            // %L38183
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3020, %r3017}, {%r519, %r522}, {%r3781}, {%r2984, %r2984};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3029, %r3026}, {%r519, %r522}, {%r3780}, {%r2984, %r2984};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3038, %r3035}, {%r519, %r522}, {%r3779}, {%r2984, %r2984};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3047, %r3044}, {%r519, %r522}, {%r3778}, {%r2984, %r2984};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3013, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3015, %r3013, %r3017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3018, %r571, %r3020, %r3015;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3022, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3024, %r3022, %r3026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r571, %r3029, %r3024;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3031, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3033, %r3031, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3036, %r571, %r3038, %r3033;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3040, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3042, %r3040, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3045, %r571, %r3047, %r3042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3049, %r574, %r3020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r571, %r3017, %r3049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r574, %r3029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r571, %r3026, %r3056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3063, %r574, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r571, %r3035, %r3063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3070, %r574, %r3047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r571, %r3044, %r3070;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3077, %r3078}, {%r615, %r621, %r618, %r624}, {%r3018, %r3052}, {%r2984, %r2984};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3087, %r3088}, {%r615, %r621, %r618, %r624}, {%r3027, %r3059}, {%r2984, %r2984};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3097, %r3098}, {%r615, %r621, %r618, %r624}, {%r3036, %r3066}, {%r2984, %r2984};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3107, %r3108}, {%r615, %r621, %r618, %r624}, {%r3045, %r3073}, {%r2984, %r2984};
	// end inline asm
	@%p278 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_190;
$L__BB0_263:                            // %pass18415
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3117, %r3077, %r3077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r3078, %r3078, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3124, %r3097, %r3097, %r3120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3128, %r3098, %r3098, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3132, %r1889, %r3128, %r2984;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3136, %r3087, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3088, %r3088, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3107, %r3107, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r3108, %r3108, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r1889, %r3147, %r2984;
	// end inline asm
	add.s32 	%r3155, %r194, %r3776;
	cvt.s64.s32 	%rd374, %r3155;
	add.s64 	%rd375, %rd374, %rd15;
	mul.hi.s64 	%rd376, %rd375, 1024819115206086201;
	shr.u64 	%rd377, %rd376, 63;
	shr.s64 	%rd378, %rd376, 25;
	add.s64 	%rd379, %rd378, %rd377;
	setp.lt.s64 	%p327, %rd375, 0;
	mul.lo.s64 	%rd380, %rd379, 603979776;
	setp.ne.s64 	%p328, %rd380, %rd375;
	and.pred  	%p329, %p327, %p328;
	selp.s64 	%rd381, -1, 0, %p329;
	add.s64 	%rd382, %rd379, %rd381;
	mul.lo.s64 	%rd383, %rd382, -603979776;
	add.s64 	%rd384, %rd383, %rd375;
	shl.b64 	%rd385, %rd384, 2;
	add.s64 	%rd386, %rd4, %rd385;
	st.global.u32 	[%rd386], %r3132;
	add.s32 	%r3156, %r193, %r3776;
	cvt.s64.s32 	%rd387, %r3156;
	add.s64 	%rd388, %rd387, %rd15;
	mul.hi.s64 	%rd389, %rd388, 1024819115206086201;
	shr.u64 	%rd390, %rd389, 63;
	shr.s64 	%rd391, %rd389, 25;
	add.s64 	%rd392, %rd391, %rd390;
	setp.lt.s64 	%p330, %rd388, 0;
	mul.lo.s64 	%rd393, %rd392, 603979776;
	setp.ne.s64 	%p331, %rd393, %rd388;
	and.pred  	%p332, %p330, %p331;
	selp.s64 	%rd394, -1, 0, %p332;
	add.s64 	%rd395, %rd392, %rd394;
	mul.lo.s64 	%rd396, %rd395, -603979776;
	add.s64 	%rd397, %rd396, %rd388;
	shl.b64 	%rd398, %rd397, 2;
	add.s64 	%rd399, %rd4, %rd398;
	st.global.u32 	[%rd399], %r3151;
$L__BB0_190:                            // %L38713
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3157, 0;
	mov.u32 	%r3782, %r3157;
	mov.u32 	%r3783, %r3157;
	mov.u32 	%r3784, %r3157;
	mov.u32 	%r3785, %r3157;
	@%p278 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_191;
$L__BB0_264:                            // %pass18693
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3785, [%rd29];
	ld.shared.u32 	%r3784, [%rd30];
	ld.shared.u32 	%r3783, [%rd31];
	ld.shared.u32 	%r3782, [%rd32];
$L__BB0_191:                            // %L39789
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3193, %r3190}, {%r519, %r522}, {%r3785}, {%r3157, %r3157};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3202, %r3199}, {%r519, %r522}, {%r3784}, {%r3157, %r3157};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3211, %r3208}, {%r519, %r522}, {%r3783}, {%r3157, %r3157};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3220, %r3217}, {%r519, %r522}, {%r3782}, {%r3157, %r3157};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3186, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3188, %r3186, %r3190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r571, %r3193, %r3188;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3195, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3197, %r3195, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3200, %r571, %r3202, %r3197;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3204, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3206, %r3204, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r571, %r3211, %r3206;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3215, %r3213, %r3217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r571, %r3220, %r3215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3222, %r574, %r3193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3225, %r571, %r3190, %r3222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3229, %r574, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r571, %r3199, %r3229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3236, %r574, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r571, %r3208, %r3236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3243, %r574, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3246, %r571, %r3217, %r3243;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3250, %r3251}, {%r615, %r621, %r618, %r624}, {%r3191, %r3225}, {%r3157, %r3157};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3260, %r3261}, {%r615, %r621, %r618, %r624}, {%r3200, %r3232}, {%r3157, %r3157};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3270, %r3271}, {%r615, %r621, %r618, %r624}, {%r3209, %r3239}, {%r3157, %r3157};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3280, %r3281}, {%r615, %r621, %r618, %r624}, {%r3218, %r3246}, {%r3157, %r3157};
	// end inline asm
	@%p278 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_192;
$L__BB0_265:                            // %pass19187
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3290, %r3250, %r3250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r3251, %r3251, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3297, %r3270, %r3270, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3301, %r3271, %r3271, %r3297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3305, %r1889, %r3301, %r3157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3309, %r3260, %r3260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3312, %r3261, %r3261, %r3309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3316, %r3280, %r3280, %r3312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3320, %r3281, %r3281, %r3316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3324, %r1889, %r3320, %r3157;
	// end inline asm
	add.s32 	%r3328, %r194, %r3776;
	add.s32 	%r3329, %r3328, 589824;
	cvt.s64.s32 	%rd400, %r3329;
	add.s64 	%rd401, %rd400, %rd15;
	mul.hi.s64 	%rd402, %rd401, 1024819115206086201;
	shr.u64 	%rd403, %rd402, 63;
	shr.s64 	%rd404, %rd402, 25;
	add.s64 	%rd405, %rd404, %rd403;
	setp.lt.s64 	%p335, %rd401, 0;
	mul.lo.s64 	%rd406, %rd405, 603979776;
	setp.ne.s64 	%p336, %rd406, %rd401;
	and.pred  	%p337, %p335, %p336;
	selp.s64 	%rd407, -1, 0, %p337;
	add.s64 	%rd408, %rd405, %rd407;
	mul.lo.s64 	%rd409, %rd408, -603979776;
	add.s64 	%rd410, %rd409, %rd401;
	shl.b64 	%rd411, %rd410, 2;
	add.s64 	%rd412, %rd4, %rd411;
	st.global.u32 	[%rd412], %r3305;
	add.s32 	%r3330, %r193, %r3776;
	add.s32 	%r3331, %r3330, 589824;
	cvt.s64.s32 	%rd413, %r3331;
	add.s64 	%rd414, %rd413, %rd15;
	mul.hi.s64 	%rd415, %rd414, 1024819115206086201;
	shr.u64 	%rd416, %rd415, 63;
	shr.s64 	%rd417, %rd415, 25;
	add.s64 	%rd418, %rd417, %rd416;
	setp.lt.s64 	%p338, %rd414, 0;
	mul.lo.s64 	%rd419, %rd418, 603979776;
	setp.ne.s64 	%p339, %rd419, %rd414;
	and.pred  	%p340, %p338, %p339;
	selp.s64 	%rd420, -1, 0, %p340;
	add.s64 	%rd421, %rd418, %rd420;
	mul.lo.s64 	%rd422, %rd421, -603979776;
	add.s64 	%rd423, %rd422, %rd414;
	shl.b64 	%rd424, %rd423, 2;
	add.s64 	%rd425, %rd4, %rd424;
	st.global.u32 	[%rd425], %r3324;
$L__BB0_192:                            // %L40319
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3332, 0;
	mov.u32 	%r3786, %r3332;
	mov.u32 	%r3787, %r3332;
	mov.u32 	%r3788, %r3332;
	mov.u32 	%r3789, %r3332;
	@%p278 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_193;
$L__BB0_266:                            // %pass19465
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3789, [%rd33];
	ld.shared.u32 	%r3788, [%rd34];
	ld.shared.u32 	%r3787, [%rd35];
	ld.shared.u32 	%r3786, [%rd36];
$L__BB0_193:                            // %L41395
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3368, %r3365}, {%r519, %r522}, {%r3789}, {%r3332, %r3332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3377, %r3374}, {%r519, %r522}, {%r3788}, {%r3332, %r3332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3386, %r3383}, {%r519, %r522}, {%r3787}, {%r3332, %r3332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3395, %r3392}, {%r519, %r522}, {%r3786}, {%r3332, %r3332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3361, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3363, %r3361, %r3365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3366, %r571, %r3368, %r3363;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3370, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3372, %r3370, %r3374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3375, %r571, %r3377, %r3372;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3379, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3381, %r3379, %r3383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3384, %r571, %r3386, %r3381;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3388, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3390, %r3388, %r3392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3393, %r571, %r3395, %r3390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3397, %r574, %r3368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r571, %r3365, %r3397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3404, %r574, %r3377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r571, %r3374, %r3404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3411, %r574, %r3386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3414, %r571, %r3383, %r3411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3418, %r574, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3421, %r571, %r3392, %r3418;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3425, %r3426}, {%r615, %r621, %r618, %r624}, {%r3366, %r3400}, {%r3332, %r3332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3435, %r3436}, {%r615, %r621, %r618, %r624}, {%r3375, %r3407}, {%r3332, %r3332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3445, %r3446}, {%r615, %r621, %r618, %r624}, {%r3384, %r3414}, {%r3332, %r3332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3455, %r3456}, {%r615, %r621, %r618, %r624}, {%r3393, %r3421}, {%r3332, %r3332};
	// end inline asm
	@%p278 bra 	$L__BB0_267;
	bra.uni 	$L__BB0_194;
$L__BB0_267:                            // %pass19959
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3465, %r3425, %r3425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3468, %r3426, %r3426, %r3465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3472, %r3445, %r3445, %r3468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3476, %r3446, %r3446, %r3472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r1889, %r3476, %r3332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3484, %r3435, %r3435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r3436, %r3436, %r3484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3491, %r3455, %r3455, %r3487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r3456, %r3456, %r3491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r1889, %r3495, %r3332;
	// end inline asm
	add.s32 	%r3503, %r194, %r3776;
	add.s32 	%r3504, %r3503, 1179648;
	cvt.s64.s32 	%rd426, %r3504;
	add.s64 	%rd427, %rd426, %rd15;
	mul.hi.s64 	%rd428, %rd427, 1024819115206086201;
	shr.u64 	%rd429, %rd428, 63;
	shr.s64 	%rd430, %rd428, 25;
	add.s64 	%rd431, %rd430, %rd429;
	setp.lt.s64 	%p343, %rd427, 0;
	mul.lo.s64 	%rd432, %rd431, 603979776;
	setp.ne.s64 	%p344, %rd432, %rd427;
	and.pred  	%p345, %p343, %p344;
	selp.s64 	%rd433, -1, 0, %p345;
	add.s64 	%rd434, %rd431, %rd433;
	mul.lo.s64 	%rd435, %rd434, -603979776;
	add.s64 	%rd436, %rd435, %rd427;
	shl.b64 	%rd437, %rd436, 2;
	add.s64 	%rd438, %rd4, %rd437;
	st.global.u32 	[%rd438], %r3480;
	add.s32 	%r3505, %r193, %r3776;
	add.s32 	%r3506, %r3505, 1179648;
	cvt.s64.s32 	%rd439, %r3506;
	add.s64 	%rd440, %rd439, %rd15;
	mul.hi.s64 	%rd441, %rd440, 1024819115206086201;
	shr.u64 	%rd442, %rd441, 63;
	shr.s64 	%rd443, %rd441, 25;
	add.s64 	%rd444, %rd443, %rd442;
	setp.lt.s64 	%p346, %rd440, 0;
	mul.lo.s64 	%rd445, %rd444, 603979776;
	setp.ne.s64 	%p347, %rd445, %rd440;
	and.pred  	%p348, %p346, %p347;
	selp.s64 	%rd446, -1, 0, %p348;
	add.s64 	%rd447, %rd444, %rd446;
	mul.lo.s64 	%rd448, %rd447, -603979776;
	add.s64 	%rd449, %rd448, %rd440;
	shl.b64 	%rd450, %rd449, 2;
	add.s64 	%rd451, %rd4, %rd450;
	st.global.u32 	[%rd451], %r3499;
$L__BB0_194:                            // %L41925
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3507, 0;
	mov.u32 	%r3790, %r3507;
	mov.u32 	%r3791, %r3507;
	mov.u32 	%r3792, %r3507;
	mov.u32 	%r3793, %r3507;
	@%p278 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_195;
$L__BB0_268:                            // %pass20237
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3793, [%rd37];
	ld.shared.u32 	%r3792, [%rd38];
	ld.shared.u32 	%r3791, [%rd39];
	ld.shared.u32 	%r3790, [%rd40];
$L__BB0_195:                            // %L43001
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3543, %r3540}, {%r519, %r522}, {%r3793}, {%r3507, %r3507};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3552, %r3549}, {%r519, %r522}, {%r3792}, {%r3507, %r3507};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3561, %r3558}, {%r519, %r522}, {%r3791}, {%r3507, %r3507};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3570, %r3567}, {%r519, %r522}, {%r3790}, {%r3507, %r3507};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3536, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3538, %r3536, %r3540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r571, %r3543, %r3538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3545, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3547, %r3545, %r3549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r571, %r3552, %r3547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3554, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3556, %r3554, %r3558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3559, %r571, %r3561, %r3556;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3563, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3565, %r3563, %r3567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3568, %r571, %r3570, %r3565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3572, %r574, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3575, %r571, %r3540, %r3572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3579, %r574, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3582, %r571, %r3549, %r3579;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3586, %r574, %r3561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3589, %r571, %r3558, %r3586;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3593, %r574, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3596, %r571, %r3567, %r3593;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3600, %r3601}, {%r615, %r621, %r618, %r624}, {%r3541, %r3575}, {%r3507, %r3507};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3610, %r3611}, {%r615, %r621, %r618, %r624}, {%r3550, %r3582}, {%r3507, %r3507};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3620, %r3621}, {%r615, %r621, %r618, %r624}, {%r3559, %r3589}, {%r3507, %r3507};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3630, %r3631}, {%r615, %r621, %r618, %r624}, {%r3568, %r3596}, {%r3507, %r3507};
	// end inline asm
	@%p278 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_196;
$L__BB0_269:                            // %pass20731
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3640, %r3600, %r3600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3643, %r3601, %r3601, %r3640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3647, %r3620, %r3620, %r3643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3651, %r3621, %r3621, %r3647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3655, %r1889, %r3651, %r3507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3659, %r3610, %r3610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3662, %r3611, %r3611, %r3659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3666, %r3630, %r3630, %r3662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3670, %r3631, %r3631, %r3666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3674, %r1889, %r3670, %r3507;
	// end inline asm
	add.s32 	%r3678, %r194, %r3776;
	add.s32 	%r3679, %r3678, 1769472;
	cvt.s64.s32 	%rd452, %r3679;
	add.s64 	%rd453, %rd452, %rd15;
	mul.hi.s64 	%rd454, %rd453, 1024819115206086201;
	shr.u64 	%rd455, %rd454, 63;
	shr.s64 	%rd456, %rd454, 25;
	add.s64 	%rd457, %rd456, %rd455;
	setp.lt.s64 	%p351, %rd453, 0;
	mul.lo.s64 	%rd458, %rd457, 603979776;
	setp.ne.s64 	%p352, %rd458, %rd453;
	and.pred  	%p353, %p351, %p352;
	selp.s64 	%rd459, -1, 0, %p353;
	add.s64 	%rd460, %rd457, %rd459;
	mul.lo.s64 	%rd461, %rd460, -603979776;
	add.s64 	%rd462, %rd461, %rd453;
	shl.b64 	%rd463, %rd462, 2;
	add.s64 	%rd464, %rd4, %rd463;
	st.global.u32 	[%rd464], %r3655;
	add.s32 	%r3680, %r193, %r3776;
	add.s32 	%r3681, %r3680, 1769472;
	cvt.s64.s32 	%rd465, %r3681;
	add.s64 	%rd466, %rd465, %rd15;
	mul.hi.s64 	%rd467, %rd466, 1024819115206086201;
	shr.u64 	%rd468, %rd467, 63;
	shr.s64 	%rd469, %rd467, 25;
	add.s64 	%rd470, %rd469, %rd468;
	setp.lt.s64 	%p354, %rd466, 0;
	mul.lo.s64 	%rd471, %rd470, 603979776;
	setp.ne.s64 	%p355, %rd471, %rd466;
	and.pred  	%p356, %p354, %p355;
	selp.s64 	%rd472, -1, 0, %p356;
	add.s64 	%rd473, %rd470, %rd472;
	mul.lo.s64 	%rd474, %rd473, -603979776;
	add.s64 	%rd475, %rd474, %rd466;
	shl.b64 	%rd476, %rd475, 2;
	add.s64 	%rd477, %rd4, %rd476;
	st.global.u32 	[%rd477], %r3674;
	bra.uni 	$L__BB0_196;
$L__BB0_198:                            // %L43557
	mov.u32 	%r3682, 0;
	st.global.u32 	[%rd6], %r3682;
	ret;
$L__BB0_151:                            // %L7438
	mov.u32 	%r3706, 5;
	st.global.u32 	[%rd6], %r3706;
	mov.u64 	%rd524, exception4036;
	cvta.global.u64 	%rd525, %rd524;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd525;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7594
	mov.u32 	%r3705, 5;
	st.global.u32 	[%rd6], %r3705;
	mov.u64 	%rd522, exception4036;
	cvta.global.u64 	%rd523, %rd522;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd523;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7750
	mov.u32 	%r3704, 5;
	st.global.u32 	[%rd6], %r3704;
	mov.u64 	%rd520, exception4036;
	cvta.global.u64 	%rd521, %rd520;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd521;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7906
	mov.u32 	%r3703, 5;
	st.global.u32 	[%rd6], %r3703;
	mov.u64 	%rd518, exception4036;
	cvta.global.u64 	%rd519, %rd518;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd519;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8062
	mov.u32 	%r3702, 5;
	st.global.u32 	[%rd6], %r3702;
	mov.u64 	%rd516, exception4036;
	cvta.global.u64 	%rd517, %rd516;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd517;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8218
	mov.u32 	%r3701, 5;
	st.global.u32 	[%rd6], %r3701;
	mov.u64 	%rd514, exception4036;
	cvta.global.u64 	%rd515, %rd514;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd515;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8374
	mov.u32 	%r3700, 5;
	st.global.u32 	[%rd6], %r3700;
	mov.u64 	%rd512, exception4036;
	cvta.global.u64 	%rd513, %rd512;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd513;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8530
	mov.u32 	%r3699, 5;
	st.global.u32 	[%rd6], %r3699;
	mov.u64 	%rd510, exception4036;
	cvta.global.u64 	%rd511, %rd510;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd511;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8686
	mov.u32 	%r3698, 5;
	st.global.u32 	[%rd6], %r3698;
	mov.u64 	%rd508, exception4036;
	cvta.global.u64 	%rd509, %rd508;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd509;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8842
	mov.u32 	%r3697, 5;
	st.global.u32 	[%rd6], %r3697;
	mov.u64 	%rd506, exception4036;
	cvta.global.u64 	%rd507, %rd506;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd507;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8998
	mov.u32 	%r3696, 5;
	st.global.u32 	[%rd6], %r3696;
	mov.u64 	%rd504, exception4036;
	cvta.global.u64 	%rd505, %rd504;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd505;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9154
	mov.u32 	%r3695, 5;
	st.global.u32 	[%rd6], %r3695;
	mov.u64 	%rd502, exception4036;
	cvta.global.u64 	%rd503, %rd502;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd503;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9310
	mov.u32 	%r3694, 5;
	st.global.u32 	[%rd6], %r3694;
	mov.u64 	%rd500, exception4036;
	cvta.global.u64 	%rd501, %rd500;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd501;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9466
	mov.u32 	%r3693, 5;
	st.global.u32 	[%rd6], %r3693;
	mov.u64 	%rd498, exception4036;
	cvta.global.u64 	%rd499, %rd498;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd499;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9622
	mov.u32 	%r3692, 5;
	st.global.u32 	[%rd6], %r3692;
	mov.u64 	%rd496, exception4036;
	cvta.global.u64 	%rd497, %rd496;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd497;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9778
	mov.u32 	%r3691, 5;
	st.global.u32 	[%rd6], %r3691;
	mov.u64 	%rd494, exception4036;
	cvta.global.u64 	%rd495, %rd494;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd495;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9934
	mov.u32 	%r3690, 5;
	st.global.u32 	[%rd6], %r3690;
	mov.u64 	%rd492, exception4036;
	cvta.global.u64 	%rd493, %rd492;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd493;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10090
	mov.u32 	%r3689, 5;
	st.global.u32 	[%rd6], %r3689;
	mov.u64 	%rd490, exception4036;
	cvta.global.u64 	%rd491, %rd490;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd491;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10246
	mov.u32 	%r3688, 5;
	st.global.u32 	[%rd6], %r3688;
	mov.u64 	%rd488, exception4036;
	cvta.global.u64 	%rd489, %rd488;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd489;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10402
	mov.u32 	%r3687, 5;
	st.global.u32 	[%rd6], %r3687;
	mov.u64 	%rd486, exception4036;
	cvta.global.u64 	%rd487, %rd486;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd487;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10558
	mov.u32 	%r3686, 5;
	st.global.u32 	[%rd6], %r3686;
	mov.u64 	%rd484, exception4036;
	cvta.global.u64 	%rd485, %rd484;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd485;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10740
	mov.u32 	%r3685, 5;
	st.global.u32 	[%rd6], %r3685;
	mov.u64 	%rd482, exception4036;
	cvta.global.u64 	%rd483, %rd482;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd483;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10896
	mov.u32 	%r3684, 5;
	st.global.u32 	[%rd6], %r3684;
	mov.u64 	%rd480, exception4036;
	cvta.global.u64 	%rd481, %rd480;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd481;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11052
	mov.u32 	%r3683, 5;
	st.global.u32 	[%rd6], %r3683;
	mov.u64 	%rd478, exception4036;
	cvta.global.u64 	%rd479, %rd478;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd479;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3707, 3;
	st.global.u32 	[%rd6], %r3707;
	mov.u64 	%rd526, exception4036;
	cvta.global.u64 	%rd527, %rd526;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd527;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3708, 2;
	st.global.u32 	[%rd6], %r3708;
	mov.u64 	%rd528, exception4036;
	cvta.global.u64 	%rd529, %rd528;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd529;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd47, exception1;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1143
	add.u64 	%rd46, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r3};
	st.local.v2.u32 	[%rd5+8], {%r2, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd52, __unnamed_1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r635, [retval0+0];
	} // callseq 61
	mov.u32 	%r637, 4;
	st.global.u32 	[%rd6], %r637;
	mov.u64 	%rd55, exception4036;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r376;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
