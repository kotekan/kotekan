// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception935[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<29>;
	.reg .b16 	%rs<55>;
	.reg .b32 	%r<1347>;
	.reg .b64 	%rd<87>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r83, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r84, 16511;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r85, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r85, 67711;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	ld.param.u64 	%rd7, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r86, %r2, %r3;
	mad.lo.s32 	%r87, %r4, 768, %r86;
	mul.wide.u32 	%rd22, %r87, 4;
	add.s64 	%rd8, %rd7, %rd22;
	mov.u32 	%r88, 1;
	st.global.u32 	[%rd8], %r88;
	ld.global.u32 	%r5, [%rd1];
	setp.lt.s32 	%p3, %r5, 0;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L172
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd2];
	setp.lt.s32 	%p4, %r6, %r5;
	setp.gt.s32 	%p5, %r6, 16384;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L182
	sub.s32 	%r89, %r6, %r5;
	and.b32  	%r90, %r89, 127;
	setp.eq.s32 	%p7, %r90, 0;
	@%p7 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_7;
$L__BB0_17:                             // %pass106
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	shl.b32 	%r91, %r1, 2;
	shr.u32 	%r27, %r3, 3;
	or.b32  	%r92, %r91, %r27;
	cvt.u16.u32 	%rs1, %r92;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r93, %rs6;
	and.b32  	%r28, %r93, 255;
	shr.u32 	%r29, %r4, 5;
	bfe.s32 	%r94, %r4, 4, 1;
	and.b32  	%r95, %r94, 96;
	mad.lo.s32 	%r96, %r29, 192, %r95;
	add.s32 	%r97, %r96, %r28;
	mul.wide.u32 	%rd23, %r97, 4;
	add.s64 	%rd24, %rd5, %rd23;
	ld.global.u32 	%r31, [%rd24];
	add.s32 	%r32, %r31, -4;
	setp.gt.u32 	%p8, %r32, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.18:                              // %pass214
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.param.u64 	%rd6, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	and.b32  	%r30, %r4, 16;
	setp.eq.s32 	%p9, %r30, 0;
	add.s32 	%r356, %r31, -3;
	shl.b32 	%r357, %r3, 4;
	and.b32  	%r33, %r357, 16;
	shl.b32 	%r358, %r3, 1;
	and.b32  	%r359, %r358, 12;
	or.b32  	%r360, %r33, %r359;
	shl.b32 	%r361, %r1, 6;
	and.b32  	%r362, %r361, 192;
	or.b32  	%r363, %r362, %r360;
	shr.u32 	%r34, %r3, 2;
	shr.u32 	%r364, %r1, 2;
	cvt.u16.u32 	%rs7, %r364;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 10;
	mul.lo.s16 	%rs10, %rs9, 6;
	sub.s16 	%rs11, %rs7, %rs10;
	shl.b16 	%rs12, %rs11, 4;
	cvt.u16.u32 	%rs13, %r34;
	and.b16  	%rs14, %rs13, 6;
	or.b16  	%rs15, %rs14, %rs12;
	and.b16  	%rs16, %rs15, 246;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 246;
	mul.wide.u16 	%r365, %rs21, 256;
	selp.b32 	%r366, 0, 24576, %p9;
	mad.lo.s32 	%r367, %r29, 49152, %r366;
	or.b32  	%r368, %r367, %r363;
	add.s32 	%r369, %r368, %r365;
	shl.b32 	%r370, %r369, 2;
	cvt.u64.u32 	%rd27, %r370;
	add.s64 	%rd28, %rd3, %rd27;
	ld.global.v4.u32 	{%r100, %r101, %r116, %r117}, [%rd28];
	or.b16  	%rs22, %rs15, 8;
	and.b16  	%rs23, %rs22, 254;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 14;
	mul.lo.s16 	%rs26, %rs25, 96;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 254;
	mul.wide.u16 	%r371, %rs28, 256;
	add.s32 	%r372, %r368, %r371;
	shl.b32 	%r373, %r372, 2;
	cvt.u64.u32 	%rd29, %r373;
	add.s64 	%rd30, %rd3, %rd29;
	ld.global.v4.u32 	{%r108, %r109, %r124, %r125}, [%rd30];
	or.b32  	%r374, %r368, 33;
	add.s32 	%r375, %r374, %r365;
	mul.wide.u32 	%rd31, %r375, 4;
	add.s64 	%rd32, %rd3, %rd31;
	ld.global.v4.u32 	{%r132, %r133, %r148, %r149}, [%rd32+-4];
	add.s32 	%r376, %r374, %r371;
	mul.wide.u32 	%rd33, %r376, 4;
	add.s64 	%rd34, %rd3, %rd33;
	ld.global.v4.u32 	{%r140, %r141, %r156, %r157}, [%rd34+-4];
	or.b16  	%rs29, %rs12, %rs13;
	or.b16  	%rs30, %rs29, 1;
	and.b16  	%rs31, %rs30, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 14;
	mul.lo.s16 	%rs34, %rs33, 96;
	sub.s16 	%rs35, %rs30, %rs34;
	and.b16  	%rs36, %rs35, 255;
	mul.wide.u16 	%r377, %rs36, 256;
	add.s32 	%r378, %r368, %r377;
	shl.b32 	%r379, %r378, 2;
	cvt.u64.u32 	%rd35, %r379;
	add.s64 	%rd36, %rd3, %rd35;
	ld.global.v4.u32 	{%r164, %r165, %r180, %r181}, [%rd36];
	or.b16  	%rs37, %rs29, 9;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 14;
	mul.lo.s16 	%rs41, %rs40, 96;
	sub.s16 	%rs42, %rs37, %rs41;
	and.b16  	%rs43, %rs42, 255;
	mul.wide.u16 	%r380, %rs43, 256;
	add.s32 	%r381, %r368, %r380;
	shl.b32 	%r382, %r381, 2;
	cvt.u64.u32 	%rd37, %r382;
	add.s64 	%rd38, %rd3, %rd37;
	ld.global.v4.u32 	{%r172, %r173, %r188, %r189}, [%rd38];
	add.s32 	%r383, %r374, %r377;
	mul.wide.u32 	%rd39, %r383, 4;
	add.s64 	%rd40, %rd3, %rd39;
	ld.global.v4.u32 	{%r196, %r197, %r212, %r213}, [%rd40+-4];
	add.s32 	%r384, %r374, %r380;
	mul.wide.u32 	%rd41, %r384, 4;
	add.s64 	%rd42, %rd3, %rd41;
	ld.global.v4.u32 	{%r204, %r205, %r220, %r221}, [%rd42+-4];
	mov.u32 	%r222, 21520;
	// begin inline asm
	prmt.b32 %r228, %r100, %r101, %r222;
	// end inline asm
	mov.u32 	%r226, 30258;
	// begin inline asm
	prmt.b32 %r229, %r100, %r101, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r108, %r109, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r108, %r109, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r116, %r117, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r116, %r117, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r124, %r125, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r124, %r125, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r132, %r133, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r132, %r133, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r140, %r141, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r140, %r141, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r148, %r149, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r148, %r149, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r156, %r157, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r156, %r157, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r164, %r165, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r164, %r165, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r172, %r173, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r172, %r173, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r180, %r181, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r180, %r181, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r188, %r189, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r188, %r189, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r196, %r197, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r196, %r197, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r204, %r205, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r204, %r205, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r212, %r213, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r212, %r213, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r220, %r221, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r349, %r220, %r221, %r226;
	// end inline asm
	mov.u32 	%r350, 25152;
	// begin inline asm
	prmt.b32 %r227, %r228, %r229, %r350;
	// end inline asm
	mov.u32 	%r354, 29521;
	// begin inline asm
	prmt.b32 %r231, %r228, %r229, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r236, %r237, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r236, %r237, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r244, %r245, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r244, %r245, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r252, %r253, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r252, %r253, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r260, %r261, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r260, %r261, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r268, %r269, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r268, %r269, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r276, %r277, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r276, %r277, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r284, %r285, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r284, %r285, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r292, %r293, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r292, %r293, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r300, %r301, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r300, %r301, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r308, %r309, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r308, %r309, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r316, %r317, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r316, %r317, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r324, %r325, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r324, %r325, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r332, %r333, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r332, %r333, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r340, %r341, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r340, %r341, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r348, %r349, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r351, %r348, %r349, %r354;
	// end inline asm
	and.b32  	%r35, %r3, 2;
	setp.eq.s32 	%p10, %r35, 0;
	selp.b32 	%r385, %r259, %r227, %p10;
	shfl.sync.bfly.b32	%r386, %r385, 2, 31, -1;
	selp.b32 	%r387, %r227, %r386, %p10;
	selp.b32 	%r388, %r386, %r259, %p10;
	selp.b32 	%r389, %r267, %r235, %p10;
	shfl.sync.bfly.b32	%r390, %r389, 2, 31, -1;
	selp.b32 	%r391, %r235, %r390, %p10;
	selp.b32 	%r392, %r390, %r267, %p10;
	selp.b32 	%r393, %r263, %r231, %p10;
	shfl.sync.bfly.b32	%r394, %r393, 2, 31, -1;
	selp.b32 	%r395, %r231, %r394, %p10;
	selp.b32 	%r396, %r394, %r263, %p10;
	selp.b32 	%r397, %r271, %r239, %p10;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r239, %r398, %p10;
	selp.b32 	%r400, %r398, %r271, %p10;
	selp.b32 	%r401, %r275, %r243, %p10;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r243, %r402, %p10;
	selp.b32 	%r404, %r402, %r275, %p10;
	selp.b32 	%r405, %r283, %r251, %p10;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r251, %r406, %p10;
	selp.b32 	%r408, %r406, %r283, %p10;
	selp.b32 	%r409, %r279, %r247, %p10;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r247, %r410, %p10;
	selp.b32 	%r412, %r410, %r279, %p10;
	selp.b32 	%r413, %r287, %r255, %p10;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r255, %r414, %p10;
	selp.b32 	%r416, %r414, %r287, %p10;
	selp.b32 	%r417, %r323, %r291, %p10;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r291, %r418, %p10;
	selp.b32 	%r420, %r418, %r323, %p10;
	selp.b32 	%r421, %r331, %r299, %p10;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r299, %r422, %p10;
	selp.b32 	%r424, %r422, %r331, %p10;
	selp.b32 	%r425, %r327, %r295, %p10;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r295, %r426, %p10;
	selp.b32 	%r428, %r426, %r327, %p10;
	selp.b32 	%r429, %r335, %r303, %p10;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r303, %r430, %p10;
	selp.b32 	%r432, %r430, %r335, %p10;
	selp.b32 	%r433, %r339, %r307, %p10;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r307, %r434, %p10;
	selp.b32 	%r436, %r434, %r339, %p10;
	selp.b32 	%r437, %r347, %r315, %p10;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r315, %r438, %p10;
	selp.b32 	%r440, %r438, %r347, %p10;
	selp.b32 	%r441, %r343, %r311, %p10;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r311, %r442, %p10;
	selp.b32 	%r444, %r442, %r343, %p10;
	selp.b32 	%r445, %r351, %r319, %p10;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r319, %r446, %p10;
	selp.b32 	%r448, %r446, %r351, %p10;
	and.b32  	%r36, %r3, 4;
	setp.eq.s32 	%p11, %r36, 0;
	selp.b32 	%r449, %r419, %r387, %p11;
	shfl.sync.bfly.b32	%r450, %r449, 4, 31, -1;
	selp.b32 	%r37, %r387, %r450, %p11;
	selp.b32 	%r38, %r450, %r419, %p11;
	selp.b32 	%r451, %r423, %r391, %p11;
	shfl.sync.bfly.b32	%r452, %r451, 4, 31, -1;
	selp.b32 	%r39, %r391, %r452, %p11;
	selp.b32 	%r40, %r452, %r423, %p11;
	selp.b32 	%r453, %r427, %r395, %p11;
	shfl.sync.bfly.b32	%r454, %r453, 4, 31, -1;
	selp.b32 	%r41, %r395, %r454, %p11;
	selp.b32 	%r42, %r454, %r427, %p11;
	selp.b32 	%r455, %r431, %r399, %p11;
	shfl.sync.bfly.b32	%r456, %r455, 4, 31, -1;
	selp.b32 	%r43, %r399, %r456, %p11;
	selp.b32 	%r44, %r456, %r431, %p11;
	selp.b32 	%r457, %r435, %r403, %p11;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r45, %r403, %r458, %p11;
	selp.b32 	%r46, %r458, %r435, %p11;
	selp.b32 	%r459, %r439, %r407, %p11;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r47, %r407, %r460, %p11;
	selp.b32 	%r48, %r460, %r439, %p11;
	selp.b32 	%r461, %r443, %r411, %p11;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r49, %r411, %r462, %p11;
	selp.b32 	%r50, %r462, %r443, %p11;
	selp.b32 	%r463, %r447, %r415, %p11;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r51, %r415, %r464, %p11;
	selp.b32 	%r52, %r464, %r447, %p11;
	selp.b32 	%r465, %r420, %r388, %p11;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r53, %r388, %r466, %p11;
	selp.b32 	%r54, %r466, %r420, %p11;
	selp.b32 	%r467, %r424, %r392, %p11;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r55, %r392, %r468, %p11;
	selp.b32 	%r56, %r468, %r424, %p11;
	selp.b32 	%r469, %r428, %r396, %p11;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r57, %r396, %r470, %p11;
	selp.b32 	%r58, %r470, %r428, %p11;
	selp.b32 	%r471, %r432, %r400, %p11;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r59, %r400, %r472, %p11;
	selp.b32 	%r60, %r472, %r432, %p11;
	selp.b32 	%r473, %r436, %r404, %p11;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r61, %r404, %r474, %p11;
	selp.b32 	%r62, %r474, %r436, %p11;
	selp.b32 	%r475, %r440, %r408, %p11;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r63, %r408, %r476, %p11;
	selp.b32 	%r64, %r476, %r440, %p11;
	selp.b32 	%r477, %r444, %r412, %p11;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r65, %r412, %r478, %p11;
	selp.b32 	%r66, %r478, %r444, %p11;
	selp.b32 	%r479, %r448, %r416, %p11;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r67, %r416, %r480, %p11;
	selp.b32 	%r68, %r480, %r448, %p11;
	shl.b32 	%r481, %r5, 12;
	shl.b32 	%r482, %r3, 2;
	and.b32  	%r483, %r482, 28;
	and.b32  	%r484, %r2, 96;
	or.b32  	%r69, %r483, %r484;
	shl.b32 	%r485, %r4, 3;
	shl.b32 	%r486, %r4, 9;
	and.b32  	%r70, %r486, 7680;
	and.b32  	%r71, %r1, 12;
	and.b32  	%r487, %r485, 3968;
	or.b32  	%r488, %r487, %r69;
	or.b32  	%r72, %r488, %r481;
	shl.b32 	%r489, %r3, 3;
	and.b32  	%r490, %r489, 24;
	or.b32  	%r73, %r490, %r484;
	and.b32  	%r74, %r358, 6;
	and.b32  	%r491, %r1, 3;
	and.b16  	%rs44, %rs29, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs29, %rs47;
	cvt.u32.u16 	%r492, %rs48;
	and.b32  	%r493, %r492, 255;
	mul.lo.s32 	%r494, %r491, 3200;
	or.b32  	%r75, %r494, %r493;
	or.b16  	%rs49, %rs29, 8;
	and.b16  	%rs50, %rs49, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs49, %rs53;
	cvt.u32.u16 	%r495, %rs54;
	and.b32  	%r496, %r495, 255;
	or.b32  	%r76, %r494, %r496;
	and.b32  	%r497, %r3, 7;
	shl.b32 	%r77, %r88, %r32;
	min.u32 	%r78, %r356, 31;
	and.b32  	%r79, %r3, 1;
	shl.b32 	%r499, %r3, 5;
	and.b32  	%r80, %r499, 64;
	shl.b32 	%r500, %r28, 16;
	shl.b32 	%r501, %r4, 7;
	and.b32  	%r502, %r501, 63488;
	or.b32  	%r81, %r502, %r500;
	or.b32  	%r503, %r3, 24;
	mul.lo.s32 	%r504, %r503, 100;
	cvt.u64.u32 	%rd43, %r504;
	cvt.u64.u32 	%rd44, %r28;
	add.s64 	%rd45, %rd44, %rd43;
	shl.b64 	%rd46, %rd45, 2;
	mov.u64 	%rd47, shmem;
	add.s64 	%rd48, %rd47, 16512;
	add.s64 	%rd9, %rd48, %rd46;
	mul.lo.s32 	%r505, %r497, 100;
	add.s32 	%r506, %r505, %r28;
	mul.wide.u32 	%rd49, %r506, 4;
	add.s64 	%rd10, %rd48, %rd49;
	cvt.u64.u32 	%rd50, %r505;
	add.s64 	%rd51, %rd44, %rd50;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd11, %rd48, %rd52;
	add.s32 	%r507, %r505, 800;
	add.s32 	%r508, %r507, %r28;
	mul.wide.u32 	%rd53, %r508, 4;
	add.s64 	%rd12, %rd48, %rd53;
	cvt.u64.u32 	%rd54, %r507;
	add.s64 	%rd55, %rd44, %rd54;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd13, %rd48, %rd56;
	add.s32 	%r509, %r505, 1600;
	add.s32 	%r510, %r509, %r28;
	mul.wide.u32 	%rd57, %r510, 4;
	add.s64 	%rd14, %rd48, %rd57;
	cvt.u64.u32 	%rd58, %r509;
	add.s64 	%rd59, %rd44, %rd58;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd15, %rd48, %rd60;
	add.s32 	%r511, %r504, %r28;
	mul.wide.u32 	%rd61, %r511, 4;
	add.s64 	%rd16, %rd48, %rd61;
	and.b32  	%r82, %r489, 32;
	mov.u32 	%r1338, 0;
	setp.lt.u32 	%p13, %r1, 16;
$L__BB0_9:                              // %L2530
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r512, %r1338, %r5;
	setp.le.s32 	%p12, %r6, %r512;
	@%p12 bra 	$L__BB0_16;
// %bb.10:                              // %L2537.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	add.s32 	%r8, %r1338, %r70;
	mov.u32 	%r1339, 0;
	mov.u32 	%r1340, %r1339;
	mov.u32 	%r1341, %r1339;
	mov.u32 	%r1342, %r1339;
	mov.u32 	%r1343, %r1339;
	mov.u32 	%r1344, %r1339;
	mov.u32 	%r1345, %r1339;
$L__BB0_11:                             // %L2537
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_13 Depth 3
	@%p13 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_12;
$L__BB0_19:                             // %pass1165
                                        //   in Loop: Header=BB0_11 Depth=2
	or.b32  	%r514, %r1339, %r27;
	add.s32 	%r515, %r8, %r514;
	or.b32  	%r516, %r515, %r71;
	shr.s32 	%r517, %r515, 31;
	shr.u32 	%r518, %r517, 19;
	add.s32 	%r519, %r516, %r518;
	and.b32  	%r520, %r519, 1040384;
	sub.s32 	%r521, %r516, %r520;
	shl.b32 	%r522, %r521, 12;
	add.s32 	%r523, %r72, %r522;
	shr.s32 	%r524, %r523, 31;
	shr.u32 	%r525, %r524, 7;
	add.s32 	%r526, %r523, %r525;
	shr.s32 	%r527, %r526, 25;
	setp.lt.s32 	%p14, %r523, 0;
	and.b32  	%r528, %r526, -33554432;
	setp.ne.s32 	%p15, %r528, %r523;
	and.pred  	%p16, %p14, %p15;
	selp.u32 	%r529, 1, 0, %p16;
	sub.s32 	%r530, %r529, %r527;
	shl.b32 	%r531, %r530, 25;
	or.b32  	%r532, %r523, 1;
	add.s32 	%r533, %r532, %r531;
	mul.wide.s32 	%rd62, %r533, 4;
	add.s64 	%rd63, %rd4, %rd62;
	ld.global.v4.u32 	{%r534, %r535, %r536, %r537}, [%rd63+-4];
	or.b32  	%r538, %r516, 16;
	add.s32 	%r539, %r538, %r518;
	and.b32  	%r540, %r539, 1040384;
	sub.s32 	%r541, %r538, %r540;
	shl.b32 	%r542, %r541, 12;
	add.s32 	%r543, %r72, %r542;
	shr.s32 	%r544, %r543, 31;
	shr.u32 	%r545, %r544, 7;
	add.s32 	%r546, %r543, %r545;
	shr.s32 	%r547, %r546, 25;
	setp.lt.s32 	%p17, %r543, 0;
	and.b32  	%r548, %r546, -33554432;
	setp.ne.s32 	%p18, %r548, %r543;
	and.pred  	%p19, %p17, %p18;
	selp.u32 	%r549, 1, 0, %p19;
	sub.s32 	%r550, %r549, %r547;
	shl.b32 	%r551, %r550, 25;
	or.b32  	%r552, %r543, 1;
	add.s32 	%r553, %r552, %r551;
	mul.wide.s32 	%rd64, %r553, 4;
	add.s64 	%rd65, %rd4, %rd64;
	ld.global.v4.u32 	{%r554, %r555, %r556, %r557}, [%rd65+-4];
	shr.u32 	%r558, %r517, 27;
	add.s32 	%r559, %r516, %r558;
	and.b32  	%r560, %r559, -32;
	sub.s32 	%r561, %r516, %r560;
	mad.lo.s32 	%r562, %r561, 129, %r69;
	mul.wide.s32 	%rd66, %r562, 4;
	add.s64 	%rd68, %rd47, %rd66;
	st.shared.u32 	[%rd68], %r534;
	st.shared.u32 	[%rd68+4], %r535;
	st.shared.u32 	[%rd68+8], %r536;
	st.shared.u32 	[%rd68+12], %r537;
	add.s32 	%r563, %r538, %r558;
	and.b32  	%r564, %r563, -32;
	sub.s32 	%r565, %r538, %r564;
	mad.lo.s32 	%r566, %r565, 129, %r69;
	mul.wide.s32 	%rd69, %r566, 4;
	add.s64 	%rd70, %rd47, %rd69;
	st.shared.u32 	[%rd70], %r554;
	st.shared.u32 	[%rd70+4], %r555;
	st.shared.u32 	[%rd70+8], %r556;
	st.shared.u32 	[%rd70+12], %r557;
$L__BB0_12:                             // %L4476
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	mov.u32 	%r580, 0;
	mov.u32 	%r1346, %r580;
$L__BB0_13:                             // %L4478
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1092, %r1346, %r34;
	mad.lo.s32 	%r1093, %r1092, 129, %r73;
	mul.wide.u32 	%rd71, %r1093, 4;
	add.s64 	%rd73, %rd47, %rd71;
	ld.shared.u32 	%r569, [%rd73];
	mov.u32 	%r570, 134744072;
	mov.u32 	%r571, 252645135;
	// begin inline asm
	lop3.b32 %r568, %r569, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1094, %r568, 2021161080;
	xor.b32  	%r579, %r1094, -2139062144;
	shr.u32 	%r573, %r569, 4;
	// begin inline asm
	lop3.b32 %r572, %r573, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1095, %r572, 2021161080;
	xor.b32  	%r585, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r576, %r577}, {%r37}, {%r579}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r582, %r583}, {%r41}, {%r585}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r588, %r589}, {%r37}, {%r585}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r594, %r595}, {%r41}, {%r579}, {%r588, %r589};
	// end inline asm
	ld.shared.u32 	%r601, [%rd73+4];
	// begin inline asm
	lop3.b32 %r600, %r601, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1096, %r600, 2021161080;
	xor.b32  	%r611, %r1096, -2139062144;
	shr.u32 	%r605, %r601, 4;
	// begin inline asm
	lop3.b32 %r604, %r605, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1097, %r604, 2021161080;
	xor.b32  	%r617, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r608, %r609}, {%r45}, {%r611}, {%r576, %r577};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r614, %r615}, {%r49}, {%r617}, {%r582, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r620, %r621}, {%r45}, {%r617}, {%r594, %r595};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r626, %r627}, {%r49}, {%r611}, {%r620, %r621};
	// end inline asm
	ld.shared.u32 	%r633, [%rd73+8];
	// begin inline asm
	lop3.b32 %r632, %r633, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1098, %r632, 2021161080;
	xor.b32  	%r643, %r1098, -2139062144;
	shr.u32 	%r637, %r633, 4;
	// begin inline asm
	lop3.b32 %r636, %r637, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1099, %r636, 2021161080;
	xor.b32  	%r649, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r640, %r641}, {%r53}, {%r643}, {%r608, %r609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r646, %r647}, {%r57}, {%r649}, {%r614, %r615};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r652, %r653}, {%r53}, {%r649}, {%r626, %r627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r658, %r659}, {%r57}, {%r643}, {%r652, %r653};
	// end inline asm
	ld.shared.u32 	%r665, [%rd73+12];
	// begin inline asm
	lop3.b32 %r664, %r665, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1100, %r664, 2021161080;
	xor.b32  	%r675, %r1100, -2139062144;
	shr.u32 	%r669, %r665, 4;
	// begin inline asm
	lop3.b32 %r668, %r669, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1101, %r668, 2021161080;
	xor.b32  	%r681, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r672, %r673}, {%r61}, {%r675}, {%r640, %r641};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r678, %r679}, {%r65}, {%r681}, {%r646, %r647};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r684, %r685}, {%r61}, {%r681}, {%r658, %r659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r690, %r691}, {%r65}, {%r675}, {%r684, %r685};
	// end inline asm
	ld.shared.u32 	%r697, [%rd73+16];
	// begin inline asm
	lop3.b32 %r696, %r697, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1102, %r696, 2021161080;
	xor.b32  	%r707, %r1102, -2139062144;
	shr.u32 	%r701, %r697, 4;
	// begin inline asm
	lop3.b32 %r700, %r701, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1103, %r700, 2021161080;
	xor.b32  	%r713, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r704, %r705}, {%r38}, {%r707}, {%r672, %r673};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r710, %r711}, {%r42}, {%r713}, {%r678, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r716, %r717}, {%r38}, {%r713}, {%r690, %r691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r722, %r723}, {%r42}, {%r707}, {%r716, %r717};
	// end inline asm
	ld.shared.u32 	%r729, [%rd73+20];
	// begin inline asm
	lop3.b32 %r728, %r729, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1104, %r728, 2021161080;
	xor.b32  	%r739, %r1104, -2139062144;
	shr.u32 	%r733, %r729, 4;
	// begin inline asm
	lop3.b32 %r732, %r733, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1105, %r732, 2021161080;
	xor.b32  	%r745, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r736, %r737}, {%r46}, {%r739}, {%r704, %r705};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r742, %r743}, {%r50}, {%r745}, {%r710, %r711};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r748, %r749}, {%r46}, {%r745}, {%r722, %r723};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r754, %r755}, {%r50}, {%r739}, {%r748, %r749};
	// end inline asm
	ld.shared.u32 	%r761, [%rd73+24];
	// begin inline asm
	lop3.b32 %r760, %r761, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1106, %r760, 2021161080;
	xor.b32  	%r771, %r1106, -2139062144;
	shr.u32 	%r765, %r761, 4;
	// begin inline asm
	lop3.b32 %r764, %r765, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1107, %r764, 2021161080;
	xor.b32  	%r777, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r768, %r769}, {%r54}, {%r771}, {%r736, %r737};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r774, %r775}, {%r58}, {%r777}, {%r742, %r743};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r780, %r781}, {%r54}, {%r777}, {%r754, %r755};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r786, %r787}, {%r58}, {%r771}, {%r780, %r781};
	// end inline asm
	ld.shared.u32 	%r793, [%rd73+28];
	// begin inline asm
	lop3.b32 %r792, %r793, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1108, %r792, 2021161080;
	xor.b32  	%r803, %r1108, -2139062144;
	shr.u32 	%r797, %r793, 4;
	// begin inline asm
	lop3.b32 %r796, %r797, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1109, %r796, 2021161080;
	xor.b32  	%r809, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r800, %r801}, {%r62}, {%r803}, {%r768, %r769};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r806, %r807}, {%r66}, {%r809}, {%r774, %r775};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r812, %r813}, {%r62}, {%r809}, {%r786, %r787};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r818, %r819}, {%r66}, {%r803}, {%r812, %r813};
	// end inline asm
	sub.s32 	%r1110, %r800, %r806;
	add.s32 	%r1111, %r1110, 4;
	shr.s32 	%r826, %r1111, 3;
	add.s32 	%r1112, %r818, 4;
	shr.s32 	%r825, %r1112, 3;
	sub.s32 	%r1113, %r801, %r807;
	add.s32 	%r1114, %r1113, 4;
	shr.s32 	%r829, %r1114, 3;
	add.s32 	%r1115, %r819, 4;
	shr.s32 	%r828, %r1115, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r824, %r825, %r826;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r827, %r828, %r829;
	// end inline asm
	or.b32  	%r1116, %r74, %r1346;
	mul.lo.s32 	%r1117, %r1116, 100;
	add.s32 	%r1118, %r75, %r1117;
	mul.wide.u32 	%rd74, %r1118, 4;
	add.s64 	%rd76, %rd48, %rd74;
	st.shared.u32 	[%rd76], %r824;
	add.s32 	%r1119, %r1117, 100;
	add.s32 	%r1120, %r75, %r1119;
	mul.wide.u32 	%rd77, %r1120, 4;
	add.s64 	%rd78, %rd48, %rd77;
	st.shared.u32 	[%rd78], %r827;
	ld.shared.u32 	%r831, [%rd73];
	// begin inline asm
	lop3.b32 %r830, %r831, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1121, %r830, 2021161080;
	xor.b32  	%r841, %r1121, -2139062144;
	shr.u32 	%r835, %r831, 4;
	// begin inline asm
	lop3.b32 %r834, %r835, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1122, %r834, 2021161080;
	xor.b32  	%r847, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r838, %r839}, {%r39}, {%r841}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r844, %r845}, {%r43}, {%r847}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r850, %r851}, {%r39}, {%r847}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r856, %r857}, {%r43}, {%r841}, {%r850, %r851};
	// end inline asm
	ld.shared.u32 	%r863, [%rd73+4];
	// begin inline asm
	lop3.b32 %r862, %r863, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1123, %r862, 2021161080;
	xor.b32  	%r873, %r1123, -2139062144;
	shr.u32 	%r867, %r863, 4;
	// begin inline asm
	lop3.b32 %r866, %r867, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1124, %r866, 2021161080;
	xor.b32  	%r879, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r870, %r871}, {%r47}, {%r873}, {%r838, %r839};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r876, %r877}, {%r51}, {%r879}, {%r844, %r845};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r882, %r883}, {%r47}, {%r879}, {%r856, %r857};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r888, %r889}, {%r51}, {%r873}, {%r882, %r883};
	// end inline asm
	ld.shared.u32 	%r895, [%rd73+8];
	// begin inline asm
	lop3.b32 %r894, %r895, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1125, %r894, 2021161080;
	xor.b32  	%r905, %r1125, -2139062144;
	shr.u32 	%r899, %r895, 4;
	// begin inline asm
	lop3.b32 %r898, %r899, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1126, %r898, 2021161080;
	xor.b32  	%r911, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r902, %r903}, {%r55}, {%r905}, {%r870, %r871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r908, %r909}, {%r59}, {%r911}, {%r876, %r877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r914, %r915}, {%r55}, {%r911}, {%r888, %r889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r920, %r921}, {%r59}, {%r905}, {%r914, %r915};
	// end inline asm
	ld.shared.u32 	%r927, [%rd73+12];
	// begin inline asm
	lop3.b32 %r926, %r927, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1127, %r926, 2021161080;
	xor.b32  	%r937, %r1127, -2139062144;
	shr.u32 	%r931, %r927, 4;
	// begin inline asm
	lop3.b32 %r930, %r931, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1128, %r930, 2021161080;
	xor.b32  	%r943, %r1128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r934, %r935}, {%r63}, {%r937}, {%r902, %r903};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r940, %r941}, {%r67}, {%r943}, {%r908, %r909};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r946, %r947}, {%r63}, {%r943}, {%r920, %r921};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r952, %r953}, {%r67}, {%r937}, {%r946, %r947};
	// end inline asm
	ld.shared.u32 	%r959, [%rd73+16];
	// begin inline asm
	lop3.b32 %r958, %r959, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1129, %r958, 2021161080;
	xor.b32  	%r969, %r1129, -2139062144;
	shr.u32 	%r963, %r959, 4;
	// begin inline asm
	lop3.b32 %r962, %r963, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1130, %r962, 2021161080;
	xor.b32  	%r975, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r966, %r967}, {%r40}, {%r969}, {%r934, %r935};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r972, %r973}, {%r44}, {%r975}, {%r940, %r941};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r978, %r979}, {%r40}, {%r975}, {%r952, %r953};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r984, %r985}, {%r44}, {%r969}, {%r978, %r979};
	// end inline asm
	ld.shared.u32 	%r991, [%rd73+20];
	// begin inline asm
	lop3.b32 %r990, %r991, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1131, %r990, 2021161080;
	xor.b32  	%r1001, %r1131, -2139062144;
	shr.u32 	%r995, %r991, 4;
	// begin inline asm
	lop3.b32 %r994, %r995, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1132, %r994, 2021161080;
	xor.b32  	%r1007, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r998, %r999}, {%r48}, {%r1001}, {%r966, %r967};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1004, %r1005}, {%r52}, {%r1007}, {%r972, %r973};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1010, %r1011}, {%r48}, {%r1007}, {%r984, %r985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1016, %r1017}, {%r52}, {%r1001}, {%r1010, %r1011};
	// end inline asm
	ld.shared.u32 	%r1023, [%rd73+24];
	// begin inline asm
	lop3.b32 %r1022, %r1023, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1133, %r1022, 2021161080;
	xor.b32  	%r1033, %r1133, -2139062144;
	shr.u32 	%r1027, %r1023, 4;
	// begin inline asm
	lop3.b32 %r1026, %r1027, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1134, %r1026, 2021161080;
	xor.b32  	%r1039, %r1134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1030, %r1031}, {%r56}, {%r1033}, {%r998, %r999};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1036, %r1037}, {%r60}, {%r1039}, {%r1004, %r1005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1042, %r1043}, {%r56}, {%r1039}, {%r1016, %r1017};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1048, %r1049}, {%r60}, {%r1033}, {%r1042, %r1043};
	// end inline asm
	ld.shared.u32 	%r1055, [%rd73+28];
	// begin inline asm
	lop3.b32 %r1054, %r1055, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1135, %r1054, 2021161080;
	xor.b32  	%r1065, %r1135, -2139062144;
	shr.u32 	%r1059, %r1055, 4;
	// begin inline asm
	lop3.b32 %r1058, %r1059, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1136, %r1058, 2021161080;
	xor.b32  	%r1071, %r1136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1062, %r1063}, {%r64}, {%r1065}, {%r1030, %r1031};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1068, %r1069}, {%r68}, {%r1071}, {%r1036, %r1037};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1074, %r1075}, {%r64}, {%r1071}, {%r1048, %r1049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1080, %r1081}, {%r68}, {%r1065}, {%r1074, %r1075};
	// end inline asm
	sub.s32 	%r1137, %r1062, %r1068;
	add.s32 	%r1138, %r1137, 4;
	shr.s32 	%r1088, %r1138, 3;
	add.s32 	%r1139, %r1080, 4;
	shr.s32 	%r1087, %r1139, 3;
	sub.s32 	%r1140, %r1063, %r1069;
	add.s32 	%r1141, %r1140, 4;
	shr.s32 	%r1091, %r1141, 3;
	add.s32 	%r1142, %r1081, 4;
	shr.s32 	%r1090, %r1142, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1086, %r1087, %r1088;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1089, %r1090, %r1091;
	// end inline asm
	add.s32 	%r1143, %r76, %r1117;
	mul.wide.u32 	%rd79, %r1143, 4;
	add.s64 	%rd80, %rd48, %rd79;
	st.shared.u32 	[%rd80], %r1086;
	add.s32 	%r1144, %r76, %r1119;
	mul.wide.u32 	%rd81, %r1144, 4;
	add.s64 	%rd82, %rd48, %rd81;
	st.shared.u32 	[%rd82], %r1089;
	add.s32 	%r1346, %r1346, 8;
	setp.ne.s32 	%p20, %r1346, 32;
	@%p20 bra 	$L__BB0_13;
// %bb.14:                              // %L8649
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1163, [%rd10];
	ld.shared.u32 	%r1164, [%rd11+12800];
	ld.shared.u32 	%r1165, [%rd11+25600];
	ld.shared.u32 	%r1166, [%rd11+38400];
	ld.shared.u32 	%r1167, [%rd12];
	ld.shared.u32 	%r1168, [%rd13+12800];
	ld.shared.u32 	%r1169, [%rd13+25600];
	ld.shared.u32 	%r1170, [%rd13+38400];
	ld.shared.u32 	%r1171, [%rd14];
	ld.shared.u32 	%r1172, [%rd15+12800];
	ld.shared.u32 	%r1173, [%rd15+25600];
	ld.shared.u32 	%r1174, [%rd15+38400];
	ld.shared.u32 	%r1175, [%rd16];
	ld.shared.u32 	%r1176, [%rd9+12800];
	ld.shared.u32 	%r1177, [%rd9+25600];
	ld.shared.u32 	%r1178, [%rd9+38400];
	cvt.s32.s16 	%r1179, %r1163;
	shr.s32 	%r1180, %r1163, 16;
	cvt.s32.s16 	%r1181, %r1164;
	shr.s32 	%r1182, %r1164, 16;
	cvt.s32.s16 	%r1183, %r1165;
	shr.s32 	%r1184, %r1165, 16;
	cvt.s32.s16 	%r1185, %r1166;
	shr.s32 	%r1186, %r1166, 16;
	cvt.s32.s16 	%r1187, %r1167;
	shr.s32 	%r1188, %r1167, 16;
	cvt.s32.s16 	%r1189, %r1168;
	shr.s32 	%r1190, %r1168, 16;
	cvt.s32.s16 	%r1191, %r1169;
	shr.s32 	%r1192, %r1169, 16;
	cvt.s32.s16 	%r1193, %r1170;
	shr.s32 	%r1194, %r1170, 16;
	cvt.s32.s16 	%r1195, %r1171;
	shr.s32 	%r1196, %r1171, 16;
	cvt.s32.s16 	%r1197, %r1172;
	shr.s32 	%r1198, %r1172, 16;
	cvt.s32.s16 	%r1199, %r1173;
	shr.s32 	%r1200, %r1173, 16;
	cvt.s32.s16 	%r1201, %r1174;
	shr.s32 	%r1202, %r1174, 16;
	cvt.s32.s16 	%r1203, %r1175;
	shr.s32 	%r1204, %r1175, 16;
	cvt.s32.s16 	%r1205, %r1176;
	shr.s32 	%r1206, %r1176, 16;
	cvt.s32.s16 	%r1207, %r1177;
	shr.s32 	%r1208, %r1177, 16;
	cvt.s32.s16 	%r1209, %r1178;
	shr.s32 	%r1210, %r1178, 16;
	add.s32 	%r1211, %r1179, %r77;
	add.s32 	%r1212, %r1211, %r1181;
	add.s32 	%r1213, %r1212, %r1183;
	add.s32 	%r1214, %r1213, %r1185;
	shr.s32 	%r1215, %r1214, %r78;
	add.s32 	%r1216, %r1180, %r77;
	add.s32 	%r1217, %r1216, %r1182;
	add.s32 	%r1218, %r1217, %r1184;
	add.s32 	%r1219, %r1218, %r1186;
	shr.s32 	%r1220, %r1219, %r78;
	add.s32 	%r1221, %r1187, %r77;
	add.s32 	%r1222, %r1221, %r1189;
	add.s32 	%r1223, %r1222, %r1191;
	add.s32 	%r1224, %r1223, %r1193;
	shr.s32 	%r1225, %r1224, %r78;
	add.s32 	%r1226, %r1188, %r77;
	add.s32 	%r1227, %r1226, %r1190;
	add.s32 	%r1228, %r1227, %r1192;
	add.s32 	%r1229, %r1228, %r1194;
	shr.s32 	%r1230, %r1229, %r78;
	add.s32 	%r1231, %r1195, %r77;
	add.s32 	%r1232, %r1231, %r1197;
	add.s32 	%r1233, %r1232, %r1199;
	add.s32 	%r1234, %r1233, %r1201;
	shr.s32 	%r1235, %r1234, %r78;
	add.s32 	%r1236, %r1196, %r77;
	add.s32 	%r1237, %r1236, %r1198;
	add.s32 	%r1238, %r1237, %r1200;
	add.s32 	%r1239, %r1238, %r1202;
	shr.s32 	%r1240, %r1239, %r78;
	add.s32 	%r1241, %r1203, %r77;
	add.s32 	%r1242, %r1241, %r1205;
	add.s32 	%r1243, %r1242, %r1207;
	add.s32 	%r1244, %r1243, %r1209;
	shr.s32 	%r1245, %r1244, %r78;
	add.s32 	%r1246, %r1204, %r77;
	add.s32 	%r1247, %r1246, %r1206;
	add.s32 	%r1248, %r1247, %r1208;
	add.s32 	%r1249, %r1248, %r1210;
	shr.s32 	%r1250, %r1249, %r78;
	max.s32 	%r1251, %r1215, -7;
	min.s32 	%r1150, %r1251, 7;
	max.s32 	%r1252, %r1220, -7;
	min.s32 	%r1157, %r1252, 7;
	max.s32 	%r1253, %r1225, -7;
	min.s32 	%r1149, %r1253, 7;
	max.s32 	%r1254, %r1230, -7;
	min.s32 	%r1156, %r1254, 7;
	max.s32 	%r1255, %r1235, -7;
	min.s32 	%r1147, %r1255, 7;
	max.s32 	%r1256, %r1240, -7;
	min.s32 	%r1154, %r1256, 7;
	max.s32 	%r1257, %r1245, -7;
	min.s32 	%r1146, %r1257, 7;
	max.s32 	%r1258, %r1250, -7;
	min.s32 	%r1153, %r1258, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1145, %r1146, %r1147, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1148, %r1149, %r1150, %r1145;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1152, %r1153, %r1154, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1155, %r1156, %r1157, %r1152;
	// end inline asm
	shl.b32 	%r1162, %r1155, 4;
	// begin inline asm
	lop3.b32 %r1269, %r571, %r1148, %r1162, 202;
	// end inline asm
	setp.eq.s32 	%p21, %r1339, 0;
	selp.b32 	%r1344, %r1269, %r1344, %p21;
	selp.b32 	%r1345, %r1269, %r1345, %p21;
	setp.eq.s32 	%p22, %r1339, 32;
	selp.b32 	%r1340, %r1269, %r1340, %p22;
	selp.b32 	%r1341, %r1269, %r1341, %p22;
	setp.eq.s32 	%p23, %r1339, 64;
	selp.b32 	%r1342, %r1269, %r1342, %p23;
	selp.b32 	%r1343, %r1269, %r1343, %p23;
	add.s32 	%r25, %r1339, 32;
	setp.ne.s32 	%p24, %r1339, 96;
	mov.u32 	%r1339, %r25;
	@%p24 bra 	$L__BB0_11;
// %bb.15:                              // %L11385
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p25, %r79, 0;
	// begin inline asm
	prmt.b32 %r1259, %r1344, %r1340, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1263, %r1345, %r1341, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1342, %r1269, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1343, %r1269, %r354;
	// end inline asm
	selp.b32 	%r1307, %r1263, %r1259, %p25;
	shfl.sync.bfly.b32	%r1308, %r1307, 1, 31, -1;
	selp.b32 	%r1276, %r1259, %r1308, %p25;
	selp.b32 	%r1277, %r1308, %r1263, %p25;
	selp.b32 	%r1309, %r1271, %r1267, %p25;
	shfl.sync.bfly.b32	%r1310, %r1309, 1, 31, -1;
	selp.b32 	%r1284, %r1267, %r1310, %p25;
	selp.b32 	%r1285, %r1310, %r1271, %p25;
	// begin inline asm
	prmt.b32 %r1275, %r1276, %r1277, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1279, %r1276, %r1277, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1284, %r1285, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1284, %r1285, %r354;
	// end inline asm
	selp.b32 	%r1311, %r1283, %r1275, %p10;
	shfl.sync.bfly.b32	%r1312, %r1311, 2, 31, -1;
	selp.b32 	%r1292, %r1275, %r1312, %p10;
	selp.b32 	%r1293, %r1312, %r1283, %p10;
	selp.b32 	%r1313, %r1287, %r1279, %p10;
	shfl.sync.bfly.b32	%r1314, %r1313, 2, 31, -1;
	selp.b32 	%r1300, %r1279, %r1314, %p10;
	selp.b32 	%r1301, %r1314, %r1287, %p10;
	// begin inline asm
	prmt.b32 %r1291, %r1292, %r1293, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1295, %r1292, %r1293, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1299, %r1300, %r1301, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r1300, %r1301, %r226;
	// end inline asm
	selp.b32 	%r1315, %r1299, %r1291, %p11;
	shfl.sync.bfly.b32	%r1316, %r1315, 4, 31, -1;
	selp.b32 	%r1317, %r1291, %r1316, %p11;
	selp.b32 	%r1318, %r1316, %r1299, %p11;
	selp.b32 	%r1319, %r1303, %r1295, %p11;
	shfl.sync.bfly.b32	%r1320, %r1319, 4, 31, -1;
	selp.b32 	%r1321, %r1295, %r1320, %p11;
	selp.b32 	%r1322, %r1320, %r1303, %p11;
	selp.b32 	%r1323, %r1321, %r1317, %p25;
	shfl.sync.bfly.b32	%r1324, %r1323, 1, 31, -1;
	selp.b32 	%r1325, %r1317, %r1324, %p25;
	selp.b32 	%r1326, %r1324, %r1321, %p25;
	selp.b32 	%r1327, %r1322, %r1318, %p25;
	shfl.sync.bfly.b32	%r1328, %r1327, 1, 31, -1;
	selp.b32 	%r1329, %r1318, %r1328, %p25;
	selp.b32 	%r1330, %r1328, %r1322, %p25;
	and.b32  	%r1331, %r8, 1920;
	or.b32  	%r1332, %r1331, %r80;
	or.b32  	%r1333, %r1332, %r33;
	or.b32  	%r1334, %r1333, %r82;
	or.b32  	%r1335, %r81, %r1334;
	cvt.u64.u32 	%rd83, %r1335;
	add.s64 	%rd84, %rd6, %rd83;
	st.global.v4.u32 	[%rd84], {%r1325, %r1329, %r1326, %r1330};
	add.s32 	%r26, %r1338, 128;
	setp.ne.s32 	%p28, %r1338, 384;
	mov.u32 	%r1338, %r26;
	@%p28 bra 	$L__BB0_9;
$L__BB0_16:                             // %L11787
	mov.u32 	%r1336, 0;
	st.global.u32 	[%rd8], %r1336;
	ret;
$L__BB0_7:                              // %L191
	mov.u32 	%r1337, 2;
	st.global.u32 	[%rd8], %r1337;
	mov.u64 	%rd85, exception935;
	cvta.global.u64 	%rd86, %rd85;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd86;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r83;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r83;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r83;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L410
	mov.u32 	%r98, 2;
	st.global.u32 	[%rd8], %r98;
	mov.u64 	%rd25, exception935;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r83;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
