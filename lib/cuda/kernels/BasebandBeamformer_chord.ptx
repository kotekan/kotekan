// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception871[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1877[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<29>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1338>;
	.reg .b64 	%rd<94>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r79, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r82, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r82, 16511;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L17
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r83, 67711;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L32
	ld.param.u32 	%r80, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r84, %r3, 768, %r2;
	or.b32  	%r85, %r84, %r4;
	mul.wide.u32 	%rd20, %r85, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r86, 1;
	st.global.u32 	[%rd6], %r86;
	setp.gt.u32 	%p3, %r80, 32767;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L132
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r81, %r80;
	setp.gt.s32 	%p5, %r81, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L139
	sub.s32 	%r87, %r81, %r80;
	and.b32  	%r88, %r87, 127;
	setp.eq.s32 	%p7, %r88, 0;
	@%p7 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_7;
$L__BB0_17:                             // %pass112
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b32  	%r24, %r3, 1;
	neg.s32 	%r89, %r24;
	and.b32  	%r90, %r89, 96;
	shl.b32 	%r91, %r1, 2;
	shr.u32 	%r25, %r4, 3;
	or.b32  	%r92, %r91, %r25;
	cvt.u16.u32 	%rs1, %r92;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r93, %rs6;
	and.b32  	%r26, %r93, 255;
	shr.u32 	%r94, %r3, 1;
	cvt.u16.u32 	%rs7, %r94;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 13;
	mul.lo.s16 	%rs11, %rs10, 48;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r95, %rs12;
	and.b32  	%r27, %r95, 255;
	add.s32 	%r96, %r90, %r26;
	mad.lo.s32 	%r97, %r27, 192, %r96;
	mul.wide.u32 	%rd21, %r97, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r28, [%rd22];
	add.s32 	%r29, %r28, -4;
	setp.gt.u32 	%p8, %r29, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.18:                              // %pass190
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p9, %r24, 0;
	add.s32 	%r356, %r28, -3;
	shl.b32 	%r357, %r1, 6;
	shl.b32 	%r358, %r4, 4;
	and.b32  	%r30, %r358, 16;
	shl.b32 	%r359, %r4, 1;
	and.b32  	%r360, %r359, 12;
	and.b32  	%r361, %r357, 192;
	or.b32  	%r362, %r361, %r30;
	or.b32  	%r363, %r360, %r362;
	selp.b32 	%r364, 0, 24576, %p9;
	shr.u32 	%r365, %r1, 2;
	cvt.u16.u32 	%rs13, %r365;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	shr.u32 	%r31, %r4, 2;
	cvt.u16.u32 	%rs19, %r31;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r366, %rs27, 256;
	or.b32  	%r367, %r363, %r364;
	mad.lo.s32 	%r368, %r27, 49152, %r367;
	add.s32 	%r369, %r368, %r366;
	shl.b32 	%r370, %r369, 2;
	cvt.u64.u32 	%rd25, %r370;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r100, %r101, %r116, %r117}, [%rd26];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r371, %rs34, 256;
	add.s32 	%r372, %r368, %r371;
	shl.b32 	%r373, %r372, 2;
	cvt.u64.u32 	%rd27, %r373;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r108, %r109, %r124, %r125}, [%rd28];
	or.b32  	%r374, %r368, 33;
	add.s32 	%r375, %r374, %r366;
	mul.wide.u32 	%rd29, %r375, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r132, %r133, %r148, %r149}, [%rd30+-4];
	add.s32 	%r376, %r374, %r371;
	mul.wide.u32 	%rd31, %r376, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r140, %r141, %r156, %r157}, [%rd32+-4];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r377, %rs42, 256;
	add.s32 	%r378, %r368, %r377;
	shl.b32 	%r379, %r378, 2;
	cvt.u64.u32 	%rd33, %r379;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r164, %r165, %r180, %r181}, [%rd34];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r380, %rs49, 256;
	add.s32 	%r381, %r368, %r380;
	shl.b32 	%r382, %r381, 2;
	cvt.u64.u32 	%rd35, %r382;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r172, %r173, %r188, %r189}, [%rd36];
	add.s32 	%r383, %r374, %r377;
	mul.wide.u32 	%rd37, %r383, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r196, %r197, %r212, %r213}, [%rd38+-4];
	add.s32 	%r384, %r374, %r380;
	mul.wide.u32 	%rd39, %r384, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r204, %r205, %r220, %r221}, [%rd40+-4];
	mov.u32 	%r222, 21520;
	// begin inline asm
	prmt.b32 %r228, %r100, %r101, %r222;
	// end inline asm
	mov.u32 	%r226, 30258;
	// begin inline asm
	prmt.b32 %r229, %r100, %r101, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r108, %r109, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r108, %r109, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r116, %r117, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r116, %r117, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r124, %r125, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r124, %r125, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r132, %r133, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r132, %r133, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r140, %r141, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r140, %r141, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r148, %r149, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r148, %r149, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r156, %r157, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r156, %r157, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r164, %r165, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r164, %r165, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r172, %r173, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r172, %r173, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r180, %r181, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r180, %r181, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r188, %r189, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r188, %r189, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r196, %r197, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r196, %r197, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r204, %r205, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r204, %r205, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r212, %r213, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r212, %r213, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r220, %r221, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r349, %r220, %r221, %r226;
	// end inline asm
	mov.u32 	%r350, 25152;
	// begin inline asm
	prmt.b32 %r227, %r228, %r229, %r350;
	// end inline asm
	mov.u32 	%r354, 29521;
	// begin inline asm
	prmt.b32 %r231, %r228, %r229, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r236, %r237, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r236, %r237, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r244, %r245, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r244, %r245, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r252, %r253, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r252, %r253, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r260, %r261, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r260, %r261, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r268, %r269, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r268, %r269, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r276, %r277, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r276, %r277, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r284, %r285, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r284, %r285, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r292, %r293, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r292, %r293, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r300, %r301, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r300, %r301, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r308, %r309, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r308, %r309, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r316, %r317, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r316, %r317, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r324, %r325, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r324, %r325, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r332, %r333, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r332, %r333, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r340, %r341, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r340, %r341, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r348, %r349, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r351, %r348, %r349, %r354;
	// end inline asm
	and.b32  	%r32, %r4, 2;
	setp.eq.s32 	%p10, %r32, 0;
	selp.b32 	%r385, %r259, %r227, %p10;
	shfl.sync.bfly.b32	%r386, %r385, 2, 31, -1;
	selp.b32 	%r387, %r227, %r386, %p10;
	selp.b32 	%r388, %r386, %r259, %p10;
	selp.b32 	%r389, %r267, %r235, %p10;
	shfl.sync.bfly.b32	%r390, %r389, 2, 31, -1;
	selp.b32 	%r391, %r235, %r390, %p10;
	selp.b32 	%r392, %r390, %r267, %p10;
	selp.b32 	%r393, %r263, %r231, %p10;
	shfl.sync.bfly.b32	%r394, %r393, 2, 31, -1;
	selp.b32 	%r395, %r231, %r394, %p10;
	selp.b32 	%r396, %r394, %r263, %p10;
	selp.b32 	%r397, %r271, %r239, %p10;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r239, %r398, %p10;
	selp.b32 	%r400, %r398, %r271, %p10;
	selp.b32 	%r401, %r275, %r243, %p10;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r243, %r402, %p10;
	selp.b32 	%r404, %r402, %r275, %p10;
	selp.b32 	%r405, %r283, %r251, %p10;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r251, %r406, %p10;
	selp.b32 	%r408, %r406, %r283, %p10;
	selp.b32 	%r409, %r279, %r247, %p10;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r247, %r410, %p10;
	selp.b32 	%r412, %r410, %r279, %p10;
	selp.b32 	%r413, %r287, %r255, %p10;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r255, %r414, %p10;
	selp.b32 	%r416, %r414, %r287, %p10;
	selp.b32 	%r417, %r323, %r291, %p10;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r291, %r418, %p10;
	selp.b32 	%r420, %r418, %r323, %p10;
	selp.b32 	%r421, %r331, %r299, %p10;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r299, %r422, %p10;
	selp.b32 	%r424, %r422, %r331, %p10;
	selp.b32 	%r425, %r327, %r295, %p10;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r295, %r426, %p10;
	selp.b32 	%r428, %r426, %r327, %p10;
	selp.b32 	%r429, %r335, %r303, %p10;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r303, %r430, %p10;
	selp.b32 	%r432, %r430, %r335, %p10;
	selp.b32 	%r433, %r339, %r307, %p10;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r307, %r434, %p10;
	selp.b32 	%r436, %r434, %r339, %p10;
	selp.b32 	%r437, %r347, %r315, %p10;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r315, %r438, %p10;
	selp.b32 	%r440, %r438, %r347, %p10;
	selp.b32 	%r441, %r343, %r311, %p10;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r311, %r442, %p10;
	selp.b32 	%r444, %r442, %r343, %p10;
	selp.b32 	%r445, %r351, %r319, %p10;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r319, %r446, %p10;
	selp.b32 	%r448, %r446, %r351, %p10;
	and.b32  	%r33, %r4, 4;
	setp.eq.s32 	%p11, %r33, 0;
	selp.b32 	%r449, %r419, %r387, %p11;
	shfl.sync.bfly.b32	%r450, %r449, 4, 31, -1;
	selp.b32 	%r34, %r387, %r450, %p11;
	selp.b32 	%r35, %r450, %r419, %p11;
	selp.b32 	%r451, %r423, %r391, %p11;
	shfl.sync.bfly.b32	%r452, %r451, 4, 31, -1;
	selp.b32 	%r36, %r391, %r452, %p11;
	selp.b32 	%r37, %r452, %r423, %p11;
	selp.b32 	%r453, %r427, %r395, %p11;
	shfl.sync.bfly.b32	%r454, %r453, 4, 31, -1;
	selp.b32 	%r38, %r395, %r454, %p11;
	selp.b32 	%r39, %r454, %r427, %p11;
	selp.b32 	%r455, %r431, %r399, %p11;
	shfl.sync.bfly.b32	%r456, %r455, 4, 31, -1;
	selp.b32 	%r40, %r399, %r456, %p11;
	selp.b32 	%r41, %r456, %r431, %p11;
	selp.b32 	%r457, %r435, %r403, %p11;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r42, %r403, %r458, %p11;
	selp.b32 	%r43, %r458, %r435, %p11;
	selp.b32 	%r459, %r439, %r407, %p11;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r44, %r407, %r460, %p11;
	selp.b32 	%r45, %r460, %r439, %p11;
	selp.b32 	%r461, %r443, %r411, %p11;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r46, %r411, %r462, %p11;
	selp.b32 	%r47, %r462, %r443, %p11;
	selp.b32 	%r463, %r447, %r415, %p11;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r48, %r415, %r464, %p11;
	selp.b32 	%r49, %r464, %r447, %p11;
	selp.b32 	%r465, %r420, %r388, %p11;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r50, %r388, %r466, %p11;
	selp.b32 	%r51, %r466, %r420, %p11;
	selp.b32 	%r467, %r424, %r392, %p11;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r52, %r392, %r468, %p11;
	selp.b32 	%r53, %r468, %r424, %p11;
	selp.b32 	%r469, %r428, %r396, %p11;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r54, %r396, %r470, %p11;
	selp.b32 	%r55, %r470, %r428, %p11;
	selp.b32 	%r471, %r432, %r400, %p11;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r56, %r400, %r472, %p11;
	selp.b32 	%r57, %r472, %r432, %p11;
	selp.b32 	%r473, %r436, %r404, %p11;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r58, %r404, %r474, %p11;
	selp.b32 	%r59, %r474, %r436, %p11;
	selp.b32 	%r475, %r440, %r408, %p11;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r60, %r408, %r476, %p11;
	selp.b32 	%r61, %r476, %r440, %p11;
	selp.b32 	%r477, %r444, %r412, %p11;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r62, %r412, %r478, %p11;
	selp.b32 	%r63, %r478, %r444, %p11;
	selp.b32 	%r479, %r448, %r416, %p11;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r64, %r416, %r480, %p11;
	selp.b32 	%r65, %r480, %r448, %p11;
	shl.b32 	%r481, %r4, 2;
	and.b32  	%r482, %r481, 28;
	and.b32  	%r483, %r2, 96;
	or.b32  	%r66, %r483, %r482;
	and.b32  	%r67, %r1, 12;
	shl.b32 	%r484, %r3, 7;
	and.b32  	%r485, %r484, 128;
	shl.b32 	%r486, %r27, 8;
	or.b32  	%r487, %r66, %r485;
	or.b32  	%r68, %r487, %r486;
	shl.b32 	%r488, %r4, 3;
	and.b32  	%r489, %r488, 24;
	or.b32  	%r69, %r489, %r483;
	and.b32  	%r70, %r359, 6;
	and.b32  	%r490, %r1, 3;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r491, %rs54;
	and.b32  	%r492, %r491, 255;
	mul.lo.s32 	%r493, %r490, 3200;
	or.b32  	%r71, %r493, %r492;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r494, %rs60;
	and.b32  	%r495, %r494, 255;
	or.b32  	%r72, %r493, %r495;
	and.b32  	%r496, %r4, 7;
	shl.b32 	%r73, %r86, %r29;
	min.u32 	%r74, %r356, 31;
	and.b32  	%r75, %r4, 1;
	shl.b32 	%r498, %r3, 11;
	and.b32  	%r499, %r498, 2048;
	shl.b32 	%r500, %r27, 12;
	shl.b32 	%r501, %r4, 5;
	and.b32  	%r76, %r501, 64;
	or.b32  	%r502, %r500, %r499;
	mad.lo.s32 	%r503, %r26, 196608, %r502;
	or.b32  	%r504, %r4, 24;
	mul.lo.s32 	%r505, %r504, 100;
	cvt.u64.u32 	%rd41, %r505;
	cvt.u64.u32 	%rd42, %r26;
	add.s64 	%rd43, %rd42, %rd41;
	shl.b64 	%rd44, %rd43, 2;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd46, %rd45, 16512;
	add.s64 	%rd7, %rd46, %rd44;
	mul.lo.s32 	%r506, %r496, 100;
	add.s32 	%r507, %r506, %r26;
	mul.wide.u32 	%rd47, %r507, 4;
	add.s64 	%rd8, %rd46, %rd47;
	cvt.u64.u32 	%rd48, %r506;
	add.s64 	%rd49, %rd42, %rd48;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd9, %rd46, %rd50;
	add.s32 	%r508, %r506, 800;
	add.s32 	%r509, %r508, %r26;
	mul.wide.u32 	%rd51, %r509, 4;
	add.s64 	%rd10, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r508;
	add.s64 	%rd53, %rd42, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd11, %rd46, %rd54;
	add.s32 	%r510, %r506, 1600;
	add.s32 	%r511, %r510, %r26;
	mul.wide.u32 	%rd55, %r511, 4;
	add.s64 	%rd12, %rd46, %rd55;
	cvt.u64.u32 	%rd56, %r510;
	add.s64 	%rd57, %rd42, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd13, %rd46, %rd58;
	add.s32 	%r512, %r505, %r26;
	mul.wide.u32 	%rd59, %r512, 4;
	add.s64 	%rd14, %rd46, %rd59;
	and.b32  	%r77, %r488, 32;
	shl.b32 	%r78, %r503, 2;
	mov.u32 	%r1329, 0;
	setp.lt.u32 	%p13, %r1, 16;
$L__BB0_9:                              // %L2484
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r513, %r1329, %r80;
	setp.ge.s32 	%p12, %r513, %r81;
	@%p12 bra 	$L__BB0_16;
// %bb.10:                              // %L2491.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	mov.u32 	%r1330, 0;
	mov.u32 	%r1331, %r1330;
	mov.u32 	%r1332, %r1330;
	mov.u32 	%r1333, %r1330;
	mov.u32 	%r1334, %r1330;
	mov.u32 	%r1335, %r1330;
	mov.u32 	%r1336, %r1330;
$L__BB0_11:                             // %L2491
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_13 Depth 3
	@%p13 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_12;
$L__BB0_19:                             // %pass1111
                                        //   in Loop: Header=BB0_11 Depth=2
	or.b32  	%r515, %r1330, %r67;
	or.b32  	%r516, %r515, %r25;
	add.s32 	%r517, %r516, %r1329;
	and.b32  	%r518, %r517, 32751;
	add.s32 	%r519, %r518, %r80;
	mad.lo.s32 	%r520, %r519, 12288, %r68;
	mul.hi.s32 	%r521, %r520, 715827883;
	shr.u32 	%r522, %r521, 31;
	shr.s32 	%r523, %r521, 26;
	add.s32 	%r524, %r523, %r522;
	setp.lt.s32 	%p14, %r520, 0;
	mul.lo.s32 	%r525, %r524, 402653184;
	setp.ne.s32 	%p15, %r525, %r520;
	and.pred  	%p16, %p14, %p15;
	selp.s32 	%r526, -1, 0, %p16;
	add.s32 	%r527, %r524, %r526;
	or.b32  	%r528, %r520, 1;
	mad.lo.s32 	%r529, %r527, -402653184, %r528;
	mul.wide.s32 	%rd60, %r529, 4;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r530, %r531, %r532, %r533}, [%rd61+-4];
	or.b32  	%r534, %r516, 16;
	add.s32 	%r535, %r534, %r1329;
	and.b32  	%r536, %r535, 32767;
	add.s32 	%r537, %r536, %r80;
	mad.lo.s32 	%r538, %r537, 12288, %r68;
	mul.hi.s32 	%r539, %r538, 715827883;
	shr.u32 	%r540, %r539, 31;
	shr.s32 	%r541, %r539, 26;
	add.s32 	%r542, %r541, %r540;
	setp.lt.s32 	%p17, %r538, 0;
	mul.lo.s32 	%r543, %r542, 402653184;
	setp.ne.s32 	%p18, %r543, %r538;
	and.pred  	%p19, %p17, %p18;
	selp.s32 	%r544, -1, 0, %p19;
	add.s32 	%r545, %r542, %r544;
	or.b32  	%r546, %r538, 1;
	mad.lo.s32 	%r547, %r545, -402653184, %r546;
	mul.wide.s32 	%rd62, %r547, 4;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r548, %r549, %r550, %r551}, [%rd63+-4];
	and.b32  	%r552, %r517, 15;
	mul.lo.s32 	%r553, %r552, 129;
	add.s32 	%r554, %r66, %r553;
	mul.wide.u32 	%rd64, %r554, 4;
	add.s64 	%rd66, %rd45, %rd64;
	st.shared.u32 	[%rd66], %r530;
	cvt.u64.u32 	%rd67, %r553;
	cvt.u64.u32 	%rd68, %r66;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd45, %rd70;
	st.shared.u32 	[%rd71+4], %r531;
	st.shared.u32 	[%rd71+8], %r532;
	st.shared.u32 	[%rd71+12], %r533;
	and.b32  	%r555, %r535, 31;
	mul.lo.s32 	%r556, %r555, 129;
	add.s32 	%r557, %r66, %r556;
	mul.wide.u32 	%rd72, %r557, 4;
	add.s64 	%rd73, %rd45, %rd72;
	st.shared.u32 	[%rd73], %r548;
	cvt.u64.u32 	%rd74, %r556;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd45, %rd76;
	st.shared.u32 	[%rd77+4], %r549;
	st.shared.u32 	[%rd77+8], %r550;
	st.shared.u32 	[%rd77+12], %r551;
$L__BB0_12:                             // %L4216
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	mov.u32 	%r571, 0;
	mov.u32 	%r1337, %r571;
$L__BB0_13:                             // %L4218
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1083, %r1337, %r31;
	mad.lo.s32 	%r1084, %r1083, 129, %r69;
	mul.wide.u32 	%rd78, %r1084, 4;
	add.s64 	%rd80, %rd45, %rd78;
	ld.shared.u32 	%r560, [%rd80];
	mov.u32 	%r561, 134744072;
	mov.u32 	%r562, 252645135;
	// begin inline asm
	lop3.b32 %r559, %r560, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1085, %r559, 2021161080;
	xor.b32  	%r570, %r1085, -2139062144;
	shr.u32 	%r564, %r560, 4;
	// begin inline asm
	lop3.b32 %r563, %r564, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1086, %r563, 2021161080;
	xor.b32  	%r576, %r1086, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r567, %r568}, {%r34}, {%r570}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r573, %r574}, {%r38}, {%r576}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r579, %r580}, {%r34}, {%r576}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r585, %r586}, {%r38}, {%r570}, {%r579, %r580};
	// end inline asm
	ld.shared.u32 	%r592, [%rd80+4];
	// begin inline asm
	lop3.b32 %r591, %r592, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1087, %r591, 2021161080;
	xor.b32  	%r602, %r1087, -2139062144;
	shr.u32 	%r596, %r592, 4;
	// begin inline asm
	lop3.b32 %r595, %r596, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1088, %r595, 2021161080;
	xor.b32  	%r608, %r1088, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r599, %r600}, {%r42}, {%r602}, {%r567, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r605, %r606}, {%r46}, {%r608}, {%r573, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r611, %r612}, {%r42}, {%r608}, {%r585, %r586};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r617, %r618}, {%r46}, {%r602}, {%r611, %r612};
	// end inline asm
	ld.shared.u32 	%r624, [%rd80+8];
	// begin inline asm
	lop3.b32 %r623, %r624, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1089, %r623, 2021161080;
	xor.b32  	%r634, %r1089, -2139062144;
	shr.u32 	%r628, %r624, 4;
	// begin inline asm
	lop3.b32 %r627, %r628, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1090, %r627, 2021161080;
	xor.b32  	%r640, %r1090, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r631, %r632}, {%r50}, {%r634}, {%r599, %r600};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r637, %r638}, {%r54}, {%r640}, {%r605, %r606};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r643, %r644}, {%r50}, {%r640}, {%r617, %r618};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r649, %r650}, {%r54}, {%r634}, {%r643, %r644};
	// end inline asm
	ld.shared.u32 	%r656, [%rd80+12];
	// begin inline asm
	lop3.b32 %r655, %r656, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1091, %r655, 2021161080;
	xor.b32  	%r666, %r1091, -2139062144;
	shr.u32 	%r660, %r656, 4;
	// begin inline asm
	lop3.b32 %r659, %r660, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1092, %r659, 2021161080;
	xor.b32  	%r672, %r1092, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r663, %r664}, {%r58}, {%r666}, {%r631, %r632};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r669, %r670}, {%r62}, {%r672}, {%r637, %r638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r675, %r676}, {%r58}, {%r672}, {%r649, %r650};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r681, %r682}, {%r62}, {%r666}, {%r675, %r676};
	// end inline asm
	ld.shared.u32 	%r688, [%rd80+16];
	// begin inline asm
	lop3.b32 %r687, %r688, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1093, %r687, 2021161080;
	xor.b32  	%r698, %r1093, -2139062144;
	shr.u32 	%r692, %r688, 4;
	// begin inline asm
	lop3.b32 %r691, %r692, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1094, %r691, 2021161080;
	xor.b32  	%r704, %r1094, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r695, %r696}, {%r35}, {%r698}, {%r663, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r701, %r702}, {%r39}, {%r704}, {%r669, %r670};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r707, %r708}, {%r35}, {%r704}, {%r681, %r682};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r713, %r714}, {%r39}, {%r698}, {%r707, %r708};
	// end inline asm
	ld.shared.u32 	%r720, [%rd80+20];
	// begin inline asm
	lop3.b32 %r719, %r720, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1095, %r719, 2021161080;
	xor.b32  	%r730, %r1095, -2139062144;
	shr.u32 	%r724, %r720, 4;
	// begin inline asm
	lop3.b32 %r723, %r724, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1096, %r723, 2021161080;
	xor.b32  	%r736, %r1096, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r727, %r728}, {%r43}, {%r730}, {%r695, %r696};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r733, %r734}, {%r47}, {%r736}, {%r701, %r702};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r739, %r740}, {%r43}, {%r736}, {%r713, %r714};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r745, %r746}, {%r47}, {%r730}, {%r739, %r740};
	// end inline asm
	ld.shared.u32 	%r752, [%rd80+24];
	// begin inline asm
	lop3.b32 %r751, %r752, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1097, %r751, 2021161080;
	xor.b32  	%r762, %r1097, -2139062144;
	shr.u32 	%r756, %r752, 4;
	// begin inline asm
	lop3.b32 %r755, %r756, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1098, %r755, 2021161080;
	xor.b32  	%r768, %r1098, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r759, %r760}, {%r51}, {%r762}, {%r727, %r728};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r765, %r766}, {%r55}, {%r768}, {%r733, %r734};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r771, %r772}, {%r51}, {%r768}, {%r745, %r746};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r777, %r778}, {%r55}, {%r762}, {%r771, %r772};
	// end inline asm
	ld.shared.u32 	%r784, [%rd80+28];
	// begin inline asm
	lop3.b32 %r783, %r784, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1099, %r783, 2021161080;
	xor.b32  	%r794, %r1099, -2139062144;
	shr.u32 	%r788, %r784, 4;
	// begin inline asm
	lop3.b32 %r787, %r788, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1100, %r787, 2021161080;
	xor.b32  	%r800, %r1100, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r791, %r792}, {%r59}, {%r794}, {%r759, %r760};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r797, %r798}, {%r63}, {%r800}, {%r765, %r766};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r803, %r804}, {%r59}, {%r800}, {%r777, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r809, %r810}, {%r63}, {%r794}, {%r803, %r804};
	// end inline asm
	sub.s32 	%r1101, %r791, %r797;
	add.s32 	%r1102, %r1101, 4;
	shr.s32 	%r817, %r1102, 3;
	add.s32 	%r1103, %r809, 4;
	shr.s32 	%r816, %r1103, 3;
	sub.s32 	%r1104, %r792, %r798;
	add.s32 	%r1105, %r1104, 4;
	shr.s32 	%r820, %r1105, 3;
	add.s32 	%r1106, %r810, 4;
	shr.s32 	%r819, %r1106, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r815, %r816, %r817;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r818, %r819, %r820;
	// end inline asm
	or.b32  	%r1107, %r1337, %r70;
	mul.lo.s32 	%r1108, %r1107, 100;
	add.s32 	%r1109, %r71, %r1108;
	mul.wide.u32 	%rd81, %r1109, 4;
	add.s64 	%rd83, %rd46, %rd81;
	st.shared.u32 	[%rd83], %r815;
	add.s32 	%r1110, %r1108, 100;
	add.s32 	%r1111, %r71, %r1110;
	mul.wide.u32 	%rd84, %r1111, 4;
	add.s64 	%rd85, %rd46, %rd84;
	st.shared.u32 	[%rd85], %r818;
	ld.shared.u32 	%r822, [%rd80];
	// begin inline asm
	lop3.b32 %r821, %r822, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1112, %r821, 2021161080;
	xor.b32  	%r832, %r1112, -2139062144;
	shr.u32 	%r826, %r822, 4;
	// begin inline asm
	lop3.b32 %r825, %r826, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1113, %r825, 2021161080;
	xor.b32  	%r838, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r829, %r830}, {%r36}, {%r832}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r835, %r836}, {%r40}, {%r838}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r841, %r842}, {%r36}, {%r838}, {%r571, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r847, %r848}, {%r40}, {%r832}, {%r841, %r842};
	// end inline asm
	ld.shared.u32 	%r854, [%rd80+4];
	// begin inline asm
	lop3.b32 %r853, %r854, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1114, %r853, 2021161080;
	xor.b32  	%r864, %r1114, -2139062144;
	shr.u32 	%r858, %r854, 4;
	// begin inline asm
	lop3.b32 %r857, %r858, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1115, %r857, 2021161080;
	xor.b32  	%r870, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r861, %r862}, {%r44}, {%r864}, {%r829, %r830};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r867, %r868}, {%r48}, {%r870}, {%r835, %r836};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r873, %r874}, {%r44}, {%r870}, {%r847, %r848};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r879, %r880}, {%r48}, {%r864}, {%r873, %r874};
	// end inline asm
	ld.shared.u32 	%r886, [%rd80+8];
	// begin inline asm
	lop3.b32 %r885, %r886, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1116, %r885, 2021161080;
	xor.b32  	%r896, %r1116, -2139062144;
	shr.u32 	%r890, %r886, 4;
	// begin inline asm
	lop3.b32 %r889, %r890, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1117, %r889, 2021161080;
	xor.b32  	%r902, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r893, %r894}, {%r52}, {%r896}, {%r861, %r862};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r899, %r900}, {%r56}, {%r902}, {%r867, %r868};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r905, %r906}, {%r52}, {%r902}, {%r879, %r880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r911, %r912}, {%r56}, {%r896}, {%r905, %r906};
	// end inline asm
	ld.shared.u32 	%r918, [%rd80+12];
	// begin inline asm
	lop3.b32 %r917, %r918, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1118, %r917, 2021161080;
	xor.b32  	%r928, %r1118, -2139062144;
	shr.u32 	%r922, %r918, 4;
	// begin inline asm
	lop3.b32 %r921, %r922, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1119, %r921, 2021161080;
	xor.b32  	%r934, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r925, %r926}, {%r60}, {%r928}, {%r893, %r894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r931, %r932}, {%r64}, {%r934}, {%r899, %r900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r937, %r938}, {%r60}, {%r934}, {%r911, %r912};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r943, %r944}, {%r64}, {%r928}, {%r937, %r938};
	// end inline asm
	ld.shared.u32 	%r950, [%rd80+16];
	// begin inline asm
	lop3.b32 %r949, %r950, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1120, %r949, 2021161080;
	xor.b32  	%r960, %r1120, -2139062144;
	shr.u32 	%r954, %r950, 4;
	// begin inline asm
	lop3.b32 %r953, %r954, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1121, %r953, 2021161080;
	xor.b32  	%r966, %r1121, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r957, %r958}, {%r37}, {%r960}, {%r925, %r926};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r963, %r964}, {%r41}, {%r966}, {%r931, %r932};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r969, %r970}, {%r37}, {%r966}, {%r943, %r944};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r975, %r976}, {%r41}, {%r960}, {%r969, %r970};
	// end inline asm
	ld.shared.u32 	%r982, [%rd80+20];
	// begin inline asm
	lop3.b32 %r981, %r982, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1122, %r981, 2021161080;
	xor.b32  	%r992, %r1122, -2139062144;
	shr.u32 	%r986, %r982, 4;
	// begin inline asm
	lop3.b32 %r985, %r986, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1123, %r985, 2021161080;
	xor.b32  	%r998, %r1123, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r989, %r990}, {%r45}, {%r992}, {%r957, %r958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r995, %r996}, {%r49}, {%r998}, {%r963, %r964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1001, %r1002}, {%r45}, {%r998}, {%r975, %r976};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1007, %r1008}, {%r49}, {%r992}, {%r1001, %r1002};
	// end inline asm
	ld.shared.u32 	%r1014, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1013, %r1014, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1124, %r1013, 2021161080;
	xor.b32  	%r1024, %r1124, -2139062144;
	shr.u32 	%r1018, %r1014, 4;
	// begin inline asm
	lop3.b32 %r1017, %r1018, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1125, %r1017, 2021161080;
	xor.b32  	%r1030, %r1125, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1021, %r1022}, {%r53}, {%r1024}, {%r989, %r990};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1027, %r1028}, {%r57}, {%r1030}, {%r995, %r996};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1033, %r1034}, {%r53}, {%r1030}, {%r1007, %r1008};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1039, %r1040}, {%r57}, {%r1024}, {%r1033, %r1034};
	// end inline asm
	ld.shared.u32 	%r1046, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1045, %r1046, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1126, %r1045, 2021161080;
	xor.b32  	%r1056, %r1126, -2139062144;
	shr.u32 	%r1050, %r1046, 4;
	// begin inline asm
	lop3.b32 %r1049, %r1050, %r561, %r562, 40;
	// end inline asm
	add.s32 	%r1127, %r1049, 2021161080;
	xor.b32  	%r1062, %r1127, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1053, %r1054}, {%r61}, {%r1056}, {%r1021, %r1022};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1059, %r1060}, {%r65}, {%r1062}, {%r1027, %r1028};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1065, %r1066}, {%r61}, {%r1062}, {%r1039, %r1040};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1071, %r1072}, {%r65}, {%r1056}, {%r1065, %r1066};
	// end inline asm
	sub.s32 	%r1128, %r1053, %r1059;
	add.s32 	%r1129, %r1128, 4;
	shr.s32 	%r1079, %r1129, 3;
	add.s32 	%r1130, %r1071, 4;
	shr.s32 	%r1078, %r1130, 3;
	sub.s32 	%r1131, %r1054, %r1060;
	add.s32 	%r1132, %r1131, 4;
	shr.s32 	%r1082, %r1132, 3;
	add.s32 	%r1133, %r1072, 4;
	shr.s32 	%r1081, %r1133, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1077, %r1078, %r1079;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1080, %r1081, %r1082;
	// end inline asm
	add.s32 	%r1134, %r72, %r1108;
	mul.wide.u32 	%rd86, %r1134, 4;
	add.s64 	%rd87, %rd46, %rd86;
	st.shared.u32 	[%rd87], %r1077;
	add.s32 	%r1135, %r72, %r1110;
	mul.wide.u32 	%rd88, %r1135, 4;
	add.s64 	%rd89, %rd46, %rd88;
	st.shared.u32 	[%rd89], %r1080;
	add.s32 	%r1337, %r1337, 8;
	setp.ne.s32 	%p20, %r1337, 32;
	@%p20 bra 	$L__BB0_13;
// %bb.14:                              // %L7969
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1154, [%rd8];
	ld.shared.u32 	%r1155, [%rd9+12800];
	ld.shared.u32 	%r1156, [%rd9+25600];
	ld.shared.u32 	%r1157, [%rd9+38400];
	ld.shared.u32 	%r1158, [%rd10];
	ld.shared.u32 	%r1159, [%rd11+12800];
	ld.shared.u32 	%r1160, [%rd11+25600];
	ld.shared.u32 	%r1161, [%rd11+38400];
	ld.shared.u32 	%r1162, [%rd12];
	ld.shared.u32 	%r1163, [%rd13+12800];
	ld.shared.u32 	%r1164, [%rd13+25600];
	ld.shared.u32 	%r1165, [%rd13+38400];
	ld.shared.u32 	%r1166, [%rd14];
	ld.shared.u32 	%r1167, [%rd7+12800];
	ld.shared.u32 	%r1168, [%rd7+25600];
	ld.shared.u32 	%r1169, [%rd7+38400];
	cvt.s32.s16 	%r1170, %r1154;
	shr.s32 	%r1171, %r1154, 16;
	cvt.s32.s16 	%r1172, %r1155;
	shr.s32 	%r1173, %r1155, 16;
	cvt.s32.s16 	%r1174, %r1156;
	shr.s32 	%r1175, %r1156, 16;
	cvt.s32.s16 	%r1176, %r1157;
	shr.s32 	%r1177, %r1157, 16;
	cvt.s32.s16 	%r1178, %r1158;
	shr.s32 	%r1179, %r1158, 16;
	cvt.s32.s16 	%r1180, %r1159;
	shr.s32 	%r1181, %r1159, 16;
	cvt.s32.s16 	%r1182, %r1160;
	shr.s32 	%r1183, %r1160, 16;
	cvt.s32.s16 	%r1184, %r1161;
	shr.s32 	%r1185, %r1161, 16;
	cvt.s32.s16 	%r1186, %r1162;
	shr.s32 	%r1187, %r1162, 16;
	cvt.s32.s16 	%r1188, %r1163;
	shr.s32 	%r1189, %r1163, 16;
	cvt.s32.s16 	%r1190, %r1164;
	shr.s32 	%r1191, %r1164, 16;
	cvt.s32.s16 	%r1192, %r1165;
	shr.s32 	%r1193, %r1165, 16;
	cvt.s32.s16 	%r1194, %r1166;
	shr.s32 	%r1195, %r1166, 16;
	cvt.s32.s16 	%r1196, %r1167;
	shr.s32 	%r1197, %r1167, 16;
	cvt.s32.s16 	%r1198, %r1168;
	shr.s32 	%r1199, %r1168, 16;
	cvt.s32.s16 	%r1200, %r1169;
	shr.s32 	%r1201, %r1169, 16;
	add.s32 	%r1202, %r1170, %r73;
	add.s32 	%r1203, %r1202, %r1172;
	add.s32 	%r1204, %r1203, %r1174;
	add.s32 	%r1205, %r1204, %r1176;
	shr.s32 	%r1206, %r1205, %r74;
	add.s32 	%r1207, %r1171, %r73;
	add.s32 	%r1208, %r1207, %r1173;
	add.s32 	%r1209, %r1208, %r1175;
	add.s32 	%r1210, %r1209, %r1177;
	shr.s32 	%r1211, %r1210, %r74;
	add.s32 	%r1212, %r1178, %r73;
	add.s32 	%r1213, %r1212, %r1180;
	add.s32 	%r1214, %r1213, %r1182;
	add.s32 	%r1215, %r1214, %r1184;
	shr.s32 	%r1216, %r1215, %r74;
	add.s32 	%r1217, %r1179, %r73;
	add.s32 	%r1218, %r1217, %r1181;
	add.s32 	%r1219, %r1218, %r1183;
	add.s32 	%r1220, %r1219, %r1185;
	shr.s32 	%r1221, %r1220, %r74;
	add.s32 	%r1222, %r1186, %r73;
	add.s32 	%r1223, %r1222, %r1188;
	add.s32 	%r1224, %r1223, %r1190;
	add.s32 	%r1225, %r1224, %r1192;
	shr.s32 	%r1226, %r1225, %r74;
	add.s32 	%r1227, %r1187, %r73;
	add.s32 	%r1228, %r1227, %r1189;
	add.s32 	%r1229, %r1228, %r1191;
	add.s32 	%r1230, %r1229, %r1193;
	shr.s32 	%r1231, %r1230, %r74;
	add.s32 	%r1232, %r1194, %r73;
	add.s32 	%r1233, %r1232, %r1196;
	add.s32 	%r1234, %r1233, %r1198;
	add.s32 	%r1235, %r1234, %r1200;
	shr.s32 	%r1236, %r1235, %r74;
	add.s32 	%r1237, %r1195, %r73;
	add.s32 	%r1238, %r1237, %r1197;
	add.s32 	%r1239, %r1238, %r1199;
	add.s32 	%r1240, %r1239, %r1201;
	shr.s32 	%r1241, %r1240, %r74;
	max.s32 	%r1242, %r1206, -7;
	min.s32 	%r1141, %r1242, 7;
	max.s32 	%r1243, %r1211, -7;
	min.s32 	%r1148, %r1243, 7;
	max.s32 	%r1244, %r1216, -7;
	min.s32 	%r1140, %r1244, 7;
	max.s32 	%r1245, %r1221, -7;
	min.s32 	%r1147, %r1245, 7;
	max.s32 	%r1246, %r1226, -7;
	min.s32 	%r1138, %r1246, 7;
	max.s32 	%r1247, %r1231, -7;
	min.s32 	%r1145, %r1247, 7;
	max.s32 	%r1248, %r1236, -7;
	min.s32 	%r1137, %r1248, 7;
	max.s32 	%r1249, %r1241, -7;
	min.s32 	%r1144, %r1249, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1136, %r1137, %r1138, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1139, %r1140, %r1141, %r1136;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1143, %r1144, %r1145, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1146, %r1147, %r1148, %r1143;
	// end inline asm
	shl.b32 	%r1153, %r1146, 4;
	// begin inline asm
	lop3.b32 %r1260, %r562, %r1139, %r1153, 202;
	// end inline asm
	setp.eq.s32 	%p21, %r1330, 0;
	selp.b32 	%r1335, %r1260, %r1335, %p21;
	selp.b32 	%r1336, %r1260, %r1336, %p21;
	setp.eq.s32 	%p22, %r1330, 32;
	selp.b32 	%r1331, %r1260, %r1331, %p22;
	selp.b32 	%r1332, %r1260, %r1332, %p22;
	setp.eq.s32 	%p23, %r1330, 64;
	selp.b32 	%r1333, %r1260, %r1333, %p23;
	selp.b32 	%r1334, %r1260, %r1334, %p23;
	add.s32 	%r22, %r1330, 32;
	setp.ne.s32 	%p24, %r1330, 96;
	mov.u32 	%r1330, %r22;
	@%p24 bra 	$L__BB0_11;
// %bb.15:                              // %L10369
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p25, %r75, 0;
	// begin inline asm
	prmt.b32 %r1250, %r1335, %r1331, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1254, %r1336, %r1332, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1258, %r1333, %r1260, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1262, %r1334, %r1260, %r354;
	// end inline asm
	selp.b32 	%r1298, %r1254, %r1250, %p25;
	shfl.sync.bfly.b32	%r1299, %r1298, 1, 31, -1;
	selp.b32 	%r1267, %r1250, %r1299, %p25;
	selp.b32 	%r1268, %r1299, %r1254, %p25;
	selp.b32 	%r1300, %r1262, %r1258, %p25;
	shfl.sync.bfly.b32	%r1301, %r1300, 1, 31, -1;
	selp.b32 	%r1275, %r1258, %r1301, %p25;
	selp.b32 	%r1276, %r1301, %r1262, %p25;
	// begin inline asm
	prmt.b32 %r1266, %r1267, %r1268, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1270, %r1267, %r1268, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1274, %r1275, %r1276, %r350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1275, %r1276, %r354;
	// end inline asm
	selp.b32 	%r1302, %r1274, %r1266, %p10;
	shfl.sync.bfly.b32	%r1303, %r1302, 2, 31, -1;
	selp.b32 	%r1283, %r1266, %r1303, %p10;
	selp.b32 	%r1284, %r1303, %r1274, %p10;
	selp.b32 	%r1304, %r1278, %r1270, %p10;
	shfl.sync.bfly.b32	%r1305, %r1304, 2, 31, -1;
	selp.b32 	%r1291, %r1270, %r1305, %p10;
	selp.b32 	%r1292, %r1305, %r1278, %p10;
	// begin inline asm
	prmt.b32 %r1282, %r1283, %r1284, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1283, %r1284, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1291, %r1292, %r222;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1291, %r1292, %r226;
	// end inline asm
	selp.b32 	%r1306, %r1290, %r1282, %p11;
	shfl.sync.bfly.b32	%r1307, %r1306, 4, 31, -1;
	selp.b32 	%r1308, %r1282, %r1307, %p11;
	selp.b32 	%r1309, %r1307, %r1290, %p11;
	selp.b32 	%r1310, %r1294, %r1286, %p11;
	shfl.sync.bfly.b32	%r1311, %r1310, 4, 31, -1;
	selp.b32 	%r1312, %r1286, %r1311, %p11;
	selp.b32 	%r1313, %r1311, %r1294, %p11;
	selp.b32 	%r1314, %r1312, %r1308, %p25;
	shfl.sync.bfly.b32	%r1315, %r1314, 1, 31, -1;
	selp.b32 	%r1316, %r1308, %r1315, %p25;
	selp.b32 	%r1317, %r1315, %r1312, %p25;
	selp.b32 	%r1318, %r1313, %r1309, %p25;
	shfl.sync.bfly.b32	%r1319, %r1318, 1, 31, -1;
	selp.b32 	%r1320, %r1309, %r1319, %p25;
	selp.b32 	%r1321, %r1319, %r1313, %p25;
	and.b32  	%r1322, %r1329, 8064;
	or.b32  	%r1323, %r1322, %r30;
	or.b32  	%r1324, %r1323, %r77;
	or.b32  	%r1325, %r1324, %r76;
	or.b32  	%r1326, %r1325, %r78;
	cvt.u64.u32 	%rd90, %r1326;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1316, %r1320, %r1317, %r1321};
	add.s32 	%r23, %r1329, 128;
	setp.ne.s32 	%p28, %r1329, 32640;
	mov.u32 	%r1329, %r23;
	@%p28 bra 	$L__BB0_9;
$L__BB0_16:                             // %L10748
	mov.u32 	%r1327, 0;
	st.global.u32 	[%rd6], %r1327;
	ret;
$L__BB0_7:                              // %L151
	mov.u32 	%r1328, 2;
	st.global.u32 	[%rd6], %r1328;
	mov.u64 	%rd92, exception871;
	cvta.global.u64 	%rd93, %rd92;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd93;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1877;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L23
	mov.u64 	%rd18, exception1877;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L371
	mov.u32 	%r98, 2;
	st.global.u32 	[%rd6], %r98;
	mov.u64 	%rd23, exception871;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
