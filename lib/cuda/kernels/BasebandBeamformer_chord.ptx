// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1931[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1333>;
	.reg .b64 	%rd<91>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r77, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r78, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r78, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r79, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r79, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r80, %r3, %r1;
	mad.lo.s32 	%r81, %r4, 768, %r80;
	mul.wide.u32 	%rd24, %r81, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r82, 1;
	st.global.u32 	[%rd6], %r82;
	shr.u32 	%r5, %r4, 5;
	mul.lo.s32 	%r83, %r5, 192;
	shl.b32 	%r84, %r2, 2;
	bfe.u32 	%r6, %r4, 4, 1;
	shr.u32 	%r7, %r1, 3;
	or.b32  	%r85, %r84, %r7;
	mul.hi.u32 	%r86, %r85, -1431655765;
	shr.u32 	%r87, %r86, 6;
	mul.lo.s32 	%r88, %r87, 96;
	sub.s32 	%r8, %r85, %r88;
	mad.lo.s32 	%r89, %r6, 96, %r83;
	add.s32 	%r90, %r89, %r8;
	mul.wide.u32 	%rd25, %r90, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r9, [%rd26];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L345
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r349, %r9, -3;
	mul.lo.s32 	%r350, %r5, 49152;
	mul.lo.s32 	%r351, %r6, 24576;
	shr.u32 	%r11, %r1, 2;
	and.b32  	%r352, %r11, 6;
	shr.u32 	%r353, %r2, 2;
	cvt.u16.u32 	%rs4, %r353;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r354, %rs9;
	and.b32  	%r355, %r354, 240;
	or.b32  	%r356, %r352, %r355;
	cvt.u16.u32 	%rs10, %r356;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r357, %rs15, 256;
	shl.b32 	%r358, %r1, 1;
	shl.b32 	%r359, %r2, 6;
	or.b32  	%r360, %r358, %r359;
	shl.b32 	%r361, %r1, 4;
	and.b32  	%r362, %r361, 16;
	and.b32  	%r363, %r360, 204;
	or.b32  	%r364, %r362, %r363;
	add.s32 	%r365, %r351, %r350;
	or.b32  	%r366, %r365, %r364;
	or.b32  	%r367, %r366, 1;
	add.s32 	%r368, %r367, %r357;
	mul.wide.u32 	%rd29, %r368, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r93, %r94, %r109, %r110}, [%rd30+-4];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r369, %rs21, 256;
	add.s32 	%r370, %r367, %r369;
	mul.wide.u32 	%rd31, %r370, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r101, %r102, %r117, %r118}, [%rd32+-4];
	and.b32  	%r371, %r358, 12;
	and.b32  	%r372, %r359, 192;
	or.b32  	%r373, %r372, %r371;
	or.b32  	%r374, %r373, %r362;
	or.b32  	%r375, %r374, %r350;
	add.s32 	%r376, %r351, %r375;
	or.b32  	%r377, %r376, 33;
	add.s32 	%r378, %r377, %r357;
	mul.wide.u32 	%rd33, %r378, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r125, %r126, %r141, %r142}, [%rd34+-4];
	add.s32 	%r379, %r377, %r369;
	mul.wide.u32 	%rd35, %r379, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r133, %r134, %r149, %r150}, [%rd36+-4];
	or.b32  	%r380, %r11, %r355;
	or.b32  	%r381, %r380, 1;
	mul.hi.u32 	%r382, %r381, -1431655765;
	shr.u32 	%r383, %r382, 6;
	mul.lo.s32 	%r384, %r383, 96;
	sub.s32 	%r385, %r381, %r384;
	shl.b32 	%r386, %r385, 8;
	add.s32 	%r387, %r367, %r386;
	mul.wide.u32 	%rd37, %r387, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r157, %r158, %r173, %r174}, [%rd38+-4];
	or.b32  	%r388, %r380, 9;
	mul.hi.u32 	%r389, %r388, -1431655765;
	shr.u32 	%r390, %r389, 6;
	mul.lo.s32 	%r391, %r390, 96;
	sub.s32 	%r392, %r388, %r391;
	shl.b32 	%r393, %r392, 8;
	add.s32 	%r394, %r367, %r393;
	mul.wide.u32 	%rd39, %r394, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r165, %r166, %r181, %r182}, [%rd40+-4];
	add.s32 	%r395, %r377, %r386;
	mul.wide.u32 	%rd41, %r395, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r189, %r190, %r205, %r206}, [%rd42+-4];
	add.s32 	%r396, %r377, %r393;
	mul.wide.u32 	%rd43, %r396, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.v4.u32 	{%r197, %r198, %r213, %r214}, [%rd44+-4];
	mov.u32 	%r95, 21520;
	// begin inline asm
	prmt.b32 %r221, %r93, %r94, %r95;
	// end inline asm
	mov.u32 	%r99, 30258;
	// begin inline asm
	prmt.b32 %r222, %r93, %r94, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r101, %r102, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r101, %r102, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r109, %r110, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r109, %r110, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r117, %r118, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r117, %r118, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r125, %r126, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r125, %r126, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r133, %r134, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r133, %r134, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r141, %r142, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r141, %r142, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r149, %r150, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r149, %r150, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r157, %r158, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r157, %r158, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r165, %r166, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r165, %r166, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r173, %r174, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r173, %r174, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r181, %r182, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r181, %r182, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r189, %r190, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r189, %r190, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r197, %r198, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r197, %r198, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r205, %r206, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r205, %r206, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r213, %r214, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r213, %r214, %r99;
	// end inline asm
	mov.u32 	%r223, 25152;
	// begin inline asm
	prmt.b32 %r220, %r221, %r222, %r223;
	// end inline asm
	mov.u32 	%r227, 29521;
	// begin inline asm
	prmt.b32 %r224, %r221, %r222, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r229, %r230, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r229, %r230, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r237, %r238, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r237, %r238, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r245, %r246, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r245, %r246, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r253, %r254, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r253, %r254, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r261, %r262, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r261, %r262, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r269, %r270, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r269, %r270, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r277, %r278, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r277, %r278, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r285, %r286, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r285, %r286, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r293, %r294, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r293, %r294, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r301, %r302, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r301, %r302, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r309, %r310, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r309, %r310, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r317, %r318, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r317, %r318, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r325, %r326, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r325, %r326, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r333, %r334, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r333, %r334, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r341, %r342, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r341, %r342, %r227;
	// end inline asm
	cvt.u16.u32 	%rs22, %r1;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r397, %r252, %r220, %p4;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r220, %r398, %p4;
	selp.b32 	%r400, %r398, %r252, %p4;
	selp.b32 	%r401, %r260, %r228, %p4;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r228, %r402, %p4;
	selp.b32 	%r404, %r402, %r260, %p4;
	selp.b32 	%r405, %r256, %r224, %p4;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r224, %r406, %p4;
	selp.b32 	%r408, %r406, %r256, %p4;
	selp.b32 	%r409, %r264, %r232, %p4;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r232, %r410, %p4;
	selp.b32 	%r412, %r410, %r264, %p4;
	selp.b32 	%r413, %r268, %r236, %p4;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r236, %r414, %p4;
	selp.b32 	%r416, %r414, %r268, %p4;
	selp.b32 	%r417, %r276, %r244, %p4;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r244, %r418, %p4;
	selp.b32 	%r420, %r418, %r276, %p4;
	selp.b32 	%r421, %r272, %r240, %p4;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r240, %r422, %p4;
	selp.b32 	%r424, %r422, %r272, %p4;
	selp.b32 	%r425, %r280, %r248, %p4;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r248, %r426, %p4;
	selp.b32 	%r428, %r426, %r280, %p4;
	selp.b32 	%r429, %r316, %r284, %p4;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r284, %r430, %p4;
	selp.b32 	%r432, %r430, %r316, %p4;
	selp.b32 	%r433, %r324, %r292, %p4;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r292, %r434, %p4;
	selp.b32 	%r436, %r434, %r324, %p4;
	selp.b32 	%r437, %r320, %r288, %p4;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r288, %r438, %p4;
	selp.b32 	%r440, %r438, %r320, %p4;
	selp.b32 	%r441, %r328, %r296, %p4;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r296, %r442, %p4;
	selp.b32 	%r444, %r442, %r328, %p4;
	selp.b32 	%r445, %r332, %r300, %p4;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r300, %r446, %p4;
	selp.b32 	%r448, %r446, %r332, %p4;
	selp.b32 	%r449, %r340, %r308, %p4;
	shfl.sync.bfly.b32	%r450, %r449, 2, 31, -1;
	selp.b32 	%r451, %r308, %r450, %p4;
	selp.b32 	%r452, %r450, %r340, %p4;
	selp.b32 	%r453, %r336, %r304, %p4;
	shfl.sync.bfly.b32	%r454, %r453, 2, 31, -1;
	selp.b32 	%r455, %r304, %r454, %p4;
	selp.b32 	%r456, %r454, %r336, %p4;
	selp.b32 	%r457, %r344, %r312, %p4;
	shfl.sync.bfly.b32	%r458, %r457, 2, 31, -1;
	selp.b32 	%r459, %r312, %r458, %p4;
	selp.b32 	%r460, %r458, %r344, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r461, %r431, %r399, %p5;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r566, %r399, %r462, %p5;
	selp.b32 	%r694, %r462, %r431, %p5;
	selp.b32 	%r463, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r828, %r403, %r464, %p5;
	selp.b32 	%r956, %r464, %r435, %p5;
	selp.b32 	%r465, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r572, %r407, %r466, %p5;
	selp.b32 	%r700, %r466, %r439, %p5;
	selp.b32 	%r467, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r834, %r411, %r468, %p5;
	selp.b32 	%r962, %r468, %r443, %p5;
	selp.b32 	%r469, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r598, %r415, %r470, %p5;
	selp.b32 	%r726, %r470, %r447, %p5;
	selp.b32 	%r471, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r860, %r419, %r472, %p5;
	selp.b32 	%r988, %r472, %r451, %p5;
	selp.b32 	%r473, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r604, %r423, %r474, %p5;
	selp.b32 	%r732, %r474, %r455, %p5;
	selp.b32 	%r475, %r459, %r427, %p5;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r866, %r427, %r476, %p5;
	selp.b32 	%r994, %r476, %r459, %p5;
	selp.b32 	%r477, %r432, %r400, %p5;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r630, %r400, %r478, %p5;
	selp.b32 	%r758, %r478, %r432, %p5;
	selp.b32 	%r479, %r436, %r404, %p5;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r892, %r404, %r480, %p5;
	selp.b32 	%r1020, %r480, %r436, %p5;
	selp.b32 	%r481, %r440, %r408, %p5;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r636, %r408, %r482, %p5;
	selp.b32 	%r764, %r482, %r440, %p5;
	selp.b32 	%r483, %r444, %r412, %p5;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r898, %r412, %r484, %p5;
	selp.b32 	%r1026, %r484, %r444, %p5;
	selp.b32 	%r485, %r448, %r416, %p5;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r662, %r416, %r486, %p5;
	selp.b32 	%r790, %r486, %r448, %p5;
	selp.b32 	%r487, %r452, %r420, %p5;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r924, %r420, %r488, %p5;
	selp.b32 	%r1052, %r488, %r452, %p5;
	selp.b32 	%r489, %r456, %r424, %p5;
	shfl.sync.bfly.b32	%r490, %r489, 4, 31, -1;
	selp.b32 	%r668, %r424, %r490, %p5;
	selp.b32 	%r796, %r490, %r456, %p5;
	selp.b32 	%r491, %r460, %r428, %p5;
	shfl.sync.bfly.b32	%r492, %r491, 4, 31, -1;
	selp.b32 	%r930, %r428, %r492, %p5;
	selp.b32 	%r1058, %r492, %r460, %p5;
	shl.b32 	%r493, %r4, 3;
	and.b32  	%r494, %r493, 3840;
	and.b32  	%r495, %r493, 128;
	and.b32  	%r44, %r2, 12;
	shl.b32 	%r496, %r4, 11;
	and.b32  	%r45, %r496, 30720;
	shl.b32 	%r497, %r1, 2;
	and.b32  	%r498, %r497, 28;
	and.b32  	%r499, %r3, 96;
	or.b32  	%r46, %r498, %r499;
	and.b32  	%r47, %r493, 3968;
	or.b32  	%r500, %r46, %r495;
	or.b32  	%r48, %r500, %r494;
	or.b32  	%r501, %r44, %r7;
	mul.lo.s32 	%r502, %r501, 129;
	add.s32 	%r503, %r46, %r502;
	mul.wide.u32 	%rd45, %r503, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r502;
	cvt.u64.u32 	%rd48, %r46;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd8, %rd46, %rd50;
	or.b32  	%r504, %r501, 16;
	mul.lo.s32 	%r505, %r504, 129;
	add.s32 	%r506, %r46, %r505;
	mul.wide.u32 	%rd51, %r506, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r505;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd10, %rd46, %rd54;
	shl.b32 	%r507, %r1, 3;
	and.b32  	%r508, %r507, 24;
	or.b32  	%r49, %r499, %r508;
	and.b32  	%r509, %r2, 3;
	mul.lo.s32 	%r510, %r509, 3200;
	and.b32  	%r50, %r358, 6;
	mul.hi.u32 	%r511, %r380, -1431655765;
	shr.u32 	%r512, %r511, 6;
	mul.lo.s32 	%r513, %r512, 96;
	sub.s32 	%r514, %r380, %r513;
	or.b32  	%r51, %r514, %r510;
	or.b32  	%r515, %r380, 8;
	mul.hi.u32 	%r516, %r515, -1431655765;
	shr.u32 	%r517, %r516, 6;
	mul.lo.s32 	%r518, %r517, 96;
	sub.s32 	%r519, %r515, %r518;
	or.b32  	%r52, %r519, %r510;
	and.b32  	%r520, %r1, 7;
	mul.lo.s32 	%r521, %r520, 100;
	add.s32 	%r522, %r8, %r521;
	mul.wide.u32 	%rd55, %r522, 4;
	add.s64 	%rd56, %rd46, 16512;
	add.s64 	%rd11, %rd56, %rd55;
	cvt.u64.u32 	%rd57, %r8;
	cvt.u64.u32 	%rd58, %r521;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd12, %rd56, %rd60;
	add.s32 	%r523, %r521, 800;
	add.s32 	%r524, %r523, %r8;
	mul.wide.u32 	%rd61, %r524, 4;
	add.s64 	%rd13, %rd56, %rd61;
	cvt.u64.u32 	%rd62, %r523;
	add.s64 	%rd63, %rd62, %rd57;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd14, %rd56, %rd64;
	add.s32 	%r525, %r521, 1600;
	add.s32 	%r526, %r525, %r8;
	mul.wide.u32 	%rd65, %r526, 4;
	add.s64 	%rd15, %rd56, %rd65;
	cvt.u64.u32 	%rd66, %r525;
	add.s64 	%rd67, %rd66, %rd57;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd16, %rd56, %rd68;
	or.b32  	%r527, %r1, 24;
	mul.lo.s32 	%r528, %r527, 100;
	add.s32 	%r529, %r8, %r528;
	mul.wide.u32 	%rd69, %r529, 4;
	add.s64 	%rd17, %rd56, %rd69;
	cvt.u64.u32 	%rd70, %r528;
	add.s64 	%rd71, %rd70, %rd57;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd18, %rd56, %rd72;
	shl.b32 	%r53, %r82, %r10;
	min.u32 	%r54, %r349, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r531, %r4, 9;
	shl.b32 	%r532, %r1, 5;
	and.b32  	%r533, %r532, 64;
	shl.b32 	%r55, %r8, 18;
	and.b32  	%r56, %r531, 253952;
	and.b32  	%r534, %r507, 32;
	or.b32  	%r535, %r534, %r533;
	or.b32  	%r536, %r535, %r45;
	or.b32  	%r57, %r536, %r362;
	mov.u32 	%r348, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1324, %r348;
LBB0_7:                                 // %L2388
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1325, %r348;
	mov.u32 	%r1326, %r348;
	mov.u32 	%r1327, %r348;
	mov.u32 	%r1328, %r348;
	mov.u32 	%r1329, %r348;
	mov.u32 	%r1330, %r348;
	mov.u32 	%r1331, %r348;
LBB0_8:                                 // %L2391
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2411
                                        //   in Loop: Header=BB0_8 Depth=2
	or.b32  	%r538, %r1325, %r1324;
	or.b32  	%r539, %r538, %r7;
	or.b32  	%r540, %r539, %r44;
	or.b32  	%r541, %r540, %r45;
	shl.b32 	%r542, %r541, 12;
	or.b32  	%r543, %r542, %r47;
	or.b32  	%r544, %r543, %r46;
	mul.wide.s32 	%rd73, %r544, 4;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.v4.u32 	{%r545, %r546, %r547, %r548}, [%rd74];
	or.b32  	%r549, %r48, %r542;
	or.b32  	%r550, %r549, 65536;
	mul.wide.s32 	%rd75, %r550, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.v4.u32 	{%r551, %r552, %r553, %r554}, [%rd76];
	st.shared.u32 	[%rd7], %r545;
	st.shared.u32 	[%rd8+4], %r546;
	st.shared.u32 	[%rd8+8], %r547;
	st.shared.u32 	[%rd8+12], %r548;
	st.shared.u32 	[%rd9], %r551;
	st.shared.u32 	[%rd10+4], %r552;
	st.shared.u32 	[%rd10+8], %r553;
	st.shared.u32 	[%rd10+12], %r554;
LBB0_10:                                // %L4289
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r568, 0;
	mov.u32 	%r1332, %r568;
LBB0_11:                                // %L4291
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1080, %r1332, %r11;
	mad.lo.s32 	%r1081, %r1080, 129, %r49;
	mul.wide.u32 	%rd77, %r1081, 4;
	add.s64 	%rd79, %rd46, %rd77;
	ld.shared.u32 	%r557, [%rd79];
	mov.u32 	%r558, 134744072;
	mov.u32 	%r559, 252645135;
	// begin inline asm
	lop3.b32 %r556, %r557, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1082, %r556, 2021161080;
	xor.b32  	%r567, %r1082, -2139062144;
	shr.u32 	%r561, %r557, 4;
	// begin inline asm
	lop3.b32 %r560, %r561, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1083, %r560, 2021161080;
	xor.b32  	%r573, %r1083, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r564, %r565}, {%r566}, {%r567}, {%r568, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r570, %r571}, {%r572}, {%r573}, {%r568, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r576, %r577}, {%r566}, {%r573}, {%r568, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r582, %r583}, {%r572}, {%r567}, {%r576, %r577};
	// end inline asm
	ld.shared.u32 	%r589, [%rd79+4];
	// begin inline asm
	lop3.b32 %r588, %r589, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1084, %r588, 2021161080;
	xor.b32  	%r599, %r1084, -2139062144;
	shr.u32 	%r593, %r589, 4;
	// begin inline asm
	lop3.b32 %r592, %r593, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1085, %r592, 2021161080;
	xor.b32  	%r605, %r1085, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r598}, {%r599}, {%r564, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r602, %r603}, {%r604}, {%r605}, {%r570, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r608, %r609}, {%r598}, {%r605}, {%r582, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r614, %r615}, {%r604}, {%r599}, {%r608, %r609};
	// end inline asm
	ld.shared.u32 	%r621, [%rd79+8];
	// begin inline asm
	lop3.b32 %r620, %r621, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1086, %r620, 2021161080;
	xor.b32  	%r631, %r1086, -2139062144;
	shr.u32 	%r625, %r621, 4;
	// begin inline asm
	lop3.b32 %r624, %r625, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1087, %r624, 2021161080;
	xor.b32  	%r637, %r1087, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r630}, {%r631}, {%r596, %r597};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r634, %r635}, {%r636}, {%r637}, {%r602, %r603};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r640, %r641}, {%r630}, {%r637}, {%r614, %r615};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r646, %r647}, {%r636}, {%r631}, {%r640, %r641};
	// end inline asm
	ld.shared.u32 	%r653, [%rd79+12];
	// begin inline asm
	lop3.b32 %r652, %r653, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1088, %r652, 2021161080;
	xor.b32  	%r663, %r1088, -2139062144;
	shr.u32 	%r657, %r653, 4;
	// begin inline asm
	lop3.b32 %r656, %r657, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1089, %r656, 2021161080;
	xor.b32  	%r669, %r1089, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r660, %r661}, {%r662}, {%r663}, {%r628, %r629};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r666, %r667}, {%r668}, {%r669}, {%r634, %r635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r672, %r673}, {%r662}, {%r669}, {%r646, %r647};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r678, %r679}, {%r668}, {%r663}, {%r672, %r673};
	// end inline asm
	ld.shared.u32 	%r685, [%rd79+16];
	// begin inline asm
	lop3.b32 %r684, %r685, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1090, %r684, 2021161080;
	xor.b32  	%r695, %r1090, -2139062144;
	shr.u32 	%r689, %r685, 4;
	// begin inline asm
	lop3.b32 %r688, %r689, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1091, %r688, 2021161080;
	xor.b32  	%r701, %r1091, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r692, %r693}, {%r694}, {%r695}, {%r660, %r661};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r698, %r699}, {%r700}, {%r701}, {%r666, %r667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r704, %r705}, {%r694}, {%r701}, {%r678, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r710, %r711}, {%r700}, {%r695}, {%r704, %r705};
	// end inline asm
	ld.shared.u32 	%r717, [%rd79+20];
	// begin inline asm
	lop3.b32 %r716, %r717, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1092, %r716, 2021161080;
	xor.b32  	%r727, %r1092, -2139062144;
	shr.u32 	%r721, %r717, 4;
	// begin inline asm
	lop3.b32 %r720, %r721, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1093, %r720, 2021161080;
	xor.b32  	%r733, %r1093, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r724, %r725}, {%r726}, {%r727}, {%r692, %r693};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r730, %r731}, {%r732}, {%r733}, {%r698, %r699};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r736, %r737}, {%r726}, {%r733}, {%r710, %r711};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r742, %r743}, {%r732}, {%r727}, {%r736, %r737};
	// end inline asm
	ld.shared.u32 	%r749, [%rd79+24];
	// begin inline asm
	lop3.b32 %r748, %r749, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1094, %r748, 2021161080;
	xor.b32  	%r759, %r1094, -2139062144;
	shr.u32 	%r753, %r749, 4;
	// begin inline asm
	lop3.b32 %r752, %r753, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1095, %r752, 2021161080;
	xor.b32  	%r765, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r756, %r757}, {%r758}, {%r759}, {%r724, %r725};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r762, %r763}, {%r764}, {%r765}, {%r730, %r731};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r768, %r769}, {%r758}, {%r765}, {%r742, %r743};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r774, %r775}, {%r764}, {%r759}, {%r768, %r769};
	// end inline asm
	ld.shared.u32 	%r781, [%rd79+28];
	// begin inline asm
	lop3.b32 %r780, %r781, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1096, %r780, 2021161080;
	xor.b32  	%r791, %r1096, -2139062144;
	shr.u32 	%r785, %r781, 4;
	// begin inline asm
	lop3.b32 %r784, %r785, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1097, %r784, 2021161080;
	xor.b32  	%r797, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r788, %r789}, {%r790}, {%r791}, {%r756, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r794, %r795}, {%r796}, {%r797}, {%r762, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r800, %r801}, {%r790}, {%r797}, {%r774, %r775};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r806, %r807}, {%r796}, {%r791}, {%r800, %r801};
	// end inline asm
	sub.s32 	%r1098, %r788, %r794;
	add.s32 	%r1099, %r1098, 4;
	shr.s32 	%r814, %r1099, 3;
	add.s32 	%r1100, %r806, 4;
	shr.s32 	%r813, %r1100, 3;
	sub.s32 	%r1101, %r789, %r795;
	add.s32 	%r1102, %r1101, 4;
	shr.s32 	%r817, %r1102, 3;
	add.s32 	%r1103, %r807, 4;
	shr.s32 	%r816, %r1103, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r812, %r813, %r814;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r815, %r816, %r817;
	// end inline asm
	or.b32  	%r1104, %r1332, %r50;
	mul.lo.s32 	%r1105, %r1104, 100;
	add.s32 	%r1106, %r51, %r1105;
	mul.wide.u32 	%rd80, %r1106, 4;
	add.s64 	%rd82, %rd56, %rd80;
	st.shared.u32 	[%rd82], %r812;
	add.s32 	%r1107, %r1105, 100;
	add.s32 	%r1108, %r51, %r1107;
	mul.wide.u32 	%rd83, %r1108, 4;
	add.s64 	%rd84, %rd56, %rd83;
	st.shared.u32 	[%rd84], %r815;
	ld.shared.u32 	%r819, [%rd79];
	// begin inline asm
	lop3.b32 %r818, %r819, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1109, %r818, 2021161080;
	xor.b32  	%r829, %r1109, -2139062144;
	shr.u32 	%r823, %r819, 4;
	// begin inline asm
	lop3.b32 %r822, %r823, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1110, %r822, 2021161080;
	xor.b32  	%r835, %r1110, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r826, %r827}, {%r828}, {%r829}, {%r568, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r832, %r833}, {%r834}, {%r835}, {%r568, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r838, %r839}, {%r828}, {%r835}, {%r568, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r844, %r845}, {%r834}, {%r829}, {%r838, %r839};
	// end inline asm
	ld.shared.u32 	%r851, [%rd79+4];
	// begin inline asm
	lop3.b32 %r850, %r851, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1111, %r850, 2021161080;
	xor.b32  	%r861, %r1111, -2139062144;
	shr.u32 	%r855, %r851, 4;
	// begin inline asm
	lop3.b32 %r854, %r855, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1112, %r854, 2021161080;
	xor.b32  	%r867, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r858, %r859}, {%r860}, {%r861}, {%r826, %r827};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r864, %r865}, {%r866}, {%r867}, {%r832, %r833};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r870, %r871}, {%r860}, {%r867}, {%r844, %r845};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r876, %r877}, {%r866}, {%r861}, {%r870, %r871};
	// end inline asm
	ld.shared.u32 	%r883, [%rd79+8];
	// begin inline asm
	lop3.b32 %r882, %r883, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1113, %r882, 2021161080;
	xor.b32  	%r893, %r1113, -2139062144;
	shr.u32 	%r887, %r883, 4;
	// begin inline asm
	lop3.b32 %r886, %r887, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1114, %r886, 2021161080;
	xor.b32  	%r899, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r890, %r891}, {%r892}, {%r893}, {%r858, %r859};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r896, %r897}, {%r898}, {%r899}, {%r864, %r865};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r902, %r903}, {%r892}, {%r899}, {%r876, %r877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r908, %r909}, {%r898}, {%r893}, {%r902, %r903};
	// end inline asm
	ld.shared.u32 	%r915, [%rd79+12];
	// begin inline asm
	lop3.b32 %r914, %r915, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1115, %r914, 2021161080;
	xor.b32  	%r925, %r1115, -2139062144;
	shr.u32 	%r919, %r915, 4;
	// begin inline asm
	lop3.b32 %r918, %r919, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1116, %r918, 2021161080;
	xor.b32  	%r931, %r1116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r922, %r923}, {%r924}, {%r925}, {%r890, %r891};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r928, %r929}, {%r930}, {%r931}, {%r896, %r897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r934, %r935}, {%r924}, {%r931}, {%r908, %r909};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r940, %r941}, {%r930}, {%r925}, {%r934, %r935};
	// end inline asm
	ld.shared.u32 	%r947, [%rd79+16];
	// begin inline asm
	lop3.b32 %r946, %r947, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1117, %r946, 2021161080;
	xor.b32  	%r957, %r1117, -2139062144;
	shr.u32 	%r951, %r947, 4;
	// begin inline asm
	lop3.b32 %r950, %r951, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1118, %r950, 2021161080;
	xor.b32  	%r963, %r1118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r954, %r955}, {%r956}, {%r957}, {%r922, %r923};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r960, %r961}, {%r962}, {%r963}, {%r928, %r929};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r966, %r967}, {%r956}, {%r963}, {%r940, %r941};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r972, %r973}, {%r962}, {%r957}, {%r966, %r967};
	// end inline asm
	ld.shared.u32 	%r979, [%rd79+20];
	// begin inline asm
	lop3.b32 %r978, %r979, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1119, %r978, 2021161080;
	xor.b32  	%r989, %r1119, -2139062144;
	shr.u32 	%r983, %r979, 4;
	// begin inline asm
	lop3.b32 %r982, %r983, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1120, %r982, 2021161080;
	xor.b32  	%r995, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r986, %r987}, {%r988}, {%r989}, {%r954, %r955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r992, %r993}, {%r994}, {%r995}, {%r960, %r961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r998, %r999}, {%r988}, {%r995}, {%r972, %r973};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1004, %r1005}, {%r994}, {%r989}, {%r998, %r999};
	// end inline asm
	ld.shared.u32 	%r1011, [%rd79+24];
	// begin inline asm
	lop3.b32 %r1010, %r1011, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1121, %r1010, 2021161080;
	xor.b32  	%r1021, %r1121, -2139062144;
	shr.u32 	%r1015, %r1011, 4;
	// begin inline asm
	lop3.b32 %r1014, %r1015, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1122, %r1014, 2021161080;
	xor.b32  	%r1027, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1018, %r1019}, {%r1020}, {%r1021}, {%r986, %r987};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1024, %r1025}, {%r1026}, {%r1027}, {%r992, %r993};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1030, %r1031}, {%r1020}, {%r1027}, {%r1004, %r1005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1036, %r1037}, {%r1026}, {%r1021}, {%r1030, %r1031};
	// end inline asm
	ld.shared.u32 	%r1043, [%rd79+28];
	// begin inline asm
	lop3.b32 %r1042, %r1043, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1123, %r1042, 2021161080;
	xor.b32  	%r1053, %r1123, -2139062144;
	shr.u32 	%r1047, %r1043, 4;
	// begin inline asm
	lop3.b32 %r1046, %r1047, %r558, %r559, 40;
	// end inline asm
	add.s32 	%r1124, %r1046, 2021161080;
	xor.b32  	%r1059, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1050, %r1051}, {%r1052}, {%r1053}, {%r1018, %r1019};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1056, %r1057}, {%r1058}, {%r1059}, {%r1024, %r1025};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1062, %r1063}, {%r1052}, {%r1059}, {%r1036, %r1037};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1068, %r1069}, {%r1058}, {%r1053}, {%r1062, %r1063};
	// end inline asm
	sub.s32 	%r1125, %r1050, %r1056;
	add.s32 	%r1126, %r1125, 4;
	shr.s32 	%r1076, %r1126, 3;
	add.s32 	%r1127, %r1068, 4;
	shr.s32 	%r1075, %r1127, 3;
	sub.s32 	%r1128, %r1051, %r1057;
	add.s32 	%r1129, %r1128, 4;
	shr.s32 	%r1079, %r1129, 3;
	add.s32 	%r1130, %r1069, 4;
	shr.s32 	%r1078, %r1130, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1074, %r1075, %r1076;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1077, %r1078, %r1079;
	// end inline asm
	add.s32 	%r1131, %r52, %r1105;
	mul.wide.u32 	%rd85, %r1131, 4;
	add.s64 	%rd86, %rd56, %rd85;
	st.shared.u32 	[%rd86], %r1074;
	add.s32 	%r1132, %r52, %r1107;
	mul.wide.u32 	%rd87, %r1132, 4;
	add.s64 	%rd88, %rd56, %rd87;
	st.shared.u32 	[%rd88], %r1077;
	add.s32 	%r1332, %r1332, 8;
	setp.ne.s32 	%p7, %r1332, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8454
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1151, [%rd11];
	ld.shared.u32 	%r1152, [%rd12+12800];
	ld.shared.u32 	%r1153, [%rd12+25600];
	ld.shared.u32 	%r1154, [%rd12+38400];
	ld.shared.u32 	%r1155, [%rd13];
	ld.shared.u32 	%r1156, [%rd14+12800];
	ld.shared.u32 	%r1157, [%rd14+25600];
	ld.shared.u32 	%r1158, [%rd14+38400];
	ld.shared.u32 	%r1159, [%rd15];
	ld.shared.u32 	%r1160, [%rd16+12800];
	ld.shared.u32 	%r1161, [%rd16+25600];
	ld.shared.u32 	%r1162, [%rd16+38400];
	ld.shared.u32 	%r1163, [%rd17];
	ld.shared.u32 	%r1164, [%rd18+12800];
	ld.shared.u32 	%r1165, [%rd18+25600];
	ld.shared.u32 	%r1166, [%rd18+38400];
	cvt.s32.s16 	%r1167, %r1151;
	shr.s32 	%r1168, %r1151, 16;
	cvt.s32.s16 	%r1169, %r1152;
	shr.s32 	%r1170, %r1152, 16;
	cvt.s32.s16 	%r1171, %r1153;
	shr.s32 	%r1172, %r1153, 16;
	cvt.s32.s16 	%r1173, %r1154;
	shr.s32 	%r1174, %r1154, 16;
	cvt.s32.s16 	%r1175, %r1155;
	shr.s32 	%r1176, %r1155, 16;
	cvt.s32.s16 	%r1177, %r1156;
	shr.s32 	%r1178, %r1156, 16;
	cvt.s32.s16 	%r1179, %r1157;
	shr.s32 	%r1180, %r1157, 16;
	cvt.s32.s16 	%r1181, %r1158;
	shr.s32 	%r1182, %r1158, 16;
	cvt.s32.s16 	%r1183, %r1159;
	shr.s32 	%r1184, %r1159, 16;
	cvt.s32.s16 	%r1185, %r1160;
	shr.s32 	%r1186, %r1160, 16;
	cvt.s32.s16 	%r1187, %r1161;
	shr.s32 	%r1188, %r1161, 16;
	cvt.s32.s16 	%r1189, %r1162;
	shr.s32 	%r1190, %r1162, 16;
	cvt.s32.s16 	%r1191, %r1163;
	shr.s32 	%r1192, %r1163, 16;
	cvt.s32.s16 	%r1193, %r1164;
	shr.s32 	%r1194, %r1164, 16;
	cvt.s32.s16 	%r1195, %r1165;
	shr.s32 	%r1196, %r1165, 16;
	cvt.s32.s16 	%r1197, %r1166;
	shr.s32 	%r1198, %r1166, 16;
	add.s32 	%r1199, %r1167, %r53;
	add.s32 	%r1200, %r1199, %r1169;
	add.s32 	%r1201, %r1200, %r1171;
	add.s32 	%r1202, %r1201, %r1173;
	shr.s32 	%r1203, %r1202, %r54;
	add.s32 	%r1204, %r1168, %r53;
	add.s32 	%r1205, %r1204, %r1170;
	add.s32 	%r1206, %r1205, %r1172;
	add.s32 	%r1207, %r1206, %r1174;
	shr.s32 	%r1208, %r1207, %r54;
	add.s32 	%r1209, %r1175, %r53;
	add.s32 	%r1210, %r1209, %r1177;
	add.s32 	%r1211, %r1210, %r1179;
	add.s32 	%r1212, %r1211, %r1181;
	shr.s32 	%r1213, %r1212, %r54;
	add.s32 	%r1214, %r1176, %r53;
	add.s32 	%r1215, %r1214, %r1178;
	add.s32 	%r1216, %r1215, %r1180;
	add.s32 	%r1217, %r1216, %r1182;
	shr.s32 	%r1218, %r1217, %r54;
	add.s32 	%r1219, %r1183, %r53;
	add.s32 	%r1220, %r1219, %r1185;
	add.s32 	%r1221, %r1220, %r1187;
	add.s32 	%r1222, %r1221, %r1189;
	shr.s32 	%r1223, %r1222, %r54;
	add.s32 	%r1224, %r1184, %r53;
	add.s32 	%r1225, %r1224, %r1186;
	add.s32 	%r1226, %r1225, %r1188;
	add.s32 	%r1227, %r1226, %r1190;
	shr.s32 	%r1228, %r1227, %r54;
	add.s32 	%r1229, %r1191, %r53;
	add.s32 	%r1230, %r1229, %r1193;
	add.s32 	%r1231, %r1230, %r1195;
	add.s32 	%r1232, %r1231, %r1197;
	shr.s32 	%r1233, %r1232, %r54;
	add.s32 	%r1234, %r1192, %r53;
	add.s32 	%r1235, %r1234, %r1194;
	add.s32 	%r1236, %r1235, %r1196;
	add.s32 	%r1237, %r1236, %r1198;
	shr.s32 	%r1238, %r1237, %r54;
	max.s32 	%r1239, %r1203, -7;
	min.s32 	%r1138, %r1239, 7;
	max.s32 	%r1240, %r1208, -7;
	min.s32 	%r1145, %r1240, 7;
	max.s32 	%r1241, %r1213, -7;
	min.s32 	%r1137, %r1241, 7;
	max.s32 	%r1242, %r1218, -7;
	min.s32 	%r1144, %r1242, 7;
	max.s32 	%r1243, %r1223, -7;
	min.s32 	%r1135, %r1243, 7;
	max.s32 	%r1244, %r1228, -7;
	min.s32 	%r1142, %r1244, 7;
	max.s32 	%r1245, %r1233, -7;
	min.s32 	%r1134, %r1245, 7;
	max.s32 	%r1246, %r1238, -7;
	min.s32 	%r1141, %r1246, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1133, %r1134, %r1135, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1136, %r1137, %r1138, %r1133;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1140, %r1141, %r1142, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1143, %r1144, %r1145, %r1140;
	// end inline asm
	shl.b32 	%r1150, %r1143, 4;
	// begin inline asm
	lop3.b32 %r1257, %r559, %r1136, %r1150, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1325, 0;
	selp.b32 	%r1330, %r1257, %r1330, %p8;
	selp.b32 	%r1331, %r1257, %r1331, %p8;
	setp.eq.s32 	%p9, %r1325, 32;
	selp.b32 	%r1326, %r1257, %r1326, %p9;
	selp.b32 	%r1327, %r1257, %r1327, %p9;
	setp.eq.s32 	%p10, %r1325, 64;
	selp.b32 	%r1328, %r1257, %r1328, %p10;
	selp.b32 	%r1329, %r1257, %r1329, %p10;
	add.s32 	%r75, %r1325, 32;
	setp.ne.s32 	%p11, %r1325, 96;
	mov.u32 	%r1325, %r75;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11190
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1247, %r1330, %r1326, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1251, %r1331, %r1327, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1255, %r1328, %r1257, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1259, %r1329, %r1257, %r227;
	// end inline asm
	selp.b32 	%r1295, %r1251, %r1247, %p12;
	shfl.sync.bfly.b32	%r1296, %r1295, 1, 31, -1;
	selp.b32 	%r1264, %r1247, %r1296, %p12;
	selp.b32 	%r1265, %r1296, %r1251, %p12;
	selp.b32 	%r1297, %r1259, %r1255, %p12;
	shfl.sync.bfly.b32	%r1298, %r1297, 1, 31, -1;
	selp.b32 	%r1272, %r1255, %r1298, %p12;
	selp.b32 	%r1273, %r1298, %r1259, %p12;
	// begin inline asm
	prmt.b32 %r1263, %r1264, %r1265, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1264, %r1265, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1272, %r1273, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1275, %r1272, %r1273, %r227;
	// end inline asm
	selp.b32 	%r1299, %r1271, %r1263, %p4;
	shfl.sync.bfly.b32	%r1300, %r1299, 2, 31, -1;
	selp.b32 	%r1280, %r1263, %r1300, %p4;
	selp.b32 	%r1281, %r1300, %r1271, %p4;
	selp.b32 	%r1301, %r1275, %r1267, %p4;
	shfl.sync.bfly.b32	%r1302, %r1301, 2, 31, -1;
	selp.b32 	%r1288, %r1267, %r1302, %p4;
	selp.b32 	%r1289, %r1302, %r1275, %p4;
	// begin inline asm
	prmt.b32 %r1279, %r1280, %r1281, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1280, %r1281, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1288, %r1289, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1291, %r1288, %r1289, %r99;
	// end inline asm
	selp.b32 	%r1303, %r1287, %r1279, %p5;
	shfl.sync.bfly.b32	%r1304, %r1303, 4, 31, -1;
	selp.b32 	%r1305, %r1279, %r1304, %p5;
	selp.b32 	%r1306, %r1304, %r1287, %p5;
	selp.b32 	%r1307, %r1291, %r1283, %p5;
	shfl.sync.bfly.b32	%r1308, %r1307, 4, 31, -1;
	selp.b32 	%r1309, %r1283, %r1308, %p5;
	selp.b32 	%r1310, %r1308, %r1291, %p5;
	selp.b32 	%r1311, %r1309, %r1305, %p12;
	shfl.sync.bfly.b32	%r1312, %r1311, 1, 31, -1;
	selp.b32 	%r1313, %r1305, %r1312, %p12;
	selp.b32 	%r1314, %r1312, %r1309, %p12;
	selp.b32 	%r1315, %r1310, %r1306, %p12;
	shfl.sync.bfly.b32	%r1316, %r1315, 1, 31, -1;
	selp.b32 	%r1317, %r1306, %r1316, %p12;
	selp.b32 	%r1318, %r1316, %r1310, %p12;
	or.b32  	%r1319, %r57, %r1324;
	shr.u32 	%r1320, %r1319, 2;
	or.b32  	%r1321, %r56, %r1320;
	add.s32 	%r1322, %r1321, %r55;
	mul.wide.u32 	%rd89, %r1322, 4;
	add.s64 	%rd90, %rd4, %rd89;
	st.global.v4.u32 	[%rd90], {%r1313, %r1317, %r1314, %r1318};
	add.s32 	%r76, %r1324, 128;
	setp.ne.s32 	%p15, %r1324, 1920;
	mov.u32 	%r1324, %r76;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11593
	mov.u32 	%r1323, 0;
	st.global.u32 	[%rd6], %r1323;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1931;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r77;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1931;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r77;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L252
	mov.u32 	%r91, 2;
	st.global.u32 	[%rd6], %r91;
	mov.u64 	%rd27, exception925;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r77;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
