// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception880[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<56>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1350>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r79, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd20, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r82, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r82, 16511;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r83, 67711;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r80, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r84, %r3, 768, %r2;
	or.b32  	%r85, %r84, %r4;
	mul.wide.u32 	%rd25, %r85, 4;
	add.s64 	%rd7, %rd5, %rd25;
	mov.u32 	%r86, 1;
	st.global.u32 	[%rd7], %r86;
	setp.gt.u32 	%p8, %r80, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r81, %r80;
	setp.gt.s32 	%p10, %r81, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r87, %r81, %r80;
	and.b32  	%r88, %r87, 127;
	setp.eq.s32 	%p12, %r88, 0;
	@%p12 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_7;
$L__BB0_21:                             // %pass120
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b32  	%r73, %r3, 1;
	neg.s32 	%r89, %r73;
	and.b32  	%r90, %r89, 96;
	shl.b32 	%r91, %r1, 2;
	shr.u32 	%r74, %r4, 3;
	or.b32  	%r92, %r91, %r74;
	cvt.u16.u32 	%rs1, %r92;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r93, %rs6;
	and.b32  	%r75, %r93, 255;
	shr.u32 	%r94, %r3, 1;
	cvt.u16.u32 	%rs7, %r94;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 13;
	mul.lo.s16 	%rs11, %rs10, 48;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r95, %rs12;
	and.b32  	%r76, %r95, 255;
	add.s32 	%r96, %r90, %r75;
	mad.lo.s32 	%r97, %r76, 192, %r96;
	mul.wide.u32 	%rd26, %r97, 4;
	add.s64 	%rd27, %rd3, %rd26;
	ld.global.u32 	%r98, [%rd27];
	add.s32 	%r78, %r98, -4;
	setp.lt.u32 	%p13, %r78, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_22;
$L__BB0_8:                              // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r77, %r98, -3;
	or.b32  	%r100, %r4, %r1;
	setp.ne.s32 	%p1, %r100, 0;
	mul.wide.u32 	%rd30, %r3, 4;
	add.s64 	%rd8, %rd6, %rd30;
	mov.u32 	%r1341, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L487
	st.global.u32 	[%rd8], %r1341;
$L__BB0_10:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p15, %r73, 0;
	bar.sync 	0;
	shr.u32 	%r359, %r1, 2;
	cvt.u16.u32 	%rs13, %r359;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	shr.u32 	%r5, %r4, 2;
	cvt.u16.u32 	%rs19, %r5;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r360, %rs27, 256;
	selp.b32 	%r361, 0, 24576, %p15;
	shl.b32 	%r362, %r1, 6;
	shl.b32 	%r363, %r4, 1;
	and.b32  	%r364, %r363, 12;
	shl.b32 	%r365, %r4, 4;
	and.b32  	%r6, %r365, 16;
	or.b32  	%r366, %r364, %r6;
	and.b32  	%r367, %r362, 192;
	or.b32  	%r368, %r366, %r367;
	or.b32  	%r369, %r368, %r361;
	mad.lo.s32 	%r370, %r76, 49152, %r369;
	add.s32 	%r371, %r370, %r360;
	shl.b32 	%r372, %r371, 2;
	cvt.u64.u32 	%rd31, %r372;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r103, %r104, %r119, %r120}, [%rd32];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r373, %rs34, 256;
	add.s32 	%r374, %r370, %r373;
	shl.b32 	%r375, %r374, 2;
	cvt.u64.u32 	%rd33, %r375;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r111, %r112, %r127, %r128}, [%rd34];
	or.b32  	%r376, %r370, 33;
	add.s32 	%r377, %r376, %r360;
	mul.wide.u32 	%rd35, %r377, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r135, %r136, %r151, %r152}, [%rd36+-4];
	add.s32 	%r378, %r376, %r373;
	mul.wide.u32 	%rd37, %r378, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r143, %r144, %r159, %r160}, [%rd38+-4];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r379, %rs42, 256;
	add.s32 	%r380, %r370, %r379;
	shl.b32 	%r381, %r380, 2;
	cvt.u64.u32 	%rd39, %r381;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r167, %r168, %r183, %r184}, [%rd40];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r382, %rs49, 256;
	add.s32 	%r383, %r370, %r382;
	shl.b32 	%r384, %r383, 2;
	cvt.u64.u32 	%rd41, %r384;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r175, %r176, %r191, %r192}, [%rd42];
	add.s32 	%r385, %r376, %r379;
	mul.wide.u32 	%rd43, %r385, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.v4.u32 	{%r199, %r200, %r215, %r216}, [%rd44+-4];
	add.s32 	%r386, %r376, %r382;
	mul.wide.u32 	%rd45, %r386, 4;
	add.s64 	%rd46, %rd1, %rd45;
	ld.global.v4.u32 	{%r207, %r208, %r223, %r224}, [%rd46+-4];
	mov.u32 	%r225, 21520;
	// begin inline asm
	prmt.b32 %r231, %r103, %r104, %r225;
	// end inline asm
	mov.u32 	%r229, 30258;
	// begin inline asm
	prmt.b32 %r232, %r103, %r104, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r111, %r112, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r111, %r112, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r119, %r120, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r119, %r120, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r127, %r128, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r127, %r128, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r135, %r136, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r135, %r136, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r143, %r144, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r143, %r144, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r151, %r152, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r151, %r152, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r159, %r160, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r159, %r160, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r167, %r168, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r167, %r168, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r175, %r176, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r175, %r176, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r183, %r184, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r183, %r184, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r191, %r192, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r191, %r192, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r199, %r200, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r199, %r200, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r207, %r208, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r207, %r208, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r215, %r216, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r215, %r216, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r351, %r223, %r224, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r223, %r224, %r229;
	// end inline asm
	mov.u32 	%r353, 25152;
	// begin inline asm
	prmt.b32 %r230, %r231, %r232, %r353;
	// end inline asm
	mov.u32 	%r357, 29521;
	// begin inline asm
	prmt.b32 %r234, %r231, %r232, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r239, %r240, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r239, %r240, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r247, %r248, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r247, %r248, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r255, %r256, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r255, %r256, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r263, %r264, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r263, %r264, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r271, %r272, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r271, %r272, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r279, %r280, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r279, %r280, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r287, %r288, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r287, %r288, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r295, %r296, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r295, %r296, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r303, %r304, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r303, %r304, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r311, %r312, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r311, %r312, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r319, %r320, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r319, %r320, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r327, %r328, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r327, %r328, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r335, %r336, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r335, %r336, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r343, %r344, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r343, %r344, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r350, %r351, %r352, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r354, %r351, %r352, %r357;
	// end inline asm
	and.b32  	%r7, %r4, 2;
	setp.eq.s32 	%p16, %r7, 0;
	selp.b32 	%r387, %r262, %r230, %p16;
	shfl.sync.bfly.b32	%r388, %r387, 2, 31, -1;
	selp.b32 	%r389, %r230, %r388, %p16;
	selp.b32 	%r390, %r388, %r262, %p16;
	selp.b32 	%r391, %r270, %r238, %p16;
	shfl.sync.bfly.b32	%r392, %r391, 2, 31, -1;
	selp.b32 	%r393, %r238, %r392, %p16;
	selp.b32 	%r394, %r392, %r270, %p16;
	selp.b32 	%r395, %r266, %r234, %p16;
	shfl.sync.bfly.b32	%r396, %r395, 2, 31, -1;
	selp.b32 	%r397, %r234, %r396, %p16;
	selp.b32 	%r398, %r396, %r266, %p16;
	selp.b32 	%r399, %r274, %r242, %p16;
	shfl.sync.bfly.b32	%r400, %r399, 2, 31, -1;
	selp.b32 	%r401, %r242, %r400, %p16;
	selp.b32 	%r402, %r400, %r274, %p16;
	selp.b32 	%r403, %r278, %r246, %p16;
	shfl.sync.bfly.b32	%r404, %r403, 2, 31, -1;
	selp.b32 	%r405, %r246, %r404, %p16;
	selp.b32 	%r406, %r404, %r278, %p16;
	selp.b32 	%r407, %r286, %r254, %p16;
	shfl.sync.bfly.b32	%r408, %r407, 2, 31, -1;
	selp.b32 	%r409, %r254, %r408, %p16;
	selp.b32 	%r410, %r408, %r286, %p16;
	selp.b32 	%r411, %r282, %r250, %p16;
	shfl.sync.bfly.b32	%r412, %r411, 2, 31, -1;
	selp.b32 	%r413, %r250, %r412, %p16;
	selp.b32 	%r414, %r412, %r282, %p16;
	selp.b32 	%r415, %r290, %r258, %p16;
	shfl.sync.bfly.b32	%r416, %r415, 2, 31, -1;
	selp.b32 	%r417, %r258, %r416, %p16;
	selp.b32 	%r418, %r416, %r290, %p16;
	selp.b32 	%r419, %r326, %r294, %p16;
	shfl.sync.bfly.b32	%r420, %r419, 2, 31, -1;
	selp.b32 	%r421, %r294, %r420, %p16;
	selp.b32 	%r422, %r420, %r326, %p16;
	selp.b32 	%r423, %r334, %r302, %p16;
	shfl.sync.bfly.b32	%r424, %r423, 2, 31, -1;
	selp.b32 	%r425, %r302, %r424, %p16;
	selp.b32 	%r426, %r424, %r334, %p16;
	selp.b32 	%r427, %r330, %r298, %p16;
	shfl.sync.bfly.b32	%r428, %r427, 2, 31, -1;
	selp.b32 	%r429, %r298, %r428, %p16;
	selp.b32 	%r430, %r428, %r330, %p16;
	selp.b32 	%r431, %r338, %r306, %p16;
	shfl.sync.bfly.b32	%r432, %r431, 2, 31, -1;
	selp.b32 	%r433, %r306, %r432, %p16;
	selp.b32 	%r434, %r432, %r338, %p16;
	selp.b32 	%r435, %r342, %r310, %p16;
	shfl.sync.bfly.b32	%r436, %r435, 2, 31, -1;
	selp.b32 	%r437, %r310, %r436, %p16;
	selp.b32 	%r438, %r436, %r342, %p16;
	selp.b32 	%r439, %r350, %r318, %p16;
	shfl.sync.bfly.b32	%r440, %r439, 2, 31, -1;
	selp.b32 	%r441, %r318, %r440, %p16;
	selp.b32 	%r442, %r440, %r350, %p16;
	selp.b32 	%r443, %r346, %r314, %p16;
	shfl.sync.bfly.b32	%r444, %r443, 2, 31, -1;
	selp.b32 	%r445, %r314, %r444, %p16;
	selp.b32 	%r446, %r444, %r346, %p16;
	selp.b32 	%r447, %r354, %r322, %p16;
	shfl.sync.bfly.b32	%r448, %r447, 2, 31, -1;
	selp.b32 	%r449, %r322, %r448, %p16;
	selp.b32 	%r450, %r448, %r354, %p16;
	and.b32  	%r8, %r4, 4;
	setp.eq.s32 	%p17, %r8, 0;
	selp.b32 	%r451, %r421, %r389, %p17;
	shfl.sync.bfly.b32	%r452, %r451, 4, 31, -1;
	selp.b32 	%r9, %r389, %r452, %p17;
	selp.b32 	%r10, %r452, %r421, %p17;
	selp.b32 	%r453, %r425, %r393, %p17;
	shfl.sync.bfly.b32	%r454, %r453, 4, 31, -1;
	selp.b32 	%r11, %r393, %r454, %p17;
	selp.b32 	%r12, %r454, %r425, %p17;
	selp.b32 	%r455, %r429, %r397, %p17;
	shfl.sync.bfly.b32	%r456, %r455, 4, 31, -1;
	selp.b32 	%r13, %r397, %r456, %p17;
	selp.b32 	%r14, %r456, %r429, %p17;
	selp.b32 	%r457, %r433, %r401, %p17;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r15, %r401, %r458, %p17;
	selp.b32 	%r16, %r458, %r433, %p17;
	selp.b32 	%r459, %r437, %r405, %p17;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r17, %r405, %r460, %p17;
	selp.b32 	%r18, %r460, %r437, %p17;
	selp.b32 	%r461, %r441, %r409, %p17;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r19, %r409, %r462, %p17;
	selp.b32 	%r20, %r462, %r441, %p17;
	selp.b32 	%r463, %r445, %r413, %p17;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r21, %r413, %r464, %p17;
	selp.b32 	%r22, %r464, %r445, %p17;
	selp.b32 	%r465, %r449, %r417, %p17;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r23, %r417, %r466, %p17;
	selp.b32 	%r24, %r466, %r449, %p17;
	selp.b32 	%r467, %r422, %r390, %p17;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r25, %r390, %r468, %p17;
	selp.b32 	%r26, %r468, %r422, %p17;
	selp.b32 	%r469, %r426, %r394, %p17;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r27, %r394, %r470, %p17;
	selp.b32 	%r28, %r470, %r426, %p17;
	selp.b32 	%r471, %r430, %r398, %p17;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r29, %r398, %r472, %p17;
	selp.b32 	%r30, %r472, %r430, %p17;
	selp.b32 	%r473, %r434, %r402, %p17;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r31, %r402, %r474, %p17;
	selp.b32 	%r32, %r474, %r434, %p17;
	selp.b32 	%r475, %r438, %r406, %p17;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r33, %r406, %r476, %p17;
	selp.b32 	%r34, %r476, %r438, %p17;
	selp.b32 	%r477, %r442, %r410, %p17;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r35, %r410, %r478, %p17;
	selp.b32 	%r36, %r478, %r442, %p17;
	selp.b32 	%r479, %r446, %r414, %p17;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r37, %r414, %r480, %p17;
	selp.b32 	%r38, %r480, %r446, %p17;
	selp.b32 	%r481, %r450, %r418, %p17;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r39, %r418, %r482, %p17;
	selp.b32 	%r40, %r482, %r450, %p17;
	shl.b32 	%r483, %r76, 8;
	and.b32  	%r484, %r1, 12;
	or.b32  	%r41, %r484, %r74;
	and.b32  	%r485, %r2, 96;
	shl.b32 	%r486, %r4, 2;
	and.b32  	%r487, %r486, 28;
	or.b32  	%r488, %r485, %r487;
	shl.b32 	%r489, %r3, 7;
	and.b32  	%r490, %r489, 128;
	or.b32  	%r491, %r488, %r490;
	or.b32  	%r42, %r491, %r483;
	shl.b32 	%r492, %r4, 3;
	and.b32  	%r493, %r492, 24;
	or.b32  	%r43, %r493, %r485;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r494, %rs54;
	and.b32  	%r495, %r494, 255;
	and.b32  	%r496, %r1, 3;
	mul.lo.s32 	%r497, %r496, 3200;
	and.b32  	%r44, %r363, 6;
	or.b32  	%r45, %r497, %r495;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r498, %rs60;
	and.b32  	%r499, %r498, 255;
	or.b32  	%r46, %r497, %r499;
	and.b32  	%r500, %r4, 7;
	shl.b32 	%r502, %r86, %r78;
	setp.gt.u32 	%p18, %r78, 31;
	selp.b32 	%r47, 0, %r502, %p18;
	min.u32 	%r48, %r77, 31;
	and.b32  	%r49, %r4, 1;
	shl.b32 	%r503, %r76, 12;
	shl.b32 	%r504, %r4, 5;
	and.b32  	%r505, %r504, 64;
	shl.b32 	%r506, %r3, 11;
	and.b32  	%r507, %r506, 2048;
	or.b32  	%r508, %r503, %r507;
	mad.lo.s32 	%r509, %r75, 196608, %r508;
	mul.lo.s32 	%r510, %r41, 129;
	add.s32 	%r511, %r488, %r510;
	mul.wide.u32 	%rd47, %r511, 4;
	mov.u64 	%rd48, shmem;
	add.s64 	%rd9, %rd48, %rd47;
	cvt.u64.u32 	%rd49, %r510;
	cvt.u64.u32 	%rd10, %r488;
	add.s64 	%rd50, %rd10, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd11, %rd48, %rd51;
	mul.lo.s32 	%r512, %r500, 100;
	add.s32 	%r513, %r512, %r75;
	mul.wide.u32 	%rd52, %r513, 4;
	add.s64 	%rd53, %rd48, 16512;
	add.s64 	%rd12, %rd53, %rd52;
	cvt.u64.u32 	%rd54, %r512;
	cvt.u64.u32 	%rd55, %r75;
	add.s64 	%rd56, %rd55, %rd54;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd13, %rd53, %rd57;
	add.s32 	%r514, %r512, 800;
	add.s32 	%r515, %r514, %r75;
	mul.wide.u32 	%rd58, %r515, 4;
	add.s64 	%rd14, %rd53, %rd58;
	cvt.u64.u32 	%rd59, %r514;
	add.s64 	%rd60, %rd55, %rd59;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd15, %rd53, %rd61;
	add.s32 	%r516, %r512, 1600;
	add.s32 	%r517, %r516, %r75;
	mul.wide.u32 	%rd62, %r517, 4;
	add.s64 	%rd16, %rd53, %rd62;
	cvt.u64.u32 	%rd63, %r516;
	add.s64 	%rd64, %rd55, %rd63;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd17, %rd53, %rd65;
	or.b32  	%r518, %r4, 24;
	mul.lo.s32 	%r519, %r518, 100;
	add.s32 	%r520, %r519, %r75;
	mul.wide.u32 	%rd66, %r520, 4;
	add.s64 	%rd18, %rd53, %rd66;
	cvt.u64.u32 	%rd67, %r519;
	add.s64 	%rd68, %rd55, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd19, %rd53, %rd69;
	and.b32  	%r521, %r492, 32;
	or.b32  	%r50, %r505, %r521;
	shl.b32 	%r51, %r509, 2;
	mov.pred 	%p55, 0;
$L__BB0_11:                             // %L2581
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_15 Depth 3
	add.s32 	%r522, %r1341, %r80;
	setp.ge.s32 	%p19, %r522, %r81;
	@%p19 bra 	$L__BB0_18;
// %bb.12:                              // %L2589.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r53, %r1341, 16;
	mov.u32 	%r1342, 0;
	mov.u32 	%r1343, %r1342;
	mov.u32 	%r1344, %r1342;
	mov.u32 	%r1345, %r1342;
	mov.u32 	%r1346, %r1342;
	mov.u32 	%r1347, %r1342;
	mov.u32 	%r1348, %r1342;
$L__BB0_13:                             // %L2589
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_15 Depth 3
	setp.lt.u32 	%p20, %r1, 16;
	add.s32 	%r61, %r1342, %r1341;
	@%p20 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_14;
$L__BB0_23:                             // %pass1213
                                        //   in Loop: Header=BB0_13 Depth=2
	cvt.u32.u64 	%r524, %rd10;
	and.b32  	%r525, %r61, 32736;
	or.b32  	%r526, %r41, %r525;
	add.s32 	%r527, %r526, %r80;
	mad.lo.s32 	%r528, %r527, 12288, %r42;
	mul.hi.s32 	%r529, %r528, 715827883;
	shr.u32 	%r530, %r529, 31;
	shr.s32 	%r531, %r529, 26;
	add.s32 	%r532, %r531, %r530;
	setp.lt.s32 	%p21, %r528, 0;
	mul.lo.s32 	%r533, %r532, 402653184;
	setp.ne.s32 	%p22, %r533, %r528;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r534, -1, 0, %p23;
	add.s32 	%r535, %r532, %r534;
	mad.lo.s32 	%r536, %r535, -402653184, %r528;
	mul.wide.s32 	%rd70, %r536, 4;
	add.s64 	%rd71, %rd2, %rd70;
	ld.global.v4.u32 	{%r537, %r538, %r539, %r540}, [%rd71];
	add.s32 	%r541, %r53, %r1342;
	or.b32  	%r542, %r41, %r541;
	and.b32  	%r543, %r542, 32767;
	add.s32 	%r544, %r543, %r80;
	mad.lo.s32 	%r545, %r544, 12288, %r42;
	mul.hi.s32 	%r546, %r545, 715827883;
	shr.u32 	%r547, %r546, 31;
	shr.s32 	%r548, %r546, 26;
	add.s32 	%r549, %r548, %r547;
	setp.lt.s32 	%p24, %r545, 0;
	mul.lo.s32 	%r550, %r549, 402653184;
	setp.ne.s32 	%p25, %r550, %r545;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r551, -1, 0, %p26;
	add.s32 	%r552, %r549, %r551;
	mad.lo.s32 	%r553, %r552, -402653184, %r545;
	mul.wide.s32 	%rd72, %r553, 4;
	add.s64 	%rd73, %rd2, %rd72;
	ld.global.v4.u32 	{%r554, %r555, %r556, %r557}, [%rd73];
	st.shared.u32 	[%rd9], %r537;
	st.shared.u32 	[%rd11+4], %r538;
	st.shared.u32 	[%rd11+8], %r539;
	st.shared.u32 	[%rd11+12], %r540;
	and.b32  	%r558, %r542, 31;
	mul.lo.s32 	%r559, %r558, 129;
	add.s32 	%r560, %r524, %r559;
	mul.wide.u32 	%rd74, %r560, 4;
	add.s64 	%rd76, %rd48, %rd74;
	st.shared.u32 	[%rd76], %r554;
	cvt.u64.u32 	%rd77, %r559;
	add.s64 	%rd78, %rd10, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd48, %rd79;
	st.shared.u32 	[%rd80+4], %r555;
	st.shared.u32 	[%rd80+8], %r556;
	st.shared.u32 	[%rd80+12], %r557;
$L__BB0_14:                             // %L4316
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	mov.u32 	%r574, 0;
	mov.u32 	%r1349, %r574;
$L__BB0_15:                             // %L4318
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1086, %r1349, %r5;
	add.s32 	%r1087, %r61, %r1086;
	shr.s32 	%r1088, %r1087, 31;
	shr.u32 	%r1089, %r1088, 27;
	add.s32 	%r1090, %r1087, %r1089;
	and.b32  	%r1091, %r1090, -32;
	sub.s32 	%r1092, %r1087, %r1091;
	mad.lo.s32 	%r1093, %r1092, 129, %r43;
	mul.wide.s32 	%rd81, %r1093, 4;
	add.s64 	%rd83, %rd48, %rd81;
	ld.shared.u32 	%r563, [%rd83];
	mov.u32 	%r564, 134744072;
	mov.u32 	%r565, 252645135;
	// begin inline asm
	lop3.b32 %r562, %r563, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1094, %r562, 2021161080;
	xor.b32  	%r573, %r1094, -2139062144;
	shr.u32 	%r567, %r563, 4;
	// begin inline asm
	lop3.b32 %r566, %r567, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1095, %r566, 2021161080;
	xor.b32  	%r579, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r570, %r571}, {%r9}, {%r573}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r576, %r577}, {%r13}, {%r579}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r582, %r583}, {%r9}, {%r579}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r588, %r589}, {%r13}, {%r573}, {%r582, %r583};
	// end inline asm
	ld.shared.u32 	%r595, [%rd83+4];
	// begin inline asm
	lop3.b32 %r594, %r595, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1096, %r594, 2021161080;
	xor.b32  	%r605, %r1096, -2139062144;
	shr.u32 	%r599, %r595, 4;
	// begin inline asm
	lop3.b32 %r598, %r599, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1097, %r598, 2021161080;
	xor.b32  	%r611, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r602, %r603}, {%r17}, {%r605}, {%r570, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r608, %r609}, {%r21}, {%r611}, {%r576, %r577};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r614, %r615}, {%r17}, {%r611}, {%r588, %r589};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r620, %r621}, {%r21}, {%r605}, {%r614, %r615};
	// end inline asm
	ld.shared.u32 	%r627, [%rd83+8];
	// begin inline asm
	lop3.b32 %r626, %r627, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1098, %r626, 2021161080;
	xor.b32  	%r637, %r1098, -2139062144;
	shr.u32 	%r631, %r627, 4;
	// begin inline asm
	lop3.b32 %r630, %r631, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1099, %r630, 2021161080;
	xor.b32  	%r643, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r634, %r635}, {%r25}, {%r637}, {%r602, %r603};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r640, %r641}, {%r29}, {%r643}, {%r608, %r609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r646, %r647}, {%r25}, {%r643}, {%r620, %r621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r652, %r653}, {%r29}, {%r637}, {%r646, %r647};
	// end inline asm
	ld.shared.u32 	%r659, [%rd83+12];
	// begin inline asm
	lop3.b32 %r658, %r659, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1100, %r658, 2021161080;
	xor.b32  	%r669, %r1100, -2139062144;
	shr.u32 	%r663, %r659, 4;
	// begin inline asm
	lop3.b32 %r662, %r663, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1101, %r662, 2021161080;
	xor.b32  	%r675, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r666, %r667}, {%r33}, {%r669}, {%r634, %r635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r672, %r673}, {%r37}, {%r675}, {%r640, %r641};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r678, %r679}, {%r33}, {%r675}, {%r652, %r653};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r684, %r685}, {%r37}, {%r669}, {%r678, %r679};
	// end inline asm
	ld.shared.u32 	%r691, [%rd83+16];
	// begin inline asm
	lop3.b32 %r690, %r691, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1102, %r690, 2021161080;
	xor.b32  	%r701, %r1102, -2139062144;
	shr.u32 	%r695, %r691, 4;
	// begin inline asm
	lop3.b32 %r694, %r695, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1103, %r694, 2021161080;
	xor.b32  	%r707, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r698, %r699}, {%r10}, {%r701}, {%r666, %r667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r704, %r705}, {%r14}, {%r707}, {%r672, %r673};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r710, %r711}, {%r10}, {%r707}, {%r684, %r685};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r716, %r717}, {%r14}, {%r701}, {%r710, %r711};
	// end inline asm
	ld.shared.u32 	%r723, [%rd83+20];
	// begin inline asm
	lop3.b32 %r722, %r723, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1104, %r722, 2021161080;
	xor.b32  	%r733, %r1104, -2139062144;
	shr.u32 	%r727, %r723, 4;
	// begin inline asm
	lop3.b32 %r726, %r727, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1105, %r726, 2021161080;
	xor.b32  	%r739, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r730, %r731}, {%r18}, {%r733}, {%r698, %r699};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r736, %r737}, {%r22}, {%r739}, {%r704, %r705};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r742, %r743}, {%r18}, {%r739}, {%r716, %r717};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r748, %r749}, {%r22}, {%r733}, {%r742, %r743};
	// end inline asm
	ld.shared.u32 	%r755, [%rd83+24];
	// begin inline asm
	lop3.b32 %r754, %r755, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1106, %r754, 2021161080;
	xor.b32  	%r765, %r1106, -2139062144;
	shr.u32 	%r759, %r755, 4;
	// begin inline asm
	lop3.b32 %r758, %r759, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1107, %r758, 2021161080;
	xor.b32  	%r771, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r762, %r763}, {%r26}, {%r765}, {%r730, %r731};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r768, %r769}, {%r30}, {%r771}, {%r736, %r737};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r774, %r775}, {%r26}, {%r771}, {%r748, %r749};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r780, %r781}, {%r30}, {%r765}, {%r774, %r775};
	// end inline asm
	ld.shared.u32 	%r787, [%rd83+28];
	// begin inline asm
	lop3.b32 %r786, %r787, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1108, %r786, 2021161080;
	xor.b32  	%r797, %r1108, -2139062144;
	shr.u32 	%r791, %r787, 4;
	// begin inline asm
	lop3.b32 %r790, %r791, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1109, %r790, 2021161080;
	xor.b32  	%r803, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r794, %r795}, {%r34}, {%r797}, {%r762, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r800, %r801}, {%r38}, {%r803}, {%r768, %r769};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r806, %r807}, {%r34}, {%r803}, {%r780, %r781};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r812, %r813}, {%r38}, {%r797}, {%r806, %r807};
	// end inline asm
	sub.s32 	%r1110, %r794, %r800;
	add.s32 	%r1111, %r1110, 4;
	shr.s32 	%r820, %r1111, 3;
	add.s32 	%r1112, %r812, 4;
	shr.s32 	%r819, %r1112, 3;
	sub.s32 	%r1113, %r795, %r801;
	add.s32 	%r1114, %r1113, 4;
	shr.s32 	%r823, %r1114, 3;
	add.s32 	%r1115, %r813, 4;
	shr.s32 	%r822, %r1115, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r818, %r819, %r820;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r821, %r822, %r823;
	// end inline asm
	or.b32  	%r1116, %r1349, %r44;
	mul.lo.s32 	%r1117, %r1116, 100;
	add.s32 	%r1118, %r45, %r1117;
	mul.wide.u32 	%rd84, %r1118, 4;
	add.s64 	%rd86, %rd53, %rd84;
	st.shared.u32 	[%rd86], %r818;
	add.s32 	%r1119, %r1117, 100;
	add.s32 	%r1120, %r45, %r1119;
	mul.wide.u32 	%rd87, %r1120, 4;
	add.s64 	%rd88, %rd53, %rd87;
	st.shared.u32 	[%rd88], %r821;
	ld.shared.u32 	%r825, [%rd83];
	// begin inline asm
	lop3.b32 %r824, %r825, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1121, %r824, 2021161080;
	xor.b32  	%r835, %r1121, -2139062144;
	shr.u32 	%r829, %r825, 4;
	// begin inline asm
	lop3.b32 %r828, %r829, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1122, %r828, 2021161080;
	xor.b32  	%r841, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r832, %r833}, {%r11}, {%r835}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r838, %r839}, {%r15}, {%r841}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r844, %r845}, {%r11}, {%r841}, {%r574, %r574};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r850, %r851}, {%r15}, {%r835}, {%r844, %r845};
	// end inline asm
	ld.shared.u32 	%r857, [%rd83+4];
	// begin inline asm
	lop3.b32 %r856, %r857, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1123, %r856, 2021161080;
	xor.b32  	%r867, %r1123, -2139062144;
	shr.u32 	%r861, %r857, 4;
	// begin inline asm
	lop3.b32 %r860, %r861, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1124, %r860, 2021161080;
	xor.b32  	%r873, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r864, %r865}, {%r19}, {%r867}, {%r832, %r833};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r870, %r871}, {%r23}, {%r873}, {%r838, %r839};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r876, %r877}, {%r19}, {%r873}, {%r850, %r851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r882, %r883}, {%r23}, {%r867}, {%r876, %r877};
	// end inline asm
	ld.shared.u32 	%r889, [%rd83+8];
	// begin inline asm
	lop3.b32 %r888, %r889, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1125, %r888, 2021161080;
	xor.b32  	%r899, %r1125, -2139062144;
	shr.u32 	%r893, %r889, 4;
	// begin inline asm
	lop3.b32 %r892, %r893, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1126, %r892, 2021161080;
	xor.b32  	%r905, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r896, %r897}, {%r27}, {%r899}, {%r864, %r865};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r902, %r903}, {%r31}, {%r905}, {%r870, %r871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r908, %r909}, {%r27}, {%r905}, {%r882, %r883};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r914, %r915}, {%r31}, {%r899}, {%r908, %r909};
	// end inline asm
	ld.shared.u32 	%r921, [%rd83+12];
	// begin inline asm
	lop3.b32 %r920, %r921, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1127, %r920, 2021161080;
	xor.b32  	%r931, %r1127, -2139062144;
	shr.u32 	%r925, %r921, 4;
	// begin inline asm
	lop3.b32 %r924, %r925, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1128, %r924, 2021161080;
	xor.b32  	%r937, %r1128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r928, %r929}, {%r35}, {%r931}, {%r896, %r897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r934, %r935}, {%r39}, {%r937}, {%r902, %r903};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r940, %r941}, {%r35}, {%r937}, {%r914, %r915};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r946, %r947}, {%r39}, {%r931}, {%r940, %r941};
	// end inline asm
	ld.shared.u32 	%r953, [%rd83+16];
	// begin inline asm
	lop3.b32 %r952, %r953, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1129, %r952, 2021161080;
	xor.b32  	%r963, %r1129, -2139062144;
	shr.u32 	%r957, %r953, 4;
	// begin inline asm
	lop3.b32 %r956, %r957, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1130, %r956, 2021161080;
	xor.b32  	%r969, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r960, %r961}, {%r12}, {%r963}, {%r928, %r929};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r966, %r967}, {%r16}, {%r969}, {%r934, %r935};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r972, %r973}, {%r12}, {%r969}, {%r946, %r947};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r978, %r979}, {%r16}, {%r963}, {%r972, %r973};
	// end inline asm
	ld.shared.u32 	%r985, [%rd83+20];
	// begin inline asm
	lop3.b32 %r984, %r985, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1131, %r984, 2021161080;
	xor.b32  	%r995, %r1131, -2139062144;
	shr.u32 	%r989, %r985, 4;
	// begin inline asm
	lop3.b32 %r988, %r989, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1132, %r988, 2021161080;
	xor.b32  	%r1001, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r992, %r993}, {%r20}, {%r995}, {%r960, %r961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r998, %r999}, {%r24}, {%r1001}, {%r966, %r967};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1004, %r1005}, {%r20}, {%r1001}, {%r978, %r979};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1010, %r1011}, {%r24}, {%r995}, {%r1004, %r1005};
	// end inline asm
	ld.shared.u32 	%r1017, [%rd83+24];
	// begin inline asm
	lop3.b32 %r1016, %r1017, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1133, %r1016, 2021161080;
	xor.b32  	%r1027, %r1133, -2139062144;
	shr.u32 	%r1021, %r1017, 4;
	// begin inline asm
	lop3.b32 %r1020, %r1021, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1134, %r1020, 2021161080;
	xor.b32  	%r1033, %r1134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1024, %r1025}, {%r28}, {%r1027}, {%r992, %r993};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1030, %r1031}, {%r32}, {%r1033}, {%r998, %r999};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1036, %r1037}, {%r28}, {%r1033}, {%r1010, %r1011};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1042, %r1043}, {%r32}, {%r1027}, {%r1036, %r1037};
	// end inline asm
	ld.shared.u32 	%r1049, [%rd83+28];
	// begin inline asm
	lop3.b32 %r1048, %r1049, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1135, %r1048, 2021161080;
	xor.b32  	%r1059, %r1135, -2139062144;
	shr.u32 	%r1053, %r1049, 4;
	// begin inline asm
	lop3.b32 %r1052, %r1053, %r564, %r565, 40;
	// end inline asm
	add.s32 	%r1136, %r1052, 2021161080;
	xor.b32  	%r1065, %r1136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1056, %r1057}, {%r36}, {%r1059}, {%r1024, %r1025};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1062, %r1063}, {%r40}, {%r1065}, {%r1030, %r1031};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1068, %r1069}, {%r36}, {%r1065}, {%r1042, %r1043};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1074, %r1075}, {%r40}, {%r1059}, {%r1068, %r1069};
	// end inline asm
	sub.s32 	%r1137, %r1056, %r1062;
	add.s32 	%r1138, %r1137, 4;
	shr.s32 	%r1082, %r1138, 3;
	add.s32 	%r1139, %r1074, 4;
	shr.s32 	%r1081, %r1139, 3;
	sub.s32 	%r1140, %r1057, %r1063;
	add.s32 	%r1141, %r1140, 4;
	shr.s32 	%r1085, %r1141, 3;
	add.s32 	%r1142, %r1075, 4;
	shr.s32 	%r1084, %r1142, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1080, %r1081, %r1082;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1083, %r1084, %r1085;
	// end inline asm
	add.s32 	%r1143, %r46, %r1117;
	mul.wide.u32 	%rd89, %r1143, 4;
	add.s64 	%rd90, %rd53, %rd89;
	st.shared.u32 	[%rd90], %r1080;
	add.s32 	%r1144, %r46, %r1119;
	mul.wide.u32 	%rd91, %r1144, 4;
	add.s64 	%rd92, %rd53, %rd91;
	st.shared.u32 	[%rd92], %r1083;
	add.s32 	%r1349, %r1349, 8;
	setp.ne.s32 	%p27, %r1349, 32;
	@%p27 bra 	$L__BB0_15;
// %bb.16:                              // %L8051
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1163, [%rd12];
	ld.shared.u32 	%r1164, [%rd13+12800];
	ld.shared.u32 	%r1165, [%rd13+25600];
	ld.shared.u32 	%r1166, [%rd13+38400];
	ld.shared.u32 	%r1167, [%rd14];
	ld.shared.u32 	%r1168, [%rd15+12800];
	ld.shared.u32 	%r1169, [%rd15+25600];
	ld.shared.u32 	%r1170, [%rd15+38400];
	ld.shared.u32 	%r1171, [%rd16];
	ld.shared.u32 	%r1172, [%rd17+12800];
	ld.shared.u32 	%r1173, [%rd17+25600];
	ld.shared.u32 	%r1174, [%rd17+38400];
	ld.shared.u32 	%r1175, [%rd18];
	ld.shared.u32 	%r1176, [%rd19+12800];
	ld.shared.u32 	%r1177, [%rd19+25600];
	ld.shared.u32 	%r1178, [%rd19+38400];
	cvt.s32.s16 	%r1179, %r1163;
	shr.s32 	%r1180, %r1163, 16;
	cvt.s32.s16 	%r1181, %r1164;
	shr.s32 	%r1182, %r1164, 16;
	cvt.s32.s16 	%r1183, %r1165;
	shr.s32 	%r1184, %r1165, 16;
	cvt.s32.s16 	%r1185, %r1166;
	shr.s32 	%r1186, %r1166, 16;
	cvt.s32.s16 	%r1187, %r1167;
	shr.s32 	%r1188, %r1167, 16;
	cvt.s32.s16 	%r1189, %r1168;
	shr.s32 	%r1190, %r1168, 16;
	cvt.s32.s16 	%r1191, %r1169;
	shr.s32 	%r1192, %r1169, 16;
	cvt.s32.s16 	%r1193, %r1170;
	shr.s32 	%r1194, %r1170, 16;
	cvt.s32.s16 	%r1195, %r1171;
	shr.s32 	%r1196, %r1171, 16;
	cvt.s32.s16 	%r1197, %r1172;
	shr.s32 	%r1198, %r1172, 16;
	cvt.s32.s16 	%r1199, %r1173;
	shr.s32 	%r1200, %r1173, 16;
	cvt.s32.s16 	%r1201, %r1174;
	shr.s32 	%r1202, %r1174, 16;
	cvt.s32.s16 	%r1203, %r1175;
	shr.s32 	%r1204, %r1175, 16;
	cvt.s32.s16 	%r1205, %r1176;
	shr.s32 	%r1206, %r1176, 16;
	cvt.s32.s16 	%r1207, %r1177;
	shr.s32 	%r1208, %r1177, 16;
	cvt.s32.s16 	%r1209, %r1178;
	shr.s32 	%r1210, %r1178, 16;
	add.s32 	%r1211, %r1179, %r47;
	add.s32 	%r1212, %r1211, %r1181;
	add.s32 	%r1213, %r1212, %r1183;
	add.s32 	%r1214, %r1213, %r1185;
	shr.s32 	%r1215, %r1214, %r48;
	add.s32 	%r1216, %r1180, %r47;
	add.s32 	%r1217, %r1216, %r1182;
	add.s32 	%r1218, %r1217, %r1184;
	add.s32 	%r1219, %r1218, %r1186;
	shr.s32 	%r1220, %r1219, %r48;
	add.s32 	%r1221, %r1187, %r47;
	add.s32 	%r1222, %r1221, %r1189;
	add.s32 	%r1223, %r1222, %r1191;
	add.s32 	%r1224, %r1223, %r1193;
	shr.s32 	%r1225, %r1224, %r48;
	add.s32 	%r1226, %r1188, %r47;
	add.s32 	%r1227, %r1226, %r1190;
	add.s32 	%r1228, %r1227, %r1192;
	add.s32 	%r1229, %r1228, %r1194;
	shr.s32 	%r1230, %r1229, %r48;
	add.s32 	%r1231, %r1195, %r47;
	add.s32 	%r1232, %r1231, %r1197;
	add.s32 	%r1233, %r1232, %r1199;
	add.s32 	%r1234, %r1233, %r1201;
	shr.s32 	%r1235, %r1234, %r48;
	add.s32 	%r1236, %r1196, %r47;
	add.s32 	%r1237, %r1236, %r1198;
	add.s32 	%r1238, %r1237, %r1200;
	add.s32 	%r1239, %r1238, %r1202;
	shr.s32 	%r1240, %r1239, %r48;
	add.s32 	%r1241, %r1203, %r47;
	add.s32 	%r1242, %r1241, %r1205;
	add.s32 	%r1243, %r1242, %r1207;
	add.s32 	%r1244, %r1243, %r1209;
	shr.s32 	%r1245, %r1244, %r48;
	add.s32 	%r1246, %r1204, %r47;
	add.s32 	%r1247, %r1246, %r1206;
	add.s32 	%r1248, %r1247, %r1208;
	add.s32 	%r1249, %r1248, %r1210;
	shr.s32 	%r1250, %r1249, %r48;
	max.s32 	%r1251, %r1215, -7;
	min.s32 	%r1150, %r1251, 7;
	setp.ne.s32 	%p28, %r1150, %r1215;
	or.pred  	%p29, %p55, %p28;
	max.s32 	%r1252, %r1220, -7;
	min.s32 	%r1157, %r1252, 7;
	setp.ne.s32 	%p30, %r1157, %r1220;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r1253, %r1225, -7;
	min.s32 	%r1149, %r1253, 7;
	setp.ne.s32 	%p32, %r1149, %r1225;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r1254, %r1230, -7;
	min.s32 	%r1156, %r1254, 7;
	setp.ne.s32 	%p34, %r1156, %r1230;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r1255, %r1235, -7;
	min.s32 	%r1147, %r1255, 7;
	setp.ne.s32 	%p36, %r1147, %r1235;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r1256, %r1240, -7;
	min.s32 	%r1154, %r1256, 7;
	setp.ne.s32 	%p38, %r1154, %r1240;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r1257, %r1245, -7;
	min.s32 	%r1146, %r1257, 7;
	setp.ne.s32 	%p40, %r1146, %r1245;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r1258, %r1250, -7;
	min.s32 	%r1153, %r1258, 7;
	setp.ne.s32 	%p42, %r1153, %r1250;
	or.pred  	%p55, %p42, %p41;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1145, %r1146, %r1147, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1148, %r1149, %r1150, %r1145;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1152, %r1153, %r1154, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1155, %r1156, %r1157, %r1152;
	// end inline asm
	shl.b32 	%r1162, %r1155, 4;
	// begin inline asm
	lop3.b32 %r1269, %r565, %r1148, %r1162, 202;
	// end inline asm
	setp.eq.s32 	%p43, %r1342, 0;
	selp.b32 	%r1347, %r1269, %r1347, %p43;
	selp.b32 	%r1348, %r1269, %r1348, %p43;
	setp.eq.s32 	%p44, %r1342, 32;
	selp.b32 	%r1343, %r1269, %r1343, %p44;
	selp.b32 	%r1344, %r1269, %r1344, %p44;
	setp.eq.s32 	%p45, %r1342, 64;
	selp.b32 	%r1345, %r1269, %r1345, %p45;
	selp.b32 	%r1346, %r1269, %r1346, %p45;
	add.s32 	%r71, %r1342, 32;
	setp.ne.s32 	%p46, %r1342, 96;
	mov.u32 	%r1342, %r71;
	@%p46 bra 	$L__BB0_13;
// %bb.17:                              // %L10457.L10463_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p47, %r49, 0;
	// begin inline asm
	prmt.b32 %r1259, %r1347, %r1343, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1263, %r1348, %r1344, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1345, %r1269, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1346, %r1269, %r357;
	// end inline asm
	selp.b32 	%r1307, %r1263, %r1259, %p47;
	shfl.sync.bfly.b32	%r1308, %r1307, 1, 31, -1;
	selp.b32 	%r1276, %r1259, %r1308, %p47;
	selp.b32 	%r1277, %r1308, %r1263, %p47;
	selp.b32 	%r1309, %r1271, %r1267, %p47;
	shfl.sync.bfly.b32	%r1310, %r1309, 1, 31, -1;
	selp.b32 	%r1284, %r1267, %r1310, %p47;
	selp.b32 	%r1285, %r1310, %r1271, %p47;
	// begin inline asm
	prmt.b32 %r1275, %r1276, %r1277, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1279, %r1276, %r1277, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1284, %r1285, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1284, %r1285, %r357;
	// end inline asm
	selp.b32 	%r1311, %r1283, %r1275, %p16;
	shfl.sync.bfly.b32	%r1312, %r1311, 2, 31, -1;
	selp.b32 	%r1292, %r1275, %r1312, %p16;
	selp.b32 	%r1293, %r1312, %r1283, %p16;
	selp.b32 	%r1313, %r1287, %r1279, %p16;
	shfl.sync.bfly.b32	%r1314, %r1313, 2, 31, -1;
	selp.b32 	%r1300, %r1279, %r1314, %p16;
	selp.b32 	%r1301, %r1314, %r1287, %p16;
	// begin inline asm
	prmt.b32 %r1291, %r1292, %r1293, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1295, %r1292, %r1293, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1299, %r1300, %r1301, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r1300, %r1301, %r229;
	// end inline asm
	selp.b32 	%r1315, %r1299, %r1291, %p17;
	shfl.sync.bfly.b32	%r1316, %r1315, 4, 31, -1;
	selp.b32 	%r1317, %r1291, %r1316, %p17;
	selp.b32 	%r1318, %r1316, %r1299, %p17;
	selp.b32 	%r1319, %r1303, %r1295, %p17;
	shfl.sync.bfly.b32	%r1320, %r1319, 4, 31, -1;
	selp.b32 	%r1321, %r1295, %r1320, %p17;
	selp.b32 	%r1322, %r1320, %r1303, %p17;
	selp.b32 	%r1323, %r1321, %r1317, %p47;
	shfl.sync.bfly.b32	%r1324, %r1323, 1, 31, -1;
	selp.b32 	%r1325, %r1317, %r1324, %p47;
	selp.b32 	%r1326, %r1324, %r1321, %p47;
	selp.b32 	%r1327, %r1322, %r1318, %p47;
	shfl.sync.bfly.b32	%r1328, %r1327, 1, 31, -1;
	selp.b32 	%r1329, %r1318, %r1328, %p47;
	selp.b32 	%r1330, %r1328, %r1322, %p47;
	and.b32  	%r1331, %r1341, 8064;
	or.b32  	%r1332, %r1331, %r50;
	or.b32  	%r1333, %r1332, %r6;
	or.b32  	%r1334, %r1333, %r51;
	cvt.u64.u32 	%rd93, %r1334;
	add.s64 	%rd94, %rd4, %rd93;
	st.global.v4.u32 	[%rd94], {%r1325, %r1329, %r1326, %r1330};
	add.s32 	%r72, %r1341, 128;
	setp.ne.s32 	%p50, %r1341, 32640;
	mov.u32 	%r1341, %r72;
	@%p50 bra 	$L__BB0_11;
$L__BB0_18:                             // %L10844
	selp.u32 	%r1335, 1, 0, %p55;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r1335, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r1336, 1, 0, %p2; 
	}
	setp.eq.s32 	%p51, %r1336, 0;
	or.pred  	%p52, %p51, %p1;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %L10875
	st.global.u32 	[%rd8], %r86;
$L__BB0_20:                             // %L10921
	mov.u32 	%r1338, 0;
	st.global.u32 	[%rd7], %r1338;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r1339, 2;
	st.global.u32 	[%rd7], %r1339;
	mov.u64 	%rd95, exception880;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd23, exception1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_22:                             // %L370
	mov.u32 	%r99, 3;
	st.global.u32 	[%rd7], %r99;
	mov.u64 	%rd28, exception880;
	cvta.global.u64 	%rd29, %rd28;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd29;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
