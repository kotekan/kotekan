// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception935[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1941[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<29>;
	.reg .b16 	%rs<55>;
	.reg .b32 	%r<1376>;
	.reg .b64 	%rd<89>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r86, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd13, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r89, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r89, 16511;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r90, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r90, 67711;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r87, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r91, %r3, %r1;
	mad.lo.s32 	%r92, %r4, 768, %r91;
	mul.wide.u32 	%rd18, %r92, 4;
	add.s64 	%rd6, %rd5, %rd18;
	mov.u32 	%r93, 1;
	st.global.u32 	[%rd6], %r93;
	setp.lt.s32 	%p3, %r87, 0;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L128
	ld.param.u32 	%r88, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r88, %r87;
	setp.gt.s32 	%p5, %r88, 262144;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r94, %r88, %r87;
	and.b32  	%r95, %r94, 127;
	setp.eq.s32 	%p7, %r95, 0;
	@%p7 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_7;
$L__BB0_17:                             // %pass88
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shr.u32 	%r28, %r4, 5;
	shl.b32 	%r96, %r2, 2;
	shr.u32 	%r29, %r1, 3;
	or.b32  	%r97, %r96, %r29;
	cvt.u16.u32 	%rs1, %r97;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r98, %rs6;
	and.b32  	%r30, %r98, 255;
	bfe.s32 	%r99, %r4, 4, 1;
	and.b32  	%r100, %r99, 96;
	mad.lo.s32 	%r101, %r28, 192, %r100;
	add.s32 	%r102, %r101, %r30;
	mul.wide.u32 	%rd19, %r102, 4;
	add.s64 	%rd20, %rd3, %rd19;
	ld.global.u32 	%r32, [%rd20];
	add.s32 	%r33, %r32, -4;
	setp.gt.u32 	%p8, %r33, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.18:                              // %pass182
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	and.b32  	%r31, %r4, 16;
	setp.eq.s32 	%p9, %r31, 0;
	add.s32 	%r361, %r32, -3;
	mul.lo.s32 	%r362, %r28, 49152;
	shr.u32 	%r363, %r2, 2;
	cvt.u16.u32 	%rs7, %r363;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 10;
	mul.lo.s16 	%rs10, %rs9, 6;
	sub.s16 	%rs11, %rs7, %rs10;
	shl.b16 	%rs12, %rs11, 4;
	shr.u32 	%r34, %r1, 2;
	cvt.u16.u32 	%rs13, %r34;
	and.b16  	%rs14, %rs13, 6;
	or.b16  	%rs15, %rs14, %rs12;
	and.b16  	%rs16, %rs15, 246;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 246;
	mul.wide.u16 	%r364, %rs21, 256;
	selp.b32 	%r365, 0, 24576, %p9;
	shl.b32 	%r366, %r1, 1;
	shl.b32 	%r367, %r2, 6;
	or.b32  	%r368, %r366, %r367;
	shl.b32 	%r369, %r1, 4;
	and.b32  	%r370, %r369, 16;
	and.b32  	%r371, %r368, 204;
	or.b32  	%r372, %r370, %r371;
	add.s32 	%r373, %r365, %r362;
	or.b32  	%r374, %r373, %r372;
	or.b32  	%r375, %r374, 1;
	add.s32 	%r376, %r375, %r364;
	mul.wide.u32 	%rd23, %r376, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.v4.u32 	{%r105, %r106, %r121, %r122}, [%rd24+-4];
	or.b16  	%rs22, %rs15, 8;
	and.b16  	%rs23, %rs22, 254;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 14;
	mul.lo.s16 	%rs26, %rs25, 96;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 254;
	mul.wide.u16 	%r377, %rs28, 256;
	add.s32 	%r378, %r375, %r377;
	mul.wide.u32 	%rd25, %r378, 4;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r113, %r114, %r129, %r130}, [%rd26+-4];
	and.b32  	%r379, %r366, 12;
	and.b32  	%r380, %r367, 192;
	or.b32  	%r381, %r380, %r379;
	or.b32  	%r382, %r381, %r370;
	or.b32  	%r383, %r382, %r362;
	add.s32 	%r384, %r365, %r383;
	or.b32  	%r385, %r384, 33;
	add.s32 	%r386, %r385, %r364;
	mul.wide.u32 	%rd27, %r386, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r137, %r138, %r153, %r154}, [%rd28+-4];
	add.s32 	%r387, %r385, %r377;
	mul.wide.u32 	%rd29, %r387, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r145, %r146, %r161, %r162}, [%rd30+-4];
	or.b16  	%rs29, %rs12, %rs13;
	or.b16  	%rs30, %rs29, 1;
	and.b16  	%rs31, %rs30, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 14;
	mul.lo.s16 	%rs34, %rs33, 96;
	sub.s16 	%rs35, %rs30, %rs34;
	and.b16  	%rs36, %rs35, 255;
	mul.wide.u16 	%r388, %rs36, 256;
	add.s32 	%r389, %r375, %r388;
	mul.wide.u32 	%rd31, %r389, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r169, %r170, %r185, %r186}, [%rd32+-4];
	or.b16  	%rs37, %rs29, 9;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 14;
	mul.lo.s16 	%rs41, %rs40, 96;
	sub.s16 	%rs42, %rs37, %rs41;
	and.b16  	%rs43, %rs42, 255;
	mul.wide.u16 	%r390, %rs43, 256;
	add.s32 	%r391, %r375, %r390;
	mul.wide.u32 	%rd33, %r391, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r177, %r178, %r193, %r194}, [%rd34+-4];
	add.s32 	%r392, %r385, %r388;
	mul.wide.u32 	%rd35, %r392, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r201, %r202, %r217, %r218}, [%rd36+-4];
	add.s32 	%r393, %r385, %r390;
	mul.wide.u32 	%rd37, %r393, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r209, %r210, %r225, %r226}, [%rd38+-4];
	mov.u32 	%r227, 21520;
	// begin inline asm
	prmt.b32 %r233, %r105, %r106, %r227;
	// end inline asm
	mov.u32 	%r231, 30258;
	// begin inline asm
	prmt.b32 %r234, %r105, %r106, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r113, %r114, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r113, %r114, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r121, %r122, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r121, %r122, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r129, %r130, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r129, %r130, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r137, %r138, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r137, %r138, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r145, %r146, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r145, %r146, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r153, %r154, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r153, %r154, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r161, %r162, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r161, %r162, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r169, %r170, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r169, %r170, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r177, %r178, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r177, %r178, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r185, %r186, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r185, %r186, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r193, %r194, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r193, %r194, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r201, %r202, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r201, %r202, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r209, %r210, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r209, %r210, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r217, %r218, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r217, %r218, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r353, %r225, %r226, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r354, %r225, %r226, %r231;
	// end inline asm
	mov.u32 	%r355, 25152;
	// begin inline asm
	prmt.b32 %r232, %r233, %r234, %r355;
	// end inline asm
	mov.u32 	%r359, 29521;
	// begin inline asm
	prmt.b32 %r236, %r233, %r234, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r241, %r242, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r241, %r242, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r249, %r250, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r249, %r250, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r257, %r258, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r257, %r258, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r265, %r266, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r265, %r266, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r273, %r274, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r273, %r274, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r281, %r282, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r281, %r282, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r289, %r290, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r289, %r290, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r297, %r298, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r297, %r298, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r305, %r306, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r305, %r306, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r313, %r314, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r313, %r314, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r321, %r322, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r321, %r322, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r329, %r330, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r329, %r330, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r337, %r338, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r337, %r338, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r345, %r346, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r345, %r346, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r353, %r354, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r356, %r353, %r354, %r359;
	// end inline asm
	and.b32  	%r35, %r1, 2;
	setp.eq.s32 	%p10, %r35, 0;
	selp.b32 	%r394, %r264, %r232, %p10;
	shfl.sync.bfly.b32	%r395, %r394, 2, 31, -1;
	selp.b32 	%r396, %r232, %r395, %p10;
	selp.b32 	%r397, %r395, %r264, %p10;
	selp.b32 	%r398, %r272, %r240, %p10;
	shfl.sync.bfly.b32	%r399, %r398, 2, 31, -1;
	selp.b32 	%r400, %r240, %r399, %p10;
	selp.b32 	%r401, %r399, %r272, %p10;
	selp.b32 	%r402, %r268, %r236, %p10;
	shfl.sync.bfly.b32	%r403, %r402, 2, 31, -1;
	selp.b32 	%r404, %r236, %r403, %p10;
	selp.b32 	%r405, %r403, %r268, %p10;
	selp.b32 	%r406, %r276, %r244, %p10;
	shfl.sync.bfly.b32	%r407, %r406, 2, 31, -1;
	selp.b32 	%r408, %r244, %r407, %p10;
	selp.b32 	%r409, %r407, %r276, %p10;
	selp.b32 	%r410, %r280, %r248, %p10;
	shfl.sync.bfly.b32	%r411, %r410, 2, 31, -1;
	selp.b32 	%r412, %r248, %r411, %p10;
	selp.b32 	%r413, %r411, %r280, %p10;
	selp.b32 	%r414, %r288, %r256, %p10;
	shfl.sync.bfly.b32	%r415, %r414, 2, 31, -1;
	selp.b32 	%r416, %r256, %r415, %p10;
	selp.b32 	%r417, %r415, %r288, %p10;
	selp.b32 	%r418, %r284, %r252, %p10;
	shfl.sync.bfly.b32	%r419, %r418, 2, 31, -1;
	selp.b32 	%r420, %r252, %r419, %p10;
	selp.b32 	%r421, %r419, %r284, %p10;
	selp.b32 	%r422, %r292, %r260, %p10;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r260, %r423, %p10;
	selp.b32 	%r425, %r423, %r292, %p10;
	selp.b32 	%r426, %r328, %r296, %p10;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r296, %r427, %p10;
	selp.b32 	%r429, %r427, %r328, %p10;
	selp.b32 	%r430, %r336, %r304, %p10;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r304, %r431, %p10;
	selp.b32 	%r433, %r431, %r336, %p10;
	selp.b32 	%r434, %r332, %r300, %p10;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r300, %r435, %p10;
	selp.b32 	%r437, %r435, %r332, %p10;
	selp.b32 	%r438, %r340, %r308, %p10;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r308, %r439, %p10;
	selp.b32 	%r441, %r439, %r340, %p10;
	selp.b32 	%r442, %r344, %r312, %p10;
	shfl.sync.bfly.b32	%r443, %r442, 2, 31, -1;
	selp.b32 	%r444, %r312, %r443, %p10;
	selp.b32 	%r445, %r443, %r344, %p10;
	selp.b32 	%r446, %r352, %r320, %p10;
	shfl.sync.bfly.b32	%r447, %r446, 2, 31, -1;
	selp.b32 	%r448, %r320, %r447, %p10;
	selp.b32 	%r449, %r447, %r352, %p10;
	selp.b32 	%r450, %r348, %r316, %p10;
	shfl.sync.bfly.b32	%r451, %r450, 2, 31, -1;
	selp.b32 	%r452, %r316, %r451, %p10;
	selp.b32 	%r453, %r451, %r348, %p10;
	selp.b32 	%r454, %r356, %r324, %p10;
	shfl.sync.bfly.b32	%r455, %r454, 2, 31, -1;
	selp.b32 	%r456, %r324, %r455, %p10;
	selp.b32 	%r457, %r455, %r356, %p10;
	and.b32  	%r36, %r1, 4;
	setp.eq.s32 	%p11, %r36, 0;
	selp.b32 	%r458, %r428, %r396, %p11;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r37, %r396, %r459, %p11;
	selp.b32 	%r38, %r459, %r428, %p11;
	selp.b32 	%r460, %r432, %r400, %p11;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r39, %r400, %r461, %p11;
	selp.b32 	%r40, %r461, %r432, %p11;
	selp.b32 	%r462, %r436, %r404, %p11;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r41, %r404, %r463, %p11;
	selp.b32 	%r42, %r463, %r436, %p11;
	selp.b32 	%r464, %r440, %r408, %p11;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r43, %r408, %r465, %p11;
	selp.b32 	%r44, %r465, %r440, %p11;
	selp.b32 	%r466, %r444, %r412, %p11;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r45, %r412, %r467, %p11;
	selp.b32 	%r46, %r467, %r444, %p11;
	selp.b32 	%r468, %r448, %r416, %p11;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r47, %r416, %r469, %p11;
	selp.b32 	%r48, %r469, %r448, %p11;
	selp.b32 	%r470, %r452, %r420, %p11;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r49, %r420, %r471, %p11;
	selp.b32 	%r50, %r471, %r452, %p11;
	selp.b32 	%r472, %r456, %r424, %p11;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r51, %r424, %r473, %p11;
	selp.b32 	%r52, %r473, %r456, %p11;
	selp.b32 	%r474, %r429, %r397, %p11;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r53, %r397, %r475, %p11;
	selp.b32 	%r54, %r475, %r429, %p11;
	selp.b32 	%r476, %r433, %r401, %p11;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r55, %r401, %r477, %p11;
	selp.b32 	%r56, %r477, %r433, %p11;
	selp.b32 	%r478, %r437, %r405, %p11;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r57, %r405, %r479, %p11;
	selp.b32 	%r58, %r479, %r437, %p11;
	selp.b32 	%r480, %r441, %r409, %p11;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r59, %r409, %r481, %p11;
	selp.b32 	%r60, %r481, %r441, %p11;
	selp.b32 	%r482, %r445, %r413, %p11;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r61, %r413, %r483, %p11;
	selp.b32 	%r62, %r483, %r445, %p11;
	selp.b32 	%r484, %r449, %r417, %p11;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r63, %r417, %r485, %p11;
	selp.b32 	%r64, %r485, %r449, %p11;
	selp.b32 	%r486, %r453, %r421, %p11;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r65, %r421, %r487, %p11;
	selp.b32 	%r66, %r487, %r453, %p11;
	selp.b32 	%r488, %r457, %r425, %p11;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r67, %r425, %r489, %p11;
	selp.b32 	%r68, %r489, %r457, %p11;
	shl.b32 	%r490, %r87, 12;
	shl.b32 	%r491, %r4, 3;
	and.b32  	%r69, %r2, 12;
	shl.b32 	%r492, %r4, 13;
	and.b32  	%r70, %r492, 122880;
	shl.b32 	%r493, %r1, 2;
	and.b32  	%r494, %r493, 28;
	and.b32  	%r495, %r3, 96;
	or.b32  	%r71, %r494, %r495;
	and.b32  	%r496, %r491, 3968;
	or.b32  	%r497, %r496, %r71;
	or.b32  	%r72, %r497, %r490;
	shl.b32 	%r498, %r1, 3;
	and.b32  	%r499, %r498, 24;
	or.b32  	%r73, %r499, %r495;
	and.b16  	%rs44, %rs29, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs29, %rs47;
	cvt.u32.u16 	%r500, %rs48;
	and.b32  	%r501, %r500, 255;
	and.b32  	%r74, %r366, 6;
	and.b32  	%r502, %r2, 3;
	mul.lo.s32 	%r503, %r502, 3200;
	or.b32  	%r75, %r503, %r501;
	or.b16  	%rs49, %rs29, 8;
	and.b16  	%rs50, %rs49, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs49, %rs53;
	cvt.u32.u16 	%r504, %rs54;
	and.b32  	%r505, %r504, 255;
	or.b32  	%r76, %r503, %r505;
	and.b32  	%r506, %r1, 7;
	or.b32  	%r77, %r30, 3200;
	or.b32  	%r78, %r30, 6400;
	or.b32  	%r79, %r30, 9600;
	shl.b32 	%r80, %r93, %r33;
	min.u32 	%r81, %r361, 31;
	and.b32  	%r82, %r1, 1;
	shl.b32 	%r508, %r4, 11;
	shl.b32 	%r509, %r30, 20;
	shl.b32 	%r510, %r1, 5;
	and.b32  	%r83, %r510, 64;
	and.b32  	%r511, %r508, 1015808;
	or.b32  	%r84, %r509, %r511;
	and.b32  	%r512, %r498, 32;
	or.b32  	%r513, %r370, %r512;
	or.b32  	%r85, %r513, %r492;
	mul.lo.s32 	%r514, %r506, 100;
	add.s32 	%r515, %r514, %r30;
	mul.wide.u32 	%rd39, %r515, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd41, %rd40, 16512;
	add.s64 	%rd7, %rd41, %rd39;
	cvt.u64.u32 	%rd42, %r514;
	cvt.u64.u32 	%rd43, %r30;
	add.s64 	%rd44, %rd43, %rd42;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd8, %rd41, %rd45;
	add.s32 	%r516, %r514, 800;
	add.s32 	%r517, %r516, %r30;
	mul.wide.u32 	%rd46, %r517, 4;
	add.s64 	%rd9, %rd41, %rd46;
	cvt.u64.u32 	%rd47, %r516;
	add.s64 	%rd48, %rd43, %rd47;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd10, %rd41, %rd49;
	add.s32 	%r518, %r514, 1600;
	add.s32 	%r519, %r518, %r30;
	mul.wide.u32 	%rd50, %r519, 4;
	add.s64 	%rd11, %rd41, %rd50;
	cvt.u64.u32 	%rd51, %r518;
	add.s64 	%rd52, %rd43, %rd51;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd12, %rd41, %rd53;
	mov.u32 	%r1367, 0;
	setp.lt.u32 	%p13, %r2, 16;
	mov.u32 	%r1366, %r70;
$L__BB0_9:                              // %L2486
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r520, %r1367, %r87;
	setp.ge.s32 	%p12, %r520, %r88;
	@%p12 bra 	$L__BB0_16;
// %bb.10:                              // %L2493.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	add.s32 	%r7, %r1367, %r70;
	mov.u32 	%r1368, 0;
	mov.u32 	%r1369, %r1368;
	mov.u32 	%r1370, %r1368;
	mov.u32 	%r1371, %r1368;
	mov.u32 	%r1372, %r1368;
	mov.u32 	%r1373, %r1368;
	mov.u32 	%r1374, %r1368;
$L__BB0_11:                             // %L2493
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_13 Depth 3
	@%p13 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_12;
$L__BB0_19:                             // %pass1142
                                        //   in Loop: Header=BB0_11 Depth=2
	or.b32  	%r522, %r1368, %r69;
	or.b32  	%r523, %r522, %r29;
	add.s32 	%r524, %r7, %r523;
	shr.s32 	%r525, %r524, 31;
	shr.u32 	%r526, %r525, 15;
	add.s32 	%r527, %r524, %r526;
	and.b32  	%r528, %r527, 917504;
	sub.s32 	%r529, %r524, %r528;
	shl.b32 	%r530, %r529, 12;
	add.s32 	%r531, %r72, %r530;
	shr.s32 	%r532, %r531, 31;
	shr.u32 	%r533, %r532, 3;
	add.s32 	%r534, %r531, %r533;
	shr.s32 	%r535, %r534, 29;
	setp.lt.s32 	%p14, %r531, 0;
	and.b32  	%r536, %r534, -536870912;
	setp.ne.s32 	%p15, %r536, %r531;
	and.pred  	%p16, %p14, %p15;
	selp.u32 	%r537, 1, 0, %p16;
	sub.s32 	%r538, %r537, %r535;
	shl.b32 	%r539, %r538, 29;
	add.s32 	%r540, %r539, %r531;
	mul.wide.s32 	%rd54, %r540, 4;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.v4.u32 	{%r541, %r542, %r543, %r544}, [%rd55];
	or.b32  	%r545, %r523, 16;
	add.s32 	%r546, %r7, %r545;
	shr.s32 	%r547, %r546, 31;
	shr.u32 	%r548, %r547, 15;
	add.s32 	%r549, %r546, %r548;
	and.b32  	%r550, %r549, 917504;
	sub.s32 	%r551, %r546, %r550;
	shl.b32 	%r552, %r551, 12;
	add.s32 	%r553, %r72, %r552;
	shr.s32 	%r554, %r553, 31;
	shr.u32 	%r555, %r554, 3;
	add.s32 	%r556, %r553, %r555;
	shr.s32 	%r557, %r556, 29;
	setp.lt.s32 	%p17, %r553, 0;
	and.b32  	%r558, %r556, -536870912;
	setp.ne.s32 	%p18, %r558, %r553;
	and.pred  	%p19, %p17, %p18;
	selp.u32 	%r559, 1, 0, %p19;
	sub.s32 	%r560, %r559, %r557;
	shl.b32 	%r561, %r560, 29;
	add.s32 	%r562, %r561, %r553;
	mul.wide.s32 	%rd56, %r562, 4;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.v4.u32 	{%r563, %r564, %r565, %r566}, [%rd57];
	shr.u32 	%r567, %r525, 27;
	add.s32 	%r568, %r524, %r567;
	and.b32  	%r569, %r568, -32;
	sub.s32 	%r570, %r524, %r569;
	mad.lo.s32 	%r571, %r570, 129, %r71;
	mul.wide.s32 	%rd58, %r571, 4;
	add.s64 	%rd60, %rd40, %rd58;
	st.shared.u32 	[%rd60], %r541;
	st.shared.u32 	[%rd60+4], %r542;
	st.shared.u32 	[%rd60+8], %r543;
	st.shared.u32 	[%rd60+12], %r544;
	shr.u32 	%r572, %r547, 27;
	add.s32 	%r573, %r546, %r572;
	and.b32  	%r574, %r573, -32;
	sub.s32 	%r575, %r546, %r574;
	mad.lo.s32 	%r576, %r575, 129, %r71;
	mul.wide.s32 	%rd61, %r576, 4;
	add.s64 	%rd62, %rd40, %rd61;
	st.shared.u32 	[%rd62], %r563;
	st.shared.u32 	[%rd62+4], %r564;
	st.shared.u32 	[%rd62+8], %r565;
	st.shared.u32 	[%rd62+12], %r566;
$L__BB0_12:                             // %L4432
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	or.b32  	%r578, %r1368, %r34;
	add.s32 	%r15, %r1366, %r578;
	mov.u32 	%r591, 0;
	mov.u32 	%r1375, %r591;
$L__BB0_13:                             // %L4434
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r1103, %r15, %r1375;
	shr.s32 	%r1104, %r1103, 31;
	shr.u32 	%r1105, %r1104, 27;
	add.s32 	%r1106, %r1103, %r1105;
	and.b32  	%r1107, %r1106, -32;
	sub.s32 	%r1108, %r1103, %r1107;
	mad.lo.s32 	%r1109, %r1108, 129, %r73;
	mul.wide.s32 	%rd63, %r1109, 4;
	add.s64 	%rd65, %rd40, %rd63;
	ld.shared.u32 	%r580, [%rd65];
	mov.u32 	%r581, 134744072;
	mov.u32 	%r582, 252645135;
	// begin inline asm
	lop3.b32 %r579, %r580, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1110, %r579, 2021161080;
	xor.b32  	%r590, %r1110, -2139062144;
	shr.u32 	%r584, %r580, 4;
	// begin inline asm
	lop3.b32 %r583, %r584, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1111, %r583, 2021161080;
	xor.b32  	%r596, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r587, %r588}, {%r37}, {%r590}, {%r591, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r593, %r594}, {%r41}, {%r596}, {%r591, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r599, %r600}, {%r37}, {%r596}, {%r591, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r605, %r606}, {%r41}, {%r590}, {%r599, %r600};
	// end inline asm
	ld.shared.u32 	%r612, [%rd65+4];
	// begin inline asm
	lop3.b32 %r611, %r612, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1112, %r611, 2021161080;
	xor.b32  	%r622, %r1112, -2139062144;
	shr.u32 	%r616, %r612, 4;
	// begin inline asm
	lop3.b32 %r615, %r616, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1113, %r615, 2021161080;
	xor.b32  	%r628, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r619, %r620}, {%r45}, {%r622}, {%r587, %r588};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r625, %r626}, {%r49}, {%r628}, {%r593, %r594};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r631, %r632}, {%r45}, {%r628}, {%r605, %r606};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r637, %r638}, {%r49}, {%r622}, {%r631, %r632};
	// end inline asm
	ld.shared.u32 	%r644, [%rd65+8];
	// begin inline asm
	lop3.b32 %r643, %r644, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1114, %r643, 2021161080;
	xor.b32  	%r654, %r1114, -2139062144;
	shr.u32 	%r648, %r644, 4;
	// begin inline asm
	lop3.b32 %r647, %r648, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1115, %r647, 2021161080;
	xor.b32  	%r660, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r651, %r652}, {%r53}, {%r654}, {%r619, %r620};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r657, %r658}, {%r57}, {%r660}, {%r625, %r626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r663, %r664}, {%r53}, {%r660}, {%r637, %r638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r669, %r670}, {%r57}, {%r654}, {%r663, %r664};
	// end inline asm
	ld.shared.u32 	%r676, [%rd65+12];
	// begin inline asm
	lop3.b32 %r675, %r676, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1116, %r675, 2021161080;
	xor.b32  	%r686, %r1116, -2139062144;
	shr.u32 	%r680, %r676, 4;
	// begin inline asm
	lop3.b32 %r679, %r680, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1117, %r679, 2021161080;
	xor.b32  	%r692, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r683, %r684}, {%r61}, {%r686}, {%r651, %r652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r689, %r690}, {%r65}, {%r692}, {%r657, %r658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r695, %r696}, {%r61}, {%r692}, {%r669, %r670};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r701, %r702}, {%r65}, {%r686}, {%r695, %r696};
	// end inline asm
	ld.shared.u32 	%r708, [%rd65+16];
	// begin inline asm
	lop3.b32 %r707, %r708, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1118, %r707, 2021161080;
	xor.b32  	%r718, %r1118, -2139062144;
	shr.u32 	%r712, %r708, 4;
	// begin inline asm
	lop3.b32 %r711, %r712, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1119, %r711, 2021161080;
	xor.b32  	%r724, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r715, %r716}, {%r38}, {%r718}, {%r683, %r684};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r721, %r722}, {%r42}, {%r724}, {%r689, %r690};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r727, %r728}, {%r38}, {%r724}, {%r701, %r702};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r733, %r734}, {%r42}, {%r718}, {%r727, %r728};
	// end inline asm
	ld.shared.u32 	%r740, [%rd65+20];
	// begin inline asm
	lop3.b32 %r739, %r740, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1120, %r739, 2021161080;
	xor.b32  	%r750, %r1120, -2139062144;
	shr.u32 	%r744, %r740, 4;
	// begin inline asm
	lop3.b32 %r743, %r744, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1121, %r743, 2021161080;
	xor.b32  	%r756, %r1121, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r747, %r748}, {%r46}, {%r750}, {%r715, %r716};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r753, %r754}, {%r50}, {%r756}, {%r721, %r722};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r759, %r760}, {%r46}, {%r756}, {%r733, %r734};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r765, %r766}, {%r50}, {%r750}, {%r759, %r760};
	// end inline asm
	ld.shared.u32 	%r772, [%rd65+24];
	// begin inline asm
	lop3.b32 %r771, %r772, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1122, %r771, 2021161080;
	xor.b32  	%r782, %r1122, -2139062144;
	shr.u32 	%r776, %r772, 4;
	// begin inline asm
	lop3.b32 %r775, %r776, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1123, %r775, 2021161080;
	xor.b32  	%r788, %r1123, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r779, %r780}, {%r54}, {%r782}, {%r747, %r748};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r785, %r786}, {%r58}, {%r788}, {%r753, %r754};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r791, %r792}, {%r54}, {%r788}, {%r765, %r766};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r797, %r798}, {%r58}, {%r782}, {%r791, %r792};
	// end inline asm
	ld.shared.u32 	%r804, [%rd65+28];
	// begin inline asm
	lop3.b32 %r803, %r804, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1124, %r803, 2021161080;
	xor.b32  	%r814, %r1124, -2139062144;
	shr.u32 	%r808, %r804, 4;
	// begin inline asm
	lop3.b32 %r807, %r808, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1125, %r807, 2021161080;
	xor.b32  	%r820, %r1125, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r811, %r812}, {%r62}, {%r814}, {%r779, %r780};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r817, %r818}, {%r66}, {%r820}, {%r785, %r786};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r823, %r824}, {%r62}, {%r820}, {%r797, %r798};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r829, %r830}, {%r66}, {%r814}, {%r823, %r824};
	// end inline asm
	sub.s32 	%r1126, %r811, %r817;
	add.s32 	%r1127, %r1126, 4;
	shr.s32 	%r837, %r1127, 3;
	add.s32 	%r1128, %r829, 4;
	shr.s32 	%r836, %r1128, 3;
	sub.s32 	%r1129, %r812, %r818;
	add.s32 	%r1130, %r1129, 4;
	shr.s32 	%r840, %r1130, 3;
	add.s32 	%r1131, %r830, 4;
	shr.s32 	%r839, %r1131, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r835, %r836, %r837;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r838, %r839, %r840;
	// end inline asm
	or.b32  	%r1132, %r74, %r1375;
	mul.lo.s32 	%r1133, %r1132, 100;
	add.s32 	%r1134, %r75, %r1133;
	mul.wide.u32 	%rd66, %r1134, 4;
	add.s64 	%rd68, %rd41, %rd66;
	st.shared.u32 	[%rd68], %r835;
	add.s32 	%r1135, %r1133, 100;
	add.s32 	%r1136, %r75, %r1135;
	mul.wide.u32 	%rd69, %r1136, 4;
	add.s64 	%rd70, %rd41, %rd69;
	st.shared.u32 	[%rd70], %r838;
	ld.shared.u32 	%r842, [%rd65];
	// begin inline asm
	lop3.b32 %r841, %r842, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1137, %r841, 2021161080;
	xor.b32  	%r852, %r1137, -2139062144;
	shr.u32 	%r846, %r842, 4;
	// begin inline asm
	lop3.b32 %r845, %r846, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1138, %r845, 2021161080;
	xor.b32  	%r858, %r1138, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r849, %r850}, {%r39}, {%r852}, {%r591, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r855, %r856}, {%r43}, {%r858}, {%r591, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r861, %r862}, {%r39}, {%r858}, {%r591, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r867, %r868}, {%r43}, {%r852}, {%r861, %r862};
	// end inline asm
	ld.shared.u32 	%r874, [%rd65+4];
	// begin inline asm
	lop3.b32 %r873, %r874, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1139, %r873, 2021161080;
	xor.b32  	%r884, %r1139, -2139062144;
	shr.u32 	%r878, %r874, 4;
	// begin inline asm
	lop3.b32 %r877, %r878, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1140, %r877, 2021161080;
	xor.b32  	%r890, %r1140, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r881, %r882}, {%r47}, {%r884}, {%r849, %r850};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r887, %r888}, {%r51}, {%r890}, {%r855, %r856};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r893, %r894}, {%r47}, {%r890}, {%r867, %r868};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r899, %r900}, {%r51}, {%r884}, {%r893, %r894};
	// end inline asm
	ld.shared.u32 	%r906, [%rd65+8];
	// begin inline asm
	lop3.b32 %r905, %r906, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1141, %r905, 2021161080;
	xor.b32  	%r916, %r1141, -2139062144;
	shr.u32 	%r910, %r906, 4;
	// begin inline asm
	lop3.b32 %r909, %r910, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1142, %r909, 2021161080;
	xor.b32  	%r922, %r1142, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r913, %r914}, {%r55}, {%r916}, {%r881, %r882};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r919, %r920}, {%r59}, {%r922}, {%r887, %r888};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r925, %r926}, {%r55}, {%r922}, {%r899, %r900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r931, %r932}, {%r59}, {%r916}, {%r925, %r926};
	// end inline asm
	ld.shared.u32 	%r938, [%rd65+12];
	// begin inline asm
	lop3.b32 %r937, %r938, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1143, %r937, 2021161080;
	xor.b32  	%r948, %r1143, -2139062144;
	shr.u32 	%r942, %r938, 4;
	// begin inline asm
	lop3.b32 %r941, %r942, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1144, %r941, 2021161080;
	xor.b32  	%r954, %r1144, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r945, %r946}, {%r63}, {%r948}, {%r913, %r914};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r951, %r952}, {%r67}, {%r954}, {%r919, %r920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r957, %r958}, {%r63}, {%r954}, {%r931, %r932};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r963, %r964}, {%r67}, {%r948}, {%r957, %r958};
	// end inline asm
	ld.shared.u32 	%r970, [%rd65+16];
	// begin inline asm
	lop3.b32 %r969, %r970, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1145, %r969, 2021161080;
	xor.b32  	%r980, %r1145, -2139062144;
	shr.u32 	%r974, %r970, 4;
	// begin inline asm
	lop3.b32 %r973, %r974, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1146, %r973, 2021161080;
	xor.b32  	%r986, %r1146, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r977, %r978}, {%r40}, {%r980}, {%r945, %r946};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r983, %r984}, {%r44}, {%r986}, {%r951, %r952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r989, %r990}, {%r40}, {%r986}, {%r963, %r964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r995, %r996}, {%r44}, {%r980}, {%r989, %r990};
	// end inline asm
	ld.shared.u32 	%r1002, [%rd65+20];
	// begin inline asm
	lop3.b32 %r1001, %r1002, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1147, %r1001, 2021161080;
	xor.b32  	%r1012, %r1147, -2139062144;
	shr.u32 	%r1006, %r1002, 4;
	// begin inline asm
	lop3.b32 %r1005, %r1006, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1148, %r1005, 2021161080;
	xor.b32  	%r1018, %r1148, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1009, %r1010}, {%r48}, {%r1012}, {%r977, %r978};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1015, %r1016}, {%r52}, {%r1018}, {%r983, %r984};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1021, %r1022}, {%r48}, {%r1018}, {%r995, %r996};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1027, %r1028}, {%r52}, {%r1012}, {%r1021, %r1022};
	// end inline asm
	ld.shared.u32 	%r1034, [%rd65+24];
	// begin inline asm
	lop3.b32 %r1033, %r1034, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1149, %r1033, 2021161080;
	xor.b32  	%r1044, %r1149, -2139062144;
	shr.u32 	%r1038, %r1034, 4;
	// begin inline asm
	lop3.b32 %r1037, %r1038, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1150, %r1037, 2021161080;
	xor.b32  	%r1050, %r1150, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1041, %r1042}, {%r56}, {%r1044}, {%r1009, %r1010};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1047, %r1048}, {%r60}, {%r1050}, {%r1015, %r1016};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1053, %r1054}, {%r56}, {%r1050}, {%r1027, %r1028};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1059, %r1060}, {%r60}, {%r1044}, {%r1053, %r1054};
	// end inline asm
	ld.shared.u32 	%r1066, [%rd65+28];
	// begin inline asm
	lop3.b32 %r1065, %r1066, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1151, %r1065, 2021161080;
	xor.b32  	%r1076, %r1151, -2139062144;
	shr.u32 	%r1070, %r1066, 4;
	// begin inline asm
	lop3.b32 %r1069, %r1070, %r581, %r582, 40;
	// end inline asm
	add.s32 	%r1152, %r1069, 2021161080;
	xor.b32  	%r1082, %r1152, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1073, %r1074}, {%r64}, {%r1076}, {%r1041, %r1042};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1079, %r1080}, {%r68}, {%r1082}, {%r1047, %r1048};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1085, %r1086}, {%r64}, {%r1082}, {%r1059, %r1060};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1091, %r1092}, {%r68}, {%r1076}, {%r1085, %r1086};
	// end inline asm
	sub.s32 	%r1153, %r1073, %r1079;
	add.s32 	%r1154, %r1153, 4;
	shr.s32 	%r1099, %r1154, 3;
	add.s32 	%r1155, %r1091, 4;
	shr.s32 	%r1098, %r1155, 3;
	sub.s32 	%r1156, %r1074, %r1080;
	add.s32 	%r1157, %r1156, 4;
	shr.s32 	%r1102, %r1157, 3;
	add.s32 	%r1158, %r1092, 4;
	shr.s32 	%r1101, %r1158, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1097, %r1098, %r1099;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1100, %r1101, %r1102;
	// end inline asm
	add.s32 	%r1159, %r76, %r1133;
	mul.wide.u32 	%rd71, %r1159, 4;
	add.s64 	%rd72, %rd41, %rd71;
	st.shared.u32 	[%rd72], %r1097;
	add.s32 	%r1160, %r76, %r1135;
	mul.wide.u32 	%rd73, %r1160, 4;
	add.s64 	%rd74, %rd41, %rd73;
	st.shared.u32 	[%rd74], %r1100;
	add.s32 	%r1375, %r1375, 8;
	setp.ne.s32 	%p20, %r1375, 32;
	@%p20 bra 	$L__BB0_13;
// %bb.14:                              // %L8605
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1179, [%rd7];
	ld.shared.u32 	%r1180, [%rd8+12800];
	ld.shared.u32 	%r1181, [%rd8+25600];
	ld.shared.u32 	%r1182, [%rd8+38400];
	ld.shared.u32 	%r1183, [%rd9];
	ld.shared.u32 	%r1184, [%rd10+12800];
	ld.shared.u32 	%r1185, [%rd10+25600];
	ld.shared.u32 	%r1186, [%rd10+38400];
	ld.shared.u32 	%r1187, [%rd11];
	ld.shared.u32 	%r1188, [%rd12+12800];
	ld.shared.u32 	%r1189, [%rd12+25600];
	ld.shared.u32 	%r1190, [%rd12+38400];
	or.b32  	%r1191, %r1, %r1368;
	or.b32  	%r1192, %r1191, 24;
	add.s32 	%r1193, %r7, %r1192;
	shr.s32 	%r1194, %r1193, 31;
	shr.u32 	%r1195, %r1194, 27;
	add.s32 	%r1196, %r1193, %r1195;
	and.b32  	%r1197, %r1196, -32;
	sub.s32 	%r1198, %r1193, %r1197;
	mul.lo.s32 	%r1199, %r1198, 100;
	add.s32 	%r1200, %r1199, %r30;
	mul.wide.s32 	%rd75, %r1200, 4;
	add.s64 	%rd78, %rd41, %rd75;
	ld.shared.u32 	%r1201, [%rd78];
	add.s32 	%r1202, %r77, %r1199;
	mul.wide.u32 	%rd79, %r1202, 4;
	add.s64 	%rd80, %rd41, %rd79;
	ld.shared.u32 	%r1203, [%rd80];
	add.s32 	%r1204, %r78, %r1199;
	mul.wide.u32 	%rd81, %r1204, 4;
	add.s64 	%rd82, %rd41, %rd81;
	ld.shared.u32 	%r1205, [%rd82];
	add.s32 	%r1206, %r79, %r1199;
	mul.wide.u32 	%rd83, %r1206, 4;
	add.s64 	%rd84, %rd41, %rd83;
	ld.shared.u32 	%r1207, [%rd84];
	cvt.s32.s16 	%r1208, %r1179;
	shr.s32 	%r1209, %r1179, 16;
	cvt.s32.s16 	%r1210, %r1180;
	shr.s32 	%r1211, %r1180, 16;
	cvt.s32.s16 	%r1212, %r1181;
	shr.s32 	%r1213, %r1181, 16;
	cvt.s32.s16 	%r1214, %r1182;
	shr.s32 	%r1215, %r1182, 16;
	cvt.s32.s16 	%r1216, %r1183;
	shr.s32 	%r1217, %r1183, 16;
	cvt.s32.s16 	%r1218, %r1184;
	shr.s32 	%r1219, %r1184, 16;
	cvt.s32.s16 	%r1220, %r1185;
	shr.s32 	%r1221, %r1185, 16;
	cvt.s32.s16 	%r1222, %r1186;
	shr.s32 	%r1223, %r1186, 16;
	cvt.s32.s16 	%r1224, %r1187;
	shr.s32 	%r1225, %r1187, 16;
	cvt.s32.s16 	%r1226, %r1188;
	shr.s32 	%r1227, %r1188, 16;
	cvt.s32.s16 	%r1228, %r1189;
	shr.s32 	%r1229, %r1189, 16;
	cvt.s32.s16 	%r1230, %r1190;
	shr.s32 	%r1231, %r1190, 16;
	cvt.s32.s16 	%r1232, %r1201;
	shr.s32 	%r1233, %r1201, 16;
	cvt.s32.s16 	%r1234, %r1203;
	shr.s32 	%r1235, %r1203, 16;
	cvt.s32.s16 	%r1236, %r1205;
	shr.s32 	%r1237, %r1205, 16;
	cvt.s32.s16 	%r1238, %r1207;
	shr.s32 	%r1239, %r1207, 16;
	add.s32 	%r1240, %r1208, %r80;
	add.s32 	%r1241, %r1240, %r1210;
	add.s32 	%r1242, %r1241, %r1212;
	add.s32 	%r1243, %r1242, %r1214;
	shr.s32 	%r1244, %r1243, %r81;
	add.s32 	%r1245, %r1209, %r80;
	add.s32 	%r1246, %r1245, %r1211;
	add.s32 	%r1247, %r1246, %r1213;
	add.s32 	%r1248, %r1247, %r1215;
	shr.s32 	%r1249, %r1248, %r81;
	add.s32 	%r1250, %r1216, %r80;
	add.s32 	%r1251, %r1250, %r1218;
	add.s32 	%r1252, %r1251, %r1220;
	add.s32 	%r1253, %r1252, %r1222;
	shr.s32 	%r1254, %r1253, %r81;
	add.s32 	%r1255, %r1217, %r80;
	add.s32 	%r1256, %r1255, %r1219;
	add.s32 	%r1257, %r1256, %r1221;
	add.s32 	%r1258, %r1257, %r1223;
	shr.s32 	%r1259, %r1258, %r81;
	add.s32 	%r1260, %r1224, %r80;
	add.s32 	%r1261, %r1260, %r1226;
	add.s32 	%r1262, %r1261, %r1228;
	add.s32 	%r1263, %r1262, %r1230;
	shr.s32 	%r1264, %r1263, %r81;
	add.s32 	%r1265, %r1225, %r80;
	add.s32 	%r1266, %r1265, %r1227;
	add.s32 	%r1267, %r1266, %r1229;
	add.s32 	%r1268, %r1267, %r1231;
	shr.s32 	%r1269, %r1268, %r81;
	add.s32 	%r1270, %r1232, %r80;
	add.s32 	%r1271, %r1270, %r1234;
	add.s32 	%r1272, %r1271, %r1236;
	add.s32 	%r1273, %r1272, %r1238;
	shr.s32 	%r1274, %r1273, %r81;
	add.s32 	%r1275, %r1233, %r80;
	add.s32 	%r1276, %r1275, %r1235;
	add.s32 	%r1277, %r1276, %r1237;
	add.s32 	%r1278, %r1277, %r1239;
	shr.s32 	%r1279, %r1278, %r81;
	max.s32 	%r1280, %r1244, -7;
	min.s32 	%r1166, %r1280, 7;
	max.s32 	%r1281, %r1249, -7;
	min.s32 	%r1173, %r1281, 7;
	max.s32 	%r1282, %r1254, -7;
	min.s32 	%r1165, %r1282, 7;
	max.s32 	%r1283, %r1259, -7;
	min.s32 	%r1172, %r1283, 7;
	max.s32 	%r1284, %r1264, -7;
	min.s32 	%r1163, %r1284, 7;
	max.s32 	%r1285, %r1269, -7;
	min.s32 	%r1170, %r1285, 7;
	max.s32 	%r1286, %r1274, -7;
	min.s32 	%r1162, %r1286, 7;
	max.s32 	%r1287, %r1279, -7;
	min.s32 	%r1169, %r1287, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1161, %r1162, %r1163, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1164, %r1165, %r1166, %r1161;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1168, %r1169, %r1170, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1171, %r1172, %r1173, %r1168;
	// end inline asm
	shl.b32 	%r1178, %r1171, 4;
	// begin inline asm
	lop3.b32 %r1298, %r582, %r1164, %r1178, 202;
	// end inline asm
	setp.eq.s32 	%p21, %r1368, 0;
	selp.b32 	%r1373, %r1298, %r1373, %p21;
	selp.b32 	%r1374, %r1298, %r1374, %p21;
	setp.eq.s32 	%p22, %r1368, 32;
	selp.b32 	%r1369, %r1298, %r1369, %p22;
	selp.b32 	%r1370, %r1298, %r1370, %p22;
	setp.eq.s32 	%p23, %r1368, 64;
	selp.b32 	%r1371, %r1298, %r1371, %p23;
	selp.b32 	%r1372, %r1298, %r1372, %p23;
	add.s32 	%r25, %r1368, 32;
	setp.ne.s32 	%p24, %r1368, 96;
	mov.u32 	%r1368, %r25;
	@%p24 bra 	$L__BB0_11;
// %bb.15:                              // %L11341
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p25, %r82, 0;
	// begin inline asm
	prmt.b32 %r1288, %r1373, %r1369, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1374, %r1370, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1296, %r1371, %r1298, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1300, %r1372, %r1298, %r359;
	// end inline asm
	selp.b32 	%r1336, %r1292, %r1288, %p25;
	shfl.sync.bfly.b32	%r1337, %r1336, 1, 31, -1;
	selp.b32 	%r1305, %r1288, %r1337, %p25;
	selp.b32 	%r1306, %r1337, %r1292, %p25;
	selp.b32 	%r1338, %r1300, %r1296, %p25;
	shfl.sync.bfly.b32	%r1339, %r1338, 1, 31, -1;
	selp.b32 	%r1313, %r1296, %r1339, %p25;
	selp.b32 	%r1314, %r1339, %r1300, %p25;
	// begin inline asm
	prmt.b32 %r1304, %r1305, %r1306, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r1305, %r1306, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1312, %r1313, %r1314, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1316, %r1313, %r1314, %r359;
	// end inline asm
	selp.b32 	%r1340, %r1312, %r1304, %p10;
	shfl.sync.bfly.b32	%r1341, %r1340, 2, 31, -1;
	selp.b32 	%r1321, %r1304, %r1341, %p10;
	selp.b32 	%r1322, %r1341, %r1312, %p10;
	selp.b32 	%r1342, %r1316, %r1308, %p10;
	shfl.sync.bfly.b32	%r1343, %r1342, 2, 31, -1;
	selp.b32 	%r1329, %r1308, %r1343, %p10;
	selp.b32 	%r1330, %r1343, %r1316, %p10;
	// begin inline asm
	prmt.b32 %r1320, %r1321, %r1322, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1324, %r1321, %r1322, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1328, %r1329, %r1330, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1332, %r1329, %r1330, %r231;
	// end inline asm
	selp.b32 	%r1344, %r1328, %r1320, %p11;
	shfl.sync.bfly.b32	%r1345, %r1344, 4, 31, -1;
	selp.b32 	%r1346, %r1320, %r1345, %p11;
	selp.b32 	%r1347, %r1345, %r1328, %p11;
	selp.b32 	%r1348, %r1332, %r1324, %p11;
	shfl.sync.bfly.b32	%r1349, %r1348, 4, 31, -1;
	selp.b32 	%r1350, %r1324, %r1349, %p11;
	selp.b32 	%r1351, %r1349, %r1332, %p11;
	selp.b32 	%r1352, %r1350, %r1346, %p25;
	shfl.sync.bfly.b32	%r1353, %r1352, 1, 31, -1;
	selp.b32 	%r1354, %r1346, %r1353, %p25;
	selp.b32 	%r1355, %r1353, %r1350, %p25;
	selp.b32 	%r1356, %r1351, %r1347, %p25;
	shfl.sync.bfly.b32	%r1357, %r1356, 1, 31, -1;
	selp.b32 	%r1358, %r1347, %r1357, %p25;
	selp.b32 	%r1359, %r1357, %r1351, %p25;
	add.s32 	%r1360, %r85, %r1367;
	and.b32  	%r1361, %r1360, 32688;
	or.b32  	%r1362, %r1361, %r83;
	or.b32  	%r1363, %r84, %r1362;
	cvt.u64.u32 	%rd85, %r1363;
	add.s64 	%rd86, %rd4, %rd85;
	st.global.v4.u32 	[%rd86], {%r1354, %r1358, %r1355, %r1359};
	add.s32 	%r26, %r1367, 128;
	add.s32 	%r1366, %r1366, 128;
	setp.ne.s32 	%p28, %r1367, 8064;
	mov.u32 	%r1367, %r26;
	@%p28 bra 	$L__BB0_9;
$L__BB0_16:                             // %L11743
	mov.u32 	%r1364, 0;
	st.global.u32 	[%rd6], %r1364;
	ret;
$L__BB0_7:                              // %L147
	mov.u32 	%r1365, 2;
	st.global.u32 	[%rd6], %r1365;
	mov.u64 	%rd87, exception935;
	cvta.global.u64 	%rd88, %rd87;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd88;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r86;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd14, exception1941;
	cvta.global.u64 	%rd15, %rd14;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r86;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd16, exception1941;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r86;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L366
	mov.u32 	%r103, 2;
	st.global.u32 	[%rd6], %r103;
	mov.u64 	%rd21, exception935;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r86;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
