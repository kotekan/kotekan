// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception935[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<29>;
	.reg .b16 	%rs<55>;
	.reg .b32 	%r<1352>;
	.reg .b64 	%rd<94>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r80, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r83, 16511;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r84, 67711;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r85, %r2, %r3;
	mad.lo.s32 	%r86, %r4, 768, %r85;
	mul.wide.u32 	%rd20, %r86, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r87, 1;
	st.global.u32 	[%rd6], %r87;
	setp.lt.s32 	%p3, %r81, 0;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L128
	ld.param.u32 	%r82, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r82, %r81;
	setp.gt.s32 	%p5, %r82, 262144;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r88, %r82, %r81;
	and.b32  	%r89, %r88, 127;
	setp.eq.s32 	%p7, %r89, 0;
	@%p7 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_7;
$L__BB0_17:                             // %pass88
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	bfe.s32 	%r90, %r4, 4, 1;
	and.b32  	%r91, %r90, 96;
	shr.u32 	%r27, %r3, 3;
	shl.b32 	%r92, %r1, 2;
	or.b32  	%r93, %r27, %r92;
	cvt.u16.u32 	%rs1, %r93;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r94, %rs6;
	and.b32  	%r28, %r94, 255;
	shr.u32 	%r29, %r4, 5;
	mad.lo.s32 	%r95, %r29, 192, %r91;
	add.s32 	%r96, %r95, %r28;
	mul.wide.u32 	%rd21, %r96, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r30, [%rd22];
	add.s32 	%r31, %r30, -4;
	setp.gt.u32 	%p8, %r31, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.18:                              // %pass182
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	and.b32  	%r26, %r4, 16;
	setp.eq.s32 	%p9, %r26, 0;
	add.s32 	%r355, %r30, -3;
	selp.b32 	%r356, 0, 24576, %p9;
	shr.u32 	%r357, %r1, 2;
	cvt.u16.u32 	%rs7, %r357;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 10;
	mul.lo.s16 	%rs10, %rs9, 6;
	sub.s16 	%rs11, %rs7, %rs10;
	shl.b16 	%rs12, %rs11, 4;
	shr.u32 	%r32, %r3, 2;
	cvt.u16.u32 	%rs13, %r32;
	and.b16  	%rs14, %rs13, 6;
	or.b16  	%rs15, %rs14, %rs12;
	and.b16  	%rs16, %rs15, 246;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 246;
	mul.wide.u16 	%r358, %rs21, 256;
	mul.lo.s32 	%r359, %r29, 49152;
	shl.b32 	%r360, %r1, 6;
	shl.b32 	%r361, %r3, 4;
	and.b32  	%r362, %r361, 16;
	shl.b32 	%r363, %r3, 1;
	and.b32  	%r364, %r363, 12;
	and.b32  	%r365, %r360, 192;
	or.b32  	%r366, %r365, %r362;
	or.b32  	%r367, %r366, %r364;
	or.b32  	%r368, %r367, %r359;
	add.s32 	%r369, %r368, %r356;
	add.s32 	%r370, %r369, %r358;
	shl.b32 	%r371, %r370, 2;
	cvt.u64.u32 	%rd25, %r371;
	add.s64 	%rd26, %rd25, %rd1;
	ld.global.v4.u32 	{%r99, %r100, %r115, %r116}, [%rd26];
	or.b16  	%rs22, %rs15, 8;
	and.b16  	%rs23, %rs22, 254;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 14;
	mul.lo.s16 	%rs26, %rs25, 96;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 254;
	mul.wide.u16 	%r372, %rs28, 256;
	add.s32 	%r373, %r369, %r372;
	shl.b32 	%r374, %r373, 2;
	cvt.u64.u32 	%rd27, %r374;
	add.s64 	%rd28, %rd27, %rd1;
	ld.global.v4.u32 	{%r107, %r108, %r123, %r124}, [%rd28];
	or.b32  	%r375, %r369, 32;
	add.s32 	%r376, %r375, %r358;
	shl.b32 	%r377, %r376, 2;
	cvt.u64.u32 	%rd29, %r377;
	add.s64 	%rd30, %rd29, %rd1;
	ld.global.v4.u32 	{%r131, %r132, %r147, %r148}, [%rd30];
	add.s32 	%r378, %r375, %r372;
	shl.b32 	%r379, %r378, 2;
	cvt.u64.u32 	%rd31, %r379;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r139, %r140, %r155, %r156}, [%rd32];
	or.b16  	%rs29, %rs12, %rs13;
	or.b16  	%rs30, %rs29, 1;
	and.b16  	%rs31, %rs30, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 14;
	mul.lo.s16 	%rs34, %rs33, 96;
	sub.s16 	%rs35, %rs30, %rs34;
	and.b16  	%rs36, %rs35, 255;
	mul.wide.u16 	%r380, %rs36, 256;
	add.s32 	%r381, %r369, %r380;
	shl.b32 	%r382, %r381, 2;
	cvt.u64.u32 	%rd33, %r382;
	add.s64 	%rd34, %rd33, %rd1;
	ld.global.v4.u32 	{%r163, %r164, %r179, %r180}, [%rd34];
	or.b16  	%rs37, %rs29, 9;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 14;
	mul.lo.s16 	%rs41, %rs40, 96;
	sub.s16 	%rs42, %rs37, %rs41;
	and.b16  	%rs43, %rs42, 255;
	mul.wide.u16 	%r383, %rs43, 256;
	add.s32 	%r384, %r369, %r383;
	shl.b32 	%r385, %r384, 2;
	cvt.u64.u32 	%rd35, %r385;
	add.s64 	%rd36, %rd35, %rd1;
	ld.global.v4.u32 	{%r171, %r172, %r187, %r188}, [%rd36];
	add.s32 	%r386, %r375, %r380;
	shl.b32 	%r387, %r386, 2;
	cvt.u64.u32 	%rd37, %r387;
	add.s64 	%rd38, %rd37, %rd1;
	ld.global.v4.u32 	{%r195, %r196, %r211, %r212}, [%rd38];
	add.s32 	%r388, %r375, %r383;
	shl.b32 	%r389, %r388, 2;
	cvt.u64.u32 	%rd39, %r389;
	add.s64 	%rd40, %rd39, %rd1;
	ld.global.v4.u32 	{%r203, %r204, %r219, %r220}, [%rd40];
	mov.u32 	%r221, 21520;
	// begin inline asm
	prmt.b32 %r227, %r99, %r100, %r221;
	// end inline asm
	mov.u32 	%r225, 30258;
	// begin inline asm
	prmt.b32 %r228, %r99, %r100, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r107, %r108, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r107, %r108, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r115, %r116, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r115, %r116, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r123, %r124, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r123, %r124, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r131, %r132, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r131, %r132, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r139, %r140, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r139, %r140, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r147, %r148, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r147, %r148, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r155, %r156, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r155, %r156, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r163, %r164, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r163, %r164, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r171, %r172, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r171, %r172, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r179, %r180, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r179, %r180, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r187, %r188, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r187, %r188, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r195, %r196, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r195, %r196, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r203, %r204, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r203, %r204, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r211, %r212, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r211, %r212, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r219, %r220, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r219, %r220, %r225;
	// end inline asm
	mov.u32 	%r349, 25152;
	// begin inline asm
	prmt.b32 %r226, %r227, %r228, %r349;
	// end inline asm
	mov.u32 	%r353, 29521;
	// begin inline asm
	prmt.b32 %r230, %r227, %r228, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r235, %r236, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r235, %r236, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r243, %r244, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r243, %r244, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r251, %r252, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r251, %r252, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r259, %r260, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r259, %r260, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r267, %r268, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r267, %r268, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r275, %r276, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r275, %r276, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r283, %r284, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r283, %r284, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r291, %r292, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r291, %r292, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r299, %r300, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r299, %r300, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r307, %r308, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r307, %r308, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r315, %r316, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r315, %r316, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r323, %r324, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r323, %r324, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r331, %r332, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r331, %r332, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r339, %r340, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r339, %r340, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r347, %r348, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r350, %r347, %r348, %r353;
	// end inline asm
	and.b32  	%r33, %r3, 2;
	setp.eq.s32 	%p10, %r33, 0;
	selp.b32 	%r390, %r258, %r226, %p10;
	shfl.sync.bfly.b32	%r391, %r390, 2, 31, -1;
	selp.b32 	%r392, %r226, %r391, %p10;
	selp.b32 	%r393, %r391, %r258, %p10;
	selp.b32 	%r394, %r266, %r234, %p10;
	shfl.sync.bfly.b32	%r395, %r394, 2, 31, -1;
	selp.b32 	%r396, %r234, %r395, %p10;
	selp.b32 	%r397, %r395, %r266, %p10;
	selp.b32 	%r398, %r262, %r230, %p10;
	shfl.sync.bfly.b32	%r399, %r398, 2, 31, -1;
	selp.b32 	%r400, %r230, %r399, %p10;
	selp.b32 	%r401, %r399, %r262, %p10;
	selp.b32 	%r402, %r270, %r238, %p10;
	shfl.sync.bfly.b32	%r403, %r402, 2, 31, -1;
	selp.b32 	%r404, %r238, %r403, %p10;
	selp.b32 	%r405, %r403, %r270, %p10;
	selp.b32 	%r406, %r274, %r242, %p10;
	shfl.sync.bfly.b32	%r407, %r406, 2, 31, -1;
	selp.b32 	%r408, %r242, %r407, %p10;
	selp.b32 	%r409, %r407, %r274, %p10;
	selp.b32 	%r410, %r282, %r250, %p10;
	shfl.sync.bfly.b32	%r411, %r410, 2, 31, -1;
	selp.b32 	%r412, %r250, %r411, %p10;
	selp.b32 	%r413, %r411, %r282, %p10;
	selp.b32 	%r414, %r278, %r246, %p10;
	shfl.sync.bfly.b32	%r415, %r414, 2, 31, -1;
	selp.b32 	%r416, %r246, %r415, %p10;
	selp.b32 	%r417, %r415, %r278, %p10;
	selp.b32 	%r418, %r286, %r254, %p10;
	shfl.sync.bfly.b32	%r419, %r418, 2, 31, -1;
	selp.b32 	%r420, %r254, %r419, %p10;
	selp.b32 	%r421, %r419, %r286, %p10;
	selp.b32 	%r422, %r322, %r290, %p10;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r290, %r423, %p10;
	selp.b32 	%r425, %r423, %r322, %p10;
	selp.b32 	%r426, %r330, %r298, %p10;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r298, %r427, %p10;
	selp.b32 	%r429, %r427, %r330, %p10;
	selp.b32 	%r430, %r326, %r294, %p10;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r294, %r431, %p10;
	selp.b32 	%r433, %r431, %r326, %p10;
	selp.b32 	%r434, %r334, %r302, %p10;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r302, %r435, %p10;
	selp.b32 	%r437, %r435, %r334, %p10;
	selp.b32 	%r438, %r338, %r306, %p10;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r306, %r439, %p10;
	selp.b32 	%r441, %r439, %r338, %p10;
	selp.b32 	%r442, %r346, %r314, %p10;
	shfl.sync.bfly.b32	%r443, %r442, 2, 31, -1;
	selp.b32 	%r444, %r314, %r443, %p10;
	selp.b32 	%r445, %r443, %r346, %p10;
	selp.b32 	%r446, %r342, %r310, %p10;
	shfl.sync.bfly.b32	%r447, %r446, 2, 31, -1;
	selp.b32 	%r448, %r310, %r447, %p10;
	selp.b32 	%r449, %r447, %r342, %p10;
	selp.b32 	%r450, %r350, %r318, %p10;
	shfl.sync.bfly.b32	%r451, %r450, 2, 31, -1;
	selp.b32 	%r452, %r318, %r451, %p10;
	selp.b32 	%r453, %r451, %r350, %p10;
	and.b32  	%r34, %r3, 4;
	setp.eq.s32 	%p11, %r34, 0;
	selp.b32 	%r454, %r424, %r392, %p11;
	shfl.sync.bfly.b32	%r455, %r454, 4, 31, -1;
	selp.b32 	%r35, %r392, %r455, %p11;
	selp.b32 	%r36, %r455, %r424, %p11;
	selp.b32 	%r456, %r428, %r396, %p11;
	shfl.sync.bfly.b32	%r457, %r456, 4, 31, -1;
	selp.b32 	%r37, %r396, %r457, %p11;
	selp.b32 	%r38, %r457, %r428, %p11;
	selp.b32 	%r458, %r432, %r400, %p11;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r39, %r400, %r459, %p11;
	selp.b32 	%r40, %r459, %r432, %p11;
	selp.b32 	%r460, %r436, %r404, %p11;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r41, %r404, %r461, %p11;
	selp.b32 	%r42, %r461, %r436, %p11;
	selp.b32 	%r462, %r440, %r408, %p11;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r43, %r408, %r463, %p11;
	selp.b32 	%r44, %r463, %r440, %p11;
	selp.b32 	%r464, %r444, %r412, %p11;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r45, %r412, %r465, %p11;
	selp.b32 	%r46, %r465, %r444, %p11;
	selp.b32 	%r466, %r448, %r416, %p11;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r47, %r416, %r467, %p11;
	selp.b32 	%r48, %r467, %r448, %p11;
	selp.b32 	%r468, %r452, %r420, %p11;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r49, %r420, %r469, %p11;
	selp.b32 	%r50, %r469, %r452, %p11;
	selp.b32 	%r470, %r425, %r393, %p11;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r51, %r393, %r471, %p11;
	selp.b32 	%r52, %r471, %r425, %p11;
	selp.b32 	%r472, %r429, %r397, %p11;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r53, %r397, %r473, %p11;
	selp.b32 	%r54, %r473, %r429, %p11;
	selp.b32 	%r474, %r433, %r401, %p11;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r55, %r401, %r475, %p11;
	selp.b32 	%r56, %r475, %r433, %p11;
	selp.b32 	%r476, %r437, %r405, %p11;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r57, %r405, %r477, %p11;
	selp.b32 	%r58, %r477, %r437, %p11;
	selp.b32 	%r478, %r441, %r409, %p11;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r59, %r409, %r479, %p11;
	selp.b32 	%r60, %r479, %r441, %p11;
	selp.b32 	%r480, %r445, %r413, %p11;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r61, %r413, %r481, %p11;
	selp.b32 	%r62, %r481, %r445, %p11;
	selp.b32 	%r482, %r449, %r417, %p11;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r63, %r417, %r483, %p11;
	selp.b32 	%r64, %r483, %r449, %p11;
	selp.b32 	%r484, %r453, %r421, %p11;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r65, %r421, %r485, %p11;
	selp.b32 	%r66, %r485, %r453, %p11;
	shl.b32 	%r486, %r81, 12;
	shl.b32 	%r487, %r3, 2;
	and.b32  	%r488, %r487, 28;
	and.b32  	%r489, %r2, 96;
	shl.b32 	%r490, %r4, 3;
	and.b32  	%r491, %r1, 12;
	or.b32  	%r67, %r491, %r27;
	shl.b32 	%r492, %r4, 13;
	and.b32  	%r68, %r492, 122880;
	or.b32  	%r69, %r489, %r488;
	and.b32  	%r493, %r490, 3968;
	or.b32  	%r494, %r69, %r493;
	or.b32  	%r70, %r494, %r486;
	shl.b32 	%r495, %r3, 3;
	and.b32  	%r496, %r495, 24;
	or.b32  	%r71, %r489, %r496;
	and.b32  	%r497, %r1, 3;
	mul.lo.s32 	%r498, %r497, 3200;
	and.b16  	%rs44, %rs29, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs29, %rs47;
	cvt.u32.u16 	%r499, %rs48;
	and.b32  	%r500, %r499, 255;
	and.b32  	%r72, %r363, 6;
	or.b32  	%r73, %r498, %r500;
	or.b16  	%rs49, %rs29, 8;
	and.b16  	%rs50, %rs49, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs49, %rs53;
	cvt.u32.u16 	%r501, %rs54;
	and.b32  	%r502, %r501, 255;
	or.b32  	%r74, %r498, %r502;
	and.b32  	%r503, %r3, 7;
	shl.b32 	%r75, %r87, %r31;
	min.u32 	%r76, %r355, 31;
	and.b32  	%r77, %r3, 1;
	shl.b32 	%r505, %r3, 5;
	and.b32  	%r506, %r505, 64;
	shl.b32 	%r507, %r4, 11;
	shl.b32 	%r508, %r28, 20;
	and.b32  	%r509, %r507, 1015808;
	or.b32  	%r78, %r509, %r508;
	and.b32  	%r510, %r495, 32;
	or.b32  	%r511, %r506, %r510;
	or.b32  	%r512, %r511, %r362;
	or.b32  	%r79, %r512, %r492;
	mul.lo.s32 	%r513, %r503, 100;
	add.s32 	%r514, %r513, %r28;
	mul.wide.u32 	%rd41, %r514, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r513;
	cvt.u64.u32 	%rd45, %r28;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r515, %r513, 800;
	add.s32 	%r516, %r515, %r28;
	mul.wide.u32 	%rd48, %r516, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r515;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r517, %r513, 1600;
	add.s32 	%r518, %r517, %r28;
	mul.wide.u32 	%rd52, %r518, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r517;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	or.b32  	%r519, %r3, 24;
	mul.lo.s32 	%r520, %r519, 100;
	add.s32 	%r521, %r520, %r28;
	mul.wide.u32 	%rd56, %r521, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r520;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	mov.u32 	%r1343, 0;
	setp.lt.u32 	%p13, %r1, 16;
$L__BB0_9:                              // %L2486
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r522, %r1343, %r81;
	setp.ge.s32 	%p12, %r522, %r82;
	@%p12 bra 	$L__BB0_16;
// %bb.10:                              // %L2493.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	mov.u32 	%r1344, 0;
	mov.u32 	%r1345, %r1344;
	mov.u32 	%r1346, %r1344;
	mov.u32 	%r1347, %r1344;
	mov.u32 	%r1348, %r1344;
	mov.u32 	%r1349, %r1344;
	mov.u32 	%r1350, %r1344;
$L__BB0_11:                             // %L2493
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r13, %r1344, %r1343;
	@%p13 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_12;
$L__BB0_19:                             // %pass1210
                                        //   in Loop: Header=BB0_11 Depth=2
	or.b32  	%r524, %r67, %r13;
	add.s32 	%r525, %r524, %r68;
	shl.b32 	%r526, %r525, 12;
	and.b32  	%r527, %r526, 536801280;
	add.s32 	%r528, %r70, %r527;
	shr.s32 	%r529, %r528, 31;
	shr.u32 	%r530, %r529, 3;
	add.s32 	%r531, %r528, %r530;
	shr.s32 	%r532, %r531, 29;
	setp.lt.s32 	%p14, %r528, 0;
	and.b32  	%r533, %r531, -536870912;
	setp.ne.s32 	%p15, %r533, %r528;
	and.pred  	%p16, %p14, %p15;
	selp.u32 	%r534, 1, 0, %p16;
	sub.s32 	%r535, %r534, %r532;
	shl.b32 	%r536, %r535, 29;
	or.b32  	%r537, %r528, 1;
	add.s32 	%r538, %r537, %r536;
	mul.wide.s32 	%rd60, %r538, 4;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r539, %r540, %r541, %r542}, [%rd61+-4];
	or.b32  	%r543, %r524, 16;
	add.s32 	%r544, %r543, %r68;
	shl.b32 	%r545, %r544, 12;
	and.b32  	%r546, %r545, 536866816;
	add.s32 	%r547, %r70, %r546;
	shr.s32 	%r548, %r547, 31;
	shr.u32 	%r549, %r548, 3;
	add.s32 	%r550, %r547, %r549;
	shr.s32 	%r551, %r550, 29;
	setp.lt.s32 	%p17, %r547, 0;
	and.b32  	%r552, %r550, -536870912;
	setp.ne.s32 	%p18, %r552, %r547;
	and.pred  	%p19, %p17, %p18;
	selp.u32 	%r553, 1, 0, %p19;
	sub.s32 	%r554, %r553, %r551;
	shl.b32 	%r555, %r554, 29;
	or.b32  	%r556, %r547, 1;
	add.s32 	%r557, %r556, %r555;
	mul.wide.s32 	%rd62, %r557, 4;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r558, %r559, %r560, %r561}, [%rd63+-4];
	and.b32  	%r562, %r525, 15;
	mul.lo.s32 	%r563, %r562, 129;
	add.s32 	%r564, %r69, %r563;
	mul.wide.u32 	%rd64, %r564, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r539;
	cvt.u64.u32 	%rd67, %r563;
	cvt.u64.u32 	%rd68, %r69;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r540;
	st.shared.u32 	[%rd71+8], %r541;
	st.shared.u32 	[%rd71+12], %r542;
	and.b32  	%r565, %r544, 31;
	mul.lo.s32 	%r566, %r565, 129;
	add.s32 	%r567, %r69, %r566;
	mul.wide.u32 	%rd72, %r567, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r558;
	cvt.u64.u32 	%rd74, %r566;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r559;
	st.shared.u32 	[%rd77+8], %r560;
	st.shared.u32 	[%rd77+12], %r561;
$L__BB0_12:                             // %L4432
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	or.b32  	%r569, %r13, %r32;
	add.s32 	%r14, %r569, %r68;
	mov.u32 	%r582, 0;
	mov.u32 	%r1351, %r582;
$L__BB0_13:                             // %L4434
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r1094, %r14, %r1351;
	shr.s32 	%r1095, %r1094, 31;
	shr.u32 	%r1096, %r1095, 27;
	add.s32 	%r1097, %r1094, %r1096;
	and.b32  	%r1098, %r1097, -32;
	sub.s32 	%r1099, %r1094, %r1098;
	mad.lo.s32 	%r1100, %r1099, 129, %r71;
	mul.wide.s32 	%rd78, %r1100, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r571, [%rd80];
	mov.u32 	%r572, 134744072;
	mov.u32 	%r573, 252645135;
	// begin inline asm
	lop3.b32 %r570, %r571, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1101, %r570, 2021161080;
	xor.b32  	%r581, %r1101, -2139062144;
	shr.u32 	%r575, %r571, 4;
	// begin inline asm
	lop3.b32 %r574, %r575, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1102, %r574, 2021161080;
	xor.b32  	%r587, %r1102, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r35}, {%r581}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r39}, {%r587}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r35}, {%r587}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r39}, {%r581}, {%r590, %r591};
	// end inline asm
	ld.shared.u32 	%r603, [%rd80+4];
	// begin inline asm
	lop3.b32 %r602, %r603, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1103, %r602, 2021161080;
	xor.b32  	%r613, %r1103, -2139062144;
	shr.u32 	%r607, %r603, 4;
	// begin inline asm
	lop3.b32 %r606, %r607, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1104, %r606, 2021161080;
	xor.b32  	%r619, %r1104, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r43}, {%r613}, {%r578, %r579};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r47}, {%r619}, {%r584, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r43}, {%r619}, {%r596, %r597};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r47}, {%r613}, {%r622, %r623};
	// end inline asm
	ld.shared.u32 	%r635, [%rd80+8];
	// begin inline asm
	lop3.b32 %r634, %r635, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1105, %r634, 2021161080;
	xor.b32  	%r645, %r1105, -2139062144;
	shr.u32 	%r639, %r635, 4;
	// begin inline asm
	lop3.b32 %r638, %r639, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1106, %r638, 2021161080;
	xor.b32  	%r651, %r1106, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r51}, {%r645}, {%r610, %r611};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r55}, {%r651}, {%r616, %r617};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r51}, {%r651}, {%r628, %r629};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r660, %r661}, {%r55}, {%r645}, {%r654, %r655};
	// end inline asm
	ld.shared.u32 	%r667, [%rd80+12];
	// begin inline asm
	lop3.b32 %r666, %r667, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1107, %r666, 2021161080;
	xor.b32  	%r677, %r1107, -2139062144;
	shr.u32 	%r671, %r667, 4;
	// begin inline asm
	lop3.b32 %r670, %r671, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1108, %r670, 2021161080;
	xor.b32  	%r683, %r1108, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r674, %r675}, {%r59}, {%r677}, {%r642, %r643};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r680, %r681}, {%r63}, {%r683}, {%r648, %r649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r686, %r687}, {%r59}, {%r683}, {%r660, %r661};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r692, %r693}, {%r63}, {%r677}, {%r686, %r687};
	// end inline asm
	ld.shared.u32 	%r699, [%rd80+16];
	// begin inline asm
	lop3.b32 %r698, %r699, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1109, %r698, 2021161080;
	xor.b32  	%r709, %r1109, -2139062144;
	shr.u32 	%r703, %r699, 4;
	// begin inline asm
	lop3.b32 %r702, %r703, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1110, %r702, 2021161080;
	xor.b32  	%r715, %r1110, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r706, %r707}, {%r36}, {%r709}, {%r674, %r675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r712, %r713}, {%r40}, {%r715}, {%r680, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r718, %r719}, {%r36}, {%r715}, {%r692, %r693};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r724, %r725}, {%r40}, {%r709}, {%r718, %r719};
	// end inline asm
	ld.shared.u32 	%r731, [%rd80+20];
	// begin inline asm
	lop3.b32 %r730, %r731, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1111, %r730, 2021161080;
	xor.b32  	%r741, %r1111, -2139062144;
	shr.u32 	%r735, %r731, 4;
	// begin inline asm
	lop3.b32 %r734, %r735, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1112, %r734, 2021161080;
	xor.b32  	%r747, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r738, %r739}, {%r44}, {%r741}, {%r706, %r707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r744, %r745}, {%r48}, {%r747}, {%r712, %r713};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r750, %r751}, {%r44}, {%r747}, {%r724, %r725};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r756, %r757}, {%r48}, {%r741}, {%r750, %r751};
	// end inline asm
	ld.shared.u32 	%r763, [%rd80+24];
	// begin inline asm
	lop3.b32 %r762, %r763, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1113, %r762, 2021161080;
	xor.b32  	%r773, %r1113, -2139062144;
	shr.u32 	%r767, %r763, 4;
	// begin inline asm
	lop3.b32 %r766, %r767, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1114, %r766, 2021161080;
	xor.b32  	%r779, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r770, %r771}, {%r52}, {%r773}, {%r738, %r739};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r776, %r777}, {%r56}, {%r779}, {%r744, %r745};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r782, %r783}, {%r52}, {%r779}, {%r756, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r788, %r789}, {%r56}, {%r773}, {%r782, %r783};
	// end inline asm
	ld.shared.u32 	%r795, [%rd80+28];
	// begin inline asm
	lop3.b32 %r794, %r795, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1115, %r794, 2021161080;
	xor.b32  	%r805, %r1115, -2139062144;
	shr.u32 	%r799, %r795, 4;
	// begin inline asm
	lop3.b32 %r798, %r799, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1116, %r798, 2021161080;
	xor.b32  	%r811, %r1116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r802, %r803}, {%r60}, {%r805}, {%r770, %r771};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r808, %r809}, {%r64}, {%r811}, {%r776, %r777};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r814, %r815}, {%r60}, {%r811}, {%r788, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r820, %r821}, {%r64}, {%r805}, {%r814, %r815};
	// end inline asm
	sub.s32 	%r1117, %r802, %r808;
	add.s32 	%r1118, %r1117, 4;
	shr.s32 	%r828, %r1118, 3;
	add.s32 	%r1119, %r820, 4;
	shr.s32 	%r827, %r1119, 3;
	sub.s32 	%r1120, %r803, %r809;
	add.s32 	%r1121, %r1120, 4;
	shr.s32 	%r831, %r1121, 3;
	add.s32 	%r1122, %r821, 4;
	shr.s32 	%r830, %r1122, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r826, %r827, %r828;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r829, %r830, %r831;
	// end inline asm
	or.b32  	%r1123, %r72, %r1351;
	mul.lo.s32 	%r1124, %r1123, 100;
	add.s32 	%r1125, %r73, %r1124;
	mul.wide.u32 	%rd81, %r1125, 4;
	add.s64 	%rd83, %rd43, %rd81;
	st.shared.u32 	[%rd83], %r826;
	add.s32 	%r1126, %r1124, 100;
	add.s32 	%r1127, %r73, %r1126;
	mul.wide.u32 	%rd84, %r1127, 4;
	add.s64 	%rd85, %rd43, %rd84;
	st.shared.u32 	[%rd85], %r829;
	ld.shared.u32 	%r833, [%rd80];
	// begin inline asm
	lop3.b32 %r832, %r833, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1128, %r832, 2021161080;
	xor.b32  	%r843, %r1128, -2139062144;
	shr.u32 	%r837, %r833, 4;
	// begin inline asm
	lop3.b32 %r836, %r837, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1129, %r836, 2021161080;
	xor.b32  	%r849, %r1129, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r840, %r841}, {%r37}, {%r843}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r846, %r847}, {%r41}, {%r849}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r852, %r853}, {%r37}, {%r849}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r858, %r859}, {%r41}, {%r843}, {%r852, %r853};
	// end inline asm
	ld.shared.u32 	%r865, [%rd80+4];
	// begin inline asm
	lop3.b32 %r864, %r865, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1130, %r864, 2021161080;
	xor.b32  	%r875, %r1130, -2139062144;
	shr.u32 	%r869, %r865, 4;
	// begin inline asm
	lop3.b32 %r868, %r869, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1131, %r868, 2021161080;
	xor.b32  	%r881, %r1131, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r872, %r873}, {%r45}, {%r875}, {%r840, %r841};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r878, %r879}, {%r49}, {%r881}, {%r846, %r847};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r884, %r885}, {%r45}, {%r881}, {%r858, %r859};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r890, %r891}, {%r49}, {%r875}, {%r884, %r885};
	// end inline asm
	ld.shared.u32 	%r897, [%rd80+8];
	// begin inline asm
	lop3.b32 %r896, %r897, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1132, %r896, 2021161080;
	xor.b32  	%r907, %r1132, -2139062144;
	shr.u32 	%r901, %r897, 4;
	// begin inline asm
	lop3.b32 %r900, %r901, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1133, %r900, 2021161080;
	xor.b32  	%r913, %r1133, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r904, %r905}, {%r53}, {%r907}, {%r872, %r873};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r910, %r911}, {%r57}, {%r913}, {%r878, %r879};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r916, %r917}, {%r53}, {%r913}, {%r890, %r891};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r922, %r923}, {%r57}, {%r907}, {%r916, %r917};
	// end inline asm
	ld.shared.u32 	%r929, [%rd80+12];
	// begin inline asm
	lop3.b32 %r928, %r929, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1134, %r928, 2021161080;
	xor.b32  	%r939, %r1134, -2139062144;
	shr.u32 	%r933, %r929, 4;
	// begin inline asm
	lop3.b32 %r932, %r933, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1135, %r932, 2021161080;
	xor.b32  	%r945, %r1135, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r936, %r937}, {%r61}, {%r939}, {%r904, %r905};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r942, %r943}, {%r65}, {%r945}, {%r910, %r911};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r948, %r949}, {%r61}, {%r945}, {%r922, %r923};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r954, %r955}, {%r65}, {%r939}, {%r948, %r949};
	// end inline asm
	ld.shared.u32 	%r961, [%rd80+16];
	// begin inline asm
	lop3.b32 %r960, %r961, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1136, %r960, 2021161080;
	xor.b32  	%r971, %r1136, -2139062144;
	shr.u32 	%r965, %r961, 4;
	// begin inline asm
	lop3.b32 %r964, %r965, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1137, %r964, 2021161080;
	xor.b32  	%r977, %r1137, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r968, %r969}, {%r38}, {%r971}, {%r936, %r937};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r974, %r975}, {%r42}, {%r977}, {%r942, %r943};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r980, %r981}, {%r38}, {%r977}, {%r954, %r955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r986, %r987}, {%r42}, {%r971}, {%r980, %r981};
	// end inline asm
	ld.shared.u32 	%r993, [%rd80+20];
	// begin inline asm
	lop3.b32 %r992, %r993, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1138, %r992, 2021161080;
	xor.b32  	%r1003, %r1138, -2139062144;
	shr.u32 	%r997, %r993, 4;
	// begin inline asm
	lop3.b32 %r996, %r997, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1139, %r996, 2021161080;
	xor.b32  	%r1009, %r1139, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1000, %r1001}, {%r46}, {%r1003}, {%r968, %r969};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1006, %r1007}, {%r50}, {%r1009}, {%r974, %r975};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1012, %r1013}, {%r46}, {%r1009}, {%r986, %r987};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1018, %r1019}, {%r50}, {%r1003}, {%r1012, %r1013};
	// end inline asm
	ld.shared.u32 	%r1025, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1024, %r1025, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1140, %r1024, 2021161080;
	xor.b32  	%r1035, %r1140, -2139062144;
	shr.u32 	%r1029, %r1025, 4;
	// begin inline asm
	lop3.b32 %r1028, %r1029, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1141, %r1028, 2021161080;
	xor.b32  	%r1041, %r1141, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1032, %r1033}, {%r54}, {%r1035}, {%r1000, %r1001};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1038, %r1039}, {%r58}, {%r1041}, {%r1006, %r1007};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1044, %r1045}, {%r54}, {%r1041}, {%r1018, %r1019};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1050, %r1051}, {%r58}, {%r1035}, {%r1044, %r1045};
	// end inline asm
	ld.shared.u32 	%r1057, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1056, %r1057, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1142, %r1056, 2021161080;
	xor.b32  	%r1067, %r1142, -2139062144;
	shr.u32 	%r1061, %r1057, 4;
	// begin inline asm
	lop3.b32 %r1060, %r1061, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1143, %r1060, 2021161080;
	xor.b32  	%r1073, %r1143, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1064, %r1065}, {%r62}, {%r1067}, {%r1032, %r1033};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1070, %r1071}, {%r66}, {%r1073}, {%r1038, %r1039};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1076, %r1077}, {%r62}, {%r1073}, {%r1050, %r1051};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1082, %r1083}, {%r66}, {%r1067}, {%r1076, %r1077};
	// end inline asm
	sub.s32 	%r1144, %r1064, %r1070;
	add.s32 	%r1145, %r1144, 4;
	shr.s32 	%r1090, %r1145, 3;
	add.s32 	%r1146, %r1082, 4;
	shr.s32 	%r1089, %r1146, 3;
	sub.s32 	%r1147, %r1065, %r1071;
	add.s32 	%r1148, %r1147, 4;
	shr.s32 	%r1093, %r1148, 3;
	add.s32 	%r1149, %r1083, 4;
	shr.s32 	%r1092, %r1149, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1088, %r1089, %r1090;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1091, %r1092, %r1093;
	// end inline asm
	add.s32 	%r1150, %r74, %r1124;
	mul.wide.u32 	%rd86, %r1150, 4;
	add.s64 	%rd87, %rd43, %rd86;
	st.shared.u32 	[%rd87], %r1088;
	add.s32 	%r1151, %r74, %r1126;
	mul.wide.u32 	%rd88, %r1151, 4;
	add.s64 	%rd89, %rd43, %rd88;
	st.shared.u32 	[%rd89], %r1091;
	add.s32 	%r1351, %r1351, 8;
	setp.ne.s32 	%p20, %r1351, 32;
	@%p20 bra 	$L__BB0_13;
// %bb.14:                              // %L8605
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1170, [%rd7];
	ld.shared.u32 	%r1171, [%rd8+12800];
	ld.shared.u32 	%r1172, [%rd8+25600];
	ld.shared.u32 	%r1173, [%rd8+38400];
	ld.shared.u32 	%r1174, [%rd9];
	ld.shared.u32 	%r1175, [%rd10+12800];
	ld.shared.u32 	%r1176, [%rd10+25600];
	ld.shared.u32 	%r1177, [%rd10+38400];
	ld.shared.u32 	%r1178, [%rd11];
	ld.shared.u32 	%r1179, [%rd12+12800];
	ld.shared.u32 	%r1180, [%rd12+25600];
	ld.shared.u32 	%r1181, [%rd12+38400];
	ld.shared.u32 	%r1182, [%rd13];
	ld.shared.u32 	%r1183, [%rd14+12800];
	ld.shared.u32 	%r1184, [%rd14+25600];
	ld.shared.u32 	%r1185, [%rd14+38400];
	cvt.s32.s16 	%r1186, %r1170;
	shr.s32 	%r1187, %r1170, 16;
	cvt.s32.s16 	%r1188, %r1171;
	shr.s32 	%r1189, %r1171, 16;
	cvt.s32.s16 	%r1190, %r1172;
	shr.s32 	%r1191, %r1172, 16;
	cvt.s32.s16 	%r1192, %r1173;
	shr.s32 	%r1193, %r1173, 16;
	cvt.s32.s16 	%r1194, %r1174;
	shr.s32 	%r1195, %r1174, 16;
	cvt.s32.s16 	%r1196, %r1175;
	shr.s32 	%r1197, %r1175, 16;
	cvt.s32.s16 	%r1198, %r1176;
	shr.s32 	%r1199, %r1176, 16;
	cvt.s32.s16 	%r1200, %r1177;
	shr.s32 	%r1201, %r1177, 16;
	cvt.s32.s16 	%r1202, %r1178;
	shr.s32 	%r1203, %r1178, 16;
	cvt.s32.s16 	%r1204, %r1179;
	shr.s32 	%r1205, %r1179, 16;
	cvt.s32.s16 	%r1206, %r1180;
	shr.s32 	%r1207, %r1180, 16;
	cvt.s32.s16 	%r1208, %r1181;
	shr.s32 	%r1209, %r1181, 16;
	cvt.s32.s16 	%r1210, %r1182;
	shr.s32 	%r1211, %r1182, 16;
	cvt.s32.s16 	%r1212, %r1183;
	shr.s32 	%r1213, %r1183, 16;
	cvt.s32.s16 	%r1214, %r1184;
	shr.s32 	%r1215, %r1184, 16;
	cvt.s32.s16 	%r1216, %r1185;
	shr.s32 	%r1217, %r1185, 16;
	add.s32 	%r1218, %r1186, %r75;
	add.s32 	%r1219, %r1218, %r1188;
	add.s32 	%r1220, %r1219, %r1190;
	add.s32 	%r1221, %r1220, %r1192;
	shr.s32 	%r1222, %r1221, %r76;
	add.s32 	%r1223, %r1187, %r75;
	add.s32 	%r1224, %r1223, %r1189;
	add.s32 	%r1225, %r1224, %r1191;
	add.s32 	%r1226, %r1225, %r1193;
	shr.s32 	%r1227, %r1226, %r76;
	add.s32 	%r1228, %r1194, %r75;
	add.s32 	%r1229, %r1228, %r1196;
	add.s32 	%r1230, %r1229, %r1198;
	add.s32 	%r1231, %r1230, %r1200;
	shr.s32 	%r1232, %r1231, %r76;
	add.s32 	%r1233, %r1195, %r75;
	add.s32 	%r1234, %r1233, %r1197;
	add.s32 	%r1235, %r1234, %r1199;
	add.s32 	%r1236, %r1235, %r1201;
	shr.s32 	%r1237, %r1236, %r76;
	add.s32 	%r1238, %r1202, %r75;
	add.s32 	%r1239, %r1238, %r1204;
	add.s32 	%r1240, %r1239, %r1206;
	add.s32 	%r1241, %r1240, %r1208;
	shr.s32 	%r1242, %r1241, %r76;
	add.s32 	%r1243, %r1203, %r75;
	add.s32 	%r1244, %r1243, %r1205;
	add.s32 	%r1245, %r1244, %r1207;
	add.s32 	%r1246, %r1245, %r1209;
	shr.s32 	%r1247, %r1246, %r76;
	add.s32 	%r1248, %r1210, %r75;
	add.s32 	%r1249, %r1248, %r1212;
	add.s32 	%r1250, %r1249, %r1214;
	add.s32 	%r1251, %r1250, %r1216;
	shr.s32 	%r1252, %r1251, %r76;
	add.s32 	%r1253, %r1211, %r75;
	add.s32 	%r1254, %r1253, %r1213;
	add.s32 	%r1255, %r1254, %r1215;
	add.s32 	%r1256, %r1255, %r1217;
	shr.s32 	%r1257, %r1256, %r76;
	max.s32 	%r1258, %r1222, -7;
	min.s32 	%r1157, %r1258, 7;
	max.s32 	%r1259, %r1227, -7;
	min.s32 	%r1164, %r1259, 7;
	max.s32 	%r1260, %r1232, -7;
	min.s32 	%r1156, %r1260, 7;
	max.s32 	%r1261, %r1237, -7;
	min.s32 	%r1163, %r1261, 7;
	max.s32 	%r1262, %r1242, -7;
	min.s32 	%r1154, %r1262, 7;
	max.s32 	%r1263, %r1247, -7;
	min.s32 	%r1161, %r1263, 7;
	max.s32 	%r1264, %r1252, -7;
	min.s32 	%r1153, %r1264, 7;
	max.s32 	%r1265, %r1257, -7;
	min.s32 	%r1160, %r1265, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1152, %r1153, %r1154, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1155, %r1156, %r1157, %r1152;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1159, %r1160, %r1161, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1162, %r1163, %r1164, %r1159;
	// end inline asm
	shl.b32 	%r1169, %r1162, 4;
	// begin inline asm
	lop3.b32 %r1276, %r573, %r1155, %r1169, 202;
	// end inline asm
	setp.eq.s32 	%p21, %r1344, 0;
	selp.b32 	%r1349, %r1276, %r1349, %p21;
	selp.b32 	%r1350, %r1276, %r1350, %p21;
	setp.eq.s32 	%p22, %r1344, 32;
	selp.b32 	%r1345, %r1276, %r1345, %p22;
	selp.b32 	%r1346, %r1276, %r1346, %p22;
	setp.eq.s32 	%p23, %r1344, 64;
	selp.b32 	%r1347, %r1276, %r1347, %p23;
	selp.b32 	%r1348, %r1276, %r1348, %p23;
	add.s32 	%r24, %r1344, 32;
	setp.ne.s32 	%p24, %r1344, 96;
	mov.u32 	%r1344, %r24;
	@%p24 bra 	$L__BB0_11;
// %bb.15:                              // %L11341
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p25, %r77, 0;
	// begin inline asm
	prmt.b32 %r1266, %r1349, %r1345, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1270, %r1350, %r1346, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1274, %r1347, %r1276, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1348, %r1276, %r353;
	// end inline asm
	selp.b32 	%r1314, %r1270, %r1266, %p25;
	shfl.sync.bfly.b32	%r1315, %r1314, 1, 31, -1;
	selp.b32 	%r1283, %r1266, %r1315, %p25;
	selp.b32 	%r1284, %r1315, %r1270, %p25;
	selp.b32 	%r1316, %r1278, %r1274, %p25;
	shfl.sync.bfly.b32	%r1317, %r1316, 1, 31, -1;
	selp.b32 	%r1291, %r1274, %r1317, %p25;
	selp.b32 	%r1292, %r1317, %r1278, %p25;
	// begin inline asm
	prmt.b32 %r1282, %r1283, %r1284, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1283, %r1284, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1291, %r1292, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1291, %r1292, %r353;
	// end inline asm
	selp.b32 	%r1318, %r1290, %r1282, %p10;
	shfl.sync.bfly.b32	%r1319, %r1318, 2, 31, -1;
	selp.b32 	%r1299, %r1282, %r1319, %p10;
	selp.b32 	%r1300, %r1319, %r1290, %p10;
	selp.b32 	%r1320, %r1294, %r1286, %p10;
	shfl.sync.bfly.b32	%r1321, %r1320, 2, 31, -1;
	selp.b32 	%r1307, %r1286, %r1321, %p10;
	selp.b32 	%r1308, %r1321, %r1294, %p10;
	// begin inline asm
	prmt.b32 %r1298, %r1299, %r1300, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1302, %r1299, %r1300, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1306, %r1307, %r1308, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1310, %r1307, %r1308, %r225;
	// end inline asm
	selp.b32 	%r1322, %r1306, %r1298, %p11;
	shfl.sync.bfly.b32	%r1323, %r1322, 4, 31, -1;
	selp.b32 	%r1324, %r1298, %r1323, %p11;
	selp.b32 	%r1325, %r1323, %r1306, %p11;
	selp.b32 	%r1326, %r1310, %r1302, %p11;
	shfl.sync.bfly.b32	%r1327, %r1326, 4, 31, -1;
	selp.b32 	%r1328, %r1302, %r1327, %p11;
	selp.b32 	%r1329, %r1327, %r1310, %p11;
	selp.b32 	%r1330, %r1328, %r1324, %p25;
	shfl.sync.bfly.b32	%r1331, %r1330, 1, 31, -1;
	selp.b32 	%r1332, %r1324, %r1331, %p25;
	selp.b32 	%r1333, %r1331, %r1328, %p25;
	selp.b32 	%r1334, %r1329, %r1325, %p25;
	shfl.sync.bfly.b32	%r1335, %r1334, 1, 31, -1;
	selp.b32 	%r1336, %r1325, %r1335, %p25;
	selp.b32 	%r1337, %r1335, %r1329, %p25;
	add.s32 	%r1338, %r79, %r1343;
	and.b32  	%r1339, %r1338, 32752;
	or.b32  	%r1340, %r78, %r1339;
	cvt.u64.u32 	%rd90, %r1340;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1332, %r1336, %r1333, %r1337};
	add.s32 	%r25, %r1343, 128;
	setp.ne.s32 	%p28, %r1343, 8064;
	mov.u32 	%r1343, %r25;
	@%p28 bra 	$L__BB0_9;
$L__BB0_16:                             // %L11743
	mov.u32 	%r1341, 0;
	st.global.u32 	[%rd6], %r1341;
	ret;
$L__BB0_7:                              // %L147
	mov.u32 	%r1342, 2;
	st.global.u32 	[%rd6], %r1342;
	mov.u64 	%rd92, exception935;
	cvta.global.u64 	%rd93, %rd92;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd93;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L366
	mov.u32 	%r97, 2;
	st.global.u32 	[%rd6], %r97;
	mov.u64 	%rd23, exception935;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
