// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception784[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<55>;
	.reg .b32 	%r<1307>;
	.reg .b64 	%rd<95>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r78, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd14, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r79, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r79, 16511;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r80, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r80, 67711;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r81, %r2, %r3;
	mad.lo.s32 	%r82, %r4, 768, %r81;
	mul.wide.u32 	%rd23, %r82, 4;
	add.s64 	%rd5, %rd4, %rd23;
	mov.u32 	%r83, 1;
	st.global.u32 	[%rd5], %r83;
	bfe.s32 	%r84, %r4, 4, 1;
	and.b32  	%r85, %r84, 96;
	shr.u32 	%r6, %r4, 5;
	shr.u32 	%r7, %r3, 3;
	shl.b32 	%r86, %r1, 2;
	or.b32  	%r87, %r7, %r86;
	cvt.u16.u32 	%rs1, %r87;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r88, %rs6;
	and.b32  	%r8, %r88, 255;
	mad.lo.s32 	%r89, %r6, 192, %r85;
	add.s32 	%r90, %r89, %r8;
	mul.wide.u32 	%rd24, %r90, 4;
	add.s64 	%rd25, %rd3, %rd24;
	ld.global.u32 	%r9, [%rd25];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:                              // %pass137
	ld.param.u64 	%rd15, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	and.b32  	%r5, %r4, 16;
	setp.eq.s32 	%p4, %r5, 0;
	add.s32 	%r349, %r9, -3;
	selp.b32 	%r350, 0, 24576, %p4;
	mul.lo.s32 	%r351, %r6, 49152;
	shr.u32 	%r28, %r3, 2;
	shr.u32 	%r352, %r1, 2;
	cvt.u16.u32 	%rs7, %r352;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 10;
	mul.lo.s16 	%rs10, %rs9, 6;
	sub.s16 	%rs11, %rs7, %rs10;
	shl.b16 	%rs12, %rs11, 4;
	cvt.u16.u32 	%rs13, %r28;
	and.b16  	%rs14, %rs13, 6;
	or.b16  	%rs15, %rs14, %rs12;
	and.b16  	%rs16, %rs15, 246;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 246;
	mul.wide.u16 	%r353, %rs21, 256;
	shl.b32 	%r354, %r3, 4;
	and.b32  	%r355, %r354, 16;
	shl.b32 	%r356, %r1, 6;
	shl.b32 	%r29, %r3, 1;
	and.b32  	%r357, %r29, 12;
	and.b32  	%r358, %r356, 192;
	or.b32  	%r359, %r358, %r355;
	or.b32  	%r360, %r359, %r357;
	or.b32  	%r361, %r360, %r351;
	add.s32 	%r362, %r350, %r361;
	or.b32  	%r363, %r362, 1;
	add.s32 	%r364, %r363, %r353;
	mul.wide.u32 	%rd28, %r364, 4;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r93, %r94, %r109, %r110}, [%rd29+-4];
	or.b16  	%rs22, %rs15, 8;
	and.b16  	%rs23, %rs22, 254;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 14;
	mul.lo.s16 	%rs26, %rs25, 96;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 254;
	mul.wide.u16 	%r365, %rs28, 256;
	add.s32 	%r366, %r363, %r365;
	mul.wide.u32 	%rd30, %r366, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r101, %r102, %r117, %r118}, [%rd31+-4];
	or.b32  	%r367, %r362, 33;
	add.s32 	%r368, %r367, %r353;
	mul.wide.u32 	%rd32, %r368, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r125, %r126, %r141, %r142}, [%rd33+-4];
	add.s32 	%r369, %r367, %r365;
	mul.wide.u32 	%rd34, %r369, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r133, %r134, %r149, %r150}, [%rd35+-4];
	or.b16  	%rs29, %rs12, %rs13;
	or.b16  	%rs30, %rs29, 1;
	and.b16  	%rs31, %rs30, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 14;
	mul.lo.s16 	%rs34, %rs33, 96;
	sub.s16 	%rs35, %rs30, %rs34;
	and.b16  	%rs36, %rs35, 255;
	mul.wide.u16 	%r370, %rs36, 256;
	add.s32 	%r371, %r363, %r370;
	mul.wide.u32 	%rd36, %r371, 4;
	add.s64 	%rd37, %rd1, %rd36;
	ld.global.v4.u32 	{%r157, %r158, %r173, %r174}, [%rd37+-4];
	or.b16  	%rs37, %rs29, 9;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 14;
	mul.lo.s16 	%rs41, %rs40, 96;
	sub.s16 	%rs42, %rs37, %rs41;
	and.b16  	%rs43, %rs42, 255;
	mul.wide.u16 	%r372, %rs43, 256;
	add.s32 	%r373, %r363, %r372;
	mul.wide.u32 	%rd38, %r373, 4;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.v4.u32 	{%r165, %r166, %r181, %r182}, [%rd39+-4];
	add.s32 	%r374, %r367, %r370;
	mul.wide.u32 	%rd40, %r374, 4;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.v4.u32 	{%r189, %r190, %r205, %r206}, [%rd41+-4];
	add.s32 	%r375, %r367, %r372;
	mul.wide.u32 	%rd42, %r375, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.v4.u32 	{%r197, %r198, %r213, %r214}, [%rd43+-4];
	mov.u32 	%r215, 21520;
	// begin inline asm
	prmt.b32 %r221, %r93, %r94, %r215;
	// end inline asm
	mov.u32 	%r219, 30258;
	// begin inline asm
	prmt.b32 %r222, %r93, %r94, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r101, %r102, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r101, %r102, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r109, %r110, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r109, %r110, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r117, %r118, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r117, %r118, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r125, %r126, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r125, %r126, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r133, %r134, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r133, %r134, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r141, %r142, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r141, %r142, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r149, %r150, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r149, %r150, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r157, %r158, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r157, %r158, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r165, %r166, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r165, %r166, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r173, %r174, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r173, %r174, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r181, %r182, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r181, %r182, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r189, %r190, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r189, %r190, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r197, %r198, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r197, %r198, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r205, %r206, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r205, %r206, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r213, %r214, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r213, %r214, %r219;
	// end inline asm
	mov.u32 	%r343, 25152;
	// begin inline asm
	prmt.b32 %r220, %r221, %r222, %r343;
	// end inline asm
	mov.u32 	%r347, 29521;
	// begin inline asm
	prmt.b32 %r224, %r221, %r222, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r229, %r230, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r229, %r230, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r237, %r238, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r237, %r238, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r245, %r246, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r245, %r246, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r253, %r254, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r253, %r254, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r261, %r262, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r261, %r262, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r269, %r270, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r269, %r270, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r277, %r278, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r277, %r278, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r285, %r286, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r285, %r286, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r293, %r294, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r293, %r294, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r301, %r302, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r301, %r302, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r309, %r310, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r309, %r310, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r317, %r318, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r317, %r318, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r325, %r326, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r325, %r326, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r333, %r334, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r333, %r334, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r341, %r342, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r341, %r342, %r347;
	// end inline asm
	and.b32  	%r30, %r3, 2;
	setp.eq.s32 	%p5, %r30, 0;
	selp.b32 	%r376, %r252, %r220, %p5;
	shfl.sync.bfly.b32	%r377, %r376, 2, 31, -1;
	selp.b32 	%r378, %r220, %r377, %p5;
	selp.b32 	%r379, %r377, %r252, %p5;
	selp.b32 	%r380, %r260, %r228, %p5;
	shfl.sync.bfly.b32	%r381, %r380, 2, 31, -1;
	selp.b32 	%r382, %r228, %r381, %p5;
	selp.b32 	%r383, %r381, %r260, %p5;
	selp.b32 	%r384, %r256, %r224, %p5;
	shfl.sync.bfly.b32	%r385, %r384, 2, 31, -1;
	selp.b32 	%r386, %r224, %r385, %p5;
	selp.b32 	%r387, %r385, %r256, %p5;
	selp.b32 	%r388, %r264, %r232, %p5;
	shfl.sync.bfly.b32	%r389, %r388, 2, 31, -1;
	selp.b32 	%r390, %r232, %r389, %p5;
	selp.b32 	%r391, %r389, %r264, %p5;
	selp.b32 	%r392, %r268, %r236, %p5;
	shfl.sync.bfly.b32	%r393, %r392, 2, 31, -1;
	selp.b32 	%r394, %r236, %r393, %p5;
	selp.b32 	%r395, %r393, %r268, %p5;
	selp.b32 	%r396, %r276, %r244, %p5;
	shfl.sync.bfly.b32	%r397, %r396, 2, 31, -1;
	selp.b32 	%r398, %r244, %r397, %p5;
	selp.b32 	%r399, %r397, %r276, %p5;
	selp.b32 	%r400, %r272, %r240, %p5;
	shfl.sync.bfly.b32	%r401, %r400, 2, 31, -1;
	selp.b32 	%r402, %r240, %r401, %p5;
	selp.b32 	%r403, %r401, %r272, %p5;
	selp.b32 	%r404, %r280, %r248, %p5;
	shfl.sync.bfly.b32	%r405, %r404, 2, 31, -1;
	selp.b32 	%r406, %r248, %r405, %p5;
	selp.b32 	%r407, %r405, %r280, %p5;
	selp.b32 	%r408, %r316, %r284, %p5;
	shfl.sync.bfly.b32	%r409, %r408, 2, 31, -1;
	selp.b32 	%r410, %r284, %r409, %p5;
	selp.b32 	%r411, %r409, %r316, %p5;
	selp.b32 	%r412, %r324, %r292, %p5;
	shfl.sync.bfly.b32	%r413, %r412, 2, 31, -1;
	selp.b32 	%r414, %r292, %r413, %p5;
	selp.b32 	%r415, %r413, %r324, %p5;
	selp.b32 	%r416, %r320, %r288, %p5;
	shfl.sync.bfly.b32	%r417, %r416, 2, 31, -1;
	selp.b32 	%r418, %r288, %r417, %p5;
	selp.b32 	%r419, %r417, %r320, %p5;
	selp.b32 	%r420, %r328, %r296, %p5;
	shfl.sync.bfly.b32	%r421, %r420, 2, 31, -1;
	selp.b32 	%r422, %r296, %r421, %p5;
	selp.b32 	%r423, %r421, %r328, %p5;
	selp.b32 	%r424, %r332, %r300, %p5;
	shfl.sync.bfly.b32	%r425, %r424, 2, 31, -1;
	selp.b32 	%r426, %r300, %r425, %p5;
	selp.b32 	%r427, %r425, %r332, %p5;
	selp.b32 	%r428, %r340, %r308, %p5;
	shfl.sync.bfly.b32	%r429, %r428, 2, 31, -1;
	selp.b32 	%r430, %r308, %r429, %p5;
	selp.b32 	%r431, %r429, %r340, %p5;
	selp.b32 	%r432, %r336, %r304, %p5;
	shfl.sync.bfly.b32	%r433, %r432, 2, 31, -1;
	selp.b32 	%r434, %r304, %r433, %p5;
	selp.b32 	%r435, %r433, %r336, %p5;
	selp.b32 	%r436, %r344, %r312, %p5;
	shfl.sync.bfly.b32	%r437, %r436, 2, 31, -1;
	selp.b32 	%r438, %r312, %r437, %p5;
	selp.b32 	%r439, %r437, %r344, %p5;
	and.b32  	%r31, %r3, 4;
	setp.eq.s32 	%p6, %r31, 0;
	selp.b32 	%r440, %r410, %r378, %p6;
	shfl.sync.bfly.b32	%r441, %r440, 4, 31, -1;
	selp.b32 	%r32, %r378, %r441, %p6;
	selp.b32 	%r33, %r441, %r410, %p6;
	selp.b32 	%r442, %r414, %r382, %p6;
	shfl.sync.bfly.b32	%r443, %r442, 4, 31, -1;
	selp.b32 	%r34, %r382, %r443, %p6;
	selp.b32 	%r35, %r443, %r414, %p6;
	selp.b32 	%r444, %r418, %r386, %p6;
	shfl.sync.bfly.b32	%r445, %r444, 4, 31, -1;
	selp.b32 	%r36, %r386, %r445, %p6;
	selp.b32 	%r37, %r445, %r418, %p6;
	selp.b32 	%r446, %r422, %r390, %p6;
	shfl.sync.bfly.b32	%r447, %r446, 4, 31, -1;
	selp.b32 	%r38, %r390, %r447, %p6;
	selp.b32 	%r39, %r447, %r422, %p6;
	selp.b32 	%r448, %r426, %r394, %p6;
	shfl.sync.bfly.b32	%r449, %r448, 4, 31, -1;
	selp.b32 	%r40, %r394, %r449, %p6;
	selp.b32 	%r41, %r449, %r426, %p6;
	selp.b32 	%r450, %r430, %r398, %p6;
	shfl.sync.bfly.b32	%r451, %r450, 4, 31, -1;
	selp.b32 	%r42, %r398, %r451, %p6;
	selp.b32 	%r43, %r451, %r430, %p6;
	selp.b32 	%r452, %r434, %r402, %p6;
	shfl.sync.bfly.b32	%r453, %r452, 4, 31, -1;
	selp.b32 	%r44, %r402, %r453, %p6;
	selp.b32 	%r45, %r453, %r434, %p6;
	selp.b32 	%r454, %r438, %r406, %p6;
	shfl.sync.bfly.b32	%r455, %r454, 4, 31, -1;
	selp.b32 	%r46, %r406, %r455, %p6;
	selp.b32 	%r47, %r455, %r438, %p6;
	selp.b32 	%r456, %r411, %r379, %p6;
	shfl.sync.bfly.b32	%r457, %r456, 4, 31, -1;
	selp.b32 	%r48, %r379, %r457, %p6;
	selp.b32 	%r49, %r457, %r411, %p6;
	selp.b32 	%r458, %r415, %r383, %p6;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r50, %r383, %r459, %p6;
	selp.b32 	%r51, %r459, %r415, %p6;
	selp.b32 	%r460, %r419, %r387, %p6;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r52, %r387, %r461, %p6;
	selp.b32 	%r53, %r461, %r419, %p6;
	selp.b32 	%r462, %r423, %r391, %p6;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r54, %r391, %r463, %p6;
	selp.b32 	%r55, %r463, %r423, %p6;
	selp.b32 	%r464, %r427, %r395, %p6;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r56, %r395, %r465, %p6;
	selp.b32 	%r57, %r465, %r427, %p6;
	selp.b32 	%r466, %r431, %r399, %p6;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r58, %r399, %r467, %p6;
	selp.b32 	%r59, %r467, %r431, %p6;
	selp.b32 	%r468, %r435, %r403, %p6;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r60, %r403, %r469, %p6;
	selp.b32 	%r61, %r469, %r435, %p6;
	selp.b32 	%r470, %r439, %r407, %p6;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r62, %r407, %r471, %p6;
	selp.b32 	%r63, %r471, %r439, %p6;
	shl.b32 	%r472, %r4, 3;
	and.b32  	%r64, %r472, 128;
	and.b32  	%r65, %r1, 12;
	shl.b32 	%r66, %r4, 7;
	and.b32  	%r67, %r66, 1920;
	shl.b32 	%r68, %r3, 2;
	and.b32  	%r473, %r68, 28;
	and.b32  	%r69, %r472, 3840;
	and.b32  	%r474, %r2, 96;
	or.b32  	%r70, %r473, %r474;
	shl.b32 	%r71, %r3, 3;
	and.b32  	%r475, %r71, 24;
	or.b32  	%r72, %r475, %r474;
	and.b32  	%r73, %r29, 6;
	and.b32  	%r476, %r1, 3;
	and.b16  	%rs44, %rs29, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs29, %rs47;
	cvt.u32.u16 	%r477, %rs48;
	and.b32  	%r478, %r477, 255;
	mul.lo.s32 	%r479, %r476, 3200;
	or.b32  	%r74, %r479, %r478;
	or.b16  	%rs49, %rs29, 8;
	and.b16  	%rs50, %rs49, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs49, %rs53;
	cvt.u32.u16 	%r480, %rs54;
	and.b32  	%r481, %r480, 255;
	or.b32  	%r75, %r479, %r481;
	and.b32  	%r482, %r3, 7;
	shl.b32 	%r76, %r83, %r10;
	min.u32 	%r77, %r349, 31;
	mul.lo.s32 	%r484, %r482, 100;
	add.s32 	%r485, %r484, %r8;
	mul.wide.u32 	%rd44, %r485, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd46, %rd45, 16512;
	add.s64 	%rd6, %rd46, %rd44;
	cvt.u64.u32 	%rd47, %r484;
	cvt.u64.u32 	%rd48, %r8;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd7, %rd46, %rd50;
	add.s32 	%r486, %r484, 800;
	add.s32 	%r487, %r486, %r8;
	mul.wide.u32 	%rd51, %r487, 4;
	add.s64 	%rd8, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r486;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd9, %rd46, %rd54;
	add.s32 	%r488, %r484, 1600;
	add.s32 	%r489, %r488, %r8;
	mul.wide.u32 	%rd55, %r489, 4;
	add.s64 	%rd10, %rd46, %rd55;
	cvt.u64.u32 	%rd56, %r488;
	add.s64 	%rd57, %rd48, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd11, %rd46, %rd58;
	or.b32  	%r490, %r3, 24;
	mul.lo.s32 	%r491, %r490, 100;
	add.s32 	%r492, %r491, %r8;
	mul.wide.u32 	%rd59, %r492, 4;
	add.s64 	%rd12, %rd46, %rd59;
	cvt.u64.u32 	%rd60, %r491;
	add.s64 	%rd61, %rd48, %rd60;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd13, %rd46, %rd62;
	mov.u32 	%r1299, 0;
	setp.lt.u32 	%p7, %r1, 16;
	mov.u32 	%r1300, %r1299;
	mov.u32 	%r1301, %r1299;
	mov.u32 	%r1302, %r1299;
	mov.u32 	%r1303, %r1299;
	mov.u32 	%r1304, %r1299;
	mov.u32 	%r1305, %r1299;
$L__BB0_7:                              // %L2391
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_9 Depth 2
	@%p7 bra 	$L__BB0_12;
	bra.uni 	$L__BB0_8;
$L__BB0_12:                             // %pass1072
                                        //   in Loop: Header=BB0_7 Depth=1
	or.b32  	%r493, %r1299, %r65;
	or.b32  	%r494, %r493, %r7;
	add.s32 	%r495, %r494, %r67;
	shl.b32 	%r496, %r495, 12;
	and.b32  	%r497, %r496, 8318976;
	or.b32  	%r498, %r497, %r64;
	or.b32  	%r499, %r498, %r69;
	or.b32  	%r500, %r499, %r70;
	shl.b32 	%r501, %r500, 2;
	cvt.u64.u32 	%rd63, %r501;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.v4.u32 	{%r502, %r503, %r504, %r505}, [%rd64];
	or.b32  	%r506, %r494, 16;
	add.s32 	%r507, %r506, %r67;
	shl.b32 	%r508, %r507, 12;
	and.b32  	%r509, %r508, 8384512;
	or.b32  	%r510, %r509, %r64;
	or.b32  	%r511, %r510, %r69;
	or.b32  	%r512, %r511, %r70;
	shl.b32 	%r513, %r512, 2;
	cvt.u64.u32 	%rd65, %r513;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.v4.u32 	{%r514, %r515, %r516, %r517}, [%rd66];
	and.b32  	%r518, %r495, 15;
	mul.lo.s32 	%r519, %r518, 129;
	add.s32 	%r520, %r70, %r519;
	mul.wide.u32 	%rd67, %r520, 4;
	add.s64 	%rd69, %rd45, %rd67;
	st.shared.u32 	[%rd69], %r502;
	cvt.u64.u32 	%rd70, %r519;
	cvt.u64.u32 	%rd71, %r70;
	add.s64 	%rd72, %rd71, %rd70;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd45, %rd73;
	st.shared.u32 	[%rd74+4], %r503;
	st.shared.u32 	[%rd74+8], %r504;
	st.shared.u32 	[%rd74+12], %r505;
	and.b32  	%r521, %r507, 31;
	mul.lo.s32 	%r522, %r521, 129;
	add.s32 	%r523, %r70, %r522;
	mul.wide.u32 	%rd75, %r523, 4;
	add.s64 	%rd76, %rd45, %rd75;
	st.shared.u32 	[%rd76], %r514;
	cvt.u64.u32 	%rd77, %r522;
	add.s64 	%rd78, %rd71, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd45, %rd79;
	st.shared.u32 	[%rd80+4], %r515;
	st.shared.u32 	[%rd80+8], %r516;
	st.shared.u32 	[%rd80+12], %r517;
$L__BB0_8:                              // %L4084
                                        //   in Loop: Header=BB0_7 Depth=1
	bar.sync 	0;
	mov.u32 	%r537, 0;
	mov.u32 	%r1306, %r537;
$L__BB0_9:                              // %L4086
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r1049, %r1306, %r28;
	mad.lo.s32 	%r1050, %r1049, 129, %r72;
	mul.wide.u32 	%rd81, %r1050, 4;
	add.s64 	%rd83, %rd45, %rd81;
	ld.shared.u32 	%r526, [%rd83];
	mov.u32 	%r527, 134744072;
	mov.u32 	%r528, 252645135;
	// begin inline asm
	lop3.b32 %r525, %r526, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1051, %r525, 2021161080;
	xor.b32  	%r536, %r1051, -2139062144;
	shr.u32 	%r530, %r526, 4;
	// begin inline asm
	lop3.b32 %r529, %r530, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1052, %r529, 2021161080;
	xor.b32  	%r542, %r1052, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r533, %r534}, {%r32}, {%r536}, {%r537, %r537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r539, %r540}, {%r36}, {%r542}, {%r537, %r537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r545, %r546}, {%r32}, {%r542}, {%r537, %r537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r551, %r552}, {%r36}, {%r536}, {%r545, %r546};
	// end inline asm
	ld.shared.u32 	%r558, [%rd83+4];
	// begin inline asm
	lop3.b32 %r557, %r558, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1053, %r557, 2021161080;
	xor.b32  	%r568, %r1053, -2139062144;
	shr.u32 	%r562, %r558, 4;
	// begin inline asm
	lop3.b32 %r561, %r562, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1054, %r561, 2021161080;
	xor.b32  	%r574, %r1054, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r565, %r566}, {%r40}, {%r568}, {%r533, %r534};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r571, %r572}, {%r44}, {%r574}, {%r539, %r540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r577, %r578}, {%r40}, {%r574}, {%r551, %r552};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r583, %r584}, {%r44}, {%r568}, {%r577, %r578};
	// end inline asm
	ld.shared.u32 	%r590, [%rd83+8];
	// begin inline asm
	lop3.b32 %r589, %r590, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1055, %r589, 2021161080;
	xor.b32  	%r600, %r1055, -2139062144;
	shr.u32 	%r594, %r590, 4;
	// begin inline asm
	lop3.b32 %r593, %r594, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1056, %r593, 2021161080;
	xor.b32  	%r606, %r1056, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r597, %r598}, {%r48}, {%r600}, {%r565, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r603, %r604}, {%r52}, {%r606}, {%r571, %r572};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r609, %r610}, {%r48}, {%r606}, {%r583, %r584};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r615, %r616}, {%r52}, {%r600}, {%r609, %r610};
	// end inline asm
	ld.shared.u32 	%r622, [%rd83+12];
	// begin inline asm
	lop3.b32 %r621, %r622, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1057, %r621, 2021161080;
	xor.b32  	%r632, %r1057, -2139062144;
	shr.u32 	%r626, %r622, 4;
	// begin inline asm
	lop3.b32 %r625, %r626, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1058, %r625, 2021161080;
	xor.b32  	%r638, %r1058, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r629, %r630}, {%r56}, {%r632}, {%r597, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r635, %r636}, {%r60}, {%r638}, {%r603, %r604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r641, %r642}, {%r56}, {%r638}, {%r615, %r616};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r647, %r648}, {%r60}, {%r632}, {%r641, %r642};
	// end inline asm
	ld.shared.u32 	%r654, [%rd83+16];
	// begin inline asm
	lop3.b32 %r653, %r654, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1059, %r653, 2021161080;
	xor.b32  	%r664, %r1059, -2139062144;
	shr.u32 	%r658, %r654, 4;
	// begin inline asm
	lop3.b32 %r657, %r658, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1060, %r657, 2021161080;
	xor.b32  	%r670, %r1060, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r661, %r662}, {%r33}, {%r664}, {%r629, %r630};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r667, %r668}, {%r37}, {%r670}, {%r635, %r636};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r673, %r674}, {%r33}, {%r670}, {%r647, %r648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r679, %r680}, {%r37}, {%r664}, {%r673, %r674};
	// end inline asm
	ld.shared.u32 	%r686, [%rd83+20];
	// begin inline asm
	lop3.b32 %r685, %r686, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1061, %r685, 2021161080;
	xor.b32  	%r696, %r1061, -2139062144;
	shr.u32 	%r690, %r686, 4;
	// begin inline asm
	lop3.b32 %r689, %r690, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1062, %r689, 2021161080;
	xor.b32  	%r702, %r1062, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r693, %r694}, {%r41}, {%r696}, {%r661, %r662};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r699, %r700}, {%r45}, {%r702}, {%r667, %r668};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r705, %r706}, {%r41}, {%r702}, {%r679, %r680};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r711, %r712}, {%r45}, {%r696}, {%r705, %r706};
	// end inline asm
	ld.shared.u32 	%r718, [%rd83+24];
	// begin inline asm
	lop3.b32 %r717, %r718, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1063, %r717, 2021161080;
	xor.b32  	%r728, %r1063, -2139062144;
	shr.u32 	%r722, %r718, 4;
	// begin inline asm
	lop3.b32 %r721, %r722, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1064, %r721, 2021161080;
	xor.b32  	%r734, %r1064, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r725, %r726}, {%r49}, {%r728}, {%r693, %r694};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r731, %r732}, {%r53}, {%r734}, {%r699, %r700};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r737, %r738}, {%r49}, {%r734}, {%r711, %r712};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r743, %r744}, {%r53}, {%r728}, {%r737, %r738};
	// end inline asm
	ld.shared.u32 	%r750, [%rd83+28];
	// begin inline asm
	lop3.b32 %r749, %r750, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1065, %r749, 2021161080;
	xor.b32  	%r760, %r1065, -2139062144;
	shr.u32 	%r754, %r750, 4;
	// begin inline asm
	lop3.b32 %r753, %r754, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1066, %r753, 2021161080;
	xor.b32  	%r766, %r1066, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r757, %r758}, {%r57}, {%r760}, {%r725, %r726};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r763, %r764}, {%r61}, {%r766}, {%r731, %r732};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r769, %r770}, {%r57}, {%r766}, {%r743, %r744};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r775, %r776}, {%r61}, {%r760}, {%r769, %r770};
	// end inline asm
	sub.s32 	%r1067, %r757, %r763;
	add.s32 	%r1068, %r1067, 4;
	shr.s32 	%r783, %r1068, 3;
	add.s32 	%r1069, %r775, 4;
	shr.s32 	%r782, %r1069, 3;
	sub.s32 	%r1070, %r758, %r764;
	add.s32 	%r1071, %r1070, 4;
	shr.s32 	%r786, %r1071, 3;
	add.s32 	%r1072, %r776, 4;
	shr.s32 	%r785, %r1072, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r781, %r782, %r783;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r784, %r785, %r786;
	// end inline asm
	or.b32  	%r1073, %r73, %r1306;
	mul.lo.s32 	%r1074, %r1073, 100;
	add.s32 	%r1075, %r74, %r1074;
	mul.wide.u32 	%rd84, %r1075, 4;
	add.s64 	%rd86, %rd46, %rd84;
	st.shared.u32 	[%rd86], %r781;
	add.s32 	%r1076, %r1074, 100;
	add.s32 	%r1077, %r74, %r1076;
	mul.wide.u32 	%rd87, %r1077, 4;
	add.s64 	%rd88, %rd46, %rd87;
	st.shared.u32 	[%rd88], %r784;
	ld.shared.u32 	%r788, [%rd83];
	// begin inline asm
	lop3.b32 %r787, %r788, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1078, %r787, 2021161080;
	xor.b32  	%r798, %r1078, -2139062144;
	shr.u32 	%r792, %r788, 4;
	// begin inline asm
	lop3.b32 %r791, %r792, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1079, %r791, 2021161080;
	xor.b32  	%r804, %r1079, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r795, %r796}, {%r34}, {%r798}, {%r537, %r537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r801, %r802}, {%r38}, {%r804}, {%r537, %r537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r807, %r808}, {%r34}, {%r804}, {%r537, %r537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r813, %r814}, {%r38}, {%r798}, {%r807, %r808};
	// end inline asm
	ld.shared.u32 	%r820, [%rd83+4];
	// begin inline asm
	lop3.b32 %r819, %r820, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1080, %r819, 2021161080;
	xor.b32  	%r830, %r1080, -2139062144;
	shr.u32 	%r824, %r820, 4;
	// begin inline asm
	lop3.b32 %r823, %r824, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1081, %r823, 2021161080;
	xor.b32  	%r836, %r1081, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r827, %r828}, {%r42}, {%r830}, {%r795, %r796};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r833, %r834}, {%r46}, {%r836}, {%r801, %r802};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r839, %r840}, {%r42}, {%r836}, {%r813, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r845, %r846}, {%r46}, {%r830}, {%r839, %r840};
	// end inline asm
	ld.shared.u32 	%r852, [%rd83+8];
	// begin inline asm
	lop3.b32 %r851, %r852, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1082, %r851, 2021161080;
	xor.b32  	%r862, %r1082, -2139062144;
	shr.u32 	%r856, %r852, 4;
	// begin inline asm
	lop3.b32 %r855, %r856, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1083, %r855, 2021161080;
	xor.b32  	%r868, %r1083, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r859, %r860}, {%r50}, {%r862}, {%r827, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r865, %r866}, {%r54}, {%r868}, {%r833, %r834};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r871, %r872}, {%r50}, {%r868}, {%r845, %r846};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r877, %r878}, {%r54}, {%r862}, {%r871, %r872};
	// end inline asm
	ld.shared.u32 	%r884, [%rd83+12];
	// begin inline asm
	lop3.b32 %r883, %r884, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1084, %r883, 2021161080;
	xor.b32  	%r894, %r1084, -2139062144;
	shr.u32 	%r888, %r884, 4;
	// begin inline asm
	lop3.b32 %r887, %r888, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1085, %r887, 2021161080;
	xor.b32  	%r900, %r1085, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r891, %r892}, {%r58}, {%r894}, {%r859, %r860};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r897, %r898}, {%r62}, {%r900}, {%r865, %r866};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r903, %r904}, {%r58}, {%r900}, {%r877, %r878};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r909, %r910}, {%r62}, {%r894}, {%r903, %r904};
	// end inline asm
	ld.shared.u32 	%r916, [%rd83+16];
	// begin inline asm
	lop3.b32 %r915, %r916, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1086, %r915, 2021161080;
	xor.b32  	%r926, %r1086, -2139062144;
	shr.u32 	%r920, %r916, 4;
	// begin inline asm
	lop3.b32 %r919, %r920, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1087, %r919, 2021161080;
	xor.b32  	%r932, %r1087, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r923, %r924}, {%r35}, {%r926}, {%r891, %r892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r929, %r930}, {%r39}, {%r932}, {%r897, %r898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r935, %r936}, {%r35}, {%r932}, {%r909, %r910};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r941, %r942}, {%r39}, {%r926}, {%r935, %r936};
	// end inline asm
	ld.shared.u32 	%r948, [%rd83+20];
	// begin inline asm
	lop3.b32 %r947, %r948, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1088, %r947, 2021161080;
	xor.b32  	%r958, %r1088, -2139062144;
	shr.u32 	%r952, %r948, 4;
	// begin inline asm
	lop3.b32 %r951, %r952, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1089, %r951, 2021161080;
	xor.b32  	%r964, %r1089, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r955, %r956}, {%r43}, {%r958}, {%r923, %r924};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r961, %r962}, {%r47}, {%r964}, {%r929, %r930};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r967, %r968}, {%r43}, {%r964}, {%r941, %r942};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r973, %r974}, {%r47}, {%r958}, {%r967, %r968};
	// end inline asm
	ld.shared.u32 	%r980, [%rd83+24];
	// begin inline asm
	lop3.b32 %r979, %r980, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1090, %r979, 2021161080;
	xor.b32  	%r990, %r1090, -2139062144;
	shr.u32 	%r984, %r980, 4;
	// begin inline asm
	lop3.b32 %r983, %r984, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1091, %r983, 2021161080;
	xor.b32  	%r996, %r1091, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r987, %r988}, {%r51}, {%r990}, {%r955, %r956};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r993, %r994}, {%r55}, {%r996}, {%r961, %r962};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r999, %r1000}, {%r51}, {%r996}, {%r973, %r974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1005, %r1006}, {%r55}, {%r990}, {%r999, %r1000};
	// end inline asm
	ld.shared.u32 	%r1012, [%rd83+28];
	// begin inline asm
	lop3.b32 %r1011, %r1012, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1092, %r1011, 2021161080;
	xor.b32  	%r1022, %r1092, -2139062144;
	shr.u32 	%r1016, %r1012, 4;
	// begin inline asm
	lop3.b32 %r1015, %r1016, %r527, %r528, 40;
	// end inline asm
	add.s32 	%r1093, %r1015, 2021161080;
	xor.b32  	%r1028, %r1093, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1019, %r1020}, {%r59}, {%r1022}, {%r987, %r988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1025, %r1026}, {%r63}, {%r1028}, {%r993, %r994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1031, %r1032}, {%r59}, {%r1028}, {%r1005, %r1006};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1037, %r1038}, {%r63}, {%r1022}, {%r1031, %r1032};
	// end inline asm
	sub.s32 	%r1094, %r1019, %r1025;
	add.s32 	%r1095, %r1094, 4;
	shr.s32 	%r1045, %r1095, 3;
	add.s32 	%r1096, %r1037, 4;
	shr.s32 	%r1044, %r1096, 3;
	sub.s32 	%r1097, %r1020, %r1026;
	add.s32 	%r1098, %r1097, 4;
	shr.s32 	%r1048, %r1098, 3;
	add.s32 	%r1099, %r1038, 4;
	shr.s32 	%r1047, %r1099, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1043, %r1044, %r1045;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1046, %r1047, %r1048;
	// end inline asm
	add.s32 	%r1100, %r75, %r1074;
	mul.wide.u32 	%rd89, %r1100, 4;
	add.s64 	%rd90, %rd46, %rd89;
	st.shared.u32 	[%rd90], %r1043;
	add.s32 	%r1101, %r75, %r1076;
	mul.wide.u32 	%rd91, %r1101, 4;
	add.s64 	%rd92, %rd46, %rd91;
	st.shared.u32 	[%rd92], %r1046;
	add.s32 	%r1306, %r1306, 8;
	setp.ne.s32 	%p8, %r1306, 32;
	@%p8 bra 	$L__BB0_9;
// %bb.10:                              // %L7817
                                        //   in Loop: Header=BB0_7 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r1120, [%rd6];
	ld.shared.u32 	%r1121, [%rd7+12800];
	ld.shared.u32 	%r1122, [%rd7+25600];
	ld.shared.u32 	%r1123, [%rd7+38400];
	ld.shared.u32 	%r1124, [%rd8];
	ld.shared.u32 	%r1125, [%rd9+12800];
	ld.shared.u32 	%r1126, [%rd9+25600];
	ld.shared.u32 	%r1127, [%rd9+38400];
	ld.shared.u32 	%r1128, [%rd10];
	ld.shared.u32 	%r1129, [%rd11+12800];
	ld.shared.u32 	%r1130, [%rd11+25600];
	ld.shared.u32 	%r1131, [%rd11+38400];
	ld.shared.u32 	%r1132, [%rd12];
	ld.shared.u32 	%r1133, [%rd13+12800];
	ld.shared.u32 	%r1134, [%rd13+25600];
	ld.shared.u32 	%r1135, [%rd13+38400];
	cvt.s32.s16 	%r1136, %r1120;
	shr.s32 	%r1137, %r1120, 16;
	cvt.s32.s16 	%r1138, %r1121;
	shr.s32 	%r1139, %r1121, 16;
	cvt.s32.s16 	%r1140, %r1122;
	shr.s32 	%r1141, %r1122, 16;
	cvt.s32.s16 	%r1142, %r1123;
	shr.s32 	%r1143, %r1123, 16;
	cvt.s32.s16 	%r1144, %r1124;
	shr.s32 	%r1145, %r1124, 16;
	cvt.s32.s16 	%r1146, %r1125;
	shr.s32 	%r1147, %r1125, 16;
	cvt.s32.s16 	%r1148, %r1126;
	shr.s32 	%r1149, %r1126, 16;
	cvt.s32.s16 	%r1150, %r1127;
	shr.s32 	%r1151, %r1127, 16;
	cvt.s32.s16 	%r1152, %r1128;
	shr.s32 	%r1153, %r1128, 16;
	cvt.s32.s16 	%r1154, %r1129;
	shr.s32 	%r1155, %r1129, 16;
	cvt.s32.s16 	%r1156, %r1130;
	shr.s32 	%r1157, %r1130, 16;
	cvt.s32.s16 	%r1158, %r1131;
	shr.s32 	%r1159, %r1131, 16;
	cvt.s32.s16 	%r1160, %r1132;
	shr.s32 	%r1161, %r1132, 16;
	cvt.s32.s16 	%r1162, %r1133;
	shr.s32 	%r1163, %r1133, 16;
	cvt.s32.s16 	%r1164, %r1134;
	shr.s32 	%r1165, %r1134, 16;
	cvt.s32.s16 	%r1166, %r1135;
	shr.s32 	%r1167, %r1135, 16;
	add.s32 	%r1168, %r1136, %r76;
	add.s32 	%r1169, %r1168, %r1138;
	add.s32 	%r1170, %r1169, %r1140;
	add.s32 	%r1171, %r1170, %r1142;
	shr.s32 	%r1172, %r1171, %r77;
	add.s32 	%r1173, %r1137, %r76;
	add.s32 	%r1174, %r1173, %r1139;
	add.s32 	%r1175, %r1174, %r1141;
	add.s32 	%r1176, %r1175, %r1143;
	shr.s32 	%r1177, %r1176, %r77;
	add.s32 	%r1178, %r1144, %r76;
	add.s32 	%r1179, %r1178, %r1146;
	add.s32 	%r1180, %r1179, %r1148;
	add.s32 	%r1181, %r1180, %r1150;
	shr.s32 	%r1182, %r1181, %r77;
	add.s32 	%r1183, %r1145, %r76;
	add.s32 	%r1184, %r1183, %r1147;
	add.s32 	%r1185, %r1184, %r1149;
	add.s32 	%r1186, %r1185, %r1151;
	shr.s32 	%r1187, %r1186, %r77;
	add.s32 	%r1188, %r1152, %r76;
	add.s32 	%r1189, %r1188, %r1154;
	add.s32 	%r1190, %r1189, %r1156;
	add.s32 	%r1191, %r1190, %r1158;
	shr.s32 	%r1192, %r1191, %r77;
	add.s32 	%r1193, %r1153, %r76;
	add.s32 	%r1194, %r1193, %r1155;
	add.s32 	%r1195, %r1194, %r1157;
	add.s32 	%r1196, %r1195, %r1159;
	shr.s32 	%r1197, %r1196, %r77;
	add.s32 	%r1198, %r1160, %r76;
	add.s32 	%r1199, %r1198, %r1162;
	add.s32 	%r1200, %r1199, %r1164;
	add.s32 	%r1201, %r1200, %r1166;
	shr.s32 	%r1202, %r1201, %r77;
	add.s32 	%r1203, %r1161, %r76;
	add.s32 	%r1204, %r1203, %r1163;
	add.s32 	%r1205, %r1204, %r1165;
	add.s32 	%r1206, %r1205, %r1167;
	shr.s32 	%r1207, %r1206, %r77;
	max.s32 	%r1208, %r1172, -7;
	min.s32 	%r1107, %r1208, 7;
	max.s32 	%r1209, %r1177, -7;
	min.s32 	%r1114, %r1209, 7;
	max.s32 	%r1210, %r1182, -7;
	min.s32 	%r1106, %r1210, 7;
	max.s32 	%r1211, %r1187, -7;
	min.s32 	%r1113, %r1211, 7;
	max.s32 	%r1212, %r1192, -7;
	min.s32 	%r1104, %r1212, 7;
	max.s32 	%r1213, %r1197, -7;
	min.s32 	%r1111, %r1213, 7;
	max.s32 	%r1214, %r1202, -7;
	min.s32 	%r1103, %r1214, 7;
	max.s32 	%r1215, %r1207, -7;
	min.s32 	%r1110, %r1215, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1102, %r1103, %r1104, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1105, %r1106, %r1107, %r1102;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1109, %r1110, %r1111, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1112, %r1113, %r1114, %r1109;
	// end inline asm
	shl.b32 	%r1119, %r1112, 4;
	// begin inline asm
	lop3.b32 %r1226, %r528, %r1105, %r1119, 202;
	// end inline asm
	setp.eq.s32 	%p9, %r1299, 0;
	selp.b32 	%r1304, %r1226, %r1304, %p9;
	selp.b32 	%r1305, %r1226, %r1305, %p9;
	setp.eq.s32 	%p10, %r1299, 32;
	selp.b32 	%r1300, %r1226, %r1300, %p10;
	selp.b32 	%r1301, %r1226, %r1301, %p10;
	setp.eq.s32 	%p11, %r1299, 64;
	selp.b32 	%r1302, %r1226, %r1302, %p11;
	selp.b32 	%r1303, %r1226, %r1303, %p11;
	add.s32 	%r27, %r1299, 32;
	setp.ne.s32 	%p12, %r1299, 96;
	mov.u32 	%r1299, %r27;
	@%p12 bra 	$L__BB0_7;
// %bb.11:                              // %L10201
	// begin inline asm
	prmt.b32 %r1216, %r1304, %r1300, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1220, %r1305, %r1301, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1224, %r1302, %r1226, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1228, %r1303, %r1226, %r347;
	// end inline asm
	and.b32  	%r1264, %r3, 1;
	setp.eq.b32 	%p15, %r1264, 1;
	selp.b32 	%r1265, %r1216, %r1220, %p15;
	shfl.sync.bfly.b32	%r1266, %r1265, 1, 31, -1;
	selp.b32 	%r1237, %r1266, %r1216, %p15;
	selp.b32 	%r1238, %r1220, %r1266, %p15;
	selp.b32 	%r1267, %r1224, %r1228, %p15;
	shfl.sync.bfly.b32	%r1268, %r1267, 1, 31, -1;
	selp.b32 	%r1245, %r1268, %r1224, %p15;
	selp.b32 	%r1246, %r1228, %r1268, %p15;
	// begin inline asm
	prmt.b32 %r1232, %r1237, %r1238, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1236, %r1237, %r1238, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1240, %r1245, %r1246, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1244, %r1245, %r1246, %r347;
	// end inline asm
	selp.b32 	%r1269, %r1240, %r1232, %p5;
	shfl.sync.bfly.b32	%r1270, %r1269, 2, 31, -1;
	selp.b32 	%r1249, %r1232, %r1270, %p5;
	selp.b32 	%r1250, %r1270, %r1240, %p5;
	selp.b32 	%r1271, %r1244, %r1236, %p5;
	shfl.sync.bfly.b32	%r1272, %r1271, 2, 31, -1;
	selp.b32 	%r1257, %r1236, %r1272, %p5;
	selp.b32 	%r1258, %r1272, %r1244, %p5;
	// begin inline asm
	prmt.b32 %r1248, %r1249, %r1250, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1252, %r1249, %r1250, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1256, %r1257, %r1258, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1260, %r1257, %r1258, %r219;
	// end inline asm
	selp.b32 	%r1273, %r1256, %r1248, %p6;
	shfl.sync.bfly.b32	%r1274, %r1273, 4, 31, -1;
	selp.b32 	%r1275, %r1248, %r1274, %p6;
	selp.b32 	%r1276, %r1274, %r1256, %p6;
	selp.b32 	%r1277, %r1260, %r1252, %p6;
	shfl.sync.bfly.b32	%r1278, %r1277, 4, 31, -1;
	selp.b32 	%r1279, %r1252, %r1278, %p6;
	selp.b32 	%r1280, %r1278, %r1260, %p6;
	selp.b32 	%r1281, %r1275, %r1279, %p15;
	shfl.sync.bfly.b32	%r1282, %r1281, 1, 31, -1;
	selp.b32 	%r1283, %r1276, %r1280, %p15;
	shfl.sync.bfly.b32	%r1284, %r1283, 1, 31, -1;
	and.b32  	%r1285, %r29, 8;
	and.b32  	%r1286, %r71, 16;
	and.b32  	%r1287, %r68, 4;
	selp.b32 	%r1288, %r1280, %r1284, %p15;
	selp.b32 	%r1289, %r1284, %r1276, %p15;
	selp.b32 	%r1290, %r1279, %r1282, %p15;
	selp.b32 	%r1291, %r1282, %r1275, %p15;
	or.b32  	%r1292, %r1285, %r1286;
	or.b32  	%r1293, %r1292, %r1287;
	shl.b32 	%r1294, %r8, 16;
	shl.b32 	%r1295, %r1293, 2;
	or.b32  	%r1296, %r66, %r1295;
	or.b32  	%r1297, %r1294, %r1296;
	cvt.u64.u32 	%rd93, %r1297;
	add.s64 	%rd94, %rd15, %rd93;
	st.global.v4.u32 	[%rd94], {%r1291, %r1289, %r1290, %r1288};
	mov.u32 	%r1298, 0;
	st.global.u32 	[%rd5], %r1298;
	ret;
$L__BB0_1:                              // %L8
	mov.u64 	%rd19, exception1;
	cvta.global.u64 	%rd20, %rd19;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd20;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L25
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_5:                              // %L254
	mov.u32 	%r91, 2;
	st.global.u32 	[%rd5], %r91;
	mov.u64 	%rd26, exception784;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
