// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception880[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<56>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1346>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r84, 16511;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r85, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r85, 67711;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r82, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r86, %r3, 768, %r2;
	or.b32  	%r87, %r86, %r4;
	mul.wide.u32 	%rd22, %r87, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r88, 1;
	st.global.u32 	[%rd7], %r88;
	setp.gt.u32 	%p8, %r82, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r83, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r83, %r82;
	setp.gt.s32 	%p10, %r83, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r89, %r83, %r82;
	and.b32  	%r90, %r89, 127;
	setp.eq.s32 	%p12, %r90, 0;
	@%p12 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_7;
$L__BB0_21:                             // %pass120
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r91, %r1, 2;
	and.b32  	%r75, %r3, 1;
	neg.s32 	%r92, %r75;
	and.b32  	%r93, %r92, 96;
	shr.u32 	%r94, %r3, 1;
	cvt.u16.u32 	%rs1, %r94;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r95, %rs6;
	and.b32  	%r76, %r95, 255;
	shr.u32 	%r77, %r4, 3;
	or.b32  	%r96, %r91, %r77;
	cvt.u16.u32 	%rs7, %r96;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 14;
	mul.lo.s16 	%rs11, %rs10, 96;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r97, %rs12;
	and.b32  	%r78, %r97, 255;
	mad.lo.s32 	%r98, %r76, 192, %r93;
	add.s32 	%r99, %r98, %r78;
	mul.wide.u32 	%rd23, %r99, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r100, [%rd24];
	add.s32 	%r80, %r100, -4;
	setp.lt.u32 	%p13, %r80, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_22;
$L__BB0_8:                              // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r79, %r100, -3;
	or.b32  	%r102, %r4, %r1;
	setp.ne.s32 	%p1, %r102, 0;
	mul.wide.u32 	%rd27, %r3, 4;
	add.s64 	%rd8, %rd6, %rd27;
	mov.u32 	%r1337, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L487
	st.global.u32 	[%rd8], %r1337;
$L__BB0_10:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p15, %r75, 0;
	bar.sync 	0;
	shl.b32 	%r361, %r1, 6;
	shl.b32 	%r362, %r4, 4;
	and.b32  	%r5, %r362, 16;
	shl.b32 	%r363, %r4, 1;
	and.b32  	%r364, %r363, 12;
	and.b32  	%r365, %r361, 192;
	or.b32  	%r366, %r365, %r5;
	or.b32  	%r367, %r364, %r366;
	selp.b32 	%r368, 0, 24576, %p15;
	shr.u32 	%r6, %r4, 2;
	shr.u32 	%r369, %r1, 2;
	cvt.u16.u32 	%rs13, %r369;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	cvt.u16.u32 	%rs19, %r6;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r370, %rs27, 256;
	or.b32  	%r371, %r367, %r368;
	mad.lo.s32 	%r372, %r76, 49152, %r371;
	add.s32 	%r373, %r372, %r370;
	shl.b32 	%r374, %r373, 2;
	cvt.u64.u32 	%rd28, %r374;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r105, %r106, %r121, %r122}, [%rd29];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r375, %rs34, 256;
	add.s32 	%r376, %r372, %r375;
	shl.b32 	%r377, %r376, 2;
	cvt.u64.u32 	%rd30, %r377;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r113, %r114, %r129, %r130}, [%rd31];
	or.b32  	%r378, %r372, 33;
	add.s32 	%r379, %r378, %r370;
	mul.wide.u32 	%rd32, %r379, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r137, %r138, %r153, %r154}, [%rd33+-4];
	add.s32 	%r380, %r378, %r375;
	mul.wide.u32 	%rd34, %r380, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r145, %r146, %r161, %r162}, [%rd35+-4];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r381, %rs42, 256;
	add.s32 	%r382, %r372, %r381;
	shl.b32 	%r383, %r382, 2;
	cvt.u64.u32 	%rd36, %r383;
	add.s64 	%rd37, %rd1, %rd36;
	ld.global.v4.u32 	{%r169, %r170, %r185, %r186}, [%rd37];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r384, %rs49, 256;
	add.s32 	%r385, %r372, %r384;
	shl.b32 	%r386, %r385, 2;
	cvt.u64.u32 	%rd38, %r386;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.v4.u32 	{%r177, %r178, %r193, %r194}, [%rd39];
	add.s32 	%r387, %r378, %r381;
	mul.wide.u32 	%rd40, %r387, 4;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.v4.u32 	{%r201, %r202, %r217, %r218}, [%rd41+-4];
	add.s32 	%r388, %r378, %r384;
	mul.wide.u32 	%rd42, %r388, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.v4.u32 	{%r209, %r210, %r225, %r226}, [%rd43+-4];
	mov.u32 	%r227, 21520;
	// begin inline asm
	prmt.b32 %r233, %r105, %r106, %r227;
	// end inline asm
	mov.u32 	%r231, 30258;
	// begin inline asm
	prmt.b32 %r234, %r105, %r106, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r113, %r114, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r113, %r114, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r121, %r122, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r121, %r122, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r129, %r130, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r129, %r130, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r137, %r138, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r137, %r138, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r145, %r146, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r145, %r146, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r153, %r154, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r153, %r154, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r161, %r162, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r161, %r162, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r169, %r170, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r169, %r170, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r177, %r178, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r177, %r178, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r185, %r186, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r185, %r186, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r193, %r194, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r193, %r194, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r201, %r202, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r201, %r202, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r209, %r210, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r209, %r210, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r217, %r218, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r217, %r218, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r353, %r225, %r226, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r354, %r225, %r226, %r231;
	// end inline asm
	mov.u32 	%r355, 25152;
	// begin inline asm
	prmt.b32 %r232, %r233, %r234, %r355;
	// end inline asm
	mov.u32 	%r359, 29521;
	// begin inline asm
	prmt.b32 %r236, %r233, %r234, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r241, %r242, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r241, %r242, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r249, %r250, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r249, %r250, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r257, %r258, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r257, %r258, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r265, %r266, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r265, %r266, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r273, %r274, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r273, %r274, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r281, %r282, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r281, %r282, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r289, %r290, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r289, %r290, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r297, %r298, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r297, %r298, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r305, %r306, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r305, %r306, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r313, %r314, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r313, %r314, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r321, %r322, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r321, %r322, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r329, %r330, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r329, %r330, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r337, %r338, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r337, %r338, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r345, %r346, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r345, %r346, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r353, %r354, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r356, %r353, %r354, %r359;
	// end inline asm
	and.b32  	%r7, %r4, 2;
	setp.eq.s32 	%p16, %r7, 0;
	selp.b32 	%r389, %r264, %r232, %p16;
	shfl.sync.bfly.b32	%r390, %r389, 2, 31, -1;
	selp.b32 	%r391, %r232, %r390, %p16;
	selp.b32 	%r392, %r390, %r264, %p16;
	selp.b32 	%r393, %r272, %r240, %p16;
	shfl.sync.bfly.b32	%r394, %r393, 2, 31, -1;
	selp.b32 	%r395, %r240, %r394, %p16;
	selp.b32 	%r396, %r394, %r272, %p16;
	selp.b32 	%r397, %r268, %r236, %p16;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r236, %r398, %p16;
	selp.b32 	%r400, %r398, %r268, %p16;
	selp.b32 	%r401, %r276, %r244, %p16;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r244, %r402, %p16;
	selp.b32 	%r404, %r402, %r276, %p16;
	selp.b32 	%r405, %r280, %r248, %p16;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r248, %r406, %p16;
	selp.b32 	%r408, %r406, %r280, %p16;
	selp.b32 	%r409, %r288, %r256, %p16;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r256, %r410, %p16;
	selp.b32 	%r412, %r410, %r288, %p16;
	selp.b32 	%r413, %r284, %r252, %p16;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r252, %r414, %p16;
	selp.b32 	%r416, %r414, %r284, %p16;
	selp.b32 	%r417, %r292, %r260, %p16;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r260, %r418, %p16;
	selp.b32 	%r420, %r418, %r292, %p16;
	selp.b32 	%r421, %r328, %r296, %p16;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r296, %r422, %p16;
	selp.b32 	%r424, %r422, %r328, %p16;
	selp.b32 	%r425, %r336, %r304, %p16;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r304, %r426, %p16;
	selp.b32 	%r428, %r426, %r336, %p16;
	selp.b32 	%r429, %r332, %r300, %p16;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r300, %r430, %p16;
	selp.b32 	%r432, %r430, %r332, %p16;
	selp.b32 	%r433, %r340, %r308, %p16;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r308, %r434, %p16;
	selp.b32 	%r436, %r434, %r340, %p16;
	selp.b32 	%r437, %r344, %r312, %p16;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r312, %r438, %p16;
	selp.b32 	%r440, %r438, %r344, %p16;
	selp.b32 	%r441, %r352, %r320, %p16;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r320, %r442, %p16;
	selp.b32 	%r444, %r442, %r352, %p16;
	selp.b32 	%r445, %r348, %r316, %p16;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r316, %r446, %p16;
	selp.b32 	%r448, %r446, %r348, %p16;
	selp.b32 	%r449, %r356, %r324, %p16;
	shfl.sync.bfly.b32	%r450, %r449, 2, 31, -1;
	selp.b32 	%r451, %r324, %r450, %p16;
	selp.b32 	%r452, %r450, %r356, %p16;
	and.b32  	%r8, %r4, 4;
	setp.eq.s32 	%p17, %r8, 0;
	selp.b32 	%r453, %r423, %r391, %p17;
	shfl.sync.bfly.b32	%r454, %r453, 4, 31, -1;
	selp.b32 	%r9, %r391, %r454, %p17;
	selp.b32 	%r10, %r454, %r423, %p17;
	selp.b32 	%r455, %r427, %r395, %p17;
	shfl.sync.bfly.b32	%r456, %r455, 4, 31, -1;
	selp.b32 	%r11, %r395, %r456, %p17;
	selp.b32 	%r12, %r456, %r427, %p17;
	selp.b32 	%r457, %r431, %r399, %p17;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r13, %r399, %r458, %p17;
	selp.b32 	%r14, %r458, %r431, %p17;
	selp.b32 	%r459, %r435, %r403, %p17;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r15, %r403, %r460, %p17;
	selp.b32 	%r16, %r460, %r435, %p17;
	selp.b32 	%r461, %r439, %r407, %p17;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r17, %r407, %r462, %p17;
	selp.b32 	%r18, %r462, %r439, %p17;
	selp.b32 	%r463, %r443, %r411, %p17;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r19, %r411, %r464, %p17;
	selp.b32 	%r20, %r464, %r443, %p17;
	selp.b32 	%r465, %r447, %r415, %p17;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r21, %r415, %r466, %p17;
	selp.b32 	%r22, %r466, %r447, %p17;
	selp.b32 	%r467, %r451, %r419, %p17;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r23, %r419, %r468, %p17;
	selp.b32 	%r24, %r468, %r451, %p17;
	selp.b32 	%r469, %r424, %r392, %p17;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r25, %r392, %r470, %p17;
	selp.b32 	%r26, %r470, %r424, %p17;
	selp.b32 	%r471, %r428, %r396, %p17;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r27, %r396, %r472, %p17;
	selp.b32 	%r28, %r472, %r428, %p17;
	selp.b32 	%r473, %r432, %r400, %p17;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r29, %r400, %r474, %p17;
	selp.b32 	%r30, %r474, %r432, %p17;
	selp.b32 	%r475, %r436, %r404, %p17;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r31, %r404, %r476, %p17;
	selp.b32 	%r32, %r476, %r436, %p17;
	selp.b32 	%r477, %r440, %r408, %p17;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r33, %r408, %r478, %p17;
	selp.b32 	%r34, %r478, %r440, %p17;
	selp.b32 	%r479, %r444, %r412, %p17;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r35, %r412, %r480, %p17;
	selp.b32 	%r36, %r480, %r444, %p17;
	selp.b32 	%r481, %r448, %r416, %p17;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r37, %r416, %r482, %p17;
	selp.b32 	%r38, %r482, %r448, %p17;
	selp.b32 	%r483, %r452, %r420, %p17;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r39, %r420, %r484, %p17;
	selp.b32 	%r40, %r484, %r452, %p17;
	shl.b32 	%r485, %r4, 2;
	and.b32  	%r486, %r485, 28;
	and.b32  	%r487, %r2, 96;
	or.b32  	%r41, %r487, %r486;
	shl.b32 	%r488, %r76, 8;
	shl.b32 	%r489, %r3, 7;
	and.b32  	%r490, %r489, 128;
	and.b32  	%r42, %r1, 12;
	or.b32  	%r491, %r41, %r490;
	or.b32  	%r43, %r491, %r488;
	shl.b32 	%r492, %r4, 3;
	and.b32  	%r493, %r492, 24;
	or.b32  	%r44, %r487, %r493;
	and.b32  	%r494, %r1, 3;
	mul.lo.s32 	%r495, %r494, 3200;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r496, %rs54;
	and.b32  	%r497, %r496, 255;
	and.b32  	%r45, %r363, 6;
	or.b32  	%r46, %r495, %r497;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r498, %rs60;
	and.b32  	%r499, %r498, 255;
	or.b32  	%r47, %r495, %r499;
	and.b32  	%r500, %r4, 7;
	shl.b32 	%r502, %r88, %r80;
	setp.gt.u32 	%p18, %r80, 31;
	selp.b32 	%r48, 0, %r502, %p18;
	min.u32 	%r49, %r79, 31;
	and.b32  	%r50, %r4, 1;
	shl.b32 	%r503, %r76, 12;
	shl.b32 	%r504, %r3, 11;
	and.b32  	%r505, %r504, 2048;
	shl.b32 	%r506, %r4, 5;
	and.b32  	%r51, %r506, 64;
	or.b32  	%r507, %r503, %r505;
	mad.lo.s32 	%r508, %r78, 196608, %r507;
	mul.lo.s32 	%r509, %r500, 100;
	add.s32 	%r510, %r509, %r78;
	mul.wide.u32 	%rd44, %r510, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd46, %rd45, 16512;
	add.s64 	%rd9, %rd46, %rd44;
	cvt.u64.u32 	%rd47, %r509;
	cvt.u64.u32 	%rd48, %r78;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd10, %rd46, %rd50;
	add.s32 	%r511, %r509, 800;
	add.s32 	%r512, %r511, %r78;
	mul.wide.u32 	%rd51, %r512, 4;
	add.s64 	%rd11, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r511;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd12, %rd46, %rd54;
	add.s32 	%r513, %r509, 1600;
	add.s32 	%r514, %r513, %r78;
	mul.wide.u32 	%rd55, %r514, 4;
	add.s64 	%rd13, %rd46, %rd55;
	cvt.u64.u32 	%rd56, %r513;
	add.s64 	%rd57, %rd48, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd14, %rd46, %rd58;
	or.b32  	%r515, %r4, 24;
	mul.lo.s32 	%r516, %r515, 100;
	add.s32 	%r517, %r516, %r78;
	mul.wide.u32 	%rd59, %r517, 4;
	add.s64 	%rd15, %rd46, %rd59;
	cvt.u64.u32 	%rd60, %r516;
	add.s64 	%rd61, %rd48, %rd60;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd16, %rd46, %rd62;
	and.b32  	%r52, %r492, 32;
	shl.b32 	%r53, %r508, 2;
	mov.pred 	%p55, 0;
$L__BB0_11:                             // %L2565
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_15 Depth 3
	add.s32 	%r518, %r1337, %r82;
	setp.ge.s32 	%p19, %r518, %r83;
	@%p19 bra 	$L__BB0_18;
// %bb.12:                              // %L2573.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r55, %r1337, %r77;
	or.b32  	%r56, %r55, 16;
	mov.u32 	%r1338, 0;
	mov.u32 	%r1339, %r1338;
	mov.u32 	%r1340, %r1338;
	mov.u32 	%r1341, %r1338;
	mov.u32 	%r1342, %r1338;
	mov.u32 	%r1343, %r1338;
	mov.u32 	%r1344, %r1338;
$L__BB0_13:                             // %L2573
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_15 Depth 3
	setp.lt.u32 	%p20, %r1, 16;
	@%p20 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_14;
$L__BB0_23:                             // %pass1213
                                        //   in Loop: Header=BB0_13 Depth=2
	add.s32 	%r520, %r55, %r1338;
	or.b32  	%r521, %r520, %r42;
	and.b32  	%r522, %r521, 32751;
	add.s32 	%r523, %r522, %r82;
	mad.lo.s32 	%r524, %r523, 12288, %r43;
	mul.hi.s32 	%r525, %r524, 715827883;
	shr.u32 	%r526, %r525, 31;
	shr.s32 	%r527, %r525, 26;
	add.s32 	%r528, %r527, %r526;
	setp.lt.s32 	%p21, %r524, 0;
	mul.lo.s32 	%r529, %r528, 402653184;
	setp.ne.s32 	%p22, %r529, %r524;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r530, -1, 0, %p23;
	add.s32 	%r531, %r528, %r530;
	or.b32  	%r532, %r524, 1;
	mad.lo.s32 	%r533, %r531, -402653184, %r532;
	mul.wide.s32 	%rd63, %r533, 4;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.v4.u32 	{%r534, %r535, %r536, %r537}, [%rd64+-4];
	add.s32 	%r538, %r1338, %r56;
	or.b32  	%r539, %r538, %r42;
	and.b32  	%r540, %r539, 32767;
	add.s32 	%r541, %r540, %r82;
	mad.lo.s32 	%r542, %r541, 12288, %r43;
	mul.hi.s32 	%r543, %r542, 715827883;
	shr.u32 	%r544, %r543, 31;
	shr.s32 	%r545, %r543, 26;
	add.s32 	%r546, %r545, %r544;
	setp.lt.s32 	%p24, %r542, 0;
	mul.lo.s32 	%r547, %r546, 402653184;
	setp.ne.s32 	%p25, %r547, %r542;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r548, -1, 0, %p26;
	add.s32 	%r549, %r546, %r548;
	or.b32  	%r550, %r542, 1;
	mad.lo.s32 	%r551, %r549, -402653184, %r550;
	mul.wide.s32 	%rd65, %r551, 4;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.v4.u32 	{%r552, %r553, %r554, %r555}, [%rd66+-4];
	and.b32  	%r556, %r521, 15;
	mul.lo.s32 	%r557, %r556, 129;
	add.s32 	%r558, %r41, %r557;
	mul.wide.u32 	%rd67, %r558, 4;
	add.s64 	%rd69, %rd45, %rd67;
	st.shared.u32 	[%rd69], %r534;
	cvt.u64.u32 	%rd70, %r557;
	cvt.u64.u32 	%rd71, %r41;
	add.s64 	%rd72, %rd71, %rd70;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd45, %rd73;
	st.shared.u32 	[%rd74+4], %r535;
	st.shared.u32 	[%rd74+8], %r536;
	st.shared.u32 	[%rd74+12], %r537;
	and.b32  	%r559, %r539, 31;
	mul.lo.s32 	%r560, %r559, 129;
	add.s32 	%r561, %r41, %r560;
	mul.wide.u32 	%rd75, %r561, 4;
	add.s64 	%rd76, %rd45, %rd75;
	st.shared.u32 	[%rd76], %r552;
	cvt.u64.u32 	%rd77, %r560;
	add.s64 	%rd78, %rd71, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd45, %rd79;
	st.shared.u32 	[%rd80+4], %r553;
	st.shared.u32 	[%rd80+8], %r554;
	st.shared.u32 	[%rd80+12], %r555;
$L__BB0_14:                             // %L4300
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	mov.u32 	%r575, 0;
	mov.u32 	%r1345, %r575;
$L__BB0_15:                             // %L4302
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1087, %r1345, %r6;
	mad.lo.s32 	%r1088, %r1087, 129, %r44;
	mul.wide.u32 	%rd81, %r1088, 4;
	add.s64 	%rd83, %rd45, %rd81;
	ld.shared.u32 	%r564, [%rd83];
	mov.u32 	%r565, 134744072;
	mov.u32 	%r566, 252645135;
	// begin inline asm
	lop3.b32 %r563, %r564, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1089, %r563, 2021161080;
	xor.b32  	%r574, %r1089, -2139062144;
	shr.u32 	%r568, %r564, 4;
	// begin inline asm
	lop3.b32 %r567, %r568, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1090, %r567, 2021161080;
	xor.b32  	%r580, %r1090, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r571, %r572}, {%r9}, {%r574}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r577, %r578}, {%r13}, {%r580}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r583, %r584}, {%r9}, {%r580}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r589, %r590}, {%r13}, {%r574}, {%r583, %r584};
	// end inline asm
	ld.shared.u32 	%r596, [%rd83+4];
	// begin inline asm
	lop3.b32 %r595, %r596, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1091, %r595, 2021161080;
	xor.b32  	%r606, %r1091, -2139062144;
	shr.u32 	%r600, %r596, 4;
	// begin inline asm
	lop3.b32 %r599, %r600, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1092, %r599, 2021161080;
	xor.b32  	%r612, %r1092, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r603, %r604}, {%r17}, {%r606}, {%r571, %r572};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r609, %r610}, {%r21}, {%r612}, {%r577, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r615, %r616}, {%r17}, {%r612}, {%r589, %r590};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r621, %r622}, {%r21}, {%r606}, {%r615, %r616};
	// end inline asm
	ld.shared.u32 	%r628, [%rd83+8];
	// begin inline asm
	lop3.b32 %r627, %r628, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1093, %r627, 2021161080;
	xor.b32  	%r638, %r1093, -2139062144;
	shr.u32 	%r632, %r628, 4;
	// begin inline asm
	lop3.b32 %r631, %r632, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1094, %r631, 2021161080;
	xor.b32  	%r644, %r1094, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r635, %r636}, {%r25}, {%r638}, {%r603, %r604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r641, %r642}, {%r29}, {%r644}, {%r609, %r610};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r647, %r648}, {%r25}, {%r644}, {%r621, %r622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r653, %r654}, {%r29}, {%r638}, {%r647, %r648};
	// end inline asm
	ld.shared.u32 	%r660, [%rd83+12];
	// begin inline asm
	lop3.b32 %r659, %r660, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1095, %r659, 2021161080;
	xor.b32  	%r670, %r1095, -2139062144;
	shr.u32 	%r664, %r660, 4;
	// begin inline asm
	lop3.b32 %r663, %r664, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1096, %r663, 2021161080;
	xor.b32  	%r676, %r1096, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r667, %r668}, {%r33}, {%r670}, {%r635, %r636};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r673, %r674}, {%r37}, {%r676}, {%r641, %r642};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r679, %r680}, {%r33}, {%r676}, {%r653, %r654};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r685, %r686}, {%r37}, {%r670}, {%r679, %r680};
	// end inline asm
	ld.shared.u32 	%r692, [%rd83+16];
	// begin inline asm
	lop3.b32 %r691, %r692, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1097, %r691, 2021161080;
	xor.b32  	%r702, %r1097, -2139062144;
	shr.u32 	%r696, %r692, 4;
	// begin inline asm
	lop3.b32 %r695, %r696, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1098, %r695, 2021161080;
	xor.b32  	%r708, %r1098, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r699, %r700}, {%r10}, {%r702}, {%r667, %r668};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r705, %r706}, {%r14}, {%r708}, {%r673, %r674};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r711, %r712}, {%r10}, {%r708}, {%r685, %r686};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r717, %r718}, {%r14}, {%r702}, {%r711, %r712};
	// end inline asm
	ld.shared.u32 	%r724, [%rd83+20];
	// begin inline asm
	lop3.b32 %r723, %r724, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1099, %r723, 2021161080;
	xor.b32  	%r734, %r1099, -2139062144;
	shr.u32 	%r728, %r724, 4;
	// begin inline asm
	lop3.b32 %r727, %r728, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1100, %r727, 2021161080;
	xor.b32  	%r740, %r1100, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r731, %r732}, {%r18}, {%r734}, {%r699, %r700};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r737, %r738}, {%r22}, {%r740}, {%r705, %r706};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r743, %r744}, {%r18}, {%r740}, {%r717, %r718};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r749, %r750}, {%r22}, {%r734}, {%r743, %r744};
	// end inline asm
	ld.shared.u32 	%r756, [%rd83+24];
	// begin inline asm
	lop3.b32 %r755, %r756, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1101, %r755, 2021161080;
	xor.b32  	%r766, %r1101, -2139062144;
	shr.u32 	%r760, %r756, 4;
	// begin inline asm
	lop3.b32 %r759, %r760, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1102, %r759, 2021161080;
	xor.b32  	%r772, %r1102, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r763, %r764}, {%r26}, {%r766}, {%r731, %r732};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r769, %r770}, {%r30}, {%r772}, {%r737, %r738};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r775, %r776}, {%r26}, {%r772}, {%r749, %r750};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r781, %r782}, {%r30}, {%r766}, {%r775, %r776};
	// end inline asm
	ld.shared.u32 	%r788, [%rd83+28];
	// begin inline asm
	lop3.b32 %r787, %r788, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1103, %r787, 2021161080;
	xor.b32  	%r798, %r1103, -2139062144;
	shr.u32 	%r792, %r788, 4;
	// begin inline asm
	lop3.b32 %r791, %r792, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1104, %r791, 2021161080;
	xor.b32  	%r804, %r1104, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r795, %r796}, {%r34}, {%r798}, {%r763, %r764};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r801, %r802}, {%r38}, {%r804}, {%r769, %r770};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r807, %r808}, {%r34}, {%r804}, {%r781, %r782};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r813, %r814}, {%r38}, {%r798}, {%r807, %r808};
	// end inline asm
	sub.s32 	%r1105, %r795, %r801;
	add.s32 	%r1106, %r1105, 4;
	shr.s32 	%r821, %r1106, 3;
	add.s32 	%r1107, %r813, 4;
	shr.s32 	%r820, %r1107, 3;
	sub.s32 	%r1108, %r796, %r802;
	add.s32 	%r1109, %r1108, 4;
	shr.s32 	%r824, %r1109, 3;
	add.s32 	%r1110, %r814, 4;
	shr.s32 	%r823, %r1110, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r819, %r820, %r821;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r822, %r823, %r824;
	// end inline asm
	or.b32  	%r1111, %r1345, %r45;
	mul.lo.s32 	%r1112, %r1111, 100;
	add.s32 	%r1113, %r46, %r1112;
	mul.wide.u32 	%rd84, %r1113, 4;
	add.s64 	%rd86, %rd46, %rd84;
	st.shared.u32 	[%rd86], %r819;
	add.s32 	%r1114, %r1112, 100;
	add.s32 	%r1115, %r46, %r1114;
	mul.wide.u32 	%rd87, %r1115, 4;
	add.s64 	%rd88, %rd46, %rd87;
	st.shared.u32 	[%rd88], %r822;
	ld.shared.u32 	%r826, [%rd83];
	// begin inline asm
	lop3.b32 %r825, %r826, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1116, %r825, 2021161080;
	xor.b32  	%r836, %r1116, -2139062144;
	shr.u32 	%r830, %r826, 4;
	// begin inline asm
	lop3.b32 %r829, %r830, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1117, %r829, 2021161080;
	xor.b32  	%r842, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r833, %r834}, {%r11}, {%r836}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r839, %r840}, {%r15}, {%r842}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r845, %r846}, {%r11}, {%r842}, {%r575, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r851, %r852}, {%r15}, {%r836}, {%r845, %r846};
	// end inline asm
	ld.shared.u32 	%r858, [%rd83+4];
	// begin inline asm
	lop3.b32 %r857, %r858, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1118, %r857, 2021161080;
	xor.b32  	%r868, %r1118, -2139062144;
	shr.u32 	%r862, %r858, 4;
	// begin inline asm
	lop3.b32 %r861, %r862, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1119, %r861, 2021161080;
	xor.b32  	%r874, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r865, %r866}, {%r19}, {%r868}, {%r833, %r834};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r871, %r872}, {%r23}, {%r874}, {%r839, %r840};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r877, %r878}, {%r19}, {%r874}, {%r851, %r852};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r883, %r884}, {%r23}, {%r868}, {%r877, %r878};
	// end inline asm
	ld.shared.u32 	%r890, [%rd83+8];
	// begin inline asm
	lop3.b32 %r889, %r890, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1120, %r889, 2021161080;
	xor.b32  	%r900, %r1120, -2139062144;
	shr.u32 	%r894, %r890, 4;
	// begin inline asm
	lop3.b32 %r893, %r894, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1121, %r893, 2021161080;
	xor.b32  	%r906, %r1121, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r897, %r898}, {%r27}, {%r900}, {%r865, %r866};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r903, %r904}, {%r31}, {%r906}, {%r871, %r872};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r909, %r910}, {%r27}, {%r906}, {%r883, %r884};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r915, %r916}, {%r31}, {%r900}, {%r909, %r910};
	// end inline asm
	ld.shared.u32 	%r922, [%rd83+12];
	// begin inline asm
	lop3.b32 %r921, %r922, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1122, %r921, 2021161080;
	xor.b32  	%r932, %r1122, -2139062144;
	shr.u32 	%r926, %r922, 4;
	// begin inline asm
	lop3.b32 %r925, %r926, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1123, %r925, 2021161080;
	xor.b32  	%r938, %r1123, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r929, %r930}, {%r35}, {%r932}, {%r897, %r898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r935, %r936}, {%r39}, {%r938}, {%r903, %r904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r941, %r942}, {%r35}, {%r938}, {%r915, %r916};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r947, %r948}, {%r39}, {%r932}, {%r941, %r942};
	// end inline asm
	ld.shared.u32 	%r954, [%rd83+16];
	// begin inline asm
	lop3.b32 %r953, %r954, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1124, %r953, 2021161080;
	xor.b32  	%r964, %r1124, -2139062144;
	shr.u32 	%r958, %r954, 4;
	// begin inline asm
	lop3.b32 %r957, %r958, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1125, %r957, 2021161080;
	xor.b32  	%r970, %r1125, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r961, %r962}, {%r12}, {%r964}, {%r929, %r930};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r967, %r968}, {%r16}, {%r970}, {%r935, %r936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r973, %r974}, {%r12}, {%r970}, {%r947, %r948};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r979, %r980}, {%r16}, {%r964}, {%r973, %r974};
	// end inline asm
	ld.shared.u32 	%r986, [%rd83+20];
	// begin inline asm
	lop3.b32 %r985, %r986, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1126, %r985, 2021161080;
	xor.b32  	%r996, %r1126, -2139062144;
	shr.u32 	%r990, %r986, 4;
	// begin inline asm
	lop3.b32 %r989, %r990, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1127, %r989, 2021161080;
	xor.b32  	%r1002, %r1127, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r993, %r994}, {%r20}, {%r996}, {%r961, %r962};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r999, %r1000}, {%r24}, {%r1002}, {%r967, %r968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1005, %r1006}, {%r20}, {%r1002}, {%r979, %r980};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1011, %r1012}, {%r24}, {%r996}, {%r1005, %r1006};
	// end inline asm
	ld.shared.u32 	%r1018, [%rd83+24];
	// begin inline asm
	lop3.b32 %r1017, %r1018, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1128, %r1017, 2021161080;
	xor.b32  	%r1028, %r1128, -2139062144;
	shr.u32 	%r1022, %r1018, 4;
	// begin inline asm
	lop3.b32 %r1021, %r1022, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1129, %r1021, 2021161080;
	xor.b32  	%r1034, %r1129, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1025, %r1026}, {%r28}, {%r1028}, {%r993, %r994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1031, %r1032}, {%r32}, {%r1034}, {%r999, %r1000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1037, %r1038}, {%r28}, {%r1034}, {%r1011, %r1012};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1043, %r1044}, {%r32}, {%r1028}, {%r1037, %r1038};
	// end inline asm
	ld.shared.u32 	%r1050, [%rd83+28];
	// begin inline asm
	lop3.b32 %r1049, %r1050, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1130, %r1049, 2021161080;
	xor.b32  	%r1060, %r1130, -2139062144;
	shr.u32 	%r1054, %r1050, 4;
	// begin inline asm
	lop3.b32 %r1053, %r1054, %r565, %r566, 40;
	// end inline asm
	add.s32 	%r1131, %r1053, 2021161080;
	xor.b32  	%r1066, %r1131, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1057, %r1058}, {%r36}, {%r1060}, {%r1025, %r1026};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1063, %r1064}, {%r40}, {%r1066}, {%r1031, %r1032};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1069, %r1070}, {%r36}, {%r1066}, {%r1043, %r1044};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1075, %r1076}, {%r40}, {%r1060}, {%r1069, %r1070};
	// end inline asm
	sub.s32 	%r1132, %r1057, %r1063;
	add.s32 	%r1133, %r1132, 4;
	shr.s32 	%r1083, %r1133, 3;
	add.s32 	%r1134, %r1075, 4;
	shr.s32 	%r1082, %r1134, 3;
	sub.s32 	%r1135, %r1058, %r1064;
	add.s32 	%r1136, %r1135, 4;
	shr.s32 	%r1086, %r1136, 3;
	add.s32 	%r1137, %r1076, 4;
	shr.s32 	%r1085, %r1137, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1081, %r1082, %r1083;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1084, %r1085, %r1086;
	// end inline asm
	add.s32 	%r1138, %r47, %r1112;
	mul.wide.u32 	%rd89, %r1138, 4;
	add.s64 	%rd90, %rd46, %rd89;
	st.shared.u32 	[%rd90], %r1081;
	add.s32 	%r1139, %r47, %r1114;
	mul.wide.u32 	%rd91, %r1139, 4;
	add.s64 	%rd92, %rd46, %rd91;
	st.shared.u32 	[%rd92], %r1084;
	add.s32 	%r1345, %r1345, 8;
	setp.ne.s32 	%p27, %r1345, 32;
	@%p27 bra 	$L__BB0_15;
// %bb.16:                              // %L8035
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1158, [%rd9];
	ld.shared.u32 	%r1159, [%rd10+12800];
	ld.shared.u32 	%r1160, [%rd10+25600];
	ld.shared.u32 	%r1161, [%rd10+38400];
	ld.shared.u32 	%r1162, [%rd11];
	ld.shared.u32 	%r1163, [%rd12+12800];
	ld.shared.u32 	%r1164, [%rd12+25600];
	ld.shared.u32 	%r1165, [%rd12+38400];
	ld.shared.u32 	%r1166, [%rd13];
	ld.shared.u32 	%r1167, [%rd14+12800];
	ld.shared.u32 	%r1168, [%rd14+25600];
	ld.shared.u32 	%r1169, [%rd14+38400];
	ld.shared.u32 	%r1170, [%rd15];
	ld.shared.u32 	%r1171, [%rd16+12800];
	ld.shared.u32 	%r1172, [%rd16+25600];
	ld.shared.u32 	%r1173, [%rd16+38400];
	cvt.s32.s16 	%r1174, %r1158;
	shr.s32 	%r1175, %r1158, 16;
	cvt.s32.s16 	%r1176, %r1159;
	shr.s32 	%r1177, %r1159, 16;
	cvt.s32.s16 	%r1178, %r1160;
	shr.s32 	%r1179, %r1160, 16;
	cvt.s32.s16 	%r1180, %r1161;
	shr.s32 	%r1181, %r1161, 16;
	cvt.s32.s16 	%r1182, %r1162;
	shr.s32 	%r1183, %r1162, 16;
	cvt.s32.s16 	%r1184, %r1163;
	shr.s32 	%r1185, %r1163, 16;
	cvt.s32.s16 	%r1186, %r1164;
	shr.s32 	%r1187, %r1164, 16;
	cvt.s32.s16 	%r1188, %r1165;
	shr.s32 	%r1189, %r1165, 16;
	cvt.s32.s16 	%r1190, %r1166;
	shr.s32 	%r1191, %r1166, 16;
	cvt.s32.s16 	%r1192, %r1167;
	shr.s32 	%r1193, %r1167, 16;
	cvt.s32.s16 	%r1194, %r1168;
	shr.s32 	%r1195, %r1168, 16;
	cvt.s32.s16 	%r1196, %r1169;
	shr.s32 	%r1197, %r1169, 16;
	cvt.s32.s16 	%r1198, %r1170;
	shr.s32 	%r1199, %r1170, 16;
	cvt.s32.s16 	%r1200, %r1171;
	shr.s32 	%r1201, %r1171, 16;
	cvt.s32.s16 	%r1202, %r1172;
	shr.s32 	%r1203, %r1172, 16;
	cvt.s32.s16 	%r1204, %r1173;
	shr.s32 	%r1205, %r1173, 16;
	add.s32 	%r1206, %r1174, %r48;
	add.s32 	%r1207, %r1206, %r1176;
	add.s32 	%r1208, %r1207, %r1178;
	add.s32 	%r1209, %r1208, %r1180;
	shr.s32 	%r1210, %r1209, %r49;
	add.s32 	%r1211, %r1175, %r48;
	add.s32 	%r1212, %r1211, %r1177;
	add.s32 	%r1213, %r1212, %r1179;
	add.s32 	%r1214, %r1213, %r1181;
	shr.s32 	%r1215, %r1214, %r49;
	add.s32 	%r1216, %r1182, %r48;
	add.s32 	%r1217, %r1216, %r1184;
	add.s32 	%r1218, %r1217, %r1186;
	add.s32 	%r1219, %r1218, %r1188;
	shr.s32 	%r1220, %r1219, %r49;
	add.s32 	%r1221, %r1183, %r48;
	add.s32 	%r1222, %r1221, %r1185;
	add.s32 	%r1223, %r1222, %r1187;
	add.s32 	%r1224, %r1223, %r1189;
	shr.s32 	%r1225, %r1224, %r49;
	add.s32 	%r1226, %r1190, %r48;
	add.s32 	%r1227, %r1226, %r1192;
	add.s32 	%r1228, %r1227, %r1194;
	add.s32 	%r1229, %r1228, %r1196;
	shr.s32 	%r1230, %r1229, %r49;
	add.s32 	%r1231, %r1191, %r48;
	add.s32 	%r1232, %r1231, %r1193;
	add.s32 	%r1233, %r1232, %r1195;
	add.s32 	%r1234, %r1233, %r1197;
	shr.s32 	%r1235, %r1234, %r49;
	add.s32 	%r1236, %r1198, %r48;
	add.s32 	%r1237, %r1236, %r1200;
	add.s32 	%r1238, %r1237, %r1202;
	add.s32 	%r1239, %r1238, %r1204;
	shr.s32 	%r1240, %r1239, %r49;
	add.s32 	%r1241, %r1199, %r48;
	add.s32 	%r1242, %r1241, %r1201;
	add.s32 	%r1243, %r1242, %r1203;
	add.s32 	%r1244, %r1243, %r1205;
	shr.s32 	%r1245, %r1244, %r49;
	max.s32 	%r1246, %r1210, -7;
	min.s32 	%r1145, %r1246, 7;
	setp.ne.s32 	%p28, %r1145, %r1210;
	or.pred  	%p29, %p55, %p28;
	max.s32 	%r1247, %r1215, -7;
	min.s32 	%r1152, %r1247, 7;
	setp.ne.s32 	%p30, %r1152, %r1215;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r1248, %r1220, -7;
	min.s32 	%r1144, %r1248, 7;
	setp.ne.s32 	%p32, %r1144, %r1220;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r1249, %r1225, -7;
	min.s32 	%r1151, %r1249, 7;
	setp.ne.s32 	%p34, %r1151, %r1225;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r1250, %r1230, -7;
	min.s32 	%r1142, %r1250, 7;
	setp.ne.s32 	%p36, %r1142, %r1230;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r1251, %r1235, -7;
	min.s32 	%r1149, %r1251, 7;
	setp.ne.s32 	%p38, %r1149, %r1235;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r1252, %r1240, -7;
	min.s32 	%r1141, %r1252, 7;
	setp.ne.s32 	%p40, %r1141, %r1240;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r1253, %r1245, -7;
	min.s32 	%r1148, %r1253, 7;
	setp.ne.s32 	%p42, %r1148, %r1245;
	or.pred  	%p55, %p42, %p41;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1140, %r1141, %r1142, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1143, %r1144, %r1145, %r1140;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1147, %r1148, %r1149, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1150, %r1151, %r1152, %r1147;
	// end inline asm
	shl.b32 	%r1157, %r1150, 4;
	// begin inline asm
	lop3.b32 %r1264, %r566, %r1143, %r1157, 202;
	// end inline asm
	setp.eq.s32 	%p43, %r1338, 0;
	selp.b32 	%r1343, %r1264, %r1343, %p43;
	selp.b32 	%r1344, %r1264, %r1344, %p43;
	setp.eq.s32 	%p44, %r1338, 32;
	selp.b32 	%r1339, %r1264, %r1339, %p44;
	selp.b32 	%r1340, %r1264, %r1340, %p44;
	setp.eq.s32 	%p45, %r1338, 64;
	selp.b32 	%r1341, %r1264, %r1341, %p45;
	selp.b32 	%r1342, %r1264, %r1342, %p45;
	add.s32 	%r73, %r1338, 32;
	setp.ne.s32 	%p46, %r1338, 96;
	mov.u32 	%r1338, %r73;
	@%p46 bra 	$L__BB0_13;
// %bb.17:                              // %L10441.L10447_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p47, %r50, 0;
	// begin inline asm
	prmt.b32 %r1254, %r1343, %r1339, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1258, %r1344, %r1340, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1262, %r1341, %r1264, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1266, %r1342, %r1264, %r359;
	// end inline asm
	selp.b32 	%r1302, %r1258, %r1254, %p47;
	shfl.sync.bfly.b32	%r1303, %r1302, 1, 31, -1;
	selp.b32 	%r1271, %r1254, %r1303, %p47;
	selp.b32 	%r1272, %r1303, %r1258, %p47;
	selp.b32 	%r1304, %r1266, %r1262, %p47;
	shfl.sync.bfly.b32	%r1305, %r1304, 1, 31, -1;
	selp.b32 	%r1279, %r1262, %r1305, %p47;
	selp.b32 	%r1280, %r1305, %r1266, %p47;
	// begin inline asm
	prmt.b32 %r1270, %r1271, %r1272, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1274, %r1271, %r1272, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1279, %r1280, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1279, %r1280, %r359;
	// end inline asm
	selp.b32 	%r1306, %r1278, %r1270, %p16;
	shfl.sync.bfly.b32	%r1307, %r1306, 2, 31, -1;
	selp.b32 	%r1287, %r1270, %r1307, %p16;
	selp.b32 	%r1288, %r1307, %r1278, %p16;
	selp.b32 	%r1308, %r1282, %r1274, %p16;
	shfl.sync.bfly.b32	%r1309, %r1308, 2, 31, -1;
	selp.b32 	%r1295, %r1274, %r1309, %p16;
	selp.b32 	%r1296, %r1309, %r1282, %p16;
	// begin inline asm
	prmt.b32 %r1286, %r1287, %r1288, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1287, %r1288, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1295, %r1296, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1298, %r1295, %r1296, %r231;
	// end inline asm
	selp.b32 	%r1310, %r1294, %r1286, %p17;
	shfl.sync.bfly.b32	%r1311, %r1310, 4, 31, -1;
	selp.b32 	%r1312, %r1286, %r1311, %p17;
	selp.b32 	%r1313, %r1311, %r1294, %p17;
	selp.b32 	%r1314, %r1298, %r1290, %p17;
	shfl.sync.bfly.b32	%r1315, %r1314, 4, 31, -1;
	selp.b32 	%r1316, %r1290, %r1315, %p17;
	selp.b32 	%r1317, %r1315, %r1298, %p17;
	selp.b32 	%r1318, %r1316, %r1312, %p47;
	shfl.sync.bfly.b32	%r1319, %r1318, 1, 31, -1;
	selp.b32 	%r1320, %r1312, %r1319, %p47;
	selp.b32 	%r1321, %r1319, %r1316, %p47;
	selp.b32 	%r1322, %r1317, %r1313, %p47;
	shfl.sync.bfly.b32	%r1323, %r1322, 1, 31, -1;
	selp.b32 	%r1324, %r1313, %r1323, %p47;
	selp.b32 	%r1325, %r1323, %r1317, %p47;
	and.b32  	%r1326, %r1337, 8064;
	or.b32  	%r1327, %r1326, %r52;
	or.b32  	%r1328, %r1327, %r5;
	or.b32  	%r1329, %r1328, %r51;
	or.b32  	%r1330, %r1329, %r53;
	cvt.u64.u32 	%rd93, %r1330;
	add.s64 	%rd94, %rd4, %rd93;
	st.global.v4.u32 	[%rd94], {%r1320, %r1324, %r1321, %r1325};
	add.s32 	%r74, %r1337, 128;
	setp.ne.s32 	%p50, %r1337, 32640;
	mov.u32 	%r1337, %r74;
	@%p50 bra 	$L__BB0_11;
$L__BB0_18:                             // %L10828
	selp.u32 	%r1331, 1, 0, %p55;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r1331, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r1332, 1, 0, %p2; 
	}
	setp.eq.s32 	%p51, %r1332, 0;
	or.pred  	%p52, %p51, %p1;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %L10859
	st.global.u32 	[%rd8], %r88;
$L__BB0_20:                             // %L10905
	mov.u32 	%r1334, 0;
	st.global.u32 	[%rd7], %r1334;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r1335, 2;
	st.global.u32 	[%rd7], %r1335;
	mov.u64 	%rd95, exception880;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_22:                             // %L370
	mov.u32 	%r101, 3;
	st.global.u32 	[%rd7], %r101;
	mov.u64 	%rd25, exception880;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
