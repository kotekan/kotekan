// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception784[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<15>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<1343>;
	.reg .b64 	%rd<108>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r78, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd18, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r79, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r79, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r80, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r80, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L31
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r81, %r3, 768, %r2;
	or.b32  	%r82, %r81, %r4;
	mul.wide.u32 	%rd27, %r82, 4;
	add.s64 	%rd5, %rd4, %rd27;
	mov.u32 	%r83, 1;
	st.global.u32 	[%rd5], %r83;
	bfe.u32 	%r5, %r3, 4, 1;
	shl.b32 	%r84, %r1, 2;
	shr.u32 	%r6, %r4, 3;
	or.b32  	%r85, %r6, %r84;
	mul.hi.u32 	%r86, %r85, -1431655765;
	shr.u32 	%r87, %r86, 6;
	mul.lo.s32 	%r88, %r87, 96;
	sub.s32 	%r7, %r85, %r88;
	shr.u32 	%r8, %r3, 5;
	mad.lo.s32 	%r89, %r5, 96, %r7;
	mad.lo.s32 	%r90, %r8, 192, %r89;
	mul.wide.u32 	%rd28, %r90, 4;
	add.s64 	%rd29, %rd3, %rd28;
	ld.global.u32 	%r9, [%rd29];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L393
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	add.s32 	%r349, %r9, -3;
	mul.lo.s32 	%r350, %r5, 24576;
	shl.b32 	%r351, %r1, 6;
	shl.b32 	%r11, %r4, 1;
	or.b32  	%r352, %r11, %r351;
	shl.b32 	%r353, %r4, 4;
	and.b32  	%r354, %r353, 16;
	and.b32  	%r355, %r352, 204;
	or.b32  	%r356, %r355, %r354;
	shr.u32 	%r357, %r1, 2;
	cvt.u16.u32 	%rs1, %r357;
	mul.lo.s16 	%rs2, %rs1, 171;
	shr.u16 	%rs3, %rs2, 10;
	mul.lo.s16 	%rs4, %rs3, 6;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 4;
	cvt.u32.u16 	%r358, %rs6;
	and.b32  	%r359, %r358, 240;
	shr.u32 	%r12, %r4, 2;
	and.b32  	%r360, %r12, 6;
	or.b32  	%r361, %r360, %r359;
	cvt.u16.u32 	%rs7, %r361;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 14;
	mul.lo.s16 	%rs10, %rs9, 96;
	sub.s16 	%rs11, %rs7, %rs10;
	and.b16  	%rs12, %rs11, 246;
	mul.wide.u16 	%r362, %rs12, 256;
	mul.lo.s32 	%r363, %r8, 49152;
	or.b32  	%r364, %r356, %r350;
	add.s32 	%r365, %r364, %r363;
	add.s32 	%r366, %r365, %r362;
	shl.b32 	%r367, %r366, 2;
	cvt.u64.u32 	%rd32, %r367;
	add.s64 	%rd33, %rd32, %rd1;
	ld.global.v4.u32 	{%r93, %r94, %r109, %r110}, [%rd33];
	or.b16  	%rs13, %rs7, 8;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 14;
	mul.lo.s16 	%rs16, %rs15, 96;
	sub.s16 	%rs17, %rs13, %rs16;
	and.b16  	%rs18, %rs17, 254;
	mul.wide.u16 	%r368, %rs18, 256;
	add.s32 	%r369, %r365, %r368;
	shl.b32 	%r370, %r369, 2;
	cvt.u64.u32 	%rd34, %r370;
	add.s64 	%rd35, %rd34, %rd1;
	ld.global.v4.u32 	{%r101, %r102, %r117, %r118}, [%rd35];
	or.b32  	%r371, %r350, %r355;
	or.b32  	%r372, %r371, %r354;
	add.s32 	%r373, %r363, %r372;
	or.b32  	%r374, %r373, 32;
	add.s32 	%r375, %r374, %r362;
	shl.b32 	%r376, %r375, 2;
	cvt.u64.u32 	%rd36, %r376;
	add.s64 	%rd37, %rd1, %rd36;
	ld.global.v4.u32 	{%r125, %r126, %r141, %r142}, [%rd37];
	add.s32 	%r377, %r374, %r368;
	shl.b32 	%r378, %r377, 2;
	cvt.u64.u32 	%rd38, %r378;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.v4.u32 	{%r133, %r134, %r149, %r150}, [%rd39];
	or.b32  	%r379, %r12, %r359;
	or.b32  	%r380, %r379, 1;
	mul.hi.u32 	%r381, %r380, -1431655765;
	shr.u32 	%r382, %r381, 6;
	mul.lo.s32 	%r383, %r382, 96;
	sub.s32 	%r384, %r380, %r383;
	shl.b32 	%r385, %r384, 8;
	add.s32 	%r386, %r365, %r385;
	shl.b32 	%r387, %r386, 2;
	cvt.u64.u32 	%rd40, %r387;
	add.s64 	%rd41, %rd40, %rd1;
	ld.global.v4.u32 	{%r157, %r158, %r173, %r174}, [%rd41];
	or.b32  	%r388, %r379, 9;
	mul.hi.u32 	%r389, %r388, -1431655765;
	shr.u32 	%r390, %r389, 6;
	mul.lo.s32 	%r391, %r390, 96;
	sub.s32 	%r392, %r388, %r391;
	shl.b32 	%r393, %r392, 8;
	add.s32 	%r394, %r365, %r393;
	shl.b32 	%r395, %r394, 2;
	cvt.u64.u32 	%rd42, %r395;
	add.s64 	%rd43, %rd42, %rd1;
	ld.global.v4.u32 	{%r165, %r166, %r181, %r182}, [%rd43];
	add.s32 	%r396, %r374, %r385;
	shl.b32 	%r397, %r396, 2;
	cvt.u64.u32 	%rd44, %r397;
	add.s64 	%rd45, %rd1, %rd44;
	ld.global.v4.u32 	{%r189, %r190, %r205, %r206}, [%rd45];
	add.s32 	%r398, %r374, %r393;
	shl.b32 	%r399, %r398, 2;
	cvt.u64.u32 	%rd46, %r399;
	add.s64 	%rd47, %rd1, %rd46;
	ld.global.v4.u32 	{%r197, %r198, %r213, %r214}, [%rd47];
	mov.u32 	%r1282, 21520;
	// begin inline asm
	prmt.b32 %r221, %r93, %r94, %r1282;
	// end inline asm
	mov.u32 	%r1286, 30258;
	// begin inline asm
	prmt.b32 %r222, %r93, %r94, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r101, %r102, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r101, %r102, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r109, %r110, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r109, %r110, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r117, %r118, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r117, %r118, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r125, %r126, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r125, %r126, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r133, %r134, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r133, %r134, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r141, %r142, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r141, %r142, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r149, %r150, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r149, %r150, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r157, %r158, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r157, %r158, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r165, %r166, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r165, %r166, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r173, %r174, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r173, %r174, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r181, %r182, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r181, %r182, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r189, %r190, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r189, %r190, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r197, %r198, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r197, %r198, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r205, %r206, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r205, %r206, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r213, %r214, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r213, %r214, %r1286;
	// end inline asm
	mov.u32 	%r1250, 25152;
	// begin inline asm
	prmt.b32 %r220, %r221, %r222, %r1250;
	// end inline asm
	mov.u32 	%r1254, 29521;
	// begin inline asm
	prmt.b32 %r224, %r221, %r222, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r229, %r230, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r229, %r230, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r237, %r238, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r237, %r238, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r245, %r246, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r245, %r246, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r253, %r254, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r253, %r254, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r261, %r262, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r261, %r262, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r269, %r270, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r269, %r270, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r277, %r278, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r277, %r278, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r285, %r286, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r285, %r286, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r293, %r294, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r293, %r294, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r301, %r302, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r301, %r302, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r309, %r310, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r309, %r310, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r317, %r318, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r317, %r318, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r325, %r326, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r325, %r326, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r333, %r334, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r333, %r334, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r341, %r342, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r341, %r342, %r1254;
	// end inline asm
	and.b32  	%r13, %r4, 2;
	setp.eq.s32 	%p4, %r13, 0;
	selp.b32 	%r400, %r252, %r220, %p4;
	shfl.sync.bfly.b32	%r401, %r400, 2, 31, -1;
	selp.b32 	%r402, %r220, %r401, %p4;
	selp.b32 	%r403, %r401, %r252, %p4;
	selp.b32 	%r404, %r260, %r228, %p4;
	shfl.sync.bfly.b32	%r405, %r404, 2, 31, -1;
	selp.b32 	%r406, %r228, %r405, %p4;
	selp.b32 	%r407, %r405, %r260, %p4;
	selp.b32 	%r408, %r256, %r224, %p4;
	shfl.sync.bfly.b32	%r409, %r408, 2, 31, -1;
	selp.b32 	%r410, %r224, %r409, %p4;
	selp.b32 	%r411, %r409, %r256, %p4;
	selp.b32 	%r412, %r264, %r232, %p4;
	shfl.sync.bfly.b32	%r413, %r412, 2, 31, -1;
	selp.b32 	%r414, %r232, %r413, %p4;
	selp.b32 	%r415, %r413, %r264, %p4;
	selp.b32 	%r416, %r268, %r236, %p4;
	shfl.sync.bfly.b32	%r417, %r416, 2, 31, -1;
	selp.b32 	%r418, %r236, %r417, %p4;
	selp.b32 	%r419, %r417, %r268, %p4;
	selp.b32 	%r420, %r276, %r244, %p4;
	shfl.sync.bfly.b32	%r421, %r420, 2, 31, -1;
	selp.b32 	%r422, %r244, %r421, %p4;
	selp.b32 	%r423, %r421, %r276, %p4;
	selp.b32 	%r424, %r272, %r240, %p4;
	shfl.sync.bfly.b32	%r425, %r424, 2, 31, -1;
	selp.b32 	%r426, %r240, %r425, %p4;
	selp.b32 	%r427, %r425, %r272, %p4;
	selp.b32 	%r428, %r280, %r248, %p4;
	shfl.sync.bfly.b32	%r429, %r428, 2, 31, -1;
	selp.b32 	%r430, %r248, %r429, %p4;
	selp.b32 	%r431, %r429, %r280, %p4;
	selp.b32 	%r432, %r316, %r284, %p4;
	shfl.sync.bfly.b32	%r433, %r432, 2, 31, -1;
	selp.b32 	%r434, %r284, %r433, %p4;
	selp.b32 	%r435, %r433, %r316, %p4;
	selp.b32 	%r436, %r324, %r292, %p4;
	shfl.sync.bfly.b32	%r437, %r436, 2, 31, -1;
	selp.b32 	%r438, %r292, %r437, %p4;
	selp.b32 	%r439, %r437, %r324, %p4;
	selp.b32 	%r440, %r320, %r288, %p4;
	shfl.sync.bfly.b32	%r441, %r440, 2, 31, -1;
	selp.b32 	%r442, %r288, %r441, %p4;
	selp.b32 	%r443, %r441, %r320, %p4;
	selp.b32 	%r444, %r328, %r296, %p4;
	shfl.sync.bfly.b32	%r445, %r444, 2, 31, -1;
	selp.b32 	%r446, %r296, %r445, %p4;
	selp.b32 	%r447, %r445, %r328, %p4;
	selp.b32 	%r448, %r332, %r300, %p4;
	shfl.sync.bfly.b32	%r449, %r448, 2, 31, -1;
	selp.b32 	%r450, %r300, %r449, %p4;
	selp.b32 	%r451, %r449, %r332, %p4;
	selp.b32 	%r452, %r340, %r308, %p4;
	shfl.sync.bfly.b32	%r453, %r452, 2, 31, -1;
	selp.b32 	%r454, %r308, %r453, %p4;
	selp.b32 	%r455, %r453, %r340, %p4;
	selp.b32 	%r456, %r336, %r304, %p4;
	shfl.sync.bfly.b32	%r457, %r456, 2, 31, -1;
	selp.b32 	%r458, %r304, %r457, %p4;
	selp.b32 	%r459, %r457, %r336, %p4;
	selp.b32 	%r460, %r344, %r312, %p4;
	shfl.sync.bfly.b32	%r461, %r460, 2, 31, -1;
	selp.b32 	%r462, %r312, %r461, %p4;
	selp.b32 	%r463, %r461, %r344, %p4;
	and.b32  	%r14, %r4, 4;
	setp.eq.s32 	%p5, %r14, 0;
	selp.b32 	%r464, %r434, %r402, %p5;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r556, %r402, %r465, %p5;
	selp.b32 	%r684, %r465, %r434, %p5;
	selp.b32 	%r466, %r438, %r406, %p5;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r818, %r406, %r467, %p5;
	selp.b32 	%r946, %r467, %r438, %p5;
	selp.b32 	%r468, %r442, %r410, %p5;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r562, %r410, %r469, %p5;
	selp.b32 	%r690, %r469, %r442, %p5;
	selp.b32 	%r470, %r446, %r414, %p5;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r824, %r414, %r471, %p5;
	selp.b32 	%r952, %r471, %r446, %p5;
	selp.b32 	%r472, %r450, %r418, %p5;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r588, %r418, %r473, %p5;
	selp.b32 	%r716, %r473, %r450, %p5;
	selp.b32 	%r474, %r454, %r422, %p5;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r850, %r422, %r475, %p5;
	selp.b32 	%r978, %r475, %r454, %p5;
	selp.b32 	%r476, %r458, %r426, %p5;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r594, %r426, %r477, %p5;
	selp.b32 	%r722, %r477, %r458, %p5;
	selp.b32 	%r478, %r462, %r430, %p5;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r856, %r430, %r479, %p5;
	selp.b32 	%r984, %r479, %r462, %p5;
	selp.b32 	%r480, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r620, %r403, %r481, %p5;
	selp.b32 	%r748, %r481, %r435, %p5;
	selp.b32 	%r482, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r882, %r407, %r483, %p5;
	selp.b32 	%r1010, %r483, %r439, %p5;
	selp.b32 	%r484, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r626, %r411, %r485, %p5;
	selp.b32 	%r754, %r485, %r443, %p5;
	selp.b32 	%r486, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r888, %r415, %r487, %p5;
	selp.b32 	%r1016, %r487, %r447, %p5;
	selp.b32 	%r488, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r652, %r419, %r489, %p5;
	selp.b32 	%r780, %r489, %r451, %p5;
	selp.b32 	%r490, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r491, %r490, 4, 31, -1;
	selp.b32 	%r914, %r423, %r491, %p5;
	selp.b32 	%r1042, %r491, %r455, %p5;
	selp.b32 	%r492, %r459, %r427, %p5;
	shfl.sync.bfly.b32	%r493, %r492, 4, 31, -1;
	selp.b32 	%r658, %r427, %r493, %p5;
	selp.b32 	%r786, %r493, %r459, %p5;
	selp.b32 	%r494, %r463, %r431, %p5;
	shfl.sync.bfly.b32	%r495, %r494, 4, 31, -1;
	selp.b32 	%r920, %r431, %r495, %p5;
	selp.b32 	%r1048, %r495, %r463, %p5;
	shl.b32 	%r496, %r3, 3;
	and.b32  	%r497, %r496, 128;
	shl.b32 	%r47, %r4, 2;
	and.b32  	%r498, %r47, 28;
	and.b32  	%r48, %r2, 96;
	and.b32  	%r499, %r496, 3840;
	and.b32  	%r49, %r1, 12;
	shl.b32 	%r500, %r3, 7;
	and.b32  	%r50, %r500, 1920;
	or.b32  	%r501, %r48, %r497;
	or.b32  	%r502, %r501, %r498;
	or.b32  	%r51, %r502, %r499;
	or.b32  	%r503, %r6, %r49;
	mul.lo.s32 	%r504, %r503, 129;
	add.s32 	%r505, %r48, %r504;
	add.s32 	%r506, %r505, %r498;
	mul.wide.u32 	%rd48, %r506, 4;
	mov.u64 	%rd49, shmem;
	add.s64 	%rd6, %rd49, %rd48;
	or.b32  	%r507, %r48, %r498;
	cvt.u64.u32 	%rd50, %r507;
	cvt.u64.u32 	%rd51, %r504;
	add.s64 	%rd52, %rd51, %rd50;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd7, %rd49, %rd53;
	or.b32  	%r508, %r503, 16;
	mul.lo.s32 	%r509, %r508, 129;
	add.s32 	%r510, %r48, %r509;
	add.s32 	%r511, %r510, %r498;
	mul.wide.u32 	%rd54, %r511, 4;
	add.s64 	%rd8, %rd49, %rd54;
	cvt.u64.u32 	%rd55, %r509;
	add.s64 	%rd56, %rd55, %rd50;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd9, %rd49, %rd57;
	shl.b32 	%r52, %r4, 3;
	and.b32  	%r53, %r52, 24;
	or.b32  	%r54, %r48, %r53;
	and.b32  	%r512, %r1, 3;
	mul.lo.s32 	%r55, %r512, 3200;
	and.b32  	%r56, %r11, 6;
	mul.hi.u32 	%r513, %r379, -1431655765;
	shr.u32 	%r514, %r513, 6;
	mul.lo.s32 	%r515, %r514, 96;
	sub.s32 	%r57, %r379, %r515;
	or.b32  	%r516, %r379, 8;
	mul.hi.u32 	%r517, %r516, -1431655765;
	shr.u32 	%r518, %r517, 6;
	mul.lo.s32 	%r519, %r518, 96;
	sub.s32 	%r58, %r516, %r519;
	and.b32  	%r520, %r4, 7;
	mul.lo.s32 	%r521, %r520, 100;
	add.s32 	%r522, %r7, %r521;
	mul.wide.u32 	%rd58, %r522, 4;
	add.s64 	%rd59, %rd49, 16512;
	add.s64 	%rd10, %rd59, %rd58;
	cvt.u64.u32 	%rd60, %r7;
	cvt.u64.u32 	%rd61, %r521;
	add.s64 	%rd62, %rd61, %rd60;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd11, %rd59, %rd63;
	add.s32 	%r523, %r521, 800;
	add.s32 	%r524, %r7, %r523;
	mul.wide.u32 	%rd64, %r524, 4;
	add.s64 	%rd12, %rd59, %rd64;
	cvt.u64.u32 	%rd65, %r523;
	add.s64 	%rd66, %rd65, %rd60;
	shl.b64 	%rd67, %rd66, 2;
	add.s64 	%rd13, %rd59, %rd67;
	add.s32 	%r525, %r521, 1600;
	add.s32 	%r526, %r7, %r525;
	mul.wide.u32 	%rd68, %r526, 4;
	add.s64 	%rd14, %rd59, %rd68;
	cvt.u64.u32 	%rd69, %r525;
	add.s64 	%rd70, %rd69, %rd60;
	shl.b64 	%rd71, %rd70, 2;
	add.s64 	%rd15, %rd59, %rd71;
	or.b32  	%r527, %r4, 24;
	mul.lo.s32 	%r528, %r527, 100;
	add.s32 	%r529, %r7, %r528;
	mul.wide.u32 	%rd72, %r529, 4;
	add.s64 	%rd16, %rd59, %rd72;
	cvt.u64.u32 	%rd73, %r528;
	add.s64 	%rd74, %rd73, %rd60;
	shl.b64 	%rd75, %rd74, 2;
	add.s64 	%rd17, %rd59, %rd75;
	shl.b32 	%r59, %r83, %r10;
	min.u32 	%r60, %r349, 31;
	mov.u32 	%r1335, 0;
	setp.gt.u32 	%p6, %r1, 15;
	mov.u32 	%r1336, %r1335;
	mov.u32 	%r1337, %r1335;
	mov.u32 	%r1338, %r1335;
	mov.u32 	%r1339, %r1335;
	mov.u32 	%r1340, %r1335;
	mov.u32 	%r1341, %r1335;
LBB0_7:                                 // %L2691
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_10 Depth 2
	@%p6 bra 	LBB0_9;
// %bb.8:                               // %L2714
                                        //   in Loop: Header=BB0_7 Depth=1
	or.b32  	%r531, %r49, %r1335;
	or.b32  	%r532, %r531, %r6;
	or.b32  	%r533, %r532, %r50;
	shl.b32 	%r534, %r533, 12;
	or.b32  	%r535, %r51, %r534;
	mul.wide.u32 	%rd76, %r535, 4;
	add.s64 	%rd77, %rd2, %rd76;
	ld.global.v4.u32 	{%r536, %r537, %r538, %r539}, [%rd77];
	or.b32  	%r540, %r535, 65536;
	mul.wide.s32 	%rd78, %r540, 4;
	add.s64 	%rd79, %rd2, %rd78;
	ld.global.v4.u32 	{%r541, %r542, %r543, %r544}, [%rd79];
	st.shared.u32 	[%rd6], %r536;
	st.shared.u32 	[%rd7+4], %r537;
	st.shared.u32 	[%rd7+8], %r538;
	st.shared.u32 	[%rd7+12], %r539;
	st.shared.u32 	[%rd8], %r541;
	st.shared.u32 	[%rd9+4], %r542;
	st.shared.u32 	[%rd9+8], %r543;
	st.shared.u32 	[%rd9+12], %r544;
LBB0_9:                                 // %L4593
                                        //   in Loop: Header=BB0_7 Depth=1
	bar.sync 	0;
	mov.u32 	%r558, 0;
	mov.u32 	%r1342, %r558;
LBB0_10:                                // %L4595
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r1070, %r12, %r1342;
	mul.lo.s32 	%r1071, %r1070, 129;
	add.s32 	%r1072, %r48, %r1071;
	add.s32 	%r1073, %r1072, %r53;
	mul.wide.u32 	%rd80, %r1073, 4;
	add.s64 	%rd82, %rd49, %rd80;
	ld.shared.u32 	%r547, [%rd82];
	mov.u32 	%r548, 134744072;
	mov.u32 	%r549, 252645135;
	// begin inline asm
	lop3.b32 %r546, %r547, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1074, %r546, 2021161080;
	xor.b32  	%r557, %r1074, -2139062144;
	shr.u32 	%r551, %r547, 4;
	// begin inline asm
	lop3.b32 %r550, %r551, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1075, %r550, 2021161080;
	xor.b32  	%r563, %r1075, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r554, %r555}, {%r556}, {%r557}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r560, %r561}, {%r562}, {%r563}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r566, %r567}, {%r556}, {%r563}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r562}, {%r557}, {%r566, %r567};
	// end inline asm
	add.s32 	%r1076, %r1071, %r54;
	add.s32 	%r1077, %r1076, 1;
	mul.wide.u32 	%rd83, %r1077, 4;
	add.s64 	%rd84, %rd49, %rd83;
	ld.shared.u32 	%r579, [%rd84];
	// begin inline asm
	lop3.b32 %r578, %r579, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1078, %r578, 2021161080;
	xor.b32  	%r589, %r1078, -2139062144;
	shr.u32 	%r583, %r579, 4;
	// begin inline asm
	lop3.b32 %r582, %r583, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1079, %r582, 2021161080;
	xor.b32  	%r595, %r1079, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r586, %r587}, {%r588}, {%r589}, {%r554, %r555};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r594}, {%r595}, {%r560, %r561};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r598, %r599}, {%r588}, {%r595}, {%r572, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r594}, {%r589}, {%r598, %r599};
	// end inline asm
	add.s32 	%r1080, %r1076, 2;
	mul.wide.u32 	%rd85, %r1080, 4;
	add.s64 	%rd86, %rd49, %rd85;
	ld.shared.u32 	%r611, [%rd86];
	// begin inline asm
	lop3.b32 %r610, %r611, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1081, %r610, 2021161080;
	xor.b32  	%r621, %r1081, -2139062144;
	shr.u32 	%r615, %r611, 4;
	// begin inline asm
	lop3.b32 %r614, %r615, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1082, %r614, 2021161080;
	xor.b32  	%r627, %r1082, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r618, %r619}, {%r620}, {%r621}, {%r586, %r587};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r626}, {%r627}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r630, %r631}, {%r620}, {%r627}, {%r604, %r605};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r626}, {%r621}, {%r630, %r631};
	// end inline asm
	add.s32 	%r1083, %r1076, 3;
	mul.wide.u32 	%rd87, %r1083, 4;
	add.s64 	%rd88, %rd49, %rd87;
	ld.shared.u32 	%r643, [%rd88];
	// begin inline asm
	lop3.b32 %r642, %r643, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1084, %r642, 2021161080;
	xor.b32  	%r653, %r1084, -2139062144;
	shr.u32 	%r647, %r643, 4;
	// begin inline asm
	lop3.b32 %r646, %r647, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1085, %r646, 2021161080;
	xor.b32  	%r659, %r1085, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r650, %r651}, {%r652}, {%r653}, {%r618, %r619};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r658}, {%r659}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r662, %r663}, {%r652}, {%r659}, {%r636, %r637};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r668, %r669}, {%r658}, {%r653}, {%r662, %r663};
	// end inline asm
	add.s32 	%r1086, %r1076, 4;
	mul.wide.u32 	%rd89, %r1086, 4;
	add.s64 	%rd90, %rd49, %rd89;
	ld.shared.u32 	%r675, [%rd90];
	// begin inline asm
	lop3.b32 %r674, %r675, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1087, %r674, 2021161080;
	xor.b32  	%r685, %r1087, -2139062144;
	shr.u32 	%r679, %r675, 4;
	// begin inline asm
	lop3.b32 %r678, %r679, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1088, %r678, 2021161080;
	xor.b32  	%r691, %r1088, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r682, %r683}, {%r684}, {%r685}, {%r650, %r651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r688, %r689}, {%r690}, {%r691}, {%r656, %r657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r694, %r695}, {%r684}, {%r691}, {%r668, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r700, %r701}, {%r690}, {%r685}, {%r694, %r695};
	// end inline asm
	add.s32 	%r1089, %r1076, 5;
	mul.wide.u32 	%rd91, %r1089, 4;
	add.s64 	%rd92, %rd49, %rd91;
	ld.shared.u32 	%r707, [%rd92];
	// begin inline asm
	lop3.b32 %r706, %r707, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1090, %r706, 2021161080;
	xor.b32  	%r717, %r1090, -2139062144;
	shr.u32 	%r711, %r707, 4;
	// begin inline asm
	lop3.b32 %r710, %r711, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1091, %r710, 2021161080;
	xor.b32  	%r723, %r1091, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r714, %r715}, {%r716}, {%r717}, {%r682, %r683};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r720, %r721}, {%r722}, {%r723}, {%r688, %r689};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r726, %r727}, {%r716}, {%r723}, {%r700, %r701};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r732, %r733}, {%r722}, {%r717}, {%r726, %r727};
	// end inline asm
	add.s32 	%r1092, %r1076, 6;
	mul.wide.u32 	%rd93, %r1092, 4;
	add.s64 	%rd94, %rd49, %rd93;
	ld.shared.u32 	%r739, [%rd94];
	// begin inline asm
	lop3.b32 %r738, %r739, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1093, %r738, 2021161080;
	xor.b32  	%r749, %r1093, -2139062144;
	shr.u32 	%r743, %r739, 4;
	// begin inline asm
	lop3.b32 %r742, %r743, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1094, %r742, 2021161080;
	xor.b32  	%r755, %r1094, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r746, %r747}, {%r748}, {%r749}, {%r714, %r715};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r752, %r753}, {%r754}, {%r755}, {%r720, %r721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r758, %r759}, {%r748}, {%r755}, {%r732, %r733};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r764, %r765}, {%r754}, {%r749}, {%r758, %r759};
	// end inline asm
	add.s32 	%r1095, %r1076, 7;
	mul.wide.u32 	%rd95, %r1095, 4;
	add.s64 	%rd96, %rd49, %rd95;
	ld.shared.u32 	%r771, [%rd96];
	// begin inline asm
	lop3.b32 %r770, %r771, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1096, %r770, 2021161080;
	xor.b32  	%r781, %r1096, -2139062144;
	shr.u32 	%r775, %r771, 4;
	// begin inline asm
	lop3.b32 %r774, %r775, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1097, %r774, 2021161080;
	xor.b32  	%r787, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r778, %r779}, {%r780}, {%r781}, {%r746, %r747};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r784, %r785}, {%r786}, {%r787}, {%r752, %r753};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r790, %r791}, {%r780}, {%r787}, {%r764, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r796, %r797}, {%r786}, {%r781}, {%r790, %r791};
	// end inline asm
	sub.s32 	%r1098, %r778, %r784;
	add.s32 	%r1099, %r1098, 4;
	shr.s32 	%r804, %r1099, 3;
	add.s32 	%r1100, %r796, 4;
	shr.s32 	%r803, %r1100, 3;
	sub.s32 	%r1101, %r779, %r785;
	add.s32 	%r1102, %r1101, 4;
	shr.s32 	%r807, %r1102, 3;
	add.s32 	%r1103, %r797, 4;
	shr.s32 	%r806, %r1103, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r802, %r803, %r804;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r805, %r806, %r807;
	// end inline asm
	or.b32  	%r1104, %r56, %r1342;
	mad.lo.s32 	%r1105, %r1104, 100, %r55;
	add.s32 	%r1106, %r1105, %r57;
	mul.wide.u32 	%rd97, %r1106, 4;
	add.s64 	%rd99, %rd59, %rd97;
	st.shared.u32 	[%rd99], %r802;
	add.s32 	%r1107, %r1105, 100;
	add.s32 	%r1108, %r1107, %r57;
	mul.wide.u32 	%rd100, %r1108, 4;
	add.s64 	%rd101, %rd59, %rd100;
	st.shared.u32 	[%rd101], %r805;
	ld.shared.u32 	%r809, [%rd82];
	// begin inline asm
	lop3.b32 %r808, %r809, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1109, %r808, 2021161080;
	xor.b32  	%r819, %r1109, -2139062144;
	shr.u32 	%r813, %r809, 4;
	// begin inline asm
	lop3.b32 %r812, %r813, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1110, %r812, 2021161080;
	xor.b32  	%r825, %r1110, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r816, %r817}, {%r818}, {%r819}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r822, %r823}, {%r824}, {%r825}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r828, %r829}, {%r818}, {%r825}, {%r558, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r834, %r835}, {%r824}, {%r819}, {%r828, %r829};
	// end inline asm
	ld.shared.u32 	%r841, [%rd84];
	// begin inline asm
	lop3.b32 %r840, %r841, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1111, %r840, 2021161080;
	xor.b32  	%r851, %r1111, -2139062144;
	shr.u32 	%r845, %r841, 4;
	// begin inline asm
	lop3.b32 %r844, %r845, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1112, %r844, 2021161080;
	xor.b32  	%r857, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r848, %r849}, {%r850}, {%r851}, {%r816, %r817};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r854, %r855}, {%r856}, {%r857}, {%r822, %r823};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r860, %r861}, {%r850}, {%r857}, {%r834, %r835};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r866, %r867}, {%r856}, {%r851}, {%r860, %r861};
	// end inline asm
	ld.shared.u32 	%r873, [%rd86];
	// begin inline asm
	lop3.b32 %r872, %r873, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1113, %r872, 2021161080;
	xor.b32  	%r883, %r1113, -2139062144;
	shr.u32 	%r877, %r873, 4;
	// begin inline asm
	lop3.b32 %r876, %r877, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1114, %r876, 2021161080;
	xor.b32  	%r889, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r880, %r881}, {%r882}, {%r883}, {%r848, %r849};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r886, %r887}, {%r888}, {%r889}, {%r854, %r855};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r892, %r893}, {%r882}, {%r889}, {%r866, %r867};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r898, %r899}, {%r888}, {%r883}, {%r892, %r893};
	// end inline asm
	ld.shared.u32 	%r905, [%rd88];
	// begin inline asm
	lop3.b32 %r904, %r905, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1115, %r904, 2021161080;
	xor.b32  	%r915, %r1115, -2139062144;
	shr.u32 	%r909, %r905, 4;
	// begin inline asm
	lop3.b32 %r908, %r909, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1116, %r908, 2021161080;
	xor.b32  	%r921, %r1116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r912, %r913}, {%r914}, {%r915}, {%r880, %r881};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r918, %r919}, {%r920}, {%r921}, {%r886, %r887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r924, %r925}, {%r914}, {%r921}, {%r898, %r899};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r930, %r931}, {%r920}, {%r915}, {%r924, %r925};
	// end inline asm
	ld.shared.u32 	%r937, [%rd90];
	// begin inline asm
	lop3.b32 %r936, %r937, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1117, %r936, 2021161080;
	xor.b32  	%r947, %r1117, -2139062144;
	shr.u32 	%r941, %r937, 4;
	// begin inline asm
	lop3.b32 %r940, %r941, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1118, %r940, 2021161080;
	xor.b32  	%r953, %r1118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r944, %r945}, {%r946}, {%r947}, {%r912, %r913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r950, %r951}, {%r952}, {%r953}, {%r918, %r919};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r956, %r957}, {%r946}, {%r953}, {%r930, %r931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r962, %r963}, {%r952}, {%r947}, {%r956, %r957};
	// end inline asm
	ld.shared.u32 	%r969, [%rd92];
	// begin inline asm
	lop3.b32 %r968, %r969, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1119, %r968, 2021161080;
	xor.b32  	%r979, %r1119, -2139062144;
	shr.u32 	%r973, %r969, 4;
	// begin inline asm
	lop3.b32 %r972, %r973, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1120, %r972, 2021161080;
	xor.b32  	%r985, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r976, %r977}, {%r978}, {%r979}, {%r944, %r945};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r982, %r983}, {%r984}, {%r985}, {%r950, %r951};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r988, %r989}, {%r978}, {%r985}, {%r962, %r963};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r994, %r995}, {%r984}, {%r979}, {%r988, %r989};
	// end inline asm
	ld.shared.u32 	%r1001, [%rd94];
	// begin inline asm
	lop3.b32 %r1000, %r1001, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1121, %r1000, 2021161080;
	xor.b32  	%r1011, %r1121, -2139062144;
	shr.u32 	%r1005, %r1001, 4;
	// begin inline asm
	lop3.b32 %r1004, %r1005, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1122, %r1004, 2021161080;
	xor.b32  	%r1017, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1008, %r1009}, {%r1010}, {%r1011}, {%r976, %r977};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1014, %r1015}, {%r1016}, {%r1017}, {%r982, %r983};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1020, %r1021}, {%r1010}, {%r1017}, {%r994, %r995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1026, %r1027}, {%r1016}, {%r1011}, {%r1020, %r1021};
	// end inline asm
	ld.shared.u32 	%r1033, [%rd96];
	// begin inline asm
	lop3.b32 %r1032, %r1033, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1123, %r1032, 2021161080;
	xor.b32  	%r1043, %r1123, -2139062144;
	shr.u32 	%r1037, %r1033, 4;
	// begin inline asm
	lop3.b32 %r1036, %r1037, %r548, %r549, 40;
	// end inline asm
	add.s32 	%r1124, %r1036, 2021161080;
	xor.b32  	%r1049, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1040, %r1041}, {%r1042}, {%r1043}, {%r1008, %r1009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1046, %r1047}, {%r1048}, {%r1049}, {%r1014, %r1015};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1052, %r1053}, {%r1042}, {%r1049}, {%r1026, %r1027};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1058, %r1059}, {%r1048}, {%r1043}, {%r1052, %r1053};
	// end inline asm
	sub.s32 	%r1125, %r1040, %r1046;
	add.s32 	%r1126, %r1125, 4;
	shr.s32 	%r1066, %r1126, 3;
	add.s32 	%r1127, %r1058, 4;
	shr.s32 	%r1065, %r1127, 3;
	sub.s32 	%r1128, %r1041, %r1047;
	add.s32 	%r1129, %r1128, 4;
	shr.s32 	%r1069, %r1129, 3;
	add.s32 	%r1130, %r1059, 4;
	shr.s32 	%r1068, %r1130, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1064, %r1065, %r1066;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1067, %r1068, %r1069;
	// end inline asm
	add.s32 	%r1131, %r1105, %r58;
	mul.wide.u32 	%rd102, %r1131, 4;
	add.s64 	%rd103, %rd59, %rd102;
	st.shared.u32 	[%rd103], %r1064;
	add.s32 	%r1132, %r1107, %r58;
	mul.wide.u32 	%rd104, %r1132, 4;
	add.s64 	%rd105, %rd59, %rd104;
	st.shared.u32 	[%rd105], %r1067;
	add.s32 	%r1342, %r1342, 8;
	setp.ne.s32 	%p7, %r1342, 32;
	@%p7 bra 	LBB0_10;
// %bb.11:                              // %L8780
                                        //   in Loop: Header=BB0_7 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r1151, [%rd10];
	ld.shared.u32 	%r1152, [%rd11+12800];
	ld.shared.u32 	%r1153, [%rd11+25600];
	ld.shared.u32 	%r1154, [%rd11+38400];
	ld.shared.u32 	%r1155, [%rd12];
	ld.shared.u32 	%r1156, [%rd13+12800];
	ld.shared.u32 	%r1157, [%rd13+25600];
	ld.shared.u32 	%r1158, [%rd13+38400];
	ld.shared.u32 	%r1159, [%rd14];
	ld.shared.u32 	%r1160, [%rd15+12800];
	ld.shared.u32 	%r1161, [%rd15+25600];
	ld.shared.u32 	%r1162, [%rd15+38400];
	ld.shared.u32 	%r1163, [%rd16];
	ld.shared.u32 	%r1164, [%rd17+12800];
	ld.shared.u32 	%r1165, [%rd17+25600];
	ld.shared.u32 	%r1166, [%rd17+38400];
	cvt.s32.s16 	%r1167, %r1151;
	shr.s32 	%r1168, %r1151, 16;
	cvt.s32.s16 	%r1169, %r1152;
	shr.s32 	%r1170, %r1152, 16;
	cvt.s32.s16 	%r1171, %r1153;
	shr.s32 	%r1172, %r1153, 16;
	cvt.s32.s16 	%r1173, %r1154;
	shr.s32 	%r1174, %r1154, 16;
	cvt.s32.s16 	%r1175, %r1155;
	shr.s32 	%r1176, %r1155, 16;
	cvt.s32.s16 	%r1177, %r1156;
	shr.s32 	%r1178, %r1156, 16;
	cvt.s32.s16 	%r1179, %r1157;
	shr.s32 	%r1180, %r1157, 16;
	cvt.s32.s16 	%r1181, %r1158;
	shr.s32 	%r1182, %r1158, 16;
	cvt.s32.s16 	%r1183, %r1159;
	shr.s32 	%r1184, %r1159, 16;
	cvt.s32.s16 	%r1185, %r1160;
	shr.s32 	%r1186, %r1160, 16;
	cvt.s32.s16 	%r1187, %r1161;
	shr.s32 	%r1188, %r1161, 16;
	cvt.s32.s16 	%r1189, %r1162;
	shr.s32 	%r1190, %r1162, 16;
	cvt.s32.s16 	%r1191, %r1163;
	shr.s32 	%r1192, %r1163, 16;
	cvt.s32.s16 	%r1193, %r1164;
	shr.s32 	%r1194, %r1164, 16;
	cvt.s32.s16 	%r1195, %r1165;
	shr.s32 	%r1196, %r1165, 16;
	cvt.s32.s16 	%r1197, %r1166;
	shr.s32 	%r1198, %r1166, 16;
	add.s32 	%r1199, %r1167, %r59;
	add.s32 	%r1200, %r1199, %r1169;
	add.s32 	%r1201, %r1200, %r1171;
	add.s32 	%r1202, %r1201, %r1173;
	shr.s32 	%r1203, %r1202, %r60;
	add.s32 	%r1204, %r1168, %r59;
	add.s32 	%r1205, %r1204, %r1170;
	add.s32 	%r1206, %r1205, %r1172;
	add.s32 	%r1207, %r1206, %r1174;
	shr.s32 	%r1208, %r1207, %r60;
	add.s32 	%r1209, %r1175, %r59;
	add.s32 	%r1210, %r1209, %r1177;
	add.s32 	%r1211, %r1210, %r1179;
	add.s32 	%r1212, %r1211, %r1181;
	shr.s32 	%r1213, %r1212, %r60;
	add.s32 	%r1214, %r1176, %r59;
	add.s32 	%r1215, %r1214, %r1178;
	add.s32 	%r1216, %r1215, %r1180;
	add.s32 	%r1217, %r1216, %r1182;
	shr.s32 	%r1218, %r1217, %r60;
	add.s32 	%r1219, %r1183, %r59;
	add.s32 	%r1220, %r1219, %r1185;
	add.s32 	%r1221, %r1220, %r1187;
	add.s32 	%r1222, %r1221, %r1189;
	shr.s32 	%r1223, %r1222, %r60;
	add.s32 	%r1224, %r1184, %r59;
	add.s32 	%r1225, %r1224, %r1186;
	add.s32 	%r1226, %r1225, %r1188;
	add.s32 	%r1227, %r1226, %r1190;
	shr.s32 	%r1228, %r1227, %r60;
	add.s32 	%r1229, %r1191, %r59;
	add.s32 	%r1230, %r1229, %r1193;
	add.s32 	%r1231, %r1230, %r1195;
	add.s32 	%r1232, %r1231, %r1197;
	shr.s32 	%r1233, %r1232, %r60;
	add.s32 	%r1234, %r1192, %r59;
	add.s32 	%r1235, %r1234, %r1194;
	add.s32 	%r1236, %r1235, %r1196;
	add.s32 	%r1237, %r1236, %r1198;
	shr.s32 	%r1238, %r1237, %r60;
	max.s32 	%r1239, %r1203, -7;
	min.s32 	%r1138, %r1239, 7;
	max.s32 	%r1240, %r1208, -7;
	min.s32 	%r1145, %r1240, 7;
	max.s32 	%r1241, %r1213, -7;
	min.s32 	%r1137, %r1241, 7;
	max.s32 	%r1242, %r1218, -7;
	min.s32 	%r1144, %r1242, 7;
	max.s32 	%r1243, %r1223, -7;
	min.s32 	%r1135, %r1243, 7;
	max.s32 	%r1244, %r1228, -7;
	min.s32 	%r1142, %r1244, 7;
	max.s32 	%r1245, %r1233, -7;
	min.s32 	%r1134, %r1245, 7;
	max.s32 	%r1246, %r1238, -7;
	min.s32 	%r1141, %r1246, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1133, %r1134, %r1135, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1136, %r1137, %r1138, %r1133;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1140, %r1141, %r1142, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1143, %r1144, %r1145, %r1140;
	// end inline asm
	shl.b32 	%r1150, %r1143, 4;
	// begin inline asm
	lop3.b32 %r1257, %r549, %r1136, %r1150, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1335, 0;
	selp.b32 	%r1340, %r1257, %r1340, %p8;
	selp.b32 	%r1341, %r1257, %r1341, %p8;
	setp.eq.s32 	%p9, %r1335, 32;
	selp.b32 	%r1336, %r1257, %r1336, %p9;
	selp.b32 	%r1337, %r1257, %r1337, %p9;
	setp.eq.s32 	%p10, %r1335, 64;
	selp.b32 	%r1338, %r1257, %r1338, %p10;
	selp.b32 	%r1339, %r1257, %r1339, %p10;
	add.s32 	%r77, %r1335, 32;
	setp.ne.s32 	%p11, %r1335, 96;
	mov.u32 	%r1335, %r77;
	@%p11 bra 	LBB0_7;
// %bb.12:                              // %L11459
	// begin inline asm
	prmt.b32 %r1247, %r1340, %r1336, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1251, %r1341, %r1337, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1255, %r1338, %r1257, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1259, %r1339, %r1257, %r1254;
	// end inline asm
	and.b32  	%r1295, %r4, 1;
	setp.eq.b32 	%p14, %r1295, 1;
	selp.b32 	%r1296, %r1247, %r1251, %p14;
	shfl.sync.bfly.b32	%r1297, %r1296, 1, 31, -1;
	selp.b32 	%r1268, %r1297, %r1247, %p14;
	selp.b32 	%r1269, %r1251, %r1297, %p14;
	selp.b32 	%r1298, %r1255, %r1259, %p14;
	shfl.sync.bfly.b32	%r1299, %r1298, 1, 31, -1;
	selp.b32 	%r1276, %r1299, %r1255, %p14;
	selp.b32 	%r1277, %r1259, %r1299, %p14;
	// begin inline asm
	prmt.b32 %r1263, %r1268, %r1269, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1268, %r1269, %r1254;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1276, %r1277, %r1250;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1275, %r1276, %r1277, %r1254;
	// end inline asm
	selp.b32 	%r1300, %r1271, %r1263, %p4;
	shfl.sync.bfly.b32	%r1301, %r1300, 2, 31, -1;
	selp.b32 	%r1280, %r1263, %r1301, %p4;
	selp.b32 	%r1281, %r1301, %r1271, %p4;
	selp.b32 	%r1302, %r1275, %r1267, %p4;
	shfl.sync.bfly.b32	%r1303, %r1302, 2, 31, -1;
	selp.b32 	%r1288, %r1267, %r1303, %p4;
	selp.b32 	%r1289, %r1303, %r1275, %p4;
	// begin inline asm
	prmt.b32 %r1279, %r1280, %r1281, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1280, %r1281, %r1286;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1288, %r1289, %r1282;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1291, %r1288, %r1289, %r1286;
	// end inline asm
	selp.b32 	%r1304, %r1287, %r1279, %p5;
	shfl.sync.bfly.b32	%r1305, %r1304, 4, 31, -1;
	selp.b32 	%r1306, %r1279, %r1305, %p5;
	selp.b32 	%r1307, %r1305, %r1287, %p5;
	selp.b32 	%r1308, %r1291, %r1283, %p5;
	shfl.sync.bfly.b32	%r1309, %r1308, 4, 31, -1;
	selp.b32 	%r1310, %r1283, %r1309, %p5;
	selp.b32 	%r1311, %r1309, %r1291, %p5;
	selp.b32 	%r1312, %r1306, %r1310, %p14;
	shfl.sync.bfly.b32	%r1313, %r1312, 1, 31, -1;
	selp.b32 	%r1314, %r1307, %r1311, %p14;
	shfl.sync.bfly.b32	%r1315, %r1314, 1, 31, -1;
	shl.b32 	%r1316, %r3, 5;
	and.b32  	%r1317, %r1316, 15360;
	and.b32  	%r1318, %r52, 16;
	and.b32  	%r1319, %r47, 4;
	and.b32  	%r1320, %r11, 8;
	and.b32  	%r1321, %r1316, 480;
	and.b32  	%r1322, %r1316, 512;
	selp.b32 	%r1323, %r1311, %r1315, %p14;
	selp.b32 	%r1324, %r1315, %r1307, %p14;
	selp.b32 	%r1325, %r1310, %r1313, %p14;
	selp.b32 	%r1326, %r1313, %r1306, %p14;
	shl.b32 	%r1327, %r7, 14;
	or.b32  	%r1328, %r1318, %r1322;
	or.b32  	%r1329, %r1328, %r1319;
	or.b32  	%r1330, %r1329, %r1320;
	or.b32  	%r1331, %r1330, %r1321;
	or.b32  	%r1332, %r1331, %r1317;
	or.b32  	%r1333, %r1332, %r1327;
	mul.wide.u32 	%rd106, %r1333, 4;
	add.s64 	%rd107, %rd19, %rd106;
	st.global.v4.u32 	[%rd107], {%r1326, %r1324, %r1325, %r1323};
	mov.u32 	%r1334, 0;
	st.global.u32 	[%rd5], %r1334;
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd23, exception1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L29
	mov.u64 	%rd25, exception1;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L287
	mov.u32 	%r91, 2;
	st.global.u32 	[%rd5], %r91;
	mov.u64 	%rd30, exception784;
	cvta.global.u64 	%rd31, %rd30;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd31;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
