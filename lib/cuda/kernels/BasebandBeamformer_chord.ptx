// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception880[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<56>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1351>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r79, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd20, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r82, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r82, 16511;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r83, 67711;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r80, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r84, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r85, %r84, %r1;
	add.s32 	%r86, %r85, %r4;
	mul.wide.u32 	%rd25, %r86, 4;
	add.s64 	%rd7, %rd5, %rd25;
	mov.u32 	%r87, 1;
	st.global.u32 	[%rd7], %r87;
	setp.gt.u32 	%p8, %r80, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r81, %r80;
	setp.gt.s32 	%p10, %r81, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r88, %r81, %r80;
	and.b32  	%r89, %r88, 127;
	setp.eq.s32 	%p12, %r89, 0;
	@%p12 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_7;
$L__BB0_21:                             // %pass109
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r90, %r3, 2;
	shr.u32 	%r73, %r1, 3;
	or.b32  	%r91, %r90, %r73;
	cvt.u16.u32 	%rs1, %r91;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r92, %rs6;
	and.b32  	%r74, %r92, 255;
	shr.u32 	%r93, %r2, 1;
	cvt.u16.u32 	%rs7, %r93;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 13;
	mul.lo.s16 	%rs11, %rs10, 48;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r94, %rs12;
	and.b32  	%r75, %r94, 255;
	and.b32  	%r76, %r2, 1;
	neg.s32 	%r95, %r76;
	and.b32  	%r96, %r95, 96;
	mad.lo.s32 	%r97, %r75, 192, %r96;
	add.s32 	%r98, %r97, %r74;
	mul.wide.u32 	%rd26, %r98, 4;
	add.s64 	%rd27, %rd3, %rd26;
	ld.global.u32 	%r99, [%rd27];
	add.s32 	%r78, %r99, -4;
	setp.lt.u32 	%p13, %r78, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_22;
$L__BB0_8:                              // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r77, %r99, -3;
	or.b32  	%r101, %r1, %r3;
	setp.ne.s32 	%p1, %r101, 0;
	mul.wide.u32 	%rd30, %r2, 4;
	add.s64 	%rd8, %rd6, %rd30;
	mov.u32 	%r1342, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L487
	st.global.u32 	[%rd8], %r1342;
$L__BB0_10:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p15, %r76, 0;
	bar.sync 	0;
	shl.b32 	%r360, %r3, 6;
	shl.b32 	%r361, %r1, 1;
	or.b32  	%r362, %r360, %r361;
	shl.b32 	%r363, %r1, 4;
	and.b32  	%r5, %r363, 16;
	and.b32  	%r364, %r362, 204;
	or.b32  	%r365, %r5, %r364;
	shr.u32 	%r366, %r3, 2;
	cvt.u16.u32 	%rs13, %r366;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	shr.u32 	%r6, %r1, 2;
	cvt.u16.u32 	%rs19, %r6;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r367, %rs27, 256;
	mul.lo.s32 	%r368, %r75, 49152;
	selp.b32 	%r369, 0, 24576, %p15;
	or.b32  	%r370, %r365, %r369;
	add.s32 	%r371, %r370, %r368;
	add.s32 	%r372, %r371, %r367;
	shl.b32 	%r373, %r372, 2;
	cvt.u64.u32 	%rd31, %r373;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r104, %r105, %r120, %r121}, [%rd32];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r374, %rs34, 256;
	add.s32 	%r375, %r371, %r374;
	shl.b32 	%r376, %r375, 2;
	cvt.u64.u32 	%rd33, %r376;
	add.s64 	%rd34, %rd33, %rd1;
	ld.global.v4.u32 	{%r112, %r113, %r128, %r129}, [%rd34];
	and.b32  	%r377, %r360, 192;
	and.b32  	%r378, %r361, 12;
	or.b32  	%r379, %r377, %r378;
	or.b32  	%r380, %r5, %r379;
	or.b32  	%r381, %r369, %r380;
	add.s32 	%r382, %r368, %r381;
	or.b32  	%r383, %r382, 33;
	add.s32 	%r384, %r383, %r367;
	mul.wide.u32 	%rd35, %r384, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r136, %r137, %r152, %r153}, [%rd36+-4];
	add.s32 	%r385, %r383, %r374;
	mul.wide.u32 	%rd37, %r385, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r144, %r145, %r160, %r161}, [%rd38+-4];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r386, %rs42, 256;
	add.s32 	%r387, %r371, %r386;
	shl.b32 	%r388, %r387, 2;
	cvt.u64.u32 	%rd39, %r388;
	add.s64 	%rd40, %rd39, %rd1;
	ld.global.v4.u32 	{%r168, %r169, %r184, %r185}, [%rd40];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r389, %rs49, 256;
	add.s32 	%r390, %r371, %r389;
	shl.b32 	%r391, %r390, 2;
	cvt.u64.u32 	%rd41, %r391;
	add.s64 	%rd42, %rd41, %rd1;
	ld.global.v4.u32 	{%r176, %r177, %r192, %r193}, [%rd42];
	add.s32 	%r392, %r383, %r386;
	mul.wide.u32 	%rd43, %r392, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.v4.u32 	{%r200, %r201, %r216, %r217}, [%rd44+-4];
	add.s32 	%r393, %r383, %r389;
	mul.wide.u32 	%rd45, %r393, 4;
	add.s64 	%rd46, %rd1, %rd45;
	ld.global.v4.u32 	{%r208, %r209, %r224, %r225}, [%rd46+-4];
	mov.u32 	%r226, 21520;
	// begin inline asm
	prmt.b32 %r232, %r104, %r105, %r226;
	// end inline asm
	mov.u32 	%r230, 30258;
	// begin inline asm
	prmt.b32 %r233, %r104, %r105, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r112, %r113, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r112, %r113, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r120, %r121, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r120, %r121, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r128, %r129, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r128, %r129, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r136, %r137, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r136, %r137, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r144, %r145, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r144, %r145, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r152, %r153, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r152, %r153, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r160, %r161, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r160, %r161, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r168, %r169, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r168, %r169, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r176, %r177, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r176, %r177, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r184, %r185, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r184, %r185, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r192, %r193, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r192, %r193, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r200, %r201, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r200, %r201, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r208, %r209, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r208, %r209, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r216, %r217, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r216, %r217, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r224, %r225, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r353, %r224, %r225, %r230;
	// end inline asm
	mov.u32 	%r354, 25152;
	// begin inline asm
	prmt.b32 %r231, %r232, %r233, %r354;
	// end inline asm
	mov.u32 	%r358, 29521;
	// begin inline asm
	prmt.b32 %r235, %r232, %r233, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r240, %r241, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r240, %r241, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r248, %r249, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r248, %r249, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r256, %r257, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r256, %r257, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r264, %r265, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r264, %r265, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r272, %r273, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r272, %r273, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r280, %r281, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r280, %r281, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r288, %r289, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r288, %r289, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r296, %r297, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r296, %r297, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r304, %r305, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r304, %r305, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r312, %r313, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r312, %r313, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r320, %r321, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r320, %r321, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r328, %r329, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r328, %r329, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r336, %r337, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r336, %r337, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r344, %r345, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r344, %r345, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r351, %r352, %r353, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r355, %r352, %r353, %r358;
	// end inline asm
	and.b32  	%r7, %r1, 2;
	setp.eq.s32 	%p16, %r7, 0;
	selp.b32 	%r394, %r263, %r231, %p16;
	shfl.sync.bfly.b32	%r395, %r394, 2, 31, -1;
	selp.b32 	%r396, %r231, %r395, %p16;
	selp.b32 	%r397, %r395, %r263, %p16;
	selp.b32 	%r398, %r271, %r239, %p16;
	shfl.sync.bfly.b32	%r399, %r398, 2, 31, -1;
	selp.b32 	%r400, %r239, %r399, %p16;
	selp.b32 	%r401, %r399, %r271, %p16;
	selp.b32 	%r402, %r267, %r235, %p16;
	shfl.sync.bfly.b32	%r403, %r402, 2, 31, -1;
	selp.b32 	%r404, %r235, %r403, %p16;
	selp.b32 	%r405, %r403, %r267, %p16;
	selp.b32 	%r406, %r275, %r243, %p16;
	shfl.sync.bfly.b32	%r407, %r406, 2, 31, -1;
	selp.b32 	%r408, %r243, %r407, %p16;
	selp.b32 	%r409, %r407, %r275, %p16;
	selp.b32 	%r410, %r279, %r247, %p16;
	shfl.sync.bfly.b32	%r411, %r410, 2, 31, -1;
	selp.b32 	%r412, %r247, %r411, %p16;
	selp.b32 	%r413, %r411, %r279, %p16;
	selp.b32 	%r414, %r287, %r255, %p16;
	shfl.sync.bfly.b32	%r415, %r414, 2, 31, -1;
	selp.b32 	%r416, %r255, %r415, %p16;
	selp.b32 	%r417, %r415, %r287, %p16;
	selp.b32 	%r418, %r283, %r251, %p16;
	shfl.sync.bfly.b32	%r419, %r418, 2, 31, -1;
	selp.b32 	%r420, %r251, %r419, %p16;
	selp.b32 	%r421, %r419, %r283, %p16;
	selp.b32 	%r422, %r291, %r259, %p16;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r259, %r423, %p16;
	selp.b32 	%r425, %r423, %r291, %p16;
	selp.b32 	%r426, %r327, %r295, %p16;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r295, %r427, %p16;
	selp.b32 	%r429, %r427, %r327, %p16;
	selp.b32 	%r430, %r335, %r303, %p16;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r303, %r431, %p16;
	selp.b32 	%r433, %r431, %r335, %p16;
	selp.b32 	%r434, %r331, %r299, %p16;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r299, %r435, %p16;
	selp.b32 	%r437, %r435, %r331, %p16;
	selp.b32 	%r438, %r339, %r307, %p16;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r307, %r439, %p16;
	selp.b32 	%r441, %r439, %r339, %p16;
	selp.b32 	%r442, %r343, %r311, %p16;
	shfl.sync.bfly.b32	%r443, %r442, 2, 31, -1;
	selp.b32 	%r444, %r311, %r443, %p16;
	selp.b32 	%r445, %r443, %r343, %p16;
	selp.b32 	%r446, %r351, %r319, %p16;
	shfl.sync.bfly.b32	%r447, %r446, 2, 31, -1;
	selp.b32 	%r448, %r319, %r447, %p16;
	selp.b32 	%r449, %r447, %r351, %p16;
	selp.b32 	%r450, %r347, %r315, %p16;
	shfl.sync.bfly.b32	%r451, %r450, 2, 31, -1;
	selp.b32 	%r452, %r315, %r451, %p16;
	selp.b32 	%r453, %r451, %r347, %p16;
	selp.b32 	%r454, %r355, %r323, %p16;
	shfl.sync.bfly.b32	%r455, %r454, 2, 31, -1;
	selp.b32 	%r456, %r323, %r455, %p16;
	selp.b32 	%r457, %r455, %r355, %p16;
	and.b32  	%r8, %r1, 4;
	setp.eq.s32 	%p17, %r8, 0;
	selp.b32 	%r458, %r428, %r396, %p17;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r9, %r396, %r459, %p17;
	selp.b32 	%r10, %r459, %r428, %p17;
	selp.b32 	%r460, %r432, %r400, %p17;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r11, %r400, %r461, %p17;
	selp.b32 	%r12, %r461, %r432, %p17;
	selp.b32 	%r462, %r436, %r404, %p17;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r13, %r404, %r463, %p17;
	selp.b32 	%r14, %r463, %r436, %p17;
	selp.b32 	%r464, %r440, %r408, %p17;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r15, %r408, %r465, %p17;
	selp.b32 	%r16, %r465, %r440, %p17;
	selp.b32 	%r466, %r444, %r412, %p17;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r17, %r412, %r467, %p17;
	selp.b32 	%r18, %r467, %r444, %p17;
	selp.b32 	%r468, %r448, %r416, %p17;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r19, %r416, %r469, %p17;
	selp.b32 	%r20, %r469, %r448, %p17;
	selp.b32 	%r470, %r452, %r420, %p17;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r21, %r420, %r471, %p17;
	selp.b32 	%r22, %r471, %r452, %p17;
	selp.b32 	%r472, %r456, %r424, %p17;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r23, %r424, %r473, %p17;
	selp.b32 	%r24, %r473, %r456, %p17;
	selp.b32 	%r474, %r429, %r397, %p17;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r25, %r397, %r475, %p17;
	selp.b32 	%r26, %r475, %r429, %p17;
	selp.b32 	%r476, %r433, %r401, %p17;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r27, %r401, %r477, %p17;
	selp.b32 	%r28, %r477, %r433, %p17;
	selp.b32 	%r478, %r437, %r405, %p17;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r29, %r405, %r479, %p17;
	selp.b32 	%r30, %r479, %r437, %p17;
	selp.b32 	%r480, %r441, %r409, %p17;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r31, %r409, %r481, %p17;
	selp.b32 	%r32, %r481, %r441, %p17;
	selp.b32 	%r482, %r445, %r413, %p17;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r33, %r413, %r483, %p17;
	selp.b32 	%r34, %r483, %r445, %p17;
	selp.b32 	%r484, %r449, %r417, %p17;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r35, %r417, %r485, %p17;
	selp.b32 	%r36, %r485, %r449, %p17;
	selp.b32 	%r486, %r453, %r421, %p17;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r37, %r421, %r487, %p17;
	selp.b32 	%r38, %r487, %r453, %p17;
	selp.b32 	%r488, %r457, %r425, %p17;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r39, %r425, %r489, %p17;
	selp.b32 	%r40, %r489, %r457, %p17;
	and.b32  	%r490, %r3, 12;
	or.b32  	%r41, %r490, %r73;
	shl.b32 	%r491, %r75, 8;
	shl.b32 	%r492, %r1, 2;
	and.b32  	%r493, %r492, 28;
	and.b32  	%r494, %r4, 96;
	or.b32  	%r495, %r493, %r494;
	shl.b32 	%r496, %r2, 7;
	and.b32  	%r497, %r496, 128;
	or.b32  	%r498, %r495, %r497;
	or.b32  	%r42, %r498, %r491;
	shl.b32 	%r499, %r1, 3;
	and.b32  	%r500, %r499, 24;
	or.b32  	%r43, %r494, %r500;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r501, %rs54;
	and.b32  	%r502, %r501, 255;
	and.b32  	%r44, %r361, 6;
	and.b32  	%r503, %r3, 3;
	mul.lo.s32 	%r504, %r503, 3200;
	or.b32  	%r45, %r504, %r502;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r505, %rs60;
	and.b32  	%r506, %r505, 255;
	or.b32  	%r46, %r504, %r506;
	and.b32  	%r507, %r1, 7;
	shl.b32 	%r509, %r87, %r78;
	setp.gt.u32 	%p18, %r78, 31;
	selp.b32 	%r47, 0, %r509, %p18;
	min.u32 	%r48, %r77, 31;
	and.b32  	%r49, %r1, 1;
	shl.b32 	%r510, %r75, 12;
	shl.b32 	%r511, %r2, 11;
	and.b32  	%r512, %r511, 2048;
	shl.b32 	%r513, %r1, 5;
	and.b32  	%r50, %r513, 64;
	or.b32  	%r514, %r510, %r512;
	mad.lo.s32 	%r515, %r74, 196608, %r514;
	mul.lo.s32 	%r516, %r41, 129;
	add.s32 	%r517, %r495, %r516;
	mul.wide.u32 	%rd47, %r517, 4;
	mov.u64 	%rd48, shmem;
	add.s64 	%rd9, %rd48, %rd47;
	cvt.u64.u32 	%rd49, %r516;
	cvt.u64.u32 	%rd10, %r495;
	add.s64 	%rd50, %rd10, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd11, %rd48, %rd51;
	mul.lo.s32 	%r518, %r507, 100;
	add.s32 	%r519, %r518, %r74;
	mul.wide.u32 	%rd52, %r519, 4;
	add.s64 	%rd53, %rd48, 16512;
	add.s64 	%rd12, %rd53, %rd52;
	cvt.u64.u32 	%rd54, %r518;
	cvt.u64.u32 	%rd55, %r74;
	add.s64 	%rd56, %rd55, %rd54;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd13, %rd53, %rd57;
	add.s32 	%r520, %r518, 800;
	add.s32 	%r521, %r520, %r74;
	mul.wide.u32 	%rd58, %r521, 4;
	add.s64 	%rd14, %rd53, %rd58;
	cvt.u64.u32 	%rd59, %r520;
	add.s64 	%rd60, %rd55, %rd59;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd15, %rd53, %rd61;
	add.s32 	%r522, %r518, 1600;
	add.s32 	%r523, %r522, %r74;
	mul.wide.u32 	%rd62, %r523, 4;
	add.s64 	%rd16, %rd53, %rd62;
	cvt.u64.u32 	%rd63, %r522;
	add.s64 	%rd64, %rd55, %rd63;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd17, %rd53, %rd65;
	or.b32  	%r524, %r1, 24;
	mul.lo.s32 	%r525, %r524, 100;
	add.s32 	%r526, %r525, %r74;
	mul.wide.u32 	%rd66, %r526, 4;
	add.s64 	%rd18, %rd53, %rd66;
	cvt.u64.u32 	%rd67, %r525;
	add.s64 	%rd68, %rd55, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd19, %rd53, %rd69;
	and.b32  	%r51, %r499, 32;
	shl.b32 	%r52, %r515, 2;
	mov.pred 	%p55, 0;
$L__BB0_11:                             // %L2581
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_15 Depth 3
	add.s32 	%r527, %r1342, %r80;
	setp.ge.s32 	%p19, %r527, %r81;
	@%p19 bra 	$L__BB0_18;
// %bb.12:                              // %L2589.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r54, %r1342, 16;
	mov.u32 	%r1343, 0;
	mov.u32 	%r1344, %r1343;
	mov.u32 	%r1345, %r1343;
	mov.u32 	%r1346, %r1343;
	mov.u32 	%r1347, %r1343;
	mov.u32 	%r1348, %r1343;
	mov.u32 	%r1349, %r1343;
$L__BB0_13:                             // %L2589
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_15 Depth 3
	setp.lt.u32 	%p20, %r3, 16;
	@%p20 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_14;
$L__BB0_23:                             // %pass1155
                                        //   in Loop: Header=BB0_13 Depth=2
	cvt.u32.u64 	%r529, %rd10;
	add.s32 	%r530, %r1343, %r1342;
	and.b32  	%r531, %r530, 32736;
	or.b32  	%r532, %r41, %r531;
	add.s32 	%r533, %r532, %r80;
	mad.lo.s32 	%r534, %r533, 12288, %r42;
	mul.hi.s32 	%r535, %r534, 715827883;
	shr.u32 	%r536, %r535, 31;
	shr.s32 	%r537, %r535, 26;
	add.s32 	%r538, %r537, %r536;
	setp.lt.s32 	%p21, %r534, 0;
	mul.lo.s32 	%r539, %r538, 402653184;
	setp.ne.s32 	%p22, %r539, %r534;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r540, -1, 0, %p23;
	add.s32 	%r541, %r538, %r540;
	mad.lo.s32 	%r542, %r541, -402653184, %r534;
	mul.wide.s32 	%rd70, %r542, 4;
	add.s64 	%rd71, %rd2, %rd70;
	ld.global.v4.u32 	{%r543, %r544, %r545, %r546}, [%rd71];
	add.s32 	%r547, %r54, %r1343;
	or.b32  	%r548, %r41, %r547;
	and.b32  	%r549, %r548, 32767;
	add.s32 	%r550, %r549, %r80;
	mad.lo.s32 	%r551, %r550, 12288, %r42;
	mul.hi.s32 	%r552, %r551, 715827883;
	shr.u32 	%r553, %r552, 31;
	shr.s32 	%r554, %r552, 26;
	add.s32 	%r555, %r554, %r553;
	setp.lt.s32 	%p24, %r551, 0;
	mul.lo.s32 	%r556, %r555, 402653184;
	setp.ne.s32 	%p25, %r556, %r551;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r557, -1, 0, %p26;
	add.s32 	%r558, %r555, %r557;
	mad.lo.s32 	%r559, %r558, -402653184, %r551;
	mul.wide.s32 	%rd72, %r559, 4;
	add.s64 	%rd73, %rd2, %rd72;
	ld.global.v4.u32 	{%r560, %r561, %r562, %r563}, [%rd73];
	st.shared.u32 	[%rd9], %r543;
	st.shared.u32 	[%rd11+4], %r544;
	st.shared.u32 	[%rd11+8], %r545;
	st.shared.u32 	[%rd11+12], %r546;
	and.b32  	%r564, %r548, 31;
	mul.lo.s32 	%r565, %r564, 129;
	add.s32 	%r566, %r529, %r565;
	mul.wide.u32 	%rd74, %r566, 4;
	add.s64 	%rd76, %rd48, %rd74;
	st.shared.u32 	[%rd76], %r560;
	cvt.u64.u32 	%rd77, %r565;
	add.s64 	%rd78, %rd10, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd48, %rd79;
	st.shared.u32 	[%rd80+4], %r561;
	st.shared.u32 	[%rd80+8], %r562;
	st.shared.u32 	[%rd80+12], %r563;
$L__BB0_14:                             // %L4316
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	mov.u32 	%r580, 0;
	mov.u32 	%r1350, %r580;
$L__BB0_15:                             // %L4318
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1092, %r6, %r1350;
	mad.lo.s32 	%r1093, %r1092, 129, %r43;
	mul.wide.u32 	%rd81, %r1093, 4;
	add.s64 	%rd83, %rd48, %rd81;
	ld.shared.u32 	%r569, [%rd83];
	mov.u32 	%r570, 134744072;
	mov.u32 	%r571, 252645135;
	// begin inline asm
	lop3.b32 %r568, %r569, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1094, %r568, 2021161080;
	xor.b32  	%r579, %r1094, -2139062144;
	shr.u32 	%r573, %r569, 4;
	// begin inline asm
	lop3.b32 %r572, %r573, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1095, %r572, 2021161080;
	xor.b32  	%r585, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r576, %r577}, {%r9}, {%r579}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r582, %r583}, {%r13}, {%r585}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r588, %r589}, {%r9}, {%r585}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r594, %r595}, {%r13}, {%r579}, {%r588, %r589};
	// end inline asm
	ld.shared.u32 	%r601, [%rd83+4];
	// begin inline asm
	lop3.b32 %r600, %r601, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1096, %r600, 2021161080;
	xor.b32  	%r611, %r1096, -2139062144;
	shr.u32 	%r605, %r601, 4;
	// begin inline asm
	lop3.b32 %r604, %r605, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1097, %r604, 2021161080;
	xor.b32  	%r617, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r608, %r609}, {%r17}, {%r611}, {%r576, %r577};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r614, %r615}, {%r21}, {%r617}, {%r582, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r620, %r621}, {%r17}, {%r617}, {%r594, %r595};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r626, %r627}, {%r21}, {%r611}, {%r620, %r621};
	// end inline asm
	ld.shared.u32 	%r633, [%rd83+8];
	// begin inline asm
	lop3.b32 %r632, %r633, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1098, %r632, 2021161080;
	xor.b32  	%r643, %r1098, -2139062144;
	shr.u32 	%r637, %r633, 4;
	// begin inline asm
	lop3.b32 %r636, %r637, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1099, %r636, 2021161080;
	xor.b32  	%r649, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r640, %r641}, {%r25}, {%r643}, {%r608, %r609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r646, %r647}, {%r29}, {%r649}, {%r614, %r615};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r652, %r653}, {%r25}, {%r649}, {%r626, %r627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r658, %r659}, {%r29}, {%r643}, {%r652, %r653};
	// end inline asm
	ld.shared.u32 	%r665, [%rd83+12];
	// begin inline asm
	lop3.b32 %r664, %r665, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1100, %r664, 2021161080;
	xor.b32  	%r675, %r1100, -2139062144;
	shr.u32 	%r669, %r665, 4;
	// begin inline asm
	lop3.b32 %r668, %r669, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1101, %r668, 2021161080;
	xor.b32  	%r681, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r672, %r673}, {%r33}, {%r675}, {%r640, %r641};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r678, %r679}, {%r37}, {%r681}, {%r646, %r647};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r684, %r685}, {%r33}, {%r681}, {%r658, %r659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r690, %r691}, {%r37}, {%r675}, {%r684, %r685};
	// end inline asm
	ld.shared.u32 	%r697, [%rd83+16];
	// begin inline asm
	lop3.b32 %r696, %r697, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1102, %r696, 2021161080;
	xor.b32  	%r707, %r1102, -2139062144;
	shr.u32 	%r701, %r697, 4;
	// begin inline asm
	lop3.b32 %r700, %r701, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1103, %r700, 2021161080;
	xor.b32  	%r713, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r704, %r705}, {%r10}, {%r707}, {%r672, %r673};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r710, %r711}, {%r14}, {%r713}, {%r678, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r716, %r717}, {%r10}, {%r713}, {%r690, %r691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r722, %r723}, {%r14}, {%r707}, {%r716, %r717};
	// end inline asm
	ld.shared.u32 	%r729, [%rd83+20];
	// begin inline asm
	lop3.b32 %r728, %r729, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1104, %r728, 2021161080;
	xor.b32  	%r739, %r1104, -2139062144;
	shr.u32 	%r733, %r729, 4;
	// begin inline asm
	lop3.b32 %r732, %r733, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1105, %r732, 2021161080;
	xor.b32  	%r745, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r736, %r737}, {%r18}, {%r739}, {%r704, %r705};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r742, %r743}, {%r22}, {%r745}, {%r710, %r711};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r748, %r749}, {%r18}, {%r745}, {%r722, %r723};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r754, %r755}, {%r22}, {%r739}, {%r748, %r749};
	// end inline asm
	ld.shared.u32 	%r761, [%rd83+24];
	// begin inline asm
	lop3.b32 %r760, %r761, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1106, %r760, 2021161080;
	xor.b32  	%r771, %r1106, -2139062144;
	shr.u32 	%r765, %r761, 4;
	// begin inline asm
	lop3.b32 %r764, %r765, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1107, %r764, 2021161080;
	xor.b32  	%r777, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r768, %r769}, {%r26}, {%r771}, {%r736, %r737};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r774, %r775}, {%r30}, {%r777}, {%r742, %r743};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r780, %r781}, {%r26}, {%r777}, {%r754, %r755};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r786, %r787}, {%r30}, {%r771}, {%r780, %r781};
	// end inline asm
	ld.shared.u32 	%r793, [%rd83+28];
	// begin inline asm
	lop3.b32 %r792, %r793, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1108, %r792, 2021161080;
	xor.b32  	%r803, %r1108, -2139062144;
	shr.u32 	%r797, %r793, 4;
	// begin inline asm
	lop3.b32 %r796, %r797, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1109, %r796, 2021161080;
	xor.b32  	%r809, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r800, %r801}, {%r34}, {%r803}, {%r768, %r769};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r806, %r807}, {%r38}, {%r809}, {%r774, %r775};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r812, %r813}, {%r34}, {%r809}, {%r786, %r787};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r818, %r819}, {%r38}, {%r803}, {%r812, %r813};
	// end inline asm
	sub.s32 	%r1110, %r800, %r806;
	add.s32 	%r1111, %r1110, 4;
	shr.s32 	%r826, %r1111, 3;
	add.s32 	%r1112, %r818, 4;
	shr.s32 	%r825, %r1112, 3;
	sub.s32 	%r1113, %r801, %r807;
	add.s32 	%r1114, %r1113, 4;
	shr.s32 	%r829, %r1114, 3;
	add.s32 	%r1115, %r819, 4;
	shr.s32 	%r828, %r1115, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r824, %r825, %r826;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r827, %r828, %r829;
	// end inline asm
	or.b32  	%r1116, %r44, %r1350;
	mul.lo.s32 	%r1117, %r1116, 100;
	add.s32 	%r1118, %r45, %r1117;
	mul.wide.u32 	%rd84, %r1118, 4;
	add.s64 	%rd86, %rd53, %rd84;
	st.shared.u32 	[%rd86], %r824;
	add.s32 	%r1119, %r1117, 100;
	add.s32 	%r1120, %r45, %r1119;
	mul.wide.u32 	%rd87, %r1120, 4;
	add.s64 	%rd88, %rd53, %rd87;
	st.shared.u32 	[%rd88], %r827;
	ld.shared.u32 	%r831, [%rd83];
	// begin inline asm
	lop3.b32 %r830, %r831, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1121, %r830, 2021161080;
	xor.b32  	%r841, %r1121, -2139062144;
	shr.u32 	%r835, %r831, 4;
	// begin inline asm
	lop3.b32 %r834, %r835, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1122, %r834, 2021161080;
	xor.b32  	%r847, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r838, %r839}, {%r11}, {%r841}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r844, %r845}, {%r15}, {%r847}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r850, %r851}, {%r11}, {%r847}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r856, %r857}, {%r15}, {%r841}, {%r850, %r851};
	// end inline asm
	ld.shared.u32 	%r863, [%rd83+4];
	// begin inline asm
	lop3.b32 %r862, %r863, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1123, %r862, 2021161080;
	xor.b32  	%r873, %r1123, -2139062144;
	shr.u32 	%r867, %r863, 4;
	// begin inline asm
	lop3.b32 %r866, %r867, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1124, %r866, 2021161080;
	xor.b32  	%r879, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r870, %r871}, {%r19}, {%r873}, {%r838, %r839};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r876, %r877}, {%r23}, {%r879}, {%r844, %r845};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r882, %r883}, {%r19}, {%r879}, {%r856, %r857};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r888, %r889}, {%r23}, {%r873}, {%r882, %r883};
	// end inline asm
	ld.shared.u32 	%r895, [%rd83+8];
	// begin inline asm
	lop3.b32 %r894, %r895, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1125, %r894, 2021161080;
	xor.b32  	%r905, %r1125, -2139062144;
	shr.u32 	%r899, %r895, 4;
	// begin inline asm
	lop3.b32 %r898, %r899, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1126, %r898, 2021161080;
	xor.b32  	%r911, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r902, %r903}, {%r27}, {%r905}, {%r870, %r871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r908, %r909}, {%r31}, {%r911}, {%r876, %r877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r914, %r915}, {%r27}, {%r911}, {%r888, %r889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r920, %r921}, {%r31}, {%r905}, {%r914, %r915};
	// end inline asm
	ld.shared.u32 	%r927, [%rd83+12];
	// begin inline asm
	lop3.b32 %r926, %r927, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1127, %r926, 2021161080;
	xor.b32  	%r937, %r1127, -2139062144;
	shr.u32 	%r931, %r927, 4;
	// begin inline asm
	lop3.b32 %r930, %r931, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1128, %r930, 2021161080;
	xor.b32  	%r943, %r1128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r934, %r935}, {%r35}, {%r937}, {%r902, %r903};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r940, %r941}, {%r39}, {%r943}, {%r908, %r909};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r946, %r947}, {%r35}, {%r943}, {%r920, %r921};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r952, %r953}, {%r39}, {%r937}, {%r946, %r947};
	// end inline asm
	ld.shared.u32 	%r959, [%rd83+16];
	// begin inline asm
	lop3.b32 %r958, %r959, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1129, %r958, 2021161080;
	xor.b32  	%r969, %r1129, -2139062144;
	shr.u32 	%r963, %r959, 4;
	// begin inline asm
	lop3.b32 %r962, %r963, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1130, %r962, 2021161080;
	xor.b32  	%r975, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r966, %r967}, {%r12}, {%r969}, {%r934, %r935};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r972, %r973}, {%r16}, {%r975}, {%r940, %r941};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r978, %r979}, {%r12}, {%r975}, {%r952, %r953};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r984, %r985}, {%r16}, {%r969}, {%r978, %r979};
	// end inline asm
	ld.shared.u32 	%r991, [%rd83+20];
	// begin inline asm
	lop3.b32 %r990, %r991, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1131, %r990, 2021161080;
	xor.b32  	%r1001, %r1131, -2139062144;
	shr.u32 	%r995, %r991, 4;
	// begin inline asm
	lop3.b32 %r994, %r995, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1132, %r994, 2021161080;
	xor.b32  	%r1007, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r998, %r999}, {%r20}, {%r1001}, {%r966, %r967};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1004, %r1005}, {%r24}, {%r1007}, {%r972, %r973};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1010, %r1011}, {%r20}, {%r1007}, {%r984, %r985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1016, %r1017}, {%r24}, {%r1001}, {%r1010, %r1011};
	// end inline asm
	ld.shared.u32 	%r1023, [%rd83+24];
	// begin inline asm
	lop3.b32 %r1022, %r1023, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1133, %r1022, 2021161080;
	xor.b32  	%r1033, %r1133, -2139062144;
	shr.u32 	%r1027, %r1023, 4;
	// begin inline asm
	lop3.b32 %r1026, %r1027, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1134, %r1026, 2021161080;
	xor.b32  	%r1039, %r1134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1030, %r1031}, {%r28}, {%r1033}, {%r998, %r999};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1036, %r1037}, {%r32}, {%r1039}, {%r1004, %r1005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1042, %r1043}, {%r28}, {%r1039}, {%r1016, %r1017};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1048, %r1049}, {%r32}, {%r1033}, {%r1042, %r1043};
	// end inline asm
	ld.shared.u32 	%r1055, [%rd83+28];
	// begin inline asm
	lop3.b32 %r1054, %r1055, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1135, %r1054, 2021161080;
	xor.b32  	%r1065, %r1135, -2139062144;
	shr.u32 	%r1059, %r1055, 4;
	// begin inline asm
	lop3.b32 %r1058, %r1059, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1136, %r1058, 2021161080;
	xor.b32  	%r1071, %r1136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1062, %r1063}, {%r36}, {%r1065}, {%r1030, %r1031};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1068, %r1069}, {%r40}, {%r1071}, {%r1036, %r1037};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1074, %r1075}, {%r36}, {%r1071}, {%r1048, %r1049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1080, %r1081}, {%r40}, {%r1065}, {%r1074, %r1075};
	// end inline asm
	sub.s32 	%r1137, %r1062, %r1068;
	add.s32 	%r1138, %r1137, 4;
	shr.s32 	%r1088, %r1138, 3;
	add.s32 	%r1139, %r1080, 4;
	shr.s32 	%r1087, %r1139, 3;
	sub.s32 	%r1140, %r1063, %r1069;
	add.s32 	%r1141, %r1140, 4;
	shr.s32 	%r1091, %r1141, 3;
	add.s32 	%r1142, %r1081, 4;
	shr.s32 	%r1090, %r1142, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1086, %r1087, %r1088;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1089, %r1090, %r1091;
	// end inline asm
	add.s32 	%r1143, %r46, %r1117;
	mul.wide.u32 	%rd89, %r1143, 4;
	add.s64 	%rd90, %rd53, %rd89;
	st.shared.u32 	[%rd90], %r1086;
	add.s32 	%r1144, %r46, %r1119;
	mul.wide.u32 	%rd91, %r1144, 4;
	add.s64 	%rd92, %rd53, %rd91;
	st.shared.u32 	[%rd92], %r1089;
	add.s32 	%r1350, %r1350, 8;
	setp.ne.s32 	%p27, %r1350, 32;
	@%p27 bra 	$L__BB0_15;
// %bb.16:                              // %L8051
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1163, [%rd12];
	ld.shared.u32 	%r1164, [%rd13+12800];
	ld.shared.u32 	%r1165, [%rd13+25600];
	ld.shared.u32 	%r1166, [%rd13+38400];
	ld.shared.u32 	%r1167, [%rd14];
	ld.shared.u32 	%r1168, [%rd15+12800];
	ld.shared.u32 	%r1169, [%rd15+25600];
	ld.shared.u32 	%r1170, [%rd15+38400];
	ld.shared.u32 	%r1171, [%rd16];
	ld.shared.u32 	%r1172, [%rd17+12800];
	ld.shared.u32 	%r1173, [%rd17+25600];
	ld.shared.u32 	%r1174, [%rd17+38400];
	ld.shared.u32 	%r1175, [%rd18];
	ld.shared.u32 	%r1176, [%rd19+12800];
	ld.shared.u32 	%r1177, [%rd19+25600];
	ld.shared.u32 	%r1178, [%rd19+38400];
	cvt.s32.s16 	%r1179, %r1163;
	shr.s32 	%r1180, %r1163, 16;
	cvt.s32.s16 	%r1181, %r1164;
	shr.s32 	%r1182, %r1164, 16;
	cvt.s32.s16 	%r1183, %r1165;
	shr.s32 	%r1184, %r1165, 16;
	cvt.s32.s16 	%r1185, %r1166;
	shr.s32 	%r1186, %r1166, 16;
	cvt.s32.s16 	%r1187, %r1167;
	shr.s32 	%r1188, %r1167, 16;
	cvt.s32.s16 	%r1189, %r1168;
	shr.s32 	%r1190, %r1168, 16;
	cvt.s32.s16 	%r1191, %r1169;
	shr.s32 	%r1192, %r1169, 16;
	cvt.s32.s16 	%r1193, %r1170;
	shr.s32 	%r1194, %r1170, 16;
	cvt.s32.s16 	%r1195, %r1171;
	shr.s32 	%r1196, %r1171, 16;
	cvt.s32.s16 	%r1197, %r1172;
	shr.s32 	%r1198, %r1172, 16;
	cvt.s32.s16 	%r1199, %r1173;
	shr.s32 	%r1200, %r1173, 16;
	cvt.s32.s16 	%r1201, %r1174;
	shr.s32 	%r1202, %r1174, 16;
	cvt.s32.s16 	%r1203, %r1175;
	shr.s32 	%r1204, %r1175, 16;
	cvt.s32.s16 	%r1205, %r1176;
	shr.s32 	%r1206, %r1176, 16;
	cvt.s32.s16 	%r1207, %r1177;
	shr.s32 	%r1208, %r1177, 16;
	cvt.s32.s16 	%r1209, %r1178;
	shr.s32 	%r1210, %r1178, 16;
	add.s32 	%r1211, %r1179, %r47;
	add.s32 	%r1212, %r1211, %r1181;
	add.s32 	%r1213, %r1212, %r1183;
	add.s32 	%r1214, %r1213, %r1185;
	shr.s32 	%r1215, %r1214, %r48;
	add.s32 	%r1216, %r1180, %r47;
	add.s32 	%r1217, %r1216, %r1182;
	add.s32 	%r1218, %r1217, %r1184;
	add.s32 	%r1219, %r1218, %r1186;
	shr.s32 	%r1220, %r1219, %r48;
	add.s32 	%r1221, %r1187, %r47;
	add.s32 	%r1222, %r1221, %r1189;
	add.s32 	%r1223, %r1222, %r1191;
	add.s32 	%r1224, %r1223, %r1193;
	shr.s32 	%r1225, %r1224, %r48;
	add.s32 	%r1226, %r1188, %r47;
	add.s32 	%r1227, %r1226, %r1190;
	add.s32 	%r1228, %r1227, %r1192;
	add.s32 	%r1229, %r1228, %r1194;
	shr.s32 	%r1230, %r1229, %r48;
	add.s32 	%r1231, %r1195, %r47;
	add.s32 	%r1232, %r1231, %r1197;
	add.s32 	%r1233, %r1232, %r1199;
	add.s32 	%r1234, %r1233, %r1201;
	shr.s32 	%r1235, %r1234, %r48;
	add.s32 	%r1236, %r1196, %r47;
	add.s32 	%r1237, %r1236, %r1198;
	add.s32 	%r1238, %r1237, %r1200;
	add.s32 	%r1239, %r1238, %r1202;
	shr.s32 	%r1240, %r1239, %r48;
	add.s32 	%r1241, %r1203, %r47;
	add.s32 	%r1242, %r1241, %r1205;
	add.s32 	%r1243, %r1242, %r1207;
	add.s32 	%r1244, %r1243, %r1209;
	shr.s32 	%r1245, %r1244, %r48;
	add.s32 	%r1246, %r1204, %r47;
	add.s32 	%r1247, %r1246, %r1206;
	add.s32 	%r1248, %r1247, %r1208;
	add.s32 	%r1249, %r1248, %r1210;
	shr.s32 	%r1250, %r1249, %r48;
	max.s32 	%r1251, %r1215, -7;
	min.s32 	%r1150, %r1251, 7;
	setp.ne.s32 	%p28, %r1150, %r1215;
	or.pred  	%p29, %p55, %p28;
	max.s32 	%r1252, %r1220, -7;
	min.s32 	%r1157, %r1252, 7;
	setp.ne.s32 	%p30, %r1157, %r1220;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r1253, %r1225, -7;
	min.s32 	%r1149, %r1253, 7;
	setp.ne.s32 	%p32, %r1149, %r1225;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r1254, %r1230, -7;
	min.s32 	%r1156, %r1254, 7;
	setp.ne.s32 	%p34, %r1156, %r1230;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r1255, %r1235, -7;
	min.s32 	%r1147, %r1255, 7;
	setp.ne.s32 	%p36, %r1147, %r1235;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r1256, %r1240, -7;
	min.s32 	%r1154, %r1256, 7;
	setp.ne.s32 	%p38, %r1154, %r1240;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r1257, %r1245, -7;
	min.s32 	%r1146, %r1257, 7;
	setp.ne.s32 	%p40, %r1146, %r1245;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r1258, %r1250, -7;
	min.s32 	%r1153, %r1258, 7;
	setp.ne.s32 	%p42, %r1153, %r1250;
	or.pred  	%p55, %p42, %p41;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1145, %r1146, %r1147, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1148, %r1149, %r1150, %r1145;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1152, %r1153, %r1154, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1155, %r1156, %r1157, %r1152;
	// end inline asm
	shl.b32 	%r1162, %r1155, 4;
	// begin inline asm
	lop3.b32 %r1269, %r571, %r1148, %r1162, 202;
	// end inline asm
	setp.eq.s32 	%p43, %r1343, 0;
	selp.b32 	%r1348, %r1269, %r1348, %p43;
	selp.b32 	%r1349, %r1269, %r1349, %p43;
	setp.eq.s32 	%p44, %r1343, 32;
	selp.b32 	%r1344, %r1269, %r1344, %p44;
	selp.b32 	%r1345, %r1269, %r1345, %p44;
	setp.eq.s32 	%p45, %r1343, 64;
	selp.b32 	%r1346, %r1269, %r1346, %p45;
	selp.b32 	%r1347, %r1269, %r1347, %p45;
	add.s32 	%r71, %r1343, 32;
	setp.ne.s32 	%p46, %r1343, 96;
	mov.u32 	%r1343, %r71;
	@%p46 bra 	$L__BB0_13;
// %bb.17:                              // %L10457.L10463_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p47, %r49, 0;
	// begin inline asm
	prmt.b32 %r1259, %r1348, %r1344, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1263, %r1349, %r1345, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1346, %r1269, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1347, %r1269, %r358;
	// end inline asm
	selp.b32 	%r1307, %r1263, %r1259, %p47;
	shfl.sync.bfly.b32	%r1308, %r1307, 1, 31, -1;
	selp.b32 	%r1276, %r1259, %r1308, %p47;
	selp.b32 	%r1277, %r1308, %r1263, %p47;
	selp.b32 	%r1309, %r1271, %r1267, %p47;
	shfl.sync.bfly.b32	%r1310, %r1309, 1, 31, -1;
	selp.b32 	%r1284, %r1267, %r1310, %p47;
	selp.b32 	%r1285, %r1310, %r1271, %p47;
	// begin inline asm
	prmt.b32 %r1275, %r1276, %r1277, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1279, %r1276, %r1277, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1284, %r1285, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1284, %r1285, %r358;
	// end inline asm
	selp.b32 	%r1311, %r1283, %r1275, %p16;
	shfl.sync.bfly.b32	%r1312, %r1311, 2, 31, -1;
	selp.b32 	%r1292, %r1275, %r1312, %p16;
	selp.b32 	%r1293, %r1312, %r1283, %p16;
	selp.b32 	%r1313, %r1287, %r1279, %p16;
	shfl.sync.bfly.b32	%r1314, %r1313, 2, 31, -1;
	selp.b32 	%r1300, %r1279, %r1314, %p16;
	selp.b32 	%r1301, %r1314, %r1287, %p16;
	// begin inline asm
	prmt.b32 %r1291, %r1292, %r1293, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1295, %r1292, %r1293, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1299, %r1300, %r1301, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r1300, %r1301, %r230;
	// end inline asm
	selp.b32 	%r1315, %r1299, %r1291, %p17;
	shfl.sync.bfly.b32	%r1316, %r1315, 4, 31, -1;
	selp.b32 	%r1317, %r1291, %r1316, %p17;
	selp.b32 	%r1318, %r1316, %r1299, %p17;
	selp.b32 	%r1319, %r1303, %r1295, %p17;
	shfl.sync.bfly.b32	%r1320, %r1319, 4, 31, -1;
	selp.b32 	%r1321, %r1295, %r1320, %p17;
	selp.b32 	%r1322, %r1320, %r1303, %p17;
	selp.b32 	%r1323, %r1321, %r1317, %p47;
	shfl.sync.bfly.b32	%r1324, %r1323, 1, 31, -1;
	selp.b32 	%r1325, %r1317, %r1324, %p47;
	selp.b32 	%r1326, %r1324, %r1321, %p47;
	selp.b32 	%r1327, %r1322, %r1318, %p47;
	shfl.sync.bfly.b32	%r1328, %r1327, 1, 31, -1;
	selp.b32 	%r1329, %r1318, %r1328, %p47;
	selp.b32 	%r1330, %r1328, %r1322, %p47;
	and.b32  	%r1331, %r1342, 8064;
	or.b32  	%r1332, %r1331, %r5;
	or.b32  	%r1333, %r1332, %r51;
	or.b32  	%r1334, %r1333, %r50;
	or.b32  	%r1335, %r1334, %r52;
	cvt.u64.u32 	%rd93, %r1335;
	add.s64 	%rd94, %rd4, %rd93;
	st.global.v4.u32 	[%rd94], {%r1325, %r1329, %r1326, %r1330};
	add.s32 	%r72, %r1342, 128;
	setp.ne.s32 	%p50, %r1342, 32640;
	mov.u32 	%r1342, %r72;
	@%p50 bra 	$L__BB0_11;
$L__BB0_18:                             // %L10844
	selp.u32 	%r1336, 1, 0, %p55;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r1336, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r1337, 1, 0, %p2; 
	}
	setp.eq.s32 	%p51, %r1337, 0;
	or.pred  	%p52, %p51, %p1;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %L10875
	st.global.u32 	[%rd8], %r87;
$L__BB0_20:                             // %L10921
	mov.u32 	%r1339, 0;
	st.global.u32 	[%rd7], %r1339;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r1340, 2;
	st.global.u32 	[%rd7], %r1340;
	mov.u64 	%rd95, exception880;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd23, exception1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_22:                             // %L370
	mov.u32 	%r100, 3;
	st.global.u32 	[%rd7], %r100;
	mov.u64 	%rd28, exception880;
	cvta.global.u64 	%rd29, %rd28;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd29;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
