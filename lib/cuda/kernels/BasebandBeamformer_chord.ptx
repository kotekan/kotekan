// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception880[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1886[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<56>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1351>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r79, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r82, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r82, 16511;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r83, 67711;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r80, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r84, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r85, %r84, %r2;
	add.s32 	%r86, %r85, %r4;
	mul.wide.u32 	%rd22, %r86, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r87, 1;
	st.global.u32 	[%rd7], %r87;
	setp.gt.u32 	%p8, %r80, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r81, %r80;
	setp.gt.s32 	%p10, %r81, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r88, %r81, %r80;
	and.b32  	%r89, %r88, 127;
	setp.eq.s32 	%p12, %r89, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L245
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b32  	%r5, %r1, 1;
	neg.s32 	%r90, %r5;
	and.b32  	%r91, %r90, 96;
	shr.u32 	%r6, %r2, 3;
	shl.b32 	%r92, %r3, 2;
	or.b32  	%r93, %r6, %r92;
	cvt.u16.u32 	%rs1, %r93;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r94, %rs6;
	and.b32  	%r7, %r94, 255;
	shr.u32 	%r95, %r1, 1;
	cvt.u16.u32 	%rs7, %r95;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 13;
	mul.lo.s16 	%rs11, %rs10, 48;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r96, %rs12;
	and.b32  	%r8, %r96, 255;
	add.s32 	%r97, %r91, %r7;
	mad.lo.s32 	%r98, %r8, 192, %r97;
	mul.wide.u32 	%rd23, %r98, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r99, [%rd24];
	add.s32 	%r10, %r99, -4;
	setp.lt.u32 	%p13, %r10, 31;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r9, %r99, -3;
	or.b32  	%r101, %r2, %r3;
	setp.ne.s32 	%p1, %r101, 0;
	mul.wide.u32 	%rd27, %r1, 4;
	add.s64 	%rd8, %rd6, %rd27;
	mov.u32 	%r1342, 0;
	@%p1 bra 	$L__BB0_12;
// %bb.11:                              // %L487
	st.global.u32 	[%rd8], %r1342;
$L__BB0_12:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p15, %r5, 0;
	bar.sync 	0;
	shl.b32 	%r360, %r2, 1;
	shl.b32 	%r361, %r3, 6;
	or.b32  	%r362, %r360, %r361;
	shl.b32 	%r363, %r2, 4;
	and.b32  	%r364, %r363, 16;
	and.b32  	%r365, %r362, 204;
	or.b32  	%r366, %r364, %r365;
	selp.b32 	%r367, 0, 24576, %p15;
	shr.u32 	%r11, %r2, 2;
	shr.u32 	%r368, %r3, 2;
	cvt.u16.u32 	%rs13, %r368;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	cvt.u16.u32 	%rs19, %r11;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r369, %rs27, 256;
	mul.lo.s32 	%r370, %r8, 49152;
	or.b32  	%r371, %r366, %r367;
	add.s32 	%r372, %r371, %r370;
	add.s32 	%r373, %r372, %r369;
	shl.b32 	%r374, %r373, 2;
	cvt.u64.u32 	%rd28, %r374;
	add.s64 	%rd29, %rd28, %rd1;
	ld.global.v4.u32 	{%r104, %r105, %r120, %r121}, [%rd29];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r375, %rs34, 256;
	add.s32 	%r376, %r372, %r375;
	shl.b32 	%r377, %r376, 2;
	cvt.u64.u32 	%rd30, %r377;
	add.s64 	%rd31, %rd30, %rd1;
	ld.global.v4.u32 	{%r112, %r113, %r128, %r129}, [%rd31];
	and.b32  	%r378, %r360, 12;
	and.b32  	%r379, %r361, 192;
	or.b32  	%r380, %r378, %r379;
	or.b32  	%r381, %r364, %r380;
	or.b32  	%r382, %r367, %r381;
	add.s32 	%r383, %r370, %r382;
	or.b32  	%r384, %r383, 33;
	add.s32 	%r385, %r384, %r369;
	mul.wide.u32 	%rd32, %r385, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r136, %r137, %r152, %r153}, [%rd33+-4];
	add.s32 	%r386, %r384, %r375;
	mul.wide.u32 	%rd34, %r386, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r144, %r145, %r160, %r161}, [%rd35+-4];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r387, %rs42, 256;
	add.s32 	%r388, %r372, %r387;
	shl.b32 	%r389, %r388, 2;
	cvt.u64.u32 	%rd36, %r389;
	add.s64 	%rd37, %rd36, %rd1;
	ld.global.v4.u32 	{%r168, %r169, %r184, %r185}, [%rd37];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r390, %rs49, 256;
	add.s32 	%r391, %r372, %r390;
	shl.b32 	%r392, %r391, 2;
	cvt.u64.u32 	%rd38, %r392;
	add.s64 	%rd39, %rd38, %rd1;
	ld.global.v4.u32 	{%r176, %r177, %r192, %r193}, [%rd39];
	add.s32 	%r393, %r384, %r387;
	mul.wide.u32 	%rd40, %r393, 4;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.v4.u32 	{%r200, %r201, %r216, %r217}, [%rd41+-4];
	add.s32 	%r394, %r384, %r390;
	mul.wide.u32 	%rd42, %r394, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.v4.u32 	{%r208, %r209, %r224, %r225}, [%rd43+-4];
	mov.u32 	%r226, 21520;
	// begin inline asm
	prmt.b32 %r232, %r104, %r105, %r226;
	// end inline asm
	mov.u32 	%r230, 30258;
	// begin inline asm
	prmt.b32 %r233, %r104, %r105, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r112, %r113, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r112, %r113, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r120, %r121, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r120, %r121, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r128, %r129, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r128, %r129, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r136, %r137, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r136, %r137, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r144, %r145, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r144, %r145, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r152, %r153, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r152, %r153, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r160, %r161, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r160, %r161, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r168, %r169, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r168, %r169, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r176, %r177, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r176, %r177, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r184, %r185, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r184, %r185, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r192, %r193, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r192, %r193, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r200, %r201, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r200, %r201, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r208, %r209, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r208, %r209, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r216, %r217, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r216, %r217, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r224, %r225, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r353, %r224, %r225, %r230;
	// end inline asm
	mov.u32 	%r354, 25152;
	// begin inline asm
	prmt.b32 %r231, %r232, %r233, %r354;
	// end inline asm
	mov.u32 	%r358, 29521;
	// begin inline asm
	prmt.b32 %r235, %r232, %r233, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r240, %r241, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r240, %r241, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r248, %r249, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r248, %r249, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r256, %r257, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r256, %r257, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r264, %r265, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r264, %r265, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r272, %r273, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r272, %r273, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r280, %r281, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r280, %r281, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r288, %r289, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r288, %r289, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r296, %r297, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r296, %r297, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r304, %r305, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r304, %r305, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r312, %r313, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r312, %r313, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r320, %r321, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r320, %r321, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r328, %r329, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r328, %r329, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r336, %r337, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r336, %r337, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r344, %r345, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r344, %r345, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r351, %r352, %r353, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r355, %r352, %r353, %r358;
	// end inline asm
	and.b32  	%r12, %r2, 2;
	setp.eq.s32 	%p16, %r12, 0;
	selp.b32 	%r395, %r263, %r231, %p16;
	shfl.sync.bfly.b32	%r396, %r395, 2, 31, -1;
	selp.b32 	%r397, %r231, %r396, %p16;
	selp.b32 	%r398, %r396, %r263, %p16;
	selp.b32 	%r399, %r271, %r239, %p16;
	shfl.sync.bfly.b32	%r400, %r399, 2, 31, -1;
	selp.b32 	%r401, %r239, %r400, %p16;
	selp.b32 	%r402, %r400, %r271, %p16;
	selp.b32 	%r403, %r267, %r235, %p16;
	shfl.sync.bfly.b32	%r404, %r403, 2, 31, -1;
	selp.b32 	%r405, %r235, %r404, %p16;
	selp.b32 	%r406, %r404, %r267, %p16;
	selp.b32 	%r407, %r275, %r243, %p16;
	shfl.sync.bfly.b32	%r408, %r407, 2, 31, -1;
	selp.b32 	%r409, %r243, %r408, %p16;
	selp.b32 	%r410, %r408, %r275, %p16;
	selp.b32 	%r411, %r279, %r247, %p16;
	shfl.sync.bfly.b32	%r412, %r411, 2, 31, -1;
	selp.b32 	%r413, %r247, %r412, %p16;
	selp.b32 	%r414, %r412, %r279, %p16;
	selp.b32 	%r415, %r287, %r255, %p16;
	shfl.sync.bfly.b32	%r416, %r415, 2, 31, -1;
	selp.b32 	%r417, %r255, %r416, %p16;
	selp.b32 	%r418, %r416, %r287, %p16;
	selp.b32 	%r419, %r283, %r251, %p16;
	shfl.sync.bfly.b32	%r420, %r419, 2, 31, -1;
	selp.b32 	%r421, %r251, %r420, %p16;
	selp.b32 	%r422, %r420, %r283, %p16;
	selp.b32 	%r423, %r291, %r259, %p16;
	shfl.sync.bfly.b32	%r424, %r423, 2, 31, -1;
	selp.b32 	%r425, %r259, %r424, %p16;
	selp.b32 	%r426, %r424, %r291, %p16;
	selp.b32 	%r427, %r327, %r295, %p16;
	shfl.sync.bfly.b32	%r428, %r427, 2, 31, -1;
	selp.b32 	%r429, %r295, %r428, %p16;
	selp.b32 	%r430, %r428, %r327, %p16;
	selp.b32 	%r431, %r335, %r303, %p16;
	shfl.sync.bfly.b32	%r432, %r431, 2, 31, -1;
	selp.b32 	%r433, %r303, %r432, %p16;
	selp.b32 	%r434, %r432, %r335, %p16;
	selp.b32 	%r435, %r331, %r299, %p16;
	shfl.sync.bfly.b32	%r436, %r435, 2, 31, -1;
	selp.b32 	%r437, %r299, %r436, %p16;
	selp.b32 	%r438, %r436, %r331, %p16;
	selp.b32 	%r439, %r339, %r307, %p16;
	shfl.sync.bfly.b32	%r440, %r439, 2, 31, -1;
	selp.b32 	%r441, %r307, %r440, %p16;
	selp.b32 	%r442, %r440, %r339, %p16;
	selp.b32 	%r443, %r343, %r311, %p16;
	shfl.sync.bfly.b32	%r444, %r443, 2, 31, -1;
	selp.b32 	%r445, %r311, %r444, %p16;
	selp.b32 	%r446, %r444, %r343, %p16;
	selp.b32 	%r447, %r351, %r319, %p16;
	shfl.sync.bfly.b32	%r448, %r447, 2, 31, -1;
	selp.b32 	%r449, %r319, %r448, %p16;
	selp.b32 	%r450, %r448, %r351, %p16;
	selp.b32 	%r451, %r347, %r315, %p16;
	shfl.sync.bfly.b32	%r452, %r451, 2, 31, -1;
	selp.b32 	%r453, %r315, %r452, %p16;
	selp.b32 	%r454, %r452, %r347, %p16;
	selp.b32 	%r455, %r355, %r323, %p16;
	shfl.sync.bfly.b32	%r456, %r455, 2, 31, -1;
	selp.b32 	%r457, %r323, %r456, %p16;
	selp.b32 	%r458, %r456, %r355, %p16;
	and.b32  	%r13, %r2, 4;
	setp.eq.s32 	%p17, %r13, 0;
	selp.b32 	%r459, %r429, %r397, %p17;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r14, %r397, %r460, %p17;
	selp.b32 	%r15, %r460, %r429, %p17;
	selp.b32 	%r461, %r433, %r401, %p17;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r16, %r401, %r462, %p17;
	selp.b32 	%r17, %r462, %r433, %p17;
	selp.b32 	%r463, %r437, %r405, %p17;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r18, %r405, %r464, %p17;
	selp.b32 	%r19, %r464, %r437, %p17;
	selp.b32 	%r465, %r441, %r409, %p17;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r20, %r409, %r466, %p17;
	selp.b32 	%r21, %r466, %r441, %p17;
	selp.b32 	%r467, %r445, %r413, %p17;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r22, %r413, %r468, %p17;
	selp.b32 	%r23, %r468, %r445, %p17;
	selp.b32 	%r469, %r449, %r417, %p17;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r24, %r417, %r470, %p17;
	selp.b32 	%r25, %r470, %r449, %p17;
	selp.b32 	%r471, %r453, %r421, %p17;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r26, %r421, %r472, %p17;
	selp.b32 	%r27, %r472, %r453, %p17;
	selp.b32 	%r473, %r457, %r425, %p17;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r28, %r425, %r474, %p17;
	selp.b32 	%r29, %r474, %r457, %p17;
	selp.b32 	%r475, %r430, %r398, %p17;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r30, %r398, %r476, %p17;
	selp.b32 	%r31, %r476, %r430, %p17;
	selp.b32 	%r477, %r434, %r402, %p17;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r32, %r402, %r478, %p17;
	selp.b32 	%r33, %r478, %r434, %p17;
	selp.b32 	%r479, %r438, %r406, %p17;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r34, %r406, %r480, %p17;
	selp.b32 	%r35, %r480, %r438, %p17;
	selp.b32 	%r481, %r442, %r410, %p17;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r36, %r410, %r482, %p17;
	selp.b32 	%r37, %r482, %r442, %p17;
	selp.b32 	%r483, %r446, %r414, %p17;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r38, %r414, %r484, %p17;
	selp.b32 	%r39, %r484, %r446, %p17;
	selp.b32 	%r485, %r450, %r418, %p17;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r40, %r418, %r486, %p17;
	selp.b32 	%r41, %r486, %r450, %p17;
	selp.b32 	%r487, %r454, %r422, %p17;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r42, %r422, %r488, %p17;
	selp.b32 	%r43, %r488, %r454, %p17;
	selp.b32 	%r489, %r458, %r426, %p17;
	shfl.sync.bfly.b32	%r490, %r489, 4, 31, -1;
	selp.b32 	%r44, %r426, %r490, %p17;
	selp.b32 	%r45, %r490, %r458, %p17;
	and.b32  	%r46, %r3, 12;
	shl.b32 	%r491, %r1, 7;
	and.b32  	%r492, %r491, 128;
	shl.b32 	%r493, %r2, 2;
	and.b32  	%r494, %r493, 28;
	and.b32  	%r495, %r4, 96;
	or.b32  	%r47, %r494, %r495;
	shl.b32 	%r496, %r8, 8;
	or.b32  	%r497, %r47, %r492;
	or.b32  	%r48, %r497, %r496;
	shl.b32 	%r498, %r2, 3;
	and.b32  	%r499, %r498, 24;
	or.b32  	%r49, %r495, %r499;
	and.b32  	%r500, %r3, 3;
	mul.lo.s32 	%r501, %r500, 3200;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r502, %rs54;
	and.b32  	%r503, %r502, 255;
	and.b32  	%r50, %r360, 6;
	or.b32  	%r51, %r501, %r503;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r504, %rs60;
	and.b32  	%r505, %r504, 255;
	or.b32  	%r52, %r501, %r505;
	and.b32  	%r506, %r2, 7;
	shl.b32 	%r508, %r87, %r10;
	setp.gt.u32 	%p18, %r10, 31;
	selp.b32 	%r53, 0, %r508, %p18;
	min.u32 	%r54, %r9, 31;
	and.b32  	%r55, %r2, 1;
	shl.b32 	%r509, %r2, 5;
	and.b32  	%r510, %r509, 64;
	shl.b32 	%r511, %r1, 11;
	and.b32  	%r512, %r511, 2048;
	shl.b32 	%r513, %r8, 12;
	or.b32  	%r514, %r513, %r512;
	mad.lo.s32 	%r515, %r7, 196608, %r514;
	mul.lo.s32 	%r516, %r506, 100;
	add.s32 	%r517, %r516, %r7;
	mul.wide.u32 	%rd44, %r517, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd46, %rd45, 16512;
	add.s64 	%rd9, %rd46, %rd44;
	cvt.u64.u32 	%rd47, %r516;
	cvt.u64.u32 	%rd48, %r7;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd10, %rd46, %rd50;
	add.s32 	%r518, %r516, 800;
	add.s32 	%r519, %r518, %r7;
	mul.wide.u32 	%rd51, %r519, 4;
	add.s64 	%rd11, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r518;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd12, %rd46, %rd54;
	add.s32 	%r520, %r516, 1600;
	add.s32 	%r521, %r520, %r7;
	mul.wide.u32 	%rd55, %r521, 4;
	add.s64 	%rd13, %rd46, %rd55;
	cvt.u64.u32 	%rd56, %r520;
	add.s64 	%rd57, %rd48, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd14, %rd46, %rd58;
	or.b32  	%r522, %r2, 24;
	mul.lo.s32 	%r523, %r522, 100;
	add.s32 	%r524, %r523, %r7;
	mul.wide.u32 	%rd59, %r524, 4;
	add.s64 	%rd15, %rd46, %rd59;
	cvt.u64.u32 	%rd60, %r523;
	add.s64 	%rd61, %rd48, %rd60;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd16, %rd46, %rd62;
	and.b32  	%r525, %r498, 32;
	or.b32  	%r526, %r525, %r364;
	or.b32  	%r56, %r510, %r526;
	shl.b32 	%r57, %r515, 2;
	mov.pred 	%p55, 0;
$L__BB0_13:                             // %L2581
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_15 Depth 2
                                        //       Child Loop BB0_17 Depth 3
	add.s32 	%r527, %r1342, %r80;
	setp.ge.s32 	%p19, %r527, %r81;
	@%p19 bra 	$L__BB0_20;
// %bb.14:                              // %L2589.preheader
                                        //   in Loop: Header=BB0_13 Depth=1
	or.b32  	%r59, %r1342, %r46;
	or.b32  	%r60, %r59, 16;
	mov.u32 	%r1343, 0;
	mov.u32 	%r1344, %r1343;
	mov.u32 	%r1345, %r1343;
	mov.u32 	%r1346, %r1343;
	mov.u32 	%r1347, %r1343;
	mov.u32 	%r1348, %r1343;
	mov.u32 	%r1349, %r1343;
$L__BB0_15:                             // %L2589
                                        //   Parent Loop BB0_13 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_17 Depth 3
	setp.lt.u32 	%p20, %r3, 16;
	@%p20 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_16;
$L__BB0_23:                             // %pass1155
                                        //   in Loop: Header=BB0_15 Depth=2
	add.s32 	%r529, %r59, %r1343;
	or.b32  	%r530, %r529, %r6;
	and.b32  	%r531, %r530, 32751;
	add.s32 	%r532, %r531, %r80;
	mad.lo.s32 	%r533, %r532, 12288, %r48;
	mul.hi.s32 	%r534, %r533, 715827883;
	shr.u32 	%r535, %r534, 31;
	shr.s32 	%r536, %r534, 26;
	add.s32 	%r537, %r536, %r535;
	setp.lt.s32 	%p21, %r533, 0;
	mul.lo.s32 	%r538, %r537, 402653184;
	setp.ne.s32 	%p22, %r538, %r533;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r539, -1, 0, %p23;
	add.s32 	%r540, %r537, %r539;
	mad.lo.s32 	%r541, %r540, -402653184, %r533;
	mul.wide.s32 	%rd63, %r541, 4;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.v4.u32 	{%r542, %r543, %r544, %r545}, [%rd64];
	add.s32 	%r546, %r60, %r1343;
	or.b32  	%r547, %r546, %r6;
	and.b32  	%r548, %r547, 32767;
	add.s32 	%r549, %r548, %r80;
	mad.lo.s32 	%r550, %r549, 12288, %r48;
	mul.hi.s32 	%r551, %r550, 715827883;
	shr.u32 	%r552, %r551, 31;
	shr.s32 	%r553, %r551, 26;
	add.s32 	%r554, %r553, %r552;
	setp.lt.s32 	%p24, %r550, 0;
	mul.lo.s32 	%r555, %r554, 402653184;
	setp.ne.s32 	%p25, %r555, %r550;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r556, -1, 0, %p26;
	add.s32 	%r557, %r554, %r556;
	mad.lo.s32 	%r558, %r557, -402653184, %r550;
	mul.wide.s32 	%rd65, %r558, 4;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.v4.u32 	{%r559, %r560, %r561, %r562}, [%rd66];
	and.b32  	%r563, %r530, 15;
	mul.lo.s32 	%r564, %r563, 129;
	add.s32 	%r565, %r47, %r564;
	mul.wide.u32 	%rd67, %r565, 4;
	add.s64 	%rd69, %rd45, %rd67;
	st.shared.u32 	[%rd69], %r542;
	cvt.u64.u32 	%rd70, %r564;
	cvt.u64.u32 	%rd71, %r47;
	add.s64 	%rd72, %rd71, %rd70;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd45, %rd73;
	st.shared.u32 	[%rd74+4], %r543;
	st.shared.u32 	[%rd74+8], %r544;
	st.shared.u32 	[%rd74+12], %r545;
	and.b32  	%r566, %r547, 31;
	mul.lo.s32 	%r567, %r566, 129;
	add.s32 	%r568, %r47, %r567;
	mul.wide.u32 	%rd75, %r568, 4;
	add.s64 	%rd76, %rd45, %rd75;
	st.shared.u32 	[%rd76], %r559;
	cvt.u64.u32 	%rd77, %r567;
	add.s64 	%rd78, %rd71, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd45, %rd79;
	st.shared.u32 	[%rd80+4], %r560;
	st.shared.u32 	[%rd80+8], %r561;
	st.shared.u32 	[%rd80+12], %r562;
$L__BB0_16:                             // %L4316
                                        //   in Loop: Header=BB0_15 Depth=2
	bar.sync 	0;
	mov.u32 	%r582, 0;
	mov.u32 	%r1350, %r582;
$L__BB0_17:                             // %L4318
                                        //   Parent Loop BB0_13 Depth=1
                                        //     Parent Loop BB0_15 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1094, %r11, %r1350;
	mad.lo.s32 	%r1095, %r1094, 129, %r49;
	mul.wide.u32 	%rd81, %r1095, 4;
	add.s64 	%rd83, %rd45, %rd81;
	ld.shared.u32 	%r571, [%rd83];
	mov.u32 	%r572, 134744072;
	mov.u32 	%r573, 252645135;
	// begin inline asm
	lop3.b32 %r570, %r571, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1096, %r570, 2021161080;
	xor.b32  	%r581, %r1096, -2139062144;
	shr.u32 	%r575, %r571, 4;
	// begin inline asm
	lop3.b32 %r574, %r575, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1097, %r574, 2021161080;
	xor.b32  	%r587, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r14}, {%r581}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r18}, {%r587}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r14}, {%r587}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r18}, {%r581}, {%r590, %r591};
	// end inline asm
	ld.shared.u32 	%r603, [%rd83+4];
	// begin inline asm
	lop3.b32 %r602, %r603, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1098, %r602, 2021161080;
	xor.b32  	%r613, %r1098, -2139062144;
	shr.u32 	%r607, %r603, 4;
	// begin inline asm
	lop3.b32 %r606, %r607, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1099, %r606, 2021161080;
	xor.b32  	%r619, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r22}, {%r613}, {%r578, %r579};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r26}, {%r619}, {%r584, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r22}, {%r619}, {%r596, %r597};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r26}, {%r613}, {%r622, %r623};
	// end inline asm
	ld.shared.u32 	%r635, [%rd83+8];
	// begin inline asm
	lop3.b32 %r634, %r635, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1100, %r634, 2021161080;
	xor.b32  	%r645, %r1100, -2139062144;
	shr.u32 	%r639, %r635, 4;
	// begin inline asm
	lop3.b32 %r638, %r639, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1101, %r638, 2021161080;
	xor.b32  	%r651, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r30}, {%r645}, {%r610, %r611};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r34}, {%r651}, {%r616, %r617};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r30}, {%r651}, {%r628, %r629};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r660, %r661}, {%r34}, {%r645}, {%r654, %r655};
	// end inline asm
	ld.shared.u32 	%r667, [%rd83+12];
	// begin inline asm
	lop3.b32 %r666, %r667, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1102, %r666, 2021161080;
	xor.b32  	%r677, %r1102, -2139062144;
	shr.u32 	%r671, %r667, 4;
	// begin inline asm
	lop3.b32 %r670, %r671, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1103, %r670, 2021161080;
	xor.b32  	%r683, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r674, %r675}, {%r38}, {%r677}, {%r642, %r643};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r680, %r681}, {%r42}, {%r683}, {%r648, %r649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r686, %r687}, {%r38}, {%r683}, {%r660, %r661};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r692, %r693}, {%r42}, {%r677}, {%r686, %r687};
	// end inline asm
	ld.shared.u32 	%r699, [%rd83+16];
	// begin inline asm
	lop3.b32 %r698, %r699, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1104, %r698, 2021161080;
	xor.b32  	%r709, %r1104, -2139062144;
	shr.u32 	%r703, %r699, 4;
	// begin inline asm
	lop3.b32 %r702, %r703, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1105, %r702, 2021161080;
	xor.b32  	%r715, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r706, %r707}, {%r15}, {%r709}, {%r674, %r675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r712, %r713}, {%r19}, {%r715}, {%r680, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r718, %r719}, {%r15}, {%r715}, {%r692, %r693};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r724, %r725}, {%r19}, {%r709}, {%r718, %r719};
	// end inline asm
	ld.shared.u32 	%r731, [%rd83+20];
	// begin inline asm
	lop3.b32 %r730, %r731, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1106, %r730, 2021161080;
	xor.b32  	%r741, %r1106, -2139062144;
	shr.u32 	%r735, %r731, 4;
	// begin inline asm
	lop3.b32 %r734, %r735, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1107, %r734, 2021161080;
	xor.b32  	%r747, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r738, %r739}, {%r23}, {%r741}, {%r706, %r707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r744, %r745}, {%r27}, {%r747}, {%r712, %r713};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r750, %r751}, {%r23}, {%r747}, {%r724, %r725};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r756, %r757}, {%r27}, {%r741}, {%r750, %r751};
	// end inline asm
	ld.shared.u32 	%r763, [%rd83+24];
	// begin inline asm
	lop3.b32 %r762, %r763, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1108, %r762, 2021161080;
	xor.b32  	%r773, %r1108, -2139062144;
	shr.u32 	%r767, %r763, 4;
	// begin inline asm
	lop3.b32 %r766, %r767, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1109, %r766, 2021161080;
	xor.b32  	%r779, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r770, %r771}, {%r31}, {%r773}, {%r738, %r739};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r776, %r777}, {%r35}, {%r779}, {%r744, %r745};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r782, %r783}, {%r31}, {%r779}, {%r756, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r788, %r789}, {%r35}, {%r773}, {%r782, %r783};
	// end inline asm
	ld.shared.u32 	%r795, [%rd83+28];
	// begin inline asm
	lop3.b32 %r794, %r795, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1110, %r794, 2021161080;
	xor.b32  	%r805, %r1110, -2139062144;
	shr.u32 	%r799, %r795, 4;
	// begin inline asm
	lop3.b32 %r798, %r799, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1111, %r798, 2021161080;
	xor.b32  	%r811, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r802, %r803}, {%r39}, {%r805}, {%r770, %r771};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r808, %r809}, {%r43}, {%r811}, {%r776, %r777};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r814, %r815}, {%r39}, {%r811}, {%r788, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r820, %r821}, {%r43}, {%r805}, {%r814, %r815};
	// end inline asm
	sub.s32 	%r1112, %r802, %r808;
	add.s32 	%r1113, %r1112, 4;
	shr.s32 	%r828, %r1113, 3;
	add.s32 	%r1114, %r820, 4;
	shr.s32 	%r827, %r1114, 3;
	sub.s32 	%r1115, %r803, %r809;
	add.s32 	%r1116, %r1115, 4;
	shr.s32 	%r831, %r1116, 3;
	add.s32 	%r1117, %r821, 4;
	shr.s32 	%r830, %r1117, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r826, %r827, %r828;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r829, %r830, %r831;
	// end inline asm
	or.b32  	%r1118, %r50, %r1350;
	mul.lo.s32 	%r1119, %r1118, 100;
	add.s32 	%r1120, %r51, %r1119;
	mul.wide.u32 	%rd84, %r1120, 4;
	add.s64 	%rd86, %rd46, %rd84;
	st.shared.u32 	[%rd86], %r826;
	add.s32 	%r1121, %r1119, 100;
	add.s32 	%r1122, %r51, %r1121;
	mul.wide.u32 	%rd87, %r1122, 4;
	add.s64 	%rd88, %rd46, %rd87;
	st.shared.u32 	[%rd88], %r829;
	ld.shared.u32 	%r833, [%rd83];
	// begin inline asm
	lop3.b32 %r832, %r833, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1123, %r832, 2021161080;
	xor.b32  	%r843, %r1123, -2139062144;
	shr.u32 	%r837, %r833, 4;
	// begin inline asm
	lop3.b32 %r836, %r837, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1124, %r836, 2021161080;
	xor.b32  	%r849, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r840, %r841}, {%r16}, {%r843}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r846, %r847}, {%r20}, {%r849}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r852, %r853}, {%r16}, {%r849}, {%r582, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r858, %r859}, {%r20}, {%r843}, {%r852, %r853};
	// end inline asm
	ld.shared.u32 	%r865, [%rd83+4];
	// begin inline asm
	lop3.b32 %r864, %r865, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1125, %r864, 2021161080;
	xor.b32  	%r875, %r1125, -2139062144;
	shr.u32 	%r869, %r865, 4;
	// begin inline asm
	lop3.b32 %r868, %r869, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1126, %r868, 2021161080;
	xor.b32  	%r881, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r872, %r873}, {%r24}, {%r875}, {%r840, %r841};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r878, %r879}, {%r28}, {%r881}, {%r846, %r847};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r884, %r885}, {%r24}, {%r881}, {%r858, %r859};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r890, %r891}, {%r28}, {%r875}, {%r884, %r885};
	// end inline asm
	ld.shared.u32 	%r897, [%rd83+8];
	// begin inline asm
	lop3.b32 %r896, %r897, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1127, %r896, 2021161080;
	xor.b32  	%r907, %r1127, -2139062144;
	shr.u32 	%r901, %r897, 4;
	// begin inline asm
	lop3.b32 %r900, %r901, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1128, %r900, 2021161080;
	xor.b32  	%r913, %r1128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r904, %r905}, {%r32}, {%r907}, {%r872, %r873};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r910, %r911}, {%r36}, {%r913}, {%r878, %r879};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r916, %r917}, {%r32}, {%r913}, {%r890, %r891};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r922, %r923}, {%r36}, {%r907}, {%r916, %r917};
	// end inline asm
	ld.shared.u32 	%r929, [%rd83+12];
	// begin inline asm
	lop3.b32 %r928, %r929, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1129, %r928, 2021161080;
	xor.b32  	%r939, %r1129, -2139062144;
	shr.u32 	%r933, %r929, 4;
	// begin inline asm
	lop3.b32 %r932, %r933, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1130, %r932, 2021161080;
	xor.b32  	%r945, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r936, %r937}, {%r40}, {%r939}, {%r904, %r905};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r942, %r943}, {%r44}, {%r945}, {%r910, %r911};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r948, %r949}, {%r40}, {%r945}, {%r922, %r923};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r954, %r955}, {%r44}, {%r939}, {%r948, %r949};
	// end inline asm
	ld.shared.u32 	%r961, [%rd83+16];
	// begin inline asm
	lop3.b32 %r960, %r961, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1131, %r960, 2021161080;
	xor.b32  	%r971, %r1131, -2139062144;
	shr.u32 	%r965, %r961, 4;
	// begin inline asm
	lop3.b32 %r964, %r965, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1132, %r964, 2021161080;
	xor.b32  	%r977, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r968, %r969}, {%r17}, {%r971}, {%r936, %r937};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r974, %r975}, {%r21}, {%r977}, {%r942, %r943};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r980, %r981}, {%r17}, {%r977}, {%r954, %r955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r986, %r987}, {%r21}, {%r971}, {%r980, %r981};
	// end inline asm
	ld.shared.u32 	%r993, [%rd83+20];
	// begin inline asm
	lop3.b32 %r992, %r993, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1133, %r992, 2021161080;
	xor.b32  	%r1003, %r1133, -2139062144;
	shr.u32 	%r997, %r993, 4;
	// begin inline asm
	lop3.b32 %r996, %r997, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1134, %r996, 2021161080;
	xor.b32  	%r1009, %r1134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1000, %r1001}, {%r25}, {%r1003}, {%r968, %r969};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1006, %r1007}, {%r29}, {%r1009}, {%r974, %r975};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1012, %r1013}, {%r25}, {%r1009}, {%r986, %r987};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1018, %r1019}, {%r29}, {%r1003}, {%r1012, %r1013};
	// end inline asm
	ld.shared.u32 	%r1025, [%rd83+24];
	// begin inline asm
	lop3.b32 %r1024, %r1025, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1135, %r1024, 2021161080;
	xor.b32  	%r1035, %r1135, -2139062144;
	shr.u32 	%r1029, %r1025, 4;
	// begin inline asm
	lop3.b32 %r1028, %r1029, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1136, %r1028, 2021161080;
	xor.b32  	%r1041, %r1136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1032, %r1033}, {%r33}, {%r1035}, {%r1000, %r1001};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1038, %r1039}, {%r37}, {%r1041}, {%r1006, %r1007};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1044, %r1045}, {%r33}, {%r1041}, {%r1018, %r1019};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1050, %r1051}, {%r37}, {%r1035}, {%r1044, %r1045};
	// end inline asm
	ld.shared.u32 	%r1057, [%rd83+28];
	// begin inline asm
	lop3.b32 %r1056, %r1057, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1137, %r1056, 2021161080;
	xor.b32  	%r1067, %r1137, -2139062144;
	shr.u32 	%r1061, %r1057, 4;
	// begin inline asm
	lop3.b32 %r1060, %r1061, %r572, %r573, 40;
	// end inline asm
	add.s32 	%r1138, %r1060, 2021161080;
	xor.b32  	%r1073, %r1138, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1064, %r1065}, {%r41}, {%r1067}, {%r1032, %r1033};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1070, %r1071}, {%r45}, {%r1073}, {%r1038, %r1039};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1076, %r1077}, {%r41}, {%r1073}, {%r1050, %r1051};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1082, %r1083}, {%r45}, {%r1067}, {%r1076, %r1077};
	// end inline asm
	sub.s32 	%r1139, %r1064, %r1070;
	add.s32 	%r1140, %r1139, 4;
	shr.s32 	%r1090, %r1140, 3;
	add.s32 	%r1141, %r1082, 4;
	shr.s32 	%r1089, %r1141, 3;
	sub.s32 	%r1142, %r1065, %r1071;
	add.s32 	%r1143, %r1142, 4;
	shr.s32 	%r1093, %r1143, 3;
	add.s32 	%r1144, %r1083, 4;
	shr.s32 	%r1092, %r1144, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1088, %r1089, %r1090;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1091, %r1092, %r1093;
	// end inline asm
	add.s32 	%r1145, %r52, %r1119;
	mul.wide.u32 	%rd89, %r1145, 4;
	add.s64 	%rd90, %rd46, %rd89;
	st.shared.u32 	[%rd90], %r1088;
	add.s32 	%r1146, %r52, %r1121;
	mul.wide.u32 	%rd91, %r1146, 4;
	add.s64 	%rd92, %rd46, %rd91;
	st.shared.u32 	[%rd92], %r1091;
	add.s32 	%r1350, %r1350, 8;
	setp.ne.s32 	%p27, %r1350, 32;
	@%p27 bra 	$L__BB0_17;
// %bb.18:                              // %L8051
                                        //   in Loop: Header=BB0_15 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1165, [%rd9];
	ld.shared.u32 	%r1166, [%rd10+12800];
	ld.shared.u32 	%r1167, [%rd10+25600];
	ld.shared.u32 	%r1168, [%rd10+38400];
	ld.shared.u32 	%r1169, [%rd11];
	ld.shared.u32 	%r1170, [%rd12+12800];
	ld.shared.u32 	%r1171, [%rd12+25600];
	ld.shared.u32 	%r1172, [%rd12+38400];
	ld.shared.u32 	%r1173, [%rd13];
	ld.shared.u32 	%r1174, [%rd14+12800];
	ld.shared.u32 	%r1175, [%rd14+25600];
	ld.shared.u32 	%r1176, [%rd14+38400];
	ld.shared.u32 	%r1177, [%rd15];
	ld.shared.u32 	%r1178, [%rd16+12800];
	ld.shared.u32 	%r1179, [%rd16+25600];
	ld.shared.u32 	%r1180, [%rd16+38400];
	cvt.s32.s16 	%r1181, %r1165;
	shr.s32 	%r1182, %r1165, 16;
	cvt.s32.s16 	%r1183, %r1166;
	shr.s32 	%r1184, %r1166, 16;
	cvt.s32.s16 	%r1185, %r1167;
	shr.s32 	%r1186, %r1167, 16;
	cvt.s32.s16 	%r1187, %r1168;
	shr.s32 	%r1188, %r1168, 16;
	cvt.s32.s16 	%r1189, %r1169;
	shr.s32 	%r1190, %r1169, 16;
	cvt.s32.s16 	%r1191, %r1170;
	shr.s32 	%r1192, %r1170, 16;
	cvt.s32.s16 	%r1193, %r1171;
	shr.s32 	%r1194, %r1171, 16;
	cvt.s32.s16 	%r1195, %r1172;
	shr.s32 	%r1196, %r1172, 16;
	cvt.s32.s16 	%r1197, %r1173;
	shr.s32 	%r1198, %r1173, 16;
	cvt.s32.s16 	%r1199, %r1174;
	shr.s32 	%r1200, %r1174, 16;
	cvt.s32.s16 	%r1201, %r1175;
	shr.s32 	%r1202, %r1175, 16;
	cvt.s32.s16 	%r1203, %r1176;
	shr.s32 	%r1204, %r1176, 16;
	cvt.s32.s16 	%r1205, %r1177;
	shr.s32 	%r1206, %r1177, 16;
	cvt.s32.s16 	%r1207, %r1178;
	shr.s32 	%r1208, %r1178, 16;
	cvt.s32.s16 	%r1209, %r1179;
	shr.s32 	%r1210, %r1179, 16;
	cvt.s32.s16 	%r1211, %r1180;
	shr.s32 	%r1212, %r1180, 16;
	add.s32 	%r1213, %r1181, %r53;
	add.s32 	%r1214, %r1213, %r1183;
	add.s32 	%r1215, %r1214, %r1185;
	add.s32 	%r1216, %r1215, %r1187;
	shr.s32 	%r1217, %r1216, %r54;
	add.s32 	%r1218, %r1182, %r53;
	add.s32 	%r1219, %r1218, %r1184;
	add.s32 	%r1220, %r1219, %r1186;
	add.s32 	%r1221, %r1220, %r1188;
	shr.s32 	%r1222, %r1221, %r54;
	add.s32 	%r1223, %r1189, %r53;
	add.s32 	%r1224, %r1223, %r1191;
	add.s32 	%r1225, %r1224, %r1193;
	add.s32 	%r1226, %r1225, %r1195;
	shr.s32 	%r1227, %r1226, %r54;
	add.s32 	%r1228, %r1190, %r53;
	add.s32 	%r1229, %r1228, %r1192;
	add.s32 	%r1230, %r1229, %r1194;
	add.s32 	%r1231, %r1230, %r1196;
	shr.s32 	%r1232, %r1231, %r54;
	add.s32 	%r1233, %r1197, %r53;
	add.s32 	%r1234, %r1233, %r1199;
	add.s32 	%r1235, %r1234, %r1201;
	add.s32 	%r1236, %r1235, %r1203;
	shr.s32 	%r1237, %r1236, %r54;
	add.s32 	%r1238, %r1198, %r53;
	add.s32 	%r1239, %r1238, %r1200;
	add.s32 	%r1240, %r1239, %r1202;
	add.s32 	%r1241, %r1240, %r1204;
	shr.s32 	%r1242, %r1241, %r54;
	add.s32 	%r1243, %r1205, %r53;
	add.s32 	%r1244, %r1243, %r1207;
	add.s32 	%r1245, %r1244, %r1209;
	add.s32 	%r1246, %r1245, %r1211;
	shr.s32 	%r1247, %r1246, %r54;
	add.s32 	%r1248, %r1206, %r53;
	add.s32 	%r1249, %r1248, %r1208;
	add.s32 	%r1250, %r1249, %r1210;
	add.s32 	%r1251, %r1250, %r1212;
	shr.s32 	%r1252, %r1251, %r54;
	max.s32 	%r1253, %r1217, -7;
	min.s32 	%r1152, %r1253, 7;
	setp.ne.s32 	%p28, %r1152, %r1217;
	or.pred  	%p29, %p55, %p28;
	max.s32 	%r1254, %r1222, -7;
	min.s32 	%r1159, %r1254, 7;
	setp.ne.s32 	%p30, %r1159, %r1222;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r1255, %r1227, -7;
	min.s32 	%r1151, %r1255, 7;
	setp.ne.s32 	%p32, %r1151, %r1227;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r1256, %r1232, -7;
	min.s32 	%r1158, %r1256, 7;
	setp.ne.s32 	%p34, %r1158, %r1232;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r1257, %r1237, -7;
	min.s32 	%r1149, %r1257, 7;
	setp.ne.s32 	%p36, %r1149, %r1237;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r1258, %r1242, -7;
	min.s32 	%r1156, %r1258, 7;
	setp.ne.s32 	%p38, %r1156, %r1242;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r1259, %r1247, -7;
	min.s32 	%r1148, %r1259, 7;
	setp.ne.s32 	%p40, %r1148, %r1247;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r1260, %r1252, -7;
	min.s32 	%r1155, %r1260, 7;
	setp.ne.s32 	%p42, %r1155, %r1252;
	or.pred  	%p55, %p42, %p41;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1147, %r1148, %r1149, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1150, %r1151, %r1152, %r1147;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1154, %r1155, %r1156, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1157, %r1158, %r1159, %r1154;
	// end inline asm
	shl.b32 	%r1164, %r1157, 4;
	// begin inline asm
	lop3.b32 %r1271, %r573, %r1150, %r1164, 202;
	// end inline asm
	setp.eq.s32 	%p43, %r1343, 0;
	selp.b32 	%r1348, %r1271, %r1348, %p43;
	selp.b32 	%r1349, %r1271, %r1349, %p43;
	setp.eq.s32 	%p44, %r1343, 32;
	selp.b32 	%r1344, %r1271, %r1344, %p44;
	selp.b32 	%r1345, %r1271, %r1345, %p44;
	setp.eq.s32 	%p45, %r1343, 64;
	selp.b32 	%r1346, %r1271, %r1346, %p45;
	selp.b32 	%r1347, %r1271, %r1347, %p45;
	add.s32 	%r77, %r1343, 32;
	setp.ne.s32 	%p46, %r1343, 96;
	mov.u32 	%r1343, %r77;
	@%p46 bra 	$L__BB0_15;
// %bb.19:                              // %L10457.L10463_crit_edge
                                        //   in Loop: Header=BB0_13 Depth=1
	setp.eq.s32 	%p47, %r55, 0;
	// begin inline asm
	prmt.b32 %r1261, %r1348, %r1344, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1265, %r1349, %r1345, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1269, %r1346, %r1271, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1273, %r1347, %r1271, %r358;
	// end inline asm
	selp.b32 	%r1309, %r1265, %r1261, %p47;
	shfl.sync.bfly.b32	%r1310, %r1309, 1, 31, -1;
	selp.b32 	%r1278, %r1261, %r1310, %p47;
	selp.b32 	%r1279, %r1310, %r1265, %p47;
	selp.b32 	%r1311, %r1273, %r1269, %p47;
	shfl.sync.bfly.b32	%r1312, %r1311, 1, 31, -1;
	selp.b32 	%r1286, %r1269, %r1312, %p47;
	selp.b32 	%r1287, %r1312, %r1273, %p47;
	// begin inline asm
	prmt.b32 %r1277, %r1278, %r1279, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1281, %r1278, %r1279, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1285, %r1286, %r1287, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1289, %r1286, %r1287, %r358;
	// end inline asm
	selp.b32 	%r1313, %r1285, %r1277, %p16;
	shfl.sync.bfly.b32	%r1314, %r1313, 2, 31, -1;
	selp.b32 	%r1294, %r1277, %r1314, %p16;
	selp.b32 	%r1295, %r1314, %r1285, %p16;
	selp.b32 	%r1315, %r1289, %r1281, %p16;
	shfl.sync.bfly.b32	%r1316, %r1315, 2, 31, -1;
	selp.b32 	%r1302, %r1281, %r1316, %p16;
	selp.b32 	%r1303, %r1316, %r1289, %p16;
	// begin inline asm
	prmt.b32 %r1293, %r1294, %r1295, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1297, %r1294, %r1295, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1301, %r1302, %r1303, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1305, %r1302, %r1303, %r230;
	// end inline asm
	selp.b32 	%r1317, %r1301, %r1293, %p17;
	shfl.sync.bfly.b32	%r1318, %r1317, 4, 31, -1;
	selp.b32 	%r1319, %r1293, %r1318, %p17;
	selp.b32 	%r1320, %r1318, %r1301, %p17;
	selp.b32 	%r1321, %r1305, %r1297, %p17;
	shfl.sync.bfly.b32	%r1322, %r1321, 4, 31, -1;
	selp.b32 	%r1323, %r1297, %r1322, %p17;
	selp.b32 	%r1324, %r1322, %r1305, %p17;
	selp.b32 	%r1325, %r1323, %r1319, %p47;
	shfl.sync.bfly.b32	%r1326, %r1325, 1, 31, -1;
	selp.b32 	%r1327, %r1319, %r1326, %p47;
	selp.b32 	%r1328, %r1326, %r1323, %p47;
	selp.b32 	%r1329, %r1324, %r1320, %p47;
	shfl.sync.bfly.b32	%r1330, %r1329, 1, 31, -1;
	selp.b32 	%r1331, %r1320, %r1330, %p47;
	selp.b32 	%r1332, %r1330, %r1324, %p47;
	and.b32  	%r1333, %r1342, 8064;
	or.b32  	%r1334, %r1333, %r56;
	or.b32  	%r1335, %r1334, %r57;
	cvt.u64.u32 	%rd93, %r1335;
	add.s64 	%rd94, %rd4, %rd93;
	st.global.v4.u32 	[%rd94], {%r1327, %r1331, %r1328, %r1332};
	add.s32 	%r78, %r1342, 128;
	setp.ne.s32 	%p50, %r1342, 32640;
	mov.u32 	%r1342, %r78;
	@%p50 bra 	$L__BB0_13;
$L__BB0_20:                             // %L10844
	selp.u32 	%r1336, 1, 0, %p55;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r1336, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r1337, 1, 0, %p2; 
	}
	setp.eq.s32 	%p51, %r1337, 0;
	or.pred  	%p52, %p51, %p1;
	@%p52 bra 	$L__BB0_22;
// %bb.21:                              // %L10875
	st.global.u32 	[%rd8], %r87;
$L__BB0_22:                             // %L10921
	mov.u32 	%r1339, 0;
	st.global.u32 	[%rd7], %r1339;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r1340, 2;
	st.global.u32 	[%rd7], %r1340;
	mov.u64 	%rd95, exception880;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1886;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1886;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_9:                              // %L370
	mov.u32 	%r100, 3;
	st.global.u32 	[%rd7], %r100;
	mov.u64 	%rd25, exception880;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
