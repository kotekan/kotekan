// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception880[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<56>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1356>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r84, 16511;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r85, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r85, 67711;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r82, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r86, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r87, %r86, %r2;
	add.s32 	%r88, %r87, %r4;
	mul.wide.u32 	%rd22, %r88, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r89, 1;
	st.global.u32 	[%rd7], %r89;
	setp.gt.u32 	%p8, %r82, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r83, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r83, %r82;
	setp.gt.s32 	%p10, %r83, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r90, %r83, %r82;
	and.b32  	%r91, %r90, 127;
	setp.eq.s32 	%p12, %r91, 0;
	@%p12 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_7;
$L__BB0_21:                             // %pass120
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b32  	%r75, %r1, 1;
	neg.s32 	%r92, %r75;
	and.b32  	%r93, %r92, 96;
	shr.u32 	%r76, %r2, 3;
	shl.b32 	%r94, %r3, 2;
	or.b32  	%r95, %r76, %r94;
	cvt.u16.u32 	%rs1, %r95;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r96, %rs6;
	and.b32  	%r77, %r96, 255;
	shr.u32 	%r97, %r1, 1;
	cvt.u16.u32 	%rs7, %r97;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 13;
	mul.lo.s16 	%rs11, %rs10, 48;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r98, %rs12;
	and.b32  	%r78, %r98, 255;
	add.s32 	%r99, %r93, %r77;
	mad.lo.s32 	%r100, %r78, 192, %r99;
	mul.wide.u32 	%rd23, %r100, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r101, [%rd24];
	add.s32 	%r80, %r101, -4;
	setp.lt.u32 	%p13, %r80, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_22;
$L__BB0_8:                              // %L457
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r79, %r101, -3;
	or.b32  	%r103, %r2, %r3;
	setp.ne.s32 	%p1, %r103, 0;
	mul.wide.u32 	%rd27, %r1, 4;
	add.s64 	%rd8, %rd6, %rd27;
	mov.u32 	%r1347, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L480
	st.global.u32 	[%rd8], %r1347;
$L__BB0_10:                             // %L526
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p15, %r75, 0;
	bar.sync 	0;
	shr.u32 	%r362, %r3, 2;
	cvt.u16.u32 	%rs13, %r362;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	shr.u32 	%r5, %r2, 2;
	cvt.u16.u32 	%rs19, %r5;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r363, %rs27, 256;
	selp.b32 	%r364, 0, 24576, %p15;
	shl.b32 	%r365, %r2, 4;
	and.b32  	%r6, %r365, 16;
	shl.b32 	%r366, %r2, 1;
	shl.b32 	%r367, %r3, 6;
	or.b32  	%r368, %r366, %r367;
	and.b32  	%r369, %r368, 204;
	or.b32  	%r370, %r6, %r369;
	mul.lo.s32 	%r371, %r78, 49152;
	or.b32  	%r372, %r370, %r364;
	add.s32 	%r373, %r372, %r371;
	add.s32 	%r374, %r373, %r363;
	shl.b32 	%r375, %r374, 2;
	cvt.u64.u32 	%rd28, %r375;
	add.s64 	%rd29, %rd28, %rd1;
	ld.global.v4.u32 	{%r106, %r107, %r122, %r123}, [%rd29];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r376, %rs34, 256;
	add.s32 	%r377, %r373, %r376;
	shl.b32 	%r378, %r377, 2;
	cvt.u64.u32 	%rd30, %r378;
	add.s64 	%rd31, %rd30, %rd1;
	ld.global.v4.u32 	{%r114, %r115, %r130, %r131}, [%rd31];
	and.b32  	%r379, %r366, 12;
	and.b32  	%r380, %r367, 192;
	or.b32  	%r381, %r380, %r379;
	or.b32  	%r382, %r381, %r6;
	or.b32  	%r383, %r382, %r364;
	add.s32 	%r384, %r371, %r383;
	or.b32  	%r385, %r384, 32;
	add.s32 	%r386, %r385, %r363;
	shl.b32 	%r387, %r386, 2;
	cvt.u64.u32 	%rd32, %r387;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r138, %r139, %r154, %r155}, [%rd33];
	add.s32 	%r388, %r385, %r376;
	shl.b32 	%r389, %r388, 2;
	cvt.u64.u32 	%rd34, %r389;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r146, %r147, %r162, %r163}, [%rd35];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r390, %rs42, 256;
	add.s32 	%r391, %r373, %r390;
	shl.b32 	%r392, %r391, 2;
	cvt.u64.u32 	%rd36, %r392;
	add.s64 	%rd37, %rd36, %rd1;
	ld.global.v4.u32 	{%r170, %r171, %r186, %r187}, [%rd37];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r393, %rs49, 256;
	add.s32 	%r394, %r373, %r393;
	shl.b32 	%r395, %r394, 2;
	cvt.u64.u32 	%rd38, %r395;
	add.s64 	%rd39, %rd38, %rd1;
	ld.global.v4.u32 	{%r178, %r179, %r194, %r195}, [%rd39];
	add.s32 	%r396, %r385, %r390;
	shl.b32 	%r397, %r396, 2;
	cvt.u64.u32 	%rd40, %r397;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.v4.u32 	{%r202, %r203, %r218, %r219}, [%rd41];
	add.s32 	%r398, %r385, %r393;
	shl.b32 	%r399, %r398, 2;
	cvt.u64.u32 	%rd42, %r399;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.v4.u32 	{%r210, %r211, %r226, %r227}, [%rd43];
	mov.u32 	%r228, 21520;
	// begin inline asm
	prmt.b32 %r234, %r106, %r107, %r228;
	// end inline asm
	mov.u32 	%r232, 30258;
	// begin inline asm
	prmt.b32 %r235, %r106, %r107, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r114, %r115, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r114, %r115, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r122, %r123, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r122, %r123, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r130, %r131, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r130, %r131, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r138, %r139, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r138, %r139, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r146, %r147, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r146, %r147, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r154, %r155, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r154, %r155, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r162, %r163, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r162, %r163, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r170, %r171, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r170, %r171, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r178, %r179, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r178, %r179, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r186, %r187, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r186, %r187, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r194, %r195, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r194, %r195, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r202, %r203, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r202, %r203, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r210, %r211, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r210, %r211, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r218, %r219, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r218, %r219, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r354, %r226, %r227, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r355, %r226, %r227, %r232;
	// end inline asm
	mov.u32 	%r356, 25152;
	// begin inline asm
	prmt.b32 %r233, %r234, %r235, %r356;
	// end inline asm
	mov.u32 	%r360, 29521;
	// begin inline asm
	prmt.b32 %r237, %r234, %r235, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r242, %r243, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r242, %r243, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r250, %r251, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r250, %r251, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r258, %r259, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r258, %r259, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r266, %r267, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r266, %r267, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r274, %r275, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r274, %r275, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r282, %r283, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r282, %r283, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r290, %r291, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r290, %r291, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r298, %r299, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r298, %r299, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r306, %r307, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r306, %r307, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r314, %r315, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r314, %r315, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r322, %r323, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r322, %r323, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r330, %r331, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r330, %r331, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r338, %r339, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r338, %r339, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r346, %r347, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r349, %r346, %r347, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r353, %r354, %r355, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r357, %r354, %r355, %r360;
	// end inline asm
	and.b32  	%r7, %r2, 2;
	setp.eq.s32 	%p16, %r7, 0;
	selp.b32 	%r400, %r265, %r233, %p16;
	shfl.sync.bfly.b32	%r401, %r400, 2, 31, -1;
	selp.b32 	%r402, %r233, %r401, %p16;
	selp.b32 	%r403, %r401, %r265, %p16;
	selp.b32 	%r404, %r273, %r241, %p16;
	shfl.sync.bfly.b32	%r405, %r404, 2, 31, -1;
	selp.b32 	%r406, %r241, %r405, %p16;
	selp.b32 	%r407, %r405, %r273, %p16;
	selp.b32 	%r408, %r269, %r237, %p16;
	shfl.sync.bfly.b32	%r409, %r408, 2, 31, -1;
	selp.b32 	%r410, %r237, %r409, %p16;
	selp.b32 	%r411, %r409, %r269, %p16;
	selp.b32 	%r412, %r277, %r245, %p16;
	shfl.sync.bfly.b32	%r413, %r412, 2, 31, -1;
	selp.b32 	%r414, %r245, %r413, %p16;
	selp.b32 	%r415, %r413, %r277, %p16;
	selp.b32 	%r416, %r281, %r249, %p16;
	shfl.sync.bfly.b32	%r417, %r416, 2, 31, -1;
	selp.b32 	%r418, %r249, %r417, %p16;
	selp.b32 	%r419, %r417, %r281, %p16;
	selp.b32 	%r420, %r289, %r257, %p16;
	shfl.sync.bfly.b32	%r421, %r420, 2, 31, -1;
	selp.b32 	%r422, %r257, %r421, %p16;
	selp.b32 	%r423, %r421, %r289, %p16;
	selp.b32 	%r424, %r285, %r253, %p16;
	shfl.sync.bfly.b32	%r425, %r424, 2, 31, -1;
	selp.b32 	%r426, %r253, %r425, %p16;
	selp.b32 	%r427, %r425, %r285, %p16;
	selp.b32 	%r428, %r293, %r261, %p16;
	shfl.sync.bfly.b32	%r429, %r428, 2, 31, -1;
	selp.b32 	%r430, %r261, %r429, %p16;
	selp.b32 	%r431, %r429, %r293, %p16;
	selp.b32 	%r432, %r329, %r297, %p16;
	shfl.sync.bfly.b32	%r433, %r432, 2, 31, -1;
	selp.b32 	%r434, %r297, %r433, %p16;
	selp.b32 	%r435, %r433, %r329, %p16;
	selp.b32 	%r436, %r337, %r305, %p16;
	shfl.sync.bfly.b32	%r437, %r436, 2, 31, -1;
	selp.b32 	%r438, %r305, %r437, %p16;
	selp.b32 	%r439, %r437, %r337, %p16;
	selp.b32 	%r440, %r333, %r301, %p16;
	shfl.sync.bfly.b32	%r441, %r440, 2, 31, -1;
	selp.b32 	%r442, %r301, %r441, %p16;
	selp.b32 	%r443, %r441, %r333, %p16;
	selp.b32 	%r444, %r341, %r309, %p16;
	shfl.sync.bfly.b32	%r445, %r444, 2, 31, -1;
	selp.b32 	%r446, %r309, %r445, %p16;
	selp.b32 	%r447, %r445, %r341, %p16;
	selp.b32 	%r448, %r345, %r313, %p16;
	shfl.sync.bfly.b32	%r449, %r448, 2, 31, -1;
	selp.b32 	%r450, %r313, %r449, %p16;
	selp.b32 	%r451, %r449, %r345, %p16;
	selp.b32 	%r452, %r353, %r321, %p16;
	shfl.sync.bfly.b32	%r453, %r452, 2, 31, -1;
	selp.b32 	%r454, %r321, %r453, %p16;
	selp.b32 	%r455, %r453, %r353, %p16;
	selp.b32 	%r456, %r349, %r317, %p16;
	shfl.sync.bfly.b32	%r457, %r456, 2, 31, -1;
	selp.b32 	%r458, %r317, %r457, %p16;
	selp.b32 	%r459, %r457, %r349, %p16;
	selp.b32 	%r460, %r357, %r325, %p16;
	shfl.sync.bfly.b32	%r461, %r460, 2, 31, -1;
	selp.b32 	%r462, %r325, %r461, %p16;
	selp.b32 	%r463, %r461, %r357, %p16;
	and.b32  	%r8, %r2, 4;
	setp.eq.s32 	%p17, %r8, 0;
	selp.b32 	%r464, %r434, %r402, %p17;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r9, %r402, %r465, %p17;
	selp.b32 	%r10, %r465, %r434, %p17;
	selp.b32 	%r466, %r438, %r406, %p17;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r11, %r406, %r467, %p17;
	selp.b32 	%r12, %r467, %r438, %p17;
	selp.b32 	%r468, %r442, %r410, %p17;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r13, %r410, %r469, %p17;
	selp.b32 	%r14, %r469, %r442, %p17;
	selp.b32 	%r470, %r446, %r414, %p17;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r15, %r414, %r471, %p17;
	selp.b32 	%r16, %r471, %r446, %p17;
	selp.b32 	%r472, %r450, %r418, %p17;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r17, %r418, %r473, %p17;
	selp.b32 	%r18, %r473, %r450, %p17;
	selp.b32 	%r474, %r454, %r422, %p17;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r19, %r422, %r475, %p17;
	selp.b32 	%r20, %r475, %r454, %p17;
	selp.b32 	%r476, %r458, %r426, %p17;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r21, %r426, %r477, %p17;
	selp.b32 	%r22, %r477, %r458, %p17;
	selp.b32 	%r478, %r462, %r430, %p17;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r23, %r430, %r479, %p17;
	selp.b32 	%r24, %r479, %r462, %p17;
	selp.b32 	%r480, %r435, %r403, %p17;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r25, %r403, %r481, %p17;
	selp.b32 	%r26, %r481, %r435, %p17;
	selp.b32 	%r482, %r439, %r407, %p17;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r27, %r407, %r483, %p17;
	selp.b32 	%r28, %r483, %r439, %p17;
	selp.b32 	%r484, %r443, %r411, %p17;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r29, %r411, %r485, %p17;
	selp.b32 	%r30, %r485, %r443, %p17;
	selp.b32 	%r486, %r447, %r415, %p17;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r31, %r415, %r487, %p17;
	selp.b32 	%r32, %r487, %r447, %p17;
	selp.b32 	%r488, %r451, %r419, %p17;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r33, %r419, %r489, %p17;
	selp.b32 	%r34, %r489, %r451, %p17;
	selp.b32 	%r490, %r455, %r423, %p17;
	shfl.sync.bfly.b32	%r491, %r490, 4, 31, -1;
	selp.b32 	%r35, %r423, %r491, %p17;
	selp.b32 	%r36, %r491, %r455, %p17;
	selp.b32 	%r492, %r459, %r427, %p17;
	shfl.sync.bfly.b32	%r493, %r492, 4, 31, -1;
	selp.b32 	%r37, %r427, %r493, %p17;
	selp.b32 	%r38, %r493, %r459, %p17;
	selp.b32 	%r494, %r463, %r431, %p17;
	shfl.sync.bfly.b32	%r495, %r494, 4, 31, -1;
	selp.b32 	%r39, %r431, %r495, %p17;
	selp.b32 	%r40, %r495, %r463, %p17;
	shl.b32 	%r496, %r1, 7;
	and.b32  	%r497, %r496, 128;
	shl.b32 	%r498, %r2, 2;
	and.b32  	%r499, %r498, 28;
	and.b32  	%r500, %r4, 96;
	or.b32  	%r41, %r499, %r500;
	shl.b32 	%r501, %r78, 8;
	and.b32  	%r42, %r3, 12;
	or.b32  	%r502, %r497, %r41;
	or.b32  	%r43, %r501, %r502;
	shl.b32 	%r503, %r2, 3;
	and.b32  	%r504, %r503, 24;
	or.b32  	%r44, %r504, %r500;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r505, %rs54;
	and.b32  	%r506, %r505, 255;
	and.b32  	%r45, %r366, 6;
	and.b32  	%r507, %r3, 3;
	mul.lo.s32 	%r508, %r507, 3200;
	or.b32  	%r46, %r508, %r506;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r509, %rs60;
	and.b32  	%r510, %r509, 255;
	or.b32  	%r47, %r508, %r510;
	and.b32  	%r511, %r2, 7;
	shl.b32 	%r513, %r89, %r80;
	setp.gt.u32 	%p18, %r80, 31;
	selp.b32 	%r48, 0, %r513, %p18;
	min.u32 	%r49, %r79, 31;
	and.b32  	%r50, %r2, 1;
	shl.b32 	%r514, %r1, 11;
	and.b32  	%r515, %r514, 2048;
	shl.b32 	%r516, %r2, 5;
	and.b32  	%r51, %r516, 64;
	shl.b32 	%r517, %r78, 12;
	or.b32  	%r518, %r517, %r515;
	mad.lo.s32 	%r519, %r77, 196608, %r518;
	mul.lo.s32 	%r520, %r511, 100;
	add.s32 	%r521, %r520, %r77;
	mul.wide.u32 	%rd44, %r521, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd46, %rd45, 16512;
	add.s64 	%rd9, %rd46, %rd44;
	cvt.u64.u32 	%rd47, %r520;
	cvt.u64.u32 	%rd48, %r77;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd10, %rd46, %rd50;
	add.s32 	%r522, %r520, 800;
	add.s32 	%r523, %r522, %r77;
	mul.wide.u32 	%rd51, %r523, 4;
	add.s64 	%rd11, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r522;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd12, %rd46, %rd54;
	add.s32 	%r524, %r520, 1600;
	add.s32 	%r525, %r524, %r77;
	mul.wide.u32 	%rd55, %r525, 4;
	add.s64 	%rd13, %rd46, %rd55;
	cvt.u64.u32 	%rd56, %r524;
	add.s64 	%rd57, %rd48, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd14, %rd46, %rd58;
	or.b32  	%r526, %r2, 24;
	mul.lo.s32 	%r527, %r526, 100;
	add.s32 	%r528, %r527, %r77;
	mul.wide.u32 	%rd59, %r528, 4;
	add.s64 	%rd15, %rd46, %rd59;
	cvt.u64.u32 	%rd60, %r527;
	add.s64 	%rd61, %rd48, %rd60;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd16, %rd46, %rd62;
	and.b32  	%r52, %r503, 32;
	shl.b32 	%r53, %r519, 2;
	mov.pred 	%p55, 0;
$L__BB0_11:                             // %L2574
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_15 Depth 3
	add.s32 	%r529, %r1347, %r82;
	setp.ge.s32 	%p19, %r529, %r83;
	@%p19 bra 	$L__BB0_18;
// %bb.12:                              // %L2582.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r531, %r1347, %r42;
	or.b32  	%r55, %r531, %r76;
	or.b32  	%r56, %r55, 16;
	mov.u32 	%r1348, 0;
	mov.u32 	%r1349, %r1348;
	mov.u32 	%r1350, %r1348;
	mov.u32 	%r1351, %r1348;
	mov.u32 	%r1352, %r1348;
	mov.u32 	%r1353, %r1348;
	mov.u32 	%r1354, %r1348;
$L__BB0_13:                             // %L2582
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_15 Depth 3
	setp.lt.u32 	%p20, %r3, 16;
	@%p20 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_14;
$L__BB0_23:                             // %pass1213
                                        //   in Loop: Header=BB0_13 Depth=2
	add.s32 	%r532, %r1348, %r55;
	and.b32  	%r533, %r532, 32751;
	add.s32 	%r534, %r533, %r82;
	mad.lo.s32 	%r535, %r534, 12288, %r43;
	mul.hi.s32 	%r536, %r535, 715827883;
	shr.u32 	%r537, %r536, 31;
	shr.s32 	%r538, %r536, 26;
	add.s32 	%r539, %r538, %r537;
	setp.lt.s32 	%p21, %r535, 0;
	mul.lo.s32 	%r540, %r539, 402653184;
	setp.ne.s32 	%p22, %r540, %r535;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r541, -1, 0, %p23;
	add.s32 	%r542, %r539, %r541;
	or.b32  	%r543, %r535, 1;
	mad.lo.s32 	%r544, %r542, -402653184, %r543;
	mul.wide.s32 	%rd63, %r544, 4;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.v4.u32 	{%r545, %r546, %r547, %r548}, [%rd64+-4];
	add.s32 	%r549, %r1348, %r56;
	and.b32  	%r550, %r549, 32767;
	add.s32 	%r551, %r550, %r82;
	mad.lo.s32 	%r552, %r551, 12288, %r43;
	mul.hi.s32 	%r553, %r552, 715827883;
	shr.u32 	%r554, %r553, 31;
	shr.s32 	%r555, %r553, 26;
	add.s32 	%r556, %r555, %r554;
	setp.lt.s32 	%p24, %r552, 0;
	mul.lo.s32 	%r557, %r556, 402653184;
	setp.ne.s32 	%p25, %r557, %r552;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r558, -1, 0, %p26;
	add.s32 	%r559, %r556, %r558;
	or.b32  	%r560, %r552, 1;
	mad.lo.s32 	%r561, %r559, -402653184, %r560;
	mul.wide.s32 	%rd65, %r561, 4;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.v4.u32 	{%r562, %r563, %r564, %r565}, [%rd66+-4];
	and.b32  	%r566, %r532, 15;
	mul.lo.s32 	%r567, %r566, 129;
	add.s32 	%r568, %r41, %r567;
	mul.wide.u32 	%rd67, %r568, 4;
	add.s64 	%rd69, %rd45, %rd67;
	st.shared.u32 	[%rd69], %r545;
	cvt.u64.u32 	%rd70, %r567;
	cvt.u64.u32 	%rd71, %r41;
	add.s64 	%rd72, %rd71, %rd70;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd45, %rd73;
	st.shared.u32 	[%rd74+4], %r546;
	st.shared.u32 	[%rd74+8], %r547;
	st.shared.u32 	[%rd74+12], %r548;
	and.b32  	%r569, %r549, 31;
	mul.lo.s32 	%r570, %r569, 129;
	add.s32 	%r571, %r41, %r570;
	mul.wide.u32 	%rd75, %r571, 4;
	add.s64 	%rd76, %rd45, %rd75;
	st.shared.u32 	[%rd76], %r562;
	cvt.u64.u32 	%rd77, %r570;
	add.s64 	%rd78, %rd71, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd45, %rd79;
	st.shared.u32 	[%rd80+4], %r563;
	st.shared.u32 	[%rd80+8], %r564;
	st.shared.u32 	[%rd80+12], %r565;
$L__BB0_14:                             // %L4294
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	mov.u32 	%r585, 0;
	mov.u32 	%r1355, %r585;
$L__BB0_15:                             // %L4296
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1097, %r1355, %r5;
	mad.lo.s32 	%r1098, %r1097, 129, %r44;
	mul.wide.u32 	%rd81, %r1098, 4;
	add.s64 	%rd83, %rd45, %rd81;
	ld.shared.u32 	%r574, [%rd83];
	mov.u32 	%r575, 134744072;
	mov.u32 	%r576, 252645135;
	// begin inline asm
	lop3.b32 %r573, %r574, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1099, %r573, 2021161080;
	xor.b32  	%r584, %r1099, -2139062144;
	shr.u32 	%r578, %r574, 4;
	// begin inline asm
	lop3.b32 %r577, %r578, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1100, %r577, 2021161080;
	xor.b32  	%r590, %r1100, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r581, %r582}, {%r9}, {%r584}, {%r585, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r587, %r588}, {%r13}, {%r590}, {%r585, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r593, %r594}, {%r9}, {%r590}, {%r585, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r599, %r600}, {%r13}, {%r584}, {%r593, %r594};
	// end inline asm
	ld.shared.u32 	%r606, [%rd83+4];
	// begin inline asm
	lop3.b32 %r605, %r606, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1101, %r605, 2021161080;
	xor.b32  	%r616, %r1101, -2139062144;
	shr.u32 	%r610, %r606, 4;
	// begin inline asm
	lop3.b32 %r609, %r610, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1102, %r609, 2021161080;
	xor.b32  	%r622, %r1102, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r613, %r614}, {%r17}, {%r616}, {%r581, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r619, %r620}, {%r21}, {%r622}, {%r587, %r588};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r625, %r626}, {%r17}, {%r622}, {%r599, %r600};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r631, %r632}, {%r21}, {%r616}, {%r625, %r626};
	// end inline asm
	ld.shared.u32 	%r638, [%rd83+8];
	// begin inline asm
	lop3.b32 %r637, %r638, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1103, %r637, 2021161080;
	xor.b32  	%r648, %r1103, -2139062144;
	shr.u32 	%r642, %r638, 4;
	// begin inline asm
	lop3.b32 %r641, %r642, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1104, %r641, 2021161080;
	xor.b32  	%r654, %r1104, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r645, %r646}, {%r25}, {%r648}, {%r613, %r614};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r651, %r652}, {%r29}, {%r654}, {%r619, %r620};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r657, %r658}, {%r25}, {%r654}, {%r631, %r632};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r663, %r664}, {%r29}, {%r648}, {%r657, %r658};
	// end inline asm
	ld.shared.u32 	%r670, [%rd83+12];
	// begin inline asm
	lop3.b32 %r669, %r670, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1105, %r669, 2021161080;
	xor.b32  	%r680, %r1105, -2139062144;
	shr.u32 	%r674, %r670, 4;
	// begin inline asm
	lop3.b32 %r673, %r674, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1106, %r673, 2021161080;
	xor.b32  	%r686, %r1106, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r677, %r678}, {%r33}, {%r680}, {%r645, %r646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r683, %r684}, {%r37}, {%r686}, {%r651, %r652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r689, %r690}, {%r33}, {%r686}, {%r663, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r695, %r696}, {%r37}, {%r680}, {%r689, %r690};
	// end inline asm
	ld.shared.u32 	%r702, [%rd83+16];
	// begin inline asm
	lop3.b32 %r701, %r702, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1107, %r701, 2021161080;
	xor.b32  	%r712, %r1107, -2139062144;
	shr.u32 	%r706, %r702, 4;
	// begin inline asm
	lop3.b32 %r705, %r706, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1108, %r705, 2021161080;
	xor.b32  	%r718, %r1108, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r709, %r710}, {%r10}, {%r712}, {%r677, %r678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r715, %r716}, {%r14}, {%r718}, {%r683, %r684};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r721, %r722}, {%r10}, {%r718}, {%r695, %r696};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r727, %r728}, {%r14}, {%r712}, {%r721, %r722};
	// end inline asm
	ld.shared.u32 	%r734, [%rd83+20];
	// begin inline asm
	lop3.b32 %r733, %r734, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1109, %r733, 2021161080;
	xor.b32  	%r744, %r1109, -2139062144;
	shr.u32 	%r738, %r734, 4;
	// begin inline asm
	lop3.b32 %r737, %r738, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1110, %r737, 2021161080;
	xor.b32  	%r750, %r1110, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r741, %r742}, {%r18}, {%r744}, {%r709, %r710};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r747, %r748}, {%r22}, {%r750}, {%r715, %r716};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r753, %r754}, {%r18}, {%r750}, {%r727, %r728};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r759, %r760}, {%r22}, {%r744}, {%r753, %r754};
	// end inline asm
	ld.shared.u32 	%r766, [%rd83+24];
	// begin inline asm
	lop3.b32 %r765, %r766, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1111, %r765, 2021161080;
	xor.b32  	%r776, %r1111, -2139062144;
	shr.u32 	%r770, %r766, 4;
	// begin inline asm
	lop3.b32 %r769, %r770, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1112, %r769, 2021161080;
	xor.b32  	%r782, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r773, %r774}, {%r26}, {%r776}, {%r741, %r742};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r779, %r780}, {%r30}, {%r782}, {%r747, %r748};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r785, %r786}, {%r26}, {%r782}, {%r759, %r760};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r791, %r792}, {%r30}, {%r776}, {%r785, %r786};
	// end inline asm
	ld.shared.u32 	%r798, [%rd83+28];
	// begin inline asm
	lop3.b32 %r797, %r798, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1113, %r797, 2021161080;
	xor.b32  	%r808, %r1113, -2139062144;
	shr.u32 	%r802, %r798, 4;
	// begin inline asm
	lop3.b32 %r801, %r802, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1114, %r801, 2021161080;
	xor.b32  	%r814, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r805, %r806}, {%r34}, {%r808}, {%r773, %r774};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r811, %r812}, {%r38}, {%r814}, {%r779, %r780};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r817, %r818}, {%r34}, {%r814}, {%r791, %r792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r823, %r824}, {%r38}, {%r808}, {%r817, %r818};
	// end inline asm
	sub.s32 	%r1115, %r805, %r811;
	add.s32 	%r1116, %r1115, 4;
	shr.s32 	%r831, %r1116, 3;
	add.s32 	%r1117, %r823, 4;
	shr.s32 	%r830, %r1117, 3;
	sub.s32 	%r1118, %r806, %r812;
	add.s32 	%r1119, %r1118, 4;
	shr.s32 	%r834, %r1119, 3;
	add.s32 	%r1120, %r824, 4;
	shr.s32 	%r833, %r1120, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r829, %r830, %r831;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r832, %r833, %r834;
	// end inline asm
	or.b32  	%r1121, %r45, %r1355;
	mul.lo.s32 	%r1122, %r1121, 100;
	add.s32 	%r1123, %r46, %r1122;
	mul.wide.u32 	%rd84, %r1123, 4;
	add.s64 	%rd86, %rd46, %rd84;
	st.shared.u32 	[%rd86], %r829;
	add.s32 	%r1124, %r1122, 100;
	add.s32 	%r1125, %r46, %r1124;
	mul.wide.u32 	%rd87, %r1125, 4;
	add.s64 	%rd88, %rd46, %rd87;
	st.shared.u32 	[%rd88], %r832;
	ld.shared.u32 	%r836, [%rd83];
	// begin inline asm
	lop3.b32 %r835, %r836, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1126, %r835, 2021161080;
	xor.b32  	%r846, %r1126, -2139062144;
	shr.u32 	%r840, %r836, 4;
	// begin inline asm
	lop3.b32 %r839, %r840, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1127, %r839, 2021161080;
	xor.b32  	%r852, %r1127, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r843, %r844}, {%r11}, {%r846}, {%r585, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r849, %r850}, {%r15}, {%r852}, {%r585, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r855, %r856}, {%r11}, {%r852}, {%r585, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r861, %r862}, {%r15}, {%r846}, {%r855, %r856};
	// end inline asm
	ld.shared.u32 	%r868, [%rd83+4];
	// begin inline asm
	lop3.b32 %r867, %r868, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1128, %r867, 2021161080;
	xor.b32  	%r878, %r1128, -2139062144;
	shr.u32 	%r872, %r868, 4;
	// begin inline asm
	lop3.b32 %r871, %r872, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1129, %r871, 2021161080;
	xor.b32  	%r884, %r1129, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r875, %r876}, {%r19}, {%r878}, {%r843, %r844};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r881, %r882}, {%r23}, {%r884}, {%r849, %r850};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r887, %r888}, {%r19}, {%r884}, {%r861, %r862};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r893, %r894}, {%r23}, {%r878}, {%r887, %r888};
	// end inline asm
	ld.shared.u32 	%r900, [%rd83+8];
	// begin inline asm
	lop3.b32 %r899, %r900, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1130, %r899, 2021161080;
	xor.b32  	%r910, %r1130, -2139062144;
	shr.u32 	%r904, %r900, 4;
	// begin inline asm
	lop3.b32 %r903, %r904, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1131, %r903, 2021161080;
	xor.b32  	%r916, %r1131, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r907, %r908}, {%r27}, {%r910}, {%r875, %r876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r913, %r914}, {%r31}, {%r916}, {%r881, %r882};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r919, %r920}, {%r27}, {%r916}, {%r893, %r894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r925, %r926}, {%r31}, {%r910}, {%r919, %r920};
	// end inline asm
	ld.shared.u32 	%r932, [%rd83+12];
	// begin inline asm
	lop3.b32 %r931, %r932, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1132, %r931, 2021161080;
	xor.b32  	%r942, %r1132, -2139062144;
	shr.u32 	%r936, %r932, 4;
	// begin inline asm
	lop3.b32 %r935, %r936, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1133, %r935, 2021161080;
	xor.b32  	%r948, %r1133, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r939, %r940}, {%r35}, {%r942}, {%r907, %r908};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r945, %r946}, {%r39}, {%r948}, {%r913, %r914};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r951, %r952}, {%r35}, {%r948}, {%r925, %r926};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r957, %r958}, {%r39}, {%r942}, {%r951, %r952};
	// end inline asm
	ld.shared.u32 	%r964, [%rd83+16];
	// begin inline asm
	lop3.b32 %r963, %r964, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1134, %r963, 2021161080;
	xor.b32  	%r974, %r1134, -2139062144;
	shr.u32 	%r968, %r964, 4;
	// begin inline asm
	lop3.b32 %r967, %r968, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1135, %r967, 2021161080;
	xor.b32  	%r980, %r1135, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r971, %r972}, {%r12}, {%r974}, {%r939, %r940};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r977, %r978}, {%r16}, {%r980}, {%r945, %r946};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r983, %r984}, {%r12}, {%r980}, {%r957, %r958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r989, %r990}, {%r16}, {%r974}, {%r983, %r984};
	// end inline asm
	ld.shared.u32 	%r996, [%rd83+20];
	// begin inline asm
	lop3.b32 %r995, %r996, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1136, %r995, 2021161080;
	xor.b32  	%r1006, %r1136, -2139062144;
	shr.u32 	%r1000, %r996, 4;
	// begin inline asm
	lop3.b32 %r999, %r1000, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1137, %r999, 2021161080;
	xor.b32  	%r1012, %r1137, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1003, %r1004}, {%r20}, {%r1006}, {%r971, %r972};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1009, %r1010}, {%r24}, {%r1012}, {%r977, %r978};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1015, %r1016}, {%r20}, {%r1012}, {%r989, %r990};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1021, %r1022}, {%r24}, {%r1006}, {%r1015, %r1016};
	// end inline asm
	ld.shared.u32 	%r1028, [%rd83+24];
	// begin inline asm
	lop3.b32 %r1027, %r1028, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1138, %r1027, 2021161080;
	xor.b32  	%r1038, %r1138, -2139062144;
	shr.u32 	%r1032, %r1028, 4;
	// begin inline asm
	lop3.b32 %r1031, %r1032, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1139, %r1031, 2021161080;
	xor.b32  	%r1044, %r1139, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1035, %r1036}, {%r28}, {%r1038}, {%r1003, %r1004};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1041, %r1042}, {%r32}, {%r1044}, {%r1009, %r1010};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1047, %r1048}, {%r28}, {%r1044}, {%r1021, %r1022};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1053, %r1054}, {%r32}, {%r1038}, {%r1047, %r1048};
	// end inline asm
	ld.shared.u32 	%r1060, [%rd83+28];
	// begin inline asm
	lop3.b32 %r1059, %r1060, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1140, %r1059, 2021161080;
	xor.b32  	%r1070, %r1140, -2139062144;
	shr.u32 	%r1064, %r1060, 4;
	// begin inline asm
	lop3.b32 %r1063, %r1064, %r575, %r576, 40;
	// end inline asm
	add.s32 	%r1141, %r1063, 2021161080;
	xor.b32  	%r1076, %r1141, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1067, %r1068}, {%r36}, {%r1070}, {%r1035, %r1036};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1073, %r1074}, {%r40}, {%r1076}, {%r1041, %r1042};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1079, %r1080}, {%r36}, {%r1076}, {%r1053, %r1054};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1085, %r1086}, {%r40}, {%r1070}, {%r1079, %r1080};
	// end inline asm
	sub.s32 	%r1142, %r1067, %r1073;
	add.s32 	%r1143, %r1142, 4;
	shr.s32 	%r1093, %r1143, 3;
	add.s32 	%r1144, %r1085, 4;
	shr.s32 	%r1092, %r1144, 3;
	sub.s32 	%r1145, %r1068, %r1074;
	add.s32 	%r1146, %r1145, 4;
	shr.s32 	%r1096, %r1146, 3;
	add.s32 	%r1147, %r1086, 4;
	shr.s32 	%r1095, %r1147, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1091, %r1092, %r1093;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1094, %r1095, %r1096;
	// end inline asm
	add.s32 	%r1148, %r47, %r1122;
	mul.wide.u32 	%rd89, %r1148, 4;
	add.s64 	%rd90, %rd46, %rd89;
	st.shared.u32 	[%rd90], %r1091;
	add.s32 	%r1149, %r47, %r1124;
	mul.wide.u32 	%rd91, %r1149, 4;
	add.s64 	%rd92, %rd46, %rd91;
	st.shared.u32 	[%rd92], %r1094;
	add.s32 	%r1355, %r1355, 8;
	setp.ne.s32 	%p27, %r1355, 32;
	@%p27 bra 	$L__BB0_15;
// %bb.16:                              // %L8021
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1168, [%rd9];
	ld.shared.u32 	%r1169, [%rd10+12800];
	ld.shared.u32 	%r1170, [%rd10+25600];
	ld.shared.u32 	%r1171, [%rd10+38400];
	ld.shared.u32 	%r1172, [%rd11];
	ld.shared.u32 	%r1173, [%rd12+12800];
	ld.shared.u32 	%r1174, [%rd12+25600];
	ld.shared.u32 	%r1175, [%rd12+38400];
	ld.shared.u32 	%r1176, [%rd13];
	ld.shared.u32 	%r1177, [%rd14+12800];
	ld.shared.u32 	%r1178, [%rd14+25600];
	ld.shared.u32 	%r1179, [%rd14+38400];
	ld.shared.u32 	%r1180, [%rd15];
	ld.shared.u32 	%r1181, [%rd16+12800];
	ld.shared.u32 	%r1182, [%rd16+25600];
	ld.shared.u32 	%r1183, [%rd16+38400];
	cvt.s32.s16 	%r1184, %r1168;
	shr.s32 	%r1185, %r1168, 16;
	cvt.s32.s16 	%r1186, %r1169;
	shr.s32 	%r1187, %r1169, 16;
	cvt.s32.s16 	%r1188, %r1170;
	shr.s32 	%r1189, %r1170, 16;
	cvt.s32.s16 	%r1190, %r1171;
	shr.s32 	%r1191, %r1171, 16;
	cvt.s32.s16 	%r1192, %r1172;
	shr.s32 	%r1193, %r1172, 16;
	cvt.s32.s16 	%r1194, %r1173;
	shr.s32 	%r1195, %r1173, 16;
	cvt.s32.s16 	%r1196, %r1174;
	shr.s32 	%r1197, %r1174, 16;
	cvt.s32.s16 	%r1198, %r1175;
	shr.s32 	%r1199, %r1175, 16;
	cvt.s32.s16 	%r1200, %r1176;
	shr.s32 	%r1201, %r1176, 16;
	cvt.s32.s16 	%r1202, %r1177;
	shr.s32 	%r1203, %r1177, 16;
	cvt.s32.s16 	%r1204, %r1178;
	shr.s32 	%r1205, %r1178, 16;
	cvt.s32.s16 	%r1206, %r1179;
	shr.s32 	%r1207, %r1179, 16;
	cvt.s32.s16 	%r1208, %r1180;
	shr.s32 	%r1209, %r1180, 16;
	cvt.s32.s16 	%r1210, %r1181;
	shr.s32 	%r1211, %r1181, 16;
	cvt.s32.s16 	%r1212, %r1182;
	shr.s32 	%r1213, %r1182, 16;
	cvt.s32.s16 	%r1214, %r1183;
	shr.s32 	%r1215, %r1183, 16;
	add.s32 	%r1216, %r1184, %r48;
	add.s32 	%r1217, %r1216, %r1186;
	add.s32 	%r1218, %r1217, %r1188;
	add.s32 	%r1219, %r1218, %r1190;
	shr.s32 	%r1220, %r1219, %r49;
	add.s32 	%r1221, %r1185, %r48;
	add.s32 	%r1222, %r1221, %r1187;
	add.s32 	%r1223, %r1222, %r1189;
	add.s32 	%r1224, %r1223, %r1191;
	shr.s32 	%r1225, %r1224, %r49;
	add.s32 	%r1226, %r1192, %r48;
	add.s32 	%r1227, %r1226, %r1194;
	add.s32 	%r1228, %r1227, %r1196;
	add.s32 	%r1229, %r1228, %r1198;
	shr.s32 	%r1230, %r1229, %r49;
	add.s32 	%r1231, %r1193, %r48;
	add.s32 	%r1232, %r1231, %r1195;
	add.s32 	%r1233, %r1232, %r1197;
	add.s32 	%r1234, %r1233, %r1199;
	shr.s32 	%r1235, %r1234, %r49;
	add.s32 	%r1236, %r1200, %r48;
	add.s32 	%r1237, %r1236, %r1202;
	add.s32 	%r1238, %r1237, %r1204;
	add.s32 	%r1239, %r1238, %r1206;
	shr.s32 	%r1240, %r1239, %r49;
	add.s32 	%r1241, %r1201, %r48;
	add.s32 	%r1242, %r1241, %r1203;
	add.s32 	%r1243, %r1242, %r1205;
	add.s32 	%r1244, %r1243, %r1207;
	shr.s32 	%r1245, %r1244, %r49;
	add.s32 	%r1246, %r1208, %r48;
	add.s32 	%r1247, %r1246, %r1210;
	add.s32 	%r1248, %r1247, %r1212;
	add.s32 	%r1249, %r1248, %r1214;
	shr.s32 	%r1250, %r1249, %r49;
	add.s32 	%r1251, %r1209, %r48;
	add.s32 	%r1252, %r1251, %r1211;
	add.s32 	%r1253, %r1252, %r1213;
	add.s32 	%r1254, %r1253, %r1215;
	shr.s32 	%r1255, %r1254, %r49;
	max.s32 	%r1256, %r1220, -7;
	min.s32 	%r1155, %r1256, 7;
	setp.ne.s32 	%p28, %r1155, %r1220;
	or.pred  	%p29, %p55, %p28;
	max.s32 	%r1257, %r1225, -7;
	min.s32 	%r1162, %r1257, 7;
	setp.ne.s32 	%p30, %r1162, %r1225;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r1258, %r1230, -7;
	min.s32 	%r1154, %r1258, 7;
	setp.ne.s32 	%p32, %r1154, %r1230;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r1259, %r1235, -7;
	min.s32 	%r1161, %r1259, 7;
	setp.ne.s32 	%p34, %r1161, %r1235;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r1260, %r1240, -7;
	min.s32 	%r1152, %r1260, 7;
	setp.ne.s32 	%p36, %r1152, %r1240;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r1261, %r1245, -7;
	min.s32 	%r1159, %r1261, 7;
	setp.ne.s32 	%p38, %r1159, %r1245;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r1262, %r1250, -7;
	min.s32 	%r1151, %r1262, 7;
	setp.ne.s32 	%p40, %r1151, %r1250;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r1263, %r1255, -7;
	min.s32 	%r1158, %r1263, 7;
	setp.ne.s32 	%p42, %r1158, %r1255;
	or.pred  	%p55, %p42, %p41;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1150, %r1151, %r1152, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1153, %r1154, %r1155, %r1150;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1157, %r1158, %r1159, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1160, %r1161, %r1162, %r1157;
	// end inline asm
	shl.b32 	%r1167, %r1160, 4;
	// begin inline asm
	lop3.b32 %r1274, %r576, %r1153, %r1167, 202;
	// end inline asm
	setp.eq.s32 	%p43, %r1348, 0;
	selp.b32 	%r1353, %r1274, %r1353, %p43;
	selp.b32 	%r1354, %r1274, %r1354, %p43;
	setp.eq.s32 	%p44, %r1348, 32;
	selp.b32 	%r1349, %r1274, %r1349, %p44;
	selp.b32 	%r1350, %r1274, %r1350, %p44;
	setp.eq.s32 	%p45, %r1348, 64;
	selp.b32 	%r1351, %r1274, %r1351, %p45;
	selp.b32 	%r1352, %r1274, %r1352, %p45;
	add.s32 	%r73, %r1348, 32;
	setp.ne.s32 	%p46, %r1348, 96;
	mov.u32 	%r1348, %r73;
	@%p46 bra 	$L__BB0_13;
// %bb.17:                              // %L10427.L10433_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p47, %r50, 0;
	// begin inline asm
	prmt.b32 %r1264, %r1353, %r1349, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1268, %r1354, %r1350, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1272, %r1351, %r1274, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1276, %r1352, %r1274, %r360;
	// end inline asm
	selp.b32 	%r1312, %r1268, %r1264, %p47;
	shfl.sync.bfly.b32	%r1313, %r1312, 1, 31, -1;
	selp.b32 	%r1281, %r1264, %r1313, %p47;
	selp.b32 	%r1282, %r1313, %r1268, %p47;
	selp.b32 	%r1314, %r1276, %r1272, %p47;
	shfl.sync.bfly.b32	%r1315, %r1314, 1, 31, -1;
	selp.b32 	%r1289, %r1272, %r1315, %p47;
	selp.b32 	%r1290, %r1315, %r1276, %p47;
	// begin inline asm
	prmt.b32 %r1280, %r1281, %r1282, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1281, %r1282, %r360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1289, %r1290, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1289, %r1290, %r360;
	// end inline asm
	selp.b32 	%r1316, %r1288, %r1280, %p16;
	shfl.sync.bfly.b32	%r1317, %r1316, 2, 31, -1;
	selp.b32 	%r1297, %r1280, %r1317, %p16;
	selp.b32 	%r1298, %r1317, %r1288, %p16;
	selp.b32 	%r1318, %r1292, %r1284, %p16;
	shfl.sync.bfly.b32	%r1319, %r1318, 2, 31, -1;
	selp.b32 	%r1305, %r1284, %r1319, %p16;
	selp.b32 	%r1306, %r1319, %r1292, %p16;
	// begin inline asm
	prmt.b32 %r1296, %r1297, %r1298, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1300, %r1297, %r1298, %r232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1304, %r1305, %r1306, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r1305, %r1306, %r232;
	// end inline asm
	selp.b32 	%r1320, %r1304, %r1296, %p17;
	shfl.sync.bfly.b32	%r1321, %r1320, 4, 31, -1;
	selp.b32 	%r1322, %r1296, %r1321, %p17;
	selp.b32 	%r1323, %r1321, %r1304, %p17;
	selp.b32 	%r1324, %r1308, %r1300, %p17;
	shfl.sync.bfly.b32	%r1325, %r1324, 4, 31, -1;
	selp.b32 	%r1326, %r1300, %r1325, %p17;
	selp.b32 	%r1327, %r1325, %r1308, %p17;
	selp.b32 	%r1328, %r1326, %r1322, %p47;
	shfl.sync.bfly.b32	%r1329, %r1328, 1, 31, -1;
	selp.b32 	%r1330, %r1322, %r1329, %p47;
	selp.b32 	%r1331, %r1329, %r1326, %p47;
	selp.b32 	%r1332, %r1327, %r1323, %p47;
	shfl.sync.bfly.b32	%r1333, %r1332, 1, 31, -1;
	selp.b32 	%r1334, %r1323, %r1333, %p47;
	selp.b32 	%r1335, %r1333, %r1327, %p47;
	and.b32  	%r1336, %r1347, 8064;
	or.b32  	%r1337, %r1336, %r52;
	or.b32  	%r1338, %r1337, %r6;
	or.b32  	%r1339, %r1338, %r51;
	or.b32  	%r1340, %r1339, %r53;
	cvt.u64.u32 	%rd93, %r1340;
	add.s64 	%rd94, %rd4, %rd93;
	st.global.v4.u32 	[%rd94], {%r1330, %r1334, %r1331, %r1335};
	add.s32 	%r74, %r1347, 128;
	setp.ne.s32 	%p50, %r1347, 32640;
	mov.u32 	%r1347, %r74;
	@%p50 bra 	$L__BB0_11;
$L__BB0_18:                             // %L10813
	selp.u32 	%r1341, 1, 0, %p55;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r1341, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r1342, 1, 0, %p2; 
	}
	setp.eq.s32 	%p51, %r1342, 0;
	or.pred  	%p52, %p51, %p1;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %L10843
	st.global.u32 	[%rd8], %r89;
$L__BB0_20:                             // %L10889
	mov.u32 	%r1344, 0;
	st.global.u32 	[%rd7], %r1344;
	ret;
$L__BB0_7:                              // %L149
	mov.u32 	%r1345, 2;
	st.global.u32 	[%rd7], %r1345;
	mov.u64 	%rd95, exception880;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_22:                             // %L365
	mov.u32 	%r102, 3;
	st.global.u32 	[%rd7], %r102;
	mov.u64 	%rd25, exception880;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
