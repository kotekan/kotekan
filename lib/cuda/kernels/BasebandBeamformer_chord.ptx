// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception784[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<55>;
	.reg .b32 	%r<1315>;
	.reg .b64 	%rd<95>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r78, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd14, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r79, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r79, 16511;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r80, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r80, 67711;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r81, %r3, 768, %r2;
	or.b32  	%r82, %r81, %r4;
	mul.wide.u32 	%rd23, %r82, 4;
	add.s64 	%rd5, %rd4, %rd23;
	mov.u32 	%r83, 1;
	st.global.u32 	[%rd5], %r83;
	shr.u32 	%r5, %r4, 3;
	shl.b32 	%r84, %r1, 2;
	or.b32  	%r85, %r5, %r84;
	cvt.u16.u32 	%rs1, %r85;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r86, %rs6;
	and.b32  	%r6, %r86, 255;
	bfe.s32 	%r87, %r3, 4, 1;
	and.b32  	%r88, %r87, 96;
	shr.u32 	%r8, %r3, 5;
	mad.lo.s32 	%r89, %r8, 192, %r88;
	add.s32 	%r90, %r89, %r6;
	mul.wide.u32 	%rd24, %r90, 4;
	add.s64 	%rd25, %rd3, %rd24;
	ld.global.u32 	%r9, [%rd25];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:                              // %pass157
	ld.param.u64 	%rd15, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	and.b32  	%r7, %r3, 16;
	setp.eq.s32 	%p4, %r7, 0;
	add.s32 	%r349, %r9, -3;
	shl.b32 	%r350, %r4, 1;
	shl.b32 	%r351, %r1, 6;
	or.b32  	%r352, %r350, %r351;
	shl.b32 	%r353, %r4, 4;
	and.b32  	%r28, %r353, 16;
	and.b32  	%r354, %r352, 204;
	or.b32  	%r355, %r28, %r354;
	shr.u32 	%r356, %r1, 2;
	cvt.u16.u32 	%rs7, %r356;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 10;
	mul.lo.s16 	%rs10, %rs9, 6;
	sub.s16 	%rs11, %rs7, %rs10;
	shl.b16 	%rs12, %rs11, 4;
	shr.u32 	%r29, %r4, 2;
	cvt.u16.u32 	%rs13, %r29;
	and.b16  	%rs14, %rs13, 6;
	or.b16  	%rs15, %rs14, %rs12;
	and.b16  	%rs16, %rs15, 246;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 246;
	mul.wide.u16 	%r357, %rs21, 256;
	selp.b32 	%r358, 0, 24576, %p4;
	mad.lo.s32 	%r359, %r8, 49152, %r358;
	or.b32  	%r360, %r359, %r355;
	add.s32 	%r361, %r360, %r357;
	shl.b32 	%r362, %r361, 2;
	cvt.u64.u32 	%rd28, %r362;
	add.s64 	%rd29, %rd28, %rd1;
	ld.global.v4.u32 	{%r93, %r94, %r109, %r110}, [%rd29];
	or.b16  	%rs22, %rs15, 8;
	and.b16  	%rs23, %rs22, 254;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 14;
	mul.lo.s16 	%rs26, %rs25, 96;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 254;
	mul.wide.u16 	%r363, %rs28, 256;
	add.s32 	%r364, %r360, %r363;
	shl.b32 	%r365, %r364, 2;
	cvt.u64.u32 	%rd30, %r365;
	add.s64 	%rd31, %rd30, %rd1;
	ld.global.v4.u32 	{%r101, %r102, %r117, %r118}, [%rd31];
	and.b32  	%r366, %r350, 12;
	and.b32  	%r367, %r351, 192;
	or.b32  	%r368, %r366, %r367;
	or.b32  	%r369, %r28, %r368;
	or.b32  	%r370, %r359, %r369;
	or.b32  	%r371, %r370, 33;
	add.s32 	%r372, %r371, %r357;
	mul.wide.u32 	%rd32, %r372, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r125, %r126, %r141, %r142}, [%rd33+-4];
	add.s32 	%r373, %r371, %r363;
	mul.wide.u32 	%rd34, %r373, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r133, %r134, %r149, %r150}, [%rd35+-4];
	or.b16  	%rs29, %rs12, %rs13;
	or.b16  	%rs30, %rs29, 1;
	and.b16  	%rs31, %rs30, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 14;
	mul.lo.s16 	%rs34, %rs33, 96;
	sub.s16 	%rs35, %rs30, %rs34;
	and.b16  	%rs36, %rs35, 255;
	mul.wide.u16 	%r374, %rs36, 256;
	add.s32 	%r375, %r360, %r374;
	shl.b32 	%r376, %r375, 2;
	cvt.u64.u32 	%rd36, %r376;
	add.s64 	%rd37, %rd36, %rd1;
	ld.global.v4.u32 	{%r157, %r158, %r173, %r174}, [%rd37];
	or.b16  	%rs37, %rs29, 9;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 14;
	mul.lo.s16 	%rs41, %rs40, 96;
	sub.s16 	%rs42, %rs37, %rs41;
	and.b16  	%rs43, %rs42, 255;
	mul.wide.u16 	%r377, %rs43, 256;
	add.s32 	%r378, %r360, %r377;
	shl.b32 	%r379, %r378, 2;
	cvt.u64.u32 	%rd38, %r379;
	add.s64 	%rd39, %rd38, %rd1;
	ld.global.v4.u32 	{%r165, %r166, %r181, %r182}, [%rd39];
	add.s32 	%r380, %r371, %r374;
	mul.wide.u32 	%rd40, %r380, 4;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.v4.u32 	{%r189, %r190, %r205, %r206}, [%rd41+-4];
	add.s32 	%r381, %r371, %r377;
	mul.wide.u32 	%rd42, %r381, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.v4.u32 	{%r197, %r198, %r213, %r214}, [%rd43+-4];
	mov.u32 	%r215, 21520;
	// begin inline asm
	prmt.b32 %r221, %r93, %r94, %r215;
	// end inline asm
	mov.u32 	%r219, 30258;
	// begin inline asm
	prmt.b32 %r222, %r93, %r94, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r101, %r102, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r101, %r102, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r109, %r110, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r109, %r110, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r117, %r118, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r117, %r118, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r125, %r126, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r125, %r126, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r133, %r134, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r133, %r134, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r141, %r142, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r141, %r142, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r149, %r150, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r149, %r150, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r157, %r158, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r157, %r158, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r165, %r166, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r165, %r166, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r173, %r174, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r173, %r174, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r181, %r182, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r181, %r182, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r189, %r190, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r189, %r190, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r197, %r198, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r197, %r198, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r205, %r206, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r205, %r206, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r213, %r214, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r213, %r214, %r219;
	// end inline asm
	mov.u32 	%r343, 25152;
	// begin inline asm
	prmt.b32 %r220, %r221, %r222, %r343;
	// end inline asm
	mov.u32 	%r347, 29521;
	// begin inline asm
	prmt.b32 %r224, %r221, %r222, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r229, %r230, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r229, %r230, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r237, %r238, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r237, %r238, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r245, %r246, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r245, %r246, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r253, %r254, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r253, %r254, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r261, %r262, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r261, %r262, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r269, %r270, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r269, %r270, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r277, %r278, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r277, %r278, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r285, %r286, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r285, %r286, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r293, %r294, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r293, %r294, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r301, %r302, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r301, %r302, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r309, %r310, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r309, %r310, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r317, %r318, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r317, %r318, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r325, %r326, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r325, %r326, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r333, %r334, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r333, %r334, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r341, %r342, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r341, %r342, %r347;
	// end inline asm
	and.b32  	%r30, %r4, 2;
	setp.eq.s32 	%p5, %r30, 0;
	selp.b32 	%r382, %r252, %r220, %p5;
	shfl.sync.bfly.b32	%r383, %r382, 2, 31, -1;
	selp.b32 	%r384, %r220, %r383, %p5;
	selp.b32 	%r385, %r383, %r252, %p5;
	selp.b32 	%r386, %r260, %r228, %p5;
	shfl.sync.bfly.b32	%r387, %r386, 2, 31, -1;
	selp.b32 	%r388, %r228, %r387, %p5;
	selp.b32 	%r389, %r387, %r260, %p5;
	selp.b32 	%r390, %r256, %r224, %p5;
	shfl.sync.bfly.b32	%r391, %r390, 2, 31, -1;
	selp.b32 	%r392, %r224, %r391, %p5;
	selp.b32 	%r393, %r391, %r256, %p5;
	selp.b32 	%r394, %r264, %r232, %p5;
	shfl.sync.bfly.b32	%r395, %r394, 2, 31, -1;
	selp.b32 	%r396, %r232, %r395, %p5;
	selp.b32 	%r397, %r395, %r264, %p5;
	selp.b32 	%r398, %r268, %r236, %p5;
	shfl.sync.bfly.b32	%r399, %r398, 2, 31, -1;
	selp.b32 	%r400, %r236, %r399, %p5;
	selp.b32 	%r401, %r399, %r268, %p5;
	selp.b32 	%r402, %r276, %r244, %p5;
	shfl.sync.bfly.b32	%r403, %r402, 2, 31, -1;
	selp.b32 	%r404, %r244, %r403, %p5;
	selp.b32 	%r405, %r403, %r276, %p5;
	selp.b32 	%r406, %r272, %r240, %p5;
	shfl.sync.bfly.b32	%r407, %r406, 2, 31, -1;
	selp.b32 	%r408, %r240, %r407, %p5;
	selp.b32 	%r409, %r407, %r272, %p5;
	selp.b32 	%r410, %r280, %r248, %p5;
	shfl.sync.bfly.b32	%r411, %r410, 2, 31, -1;
	selp.b32 	%r412, %r248, %r411, %p5;
	selp.b32 	%r413, %r411, %r280, %p5;
	selp.b32 	%r414, %r316, %r284, %p5;
	shfl.sync.bfly.b32	%r415, %r414, 2, 31, -1;
	selp.b32 	%r416, %r284, %r415, %p5;
	selp.b32 	%r417, %r415, %r316, %p5;
	selp.b32 	%r418, %r324, %r292, %p5;
	shfl.sync.bfly.b32	%r419, %r418, 2, 31, -1;
	selp.b32 	%r420, %r292, %r419, %p5;
	selp.b32 	%r421, %r419, %r324, %p5;
	selp.b32 	%r422, %r320, %r288, %p5;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r288, %r423, %p5;
	selp.b32 	%r425, %r423, %r320, %p5;
	selp.b32 	%r426, %r328, %r296, %p5;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r296, %r427, %p5;
	selp.b32 	%r429, %r427, %r328, %p5;
	selp.b32 	%r430, %r332, %r300, %p5;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r300, %r431, %p5;
	selp.b32 	%r433, %r431, %r332, %p5;
	selp.b32 	%r434, %r340, %r308, %p5;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r308, %r435, %p5;
	selp.b32 	%r437, %r435, %r340, %p5;
	selp.b32 	%r438, %r336, %r304, %p5;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r304, %r439, %p5;
	selp.b32 	%r441, %r439, %r336, %p5;
	selp.b32 	%r442, %r344, %r312, %p5;
	shfl.sync.bfly.b32	%r443, %r442, 2, 31, -1;
	selp.b32 	%r444, %r312, %r443, %p5;
	selp.b32 	%r445, %r443, %r344, %p5;
	and.b32  	%r31, %r4, 4;
	setp.eq.s32 	%p6, %r31, 0;
	selp.b32 	%r446, %r416, %r384, %p6;
	shfl.sync.bfly.b32	%r447, %r446, 4, 31, -1;
	selp.b32 	%r32, %r384, %r447, %p6;
	selp.b32 	%r33, %r447, %r416, %p6;
	selp.b32 	%r448, %r420, %r388, %p6;
	shfl.sync.bfly.b32	%r449, %r448, 4, 31, -1;
	selp.b32 	%r34, %r388, %r449, %p6;
	selp.b32 	%r35, %r449, %r420, %p6;
	selp.b32 	%r450, %r424, %r392, %p6;
	shfl.sync.bfly.b32	%r451, %r450, 4, 31, -1;
	selp.b32 	%r36, %r392, %r451, %p6;
	selp.b32 	%r37, %r451, %r424, %p6;
	selp.b32 	%r452, %r428, %r396, %p6;
	shfl.sync.bfly.b32	%r453, %r452, 4, 31, -1;
	selp.b32 	%r38, %r396, %r453, %p6;
	selp.b32 	%r39, %r453, %r428, %p6;
	selp.b32 	%r454, %r432, %r400, %p6;
	shfl.sync.bfly.b32	%r455, %r454, 4, 31, -1;
	selp.b32 	%r40, %r400, %r455, %p6;
	selp.b32 	%r41, %r455, %r432, %p6;
	selp.b32 	%r456, %r436, %r404, %p6;
	shfl.sync.bfly.b32	%r457, %r456, 4, 31, -1;
	selp.b32 	%r42, %r404, %r457, %p6;
	selp.b32 	%r43, %r457, %r436, %p6;
	selp.b32 	%r458, %r440, %r408, %p6;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r44, %r408, %r459, %p6;
	selp.b32 	%r45, %r459, %r440, %p6;
	selp.b32 	%r460, %r444, %r412, %p6;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r46, %r412, %r461, %p6;
	selp.b32 	%r47, %r461, %r444, %p6;
	selp.b32 	%r462, %r417, %r385, %p6;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r48, %r385, %r463, %p6;
	selp.b32 	%r49, %r463, %r417, %p6;
	selp.b32 	%r464, %r421, %r389, %p6;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r50, %r389, %r465, %p6;
	selp.b32 	%r51, %r465, %r421, %p6;
	selp.b32 	%r466, %r425, %r393, %p6;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r52, %r393, %r467, %p6;
	selp.b32 	%r53, %r467, %r425, %p6;
	selp.b32 	%r468, %r429, %r397, %p6;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r54, %r397, %r469, %p6;
	selp.b32 	%r55, %r469, %r429, %p6;
	selp.b32 	%r470, %r433, %r401, %p6;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r56, %r401, %r471, %p6;
	selp.b32 	%r57, %r471, %r433, %p6;
	selp.b32 	%r472, %r437, %r405, %p6;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r58, %r405, %r473, %p6;
	selp.b32 	%r59, %r473, %r437, %p6;
	selp.b32 	%r474, %r441, %r409, %p6;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r60, %r409, %r475, %p6;
	selp.b32 	%r61, %r475, %r441, %p6;
	selp.b32 	%r476, %r445, %r413, %p6;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r62, %r413, %r477, %p6;
	selp.b32 	%r63, %r477, %r445, %p6;
	shl.b32 	%r478, %r4, 2;
	and.b32  	%r479, %r478, 28;
	and.b32  	%r480, %r2, 96;
	or.b32  	%r64, %r479, %r480;
	and.b32  	%r481, %r1, 12;
	shl.b32 	%r65, %r3, 7;
	and.b32  	%r66, %r65, 1920;
	or.b32  	%r67, %r66, %r481;
	shl.b32 	%r482, %r3, 3;
	and.b32  	%r68, %r482, 128;
	and.b32  	%r69, %r482, 3840;
	or.b32  	%r70, %r67, 16;
	shl.b32 	%r71, %r4, 3;
	and.b32  	%r483, %r71, 24;
	or.b32  	%r72, %r483, %r480;
	and.b32  	%r73, %r350, 6;
	and.b32  	%r484, %r1, 3;
	and.b16  	%rs44, %rs29, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs29, %rs47;
	cvt.u32.u16 	%r485, %rs48;
	and.b32  	%r486, %r485, 255;
	mul.lo.s32 	%r487, %r484, 3200;
	or.b32  	%r74, %r487, %r486;
	or.b16  	%rs49, %rs29, 8;
	and.b16  	%rs50, %rs49, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs49, %rs53;
	cvt.u32.u16 	%r488, %rs54;
	and.b32  	%r489, %r488, 255;
	or.b32  	%r75, %r487, %r489;
	and.b32  	%r490, %r4, 7;
	shl.b32 	%r76, %r83, %r10;
	min.u32 	%r77, %r349, 31;
	mul.lo.s32 	%r492, %r490, 100;
	add.s32 	%r493, %r492, %r6;
	mul.wide.u32 	%rd44, %r493, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd46, %rd45, 16512;
	add.s64 	%rd6, %rd46, %rd44;
	cvt.u64.u32 	%rd47, %r492;
	cvt.u64.u32 	%rd48, %r6;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd7, %rd46, %rd50;
	add.s32 	%r494, %r492, 800;
	add.s32 	%r495, %r494, %r6;
	mul.wide.u32 	%rd51, %r495, 4;
	add.s64 	%rd8, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r494;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd9, %rd46, %rd54;
	add.s32 	%r496, %r492, 1600;
	add.s32 	%r497, %r496, %r6;
	mul.wide.u32 	%rd55, %r497, 4;
	add.s64 	%rd10, %rd46, %rd55;
	cvt.u64.u32 	%rd56, %r496;
	add.s64 	%rd57, %rd48, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd11, %rd46, %rd58;
	or.b32  	%r498, %r4, 24;
	mul.lo.s32 	%r499, %r498, 100;
	add.s32 	%r500, %r499, %r6;
	mul.wide.u32 	%rd59, %r500, 4;
	add.s64 	%rd12, %rd46, %rd59;
	cvt.u64.u32 	%rd60, %r499;
	add.s64 	%rd61, %rd48, %rd60;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd13, %rd46, %rd62;
	mov.u32 	%r1307, 0;
	setp.lt.u32 	%p7, %r1, 16;
	mov.u32 	%r1308, %r1307;
	mov.u32 	%r1309, %r1307;
	mov.u32 	%r1310, %r1307;
	mov.u32 	%r1311, %r1307;
	mov.u32 	%r1312, %r1307;
	mov.u32 	%r1313, %r1307;
$L__BB0_7:                              // %L2391
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_9 Depth 2
	@%p7 bra 	$L__BB0_12;
	bra.uni 	$L__BB0_8;
$L__BB0_12:                             // %pass1084
                                        //   in Loop: Header=BB0_7 Depth=1
	add.s32 	%r501, %r67, %r1307;
	or.b32  	%r502, %r501, %r5;
	shl.b32 	%r503, %r502, 12;
	and.b32  	%r504, %r503, 8318976;
	or.b32  	%r505, %r504, %r64;
	or.b32  	%r506, %r505, %r68;
	or.b32  	%r507, %r506, %r69;
	shl.b32 	%r508, %r507, 2;
	cvt.u64.u32 	%rd63, %r508;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.v4.u32 	{%r509, %r510, %r511, %r512}, [%rd64];
	add.s32 	%r513, %r70, %r1307;
	or.b32  	%r514, %r513, %r5;
	shl.b32 	%r515, %r514, 12;
	and.b32  	%r516, %r515, 8384512;
	or.b32  	%r517, %r516, %r64;
	or.b32  	%r518, %r517, %r68;
	or.b32  	%r519, %r518, %r69;
	shl.b32 	%r520, %r519, 2;
	cvt.u64.u32 	%rd65, %r520;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.v4.u32 	{%r521, %r522, %r523, %r524}, [%rd66];
	and.b32  	%r525, %r502, 15;
	mul.lo.s32 	%r526, %r525, 129;
	add.s32 	%r527, %r64, %r526;
	mul.wide.u32 	%rd67, %r527, 4;
	add.s64 	%rd69, %rd45, %rd67;
	st.shared.u32 	[%rd69], %r509;
	cvt.u64.u32 	%rd70, %r526;
	cvt.u64.u32 	%rd71, %r64;
	add.s64 	%rd72, %rd71, %rd70;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd45, %rd73;
	st.shared.u32 	[%rd74+4], %r510;
	st.shared.u32 	[%rd74+8], %r511;
	st.shared.u32 	[%rd74+12], %r512;
	and.b32  	%r528, %r514, 31;
	mul.lo.s32 	%r529, %r528, 129;
	add.s32 	%r530, %r64, %r529;
	mul.wide.u32 	%rd75, %r530, 4;
	add.s64 	%rd76, %rd45, %rd75;
	st.shared.u32 	[%rd76], %r521;
	cvt.u64.u32 	%rd77, %r529;
	add.s64 	%rd78, %rd71, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd45, %rd79;
	st.shared.u32 	[%rd80+4], %r522;
	st.shared.u32 	[%rd80+8], %r523;
	st.shared.u32 	[%rd80+12], %r524;
$L__BB0_8:                              // %L4084
                                        //   in Loop: Header=BB0_7 Depth=1
	bar.sync 	0;
	mov.u32 	%r544, 0;
	mov.u32 	%r1314, %r544;
$L__BB0_9:                              // %L4086
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r1056, %r29, %r1314;
	mad.lo.s32 	%r1057, %r1056, 129, %r72;
	mul.wide.u32 	%rd81, %r1057, 4;
	add.s64 	%rd83, %rd45, %rd81;
	ld.shared.u32 	%r533, [%rd83];
	mov.u32 	%r534, 134744072;
	mov.u32 	%r535, 252645135;
	// begin inline asm
	lop3.b32 %r532, %r533, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1058, %r532, 2021161080;
	xor.b32  	%r543, %r1058, -2139062144;
	shr.u32 	%r537, %r533, 4;
	// begin inline asm
	lop3.b32 %r536, %r537, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1059, %r536, 2021161080;
	xor.b32  	%r549, %r1059, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r540, %r541}, {%r32}, {%r543}, {%r544, %r544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r546, %r547}, {%r36}, {%r549}, {%r544, %r544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r552, %r553}, {%r32}, {%r549}, {%r544, %r544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r558, %r559}, {%r36}, {%r543}, {%r552, %r553};
	// end inline asm
	ld.shared.u32 	%r565, [%rd83+4];
	// begin inline asm
	lop3.b32 %r564, %r565, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1060, %r564, 2021161080;
	xor.b32  	%r575, %r1060, -2139062144;
	shr.u32 	%r569, %r565, 4;
	// begin inline asm
	lop3.b32 %r568, %r569, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1061, %r568, 2021161080;
	xor.b32  	%r581, %r1061, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r40}, {%r575}, {%r540, %r541};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r44}, {%r581}, {%r546, %r547};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r40}, {%r581}, {%r558, %r559};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r44}, {%r575}, {%r584, %r585};
	// end inline asm
	ld.shared.u32 	%r597, [%rd83+8];
	// begin inline asm
	lop3.b32 %r596, %r597, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1062, %r596, 2021161080;
	xor.b32  	%r607, %r1062, -2139062144;
	shr.u32 	%r601, %r597, 4;
	// begin inline asm
	lop3.b32 %r600, %r601, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1063, %r600, 2021161080;
	xor.b32  	%r613, %r1063, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r48}, {%r607}, {%r572, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r52}, {%r613}, {%r578, %r579};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r48}, {%r613}, {%r590, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r52}, {%r607}, {%r616, %r617};
	// end inline asm
	ld.shared.u32 	%r629, [%rd83+12];
	// begin inline asm
	lop3.b32 %r628, %r629, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1064, %r628, 2021161080;
	xor.b32  	%r639, %r1064, -2139062144;
	shr.u32 	%r633, %r629, 4;
	// begin inline asm
	lop3.b32 %r632, %r633, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1065, %r632, 2021161080;
	xor.b32  	%r645, %r1065, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r56}, {%r639}, {%r604, %r605};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r60}, {%r645}, {%r610, %r611};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r56}, {%r645}, {%r622, %r623};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r60}, {%r639}, {%r648, %r649};
	// end inline asm
	ld.shared.u32 	%r661, [%rd83+16];
	// begin inline asm
	lop3.b32 %r660, %r661, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1066, %r660, 2021161080;
	xor.b32  	%r671, %r1066, -2139062144;
	shr.u32 	%r665, %r661, 4;
	// begin inline asm
	lop3.b32 %r664, %r665, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1067, %r664, 2021161080;
	xor.b32  	%r677, %r1067, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r668, %r669}, {%r33}, {%r671}, {%r636, %r637};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r674, %r675}, {%r37}, {%r677}, {%r642, %r643};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r680, %r681}, {%r33}, {%r677}, {%r654, %r655};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r686, %r687}, {%r37}, {%r671}, {%r680, %r681};
	// end inline asm
	ld.shared.u32 	%r693, [%rd83+20];
	// begin inline asm
	lop3.b32 %r692, %r693, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1068, %r692, 2021161080;
	xor.b32  	%r703, %r1068, -2139062144;
	shr.u32 	%r697, %r693, 4;
	// begin inline asm
	lop3.b32 %r696, %r697, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1069, %r696, 2021161080;
	xor.b32  	%r709, %r1069, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r700, %r701}, {%r41}, {%r703}, {%r668, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r706, %r707}, {%r45}, {%r709}, {%r674, %r675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r712, %r713}, {%r41}, {%r709}, {%r686, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r718, %r719}, {%r45}, {%r703}, {%r712, %r713};
	// end inline asm
	ld.shared.u32 	%r725, [%rd83+24];
	// begin inline asm
	lop3.b32 %r724, %r725, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1070, %r724, 2021161080;
	xor.b32  	%r735, %r1070, -2139062144;
	shr.u32 	%r729, %r725, 4;
	// begin inline asm
	lop3.b32 %r728, %r729, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1071, %r728, 2021161080;
	xor.b32  	%r741, %r1071, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r732, %r733}, {%r49}, {%r735}, {%r700, %r701};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r738, %r739}, {%r53}, {%r741}, {%r706, %r707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r744, %r745}, {%r49}, {%r741}, {%r718, %r719};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r750, %r751}, {%r53}, {%r735}, {%r744, %r745};
	// end inline asm
	ld.shared.u32 	%r757, [%rd83+28];
	// begin inline asm
	lop3.b32 %r756, %r757, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1072, %r756, 2021161080;
	xor.b32  	%r767, %r1072, -2139062144;
	shr.u32 	%r761, %r757, 4;
	// begin inline asm
	lop3.b32 %r760, %r761, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1073, %r760, 2021161080;
	xor.b32  	%r773, %r1073, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r764, %r765}, {%r57}, {%r767}, {%r732, %r733};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r770, %r771}, {%r61}, {%r773}, {%r738, %r739};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r776, %r777}, {%r57}, {%r773}, {%r750, %r751};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r782, %r783}, {%r61}, {%r767}, {%r776, %r777};
	// end inline asm
	sub.s32 	%r1074, %r764, %r770;
	add.s32 	%r1075, %r1074, 4;
	shr.s32 	%r790, %r1075, 3;
	add.s32 	%r1076, %r782, 4;
	shr.s32 	%r789, %r1076, 3;
	sub.s32 	%r1077, %r765, %r771;
	add.s32 	%r1078, %r1077, 4;
	shr.s32 	%r793, %r1078, 3;
	add.s32 	%r1079, %r783, 4;
	shr.s32 	%r792, %r1079, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r788, %r789, %r790;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r791, %r792, %r793;
	// end inline asm
	or.b32  	%r1080, %r73, %r1314;
	mul.lo.s32 	%r1081, %r1080, 100;
	add.s32 	%r1082, %r74, %r1081;
	mul.wide.u32 	%rd84, %r1082, 4;
	add.s64 	%rd86, %rd46, %rd84;
	st.shared.u32 	[%rd86], %r788;
	add.s32 	%r1083, %r1081, 100;
	add.s32 	%r1084, %r74, %r1083;
	mul.wide.u32 	%rd87, %r1084, 4;
	add.s64 	%rd88, %rd46, %rd87;
	st.shared.u32 	[%rd88], %r791;
	ld.shared.u32 	%r795, [%rd83];
	// begin inline asm
	lop3.b32 %r794, %r795, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1085, %r794, 2021161080;
	xor.b32  	%r805, %r1085, -2139062144;
	shr.u32 	%r799, %r795, 4;
	// begin inline asm
	lop3.b32 %r798, %r799, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1086, %r798, 2021161080;
	xor.b32  	%r811, %r1086, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r802, %r803}, {%r34}, {%r805}, {%r544, %r544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r808, %r809}, {%r38}, {%r811}, {%r544, %r544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r814, %r815}, {%r34}, {%r811}, {%r544, %r544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r820, %r821}, {%r38}, {%r805}, {%r814, %r815};
	// end inline asm
	ld.shared.u32 	%r827, [%rd83+4];
	// begin inline asm
	lop3.b32 %r826, %r827, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1087, %r826, 2021161080;
	xor.b32  	%r837, %r1087, -2139062144;
	shr.u32 	%r831, %r827, 4;
	// begin inline asm
	lop3.b32 %r830, %r831, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1088, %r830, 2021161080;
	xor.b32  	%r843, %r1088, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r834, %r835}, {%r42}, {%r837}, {%r802, %r803};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r840, %r841}, {%r46}, {%r843}, {%r808, %r809};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r846, %r847}, {%r42}, {%r843}, {%r820, %r821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r852, %r853}, {%r46}, {%r837}, {%r846, %r847};
	// end inline asm
	ld.shared.u32 	%r859, [%rd83+8];
	// begin inline asm
	lop3.b32 %r858, %r859, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1089, %r858, 2021161080;
	xor.b32  	%r869, %r1089, -2139062144;
	shr.u32 	%r863, %r859, 4;
	// begin inline asm
	lop3.b32 %r862, %r863, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1090, %r862, 2021161080;
	xor.b32  	%r875, %r1090, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r866, %r867}, {%r50}, {%r869}, {%r834, %r835};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r872, %r873}, {%r54}, {%r875}, {%r840, %r841};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r878, %r879}, {%r50}, {%r875}, {%r852, %r853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r884, %r885}, {%r54}, {%r869}, {%r878, %r879};
	// end inline asm
	ld.shared.u32 	%r891, [%rd83+12];
	// begin inline asm
	lop3.b32 %r890, %r891, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1091, %r890, 2021161080;
	xor.b32  	%r901, %r1091, -2139062144;
	shr.u32 	%r895, %r891, 4;
	// begin inline asm
	lop3.b32 %r894, %r895, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1092, %r894, 2021161080;
	xor.b32  	%r907, %r1092, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r898, %r899}, {%r58}, {%r901}, {%r866, %r867};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r904, %r905}, {%r62}, {%r907}, {%r872, %r873};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r910, %r911}, {%r58}, {%r907}, {%r884, %r885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r916, %r917}, {%r62}, {%r901}, {%r910, %r911};
	// end inline asm
	ld.shared.u32 	%r923, [%rd83+16];
	// begin inline asm
	lop3.b32 %r922, %r923, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1093, %r922, 2021161080;
	xor.b32  	%r933, %r1093, -2139062144;
	shr.u32 	%r927, %r923, 4;
	// begin inline asm
	lop3.b32 %r926, %r927, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1094, %r926, 2021161080;
	xor.b32  	%r939, %r1094, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r930, %r931}, {%r35}, {%r933}, {%r898, %r899};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r936, %r937}, {%r39}, {%r939}, {%r904, %r905};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r942, %r943}, {%r35}, {%r939}, {%r916, %r917};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r948, %r949}, {%r39}, {%r933}, {%r942, %r943};
	// end inline asm
	ld.shared.u32 	%r955, [%rd83+20];
	// begin inline asm
	lop3.b32 %r954, %r955, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1095, %r954, 2021161080;
	xor.b32  	%r965, %r1095, -2139062144;
	shr.u32 	%r959, %r955, 4;
	// begin inline asm
	lop3.b32 %r958, %r959, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1096, %r958, 2021161080;
	xor.b32  	%r971, %r1096, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r962, %r963}, {%r43}, {%r965}, {%r930, %r931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r968, %r969}, {%r47}, {%r971}, {%r936, %r937};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r974, %r975}, {%r43}, {%r971}, {%r948, %r949};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r980, %r981}, {%r47}, {%r965}, {%r974, %r975};
	// end inline asm
	ld.shared.u32 	%r987, [%rd83+24];
	// begin inline asm
	lop3.b32 %r986, %r987, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1097, %r986, 2021161080;
	xor.b32  	%r997, %r1097, -2139062144;
	shr.u32 	%r991, %r987, 4;
	// begin inline asm
	lop3.b32 %r990, %r991, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1098, %r990, 2021161080;
	xor.b32  	%r1003, %r1098, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r994, %r995}, {%r51}, {%r997}, {%r962, %r963};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1000, %r1001}, {%r55}, {%r1003}, {%r968, %r969};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1006, %r1007}, {%r51}, {%r1003}, {%r980, %r981};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1012, %r1013}, {%r55}, {%r997}, {%r1006, %r1007};
	// end inline asm
	ld.shared.u32 	%r1019, [%rd83+28];
	// begin inline asm
	lop3.b32 %r1018, %r1019, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1099, %r1018, 2021161080;
	xor.b32  	%r1029, %r1099, -2139062144;
	shr.u32 	%r1023, %r1019, 4;
	// begin inline asm
	lop3.b32 %r1022, %r1023, %r534, %r535, 40;
	// end inline asm
	add.s32 	%r1100, %r1022, 2021161080;
	xor.b32  	%r1035, %r1100, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1026, %r1027}, {%r59}, {%r1029}, {%r994, %r995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1032, %r1033}, {%r63}, {%r1035}, {%r1000, %r1001};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1038, %r1039}, {%r59}, {%r1035}, {%r1012, %r1013};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1044, %r1045}, {%r63}, {%r1029}, {%r1038, %r1039};
	// end inline asm
	sub.s32 	%r1101, %r1026, %r1032;
	add.s32 	%r1102, %r1101, 4;
	shr.s32 	%r1052, %r1102, 3;
	add.s32 	%r1103, %r1044, 4;
	shr.s32 	%r1051, %r1103, 3;
	sub.s32 	%r1104, %r1027, %r1033;
	add.s32 	%r1105, %r1104, 4;
	shr.s32 	%r1055, %r1105, 3;
	add.s32 	%r1106, %r1045, 4;
	shr.s32 	%r1054, %r1106, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1050, %r1051, %r1052;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1053, %r1054, %r1055;
	// end inline asm
	add.s32 	%r1107, %r75, %r1081;
	mul.wide.u32 	%rd89, %r1107, 4;
	add.s64 	%rd90, %rd46, %rd89;
	st.shared.u32 	[%rd90], %r1050;
	add.s32 	%r1108, %r75, %r1083;
	mul.wide.u32 	%rd91, %r1108, 4;
	add.s64 	%rd92, %rd46, %rd91;
	st.shared.u32 	[%rd92], %r1053;
	add.s32 	%r1314, %r1314, 8;
	setp.ne.s32 	%p8, %r1314, 32;
	@%p8 bra 	$L__BB0_9;
// %bb.10:                              // %L7817
                                        //   in Loop: Header=BB0_7 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r1127, [%rd6];
	ld.shared.u32 	%r1128, [%rd7+12800];
	ld.shared.u32 	%r1129, [%rd7+25600];
	ld.shared.u32 	%r1130, [%rd7+38400];
	ld.shared.u32 	%r1131, [%rd8];
	ld.shared.u32 	%r1132, [%rd9+12800];
	ld.shared.u32 	%r1133, [%rd9+25600];
	ld.shared.u32 	%r1134, [%rd9+38400];
	ld.shared.u32 	%r1135, [%rd10];
	ld.shared.u32 	%r1136, [%rd11+12800];
	ld.shared.u32 	%r1137, [%rd11+25600];
	ld.shared.u32 	%r1138, [%rd11+38400];
	ld.shared.u32 	%r1139, [%rd12];
	ld.shared.u32 	%r1140, [%rd13+12800];
	ld.shared.u32 	%r1141, [%rd13+25600];
	ld.shared.u32 	%r1142, [%rd13+38400];
	cvt.s32.s16 	%r1143, %r1127;
	shr.s32 	%r1144, %r1127, 16;
	cvt.s32.s16 	%r1145, %r1128;
	shr.s32 	%r1146, %r1128, 16;
	cvt.s32.s16 	%r1147, %r1129;
	shr.s32 	%r1148, %r1129, 16;
	cvt.s32.s16 	%r1149, %r1130;
	shr.s32 	%r1150, %r1130, 16;
	cvt.s32.s16 	%r1151, %r1131;
	shr.s32 	%r1152, %r1131, 16;
	cvt.s32.s16 	%r1153, %r1132;
	shr.s32 	%r1154, %r1132, 16;
	cvt.s32.s16 	%r1155, %r1133;
	shr.s32 	%r1156, %r1133, 16;
	cvt.s32.s16 	%r1157, %r1134;
	shr.s32 	%r1158, %r1134, 16;
	cvt.s32.s16 	%r1159, %r1135;
	shr.s32 	%r1160, %r1135, 16;
	cvt.s32.s16 	%r1161, %r1136;
	shr.s32 	%r1162, %r1136, 16;
	cvt.s32.s16 	%r1163, %r1137;
	shr.s32 	%r1164, %r1137, 16;
	cvt.s32.s16 	%r1165, %r1138;
	shr.s32 	%r1166, %r1138, 16;
	cvt.s32.s16 	%r1167, %r1139;
	shr.s32 	%r1168, %r1139, 16;
	cvt.s32.s16 	%r1169, %r1140;
	shr.s32 	%r1170, %r1140, 16;
	cvt.s32.s16 	%r1171, %r1141;
	shr.s32 	%r1172, %r1141, 16;
	cvt.s32.s16 	%r1173, %r1142;
	shr.s32 	%r1174, %r1142, 16;
	add.s32 	%r1175, %r1143, %r76;
	add.s32 	%r1176, %r1175, %r1145;
	add.s32 	%r1177, %r1176, %r1147;
	add.s32 	%r1178, %r1177, %r1149;
	shr.s32 	%r1179, %r1178, %r77;
	add.s32 	%r1180, %r1144, %r76;
	add.s32 	%r1181, %r1180, %r1146;
	add.s32 	%r1182, %r1181, %r1148;
	add.s32 	%r1183, %r1182, %r1150;
	shr.s32 	%r1184, %r1183, %r77;
	add.s32 	%r1185, %r1151, %r76;
	add.s32 	%r1186, %r1185, %r1153;
	add.s32 	%r1187, %r1186, %r1155;
	add.s32 	%r1188, %r1187, %r1157;
	shr.s32 	%r1189, %r1188, %r77;
	add.s32 	%r1190, %r1152, %r76;
	add.s32 	%r1191, %r1190, %r1154;
	add.s32 	%r1192, %r1191, %r1156;
	add.s32 	%r1193, %r1192, %r1158;
	shr.s32 	%r1194, %r1193, %r77;
	add.s32 	%r1195, %r1159, %r76;
	add.s32 	%r1196, %r1195, %r1161;
	add.s32 	%r1197, %r1196, %r1163;
	add.s32 	%r1198, %r1197, %r1165;
	shr.s32 	%r1199, %r1198, %r77;
	add.s32 	%r1200, %r1160, %r76;
	add.s32 	%r1201, %r1200, %r1162;
	add.s32 	%r1202, %r1201, %r1164;
	add.s32 	%r1203, %r1202, %r1166;
	shr.s32 	%r1204, %r1203, %r77;
	add.s32 	%r1205, %r1167, %r76;
	add.s32 	%r1206, %r1205, %r1169;
	add.s32 	%r1207, %r1206, %r1171;
	add.s32 	%r1208, %r1207, %r1173;
	shr.s32 	%r1209, %r1208, %r77;
	add.s32 	%r1210, %r1168, %r76;
	add.s32 	%r1211, %r1210, %r1170;
	add.s32 	%r1212, %r1211, %r1172;
	add.s32 	%r1213, %r1212, %r1174;
	shr.s32 	%r1214, %r1213, %r77;
	max.s32 	%r1215, %r1179, -7;
	min.s32 	%r1114, %r1215, 7;
	max.s32 	%r1216, %r1184, -7;
	min.s32 	%r1121, %r1216, 7;
	max.s32 	%r1217, %r1189, -7;
	min.s32 	%r1113, %r1217, 7;
	max.s32 	%r1218, %r1194, -7;
	min.s32 	%r1120, %r1218, 7;
	max.s32 	%r1219, %r1199, -7;
	min.s32 	%r1111, %r1219, 7;
	max.s32 	%r1220, %r1204, -7;
	min.s32 	%r1118, %r1220, 7;
	max.s32 	%r1221, %r1209, -7;
	min.s32 	%r1110, %r1221, 7;
	max.s32 	%r1222, %r1214, -7;
	min.s32 	%r1117, %r1222, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1109, %r1110, %r1111, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1112, %r1113, %r1114, %r1109;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1116, %r1117, %r1118, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1119, %r1120, %r1121, %r1116;
	// end inline asm
	shl.b32 	%r1126, %r1119, 4;
	// begin inline asm
	lop3.b32 %r1233, %r535, %r1112, %r1126, 202;
	// end inline asm
	setp.eq.s32 	%p9, %r1307, 0;
	selp.b32 	%r1312, %r1233, %r1312, %p9;
	selp.b32 	%r1313, %r1233, %r1313, %p9;
	setp.eq.s32 	%p10, %r1307, 32;
	selp.b32 	%r1308, %r1233, %r1308, %p10;
	selp.b32 	%r1309, %r1233, %r1309, %p10;
	setp.eq.s32 	%p11, %r1307, 64;
	selp.b32 	%r1310, %r1233, %r1310, %p11;
	selp.b32 	%r1311, %r1233, %r1311, %p11;
	add.s32 	%r27, %r1307, 32;
	setp.ne.s32 	%p12, %r1307, 96;
	mov.u32 	%r1307, %r27;
	@%p12 bra 	$L__BB0_7;
// %bb.11:                              // %L10201
	// begin inline asm
	prmt.b32 %r1223, %r1312, %r1308, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1227, %r1313, %r1309, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1231, %r1310, %r1233, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1235, %r1311, %r1233, %r347;
	// end inline asm
	and.b32  	%r1271, %r4, 1;
	setp.eq.b32 	%p15, %r1271, 1;
	selp.b32 	%r1272, %r1223, %r1227, %p15;
	shfl.sync.bfly.b32	%r1273, %r1272, 1, 31, -1;
	selp.b32 	%r1244, %r1273, %r1223, %p15;
	selp.b32 	%r1245, %r1227, %r1273, %p15;
	selp.b32 	%r1274, %r1231, %r1235, %p15;
	shfl.sync.bfly.b32	%r1275, %r1274, 1, 31, -1;
	selp.b32 	%r1252, %r1275, %r1231, %p15;
	selp.b32 	%r1253, %r1235, %r1275, %p15;
	// begin inline asm
	prmt.b32 %r1239, %r1244, %r1245, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1243, %r1244, %r1245, %r347;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1247, %r1252, %r1253, %r343;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1251, %r1252, %r1253, %r347;
	// end inline asm
	selp.b32 	%r1276, %r1247, %r1239, %p5;
	shfl.sync.bfly.b32	%r1277, %r1276, 2, 31, -1;
	selp.b32 	%r1256, %r1239, %r1277, %p5;
	selp.b32 	%r1257, %r1277, %r1247, %p5;
	selp.b32 	%r1278, %r1251, %r1243, %p5;
	shfl.sync.bfly.b32	%r1279, %r1278, 2, 31, -1;
	selp.b32 	%r1264, %r1243, %r1279, %p5;
	selp.b32 	%r1265, %r1279, %r1251, %p5;
	// begin inline asm
	prmt.b32 %r1255, %r1256, %r1257, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1259, %r1256, %r1257, %r219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1263, %r1264, %r1265, %r215;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1264, %r1265, %r219;
	// end inline asm
	selp.b32 	%r1280, %r1263, %r1255, %p6;
	shfl.sync.bfly.b32	%r1281, %r1280, 4, 31, -1;
	selp.b32 	%r1282, %r1255, %r1281, %p6;
	selp.b32 	%r1283, %r1281, %r1263, %p6;
	selp.b32 	%r1284, %r1267, %r1259, %p6;
	shfl.sync.bfly.b32	%r1285, %r1284, 4, 31, -1;
	selp.b32 	%r1286, %r1259, %r1285, %p6;
	selp.b32 	%r1287, %r1285, %r1267, %p6;
	selp.b32 	%r1288, %r1282, %r1286, %p15;
	shfl.sync.bfly.b32	%r1289, %r1288, 1, 31, -1;
	selp.b32 	%r1290, %r1283, %r1287, %p15;
	shfl.sync.bfly.b32	%r1291, %r1290, 1, 31, -1;
	shl.b32 	%r1292, %r4, 5;
	and.b32  	%r1293, %r1292, 64;
	and.b32  	%r1294, %r71, 32;
	shl.b32 	%r1295, %r6, 16;
	selp.b32 	%r1296, %r1287, %r1291, %p15;
	selp.b32 	%r1297, %r1291, %r1283, %p15;
	selp.b32 	%r1298, %r1286, %r1289, %p15;
	selp.b32 	%r1299, %r1289, %r1282, %p15;
	or.b32  	%r1300, %r28, %r1293;
	or.b32  	%r1301, %r1300, %r66;
	or.b32  	%r1302, %r1301, %r1294;
	and.b32  	%r1303, %r65, 63488;
	or.b32  	%r1304, %r1302, %r1303;
	or.b32  	%r1305, %r1304, %r1295;
	cvt.u64.u32 	%rd93, %r1305;
	add.s64 	%rd94, %rd93, %rd15;
	st.global.v4.u32 	[%rd94], {%r1299, %r1297, %r1298, %r1296};
	mov.u32 	%r1306, 0;
	st.global.u32 	[%rd5], %r1306;
	ret;
$L__BB0_1:                              // %L8
	mov.u64 	%rd19, exception1;
	cvta.global.u64 	%rd20, %rd19;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd20;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L25
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_5:                              // %L254
	mov.u32 	%r91, 2;
	st.global.u32 	[%rd5], %r91;
	mov.u64 	%rd26, exception784;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
