// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_11232
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11243
(
	.param .align 8 .b8 julia_power_by_squaring_11243_param_0[16],
	.param .b64 julia_power_by_squaring_11243_param_1,
	.param .b64 julia_power_by_squaring_11243_param_2
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3325[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<259>;
	.reg .b16 	%rs<1190>;
	.reg .b32 	%r<8035>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<189>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r185, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd40, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r186, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r186, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd57, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd41, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r187, %r4, 9;
	or.b32  	%r188, %r3, %r1;
	or.b32  	%r189, %r188, %r187;
	mul.wide.u32 	%rd63, %r189, 4;
	add.s64 	%rd4, %rd57, %rd63;
	mov.u32 	%r190, 1;
	st.global.u32 	[%rd4], %r190;
	ld.global.u32 	%r5, [%rd41];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd45, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd45];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd49, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd49];
	sub.s32 	%r191, %r6, %r5;
	and.b32  	%r192, %r191, 255;
	setp.ne.s32 	%p6, %r192, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd53, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd53];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 256;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	not.b32 	%r193, %r7;
	add.s32 	%r194, %r193, %r8;
	and.b32  	%r195, %r194, 3;
	setp.eq.s32 	%p12, %r195, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass167
	shl.b32 	%r112, %r1, 2;
	and.b32  	%r196, %r112, 4;
	shl.b32 	%r113, %r4, 6;
	bfe.u32 	%r119, %r1, 2, 1;
	shr.u32 	%r120, %r1, 4;
	shl.b32 	%r205, %r120, 1;
	shl.b32 	%r206, %r119, 2;
	shl.b32 	%r121, %r1, 3;
	and.b32  	%r207, %r121, 24;
	or.b32  	%r208, %r206, %r207;
	or.b32  	%r209, %r205, %r208;
	bfe.u32 	%r210, %r1, 3, 1;
	or.b32  	%r123, %r210, %r209;
	or.b32  	%r124, %r123, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r123;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L572
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L575
	or.b32  	%r197, %r196, %r113;
	and.b32  	%r198, %r1, 2;
	cvt.rn.f32.s32 	%f217, %r124;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L592
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L595
	or.b32  	%r199, %r197, %r198;
	and.b32  	%r114, %r112, 32;
	shl.b32 	%r115, %r1, 1;
	or.b32  	%r228, %r123, 64;
	or.b32  	%r10, %r123, 96;
	cvt.rn.f32.s32 	%f252, %r228;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L674
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L677
	or.b32  	%r200, %r199, %r114;
	and.b32  	%r201, %r115, 8;
	cvt.rn.f32.s32 	%f286, %r10;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L694
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L697
	or.b32  	%r202, %r200, %r201;
	and.b32  	%r116, %r1, 16;
	or.b32  	%r246, %r123, 128;
	or.b32  	%r12, %r123, 160;
	cvt.rn.f32.s32 	%f321, %r246;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L776
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L779
	or.b32  	%r203, %r202, %r116;
	cvt.rn.f32.s32 	%f355, %r12;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L796
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L799
	cvt.u16.u32 	%rs2, %r203;
	or.b32  	%r264, %r123, 192;
	or.b32  	%r14, %r123, 224;
	cvt.rn.f32.s32 	%f390, %r264;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L878
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L881
	shr.u16 	%rs1, %rs2, 1;
	cvt.rn.f32.s32 	%f424, %r14;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L898
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L901
	and.b16  	%rs3, %rs1, 4095;
	mul.lo.s32 	%r16, %r123, 63;
	cvt.rn.f32.s32 	%f458, %r16;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f884;
	and.b32  	%r282, %r18, 8388607;
	or.b32  	%r7991, %r282, 1065353216;
	mov.b32 	%f883, %r7991;
	add.s32 	%r283, %r18, -1073741824;
	and.b32  	%r7992, %r283, -8388608;
	setp.eq.s32 	%p68, %r7992, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r284, %r7992, 192937984;
	add.s32 	%r285, %r7991, %r284;
	mov.b32 	%f470, %r285;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r7992, %r7992, %r284;
	mov.b32 	%r7991, %f883;
	setp.ne.s32 	%p69, %r7992, 0;
	setp.ne.s32 	%p70, %r7991, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	cvt.u32.u16 	%r204, %rs3;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r286, %f35;
	and.b32  	%r287, %r286, -2147483648;
	mov.b32 	%r288, %f884;
	or.b32  	%r289, %r287, %r288;
	mov.b32 	%f884, %r289;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd64, %r204, 4;
	add.s32 	%r298, %r16, 2016;
	cvt.rn.f32.s32 	%f510, %r298;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f888;
	and.b32  	%r299, %r26, 8388607;
	or.b32  	%r7993, %r299, 1065353216;
	mov.b32 	%f887, %r7993;
	add.s32 	%r300, %r26, -1073741824;
	and.b32  	%r7994, %r300, -8388608;
	setp.eq.s32 	%p88, %r7994, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i897.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i897
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r301, %r7994, 192937984;
	add.s32 	%r302, %r7993, %r301;
	mov.b32 	%f522, %r302;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r7994, %r7994, %r301;
	mov.b32 	%r7993, %f887;
	setp.ne.s32 	%p89, %r7994, 0;
	setp.ne.s32 	%p90, %r7993, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i899
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i876
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i880
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i883
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i902
	add.s64 	%rd65, %rd1, %rd64;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r303, %f54;
	and.b32  	%r304, %r303, -2147483648;
	mov.b32 	%r305, %f888;
	or.b32  	%r306, %r304, %r305;
	mov.b32 	%f888, %r306;
$L__BB0_52:                             // %__nv_fmodf.exit903
	ld.global.u32 	%r117, [%rd65];
	mov.u64 	%rd66, 2;
	mov.u64 	%rd67, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11243, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd68, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd68, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass323
	shr.u32 	%r118, %r1, 1;
	shr.u32 	%r122, %r1, 3;
	and.b32  	%r321, %r1, 3;
	and.b32  	%r322, %r122, 2;
	or.b32  	%r323, %r119, %r322;
	and.b32  	%r324, %r118, 4;
	or.b32  	%r125, %r323, %r324;
	mul.lo.s32 	%r325, %r321, %r125;
	shl.b32 	%r326, %r325, 1;
	neg.s32 	%r327, %r326;
	cvt.rn.f32.s32 	%f156, %r327;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r36, %f904;
	and.b32  	%r328, %r36, 8388607;
	or.b32  	%r7995, %r328, 1065353216;
	mov.b32 	%f891, %r7995;
	add.s32 	%r329, %r36, -1073741824;
	and.b32  	%r7996, %r329, -8388608;
	setp.eq.s32 	%p109, %r7996, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i928.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i928
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r330, %r7996, 192937984;
	add.s32 	%r331, %r7995, %r330;
	mov.b32 	%f575, %r331;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r7996, %r7996, %r330;
	mov.b32 	%r7995, %f891;
	setp.ne.s32 	%p110, %r7996, 0;
	setp.ne.s32 	%p111, %r7995, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i930
	setp.gt.u32 	%p113, %r36, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i907
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r35, %f72;
	setp.lt.u32 	%p104, %r35, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r35, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i911
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i914
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i933
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r332, %f157;
	and.b32  	%r43, %r332, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r333, %f892;
	or.b32  	%r334, %r43, %r333;
	mov.b32 	%f892, %r334;
$L__BB0_68:                             // %__nv_fmodf.exit934
	and.b32  	%r343, %r115, 6;
	mov.u32 	%r344, -8;
	sub.s32 	%r345, %r344, %r343;
	mul.lo.s32 	%r346, %r125, %r345;
	cvt.rn.f32.s32 	%f88, %r346;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r45, %f908;
	and.b32  	%r347, %r45, 8388607;
	or.b32  	%r7997, %r347, 1065353216;
	mov.b32 	%f895, %r7997;
	add.s32 	%r348, %r45, -1073741824;
	and.b32  	%r7998, %r348, -8388608;
	setp.eq.s32 	%p129, %r7998, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i959.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i959
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r349, %r7998, 192937984;
	add.s32 	%r350, %r7997, %r349;
	mov.b32 	%f626, %r350;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r7998, %r7998, %r349;
	mov.b32 	%r7997, %f895;
	setp.ne.s32 	%p130, %r7998, 0;
	setp.ne.s32 	%p131, %r7997, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i961
	setp.gt.u32 	%p133, %r45, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i938
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r44, %f92;
	setp.lt.u32 	%p124, %r44, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r44, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i942
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i945
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i964
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r351, %f89;
	and.b32  	%r52, %r351, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r352, %f896;
	or.b32  	%r353, %r52, %r352;
	mov.b32 	%f896, %r353;
$L__BB0_82:                             // %__nv_fmodf.exit965
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11243, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd74, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd74, 64;
	@%p142 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_83;
$L__BB0_133:                            // %pass400
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11243, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd80, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd80;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_145;
// %bb.134:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_135;
$L__BB0_141:
	mov.b32 	%r127, %f912;
	and.b32  	%r374, %r127, 8388607;
	or.b32  	%r8018, %r374, 1065353216;
	mov.b32 	%f911, %r8018;
	add.s32 	%r375, %r127, -1073741824;
	and.b32  	%r8019, %r375, -8388608;
	setp.eq.s32 	%p150, %r8019, 0;
	@%p150 bra 	$L__BB0_144;
// %bb.142:                             // %__nv_fmaf_rn.exit4.i.i.i1083.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_143:                            // %__nv_fmaf_rn.exit4.i.i.i1083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r376, %r8019, 192937984;
	add.s32 	%r377, %r8018, %r376;
	mov.b32 	%f679, %r377;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8019, %r8019, %r376;
	mov.b32 	%r8018, %f911;
	setp.ne.s32 	%p151, %r8019, 0;
	setp.ne.s32 	%p152, %r8018, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_143;
$L__BB0_144:                            // %__internal_fmodf_slowpath_mod.exit.i.i1085
	setp.gt.u32 	%p154, %r127, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_145;
$L__BB0_135:                            // %__nv_fast_fdividef.exit.i.i.i1062
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r126, %f162;
	setp.lt.u32 	%p145, %r126, 1073741824;
	@%p145 bra 	$L__BB0_140;
// %bb.136:
	setp.lt.u32 	%p146, %r126, -2147483647;
	@%p146 bra 	$L__BB0_138;
// %bb.137:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_140;
$L__BB0_138:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_140;
// %bb.139:                             // %__nv_fmaf_rn.exit.i.i.i1066
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_140:                            // %__internal_fmodf_fastpath_quot.exit.i.i1069
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_145:                            // %__internal_fmodf_kernel.exit.i1088
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_147;
// %bb.146:
	mov.b32 	%r378, %f159;
	and.b32  	%r379, %r378, -2147483648;
	mov.b32 	%r380, %f912;
	or.b32  	%r381, %r379, %r380;
	mov.b32 	%f912, %r381;
$L__BB0_147:                            // %__nv_fmodf.exit1089
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11243, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd84, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd84;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r58, %f900;
	and.b32  	%r390, %r58, 8388607;
	or.b32  	%r7999, %r390, 1065353216;
	mov.b32 	%f899, %r7999;
	add.s32 	%r391, %r58, -1073741824;
	and.b32  	%r8000, %r391, -8388608;
	setp.eq.s32 	%p170, %r8000, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i990.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r8000, 192937984;
	add.s32 	%r393, %r7999, %r392;
	mov.b32 	%f730, %r393;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8000, %r8000, %r392;
	mov.b32 	%r7999, %f899;
	setp.ne.s32 	%p171, %r8000, 0;
	setp.ne.s32 	%p172, %r7999, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i992
	setp.gt.u32 	%p174, %r58, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i969
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p165, %r57, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r57, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i973
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i976
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i995
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r394, %f178;
	and.b32  	%r395, %r394, -2147483648;
	mov.b32 	%r396, %f900;
	or.b32  	%r397, %r395, %r396;
	mov.b32 	%f900, %r397;
$L__BB0_97:                             // %__nv_fmodf.exit996
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11243, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd88, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd88, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass465
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r68, %f904;
	and.b32  	%r412, %r68, 8388607;
	or.b32  	%r8001, %r412, 1065353216;
	mov.b32 	%f903, %r8001;
	add.s32 	%r413, %r68, -1073741824;
	and.b32  	%r8002, %r413, -8388608;
	setp.eq.s32 	%p191, %r8002, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i1021.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i1021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r414, %r8002, 192937984;
	add.s32 	%r415, %r8001, %r414;
	mov.b32 	%f782, %r415;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8002, %r8002, %r414;
	mov.b32 	%r8001, %f903;
	setp.ne.s32 	%p192, %r8002, 0;
	setp.ne.s32 	%p193, %r8001, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i1023
	setp.gt.u32 	%p195, %r68, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i1000
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r67, %f122;
	setp.lt.u32 	%p186, %r67, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r67, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i1004
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i1007
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i1026
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r416, %f904;
	or.b32  	%r417, %r43, %r416;
	mov.b32 	%f904, %r417;
$L__BB0_113:                            // %__nv_fmodf.exit1027
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r76, %f908;
	and.b32  	%r426, %r76, 8388607;
	or.b32  	%r8003, %r426, 1065353216;
	mov.b32 	%f907, %r8003;
	add.s32 	%r427, %r76, -1073741824;
	and.b32  	%r8004, %r427, -8388608;
	setp.eq.s32 	%p211, %r8004, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1052.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r428, %r8004, 192937984;
	add.s32 	%r429, %r8003, %r428;
	mov.b32 	%f832, %r429;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8004, %r8004, %r428;
	mov.b32 	%r8003, %f907;
	setp.ne.s32 	%p212, %r8004, 0;
	setp.ne.s32 	%p213, %r8003, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1054
	setp.gt.u32 	%p215, %r76, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1031
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r75, %f139;
	setp.lt.u32 	%p206, %r75, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r75, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1035
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1038
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1057
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r430, %f908;
	or.b32  	%r431, %r52, %r430;
	mov.b32 	%f908, %r431;
$L__BB0_127:                            // %__nv_fmodf.exit1058
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r7988, 0;
	@%p224 bra 	$L__BB0_153;
// %bb.128:                             // %L1561.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r211, %f190;
	mov.b32 	%r218, %f224;
	mov.b32 	%r229, %f259;
	mov.b32 	%r236, %f293;
	mov.b32 	%r247, %f328;
	mov.b32 	%r254, %f362;
	mov.b32 	%r265, %f397;
	mov.b32 	%r272, %f431;
	mov.b32 	%r290, %f480;
	mov.b32 	%r313, %f532;
	mov.b32 	%r335, %f585;
	mov.b32 	%r366, %f636;
	and.b32  	%r212, %r211, -2147483648;
	and.b32  	%r219, %r218, -2147483648;
	and.b32  	%r230, %r229, -2147483648;
	and.b32  	%r237, %r236, -2147483648;
	and.b32  	%r248, %r247, -2147483648;
	and.b32  	%r255, %r254, -2147483648;
	and.b32  	%r266, %r265, -2147483648;
	and.b32  	%r273, %r272, -2147483648;
	and.b32  	%r291, %r290, -2147483648;
	and.b32  	%r314, %r313, -2147483648;
	and.b32  	%r336, %r335, -2147483648;
	and.b32  	%r367, %r366, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r213, %r212, 1056964608;
	or.b32  	%r220, %r219, 1056964608;
	or.b32  	%r231, %r230, 1056964608;
	or.b32  	%r238, %r237, 1056964608;
	or.b32  	%r249, %r248, 1056964608;
	or.b32  	%r256, %r255, 1056964608;
	or.b32  	%r267, %r266, 1056964608;
	or.b32  	%r274, %r273, 1056964608;
	or.b32  	%r292, %r291, 1056964608;
	or.b32  	%r315, %r314, 1056964608;
	or.b32  	%r337, %r336, 1056964608;
	or.b32  	%r368, %r367, 1056964608;
	mov.b32 	%r382, %f689;
	mov.b32 	%r404, %f740;
	mov.b32 	%f191, %r213;
	mov.b32 	%f225, %r220;
	mov.b32 	%f260, %r231;
	mov.b32 	%f294, %r238;
	mov.b32 	%f329, %r249;
	mov.b32 	%f363, %r256;
	mov.b32 	%f398, %r267;
	mov.b32 	%f432, %r274;
	mov.b32 	%f481, %r292;
	mov.b32 	%f533, %r315;
	mov.b32 	%f586, %r337;
	mov.b32 	%f637, %r368;
	and.b32  	%r383, %r382, -2147483648;
	and.b32  	%r405, %r404, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r384, %r383, 1056964608;
	or.b32  	%r406, %r405, 1056964608;
	mov.b32 	%r418, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r384;
	mov.b32 	%f741, %r406;
	and.b32  	%r419, %r418, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r420, %r419, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r420;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r214, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r221, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r232, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r239, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r250, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r257, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r268, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r275, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r215, %r214, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r222, %r221, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r233, %r232, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r240, %r239, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r251, %r250, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r258, %r257, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r269, %r268, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r276, %r275, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r293, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r316, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r338, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r369, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r216, %r215, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r223, %r222, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r234, %r233, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r241, %r240, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r252, %r251, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r259, %r258, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r270, %r269, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r277, %r276, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r294, %r293, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r317, %r316, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r339, %r338, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r370, %r369, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r216, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r223, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r234, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r241, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r252, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r259, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r270, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r277, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r294, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r317, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r339, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r370, 1;
	cvt.rzi.s32.f32 	%r385, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r407, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r217, %r215, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r224, %r222, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r235, %r233, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r242, %r240, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r253, %r251, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r260, %r258, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r271, %r269, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r278, %r276, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r295, %r293, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r318, %r316, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r340, %r338, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r371, %r369, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r386, %r385, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r408, %r407, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r217, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r224, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r235, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r242, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r253, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r260, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r271, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r278, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r295, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r296, %r293, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r318, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r319, %r316, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r340, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r341, %r338, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r371, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r372, %r369, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r386, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r408, 1;
	cvt.rzi.s32.f32 	%r421, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r297, %r296, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r320, %r319, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r342, %r341, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r373, %r372, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r387, %r385, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r409, %r407, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r422, %r421, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r297, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r320, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r342, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r373, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r387, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r388, %r385, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r409, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r410, %r407, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r422, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r389, %r388, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r411, %r410, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r423, %r421, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r389, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r411, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r423, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r424, %r421, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.b32 	%r227, %f251;
	mov.b32 	%r226, %f3;
	mov.b32 	%r245, %f320;
	mov.b32 	%r244, %f12;
	mov.b32 	%r263, %f389;
	mov.b32 	%r262, %f21;
	mov.b32 	%r281, %f457;
	mov.b32 	%r280, %f30;
	mov.b32 	%r309, %f563;
	mov.b32 	%r308, %f53;
	mov.b32 	%r312, %f560;
	mov.b32 	%r311, %f52;
	mov.b32 	%r356, %f667;
	mov.b32 	%r355, %f87;
	mov.b32 	%r362, %f664;
	mov.b32 	%r361, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r425, %r424, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r225, %r227, %r226;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r243, %r245, %r244;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r261, %r263, %r262;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r281, %r280;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r307, %r309, %r308;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r310, %r312, %r311;
	// end inline asm
	xor.b32  	%r359, %r362, -2147483648;
	xor.b32  	%r358, %r361, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r425, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r354, %r356, %r355;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r357, %r359, %r358;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r360, %r362, %r361;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r363, %r356, %r355;
	// end inline asm
	mov.b32 	%r400, %f771;
	mov.b32 	%r399, %f177;
	mov.b32 	%r403, %f768;
	mov.b32 	%r402, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r398, %r400, %r399;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r401, %r403, %r402;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r444, %f842;
	and.b32  	%r445, %r444, -2147483648;
	or.b32  	%r446, %r445, 1056964608;
	mov.b32 	%f843, %r446;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r447, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r448, %r447, 1;
	setp.eq.b32 	%p219, %r448, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r449, %r447, 2;
	setp.eq.s32 	%p220, %r449, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r450, %r447, 1;
	and.b32  	%r451, %r450, 2;
	setp.eq.s32 	%p221, %r451, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r434, %f873;
	mov.b32 	%r433, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r433;
	// end inline asm
	mov.b32 	%r440, %f870;
	xor.b32  	%r437, %r440, -2147483648;
	mov.b32 	%r439, %f136;
	xor.b32  	%r436, %r439, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r435, %r437, %r436;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r438, %r440, %r439;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r434, %r433;
	// end inline asm
	shl.b32 	%r453, %r5, 12;
	shl.b32 	%r454, %r4, 11;
	and.b32  	%r455, %r454, 2048;
	and.b32  	%r456, %r112, 12;
	and.b32  	%r457, %r112, 16;
	or.b32  	%r458, %r455, %r456;
	or.b32  	%r459, %r458, %r457;
	or.b32  	%r460, %r116, %r2;
	or.b32  	%r87, %r460, %r114;
	or.b32  	%r88, %r459, %r453;
	and.b32  	%r89, %r1, 8;
	shl.b32 	%r461, %r1, 4;
	or.b32  	%r462, %r89, %r461;
	shr.u32 	%r463, %r462, 2;
	and.b32  	%r464, %r463, 14;
	or.b32  	%r465, %r464, %r457;
	and.b32  	%r90, %r3, 32;
	shr.u32 	%r92, %r2, 1;
	or.b32  	%r466, %r92, %r90;
	or.b32  	%r93, %r466, 8;
	or.b32  	%r94, %r466, 24;
	and.b16  	%rs4, %rs1, 31;
	mul.lo.s16 	%rs5, %rs4, 65;
	cvt.u32.u16 	%r467, %rs5;
	add.s32 	%r468, %r466, %r467;
	add.s32 	%r469, %r93, %r467;
	or.b32  	%r470, %r466, 16;
	add.s32 	%r471, %r470, %r467;
	add.s32 	%r472, %r94, %r467;
	shl.b32 	%r473, %r2, 1;
	or.b32  	%r474, %r120, %r473;
	mul.lo.s32 	%r475, %r474, 65;
	add.s32 	%r476, %r475, %r457;
	add.s32 	%r477, %r476, %r464;
	mul.wide.u32 	%rd92, %r477, 4;
	mov.u64 	%rd93, shmem;
	add.s64 	%rd5, %rd93, %rd92;
	cvt.u64.u32 	%rd94, %r464;
	cvt.u64.u32 	%rd95, %r475;
	cvt.u64.u32 	%rd96, %r457;
	add.s64 	%rd97, %rd96, %rd95;
	add.s64 	%rd98, %rd97, %rd94;
	shl.b64 	%rd99, %rd98, 2;
	add.s64 	%rd6, %rd93, %rd99;
	shl.b32 	%r478, %r7, 18;
	add.s32 	%r479, %r478, -786432;
	shl.b32 	%r480, %r2, 2;
	or.b32  	%r481, %r113, %r480;
	or.b32  	%r482, %r481, %r122;
	shl.b32 	%r483, %r482, 5;
	and.b32  	%r484, %r112, 28;
	or.b32  	%r95, %r484, %r483;
	cvt.s64.s32 	%rd7, %r479;
	and.b32  	%r485, %r2, 1;
	neg.s32 	%r486, %r485;
	and.b32  	%r487, %r486, 1040;
	bfe.s32 	%r488, %r2, 1, 1;
	and.b32  	%r489, %r488, 520;
	shr.u32 	%r490, %r2, 3;
	bfe.s32 	%r491, %r2, 2, 1;
	and.b32  	%r492, %r491, 260;
	add.s32 	%r493, %r487, %r465;
	add.s32 	%r494, %r493, %r489;
	mad.lo.s32 	%r495, %r120, 65, %r494;
	mad.lo.s32 	%r496, %r490, 130, %r495;
	add.s32 	%r497, %r496, %r492;
	mul.wide.u32 	%rd100, %r497, 4;
	add.s64 	%rd8, %rd93, %rd100;
	add.s32 	%r498, %r497, 32;
	mul.wide.u32 	%rd101, %r498, 4;
	add.s64 	%rd9, %rd93, %rd101;
	add.s32 	%r499, %r497, 1;
	mul.wide.u32 	%rd102, %r499, 4;
	add.s64 	%rd10, %rd93, %rd102;
	add.s32 	%r500, %r497, 33;
	mul.wide.u32 	%rd103, %r500, 4;
	add.s64 	%rd11, %rd93, %rd103;
	add.s32 	%r501, %r497, 2081;
	mul.wide.u32 	%rd104, %r501, 4;
	add.s64 	%rd12, %rd93, %rd104;
	add.s32 	%r502, %r497, 2113;
	mul.wide.u32 	%rd105, %r502, 4;
	add.s64 	%rd13, %rd93, %rd105;
	add.s32 	%r503, %r497, 2082;
	mul.wide.u32 	%rd106, %r503, 4;
	add.s64 	%rd14, %rd93, %rd106;
	add.s32 	%r504, %r497, 2114;
	mul.wide.u32 	%rd107, %r504, 4;
	add.s64 	%rd15, %rd93, %rd107;
	add.s32 	%r505, %r497, 4162;
	mul.wide.u32 	%rd108, %r505, 4;
	add.s64 	%rd16, %rd93, %rd108;
	add.s32 	%r506, %r497, 4194;
	mul.wide.u32 	%rd109, %r506, 4;
	add.s64 	%rd17, %rd93, %rd109;
	add.s32 	%r507, %r497, 4163;
	mul.wide.u32 	%rd110, %r507, 4;
	add.s64 	%rd18, %rd93, %rd110;
	add.s32 	%r508, %r497, 4195;
	mul.wide.u32 	%rd111, %r508, 4;
	add.s64 	%rd19, %rd93, %rd111;
	add.s32 	%r509, %r497, 6243;
	mul.wide.u32 	%rd112, %r509, 4;
	add.s64 	%rd20, %rd93, %rd112;
	add.s32 	%r510, %r497, 6275;
	mul.wide.u32 	%rd113, %r510, 4;
	add.s64 	%rd21, %rd93, %rd113;
	add.s32 	%r511, %r497, 6244;
	mul.wide.u32 	%rd114, %r511, 4;
	add.s64 	%rd22, %rd93, %rd114;
	add.s32 	%r512, %r497, 6276;
	mul.wide.u32 	%rd115, %r512, 4;
	add.s64 	%rd23, %rd93, %rd115;
	bfe.s32 	%r513, %r1, 2, 1;
	and.b32  	%r96, %r513, 260;
	mul.wide.u32 	%rd116, %r472, 4;
	add.s64 	%rd24, %rd93, %rd116;
	mul.wide.u32 	%rd117, %r471, 4;
	add.s64 	%rd25, %rd93, %rd117;
	mul.wide.u32 	%rd118, %r469, 4;
	add.s64 	%rd26, %rd93, %rd118;
	mul.wide.u32 	%rd119, %r468, 4;
	add.s64 	%rd27, %rd93, %rd119;
	setp.eq.s32 	%p225, %r89, 0;
	mov.u16 	%rs1181, 25600;
	mov.u16 	%rs1077, 21504;
	mov.u16 	%rs1189, 18432;
	mov.u32 	%r8033, %r7988;
	mov.u32 	%r8032, %r7988;
	mov.u32 	%r8031, %r7988;
	mov.u32 	%r8030, %r7988;
	mov.u32 	%r8029, %r7988;
	mov.u32 	%r8028, %r7988;
	mov.u32 	%r8027, %r7988;
	mov.u32 	%r8026, %r7988;
	mov.u32 	%r8025, %r7988;
	mov.u32 	%r8024, %r7988;
	mov.u32 	%r8023, %r7988;
	mov.u32 	%r8022, %r7988;
	mov.u32 	%r109, %r7988;
	bra.uni 	$L__BB0_129;
$L__BB0_152:                            // %pass16427
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7984, %r7990, 786432;
	cvt.s64.s32 	%rd171, %r7984;
	add.s64 	%rd172, %rd171, %rd7;
	shr.u64 	%rd173, %rd172, 39;
	add.s64 	%rd174, %rd172, %rd173;
	shr.s64 	%rd175, %rd174, 25;
	setp.lt.s64 	%p253, %rd172, 0;
	and.b64  	%rd176, %rd174, -33554432;
	setp.ne.s64 	%p254, %rd176, %rd172;
	and.pred  	%p255, %p253, %p254;
	selp.u64 	%rd177, 1, 0, %p255;
	sub.s64 	%rd178, %rd177, %rd175;
	shl.b64 	%rd179, %rd178, 25;
	add.s64 	%rd180, %rd179, %rd172;
	shl.b64 	%rd181, %rd180, 2;
	add.s64 	%rd182, %rd3, %rd181;
	st.global.v4.u32 	[%rd182], {%r180, %r182, %r181, %r183};
	setp.ne.s32 	%p256, %r109, 7936;
	add.s32 	%r109, %r109, 256;
	add.s32 	%r7985, %r109, %r5;
	setp.gt.s32 	%p257, %r6, %r7985;
	and.pred  	%p258, %p256, %p257;
	@%p258 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_153;
$L__BB0_129:                            // %L1561
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	and.b32  	%r579, %r109, 7936;
	or.b32  	%r580, %r87, %r579;
	shl.b32 	%r581, %r580, 12;
	add.s32 	%r582, %r88, %r581;
	shr.s32 	%r583, %r582, 31;
	shr.u32 	%r584, %r583, 7;
	add.s32 	%r585, %r582, %r584;
	shr.s32 	%r586, %r585, 25;
	setp.lt.s32 	%p226, %r582, 0;
	and.b32  	%r587, %r585, -33554432;
	setp.ne.s32 	%p227, %r587, %r582;
	and.pred  	%p228, %p226, %p227;
	selp.u32 	%r588, 1, 0, %p228;
	sub.s32 	%r589, %r588, %r586;
	shl.b32 	%r590, %r589, 25;
	add.s32 	%r591, %r590, %r582;
	mul.wide.s32 	%rd120, %r591, 4;
	add.s64 	%rd121, %rd2, %rd120;
	ld.global.v4.u32 	{%r592, %r593, %r594, %r595}, [%rd121];
	or.b32  	%r596, %r581, 262144;
	add.s32 	%r597, %r88, %r596;
	shr.s32 	%r598, %r597, 31;
	shr.u32 	%r599, %r598, 7;
	add.s32 	%r600, %r597, %r599;
	shr.s32 	%r601, %r600, 25;
	setp.lt.s32 	%p229, %r597, 0;
	and.b32  	%r602, %r600, -33554432;
	setp.ne.s32 	%p230, %r602, %r597;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r603, 1, 0, %p231;
	sub.s32 	%r604, %r603, %r601;
	shl.b32 	%r605, %r604, 25;
	add.s32 	%r606, %r605, %r597;
	mul.wide.s32 	%rd122, %r606, 4;
	add.s64 	%rd123, %rd2, %rd122;
	ld.global.v4.u32 	{%r607, %r608, %r609, %r610}, [%rd123];
	or.b32  	%r611, %r581, 524288;
	add.s32 	%r612, %r88, %r611;
	shr.s32 	%r613, %r612, 31;
	shr.u32 	%r614, %r613, 7;
	add.s32 	%r615, %r612, %r614;
	shr.s32 	%r616, %r615, 25;
	setp.lt.s32 	%p232, %r612, 0;
	and.b32  	%r617, %r615, -33554432;
	setp.ne.s32 	%p233, %r617, %r612;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r618, 1, 0, %p234;
	sub.s32 	%r619, %r618, %r616;
	shl.b32 	%r620, %r619, 25;
	add.s32 	%r621, %r620, %r612;
	mul.wide.s32 	%rd124, %r621, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r622, %r623, %r624, %r625}, [%rd125];
	or.b32  	%r626, %r581, 786432;
	add.s32 	%r627, %r88, %r626;
	shr.s32 	%r628, %r627, 31;
	shr.u32 	%r629, %r628, 7;
	add.s32 	%r630, %r627, %r629;
	shr.s32 	%r631, %r630, 25;
	setp.lt.s32 	%p235, %r627, 0;
	and.b32  	%r632, %r630, -33554432;
	setp.ne.s32 	%p236, %r632, %r627;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r633, 1, 0, %p237;
	sub.s32 	%r634, %r633, %r631;
	shl.b32 	%r635, %r634, 25;
	add.s32 	%r636, %r635, %r627;
	mul.wide.s32 	%rd126, %r636, 4;
	add.s64 	%rd127, %rd2, %rd126;
	ld.global.v4.u32 	{%r637, %r638, %r639, %r640}, [%rd127];
	selp.b32 	%r641, %r594, %r592, %p225;
	shfl.sync.bfly.b32	%r642, %r641, 8, 31, -1;
	selp.b32 	%r515, %r592, %r642, %p225;
	selp.b32 	%r516, %r642, %r594, %p225;
	selp.b32 	%r643, %r595, %r593, %p225;
	shfl.sync.bfly.b32	%r644, %r643, 8, 31, -1;
	selp.b32 	%r523, %r593, %r644, %p225;
	selp.b32 	%r524, %r644, %r595, %p225;
	selp.b32 	%r645, %r609, %r607, %p225;
	shfl.sync.bfly.b32	%r646, %r645, 8, 31, -1;
	selp.b32 	%r531, %r607, %r646, %p225;
	selp.b32 	%r532, %r646, %r609, %p225;
	selp.b32 	%r647, %r610, %r608, %p225;
	shfl.sync.bfly.b32	%r648, %r647, 8, 31, -1;
	selp.b32 	%r539, %r608, %r648, %p225;
	selp.b32 	%r540, %r648, %r610, %p225;
	selp.b32 	%r649, %r624, %r622, %p225;
	shfl.sync.bfly.b32	%r650, %r649, 8, 31, -1;
	selp.b32 	%r547, %r622, %r650, %p225;
	selp.b32 	%r548, %r650, %r624, %p225;
	selp.b32 	%r651, %r625, %r623, %p225;
	shfl.sync.bfly.b32	%r652, %r651, 8, 31, -1;
	selp.b32 	%r555, %r623, %r652, %p225;
	selp.b32 	%r556, %r652, %r625, %p225;
	selp.b32 	%r653, %r639, %r637, %p225;
	shfl.sync.bfly.b32	%r654, %r653, 8, 31, -1;
	selp.b32 	%r563, %r637, %r654, %p225;
	selp.b32 	%r564, %r654, %r639, %p225;
	selp.b32 	%r655, %r640, %r638, %p225;
	shfl.sync.bfly.b32	%r656, %r655, 8, 31, -1;
	selp.b32 	%r571, %r638, %r656, %p225;
	selp.b32 	%r572, %r656, %r640, %p225;
	mov.u32 	%r573, 21520;
	// begin inline asm
	prmt.b32 %r514, %r515, %r516, %r573;
	// end inline asm
	mov.u32 	%r577, 30258;
	// begin inline asm
	prmt.b32 %r518, %r515, %r516, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r523, %r524, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r523, %r524, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r531, %r532, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r531, %r532, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r539, %r540, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r539, %r540, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r547, %r548, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r547, %r548, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r554, %r555, %r556, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r555, %r556, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r563, %r564, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r563, %r564, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r571, %r572, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r571, %r572, %r577;
	// end inline asm
	st.shared.u32 	[%rd8], %r514;
	st.shared.u32 	[%rd9], %r518;
	st.shared.u32 	[%rd10], %r522;
	st.shared.u32 	[%rd11], %r526;
	st.shared.u32 	[%rd12], %r530;
	st.shared.u32 	[%rd13], %r534;
	st.shared.u32 	[%rd14], %r538;
	st.shared.u32 	[%rd15], %r542;
	st.shared.u32 	[%rd16], %r546;
	st.shared.u32 	[%rd17], %r550;
	st.shared.u32 	[%rd18], %r554;
	st.shared.u32 	[%rd19], %r558;
	st.shared.u32 	[%rd20], %r562;
	st.shared.u32 	[%rd21], %r566;
	st.shared.u32 	[%rd22], %r570;
	st.shared.u32 	[%rd23], %r574;
	bar.sync 	0;
	or.b32  	%r657, %r109, %r207;
	or.b32  	%r110, %r657, %r122;
	shr.u32 	%r8020, %r110, 6;
	mov.u64 	%rd185, %rd27;
	mov.u64 	%rd186, %rd26;
	mov.u64 	%rd187, %rd25;
	mov.u64 	%rd188, %rd24;
	mov.u32 	%r8021, %r7988;
$L__BB0_130:                            // %pass5578
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7842, %r110, %r8021;
	and.b32  	%r7843, %r7842, 1;
	neg.s32 	%r7844, %r7843;
	and.b32  	%r7845, %r7844, 1040;
	bfe.s32 	%r7846, %r7842, 1, 1;
	and.b32  	%r7847, %r7846, 520;
	bfe.s32 	%r7848, %r7842, 4, 1;
	and.b32  	%r7849, %r7848, 65;
	bfe.s32 	%r7850, %r7842, 3, 1;
	and.b32  	%r7851, %r7850, 130;
	and.b32  	%r7852, %r8020, 3;
	mul.lo.s32 	%r7853, %r7852, 2081;
	or.b32  	%r7854, %r7845, %r90;
	or.b32  	%r7855, %r7854, %r7847;
	or.b32  	%r7856, %r7855, %r92;
	or.b32  	%r7857, %r7851, %r7849;
	add.s32 	%r7858, %r7857, %r7853;
	add.s32 	%r7859, %r7858, %r96;
	add.s32 	%r7860, %r7859, %r7856;
	mul.wide.u32 	%rd128, %r7860, 4;
	add.s64 	%rd130, %rd93, %rd128;
	ld.shared.u32 	%r7861, [%rd130];
	or.b32  	%r7862, %r93, %r7845;
	add.s32 	%r7863, %r7862, %r7847;
	add.s32 	%r7864, %r7863, %r7849;
	add.s32 	%r7865, %r7864, %r7851;
	add.s32 	%r7866, %r7865, %r7853;
	add.s32 	%r7867, %r7866, %r96;
	mul.wide.u32 	%rd131, %r7867, 4;
	add.s64 	%rd132, %rd93, %rd131;
	ld.shared.u32 	%r7868, [%rd132];
	ld.shared.u32 	%r7869, [%rd130+64];
	add.s32 	%r7870, %r94, %r7845;
	add.s32 	%r7871, %r7870, %r7847;
	add.s32 	%r7872, %r7871, %r7849;
	add.s32 	%r7873, %r7872, %r7851;
	add.s32 	%r7874, %r7873, %r7853;
	add.s32 	%r7875, %r7874, %r96;
	mul.wide.u32 	%rd133, %r7875, 4;
	add.s64 	%rd134, %rd93, %rd133;
	ld.shared.u32 	%r7876, [%rd134];
	// begin inline asm
	mov.b32 %r663, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r674, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r662, %r7861, -2004318072;
	mov.u32 	%r661, 983055;
	// begin inline asm
	lop3.b32 %r660, %r661, %r662, %r663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r664, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r665, %r663, %r664;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r668, %r660, %r665;
	// end inline asm
	mov.u32 	%r672, 15728880;
	// begin inline asm
	lop3.b32 %r671, %r672, %r662, %r674, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r675, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r676, %r674, %r675;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r679, %r671, %r676;
	// end inline asm
	shr.u32 	%r684, %r662, 8;
	// begin inline asm
	lop3.b32 %r682, %r661, %r684, %r663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r686, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r687, %r663, %r686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r690, %r682, %r687;
	// end inline asm
	// begin inline asm
	lop3.b32 %r693, %r672, %r684, %r674, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r697, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r698, %r674, %r697;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r701, %r693, %r698;
	// end inline asm
	// begin inline asm
	mov.b32 %r709, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r720, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r708, %r7868, -2004318072;
	// begin inline asm
	lop3.b32 %r706, %r661, %r708, %r709, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r710, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r711, %r709, %r710;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r714, %r706, %r711;
	// end inline asm
	// begin inline asm
	lop3.b32 %r717, %r672, %r708, %r720, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r721, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r722, %r720, %r721;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r725, %r717, %r722;
	// end inline asm
	shr.u32 	%r730, %r708, 8;
	// begin inline asm
	lop3.b32 %r728, %r661, %r730, %r709, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r732, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r733, %r709, %r732;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r736, %r728, %r733;
	// end inline asm
	// begin inline asm
	lop3.b32 %r739, %r672, %r730, %r720, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r743, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r744, %r720, %r743;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r747, %r739, %r744;
	// end inline asm
	// begin inline asm
	mov.b32 %r755, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r766, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r754, %r7869, -2004318072;
	// begin inline asm
	lop3.b32 %r752, %r661, %r754, %r755, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r756, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r757, %r755, %r756;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r760, %r752, %r757;
	// end inline asm
	// begin inline asm
	lop3.b32 %r763, %r672, %r754, %r766, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r767, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r768, %r766, %r767;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r771, %r763, %r768;
	// end inline asm
	shr.u32 	%r776, %r754, 8;
	// begin inline asm
	lop3.b32 %r774, %r661, %r776, %r755, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r778, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r779, %r755, %r778;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r782, %r774, %r779;
	// end inline asm
	// begin inline asm
	lop3.b32 %r785, %r672, %r776, %r766, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r789, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r790, %r766, %r789;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r793, %r785, %r790;
	// end inline asm
	// begin inline asm
	mov.b32 %r801, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r812, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r800, %r7876, -2004318072;
	// begin inline asm
	lop3.b32 %r798, %r661, %r800, %r801, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r802, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r803, %r801, %r802;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r806, %r798, %r803;
	// end inline asm
	// begin inline asm
	lop3.b32 %r809, %r672, %r800, %r812, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r813, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r814, %r812, %r813;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r817, %r809, %r814;
	// end inline asm
	shr.u32 	%r822, %r800, 8;
	// begin inline asm
	lop3.b32 %r820, %r661, %r822, %r801, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r824, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r825, %r801, %r824;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r828, %r820, %r825;
	// end inline asm
	// begin inline asm
	lop3.b32 %r831, %r672, %r822, %r812, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r835, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r836, %r812, %r835;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r839, %r831, %r836;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r842, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r844, %r842, %r668;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r847, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r849, %r847, %r679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r852, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r854, %r852, %r690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r857, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r859, %r857, %r701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r862, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r864, %r862, %r714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r867, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r869, %r867, %r725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r872, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r874, %r872, %r736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r877, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r879, %r877, %r747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r882, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r884, %r882, %r760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r887, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r889, %r887, %r771;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r892, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r894, %r892, %r782;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r897, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r899, %r897, %r793;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r902, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r904, %r902, %r806;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r907, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r909, %r907, %r817;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r912, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r914, %r912, %r828;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r917, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r919, %r917, %r839;
	// end inline asm
	// begin inline asm
	mov.b32 %r927, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r938, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r926, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r924, %r661, %r926, %r927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r928, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r929, %r927, %r928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r932, %r924, %r929;
	// end inline asm
	// begin inline asm
	lop3.b32 %r935, %r672, %r926, %r938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r939, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r940, %r938, %r939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r943, %r935, %r940;
	// end inline asm
	shr.u32 	%r948, %r926, 8;
	// begin inline asm
	lop3.b32 %r946, %r661, %r948, %r927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r950, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r951, %r927, %r950;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r954, %r946, %r951;
	// end inline asm
	// begin inline asm
	lop3.b32 %r957, %r672, %r948, %r938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r961, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r962, %r938, %r961;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r965, %r957, %r962;
	// end inline asm
	// begin inline asm
	mov.b32 %r973, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r984, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r972, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r970, %r661, %r972, %r973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r974, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r975, %r973, %r974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r978, %r970, %r975;
	// end inline asm
	// begin inline asm
	lop3.b32 %r981, %r672, %r972, %r984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r985, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r986, %r984, %r985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r989, %r981, %r986;
	// end inline asm
	shr.u32 	%r994, %r972, 8;
	// begin inline asm
	lop3.b32 %r992, %r661, %r994, %r973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r996, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r997, %r973, %r996;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1000, %r992, %r997;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1003, %r672, %r994, %r984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1007, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1008, %r984, %r1007;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1011, %r1003, %r1008;
	// end inline asm
	// begin inline asm
	mov.b32 %r1019, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1030, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1018, %r8027, -2004318072;
	// begin inline asm
	lop3.b32 %r1016, %r661, %r1018, %r1019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1020, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1021, %r1019, %r1020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1024, %r1016, %r1021;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1027, %r672, %r1018, %r1030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1031, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1032, %r1030, %r1031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1035, %r1027, %r1032;
	// end inline asm
	shr.u32 	%r1040, %r1018, 8;
	// begin inline asm
	lop3.b32 %r1038, %r661, %r1040, %r1019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1042, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1043, %r1019, %r1042;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1046, %r1038, %r1043;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1049, %r672, %r1040, %r1030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1053, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1054, %r1030, %r1053;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1057, %r1049, %r1054;
	// end inline asm
	// begin inline asm
	mov.b32 %r1065, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1076, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1064, %r8026, -2004318072;
	// begin inline asm
	lop3.b32 %r1062, %r661, %r1064, %r1065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1066, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1067, %r1065, %r1066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1070, %r1062, %r1067;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1073, %r672, %r1064, %r1076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1077, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1078, %r1076, %r1077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1081, %r1073, %r1078;
	// end inline asm
	shr.u32 	%r1086, %r1064, 8;
	// begin inline asm
	lop3.b32 %r1084, %r661, %r1086, %r1065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1088, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1089, %r1065, %r1088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1092, %r1084, %r1089;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1095, %r672, %r1086, %r1076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1099, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1100, %r1076, %r1099;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1103, %r1095, %r1100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r225, %r932, %r844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1110, %r225, %r943, %r849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1114, %r225, %r954, %r854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1118, %r225, %r965, %r859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1122, %r225, %r978, %r864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r225, %r989, %r869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r225, %r1000, %r874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1134, %r225, %r1011, %r879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1138, %r225, %r1024, %r884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r225, %r1035, %r889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r225, %r1046, %r894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1150, %r225, %r1057, %r899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r225, %r1070, %r904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r225, %r1081, %r909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1162, %r225, %r1092, %r914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r225, %r1103, %r919;
	// end inline asm
	// begin inline asm
	mov.b32 %r1175, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1186, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1174, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r1172, %r661, %r1174, %r1175, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1176, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1177, %r1175, %r1176;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1180, %r1172, %r1177;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1183, %r672, %r1174, %r1186, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1187, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1188, %r1186, %r1187;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1191, %r1183, %r1188;
	// end inline asm
	shr.u32 	%r1196, %r1174, 8;
	// begin inline asm
	lop3.b32 %r1194, %r661, %r1196, %r1175, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1198, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1199, %r1175, %r1198;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1202, %r1194, %r1199;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1205, %r672, %r1196, %r1186, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1209, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1210, %r1186, %r1209;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1213, %r1205, %r1210;
	// end inline asm
	// begin inline asm
	mov.b32 %r1221, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1232, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1220, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r1218, %r661, %r1220, %r1221, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1222, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1223, %r1221, %r1222;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1226, %r1218, %r1223;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1229, %r672, %r1220, %r1232, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1233, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1234, %r1232, %r1233;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1237, %r1229, %r1234;
	// end inline asm
	shr.u32 	%r1242, %r1220, 8;
	// begin inline asm
	lop3.b32 %r1240, %r661, %r1242, %r1221, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1244, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1245, %r1221, %r1244;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1248, %r1240, %r1245;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1251, %r672, %r1242, %r1232, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1255, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1256, %r1232, %r1255;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1259, %r1251, %r1256;
	// end inline asm
	// begin inline asm
	mov.b32 %r1267, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1278, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1266, %r8025, -2004318072;
	// begin inline asm
	lop3.b32 %r1264, %r661, %r1266, %r1267, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1268, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1269, %r1267, %r1268;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1272, %r1264, %r1269;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1275, %r672, %r1266, %r1278, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1279, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1280, %r1278, %r1279;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1283, %r1275, %r1280;
	// end inline asm
	shr.u32 	%r1288, %r1266, 8;
	// begin inline asm
	lop3.b32 %r1286, %r661, %r1288, %r1267, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1290, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1291, %r1267, %r1290;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1294, %r1286, %r1291;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1297, %r672, %r1288, %r1278, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1301, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1302, %r1278, %r1301;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1305, %r1297, %r1302;
	// end inline asm
	// begin inline asm
	mov.b32 %r1313, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1324, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1312, %r8024, -2004318072;
	// begin inline asm
	lop3.b32 %r1310, %r661, %r1312, %r1313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1314, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1315, %r1313, %r1314;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1318, %r1310, %r1315;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1321, %r672, %r1312, %r1324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1325, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1326, %r1324, %r1325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1329, %r1321, %r1326;
	// end inline asm
	shr.u32 	%r1334, %r1312, 8;
	// begin inline asm
	lop3.b32 %r1332, %r661, %r1334, %r1313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1336, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1337, %r1313, %r1336;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1340, %r1332, %r1337;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1343, %r672, %r1334, %r1324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1347, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1348, %r1324, %r1347;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1351, %r1343, %r1348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1354, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1356, %r1354, %r1180, %r1106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1360, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r1360, %r1191, %r1110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1366, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r1366, %r1202, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1372, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1374, %r1372, %r1213, %r1118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1378, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1380, %r1378, %r1226, %r1122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1384, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1386, %r1384, %r1237, %r1126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1390, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1392, %r1390, %r1248, %r1130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1396, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1398, %r1396, %r1259, %r1134;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1402, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1404, %r1402, %r1272, %r1138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1408, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1410, %r1408, %r1283, %r1142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1414, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1416, %r1414, %r1294, %r1146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1420, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1422, %r1420, %r1305, %r1150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1426, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1428, %r1426, %r1318, %r1154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1432, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1434, %r1432, %r1329, %r1158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1438, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1440, %r1438, %r1340, %r1162;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1444, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1446, %r1444, %r1351, %r1166;
	// end inline asm
	// begin inline asm
	mov.b32 %r1455, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1466, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1454, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r1452, %r661, %r1454, %r1455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1456, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1457, %r1455, %r1456;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1460, %r1452, %r1457;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1463, %r672, %r1454, %r1466, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1467, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1468, %r1466, %r1467;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1471, %r1463, %r1468;
	// end inline asm
	shr.u32 	%r1476, %r1454, 8;
	// begin inline asm
	lop3.b32 %r1474, %r661, %r1476, %r1455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1478, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1479, %r1455, %r1478;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1482, %r1474, %r1479;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1485, %r672, %r1476, %r1466, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1489, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1490, %r1466, %r1489;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1493, %r1485, %r1490;
	// end inline asm
	// begin inline asm
	mov.b32 %r1501, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1512, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1500, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r1498, %r661, %r1500, %r1501, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1502, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1503, %r1501, %r1502;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1506, %r1498, %r1503;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1509, %r672, %r1500, %r1512, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1513, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1514, %r1512, %r1513;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1517, %r1509, %r1514;
	// end inline asm
	shr.u32 	%r1522, %r1500, 8;
	// begin inline asm
	lop3.b32 %r1520, %r661, %r1522, %r1501, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1524, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1525, %r1501, %r1524;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1528, %r1520, %r1525;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1531, %r672, %r1522, %r1512, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1535, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1536, %r1512, %r1535;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1539, %r1531, %r1536;
	// end inline asm
	// begin inline asm
	mov.b32 %r1547, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1558, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1546, %r8023, -2004318072;
	// begin inline asm
	lop3.b32 %r1544, %r661, %r1546, %r1547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1548, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1549, %r1547, %r1548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1552, %r1544, %r1549;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1555, %r672, %r1546, %r1558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1559, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1560, %r1558, %r1559;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1563, %r1555, %r1560;
	// end inline asm
	shr.u32 	%r1568, %r1546, 8;
	// begin inline asm
	lop3.b32 %r1566, %r661, %r1568, %r1547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1570, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1571, %r1547, %r1570;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1574, %r1566, %r1571;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1577, %r672, %r1568, %r1558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1581, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1582, %r1558, %r1581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1585, %r1577, %r1582;
	// end inline asm
	// begin inline asm
	mov.b32 %r1593, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r1604, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r1592, %r8022, -2004318072;
	// begin inline asm
	lop3.b32 %r1590, %r661, %r1592, %r1593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1594, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1595, %r1593, %r1594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1598, %r1590, %r1595;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1601, %r672, %r1592, %r1604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1605, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1606, %r1604, %r1605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1609, %r1601, %r1606;
	// end inline asm
	shr.u32 	%r1614, %r1592, 8;
	// begin inline asm
	lop3.b32 %r1612, %r661, %r1614, %r1593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1616, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1617, %r1593, %r1616;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1620, %r1612, %r1617;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1623, %r672, %r1614, %r1604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1627, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1628, %r1604, %r1627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1631, %r1623, %r1628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r261, %r1460, %r1356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r261, %r1471, %r1362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r261, %r1482, %r1368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r261, %r1493, %r1374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r261, %r1506, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r261, %r1517, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r261, %r1528, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r261, %r1539, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r261, %r1552, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r261, %r1563, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r261, %r1574, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r261, %r1585, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r261, %r1598, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r261, %r1609, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r261, %r1620, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r261, %r1631, %r1446;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1698, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1698, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r307, %r1705, %r1700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1707, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r1707, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r307, %r1714, %r1709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1716, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1716, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r307, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1725, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r1725, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r307, %r1732, %r1727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1734, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r1734, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r307, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1743, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r1743, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r307, %r1750, %r1745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r307, %r1759, %r1754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1761, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r1761, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r307, %r1768, %r1763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r310, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r307, %r1702, %r1770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r310, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r307, %r1711, %r1777;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1784, %r310, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r307, %r1720, %r1784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1791, %r310, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r307, %r1729, %r1791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1798, %r310, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r307, %r1738, %r1798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1805, %r310, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r307, %r1747, %r1805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1812, %r310, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r307, %r1756, %r1812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1819, %r310, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r307, %r1765, %r1819;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1913, %r1910}, {%r354, %r360, %r357, %r363}, {%r1703, %r1773}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1922, %r1919}, {%r354, %r360, %r357, %r363}, {%r1712, %r1780}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1931, %r1928}, {%r354, %r360, %r357, %r363}, {%r1721, %r1787}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1940, %r1937}, {%r354, %r360, %r357, %r363}, {%r1730, %r1794}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1949, %r1946}, {%r354, %r360, %r357, %r363}, {%r1739, %r1801}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1958, %r1955}, {%r354, %r360, %r357, %r363}, {%r1748, %r1808}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1967, %r1964}, {%r354, %r360, %r357, %r363}, {%r1757, %r1815}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1976, %r1973}, {%r354, %r360, %r357, %r363}, {%r1766, %r1822}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1906, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r1906, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r398, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1915, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1917, %r1915, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r398, %r1922, %r1917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1924, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1926, %r1924, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r398, %r1931, %r1926;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1933, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1935, %r1933, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r398, %r1940, %r1935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1942, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1944, %r1942, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r398, %r1949, %r1944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1951, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1953, %r1951, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r398, %r1958, %r1953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1960, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1962, %r1960, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r398, %r1967, %r1962;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1969, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1971, %r1969, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r398, %r1976, %r1971;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1978, %r401, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r398, %r1910, %r1978;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1985, %r401, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r398, %r1919, %r1985;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1992, %r401, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r398, %r1928, %r1992;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1999, %r401, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r398, %r1937, %r1999;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2006, %r401, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2009, %r398, %r1946, %r2006;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r401, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r398, %r1955, %r2013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2020, %r401, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r398, %r1964, %r2020;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2027, %r401, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r398, %r1973, %r2027;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2034, %r2035}, {%r432, %r438, %r435, %r441}, {%r1911, %r1981}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2044, %r2045}, {%r432, %r438, %r435, %r441}, {%r1920, %r1988}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2054, %r2055}, {%r432, %r438, %r435, %r441}, {%r1929, %r1995}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2064, %r2065}, {%r432, %r438, %r435, %r441}, {%r1938, %r2002}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2074, %r2075}, {%r432, %r438, %r435, %r441}, {%r1947, %r2009}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2084, %r2085}, {%r432, %r438, %r435, %r441}, {%r1956, %r2016}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2094, %r2095}, {%r432, %r438, %r435, %r441}, {%r1965, %r2023}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2104, %r2105}, {%r432, %r438, %r435, %r441}, {%r1974, %r2030}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2114, %r117, %r2034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r117, %r2035;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r117, %r2044;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r117, %r2045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r117, %r2054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r117, %r2055;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r117, %r2064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r117, %r2065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r117, %r2074;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r117, %r2075;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r117, %r2084;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r117, %r2085;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r117, %r2094;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r117, %r2095;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r117, %r2104;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r117, %r2105;
	// end inline asm
	mov.u16 	%rs198, -14592;
	// begin inline asm
	mov.b32 %r2162, {%rs198, %rs198};
	// end inline asm
	mov.u16 	%rs200, 18176;
	// begin inline asm
	mov.b32 %r2163, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2164, %r2114, %r2162;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2167, %r2164, %r2163;
	// end inline asm
	// begin inline asm
	mov.b32 %r2170, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2171, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2172, %r2117, %r2170;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2175, %r2172, %r2171;
	// end inline asm
	// begin inline asm
	mov.b32 %r2178, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2179, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2180, %r2120, %r2178;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2183, %r2180, %r2179;
	// end inline asm
	// begin inline asm
	mov.b32 %r2186, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2187, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2188, %r2123, %r2186;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2191, %r2188, %r2187;
	// end inline asm
	// begin inline asm
	mov.b32 %r2194, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2195, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2196, %r2126, %r2194;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2199, %r2196, %r2195;
	// end inline asm
	// begin inline asm
	mov.b32 %r2202, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2203, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2204, %r2129, %r2202;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2207, %r2204, %r2203;
	// end inline asm
	// begin inline asm
	mov.b32 %r2210, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2211, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2212, %r2132, %r2210;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2215, %r2212, %r2211;
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2219, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2220, %r2135, %r2218;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2223, %r2220, %r2219;
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2228, %r2138, %r2226;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2231, %r2228, %r2227;
	// end inline asm
	// begin inline asm
	mov.b32 %r2234, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2235, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2236, %r2141, %r2234;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2239, %r2236, %r2235;
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2244, %r2144, %r2242;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2247, %r2244, %r2243;
	// end inline asm
	// begin inline asm
	mov.b32 %r2250, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2252, %r2147, %r2250;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2255, %r2252, %r2251;
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2260, %r2150, %r2258;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2263, %r2260, %r2259;
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2268, %r2153, %r2266;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2271, %r2268, %r2267;
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2276, %r2156, %r2274;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2279, %r2276, %r2275;
	// end inline asm
	// begin inline asm
	mov.b32 %r2282, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r2283, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2284, %r2159, %r2282;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2287, %r2284, %r2283;
	// end inline asm
	// begin inline asm
	mov.b32 %r2293, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2291, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2292, %r2293, %r2291;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2295, %r2167, %r2292;
	// end inline asm
	// begin inline asm
	mov.b32 %r2298, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2299, %r2293, %r2298;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2302, %r2175, %r2299;
	// end inline asm
	// begin inline asm
	mov.b32 %r2305, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2306, %r2293, %r2305;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2309, %r2183, %r2306;
	// end inline asm
	// begin inline asm
	mov.b32 %r2312, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2313, %r2293, %r2312;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2316, %r2191, %r2313;
	// end inline asm
	mov.u32 	%r2322, 25152;
	// begin inline asm
	prmt.b32 %r2319, %r2295, %r2309, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2323, %r2302, %r2316, %r2322;
	// end inline asm
	shl.b32 	%r2330, %r2323, 4;
	mov.u32 	%r2328, 252645135;
	// begin inline asm
	lop3.b32 %r2327, %r2328, %r2319, %r2330, 202;
	// end inline asm
	xor.b32  	%r7877, %r2327, -2004318072;
	// begin inline asm
	mov.b32 %r2334, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2332, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2333, %r2334, %r2332;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2336, %r2199, %r2333;
	// end inline asm
	// begin inline asm
	mov.b32 %r2339, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2340, %r2334, %r2339;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2343, %r2207, %r2340;
	// end inline asm
	// begin inline asm
	mov.b32 %r2346, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2347, %r2334, %r2346;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2350, %r2215, %r2347;
	// end inline asm
	// begin inline asm
	mov.b32 %r2353, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2354, %r2334, %r2353;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2357, %r2223, %r2354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2360, %r2336, %r2350, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2364, %r2343, %r2357, %r2322;
	// end inline asm
	shl.b32 	%r2371, %r2364, 4;
	// begin inline asm
	lop3.b32 %r2368, %r2328, %r2360, %r2371, 202;
	// end inline asm
	xor.b32  	%r7878, %r2368, -2004318072;
	// begin inline asm
	mov.b32 %r2375, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2373, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2374, %r2375, %r2373;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2377, %r2231, %r2374;
	// end inline asm
	// begin inline asm
	mov.b32 %r2380, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2381, %r2375, %r2380;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2384, %r2239, %r2381;
	// end inline asm
	// begin inline asm
	mov.b32 %r2387, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2388, %r2375, %r2387;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2391, %r2247, %r2388;
	// end inline asm
	// begin inline asm
	mov.b32 %r2394, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2395, %r2375, %r2394;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2398, %r2255, %r2395;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2401, %r2377, %r2391, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2405, %r2384, %r2398, %r2322;
	// end inline asm
	shl.b32 	%r2412, %r2405, 4;
	// begin inline asm
	lop3.b32 %r2409, %r2328, %r2401, %r2412, 202;
	// end inline asm
	xor.b32  	%r7879, %r2409, -2004318072;
	// begin inline asm
	mov.b32 %r2416, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2414, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2415, %r2416, %r2414;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2418, %r2263, %r2415;
	// end inline asm
	// begin inline asm
	mov.b32 %r2421, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2422, %r2416, %r2421;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2425, %r2271, %r2422;
	// end inline asm
	// begin inline asm
	mov.b32 %r2428, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2429, %r2416, %r2428;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2432, %r2279, %r2429;
	// end inline asm
	// begin inline asm
	mov.b32 %r2435, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2436, %r2416, %r2435;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2439, %r2287, %r2436;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2442, %r2418, %r2432, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2446, %r2425, %r2439, %r2322;
	// end inline asm
	shl.b32 	%r2453, %r2446, 4;
	// begin inline asm
	lop3.b32 %r2450, %r2328, %r2442, %r2453, 202;
	// end inline asm
	xor.b32  	%r7880, %r2450, -2004318072;
	st.shared.u32 	[%rd185], %r7877;
	st.shared.u32 	[%rd186], %r7878;
	st.shared.u32 	[%rd187], %r7879;
	st.shared.u32 	[%rd188], %r7880;
	ld.shared.u32 	%r8033, [%rd130];
	ld.shared.u32 	%r8032, [%rd132];
	ld.shared.u32 	%r8027, [%rd130+64];
	ld.shared.u32 	%r8026, [%rd134];
	// begin inline asm
	mov.b32 %r2459, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2470, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r2458, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r2456, %r661, %r2458, %r2459, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2460, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2461, %r2459, %r2460;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2464, %r2456, %r2461;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2467, %r672, %r2458, %r2470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2471, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2472, %r2470, %r2471;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2475, %r2467, %r2472;
	// end inline asm
	shr.u32 	%r2480, %r2458, 8;
	// begin inline asm
	lop3.b32 %r2478, %r661, %r2480, %r2459, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2482, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2483, %r2459, %r2482;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2486, %r2478, %r2483;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2489, %r672, %r2480, %r2470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2493, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2494, %r2470, %r2493;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2497, %r2489, %r2494;
	// end inline asm
	// begin inline asm
	mov.b32 %r2505, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2516, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r2504, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r2502, %r661, %r2504, %r2505, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2506, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2507, %r2505, %r2506;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2510, %r2502, %r2507;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2513, %r672, %r2504, %r2516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2517, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2518, %r2516, %r2517;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2521, %r2513, %r2518;
	// end inline asm
	shr.u32 	%r2526, %r2504, 8;
	// begin inline asm
	lop3.b32 %r2524, %r661, %r2526, %r2505, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2528, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2529, %r2505, %r2528;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2532, %r2524, %r2529;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2535, %r672, %r2526, %r2516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2539, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2540, %r2516, %r2539;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2543, %r2535, %r2540;
	// end inline asm
	// begin inline asm
	mov.b32 %r2551, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2562, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r2550, %r8027, -2004318072;
	// begin inline asm
	lop3.b32 %r2548, %r661, %r2550, %r2551, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2552, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2553, %r2551, %r2552;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2556, %r2548, %r2553;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2559, %r672, %r2550, %r2562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2563, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2564, %r2562, %r2563;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2567, %r2559, %r2564;
	// end inline asm
	shr.u32 	%r2572, %r2550, 8;
	// begin inline asm
	lop3.b32 %r2570, %r661, %r2572, %r2551, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2574, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2575, %r2551, %r2574;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2578, %r2570, %r2575;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2581, %r672, %r2572, %r2562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2585, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2586, %r2562, %r2585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2589, %r2581, %r2586;
	// end inline asm
	// begin inline asm
	mov.b32 %r2597, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2608, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r2596, %r8026, -2004318072;
	// begin inline asm
	lop3.b32 %r2594, %r661, %r2596, %r2597, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2598, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2599, %r2597, %r2598;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2602, %r2594, %r2599;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2605, %r672, %r2596, %r2608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2609, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2610, %r2608, %r2609;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2613, %r2605, %r2610;
	// end inline asm
	shr.u32 	%r2618, %r2596, 8;
	// begin inline asm
	lop3.b32 %r2616, %r661, %r2618, %r2597, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2620, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2621, %r2597, %r2620;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2624, %r2616, %r2621;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2627, %r672, %r2618, %r2608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2631, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2632, %r2608, %r2631;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2635, %r2627, %r2632;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2638, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2640, %r2638, %r2464;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2643, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2645, %r2643, %r2475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2648, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2650, %r2648, %r2486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2653, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2653, %r2497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2658, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r2658, %r2510;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2663, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2665, %r2663, %r2521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2668, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r2668, %r2532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2673, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2675, %r2673, %r2543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2678, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2680, %r2678, %r2556;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2683, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r2683, %r2567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2688, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2690, %r2688, %r2578;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2693, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r2693, %r2589;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2698, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r2698, %r2602;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2703, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2705, %r2703, %r2613;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2708, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2710, %r2708, %r2624;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2713, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r2713, %r2635;
	// end inline asm
	// begin inline asm
	mov.b32 %r2723, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2734, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2720, %r661, %r1174, %r2723, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2724, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2725, %r2723, %r2724;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2728, %r2720, %r2725;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2731, %r672, %r1174, %r2734, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2735, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2736, %r2734, %r2735;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2739, %r2731, %r2736;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2742, %r661, %r1196, %r2723, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2746, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2747, %r2723, %r2746;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2750, %r2742, %r2747;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2753, %r672, %r1196, %r2734, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2757, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2758, %r2734, %r2757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2761, %r2753, %r2758;
	// end inline asm
	// begin inline asm
	mov.b32 %r2769, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2780, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2766, %r661, %r1220, %r2769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2770, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2771, %r2769, %r2770;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2774, %r2766, %r2771;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2777, %r672, %r1220, %r2780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2781, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2782, %r2780, %r2781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2785, %r2777, %r2782;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2788, %r661, %r1242, %r2769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2792, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2793, %r2769, %r2792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2796, %r2788, %r2793;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2799, %r672, %r1242, %r2780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2803, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2804, %r2780, %r2803;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2807, %r2799, %r2804;
	// end inline asm
	// begin inline asm
	mov.b32 %r2815, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2826, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2812, %r661, %r1266, %r2815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2816, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2817, %r2815, %r2816;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2820, %r2812, %r2817;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2823, %r672, %r1266, %r2826, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2827, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2828, %r2826, %r2827;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2831, %r2823, %r2828;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2834, %r661, %r1288, %r2815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2838, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2839, %r2815, %r2838;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2842, %r2834, %r2839;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2845, %r672, %r1288, %r2826, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2849, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2850, %r2826, %r2849;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2853, %r2845, %r2850;
	// end inline asm
	// begin inline asm
	mov.b32 %r2861, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2872, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2858, %r661, %r1312, %r2861, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2862, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2863, %r2861, %r2862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2866, %r2858, %r2863;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2869, %r672, %r1312, %r2872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2873, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2874, %r2872, %r2873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2877, %r2869, %r2874;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2880, %r661, %r1334, %r2861, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2884, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2885, %r2861, %r2884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2888, %r2880, %r2885;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2891, %r672, %r1334, %r2872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2895, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2896, %r2872, %r2895;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2899, %r2891, %r2896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r225, %r2728, %r2640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r225, %r2739, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r225, %r2750, %r2650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r225, %r2761, %r2655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r225, %r2774, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2922, %r225, %r2785, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2926, %r225, %r2796, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r225, %r2807, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r225, %r2820, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r225, %r2831, %r2685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r225, %r2842, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r225, %r2853, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2950, %r225, %r2866, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r225, %r2877, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r225, %r2888, %r2710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2962, %r225, %r2899, %r2715;
	// end inline asm
	// begin inline asm
	mov.b32 %r2971, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r2982, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2968, %r661, %r1454, %r2971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2972, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2973, %r2971, %r2972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2976, %r2968, %r2973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2979, %r672, %r1454, %r2982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2983, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2984, %r2982, %r2983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2987, %r2979, %r2984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2990, %r661, %r1476, %r2971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2994, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2995, %r2971, %r2994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2998, %r2990, %r2995;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3001, %r672, %r1476, %r2982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3005, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3006, %r2982, %r3005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3009, %r3001, %r3006;
	// end inline asm
	// begin inline asm
	mov.b32 %r3017, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r3028, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3014, %r661, %r1500, %r3017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3018, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3019, %r3017, %r3018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3022, %r3014, %r3019;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3025, %r672, %r1500, %r3028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3029, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3030, %r3028, %r3029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3033, %r3025, %r3030;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3036, %r661, %r1522, %r3017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3040, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3041, %r3017, %r3040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3044, %r3036, %r3041;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3047, %r672, %r1522, %r3028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3051, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3052, %r3028, %r3051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3055, %r3047, %r3052;
	// end inline asm
	// begin inline asm
	mov.b32 %r3063, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r3074, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3060, %r661, %r1546, %r3063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3064, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3065, %r3063, %r3064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3068, %r3060, %r3065;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3071, %r672, %r1546, %r3074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3075, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3076, %r3074, %r3075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3079, %r3071, %r3076;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3082, %r661, %r1568, %r3063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3086, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3087, %r3063, %r3086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3090, %r3082, %r3087;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3093, %r672, %r1568, %r3074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3097, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3098, %r3074, %r3097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3101, %r3093, %r3098;
	// end inline asm
	// begin inline asm
	mov.b32 %r3109, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r3120, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3106, %r661, %r1592, %r3109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3110, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3111, %r3109, %r3110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3114, %r3106, %r3111;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3117, %r672, %r1592, %r3120, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3121, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3122, %r3120, %r3121;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3125, %r3117, %r3122;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3128, %r661, %r1614, %r3109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3132, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3133, %r3109, %r3132;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3136, %r3128, %r3133;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3139, %r672, %r1614, %r3120, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3143, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3144, %r3120, %r3143;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3147, %r3139, %r3144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3150, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r3150, %r2976, %r2902;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3156, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r3156, %r2987, %r2906;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3162, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3164, %r3162, %r2998, %r2910;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3168, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3170, %r3168, %r3009, %r2914;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3174, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r3174, %r3022, %r2918;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3180, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r3180, %r3033, %r2922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3186, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r3186, %r3044, %r2926;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3192, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r3192, %r3055, %r2930;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3198, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3200, %r3198, %r3068, %r2934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3204, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r3204, %r3079, %r2938;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3210, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r3210, %r3090, %r2942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3216, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r3216, %r3101, %r2946;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3222, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r3222, %r3114, %r2950;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3228, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r3228, %r3125, %r2954;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3234, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r3234, %r3136, %r2958;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3240, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3242, %r3240, %r3147, %r2962;
	// end inline asm
	// begin inline asm
	mov.b32 %r3251, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r3262, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3248, %r661, %r662, %r3251, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3252, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3253, %r3251, %r3252;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3256, %r3248, %r3253;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3259, %r672, %r662, %r3262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3263, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3264, %r3262, %r3263;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3267, %r3259, %r3264;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3270, %r661, %r684, %r3251, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3274, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3275, %r3251, %r3274;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3278, %r3270, %r3275;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3281, %r672, %r684, %r3262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3285, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3286, %r3262, %r3285;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3289, %r3281, %r3286;
	// end inline asm
	// begin inline asm
	mov.b32 %r3297, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r3308, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3294, %r661, %r708, %r3297, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3298, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3299, %r3297, %r3298;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3302, %r3294, %r3299;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3305, %r672, %r708, %r3308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3309, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3310, %r3308, %r3309;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3313, %r3305, %r3310;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3316, %r661, %r730, %r3297, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3320, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3321, %r3297, %r3320;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3324, %r3316, %r3321;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3327, %r672, %r730, %r3308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3331, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3332, %r3308, %r3331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3335, %r3327, %r3332;
	// end inline asm
	// begin inline asm
	mov.b32 %r3343, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r3354, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3340, %r661, %r754, %r3343, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3344, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3345, %r3343, %r3344;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3348, %r3340, %r3345;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3351, %r672, %r754, %r3354, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3355, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3356, %r3354, %r3355;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3359, %r3351, %r3356;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3362, %r661, %r776, %r3343, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3366, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3367, %r3343, %r3366;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3370, %r3362, %r3367;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3373, %r672, %r776, %r3354, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3377, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3378, %r3354, %r3377;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3381, %r3373, %r3378;
	// end inline asm
	// begin inline asm
	mov.b32 %r3389, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r3400, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3386, %r661, %r800, %r3389, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3390, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3391, %r3389, %r3390;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3394, %r3386, %r3391;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3397, %r672, %r800, %r3400, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3401, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3402, %r3400, %r3401;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3405, %r3397, %r3402;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3408, %r661, %r822, %r3389, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3412, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3413, %r3389, %r3412;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3416, %r3408, %r3413;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3419, %r672, %r822, %r3400, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3423, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3424, %r3400, %r3423;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3427, %r3419, %r3424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r261, %r3256, %r3152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r261, %r3267, %r3158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r261, %r3278, %r3164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r261, %r3289, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r261, %r3302, %r3176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r261, %r3313, %r3182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r261, %r3324, %r3188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r261, %r3335, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r261, %r3348, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r261, %r3359, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r261, %r3370, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r261, %r3381, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r261, %r3394, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r261, %r3405, %r3230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r261, %r3416, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r261, %r3427, %r3242;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3494, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3496, %r3494, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r307, %r3501, %r3496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3503, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3505, %r3503, %r3507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r307, %r3510, %r3505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3512, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3514, %r3512, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r307, %r3519, %r3514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3521, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3523, %r3521, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r307, %r3528, %r3523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3530, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3532, %r3530, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r307, %r3537, %r3532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3539, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3541, %r3539, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r307, %r3546, %r3541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3548, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r3548, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r307, %r3555, %r3550;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3557, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3559, %r3557, %r3561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3562, %r307, %r3564, %r3559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3566, %r310, %r3501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3569, %r307, %r3498, %r3566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3573, %r310, %r3510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3576, %r307, %r3507, %r3573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3580, %r310, %r3519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3583, %r307, %r3516, %r3580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3587, %r310, %r3528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3590, %r307, %r3525, %r3587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3594, %r310, %r3537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3597, %r307, %r3534, %r3594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3601, %r310, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3604, %r307, %r3543, %r3601;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3608, %r310, %r3555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3611, %r307, %r3552, %r3608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3615, %r310, %r3564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3618, %r307, %r3561, %r3615;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3709, %r3706}, {%r354, %r360, %r357, %r363}, {%r3499, %r3569}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3718, %r3715}, {%r354, %r360, %r357, %r363}, {%r3508, %r3576}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3727, %r3724}, {%r354, %r360, %r357, %r363}, {%r3517, %r3583}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3736, %r3733}, {%r354, %r360, %r357, %r363}, {%r3526, %r3590}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3745, %r3742}, {%r354, %r360, %r357, %r363}, {%r3535, %r3597}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3754, %r3751}, {%r354, %r360, %r357, %r363}, {%r3544, %r3604}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3763, %r3760}, {%r354, %r360, %r357, %r363}, {%r3553, %r3611}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3772, %r3769}, {%r354, %r360, %r357, %r363}, {%r3562, %r3618}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3702, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3704, %r3702, %r3706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3707, %r398, %r3709, %r3704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3711, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3713, %r3711, %r3715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3716, %r398, %r3718, %r3713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3720, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3722, %r3720, %r3724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3725, %r398, %r3727, %r3722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3729, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3731, %r3729, %r3733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3734, %r398, %r3736, %r3731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3738, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3740, %r3738, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3743, %r398, %r3745, %r3740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3747, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3749, %r3747, %r3751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3752, %r398, %r3754, %r3749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3756, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3758, %r3756, %r3760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r398, %r3763, %r3758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3765, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3767, %r3765, %r3769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3770, %r398, %r3772, %r3767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3774, %r401, %r3709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3777, %r398, %r3706, %r3774;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3781, %r401, %r3718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3784, %r398, %r3715, %r3781;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3788, %r401, %r3727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3791, %r398, %r3724, %r3788;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3795, %r401, %r3736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3798, %r398, %r3733, %r3795;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3802, %r401, %r3745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3805, %r398, %r3742, %r3802;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3809, %r401, %r3754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3812, %r398, %r3751, %r3809;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3816, %r401, %r3763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3819, %r398, %r3760, %r3816;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3823, %r401, %r3772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3826, %r398, %r3769, %r3823;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3830, %r3831}, {%r432, %r438, %r435, %r441}, {%r3707, %r3777}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3840, %r3841}, {%r432, %r438, %r435, %r441}, {%r3716, %r3784}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3850, %r3851}, {%r432, %r438, %r435, %r441}, {%r3725, %r3791}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3860, %r3861}, {%r432, %r438, %r435, %r441}, {%r3734, %r3798}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3870, %r3871}, {%r432, %r438, %r435, %r441}, {%r3743, %r3805}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3880, %r3881}, {%r432, %r438, %r435, %r441}, {%r3752, %r3812}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3890, %r3891}, {%r432, %r438, %r435, %r441}, {%r3761, %r3819}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3900, %r3901}, {%r432, %r438, %r435, %r441}, {%r3770, %r3826}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3910, %r117, %r3830;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3913, %r117, %r3831;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3916, %r117, %r3840;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3919, %r117, %r3841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3922, %r117, %r3850;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r117, %r3851;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3928, %r117, %r3860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3931, %r117, %r3861;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3934, %r117, %r3870;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3937, %r117, %r3871;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3940, %r117, %r3880;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3943, %r117, %r3881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3946, %r117, %r3890;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3949, %r117, %r3891;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3952, %r117, %r3900;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3955, %r117, %r3901;
	// end inline asm
	// begin inline asm
	mov.b32 %r3958, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r3959, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3960, %r3910, %r3958;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3963, %r3960, %r3959;
	// end inline asm
	// begin inline asm
	mov.b32 %r3966, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r3967, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3968, %r3913, %r3966;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3971, %r3968, %r3967;
	// end inline asm
	// begin inline asm
	mov.b32 %r3974, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r3975, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3976, %r3916, %r3974;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3979, %r3976, %r3975;
	// end inline asm
	// begin inline asm
	mov.b32 %r3982, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r3983, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3984, %r3919, %r3982;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3987, %r3984, %r3983;
	// end inline asm
	// begin inline asm
	mov.b32 %r3990, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r3991, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3992, %r3922, %r3990;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3995, %r3992, %r3991;
	// end inline asm
	// begin inline asm
	mov.b32 %r3998, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r3999, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4000, %r3925, %r3998;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4003, %r4000, %r3999;
	// end inline asm
	// begin inline asm
	mov.b32 %r4006, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4007, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4008, %r3928, %r4006;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4011, %r4008, %r4007;
	// end inline asm
	// begin inline asm
	mov.b32 %r4014, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4015, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4016, %r3931, %r4014;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4019, %r4016, %r4015;
	// end inline asm
	// begin inline asm
	mov.b32 %r4022, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4023, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4024, %r3934, %r4022;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4027, %r4024, %r4023;
	// end inline asm
	// begin inline asm
	mov.b32 %r4030, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4031, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4032, %r3937, %r4030;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4035, %r4032, %r4031;
	// end inline asm
	// begin inline asm
	mov.b32 %r4038, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4039, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4040, %r3940, %r4038;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4043, %r4040, %r4039;
	// end inline asm
	// begin inline asm
	mov.b32 %r4046, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4047, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4048, %r3943, %r4046;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4051, %r4048, %r4047;
	// end inline asm
	// begin inline asm
	mov.b32 %r4054, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4055, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4056, %r3946, %r4054;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4059, %r4056, %r4055;
	// end inline asm
	// begin inline asm
	mov.b32 %r4062, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4063, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4064, %r3949, %r4062;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4067, %r4064, %r4063;
	// end inline asm
	// begin inline asm
	mov.b32 %r4070, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4071, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4072, %r3952, %r4070;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4075, %r4072, %r4071;
	// end inline asm
	// begin inline asm
	mov.b32 %r4078, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r4079, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4080, %r3955, %r4078;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4083, %r4080, %r4079;
	// end inline asm
	// begin inline asm
	mov.b32 %r4089, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4087, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4088, %r4089, %r4087;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4091, %r3963, %r4088;
	// end inline asm
	// begin inline asm
	mov.b32 %r4094, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4095, %r4089, %r4094;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4098, %r3971, %r4095;
	// end inline asm
	// begin inline asm
	mov.b32 %r4101, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4102, %r4089, %r4101;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4105, %r3979, %r4102;
	// end inline asm
	// begin inline asm
	mov.b32 %r4108, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4109, %r4089, %r4108;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4112, %r3987, %r4109;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4115, %r4091, %r4105, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4119, %r4098, %r4112, %r2322;
	// end inline asm
	shl.b32 	%r4126, %r4119, 4;
	// begin inline asm
	lop3.b32 %r4123, %r2328, %r4115, %r4126, 202;
	// end inline asm
	xor.b32  	%r7881, %r4123, -2004318072;
	// begin inline asm
	mov.b32 %r4130, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4128, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4129, %r4130, %r4128;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4132, %r3995, %r4129;
	// end inline asm
	// begin inline asm
	mov.b32 %r4135, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4136, %r4130, %r4135;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4139, %r4003, %r4136;
	// end inline asm
	// begin inline asm
	mov.b32 %r4142, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4143, %r4130, %r4142;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4146, %r4011, %r4143;
	// end inline asm
	// begin inline asm
	mov.b32 %r4149, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4150, %r4130, %r4149;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4153, %r4019, %r4150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4156, %r4132, %r4146, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4160, %r4139, %r4153, %r2322;
	// end inline asm
	shl.b32 	%r4167, %r4160, 4;
	// begin inline asm
	lop3.b32 %r4164, %r2328, %r4156, %r4167, 202;
	// end inline asm
	xor.b32  	%r7882, %r4164, -2004318072;
	// begin inline asm
	mov.b32 %r4171, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4169, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4170, %r4171, %r4169;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4173, %r4027, %r4170;
	// end inline asm
	// begin inline asm
	mov.b32 %r4176, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4177, %r4171, %r4176;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4180, %r4035, %r4177;
	// end inline asm
	// begin inline asm
	mov.b32 %r4183, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4184, %r4171, %r4183;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4187, %r4043, %r4184;
	// end inline asm
	// begin inline asm
	mov.b32 %r4190, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4191, %r4171, %r4190;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4194, %r4051, %r4191;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4197, %r4173, %r4187, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4201, %r4180, %r4194, %r2322;
	// end inline asm
	shl.b32 	%r4208, %r4201, 4;
	// begin inline asm
	lop3.b32 %r4205, %r2328, %r4197, %r4208, 202;
	// end inline asm
	xor.b32  	%r7883, %r4205, -2004318072;
	// begin inline asm
	mov.b32 %r4212, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4210, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4211, %r4212, %r4210;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4214, %r4059, %r4211;
	// end inline asm
	// begin inline asm
	mov.b32 %r4217, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4218, %r4212, %r4217;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4221, %r4067, %r4218;
	// end inline asm
	// begin inline asm
	mov.b32 %r4224, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4225, %r4212, %r4224;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4228, %r4075, %r4225;
	// end inline asm
	// begin inline asm
	mov.b32 %r4231, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4232, %r4212, %r4231;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4235, %r4083, %r4232;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4238, %r4214, %r4228, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4242, %r4221, %r4235, %r2322;
	// end inline asm
	shl.b32 	%r4249, %r4242, 4;
	// begin inline asm
	lop3.b32 %r4246, %r2328, %r4238, %r4249, 202;
	// end inline asm
	xor.b32  	%r7884, %r4246, -2004318072;
	st.shared.u32 	[%rd185], %r7881;
	st.shared.u32 	[%rd186], %r7882;
	st.shared.u32 	[%rd187], %r7883;
	st.shared.u32 	[%rd188], %r7884;
	ld.shared.u32 	%r8031, [%rd130];
	ld.shared.u32 	%r8030, [%rd132];
	ld.shared.u32 	%r8025, [%rd130+64];
	ld.shared.u32 	%r8024, [%rd134];
	// begin inline asm
	mov.b32 %r4255, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4266, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r4254, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r4252, %r661, %r4254, %r4255, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4256, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4257, %r4255, %r4256;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4260, %r4252, %r4257;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4263, %r672, %r4254, %r4266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4267, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4268, %r4266, %r4267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4271, %r4263, %r4268;
	// end inline asm
	shr.u32 	%r4276, %r4254, 8;
	// begin inline asm
	lop3.b32 %r4274, %r661, %r4276, %r4255, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4278, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4279, %r4255, %r4278;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4282, %r4274, %r4279;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4285, %r672, %r4276, %r4266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4289, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4290, %r4266, %r4289;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4293, %r4285, %r4290;
	// end inline asm
	// begin inline asm
	mov.b32 %r4301, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4312, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r4300, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r4298, %r661, %r4300, %r4301, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4302, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4303, %r4301, %r4302;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4306, %r4298, %r4303;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4309, %r672, %r4300, %r4312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4313, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4314, %r4312, %r4313;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4317, %r4309, %r4314;
	// end inline asm
	shr.u32 	%r4322, %r4300, 8;
	// begin inline asm
	lop3.b32 %r4320, %r661, %r4322, %r4301, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4324, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4325, %r4301, %r4324;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4328, %r4320, %r4325;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4331, %r672, %r4322, %r4312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4335, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4336, %r4312, %r4335;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4339, %r4331, %r4336;
	// end inline asm
	// begin inline asm
	mov.b32 %r4347, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4358, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r4346, %r8025, -2004318072;
	// begin inline asm
	lop3.b32 %r4344, %r661, %r4346, %r4347, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4348, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4349, %r4347, %r4348;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4352, %r4344, %r4349;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4355, %r672, %r4346, %r4358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4359, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4360, %r4358, %r4359;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4363, %r4355, %r4360;
	// end inline asm
	shr.u32 	%r4368, %r4346, 8;
	// begin inline asm
	lop3.b32 %r4366, %r661, %r4368, %r4347, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4370, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4371, %r4347, %r4370;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4374, %r4366, %r4371;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4377, %r672, %r4368, %r4358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4381, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4382, %r4358, %r4381;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4385, %r4377, %r4382;
	// end inline asm
	// begin inline asm
	mov.b32 %r4393, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4404, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r4392, %r8024, -2004318072;
	// begin inline asm
	lop3.b32 %r4390, %r661, %r4392, %r4393, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4394, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4395, %r4393, %r4394;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4398, %r4390, %r4395;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4401, %r672, %r4392, %r4404, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4405, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4406, %r4404, %r4405;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4409, %r4401, %r4406;
	// end inline asm
	shr.u32 	%r4414, %r4392, 8;
	// begin inline asm
	lop3.b32 %r4412, %r661, %r4414, %r4393, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4416, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4417, %r4393, %r4416;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4420, %r4412, %r4417;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4423, %r672, %r4414, %r4404, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4427, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4428, %r4404, %r4427;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4431, %r4423, %r4428;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4434, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4436, %r4434, %r4260;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4439, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4441, %r4439, %r4271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4444, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4446, %r4444, %r4282;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4449, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4451, %r4449, %r4293;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4454, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4456, %r4454, %r4306;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4459, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4461, %r4459, %r4317;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4464, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4466, %r4464, %r4328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4469, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4471, %r4469, %r4339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4474, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4476, %r4474, %r4352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4479, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4481, %r4479, %r4363;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4484, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4486, %r4484, %r4374;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4489, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4491, %r4489, %r4385;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4494, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4496, %r4494, %r4398;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4499, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4501, %r4499, %r4409;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4504, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4506, %r4504, %r4420;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4509, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4511, %r4509, %r4431;
	// end inline asm
	// begin inline asm
	mov.b32 %r4519, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4530, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4516, %r661, %r1454, %r4519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4520, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4521, %r4519, %r4520;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4524, %r4516, %r4521;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4527, %r672, %r1454, %r4530, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4531, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4532, %r4530, %r4531;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4535, %r4527, %r4532;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4538, %r661, %r1476, %r4519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4542, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4543, %r4519, %r4542;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4546, %r4538, %r4543;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4549, %r672, %r1476, %r4530, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4553, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4554, %r4530, %r4553;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4557, %r4549, %r4554;
	// end inline asm
	// begin inline asm
	mov.b32 %r4565, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4576, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4562, %r661, %r1500, %r4565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4566, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4567, %r4565, %r4566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4570, %r4562, %r4567;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4573, %r672, %r1500, %r4576, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4577, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4578, %r4576, %r4577;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4581, %r4573, %r4578;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4584, %r661, %r1522, %r4565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4588, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4589, %r4565, %r4588;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4592, %r4584, %r4589;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4595, %r672, %r1522, %r4576, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4599, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4600, %r4576, %r4599;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4603, %r4595, %r4600;
	// end inline asm
	// begin inline asm
	mov.b32 %r4611, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4622, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4608, %r661, %r1546, %r4611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4612, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4613, %r4611, %r4612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4616, %r4608, %r4613;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4619, %r672, %r1546, %r4622, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4623, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4624, %r4622, %r4623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4627, %r4619, %r4624;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4630, %r661, %r1568, %r4611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4634, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4635, %r4611, %r4634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4638, %r4630, %r4635;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4641, %r672, %r1568, %r4622, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4645, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4646, %r4622, %r4645;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4649, %r4641, %r4646;
	// end inline asm
	// begin inline asm
	mov.b32 %r4657, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4668, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4654, %r661, %r1592, %r4657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4658, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4659, %r4657, %r4658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4662, %r4654, %r4659;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4665, %r672, %r1592, %r4668, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4669, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4670, %r4668, %r4669;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4673, %r4665, %r4670;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4676, %r661, %r1614, %r4657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4680, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4681, %r4657, %r4680;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4684, %r4676, %r4681;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4687, %r672, %r1614, %r4668, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4691, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4692, %r4668, %r4691;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4695, %r4687, %r4692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4698, %r225, %r4524, %r4436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4702, %r225, %r4535, %r4441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4706, %r225, %r4546, %r4446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4710, %r225, %r4557, %r4451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4714, %r225, %r4570, %r4456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4718, %r225, %r4581, %r4461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4722, %r225, %r4592, %r4466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4726, %r225, %r4603, %r4471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4730, %r225, %r4616, %r4476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4734, %r225, %r4627, %r4481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4738, %r225, %r4638, %r4486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4742, %r225, %r4649, %r4491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4746, %r225, %r4662, %r4496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4750, %r225, %r4673, %r4501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4754, %r225, %r4684, %r4506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4758, %r225, %r4695, %r4511;
	// end inline asm
	// begin inline asm
	mov.b32 %r4767, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4778, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4764, %r661, %r662, %r4767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4768, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4769, %r4767, %r4768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4772, %r4764, %r4769;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4775, %r672, %r662, %r4778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4779, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4780, %r4778, %r4779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4783, %r4775, %r4780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4786, %r661, %r684, %r4767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4790, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4791, %r4767, %r4790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4794, %r4786, %r4791;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4797, %r672, %r684, %r4778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4801, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4802, %r4778, %r4801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4805, %r4797, %r4802;
	// end inline asm
	// begin inline asm
	mov.b32 %r4813, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4824, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4810, %r661, %r708, %r4813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4814, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4815, %r4813, %r4814;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4818, %r4810, %r4815;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4821, %r672, %r708, %r4824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4825, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4826, %r4824, %r4825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4829, %r4821, %r4826;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4832, %r661, %r730, %r4813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4836, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4837, %r4813, %r4836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4840, %r4832, %r4837;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4843, %r672, %r730, %r4824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4847, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4848, %r4824, %r4847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4851, %r4843, %r4848;
	// end inline asm
	// begin inline asm
	mov.b32 %r4859, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4870, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4856, %r661, %r754, %r4859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4860, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4861, %r4859, %r4860;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4864, %r4856, %r4861;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4867, %r672, %r754, %r4870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4871, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4872, %r4870, %r4871;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4875, %r4867, %r4872;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4878, %r661, %r776, %r4859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4882, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4883, %r4859, %r4882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4886, %r4878, %r4883;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4889, %r672, %r776, %r4870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4893, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4894, %r4870, %r4893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4897, %r4889, %r4894;
	// end inline asm
	// begin inline asm
	mov.b32 %r4905, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r4916, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4902, %r661, %r800, %r4905, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4906, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4907, %r4905, %r4906;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4910, %r4902, %r4907;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4913, %r672, %r800, %r4916, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4917, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4918, %r4916, %r4917;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4921, %r4913, %r4918;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4924, %r661, %r822, %r4905, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4928, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4929, %r4905, %r4928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4932, %r4924, %r4929;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4935, %r672, %r822, %r4916, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4939, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4940, %r4916, %r4939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4943, %r4935, %r4940;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4946, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4948, %r4946, %r4772, %r4698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4952, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4954, %r4952, %r4783, %r4702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4958, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4960, %r4958, %r4794, %r4706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4964, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4966, %r4964, %r4805, %r4710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4970, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4972, %r4970, %r4818, %r4714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4976, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4978, %r4976, %r4829, %r4718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4982, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4984, %r4982, %r4840, %r4722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4988, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4990, %r4988, %r4851, %r4726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4994, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4996, %r4994, %r4864, %r4730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5000, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5002, %r5000, %r4875, %r4734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5006, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5008, %r5006, %r4886, %r4738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5012, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5014, %r5012, %r4897, %r4742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5018, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5020, %r5018, %r4910, %r4746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5024, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5026, %r5024, %r4921, %r4750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5030, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5032, %r5030, %r4932, %r4754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5036, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5038, %r5036, %r4943, %r4758;
	// end inline asm
	// begin inline asm
	mov.b32 %r5047, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r5058, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5044, %r661, %r2458, %r5047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5048, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5049, %r5047, %r5048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5052, %r5044, %r5049;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5055, %r672, %r2458, %r5058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5059, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5060, %r5058, %r5059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5063, %r5055, %r5060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5066, %r661, %r2480, %r5047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5070, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5071, %r5047, %r5070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5074, %r5066, %r5071;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5077, %r672, %r2480, %r5058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5081, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5082, %r5058, %r5081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5085, %r5077, %r5082;
	// end inline asm
	// begin inline asm
	mov.b32 %r5093, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r5104, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5090, %r661, %r2504, %r5093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5094, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5095, %r5093, %r5094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5098, %r5090, %r5095;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5101, %r672, %r2504, %r5104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5105, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5106, %r5104, %r5105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5109, %r5101, %r5106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5112, %r661, %r2526, %r5093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5116, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5117, %r5093, %r5116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5120, %r5112, %r5117;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5123, %r672, %r2526, %r5104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5127, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5128, %r5104, %r5127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5131, %r5123, %r5128;
	// end inline asm
	// begin inline asm
	mov.b32 %r5139, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r5150, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5136, %r661, %r2550, %r5139, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5140, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5141, %r5139, %r5140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5144, %r5136, %r5141;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5147, %r672, %r2550, %r5150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5151, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5152, %r5150, %r5151;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5155, %r5147, %r5152;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5158, %r661, %r2572, %r5139, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5162, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5163, %r5139, %r5162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5166, %r5158, %r5163;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5169, %r672, %r2572, %r5150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5173, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5174, %r5150, %r5173;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5177, %r5169, %r5174;
	// end inline asm
	// begin inline asm
	mov.b32 %r5185, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r5196, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5182, %r661, %r2596, %r5185, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5186, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5187, %r5185, %r5186;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5190, %r5182, %r5187;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5193, %r672, %r2596, %r5196, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5197, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5198, %r5196, %r5197;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5201, %r5193, %r5198;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5204, %r661, %r2618, %r5185, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5208, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5209, %r5185, %r5208;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5212, %r5204, %r5209;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5215, %r672, %r2618, %r5196, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5219, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5220, %r5196, %r5219;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5223, %r5215, %r5220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5297, %r261, %r5052, %r4948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5294, %r261, %r5063, %r4954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5306, %r261, %r5074, %r4960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5303, %r261, %r5085, %r4966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5315, %r261, %r5098, %r4972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r261, %r5109, %r4978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5324, %r261, %r5120, %r4984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r261, %r5131, %r4990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5333, %r261, %r5144, %r4996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r261, %r5155, %r5002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r261, %r5166, %r5008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r261, %r5177, %r5014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5351, %r261, %r5190, %r5020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5348, %r261, %r5201, %r5026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5360, %r261, %r5212, %r5032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5357, %r261, %r5223, %r5038;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5290, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5292, %r5290, %r5294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5295, %r307, %r5297, %r5292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5299, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5301, %r5299, %r5303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5304, %r307, %r5306, %r5301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5308, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5310, %r5308, %r5312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5313, %r307, %r5315, %r5310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5317, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5319, %r5317, %r5321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5322, %r307, %r5324, %r5319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5326, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5328, %r5326, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5331, %r307, %r5333, %r5328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5335, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5337, %r5335, %r5339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5340, %r307, %r5342, %r5337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5344, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5346, %r5344, %r5348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5349, %r307, %r5351, %r5346;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5353, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5355, %r5353, %r5357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5358, %r307, %r5360, %r5355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5362, %r310, %r5297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5365, %r307, %r5294, %r5362;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5369, %r310, %r5306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5372, %r307, %r5303, %r5369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5376, %r310, %r5315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5379, %r307, %r5312, %r5376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5383, %r310, %r5324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5386, %r307, %r5321, %r5383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5390, %r310, %r5333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5393, %r307, %r5330, %r5390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5397, %r310, %r5342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5400, %r307, %r5339, %r5397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5404, %r310, %r5351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5407, %r307, %r5348, %r5404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5411, %r310, %r5360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5414, %r307, %r5357, %r5411;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5505, %r5502}, {%r354, %r360, %r357, %r363}, {%r5295, %r5365}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5514, %r5511}, {%r354, %r360, %r357, %r363}, {%r5304, %r5372}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5523, %r5520}, {%r354, %r360, %r357, %r363}, {%r5313, %r5379}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5532, %r5529}, {%r354, %r360, %r357, %r363}, {%r5322, %r5386}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5541, %r5538}, {%r354, %r360, %r357, %r363}, {%r5331, %r5393}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5550, %r5547}, {%r354, %r360, %r357, %r363}, {%r5340, %r5400}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5559, %r5556}, {%r354, %r360, %r357, %r363}, {%r5349, %r5407}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5568, %r5565}, {%r354, %r360, %r357, %r363}, {%r5358, %r5414}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5498, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5500, %r5498, %r5502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5503, %r398, %r5505, %r5500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5507, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5509, %r5507, %r5511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5512, %r398, %r5514, %r5509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5516, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5518, %r5516, %r5520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5521, %r398, %r5523, %r5518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5525, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5527, %r5525, %r5529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5530, %r398, %r5532, %r5527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5534, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5536, %r5534, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5539, %r398, %r5541, %r5536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5543, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5545, %r5543, %r5547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5548, %r398, %r5550, %r5545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5552, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5554, %r5552, %r5556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5557, %r398, %r5559, %r5554;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5561, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5563, %r5561, %r5565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5566, %r398, %r5568, %r5563;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5570, %r401, %r5505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5573, %r398, %r5502, %r5570;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5577, %r401, %r5514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5580, %r398, %r5511, %r5577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5584, %r401, %r5523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5587, %r398, %r5520, %r5584;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5591, %r401, %r5532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5594, %r398, %r5529, %r5591;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5598, %r401, %r5541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5601, %r398, %r5538, %r5598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5605, %r401, %r5550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5608, %r398, %r5547, %r5605;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5612, %r401, %r5559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5615, %r398, %r5556, %r5612;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5619, %r401, %r5568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5622, %r398, %r5565, %r5619;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5626, %r5627}, {%r432, %r438, %r435, %r441}, {%r5503, %r5573}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5636, %r5637}, {%r432, %r438, %r435, %r441}, {%r5512, %r5580}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5646, %r5647}, {%r432, %r438, %r435, %r441}, {%r5521, %r5587}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5656, %r5657}, {%r432, %r438, %r435, %r441}, {%r5530, %r5594}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5666, %r5667}, {%r432, %r438, %r435, %r441}, {%r5539, %r5601}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5676, %r5677}, {%r432, %r438, %r435, %r441}, {%r5548, %r5608}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5686, %r5687}, {%r432, %r438, %r435, %r441}, {%r5557, %r5615}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5696, %r5697}, {%r432, %r438, %r435, %r441}, {%r5566, %r5622}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5706, %r117, %r5626;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5709, %r117, %r5627;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5712, %r117, %r5636;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5715, %r117, %r5637;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5718, %r117, %r5646;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r117, %r5647;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5724, %r117, %r5656;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5727, %r117, %r5657;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5730, %r117, %r5666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5733, %r117, %r5667;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5736, %r117, %r5676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5739, %r117, %r5677;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5742, %r117, %r5686;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5745, %r117, %r5687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5748, %r117, %r5696;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5751, %r117, %r5697;
	// end inline asm
	// begin inline asm
	mov.b32 %r5754, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5755, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5756, %r5706, %r5754;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5759, %r5756, %r5755;
	// end inline asm
	// begin inline asm
	mov.b32 %r5762, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5763, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5764, %r5709, %r5762;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5767, %r5764, %r5763;
	// end inline asm
	// begin inline asm
	mov.b32 %r5770, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5771, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5772, %r5712, %r5770;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5775, %r5772, %r5771;
	// end inline asm
	// begin inline asm
	mov.b32 %r5778, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5779, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5780, %r5715, %r5778;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5783, %r5780, %r5779;
	// end inline asm
	// begin inline asm
	mov.b32 %r5786, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5787, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5788, %r5718, %r5786;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5791, %r5788, %r5787;
	// end inline asm
	// begin inline asm
	mov.b32 %r5794, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5795, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5796, %r5721, %r5794;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5799, %r5796, %r5795;
	// end inline asm
	// begin inline asm
	mov.b32 %r5802, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5803, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5804, %r5724, %r5802;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5807, %r5804, %r5803;
	// end inline asm
	// begin inline asm
	mov.b32 %r5810, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5811, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5812, %r5727, %r5810;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5815, %r5812, %r5811;
	// end inline asm
	// begin inline asm
	mov.b32 %r5818, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5819, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5820, %r5730, %r5818;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5823, %r5820, %r5819;
	// end inline asm
	// begin inline asm
	mov.b32 %r5826, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5827, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5828, %r5733, %r5826;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5831, %r5828, %r5827;
	// end inline asm
	// begin inline asm
	mov.b32 %r5834, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5835, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5836, %r5736, %r5834;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5839, %r5836, %r5835;
	// end inline asm
	// begin inline asm
	mov.b32 %r5842, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5843, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5844, %r5739, %r5842;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5847, %r5844, %r5843;
	// end inline asm
	// begin inline asm
	mov.b32 %r5850, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5851, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5852, %r5742, %r5850;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5855, %r5852, %r5851;
	// end inline asm
	// begin inline asm
	mov.b32 %r5858, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5859, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5860, %r5745, %r5858;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5863, %r5860, %r5859;
	// end inline asm
	// begin inline asm
	mov.b32 %r5866, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5867, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5868, %r5748, %r5866;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5871, %r5868, %r5867;
	// end inline asm
	// begin inline asm
	mov.b32 %r5874, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r5875, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5876, %r5751, %r5874;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5879, %r5876, %r5875;
	// end inline asm
	// begin inline asm
	mov.b32 %r5885, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r5883, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5884, %r5885, %r5883;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5887, %r5759, %r5884;
	// end inline asm
	// begin inline asm
	mov.b32 %r5890, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5891, %r5885, %r5890;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5894, %r5767, %r5891;
	// end inline asm
	// begin inline asm
	mov.b32 %r5897, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5898, %r5885, %r5897;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5901, %r5775, %r5898;
	// end inline asm
	// begin inline asm
	mov.b32 %r5904, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5905, %r5885, %r5904;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5908, %r5783, %r5905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5911, %r5887, %r5901, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5915, %r5894, %r5908, %r2322;
	// end inline asm
	shl.b32 	%r5922, %r5915, 4;
	// begin inline asm
	lop3.b32 %r5919, %r2328, %r5911, %r5922, 202;
	// end inline asm
	xor.b32  	%r7885, %r5919, -2004318072;
	// begin inline asm
	mov.b32 %r5926, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r5924, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5925, %r5926, %r5924;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5928, %r5791, %r5925;
	// end inline asm
	// begin inline asm
	mov.b32 %r5931, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5932, %r5926, %r5931;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5935, %r5799, %r5932;
	// end inline asm
	// begin inline asm
	mov.b32 %r5938, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5939, %r5926, %r5938;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5942, %r5807, %r5939;
	// end inline asm
	// begin inline asm
	mov.b32 %r5945, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5946, %r5926, %r5945;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5949, %r5815, %r5946;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5952, %r5928, %r5942, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5956, %r5935, %r5949, %r2322;
	// end inline asm
	shl.b32 	%r5963, %r5956, 4;
	// begin inline asm
	lop3.b32 %r5960, %r2328, %r5952, %r5963, 202;
	// end inline asm
	xor.b32  	%r7886, %r5960, -2004318072;
	// begin inline asm
	mov.b32 %r5967, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r5965, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5966, %r5967, %r5965;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5969, %r5823, %r5966;
	// end inline asm
	// begin inline asm
	mov.b32 %r5972, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5973, %r5967, %r5972;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5976, %r5831, %r5973;
	// end inline asm
	// begin inline asm
	mov.b32 %r5979, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5980, %r5967, %r5979;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5983, %r5839, %r5980;
	// end inline asm
	// begin inline asm
	mov.b32 %r5986, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5987, %r5967, %r5986;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5990, %r5847, %r5987;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5993, %r5969, %r5983, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5997, %r5976, %r5990, %r2322;
	// end inline asm
	shl.b32 	%r6004, %r5997, 4;
	// begin inline asm
	lop3.b32 %r6001, %r2328, %r5993, %r6004, 202;
	// end inline asm
	xor.b32  	%r7887, %r6001, -2004318072;
	// begin inline asm
	mov.b32 %r6008, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6006, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6007, %r6008, %r6006;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6010, %r5855, %r6007;
	// end inline asm
	// begin inline asm
	mov.b32 %r6013, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6014, %r6008, %r6013;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6017, %r5863, %r6014;
	// end inline asm
	// begin inline asm
	mov.b32 %r6020, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6021, %r6008, %r6020;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6024, %r5871, %r6021;
	// end inline asm
	// begin inline asm
	mov.b32 %r6027, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6028, %r6008, %r6027;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6031, %r5879, %r6028;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6034, %r6010, %r6024, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6038, %r6017, %r6031, %r2322;
	// end inline asm
	shl.b32 	%r6045, %r6038, 4;
	// begin inline asm
	lop3.b32 %r6042, %r2328, %r6034, %r6045, 202;
	// end inline asm
	xor.b32  	%r7888, %r6042, -2004318072;
	st.shared.u32 	[%rd185], %r7885;
	st.shared.u32 	[%rd186], %r7886;
	st.shared.u32 	[%rd187], %r7887;
	st.shared.u32 	[%rd188], %r7888;
	ld.shared.u32 	%r8029, [%rd130];
	ld.shared.u32 	%r8028, [%rd132];
	ld.shared.u32 	%r8023, [%rd130+64];
	ld.shared.u32 	%r8022, [%rd134];
	// begin inline asm
	mov.b32 %r6051, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6062, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r6050, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r6048, %r661, %r6050, %r6051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6052, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6053, %r6051, %r6052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6056, %r6048, %r6053;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6059, %r672, %r6050, %r6062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6063, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6064, %r6062, %r6063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6067, %r6059, %r6064;
	// end inline asm
	shr.u32 	%r6072, %r6050, 8;
	// begin inline asm
	lop3.b32 %r6070, %r661, %r6072, %r6051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6074, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6075, %r6051, %r6074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6078, %r6070, %r6075;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6081, %r672, %r6072, %r6062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6085, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6086, %r6062, %r6085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6089, %r6081, %r6086;
	// end inline asm
	// begin inline asm
	mov.b32 %r6097, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6108, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r6096, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r6094, %r661, %r6096, %r6097, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6098, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6099, %r6097, %r6098;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6102, %r6094, %r6099;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6105, %r672, %r6096, %r6108, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6109, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6110, %r6108, %r6109;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6113, %r6105, %r6110;
	// end inline asm
	shr.u32 	%r6118, %r6096, 8;
	// begin inline asm
	lop3.b32 %r6116, %r661, %r6118, %r6097, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6120, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6121, %r6097, %r6120;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6124, %r6116, %r6121;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6127, %r672, %r6118, %r6108, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6131, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6132, %r6108, %r6131;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6135, %r6127, %r6132;
	// end inline asm
	// begin inline asm
	mov.b32 %r6143, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6154, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r6142, %r8023, -2004318072;
	// begin inline asm
	lop3.b32 %r6140, %r661, %r6142, %r6143, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6144, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6145, %r6143, %r6144;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6148, %r6140, %r6145;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6151, %r672, %r6142, %r6154, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6155, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6156, %r6154, %r6155;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6159, %r6151, %r6156;
	// end inline asm
	shr.u32 	%r6164, %r6142, 8;
	// begin inline asm
	lop3.b32 %r6162, %r661, %r6164, %r6143, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6166, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6167, %r6143, %r6166;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6170, %r6162, %r6167;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6173, %r672, %r6164, %r6154, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6177, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6178, %r6154, %r6177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6181, %r6173, %r6178;
	// end inline asm
	// begin inline asm
	mov.b32 %r6189, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6200, {%rs1077, %rs1077};
	// end inline asm
	xor.b32  	%r6188, %r8022, -2004318072;
	// begin inline asm
	lop3.b32 %r6186, %r661, %r6188, %r6189, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6190, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6191, %r6189, %r6190;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6194, %r6186, %r6191;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6197, %r672, %r6188, %r6200, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6201, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6202, %r6200, %r6201;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6205, %r6197, %r6202;
	// end inline asm
	shr.u32 	%r6210, %r6188, 8;
	// begin inline asm
	lop3.b32 %r6208, %r661, %r6210, %r6189, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6212, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6213, %r6189, %r6212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6216, %r6208, %r6213;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6219, %r672, %r6210, %r6200, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6223, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6224, %r6200, %r6223;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6227, %r6219, %r6224;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6230, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6232, %r6230, %r6056;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6235, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6237, %r6235, %r6067;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6240, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6242, %r6240, %r6078;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6245, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6247, %r6245, %r6089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6250, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6252, %r6250, %r6102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6255, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6257, %r6255, %r6113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6260, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6262, %r6260, %r6124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6265, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6267, %r6265, %r6135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6270, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6272, %r6270, %r6148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6275, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6277, %r6275, %r6159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6280, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6282, %r6280, %r6170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6285, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6287, %r6285, %r6181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6290, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6292, %r6290, %r6194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6295, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6297, %r6295, %r6205;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6300, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6302, %r6300, %r6216;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6305, %r279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6307, %r6305, %r6227;
	// end inline asm
	// begin inline asm
	mov.b32 %r6315, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6326, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6312, %r661, %r662, %r6315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6316, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6317, %r6315, %r6316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6320, %r6312, %r6317;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6323, %r672, %r662, %r6326, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6327, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6328, %r6326, %r6327;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6331, %r6323, %r6328;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6334, %r661, %r684, %r6315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6338, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6339, %r6315, %r6338;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6342, %r6334, %r6339;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6345, %r672, %r684, %r6326, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6349, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6350, %r6326, %r6349;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6353, %r6345, %r6350;
	// end inline asm
	// begin inline asm
	mov.b32 %r6361, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6372, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6358, %r661, %r708, %r6361, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6362, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6363, %r6361, %r6362;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6366, %r6358, %r6363;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6369, %r672, %r708, %r6372, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6373, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6374, %r6372, %r6373;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6377, %r6369, %r6374;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6380, %r661, %r730, %r6361, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6384, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6385, %r6361, %r6384;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6388, %r6380, %r6385;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6391, %r672, %r730, %r6372, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6395, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6396, %r6372, %r6395;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6399, %r6391, %r6396;
	// end inline asm
	// begin inline asm
	mov.b32 %r6407, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6418, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6404, %r661, %r754, %r6407, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6408, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6409, %r6407, %r6408;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6412, %r6404, %r6409;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6415, %r672, %r754, %r6418, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6419, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6420, %r6418, %r6419;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6423, %r6415, %r6420;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6426, %r661, %r776, %r6407, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6430, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6431, %r6407, %r6430;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6434, %r6426, %r6431;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6437, %r672, %r776, %r6418, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6441, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6442, %r6418, %r6441;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6445, %r6437, %r6442;
	// end inline asm
	// begin inline asm
	mov.b32 %r6453, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6464, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6450, %r661, %r800, %r6453, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6454, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6455, %r6453, %r6454;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6458, %r6450, %r6455;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6461, %r672, %r800, %r6464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6465, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6466, %r6464, %r6465;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6469, %r6461, %r6466;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6472, %r661, %r822, %r6453, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6476, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6477, %r6453, %r6476;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6480, %r6472, %r6477;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6483, %r672, %r822, %r6464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6487, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6488, %r6464, %r6487;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6491, %r6483, %r6488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6494, %r225, %r6320, %r6232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6498, %r225, %r6331, %r6237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6502, %r225, %r6342, %r6242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6506, %r225, %r6353, %r6247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6510, %r225, %r6366, %r6252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6514, %r225, %r6377, %r6257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6518, %r225, %r6388, %r6262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6522, %r225, %r6399, %r6267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6526, %r225, %r6412, %r6272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6530, %r225, %r6423, %r6277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6534, %r225, %r6434, %r6282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6538, %r225, %r6445, %r6287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6542, %r225, %r6458, %r6292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6546, %r225, %r6469, %r6297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6550, %r225, %r6480, %r6302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6554, %r225, %r6491, %r6307;
	// end inline asm
	// begin inline asm
	mov.b32 %r6563, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6574, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6560, %r661, %r2458, %r6563, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6564, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6565, %r6563, %r6564;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6568, %r6560, %r6565;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6571, %r672, %r2458, %r6574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6575, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6576, %r6574, %r6575;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6579, %r6571, %r6576;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6582, %r661, %r2480, %r6563, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6586, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6587, %r6563, %r6586;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6590, %r6582, %r6587;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6593, %r672, %r2480, %r6574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6597, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6598, %r6574, %r6597;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6601, %r6593, %r6598;
	// end inline asm
	// begin inline asm
	mov.b32 %r6609, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6620, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6606, %r661, %r2504, %r6609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6610, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6611, %r6609, %r6610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6614, %r6606, %r6611;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6617, %r672, %r2504, %r6620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6621, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6622, %r6620, %r6621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6625, %r6617, %r6622;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6628, %r661, %r2526, %r6609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6632, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6633, %r6609, %r6632;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6636, %r6628, %r6633;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6639, %r672, %r2526, %r6620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6643, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6644, %r6620, %r6643;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6647, %r6639, %r6644;
	// end inline asm
	// begin inline asm
	mov.b32 %r6655, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6666, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6652, %r661, %r2550, %r6655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6656, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6657, %r6655, %r6656;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6660, %r6652, %r6657;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6663, %r672, %r2550, %r6666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6667, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6668, %r6666, %r6667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6671, %r6663, %r6668;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6674, %r661, %r2572, %r6655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6678, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6679, %r6655, %r6678;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6682, %r6674, %r6679;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6685, %r672, %r2572, %r6666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6689, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6690, %r6666, %r6689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6693, %r6685, %r6690;
	// end inline asm
	// begin inline asm
	mov.b32 %r6701, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6712, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6698, %r661, %r2596, %r6701, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6702, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6703, %r6701, %r6702;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6706, %r6698, %r6703;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6709, %r672, %r2596, %r6712, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6713, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6714, %r6712, %r6713;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6717, %r6709, %r6714;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6720, %r661, %r2618, %r6701, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6724, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6725, %r6701, %r6724;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6728, %r6720, %r6725;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6731, %r672, %r2618, %r6712, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6735, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6736, %r6712, %r6735;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6739, %r6731, %r6736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6742, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6744, %r6742, %r6568, %r6494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6748, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6750, %r6748, %r6579, %r6498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6754, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6756, %r6754, %r6590, %r6502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6760, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6762, %r6760, %r6601, %r6506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6766, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6768, %r6766, %r6614, %r6510;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6772, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6774, %r6772, %r6625, %r6514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6778, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6780, %r6778, %r6636, %r6518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6784, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6786, %r6784, %r6647, %r6522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6790, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6792, %r6790, %r6660, %r6526;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6796, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6798, %r6796, %r6671, %r6530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6802, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6804, %r6802, %r6682, %r6534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6808, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6810, %r6808, %r6693, %r6538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6814, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6816, %r6814, %r6706, %r6542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6820, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6822, %r6820, %r6717, %r6546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6826, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6828, %r6826, %r6728, %r6550;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6832, %r243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6834, %r6832, %r6739, %r6554;
	// end inline asm
	// begin inline asm
	mov.b32 %r6843, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6854, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6840, %r661, %r4254, %r6843, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6844, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6845, %r6843, %r6844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6848, %r6840, %r6845;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6851, %r672, %r4254, %r6854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6855, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6856, %r6854, %r6855;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6859, %r6851, %r6856;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6862, %r661, %r4276, %r6843, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6866, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6867, %r6843, %r6866;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6870, %r6862, %r6867;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6873, %r672, %r4276, %r6854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6877, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6878, %r6854, %r6877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6881, %r6873, %r6878;
	// end inline asm
	// begin inline asm
	mov.b32 %r6889, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6900, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6886, %r661, %r4300, %r6889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6890, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6891, %r6889, %r6890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6894, %r6886, %r6891;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6897, %r672, %r4300, %r6900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6901, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6902, %r6900, %r6901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6905, %r6897, %r6902;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6908, %r661, %r4322, %r6889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6912, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6913, %r6889, %r6912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6916, %r6908, %r6913;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6919, %r672, %r4322, %r6900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6923, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6924, %r6900, %r6923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6927, %r6919, %r6924;
	// end inline asm
	// begin inline asm
	mov.b32 %r6935, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6946, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6932, %r661, %r4346, %r6935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6936, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6937, %r6935, %r6936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6940, %r6932, %r6937;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6943, %r672, %r4346, %r6946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6947, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6948, %r6946, %r6947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6951, %r6943, %r6948;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6954, %r661, %r4368, %r6935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6958, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6959, %r6935, %r6958;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6962, %r6954, %r6959;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6965, %r672, %r4368, %r6946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6969, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6970, %r6946, %r6969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6973, %r6965, %r6970;
	// end inline asm
	// begin inline asm
	mov.b32 %r6981, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r6992, {%rs1077, %rs1077};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6978, %r661, %r4392, %r6981, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6982, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6983, %r6981, %r6982;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6986, %r6978, %r6983;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6989, %r672, %r4392, %r6992, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6993, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6994, %r6992, %r6993;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6997, %r6989, %r6994;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7000, %r661, %r4414, %r6981, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7004, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7005, %r6981, %r7004;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7008, %r7000, %r7005;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7011, %r672, %r4414, %r6992, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7015, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7016, %r6992, %r7015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7019, %r7011, %r7016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7093, %r261, %r6848, %r6744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7090, %r261, %r6859, %r6750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7102, %r261, %r6870, %r6756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7099, %r261, %r6881, %r6762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7111, %r261, %r6894, %r6768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r261, %r6905, %r6774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7120, %r261, %r6916, %r6780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r261, %r6927, %r6786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7129, %r261, %r6940, %r6792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r261, %r6951, %r6798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r261, %r6962, %r6804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r261, %r6973, %r6810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7147, %r261, %r6986, %r6816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7144, %r261, %r6997, %r6822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7156, %r261, %r7008, %r6828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7153, %r261, %r7019, %r6834;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7086, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7088, %r7086, %r7090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7091, %r307, %r7093, %r7088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7095, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7097, %r7095, %r7099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7100, %r307, %r7102, %r7097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7104, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7106, %r7104, %r7108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7109, %r307, %r7111, %r7106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7113, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7115, %r7113, %r7117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7118, %r307, %r7120, %r7115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7122, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7124, %r7122, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7127, %r307, %r7129, %r7124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7131, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7133, %r7131, %r7135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7136, %r307, %r7138, %r7133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7140, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7142, %r7140, %r7144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7145, %r307, %r7147, %r7142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7149, %r310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7151, %r7149, %r7153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7154, %r307, %r7156, %r7151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7158, %r310, %r7093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7161, %r307, %r7090, %r7158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7165, %r310, %r7102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7168, %r307, %r7099, %r7165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7172, %r310, %r7111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7175, %r307, %r7108, %r7172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7179, %r310, %r7120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7182, %r307, %r7117, %r7179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7186, %r310, %r7129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7189, %r307, %r7126, %r7186;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7193, %r310, %r7138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7196, %r307, %r7135, %r7193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7200, %r310, %r7147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7203, %r307, %r7144, %r7200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7207, %r310, %r7156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7210, %r307, %r7153, %r7207;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7301, %r7298}, {%r354, %r360, %r357, %r363}, {%r7091, %r7161}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7310, %r7307}, {%r354, %r360, %r357, %r363}, {%r7100, %r7168}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7319, %r7316}, {%r354, %r360, %r357, %r363}, {%r7109, %r7175}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7328, %r7325}, {%r354, %r360, %r357, %r363}, {%r7118, %r7182}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7337, %r7334}, {%r354, %r360, %r357, %r363}, {%r7127, %r7189}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7346, %r7343}, {%r354, %r360, %r357, %r363}, {%r7136, %r7196}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7355, %r7352}, {%r354, %r360, %r357, %r363}, {%r7145, %r7203}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7364, %r7361}, {%r354, %r360, %r357, %r363}, {%r7154, %r7210}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7294, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7296, %r7294, %r7298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7299, %r398, %r7301, %r7296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7303, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7305, %r7303, %r7307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7308, %r398, %r7310, %r7305;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7312, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7314, %r7312, %r7316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7317, %r398, %r7319, %r7314;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7321, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7323, %r7321, %r7325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7326, %r398, %r7328, %r7323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7330, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7332, %r7330, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7335, %r398, %r7337, %r7332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7339, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7341, %r7339, %r7343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7344, %r398, %r7346, %r7341;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7348, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7350, %r7348, %r7352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7353, %r398, %r7355, %r7350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7357, %r401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7359, %r7357, %r7361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7362, %r398, %r7364, %r7359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7366, %r401, %r7301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7369, %r398, %r7298, %r7366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7373, %r401, %r7310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7376, %r398, %r7307, %r7373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7380, %r401, %r7319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7383, %r398, %r7316, %r7380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7387, %r401, %r7328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7390, %r398, %r7325, %r7387;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7394, %r401, %r7337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7397, %r398, %r7334, %r7394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7401, %r401, %r7346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7404, %r398, %r7343, %r7401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7408, %r401, %r7355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7411, %r398, %r7352, %r7408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7415, %r401, %r7364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7418, %r398, %r7361, %r7415;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7422, %r7423}, {%r432, %r438, %r435, %r441}, {%r7299, %r7369}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7432, %r7433}, {%r432, %r438, %r435, %r441}, {%r7308, %r7376}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7442, %r7443}, {%r432, %r438, %r435, %r441}, {%r7317, %r7383}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7452, %r7453}, {%r432, %r438, %r435, %r441}, {%r7326, %r7390}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7462, %r7463}, {%r432, %r438, %r435, %r441}, {%r7335, %r7397}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7472, %r7473}, {%r432, %r438, %r435, %r441}, {%r7344, %r7404}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7482, %r7483}, {%r432, %r438, %r435, %r441}, {%r7353, %r7411}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7492, %r7493}, {%r432, %r438, %r435, %r441}, {%r7362, %r7418}, {%r7988, %r7988};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7502, %r117, %r7422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7505, %r117, %r7423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7508, %r117, %r7432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7511, %r117, %r7433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7514, %r117, %r7442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r117, %r7443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7520, %r117, %r7452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7523, %r117, %r7453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7526, %r117, %r7462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7529, %r117, %r7463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7532, %r117, %r7472;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7535, %r117, %r7473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7538, %r117, %r7482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7541, %r117, %r7483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7544, %r117, %r7492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7547, %r117, %r7493;
	// end inline asm
	// begin inline asm
	mov.b32 %r7550, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7551, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7552, %r7502, %r7550;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7555, %r7552, %r7551;
	// end inline asm
	// begin inline asm
	mov.b32 %r7558, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7559, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7560, %r7505, %r7558;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7563, %r7560, %r7559;
	// end inline asm
	// begin inline asm
	mov.b32 %r7566, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7567, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7568, %r7508, %r7566;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7571, %r7568, %r7567;
	// end inline asm
	// begin inline asm
	mov.b32 %r7574, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7575, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7576, %r7511, %r7574;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7579, %r7576, %r7575;
	// end inline asm
	// begin inline asm
	mov.b32 %r7582, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7583, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7584, %r7514, %r7582;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7587, %r7584, %r7583;
	// end inline asm
	// begin inline asm
	mov.b32 %r7590, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7591, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7592, %r7517, %r7590;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7595, %r7592, %r7591;
	// end inline asm
	// begin inline asm
	mov.b32 %r7598, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7599, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7600, %r7520, %r7598;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7603, %r7600, %r7599;
	// end inline asm
	// begin inline asm
	mov.b32 %r7606, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7607, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7608, %r7523, %r7606;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7611, %r7608, %r7607;
	// end inline asm
	// begin inline asm
	mov.b32 %r7614, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7615, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7616, %r7526, %r7614;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7619, %r7616, %r7615;
	// end inline asm
	// begin inline asm
	mov.b32 %r7622, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7623, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7624, %r7529, %r7622;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7627, %r7624, %r7623;
	// end inline asm
	// begin inline asm
	mov.b32 %r7630, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7631, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7632, %r7532, %r7630;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7635, %r7632, %r7631;
	// end inline asm
	// begin inline asm
	mov.b32 %r7638, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7639, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7640, %r7535, %r7638;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7643, %r7640, %r7639;
	// end inline asm
	// begin inline asm
	mov.b32 %r7646, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7647, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7648, %r7538, %r7646;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7651, %r7648, %r7647;
	// end inline asm
	// begin inline asm
	mov.b32 %r7654, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7655, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7656, %r7541, %r7654;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7659, %r7656, %r7655;
	// end inline asm
	// begin inline asm
	mov.b32 %r7662, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7663, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7664, %r7544, %r7662;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7667, %r7664, %r7663;
	// end inline asm
	// begin inline asm
	mov.b32 %r7670, {%rs198, %rs198};
	// end inline asm
	// begin inline asm
	mov.b32 %r7671, {%rs200, %rs200};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7672, %r7547, %r7670;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7675, %r7672, %r7671;
	// end inline asm
	// begin inline asm
	mov.b32 %r7681, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r7679, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7680, %r7681, %r7679;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7683, %r7555, %r7680;
	// end inline asm
	// begin inline asm
	mov.b32 %r7686, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7687, %r7681, %r7686;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7690, %r7563, %r7687;
	// end inline asm
	// begin inline asm
	mov.b32 %r7693, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7694, %r7681, %r7693;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7697, %r7571, %r7694;
	// end inline asm
	// begin inline asm
	mov.b32 %r7700, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7701, %r7681, %r7700;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7704, %r7579, %r7701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7707, %r7683, %r7697, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7711, %r7690, %r7704, %r2322;
	// end inline asm
	shl.b32 	%r7718, %r7711, 4;
	// begin inline asm
	lop3.b32 %r7715, %r2328, %r7707, %r7718, 202;
	// end inline asm
	xor.b32  	%r7889, %r7715, -2004318072;
	// begin inline asm
	mov.b32 %r7722, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r7720, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7721, %r7722, %r7720;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7724, %r7587, %r7721;
	// end inline asm
	// begin inline asm
	mov.b32 %r7727, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7728, %r7722, %r7727;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7731, %r7595, %r7728;
	// end inline asm
	// begin inline asm
	mov.b32 %r7734, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7735, %r7722, %r7734;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7738, %r7603, %r7735;
	// end inline asm
	// begin inline asm
	mov.b32 %r7741, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7742, %r7722, %r7741;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7745, %r7611, %r7742;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7748, %r7724, %r7738, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7752, %r7731, %r7745, %r2322;
	// end inline asm
	shl.b32 	%r7759, %r7752, 4;
	// begin inline asm
	lop3.b32 %r7756, %r2328, %r7748, %r7759, 202;
	// end inline asm
	xor.b32  	%r7890, %r7756, -2004318072;
	// begin inline asm
	mov.b32 %r7763, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r7761, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7762, %r7763, %r7761;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7765, %r7619, %r7762;
	// end inline asm
	// begin inline asm
	mov.b32 %r7768, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7769, %r7763, %r7768;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7772, %r7627, %r7769;
	// end inline asm
	// begin inline asm
	mov.b32 %r7775, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7776, %r7763, %r7775;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7779, %r7635, %r7776;
	// end inline asm
	// begin inline asm
	mov.b32 %r7782, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7783, %r7763, %r7782;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7786, %r7643, %r7783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7789, %r7765, %r7779, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7793, %r7772, %r7786, %r2322;
	// end inline asm
	shl.b32 	%r7800, %r7793, 4;
	// begin inline asm
	lop3.b32 %r7797, %r2328, %r7789, %r7800, 202;
	// end inline asm
	xor.b32  	%r7891, %r7797, -2004318072;
	// begin inline asm
	mov.b32 %r7804, {%rs1181, %rs1181};
	// end inline asm
	// begin inline asm
	mov.b32 %r7802, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7803, %r7804, %r7802;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7806, %r7651, %r7803;
	// end inline asm
	// begin inline asm
	mov.b32 %r7809, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7810, %r7804, %r7809;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7813, %r7659, %r7810;
	// end inline asm
	// begin inline asm
	mov.b32 %r7816, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7817, %r7804, %r7816;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7820, %r7667, %r7817;
	// end inline asm
	// begin inline asm
	mov.b32 %r7823, {%rs1189, %rs1189};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7824, %r7804, %r7823;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7827, %r7675, %r7824;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7830, %r7806, %r7820, %r2322;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7834, %r7813, %r7827, %r2322;
	// end inline asm
	shl.b32 	%r7841, %r7834, 4;
	// begin inline asm
	lop3.b32 %r7838, %r2328, %r7830, %r7841, 202;
	// end inline asm
	xor.b32  	%r7892, %r7838, -2004318072;
	st.shared.u32 	[%rd185], %r7889;
	st.shared.u32 	[%rd186], %r7890;
	st.shared.u32 	[%rd187], %r7891;
	st.shared.u32 	[%rd188], %r7892;
	add.s32 	%r8021, %r8021, 64;
	add.s64 	%rd188, %rd188, 8324;
	add.s64 	%rd187, %rd187, 8324;
	add.s64 	%rd186, %rd186, 8324;
	add.s64 	%rd185, %rd185, 8324;
	add.s32 	%r8020, %r8020, 1;
	setp.eq.s32 	%p238, %r8021, 256;
	@%p238 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit16936
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7898, [%rd5];
	ld.shared.u32 	%r7899, [%rd6+128];
	ld.shared.u32 	%r7906, [%rd6+4];
	ld.shared.u32 	%r7907, [%rd6+132];
	ld.shared.u32 	%r7914, [%rd5+8324];
	ld.shared.u32 	%r7915, [%rd6+8452];
	ld.shared.u32 	%r7922, [%rd6+8328];
	ld.shared.u32 	%r7923, [%rd6+8456];
	ld.shared.u32 	%r7930, [%rd5+16648];
	ld.shared.u32 	%r7931, [%rd6+16776];
	ld.shared.u32 	%r7938, [%rd6+16652];
	ld.shared.u32 	%r7939, [%rd6+16780];
	ld.shared.u32 	%r7946, [%rd5+24972];
	ld.shared.u32 	%r7947, [%rd6+25100];
	ld.shared.u32 	%r7954, [%rd6+24976];
	ld.shared.u32 	%r7955, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7893, %r7898, %r7899, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7897, %r7898, %r7899, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7901, %r7906, %r7907, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7905, %r7906, %r7907, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7909, %r7914, %r7915, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7913, %r7914, %r7915, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7917, %r7922, %r7923, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7921, %r7922, %r7923, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7925, %r7930, %r7931, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7929, %r7930, %r7931, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7933, %r7938, %r7939, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7937, %r7938, %r7939, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7941, %r7946, %r7947, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7945, %r7946, %r7947, %r577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7949, %r7954, %r7955, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7953, %r7954, %r7955, %r577;
	// end inline asm
	selp.b32 	%r7957, %r7897, %r7893, %p225;
	shfl.sync.bfly.b32	%r170, %r7957, 8, 31, -1;
	selp.b32 	%r7958, %r7905, %r7901, %p225;
	shfl.sync.bfly.b32	%r171, %r7958, 8, 31, -1;
	selp.b32 	%r7959, %r7913, %r7909, %p225;
	shfl.sync.bfly.b32	%r7960, %r7959, 8, 31, -1;
	selp.b32 	%r7961, %r7921, %r7917, %p225;
	shfl.sync.bfly.b32	%r7962, %r7961, 8, 31, -1;
	selp.b32 	%r7963, %r7929, %r7925, %p225;
	shfl.sync.bfly.b32	%r7964, %r7963, 8, 31, -1;
	selp.b32 	%r7965, %r7937, %r7933, %p225;
	shfl.sync.bfly.b32	%r7966, %r7965, 8, 31, -1;
	selp.b32 	%r7967, %r7945, %r7941, %p225;
	shfl.sync.bfly.b32	%r7968, %r7967, 8, 31, -1;
	selp.b32 	%r7969, %r7953, %r7949, %p225;
	shfl.sync.bfly.b32	%r7970, %r7969, 8, 31, -1;
	and.b32  	%r184, %r109, 256;
	setp.eq.s32 	%p240, %r184, 0;
	shl.b32 	%r8034, %r109, 12;
	@%p240 bra 	$L__BB0_148;
// %bb.132:                             // %pass16148
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7971, %r171, %r7905, %p225;
	selp.b32 	%r7972, %r7901, %r171, %p225;
	selp.b32 	%r7973, %r170, %r7897, %p225;
	selp.b32 	%r7974, %r7893, %r170, %p225;
	or.b32  	%r7976, %r95, %r8034;
	cvt.s64.s32 	%rd135, %r7976;
	add.s64 	%rd136, %rd135, %rd7;
	shr.u64 	%rd137, %rd136, 39;
	add.s64 	%rd138, %rd136, %rd137;
	shr.s64 	%rd139, %rd138, 25;
	setp.lt.s64 	%p242, %rd136, 0;
	and.b64  	%rd140, %rd138, -33554432;
	setp.ne.s64 	%p243, %rd140, %rd136;
	and.pred  	%p244, %p242, %p243;
	selp.u64 	%rd141, 1, 0, %p244;
	sub.s64 	%rd142, %rd141, %rd139;
	shl.b64 	%rd143, %rd142, 25;
	add.s64 	%rd144, %rd143, %rd136;
	shl.b64 	%rd145, %rd144, 2;
	add.s64 	%rd146, %rd3, %rd145;
	st.global.v4.u32 	[%rd146], {%r7974, %r7972, %r7973, %r7971};
$L__BB0_148:                            // %pass16156
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7977, %r184, 64;
	setp.gt.u32 	%p245, %r7977, 191;
	@%p245 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_150;
$L__BB0_149:                            // %pass16241
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r172, %r7909, %r7960, %p225;
	selp.b32 	%r173, %r7960, %r7913, %p225;
	selp.b32 	%r174, %r7917, %r7962, %p225;
	selp.b32 	%r175, %r7962, %r7921, %p225;
	or.b32  	%r7978, %r8034, %r95;
	or.b32  	%r7979, %r7978, 262144;
	cvt.s64.s32 	%rd147, %r7979;
	add.s64 	%rd148, %rd147, %rd7;
	shr.u64 	%rd149, %rd148, 39;
	add.s64 	%rd150, %rd148, %rd149;
	shr.s64 	%rd151, %rd150, 25;
	setp.lt.s64 	%p246, %rd148, 0;
	and.b64  	%rd152, %rd150, -33554432;
	setp.ne.s64 	%p247, %rd152, %rd148;
	and.pred  	%p248, %p246, %p247;
	selp.u64 	%rd153, 1, 0, %p248;
	sub.s64 	%rd154, %rd153, %rd151;
	shl.b64 	%rd155, %rd154, 25;
	add.s64 	%rd156, %rd155, %rd148;
	shl.b64 	%rd157, %rd156, 2;
	add.s64 	%rd158, %rd3, %rd157;
	st.global.v4.u32 	[%rd158], {%r172, %r174, %r173, %r175};
$L__BB0_150:                            // %pass16249
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r180, %r7941, %r7968, %p225;
	selp.b32 	%r181, %r7968, %r7945, %p225;
	selp.b32 	%r182, %r7949, %r7970, %p225;
	selp.b32 	%r183, %r7970, %r7953, %p225;
	or.b32  	%r7980, %r184, 128;
	setp.lt.u32 	%p249, %r7980, 192;
	or.b32  	%r7990, %r8034, %r95;
	@%p249 bra 	$L__BB0_152;
// %bb.151:                             // %pass16334
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r176, %r7925, %r7964, %p225;
	selp.b32 	%r177, %r7964, %r7929, %p225;
	selp.b32 	%r178, %r7933, %r7966, %p225;
	selp.b32 	%r179, %r7966, %r7937, %p225;
	or.b32  	%r7982, %r7990, 524288;
	cvt.s64.s32 	%rd159, %r7982;
	add.s64 	%rd160, %rd159, %rd7;
	shr.u64 	%rd161, %rd160, 39;
	add.s64 	%rd162, %rd160, %rd161;
	shr.s64 	%rd163, %rd162, 25;
	setp.lt.s64 	%p250, %rd160, 0;
	and.b64  	%rd164, %rd162, -33554432;
	setp.ne.s64 	%p251, %rd164, %rd160;
	and.pred  	%p252, %p250, %p251;
	selp.u64 	%rd165, 1, 0, %p252;
	sub.s64 	%rd166, %rd165, %rd163;
	shl.b64 	%rd167, %rd166, 25;
	add.s64 	%rd168, %rd167, %rd160;
	shl.b64 	%rd169, %rd168, 2;
	add.s64 	%rd170, %rd3, %rd169;
	st.global.v4.u32 	[%rd170], {%r176, %r178, %r177, %r179};
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L38264
	st.global.u32 	[%rd4], %r7988;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r7987, 2;
	st.global.u32 	[%rd4], %r7987;
	mov.u64 	%rd183, exception3325;
	cvta.global.u64 	%rd184, %rd183;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd184;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd61, exception1;
	cvta.global.u64 	%rd62, %rd61;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd62;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L38363
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11232, 
	(
	);
	} // callseq 3
	mov.u64 	%rd70, exception1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L38360
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11232, 
	(
	);
	} // callseq 7
	mov.u64 	%rd76, exception1;
	cvta.global.u64 	%rd77, %rd76;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd77;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L38357
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11232, 
	(
	);
	} // callseq 13
	mov.u64 	%rd90, exception1;
	cvta.global.u64 	%rd91, %rd90;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd91;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
