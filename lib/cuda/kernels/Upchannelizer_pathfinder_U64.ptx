// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan64(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2044[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12063[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<183>;
	.reg .b16 	%rs<265>;
	.reg .b32 	%r<2538>;
	.reg .f32 	%f<721>;
	.reg .b64 	%rd<150>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r101, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r108, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r108, 33407;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r109, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r109, 33407;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r102, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd4, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r110, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r111, %r110, %r1;
	or.b32  	%r112, %r111, %r4;
	mul.wide.u32 	%rd46, %r112, 4;
	add.s64 	%rd5, %rd4, %rd46;
	mov.u32 	%r113, 1;
	st.global.u32 	[%rd5], %r113;
	setp.gt.u32 	%p3, %r102, 32767;
	@%p3 bra 	$L__BB0_9;
// %bb.5:                               // %L131
	ld.param.u32 	%r103, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r103, %r102;
	setp.gt.s32 	%p5, %r103, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_9;
// %bb.6:                               // %L138
	ld.param.u32 	%r104, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r114, %r103, %r102;
	and.b32  	%r115, %r114, 255;
	setp.ne.s32 	%p7, %r115, 0;
	setp.gt.u32 	%p8, %r104, 511;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_9;
// %bb.7:                               // %L149
	ld.param.u32 	%r105, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p10, %r105, %r104;
	setp.gt.s32 	%p11, %r105, 1023;
	or.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_9;
// %bb.8:                               // %L156
	not.b32 	%r116, %r104;
	add.s32 	%r117, %r116, %r105;
	and.b32  	%r118, %r117, 3;
	setp.eq.s32 	%p13, %r118, 0;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L269
	ld.param.u32 	%r106, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r106, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.11:                              // %L271
	ld.param.u32 	%r107, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p15, %r106, %r107;
	setp.lt.s32 	%p16, %r107, 385;
	and.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;
$L__BB0_13:                             // %pass141
	bfe.u32 	%r56, %r1, 2, 1;
	shr.u32 	%r57, %r1, 4;
	shl.b32 	%r124, %r57, 1;
	shl.b32 	%r125, %r56, 2;
	shl.b32 	%r58, %r1, 3;
	and.b32  	%r126, %r58, 24;
	or.b32  	%r127, %r125, %r126;
	or.b32  	%r128, %r124, %r127;
	bfe.u32 	%r129, %r1, 3, 1;
	or.b32  	%r60, %r129, %r128;
	shl.b32 	%r61, %r60, 1;
	or.b32  	%r130, %r61, -255;
	cvt.rn.f32.s32 	%f46, %r130;
	mov.f32 	%f47, 0f44008000;
	div.approx.f32 	%f42, %f46, %f47;
	mov.f32 	%f71, 0f00000000;
	mul.f32 	%f44, %f42, 0f40800000;
	setp.neu.f32 	%p23, %f44, 0f00000000;
	mov.f32 	%f720, 0f3F800000;
	mov.f32 	%f713, %f720;
	@%p23 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_15;
$L__BB0_14:                             // %L605
	add.f32 	%f74, %f44, %f44;
	mov.b32 	%r138, %f74;
	and.b32  	%r139, %r138, -2147483648;
	or.b32  	%r140, %r139, 1056964608;
	mov.b32 	%f75, %r140;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p24, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p24;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p25, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p25;
	cvt.rzi.s32.f32 	%r141, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f44;
	mul.f32 	%f83, %f82, %f82;
	fma.rn.f32 	%f84, %f83, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f85, %f83, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f86, %f84, %f83, 0fC0A55DF6;
	fma.rn.f32 	%f87, %f85, %f83, 0f4081E0CF;
	fma.rn.f32 	%f88, %f83, %f82, 0f00000000;
	fma.rn.f32 	%f89, %f87, %f83, 0fC09DE9E6;
	fma.rn.f32 	%f90, %f86, %f88, 0f00000000;
	fma.rn.f32 	%f91, %f89, %f83, 0f3F800000;
	fma.rn.f32 	%f92, %f82, 0f40490FDB, %f90;
	and.b32  	%r142, %r141, 1;
	setp.eq.b32 	%p26, %r142, 1;
	selp.f32 	%f93, %f91, %f92, %p26;
	and.b32  	%r143, %r141, 2;
	setp.eq.s32 	%p27, %r143, 0;
	sub.f32 	%f95, %f71, %f93;
	selp.f32 	%f96, %f93, %f95, %p27;
	cvt.rzi.f32.f32 	%f97, %f44;
	setp.eq.f32 	%p28, %f44, %f97;
	mul.f32 	%f98, %f44, 0f00000000;
	selp.f32 	%f99, %f98, %f96, %p28;
	mul.f32 	%f100, %f42, 0f41490FDB;
	div.approx.f32 	%f713, %f99, %f100;
$L__BB0_15:                             // %L609
	or.b32  	%r144, %r61, -191;
	cvt.rn.f32.s32 	%f104, %r144;
	div.approx.f32 	%f4, %f104, %f47;
	mul.f32 	%f6, %f4, 0f40800000;
	setp.eq.f32 	%p34, %f6, 0f00000000;
	mov.f32 	%f714, %f720;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L623
	add.f32 	%f132, %f6, %f6;
	mov.b32 	%r152, %f132;
	and.b32  	%r153, %r152, -2147483648;
	or.b32  	%r154, %r153, 1056964608;
	mov.b32 	%f133, %r154;
	add.f32 	%f134, %f132, %f133;
	cvt.rzi.f32.f32 	%f135, %f134;
	abs.f32 	%f136, %f132;
	setp.gt.f32 	%p35, %f136, 0f4B000000;
	selp.f32 	%f137, %f132, %f135, %p35;
	cvt.rzi.f32.f32 	%f138, %f132;
	setp.lt.f32 	%p36, %f136, 0f3F000000;
	selp.f32 	%f139, %f138, %f137, %p36;
	cvt.rzi.s32.f32 	%r155, %f139;
	fma.rn.f32 	%f140, %f139, 0fBF000000, %f6;
	mul.f32 	%f141, %f140, %f140;
	fma.rn.f32 	%f142, %f141, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f143, %f141, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f144, %f142, %f141, 0fC0A55DF6;
	fma.rn.f32 	%f145, %f143, %f141, 0f4081E0CF;
	fma.rn.f32 	%f146, %f141, %f140, 0f00000000;
	fma.rn.f32 	%f147, %f145, %f141, 0fC09DE9E6;
	fma.rn.f32 	%f148, %f144, %f146, 0f00000000;
	fma.rn.f32 	%f149, %f147, %f141, 0f3F800000;
	fma.rn.f32 	%f150, %f140, 0f40490FDB, %f148;
	and.b32  	%r156, %r155, 1;
	setp.eq.b32 	%p37, %r156, 1;
	selp.f32 	%f151, %f149, %f150, %p37;
	and.b32  	%r157, %r155, 2;
	setp.eq.s32 	%p38, %r157, 0;
	sub.f32 	%f153, %f71, %f151;
	selp.f32 	%f154, %f151, %f153, %p38;
	cvt.rzi.f32.f32 	%f155, %f6;
	setp.eq.f32 	%p39, %f6, %f155;
	mul.f32 	%f156, %f6, 0f00000000;
	selp.f32 	%f157, %f156, %f154, %p39;
	mul.f32 	%f158, %f4, 0f41490FDB;
	div.approx.f32 	%f714, %f157, %f158;
$L__BB0_17:                             // %L627
	or.b32  	%r161, %r61, -127;
	cvt.rn.f32.s32 	%f163, %r161;
	div.approx.f32 	%f9, %f163, %f47;
	mul.f32 	%f11, %f9, 0f40800000;
	setp.eq.f32 	%p45, %f11, 0f00000000;
	mov.f32 	%f715, %f720;
	@%p45 bra 	$L__BB0_19;
// %bb.18:                              // %L703
	add.f32 	%f191, %f11, %f11;
	mov.b32 	%r169, %f191;
	and.b32  	%r170, %r169, -2147483648;
	or.b32  	%r171, %r170, 1056964608;
	mov.b32 	%f192, %r171;
	add.f32 	%f193, %f191, %f192;
	cvt.rzi.f32.f32 	%f194, %f193;
	abs.f32 	%f195, %f191;
	setp.gt.f32 	%p46, %f195, 0f4B000000;
	selp.f32 	%f196, %f191, %f194, %p46;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p47, %f195, 0f3F000000;
	selp.f32 	%f198, %f197, %f196, %p47;
	cvt.rzi.s32.f32 	%r172, %f198;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f11;
	mul.f32 	%f200, %f199, %f199;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	and.b32  	%r173, %r172, 1;
	setp.eq.b32 	%p48, %r173, 1;
	selp.f32 	%f210, %f208, %f209, %p48;
	and.b32  	%r174, %r172, 2;
	setp.eq.s32 	%p49, %r174, 0;
	sub.f32 	%f212, %f71, %f210;
	selp.f32 	%f213, %f210, %f212, %p49;
	cvt.rzi.f32.f32 	%f214, %f11;
	setp.eq.f32 	%p50, %f11, %f214;
	mul.f32 	%f215, %f11, 0f00000000;
	selp.f32 	%f216, %f215, %f213, %p50;
	mul.f32 	%f217, %f9, 0f41490FDB;
	div.approx.f32 	%f715, %f216, %f217;
$L__BB0_19:                             // %L707
	or.b32  	%r175, %r61, -63;
	cvt.rn.f32.s32 	%f221, %r175;
	div.approx.f32 	%f15, %f221, %f47;
	mul.f32 	%f17, %f15, 0f40800000;
	setp.eq.f32 	%p56, %f17, 0f00000000;
	mov.f32 	%f716, %f720;
	@%p56 bra 	$L__BB0_21;
// %bb.20:                              // %L721
	add.f32 	%f249, %f17, %f17;
	mov.b32 	%r183, %f249;
	and.b32  	%r184, %r183, -2147483648;
	or.b32  	%r185, %r184, 1056964608;
	mov.b32 	%f250, %r185;
	add.f32 	%f251, %f249, %f250;
	cvt.rzi.f32.f32 	%f252, %f251;
	abs.f32 	%f253, %f249;
	setp.gt.f32 	%p57, %f253, 0f4B000000;
	selp.f32 	%f254, %f249, %f252, %p57;
	cvt.rzi.f32.f32 	%f255, %f249;
	setp.lt.f32 	%p58, %f253, 0f3F000000;
	selp.f32 	%f256, %f255, %f254, %p58;
	cvt.rzi.s32.f32 	%r186, %f256;
	fma.rn.f32 	%f257, %f256, 0fBF000000, %f17;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f260, %f258, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f261, %f259, %f258, 0fC0A55DF6;
	fma.rn.f32 	%f262, %f260, %f258, 0f4081E0CF;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f262, %f258, 0fC09DE9E6;
	fma.rn.f32 	%f265, %f261, %f263, 0f00000000;
	fma.rn.f32 	%f266, %f264, %f258, 0f3F800000;
	fma.rn.f32 	%f267, %f257, 0f40490FDB, %f265;
	and.b32  	%r187, %r186, 1;
	setp.eq.b32 	%p59, %r187, 1;
	selp.f32 	%f268, %f266, %f267, %p59;
	and.b32  	%r188, %r186, 2;
	setp.eq.s32 	%p60, %r188, 0;
	sub.f32 	%f270, %f71, %f268;
	selp.f32 	%f271, %f268, %f270, %p60;
	cvt.rzi.f32.f32 	%f272, %f17;
	setp.eq.f32 	%p61, %f17, %f272;
	mul.f32 	%f273, %f17, 0f00000000;
	selp.f32 	%f274, %f273, %f271, %p61;
	mul.f32 	%f275, %f15, 0f41490FDB;
	div.approx.f32 	%f716, %f274, %f275;
$L__BB0_21:                             // %L725
	or.b32  	%r192, %r61, 1;
	cvt.rn.f32.s32 	%f280, %r192;
	div.approx.f32 	%f20, %f280, %f47;
	mul.f32 	%f22, %f20, 0f40800000;
	setp.eq.f32 	%p67, %f22, 0f00000000;
	mov.f32 	%f717, %f720;
	@%p67 bra 	$L__BB0_23;
// %bb.22:                              // %L801
	add.f32 	%f308, %f22, %f22;
	mov.b32 	%r200, %f308;
	and.b32  	%r201, %r200, -2147483648;
	or.b32  	%r202, %r201, 1056964608;
	mov.b32 	%f309, %r202;
	add.f32 	%f310, %f308, %f309;
	cvt.rzi.f32.f32 	%f311, %f310;
	abs.f32 	%f312, %f308;
	setp.gt.f32 	%p68, %f312, 0f4B000000;
	selp.f32 	%f313, %f308, %f311, %p68;
	cvt.rzi.f32.f32 	%f314, %f308;
	setp.lt.f32 	%p69, %f312, 0f3F000000;
	selp.f32 	%f315, %f314, %f313, %p69;
	cvt.rzi.s32.f32 	%r203, %f315;
	fma.rn.f32 	%f316, %f315, 0fBF000000, %f22;
	mul.f32 	%f317, %f316, %f316;
	fma.rn.f32 	%f318, %f317, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f319, %f317, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f320, %f318, %f317, 0fC0A55DF6;
	fma.rn.f32 	%f321, %f319, %f317, 0f4081E0CF;
	fma.rn.f32 	%f322, %f317, %f316, 0f00000000;
	fma.rn.f32 	%f323, %f321, %f317, 0fC09DE9E6;
	fma.rn.f32 	%f324, %f320, %f322, 0f00000000;
	fma.rn.f32 	%f325, %f323, %f317, 0f3F800000;
	fma.rn.f32 	%f326, %f316, 0f40490FDB, %f324;
	and.b32  	%r204, %r203, 1;
	setp.eq.b32 	%p70, %r204, 1;
	selp.f32 	%f327, %f325, %f326, %p70;
	and.b32  	%r205, %r203, 2;
	setp.eq.s32 	%p71, %r205, 0;
	sub.f32 	%f329, %f71, %f327;
	selp.f32 	%f330, %f327, %f329, %p71;
	cvt.rzi.f32.f32 	%f331, %f22;
	setp.eq.f32 	%p72, %f22, %f331;
	mul.f32 	%f332, %f22, 0f00000000;
	selp.f32 	%f333, %f332, %f330, %p72;
	mul.f32 	%f334, %f20, 0f41490FDB;
	div.approx.f32 	%f717, %f333, %f334;
$L__BB0_23:                             // %L805
	or.b32  	%r206, %r61, 65;
	cvt.rn.f32.s32 	%f338, %r206;
	div.approx.f32 	%f26, %f338, %f47;
	mul.f32 	%f28, %f26, 0f40800000;
	setp.eq.f32 	%p78, %f28, 0f00000000;
	mov.f32 	%f718, %f720;
	@%p78 bra 	$L__BB0_25;
// %bb.24:                              // %L819
	add.f32 	%f366, %f28, %f28;
	mov.b32 	%r214, %f366;
	and.b32  	%r215, %r214, -2147483648;
	or.b32  	%r216, %r215, 1056964608;
	mov.b32 	%f367, %r216;
	add.f32 	%f368, %f366, %f367;
	cvt.rzi.f32.f32 	%f369, %f368;
	abs.f32 	%f370, %f366;
	setp.gt.f32 	%p79, %f370, 0f4B000000;
	selp.f32 	%f371, %f366, %f369, %p79;
	cvt.rzi.f32.f32 	%f372, %f366;
	setp.lt.f32 	%p80, %f370, 0f3F000000;
	selp.f32 	%f373, %f372, %f371, %p80;
	cvt.rzi.s32.f32 	%r217, %f373;
	fma.rn.f32 	%f374, %f373, 0fBF000000, %f28;
	mul.f32 	%f375, %f374, %f374;
	fma.rn.f32 	%f376, %f375, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f377, %f375, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f378, %f376, %f375, 0fC0A55DF6;
	fma.rn.f32 	%f379, %f377, %f375, 0f4081E0CF;
	fma.rn.f32 	%f380, %f375, %f374, 0f00000000;
	fma.rn.f32 	%f381, %f379, %f375, 0fC09DE9E6;
	fma.rn.f32 	%f382, %f378, %f380, 0f00000000;
	fma.rn.f32 	%f383, %f381, %f375, 0f3F800000;
	fma.rn.f32 	%f384, %f374, 0f40490FDB, %f382;
	and.b32  	%r218, %r217, 1;
	setp.eq.b32 	%p81, %r218, 1;
	selp.f32 	%f385, %f383, %f384, %p81;
	and.b32  	%r219, %r217, 2;
	setp.eq.s32 	%p82, %r219, 0;
	sub.f32 	%f387, %f71, %f385;
	selp.f32 	%f388, %f385, %f387, %p82;
	cvt.rzi.f32.f32 	%f389, %f28;
	setp.eq.f32 	%p83, %f28, %f389;
	mul.f32 	%f390, %f28, 0f00000000;
	selp.f32 	%f391, %f390, %f388, %p83;
	mul.f32 	%f392, %f26, 0f41490FDB;
	div.approx.f32 	%f718, %f391, %f392;
$L__BB0_25:                             // %L823
	or.b32  	%r223, %r61, 129;
	cvt.rn.f32.s32 	%f397, %r223;
	div.approx.f32 	%f31, %f397, %f47;
	mul.f32 	%f33, %f31, 0f40800000;
	setp.eq.f32 	%p89, %f33, 0f00000000;
	mov.f32 	%f719, %f720;
	@%p89 bra 	$L__BB0_27;
// %bb.26:                              // %L899
	add.f32 	%f425, %f33, %f33;
	mov.b32 	%r231, %f425;
	and.b32  	%r232, %r231, -2147483648;
	or.b32  	%r233, %r232, 1056964608;
	mov.b32 	%f426, %r233;
	add.f32 	%f427, %f425, %f426;
	cvt.rzi.f32.f32 	%f428, %f427;
	abs.f32 	%f429, %f425;
	setp.gt.f32 	%p90, %f429, 0f4B000000;
	selp.f32 	%f430, %f425, %f428, %p90;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p91, %f429, 0f3F000000;
	selp.f32 	%f432, %f431, %f430, %p91;
	cvt.rzi.s32.f32 	%r234, %f432;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f33;
	mul.f32 	%f434, %f433, %f433;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	and.b32  	%r235, %r234, 1;
	setp.eq.b32 	%p92, %r235, 1;
	selp.f32 	%f444, %f442, %f443, %p92;
	and.b32  	%r236, %r234, 2;
	setp.eq.s32 	%p93, %r236, 0;
	sub.f32 	%f446, %f71, %f444;
	selp.f32 	%f447, %f444, %f446, %p93;
	cvt.rzi.f32.f32 	%f448, %f33;
	setp.eq.f32 	%p94, %f33, %f448;
	mul.f32 	%f449, %f33, 0f00000000;
	selp.f32 	%f450, %f449, %f447, %p94;
	mul.f32 	%f451, %f31, 0f41490FDB;
	div.approx.f32 	%f719, %f450, %f451;
$L__BB0_27:                             // %L903
	or.b32  	%r237, %r61, 193;
	cvt.rn.f32.s32 	%f455, %r237;
	div.approx.f32 	%f37, %f455, %f47;
	mul.f32 	%f39, %f37, 0f40800000;
	setp.eq.f32 	%p100, %f39, 0f00000000;
	@%p100 bra 	$L__BB0_29;
// %bb.28:                              // %L917
	add.f32 	%f483, %f39, %f39;
	mov.b32 	%r245, %f483;
	and.b32  	%r246, %r245, -2147483648;
	or.b32  	%r247, %r246, 1056964608;
	mov.b32 	%f484, %r247;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p101, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p101;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p102, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p102;
	cvt.rzi.s32.f32 	%r248, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f39;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r249, %r248, 1;
	setp.eq.b32 	%p103, %r249, 1;
	selp.f32 	%f502, %f500, %f501, %p103;
	and.b32  	%r250, %r248, 2;
	setp.eq.s32 	%p104, %r250, 0;
	sub.f32 	%f504, %f71, %f502;
	selp.f32 	%f505, %f502, %f504, %p104;
	cvt.rzi.f32.f32 	%f506, %f39;
	setp.eq.f32 	%p105, %f39, %f506;
	mul.f32 	%f507, %f39, 0f00000000;
	selp.f32 	%f508, %f507, %f505, %p105;
	mul.f32 	%f509, %f37, 0f41490FDB;
	div.approx.f32 	%f720, %f508, %f509;
$L__BB0_29:                             // %L921
	setp.le.s32 	%p148, %r103, %r102;
	mov.u32 	%r2510, 0;
	@%p148 bra 	$L__BB0_40;
// %bb.30:                              // %L1516.lr.ph
	abs.f32 	%f48, %f42;
	abs.f32 	%f106, %f4;
	abs.f32 	%f165, %f9;
	abs.f32 	%f223, %f15;
	abs.f32 	%f282, %f20;
	abs.f32 	%f340, %f26;
	setp.gt.f32 	%p18, %f48, 0f4B800000;
	mul.f32 	%f49, %f42, 0f00000000;
	setp.gt.f32 	%p29, %f106, 0f4B800000;
	mul.f32 	%f107, %f4, 0f00000000;
	setp.gt.f32 	%p40, %f165, 0f4B800000;
	mul.f32 	%f166, %f9, 0f00000000;
	setp.gt.f32 	%p51, %f223, 0f4B800000;
	mul.f32 	%f224, %f15, 0f00000000;
	setp.gt.f32 	%p62, %f282, 0f4B800000;
	mul.f32 	%f283, %f20, 0f00000000;
	setp.gt.f32 	%p73, %f340, 0f4B800000;
	mul.f32 	%f341, %f26, 0f00000000;
	abs.f32 	%f399, %f31;
	selp.f32 	%f50, %f49, %f42, %p18;
	selp.f32 	%f108, %f107, %f4, %p29;
	selp.f32 	%f167, %f166, %f9, %p40;
	selp.f32 	%f225, %f224, %f15, %p51;
	selp.f32 	%f284, %f283, %f20, %p62;
	selp.f32 	%f342, %f341, %f26, %p73;
	setp.gt.f32 	%p84, %f399, 0f4B800000;
	mul.f32 	%f400, %f31, 0f00000000;
	add.f32 	%f51, %f50, %f50;
	add.f32 	%f109, %f108, %f108;
	add.f32 	%f168, %f167, %f167;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f285, %f284, %f284;
	add.f32 	%f343, %f342, %f342;
	selp.f32 	%f401, %f400, %f31, %p84;
	abs.f32 	%f457, %f37;
	mov.b32 	%r131, %f51;
	mov.b32 	%r145, %f109;
	mov.b32 	%r162, %f168;
	mov.b32 	%r176, %f226;
	mov.b32 	%r193, %f285;
	mov.b32 	%r207, %f343;
	add.f32 	%f402, %f401, %f401;
	setp.gt.f32 	%p95, %f457, 0f4B800000;
	mul.f32 	%f458, %f37, 0f00000000;
	and.b32  	%r132, %r131, -2147483648;
	and.b32  	%r146, %r145, -2147483648;
	and.b32  	%r163, %r162, -2147483648;
	and.b32  	%r177, %r176, -2147483648;
	and.b32  	%r194, %r193, -2147483648;
	and.b32  	%r208, %r207, -2147483648;
	mov.b32 	%r224, %f402;
	selp.f32 	%f459, %f458, %f37, %p95;
	or.b32  	%r133, %r132, 1056964608;
	or.b32  	%r147, %r146, 1056964608;
	or.b32  	%r164, %r163, 1056964608;
	or.b32  	%r178, %r177, 1056964608;
	or.b32  	%r195, %r194, 1056964608;
	or.b32  	%r209, %r208, 1056964608;
	and.b32  	%r225, %r224, -2147483648;
	add.f32 	%f460, %f459, %f459;
	mov.b32 	%f52, %r133;
	mov.b32 	%f110, %r147;
	mov.b32 	%f169, %r164;
	mov.b32 	%f227, %r178;
	mov.b32 	%f286, %r195;
	mov.b32 	%f344, %r209;
	or.b32  	%r226, %r225, 1056964608;
	mov.b32 	%r238, %f460;
	add.f32 	%f53, %f51, %f52;
	abs.f32 	%f55, %f51;
	add.f32 	%f111, %f109, %f110;
	abs.f32 	%f113, %f109;
	add.f32 	%f170, %f168, %f169;
	abs.f32 	%f172, %f168;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f287, %f285, %f286;
	abs.f32 	%f289, %f285;
	add.f32 	%f345, %f343, %f344;
	abs.f32 	%f347, %f343;
	mov.b32 	%f403, %r226;
	and.b32  	%r239, %r238, -2147483648;
	cvt.rzi.f32.f32 	%f54, %f53;
	setp.gt.f32 	%p19, %f55, 0f4B000000;
	cvt.rzi.f32.f32 	%f112, %f111;
	setp.gt.f32 	%p30, %f113, 0f4B000000;
	cvt.rzi.f32.f32 	%f171, %f170;
	setp.gt.f32 	%p41, %f172, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p52, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f288, %f287;
	setp.gt.f32 	%p63, %f289, 0f4B000000;
	cvt.rzi.f32.f32 	%f346, %f345;
	setp.gt.f32 	%p74, %f347, 0f4B000000;
	add.f32 	%f404, %f402, %f403;
	abs.f32 	%f406, %f402;
	or.b32  	%r240, %r239, 1056964608;
	selp.f32 	%f56, %f51, %f54, %p19;
	cvt.rzi.f32.f32 	%f57, %f51;
	setp.lt.f32 	%p20, %f55, 0f3F000000;
	selp.f32 	%f114, %f109, %f112, %p30;
	cvt.rzi.f32.f32 	%f115, %f109;
	setp.lt.f32 	%p31, %f113, 0f3F000000;
	selp.f32 	%f173, %f168, %f171, %p41;
	cvt.rzi.f32.f32 	%f174, %f168;
	setp.lt.f32 	%p42, %f172, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p52;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p53, %f230, 0f3F000000;
	selp.f32 	%f290, %f285, %f288, %p63;
	cvt.rzi.f32.f32 	%f291, %f285;
	setp.lt.f32 	%p64, %f289, 0f3F000000;
	selp.f32 	%f348, %f343, %f346, %p74;
	cvt.rzi.f32.f32 	%f349, %f343;
	setp.lt.f32 	%p75, %f347, 0f3F000000;
	cvt.rzi.f32.f32 	%f405, %f404;
	setp.gt.f32 	%p85, %f406, 0f4B000000;
	mov.b32 	%f461, %r240;
	selp.f32 	%f58, %f57, %f56, %p20;
	selp.f32 	%f116, %f115, %f114, %p31;
	selp.f32 	%f175, %f174, %f173, %p42;
	selp.f32 	%f233, %f232, %f231, %p53;
	selp.f32 	%f292, %f291, %f290, %p64;
	selp.f32 	%f350, %f349, %f348, %p75;
	selp.f32 	%f407, %f402, %f405, %p85;
	cvt.rzi.f32.f32 	%f408, %f402;
	setp.lt.f32 	%p86, %f406, 0f3F000000;
	add.f32 	%f462, %f460, %f461;
	abs.f32 	%f464, %f460;
	fma.rn.f32 	%f59, %f58, 0fBF000000, %f50;
	fma.rn.f32 	%f117, %f116, 0fBF000000, %f108;
	fma.rn.f32 	%f176, %f175, 0fBF000000, %f167;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f293, %f292, 0fBF000000, %f284;
	fma.rn.f32 	%f351, %f350, 0fBF000000, %f342;
	selp.f32 	%f409, %f408, %f407, %p86;
	cvt.rzi.f32.f32 	%f463, %f462;
	setp.gt.f32 	%p96, %f464, 0f4B000000;
	mul.f32 	%f60, %f59, %f59;
	mul.f32 	%f118, %f117, %f117;
	mul.f32 	%f177, %f176, %f176;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f294, %f293, %f293;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f410, %f409, 0fBF000000, %f401;
	selp.f32 	%f465, %f460, %f463, %p96;
	cvt.rzi.f32.f32 	%f466, %f460;
	setp.lt.f32 	%p97, %f464, 0f3F000000;
	cvt.rzi.s32.f32 	%r134, %f58;
	fma.rn.f32 	%f61, %f60, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f62, %f60, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r148, %f116;
	fma.rn.f32 	%f119, %f118, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f120, %f118, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r165, %f175;
	fma.rn.f32 	%f178, %f177, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f179, %f177, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r179, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r196, %f292;
	fma.rn.f32 	%f295, %f294, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f296, %f294, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r210, %f350;
	fma.rn.f32 	%f353, %f352, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f354, %f352, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f411, %f410, %f410;
	selp.f32 	%f467, %f466, %f465, %p97;
	add.s32 	%r135, %r134, 1;
	fma.rn.f32 	%f63, %f61, %f60, 0fC0A55DF6;
	fma.rn.f32 	%f64, %f62, %f60, 0f4081E0CF;
	fma.rn.f32 	%f65, %f60, %f59, 0f00000000;
	add.s32 	%r149, %r148, 1;
	fma.rn.f32 	%f121, %f119, %f118, 0fC0A55DF6;
	fma.rn.f32 	%f122, %f120, %f118, 0f4081E0CF;
	fma.rn.f32 	%f123, %f118, %f117, 0f00000000;
	add.s32 	%r166, %r165, 1;
	fma.rn.f32 	%f180, %f178, %f177, 0fC0A55DF6;
	fma.rn.f32 	%f181, %f179, %f177, 0f4081E0CF;
	fma.rn.f32 	%f182, %f177, %f176, 0f00000000;
	add.s32 	%r180, %r179, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r197, %r196, 1;
	fma.rn.f32 	%f297, %f295, %f294, 0fC0A55DF6;
	fma.rn.f32 	%f298, %f296, %f294, 0f4081E0CF;
	fma.rn.f32 	%f299, %f294, %f293, 0f00000000;
	add.s32 	%r211, %r210, 1;
	fma.rn.f32 	%f355, %f353, %f352, 0fC0A55DF6;
	fma.rn.f32 	%f356, %f354, %f352, 0f4081E0CF;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	cvt.rzi.s32.f32 	%r227, %f409;
	fma.rn.f32 	%f412, %f411, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f413, %f411, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f468, %f467, 0fBF000000, %f459;
	shl.b32 	%r46, %r1, 1;
	shl.b32 	%r51, %r2, 6;
	and.b32  	%r53, %r1, 18;
	fma.rn.f32 	%f66, %f64, %f60, 0fC09DE9E6;
	fma.rn.f32 	%f67, %f63, %f65, 0f00000000;
	and.b32  	%r136, %r135, 1;
	fma.rn.f32 	%f124, %f122, %f118, 0fC09DE9E6;
	fma.rn.f32 	%f125, %f121, %f123, 0f00000000;
	and.b32  	%r150, %r149, 1;
	fma.rn.f32 	%f183, %f181, %f177, 0fC09DE9E6;
	fma.rn.f32 	%f184, %f180, %f182, 0f00000000;
	and.b32  	%r167, %r166, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r181, %r180, 1;
	fma.rn.f32 	%f300, %f298, %f294, 0fC09DE9E6;
	fma.rn.f32 	%f301, %f297, %f299, 0f00000000;
	and.b32  	%r198, %r197, 1;
	fma.rn.f32 	%f358, %f356, %f352, 0fC09DE9E6;
	fma.rn.f32 	%f359, %f355, %f357, 0f00000000;
	and.b32  	%r212, %r211, 1;
	add.s32 	%r228, %r227, 1;
	fma.rn.f32 	%f414, %f412, %f411, 0fC0A55DF6;
	fma.rn.f32 	%f415, %f413, %f411, 0f4081E0CF;
	fma.rn.f32 	%f416, %f411, %f410, 0f00000000;
	mul.f32 	%f469, %f468, %f468;
	and.b32  	%r47, %r46, 8;
	shl.b32 	%r49, %r1, 2;
	or.b32  	%r119, %r53, %r51;
	fma.rn.f32 	%f68, %f66, %f60, 0f3F800000;
	fma.rn.f32 	%f69, %f59, 0f40490FDB, %f67;
	setp.eq.b32 	%p21, %r136, 1;
	fma.rn.f32 	%f126, %f124, %f118, 0f3F800000;
	fma.rn.f32 	%f127, %f117, 0f40490FDB, %f125;
	setp.eq.b32 	%p32, %r150, 1;
	fma.rn.f32 	%f185, %f183, %f177, 0f3F800000;
	fma.rn.f32 	%f186, %f176, 0f40490FDB, %f184;
	setp.eq.b32 	%p43, %r167, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p54, %r181, 1;
	fma.rn.f32 	%f302, %f300, %f294, 0f3F800000;
	fma.rn.f32 	%f303, %f293, 0f40490FDB, %f301;
	setp.eq.b32 	%p65, %r198, 1;
	fma.rn.f32 	%f360, %f358, %f352, 0f3F800000;
	fma.rn.f32 	%f361, %f351, 0f40490FDB, %f359;
	setp.eq.b32 	%p76, %r212, 1;
	fma.rn.f32 	%f417, %f415, %f411, 0fC09DE9E6;
	fma.rn.f32 	%f418, %f414, %f416, 0f00000000;
	and.b32  	%r229, %r228, 1;
	cvt.rzi.s32.f32 	%r241, %f467;
	fma.rn.f32 	%f470, %f469, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f471, %f469, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r50, %r49, 4;
	or.b32  	%r120, %r119, %r47;
	selp.f32 	%f70, %f68, %f69, %p21;
	and.b32  	%r137, %r135, 2;
	selp.f32 	%f128, %f126, %f127, %p32;
	and.b32  	%r151, %r149, 2;
	selp.f32 	%f187, %f185, %f186, %p43;
	and.b32  	%r168, %r166, 2;
	selp.f32 	%f245, %f243, %f244, %p54;
	and.b32  	%r182, %r180, 2;
	selp.f32 	%f304, %f302, %f303, %p65;
	and.b32  	%r199, %r197, 2;
	selp.f32 	%f362, %f360, %f361, %p76;
	and.b32  	%r213, %r211, 2;
	fma.rn.f32 	%f419, %f417, %f411, 0f3F800000;
	fma.rn.f32 	%f420, %f410, 0f40490FDB, %f418;
	setp.eq.b32 	%p87, %r229, 1;
	add.s32 	%r242, %r241, 1;
	fma.rn.f32 	%f472, %f470, %f469, 0fC0A55DF6;
	fma.rn.f32 	%f473, %f471, %f469, 0f4081E0CF;
	fma.rn.f32 	%f474, %f469, %f468, 0f00000000;
	and.b32  	%r52, %r49, 32;
	or.b32  	%r121, %r120, %r50;
	setp.eq.s32 	%p22, %r137, 0;
	sub.f32 	%f72, %f71, %f70;
	setp.eq.s32 	%p33, %r151, 0;
	sub.f32 	%f130, %f71, %f128;
	setp.eq.s32 	%p44, %r168, 0;
	sub.f32 	%f189, %f71, %f187;
	setp.eq.s32 	%p55, %r182, 0;
	sub.f32 	%f247, %f71, %f245;
	setp.eq.s32 	%p66, %r199, 0;
	sub.f32 	%f306, %f71, %f304;
	setp.eq.s32 	%p77, %r213, 0;
	sub.f32 	%f364, %f71, %f362;
	selp.f32 	%f421, %f419, %f420, %p87;
	and.b32  	%r230, %r228, 2;
	fma.rn.f32 	%f475, %f473, %f469, 0fC09DE9E6;
	fma.rn.f32 	%f476, %f472, %f474, 0f00000000;
	and.b32  	%r243, %r242, 1;
	or.b32  	%r122, %r121, %r52;
	selp.f32 	%f73, %f70, %f72, %p22;
	selp.f32 	%f131, %f128, %f130, %p33;
	selp.f32 	%f190, %f187, %f189, %p44;
	selp.f32 	%f248, %f245, %f247, %p55;
	selp.f32 	%f307, %f304, %f306, %p66;
	selp.f32 	%f365, %f362, %f364, %p77;
	setp.eq.s32 	%p88, %r230, 0;
	sub.f32 	%f423, %f71, %f421;
	fma.rn.f32 	%f477, %f475, %f469, 0f3F800000;
	fma.rn.f32 	%f478, %f468, 0f40490FDB, %f476;
	setp.eq.b32 	%p98, %r243, 1;
	bfe.u32 	%r123, %r122, 1, 10;
	mul.f32 	%f43, %f73, %f73;
	mul.f32 	%f5, %f131, %f131;
	mul.f32 	%f10, %f190, %f190;
	mul.f32 	%f16, %f248, %f248;
	mul.f32 	%f21, %f307, %f307;
	mul.f32 	%f27, %f365, %f365;
	selp.f32 	%f424, %f421, %f423, %p88;
	selp.f32 	%f479, %f477, %f478, %p98;
	and.b32  	%r244, %r242, 2;
	ld.param.u64 	%rd1, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd47, %r123, 4;
	mul.f32 	%f102, %f713, %f43;
	mov.f32 	%f103, 0f42800000;
	mul.f32 	%f160, %f714, %f5;
	mul.f32 	%f219, %f715, %f10;
	mul.f32 	%f277, %f716, %f16;
	mul.f32 	%f336, %f717, %f21;
	mul.f32 	%f394, %f718, %f27;
	mul.f32 	%f32, %f424, %f424;
	setp.eq.s32 	%p99, %r244, 0;
	sub.f32 	%f481, %f71, %f479;
	add.s64 	%rd48, %rd1, %rd47;
	div.approx.f32 	%f3, %f102, %f103;
	div.approx.f32 	%f162, %f160, %f103;
	div.approx.f32 	%f14, %f219, %f103;
	div.approx.f32 	%f279, %f277, %f103;
	div.approx.f32 	%f25, %f336, %f103;
	div.approx.f32 	%f396, %f394, %f103;
	mul.f32 	%f453, %f719, %f32;
	selp.f32 	%f482, %f479, %f481, %p99;
	ld.param.u64 	%rd2, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b32  	%r48, %r1, 16;
	ld.global.u32 	%r54, [%rd48];
	shr.u32 	%r55, %r1, 1;
	shr.u32 	%r59, %r1, 3;
	mov.b32 	%r160, %f162;
	mov.b32 	%r159, %f3;
	mov.b32 	%r191, %f279;
	mov.b32 	%r190, %f14;
	mov.b32 	%r222, %f396;
	mov.b32 	%r221, %f25;
	div.approx.f32 	%f36, %f453, %f103;
	mul.f32 	%f38, %f482, %f482;
	// begin inline asm
	cvt.rn.f16x2.f32 %r158, %r160, %r159;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r189, %r191, %r190;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r220, %r222, %r221;
	// end inline asm
	mul.f32 	%f510, %f720, %f38;
	div.approx.f32 	%f512, %f510, %f103;
	mov.b32 	%r253, %f512;
	mov.b32 	%r252, %f36;
	// begin inline asm
	cvt.rn.f16x2.f32 %r251, %r253, %r252;
	// end inline asm
	mul.lo.s32 	%r290, %r60, 63;
	and.b32  	%r291, %r290, 127;
	cvt.rn.f32.s32 	%f513, %r291;
	div.approx.f32 	%f514, %f513, %f103;
	add.f32 	%f515, %f514, %f514;
	mov.b32 	%r292, %f515;
	and.b32  	%r293, %r292, -2147483648;
	or.b32  	%r294, %r293, 1056964608;
	mov.b32 	%f516, %r294;
	add.f32 	%f517, %f515, %f516;
	cvt.rzi.f32.f32 	%f518, %f517;
	abs.f32 	%f519, %f515;
	setp.gt.f32 	%p106, %f519, 0f4B000000;
	selp.f32 	%f520, %f515, %f518, %p106;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p107, %f519, 0f3F000000;
	selp.f32 	%f522, %f521, %f520, %p107;
	cvt.rzi.s32.f32 	%r295, %f522;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f514;
	mul.f32 	%f524, %f523, %f523;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	and.b32  	%r296, %r295, 1;
	setp.eq.b32 	%p108, %r296, 1;
	selp.f32 	%f534, %f532, %f533, %p108;
	selp.f32 	%f535, %f533, %f532, %p108;
	and.b32  	%r297, %r295, 2;
	setp.eq.s32 	%p109, %r297, 0;
	neg.f32 	%f536, %f534;
	selp.f32 	%f537, %f534, %f536, %p109;
	add.s32 	%r298, %r295, 1;
	and.b32  	%r299, %r298, 2;
	setp.eq.s32 	%p110, %r299, 0;
	sub.f32 	%f539, %f71, %f535;
	selp.f32 	%f540, %f535, %f539, %p110;
	cvt.rzi.f32.f32 	%f541, %f514;
	setp.eq.f32 	%p111, %f541, %f514;
	mul.f32 	%f542, %f514, 0f00000000;
	selp.f32 	%f543, %f542, %f537, %p111;
	abs.f32 	%f544, %f514;
	setp.gt.f32 	%p112, %f544, 0f4B800000;
	add.f32 	%f545, %f543, 0f3F800000;
	selp.f32 	%f546, %f545, %f540, %p112;
	add.s32 	%r300, %r290, 96;
	and.b32  	%r301, %r300, 127;
	cvt.rn.f32.s32 	%f547, %r301;
	div.approx.f32 	%f548, %f547, %f103;
	add.f32 	%f549, %f548, %f548;
	mov.b32 	%r302, %f549;
	and.b32  	%r303, %r302, -2147483648;
	or.b32  	%r304, %r303, 1056964608;
	mov.b32 	%f550, %r304;
	add.f32 	%f551, %f549, %f550;
	cvt.rzi.f32.f32 	%f552, %f551;
	abs.f32 	%f553, %f549;
	setp.gt.f32 	%p113, %f553, 0f4B000000;
	selp.f32 	%f554, %f549, %f552, %p113;
	cvt.rzi.f32.f32 	%f555, %f549;
	setp.lt.f32 	%p114, %f553, 0f3F000000;
	selp.f32 	%f556, %f555, %f554, %p114;
	cvt.rzi.s32.f32 	%r305, %f556;
	fma.rn.f32 	%f557, %f556, 0fBF000000, %f548;
	mul.f32 	%f558, %f557, %f557;
	fma.rn.f32 	%f559, %f558, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f560, %f558, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f561, %f559, %f558, 0fC0A55DF6;
	fma.rn.f32 	%f562, %f560, %f558, 0f4081E0CF;
	fma.rn.f32 	%f563, %f558, %f557, 0f00000000;
	fma.rn.f32 	%f564, %f562, %f558, 0fC09DE9E6;
	fma.rn.f32 	%f565, %f561, %f563, 0f00000000;
	fma.rn.f32 	%f566, %f564, %f558, 0f3F800000;
	fma.rn.f32 	%f567, %f557, 0f40490FDB, %f565;
	and.b32  	%r306, %r305, 1;
	setp.eq.b32 	%p115, %r306, 1;
	selp.f32 	%f568, %f566, %f567, %p115;
	selp.f32 	%f569, %f567, %f566, %p115;
	and.b32  	%r307, %r305, 2;
	setp.eq.s32 	%p116, %r307, 0;
	neg.f32 	%f570, %f568;
	selp.f32 	%f571, %f568, %f570, %p116;
	add.s32 	%r308, %r305, 1;
	and.b32  	%r309, %r308, 2;
	setp.eq.s32 	%p117, %r309, 0;
	sub.f32 	%f572, %f71, %f569;
	selp.f32 	%f573, %f569, %f572, %p117;
	cvt.rzi.f32.f32 	%f574, %f548;
	setp.eq.f32 	%p118, %f574, %f548;
	mul.f32 	%f575, %f548, 0f00000000;
	selp.f32 	%f576, %f575, %f571, %p118;
	abs.f32 	%f577, %f548;
	setp.gt.f32 	%p119, %f577, 0f4B800000;
	add.f32 	%f578, %f576, 0f3F800000;
	selp.f32 	%f579, %f578, %f573, %p119;
	mov.b32 	%r255, %f546;
	mov.b32 	%r256, %f579;
	// begin inline asm
	cvt.rn.f16x2.f32 %r254, %r256, %r255;
	// end inline asm
	mov.b32 	%r258, %f543;
	mov.b32 	%r259, %f576;
	// begin inline asm
	cvt.rn.f16x2.f32 %r257, %r259, %r258;
	// end inline asm
	and.b32  	%r310, %r59, 2;
	and.b32  	%r311, %r55, 4;
	or.b32  	%r312, %r56, %r310;
	or.b32  	%r313, %r312, %r311;
	and.b32  	%r314, %r46, 6;
	mul.lo.s32 	%r315, %r313, %r314;
	and.b32  	%r316, %r315, 14;
	cvt.rn.f32.s32 	%f580, %r316;
	mov.f32 	%f581, 0f41000000;
	div.approx.f32 	%f582, %f580, %f581;
	add.f32 	%f583, %f582, %f582;
	mov.b32 	%r317, %f583;
	and.b32  	%r318, %r317, -2147483648;
	or.b32  	%r319, %r318, 1056964608;
	mov.b32 	%f584, %r319;
	add.f32 	%f585, %f583, %f584;
	cvt.rzi.f32.f32 	%f586, %f585;
	abs.f32 	%f587, %f583;
	setp.gt.f32 	%p120, %f587, 0f4B000000;
	selp.f32 	%f588, %f583, %f586, %p120;
	cvt.rzi.f32.f32 	%f589, %f583;
	setp.lt.f32 	%p121, %f587, 0f3F000000;
	selp.f32 	%f590, %f589, %f588, %p121;
	cvt.rzi.s32.f32 	%r320, %f590;
	fma.rn.f32 	%f591, %f590, 0fBF000000, %f582;
	mul.f32 	%f592, %f591, %f591;
	fma.rn.f32 	%f593, %f592, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f594, %f592, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f593, %f592, 0fC0A55DF6;
	fma.rn.f32 	%f596, %f594, %f592, 0f4081E0CF;
	fma.rn.f32 	%f597, %f592, %f591, 0f00000000;
	fma.rn.f32 	%f598, %f596, %f592, 0fC09DE9E6;
	fma.rn.f32 	%f599, %f595, %f597, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f592, 0f3F800000;
	fma.rn.f32 	%f601, %f591, 0f40490FDB, %f599;
	and.b32  	%r321, %r320, 1;
	setp.eq.b32 	%p122, %r321, 1;
	selp.f32 	%f602, %f600, %f601, %p122;
	selp.f32 	%f603, %f601, %f600, %p122;
	and.b32  	%r322, %r320, 2;
	setp.eq.s32 	%p123, %r322, 0;
	neg.f32 	%f604, %f602;
	selp.f32 	%f605, %f602, %f604, %p123;
	add.s32 	%r323, %r320, 1;
	and.b32  	%r324, %r323, 2;
	setp.eq.s32 	%p124, %r324, 0;
	sub.f32 	%f606, %f71, %f603;
	selp.f32 	%f607, %f603, %f606, %p124;
	cvt.rzi.f32.f32 	%f608, %f582;
	setp.eq.f32 	%p125, %f608, %f582;
	mul.f32 	%f609, %f582, 0f00000000;
	selp.f32 	%f610, %f609, %f605, %p125;
	abs.f32 	%f611, %f582;
	setp.gt.f32 	%p126, %f611, 0f4B800000;
	add.f32 	%f612, %f610, 0f3F800000;
	selp.f32 	%f613, %f612, %f607, %p126;
	or.b32  	%r325, %r46, 8;
	mul.lo.s32 	%r326, %r313, %r325;
	and.b32  	%r327, %r326, 14;
	cvt.rn.f32.s32 	%f614, %r327;
	div.approx.f32 	%f615, %f614, %f581;
	add.f32 	%f616, %f615, %f615;
	mov.b32 	%r328, %f616;
	and.b32  	%r329, %r328, -2147483648;
	or.b32  	%r330, %r329, 1056964608;
	mov.b32 	%f617, %r330;
	add.f32 	%f618, %f616, %f617;
	cvt.rzi.f32.f32 	%f619, %f618;
	abs.f32 	%f620, %f616;
	setp.gt.f32 	%p127, %f620, 0f4B000000;
	selp.f32 	%f621, %f616, %f619, %p127;
	cvt.rzi.f32.f32 	%f622, %f616;
	setp.lt.f32 	%p128, %f620, 0f3F000000;
	selp.f32 	%f623, %f622, %f621, %p128;
	cvt.rzi.s32.f32 	%r331, %f623;
	fma.rn.f32 	%f624, %f623, 0fBF000000, %f615;
	mul.f32 	%f625, %f624, %f624;
	fma.rn.f32 	%f626, %f625, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f627, %f625, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f628, %f626, %f625, 0fC0A55DF6;
	fma.rn.f32 	%f629, %f627, %f625, 0f4081E0CF;
	fma.rn.f32 	%f630, %f625, %f624, 0f00000000;
	fma.rn.f32 	%f631, %f629, %f625, 0fC09DE9E6;
	fma.rn.f32 	%f632, %f628, %f630, 0f00000000;
	fma.rn.f32 	%f633, %f631, %f625, 0f3F800000;
	fma.rn.f32 	%f634, %f624, 0f40490FDB, %f632;
	and.b32  	%r332, %r331, 1;
	setp.eq.b32 	%p129, %r332, 1;
	selp.f32 	%f635, %f633, %f634, %p129;
	selp.f32 	%f636, %f634, %f633, %p129;
	and.b32  	%r333, %r331, 2;
	setp.eq.s32 	%p130, %r333, 0;
	neg.f32 	%f637, %f635;
	selp.f32 	%f638, %f635, %f637, %p130;
	add.s32 	%r334, %r331, 1;
	and.b32  	%r335, %r334, 2;
	setp.eq.s32 	%p131, %r335, 0;
	sub.f32 	%f639, %f71, %f636;
	selp.f32 	%f640, %f636, %f639, %p131;
	cvt.rzi.f32.f32 	%f641, %f615;
	setp.eq.f32 	%p132, %f641, %f615;
	mul.f32 	%f642, %f615, 0f00000000;
	selp.f32 	%f643, %f642, %f638, %p132;
	abs.f32 	%f644, %f615;
	setp.gt.f32 	%p133, %f644, 0f4B800000;
	add.f32 	%f645, %f643, 0f3F800000;
	selp.f32 	%f646, %f645, %f640, %p133;
	mov.b32 	%r261, %f613;
	mov.b32 	%r262, %f646;
	// begin inline asm
	cvt.rn.f16x2.f32 %r260, %r262, %r261;
	// end inline asm
	mov.b32 	%r264, %f610;
	mov.b32 	%r265, %f643;
	// begin inline asm
	cvt.rn.f16x2.f32 %r263, %r265, %r264;
	// end inline asm
	xor.b32  	%r285, %r264, -2147483648;
	xor.b32  	%r286, %r265, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r266, %r286, %r285;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r269, %r262, %r261;
	// end inline asm
	cvt.rn.f32.s32 	%f647, %r315;
	div.approx.f32 	%f648, %f647, %f103;
	add.f32 	%f649, %f648, %f648;
	mov.b32 	%r336, %f649;
	and.b32  	%r337, %r336, -2147483648;
	or.b32  	%r338, %r337, 1056964608;
	mov.b32 	%f650, %r338;
	add.f32 	%f651, %f649, %f650;
	cvt.rzi.f32.f32 	%f652, %f651;
	abs.f32 	%f653, %f649;
	setp.gt.f32 	%p134, %f653, 0f4B000000;
	selp.f32 	%f654, %f649, %f652, %p134;
	cvt.rzi.f32.f32 	%f655, %f649;
	setp.lt.f32 	%p135, %f653, 0f3F000000;
	selp.f32 	%f656, %f655, %f654, %p135;
	cvt.rzi.s32.f32 	%r339, %f656;
	fma.rn.f32 	%f657, %f656, 0fBF000000, %f648;
	mul.f32 	%f658, %f657, %f657;
	fma.rn.f32 	%f659, %f658, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f660, %f658, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f661, %f659, %f658, 0fC0A55DF6;
	fma.rn.f32 	%f662, %f660, %f658, 0f4081E0CF;
	fma.rn.f32 	%f663, %f658, %f657, 0f00000000;
	fma.rn.f32 	%f664, %f662, %f658, 0fC09DE9E6;
	fma.rn.f32 	%f665, %f661, %f663, 0f00000000;
	fma.rn.f32 	%f666, %f664, %f658, 0f3F800000;
	fma.rn.f32 	%f667, %f657, 0f40490FDB, %f665;
	and.b32  	%r340, %r339, 1;
	setp.eq.b32 	%p136, %r340, 1;
	selp.f32 	%f668, %f666, %f667, %p136;
	selp.f32 	%f669, %f667, %f666, %p136;
	and.b32  	%r341, %r339, 2;
	setp.eq.s32 	%p137, %r341, 0;
	neg.f32 	%f670, %f668;
	selp.f32 	%f671, %f668, %f670, %p137;
	add.s32 	%r342, %r339, 1;
	and.b32  	%r343, %r342, 2;
	setp.eq.s32 	%p138, %r343, 0;
	sub.f32 	%f672, %f71, %f669;
	selp.f32 	%f673, %f669, %f672, %p138;
	cvt.rzi.f32.f32 	%f674, %f648;
	setp.eq.f32 	%p139, %f674, %f648;
	mul.f32 	%f675, %f648, 0f00000000;
	selp.f32 	%f676, %f675, %f671, %p139;
	mov.b32 	%r344, %f676;
	abs.f32 	%f677, %f648;
	setp.gt.f32 	%p140, %f677, 0f4B800000;
	add.f32 	%f678, %f676, 0f3F800000;
	selp.f32 	%f679, %f678, %f673, %p140;
	shl.b32 	%r345, %r313, 3;
	add.s32 	%r346, %r315, %r345;
	cvt.rn.f32.s32 	%f680, %r346;
	div.approx.f32 	%f681, %f680, %f103;
	add.f32 	%f682, %f681, %f681;
	mov.b32 	%r347, %f682;
	and.b32  	%r348, %r347, -2147483648;
	or.b32  	%r349, %r348, 1056964608;
	mov.b32 	%f683, %r349;
	add.f32 	%f684, %f682, %f683;
	cvt.rzi.f32.f32 	%f685, %f684;
	abs.f32 	%f686, %f682;
	setp.gt.f32 	%p141, %f686, 0f4B000000;
	selp.f32 	%f687, %f682, %f685, %p141;
	cvt.rzi.f32.f32 	%f688, %f682;
	setp.lt.f32 	%p142, %f686, 0f3F000000;
	selp.f32 	%f689, %f688, %f687, %p142;
	cvt.rzi.s32.f32 	%r350, %f689;
	fma.rn.f32 	%f690, %f689, 0fBF000000, %f681;
	mul.f32 	%f691, %f690, %f690;
	fma.rn.f32 	%f692, %f691, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f693, %f691, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f694, %f692, %f691, 0fC0A55DF6;
	fma.rn.f32 	%f695, %f693, %f691, 0f4081E0CF;
	fma.rn.f32 	%f696, %f691, %f690, 0f00000000;
	fma.rn.f32 	%f697, %f695, %f691, 0fC09DE9E6;
	fma.rn.f32 	%f698, %f694, %f696, 0f00000000;
	fma.rn.f32 	%f699, %f697, %f691, 0f3F800000;
	fma.rn.f32 	%f700, %f690, 0f40490FDB, %f698;
	and.b32  	%r351, %r350, 1;
	setp.eq.b32 	%p143, %r351, 1;
	selp.f32 	%f701, %f699, %f700, %p143;
	selp.f32 	%f702, %f700, %f699, %p143;
	and.b32  	%r352, %r350, 2;
	setp.eq.s32 	%p144, %r352, 0;
	neg.f32 	%f703, %f701;
	selp.f32 	%f704, %f701, %f703, %p144;
	add.s32 	%r353, %r350, 1;
	and.b32  	%r354, %r353, 2;
	setp.eq.s32 	%p145, %r354, 0;
	sub.f32 	%f705, %f71, %f702;
	selp.f32 	%f706, %f702, %f705, %p145;
	cvt.rzi.f32.f32 	%f707, %f681;
	setp.eq.f32 	%p146, %f707, %f681;
	mul.f32 	%f708, %f681, 0f00000000;
	selp.f32 	%f709, %f708, %f704, %p146;
	mov.b32 	%r355, %f709;
	abs.f32 	%f710, %f681;
	setp.gt.f32 	%p147, %f710, 0f4B800000;
	add.f32 	%f711, %f709, 0f3F800000;
	selp.f32 	%f712, %f711, %f706, %p147;
	mov.b32 	%r274, %f712;
	mov.b32 	%r273, %f679;
	// begin inline asm
	cvt.rn.f16x2.f32 %r272, %r274, %r273;
	// end inline asm
	xor.b32  	%r277, %r355, -2147483648;
	xor.b32  	%r276, %r344, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r275, %r277, %r276;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r278, %r262, %r261;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r281, %r265, %r264;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r284, %r286, %r285;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r287, %r262, %r261;
	// end inline asm
	shl.b32 	%r357, %r106, 5;
	and.b32  	%r358, %r49, 16;
	shl.b32 	%r359, %r2, 5;
	or.b32  	%r360, %r48, %r3;
	or.b32  	%r21, %r360, %r52;
	and.b32  	%r22, %r49, 12;
	or.b32  	%r361, %r22, %r359;
	or.b32  	%r362, %r361, %r358;
	add.s32 	%r23, %r362, %r357;
	and.b32  	%r24, %r1, 8;
	shl.b32 	%r363, %r1, 4;
	or.b32  	%r364, %r24, %r363;
	shr.u32 	%r365, %r364, 2;
	and.b32  	%r366, %r365, 14;
	or.b32  	%r367, %r366, %r358;
	and.b32  	%r368, %r1, 4;
	or.b32  	%r370, %r59, %r368;
	or.b32  	%r25, %r370, %r126;
	shr.u32 	%r371, %r3, 1;
	and.b32  	%r372, %r4, 32;
	or.b32  	%r26, %r372, %r371;
	or.b32  	%r373, %r53, %r52;
	or.b32  	%r374, %r373, %r47;
	or.b32  	%r375, %r374, %r50;
	shr.u32 	%r376, %r375, 1;
	mul.lo.s32 	%r377, %r376, 65;
	add.s32 	%r378, %r26, %r377;
	or.b32  	%r27, %r26, 8;
	add.s32 	%r379, %r27, %r377;
	or.b32  	%r28, %r26, 16;
	add.s32 	%r380, %r28, %r377;
	or.b32  	%r29, %r26, 24;
	add.s32 	%r381, %r29, %r377;
	shl.b32 	%r382, %r3, 1;
	or.b32  	%r383, %r382, %r57;
	mul.lo.s32 	%r384, %r383, 65;
	add.s32 	%r385, %r384, %r358;
	add.s32 	%r386, %r385, %r366;
	mul.wide.u32 	%rd49, %r386, 4;
	mov.u64 	%rd50, shmem;
	add.s64 	%rd6, %rd50, %rd49;
	cvt.u64.u32 	%rd51, %r366;
	cvt.u64.u32 	%rd52, %r384;
	cvt.u64.u32 	%rd53, %r358;
	add.s64 	%rd54, %rd53, %rd52;
	add.s64 	%rd55, %rd54, %rd51;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd7, %rd50, %rd56;
	shl.b32 	%r387, %r104, 16;
	add.s32 	%r388, %r387, -196608;
	shl.b32 	%r389, %r3, 2;
	or.b32  	%r390, %r59, %r389;
	and.b32  	%r391, %r51, 1984;
	or.b32  	%r392, %r390, %r391;
	shl.b32 	%r393, %r392, 5;
	or.b32  	%r30, %r393, %r358;
	cvt.s64.s32 	%rd8, %r388;
	or.b32  	%r31, %r30, %r22;
	and.b32  	%r394, %r3, 1;
	neg.s32 	%r395, %r394;
	and.b32  	%r396, %r395, 1040;
	bfe.s32 	%r397, %r3, 1, 1;
	and.b32  	%r398, %r397, 520;
	bfe.s32 	%r399, %r3, 2, 1;
	and.b32  	%r400, %r399, 260;
	shr.u32 	%r401, %r3, 3;
	add.s32 	%r402, %r396, %r367;
	add.s32 	%r403, %r402, %r398;
	add.s32 	%r404, %r403, %r400;
	mad.lo.s32 	%r405, %r57, 65, %r404;
	mad.lo.s32 	%r406, %r401, 130, %r405;
	mul.wide.u32 	%rd57, %r406, 4;
	add.s64 	%rd9, %rd50, %rd57;
	add.s32 	%r407, %r406, 32;
	mul.wide.u32 	%rd58, %r407, 4;
	add.s64 	%rd10, %rd50, %rd58;
	add.s32 	%r408, %r406, 1;
	mul.wide.u32 	%rd59, %r408, 4;
	add.s64 	%rd11, %rd50, %rd59;
	add.s32 	%r409, %r406, 33;
	mul.wide.u32 	%rd60, %r409, 4;
	add.s64 	%rd12, %rd50, %rd60;
	add.s32 	%r410, %r406, 2081;
	mul.wide.u32 	%rd61, %r410, 4;
	add.s64 	%rd13, %rd50, %rd61;
	add.s32 	%r411, %r406, 2113;
	mul.wide.u32 	%rd62, %r411, 4;
	add.s64 	%rd14, %rd50, %rd62;
	add.s32 	%r412, %r406, 2082;
	mul.wide.u32 	%rd63, %r412, 4;
	add.s64 	%rd15, %rd50, %rd63;
	add.s32 	%r413, %r406, 2114;
	mul.wide.u32 	%rd64, %r413, 4;
	add.s64 	%rd16, %rd50, %rd64;
	add.s32 	%r414, %r406, 4162;
	mul.wide.u32 	%rd65, %r414, 4;
	add.s64 	%rd17, %rd50, %rd65;
	add.s32 	%r415, %r406, 4194;
	mul.wide.u32 	%rd66, %r415, 4;
	add.s64 	%rd18, %rd50, %rd66;
	add.s32 	%r416, %r406, 4163;
	mul.wide.u32 	%rd67, %r416, 4;
	add.s64 	%rd19, %rd50, %rd67;
	add.s32 	%r417, %r406, 4195;
	mul.wide.u32 	%rd68, %r417, 4;
	add.s64 	%rd20, %rd50, %rd68;
	add.s32 	%r418, %r406, 6243;
	mul.wide.u32 	%rd69, %r418, 4;
	add.s64 	%rd21, %rd50, %rd69;
	add.s32 	%r419, %r406, 6275;
	mul.wide.u32 	%rd70, %r419, 4;
	add.s64 	%rd22, %rd50, %rd70;
	add.s32 	%r420, %r406, 6244;
	mul.wide.u32 	%rd71, %r420, 4;
	add.s64 	%rd23, %rd50, %rd71;
	add.s32 	%r421, %r406, 6276;
	mul.wide.u32 	%rd72, %r421, 4;
	add.s64 	%rd24, %rd50, %rd72;
	mul.wide.u32 	%rd73, %r381, 4;
	add.s64 	%rd25, %rd50, %rd73;
	mul.wide.u32 	%rd74, %r380, 4;
	add.s64 	%rd26, %rd50, %rd74;
	mul.wide.u32 	%rd75, %r379, 4;
	add.s64 	%rd27, %rd50, %rd75;
	mul.wide.u32 	%rd76, %r378, 4;
	add.s64 	%rd28, %rd50, %rd76;
	mov.u16 	%rs236, 25600;
	mov.u16 	%rs238, 21504;
	mov.u16 	%rs246, 18432;
	mov.u16 	%rs260, -14592;
	mov.u32 	%r2512, %r2510;
	mov.u32 	%r2513, %r2510;
	mov.u32 	%r2528, %r2510;
	mov.u32 	%r2527, %r2510;
	mov.u32 	%r2526, %r2510;
	mov.u32 	%r2525, %r2510;
	mov.u32 	%r2518, %r2510;
	mov.u32 	%r2519, %r2510;
	mov.u32 	%r2520, %r2510;
	mov.u32 	%r2521, %r2510;
	mov.u32 	%r2531, %r2510;
	mov.u32 	%r2532, %r2510;
	mov.u32 	%r44, %r2510;
	bra.uni 	$L__BB0_31;
$L__BB0_39:                             // %pass10254
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r2504, %r2511, %r31;
	or.b32  	%r2505, %r2504, 196608;
	cvt.s64.s32 	%rd130, %r2505;
	add.s64 	%rd131, %rd130, %rd8;
	shr.u64 	%rd132, %rd131, 39;
	add.s64 	%rd133, %rd131, %rd132;
	shr.s64 	%rd134, %rd133, 25;
	setp.lt.s64 	%p177, %rd131, 0;
	and.b64  	%rd135, %rd133, -33554432;
	setp.ne.s64 	%p178, %rd135, %rd131;
	and.pred  	%p179, %p177, %p178;
	selp.u64 	%rd136, 1, 0, %p179;
	sub.s64 	%rd137, %rd136, %rd134;
	shl.b64 	%rd138, %rd137, 25;
	add.s64 	%rd139, %rd138, %rd131;
	shl.b64 	%rd140, %rd139, 2;
	add.s64 	%rd141, %rd3, %rd140;
	st.global.v4.u32 	[%rd141], {%r97, %r99, %r98, %r100};
	setp.ne.s32 	%p180, %r44, 32512;
	add.s32 	%r44, %r44, 256;
	add.s32 	%r2506, %r44, %r102;
	setp.lt.s32 	%p181, %r2506, %r103;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_40;
$L__BB0_31:                             // %L1516
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_32 Depth 2
	setp.eq.s32 	%p149, %r24, 0;
	and.b32  	%r45, %r44, 32512;
	or.b32  	%r487, %r21, %r45;
	add.s32 	%r488, %r487, %r102;
	mad.lo.s32 	%r489, %r488, 12288, %r23;
	mul.hi.s32 	%r490, %r489, 715827883;
	shr.u32 	%r491, %r490, 31;
	shr.s32 	%r492, %r490, 26;
	add.s32 	%r493, %r492, %r491;
	setp.lt.s32 	%p150, %r489, 0;
	mul.lo.s32 	%r494, %r493, 402653184;
	setp.ne.s32 	%p151, %r494, %r489;
	and.pred  	%p152, %p150, %p151;
	selp.s32 	%r495, -1, 0, %p152;
	add.s32 	%r496, %r493, %r495;
	mad.lo.s32 	%r497, %r496, -402653184, %r489;
	mul.wide.s32 	%rd77, %r497, 4;
	add.s64 	%rd78, %rd2, %rd77;
	ld.global.v4.u32 	{%r498, %r499, %r500, %r501}, [%rd78];
	or.b32  	%r502, %r487, 64;
	add.s32 	%r503, %r502, %r102;
	mad.lo.s32 	%r504, %r503, 12288, %r23;
	mul.hi.s32 	%r505, %r504, 715827883;
	shr.u32 	%r506, %r505, 31;
	shr.s32 	%r507, %r505, 26;
	add.s32 	%r508, %r507, %r506;
	setp.lt.s32 	%p153, %r504, 0;
	mul.lo.s32 	%r509, %r508, 402653184;
	setp.ne.s32 	%p154, %r509, %r504;
	and.pred  	%p155, %p153, %p154;
	selp.s32 	%r510, -1, 0, %p155;
	add.s32 	%r511, %r508, %r510;
	mad.lo.s32 	%r512, %r511, -402653184, %r504;
	mul.wide.s32 	%rd79, %r512, 4;
	add.s64 	%rd80, %rd2, %rd79;
	ld.global.v4.u32 	{%r513, %r514, %r515, %r516}, [%rd80];
	or.b32  	%r517, %r487, 128;
	add.s32 	%r518, %r517, %r102;
	mad.lo.s32 	%r519, %r518, 12288, %r23;
	mul.hi.s32 	%r520, %r519, 715827883;
	shr.u32 	%r521, %r520, 31;
	shr.s32 	%r522, %r520, 26;
	add.s32 	%r523, %r522, %r521;
	setp.lt.s32 	%p156, %r519, 0;
	mul.lo.s32 	%r524, %r523, 402653184;
	setp.ne.s32 	%p157, %r524, %r519;
	and.pred  	%p158, %p156, %p157;
	selp.s32 	%r525, -1, 0, %p158;
	add.s32 	%r526, %r523, %r525;
	mad.lo.s32 	%r527, %r526, -402653184, %r519;
	mul.wide.s32 	%rd81, %r527, 4;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.v4.u32 	{%r528, %r529, %r530, %r531}, [%rd82];
	or.b32  	%r532, %r487, 192;
	add.s32 	%r533, %r532, %r102;
	mad.lo.s32 	%r534, %r533, 12288, %r23;
	mul.hi.s32 	%r535, %r534, 715827883;
	shr.u32 	%r536, %r535, 31;
	shr.s32 	%r537, %r535, 26;
	add.s32 	%r538, %r537, %r536;
	setp.lt.s32 	%p159, %r534, 0;
	mul.lo.s32 	%r539, %r538, 402653184;
	setp.ne.s32 	%p160, %r539, %r534;
	and.pred  	%p161, %p159, %p160;
	selp.s32 	%r540, -1, 0, %p161;
	add.s32 	%r541, %r538, %r540;
	mad.lo.s32 	%r542, %r541, -402653184, %r534;
	mul.wide.s32 	%rd83, %r542, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.v4.u32 	{%r543, %r544, %r545, %r546}, [%rd84];
	selp.b32 	%r547, %r500, %r498, %p149;
	shfl.sync.bfly.b32	%r548, %r547, 8, 31, -1;
	selp.b32 	%r423, %r498, %r548, %p149;
	selp.b32 	%r424, %r548, %r500, %p149;
	selp.b32 	%r549, %r501, %r499, %p149;
	shfl.sync.bfly.b32	%r550, %r549, 8, 31, -1;
	selp.b32 	%r431, %r499, %r550, %p149;
	selp.b32 	%r432, %r550, %r501, %p149;
	selp.b32 	%r551, %r515, %r513, %p149;
	shfl.sync.bfly.b32	%r552, %r551, 8, 31, -1;
	selp.b32 	%r439, %r513, %r552, %p149;
	selp.b32 	%r440, %r552, %r515, %p149;
	selp.b32 	%r553, %r516, %r514, %p149;
	shfl.sync.bfly.b32	%r554, %r553, 8, 31, -1;
	selp.b32 	%r447, %r514, %r554, %p149;
	selp.b32 	%r448, %r554, %r516, %p149;
	selp.b32 	%r555, %r530, %r528, %p149;
	shfl.sync.bfly.b32	%r556, %r555, 8, 31, -1;
	selp.b32 	%r455, %r528, %r556, %p149;
	selp.b32 	%r456, %r556, %r530, %p149;
	selp.b32 	%r557, %r531, %r529, %p149;
	shfl.sync.bfly.b32	%r558, %r557, 8, 31, -1;
	selp.b32 	%r463, %r529, %r558, %p149;
	selp.b32 	%r464, %r558, %r531, %p149;
	selp.b32 	%r559, %r545, %r543, %p149;
	shfl.sync.bfly.b32	%r560, %r559, 8, 31, -1;
	selp.b32 	%r471, %r543, %r560, %p149;
	selp.b32 	%r472, %r560, %r545, %p149;
	selp.b32 	%r561, %r546, %r544, %p149;
	shfl.sync.bfly.b32	%r562, %r561, 8, 31, -1;
	selp.b32 	%r479, %r544, %r562, %p149;
	selp.b32 	%r480, %r562, %r546, %p149;
	mov.u32 	%r481, 21520;
	// begin inline asm
	prmt.b32 %r422, %r423, %r424, %r481;
	// end inline asm
	mov.u32 	%r485, 30258;
	// begin inline asm
	prmt.b32 %r426, %r423, %r424, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r430, %r431, %r432, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r434, %r431, %r432, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r438, %r439, %r440, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r442, %r439, %r440, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r446, %r447, %r448, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r450, %r447, %r448, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r454, %r455, %r456, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r458, %r455, %r456, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r462, %r463, %r464, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r466, %r463, %r464, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r470, %r471, %r472, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r474, %r471, %r472, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r478, %r479, %r480, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r482, %r479, %r480, %r485;
	// end inline asm
	st.shared.u32 	[%rd9], %r422;
	st.shared.u32 	[%rd10], %r426;
	st.shared.u32 	[%rd11], %r430;
	st.shared.u32 	[%rd12], %r434;
	st.shared.u32 	[%rd13], %r438;
	st.shared.u32 	[%rd14], %r442;
	st.shared.u32 	[%rd15], %r446;
	st.shared.u32 	[%rd16], %r450;
	st.shared.u32 	[%rd17], %r454;
	st.shared.u32 	[%rd18], %r458;
	st.shared.u32 	[%rd19], %r462;
	st.shared.u32 	[%rd20], %r466;
	st.shared.u32 	[%rd21], %r470;
	st.shared.u32 	[%rd22], %r474;
	st.shared.u32 	[%rd23], %r478;
	st.shared.u32 	[%rd24], %r482;
	bar.sync 	0;
	mov.u64 	%rd146, %rd28;
	mov.u64 	%rd147, %rd27;
	mov.u64 	%rd148, %rd26;
	mov.u64 	%rd149, %rd25;
	mov.u32 	%r2529, %r2520;
	mov.u32 	%r2530, %r2521;
	mov.u32 	%r2533, %r2510;
	mov.u32 	%r2534, %r2519;
	mov.u32 	%r2535, %r2518;
	mov.u32 	%r2536, %r2513;
	mov.u32 	%r2537, %r2512;
$L__BB0_32:                             // %pass5622
                                        //   Parent Loop BB0_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2521, %r2532;
	mov.u32 	%r2520, %r2531;
	mov.u32 	%r2519, %r2530;
	mov.u32 	%r2518, %r2529;
	mov.u32 	%r2512, %r2528;
	mov.u32 	%r2513, %r2527;
	mov.u32 	%r2528, %r2526;
	mov.u32 	%r2527, %r2525;
	or.b32  	%r2375, %r25, %r2533;
	add.s32 	%r2376, %r2375, %r44;
	and.b32  	%r2377, %r2376, 1;
	neg.s32 	%r2378, %r2377;
	and.b32  	%r2379, %r2378, 1040;
	bfe.s32 	%r2380, %r2376, 1, 1;
	and.b32  	%r2381, %r2380, 520;
	bfe.s32 	%r2382, %r2376, 2, 1;
	and.b32  	%r2383, %r2382, 260;
	bfe.u32 	%r2384, %r2376, 6, 2;
	mul.lo.s32 	%r2385, %r2384, 2081;
	bfe.s32 	%r2386, %r2376, 4, 1;
	and.b32  	%r2387, %r2386, 65;
	bfe.s32 	%r2388, %r2376, 3, 1;
	and.b32  	%r2389, %r2388, 130;
	or.b32  	%r2390, %r26, %r2379;
	or.b32  	%r2391, %r2390, %r2381;
	add.s32 	%r2392, %r2391, %r2383;
	add.s32 	%r2393, %r2392, %r2385;
	add.s32 	%r2394, %r2393, %r2387;
	add.s32 	%r2395, %r2394, %r2389;
	mul.wide.u32 	%rd85, %r2395, 4;
	add.s64 	%rd87, %rd50, %rd85;
	ld.shared.u32 	%r2526, [%rd87];
	// begin inline asm
	mov.b32 %r568, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r579, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r567, %r2526, -2004318072;
	mov.u32 	%r566, 983055;
	// begin inline asm
	lop3.b32 %r565, %r566, %r567, %r568, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r569, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r570, %r568, %r569;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r573, %r565, %r570;
	// end inline asm
	mov.u32 	%r577, 15728880;
	// begin inline asm
	lop3.b32 %r576, %r577, %r567, %r579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r580, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r581, %r579, %r580;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r584, %r576, %r581;
	// end inline asm
	shr.u32 	%r589, %r567, 8;
	// begin inline asm
	lop3.b32 %r587, %r566, %r589, %r568, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r591, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r592, %r568, %r591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r595, %r587, %r592;
	// end inline asm
	// begin inline asm
	lop3.b32 %r598, %r577, %r589, %r579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r602, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r603, %r579, %r602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r606, %r598, %r603;
	// end inline asm
	// begin inline asm
	mov.b32 %r614, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r625, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r613, %r2537, -2004318072;
	// begin inline asm
	lop3.b32 %r611, %r566, %r613, %r614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r615, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r616, %r614, %r615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r619, %r611, %r616;
	// end inline asm
	// begin inline asm
	lop3.b32 %r622, %r577, %r613, %r625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r626, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r627, %r625, %r626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r630, %r622, %r627;
	// end inline asm
	shr.u32 	%r635, %r613, 8;
	// begin inline asm
	lop3.b32 %r633, %r566, %r635, %r614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r637, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r638, %r614, %r637;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r641, %r633, %r638;
	// end inline asm
	// begin inline asm
	lop3.b32 %r644, %r577, %r635, %r625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r648, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r649, %r625, %r648;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r652, %r644, %r649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r657, %r158, %r619, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r663, %r158, %r630, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r669, %r158, %r641, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r675, %r158, %r652, %r2510;
	// end inline asm
	// begin inline asm
	mov.b32 %r684, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r695, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r683, %r2512, -2004318072;
	// begin inline asm
	lop3.b32 %r681, %r566, %r683, %r684, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r685, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r686, %r684, %r685;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r689, %r681, %r686;
	// end inline asm
	// begin inline asm
	lop3.b32 %r692, %r577, %r683, %r695, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r696, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r697, %r695, %r696;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r700, %r692, %r697;
	// end inline asm
	shr.u32 	%r705, %r683, 8;
	// begin inline asm
	lop3.b32 %r703, %r566, %r705, %r684, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r707, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r708, %r684, %r707;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r711, %r703, %r708;
	// end inline asm
	// begin inline asm
	lop3.b32 %r714, %r577, %r705, %r695, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r718, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r719, %r695, %r718;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r722, %r714, %r719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r725, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r727, %r725, %r689, %r657;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r731, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r733, %r731, %r700, %r663;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r737, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r739, %r737, %r711, %r669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r743, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r745, %r743, %r722, %r675;
	// end inline asm
	// begin inline asm
	mov.b32 %r754, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r765, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r753, %r2528, -2004318072;
	// begin inline asm
	lop3.b32 %r751, %r566, %r753, %r754, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r755, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r756, %r754, %r755;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r759, %r751, %r756;
	// end inline asm
	// begin inline asm
	lop3.b32 %r762, %r577, %r753, %r765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r766, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r767, %r765, %r766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r770, %r762, %r767;
	// end inline asm
	shr.u32 	%r775, %r753, 8;
	// begin inline asm
	lop3.b32 %r773, %r566, %r775, %r754, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r777, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r778, %r754, %r777;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r781, %r773, %r778;
	// end inline asm
	// begin inline asm
	lop3.b32 %r784, %r577, %r775, %r765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r788, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r789, %r765, %r788;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r792, %r784, %r789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r797, %r220, %r759, %r727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r803, %r220, %r770, %r733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r809, %r220, %r781, %r739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r815, %r220, %r792, %r745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r819, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r850, %r819, %r573, %r797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r825, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r847, %r825, %r584, %r803;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r831, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r859, %r831, %r595, %r809;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r837, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r856, %r837, %r606, %r815;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r843, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r845, %r843, %r847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r848, %r254, %r850, %r845;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r852, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r854, %r852, %r856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r857, %r254, %r859, %r854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r861, %r257, %r850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r864, %r254, %r847, %r861;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r868, %r257, %r859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r871, %r254, %r856, %r868;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r902, %r899}, {%r260, %r266, %r263, %r269}, {%r848, %r864}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r911, %r908}, {%r260, %r266, %r263, %r269}, {%r857, %r871}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r895, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r897, %r895, %r899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r900, %r272, %r902, %r897;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r904, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r906, %r904, %r908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r909, %r272, %r911, %r906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r913, %r275, %r902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r916, %r272, %r899, %r913;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r920, %r275, %r911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r923, %r272, %r908, %r920;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r927, %r928}, {%r278, %r284, %r281, %r287}, {%r900, %r916}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r937, %r938}, {%r278, %r284, %r281, %r287}, {%r909, %r923}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r947, %r54, %r927;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r950, %r54, %r928;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r953, %r54, %r937;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r956, %r54, %r938;
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs260, %rs260};
	// end inline asm
	mov.u16 	%rs51, 18176;
	// begin inline asm
	mov.b32 %r960, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r961, %r947, %r959;
	// end inline asm
	// begin inline asm
	min.f16x2 %r964, %r961, %r960;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r969, %r950, %r967;
	// end inline asm
	// begin inline asm
	min.f16x2 %r972, %r969, %r968;
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r977, %r953, %r975;
	// end inline asm
	// begin inline asm
	min.f16x2 %r980, %r977, %r976;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r984, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r985, %r956, %r983;
	// end inline asm
	// begin inline asm
	min.f16x2 %r988, %r985, %r984;
	// end inline asm
	mov.u16 	%rs65, 26112;
	// begin inline asm
	mov.b32 %r994, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r992, %r964, %r994;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r995, %r972, %r994;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r998, %r980, %r994;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r988, %r994;
	// end inline asm
	mov.u32 	%r1007, 25152;
	// begin inline asm
	prmt.b32 %r1004, %r992, %r998, %r1007;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1008, %r995, %r1001, %r1007;
	// end inline asm
	shl.b32 	%r1015, %r1008, 4;
	mov.u32 	%r1013, 252645135;
	// begin inline asm
	lop3.b32 %r1012, %r1013, %r1004, %r1015, 202;
	// end inline asm
	st.shared.u32 	[%rd146], %r1012;
	or.b32  	%r2396, %r27, %r2379;
	add.s32 	%r2397, %r2396, %r2381;
	add.s32 	%r2398, %r2397, %r2383;
	add.s32 	%r2399, %r2398, %r2385;
	add.s32 	%r2400, %r2399, %r2387;
	add.s32 	%r2401, %r2400, %r2389;
	mul.wide.u32 	%rd88, %r2401, 4;
	add.s64 	%rd89, %rd50, %rd88;
	ld.shared.u32 	%r2525, [%rd89];
	// begin inline asm
	mov.b32 %r1021, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1032, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1020, %r2525, -2004318072;
	// begin inline asm
	lop3.b32 %r1018, %r566, %r1020, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1029, %r577, %r1020, %r1032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1034, %r1032, %r1033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1037, %r1029, %r1034;
	// end inline asm
	shr.u32 	%r1042, %r1020, 8;
	// begin inline asm
	lop3.b32 %r1040, %r566, %r1042, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1045, %r1021, %r1044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1048, %r1040, %r1045;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1051, %r577, %r1042, %r1032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1055, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1056, %r1032, %r1055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1059, %r1051, %r1056;
	// end inline asm
	// begin inline asm
	mov.b32 %r1067, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1078, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1066, %r2536, -2004318072;
	// begin inline asm
	lop3.b32 %r1064, %r566, %r1066, %r1067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1069, %r1067, %r1068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1072, %r1064, %r1069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1075, %r577, %r1066, %r1078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1079, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1080, %r1078, %r1079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1083, %r1075, %r1080;
	// end inline asm
	shr.u32 	%r1088, %r1066, 8;
	// begin inline asm
	lop3.b32 %r1086, %r566, %r1088, %r1067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1090, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1091, %r1067, %r1090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1094, %r1086, %r1091;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1097, %r577, %r1088, %r1078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1101, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1102, %r1078, %r1101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1105, %r1097, %r1102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1110, %r158, %r1072, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r158, %r1083, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1122, %r158, %r1094, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r158, %r1105, %r2510;
	// end inline asm
	// begin inline asm
	mov.b32 %r1137, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1148, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1136, %r2513, -2004318072;
	// begin inline asm
	lop3.b32 %r1134, %r566, %r1136, %r1137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1138, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1139, %r1137, %r1138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1142, %r1134, %r1139;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1145, %r577, %r1136, %r1148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1149, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1150, %r1148, %r1149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1153, %r1145, %r1150;
	// end inline asm
	shr.u32 	%r1158, %r1136, 8;
	// begin inline asm
	lop3.b32 %r1156, %r566, %r1158, %r1137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1160, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1161, %r1137, %r1160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1164, %r1156, %r1161;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1167, %r577, %r1158, %r1148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1171, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1172, %r1148, %r1171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1175, %r1167, %r1172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1178, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1180, %r1178, %r1142, %r1110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1184, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r1184, %r1153, %r1116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1190, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1192, %r1190, %r1164, %r1122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1196, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1198, %r1196, %r1175, %r1128;
	// end inline asm
	// begin inline asm
	mov.b32 %r1207, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1218, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1206, %r2527, -2004318072;
	// begin inline asm
	lop3.b32 %r1204, %r566, %r1206, %r1207, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1208, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1209, %r1207, %r1208;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1212, %r1204, %r1209;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1215, %r577, %r1206, %r1218, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1219, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1220, %r1218, %r1219;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1223, %r1215, %r1220;
	// end inline asm
	shr.u32 	%r1228, %r1206, 8;
	// begin inline asm
	lop3.b32 %r1226, %r566, %r1228, %r1207, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1230, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1231, %r1207, %r1230;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1234, %r1226, %r1231;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1237, %r577, %r1228, %r1218, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1241, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1242, %r1218, %r1241;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1245, %r1237, %r1242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1250, %r220, %r1212, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1256, %r220, %r1223, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1262, %r220, %r1234, %r1192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1268, %r220, %r1245, %r1198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1272, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1303, %r1272, %r1026, %r1250;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1278, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1300, %r1278, %r1037, %r1256;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1284, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1312, %r1284, %r1048, %r1262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1290, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1309, %r1290, %r1059, %r1268;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1296, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1298, %r1296, %r1300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1301, %r254, %r1303, %r1298;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1305, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1307, %r1305, %r1309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1310, %r254, %r1312, %r1307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1314, %r257, %r1303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1317, %r254, %r1300, %r1314;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1321, %r257, %r1312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1324, %r254, %r1309, %r1321;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1355, %r1352}, {%r260, %r266, %r263, %r269}, {%r1301, %r1317}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1364, %r1361}, {%r260, %r266, %r263, %r269}, {%r1310, %r1324}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1348, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1350, %r1348, %r1352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1353, %r272, %r1355, %r1350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1357, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1359, %r1357, %r1361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r272, %r1364, %r1359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1366, %r275, %r1355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1369, %r272, %r1352, %r1366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1373, %r275, %r1364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1376, %r272, %r1361, %r1373;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1380, %r1381}, {%r278, %r284, %r281, %r287}, {%r1353, %r1369}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1390, %r1391}, {%r278, %r284, %r281, %r287}, {%r1362, %r1376}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1400, %r54, %r1380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1403, %r54, %r1381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1406, %r54, %r1390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1409, %r54, %r1391;
	// end inline asm
	// begin inline asm
	mov.b32 %r1412, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1413, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1414, %r1400, %r1412;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1417, %r1414, %r1413;
	// end inline asm
	// begin inline asm
	mov.b32 %r1420, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1421, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1422, %r1403, %r1420;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1425, %r1422, %r1421;
	// end inline asm
	// begin inline asm
	mov.b32 %r1428, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1429, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1430, %r1406, %r1428;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1433, %r1430, %r1429;
	// end inline asm
	// begin inline asm
	mov.b32 %r1436, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1437, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1438, %r1409, %r1436;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1441, %r1438, %r1437;
	// end inline asm
	// begin inline asm
	mov.b32 %r1447, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1445, %r1417, %r1447;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1448, %r1425, %r1447;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1451, %r1433, %r1447;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1454, %r1441, %r1447;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1457, %r1445, %r1451, %r1007;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1461, %r1448, %r1454, %r1007;
	// end inline asm
	shl.b32 	%r1468, %r1461, 4;
	// begin inline asm
	lop3.b32 %r1465, %r1013, %r1457, %r1468, 202;
	// end inline asm
	st.shared.u32 	[%rd147], %r1465;
	add.s32 	%r2402, %r28, %r2379;
	or.b32  	%r2403, %r2402, %r2381;
	add.s32 	%r2404, %r2403, %r2383;
	add.s32 	%r2405, %r2404, %r2385;
	add.s32 	%r2406, %r2405, %r2387;
	add.s32 	%r2407, %r2406, %r2389;
	mul.wide.u32 	%rd90, %r2407, 4;
	add.s64 	%rd91, %rd50, %rd90;
	ld.shared.u32 	%r2531, [%rd91];
	// begin inline asm
	mov.b32 %r1474, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1485, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1473, %r2531, -2004318072;
	// begin inline asm
	lop3.b32 %r1471, %r566, %r1473, %r1474, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1475, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1476, %r1474, %r1475;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1479, %r1471, %r1476;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1482, %r577, %r1473, %r1485, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1486, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1487, %r1485, %r1486;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1490, %r1482, %r1487;
	// end inline asm
	shr.u32 	%r1495, %r1473, 8;
	// begin inline asm
	lop3.b32 %r1493, %r566, %r1495, %r1474, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1497, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1498, %r1474, %r1497;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1501, %r1493, %r1498;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1504, %r577, %r1495, %r1485, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1508, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1509, %r1485, %r1508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1512, %r1504, %r1509;
	// end inline asm
	// begin inline asm
	mov.b32 %r1520, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1531, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1519, %r2535, -2004318072;
	// begin inline asm
	lop3.b32 %r1517, %r566, %r1519, %r1520, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1521, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1522, %r1520, %r1521;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1525, %r1517, %r1522;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1528, %r577, %r1519, %r1531, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1532, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1533, %r1531, %r1532;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1536, %r1528, %r1533;
	// end inline asm
	shr.u32 	%r1541, %r1519, 8;
	// begin inline asm
	lop3.b32 %r1539, %r566, %r1541, %r1520, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1543, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1544, %r1520, %r1543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1547, %r1539, %r1544;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1550, %r577, %r1541, %r1531, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1554, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1555, %r1531, %r1554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1558, %r1550, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1563, %r158, %r1525, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1569, %r158, %r1536, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r158, %r1547, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1581, %r158, %r1558, %r2510;
	// end inline asm
	// begin inline asm
	mov.b32 %r1590, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1601, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1589, %r2518, -2004318072;
	// begin inline asm
	lop3.b32 %r1587, %r566, %r1589, %r1590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1591, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1592, %r1590, %r1591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1595, %r1587, %r1592;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1598, %r577, %r1589, %r1601, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1602, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1603, %r1601, %r1602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1606, %r1598, %r1603;
	// end inline asm
	shr.u32 	%r1611, %r1589, 8;
	// begin inline asm
	lop3.b32 %r1609, %r566, %r1611, %r1590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1613, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1614, %r1590, %r1613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1617, %r1609, %r1614;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1620, %r577, %r1611, %r1601, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1624, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1625, %r1601, %r1624;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1628, %r1620, %r1625;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1631, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1633, %r1631, %r1595, %r1563;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1637, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r1637, %r1606, %r1569;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1643, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1645, %r1643, %r1617, %r1575;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1649, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r1649, %r1628, %r1581;
	// end inline asm
	// begin inline asm
	mov.b32 %r1660, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1671, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1659, %r2520, -2004318072;
	// begin inline asm
	lop3.b32 %r1657, %r566, %r1659, %r1660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1661, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1662, %r1660, %r1661;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1665, %r1657, %r1662;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1668, %r577, %r1659, %r1671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1672, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1673, %r1671, %r1672;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1676, %r1668, %r1673;
	// end inline asm
	shr.u32 	%r1681, %r1659, 8;
	// begin inline asm
	lop3.b32 %r1679, %r566, %r1681, %r1660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1683, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1684, %r1660, %r1683;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1687, %r1679, %r1684;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1690, %r577, %r1681, %r1671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1694, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1695, %r1671, %r1694;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1698, %r1690, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r220, %r1665, %r1633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r220, %r1676, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r220, %r1687, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r220, %r1698, %r1651;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1725, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r1725, %r1479, %r1703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r1731, %r1490, %r1709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1737, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r1737, %r1501, %r1715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1743, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r1743, %r1512, %r1721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1749, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r1749, %r1753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r254, %r1756, %r1751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1758, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r1758, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r254, %r1765, %r1760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r257, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r254, %r1753, %r1767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r257, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r254, %r1762, %r1774;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1808, %r1805}, {%r260, %r266, %r263, %r269}, {%r1754, %r1770}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1817, %r1814}, {%r260, %r266, %r263, %r269}, {%r1763, %r1777}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1801, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r1801, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r272, %r1808, %r1803;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1810, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1812, %r1810, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r272, %r1817, %r1812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1819, %r275, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r272, %r1805, %r1819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1826, %r275, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r272, %r1814, %r1826;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1833, %r1834}, {%r278, %r284, %r281, %r287}, {%r1806, %r1822}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1843, %r1844}, {%r278, %r284, %r281, %r287}, {%r1815, %r1829}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1853, %r54, %r1833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1856, %r54, %r1834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1859, %r54, %r1843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r54, %r1844;
	// end inline asm
	// begin inline asm
	mov.b32 %r1865, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1866, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1867, %r1853, %r1865;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1870, %r1867, %r1866;
	// end inline asm
	// begin inline asm
	mov.b32 %r1873, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1874, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1875, %r1856, %r1873;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1878, %r1875, %r1874;
	// end inline asm
	// begin inline asm
	mov.b32 %r1881, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1882, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1883, %r1859, %r1881;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1886, %r1883, %r1882;
	// end inline asm
	// begin inline asm
	mov.b32 %r1889, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1890, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1891, %r1862, %r1889;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1894, %r1891, %r1890;
	// end inline asm
	// begin inline asm
	mov.b32 %r1900, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1898, %r1870, %r1900;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1901, %r1878, %r1900;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1904, %r1886, %r1900;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1907, %r1894, %r1900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1910, %r1898, %r1904, %r1007;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1914, %r1901, %r1907, %r1007;
	// end inline asm
	shl.b32 	%r1921, %r1914, 4;
	// begin inline asm
	lop3.b32 %r1918, %r1013, %r1910, %r1921, 202;
	// end inline asm
	st.shared.u32 	[%rd148], %r1918;
	add.s32 	%r2408, %r29, %r2379;
	add.s32 	%r2409, %r2408, %r2381;
	add.s32 	%r2410, %r2409, %r2383;
	add.s32 	%r2411, %r2410, %r2385;
	add.s32 	%r2412, %r2411, %r2387;
	add.s32 	%r2413, %r2412, %r2389;
	mul.wide.u32 	%rd92, %r2413, 4;
	add.s64 	%rd93, %rd50, %rd92;
	ld.shared.u32 	%r2532, [%rd93];
	// begin inline asm
	mov.b32 %r1927, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1938, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1926, %r2532, -2004318072;
	// begin inline asm
	lop3.b32 %r1924, %r566, %r1926, %r1927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1928, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1929, %r1927, %r1928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1932, %r1924, %r1929;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1935, %r577, %r1926, %r1938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1939, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1940, %r1938, %r1939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1943, %r1935, %r1940;
	// end inline asm
	shr.u32 	%r1948, %r1926, 8;
	// begin inline asm
	lop3.b32 %r1946, %r566, %r1948, %r1927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1950, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1951, %r1927, %r1950;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1954, %r1946, %r1951;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1957, %r577, %r1948, %r1938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1961, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1962, %r1938, %r1961;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1965, %r1957, %r1962;
	// end inline asm
	// begin inline asm
	mov.b32 %r1973, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1984, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1972, %r2534, -2004318072;
	// begin inline asm
	lop3.b32 %r1970, %r566, %r1972, %r1973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1974, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1975, %r1973, %r1974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1978, %r1970, %r1975;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1981, %r577, %r1972, %r1984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1985, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1986, %r1984, %r1985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1989, %r1981, %r1986;
	// end inline asm
	shr.u32 	%r1994, %r1972, 8;
	// begin inline asm
	lop3.b32 %r1992, %r566, %r1994, %r1973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1996, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1997, %r1973, %r1996;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2000, %r1992, %r1997;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2003, %r577, %r1994, %r1984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2007, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2008, %r1984, %r2007;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2011, %r2003, %r2008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r158, %r1978, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2022, %r158, %r1989, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r158, %r2000, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r158, %r2011, %r2510;
	// end inline asm
	// begin inline asm
	mov.b32 %r2043, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2054, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2042, %r2519, -2004318072;
	// begin inline asm
	lop3.b32 %r2040, %r566, %r2042, %r2043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2044, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2045, %r2043, %r2044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2048, %r2040, %r2045;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2051, %r577, %r2042, %r2054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2055, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2056, %r2054, %r2055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2059, %r2051, %r2056;
	// end inline asm
	shr.u32 	%r2064, %r2042, 8;
	// begin inline asm
	lop3.b32 %r2062, %r566, %r2064, %r2043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2066, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2067, %r2043, %r2066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2070, %r2062, %r2067;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2073, %r577, %r2064, %r2054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2077, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2078, %r2054, %r2077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2081, %r2073, %r2078;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2084, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r2084, %r2048, %r2016;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2090, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2092, %r2090, %r2059, %r2022;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2096, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2098, %r2096, %r2070, %r2028;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2102, %r189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2104, %r2102, %r2081, %r2034;
	// end inline asm
	// begin inline asm
	mov.b32 %r2113, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2124, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2112, %r2521, -2004318072;
	// begin inline asm
	lop3.b32 %r2110, %r566, %r2112, %r2113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2114, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2115, %r2113, %r2114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2118, %r2110, %r2115;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2121, %r577, %r2112, %r2124, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2125, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2126, %r2124, %r2125;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2129, %r2121, %r2126;
	// end inline asm
	shr.u32 	%r2134, %r2112, 8;
	// begin inline asm
	lop3.b32 %r2132, %r566, %r2134, %r2113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2136, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2137, %r2113, %r2136;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2140, %r2132, %r2137;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2143, %r577, %r2134, %r2124, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2147, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2148, %r2124, %r2147;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2151, %r2143, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2156, %r220, %r2118, %r2086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r220, %r2129, %r2092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r220, %r2140, %r2098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r220, %r2151, %r2104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2178, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r2178, %r1932, %r2156;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2184, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2206, %r2184, %r1943, %r2162;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2190, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r2190, %r1954, %r2168;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2196, %r251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2215, %r2196, %r1965, %r2174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2202, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2204, %r2202, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2207, %r254, %r2209, %r2204;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2211, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r2211, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r254, %r2218, %r2213;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r257, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r254, %r2206, %r2220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2227, %r257, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r254, %r2215, %r2227;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2261, %r2258}, {%r260, %r266, %r263, %r269}, {%r2207, %r2223}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2270, %r2267}, {%r260, %r266, %r263, %r269}, {%r2216, %r2230}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2254, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2256, %r2254, %r2258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2259, %r272, %r2261, %r2256;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2263, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2265, %r2263, %r2267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2268, %r272, %r2270, %r2265;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2272, %r275, %r2261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2275, %r272, %r2258, %r2272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2279, %r275, %r2270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2282, %r272, %r2267, %r2279;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2286, %r2287}, {%r278, %r284, %r281, %r287}, {%r2259, %r2275}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2296, %r2297}, {%r278, %r284, %r281, %r287}, {%r2268, %r2282}, {%r2510, %r2510};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2306, %r54, %r2286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2309, %r54, %r2287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2312, %r54, %r2296;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2315, %r54, %r2297;
	// end inline asm
	// begin inline asm
	mov.b32 %r2318, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2319, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2320, %r2306, %r2318;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2323, %r2320, %r2319;
	// end inline asm
	// begin inline asm
	mov.b32 %r2326, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2327, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2328, %r2309, %r2326;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2331, %r2328, %r2327;
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2336, %r2312, %r2334;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2339, %r2336, %r2335;
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2343, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2344, %r2315, %r2342;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2347, %r2344, %r2343;
	// end inline asm
	// begin inline asm
	mov.b32 %r2353, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2351, %r2323, %r2353;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2354, %r2331, %r2353;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2357, %r2339, %r2353;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2347, %r2353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2363, %r2351, %r2357, %r1007;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2367, %r2354, %r2360, %r1007;
	// end inline asm
	shl.b32 	%r2374, %r2367, 4;
	// begin inline asm
	lop3.b32 %r2371, %r1013, %r2363, %r2374, 202;
	// end inline asm
	st.shared.u32 	[%rd149], %r2371;
	add.s32 	%r2533, %r2533, 64;
	add.s64 	%rd149, %rd149, 8324;
	add.s64 	%rd148, %rd148, 8324;
	add.s64 	%rd147, %rd147, 8324;
	add.s64 	%rd146, %rd146, 8324;
	setp.eq.s32 	%p162, %r2533, 256;
	mov.u32 	%r2529, %r2520;
	mov.u32 	%r2530, %r2521;
	mov.u32 	%r2534, %r2519;
	mov.u32 	%r2535, %r2518;
	mov.u32 	%r2536, %r2513;
	mov.u32 	%r2537, %r2512;
	@%p162 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;
$L__BB0_33:                             // %guard_exit10758
                                        //   in Loop: Header=BB0_31 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2419, [%rd6];
	ld.shared.u32 	%r2420, [%rd7+128];
	ld.shared.u32 	%r2427, [%rd7+4];
	ld.shared.u32 	%r2428, [%rd7+132];
	ld.shared.u32 	%r2435, [%rd6+8324];
	ld.shared.u32 	%r2436, [%rd7+8452];
	ld.shared.u32 	%r2443, [%rd7+8328];
	ld.shared.u32 	%r2444, [%rd7+8456];
	ld.shared.u32 	%r2451, [%rd6+16648];
	ld.shared.u32 	%r2452, [%rd7+16776];
	ld.shared.u32 	%r2459, [%rd7+16652];
	ld.shared.u32 	%r2460, [%rd7+16780];
	ld.shared.u32 	%r2467, [%rd6+24972];
	ld.shared.u32 	%r2468, [%rd7+25100];
	ld.shared.u32 	%r2475, [%rd7+24976];
	ld.shared.u32 	%r2476, [%rd7+25104];
	// begin inline asm
	prmt.b32 %r2414, %r2419, %r2420, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2418, %r2419, %r2420, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2422, %r2427, %r2428, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2426, %r2427, %r2428, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2430, %r2435, %r2436, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2434, %r2435, %r2436, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2438, %r2443, %r2444, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2442, %r2443, %r2444, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2446, %r2451, %r2452, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2450, %r2451, %r2452, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2454, %r2459, %r2460, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2458, %r2459, %r2460, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2462, %r2467, %r2468, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2466, %r2467, %r2468, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2470, %r2475, %r2476, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2474, %r2475, %r2476, %r485;
	// end inline asm
	selp.b32 	%r2478, %r2418, %r2414, %p149;
	shfl.sync.bfly.b32	%r87, %r2478, 8, 31, -1;
	selp.b32 	%r2479, %r2426, %r2422, %p149;
	shfl.sync.bfly.b32	%r88, %r2479, 8, 31, -1;
	selp.b32 	%r2480, %r2434, %r2430, %p149;
	shfl.sync.bfly.b32	%r2481, %r2480, 8, 31, -1;
	selp.b32 	%r2482, %r2442, %r2438, %p149;
	shfl.sync.bfly.b32	%r2483, %r2482, 8, 31, -1;
	selp.b32 	%r2484, %r2450, %r2446, %p149;
	shfl.sync.bfly.b32	%r2485, %r2484, 8, 31, -1;
	selp.b32 	%r2486, %r2458, %r2454, %p149;
	shfl.sync.bfly.b32	%r2487, %r2486, 8, 31, -1;
	selp.b32 	%r2488, %r2466, %r2462, %p149;
	shfl.sync.bfly.b32	%r2489, %r2488, 8, 31, -1;
	selp.b32 	%r2490, %r2474, %r2470, %p149;
	shfl.sync.bfly.b32	%r2491, %r2490, 8, 31, -1;
	setp.eq.s32 	%p164, %r45, 0;
	shl.b32 	%r2511, %r44, 10;
	@%p164 bra 	$L__BB0_35;
// %bb.34:                              // %pass9960
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r2492, %r88, %r2426, %p149;
	selp.b32 	%r2493, %r2422, %r88, %p149;
	selp.b32 	%r2494, %r87, %r2418, %p149;
	selp.b32 	%r2495, %r2414, %r87, %p149;
	or.b32  	%r2497, %r2511, %r30;
	or.b32  	%r2498, %r2497, %r22;
	cvt.s64.s32 	%rd94, %r2498;
	add.s64 	%rd95, %rd94, %rd8;
	shr.u64 	%rd96, %rd95, 39;
	add.s64 	%rd97, %rd95, %rd96;
	shr.s64 	%rd98, %rd97, 25;
	setp.lt.s64 	%p166, %rd95, 0;
	and.b64  	%rd99, %rd97, -33554432;
	setp.ne.s64 	%p167, %rd99, %rd95;
	and.pred  	%p168, %p166, %p167;
	selp.u64 	%rd100, 1, 0, %p168;
	sub.s64 	%rd101, %rd100, %rd98;
	shl.b64 	%rd102, %rd101, 25;
	add.s64 	%rd103, %rd102, %rd95;
	shl.b64 	%rd104, %rd103, 2;
	add.s64 	%rd105, %rd3, %rd104;
	st.global.v4.u32 	[%rd105], {%r2495, %r2493, %r2494, %r2492};
$L__BB0_35:                             // %pass9973
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r81, %r44, 64;
	setp.lt.u32 	%p169, %r81, 192;
	@%p169 bra 	$L__BB0_37;
// %bb.36:                              // %pass10058
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r89, %r2430, %r2481, %p149;
	selp.b32 	%r90, %r2481, %r2434, %p149;
	selp.b32 	%r91, %r2438, %r2483, %p149;
	selp.b32 	%r92, %r2483, %r2442, %p149;
	shl.b32 	%r2499, %r81, 10;
	or.b32  	%r2500, %r31, %r2499;
	cvt.s64.s32 	%rd106, %r2500;
	add.s64 	%rd107, %rd106, %rd8;
	shr.u64 	%rd108, %rd107, 39;
	add.s64 	%rd109, %rd107, %rd108;
	shr.s64 	%rd110, %rd109, 25;
	setp.lt.s64 	%p170, %rd107, 0;
	and.b64  	%rd111, %rd109, -33554432;
	setp.ne.s64 	%p171, %rd111, %rd107;
	and.pred  	%p172, %p170, %p171;
	selp.u64 	%rd112, 1, 0, %p172;
	sub.s64 	%rd113, %rd112, %rd110;
	shl.b64 	%rd114, %rd113, 25;
	add.s64 	%rd115, %rd114, %rd107;
	shl.b64 	%rd116, %rd115, 2;
	add.s64 	%rd117, %rd3, %rd116;
	st.global.v4.u32 	[%rd117], {%r89, %r91, %r90, %r92};
$L__BB0_37:                             // %pass10071
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r82, %r44, 128;
	selp.b32 	%r97, %r2462, %r2489, %p149;
	selp.b32 	%r98, %r2489, %r2466, %p149;
	selp.b32 	%r99, %r2470, %r2491, %p149;
	selp.b32 	%r100, %r2491, %r2474, %p149;
	setp.lt.u32 	%p173, %r82, 192;
	@%p173 bra 	$L__BB0_39;
// %bb.38:                              // %pass10156
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r93, %r2446, %r2485, %p149;
	selp.b32 	%r94, %r2485, %r2450, %p149;
	selp.b32 	%r95, %r2454, %r2487, %p149;
	selp.b32 	%r96, %r2487, %r2458, %p149;
	shl.b32 	%r2501, %r82, 10;
	or.b32  	%r2502, %r31, %r2501;
	cvt.s64.s32 	%rd118, %r2502;
	add.s64 	%rd119, %rd118, %rd8;
	shr.u64 	%rd120, %rd119, 39;
	add.s64 	%rd121, %rd119, %rd120;
	shr.s64 	%rd122, %rd121, 25;
	setp.lt.s64 	%p174, %rd119, 0;
	and.b64  	%rd123, %rd121, -33554432;
	setp.ne.s64 	%p175, %rd123, %rd119;
	and.pred  	%p176, %p174, %p175;
	selp.u64 	%rd124, 1, 0, %p176;
	sub.s64 	%rd125, %rd124, %rd122;
	shl.b64 	%rd126, %rd125, 25;
	add.s64 	%rd127, %rd126, %rd119;
	shl.b64 	%rd128, %rd127, 2;
	add.s64 	%rd129, %rd3, %rd128;
	st.global.v4.u32 	[%rd129], {%r93, %r95, %r94, %r96};
	bra.uni 	$L__BB0_39;
$L__BB0_40:                             // %L21897
	st.global.u32 	[%rd5], %r2510;
	ret;
$L__BB0_9:                              // %L177
	mov.u32 	%r2509, 2;
	st.global.u32 	[%rd5], %r2509;
	mov.u64 	%rd144, exception2044;
	cvta.global.u64 	%rd145, %rd144;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd145;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r101;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L283
	mov.u32 	%r2508, 3;
	st.global.u32 	[%rd5], %r2508;
	mov.u64 	%rd142, exception2044;
	cvta.global.u64 	%rd143, %rd142;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd143;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r101;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd42, exception12063;
	cvta.global.u64 	%rd43, %rd42;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd43;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r101;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd44, exception12063;
	cvta.global.u64 	%rd45, %rd44;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd45;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r101;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
