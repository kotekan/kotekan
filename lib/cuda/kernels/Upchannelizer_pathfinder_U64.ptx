// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_11300
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11311
(
	.param .align 8 .b8 julia_power_by_squaring_11311_param_0[16],
	.param .b64 julia_power_by_squaring_11311_param_1,
	.param .b64 julia_power_by_squaring_11311_param_2
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3309[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<259>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8039>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<182>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r180, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd35, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r181, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r181, 66815;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd52, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd36, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r182, %r3, 9;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r183, %r182, %r4;
	or.b32  	%r184, %r183, %r2;
	mul.wide.u32 	%rd58, %r184, 4;
	add.s64 	%rd4, %rd52, %rd58;
	mov.u32 	%r185, 1;
	st.global.u32 	[%rd4], %r185;
	ld.global.u32 	%r5, [%rd36];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	LBB0_7;
// %bb.3:                               // %L205
	ld.param.u64 	%rd40, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd40];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_7;
// %bb.4:                               // %L215
	ld.param.u64 	%rd44, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd44];
	sub.s32 	%r186, %r6, %r5;
	and.b32  	%r187, %r186, 255;
	setp.ne.s32 	%p6, %r187, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB0_7;
// %bb.5:                               // %L221
	ld.param.u64 	%rd48, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd48];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 4096;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	LBB0_7;
// %bb.6:                               // %L231
	not.b32 	%r188, %r7;
	add.s32 	%r189, %r188, %r8;
	and.b32  	%r190, %r189, 3;
	setp.eq.s32 	%p12, %r190, 0;
	@%p12 bra 	LBB0_8;
	bra.uni 	LBB0_7;
LBB0_8:                                 // %L341
	bfe.u32 	%r19, %r4, 1, 1;
	and.b32  	%r20, %r4, 1;
	bfe.u32 	%r21, %r4, 2, 1;
	shr.u32 	%r22, %r4, 4;
	shl.b32 	%r197, %r22, 1;
	shl.b32 	%r198, %r21, 2;
	shl.b32 	%r199, %r20, 3;
	shl.b32 	%r200, %r19, 4;
	or.b32  	%r201, %r199, %r200;
	or.b32  	%r202, %r198, %r201;
	or.b32  	%r203, %r197, %r202;
	bfe.u32 	%r24, %r4, 3, 1;
	or.b32  	%r25, %r24, %r203;
	or.b32  	%r26, %r25, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f1, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r25;
	sub.f32 	%f184, %f183, %f1;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f3, %f184, %f213;
	setp.eq.f32 	%p18, %f3, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	LBB0_10;
// %bb.9:                               // %L574
	sin.approx.f32 	%f214, %f3;
	div.approx.f32 	%f874, %f214, %f3;
LBB0_10:                                // %L577
	cvt.rn.f32.s32 	%f217, %r26;
	sub.f32 	%f218, %f217, %f1;
	div.approx.f32 	%f8, %f218, %f213;
	setp.eq.f32 	%p24, %f8, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	LBB0_12;
// %bb.11:                              // %L594
	sin.approx.f32 	%f248, %f8;
	div.approx.f32 	%f875, %f248, %f8;
LBB0_12:                                // %L597
	shl.b32 	%r9, %r4, 1;
	or.b32  	%r221, %r25, 64;
	or.b32  	%r28, %r25, 96;
	cvt.rn.f32.s32 	%f252, %r221;
	sub.f32 	%f253, %f252, %f1;
	div.approx.f32 	%f12, %f253, %f213;
	setp.eq.f32 	%p30, %f12, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	LBB0_14;
// %bb.13:                              // %L676
	sin.approx.f32 	%f283, %f12;
	div.approx.f32 	%f876, %f283, %f12;
LBB0_14:                                // %L679
	and.b32  	%r10, %r9, 8;
	shl.b32 	%r11, %r3, 6;
	shl.b32 	%r12, %r4, 2;
	cvt.rn.f32.s32 	%f286, %r28;
	sub.f32 	%f287, %f286, %f1;
	div.approx.f32 	%f17, %f287, %f213;
	setp.eq.f32 	%p36, %f17, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	LBB0_16;
// %bb.15:                              // %L696
	sin.approx.f32 	%f317, %f17;
	div.approx.f32 	%f877, %f317, %f17;
LBB0_16:                                // %L699
	or.b32  	%r191, %r10, %r11;
	and.b32  	%r13, %r12, 32;
	or.b32  	%r239, %r25, 128;
	or.b32  	%r30, %r25, 160;
	cvt.rn.f32.s32 	%f321, %r239;
	sub.f32 	%f322, %f321, %f1;
	div.approx.f32 	%f21, %f322, %f213;
	setp.eq.f32 	%p42, %f21, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	LBB0_18;
// %bb.17:                              // %L778
	sin.approx.f32 	%f352, %f21;
	div.approx.f32 	%f878, %f352, %f21;
LBB0_18:                                // %L781
	or.b32  	%r192, %r191, %r13;
	and.b32  	%r14, %r4, 16;
	cvt.rn.f32.s32 	%f355, %r30;
	sub.f32 	%f356, %f355, %f1;
	div.approx.f32 	%f26, %f356, %f213;
	setp.eq.f32 	%p48, %f26, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	LBB0_20;
// %bb.19:                              // %L798
	sin.approx.f32 	%f386, %f26;
	div.approx.f32 	%f879, %f386, %f26;
LBB0_20:                                // %L801
	or.b32  	%r193, %r192, %r14;
	and.b32  	%r15, %r4, 2;
	or.b32  	%r257, %r25, 192;
	or.b32  	%r32, %r25, 224;
	cvt.rn.f32.s32 	%f390, %r257;
	sub.f32 	%f391, %f390, %f1;
	div.approx.f32 	%f30, %f391, %f213;
	setp.eq.f32 	%p54, %f30, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	LBB0_22;
// %bb.21:                              // %L880
	sin.approx.f32 	%f421, %f30;
	div.approx.f32 	%f880, %f421, %f30;
LBB0_22:                                // %L883
	or.b32  	%r194, %r193, %r15;
	and.b32  	%r16, %r12, 4;
	cvt.rn.f32.s32 	%f424, %r32;
	sub.f32 	%f425, %f424, %f1;
	div.approx.f32 	%f35, %f425, %f213;
	setp.eq.f32 	%p60, %f35, 0f00000000;
	@%p60 bra 	LBB0_24;
// %bb.23:                              // %L900
	sin.approx.f32 	%f455, %f35;
	div.approx.f32 	%f881, %f455, %f35;
LBB0_24:                                // %L903
	or.b32  	%r195, %r194, %r16;
	mul.lo.s32 	%r34, %r25, 63;
	cvt.rn.f32.s32 	%f458, %r34;
	div.approx.f32 	%f38, %f458, %f213;
	abs.f32 	%f884, %f38;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	LBB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	LBB0_32;
	bra.uni 	LBB0_26;
LBB0_32:
	mov.b32 	%r36, %f884;
	and.b32  	%r275, %r36, 8388607;
	or.b32  	%r7997, %r275, 1065353216;
	mov.b32 	%f883, %r7997;
	add.s32 	%r276, %r36, -1073741824;
	and.b32  	%r7998, %r276, -8388608;
	setp.eq.s32 	%p68, %r7998, 0;
	@%p68 bra 	LBB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
LBB0_34:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r277, %r7998, 192937984;
	add.s32 	%r278, %r277, %r7997;
	mov.b32 	%f470, %r278;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r7998, %r7998, %r277;
	mov.b32 	%r7997, %f883;
	setp.ne.s32 	%p69, %r7998, 0;
	setp.ne.s32 	%p70, %r7997, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	LBB0_34;
LBB0_35:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r36, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	LBB0_36;
LBB0_26:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f41, %f882, 0fC0000000, %f884;
	mov.b32 	%r35, %f41;
	setp.lt.u32 	%p63, %r35, 1073741824;
	@%p63 bra 	LBB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r35, -2147483647;
	@%p64 bra 	LBB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f41, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	LBB0_31;
LBB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f41, 0f40800000;
	@%p65 bra 	LBB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f41;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
LBB0_31:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
LBB0_36:                                // %__internal_fmodf_kernel.exit.i
	bfe.u32 	%r196, %r195, 1, 12;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	LBB0_38;
// %bb.37:
	mov.b32 	%r279, %f38;
	and.b32  	%r280, %r279, -2147483648;
	mov.b32 	%r281, %f884;
	or.b32  	%r282, %r280, %r281;
	mov.b32 	%f884, %r282;
LBB0_38:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd59, %r196, 4;
	add.s32 	%r291, %r34, 2016;
	cvt.rn.f32.s32 	%f510, %r291;
	div.approx.f32 	%f57, %f510, %f213;
	abs.f32 	%f888, %f57;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	LBB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	LBB0_46;
	bra.uni 	LBB0_40;
LBB0_46:
	mov.b32 	%r44, %f888;
	and.b32  	%r292, %r44, 8388607;
	or.b32  	%r7999, %r292, 1065353216;
	mov.b32 	%f887, %r7999;
	add.s32 	%r293, %r44, -1073741824;
	and.b32  	%r8000, %r293, -8388608;
	setp.eq.s32 	%p88, %r8000, 0;
	@%p88 bra 	LBB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i1276.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
LBB0_48:                                // %__nv_fmaf_rn.exit4.i.i.i1276
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r294, %r8000, 192937984;
	add.s32 	%r295, %r294, %r7999;
	mov.b32 	%f522, %r295;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r8000, %r8000, %r294;
	mov.b32 	%r7999, %f887;
	setp.ne.s32 	%p89, %r8000, 0;
	setp.ne.s32 	%p90, %r7999, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	LBB0_48;
LBB0_49:                                // %__internal_fmodf_slowpath_mod.exit.i.i1278
	setp.gt.u32 	%p92, %r44, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	LBB0_50;
LBB0_40:                                // %__nv_fast_fdividef.exit.i.i.i1248
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f60, %f886, 0fC0000000, %f888;
	mov.b32 	%r43, %f60;
	setp.lt.u32 	%p83, %r43, 1073741824;
	@%p83 bra 	LBB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r43, -2147483647;
	@%p84 bra 	LBB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f60, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	LBB0_45;
LBB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f60, 0f40800000;
	@%p85 bra 	LBB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i1253
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f60;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
LBB0_45:                                // %__internal_fmodf_fastpath_quot.exit.i.i1257
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
LBB0_50:                                // %__internal_fmodf_kernel.exit.i1282
	add.s64 	%rd60, %rd1, %rd59;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	LBB0_52;
// %bb.51:
	mov.b32 	%r296, %f57;
	and.b32  	%r297, %r296, -2147483648;
	mov.b32 	%r298, %f888;
	or.b32  	%r299, %r297, %r298;
	mov.b32 	%f888, %r299;
LBB0_52:                                // %__nv_fmodf.exit1283
	ld.global.u32 	%r17, [%rd60];
	mov.u64 	%rd61, 2;
	mov.u64 	%rd62, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11311, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd63, [retval0+0];
	} // callseq 2
	setp.ne.s64 	%p101, %rd63, 64;
	@%p101 bra 	LBB0_128;
// %bb.53:                              // %L1000
	shr.u32 	%r18, %r4, 1;
	shr.u32 	%r23, %r4, 3;
	and.b32  	%r314, %r4, 3;
	and.b32  	%r315, %r23, 2;
	or.b32  	%r316, %r21, %r315;
	and.b32  	%r317, %r18, 4;
	or.b32  	%r53, %r316, %r317;
	mul.lo.s32 	%r318, %r314, %r53;
	shl.b32 	%r319, %r318, 1;
	neg.s32 	%r320, %r319;
	cvt.rn.f32.s32 	%f74, %r320;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f75, %f74, %f564;
	abs.f32 	%f900, %f75;
	setp.lt.f32 	%p102, %f900, 0f40000000;
	mov.f32 	%f892, %f900;
	@%p102 bra 	LBB0_65;
// %bb.54:
	setp.gtu.f32 	%p103, %f900, 0f4B800000;
	@%p103 bra 	LBB0_61;
	bra.uni 	LBB0_55;
LBB0_61:
	mov.b32 	%r55, %f900;
	and.b32  	%r321, %r55, 8388607;
	or.b32  	%r8001, %r321, 1065353216;
	mov.b32 	%f891, %r8001;
	add.s32 	%r322, %r55, -1073741824;
	and.b32  	%r8002, %r322, -8388608;
	setp.eq.s32 	%p109, %r8002, 0;
	@%p109 bra 	LBB0_64;
// %bb.62:                              // %__nv_fmaf_rn.exit4.i.i.i1322.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
LBB0_63:                                // %__nv_fmaf_rn.exit4.i.i.i1322
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r323, %r8002, 192937984;
	add.s32 	%r324, %r323, %r8001;
	mov.b32 	%f575, %r324;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r8002, %r8002, %r323;
	mov.b32 	%r8001, %f891;
	setp.ne.s32 	%p110, %r8002, 0;
	setp.ne.s32 	%p111, %r8001, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	LBB0_63;
LBB0_64:                                // %__internal_fmodf_slowpath_mod.exit.i.i1324
	setp.gt.u32 	%p113, %r55, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	LBB0_65;
LBB0_55:                                // %__nv_fast_fdividef.exit.i.i.i1294
	div.approx.f32 	%f566, %f900, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f78, %f890, 0fC0000000, %f900;
	mov.b32 	%r54, %f78;
	setp.lt.u32 	%p104, %r54, 1073741824;
	@%p104 bra 	LBB0_60;
// %bb.56:
	setp.lt.u32 	%p105, %r54, -2147483647;
	@%p105 bra 	LBB0_58;
// %bb.57:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f78, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	LBB0_60;
LBB0_58:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f78, 0f40800000;
	@%p106 bra 	LBB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i1299
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f78;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
LBB0_60:                                // %__internal_fmodf_fastpath_quot.exit.i.i1303
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f900;
LBB0_65:                                // %__internal_fmodf_kernel.exit.i1328
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r325, %f75;
	and.b32  	%r62, %r325, -2147483648;
	@%p114 bra 	LBB0_67;
// %bb.66:
	mov.b32 	%r326, %f892;
	or.b32  	%r327, %r62, %r326;
	mov.b32 	%f892, %r327;
LBB0_67:                                // %__nv_fmodf.exit1329
	and.b32  	%r336, %r9, 6;
	mov.u32 	%r337, -8;
	sub.s32 	%r338, %r337, %r336;
	mul.lo.s32 	%r339, %r53, %r338;
	cvt.rn.f32.s32 	%f94, %r339;
	div.approx.f32 	%f95, %f94, %f564;
	abs.f32 	%f904, %f95;
	setp.lt.f32 	%p122, %f904, 0f40000000;
	mov.f32 	%f896, %f904;
	@%p122 bra 	LBB0_79;
// %bb.68:
	setp.gtu.f32 	%p123, %f904, 0f4B800000;
	@%p123 bra 	LBB0_75;
	bra.uni 	LBB0_69;
LBB0_75:
	mov.b32 	%r64, %f904;
	and.b32  	%r340, %r64, 8388607;
	or.b32  	%r8003, %r340, 1065353216;
	mov.b32 	%f895, %r8003;
	add.s32 	%r341, %r64, -1073741824;
	and.b32  	%r8004, %r341, -8388608;
	setp.eq.s32 	%p129, %r8004, 0;
	@%p129 bra 	LBB0_78;
// %bb.76:                              // %__nv_fmaf_rn.exit4.i.i.i1368.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
LBB0_77:                                // %__nv_fmaf_rn.exit4.i.i.i1368
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r342, %r8004, 192937984;
	add.s32 	%r343, %r342, %r8003;
	mov.b32 	%f626, %r343;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r8004, %r8004, %r342;
	mov.b32 	%r8003, %f895;
	setp.ne.s32 	%p130, %r8004, 0;
	setp.ne.s32 	%p131, %r8003, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	LBB0_77;
LBB0_78:                                // %__internal_fmodf_slowpath_mod.exit.i.i1370
	setp.gt.u32 	%p133, %r64, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	LBB0_79;
LBB0_69:                                // %__nv_fast_fdividef.exit.i.i.i1340
	div.approx.f32 	%f617, %f904, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f98, %f894, 0fC0000000, %f904;
	mov.b32 	%r63, %f98;
	setp.lt.u32 	%p124, %r63, 1073741824;
	@%p124 bra 	LBB0_74;
// %bb.70:
	setp.lt.u32 	%p125, %r63, -2147483647;
	@%p125 bra 	LBB0_72;
// %bb.71:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f98, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	LBB0_74;
LBB0_72:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f98, 0f40800000;
	@%p126 bra 	LBB0_74;
// %bb.73:                              // %__nv_fmaf_rn.exit.i.i.i1345
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f98;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
LBB0_74:                                // %__internal_fmodf_fastpath_quot.exit.i.i1349
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f904;
LBB0_79:                                // %__internal_fmodf_kernel.exit.i1374
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r344, %f95;
	and.b32  	%r71, %r344, -2147483648;
	@%p134 bra 	LBB0_81;
// %bb.80:
	mov.b32 	%r345, %f896;
	or.b32  	%r346, %r71, %r345;
	mov.b32 	%f896, %r346;
LBB0_81:                                // %__nv_fmodf.exit1375
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11311, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd69, [retval0+0];
	} // callseq 6
	setp.ne.s64 	%p142, %rd69, 64;
	@%p142 bra 	LBB0_127;
// %bb.82:                              // %L1157
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11311, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd75, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd75;
	div.approx.f32 	%f112, %f74, %f668;
	abs.f32 	%f908, %f112;
	setp.lt.f32 	%p143, %f908, 0f40000000;
	@%p143 bra 	LBB0_136;
// %bb.83:
	setp.gtu.f32 	%p144, %f908, 0f4B800000;
	@%p144 bra 	LBB0_132;
	bra.uni 	LBB0_84;
LBB0_132:
	mov.b32 	%r142, %f908;
	and.b32  	%r367, %r142, 8388607;
	or.b32  	%r8035, %r367, 1065353216;
	mov.b32 	%f907, %r8035;
	add.s32 	%r368, %r142, -1073741824;
	and.b32  	%r8036, %r368, -8388608;
	setp.eq.s32 	%p150, %r8036, 0;
	@%p150 bra 	LBB0_135;
// %bb.133:                             // %__nv_fmaf_rn.exit4.i.i.i1506.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
LBB0_134:                               // %__nv_fmaf_rn.exit4.i.i.i1506
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r369, %r8036, 192937984;
	add.s32 	%r370, %r369, %r8035;
	mov.b32 	%f679, %r370;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f907, %f679, %f685;
	sub.s32 	%r8036, %r8036, %r369;
	mov.b32 	%r8035, %f907;
	setp.ne.s32 	%p151, %r8036, 0;
	setp.ne.s32 	%p152, %r8035, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	LBB0_134;
LBB0_135:                               // %__internal_fmodf_slowpath_mod.exit.i.i1508
	setp.gt.u32 	%p154, %r142, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f907, 0f34000000;
	mul.f32 	%f908, %f686, %f687;
	bra.uni 	LBB0_136;
LBB0_84:                                // %__nv_fast_fdividef.exit.i.i.i1478
	div.approx.f32 	%f670, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f670;
	fma.rn.f32 	%f147, %f906, 0fC0000000, %f908;
	mov.b32 	%r141, %f147;
	setp.lt.u32 	%p145, %r141, 1073741824;
	@%p145 bra 	LBB0_131;
// %bb.85:
	setp.lt.u32 	%p146, %r141, -2147483647;
	@%p146 bra 	LBB0_129;
// %bb.86:
	add.f32 	%f675, %f906, 0fBF800000;
	setp.lt.f32 	%p149, %f147, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f906, %f676, %f675, %p149;
	bra.uni 	LBB0_131;
LBB0_129:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p147, %f147, 0f40800000;
	@%p147 bra 	LBB0_131;
// %bb.130:                             // %__nv_fmaf_rn.exit.i.i.i1483
	add.f32 	%f671, %f906, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f147;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f906, %f674, %f671, %p148;
LBB0_131:                               // %__internal_fmodf_fastpath_quot.exit.i.i1487
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
LBB0_136:                               // %__internal_fmodf_kernel.exit.i1512
	abs.f32 	%f688, %f908;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	LBB0_138;
// %bb.137:
	mov.b32 	%r371, %f112;
	and.b32  	%r372, %r371, -2147483648;
	mov.b32 	%r373, %f908;
	or.b32  	%r374, %r372, %r373;
	mov.b32 	%f908, %r374;
LBB0_138:                               // %__nv_fmodf.exit1513
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11311, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd79, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd79;
	div.approx.f32 	%f163, %f94, %f719;
	abs.f32 	%f912, %f163;
	setp.lt.f32 	%p163, %f912, 0f40000000;
	@%p163 bra 	LBB0_150;
// %bb.139:
	setp.gtu.f32 	%p164, %f912, 0f4B800000;
	@%p164 bra 	LBB0_146;
	bra.uni 	LBB0_140;
LBB0_146:
	mov.b32 	%r150, %f912;
	and.b32  	%r383, %r150, 8388607;
	or.b32  	%r8037, %r383, 1065353216;
	mov.b32 	%f911, %r8037;
	add.s32 	%r384, %r150, -1073741824;
	and.b32  	%r8038, %r384, -8388608;
	setp.eq.s32 	%p170, %r8038, 0;
	@%p170 bra 	LBB0_149;
// %bb.147:                             // %__nv_fmaf_rn.exit4.i.i.i1552.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
LBB0_148:                               // %__nv_fmaf_rn.exit4.i.i.i1552
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r385, %r8038, 192937984;
	add.s32 	%r386, %r385, %r8037;
	mov.b32 	%f730, %r386;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f911, %f730, %f736;
	sub.s32 	%r8038, %r8038, %r385;
	mov.b32 	%r8037, %f911;
	setp.ne.s32 	%p171, %r8038, 0;
	setp.ne.s32 	%p172, %r8037, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	LBB0_148;
LBB0_149:                               // %__internal_fmodf_slowpath_mod.exit.i.i1554
	setp.gt.u32 	%p174, %r150, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f911, 0f34000000;
	mul.f32 	%f912, %f737, %f738;
	bra.uni 	LBB0_150;
LBB0_140:                               // %__nv_fast_fdividef.exit.i.i.i1524
	div.approx.f32 	%f721, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f721;
	fma.rn.f32 	%f166, %f910, 0fC0000000, %f912;
	mov.b32 	%r149, %f166;
	setp.lt.u32 	%p165, %r149, 1073741824;
	@%p165 bra 	LBB0_145;
// %bb.141:
	setp.lt.u32 	%p166, %r149, -2147483647;
	@%p166 bra 	LBB0_143;
// %bb.142:
	add.f32 	%f726, %f910, 0fBF800000;
	setp.lt.f32 	%p169, %f166, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f910, %f727, %f726, %p169;
	bra.uni 	LBB0_145;
LBB0_143:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p167, %f166, 0f40800000;
	@%p167 bra 	LBB0_145;
// %bb.144:                             // %__nv_fmaf_rn.exit.i.i.i1529
	add.f32 	%f722, %f910, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f166;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f910, %f725, %f722, %p168;
LBB0_145:                               // %__internal_fmodf_fastpath_quot.exit.i.i1533
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
LBB0_150:                               // %__internal_fmodf_kernel.exit.i1558
	abs.f32 	%f739, %f912;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	LBB0_152;
// %bb.151:
	mov.b32 	%r387, %f163;
	and.b32  	%r388, %r387, -2147483648;
	mov.b32 	%r389, %f912;
	or.b32  	%r390, %r388, %r389;
	mov.b32 	%f912, %r390;
LBB0_152:                               // %__nv_fmodf.exit1559
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11311, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd83, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd83, 64;
	@%p183 bra 	LBB0_87;
	bra.uni 	LBB0_153;
LBB0_87:                                // %L1322
	@%p102 bra 	LBB0_99;
// %bb.88:
	setp.gtu.f32 	%p185, %f900, 0f4B800000;
	@%p185 bra 	LBB0_95;
	bra.uni 	LBB0_89;
LBB0_95:
	mov.b32 	%r77, %f900;
	and.b32  	%r405, %r77, 8388607;
	or.b32  	%r8005, %r405, 1065353216;
	mov.b32 	%f899, %r8005;
	add.s32 	%r406, %r77, -1073741824;
	and.b32  	%r8006, %r406, -8388608;
	setp.eq.s32 	%p191, %r8006, 0;
	@%p191 bra 	LBB0_98;
// %bb.96:                              // %__nv_fmaf_rn.exit4.i.i.i1414.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
LBB0_97:                                // %__nv_fmaf_rn.exit4.i.i.i1414
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r407, %r8006, 192937984;
	add.s32 	%r408, %r407, %r8005;
	mov.b32 	%f782, %r408;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f899, %f782, %f788;
	sub.s32 	%r8006, %r8006, %r407;
	mov.b32 	%r8005, %f899;
	setp.ne.s32 	%p192, %r8006, 0;
	setp.ne.s32 	%p193, %r8005, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	LBB0_97;
LBB0_98:                                // %__internal_fmodf_slowpath_mod.exit.i.i1416
	setp.gt.u32 	%p195, %r77, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f899, 0f34000000;
	mul.f32 	%f900, %f789, %f790;
	bra.uni 	LBB0_99;
LBB0_89:                                // %__nv_fast_fdividef.exit.i.i.i1386
	div.approx.f32 	%f773, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f773;
	fma.rn.f32 	%f115, %f898, 0fC0000000, %f900;
	mov.b32 	%r76, %f115;
	setp.lt.u32 	%p186, %r76, 1073741824;
	@%p186 bra 	LBB0_94;
// %bb.90:
	setp.lt.u32 	%p187, %r76, -2147483647;
	@%p187 bra 	LBB0_92;
// %bb.91:
	add.f32 	%f778, %f898, 0fBF800000;
	setp.lt.f32 	%p190, %f115, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f898, %f779, %f778, %p190;
	bra.uni 	LBB0_94;
LBB0_92:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p188, %f115, 0f40800000;
	@%p188 bra 	LBB0_94;
// %bb.93:                              // %__nv_fmaf_rn.exit.i.i.i1391
	add.f32 	%f774, %f898, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f115;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f898, %f777, %f774, %p189;
LBB0_94:                                // %__internal_fmodf_fastpath_quot.exit.i.i1395
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
LBB0_99:                                // %__internal_fmodf_kernel.exit.i1420
	abs.f32 	%f791, %f900;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	LBB0_101;
// %bb.100:
	mov.b32 	%r409, %f900;
	or.b32  	%r410, %r62, %r409;
	mov.b32 	%f900, %r410;
LBB0_101:                               // %__nv_fmodf.exit1421
	@%p122 bra 	LBB0_113;
// %bb.102:
	setp.gtu.f32 	%p205, %f904, 0f4B800000;
	@%p205 bra 	LBB0_109;
	bra.uni 	LBB0_103;
LBB0_109:
	mov.b32 	%r85, %f904;
	and.b32  	%r419, %r85, 8388607;
	or.b32  	%r8007, %r419, 1065353216;
	mov.b32 	%f903, %r8007;
	add.s32 	%r420, %r85, -1073741824;
	and.b32  	%r8008, %r420, -8388608;
	setp.eq.s32 	%p211, %r8008, 0;
	@%p211 bra 	LBB0_112;
// %bb.110:                             // %__nv_fmaf_rn.exit4.i.i.i1460.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
LBB0_111:                               // %__nv_fmaf_rn.exit4.i.i.i1460
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r421, %r8008, 192937984;
	add.s32 	%r422, %r421, %r8007;
	mov.b32 	%f832, %r422;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f903, %f832, %f838;
	sub.s32 	%r8008, %r8008, %r421;
	mov.b32 	%r8007, %f903;
	setp.ne.s32 	%p212, %r8008, 0;
	setp.ne.s32 	%p213, %r8007, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	LBB0_111;
LBB0_112:                               // %__internal_fmodf_slowpath_mod.exit.i.i1462
	setp.gt.u32 	%p215, %r85, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f903, 0f34000000;
	mul.f32 	%f904, %f839, %f840;
	bra.uni 	LBB0_113;
LBB0_103:                               // %__nv_fast_fdividef.exit.i.i.i1432
	div.approx.f32 	%f823, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f823;
	fma.rn.f32 	%f132, %f902, 0fC0000000, %f904;
	mov.b32 	%r84, %f132;
	setp.lt.u32 	%p206, %r84, 1073741824;
	@%p206 bra 	LBB0_108;
// %bb.104:
	setp.lt.u32 	%p207, %r84, -2147483647;
	@%p207 bra 	LBB0_106;
// %bb.105:
	add.f32 	%f828, %f902, 0fBF800000;
	setp.lt.f32 	%p210, %f132, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f902, %f829, %f828, %p210;
	bra.uni 	LBB0_108;
LBB0_106:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p208, %f132, 0f40800000;
	@%p208 bra 	LBB0_108;
// %bb.107:                             // %__nv_fmaf_rn.exit.i.i.i1437
	add.f32 	%f824, %f902, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f132;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f902, %f827, %f824, %p209;
LBB0_108:                               // %__internal_fmodf_fastpath_quot.exit.i.i1441
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
LBB0_113:                               // %__internal_fmodf_kernel.exit.i1466
	abs.f32 	%f841, %f904;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	LBB0_115;
// %bb.114:
	mov.b32 	%r423, %f904;
	or.b32  	%r424, %r71, %r423;
	mov.b32 	%f904, %r424;
LBB0_115:                               // %__nv_fmodf.exit1467
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r7994, 0;
	@%p224 bra 	LBB0_126;
// %bb.116:                             // %L1422.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	mov.b32 	%r328, %f585;
	mov.b32 	%r359, %f636;
	add.f32 	%f689, %f908, %f908;
	add.f32 	%f740, %f912, %f912;
	mov.b32 	%r204, %f190;
	mov.b32 	%r211, %f224;
	mov.b32 	%r222, %f259;
	mov.b32 	%r229, %f293;
	mov.b32 	%r240, %f328;
	mov.b32 	%r247, %f362;
	mov.b32 	%r258, %f397;
	mov.b32 	%r265, %f431;
	mov.b32 	%r283, %f480;
	mov.b32 	%r306, %f532;
	and.b32  	%r329, %r328, -2147483648;
	and.b32  	%r360, %r359, -2147483648;
	mov.b32 	%r375, %f689;
	mov.b32 	%r397, %f740;
	and.b32  	%r205, %r204, -2147483648;
	and.b32  	%r212, %r211, -2147483648;
	and.b32  	%r223, %r222, -2147483648;
	and.b32  	%r230, %r229, -2147483648;
	and.b32  	%r241, %r240, -2147483648;
	and.b32  	%r248, %r247, -2147483648;
	and.b32  	%r259, %r258, -2147483648;
	and.b32  	%r266, %r265, -2147483648;
	and.b32  	%r284, %r283, -2147483648;
	and.b32  	%r307, %r306, -2147483648;
	or.b32  	%r330, %r329, 1056964608;
	or.b32  	%r361, %r360, 1056964608;
	and.b32  	%r376, %r375, -2147483648;
	and.b32  	%r398, %r397, -2147483648;
	add.f32 	%f792, %f900, %f900;
	or.b32  	%r206, %r205, 1056964608;
	or.b32  	%r213, %r212, 1056964608;
	or.b32  	%r224, %r223, 1056964608;
	or.b32  	%r231, %r230, 1056964608;
	or.b32  	%r242, %r241, 1056964608;
	or.b32  	%r249, %r248, 1056964608;
	or.b32  	%r260, %r259, 1056964608;
	or.b32  	%r267, %r266, 1056964608;
	or.b32  	%r285, %r284, 1056964608;
	or.b32  	%r308, %r307, 1056964608;
	mov.b32 	%f586, %r330;
	mov.b32 	%f637, %r361;
	or.b32  	%r377, %r376, 1056964608;
	or.b32  	%r399, %r398, 1056964608;
	mov.b32 	%r411, %f792;
	mov.b32 	%f191, %r206;
	mov.b32 	%f225, %r213;
	mov.b32 	%f260, %r224;
	mov.b32 	%f294, %r231;
	mov.b32 	%f329, %r242;
	mov.b32 	%f363, %r249;
	mov.b32 	%f398, %r260;
	mov.b32 	%f432, %r267;
	mov.b32 	%f481, %r285;
	mov.b32 	%f533, %r308;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	mov.b32 	%f690, %r377;
	mov.b32 	%f741, %r399;
	and.b32  	%r412, %r411, -2147483648;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r413, %r412, 1056964608;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r413;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f908;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f912;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	cvt.rzi.s32.f32 	%r207, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r214, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r225, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r232, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r243, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r250, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r261, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r268, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r331, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r362, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f900;
	add.s32 	%r208, %r207, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r215, %r214, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r226, %r225, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r233, %r232, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r244, %r243, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r251, %r250, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r262, %r261, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r269, %r268, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r286, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r309, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r332, %r331, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r363, %r362, 1;
	cvt.rzi.s32.f32 	%r378, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r400, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r209, %r208, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r216, %r215, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r227, %r226, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r234, %r233, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r245, %r244, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r252, %r251, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r263, %r262, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r270, %r269, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r287, %r286, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r310, %r309, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r332, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r363, 1;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r379, %r378, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r401, %r400, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r209, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r216, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r227, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r234, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r245, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r252, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r263, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r270, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r287, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r310, 1;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r333, %r331, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r364, %r362, 2;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r379, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r401, 1;
	cvt.rzi.s32.f32 	%r414, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r210, %r208, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r217, %r215, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r228, %r226, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r235, %r233, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r246, %r244, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r253, %r251, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r264, %r262, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r271, %r269, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r288, %r286, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r311, %r309, 2;
	setp.eq.s32 	%p118, %r333, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r334, %r331, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r364, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r365, %r362, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r380, %r378, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r402, %r400, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r415, %r414, 1;
	setp.eq.s32 	%p17, %r210, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r217, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r228, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r235, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r246, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r253, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r264, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r271, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r288, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r289, %r286, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r311, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r312, %r309, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r335, %r334, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r366, %r365, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	setp.eq.s32 	%p159, %r380, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r381, %r378, 1;
	cvt.rzi.f32.f32 	%f715, %f908;
	setp.eq.s32 	%p179, %r402, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r403, %r400, 1;
	cvt.rzi.f32.f32 	%f766, %f912;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r415, 1;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r290, %r289, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r313, %r312, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	setp.eq.s32 	%p119, %r335, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f92, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r366, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r382, %r381, 2;
	setp.eq.f32 	%p161, %f715, %f908;
	mul.f32 	%f716, %f908, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r404, %r403, 2;
	setp.eq.f32 	%p181, %f766, %f912;
	mul.f32 	%f767, %f912, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r416, %r414, 2;
	mul.f32 	%f2, %f212, %f212;
	mul.f32 	%f7, %f246, %f246;
	mul.f32 	%f11, %f281, %f281;
	mul.f32 	%f16, %f315, %f315;
	mul.f32 	%f20, %f350, %f350;
	mul.f32 	%f25, %f384, %f384;
	mul.f32 	%f29, %f419, %f419;
	mul.f32 	%f34, %f453, %f453;
	setp.eq.s32 	%p78, %r290, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f55, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r313, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f92, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	setp.eq.s32 	%p160, %r382, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f161, %f716, %f711, %p161;
	abs.f32 	%f717, %f908;
	setp.eq.s32 	%p180, %r404, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f912;
	setp.eq.s32 	%p201, %r416, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r417, %r414, 1;
	cvt.rzi.f32.f32 	%f818, %f900;
	mul.f32 	%f216, %f2, 0f3C0AF64E;
	mul.f32 	%f250, %f7, 0f3C0AF64E;
	mul.f32 	%f285, %f11, 0f3C0AF64E;
	mul.f32 	%f319, %f16, 0f3C0AF64E;
	mul.f32 	%f354, %f20, 0f3C0AF64E;
	mul.f32 	%f388, %f25, 0f3C0AF64E;
	mul.f32 	%f423, %f29, 0f3C0AF64E;
	mul.f32 	%f456, %f34, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f55, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f93, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f161, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r418, %r417, 2;
	setp.eq.f32 	%p203, %f818, %f900;
	mul.f32 	%f819, %f900, 0f00000000;
	mul.f32 	%f6, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f15, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f24, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f33, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f56, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	mov.b32 	%r349, %f667;
	mov.b32 	%r348, %f93;
	mov.b32 	%r355, %f664;
	mov.b32 	%r354, %f92;
	selp.f32 	%f162, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r418, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f129, %f819, %f814, %p203;
	abs.f32 	%f820, %f900;
	mov.b32 	%r220, %f251;
	mov.b32 	%r219, %f6;
	mov.b32 	%r238, %f320;
	mov.b32 	%r237, %f15;
	mov.b32 	%r256, %f389;
	mov.b32 	%r255, %f24;
	mov.b32 	%r274, %f457;
	mov.b32 	%r273, %f33;
	mov.b32 	%r302, %f563;
	mov.b32 	%r301, %f56;
	mov.b32 	%r305, %f560;
	mov.b32 	%r304, %f55;
	xor.b32  	%r352, %r355, -2147483648;
	xor.b32  	%r351, %r354, -2147483648;
	mov.b32 	%r393, %f771;
	mov.b32 	%r392, %f162;
	mov.b32 	%r396, %f768;
	mov.b32 	%r395, %f161;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f129, 0f3F800000;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	// begin inline asm
	cvt.rn.f16x2.f32 %r218, %r220, %r219;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r236, %r238, %r237;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r254, %r256, %r255;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r272, %r274, %r273;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r300, %r302, %r301;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r303, %r305, %r304;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r347, %r349, %r348;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r350, %r352, %r351;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r353, %r355, %r354;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r356, %r349, %r348;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r391, %r393, %r392;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r394, %r396, %r395;
	// end inline asm
	selp.f32 	%f130, %f821, %f817, %p204;
	add.f32 	%f842, %f904, %f904;
	mov.b32 	%r437, %f842;
	and.b32  	%r438, %r437, -2147483648;
	or.b32  	%r439, %r438, 1056964608;
	mov.b32 	%f843, %r439;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r440, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f904;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r441, %r440, 1;
	setp.eq.b32 	%p219, %r441, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r442, %r440, 2;
	setp.eq.s32 	%p220, %r442, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r443, %r440, 1;
	and.b32  	%r444, %r443, 2;
	setp.eq.s32 	%p221, %r444, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f904;
	setp.eq.f32 	%p222, %f868, %f904;
	mul.f32 	%f869, %f904, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f904;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r427, %f873;
	mov.b32 	%r426, %f130;
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	mov.b32 	%r433, %f870;
	xor.b32  	%r430, %r433, -2147483648;
	mov.b32 	%r432, %f129;
	xor.b32  	%r429, %r432, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r432;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r427, %r426;
	// end inline asm
	shl.b32 	%r96, %r5, 12;
	and.b32  	%r446, %r12, 16;
	and.b32  	%r447, %r12, 12;
	or.b32  	%r448, %r14, %r1;
	or.b32  	%r97, %r448, %r13;
	shl.b32 	%r449, %r3, 11;
	and.b32  	%r450, %r449, 2048;
	and.b32  	%r451, %r12, 28;
	or.b32  	%r98, %r451, %r450;
	or.b32  	%r99, %r98, %r96;
	and.b32  	%r100, %r4, 8;
	mul.lo.s32 	%r452, %r22, 65;
	shl.b32 	%r453, %r4, 4;
	or.b32  	%r454, %r100, %r453;
	shr.u32 	%r455, %r454, 2;
	and.b32  	%r456, %r455, 14;
	shr.u32 	%r457, %r1, 3;
	bfe.u32 	%r458, %r1, 2, 1;
	shr.u32 	%r459, %r1, 1;
	bfe.u32 	%r460, %r1, 1, 1;
	and.b32  	%r461, %r1, 1;
	mad.lo.s32 	%r462, %r457, 130, %r452;
	add.s32 	%r463, %r462, %r446;
	mad.lo.s32 	%r464, %r461, 1040, %r463;
	mad.lo.s32 	%r465, %r458, 260, %r464;
	mad.lo.s32 	%r466, %r460, 520, %r465;
	add.s32 	%r467, %r466, %r456;
	mul.wide.u32 	%rd87, %r467, 4;
	mov.u64 	%rd88, shmem;
	add.s64 	%rd5, %rd88, %rd87;
	add.s32 	%r468, %r467, 32;
	mul.wide.u32 	%rd89, %r468, 4;
	add.s64 	%rd6, %rd88, %rd89;
	add.s32 	%r469, %r467, 1;
	mul.wide.u32 	%rd90, %r469, 4;
	add.s64 	%rd7, %rd88, %rd90;
	add.s32 	%r470, %r467, 33;
	mul.wide.u32 	%rd91, %r470, 4;
	add.s64 	%rd8, %rd88, %rd91;
	add.s32 	%r471, %r467, 2081;
	mul.wide.u32 	%rd92, %r471, 4;
	add.s64 	%rd9, %rd88, %rd92;
	add.s32 	%r472, %r467, 2113;
	mul.wide.u32 	%rd93, %r472, 4;
	add.s64 	%rd10, %rd88, %rd93;
	add.s32 	%r473, %r467, 2082;
	mul.wide.u32 	%rd94, %r473, 4;
	add.s64 	%rd11, %rd88, %rd94;
	add.s32 	%r474, %r467, 2114;
	mul.wide.u32 	%rd95, %r474, 4;
	add.s64 	%rd12, %rd88, %rd95;
	add.s32 	%r475, %r467, 4162;
	mul.wide.u32 	%rd96, %r475, 4;
	add.s64 	%rd13, %rd88, %rd96;
	add.s32 	%r476, %r467, 4194;
	mul.wide.u32 	%rd97, %r476, 4;
	add.s64 	%rd14, %rd88, %rd97;
	add.s32 	%r477, %r467, 4163;
	mul.wide.u32 	%rd98, %r477, 4;
	add.s64 	%rd15, %rd88, %rd98;
	add.s32 	%r478, %r467, 4195;
	mul.wide.u32 	%rd99, %r478, 4;
	add.s64 	%rd16, %rd88, %rd99;
	add.s32 	%r479, %r467, 6243;
	mul.wide.u32 	%rd100, %r479, 4;
	add.s64 	%rd17, %rd88, %rd100;
	add.s32 	%r480, %r467, 6275;
	mul.wide.u32 	%rd101, %r480, 4;
	add.s64 	%rd18, %rd88, %rd101;
	add.s32 	%r481, %r467, 6244;
	mul.wide.u32 	%rd102, %r481, 4;
	add.s64 	%rd19, %rd88, %rd102;
	add.s32 	%r482, %r467, 6276;
	mul.wide.u32 	%rd103, %r482, 4;
	add.s64 	%rd20, %rd88, %rd103;
	mul.lo.s32 	%r483, %r19, 65;
	mul.lo.s32 	%r484, %r20, 130;
	mul.lo.s32 	%r485, %r21, 260;
	mul.lo.s32 	%r486, %r22, 520;
	and.b32  	%r487, %r2, 32;
	mul.lo.s32 	%r488, %r24, 1040;
	add.s32 	%r489, %r484, %r459;
	add.s32 	%r490, %r489, %r486;
	add.s32 	%r491, %r490, %r487;
	add.s32 	%r492, %r491, %r483;
	add.s32 	%r493, %r492, %r485;
	add.s32 	%r494, %r493, %r488;
	or.b32  	%r495, %r459, 8;
	add.s32 	%r496, %r484, %r495;
	add.s32 	%r497, %r496, %r486;
	add.s32 	%r498, %r497, %r487;
	add.s32 	%r499, %r498, %r483;
	add.s32 	%r500, %r499, %r485;
	add.s32 	%r501, %r500, %r488;
	or.b32  	%r502, %r459, 16;
	add.s32 	%r503, %r502, %r484;
	add.s32 	%r504, %r503, %r486;
	add.s32 	%r505, %r504, %r487;
	add.s32 	%r506, %r505, %r483;
	add.s32 	%r507, %r506, %r485;
	add.s32 	%r508, %r507, %r488;
	or.b32  	%r509, %r459, 24;
	add.s32 	%r510, %r509, %r484;
	add.s32 	%r511, %r510, %r486;
	add.s32 	%r512, %r511, %r487;
	add.s32 	%r513, %r512, %r483;
	add.s32 	%r514, %r513, %r485;
	add.s32 	%r515, %r514, %r488;
	or.b32  	%r516, %r16, %r11;
	or.b32  	%r517, %r516, %r13;
	or.b32  	%r518, %r517, %r15;
	or.b32  	%r519, %r518, %r10;
	or.b32  	%r520, %r519, %r14;
	shr.u32 	%r521, %r520, 31;
	add.s32 	%r522, %r520, %r521;
	shr.s32 	%r523, %r522, 1;
	shr.s32 	%r524, %r522, 31;
	shr.u32 	%r525, %r524, 27;
	add.s32 	%r526, %r523, %r525;
	and.b32  	%r527, %r526, -32;
	sub.s32 	%r528, %r523, %r527;
	mul.lo.s32 	%r529, %r528, 65;
	or.b32  	%r530, %r487, %r459;
	add.s32 	%r531, %r530, %r529;
	or.b32  	%r532, %r487, %r495;
	add.s32 	%r533, %r532, %r529;
	or.b32  	%r534, %r502, %r487;
	add.s32 	%r535, %r534, %r529;
	or.b32  	%r536, %r509, %r487;
	add.s32 	%r537, %r536, %r529;
	shl.b32 	%r538, %r1, 1;
	or.b32  	%r539, %r538, %r22;
	mul.lo.s32 	%r540, %r539, 65;
	add.s32 	%r541, %r540, %r446;
	add.s32 	%r542, %r541, %r456;
	mul.wide.u32 	%rd104, %r542, 4;
	add.s64 	%rd21, %rd88, %rd104;
	cvt.u64.u32 	%rd105, %r456;
	cvt.u64.u32 	%rd106, %r540;
	cvt.u64.u32 	%rd107, %r446;
	add.s64 	%rd108, %rd107, %rd106;
	add.s64 	%rd109, %rd108, %rd105;
	shl.b64 	%rd110, %rd109, 2;
	add.s64 	%rd22, %rd88, %rd110;
	or.b32  	%r543, %r446, %r456;
	cvt.u64.u32 	%rd111, %r543;
	add.s64 	%rd112, %rd106, %rd111;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd23, %rd88, %rd113;
	shl.b32 	%r544, %r7, 18;
	add.s32 	%r545, %r544, -786432;
	shl.b32 	%r546, %r1, 7;
	and.b32  	%r547, %r12, 96;
	or.b32  	%r548, %r547, %r449;
	or.b32  	%r549, %r447, %r546;
	or.b32  	%r550, %r549, %r446;
	or.b32  	%r101, %r550, %r548;
	cvt.s64.s32 	%rd24, %r545;
	mul.wide.s32 	%rd25, %r537, 4;
	mul.wide.s32 	%rd26, %r535, 4;
	mul.wide.s32 	%rd27, %r533, 4;
	mul.wide.s32 	%rd28, %r531, 4;
	mul.wide.u32 	%rd29, %r515, 4;
	mul.wide.u32 	%rd30, %r508, 4;
	mul.wide.u32 	%rd31, %r501, 4;
	mul.wide.u32 	%rd32, %r494, 4;
	setp.eq.s32 	%p225, %r100, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r102, %r7994;
	mov.u32 	%r8034, %r7994;
	mov.u32 	%r8033, %r7994;
	mov.u32 	%r8032, %r7994;
	mov.u32 	%r8031, %r7994;
	mov.u32 	%r8030, %r7994;
	mov.u32 	%r8029, %r7994;
	mov.u32 	%r8028, %r7994;
	mov.u32 	%r8027, %r7994;
	mov.u32 	%r8026, %r7994;
	mov.u32 	%r8025, %r7994;
	mov.u32 	%r8024, %r7994;
	mov.u32 	%r8023, %r7994;
	bra.uni 	LBB0_117;
LBB0_125:                               // %pass14505
                                        //   in Loop: Header=BB0_117 Depth=1
	or.b32  	%r7990, %r7996, 786432;
	cvt.u64.u32 	%rd167, %r7990;
	add.s64 	%rd168, %rd167, %rd24;
	shr.u64 	%rd169, %rd168, 35;
	add.s64 	%rd170, %rd168, %rd169;
	shr.s64 	%rd171, %rd170, 29;
	setp.lt.s64 	%p253, %rd168, 0;
	and.b64  	%rd172, %rd170, -536870912;
	setp.ne.s64 	%p254, %rd172, %rd168;
	and.pred  	%p255, %p253, %p254;
	selp.u64 	%rd173, 1, 0, %p255;
	sub.s64 	%rd174, %rd173, %rd171;
	shl.b64 	%rd175, %rd174, 29;
	add.s64 	%rd176, %rd175, %rd168;
	shl.b64 	%rd177, %rd176, 2;
	add.s64 	%rd178, %rd3, %rd177;
	st.global.v4.u32 	[%rd178], {%r175, %r177, %r176, %r178};
	setp.ne.s32 	%p256, %r102, 130816;
	add.s32 	%r102, %r102, 256;
	add.s32 	%r7991, %r102, %r5;
	setp.gt.s32 	%p257, %r6, %r7991;
	and.pred  	%p258, %p256, %p257;
	@%p258 bra 	LBB0_117;
	bra.uni 	LBB0_126;
LBB0_117:                               // %L1422
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_118 Depth 2
	or.b32  	%r616, %r97, %r102;
	shl.b32 	%r617, %r616, 12;
	add.s32 	%r618, %r99, %r617;
	shr.s32 	%r619, %r618, 31;
	shr.u32 	%r620, %r619, 3;
	add.s32 	%r621, %r618, %r620;
	shr.s32 	%r622, %r621, 29;
	setp.lt.s32 	%p226, %r618, 0;
	and.b32  	%r623, %r621, -536870912;
	setp.ne.s32 	%p227, %r623, %r618;
	and.pred  	%p228, %p226, %p227;
	selp.u32 	%r624, 1, 0, %p228;
	sub.s32 	%r625, %r624, %r622;
	shl.b32 	%r626, %r625, 29;
	add.s32 	%r627, %r626, %r618;
	mul.wide.s32 	%rd115, %r627, 4;
	add.s64 	%rd116, %rd2, %rd115;
	ld.global.v4.u32 	{%r628, %r629, %r630, %r631}, [%rd116];
	or.b32  	%r632, %r98, %r617;
	or.b32  	%r633, %r632, 262144;
	add.s32 	%r634, %r633, %r96;
	shr.s32 	%r635, %r634, 31;
	shr.u32 	%r636, %r635, 3;
	add.s32 	%r637, %r634, %r636;
	shr.s32 	%r638, %r637, 29;
	setp.lt.s32 	%p229, %r634, 0;
	and.b32  	%r639, %r637, -536870912;
	setp.ne.s32 	%p230, %r639, %r634;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r640, 1, 0, %p231;
	sub.s32 	%r641, %r640, %r638;
	shl.b32 	%r642, %r641, 29;
	add.s32 	%r643, %r642, %r634;
	mul.wide.s32 	%rd117, %r643, 4;
	add.s64 	%rd118, %rd2, %rd117;
	ld.global.v4.u32 	{%r644, %r645, %r646, %r647}, [%rd118];
	or.b32  	%r648, %r632, 524288;
	add.s32 	%r649, %r648, %r96;
	shr.s32 	%r650, %r649, 31;
	shr.u32 	%r651, %r650, 3;
	add.s32 	%r652, %r649, %r651;
	shr.s32 	%r653, %r652, 29;
	setp.lt.s32 	%p232, %r649, 0;
	and.b32  	%r654, %r652, -536870912;
	setp.ne.s32 	%p233, %r654, %r649;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r655, 1, 0, %p234;
	sub.s32 	%r656, %r655, %r653;
	shl.b32 	%r657, %r656, 29;
	add.s32 	%r658, %r657, %r649;
	mul.wide.s32 	%rd119, %r658, 4;
	add.s64 	%rd120, %rd2, %rd119;
	ld.global.v4.u32 	{%r659, %r660, %r661, %r662}, [%rd120];
	or.b32  	%r663, %r632, 786432;
	add.s32 	%r664, %r663, %r96;
	shr.s32 	%r665, %r664, 31;
	shr.u32 	%r666, %r665, 3;
	add.s32 	%r667, %r664, %r666;
	shr.s32 	%r668, %r667, 29;
	setp.lt.s32 	%p235, %r664, 0;
	and.b32  	%r669, %r667, -536870912;
	setp.ne.s32 	%p236, %r669, %r664;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r670, 1, 0, %p237;
	sub.s32 	%r671, %r670, %r668;
	shl.b32 	%r672, %r671, 29;
	add.s32 	%r673, %r672, %r664;
	mul.wide.s32 	%rd121, %r673, 4;
	add.s64 	%rd122, %rd2, %rd121;
	ld.global.v4.u32 	{%r674, %r675, %r676, %r677}, [%rd122];
	selp.b32 	%r678, %r630, %r628, %p225;
	shfl.sync.bfly.b32	%r679, %r678, 8, 31, -1;
	selp.b32 	%r552, %r628, %r679, %p225;
	selp.b32 	%r553, %r679, %r630, %p225;
	selp.b32 	%r680, %r631, %r629, %p225;
	shfl.sync.bfly.b32	%r681, %r680, 8, 31, -1;
	selp.b32 	%r560, %r629, %r681, %p225;
	selp.b32 	%r561, %r681, %r631, %p225;
	selp.b32 	%r682, %r646, %r644, %p225;
	shfl.sync.bfly.b32	%r683, %r682, 8, 31, -1;
	selp.b32 	%r568, %r644, %r683, %p225;
	selp.b32 	%r569, %r683, %r646, %p225;
	selp.b32 	%r684, %r647, %r645, %p225;
	shfl.sync.bfly.b32	%r685, %r684, 8, 31, -1;
	selp.b32 	%r576, %r645, %r685, %p225;
	selp.b32 	%r577, %r685, %r647, %p225;
	selp.b32 	%r686, %r661, %r659, %p225;
	shfl.sync.bfly.b32	%r687, %r686, 8, 31, -1;
	selp.b32 	%r584, %r659, %r687, %p225;
	selp.b32 	%r585, %r687, %r661, %p225;
	selp.b32 	%r688, %r662, %r660, %p225;
	shfl.sync.bfly.b32	%r689, %r688, 8, 31, -1;
	selp.b32 	%r592, %r660, %r689, %p225;
	selp.b32 	%r593, %r689, %r662, %p225;
	selp.b32 	%r690, %r676, %r674, %p225;
	shfl.sync.bfly.b32	%r691, %r690, 8, 31, -1;
	selp.b32 	%r600, %r674, %r691, %p225;
	selp.b32 	%r601, %r691, %r676, %p225;
	selp.b32 	%r692, %r677, %r675, %p225;
	shfl.sync.bfly.b32	%r693, %r692, 8, 31, -1;
	selp.b32 	%r608, %r675, %r693, %p225;
	selp.b32 	%r609, %r693, %r677, %p225;
	mov.u32 	%r610, 21520;
	// begin inline asm
	prmt.b32 %r551, %r552, %r553, %r610;
	// end inline asm
	mov.u32 	%r614, 30258;
	// begin inline asm
	prmt.b32 %r555, %r552, %r553, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r560, %r561, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r560, %r561, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r567, %r568, %r569, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r568, %r569, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r575, %r576, %r577, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r579, %r576, %r577, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r583, %r584, %r585, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r587, %r584, %r585, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r591, %r592, %r593, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r595, %r592, %r593, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r599, %r600, %r601, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r603, %r600, %r601, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r607, %r608, %r609, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r611, %r608, %r609, %r614;
	// end inline asm
	st.shared.u32 	[%rd5], %r551;
	st.shared.u32 	[%rd6], %r555;
	st.shared.u32 	[%rd7], %r559;
	st.shared.u32 	[%rd8], %r563;
	st.shared.u32 	[%rd9], %r567;
	st.shared.u32 	[%rd10], %r571;
	st.shared.u32 	[%rd11], %r575;
	st.shared.u32 	[%rd12], %r579;
	st.shared.u32 	[%rd13], %r583;
	st.shared.u32 	[%rd14], %r587;
	st.shared.u32 	[%rd15], %r591;
	st.shared.u32 	[%rd16], %r595;
	st.shared.u32 	[%rd17], %r599;
	st.shared.u32 	[%rd18], %r603;
	st.shared.u32 	[%rd19], %r607;
	st.shared.u32 	[%rd20], %r611;
	bar.sync 	0;
	mov.u32 	%r8022, 256;
	mov.u64 	%rd181, %rd88;
LBB0_118:                               // %L11282
                                        //   Parent Loop BB0_117 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd123, %rd181, %rd32;
	ld.shared.u32 	%r7878, [%rd123];
	add.s64 	%rd124, %rd181, %rd31;
	ld.shared.u32 	%r7879, [%rd124];
	add.s64 	%rd125, %rd181, %rd30;
	ld.shared.u32 	%r7880, [%rd125];
	add.s64 	%rd126, %rd181, %rd29;
	ld.shared.u32 	%r7881, [%rd126];
	// begin inline asm
	mov.b32 %r699, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r710, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r698, %r7878, -2004318072;
	mov.u32 	%r697, 983055;
	// begin inline asm
	lop3.b32 %r696, %r697, %r698, %r699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r700, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r701, %r699, %r700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r704, %r696, %r701;
	// end inline asm
	mov.u32 	%r708, 15728880;
	// begin inline asm
	lop3.b32 %r707, %r708, %r698, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r712, %r710, %r711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r715, %r707, %r712;
	// end inline asm
	shr.u32 	%r720, %r698, 8;
	// begin inline asm
	lop3.b32 %r718, %r697, %r720, %r699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r722, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r723, %r699, %r722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r726, %r718, %r723;
	// end inline asm
	// begin inline asm
	lop3.b32 %r729, %r708, %r720, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r733, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r734, %r710, %r733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r737, %r729, %r734;
	// end inline asm
	// begin inline asm
	mov.b32 %r745, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r756, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r744, %r7879, -2004318072;
	// begin inline asm
	lop3.b32 %r742, %r697, %r744, %r745, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r746, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r747, %r745, %r746;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r750, %r742, %r747;
	// end inline asm
	// begin inline asm
	lop3.b32 %r753, %r708, %r744, %r756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r758, %r756, %r757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r761, %r753, %r758;
	// end inline asm
	shr.u32 	%r766, %r744, 8;
	// begin inline asm
	lop3.b32 %r764, %r697, %r766, %r745, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r769, %r745, %r768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r772, %r764, %r769;
	// end inline asm
	// begin inline asm
	lop3.b32 %r775, %r708, %r766, %r756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r779, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r780, %r756, %r779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r783, %r775, %r780;
	// end inline asm
	// begin inline asm
	mov.b32 %r791, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r802, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r790, %r7880, -2004318072;
	// begin inline asm
	lop3.b32 %r788, %r697, %r790, %r791, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r792, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r793, %r791, %r792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r796, %r788, %r793;
	// end inline asm
	// begin inline asm
	lop3.b32 %r799, %r708, %r790, %r802, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r803, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r804, %r802, %r803;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r807, %r799, %r804;
	// end inline asm
	shr.u32 	%r812, %r790, 8;
	// begin inline asm
	lop3.b32 %r810, %r697, %r812, %r791, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r814, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r815, %r791, %r814;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r818, %r810, %r815;
	// end inline asm
	// begin inline asm
	lop3.b32 %r821, %r708, %r812, %r802, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r825, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r826, %r802, %r825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r829, %r821, %r826;
	// end inline asm
	// begin inline asm
	mov.b32 %r837, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r848, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r836, %r7881, -2004318072;
	// begin inline asm
	lop3.b32 %r834, %r697, %r836, %r837, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r838, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r839, %r837, %r838;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r842, %r834, %r839;
	// end inline asm
	// begin inline asm
	lop3.b32 %r845, %r708, %r836, %r848, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r849, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r850, %r848, %r849;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r853, %r845, %r850;
	// end inline asm
	shr.u32 	%r858, %r836, 8;
	// begin inline asm
	lop3.b32 %r856, %r697, %r858, %r837, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r860, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r861, %r837, %r860;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r864, %r856, %r861;
	// end inline asm
	// begin inline asm
	lop3.b32 %r867, %r708, %r858, %r848, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r871, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r872, %r848, %r871;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r875, %r867, %r872;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r878, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r880, %r878, %r704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r883, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r885, %r883, %r715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r888, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r890, %r888, %r726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r893, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r895, %r893, %r737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r898, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r900, %r898, %r750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r903, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r905, %r903, %r761;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r908, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r910, %r908, %r772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r913, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r915, %r913, %r783;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r918, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r920, %r918, %r796;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r923, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r925, %r923, %r807;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r928, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r930, %r928, %r818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r933, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r935, %r933, %r829;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r938, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r940, %r938, %r842;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r943, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r945, %r943, %r853;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r948, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r950, %r948, %r864;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r953, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r955, %r953, %r875;
	// end inline asm
	// begin inline asm
	mov.b32 %r963, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r974, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r962, %r8023, -2004318072;
	// begin inline asm
	lop3.b32 %r960, %r697, %r962, %r963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r965, %r963, %r964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r968, %r960, %r965;
	// end inline asm
	// begin inline asm
	lop3.b32 %r971, %r708, %r962, %r974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r976, %r974, %r975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r979, %r971, %r976;
	// end inline asm
	shr.u32 	%r984, %r962, 8;
	// begin inline asm
	lop3.b32 %r982, %r697, %r984, %r963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r987, %r963, %r986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r990, %r982, %r987;
	// end inline asm
	// begin inline asm
	lop3.b32 %r993, %r708, %r984, %r974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r997, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r998, %r974, %r997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1001, %r993, %r998;
	// end inline asm
	// begin inline asm
	mov.b32 %r1009, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1020, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1008, %r8024, -2004318072;
	// begin inline asm
	lop3.b32 %r1006, %r697, %r1008, %r1009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1011, %r1009, %r1010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1014, %r1006, %r1011;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1017, %r708, %r1008, %r1020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1022, %r1020, %r1021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1025, %r1017, %r1022;
	// end inline asm
	shr.u32 	%r1030, %r1008, 8;
	// begin inline asm
	lop3.b32 %r1028, %r697, %r1030, %r1009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1032, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1033, %r1009, %r1032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1036, %r1028, %r1033;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1039, %r708, %r1030, %r1020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1043, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1044, %r1020, %r1043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1047, %r1039, %r1044;
	// end inline asm
	// begin inline asm
	mov.b32 %r1055, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1066, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1054, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r1052, %r697, %r1054, %r1055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1056, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1057, %r1055, %r1056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1060, %r1052, %r1057;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1063, %r708, %r1054, %r1066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1067, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1068, %r1066, %r1067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1071, %r1063, %r1068;
	// end inline asm
	shr.u32 	%r1076, %r1054, 8;
	// begin inline asm
	lop3.b32 %r1074, %r697, %r1076, %r1055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1079, %r1055, %r1078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1082, %r1074, %r1079;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1085, %r708, %r1076, %r1066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1090, %r1066, %r1089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1093, %r1085, %r1090;
	// end inline asm
	// begin inline asm
	mov.b32 %r1101, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1112, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1100, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r1098, %r697, %r1100, %r1101, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1102, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1103, %r1101, %r1102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1106, %r1098, %r1103;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1109, %r708, %r1100, %r1112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1113, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1114, %r1112, %r1113;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1117, %r1109, %r1114;
	// end inline asm
	shr.u32 	%r1122, %r1100, 8;
	// begin inline asm
	lop3.b32 %r1120, %r697, %r1122, %r1101, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1124, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1125, %r1101, %r1124;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1128, %r1120, %r1125;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1131, %r708, %r1122, %r1112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1135, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1136, %r1112, %r1135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1139, %r1131, %r1136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r218, %r968, %r880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r218, %r979, %r885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1150, %r218, %r990, %r890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r218, %r1001, %r895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r218, %r1014, %r900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1162, %r218, %r1025, %r905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r218, %r1036, %r910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r218, %r1047, %r915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r218, %r1060, %r920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r218, %r1071, %r925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1182, %r218, %r1082, %r930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r218, %r1093, %r935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r218, %r1106, %r940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r218, %r1117, %r945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1198, %r218, %r1128, %r950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r218, %r1139, %r955;
	// end inline asm
	// begin inline asm
	mov.b32 %r1211, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1222, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1210, %r8025, -2004318072;
	// begin inline asm
	lop3.b32 %r1208, %r697, %r1210, %r1211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1213, %r1211, %r1212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1216, %r1208, %r1213;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1219, %r708, %r1210, %r1222, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1223, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1224, %r1222, %r1223;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1227, %r1219, %r1224;
	// end inline asm
	shr.u32 	%r1232, %r1210, 8;
	// begin inline asm
	lop3.b32 %r1230, %r697, %r1232, %r1211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1234, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1235, %r1211, %r1234;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1238, %r1230, %r1235;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1241, %r708, %r1232, %r1222, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1245, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1246, %r1222, %r1245;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1249, %r1241, %r1246;
	// end inline asm
	// begin inline asm
	mov.b32 %r1257, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1268, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1256, %r8026, -2004318072;
	// begin inline asm
	lop3.b32 %r1254, %r697, %r1256, %r1257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1259, %r1257, %r1258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1262, %r1254, %r1259;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1265, %r708, %r1256, %r1268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1269, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1270, %r1268, %r1269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1273, %r1265, %r1270;
	// end inline asm
	shr.u32 	%r1278, %r1256, 8;
	// begin inline asm
	lop3.b32 %r1276, %r697, %r1278, %r1257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1280, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1281, %r1257, %r1280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1284, %r1276, %r1281;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1287, %r708, %r1278, %r1268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1291, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1292, %r1268, %r1291;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1295, %r1287, %r1292;
	// end inline asm
	// begin inline asm
	mov.b32 %r1303, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1314, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1302, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r1300, %r697, %r1302, %r1303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1304, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1305, %r1303, %r1304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1308, %r1300, %r1305;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1311, %r708, %r1302, %r1314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1316, %r1314, %r1315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1319, %r1311, %r1316;
	// end inline asm
	shr.u32 	%r1324, %r1302, 8;
	// begin inline asm
	lop3.b32 %r1322, %r697, %r1324, %r1303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1326, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1327, %r1303, %r1326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1330, %r1322, %r1327;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1333, %r708, %r1324, %r1314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1337, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1338, %r1314, %r1337;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1341, %r1333, %r1338;
	// end inline asm
	// begin inline asm
	mov.b32 %r1349, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1360, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1348, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r1346, %r697, %r1348, %r1349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1351, %r1349, %r1350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1354, %r1346, %r1351;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1357, %r708, %r1348, %r1360, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1361, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1362, %r1360, %r1361;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1365, %r1357, %r1362;
	// end inline asm
	shr.u32 	%r1370, %r1348, 8;
	// begin inline asm
	lop3.b32 %r1368, %r697, %r1370, %r1349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1372, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1373, %r1349, %r1372;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1376, %r1368, %r1373;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1379, %r708, %r1370, %r1360, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1383, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1384, %r1360, %r1383;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1387, %r1379, %r1384;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1390, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1392, %r1390, %r1216, %r1142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1396, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1398, %r1396, %r1227, %r1146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1402, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1404, %r1402, %r1238, %r1150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1408, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1410, %r1408, %r1249, %r1154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1414, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1416, %r1414, %r1262, %r1158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1420, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1422, %r1420, %r1273, %r1162;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1426, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1428, %r1426, %r1284, %r1166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1432, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1434, %r1432, %r1295, %r1170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1438, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1440, %r1438, %r1308, %r1174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1444, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1446, %r1444, %r1319, %r1178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1450, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1452, %r1450, %r1330, %r1182;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1456, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1458, %r1456, %r1341, %r1186;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1462, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1464, %r1462, %r1354, %r1190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1468, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1470, %r1468, %r1365, %r1194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1474, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1476, %r1474, %r1376, %r1198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1480, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1482, %r1480, %r1387, %r1202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1491, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1502, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1490, %r8027, -2004318072;
	// begin inline asm
	lop3.b32 %r1488, %r697, %r1490, %r1491, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1492, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1493, %r1491, %r1492;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1496, %r1488, %r1493;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1499, %r708, %r1490, %r1502, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1503, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1504, %r1502, %r1503;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1507, %r1499, %r1504;
	// end inline asm
	shr.u32 	%r1512, %r1490, 8;
	// begin inline asm
	lop3.b32 %r1510, %r697, %r1512, %r1491, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1514, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1515, %r1491, %r1514;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1518, %r1510, %r1515;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1521, %r708, %r1512, %r1502, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1525, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1526, %r1502, %r1525;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1529, %r1521, %r1526;
	// end inline asm
	// begin inline asm
	mov.b32 %r1537, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1548, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1536, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r1534, %r697, %r1536, %r1537, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1538, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1539, %r1537, %r1538;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1542, %r1534, %r1539;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1545, %r708, %r1536, %r1548, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1549, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1550, %r1548, %r1549;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1553, %r1545, %r1550;
	// end inline asm
	shr.u32 	%r1558, %r1536, 8;
	// begin inline asm
	lop3.b32 %r1556, %r697, %r1558, %r1537, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1560, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1561, %r1537, %r1560;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1564, %r1556, %r1561;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1567, %r708, %r1558, %r1548, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1571, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1572, %r1548, %r1571;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1575, %r1567, %r1572;
	// end inline asm
	// begin inline asm
	mov.b32 %r1583, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1594, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1582, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r1580, %r697, %r1582, %r1583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1584, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1585, %r1583, %r1584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1588, %r1580, %r1585;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1591, %r708, %r1582, %r1594, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1595, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1596, %r1594, %r1595;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1599, %r1591, %r1596;
	// end inline asm
	shr.u32 	%r1604, %r1582, 8;
	// begin inline asm
	lop3.b32 %r1602, %r697, %r1604, %r1583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1606, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1607, %r1583, %r1606;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1610, %r1602, %r1607;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1613, %r708, %r1604, %r1594, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1617, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1618, %r1594, %r1617;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1621, %r1613, %r1618;
	// end inline asm
	// begin inline asm
	mov.b32 %r1629, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1640, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1628, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r1626, %r697, %r1628, %r1629, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1630, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1631, %r1629, %r1630;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1634, %r1626, %r1631;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1637, %r708, %r1628, %r1640, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1641, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1642, %r1640, %r1641;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1645, %r1637, %r1642;
	// end inline asm
	shr.u32 	%r1650, %r1628, 8;
	// begin inline asm
	lop3.b32 %r1648, %r697, %r1650, %r1629, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1652, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1653, %r1629, %r1652;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1656, %r1648, %r1653;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1659, %r708, %r1650, %r1640, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1663, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1664, %r1640, %r1663;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1667, %r1659, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r254, %r1496, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r254, %r1507, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r254, %r1518, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r254, %r1529, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r254, %r1542, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r254, %r1553, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r254, %r1564, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r254, %r1575, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r254, %r1588, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r254, %r1599, %r1446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r254, %r1610, %r1452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r254, %r1621, %r1458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r254, %r1634, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r254, %r1645, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r254, %r1656, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r254, %r1667, %r1482;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1734, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r1734, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r300, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1743, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r1743, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r300, %r1750, %r1745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r300, %r1759, %r1754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1761, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r1761, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r300, %r1768, %r1763;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1770, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1772, %r1770, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r300, %r1777, %r1772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1779, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1781, %r1779, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r300, %r1786, %r1781;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1788, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1790, %r1788, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r300, %r1795, %r1790;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1797, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1799, %r1797, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r300, %r1804, %r1799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1806, %r303, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r300, %r1738, %r1806;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r303, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r300, %r1747, %r1813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1820, %r303, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1823, %r300, %r1756, %r1820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r303, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r300, %r1765, %r1827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1834, %r303, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r300, %r1774, %r1834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1841, %r303, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1844, %r300, %r1783, %r1841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r303, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r300, %r1792, %r1848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1855, %r303, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r300, %r1801, %r1855;
	// end inline asm
	mov.u32 	%r1870, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1949, %r1946}, {%r347, %r353, %r350, %r356}, {%r1739, %r1809}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1958, %r1955}, {%r347, %r353, %r350, %r356}, {%r1748, %r1816}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1967, %r1964}, {%r347, %r353, %r350, %r356}, {%r1757, %r1823}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1976, %r1973}, {%r347, %r353, %r350, %r356}, {%r1766, %r1830}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1985, %r1982}, {%r347, %r353, %r350, %r356}, {%r1775, %r1837}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1994, %r1991}, {%r347, %r353, %r350, %r356}, {%r1784, %r1844}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2003, %r2000}, {%r347, %r353, %r350, %r356}, {%r1793, %r1851}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2012, %r2009}, {%r347, %r353, %r350, %r356}, {%r1802, %r1858}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1942, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1944, %r1942, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r391, %r1949, %r1944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1951, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1953, %r1951, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r391, %r1958, %r1953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1960, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1962, %r1960, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r391, %r1967, %r1962;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1969, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1971, %r1969, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r391, %r1976, %r1971;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1978, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1980, %r1978, %r1982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r391, %r1985, %r1980;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1987, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1989, %r1987, %r1991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r391, %r1994, %r1989;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1996, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1998, %r1996, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2001, %r391, %r2003, %r1998;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2005, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2007, %r2005, %r2009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r391, %r2012, %r2007;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2014, %r394, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2017, %r391, %r1946, %r2014;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2021, %r394, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r391, %r1955, %r2021;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r394, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r391, %r1964, %r2028;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2035, %r394, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r391, %r1973, %r2035;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r394, %r1985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r391, %r1982, %r2042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2049, %r394, %r1994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r391, %r1991, %r2049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2056, %r394, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2059, %r391, %r2000, %r2056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2063, %r394, %r2012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2066, %r391, %r2009, %r2063;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2070, %r2071}, {%r425, %r431, %r428, %r434}, {%r1947, %r2017}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2080, %r2081}, {%r425, %r431, %r428, %r434}, {%r1956, %r2024}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2090, %r2091}, {%r425, %r431, %r428, %r434}, {%r1965, %r2031}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2100, %r2101}, {%r425, %r431, %r428, %r434}, {%r1974, %r2038}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2110, %r2111}, {%r425, %r431, %r428, %r434}, {%r1983, %r2045}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2120, %r2121}, {%r425, %r431, %r428, %r434}, {%r1992, %r2052}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2130, %r2131}, {%r425, %r431, %r428, %r434}, {%r2001, %r2059}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2140, %r2141}, {%r425, %r431, %r428, %r434}, {%r2010, %r2066}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r17, %r2070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r17, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r17, %r2080;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r17, %r2081;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2162, %r17, %r2090;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r17, %r2091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2168, %r17, %r2100;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2171, %r17, %r2101;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2174, %r17, %r2110;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2177, %r17, %r2111;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2180, %r17, %r2120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2183, %r17, %r2121;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2186, %r17, %r2130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2189, %r17, %r2131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2192, %r17, %r2140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2195, %r17, %r2141;
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2199, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2200, %r2150, %r2198;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2203, %r2200, %r2199;
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2208, %r2153, %r2206;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2211, %r2208, %r2207;
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2215, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2216, %r2156, %r2214;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2219, %r2216, %r2215;
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2224, %r2159, %r2222;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2227, %r2224, %r2223;
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2231, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2232, %r2162, %r2230;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2235, %r2232, %r2231;
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2239, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2240, %r2165, %r2238;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2243, %r2240, %r2239;
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2247, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2248, %r2168, %r2246;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2251, %r2248, %r2247;
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2256, %r2171, %r2254;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2259, %r2256, %r2255;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2264, %r2174, %r2262;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2267, %r2264, %r2263;
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2271, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2272, %r2177, %r2270;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2275, %r2272, %r2271;
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2280, %r2180, %r2278;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2283, %r2280, %r2279;
	// end inline asm
	// begin inline asm
	mov.b32 %r2286, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2287, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2288, %r2183, %r2286;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2291, %r2288, %r2287;
	// end inline asm
	// begin inline asm
	mov.b32 %r2294, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2295, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2296, %r2186, %r2294;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2299, %r2296, %r2295;
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2304, %r2189, %r2302;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2307, %r2304, %r2303;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2311, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2312, %r2192, %r2310;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2315, %r2312, %r2311;
	// end inline asm
	// begin inline asm
	mov.b32 %r2318, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2319, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2320, %r2195, %r2318;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2323, %r2320, %r2319;
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2327, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2328, %r2329, %r2327;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2203, %r2328;
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2335, %r2329, %r2334;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2211, %r2335;
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2342, %r2329, %r2341;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2219, %r2342;
	// end inline asm
	// begin inline asm
	mov.b32 %r2348, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2349, %r2329, %r2348;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2227, %r2349;
	// end inline asm
	mov.u32 	%r2358, 25152;
	// begin inline asm
	prmt.b32 %r2355, %r2331, %r2345, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2359, %r2338, %r2352, %r2358;
	// end inline asm
	shl.b32 	%r2366, %r2359, 4;
	mov.u32 	%r2364, 252645135;
	// begin inline asm
	lop3.b32 %r2363, %r2364, %r2355, %r2366, 202;
	// end inline asm
	xor.b32  	%r7882, %r2363, -2004318072;
	// begin inline asm
	mov.b32 %r2370, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2369, %r2370, %r2368;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2235, %r2369;
	// end inline asm
	// begin inline asm
	mov.b32 %r2375, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2376, %r2370, %r2375;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2243, %r2376;
	// end inline asm
	// begin inline asm
	mov.b32 %r2382, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2383, %r2370, %r2382;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2386, %r2251, %r2383;
	// end inline asm
	// begin inline asm
	mov.b32 %r2389, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2390, %r2370, %r2389;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2393, %r2259, %r2390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2396, %r2372, %r2386, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2400, %r2379, %r2393, %r2358;
	// end inline asm
	shl.b32 	%r2407, %r2400, 4;
	// begin inline asm
	lop3.b32 %r2404, %r2364, %r2396, %r2407, 202;
	// end inline asm
	xor.b32  	%r7883, %r2404, -2004318072;
	// begin inline asm
	mov.b32 %r2411, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2409, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2410, %r2411, %r2409;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2413, %r2267, %r2410;
	// end inline asm
	// begin inline asm
	mov.b32 %r2416, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2417, %r2411, %r2416;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2275, %r2417;
	// end inline asm
	// begin inline asm
	mov.b32 %r2423, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2424, %r2411, %r2423;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2427, %r2283, %r2424;
	// end inline asm
	// begin inline asm
	mov.b32 %r2430, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2431, %r2411, %r2430;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2434, %r2291, %r2431;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2437, %r2413, %r2427, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2441, %r2420, %r2434, %r2358;
	// end inline asm
	shl.b32 	%r2448, %r2441, 4;
	// begin inline asm
	lop3.b32 %r2445, %r2364, %r2437, %r2448, 202;
	// end inline asm
	xor.b32  	%r7884, %r2445, -2004318072;
	// begin inline asm
	mov.b32 %r2452, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2450, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2451, %r2452, %r2450;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2454, %r2299, %r2451;
	// end inline asm
	// begin inline asm
	mov.b32 %r2457, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2458, %r2452, %r2457;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2461, %r2307, %r2458;
	// end inline asm
	// begin inline asm
	mov.b32 %r2464, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2465, %r2452, %r2464;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2468, %r2315, %r2465;
	// end inline asm
	// begin inline asm
	mov.b32 %r2471, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2472, %r2452, %r2471;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2475, %r2323, %r2472;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2478, %r2454, %r2468, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2482, %r2461, %r2475, %r2358;
	// end inline asm
	shl.b32 	%r2489, %r2482, 4;
	// begin inline asm
	lop3.b32 %r2486, %r2364, %r2478, %r2489, 202;
	// end inline asm
	xor.b32  	%r7885, %r2486, -2004318072;
	add.s64 	%rd127, %rd181, %rd28;
	st.shared.u32 	[%rd127], %r7882;
	add.s64 	%rd128, %rd181, %rd27;
	st.shared.u32 	[%rd128], %r7883;
	add.s64 	%rd129, %rd181, %rd26;
	st.shared.u32 	[%rd129], %r7884;
	add.s64 	%rd130, %rd181, %rd25;
	st.shared.u32 	[%rd130], %r7885;
	ld.shared.u32 	%r8023, [%rd123];
	ld.shared.u32 	%r8024, [%rd124];
	ld.shared.u32 	%r8029, [%rd125];
	ld.shared.u32 	%r8030, [%rd126];
	// begin inline asm
	mov.b32 %r2495, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2506, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2494, %r8023, -2004318072;
	// begin inline asm
	lop3.b32 %r2492, %r697, %r2494, %r2495, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2496, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2497, %r2495, %r2496;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2500, %r2492, %r2497;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2503, %r708, %r2494, %r2506, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2507, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2508, %r2506, %r2507;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2511, %r2503, %r2508;
	// end inline asm
	shr.u32 	%r2516, %r2494, 8;
	// begin inline asm
	lop3.b32 %r2514, %r697, %r2516, %r2495, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2518, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2519, %r2495, %r2518;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2522, %r2514, %r2519;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2525, %r708, %r2516, %r2506, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2529, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2530, %r2506, %r2529;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2533, %r2525, %r2530;
	// end inline asm
	// begin inline asm
	mov.b32 %r2541, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2552, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2540, %r8024, -2004318072;
	// begin inline asm
	lop3.b32 %r2538, %r697, %r2540, %r2541, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2542, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2543, %r2541, %r2542;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2546, %r2538, %r2543;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2549, %r708, %r2540, %r2552, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2553, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2554, %r2552, %r2553;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2557, %r2549, %r2554;
	// end inline asm
	shr.u32 	%r2562, %r2540, 8;
	// begin inline asm
	lop3.b32 %r2560, %r697, %r2562, %r2541, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2564, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2565, %r2541, %r2564;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2568, %r2560, %r2565;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2571, %r708, %r2562, %r2552, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2575, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2576, %r2552, %r2575;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2579, %r2571, %r2576;
	// end inline asm
	// begin inline asm
	mov.b32 %r2587, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2598, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2586, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r2584, %r697, %r2586, %r2587, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2588, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2589, %r2587, %r2588;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2592, %r2584, %r2589;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2595, %r708, %r2586, %r2598, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2599, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2600, %r2598, %r2599;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2603, %r2595, %r2600;
	// end inline asm
	shr.u32 	%r2608, %r2586, 8;
	// begin inline asm
	lop3.b32 %r2606, %r697, %r2608, %r2587, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2610, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2611, %r2587, %r2610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2614, %r2606, %r2611;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2617, %r708, %r2608, %r2598, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2621, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2622, %r2598, %r2621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2625, %r2617, %r2622;
	// end inline asm
	// begin inline asm
	mov.b32 %r2633, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2644, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2632, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r2630, %r697, %r2632, %r2633, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2634, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2635, %r2633, %r2634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2638, %r2630, %r2635;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2641, %r708, %r2632, %r2644, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2645, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2646, %r2644, %r2645;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2649, %r2641, %r2646;
	// end inline asm
	shr.u32 	%r2654, %r2632, 8;
	// begin inline asm
	lop3.b32 %r2652, %r697, %r2654, %r2633, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2656, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2657, %r2633, %r2656;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2660, %r2652, %r2657;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2663, %r708, %r2654, %r2644, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2667, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2668, %r2644, %r2667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2671, %r2663, %r2668;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2674, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2674, %r2500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2679, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r2679, %r2511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2684, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r2684, %r2522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2689, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2689, %r2533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2694, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2696, %r2694, %r2546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2699, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r2699, %r2557;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2568;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2709, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2709, %r2579;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2714, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r2714, %r2592;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2719, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2721, %r2719, %r2603;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2724, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r2724, %r2614;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2729, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2731, %r2729, %r2625;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2734, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r2734, %r2638;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2739, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2741, %r2739, %r2649;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2744, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r2744, %r2660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2749, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2751, %r2749, %r2671;
	// end inline asm
	// begin inline asm
	mov.b32 %r2759, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2770, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2756, %r697, %r1210, %r2759, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2760, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2761, %r2759, %r2760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2764, %r2756, %r2761;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2767, %r708, %r1210, %r2770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2772, %r2770, %r2771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2775, %r2767, %r2772;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2778, %r697, %r1232, %r2759, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2782, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2783, %r2759, %r2782;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2786, %r2778, %r2783;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2789, %r708, %r1232, %r2770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2793, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2794, %r2770, %r2793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2797, %r2789, %r2794;
	// end inline asm
	// begin inline asm
	mov.b32 %r2805, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2816, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2802, %r697, %r1256, %r2805, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2806, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2807, %r2805, %r2806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2810, %r2802, %r2807;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2813, %r708, %r1256, %r2816, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2817, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2818, %r2816, %r2817;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2821, %r2813, %r2818;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2824, %r697, %r1278, %r2805, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2828, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2829, %r2805, %r2828;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2832, %r2824, %r2829;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2835, %r708, %r1278, %r2816, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2839, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2840, %r2816, %r2839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2843, %r2835, %r2840;
	// end inline asm
	// begin inline asm
	mov.b32 %r2851, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2862, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2848, %r697, %r1302, %r2851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2852, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2853, %r2851, %r2852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2856, %r2848, %r2853;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2859, %r708, %r1302, %r2862, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2863, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2864, %r2862, %r2863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2867, %r2859, %r2864;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2870, %r697, %r1324, %r2851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2874, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2875, %r2851, %r2874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2878, %r2870, %r2875;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2881, %r708, %r1324, %r2862, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2885, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2886, %r2862, %r2885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2889, %r2881, %r2886;
	// end inline asm
	// begin inline asm
	mov.b32 %r2897, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2908, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2894, %r697, %r1348, %r2897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2898, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2899, %r2897, %r2898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2902, %r2894, %r2899;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2905, %r708, %r1348, %r2908, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2909, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2910, %r2908, %r2909;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2913, %r2905, %r2910;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2916, %r697, %r1370, %r2897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2920, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2921, %r2897, %r2920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2924, %r2916, %r2921;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2927, %r708, %r1370, %r2908, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2931, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2932, %r2908, %r2931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2935, %r2927, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r218, %r2764, %r2676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r218, %r2775, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r218, %r2786, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2950, %r218, %r2797, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r218, %r2810, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r218, %r2821, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2962, %r218, %r2832, %r2706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2966, %r218, %r2843, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r218, %r2856, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r218, %r2867, %r2721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2978, %r218, %r2878, %r2726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2982, %r218, %r2889, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r218, %r2902, %r2736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r218, %r2913, %r2741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2994, %r218, %r2924, %r2746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2998, %r218, %r2935, %r2751;
	// end inline asm
	// begin inline asm
	mov.b32 %r3007, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3018, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3004, %r697, %r1490, %r3007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3008, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3009, %r3007, %r3008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3012, %r3004, %r3009;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3015, %r708, %r1490, %r3018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3019, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3020, %r3018, %r3019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3023, %r3015, %r3020;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3026, %r697, %r1512, %r3007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3030, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3031, %r3007, %r3030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3034, %r3026, %r3031;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3037, %r708, %r1512, %r3018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3041, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3042, %r3018, %r3041;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3045, %r3037, %r3042;
	// end inline asm
	// begin inline asm
	mov.b32 %r3053, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3064, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3050, %r697, %r1536, %r3053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3054, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3055, %r3053, %r3054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3058, %r3050, %r3055;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3061, %r708, %r1536, %r3064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3065, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3066, %r3064, %r3065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3069, %r3061, %r3066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3072, %r697, %r1558, %r3053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3076, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3077, %r3053, %r3076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3080, %r3072, %r3077;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3083, %r708, %r1558, %r3064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3087, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3088, %r3064, %r3087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3091, %r3083, %r3088;
	// end inline asm
	// begin inline asm
	mov.b32 %r3099, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3110, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3096, %r697, %r1582, %r3099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3100, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3101, %r3099, %r3100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3104, %r3096, %r3101;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3107, %r708, %r1582, %r3110, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3112, %r3110, %r3111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3115, %r3107, %r3112;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3118, %r697, %r1604, %r3099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3122, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3123, %r3099, %r3122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3126, %r3118, %r3123;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3129, %r708, %r1604, %r3110, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3133, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3134, %r3110, %r3133;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3137, %r3129, %r3134;
	// end inline asm
	// begin inline asm
	mov.b32 %r3145, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3156, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3142, %r697, %r1628, %r3145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3147, %r3145, %r3146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3150, %r3142, %r3147;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3153, %r708, %r1628, %r3156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3157, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3158, %r3156, %r3157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3161, %r3153, %r3158;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3164, %r697, %r1650, %r3145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3168, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3169, %r3145, %r3168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3172, %r3164, %r3169;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3175, %r708, %r1650, %r3156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3179, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3180, %r3156, %r3179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3183, %r3175, %r3180;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3186, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r3186, %r3012, %r2938;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3192, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r3192, %r3023, %r2942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3198, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3200, %r3198, %r3034, %r2946;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3204, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r3204, %r3045, %r2950;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3210, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r3210, %r3058, %r2954;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3216, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r3216, %r3069, %r2958;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3222, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r3222, %r3080, %r2962;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3228, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r3228, %r3091, %r2966;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3234, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r3234, %r3104, %r2970;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3240, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3242, %r3240, %r3115, %r2974;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3246, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r3246, %r3126, %r2978;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3252, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r3252, %r3137, %r2982;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3258, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r3258, %r3150, %r2986;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3264, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3266, %r3264, %r3161, %r2990;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3270, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3272, %r3270, %r3172, %r2994;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3276, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3278, %r3276, %r3183, %r2998;
	// end inline asm
	// begin inline asm
	mov.b32 %r3287, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3298, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3284, %r697, %r698, %r3287, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3288, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3289, %r3287, %r3288;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3292, %r3284, %r3289;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3295, %r708, %r698, %r3298, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3299, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3300, %r3298, %r3299;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3303, %r3295, %r3300;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3306, %r697, %r720, %r3287, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3310, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3311, %r3287, %r3310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3314, %r3306, %r3311;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3317, %r708, %r720, %r3298, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3321, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3322, %r3298, %r3321;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3325, %r3317, %r3322;
	// end inline asm
	// begin inline asm
	mov.b32 %r3333, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3344, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3330, %r697, %r744, %r3333, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3334, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3335, %r3333, %r3334;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3338, %r3330, %r3335;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3341, %r708, %r744, %r3344, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3345, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3346, %r3344, %r3345;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3349, %r3341, %r3346;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3352, %r697, %r766, %r3333, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3356, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3357, %r3333, %r3356;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3360, %r3352, %r3357;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3363, %r708, %r766, %r3344, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3367, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3368, %r3344, %r3367;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3371, %r3363, %r3368;
	// end inline asm
	// begin inline asm
	mov.b32 %r3379, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3390, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3376, %r697, %r790, %r3379, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3380, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3381, %r3379, %r3380;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3384, %r3376, %r3381;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3387, %r708, %r790, %r3390, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3391, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3392, %r3390, %r3391;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3395, %r3387, %r3392;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3398, %r697, %r812, %r3379, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3402, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3403, %r3379, %r3402;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3406, %r3398, %r3403;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3409, %r708, %r812, %r3390, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3413, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3414, %r3390, %r3413;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3417, %r3409, %r3414;
	// end inline asm
	// begin inline asm
	mov.b32 %r3425, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3436, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3422, %r697, %r836, %r3425, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3426, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3427, %r3425, %r3426;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3430, %r3422, %r3427;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3433, %r708, %r836, %r3436, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3437, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3438, %r3436, %r3437;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3441, %r3433, %r3438;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3444, %r697, %r858, %r3425, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3448, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3449, %r3425, %r3448;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3452, %r3444, %r3449;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3455, %r708, %r858, %r3436, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3459, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3460, %r3436, %r3459;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3463, %r3455, %r3460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r254, %r3292, %r3188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r254, %r3303, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r254, %r3314, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r254, %r3325, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r254, %r3338, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r254, %r3349, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r254, %r3360, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r254, %r3371, %r3230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3573, %r254, %r3384, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3570, %r254, %r3395, %r3242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3582, %r254, %r3406, %r3248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3579, %r254, %r3417, %r3254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3591, %r254, %r3430, %r3260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3588, %r254, %r3441, %r3266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3600, %r254, %r3452, %r3272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3597, %r254, %r3463, %r3278;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3530, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3532, %r3530, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r300, %r3537, %r3532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3539, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3541, %r3539, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r300, %r3546, %r3541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3548, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r3548, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r300, %r3555, %r3550;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3557, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3559, %r3557, %r3561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3562, %r300, %r3564, %r3559;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3566, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3568, %r3566, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3571, %r300, %r3573, %r3568;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3575, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3577, %r3575, %r3579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3580, %r300, %r3582, %r3577;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3584, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3586, %r3584, %r3588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3589, %r300, %r3591, %r3586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3593, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3595, %r3593, %r3597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3598, %r300, %r3600, %r3595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3602, %r303, %r3537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3605, %r300, %r3534, %r3602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3609, %r303, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3612, %r300, %r3543, %r3609;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3616, %r303, %r3555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3619, %r300, %r3552, %r3616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3623, %r303, %r3564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3626, %r300, %r3561, %r3623;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3630, %r303, %r3573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3633, %r300, %r3570, %r3630;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3637, %r303, %r3582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3640, %r300, %r3579, %r3637;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3644, %r303, %r3591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3647, %r300, %r3588, %r3644;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3651, %r303, %r3600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3654, %r300, %r3597, %r3651;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3745, %r3742}, {%r347, %r353, %r350, %r356}, {%r3535, %r3605}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3754, %r3751}, {%r347, %r353, %r350, %r356}, {%r3544, %r3612}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3763, %r3760}, {%r347, %r353, %r350, %r356}, {%r3553, %r3619}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3772, %r3769}, {%r347, %r353, %r350, %r356}, {%r3562, %r3626}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3781, %r3778}, {%r347, %r353, %r350, %r356}, {%r3571, %r3633}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3790, %r3787}, {%r347, %r353, %r350, %r356}, {%r3580, %r3640}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3799, %r3796}, {%r347, %r353, %r350, %r356}, {%r3589, %r3647}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3808, %r3805}, {%r347, %r353, %r350, %r356}, {%r3598, %r3654}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3738, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3740, %r3738, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3743, %r391, %r3745, %r3740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3747, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3749, %r3747, %r3751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3752, %r391, %r3754, %r3749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3756, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3758, %r3756, %r3760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r391, %r3763, %r3758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3765, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3767, %r3765, %r3769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3770, %r391, %r3772, %r3767;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3774, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3776, %r3774, %r3778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3779, %r391, %r3781, %r3776;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3783, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3785, %r3783, %r3787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3788, %r391, %r3790, %r3785;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3792, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3794, %r3792, %r3796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3797, %r391, %r3799, %r3794;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3801, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3803, %r3801, %r3805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3806, %r391, %r3808, %r3803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3810, %r394, %r3745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3813, %r391, %r3742, %r3810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3817, %r394, %r3754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3820, %r391, %r3751, %r3817;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3824, %r394, %r3763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3827, %r391, %r3760, %r3824;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3831, %r394, %r3772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3834, %r391, %r3769, %r3831;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3838, %r394, %r3781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3841, %r391, %r3778, %r3838;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3845, %r394, %r3790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3848, %r391, %r3787, %r3845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3852, %r394, %r3799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3855, %r391, %r3796, %r3852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3859, %r394, %r3808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3862, %r391, %r3805, %r3859;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3866, %r3867}, {%r425, %r431, %r428, %r434}, {%r3743, %r3813}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3876, %r3877}, {%r425, %r431, %r428, %r434}, {%r3752, %r3820}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3886, %r3887}, {%r425, %r431, %r428, %r434}, {%r3761, %r3827}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3896, %r3897}, {%r425, %r431, %r428, %r434}, {%r3770, %r3834}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3906, %r3907}, {%r425, %r431, %r428, %r434}, {%r3779, %r3841}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3916, %r3917}, {%r425, %r431, %r428, %r434}, {%r3788, %r3848}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3926, %r3927}, {%r425, %r431, %r428, %r434}, {%r3797, %r3855}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3936, %r3937}, {%r425, %r431, %r428, %r434}, {%r3806, %r3862}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3946, %r17, %r3866;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3949, %r17, %r3867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3952, %r17, %r3876;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3955, %r17, %r3877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3958, %r17, %r3886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3961, %r17, %r3887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3964, %r17, %r3896;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3967, %r17, %r3897;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3970, %r17, %r3906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3973, %r17, %r3907;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3976, %r17, %r3916;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3979, %r17, %r3917;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3982, %r17, %r3926;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3985, %r17, %r3927;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3988, %r17, %r3936;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3991, %r17, %r3937;
	// end inline asm
	// begin inline asm
	mov.b32 %r3994, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3995, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3996, %r3946, %r3994;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3999, %r3996, %r3995;
	// end inline asm
	// begin inline asm
	mov.b32 %r4002, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4003, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4004, %r3949, %r4002;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4007, %r4004, %r4003;
	// end inline asm
	// begin inline asm
	mov.b32 %r4010, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4011, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4012, %r3952, %r4010;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4015, %r4012, %r4011;
	// end inline asm
	// begin inline asm
	mov.b32 %r4018, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4019, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4020, %r3955, %r4018;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4023, %r4020, %r4019;
	// end inline asm
	// begin inline asm
	mov.b32 %r4026, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4027, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4028, %r3958, %r4026;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4031, %r4028, %r4027;
	// end inline asm
	// begin inline asm
	mov.b32 %r4034, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4035, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4036, %r3961, %r4034;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4039, %r4036, %r4035;
	// end inline asm
	// begin inline asm
	mov.b32 %r4042, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4043, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4044, %r3964, %r4042;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4047, %r4044, %r4043;
	// end inline asm
	// begin inline asm
	mov.b32 %r4050, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4051, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4052, %r3967, %r4050;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4055, %r4052, %r4051;
	// end inline asm
	// begin inline asm
	mov.b32 %r4058, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4059, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4060, %r3970, %r4058;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4063, %r4060, %r4059;
	// end inline asm
	// begin inline asm
	mov.b32 %r4066, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4067, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4068, %r3973, %r4066;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4071, %r4068, %r4067;
	// end inline asm
	// begin inline asm
	mov.b32 %r4074, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4075, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4076, %r3976, %r4074;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4079, %r4076, %r4075;
	// end inline asm
	// begin inline asm
	mov.b32 %r4082, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4083, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4084, %r3979, %r4082;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4087, %r4084, %r4083;
	// end inline asm
	// begin inline asm
	mov.b32 %r4090, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4091, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4092, %r3982, %r4090;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4095, %r4092, %r4091;
	// end inline asm
	// begin inline asm
	mov.b32 %r4098, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4099, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4100, %r3985, %r4098;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4103, %r4100, %r4099;
	// end inline asm
	// begin inline asm
	mov.b32 %r4106, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4107, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4108, %r3988, %r4106;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4111, %r4108, %r4107;
	// end inline asm
	// begin inline asm
	mov.b32 %r4114, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4115, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4116, %r3991, %r4114;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4119, %r4116, %r4115;
	// end inline asm
	// begin inline asm
	mov.b32 %r4125, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4123, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4124, %r4125, %r4123;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4127, %r3999, %r4124;
	// end inline asm
	// begin inline asm
	mov.b32 %r4130, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4131, %r4125, %r4130;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4134, %r4007, %r4131;
	// end inline asm
	// begin inline asm
	mov.b32 %r4137, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4138, %r4125, %r4137;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4141, %r4015, %r4138;
	// end inline asm
	// begin inline asm
	mov.b32 %r4144, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4145, %r4125, %r4144;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4148, %r4023, %r4145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4151, %r4127, %r4141, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4155, %r4134, %r4148, %r2358;
	// end inline asm
	shl.b32 	%r4162, %r4155, 4;
	// begin inline asm
	lop3.b32 %r4159, %r2364, %r4151, %r4162, 202;
	// end inline asm
	xor.b32  	%r7886, %r4159, -2004318072;
	// begin inline asm
	mov.b32 %r4166, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4164, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4165, %r4166, %r4164;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4168, %r4031, %r4165;
	// end inline asm
	// begin inline asm
	mov.b32 %r4171, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4172, %r4166, %r4171;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4175, %r4039, %r4172;
	// end inline asm
	// begin inline asm
	mov.b32 %r4178, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4179, %r4166, %r4178;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4182, %r4047, %r4179;
	// end inline asm
	// begin inline asm
	mov.b32 %r4185, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4186, %r4166, %r4185;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4189, %r4055, %r4186;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4192, %r4168, %r4182, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4196, %r4175, %r4189, %r2358;
	// end inline asm
	shl.b32 	%r4203, %r4196, 4;
	// begin inline asm
	lop3.b32 %r4200, %r2364, %r4192, %r4203, 202;
	// end inline asm
	xor.b32  	%r7887, %r4200, -2004318072;
	// begin inline asm
	mov.b32 %r4207, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4205, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4206, %r4207, %r4205;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4209, %r4063, %r4206;
	// end inline asm
	// begin inline asm
	mov.b32 %r4212, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4213, %r4207, %r4212;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4216, %r4071, %r4213;
	// end inline asm
	// begin inline asm
	mov.b32 %r4219, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4220, %r4207, %r4219;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4223, %r4079, %r4220;
	// end inline asm
	// begin inline asm
	mov.b32 %r4226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4227, %r4207, %r4226;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4230, %r4087, %r4227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4233, %r4209, %r4223, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4237, %r4216, %r4230, %r2358;
	// end inline asm
	shl.b32 	%r4244, %r4237, 4;
	// begin inline asm
	lop3.b32 %r4241, %r2364, %r4233, %r4244, 202;
	// end inline asm
	xor.b32  	%r7888, %r4241, -2004318072;
	// begin inline asm
	mov.b32 %r4248, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4246, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4247, %r4248, %r4246;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4250, %r4095, %r4247;
	// end inline asm
	// begin inline asm
	mov.b32 %r4253, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4254, %r4248, %r4253;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4257, %r4103, %r4254;
	// end inline asm
	// begin inline asm
	mov.b32 %r4260, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4261, %r4248, %r4260;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4264, %r4111, %r4261;
	// end inline asm
	// begin inline asm
	mov.b32 %r4267, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4268, %r4248, %r4267;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4271, %r4119, %r4268;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4274, %r4250, %r4264, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4278, %r4257, %r4271, %r2358;
	// end inline asm
	shl.b32 	%r4285, %r4278, 4;
	// begin inline asm
	lop3.b32 %r4282, %r2364, %r4274, %r4285, 202;
	// end inline asm
	xor.b32  	%r7889, %r4282, -2004318072;
	st.shared.u32 	[%rd127], %r7886;
	st.shared.u32 	[%rd128], %r7887;
	st.shared.u32 	[%rd129], %r7888;
	st.shared.u32 	[%rd130], %r7889;
	ld.shared.u32 	%r8025, [%rd123];
	ld.shared.u32 	%r8026, [%rd124];
	ld.shared.u32 	%r8031, [%rd125];
	ld.shared.u32 	%r8032, [%rd126];
	// begin inline asm
	mov.b32 %r4291, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4302, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4290, %r8025, -2004318072;
	// begin inline asm
	lop3.b32 %r4288, %r697, %r4290, %r4291, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4292, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4293, %r4291, %r4292;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4296, %r4288, %r4293;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4299, %r708, %r4290, %r4302, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4303, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4304, %r4302, %r4303;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4307, %r4299, %r4304;
	// end inline asm
	shr.u32 	%r4312, %r4290, 8;
	// begin inline asm
	lop3.b32 %r4310, %r697, %r4312, %r4291, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4314, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4315, %r4291, %r4314;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4318, %r4310, %r4315;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4321, %r708, %r4312, %r4302, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4325, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4326, %r4302, %r4325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4329, %r4321, %r4326;
	// end inline asm
	// begin inline asm
	mov.b32 %r4337, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4348, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4336, %r8026, -2004318072;
	// begin inline asm
	lop3.b32 %r4334, %r697, %r4336, %r4337, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4338, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4339, %r4337, %r4338;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4342, %r4334, %r4339;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4345, %r708, %r4336, %r4348, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4349, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4350, %r4348, %r4349;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4353, %r4345, %r4350;
	// end inline asm
	shr.u32 	%r4358, %r4336, 8;
	// begin inline asm
	lop3.b32 %r4356, %r697, %r4358, %r4337, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4360, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4361, %r4337, %r4360;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4364, %r4356, %r4361;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4367, %r708, %r4358, %r4348, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4371, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4372, %r4348, %r4371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4375, %r4367, %r4372;
	// end inline asm
	// begin inline asm
	mov.b32 %r4383, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4394, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4382, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r4380, %r697, %r4382, %r4383, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4384, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4385, %r4383, %r4384;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4388, %r4380, %r4385;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4391, %r708, %r4382, %r4394, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4395, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4396, %r4394, %r4395;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4399, %r4391, %r4396;
	// end inline asm
	shr.u32 	%r4404, %r4382, 8;
	// begin inline asm
	lop3.b32 %r4402, %r697, %r4404, %r4383, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4406, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4407, %r4383, %r4406;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4410, %r4402, %r4407;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4413, %r708, %r4404, %r4394, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4417, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4418, %r4394, %r4417;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4421, %r4413, %r4418;
	// end inline asm
	// begin inline asm
	mov.b32 %r4429, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4440, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4428, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r4426, %r697, %r4428, %r4429, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4430, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4431, %r4429, %r4430;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4434, %r4426, %r4431;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4437, %r708, %r4428, %r4440, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4441, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4442, %r4440, %r4441;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4445, %r4437, %r4442;
	// end inline asm
	shr.u32 	%r4450, %r4428, 8;
	// begin inline asm
	lop3.b32 %r4448, %r697, %r4450, %r4429, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4452, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4453, %r4429, %r4452;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4456, %r4448, %r4453;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4459, %r708, %r4450, %r4440, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4463, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4464, %r4440, %r4463;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4467, %r4459, %r4464;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4470, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4472, %r4470, %r4296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4475, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4477, %r4475, %r4307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4480, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4482, %r4480, %r4318;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4485, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4487, %r4485, %r4329;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4490, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4492, %r4490, %r4342;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4495, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4497, %r4495, %r4353;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4500, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4502, %r4500, %r4364;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4505, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4507, %r4505, %r4375;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4510, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4512, %r4510, %r4388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4515, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4517, %r4515, %r4399;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4520, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4522, %r4520, %r4410;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4525, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4527, %r4525, %r4421;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4530, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4532, %r4530, %r4434;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4535, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4537, %r4535, %r4445;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4540, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4542, %r4540, %r4456;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4545, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4547, %r4545, %r4467;
	// end inline asm
	// begin inline asm
	mov.b32 %r4555, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4566, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4552, %r697, %r1490, %r4555, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4556, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4557, %r4555, %r4556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4560, %r4552, %r4557;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4563, %r708, %r1490, %r4566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4567, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4568, %r4566, %r4567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4571, %r4563, %r4568;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4574, %r697, %r1512, %r4555, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4578, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4579, %r4555, %r4578;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4582, %r4574, %r4579;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4585, %r708, %r1512, %r4566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4589, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4590, %r4566, %r4589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4593, %r4585, %r4590;
	// end inline asm
	// begin inline asm
	mov.b32 %r4601, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4612, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4598, %r697, %r1536, %r4601, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4602, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4603, %r4601, %r4602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4606, %r4598, %r4603;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4609, %r708, %r1536, %r4612, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4613, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4614, %r4612, %r4613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4617, %r4609, %r4614;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4620, %r697, %r1558, %r4601, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4624, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4625, %r4601, %r4624;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4628, %r4620, %r4625;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4631, %r708, %r1558, %r4612, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4635, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4636, %r4612, %r4635;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4639, %r4631, %r4636;
	// end inline asm
	// begin inline asm
	mov.b32 %r4647, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4658, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4644, %r697, %r1582, %r4647, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4648, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4649, %r4647, %r4648;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4652, %r4644, %r4649;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4655, %r708, %r1582, %r4658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4659, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4660, %r4658, %r4659;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4663, %r4655, %r4660;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4666, %r697, %r1604, %r4647, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4670, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4671, %r4647, %r4670;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4674, %r4666, %r4671;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4677, %r708, %r1604, %r4658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4681, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4682, %r4658, %r4681;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4685, %r4677, %r4682;
	// end inline asm
	// begin inline asm
	mov.b32 %r4693, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4704, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4690, %r697, %r1628, %r4693, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4694, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4695, %r4693, %r4694;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4698, %r4690, %r4695;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4701, %r708, %r1628, %r4704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4705, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4706, %r4704, %r4705;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4709, %r4701, %r4706;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4712, %r697, %r1650, %r4693, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4716, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4717, %r4693, %r4716;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4720, %r4712, %r4717;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4723, %r708, %r1650, %r4704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4727, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4728, %r4704, %r4727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4731, %r4723, %r4728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4734, %r218, %r4560, %r4472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4738, %r218, %r4571, %r4477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4742, %r218, %r4582, %r4482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4746, %r218, %r4593, %r4487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4750, %r218, %r4606, %r4492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4754, %r218, %r4617, %r4497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4758, %r218, %r4628, %r4502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4762, %r218, %r4639, %r4507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4766, %r218, %r4652, %r4512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4770, %r218, %r4663, %r4517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4774, %r218, %r4674, %r4522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4778, %r218, %r4685, %r4527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4782, %r218, %r4698, %r4532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4786, %r218, %r4709, %r4537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4790, %r218, %r4720, %r4542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4794, %r218, %r4731, %r4547;
	// end inline asm
	// begin inline asm
	mov.b32 %r4803, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4814, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4800, %r697, %r698, %r4803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4805, %r4803, %r4804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4808, %r4800, %r4805;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4811, %r708, %r698, %r4814, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4815, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4816, %r4814, %r4815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4819, %r4811, %r4816;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4822, %r697, %r720, %r4803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4826, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4827, %r4803, %r4826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4830, %r4822, %r4827;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4833, %r708, %r720, %r4814, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4837, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4838, %r4814, %r4837;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4841, %r4833, %r4838;
	// end inline asm
	// begin inline asm
	mov.b32 %r4849, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4860, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4846, %r697, %r744, %r4849, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4850, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4851, %r4849, %r4850;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4854, %r4846, %r4851;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4857, %r708, %r744, %r4860, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4861, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4862, %r4860, %r4861;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4865, %r4857, %r4862;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4868, %r697, %r766, %r4849, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4872, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4873, %r4849, %r4872;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4876, %r4868, %r4873;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4879, %r708, %r766, %r4860, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4883, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4884, %r4860, %r4883;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4887, %r4879, %r4884;
	// end inline asm
	// begin inline asm
	mov.b32 %r4895, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4906, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4892, %r697, %r790, %r4895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4896, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4897, %r4895, %r4896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4900, %r4892, %r4897;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4903, %r708, %r790, %r4906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4907, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4908, %r4906, %r4907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4911, %r4903, %r4908;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4914, %r697, %r812, %r4895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4918, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4919, %r4895, %r4918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4922, %r4914, %r4919;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4925, %r708, %r812, %r4906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4929, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4930, %r4906, %r4929;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4933, %r4925, %r4930;
	// end inline asm
	// begin inline asm
	mov.b32 %r4941, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4952, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4938, %r697, %r836, %r4941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4942, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4943, %r4941, %r4942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4946, %r4938, %r4943;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4949, %r708, %r836, %r4952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4953, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4954, %r4952, %r4953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4957, %r4949, %r4954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4960, %r697, %r858, %r4941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4964, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4965, %r4941, %r4964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4968, %r4960, %r4965;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4971, %r708, %r858, %r4952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4976, %r4952, %r4975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4979, %r4971, %r4976;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4982, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4984, %r4982, %r4808, %r4734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4988, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4990, %r4988, %r4819, %r4738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4994, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4996, %r4994, %r4830, %r4742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5000, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5002, %r5000, %r4841, %r4746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5006, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5008, %r5006, %r4854, %r4750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5012, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5014, %r5012, %r4865, %r4754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5018, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5020, %r5018, %r4876, %r4758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5024, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5026, %r5024, %r4887, %r4762;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5030, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5032, %r5030, %r4900, %r4766;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5036, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5038, %r5036, %r4911, %r4770;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5042, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5044, %r5042, %r4922, %r4774;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5048, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5050, %r5048, %r4933, %r4778;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5054, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5056, %r5054, %r4946, %r4782;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5060, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5062, %r5060, %r4957, %r4786;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5066, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5068, %r5066, %r4968, %r4790;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5072, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5074, %r5072, %r4979, %r4794;
	// end inline asm
	// begin inline asm
	mov.b32 %r5083, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5094, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5080, %r697, %r2494, %r5083, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5084, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5085, %r5083, %r5084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5088, %r5080, %r5085;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5091, %r708, %r2494, %r5094, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5095, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5096, %r5094, %r5095;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5099, %r5091, %r5096;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5102, %r697, %r2516, %r5083, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5106, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5107, %r5083, %r5106;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5110, %r5102, %r5107;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5113, %r708, %r2516, %r5094, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5117, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5118, %r5094, %r5117;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5121, %r5113, %r5118;
	// end inline asm
	// begin inline asm
	mov.b32 %r5129, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5140, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5126, %r697, %r2540, %r5129, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5130, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5131, %r5129, %r5130;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5134, %r5126, %r5131;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5137, %r708, %r2540, %r5140, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5141, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5142, %r5140, %r5141;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5145, %r5137, %r5142;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5148, %r697, %r2562, %r5129, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5152, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5153, %r5129, %r5152;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5156, %r5148, %r5153;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5159, %r708, %r2562, %r5140, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5163, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5164, %r5140, %r5163;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5167, %r5159, %r5164;
	// end inline asm
	// begin inline asm
	mov.b32 %r5175, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5186, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5172, %r697, %r2586, %r5175, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5176, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5177, %r5175, %r5176;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5180, %r5172, %r5177;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5183, %r708, %r2586, %r5186, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5187, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5188, %r5186, %r5187;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5191, %r5183, %r5188;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5194, %r697, %r2608, %r5175, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5198, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5199, %r5175, %r5198;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5202, %r5194, %r5199;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5205, %r708, %r2608, %r5186, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5209, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5210, %r5186, %r5209;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5213, %r5205, %r5210;
	// end inline asm
	// begin inline asm
	mov.b32 %r5221, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5232, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5218, %r697, %r2632, %r5221, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5222, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5223, %r5221, %r5222;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5226, %r5218, %r5223;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5229, %r708, %r2632, %r5232, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5233, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5234, %r5232, %r5233;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5237, %r5229, %r5234;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5240, %r697, %r2654, %r5221, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5244, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5245, %r5221, %r5244;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5248, %r5240, %r5245;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5251, %r708, %r2654, %r5232, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5255, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5256, %r5232, %r5255;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5259, %r5251, %r5256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5333, %r254, %r5088, %r4984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r254, %r5099, %r4990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r254, %r5110, %r4996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r254, %r5121, %r5002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5351, %r254, %r5134, %r5008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5348, %r254, %r5145, %r5014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5360, %r254, %r5156, %r5020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5357, %r254, %r5167, %r5026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5369, %r254, %r5180, %r5032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5366, %r254, %r5191, %r5038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5378, %r254, %r5202, %r5044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5375, %r254, %r5213, %r5050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5387, %r254, %r5226, %r5056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5384, %r254, %r5237, %r5062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5396, %r254, %r5248, %r5068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5393, %r254, %r5259, %r5074;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5326, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5328, %r5326, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5331, %r300, %r5333, %r5328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5335, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5337, %r5335, %r5339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5340, %r300, %r5342, %r5337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5344, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5346, %r5344, %r5348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5349, %r300, %r5351, %r5346;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5353, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5355, %r5353, %r5357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5358, %r300, %r5360, %r5355;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5362, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5364, %r5362, %r5366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5367, %r300, %r5369, %r5364;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5371, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5373, %r5371, %r5375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5376, %r300, %r5378, %r5373;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5380, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5382, %r5380, %r5384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5385, %r300, %r5387, %r5382;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5389, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5391, %r5389, %r5393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5394, %r300, %r5396, %r5391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5398, %r303, %r5333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5401, %r300, %r5330, %r5398;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5405, %r303, %r5342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5408, %r300, %r5339, %r5405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5412, %r303, %r5351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5415, %r300, %r5348, %r5412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5419, %r303, %r5360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5422, %r300, %r5357, %r5419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5426, %r303, %r5369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5429, %r300, %r5366, %r5426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5433, %r303, %r5378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5436, %r300, %r5375, %r5433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5440, %r303, %r5387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5443, %r300, %r5384, %r5440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5447, %r303, %r5396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5450, %r300, %r5393, %r5447;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5541, %r5538}, {%r347, %r353, %r350, %r356}, {%r5331, %r5401}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5550, %r5547}, {%r347, %r353, %r350, %r356}, {%r5340, %r5408}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5559, %r5556}, {%r347, %r353, %r350, %r356}, {%r5349, %r5415}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5568, %r5565}, {%r347, %r353, %r350, %r356}, {%r5358, %r5422}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5577, %r5574}, {%r347, %r353, %r350, %r356}, {%r5367, %r5429}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5586, %r5583}, {%r347, %r353, %r350, %r356}, {%r5376, %r5436}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5595, %r5592}, {%r347, %r353, %r350, %r356}, {%r5385, %r5443}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5604, %r5601}, {%r347, %r353, %r350, %r356}, {%r5394, %r5450}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5534, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5536, %r5534, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5539, %r391, %r5541, %r5536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5543, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5545, %r5543, %r5547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5548, %r391, %r5550, %r5545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5552, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5554, %r5552, %r5556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5557, %r391, %r5559, %r5554;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5561, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5563, %r5561, %r5565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5566, %r391, %r5568, %r5563;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5570, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5572, %r5570, %r5574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5575, %r391, %r5577, %r5572;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5579, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5581, %r5579, %r5583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5584, %r391, %r5586, %r5581;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5588, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5590, %r5588, %r5592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5593, %r391, %r5595, %r5590;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5597, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5599, %r5597, %r5601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5602, %r391, %r5604, %r5599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5606, %r394, %r5541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5609, %r391, %r5538, %r5606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5613, %r394, %r5550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5616, %r391, %r5547, %r5613;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5620, %r394, %r5559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5623, %r391, %r5556, %r5620;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5627, %r394, %r5568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5630, %r391, %r5565, %r5627;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5634, %r394, %r5577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5637, %r391, %r5574, %r5634;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5641, %r394, %r5586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5644, %r391, %r5583, %r5641;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5648, %r394, %r5595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5651, %r391, %r5592, %r5648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5655, %r394, %r5604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5658, %r391, %r5601, %r5655;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5662, %r5663}, {%r425, %r431, %r428, %r434}, {%r5539, %r5609}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5672, %r5673}, {%r425, %r431, %r428, %r434}, {%r5548, %r5616}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5682, %r5683}, {%r425, %r431, %r428, %r434}, {%r5557, %r5623}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5692, %r5693}, {%r425, %r431, %r428, %r434}, {%r5566, %r5630}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5702, %r5703}, {%r425, %r431, %r428, %r434}, {%r5575, %r5637}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5712, %r5713}, {%r425, %r431, %r428, %r434}, {%r5584, %r5644}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5722, %r5723}, {%r425, %r431, %r428, %r434}, {%r5593, %r5651}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5732, %r5733}, {%r425, %r431, %r428, %r434}, {%r5602, %r5658}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5742, %r17, %r5662;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5745, %r17, %r5663;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5748, %r17, %r5672;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5751, %r17, %r5673;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5754, %r17, %r5682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5757, %r17, %r5683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5760, %r17, %r5692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5763, %r17, %r5693;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5766, %r17, %r5702;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5769, %r17, %r5703;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5772, %r17, %r5712;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5775, %r17, %r5713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5778, %r17, %r5722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5781, %r17, %r5723;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5784, %r17, %r5732;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5787, %r17, %r5733;
	// end inline asm
	// begin inline asm
	mov.b32 %r5790, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5791, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5792, %r5742, %r5790;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5795, %r5792, %r5791;
	// end inline asm
	// begin inline asm
	mov.b32 %r5798, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5799, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5800, %r5745, %r5798;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5803, %r5800, %r5799;
	// end inline asm
	// begin inline asm
	mov.b32 %r5806, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5807, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5808, %r5748, %r5806;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5811, %r5808, %r5807;
	// end inline asm
	// begin inline asm
	mov.b32 %r5814, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5815, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5816, %r5751, %r5814;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5819, %r5816, %r5815;
	// end inline asm
	// begin inline asm
	mov.b32 %r5822, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5823, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5824, %r5754, %r5822;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5827, %r5824, %r5823;
	// end inline asm
	// begin inline asm
	mov.b32 %r5830, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5831, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5832, %r5757, %r5830;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5835, %r5832, %r5831;
	// end inline asm
	// begin inline asm
	mov.b32 %r5838, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5839, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5840, %r5760, %r5838;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5843, %r5840, %r5839;
	// end inline asm
	// begin inline asm
	mov.b32 %r5846, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5847, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5848, %r5763, %r5846;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5851, %r5848, %r5847;
	// end inline asm
	// begin inline asm
	mov.b32 %r5854, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5855, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5856, %r5766, %r5854;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5859, %r5856, %r5855;
	// end inline asm
	// begin inline asm
	mov.b32 %r5862, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5863, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5864, %r5769, %r5862;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5867, %r5864, %r5863;
	// end inline asm
	// begin inline asm
	mov.b32 %r5870, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5871, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5872, %r5772, %r5870;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5875, %r5872, %r5871;
	// end inline asm
	// begin inline asm
	mov.b32 %r5878, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5879, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5880, %r5775, %r5878;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5883, %r5880, %r5879;
	// end inline asm
	// begin inline asm
	mov.b32 %r5886, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5887, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5888, %r5778, %r5886;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5891, %r5888, %r5887;
	// end inline asm
	// begin inline asm
	mov.b32 %r5894, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5895, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5896, %r5781, %r5894;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5899, %r5896, %r5895;
	// end inline asm
	// begin inline asm
	mov.b32 %r5902, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5903, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5904, %r5784, %r5902;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5907, %r5904, %r5903;
	// end inline asm
	// begin inline asm
	mov.b32 %r5910, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5911, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5912, %r5787, %r5910;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5915, %r5912, %r5911;
	// end inline asm
	// begin inline asm
	mov.b32 %r5921, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5919, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5920, %r5921, %r5919;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5923, %r5795, %r5920;
	// end inline asm
	// begin inline asm
	mov.b32 %r5926, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5927, %r5921, %r5926;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5930, %r5803, %r5927;
	// end inline asm
	// begin inline asm
	mov.b32 %r5933, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5934, %r5921, %r5933;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5937, %r5811, %r5934;
	// end inline asm
	// begin inline asm
	mov.b32 %r5940, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5941, %r5921, %r5940;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5944, %r5819, %r5941;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5947, %r5923, %r5937, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5951, %r5930, %r5944, %r2358;
	// end inline asm
	shl.b32 	%r5958, %r5951, 4;
	// begin inline asm
	lop3.b32 %r5955, %r2364, %r5947, %r5958, 202;
	// end inline asm
	xor.b32  	%r7890, %r5955, -2004318072;
	// begin inline asm
	mov.b32 %r5962, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5960, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5961, %r5962, %r5960;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5964, %r5827, %r5961;
	// end inline asm
	// begin inline asm
	mov.b32 %r5967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5968, %r5962, %r5967;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5971, %r5835, %r5968;
	// end inline asm
	// begin inline asm
	mov.b32 %r5974, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5975, %r5962, %r5974;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5978, %r5843, %r5975;
	// end inline asm
	// begin inline asm
	mov.b32 %r5981, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5982, %r5962, %r5981;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5985, %r5851, %r5982;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5988, %r5964, %r5978, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5992, %r5971, %r5985, %r2358;
	// end inline asm
	shl.b32 	%r5999, %r5992, 4;
	// begin inline asm
	lop3.b32 %r5996, %r2364, %r5988, %r5999, 202;
	// end inline asm
	xor.b32  	%r7891, %r5996, -2004318072;
	// begin inline asm
	mov.b32 %r6003, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6001, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6002, %r6003, %r6001;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6005, %r5859, %r6002;
	// end inline asm
	// begin inline asm
	mov.b32 %r6008, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6009, %r6003, %r6008;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6012, %r5867, %r6009;
	// end inline asm
	// begin inline asm
	mov.b32 %r6015, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6016, %r6003, %r6015;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6019, %r5875, %r6016;
	// end inline asm
	// begin inline asm
	mov.b32 %r6022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6023, %r6003, %r6022;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6026, %r5883, %r6023;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6029, %r6005, %r6019, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6033, %r6012, %r6026, %r2358;
	// end inline asm
	shl.b32 	%r6040, %r6033, 4;
	// begin inline asm
	lop3.b32 %r6037, %r2364, %r6029, %r6040, 202;
	// end inline asm
	xor.b32  	%r7892, %r6037, -2004318072;
	// begin inline asm
	mov.b32 %r6044, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6042, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6043, %r6044, %r6042;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6046, %r5891, %r6043;
	// end inline asm
	// begin inline asm
	mov.b32 %r6049, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6050, %r6044, %r6049;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6053, %r5899, %r6050;
	// end inline asm
	// begin inline asm
	mov.b32 %r6056, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6057, %r6044, %r6056;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6060, %r5907, %r6057;
	// end inline asm
	// begin inline asm
	mov.b32 %r6063, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6064, %r6044, %r6063;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6067, %r5915, %r6064;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6070, %r6046, %r6060, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6074, %r6053, %r6067, %r2358;
	// end inline asm
	shl.b32 	%r6081, %r6074, 4;
	// begin inline asm
	lop3.b32 %r6078, %r2364, %r6070, %r6081, 202;
	// end inline asm
	xor.b32  	%r7893, %r6078, -2004318072;
	st.shared.u32 	[%rd127], %r7890;
	st.shared.u32 	[%rd128], %r7891;
	st.shared.u32 	[%rd129], %r7892;
	st.shared.u32 	[%rd130], %r7893;
	ld.shared.u32 	%r8027, [%rd123];
	ld.shared.u32 	%r8028, [%rd124];
	ld.shared.u32 	%r8033, [%rd125];
	ld.shared.u32 	%r8034, [%rd126];
	// begin inline asm
	mov.b32 %r6087, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6098, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6086, %r8027, -2004318072;
	// begin inline asm
	lop3.b32 %r6084, %r697, %r6086, %r6087, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6088, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6089, %r6087, %r6088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6092, %r6084, %r6089;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6095, %r708, %r6086, %r6098, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6099, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6100, %r6098, %r6099;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6103, %r6095, %r6100;
	// end inline asm
	shr.u32 	%r6108, %r6086, 8;
	// begin inline asm
	lop3.b32 %r6106, %r697, %r6108, %r6087, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6110, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6111, %r6087, %r6110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6114, %r6106, %r6111;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6117, %r708, %r6108, %r6098, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6121, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6122, %r6098, %r6121;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6125, %r6117, %r6122;
	// end inline asm
	// begin inline asm
	mov.b32 %r6133, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6144, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6132, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r6130, %r697, %r6132, %r6133, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6134, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6135, %r6133, %r6134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6138, %r6130, %r6135;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6141, %r708, %r6132, %r6144, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6145, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6146, %r6144, %r6145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6149, %r6141, %r6146;
	// end inline asm
	shr.u32 	%r6154, %r6132, 8;
	// begin inline asm
	lop3.b32 %r6152, %r697, %r6154, %r6133, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6156, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6157, %r6133, %r6156;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6160, %r6152, %r6157;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6163, %r708, %r6154, %r6144, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6167, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6168, %r6144, %r6167;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6171, %r6163, %r6168;
	// end inline asm
	// begin inline asm
	mov.b32 %r6179, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6190, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6178, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r6176, %r697, %r6178, %r6179, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6180, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6181, %r6179, %r6180;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6184, %r6176, %r6181;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6187, %r708, %r6178, %r6190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6191, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6192, %r6190, %r6191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6195, %r6187, %r6192;
	// end inline asm
	shr.u32 	%r6200, %r6178, 8;
	// begin inline asm
	lop3.b32 %r6198, %r697, %r6200, %r6179, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6202, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6203, %r6179, %r6202;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6206, %r6198, %r6203;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6209, %r708, %r6200, %r6190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6213, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6214, %r6190, %r6213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6217, %r6209, %r6214;
	// end inline asm
	// begin inline asm
	mov.b32 %r6225, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6236, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6224, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r6222, %r697, %r6224, %r6225, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6227, %r6225, %r6226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6230, %r6222, %r6227;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6233, %r708, %r6224, %r6236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6237, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6238, %r6236, %r6237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6241, %r6233, %r6238;
	// end inline asm
	shr.u32 	%r6246, %r6224, 8;
	// begin inline asm
	lop3.b32 %r6244, %r697, %r6246, %r6225, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6248, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6249, %r6225, %r6248;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6252, %r6244, %r6249;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6255, %r708, %r6246, %r6236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6259, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6260, %r6236, %r6259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6263, %r6255, %r6260;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6266, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6268, %r6266, %r6092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6271, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6273, %r6271, %r6103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6276, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6278, %r6276, %r6114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6281, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6283, %r6281, %r6125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6286, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6288, %r6286, %r6138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6291, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6293, %r6291, %r6149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6296, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6298, %r6296, %r6160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6301, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6303, %r6301, %r6171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6306, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6308, %r6306, %r6184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6311, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6313, %r6311, %r6195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6316, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6318, %r6316, %r6206;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6321, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6323, %r6321, %r6217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6326, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6328, %r6326, %r6230;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6331, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6333, %r6331, %r6241;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6336, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6338, %r6336, %r6252;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6341, %r272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6343, %r6341, %r6263;
	// end inline asm
	// begin inline asm
	mov.b32 %r6351, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6362, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6348, %r697, %r698, %r6351, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6352, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6353, %r6351, %r6352;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6356, %r6348, %r6353;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6359, %r708, %r698, %r6362, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6363, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6364, %r6362, %r6363;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6367, %r6359, %r6364;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6370, %r697, %r720, %r6351, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6374, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6375, %r6351, %r6374;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6378, %r6370, %r6375;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6381, %r708, %r720, %r6362, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6385, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6386, %r6362, %r6385;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6389, %r6381, %r6386;
	// end inline asm
	// begin inline asm
	mov.b32 %r6397, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6408, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6394, %r697, %r744, %r6397, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6398, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6399, %r6397, %r6398;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6402, %r6394, %r6399;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6405, %r708, %r744, %r6408, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6409, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6410, %r6408, %r6409;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6413, %r6405, %r6410;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6416, %r697, %r766, %r6397, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6420, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6421, %r6397, %r6420;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6424, %r6416, %r6421;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6427, %r708, %r766, %r6408, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6431, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6432, %r6408, %r6431;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6435, %r6427, %r6432;
	// end inline asm
	// begin inline asm
	mov.b32 %r6443, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6454, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6440, %r697, %r790, %r6443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6444, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6445, %r6443, %r6444;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6448, %r6440, %r6445;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6451, %r708, %r790, %r6454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6455, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6456, %r6454, %r6455;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6459, %r6451, %r6456;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6462, %r697, %r812, %r6443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6466, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6467, %r6443, %r6466;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6470, %r6462, %r6467;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6473, %r708, %r812, %r6454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6477, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6478, %r6454, %r6477;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6481, %r6473, %r6478;
	// end inline asm
	// begin inline asm
	mov.b32 %r6489, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6500, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6486, %r697, %r836, %r6489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6490, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6491, %r6489, %r6490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6494, %r6486, %r6491;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6497, %r708, %r836, %r6500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6501, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6502, %r6500, %r6501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6505, %r6497, %r6502;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6508, %r697, %r858, %r6489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6512, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6513, %r6489, %r6512;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6516, %r6508, %r6513;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6519, %r708, %r858, %r6500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6523, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6524, %r6500, %r6523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6527, %r6519, %r6524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6530, %r218, %r6356, %r6268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6534, %r218, %r6367, %r6273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6538, %r218, %r6378, %r6278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6542, %r218, %r6389, %r6283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6546, %r218, %r6402, %r6288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6550, %r218, %r6413, %r6293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6554, %r218, %r6424, %r6298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6558, %r218, %r6435, %r6303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6562, %r218, %r6448, %r6308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6566, %r218, %r6459, %r6313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6570, %r218, %r6470, %r6318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6574, %r218, %r6481, %r6323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6578, %r218, %r6494, %r6328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6582, %r218, %r6505, %r6333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6586, %r218, %r6516, %r6338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6590, %r218, %r6527, %r6343;
	// end inline asm
	// begin inline asm
	mov.b32 %r6599, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6610, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6596, %r697, %r2494, %r6599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6600, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6601, %r6599, %r6600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6604, %r6596, %r6601;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6607, %r708, %r2494, %r6610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6611, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6612, %r6610, %r6611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6615, %r6607, %r6612;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6618, %r697, %r2516, %r6599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6622, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6623, %r6599, %r6622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6626, %r6618, %r6623;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6629, %r708, %r2516, %r6610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6633, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6634, %r6610, %r6633;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6637, %r6629, %r6634;
	// end inline asm
	// begin inline asm
	mov.b32 %r6645, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6656, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6642, %r697, %r2540, %r6645, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6646, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6647, %r6645, %r6646;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6650, %r6642, %r6647;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6653, %r708, %r2540, %r6656, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6657, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6658, %r6656, %r6657;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6661, %r6653, %r6658;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6664, %r697, %r2562, %r6645, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6668, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6669, %r6645, %r6668;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6672, %r6664, %r6669;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6675, %r708, %r2562, %r6656, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6679, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6680, %r6656, %r6679;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6683, %r6675, %r6680;
	// end inline asm
	// begin inline asm
	mov.b32 %r6691, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6702, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6688, %r697, %r2586, %r6691, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6692, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6693, %r6691, %r6692;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6696, %r6688, %r6693;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6699, %r708, %r2586, %r6702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6703, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6704, %r6702, %r6703;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6707, %r6699, %r6704;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6710, %r697, %r2608, %r6691, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6714, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6715, %r6691, %r6714;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6718, %r6710, %r6715;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6721, %r708, %r2608, %r6702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6725, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6726, %r6702, %r6725;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6729, %r6721, %r6726;
	// end inline asm
	// begin inline asm
	mov.b32 %r6737, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6748, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6734, %r697, %r2632, %r6737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6739, %r6737, %r6738;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6742, %r6734, %r6739;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6745, %r708, %r2632, %r6748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6749, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6750, %r6748, %r6749;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6753, %r6745, %r6750;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6756, %r697, %r2654, %r6737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6760, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6761, %r6737, %r6760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6764, %r6756, %r6761;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6767, %r708, %r2654, %r6748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6772, %r6748, %r6771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6775, %r6767, %r6772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6778, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6780, %r6778, %r6604, %r6530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6784, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6786, %r6784, %r6615, %r6534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6790, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6792, %r6790, %r6626, %r6538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6796, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6798, %r6796, %r6637, %r6542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6802, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6804, %r6802, %r6650, %r6546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6808, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6810, %r6808, %r6661, %r6550;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6814, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6816, %r6814, %r6672, %r6554;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6820, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6822, %r6820, %r6683, %r6558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6826, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6828, %r6826, %r6696, %r6562;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6832, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6834, %r6832, %r6707, %r6566;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6838, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6840, %r6838, %r6718, %r6570;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6844, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6846, %r6844, %r6729, %r6574;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6850, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6852, %r6850, %r6742, %r6578;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6856, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6858, %r6856, %r6753, %r6582;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6862, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6864, %r6862, %r6764, %r6586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6868, %r236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6870, %r6868, %r6775, %r6590;
	// end inline asm
	// begin inline asm
	mov.b32 %r6879, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6890, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6876, %r697, %r4290, %r6879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6880, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6881, %r6879, %r6880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6884, %r6876, %r6881;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6887, %r708, %r4290, %r6890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6891, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6892, %r6890, %r6891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6895, %r6887, %r6892;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6898, %r697, %r4312, %r6879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6902, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6903, %r6879, %r6902;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6906, %r6898, %r6903;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6909, %r708, %r4312, %r6890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6913, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6914, %r6890, %r6913;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6917, %r6909, %r6914;
	// end inline asm
	// begin inline asm
	mov.b32 %r6925, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6936, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6922, %r697, %r4336, %r6925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6926, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6927, %r6925, %r6926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6930, %r6922, %r6927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6933, %r708, %r4336, %r6936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6937, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6938, %r6936, %r6937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6941, %r6933, %r6938;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6944, %r697, %r4358, %r6925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6948, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6949, %r6925, %r6948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6952, %r6944, %r6949;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6955, %r708, %r4358, %r6936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6959, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6960, %r6936, %r6959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6963, %r6955, %r6960;
	// end inline asm
	// begin inline asm
	mov.b32 %r6971, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6982, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6968, %r697, %r4382, %r6971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6972, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6973, %r6971, %r6972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6976, %r6968, %r6973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6979, %r708, %r4382, %r6982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6983, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6984, %r6982, %r6983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6987, %r6979, %r6984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6990, %r697, %r4404, %r6971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6994, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6995, %r6971, %r6994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6998, %r6990, %r6995;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7001, %r708, %r4404, %r6982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7005, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7006, %r6982, %r7005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7009, %r7001, %r7006;
	// end inline asm
	// begin inline asm
	mov.b32 %r7017, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7028, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r7014, %r697, %r4428, %r7017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7018, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7019, %r7017, %r7018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7022, %r7014, %r7019;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7025, %r708, %r4428, %r7028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7029, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7030, %r7028, %r7029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7033, %r7025, %r7030;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7036, %r697, %r4450, %r7017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7040, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7041, %r7017, %r7040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7044, %r7036, %r7041;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7047, %r708, %r4450, %r7028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7051, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7052, %r7028, %r7051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7055, %r7047, %r7052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7129, %r254, %r6884, %r6780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r254, %r6895, %r6786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r254, %r6906, %r6792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r254, %r6917, %r6798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7147, %r254, %r6930, %r6804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7144, %r254, %r6941, %r6810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7156, %r254, %r6952, %r6816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7153, %r254, %r6963, %r6822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7165, %r254, %r6976, %r6828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7162, %r254, %r6987, %r6834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7174, %r254, %r6998, %r6840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7171, %r254, %r7009, %r6846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7183, %r254, %r7022, %r6852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7180, %r254, %r7033, %r6858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7192, %r254, %r7044, %r6864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7189, %r254, %r7055, %r6870;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7122, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7124, %r7122, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7127, %r300, %r7129, %r7124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7131, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7133, %r7131, %r7135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7136, %r300, %r7138, %r7133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7140, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7142, %r7140, %r7144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7145, %r300, %r7147, %r7142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7149, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7151, %r7149, %r7153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7154, %r300, %r7156, %r7151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7158, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7160, %r7158, %r7162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7163, %r300, %r7165, %r7160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7167, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7169, %r7167, %r7171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7172, %r300, %r7174, %r7169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7176, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7178, %r7176, %r7180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7181, %r300, %r7183, %r7178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7185, %r303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7187, %r7185, %r7189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7190, %r300, %r7192, %r7187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7194, %r303, %r7129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7197, %r300, %r7126, %r7194;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7201, %r303, %r7138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7204, %r300, %r7135, %r7201;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7208, %r303, %r7147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7211, %r300, %r7144, %r7208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7215, %r303, %r7156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7218, %r300, %r7153, %r7215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7222, %r303, %r7165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7225, %r300, %r7162, %r7222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7229, %r303, %r7174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7232, %r300, %r7171, %r7229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7236, %r303, %r7183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7239, %r300, %r7180, %r7236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7243, %r303, %r7192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7246, %r300, %r7189, %r7243;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7337, %r7334}, {%r347, %r353, %r350, %r356}, {%r7127, %r7197}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7346, %r7343}, {%r347, %r353, %r350, %r356}, {%r7136, %r7204}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7355, %r7352}, {%r347, %r353, %r350, %r356}, {%r7145, %r7211}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7364, %r7361}, {%r347, %r353, %r350, %r356}, {%r7154, %r7218}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7373, %r7370}, {%r347, %r353, %r350, %r356}, {%r7163, %r7225}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7382, %r7379}, {%r347, %r353, %r350, %r356}, {%r7172, %r7232}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7391, %r7388}, {%r347, %r353, %r350, %r356}, {%r7181, %r7239}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7400, %r7397}, {%r347, %r353, %r350, %r356}, {%r7190, %r7246}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7330, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7332, %r7330, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7335, %r391, %r7337, %r7332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7339, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7341, %r7339, %r7343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7344, %r391, %r7346, %r7341;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7348, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7350, %r7348, %r7352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7353, %r391, %r7355, %r7350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7357, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7359, %r7357, %r7361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7362, %r391, %r7364, %r7359;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7366, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7368, %r7366, %r7370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7371, %r391, %r7373, %r7368;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7375, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7377, %r7375, %r7379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7380, %r391, %r7382, %r7377;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7384, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7386, %r7384, %r7388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7389, %r391, %r7391, %r7386;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7393, %r394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7395, %r7393, %r7397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7398, %r391, %r7400, %r7395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7402, %r394, %r7337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7405, %r391, %r7334, %r7402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7409, %r394, %r7346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7412, %r391, %r7343, %r7409;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7416, %r394, %r7355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7419, %r391, %r7352, %r7416;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7423, %r394, %r7364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7426, %r391, %r7361, %r7423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7430, %r394, %r7373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7433, %r391, %r7370, %r7430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7437, %r394, %r7382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7440, %r391, %r7379, %r7437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7444, %r394, %r7391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7447, %r391, %r7388, %r7444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7451, %r394, %r7400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7454, %r391, %r7397, %r7451;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7458, %r7459}, {%r425, %r431, %r428, %r434}, {%r7335, %r7405}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7468, %r7469}, {%r425, %r431, %r428, %r434}, {%r7344, %r7412}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7478, %r7479}, {%r425, %r431, %r428, %r434}, {%r7353, %r7419}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7488, %r7489}, {%r425, %r431, %r428, %r434}, {%r7362, %r7426}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7498, %r7499}, {%r425, %r431, %r428, %r434}, {%r7371, %r7433}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7508, %r7509}, {%r425, %r431, %r428, %r434}, {%r7380, %r7440}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7518, %r7519}, {%r425, %r431, %r428, %r434}, {%r7389, %r7447}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7528, %r7529}, {%r425, %r431, %r428, %r434}, {%r7398, %r7454}, {%r1870, %r1870};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7538, %r17, %r7458;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7541, %r17, %r7459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7544, %r17, %r7468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7547, %r17, %r7469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7550, %r17, %r7478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7553, %r17, %r7479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7556, %r17, %r7488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7559, %r17, %r7489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7562, %r17, %r7498;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7565, %r17, %r7499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7568, %r17, %r7508;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7571, %r17, %r7509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7574, %r17, %r7518;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7577, %r17, %r7519;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7580, %r17, %r7528;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7583, %r17, %r7529;
	// end inline asm
	// begin inline asm
	mov.b32 %r7586, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7587, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7588, %r7538, %r7586;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7591, %r7588, %r7587;
	// end inline asm
	// begin inline asm
	mov.b32 %r7594, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7595, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7596, %r7541, %r7594;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7599, %r7596, %r7595;
	// end inline asm
	// begin inline asm
	mov.b32 %r7602, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7603, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7604, %r7544, %r7602;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7607, %r7604, %r7603;
	// end inline asm
	// begin inline asm
	mov.b32 %r7610, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7611, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7612, %r7547, %r7610;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7615, %r7612, %r7611;
	// end inline asm
	// begin inline asm
	mov.b32 %r7618, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7619, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7620, %r7550, %r7618;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7623, %r7620, %r7619;
	// end inline asm
	// begin inline asm
	mov.b32 %r7626, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7627, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7628, %r7553, %r7626;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7631, %r7628, %r7627;
	// end inline asm
	// begin inline asm
	mov.b32 %r7634, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7635, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7636, %r7556, %r7634;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7639, %r7636, %r7635;
	// end inline asm
	// begin inline asm
	mov.b32 %r7642, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7643, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7644, %r7559, %r7642;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7647, %r7644, %r7643;
	// end inline asm
	// begin inline asm
	mov.b32 %r7650, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7651, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7652, %r7562, %r7650;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7655, %r7652, %r7651;
	// end inline asm
	// begin inline asm
	mov.b32 %r7658, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7659, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7660, %r7565, %r7658;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7663, %r7660, %r7659;
	// end inline asm
	// begin inline asm
	mov.b32 %r7666, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7667, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7668, %r7568, %r7666;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7671, %r7668, %r7667;
	// end inline asm
	// begin inline asm
	mov.b32 %r7674, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7675, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7676, %r7571, %r7674;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7679, %r7676, %r7675;
	// end inline asm
	// begin inline asm
	mov.b32 %r7682, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7683, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7684, %r7574, %r7682;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7687, %r7684, %r7683;
	// end inline asm
	// begin inline asm
	mov.b32 %r7690, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7691, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7692, %r7577, %r7690;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7695, %r7692, %r7691;
	// end inline asm
	// begin inline asm
	mov.b32 %r7698, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7699, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7700, %r7580, %r7698;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7703, %r7700, %r7699;
	// end inline asm
	// begin inline asm
	mov.b32 %r7706, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7707, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7708, %r7583, %r7706;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7711, %r7708, %r7707;
	// end inline asm
	// begin inline asm
	mov.b32 %r7717, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7715, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7716, %r7717, %r7715;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7719, %r7591, %r7716;
	// end inline asm
	// begin inline asm
	mov.b32 %r7722, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7723, %r7717, %r7722;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7726, %r7599, %r7723;
	// end inline asm
	// begin inline asm
	mov.b32 %r7729, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7730, %r7717, %r7729;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7733, %r7607, %r7730;
	// end inline asm
	// begin inline asm
	mov.b32 %r7736, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7737, %r7717, %r7736;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7740, %r7615, %r7737;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7743, %r7719, %r7733, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7747, %r7726, %r7740, %r2358;
	// end inline asm
	shl.b32 	%r7754, %r7747, 4;
	// begin inline asm
	lop3.b32 %r7751, %r2364, %r7743, %r7754, 202;
	// end inline asm
	xor.b32  	%r7894, %r7751, -2004318072;
	// begin inline asm
	mov.b32 %r7758, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7756, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7757, %r7758, %r7756;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7760, %r7623, %r7757;
	// end inline asm
	// begin inline asm
	mov.b32 %r7763, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7764, %r7758, %r7763;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7767, %r7631, %r7764;
	// end inline asm
	// begin inline asm
	mov.b32 %r7770, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7771, %r7758, %r7770;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7774, %r7639, %r7771;
	// end inline asm
	// begin inline asm
	mov.b32 %r7777, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7778, %r7758, %r7777;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7781, %r7647, %r7778;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7784, %r7760, %r7774, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7788, %r7767, %r7781, %r2358;
	// end inline asm
	shl.b32 	%r7795, %r7788, 4;
	// begin inline asm
	lop3.b32 %r7792, %r2364, %r7784, %r7795, 202;
	// end inline asm
	xor.b32  	%r7895, %r7792, -2004318072;
	// begin inline asm
	mov.b32 %r7799, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7797, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7798, %r7799, %r7797;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7801, %r7655, %r7798;
	// end inline asm
	// begin inline asm
	mov.b32 %r7804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7805, %r7799, %r7804;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7808, %r7663, %r7805;
	// end inline asm
	// begin inline asm
	mov.b32 %r7811, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7812, %r7799, %r7811;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7815, %r7671, %r7812;
	// end inline asm
	// begin inline asm
	mov.b32 %r7818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7819, %r7799, %r7818;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7822, %r7679, %r7819;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7825, %r7801, %r7815, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7829, %r7808, %r7822, %r2358;
	// end inline asm
	shl.b32 	%r7836, %r7829, 4;
	// begin inline asm
	lop3.b32 %r7833, %r2364, %r7825, %r7836, 202;
	// end inline asm
	xor.b32  	%r7896, %r7833, -2004318072;
	// begin inline asm
	mov.b32 %r7840, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7838, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7839, %r7840, %r7838;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7842, %r7687, %r7839;
	// end inline asm
	// begin inline asm
	mov.b32 %r7845, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7846, %r7840, %r7845;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7849, %r7695, %r7846;
	// end inline asm
	// begin inline asm
	mov.b32 %r7852, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7853, %r7840, %r7852;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7856, %r7703, %r7853;
	// end inline asm
	// begin inline asm
	mov.b32 %r7859, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7860, %r7840, %r7859;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7863, %r7711, %r7860;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7866, %r7842, %r7856, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7870, %r7849, %r7863, %r2358;
	// end inline asm
	shl.b32 	%r7877, %r7870, 4;
	// begin inline asm
	lop3.b32 %r7874, %r2364, %r7866, %r7877, 202;
	// end inline asm
	xor.b32  	%r7897, %r7874, -2004318072;
	st.shared.u32 	[%rd127], %r7894;
	st.shared.u32 	[%rd128], %r7895;
	st.shared.u32 	[%rd129], %r7896;
	st.shared.u32 	[%rd130], %r7897;
	add.s32 	%r8022, %r8022, -64;
	add.s64 	%rd181, %rd181, 8324;
	setp.eq.s32 	%p238, %r8022, 0;
	@%p238 bra 	LBB0_119;
	bra.uni 	LBB0_118;
LBB0_119:                               // %guard_pass14812
                                        //   in Loop: Header=BB0_117 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7903, [%rd21];
	ld.shared.u32 	%r7904, [%rd22+128];
	ld.shared.u32 	%r7911, [%rd23+4];
	ld.shared.u32 	%r7912, [%rd23+132];
	ld.shared.u32 	%r7919, [%rd23+8324];
	ld.shared.u32 	%r7920, [%rd23+8452];
	ld.shared.u32 	%r7927, [%rd22+8328];
	ld.shared.u32 	%r7928, [%rd22+8456];
	ld.shared.u32 	%r7935, [%rd22+16648];
	ld.shared.u32 	%r7936, [%rd22+16776];
	ld.shared.u32 	%r7943, [%rd22+16652];
	ld.shared.u32 	%r7944, [%rd22+16780];
	ld.shared.u32 	%r7951, [%rd22+24972];
	ld.shared.u32 	%r7952, [%rd22+25100];
	ld.shared.u32 	%r7959, [%rd22+24976];
	ld.shared.u32 	%r7960, [%rd22+25104];
	// begin inline asm
	prmt.b32 %r7898, %r7903, %r7904, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7902, %r7903, %r7904, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7906, %r7911, %r7912, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7910, %r7911, %r7912, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7914, %r7919, %r7920, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7918, %r7919, %r7920, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7922, %r7927, %r7928, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7926, %r7927, %r7928, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7930, %r7935, %r7936, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7934, %r7935, %r7936, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7938, %r7943, %r7944, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7942, %r7943, %r7944, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7946, %r7951, %r7952, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7950, %r7951, %r7952, %r614;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7954, %r7959, %r7960, %r610;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7958, %r7959, %r7960, %r614;
	// end inline asm
	selp.b32 	%r7962, %r7902, %r7898, %p225;
	shfl.sync.bfly.b32	%r165, %r7962, 8, 31, -1;
	selp.b32 	%r7963, %r7910, %r7906, %p225;
	shfl.sync.bfly.b32	%r166, %r7963, 8, 31, -1;
	selp.b32 	%r7964, %r7918, %r7914, %p225;
	shfl.sync.bfly.b32	%r7965, %r7964, 8, 31, -1;
	selp.b32 	%r7966, %r7926, %r7922, %p225;
	shfl.sync.bfly.b32	%r7967, %r7966, 8, 31, -1;
	selp.b32 	%r7968, %r7934, %r7930, %p225;
	shfl.sync.bfly.b32	%r7969, %r7968, 8, 31, -1;
	selp.b32 	%r7970, %r7942, %r7938, %p225;
	shfl.sync.bfly.b32	%r7971, %r7970, 8, 31, -1;
	selp.b32 	%r7972, %r7950, %r7946, %p225;
	shfl.sync.bfly.b32	%r7973, %r7972, 8, 31, -1;
	selp.b32 	%r7974, %r7958, %r7954, %p225;
	shfl.sync.bfly.b32	%r7975, %r7974, 8, 31, -1;
	and.b32  	%r179, %r102, 256;
	setp.eq.s32 	%p240, %r179, 0;
	shl.b32 	%r7995, %r102, 12;
	@%p240 bra 	LBB0_121;
// %bb.120:                             // %L37405
                                        //   in Loop: Header=BB0_117 Depth=1
	selp.b32 	%r7976, %r166, %r7910, %p225;
	selp.b32 	%r7977, %r7906, %r166, %p225;
	selp.b32 	%r7978, %r165, %r7902, %p225;
	selp.b32 	%r7979, %r7898, %r165, %p225;
	or.b32  	%r7981, %r101, %r7995;
	cvt.u64.u32 	%rd131, %r7981;
	add.s64 	%rd132, %rd131, %rd24;
	shr.u64 	%rd133, %rd132, 35;
	add.s64 	%rd134, %rd132, %rd133;
	shr.s64 	%rd135, %rd134, 29;
	setp.lt.s64 	%p242, %rd132, 0;
	and.b64  	%rd136, %rd134, -536870912;
	setp.ne.s64 	%p243, %rd136, %rd132;
	and.pred  	%p244, %p242, %p243;
	selp.u64 	%rd137, 1, 0, %p244;
	sub.s64 	%rd138, %rd137, %rd135;
	shl.b64 	%rd139, %rd138, 29;
	add.s64 	%rd140, %rd139, %rd132;
	shl.b64 	%rd141, %rd140, 2;
	add.s64 	%rd142, %rd3, %rd141;
	st.global.v4.u32 	[%rd142], {%r7979, %r7977, %r7978, %r7976};
LBB0_121:                               // %pass14343
                                        //   in Loop: Header=BB0_117 Depth=1
	or.b32  	%r7982, %r179, 64;
	setp.gt.u32 	%p245, %r7982, 191;
	@%p245 bra 	LBB0_122;
	bra.uni 	LBB0_123;
LBB0_122:                               // %L37584
                                        //   in Loop: Header=BB0_117 Depth=1
	selp.b32 	%r167, %r7914, %r7965, %p225;
	selp.b32 	%r168, %r7965, %r7918, %p225;
	selp.b32 	%r169, %r7922, %r7967, %p225;
	selp.b32 	%r170, %r7967, %r7926, %p225;
	or.b32  	%r7984, %r7995, %r101;
	or.b32  	%r7985, %r7984, 262144;
	cvt.u64.u32 	%rd143, %r7985;
	add.s64 	%rd144, %rd143, %rd24;
	shr.u64 	%rd145, %rd144, 35;
	add.s64 	%rd146, %rd144, %rd145;
	shr.s64 	%rd147, %rd146, 29;
	setp.lt.s64 	%p246, %rd144, 0;
	and.b64  	%rd148, %rd146, -536870912;
	setp.ne.s64 	%p247, %rd148, %rd144;
	and.pred  	%p248, %p246, %p247;
	selp.u64 	%rd149, 1, 0, %p248;
	sub.s64 	%rd150, %rd149, %rd147;
	shl.b64 	%rd151, %rd150, 29;
	add.s64 	%rd152, %rd151, %rd144;
	shl.b64 	%rd153, %rd152, 2;
	add.s64 	%rd154, %rd3, %rd153;
	st.global.v4.u32 	[%rd154], {%r167, %r169, %r168, %r170};
LBB0_123:                               // %pass14424
                                        //   in Loop: Header=BB0_117 Depth=1
	selp.b32 	%r175, %r7946, %r7973, %p225;
	selp.b32 	%r176, %r7973, %r7950, %p225;
	selp.b32 	%r177, %r7954, %r7975, %p225;
	selp.b32 	%r178, %r7975, %r7958, %p225;
	or.b32  	%r7986, %r179, 128;
	setp.gt.u32 	%p249, %r7986, 191;
	or.b32  	%r7996, %r7995, %r101;
	@%p249 bra 	LBB0_124;
	bra.uni 	LBB0_125;
LBB0_124:                               // %L37764
                                        //   in Loop: Header=BB0_117 Depth=1
	selp.b32 	%r171, %r7930, %r7969, %p225;
	selp.b32 	%r172, %r7969, %r7934, %p225;
	selp.b32 	%r173, %r7938, %r7971, %p225;
	selp.b32 	%r174, %r7971, %r7942, %p225;
	or.b32  	%r7988, %r7996, 524288;
	cvt.u64.u32 	%rd155, %r7988;
	add.s64 	%rd156, %rd155, %rd24;
	shr.u64 	%rd157, %rd156, 35;
	add.s64 	%rd158, %rd156, %rd157;
	shr.s64 	%rd159, %rd158, 29;
	setp.lt.s64 	%p250, %rd156, 0;
	and.b64  	%rd160, %rd158, -536870912;
	setp.ne.s64 	%p251, %rd160, %rd156;
	and.pred  	%p252, %p250, %p251;
	selp.u64 	%rd161, 1, 0, %p252;
	sub.s64 	%rd162, %rd161, %rd159;
	shl.b64 	%rd163, %rd162, 29;
	add.s64 	%rd164, %rd163, %rd156;
	shl.b64 	%rd165, %rd164, 2;
	add.s64 	%rd166, %rd3, %rd165;
	st.global.v4.u32 	[%rd166], {%r171, %r173, %r172, %r174};
	bra.uni 	LBB0_125;
LBB0_126:                               // %L38129
	st.global.u32 	[%rd4], %r7994;
	ret;
LBB0_7:                                 // %L247
	mov.u32 	%r7993, 2;
	st.global.u32 	[%rd4], %r7993;
	mov.u64 	%rd179, exception3309;
	cvta.global.u64 	%rd180, %rd179;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd180;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L8
	mov.u64 	%rd56, exception1;
	cvta.global.u64 	%rd57, %rd56;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd57;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_128:                               // %L38229
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11300, 
	(
	);
	} // callseq 3
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_127:                               // %L38226
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11300, 
	(
	);
	} // callseq 7
	mov.u64 	%rd71, exception1;
	cvta.global.u64 	%rd72, %rd71;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd72;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_153:                               // %L38223
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11300, 
	(
	);
	} // callseq 13
	mov.u64 	%rd85, exception1;
	cvta.global.u64 	%rd86, %rd85;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd86;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
