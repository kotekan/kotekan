// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_11272
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11283
(
	.param .align 8 .b8 julia_power_by_squaring_11283_param_0[16],
	.param .b64 julia_power_by_squaring_11283_param_1,
	.param .b64 julia_power_by_squaring_11283_param_2
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3325[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<259>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8052>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<195>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r187, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r188, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r188, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd58, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd42, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r189, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r190, %r189, %r1;
	or.b32  	%r191, %r190, %r4;
	mul.wide.u32 	%rd64, %r191, 4;
	add.s64 	%rd4, %rd58, %rd64;
	mov.u32 	%r192, 1;
	st.global.u32 	[%rd4], %r192;
	ld.global.u32 	%r5, [%rd42];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd46, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd46];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd50, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd50];
	sub.s32 	%r193, %r6, %r5;
	and.b32  	%r194, %r193, 255;
	setp.ne.s32 	%p6, %r194, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd54, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd54];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 4096;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	not.b32 	%r195, %r7;
	add.s32 	%r196, %r195, %r8;
	and.b32  	%r197, %r196, 3;
	setp.eq.s32 	%p12, %r197, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass167
	bfe.u32 	%r121, %r1, 2, 1;
	shr.u32 	%r122, %r1, 4;
	shl.b32 	%r206, %r122, 1;
	shl.b32 	%r207, %r121, 2;
	shl.b32 	%r123, %r1, 3;
	and.b32  	%r208, %r123, 24;
	or.b32  	%r209, %r207, %r208;
	or.b32  	%r210, %r206, %r209;
	bfe.u32 	%r211, %r1, 3, 1;
	or.b32  	%r125, %r211, %r210;
	or.b32  	%r126, %r125, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r125;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L572
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L575
	cvt.rn.f32.s32 	%f217, %r126;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L592
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L595
	shl.b32 	%r113, %r1, 2;
	or.b32  	%r229, %r125, 64;
	or.b32  	%r10, %r125, 96;
	cvt.rn.f32.s32 	%f252, %r229;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L674
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L677
	shl.b32 	%r198, %r2, 6;
	and.b32  	%r114, %r113, 4;
	shl.b32 	%r115, %r1, 1;
	cvt.rn.f32.s32 	%f286, %r10;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L694
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L697
	or.b32  	%r199, %r114, %r198;
	and.b32  	%r116, %r115, 8;
	or.b32  	%r247, %r125, 128;
	or.b32  	%r12, %r125, 160;
	cvt.rn.f32.s32 	%f321, %r247;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L776
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L779
	or.b32  	%r200, %r199, %r116;
	and.b32  	%r117, %r1, 16;
	cvt.rn.f32.s32 	%f355, %r12;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L796
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L799
	or.b32  	%r201, %r200, %r117;
	and.b32  	%r202, %r1, 2;
	or.b32  	%r265, %r125, 192;
	or.b32  	%r14, %r125, 224;
	cvt.rn.f32.s32 	%f390, %r265;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L878
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L881
	or.b32  	%r203, %r201, %r202;
	and.b32  	%r118, %r113, 32;
	cvt.rn.f32.s32 	%f424, %r14;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L898
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L901
	or.b32  	%r204, %r203, %r118;
	mul.lo.s32 	%r16, %r125, 63;
	cvt.rn.f32.s32 	%f458, %r16;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f884;
	and.b32  	%r283, %r18, 8388607;
	or.b32  	%r8008, %r283, 1065353216;
	mov.b32 	%f883, %r8008;
	add.s32 	%r284, %r18, -1073741824;
	and.b32  	%r8009, %r284, -8388608;
	setp.eq.s32 	%p68, %r8009, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r285, %r8009, 192937984;
	add.s32 	%r286, %r8008, %r285;
	mov.b32 	%f470, %r286;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r8009, %r8009, %r285;
	mov.b32 	%r8008, %f883;
	setp.ne.s32 	%p69, %r8009, 0;
	setp.ne.s32 	%p70, %r8008, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	bfe.u32 	%r205, %r204, 1, 12;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r287, %f35;
	and.b32  	%r288, %r287, -2147483648;
	mov.b32 	%r289, %f884;
	or.b32  	%r290, %r288, %r289;
	mov.b32 	%f884, %r290;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd65, %r205, 4;
	add.s32 	%r299, %r16, 2016;
	cvt.rn.f32.s32 	%f510, %r299;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f888;
	and.b32  	%r300, %r26, 8388607;
	or.b32  	%r8010, %r300, 1065353216;
	mov.b32 	%f887, %r8010;
	add.s32 	%r301, %r26, -1073741824;
	and.b32  	%r8011, %r301, -8388608;
	setp.eq.s32 	%p88, %r8011, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i897.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i897
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r302, %r8011, 192937984;
	add.s32 	%r303, %r8010, %r302;
	mov.b32 	%f522, %r303;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r8011, %r8011, %r302;
	mov.b32 	%r8010, %f887;
	setp.ne.s32 	%p89, %r8011, 0;
	setp.ne.s32 	%p90, %r8010, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i899
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i876
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i880
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i883
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i902
	add.s64 	%rd66, %rd1, %rd65;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r304, %f54;
	and.b32  	%r305, %r304, -2147483648;
	mov.b32 	%r306, %f888;
	or.b32  	%r307, %r305, %r306;
	mov.b32 	%f888, %r307;
$L__BB0_52:                             // %__nv_fmodf.exit903
	ld.global.u32 	%r119, [%rd66];
	mov.u64 	%rd67, 2;
	mov.u64 	%rd68, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd67;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd68;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11283, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd69, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd69, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass323
	shr.u32 	%r120, %r1, 1;
	shr.u32 	%r124, %r1, 3;
	and.b32  	%r322, %r1, 3;
	and.b32  	%r323, %r124, 2;
	or.b32  	%r324, %r121, %r323;
	and.b32  	%r325, %r120, 4;
	or.b32  	%r127, %r324, %r325;
	mul.lo.s32 	%r326, %r322, %r127;
	shl.b32 	%r327, %r326, 1;
	neg.s32 	%r328, %r327;
	cvt.rn.f32.s32 	%f156, %r328;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r36, %f904;
	and.b32  	%r329, %r36, 8388607;
	or.b32  	%r8012, %r329, 1065353216;
	mov.b32 	%f891, %r8012;
	add.s32 	%r330, %r36, -1073741824;
	and.b32  	%r8013, %r330, -8388608;
	setp.eq.s32 	%p109, %r8013, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i928.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i928
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r8013, 192937984;
	add.s32 	%r332, %r8012, %r331;
	mov.b32 	%f575, %r332;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r8013, %r8013, %r331;
	mov.b32 	%r8012, %f891;
	setp.ne.s32 	%p110, %r8013, 0;
	setp.ne.s32 	%p111, %r8012, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i930
	setp.gt.u32 	%p113, %r36, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i907
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r35, %f72;
	setp.lt.u32 	%p104, %r35, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r35, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i911
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i914
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i933
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r333, %f157;
	and.b32  	%r43, %r333, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r334, %f892;
	or.b32  	%r335, %r43, %r334;
	mov.b32 	%f892, %r335;
$L__BB0_68:                             // %__nv_fmodf.exit934
	and.b32  	%r344, %r115, 6;
	mov.u32 	%r345, -8;
	sub.s32 	%r346, %r345, %r344;
	mul.lo.s32 	%r347, %r127, %r346;
	cvt.rn.f32.s32 	%f88, %r347;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r45, %f908;
	and.b32  	%r348, %r45, 8388607;
	or.b32  	%r8014, %r348, 1065353216;
	mov.b32 	%f895, %r8014;
	add.s32 	%r349, %r45, -1073741824;
	and.b32  	%r8015, %r349, -8388608;
	setp.eq.s32 	%p129, %r8015, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i959.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i959
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r350, %r8015, 192937984;
	add.s32 	%r351, %r8014, %r350;
	mov.b32 	%f626, %r351;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r8015, %r8015, %r350;
	mov.b32 	%r8014, %f895;
	setp.ne.s32 	%p130, %r8015, 0;
	setp.ne.s32 	%p131, %r8014, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i961
	setp.gt.u32 	%p133, %r45, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i938
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r44, %f92;
	setp.lt.u32 	%p124, %r44, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r44, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i942
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i945
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i964
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r352, %f89;
	and.b32  	%r52, %r352, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r353, %f896;
	or.b32  	%r354, %r52, %r353;
	mov.b32 	%f896, %r354;
$L__BB0_82:                             // %__nv_fmodf.exit965
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd67;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd68;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11283, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd75, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd75, 64;
	@%p142 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_83;
$L__BB0_135:                            // %pass400
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd67;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd68;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11283, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd81, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd81;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_147;
// %bb.136:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_137;
$L__BB0_143:
	mov.b32 	%r129, %f912;
	and.b32  	%r375, %r129, 8388607;
	or.b32  	%r8035, %r375, 1065353216;
	mov.b32 	%f911, %r8035;
	add.s32 	%r376, %r129, -1073741824;
	and.b32  	%r8036, %r376, -8388608;
	setp.eq.s32 	%p150, %r8036, 0;
	@%p150 bra 	$L__BB0_146;
// %bb.144:                             // %__nv_fmaf_rn.exit4.i.i.i1083.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_145:                            // %__nv_fmaf_rn.exit4.i.i.i1083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r377, %r8036, 192937984;
	add.s32 	%r378, %r8035, %r377;
	mov.b32 	%f679, %r378;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8036, %r8036, %r377;
	mov.b32 	%r8035, %f911;
	setp.ne.s32 	%p151, %r8036, 0;
	setp.ne.s32 	%p152, %r8035, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_145;
$L__BB0_146:                            // %__internal_fmodf_slowpath_mod.exit.i.i1085
	setp.gt.u32 	%p154, %r129, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_147;
$L__BB0_137:                            // %__nv_fast_fdividef.exit.i.i.i1062
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r128, %f162;
	setp.lt.u32 	%p145, %r128, 1073741824;
	@%p145 bra 	$L__BB0_142;
// %bb.138:
	setp.lt.u32 	%p146, %r128, -2147483647;
	@%p146 bra 	$L__BB0_140;
// %bb.139:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_142;
$L__BB0_140:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_142;
// %bb.141:                             // %__nv_fmaf_rn.exit.i.i.i1066
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_142:                            // %__internal_fmodf_fastpath_quot.exit.i.i1069
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_147:                            // %__internal_fmodf_kernel.exit.i1088
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_149;
// %bb.148:
	mov.b32 	%r379, %f159;
	and.b32  	%r380, %r379, -2147483648;
	mov.b32 	%r381, %f912;
	or.b32  	%r382, %r380, %r381;
	mov.b32 	%f912, %r382;
$L__BB0_149:                            // %__nv_fmodf.exit1089
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd67;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd68;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11283, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd85, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd85;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r58, %f900;
	and.b32  	%r391, %r58, 8388607;
	or.b32  	%r8016, %r391, 1065353216;
	mov.b32 	%f899, %r8016;
	add.s32 	%r392, %r58, -1073741824;
	and.b32  	%r8017, %r392, -8388608;
	setp.eq.s32 	%p170, %r8017, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i990.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r393, %r8017, 192937984;
	add.s32 	%r394, %r8016, %r393;
	mov.b32 	%f730, %r394;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8017, %r8017, %r393;
	mov.b32 	%r8016, %f899;
	setp.ne.s32 	%p171, %r8017, 0;
	setp.ne.s32 	%p172, %r8016, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i992
	setp.gt.u32 	%p174, %r58, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i969
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p165, %r57, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r57, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i973
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i976
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i995
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r395, %f178;
	and.b32  	%r396, %r395, -2147483648;
	mov.b32 	%r397, %f900;
	or.b32  	%r398, %r396, %r397;
	mov.b32 	%f900, %r398;
$L__BB0_97:                             // %__nv_fmodf.exit996
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd67;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd68;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11283, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd89, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd89, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass465
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r68, %f904;
	and.b32  	%r413, %r68, 8388607;
	or.b32  	%r8018, %r413, 1065353216;
	mov.b32 	%f903, %r8018;
	add.s32 	%r414, %r68, -1073741824;
	and.b32  	%r8019, %r414, -8388608;
	setp.eq.s32 	%p191, %r8019, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i1021.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i1021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r415, %r8019, 192937984;
	add.s32 	%r416, %r8018, %r415;
	mov.b32 	%f782, %r416;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8019, %r8019, %r415;
	mov.b32 	%r8018, %f903;
	setp.ne.s32 	%p192, %r8019, 0;
	setp.ne.s32 	%p193, %r8018, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i1023
	setp.gt.u32 	%p195, %r68, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i1000
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r67, %f122;
	setp.lt.u32 	%p186, %r67, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r67, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i1004
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i1007
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i1026
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r417, %f904;
	or.b32  	%r418, %r43, %r417;
	mov.b32 	%f904, %r418;
$L__BB0_113:                            // %__nv_fmodf.exit1027
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r76, %f908;
	and.b32  	%r427, %r76, 8388607;
	or.b32  	%r8020, %r427, 1065353216;
	mov.b32 	%f907, %r8020;
	add.s32 	%r428, %r76, -1073741824;
	and.b32  	%r8021, %r428, -8388608;
	setp.eq.s32 	%p211, %r8021, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1052.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r429, %r8021, 192937984;
	add.s32 	%r430, %r8020, %r429;
	mov.b32 	%f832, %r430;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8021, %r8021, %r429;
	mov.b32 	%r8020, %f907;
	setp.ne.s32 	%p212, %r8021, 0;
	setp.ne.s32 	%p213, %r8020, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1054
	setp.gt.u32 	%p215, %r76, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1031
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r75, %f139;
	setp.lt.u32 	%p206, %r75, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r75, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1035
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1038
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1057
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r431, %f908;
	or.b32  	%r432, %r52, %r431;
	mov.b32 	%f908, %r432;
$L__BB0_127:                            // %__nv_fmodf.exit1058
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r8005, 0;
	@%p224 bra 	$L__BB0_154;
// %bb.128:                             // %L1561.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r212, %f190;
	mov.b32 	%r219, %f224;
	mov.b32 	%r230, %f259;
	mov.b32 	%r237, %f293;
	mov.b32 	%r248, %f328;
	mov.b32 	%r255, %f362;
	mov.b32 	%r266, %f397;
	mov.b32 	%r273, %f431;
	mov.b32 	%r291, %f480;
	mov.b32 	%r314, %f532;
	mov.b32 	%r336, %f585;
	mov.b32 	%r367, %f636;
	and.b32  	%r213, %r212, -2147483648;
	and.b32  	%r220, %r219, -2147483648;
	and.b32  	%r231, %r230, -2147483648;
	and.b32  	%r238, %r237, -2147483648;
	and.b32  	%r249, %r248, -2147483648;
	and.b32  	%r256, %r255, -2147483648;
	and.b32  	%r267, %r266, -2147483648;
	and.b32  	%r274, %r273, -2147483648;
	and.b32  	%r292, %r291, -2147483648;
	and.b32  	%r315, %r314, -2147483648;
	and.b32  	%r337, %r336, -2147483648;
	and.b32  	%r368, %r367, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r214, %r213, 1056964608;
	or.b32  	%r221, %r220, 1056964608;
	or.b32  	%r232, %r231, 1056964608;
	or.b32  	%r239, %r238, 1056964608;
	or.b32  	%r250, %r249, 1056964608;
	or.b32  	%r257, %r256, 1056964608;
	or.b32  	%r268, %r267, 1056964608;
	or.b32  	%r275, %r274, 1056964608;
	or.b32  	%r293, %r292, 1056964608;
	or.b32  	%r316, %r315, 1056964608;
	or.b32  	%r338, %r337, 1056964608;
	or.b32  	%r369, %r368, 1056964608;
	mov.b32 	%r383, %f689;
	mov.b32 	%r405, %f740;
	mov.b32 	%f191, %r214;
	mov.b32 	%f225, %r221;
	mov.b32 	%f260, %r232;
	mov.b32 	%f294, %r239;
	mov.b32 	%f329, %r250;
	mov.b32 	%f363, %r257;
	mov.b32 	%f398, %r268;
	mov.b32 	%f432, %r275;
	mov.b32 	%f481, %r293;
	mov.b32 	%f533, %r316;
	mov.b32 	%f586, %r338;
	mov.b32 	%f637, %r369;
	and.b32  	%r384, %r383, -2147483648;
	and.b32  	%r406, %r405, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r385, %r384, 1056964608;
	or.b32  	%r407, %r406, 1056964608;
	mov.b32 	%r419, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r385;
	mov.b32 	%f741, %r407;
	and.b32  	%r420, %r419, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r421, %r420, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r421;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r215, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r222, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r233, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r240, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r251, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r258, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r269, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r276, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r216, %r215, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r223, %r222, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r234, %r233, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r241, %r240, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r252, %r251, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r259, %r258, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r270, %r269, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r277, %r276, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r294, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r317, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r339, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r370, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r217, %r216, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r224, %r223, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r235, %r234, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r242, %r241, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r253, %r252, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r260, %r259, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r271, %r270, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r278, %r277, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r295, %r294, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r318, %r317, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r340, %r339, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r371, %r370, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r217, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r224, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r235, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r242, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r253, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r260, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r271, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r278, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r295, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r318, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r340, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r371, 1;
	cvt.rzi.s32.f32 	%r386, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r408, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r218, %r216, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r225, %r223, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r236, %r234, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r243, %r241, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r254, %r252, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r261, %r259, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r272, %r270, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r279, %r277, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r296, %r294, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r319, %r317, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r341, %r339, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r372, %r370, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r387, %r386, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r409, %r408, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r218, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r225, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r236, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r243, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r254, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r261, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r272, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r279, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r296, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r297, %r294, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r319, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r320, %r317, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r341, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r342, %r339, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r372, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r373, %r370, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r387, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r409, 1;
	cvt.rzi.s32.f32 	%r422, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r298, %r297, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r321, %r320, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r343, %r342, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r374, %r373, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r388, %r386, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r410, %r408, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r423, %r422, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r298, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r321, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r343, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r374, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r388, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r389, %r386, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r410, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r411, %r408, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r423, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r390, %r389, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r412, %r411, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r424, %r422, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r390, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r412, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r424, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r425, %r422, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.b32 	%r228, %f251;
	mov.b32 	%r227, %f3;
	mov.b32 	%r246, %f320;
	mov.b32 	%r245, %f12;
	mov.b32 	%r264, %f389;
	mov.b32 	%r263, %f21;
	mov.b32 	%r282, %f457;
	mov.b32 	%r281, %f30;
	mov.b32 	%r310, %f563;
	mov.b32 	%r309, %f53;
	mov.b32 	%r313, %f560;
	mov.b32 	%r312, %f52;
	mov.b32 	%r357, %f667;
	mov.b32 	%r356, %f87;
	mov.b32 	%r363, %f664;
	mov.b32 	%r362, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r426, %r425, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r226, %r228, %r227;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r244, %r246, %r245;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r262, %r264, %r263;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r280, %r282, %r281;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r308, %r310, %r309;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r311, %r313, %r312;
	// end inline asm
	xor.b32  	%r360, %r363, -2147483648;
	xor.b32  	%r359, %r362, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r426, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r360, %r359;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r361, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r357, %r356;
	// end inline asm
	mov.b32 	%r401, %f771;
	mov.b32 	%r400, %f177;
	mov.b32 	%r404, %f768;
	mov.b32 	%r403, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r399, %r401, %r400;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r445, %f842;
	and.b32  	%r446, %r445, -2147483648;
	or.b32  	%r447, %r446, 1056964608;
	mov.b32 	%f843, %r447;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r448, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r449, %r448, 1;
	setp.eq.b32 	%p219, %r449, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r450, %r448, 2;
	setp.eq.s32 	%p220, %r450, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r451, %r448, 1;
	and.b32  	%r452, %r451, 2;
	setp.eq.s32 	%p221, %r452, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r435, %f873;
	mov.b32 	%r434, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	mov.b32 	%r441, %f870;
	xor.b32  	%r438, %r441, -2147483648;
	mov.b32 	%r440, %f136;
	xor.b32  	%r437, %r440, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r439, %r441, %r440;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r442, %r435, %r434;
	// end inline asm
	shl.b32 	%r454, %r5, 12;
	and.b32  	%r87, %r113, 12;
	and.b32  	%r88, %r113, 16;
	and.b32  	%r455, %r113, 28;
	shl.b32 	%r456, %r2, 11;
	and.b32  	%r457, %r456, 2048;
	or.b32  	%r458, %r455, %r457;
	or.b32  	%r89, %r458, %r454;
	and.b32  	%r90, %r1, 8;
	shl.b32 	%r459, %r1, 4;
	or.b32  	%r460, %r459, %r90;
	shr.u32 	%r461, %r460, 2;
	and.b32  	%r462, %r461, 14;
	or.b32  	%r463, %r462, %r88;
	shr.u32 	%r464, %r3, 1;
	and.b32  	%r91, %r1, 4;
	and.b32  	%r465, %r4, 32;
	or.b32  	%r93, %r465, %r464;
	or.b32  	%r94, %r93, 8;
	or.b32  	%r95, %r93, 16;
	or.b32  	%r96, %r93, 24;
	and.b32  	%r466, %r1, 18;
	or.b32  	%r467, %r466, %r116;
	or.b32  	%r468, %r467, %r114;
	or.b32  	%r469, %r468, %r118;
	shr.u32 	%r470, %r469, 1;
	mul.lo.s32 	%r471, %r470, 65;
	add.s32 	%r472, %r93, %r471;
	add.s32 	%r473, %r94, %r471;
	add.s32 	%r474, %r95, %r471;
	add.s32 	%r475, %r96, %r471;
	shl.b32 	%r476, %r3, 1;
	or.b32  	%r477, %r476, %r122;
	mul.lo.s32 	%r478, %r477, 65;
	add.s32 	%r479, %r478, %r88;
	add.s32 	%r480, %r479, %r462;
	mul.wide.u32 	%rd93, %r480, 4;
	mov.u64 	%rd94, shmem;
	add.s64 	%rd5, %rd94, %rd93;
	cvt.u64.u32 	%rd95, %r462;
	cvt.u64.u32 	%rd96, %r478;
	cvt.u64.u32 	%rd97, %r88;
	add.s64 	%rd98, %rd97, %rd96;
	add.s64 	%rd99, %rd98, %rd95;
	shl.b64 	%rd100, %rd99, 2;
	add.s64 	%rd6, %rd94, %rd100;
	cvt.u64.u32 	%rd101, %r463;
	add.s64 	%rd102, %rd96, %rd101;
	shl.b64 	%rd103, %rd102, 2;
	add.s64 	%rd7, %rd94, %rd103;
	shl.b32 	%r481, %r7, 18;
	add.s32 	%r482, %r481, -786432;
	shl.b32 	%r483, %r3, 7;
	and.b32  	%r484, %r113, 96;
	or.b32  	%r485, %r484, %r483;
	or.b32  	%r97, %r485, %r456;
	cvt.s64.s32 	%rd8, %r482;
	shr.u32 	%r486, %r117, 4;
	and.b32  	%r487, %r3, 1;
	neg.s32 	%r488, %r487;
	and.b32  	%r489, %r488, 1040;
	bfe.s32 	%r490, %r3, 1, 1;
	and.b32  	%r491, %r490, 520;
	shr.u32 	%r492, %r3, 3;
	bfe.s32 	%r493, %r3, 2, 1;
	and.b32  	%r494, %r493, 260;
	add.s32 	%r495, %r489, %r463;
	mad.lo.s32 	%r496, %r486, 65, %r495;
	add.s32 	%r497, %r496, %r491;
	mad.lo.s32 	%r498, %r492, 130, %r497;
	add.s32 	%r499, %r498, %r494;
	mul.wide.u32 	%rd104, %r499, 4;
	add.s64 	%rd9, %rd94, %rd104;
	add.s32 	%r500, %r499, 32;
	mul.wide.u32 	%rd105, %r500, 4;
	add.s64 	%rd10, %rd94, %rd105;
	add.s32 	%r501, %r499, 1;
	mul.wide.u32 	%rd106, %r501, 4;
	add.s64 	%rd11, %rd94, %rd106;
	add.s32 	%r502, %r499, 33;
	mul.wide.u32 	%rd107, %r502, 4;
	add.s64 	%rd12, %rd94, %rd107;
	add.s32 	%r503, %r499, 2081;
	mul.wide.u32 	%rd108, %r503, 4;
	add.s64 	%rd13, %rd94, %rd108;
	add.s32 	%r504, %r499, 2113;
	mul.wide.u32 	%rd109, %r504, 4;
	add.s64 	%rd14, %rd94, %rd109;
	add.s32 	%r505, %r499, 2082;
	mul.wide.u32 	%rd110, %r505, 4;
	add.s64 	%rd15, %rd94, %rd110;
	add.s32 	%r506, %r499, 2114;
	mul.wide.u32 	%rd111, %r506, 4;
	add.s64 	%rd16, %rd94, %rd111;
	add.s32 	%r507, %r499, 4162;
	mul.wide.u32 	%rd112, %r507, 4;
	add.s64 	%rd17, %rd94, %rd112;
	add.s32 	%r508, %r499, 4194;
	mul.wide.u32 	%rd113, %r508, 4;
	add.s64 	%rd18, %rd94, %rd113;
	add.s32 	%r509, %r499, 4163;
	mul.wide.u32 	%rd114, %r509, 4;
	add.s64 	%rd19, %rd94, %rd114;
	add.s32 	%r510, %r499, 4195;
	mul.wide.u32 	%rd115, %r510, 4;
	add.s64 	%rd20, %rd94, %rd115;
	add.s32 	%r511, %r499, 6243;
	mul.wide.u32 	%rd116, %r511, 4;
	add.s64 	%rd21, %rd94, %rd116;
	add.s32 	%r512, %r499, 6275;
	mul.wide.u32 	%rd117, %r512, 4;
	add.s64 	%rd22, %rd94, %rd117;
	add.s32 	%r513, %r499, 6244;
	mul.wide.u32 	%rd118, %r513, 4;
	add.s64 	%rd23, %rd94, %rd118;
	add.s32 	%r514, %r499, 6276;
	mul.wide.u32 	%rd119, %r514, 4;
	add.s64 	%rd24, %rd94, %rd119;
	mul.wide.u32 	%rd120, %r475, 4;
	add.s64 	%rd25, %rd94, %rd120;
	mul.wide.u32 	%rd121, %r474, 4;
	add.s64 	%rd26, %rd94, %rd121;
	mul.wide.u32 	%rd122, %r473, 4;
	add.s64 	%rd27, %rd94, %rd122;
	mul.wide.u32 	%rd123, %r472, 4;
	add.s64 	%rd28, %rd94, %rd123;
	setp.eq.s32 	%p225, %r90, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8050, %r8005;
	mov.u32 	%r8049, %r8005;
	mov.u32 	%r8048, %r8005;
	mov.u32 	%r8047, %r8005;
	mov.u32 	%r8046, %r8005;
	mov.u32 	%r8045, %r8005;
	mov.u32 	%r8044, %r8005;
	mov.u32 	%r8043, %r8005;
	mov.u32 	%r8042, %r8005;
	mov.u32 	%r8041, %r8005;
	mov.u32 	%r8040, %r8005;
	mov.u32 	%r8039, %r8005;
	mov.u32 	%r110, %r8005;
	bra.uni 	$L__BB0_129;
$L__BB0_153:                            // %pass16365
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r8001, %r8007, 786432;
	cvt.s64.s32 	%rd177, %r8001;
	add.s64 	%rd178, %rd177, %rd8;
	shr.u64 	%rd179, %rd178, 35;
	add.s64 	%rd180, %rd178, %rd179;
	shr.s64 	%rd181, %rd180, 29;
	setp.lt.s64 	%p253, %rd178, 0;
	and.b64  	%rd182, %rd180, -536870912;
	setp.ne.s64 	%p254, %rd182, %rd178;
	and.pred  	%p255, %p253, %p254;
	selp.u64 	%rd183, 1, 0, %p255;
	sub.s64 	%rd184, %rd183, %rd181;
	shl.b64 	%rd185, %rd184, 29;
	add.s64 	%rd186, %rd185, %rd178;
	shl.b64 	%rd187, %rd186, 2;
	add.s64 	%rd188, %rd3, %rd187;
	st.global.v4.u32 	[%rd188], {%r182, %r184, %r183, %r185};
	setp.ne.s32 	%p256, %r110, 130816;
	add.s32 	%r110, %r110, 256;
	add.s32 	%r8002, %r110, %r5;
	setp.gt.s32 	%p257, %r6, %r8002;
	and.pred  	%p258, %p256, %p257;
	@%p258 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_154;
$L__BB0_129:                            // %L1561
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	or.b32  	%r580, %r110, %r1;
	and.b32  	%r581, %r580, 130832;
	or.b32  	%r582, %r581, %r118;
	or.b32  	%r583, %r582, %r3;
	shl.b32 	%r584, %r583, 12;
	add.s32 	%r585, %r89, %r584;
	shr.s32 	%r586, %r585, 31;
	shr.u32 	%r587, %r586, 3;
	add.s32 	%r588, %r585, %r587;
	shr.s32 	%r589, %r588, 29;
	setp.lt.s32 	%p226, %r585, 0;
	and.b32  	%r590, %r588, -536870912;
	setp.ne.s32 	%p227, %r590, %r585;
	and.pred  	%p228, %p226, %p227;
	selp.u32 	%r591, 1, 0, %p228;
	sub.s32 	%r592, %r591, %r589;
	shl.b32 	%r593, %r592, 29;
	add.s32 	%r594, %r593, %r585;
	mul.wide.s32 	%rd124, %r594, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r595, %r596, %r597, %r598}, [%rd125];
	or.b32  	%r599, %r584, 262144;
	add.s32 	%r600, %r89, %r599;
	shr.s32 	%r601, %r600, 31;
	shr.u32 	%r602, %r601, 3;
	add.s32 	%r603, %r600, %r602;
	shr.s32 	%r604, %r603, 29;
	setp.lt.s32 	%p229, %r600, 0;
	and.b32  	%r605, %r603, -536870912;
	setp.ne.s32 	%p230, %r605, %r600;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r606, 1, 0, %p231;
	sub.s32 	%r607, %r606, %r604;
	shl.b32 	%r608, %r607, 29;
	add.s32 	%r609, %r608, %r600;
	mul.wide.s32 	%rd126, %r609, 4;
	add.s64 	%rd127, %rd2, %rd126;
	ld.global.v4.u32 	{%r610, %r611, %r612, %r613}, [%rd127];
	or.b32  	%r614, %r584, 524288;
	add.s32 	%r615, %r89, %r614;
	shr.s32 	%r616, %r615, 31;
	shr.u32 	%r617, %r616, 3;
	add.s32 	%r618, %r615, %r617;
	shr.s32 	%r619, %r618, 29;
	setp.lt.s32 	%p232, %r615, 0;
	and.b32  	%r620, %r618, -536870912;
	setp.ne.s32 	%p233, %r620, %r615;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r621, 1, 0, %p234;
	sub.s32 	%r622, %r621, %r619;
	shl.b32 	%r623, %r622, 29;
	add.s32 	%r624, %r623, %r615;
	mul.wide.s32 	%rd128, %r624, 4;
	add.s64 	%rd129, %rd2, %rd128;
	ld.global.v4.u32 	{%r625, %r626, %r627, %r628}, [%rd129];
	or.b32  	%r629, %r584, 786432;
	add.s32 	%r630, %r89, %r629;
	shr.s32 	%r631, %r630, 31;
	shr.u32 	%r632, %r631, 3;
	add.s32 	%r633, %r630, %r632;
	shr.s32 	%r634, %r633, 29;
	setp.lt.s32 	%p235, %r630, 0;
	and.b32  	%r635, %r633, -536870912;
	setp.ne.s32 	%p236, %r635, %r630;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r636, 1, 0, %p237;
	sub.s32 	%r637, %r636, %r634;
	shl.b32 	%r638, %r637, 29;
	add.s32 	%r639, %r638, %r630;
	mul.wide.s32 	%rd130, %r639, 4;
	add.s64 	%rd131, %rd2, %rd130;
	ld.global.v4.u32 	{%r640, %r641, %r642, %r643}, [%rd131];
	selp.b32 	%r644, %r597, %r595, %p225;
	shfl.sync.bfly.b32	%r645, %r644, 8, 31, -1;
	selp.b32 	%r516, %r595, %r645, %p225;
	selp.b32 	%r517, %r645, %r597, %p225;
	selp.b32 	%r646, %r598, %r596, %p225;
	shfl.sync.bfly.b32	%r647, %r646, 8, 31, -1;
	selp.b32 	%r524, %r596, %r647, %p225;
	selp.b32 	%r525, %r647, %r598, %p225;
	selp.b32 	%r648, %r612, %r610, %p225;
	shfl.sync.bfly.b32	%r649, %r648, 8, 31, -1;
	selp.b32 	%r532, %r610, %r649, %p225;
	selp.b32 	%r533, %r649, %r612, %p225;
	selp.b32 	%r650, %r613, %r611, %p225;
	shfl.sync.bfly.b32	%r651, %r650, 8, 31, -1;
	selp.b32 	%r540, %r611, %r651, %p225;
	selp.b32 	%r541, %r651, %r613, %p225;
	selp.b32 	%r652, %r627, %r625, %p225;
	shfl.sync.bfly.b32	%r653, %r652, 8, 31, -1;
	selp.b32 	%r548, %r625, %r653, %p225;
	selp.b32 	%r549, %r653, %r627, %p225;
	selp.b32 	%r654, %r628, %r626, %p225;
	shfl.sync.bfly.b32	%r655, %r654, 8, 31, -1;
	selp.b32 	%r556, %r626, %r655, %p225;
	selp.b32 	%r557, %r655, %r628, %p225;
	selp.b32 	%r656, %r642, %r640, %p225;
	shfl.sync.bfly.b32	%r657, %r656, 8, 31, -1;
	selp.b32 	%r564, %r640, %r657, %p225;
	selp.b32 	%r565, %r657, %r642, %p225;
	selp.b32 	%r658, %r643, %r641, %p225;
	shfl.sync.bfly.b32	%r659, %r658, 8, 31, -1;
	selp.b32 	%r572, %r641, %r659, %p225;
	selp.b32 	%r573, %r659, %r643, %p225;
	mov.u32 	%r574, 21520;
	// begin inline asm
	prmt.b32 %r515, %r516, %r517, %r574;
	// end inline asm
	mov.u32 	%r578, 30258;
	// begin inline asm
	prmt.b32 %r519, %r516, %r517, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r524, %r525, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r524, %r525, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r532, %r533, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r532, %r533, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r540, %r541, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r540, %r541, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r548, %r549, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r548, %r549, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r556, %r557, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r556, %r557, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r564, %r565, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r567, %r564, %r565, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r572, %r573, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r575, %r572, %r573, %r578;
	// end inline asm
	st.shared.u32 	[%rd9], %r515;
	st.shared.u32 	[%rd10], %r519;
	st.shared.u32 	[%rd11], %r523;
	st.shared.u32 	[%rd12], %r527;
	st.shared.u32 	[%rd13], %r531;
	st.shared.u32 	[%rd14], %r535;
	st.shared.u32 	[%rd15], %r539;
	st.shared.u32 	[%rd16], %r543;
	st.shared.u32 	[%rd17], %r547;
	st.shared.u32 	[%rd18], %r551;
	st.shared.u32 	[%rd19], %r555;
	st.shared.u32 	[%rd20], %r559;
	st.shared.u32 	[%rd21], %r563;
	st.shared.u32 	[%rd22], %r567;
	st.shared.u32 	[%rd23], %r571;
	st.shared.u32 	[%rd24], %r575;
	bar.sync 	0;
	or.b32  	%r660, %r110, %r124;
	or.b32  	%r111, %r660, %r91;
	shr.u32 	%r8037, %r111, 6;
	mov.u64 	%rd191, %rd28;
	mov.u64 	%rd192, %rd27;
	mov.u64 	%rd193, %rd26;
	mov.u64 	%rd194, %rd25;
	mov.u32 	%r8038, %r8005;
$L__BB0_130:                            // %pass5578
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7845, %r111, %r8038;
	or.b32  	%r7846, %r7845, %r208;
	bfe.s32 	%r7847, %r7846, 4, 1;
	and.b32  	%r7848, %r7847, 65;
	and.b32  	%r7849, %r7845, 1;
	neg.s32 	%r7850, %r7849;
	and.b32  	%r7851, %r7850, 1040;
	bfe.s32 	%r7852, %r7845, 1, 1;
	and.b32  	%r7853, %r7852, 520;
	bfe.s32 	%r7854, %r7846, 3, 1;
	and.b32  	%r7855, %r7854, 130;
	bfe.s32 	%r7856, %r7845, 2, 1;
	and.b32  	%r7857, %r7856, 260;
	and.b32  	%r7858, %r8037, 3;
	mul.lo.s32 	%r7859, %r7858, 2081;
	or.b32  	%r7860, %r93, %r7851;
	add.s32 	%r7861, %r7860, %r7848;
	add.s32 	%r7862, %r7861, %r7853;
	add.s32 	%r7863, %r7862, %r7855;
	add.s32 	%r7864, %r7863, %r7857;
	add.s32 	%r7865, %r7864, %r7859;
	mul.wide.u32 	%rd132, %r7865, 4;
	add.s64 	%rd134, %rd94, %rd132;
	ld.shared.u32 	%r7866, [%rd134];
	or.b32  	%r7867, %r94, %r7851;
	add.s32 	%r7868, %r7867, %r7848;
	add.s32 	%r7869, %r7868, %r7853;
	add.s32 	%r7870, %r7869, %r7855;
	add.s32 	%r7871, %r7870, %r7857;
	add.s32 	%r7872, %r7871, %r7859;
	mul.wide.u32 	%rd135, %r7872, 4;
	add.s64 	%rd136, %rd94, %rd135;
	ld.shared.u32 	%r7873, [%rd136];
	add.s32 	%r7874, %r95, %r7851;
	add.s32 	%r7875, %r7874, %r7848;
	add.s32 	%r7876, %r7875, %r7853;
	add.s32 	%r7877, %r7876, %r7855;
	add.s32 	%r7878, %r7877, %r7857;
	add.s32 	%r7879, %r7878, %r7859;
	mul.wide.u32 	%rd137, %r7879, 4;
	add.s64 	%rd138, %rd94, %rd137;
	ld.shared.u32 	%r7880, [%rd138];
	add.s32 	%r7881, %r96, %r7851;
	add.s32 	%r7882, %r7881, %r7848;
	add.s32 	%r7883, %r7882, %r7853;
	add.s32 	%r7884, %r7883, %r7855;
	add.s32 	%r7885, %r7884, %r7857;
	add.s32 	%r7886, %r7885, %r7859;
	mul.wide.u32 	%rd139, %r7886, 4;
	add.s64 	%rd140, %rd94, %rd139;
	ld.shared.u32 	%r7887, [%rd140];
	// begin inline asm
	mov.b32 %r666, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r677, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r665, %r7866, -2004318072;
	mov.u32 	%r664, 983055;
	// begin inline asm
	lop3.b32 %r663, %r664, %r665, %r666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r667, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r668, %r666, %r667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r671, %r663, %r668;
	// end inline asm
	mov.u32 	%r675, 15728880;
	// begin inline asm
	lop3.b32 %r674, %r675, %r665, %r677, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r678, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r679, %r677, %r678;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r682, %r674, %r679;
	// end inline asm
	shr.u32 	%r687, %r665, 8;
	// begin inline asm
	lop3.b32 %r685, %r664, %r687, %r666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r689, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r690, %r666, %r689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r693, %r685, %r690;
	// end inline asm
	// begin inline asm
	lop3.b32 %r696, %r675, %r687, %r677, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r700, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r701, %r677, %r700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r704, %r696, %r701;
	// end inline asm
	// begin inline asm
	mov.b32 %r712, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r723, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r711, %r7873, -2004318072;
	// begin inline asm
	lop3.b32 %r709, %r664, %r711, %r712, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r713, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r714, %r712, %r713;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r717, %r709, %r714;
	// end inline asm
	// begin inline asm
	lop3.b32 %r720, %r675, %r711, %r723, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r724, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r725, %r723, %r724;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r728, %r720, %r725;
	// end inline asm
	shr.u32 	%r733, %r711, 8;
	// begin inline asm
	lop3.b32 %r731, %r664, %r733, %r712, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r735, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r736, %r712, %r735;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r739, %r731, %r736;
	// end inline asm
	// begin inline asm
	lop3.b32 %r742, %r675, %r733, %r723, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r746, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r747, %r723, %r746;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r750, %r742, %r747;
	// end inline asm
	// begin inline asm
	mov.b32 %r758, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r769, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r757, %r7880, -2004318072;
	// begin inline asm
	lop3.b32 %r755, %r664, %r757, %r758, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r759, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r760, %r758, %r759;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r763, %r755, %r760;
	// end inline asm
	// begin inline asm
	lop3.b32 %r766, %r675, %r757, %r769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r770, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r771, %r769, %r770;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r774, %r766, %r771;
	// end inline asm
	shr.u32 	%r779, %r757, 8;
	// begin inline asm
	lop3.b32 %r777, %r664, %r779, %r758, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r781, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r782, %r758, %r781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r785, %r777, %r782;
	// end inline asm
	// begin inline asm
	lop3.b32 %r788, %r675, %r779, %r769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r792, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r793, %r769, %r792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r796, %r788, %r793;
	// end inline asm
	// begin inline asm
	mov.b32 %r804, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r815, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r803, %r7887, -2004318072;
	// begin inline asm
	lop3.b32 %r801, %r664, %r803, %r804, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r805, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r806, %r804, %r805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r809, %r801, %r806;
	// end inline asm
	// begin inline asm
	lop3.b32 %r812, %r675, %r803, %r815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r816, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r817, %r815, %r816;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r820, %r812, %r817;
	// end inline asm
	shr.u32 	%r825, %r803, 8;
	// begin inline asm
	lop3.b32 %r823, %r664, %r825, %r804, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r827, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r828, %r804, %r827;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r831, %r823, %r828;
	// end inline asm
	// begin inline asm
	lop3.b32 %r834, %r675, %r825, %r815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r838, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r839, %r815, %r838;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r842, %r834, %r839;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r845, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r847, %r845, %r671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r850, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r852, %r850, %r682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r855, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r857, %r855, %r693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r860, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r862, %r860, %r704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r865, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r867, %r865, %r717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r870, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r872, %r870, %r728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r875, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r877, %r875, %r739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r880, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r882, %r880, %r750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r885, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r887, %r885, %r763;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r890, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r892, %r890, %r774;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r895, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r897, %r895, %r785;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r900, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r902, %r900, %r796;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r905, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r907, %r905, %r809;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r910, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r912, %r910, %r820;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r915, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r917, %r915, %r831;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r920, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r922, %r920, %r842;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r929, %r8050, -2004318072;
	// begin inline asm
	lop3.b32 %r927, %r664, %r929, %r930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r932, %r930, %r931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r935, %r927, %r932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r938, %r675, %r929, %r941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r943, %r941, %r942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r946, %r938, %r943;
	// end inline asm
	shr.u32 	%r951, %r929, 8;
	// begin inline asm
	lop3.b32 %r949, %r664, %r951, %r930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r954, %r930, %r953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r957, %r949, %r954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r960, %r675, %r951, %r941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r965, %r941, %r964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r968, %r960, %r965;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r975, %r8049, -2004318072;
	// begin inline asm
	lop3.b32 %r973, %r664, %r975, %r976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r978, %r976, %r977;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r981, %r973, %r978;
	// end inline asm
	// begin inline asm
	lop3.b32 %r984, %r675, %r975, %r987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r989, %r987, %r988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r992, %r984, %r989;
	// end inline asm
	shr.u32 	%r997, %r975, 8;
	// begin inline asm
	lop3.b32 %r995, %r664, %r997, %r976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1000, %r976, %r999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1003, %r995, %r1000;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1006, %r675, %r997, %r987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1011, %r987, %r1010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1014, %r1006, %r1011;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1021, %r8044, -2004318072;
	// begin inline asm
	lop3.b32 %r1019, %r664, %r1021, %r1022, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1024, %r1022, %r1023;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1027, %r1019, %r1024;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1030, %r675, %r1021, %r1033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1035, %r1033, %r1034;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1038, %r1030, %r1035;
	// end inline asm
	shr.u32 	%r1043, %r1021, 8;
	// begin inline asm
	lop3.b32 %r1041, %r664, %r1043, %r1022, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1046, %r1022, %r1045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1049, %r1041, %r1046;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1052, %r675, %r1043, %r1033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1056, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1057, %r1033, %r1056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1060, %r1052, %r1057;
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1079, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1067, %r8043, -2004318072;
	// begin inline asm
	lop3.b32 %r1065, %r664, %r1067, %r1068, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1070, %r1068, %r1069;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1073, %r1065, %r1070;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1076, %r675, %r1067, %r1079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1080, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1081, %r1079, %r1080;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1084, %r1076, %r1081;
	// end inline asm
	shr.u32 	%r1089, %r1067, 8;
	// begin inline asm
	lop3.b32 %r1087, %r664, %r1089, %r1068, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1091, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1092, %r1068, %r1091;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1095, %r1087, %r1092;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1098, %r675, %r1089, %r1079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1102, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1103, %r1079, %r1102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1106, %r1098, %r1103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r226, %r935, %r847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r226, %r946, %r852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r226, %r957, %r857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r226, %r968, %r862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r226, %r981, %r867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r226, %r992, %r872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r226, %r1003, %r877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r226, %r1014, %r882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r226, %r1027, %r887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r226, %r1038, %r892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r226, %r1049, %r897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r226, %r1060, %r902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r226, %r1073, %r907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r226, %r1084, %r912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r226, %r1095, %r917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r226, %r1106, %r922;
	// end inline asm
	// begin inline asm
	mov.b32 %r1178, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1189, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1177, %r8048, -2004318072;
	// begin inline asm
	lop3.b32 %r1175, %r664, %r1177, %r1178, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1179, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1180, %r1178, %r1179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1183, %r1175, %r1180;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1186, %r675, %r1177, %r1189, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1190, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1191, %r1189, %r1190;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1194, %r1186, %r1191;
	// end inline asm
	shr.u32 	%r1199, %r1177, 8;
	// begin inline asm
	lop3.b32 %r1197, %r664, %r1199, %r1178, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1201, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1202, %r1178, %r1201;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1205, %r1197, %r1202;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1208, %r675, %r1199, %r1189, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1213, %r1189, %r1212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1216, %r1208, %r1213;
	// end inline asm
	// begin inline asm
	mov.b32 %r1224, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1235, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1223, %r8047, -2004318072;
	// begin inline asm
	lop3.b32 %r1221, %r664, %r1223, %r1224, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1225, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1226, %r1224, %r1225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1229, %r1221, %r1226;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1232, %r675, %r1223, %r1235, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1236, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1237, %r1235, %r1236;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1240, %r1232, %r1237;
	// end inline asm
	shr.u32 	%r1245, %r1223, 8;
	// begin inline asm
	lop3.b32 %r1243, %r664, %r1245, %r1224, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1247, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1248, %r1224, %r1247;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1251, %r1243, %r1248;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1254, %r675, %r1245, %r1235, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1259, %r1235, %r1258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1262, %r1254, %r1259;
	// end inline asm
	// begin inline asm
	mov.b32 %r1270, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1281, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1269, %r8042, -2004318072;
	// begin inline asm
	lop3.b32 %r1267, %r664, %r1269, %r1270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1271, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1272, %r1270, %r1271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1275, %r1267, %r1272;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1278, %r675, %r1269, %r1281, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1282, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1283, %r1281, %r1282;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1286, %r1278, %r1283;
	// end inline asm
	shr.u32 	%r1291, %r1269, 8;
	// begin inline asm
	lop3.b32 %r1289, %r664, %r1291, %r1270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1293, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1294, %r1270, %r1293;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1297, %r1289, %r1294;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1300, %r675, %r1291, %r1281, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1304, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1305, %r1281, %r1304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1308, %r1300, %r1305;
	// end inline asm
	// begin inline asm
	mov.b32 %r1316, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1327, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1315, %r8041, -2004318072;
	// begin inline asm
	lop3.b32 %r1313, %r664, %r1315, %r1316, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1317, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1318, %r1316, %r1317;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1321, %r1313, %r1318;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1324, %r675, %r1315, %r1327, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1328, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1329, %r1327, %r1328;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1332, %r1324, %r1329;
	// end inline asm
	shr.u32 	%r1337, %r1315, 8;
	// begin inline asm
	lop3.b32 %r1335, %r664, %r1337, %r1316, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1339, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1340, %r1316, %r1339;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1343, %r1335, %r1340;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1346, %r675, %r1337, %r1327, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1351, %r1327, %r1350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1354, %r1346, %r1351;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1357, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r1357, %r1183, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1365, %r1363, %r1194, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1369, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r1369, %r1205, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1375, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r1375, %r1216, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1381, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1383, %r1381, %r1229, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1387, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r1387, %r1240, %r1129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1393, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r1393, %r1251, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1399, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1401, %r1399, %r1262, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1405, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r1405, %r1275, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1411, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r1411, %r1286, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1419, %r1417, %r1297, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1423, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r1423, %r1308, %r1153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1429, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1429, %r1321, %r1157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1435, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r1435, %r1332, %r1161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1441, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r1441, %r1343, %r1165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1447, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r1447, %r1354, %r1169;
	// end inline asm
	// begin inline asm
	mov.b32 %r1458, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1469, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1457, %r8046, -2004318072;
	// begin inline asm
	lop3.b32 %r1455, %r664, %r1457, %r1458, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1459, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1460, %r1458, %r1459;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1463, %r1455, %r1460;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1466, %r675, %r1457, %r1469, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1470, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1471, %r1469, %r1470;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1474, %r1466, %r1471;
	// end inline asm
	shr.u32 	%r1479, %r1457, 8;
	// begin inline asm
	lop3.b32 %r1477, %r664, %r1479, %r1458, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1481, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1482, %r1458, %r1481;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1485, %r1477, %r1482;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1488, %r675, %r1479, %r1469, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1492, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1493, %r1469, %r1492;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1496, %r1488, %r1493;
	// end inline asm
	// begin inline asm
	mov.b32 %r1504, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1515, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1503, %r8045, -2004318072;
	// begin inline asm
	lop3.b32 %r1501, %r664, %r1503, %r1504, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1505, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1506, %r1504, %r1505;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1509, %r1501, %r1506;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1512, %r675, %r1503, %r1515, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1516, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1517, %r1515, %r1516;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1520, %r1512, %r1517;
	// end inline asm
	shr.u32 	%r1525, %r1503, 8;
	// begin inline asm
	lop3.b32 %r1523, %r664, %r1525, %r1504, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1527, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1528, %r1504, %r1527;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1531, %r1523, %r1528;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1534, %r675, %r1525, %r1515, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1538, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1539, %r1515, %r1538;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1542, %r1534, %r1539;
	// end inline asm
	// begin inline asm
	mov.b32 %r1550, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1561, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1549, %r8040, -2004318072;
	// begin inline asm
	lop3.b32 %r1547, %r664, %r1549, %r1550, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1551, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1552, %r1550, %r1551;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1555, %r1547, %r1552;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1558, %r675, %r1549, %r1561, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1562, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1563, %r1561, %r1562;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1566, %r1558, %r1563;
	// end inline asm
	shr.u32 	%r1571, %r1549, 8;
	// begin inline asm
	lop3.b32 %r1569, %r664, %r1571, %r1550, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1573, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1574, %r1550, %r1573;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1577, %r1569, %r1574;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1580, %r675, %r1571, %r1561, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1584, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1585, %r1561, %r1584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1588, %r1580, %r1585;
	// end inline asm
	// begin inline asm
	mov.b32 %r1596, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1607, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1595, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r1593, %r664, %r1595, %r1596, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1597, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1598, %r1596, %r1597;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1601, %r1593, %r1598;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1604, %r675, %r1595, %r1607, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1608, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1609, %r1607, %r1608;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1612, %r1604, %r1609;
	// end inline asm
	shr.u32 	%r1617, %r1595, 8;
	// begin inline asm
	lop3.b32 %r1615, %r664, %r1617, %r1596, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1619, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1620, %r1596, %r1619;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1623, %r1615, %r1620;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1626, %r675, %r1617, %r1607, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1630, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1631, %r1607, %r1630;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1634, %r1626, %r1631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r262, %r1463, %r1359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r262, %r1474, %r1365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r262, %r1485, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r262, %r1496, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r262, %r1509, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r262, %r1520, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r262, %r1531, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r262, %r1542, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r262, %r1555, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r262, %r1566, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r262, %r1577, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r262, %r1588, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r262, %r1601, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r262, %r1612, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r262, %r1623, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r262, %r1634, %r1449;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1701, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1703, %r1701, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r308, %r1708, %r1703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1710, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1712, %r1710, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r308, %r1717, %r1712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1719, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1721, %r1719, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r308, %r1726, %r1721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1728, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r308, %r1735, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1737, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r1737, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r308, %r1744, %r1739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1746, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1748, %r1746, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1751, %r308, %r1753, %r1748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1755, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1757, %r1755, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r308, %r1762, %r1757;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1764, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1766, %r1764, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r308, %r1771, %r1766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r311, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r308, %r1705, %r1773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r311, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r308, %r1714, %r1780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r311, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r308, %r1723, %r1787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r311, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r308, %r1732, %r1794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1801, %r311, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r308, %r1741, %r1801;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1808, %r311, %r1753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r308, %r1750, %r1808;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1815, %r311, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r308, %r1759, %r1815;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r311, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r308, %r1768, %r1822;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1916, %r1913}, {%r355, %r361, %r358, %r364}, {%r1706, %r1776}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1925, %r1922}, {%r355, %r361, %r358, %r364}, {%r1715, %r1783}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1934, %r1931}, {%r355, %r361, %r358, %r364}, {%r1724, %r1790}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1943, %r1940}, {%r355, %r361, %r358, %r364}, {%r1733, %r1797}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1952, %r1949}, {%r355, %r361, %r358, %r364}, {%r1742, %r1804}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1961, %r1958}, {%r355, %r361, %r358, %r364}, {%r1751, %r1811}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1970, %r1967}, {%r355, %r361, %r358, %r364}, {%r1760, %r1818}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1979, %r1976}, {%r355, %r361, %r358, %r364}, {%r1769, %r1825}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1909, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1911, %r1909, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r399, %r1916, %r1911;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1918, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1920, %r1918, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1923, %r399, %r1925, %r1920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1927, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1929, %r1927, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1932, %r399, %r1934, %r1929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1936, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1938, %r1936, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1941, %r399, %r1943, %r1938;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1945, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1947, %r1945, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1950, %r399, %r1952, %r1947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1954, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1956, %r1954, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r399, %r1961, %r1956;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1963, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1965, %r1963, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1968, %r399, %r1970, %r1965;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1972, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r1972, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r399, %r1979, %r1974;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1981, %r402, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r399, %r1913, %r1981;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r402, %r1925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r399, %r1922, %r1988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r402, %r1934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r399, %r1931, %r1995;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2002, %r402, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r399, %r1940, %r2002;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2009, %r402, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2012, %r399, %r1949, %r2009;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2016, %r402, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2019, %r399, %r1958, %r2016;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2023, %r402, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r399, %r1967, %r2023;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2030, %r402, %r1979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2033, %r399, %r1976, %r2030;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2037, %r2038}, {%r433, %r439, %r436, %r442}, {%r1914, %r1984}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2047, %r2048}, {%r433, %r439, %r436, %r442}, {%r1923, %r1991}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2057, %r2058}, {%r433, %r439, %r436, %r442}, {%r1932, %r1998}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2067, %r2068}, {%r433, %r439, %r436, %r442}, {%r1941, %r2005}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2077, %r2078}, {%r433, %r439, %r436, %r442}, {%r1950, %r2012}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2087, %r2088}, {%r433, %r439, %r436, %r442}, {%r1959, %r2019}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2097, %r2098}, {%r433, %r439, %r436, %r442}, {%r1968, %r2026}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2107, %r2108}, {%r433, %r439, %r436, %r442}, {%r1977, %r2033}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r119, %r2037;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r119, %r2038;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r119, %r2047;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r119, %r2048;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r119, %r2057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r119, %r2058;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r119, %r2067;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r119, %r2068;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r119, %r2077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r119, %r2078;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r119, %r2087;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r119, %r2088;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r119, %r2097;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r119, %r2098;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r119, %r2107;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2162, %r119, %r2108;
	// end inline asm
	// begin inline asm
	mov.b32 %r2165, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2166, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2167, %r2117, %r2165;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2170, %r2167, %r2166;
	// end inline asm
	// begin inline asm
	mov.b32 %r2173, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2174, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2175, %r2120, %r2173;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2178, %r2175, %r2174;
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2183, %r2123, %r2181;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2186, %r2183, %r2182;
	// end inline asm
	// begin inline asm
	mov.b32 %r2189, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2190, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2191, %r2126, %r2189;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2194, %r2191, %r2190;
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2199, %r2129, %r2197;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2202, %r2199, %r2198;
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2207, %r2132, %r2205;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2210, %r2207, %r2206;
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2215, %r2135, %r2213;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2218, %r2215, %r2214;
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2223, %r2138, %r2221;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2226, %r2223, %r2222;
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2231, %r2141, %r2229;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2234, %r2231, %r2230;
	// end inline asm
	// begin inline asm
	mov.b32 %r2237, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2239, %r2144, %r2237;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2242, %r2239, %r2238;
	// end inline asm
	// begin inline asm
	mov.b32 %r2245, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2247, %r2147, %r2245;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2250, %r2247, %r2246;
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2255, %r2150, %r2253;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2258, %r2255, %r2254;
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2263, %r2153, %r2261;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2266, %r2263, %r2262;
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2271, %r2156, %r2269;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2274, %r2271, %r2270;
	// end inline asm
	// begin inline asm
	mov.b32 %r2277, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2279, %r2159, %r2277;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2282, %r2279, %r2278;
	// end inline asm
	// begin inline asm
	mov.b32 %r2285, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2286, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2287, %r2162, %r2285;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2290, %r2287, %r2286;
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2294, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2295, %r2296, %r2294;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2298, %r2170, %r2295;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2302, %r2296, %r2301;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2305, %r2178, %r2302;
	// end inline asm
	// begin inline asm
	mov.b32 %r2308, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2309, %r2296, %r2308;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2312, %r2186, %r2309;
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2316, %r2296, %r2315;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2319, %r2194, %r2316;
	// end inline asm
	mov.u32 	%r2325, 25152;
	// begin inline asm
	prmt.b32 %r2322, %r2298, %r2312, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2326, %r2305, %r2319, %r2325;
	// end inline asm
	shl.b32 	%r2333, %r2326, 4;
	mov.u32 	%r2331, 252645135;
	// begin inline asm
	lop3.b32 %r2330, %r2331, %r2322, %r2333, 202;
	// end inline asm
	xor.b32  	%r7888, %r2330, -2004318072;
	// begin inline asm
	mov.b32 %r2337, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2336, %r2337, %r2335;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2339, %r2202, %r2336;
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2343, %r2337, %r2342;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2346, %r2210, %r2343;
	// end inline asm
	// begin inline asm
	mov.b32 %r2349, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2350, %r2337, %r2349;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2353, %r2218, %r2350;
	// end inline asm
	// begin inline asm
	mov.b32 %r2356, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2357, %r2337, %r2356;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2226, %r2357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2363, %r2339, %r2353, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2367, %r2346, %r2360, %r2325;
	// end inline asm
	shl.b32 	%r2374, %r2367, 4;
	// begin inline asm
	lop3.b32 %r2371, %r2331, %r2363, %r2374, 202;
	// end inline asm
	xor.b32  	%r7889, %r2371, -2004318072;
	// begin inline asm
	mov.b32 %r2378, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2376, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2377, %r2378, %r2376;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2380, %r2234, %r2377;
	// end inline asm
	// begin inline asm
	mov.b32 %r2383, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2384, %r2378, %r2383;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2387, %r2242, %r2384;
	// end inline asm
	// begin inline asm
	mov.b32 %r2390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2391, %r2378, %r2390;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2250, %r2391;
	// end inline asm
	// begin inline asm
	mov.b32 %r2397, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2398, %r2378, %r2397;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2401, %r2258, %r2398;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2404, %r2380, %r2394, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2408, %r2387, %r2401, %r2325;
	// end inline asm
	shl.b32 	%r2415, %r2408, 4;
	// begin inline asm
	lop3.b32 %r2412, %r2331, %r2404, %r2415, 202;
	// end inline asm
	xor.b32  	%r7890, %r2412, -2004318072;
	// begin inline asm
	mov.b32 %r2419, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2417, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2418, %r2419, %r2417;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2421, %r2266, %r2418;
	// end inline asm
	// begin inline asm
	mov.b32 %r2424, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2425, %r2419, %r2424;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2428, %r2274, %r2425;
	// end inline asm
	// begin inline asm
	mov.b32 %r2431, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2432, %r2419, %r2431;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2435, %r2282, %r2432;
	// end inline asm
	// begin inline asm
	mov.b32 %r2438, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2439, %r2419, %r2438;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2442, %r2290, %r2439;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2445, %r2421, %r2435, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2449, %r2428, %r2442, %r2325;
	// end inline asm
	shl.b32 	%r2456, %r2449, 4;
	// begin inline asm
	lop3.b32 %r2453, %r2331, %r2445, %r2456, 202;
	// end inline asm
	xor.b32  	%r7891, %r2453, -2004318072;
	st.shared.u32 	[%rd191], %r7888;
	st.shared.u32 	[%rd192], %r7889;
	st.shared.u32 	[%rd193], %r7890;
	st.shared.u32 	[%rd194], %r7891;
	ld.shared.u32 	%r8050, [%rd134];
	ld.shared.u32 	%r8049, [%rd136];
	ld.shared.u32 	%r8044, [%rd138];
	ld.shared.u32 	%r8043, [%rd140];
	// begin inline asm
	mov.b32 %r2462, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2473, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2461, %r8050, -2004318072;
	// begin inline asm
	lop3.b32 %r2459, %r664, %r2461, %r2462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2463, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2464, %r2462, %r2463;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2467, %r2459, %r2464;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2470, %r675, %r2461, %r2473, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2475, %r2473, %r2474;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2478, %r2470, %r2475;
	// end inline asm
	shr.u32 	%r2483, %r2461, 8;
	// begin inline asm
	lop3.b32 %r2481, %r664, %r2483, %r2462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2485, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2486, %r2462, %r2485;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2489, %r2481, %r2486;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2492, %r675, %r2483, %r2473, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2496, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2497, %r2473, %r2496;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2500, %r2492, %r2497;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2519, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2507, %r8049, -2004318072;
	// begin inline asm
	lop3.b32 %r2505, %r664, %r2507, %r2508, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2509, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2510, %r2508, %r2509;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2513, %r2505, %r2510;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2516, %r675, %r2507, %r2519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2521, %r2519, %r2520;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2524, %r2516, %r2521;
	// end inline asm
	shr.u32 	%r2529, %r2507, 8;
	// begin inline asm
	lop3.b32 %r2527, %r664, %r2529, %r2508, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2531, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2532, %r2508, %r2531;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2535, %r2527, %r2532;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2538, %r675, %r2529, %r2519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2542, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2543, %r2519, %r2542;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2546, %r2538, %r2543;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2565, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2553, %r8044, -2004318072;
	// begin inline asm
	lop3.b32 %r2551, %r664, %r2553, %r2554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2555, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2556, %r2554, %r2555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2559, %r2551, %r2556;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2562, %r675, %r2553, %r2565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2566, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2567, %r2565, %r2566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2570, %r2562, %r2567;
	// end inline asm
	shr.u32 	%r2575, %r2553, 8;
	// begin inline asm
	lop3.b32 %r2573, %r664, %r2575, %r2554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2577, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2578, %r2554, %r2577;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2581, %r2573, %r2578;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2584, %r675, %r2575, %r2565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2588, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2589, %r2565, %r2588;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2592, %r2584, %r2589;
	// end inline asm
	// begin inline asm
	mov.b32 %r2600, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2611, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2599, %r8043, -2004318072;
	// begin inline asm
	lop3.b32 %r2597, %r664, %r2599, %r2600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2601, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2602, %r2600, %r2601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2605, %r2597, %r2602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2608, %r675, %r2599, %r2611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2612, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2613, %r2611, %r2612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2616, %r2608, %r2613;
	// end inline asm
	shr.u32 	%r2621, %r2599, 8;
	// begin inline asm
	lop3.b32 %r2619, %r664, %r2621, %r2600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2623, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2624, %r2600, %r2623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2627, %r2619, %r2624;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2630, %r675, %r2621, %r2611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2634, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2635, %r2611, %r2634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2638, %r2630, %r2635;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2641, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2643, %r2641, %r2467;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2646, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2648, %r2646, %r2478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2651, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2653, %r2651, %r2489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2656, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2658, %r2656, %r2500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2661, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2663, %r2661, %r2513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2666, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2668, %r2666, %r2524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2671, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2673, %r2671, %r2535;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2676, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r2676, %r2546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2681, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2683, %r2681, %r2559;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2686, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r2686, %r2570;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2691, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2693, %r2691, %r2581;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2696, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2698, %r2696, %r2592;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2701, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2703, %r2701, %r2605;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2706, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r2706, %r2616;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2711, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r2711, %r2627;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2716, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r2716, %r2638;
	// end inline asm
	// begin inline asm
	mov.b32 %r2726, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2737, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2723, %r664, %r1177, %r2726, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2727, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2728, %r2726, %r2727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2731, %r2723, %r2728;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2734, %r675, %r1177, %r2737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2739, %r2737, %r2738;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2742, %r2734, %r2739;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2745, %r664, %r1199, %r2726, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2749, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2750, %r2726, %r2749;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2753, %r2745, %r2750;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2756, %r675, %r1199, %r2737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2760, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2761, %r2737, %r2760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2764, %r2756, %r2761;
	// end inline asm
	// begin inline asm
	mov.b32 %r2772, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2783, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2769, %r664, %r1223, %r2772, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2773, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2774, %r2772, %r2773;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2777, %r2769, %r2774;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2780, %r675, %r1223, %r2783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2784, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2785, %r2783, %r2784;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2788, %r2780, %r2785;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2791, %r664, %r1245, %r2772, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2795, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2796, %r2772, %r2795;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2799, %r2791, %r2796;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2802, %r675, %r1245, %r2783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2806, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2807, %r2783, %r2806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2810, %r2802, %r2807;
	// end inline asm
	// begin inline asm
	mov.b32 %r2818, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2829, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2815, %r664, %r1269, %r2818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2819, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2820, %r2818, %r2819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2823, %r2815, %r2820;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2826, %r675, %r1269, %r2829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2830, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2831, %r2829, %r2830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2834, %r2826, %r2831;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2837, %r664, %r1291, %r2818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2841, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2842, %r2818, %r2841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2845, %r2837, %r2842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2848, %r675, %r1291, %r2829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2852, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2853, %r2829, %r2852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2856, %r2848, %r2853;
	// end inline asm
	// begin inline asm
	mov.b32 %r2864, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2875, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2861, %r664, %r1315, %r2864, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2865, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2866, %r2864, %r2865;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2869, %r2861, %r2866;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2872, %r675, %r1315, %r2875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2876, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2877, %r2875, %r2876;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2880, %r2872, %r2877;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2883, %r664, %r1337, %r2864, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2887, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2888, %r2864, %r2887;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2891, %r2883, %r2888;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2894, %r675, %r1337, %r2875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2898, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2899, %r2875, %r2898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2902, %r2894, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r226, %r2731, %r2643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r226, %r2742, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r226, %r2753, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r226, %r2764, %r2658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r226, %r2777, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r226, %r2788, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r226, %r2799, %r2673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r226, %r2810, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r226, %r2823, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r226, %r2834, %r2688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r226, %r2845, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r226, %r2856, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r226, %r2869, %r2703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r226, %r2880, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r226, %r2891, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r226, %r2902, %r2718;
	// end inline asm
	// begin inline asm
	mov.b32 %r2974, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2985, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2971, %r664, %r1457, %r2974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2976, %r2974, %r2975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2979, %r2971, %r2976;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2982, %r675, %r1457, %r2985, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2986, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2987, %r2985, %r2986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2990, %r2982, %r2987;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2993, %r664, %r1479, %r2974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2997, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2998, %r2974, %r2997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3001, %r2993, %r2998;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3004, %r675, %r1479, %r2985, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3008, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3009, %r2985, %r3008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3012, %r3004, %r3009;
	// end inline asm
	// begin inline asm
	mov.b32 %r3020, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3031, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3017, %r664, %r1503, %r3020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3021, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3022, %r3020, %r3021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3025, %r3017, %r3022;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3028, %r675, %r1503, %r3031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3032, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3033, %r3031, %r3032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3036, %r3028, %r3033;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3039, %r664, %r1525, %r3020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3043, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3044, %r3020, %r3043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3047, %r3039, %r3044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3050, %r675, %r1525, %r3031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3054, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3055, %r3031, %r3054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3058, %r3050, %r3055;
	// end inline asm
	// begin inline asm
	mov.b32 %r3066, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3077, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3063, %r664, %r1549, %r3066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3067, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3068, %r3066, %r3067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3071, %r3063, %r3068;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3074, %r675, %r1549, %r3077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3079, %r3077, %r3078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3082, %r3074, %r3079;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3085, %r664, %r1571, %r3066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3090, %r3066, %r3089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3093, %r3085, %r3090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3096, %r675, %r1571, %r3077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3100, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3101, %r3077, %r3100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3104, %r3096, %r3101;
	// end inline asm
	// begin inline asm
	mov.b32 %r3112, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3123, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3109, %r664, %r1595, %r3112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3113, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3114, %r3112, %r3113;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3117, %r3109, %r3114;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3120, %r675, %r1595, %r3123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3124, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3125, %r3123, %r3124;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3128, %r3120, %r3125;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3131, %r664, %r1617, %r3112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3135, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3136, %r3112, %r3135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3139, %r3131, %r3136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3142, %r675, %r1617, %r3123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3147, %r3123, %r3146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3150, %r3142, %r3147;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3153, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r3153, %r2979, %r2905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3159, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r3159, %r2990, %r2909;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3165, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3165, %r3001, %r2913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3171, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3171, %r3012, %r2917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3177, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3177, %r3025, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3183, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r3183, %r3036, %r2925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3189, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r3189, %r3047, %r2929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3195, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r3195, %r3058, %r2933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3201, %r3071, %r2937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r3207, %r3082, %r2941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3213, %r3093, %r2945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3219, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r3219, %r3104, %r2949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3225, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r3225, %r3117, %r2953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3231, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3231, %r3128, %r2957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3237, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r3237, %r3139, %r2961;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3243, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r3243, %r3150, %r2965;
	// end inline asm
	// begin inline asm
	mov.b32 %r3254, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3265, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3251, %r664, %r665, %r3254, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3255, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3256, %r3254, %r3255;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3259, %r3251, %r3256;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3262, %r675, %r665, %r3265, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3266, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3267, %r3265, %r3266;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3270, %r3262, %r3267;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3273, %r664, %r687, %r3254, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3277, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3278, %r3254, %r3277;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3281, %r3273, %r3278;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3284, %r675, %r687, %r3265, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3288, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3289, %r3265, %r3288;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3292, %r3284, %r3289;
	// end inline asm
	// begin inline asm
	mov.b32 %r3300, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3311, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3297, %r664, %r711, %r3300, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3301, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3302, %r3300, %r3301;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3305, %r3297, %r3302;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3308, %r675, %r711, %r3311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3312, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3313, %r3311, %r3312;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3316, %r3308, %r3313;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3319, %r664, %r733, %r3300, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3323, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3324, %r3300, %r3323;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3327, %r3319, %r3324;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3330, %r675, %r733, %r3311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3334, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3335, %r3311, %r3334;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3338, %r3330, %r3335;
	// end inline asm
	// begin inline asm
	mov.b32 %r3346, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3357, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3343, %r664, %r757, %r3346, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3347, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3348, %r3346, %r3347;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3351, %r3343, %r3348;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3354, %r675, %r757, %r3357, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3358, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3359, %r3357, %r3358;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3362, %r3354, %r3359;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3365, %r664, %r779, %r3346, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3369, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3370, %r3346, %r3369;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3373, %r3365, %r3370;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3376, %r675, %r779, %r3357, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3380, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3381, %r3357, %r3380;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3384, %r3376, %r3381;
	// end inline asm
	// begin inline asm
	mov.b32 %r3392, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3403, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3389, %r664, %r803, %r3392, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3393, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3394, %r3392, %r3393;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3397, %r3389, %r3394;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3400, %r675, %r803, %r3403, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3404, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3405, %r3403, %r3404;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3408, %r3400, %r3405;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3411, %r664, %r825, %r3392, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3415, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3416, %r3392, %r3415;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3419, %r3411, %r3416;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3422, %r675, %r825, %r3403, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3426, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3427, %r3403, %r3426;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3430, %r3422, %r3427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r262, %r3259, %r3155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r262, %r3270, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r262, %r3281, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r262, %r3292, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r262, %r3305, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r262, %r3316, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r262, %r3327, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r262, %r3338, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3540, %r262, %r3351, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r262, %r3362, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r262, %r3373, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r262, %r3384, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3558, %r262, %r3397, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r262, %r3408, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r262, %r3419, %r3239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r262, %r3430, %r3245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3497, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3499, %r3497, %r3501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r308, %r3504, %r3499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3506, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3508, %r3506, %r3510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3511, %r308, %r3513, %r3508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3515, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3517, %r3515, %r3519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3520, %r308, %r3522, %r3517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3524, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3526, %r3524, %r3528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3529, %r308, %r3531, %r3526;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3533, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3535, %r3533, %r3537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3538, %r308, %r3540, %r3535;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3542, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3544, %r3542, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3547, %r308, %r3549, %r3544;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3551, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3553, %r3551, %r3555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3556, %r308, %r3558, %r3553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3560, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3562, %r3560, %r3564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3565, %r308, %r3567, %r3562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3569, %r311, %r3504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3572, %r308, %r3501, %r3569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3576, %r311, %r3513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3579, %r308, %r3510, %r3576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3583, %r311, %r3522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3586, %r308, %r3519, %r3583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3590, %r311, %r3531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r308, %r3528, %r3590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3597, %r311, %r3540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3600, %r308, %r3537, %r3597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3604, %r311, %r3549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3607, %r308, %r3546, %r3604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3611, %r311, %r3558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3614, %r308, %r3555, %r3611;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3618, %r311, %r3567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3621, %r308, %r3564, %r3618;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3712, %r3709}, {%r355, %r361, %r358, %r364}, {%r3502, %r3572}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3721, %r3718}, {%r355, %r361, %r358, %r364}, {%r3511, %r3579}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3730, %r3727}, {%r355, %r361, %r358, %r364}, {%r3520, %r3586}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3739, %r3736}, {%r355, %r361, %r358, %r364}, {%r3529, %r3593}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3748, %r3745}, {%r355, %r361, %r358, %r364}, {%r3538, %r3600}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3757, %r3754}, {%r355, %r361, %r358, %r364}, {%r3547, %r3607}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3766, %r3763}, {%r355, %r361, %r358, %r364}, {%r3556, %r3614}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3775, %r3772}, {%r355, %r361, %r358, %r364}, {%r3565, %r3621}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3705, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3707, %r3705, %r3709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3710, %r399, %r3712, %r3707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3714, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3716, %r3714, %r3718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3719, %r399, %r3721, %r3716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3723, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3725, %r3723, %r3727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3728, %r399, %r3730, %r3725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3732, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3734, %r3732, %r3736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3737, %r399, %r3739, %r3734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3741, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3743, %r3741, %r3745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3746, %r399, %r3748, %r3743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3750, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3752, %r3750, %r3754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3755, %r399, %r3757, %r3752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3759, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3761, %r3759, %r3763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3764, %r399, %r3766, %r3761;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3768, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3770, %r3768, %r3772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3773, %r399, %r3775, %r3770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3777, %r402, %r3712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3780, %r399, %r3709, %r3777;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3784, %r402, %r3721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3787, %r399, %r3718, %r3784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3791, %r402, %r3730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3794, %r399, %r3727, %r3791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3798, %r402, %r3739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3801, %r399, %r3736, %r3798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3805, %r402, %r3748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3808, %r399, %r3745, %r3805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3812, %r402, %r3757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3815, %r399, %r3754, %r3812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3819, %r402, %r3766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3822, %r399, %r3763, %r3819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3826, %r402, %r3775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3829, %r399, %r3772, %r3826;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3833, %r3834}, {%r433, %r439, %r436, %r442}, {%r3710, %r3780}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3843, %r3844}, {%r433, %r439, %r436, %r442}, {%r3719, %r3787}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3853, %r3854}, {%r433, %r439, %r436, %r442}, {%r3728, %r3794}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3863, %r3864}, {%r433, %r439, %r436, %r442}, {%r3737, %r3801}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3873, %r3874}, {%r433, %r439, %r436, %r442}, {%r3746, %r3808}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3883, %r3884}, {%r433, %r439, %r436, %r442}, {%r3755, %r3815}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3893, %r3894}, {%r433, %r439, %r436, %r442}, {%r3764, %r3822}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3903, %r3904}, {%r433, %r439, %r436, %r442}, {%r3773, %r3829}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3913, %r119, %r3833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3916, %r119, %r3834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3919, %r119, %r3843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3922, %r119, %r3844;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r119, %r3853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3928, %r119, %r3854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3931, %r119, %r3863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3934, %r119, %r3864;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3937, %r119, %r3873;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3940, %r119, %r3874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3943, %r119, %r3883;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3946, %r119, %r3884;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3949, %r119, %r3893;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3952, %r119, %r3894;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3955, %r119, %r3903;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3958, %r119, %r3904;
	// end inline asm
	// begin inline asm
	mov.b32 %r3961, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3962, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3963, %r3913, %r3961;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3966, %r3963, %r3962;
	// end inline asm
	// begin inline asm
	mov.b32 %r3969, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3970, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3971, %r3916, %r3969;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3974, %r3971, %r3970;
	// end inline asm
	// begin inline asm
	mov.b32 %r3977, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3978, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3979, %r3919, %r3977;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3982, %r3979, %r3978;
	// end inline asm
	// begin inline asm
	mov.b32 %r3985, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3986, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3987, %r3922, %r3985;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3990, %r3987, %r3986;
	// end inline asm
	// begin inline asm
	mov.b32 %r3993, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3994, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3995, %r3925, %r3993;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3998, %r3995, %r3994;
	// end inline asm
	// begin inline asm
	mov.b32 %r4001, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4002, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4003, %r3928, %r4001;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4006, %r4003, %r4002;
	// end inline asm
	// begin inline asm
	mov.b32 %r4009, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4010, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4011, %r3931, %r4009;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4014, %r4011, %r4010;
	// end inline asm
	// begin inline asm
	mov.b32 %r4017, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4018, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4019, %r3934, %r4017;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4022, %r4019, %r4018;
	// end inline asm
	// begin inline asm
	mov.b32 %r4025, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4026, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4027, %r3937, %r4025;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4030, %r4027, %r4026;
	// end inline asm
	// begin inline asm
	mov.b32 %r4033, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4034, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4035, %r3940, %r4033;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4038, %r4035, %r4034;
	// end inline asm
	// begin inline asm
	mov.b32 %r4041, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4042, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4043, %r3943, %r4041;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4046, %r4043, %r4042;
	// end inline asm
	// begin inline asm
	mov.b32 %r4049, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4050, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4051, %r3946, %r4049;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4054, %r4051, %r4050;
	// end inline asm
	// begin inline asm
	mov.b32 %r4057, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4058, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4059, %r3949, %r4057;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4062, %r4059, %r4058;
	// end inline asm
	// begin inline asm
	mov.b32 %r4065, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4066, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4067, %r3952, %r4065;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4070, %r4067, %r4066;
	// end inline asm
	// begin inline asm
	mov.b32 %r4073, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4074, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4075, %r3955, %r4073;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4078, %r4075, %r4074;
	// end inline asm
	// begin inline asm
	mov.b32 %r4081, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4082, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4083, %r3958, %r4081;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4086, %r4083, %r4082;
	// end inline asm
	// begin inline asm
	mov.b32 %r4092, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4091, %r4092, %r4090;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4094, %r3966, %r4091;
	// end inline asm
	// begin inline asm
	mov.b32 %r4097, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4098, %r4092, %r4097;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4101, %r3974, %r4098;
	// end inline asm
	// begin inline asm
	mov.b32 %r4104, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4105, %r4092, %r4104;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4108, %r3982, %r4105;
	// end inline asm
	// begin inline asm
	mov.b32 %r4111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4112, %r4092, %r4111;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4115, %r3990, %r4112;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4118, %r4094, %r4108, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4122, %r4101, %r4115, %r2325;
	// end inline asm
	shl.b32 	%r4129, %r4122, 4;
	// begin inline asm
	lop3.b32 %r4126, %r2331, %r4118, %r4129, 202;
	// end inline asm
	xor.b32  	%r7892, %r4126, -2004318072;
	// begin inline asm
	mov.b32 %r4133, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4131, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4132, %r4133, %r4131;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4135, %r3998, %r4132;
	// end inline asm
	// begin inline asm
	mov.b32 %r4138, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4139, %r4133, %r4138;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4142, %r4006, %r4139;
	// end inline asm
	// begin inline asm
	mov.b32 %r4145, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4146, %r4133, %r4145;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4149, %r4014, %r4146;
	// end inline asm
	// begin inline asm
	mov.b32 %r4152, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4153, %r4133, %r4152;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4156, %r4022, %r4153;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4159, %r4135, %r4149, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4163, %r4142, %r4156, %r2325;
	// end inline asm
	shl.b32 	%r4170, %r4163, 4;
	// begin inline asm
	lop3.b32 %r4167, %r2331, %r4159, %r4170, 202;
	// end inline asm
	xor.b32  	%r7893, %r4167, -2004318072;
	// begin inline asm
	mov.b32 %r4174, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4172, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4173, %r4174, %r4172;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4176, %r4030, %r4173;
	// end inline asm
	// begin inline asm
	mov.b32 %r4179, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4180, %r4174, %r4179;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4183, %r4038, %r4180;
	// end inline asm
	// begin inline asm
	mov.b32 %r4186, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4187, %r4174, %r4186;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4190, %r4046, %r4187;
	// end inline asm
	// begin inline asm
	mov.b32 %r4193, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4194, %r4174, %r4193;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4197, %r4054, %r4194;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4200, %r4176, %r4190, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4204, %r4183, %r4197, %r2325;
	// end inline asm
	shl.b32 	%r4211, %r4204, 4;
	// begin inline asm
	lop3.b32 %r4208, %r2331, %r4200, %r4211, 202;
	// end inline asm
	xor.b32  	%r7894, %r4208, -2004318072;
	// begin inline asm
	mov.b32 %r4215, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4213, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4214, %r4215, %r4213;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4217, %r4062, %r4214;
	// end inline asm
	// begin inline asm
	mov.b32 %r4220, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4221, %r4215, %r4220;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4224, %r4070, %r4221;
	// end inline asm
	// begin inline asm
	mov.b32 %r4227, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4228, %r4215, %r4227;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4231, %r4078, %r4228;
	// end inline asm
	// begin inline asm
	mov.b32 %r4234, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4235, %r4215, %r4234;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4238, %r4086, %r4235;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4241, %r4217, %r4231, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4245, %r4224, %r4238, %r2325;
	// end inline asm
	shl.b32 	%r4252, %r4245, 4;
	// begin inline asm
	lop3.b32 %r4249, %r2331, %r4241, %r4252, 202;
	// end inline asm
	xor.b32  	%r7895, %r4249, -2004318072;
	st.shared.u32 	[%rd191], %r7892;
	st.shared.u32 	[%rd192], %r7893;
	st.shared.u32 	[%rd193], %r7894;
	st.shared.u32 	[%rd194], %r7895;
	ld.shared.u32 	%r8048, [%rd134];
	ld.shared.u32 	%r8047, [%rd136];
	ld.shared.u32 	%r8042, [%rd138];
	ld.shared.u32 	%r8041, [%rd140];
	// begin inline asm
	mov.b32 %r4258, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4269, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4257, %r8048, -2004318072;
	// begin inline asm
	lop3.b32 %r4255, %r664, %r4257, %r4258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4259, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4260, %r4258, %r4259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4263, %r4255, %r4260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4266, %r675, %r4257, %r4269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4270, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4271, %r4269, %r4270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4274, %r4266, %r4271;
	// end inline asm
	shr.u32 	%r4279, %r4257, 8;
	// begin inline asm
	lop3.b32 %r4277, %r664, %r4279, %r4258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4281, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4282, %r4258, %r4281;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4285, %r4277, %r4282;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4288, %r675, %r4279, %r4269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4292, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4293, %r4269, %r4292;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4296, %r4288, %r4293;
	// end inline asm
	// begin inline asm
	mov.b32 %r4304, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4315, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4303, %r8047, -2004318072;
	// begin inline asm
	lop3.b32 %r4301, %r664, %r4303, %r4304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4305, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4306, %r4304, %r4305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4309, %r4301, %r4306;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4312, %r675, %r4303, %r4315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4316, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4317, %r4315, %r4316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4320, %r4312, %r4317;
	// end inline asm
	shr.u32 	%r4325, %r4303, 8;
	// begin inline asm
	lop3.b32 %r4323, %r664, %r4325, %r4304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4327, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4328, %r4304, %r4327;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4331, %r4323, %r4328;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4334, %r675, %r4325, %r4315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4338, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4339, %r4315, %r4338;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4342, %r4334, %r4339;
	// end inline asm
	// begin inline asm
	mov.b32 %r4350, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4361, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4349, %r8042, -2004318072;
	// begin inline asm
	lop3.b32 %r4347, %r664, %r4349, %r4350, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4351, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4352, %r4350, %r4351;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4355, %r4347, %r4352;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4358, %r675, %r4349, %r4361, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4362, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4363, %r4361, %r4362;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4366, %r4358, %r4363;
	// end inline asm
	shr.u32 	%r4371, %r4349, 8;
	// begin inline asm
	lop3.b32 %r4369, %r664, %r4371, %r4350, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4373, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4374, %r4350, %r4373;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4377, %r4369, %r4374;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4380, %r675, %r4371, %r4361, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4384, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4385, %r4361, %r4384;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4388, %r4380, %r4385;
	// end inline asm
	// begin inline asm
	mov.b32 %r4396, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4407, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4395, %r8041, -2004318072;
	// begin inline asm
	lop3.b32 %r4393, %r664, %r4395, %r4396, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4397, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4398, %r4396, %r4397;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4401, %r4393, %r4398;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4404, %r675, %r4395, %r4407, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4408, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4409, %r4407, %r4408;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4412, %r4404, %r4409;
	// end inline asm
	shr.u32 	%r4417, %r4395, 8;
	// begin inline asm
	lop3.b32 %r4415, %r664, %r4417, %r4396, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4419, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4420, %r4396, %r4419;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4423, %r4415, %r4420;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4426, %r675, %r4417, %r4407, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4430, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4431, %r4407, %r4430;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4434, %r4426, %r4431;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4437, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4439, %r4437, %r4263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4442, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4444, %r4442, %r4274;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4447, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4449, %r4447, %r4285;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4452, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4454, %r4452, %r4296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4457, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4459, %r4457, %r4309;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4462, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4464, %r4462, %r4320;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4467, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4469, %r4467, %r4331;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4472, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4474, %r4472, %r4342;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4477, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4479, %r4477, %r4355;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4482, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4484, %r4482, %r4366;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4487, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4489, %r4487, %r4377;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4492, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4494, %r4492, %r4388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4497, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4499, %r4497, %r4401;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4502, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4504, %r4502, %r4412;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4507, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4509, %r4507, %r4423;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4512, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4514, %r4512, %r4434;
	// end inline asm
	// begin inline asm
	mov.b32 %r4522, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4533, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4519, %r664, %r1457, %r4522, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4523, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4524, %r4522, %r4523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4527, %r4519, %r4524;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4530, %r675, %r1457, %r4533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4534, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4535, %r4533, %r4534;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4538, %r4530, %r4535;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4541, %r664, %r1479, %r4522, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4545, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4546, %r4522, %r4545;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4549, %r4541, %r4546;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4552, %r675, %r1479, %r4533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4556, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4557, %r4533, %r4556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4560, %r4552, %r4557;
	// end inline asm
	// begin inline asm
	mov.b32 %r4568, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4579, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4565, %r664, %r1503, %r4568, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4569, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4570, %r4568, %r4569;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4573, %r4565, %r4570;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4576, %r675, %r1503, %r4579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4580, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4581, %r4579, %r4580;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4584, %r4576, %r4581;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4587, %r664, %r1525, %r4568, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4591, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4592, %r4568, %r4591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4595, %r4587, %r4592;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4598, %r675, %r1525, %r4579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4602, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4603, %r4579, %r4602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4606, %r4598, %r4603;
	// end inline asm
	// begin inline asm
	mov.b32 %r4614, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4625, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4611, %r664, %r1549, %r4614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4615, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4616, %r4614, %r4615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4619, %r4611, %r4616;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4622, %r675, %r1549, %r4625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4626, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4627, %r4625, %r4626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4630, %r4622, %r4627;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4633, %r664, %r1571, %r4614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4637, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4638, %r4614, %r4637;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4641, %r4633, %r4638;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4644, %r675, %r1571, %r4625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4648, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4649, %r4625, %r4648;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4652, %r4644, %r4649;
	// end inline asm
	// begin inline asm
	mov.b32 %r4660, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4671, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4657, %r664, %r1595, %r4660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4661, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4662, %r4660, %r4661;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4665, %r4657, %r4662;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4668, %r675, %r1595, %r4671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4672, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4673, %r4671, %r4672;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4676, %r4668, %r4673;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4679, %r664, %r1617, %r4660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4683, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4684, %r4660, %r4683;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4687, %r4679, %r4684;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4690, %r675, %r1617, %r4671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4694, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4695, %r4671, %r4694;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4698, %r4690, %r4695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4701, %r226, %r4527, %r4439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4705, %r226, %r4538, %r4444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4709, %r226, %r4549, %r4449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4713, %r226, %r4560, %r4454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4717, %r226, %r4573, %r4459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4721, %r226, %r4584, %r4464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4725, %r226, %r4595, %r4469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4729, %r226, %r4606, %r4474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4733, %r226, %r4619, %r4479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4737, %r226, %r4630, %r4484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4741, %r226, %r4641, %r4489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4745, %r226, %r4652, %r4494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4749, %r226, %r4665, %r4499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4753, %r226, %r4676, %r4504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4757, %r226, %r4687, %r4509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4761, %r226, %r4698, %r4514;
	// end inline asm
	// begin inline asm
	mov.b32 %r4770, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4781, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4767, %r664, %r665, %r4770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4772, %r4770, %r4771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4775, %r4767, %r4772;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4778, %r675, %r665, %r4781, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4782, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4783, %r4781, %r4782;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4786, %r4778, %r4783;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4789, %r664, %r687, %r4770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4793, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4794, %r4770, %r4793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4797, %r4789, %r4794;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4800, %r675, %r687, %r4781, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4805, %r4781, %r4804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4808, %r4800, %r4805;
	// end inline asm
	// begin inline asm
	mov.b32 %r4816, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4827, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4813, %r664, %r711, %r4816, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4817, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4818, %r4816, %r4817;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4821, %r4813, %r4818;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4824, %r675, %r711, %r4827, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4828, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4829, %r4827, %r4828;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4832, %r4824, %r4829;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4835, %r664, %r733, %r4816, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4839, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4840, %r4816, %r4839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4843, %r4835, %r4840;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4846, %r675, %r733, %r4827, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4850, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4851, %r4827, %r4850;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4854, %r4846, %r4851;
	// end inline asm
	// begin inline asm
	mov.b32 %r4862, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4873, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4859, %r664, %r757, %r4862, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4863, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4864, %r4862, %r4863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4867, %r4859, %r4864;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4870, %r675, %r757, %r4873, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4874, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4875, %r4873, %r4874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4878, %r4870, %r4875;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4881, %r664, %r779, %r4862, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4885, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4886, %r4862, %r4885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4889, %r4881, %r4886;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4892, %r675, %r779, %r4873, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4896, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4897, %r4873, %r4896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4900, %r4892, %r4897;
	// end inline asm
	// begin inline asm
	mov.b32 %r4908, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4919, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4905, %r664, %r803, %r4908, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4909, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4910, %r4908, %r4909;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4913, %r4905, %r4910;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4916, %r675, %r803, %r4919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4920, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4921, %r4919, %r4920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4924, %r4916, %r4921;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4927, %r664, %r825, %r4908, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4931, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4932, %r4908, %r4931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4935, %r4927, %r4932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4938, %r675, %r825, %r4919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4942, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4943, %r4919, %r4942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4946, %r4938, %r4943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4949, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4951, %r4949, %r4775, %r4701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4955, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4957, %r4955, %r4786, %r4705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4961, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4963, %r4961, %r4797, %r4709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4967, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4969, %r4967, %r4808, %r4713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4973, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4975, %r4973, %r4821, %r4717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4979, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4981, %r4979, %r4832, %r4721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4985, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4987, %r4985, %r4843, %r4725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4991, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4993, %r4991, %r4854, %r4729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4997, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4999, %r4997, %r4867, %r4733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5003, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5005, %r5003, %r4878, %r4737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5009, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5011, %r5009, %r4889, %r4741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5015, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5017, %r5015, %r4900, %r4745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5021, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5023, %r5021, %r4913, %r4749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5027, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5029, %r5027, %r4924, %r4753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5033, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5035, %r5033, %r4935, %r4757;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5039, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5041, %r5039, %r4946, %r4761;
	// end inline asm
	// begin inline asm
	mov.b32 %r5050, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5061, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5047, %r664, %r2461, %r5050, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5051, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5052, %r5050, %r5051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5055, %r5047, %r5052;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5058, %r675, %r2461, %r5061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5062, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5063, %r5061, %r5062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5066, %r5058, %r5063;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5069, %r664, %r2483, %r5050, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5073, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5074, %r5050, %r5073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5077, %r5069, %r5074;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5080, %r675, %r2483, %r5061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5084, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5085, %r5061, %r5084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5088, %r5080, %r5085;
	// end inline asm
	// begin inline asm
	mov.b32 %r5096, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5107, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5093, %r664, %r2507, %r5096, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5097, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5098, %r5096, %r5097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5101, %r5093, %r5098;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5104, %r675, %r2507, %r5107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5108, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5109, %r5107, %r5108;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5112, %r5104, %r5109;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5115, %r664, %r2529, %r5096, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5119, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5120, %r5096, %r5119;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5123, %r5115, %r5120;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5126, %r675, %r2529, %r5107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5130, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5131, %r5107, %r5130;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5134, %r5126, %r5131;
	// end inline asm
	// begin inline asm
	mov.b32 %r5142, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5153, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5139, %r664, %r2553, %r5142, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5143, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5144, %r5142, %r5143;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5147, %r5139, %r5144;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5150, %r675, %r2553, %r5153, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5154, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5155, %r5153, %r5154;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5158, %r5150, %r5155;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5161, %r664, %r2575, %r5142, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5165, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5166, %r5142, %r5165;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5169, %r5161, %r5166;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5172, %r675, %r2575, %r5153, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5176, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5177, %r5153, %r5176;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5180, %r5172, %r5177;
	// end inline asm
	// begin inline asm
	mov.b32 %r5188, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5199, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5185, %r664, %r2599, %r5188, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5189, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5190, %r5188, %r5189;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5193, %r5185, %r5190;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5196, %r675, %r2599, %r5199, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5200, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5201, %r5199, %r5200;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5204, %r5196, %r5201;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5207, %r664, %r2621, %r5188, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5211, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5212, %r5188, %r5211;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5215, %r5207, %r5212;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5218, %r675, %r2621, %r5199, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5222, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5223, %r5199, %r5222;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5226, %r5218, %r5223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5300, %r262, %r5055, %r4951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5297, %r262, %r5066, %r4957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5309, %r262, %r5077, %r4963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5306, %r262, %r5088, %r4969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5318, %r262, %r5101, %r4975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5315, %r262, %r5112, %r4981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5327, %r262, %r5123, %r4987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5324, %r262, %r5134, %r4993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5336, %r262, %r5147, %r4999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5333, %r262, %r5158, %r5005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5345, %r262, %r5169, %r5011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r262, %r5180, %r5017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5354, %r262, %r5193, %r5023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5351, %r262, %r5204, %r5029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5363, %r262, %r5215, %r5035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5360, %r262, %r5226, %r5041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5293, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5295, %r5293, %r5297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5298, %r308, %r5300, %r5295;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5302, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5304, %r5302, %r5306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5307, %r308, %r5309, %r5304;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5311, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5313, %r5311, %r5315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5316, %r308, %r5318, %r5313;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5320, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5322, %r5320, %r5324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5325, %r308, %r5327, %r5322;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5329, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5331, %r5329, %r5333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5334, %r308, %r5336, %r5331;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5338, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5340, %r5338, %r5342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5343, %r308, %r5345, %r5340;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5347, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5349, %r5347, %r5351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5352, %r308, %r5354, %r5349;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5356, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5358, %r5356, %r5360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5361, %r308, %r5363, %r5358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5365, %r311, %r5300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5368, %r308, %r5297, %r5365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5372, %r311, %r5309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5375, %r308, %r5306, %r5372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5379, %r311, %r5318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5382, %r308, %r5315, %r5379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5386, %r311, %r5327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5389, %r308, %r5324, %r5386;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5393, %r311, %r5336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5396, %r308, %r5333, %r5393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5400, %r311, %r5345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5403, %r308, %r5342, %r5400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5407, %r311, %r5354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5410, %r308, %r5351, %r5407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5414, %r311, %r5363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5417, %r308, %r5360, %r5414;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5508, %r5505}, {%r355, %r361, %r358, %r364}, {%r5298, %r5368}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5517, %r5514}, {%r355, %r361, %r358, %r364}, {%r5307, %r5375}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5526, %r5523}, {%r355, %r361, %r358, %r364}, {%r5316, %r5382}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5535, %r5532}, {%r355, %r361, %r358, %r364}, {%r5325, %r5389}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5544, %r5541}, {%r355, %r361, %r358, %r364}, {%r5334, %r5396}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5553, %r5550}, {%r355, %r361, %r358, %r364}, {%r5343, %r5403}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5562, %r5559}, {%r355, %r361, %r358, %r364}, {%r5352, %r5410}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5571, %r5568}, {%r355, %r361, %r358, %r364}, {%r5361, %r5417}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5501, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5503, %r5501, %r5505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5506, %r399, %r5508, %r5503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5510, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5512, %r5510, %r5514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5515, %r399, %r5517, %r5512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5519, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5521, %r5519, %r5523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5524, %r399, %r5526, %r5521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5528, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5530, %r5528, %r5532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5533, %r399, %r5535, %r5530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5537, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5539, %r5537, %r5541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5542, %r399, %r5544, %r5539;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5546, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5548, %r5546, %r5550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5551, %r399, %r5553, %r5548;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5555, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5557, %r5555, %r5559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5560, %r399, %r5562, %r5557;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5564, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5566, %r5564, %r5568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5569, %r399, %r5571, %r5566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5573, %r402, %r5508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5576, %r399, %r5505, %r5573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5580, %r402, %r5517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5583, %r399, %r5514, %r5580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5587, %r402, %r5526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5590, %r399, %r5523, %r5587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5594, %r402, %r5535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5597, %r399, %r5532, %r5594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5601, %r402, %r5544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5604, %r399, %r5541, %r5601;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5608, %r402, %r5553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5611, %r399, %r5550, %r5608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5615, %r402, %r5562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5618, %r399, %r5559, %r5615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5622, %r402, %r5571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5625, %r399, %r5568, %r5622;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5629, %r5630}, {%r433, %r439, %r436, %r442}, {%r5506, %r5576}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5639, %r5640}, {%r433, %r439, %r436, %r442}, {%r5515, %r5583}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5649, %r5650}, {%r433, %r439, %r436, %r442}, {%r5524, %r5590}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5659, %r5660}, {%r433, %r439, %r436, %r442}, {%r5533, %r5597}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5669, %r5670}, {%r433, %r439, %r436, %r442}, {%r5542, %r5604}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5679, %r5680}, {%r433, %r439, %r436, %r442}, {%r5551, %r5611}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5689, %r5690}, {%r433, %r439, %r436, %r442}, {%r5560, %r5618}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5699, %r5700}, {%r433, %r439, %r436, %r442}, {%r5569, %r5625}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5709, %r119, %r5629;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5712, %r119, %r5630;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5715, %r119, %r5639;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5718, %r119, %r5640;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r119, %r5649;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5724, %r119, %r5650;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5727, %r119, %r5659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5730, %r119, %r5660;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5733, %r119, %r5669;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5736, %r119, %r5670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5739, %r119, %r5679;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5742, %r119, %r5680;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5745, %r119, %r5689;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5748, %r119, %r5690;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5751, %r119, %r5699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5754, %r119, %r5700;
	// end inline asm
	// begin inline asm
	mov.b32 %r5757, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5758, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5759, %r5709, %r5757;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5762, %r5759, %r5758;
	// end inline asm
	// begin inline asm
	mov.b32 %r5765, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5766, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5767, %r5712, %r5765;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5770, %r5767, %r5766;
	// end inline asm
	// begin inline asm
	mov.b32 %r5773, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5774, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5775, %r5715, %r5773;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5778, %r5775, %r5774;
	// end inline asm
	// begin inline asm
	mov.b32 %r5781, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5782, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5783, %r5718, %r5781;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5786, %r5783, %r5782;
	// end inline asm
	// begin inline asm
	mov.b32 %r5789, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5790, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5791, %r5721, %r5789;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5794, %r5791, %r5790;
	// end inline asm
	// begin inline asm
	mov.b32 %r5797, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5798, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5799, %r5724, %r5797;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5802, %r5799, %r5798;
	// end inline asm
	// begin inline asm
	mov.b32 %r5805, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5806, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5807, %r5727, %r5805;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5810, %r5807, %r5806;
	// end inline asm
	// begin inline asm
	mov.b32 %r5813, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5814, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5815, %r5730, %r5813;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5818, %r5815, %r5814;
	// end inline asm
	// begin inline asm
	mov.b32 %r5821, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5822, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5823, %r5733, %r5821;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5826, %r5823, %r5822;
	// end inline asm
	// begin inline asm
	mov.b32 %r5829, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5830, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5831, %r5736, %r5829;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5834, %r5831, %r5830;
	// end inline asm
	// begin inline asm
	mov.b32 %r5837, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5838, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5839, %r5739, %r5837;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5842, %r5839, %r5838;
	// end inline asm
	// begin inline asm
	mov.b32 %r5845, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5846, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5847, %r5742, %r5845;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5850, %r5847, %r5846;
	// end inline asm
	// begin inline asm
	mov.b32 %r5853, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5854, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5855, %r5745, %r5853;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5858, %r5855, %r5854;
	// end inline asm
	// begin inline asm
	mov.b32 %r5861, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5862, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5863, %r5748, %r5861;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5866, %r5863, %r5862;
	// end inline asm
	// begin inline asm
	mov.b32 %r5869, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5870, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5871, %r5751, %r5869;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5874, %r5871, %r5870;
	// end inline asm
	// begin inline asm
	mov.b32 %r5877, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5878, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5879, %r5754, %r5877;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5882, %r5879, %r5878;
	// end inline asm
	// begin inline asm
	mov.b32 %r5888, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5887, %r5888, %r5886;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5890, %r5762, %r5887;
	// end inline asm
	// begin inline asm
	mov.b32 %r5893, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5894, %r5888, %r5893;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5897, %r5770, %r5894;
	// end inline asm
	// begin inline asm
	mov.b32 %r5900, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5901, %r5888, %r5900;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5904, %r5778, %r5901;
	// end inline asm
	// begin inline asm
	mov.b32 %r5907, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5908, %r5888, %r5907;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5911, %r5786, %r5908;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5914, %r5890, %r5904, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5918, %r5897, %r5911, %r2325;
	// end inline asm
	shl.b32 	%r5925, %r5918, 4;
	// begin inline asm
	lop3.b32 %r5922, %r2331, %r5914, %r5925, 202;
	// end inline asm
	xor.b32  	%r7896, %r5922, -2004318072;
	// begin inline asm
	mov.b32 %r5929, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5927, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5928, %r5929, %r5927;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5931, %r5794, %r5928;
	// end inline asm
	// begin inline asm
	mov.b32 %r5934, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5935, %r5929, %r5934;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5938, %r5802, %r5935;
	// end inline asm
	// begin inline asm
	mov.b32 %r5941, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5942, %r5929, %r5941;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5945, %r5810, %r5942;
	// end inline asm
	// begin inline asm
	mov.b32 %r5948, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5949, %r5929, %r5948;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5952, %r5818, %r5949;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5955, %r5931, %r5945, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5959, %r5938, %r5952, %r2325;
	// end inline asm
	shl.b32 	%r5966, %r5959, 4;
	// begin inline asm
	lop3.b32 %r5963, %r2331, %r5955, %r5966, 202;
	// end inline asm
	xor.b32  	%r7897, %r5963, -2004318072;
	// begin inline asm
	mov.b32 %r5970, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5968, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5969, %r5970, %r5968;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5972, %r5826, %r5969;
	// end inline asm
	// begin inline asm
	mov.b32 %r5975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5976, %r5970, %r5975;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5979, %r5834, %r5976;
	// end inline asm
	// begin inline asm
	mov.b32 %r5982, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5983, %r5970, %r5982;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5986, %r5842, %r5983;
	// end inline asm
	// begin inline asm
	mov.b32 %r5989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5990, %r5970, %r5989;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5993, %r5850, %r5990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5996, %r5972, %r5986, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6000, %r5979, %r5993, %r2325;
	// end inline asm
	shl.b32 	%r6007, %r6000, 4;
	// begin inline asm
	lop3.b32 %r6004, %r2331, %r5996, %r6007, 202;
	// end inline asm
	xor.b32  	%r7898, %r6004, -2004318072;
	// begin inline asm
	mov.b32 %r6011, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6009, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6010, %r6011, %r6009;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6013, %r5858, %r6010;
	// end inline asm
	// begin inline asm
	mov.b32 %r6016, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6017, %r6011, %r6016;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6020, %r5866, %r6017;
	// end inline asm
	// begin inline asm
	mov.b32 %r6023, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6024, %r6011, %r6023;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6027, %r5874, %r6024;
	// end inline asm
	// begin inline asm
	mov.b32 %r6030, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6031, %r6011, %r6030;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6034, %r5882, %r6031;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6037, %r6013, %r6027, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6041, %r6020, %r6034, %r2325;
	// end inline asm
	shl.b32 	%r6048, %r6041, 4;
	// begin inline asm
	lop3.b32 %r6045, %r2331, %r6037, %r6048, 202;
	// end inline asm
	xor.b32  	%r7899, %r6045, -2004318072;
	st.shared.u32 	[%rd191], %r7896;
	st.shared.u32 	[%rd192], %r7897;
	st.shared.u32 	[%rd193], %r7898;
	st.shared.u32 	[%rd194], %r7899;
	ld.shared.u32 	%r8046, [%rd134];
	ld.shared.u32 	%r8045, [%rd136];
	ld.shared.u32 	%r8040, [%rd138];
	ld.shared.u32 	%r8039, [%rd140];
	// begin inline asm
	mov.b32 %r6054, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6065, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6053, %r8046, -2004318072;
	// begin inline asm
	lop3.b32 %r6051, %r664, %r6053, %r6054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6055, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6056, %r6054, %r6055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6059, %r6051, %r6056;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6062, %r675, %r6053, %r6065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6066, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6067, %r6065, %r6066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6070, %r6062, %r6067;
	// end inline asm
	shr.u32 	%r6075, %r6053, 8;
	// begin inline asm
	lop3.b32 %r6073, %r664, %r6075, %r6054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6077, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6078, %r6054, %r6077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6081, %r6073, %r6078;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6084, %r675, %r6075, %r6065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6088, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6089, %r6065, %r6088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6092, %r6084, %r6089;
	// end inline asm
	// begin inline asm
	mov.b32 %r6100, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6111, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6099, %r8045, -2004318072;
	// begin inline asm
	lop3.b32 %r6097, %r664, %r6099, %r6100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6101, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6102, %r6100, %r6101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6105, %r6097, %r6102;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6108, %r675, %r6099, %r6111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6112, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6113, %r6111, %r6112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6116, %r6108, %r6113;
	// end inline asm
	shr.u32 	%r6121, %r6099, 8;
	// begin inline asm
	lop3.b32 %r6119, %r664, %r6121, %r6100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6123, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6124, %r6100, %r6123;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6127, %r6119, %r6124;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6130, %r675, %r6121, %r6111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6134, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6135, %r6111, %r6134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6138, %r6130, %r6135;
	// end inline asm
	// begin inline asm
	mov.b32 %r6146, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6157, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6145, %r8040, -2004318072;
	// begin inline asm
	lop3.b32 %r6143, %r664, %r6145, %r6146, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6147, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6148, %r6146, %r6147;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6151, %r6143, %r6148;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6154, %r675, %r6145, %r6157, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6158, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6159, %r6157, %r6158;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6162, %r6154, %r6159;
	// end inline asm
	shr.u32 	%r6167, %r6145, 8;
	// begin inline asm
	lop3.b32 %r6165, %r664, %r6167, %r6146, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6169, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6170, %r6146, %r6169;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6173, %r6165, %r6170;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6176, %r675, %r6167, %r6157, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6180, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6181, %r6157, %r6180;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6184, %r6176, %r6181;
	// end inline asm
	// begin inline asm
	mov.b32 %r6192, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6203, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6191, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r6189, %r664, %r6191, %r6192, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6193, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6194, %r6192, %r6193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6197, %r6189, %r6194;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6200, %r675, %r6191, %r6203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6204, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6205, %r6203, %r6204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6208, %r6200, %r6205;
	// end inline asm
	shr.u32 	%r6213, %r6191, 8;
	// begin inline asm
	lop3.b32 %r6211, %r664, %r6213, %r6192, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6215, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6216, %r6192, %r6215;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6219, %r6211, %r6216;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6222, %r675, %r6213, %r6203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6227, %r6203, %r6226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6230, %r6222, %r6227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6233, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6235, %r6233, %r6059;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6238, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6240, %r6238, %r6070;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6243, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6245, %r6243, %r6081;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6248, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6250, %r6248, %r6092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6253, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6255, %r6253, %r6105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6258, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6260, %r6258, %r6116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6263, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6265, %r6263, %r6127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6268, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6270, %r6268, %r6138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6273, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6275, %r6273, %r6151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6278, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6280, %r6278, %r6162;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6283, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6285, %r6283, %r6173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6288, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6290, %r6288, %r6184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6293, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6295, %r6293, %r6197;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6298, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6300, %r6298, %r6208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6303, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6305, %r6303, %r6219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6308, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6310, %r6308, %r6230;
	// end inline asm
	// begin inline asm
	mov.b32 %r6318, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6329, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6315, %r664, %r665, %r6318, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6319, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6320, %r6318, %r6319;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6323, %r6315, %r6320;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6326, %r675, %r665, %r6329, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6330, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6331, %r6329, %r6330;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6334, %r6326, %r6331;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6337, %r664, %r687, %r6318, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6341, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6342, %r6318, %r6341;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6345, %r6337, %r6342;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6348, %r675, %r687, %r6329, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6352, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6353, %r6329, %r6352;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6356, %r6348, %r6353;
	// end inline asm
	// begin inline asm
	mov.b32 %r6364, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6375, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6361, %r664, %r711, %r6364, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6365, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6366, %r6364, %r6365;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6369, %r6361, %r6366;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6372, %r675, %r711, %r6375, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6376, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6377, %r6375, %r6376;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6380, %r6372, %r6377;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6383, %r664, %r733, %r6364, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6387, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6388, %r6364, %r6387;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6391, %r6383, %r6388;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6394, %r675, %r733, %r6375, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6398, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6399, %r6375, %r6398;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6402, %r6394, %r6399;
	// end inline asm
	// begin inline asm
	mov.b32 %r6410, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6421, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6407, %r664, %r757, %r6410, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6411, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6412, %r6410, %r6411;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6415, %r6407, %r6412;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6418, %r675, %r757, %r6421, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6422, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6423, %r6421, %r6422;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6426, %r6418, %r6423;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6429, %r664, %r779, %r6410, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6433, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6434, %r6410, %r6433;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6437, %r6429, %r6434;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6440, %r675, %r779, %r6421, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6444, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6445, %r6421, %r6444;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6448, %r6440, %r6445;
	// end inline asm
	// begin inline asm
	mov.b32 %r6456, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6467, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6453, %r664, %r803, %r6456, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6457, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6458, %r6456, %r6457;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6461, %r6453, %r6458;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6464, %r675, %r803, %r6467, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6468, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6469, %r6467, %r6468;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6472, %r6464, %r6469;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6475, %r664, %r825, %r6456, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6479, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6480, %r6456, %r6479;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6483, %r6475, %r6480;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6486, %r675, %r825, %r6467, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6490, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6491, %r6467, %r6490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6494, %r6486, %r6491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6497, %r226, %r6323, %r6235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6501, %r226, %r6334, %r6240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6505, %r226, %r6345, %r6245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6509, %r226, %r6356, %r6250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6513, %r226, %r6369, %r6255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6517, %r226, %r6380, %r6260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6521, %r226, %r6391, %r6265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6525, %r226, %r6402, %r6270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6529, %r226, %r6415, %r6275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6533, %r226, %r6426, %r6280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6537, %r226, %r6437, %r6285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6541, %r226, %r6448, %r6290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6545, %r226, %r6461, %r6295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6549, %r226, %r6472, %r6300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6553, %r226, %r6483, %r6305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6557, %r226, %r6494, %r6310;
	// end inline asm
	// begin inline asm
	mov.b32 %r6566, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6577, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6563, %r664, %r2461, %r6566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6567, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6568, %r6566, %r6567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6571, %r6563, %r6568;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6574, %r675, %r2461, %r6577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6578, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6579, %r6577, %r6578;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6582, %r6574, %r6579;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6585, %r664, %r2483, %r6566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6589, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6590, %r6566, %r6589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6593, %r6585, %r6590;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6596, %r675, %r2483, %r6577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6600, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6601, %r6577, %r6600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6604, %r6596, %r6601;
	// end inline asm
	// begin inline asm
	mov.b32 %r6612, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6623, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6609, %r664, %r2507, %r6612, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6613, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6614, %r6612, %r6613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6617, %r6609, %r6614;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6620, %r675, %r2507, %r6623, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6624, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6625, %r6623, %r6624;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6628, %r6620, %r6625;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6631, %r664, %r2529, %r6612, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6635, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6636, %r6612, %r6635;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6639, %r6631, %r6636;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6642, %r675, %r2529, %r6623, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6646, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6647, %r6623, %r6646;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6650, %r6642, %r6647;
	// end inline asm
	// begin inline asm
	mov.b32 %r6658, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6669, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6655, %r664, %r2553, %r6658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6659, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6660, %r6658, %r6659;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6663, %r6655, %r6660;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6666, %r675, %r2553, %r6669, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6670, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6671, %r6669, %r6670;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6674, %r6666, %r6671;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6677, %r664, %r2575, %r6658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6681, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6682, %r6658, %r6681;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6685, %r6677, %r6682;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6688, %r675, %r2575, %r6669, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6692, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6693, %r6669, %r6692;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6696, %r6688, %r6693;
	// end inline asm
	// begin inline asm
	mov.b32 %r6704, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6715, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6701, %r664, %r2599, %r6704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6705, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6706, %r6704, %r6705;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6709, %r6701, %r6706;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6712, %r675, %r2599, %r6715, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6716, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6717, %r6715, %r6716;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6720, %r6712, %r6717;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6723, %r664, %r2621, %r6704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6727, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6728, %r6704, %r6727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6731, %r6723, %r6728;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6734, %r675, %r2621, %r6715, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6739, %r6715, %r6738;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6742, %r6734, %r6739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6745, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6747, %r6745, %r6571, %r6497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6751, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6753, %r6751, %r6582, %r6501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6757, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6759, %r6757, %r6593, %r6505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6763, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6765, %r6763, %r6604, %r6509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6769, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6771, %r6769, %r6617, %r6513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6775, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6777, %r6775, %r6628, %r6517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6781, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6783, %r6781, %r6639, %r6521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6787, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6789, %r6787, %r6650, %r6525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6793, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6795, %r6793, %r6663, %r6529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6799, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6801, %r6799, %r6674, %r6533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6805, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6807, %r6805, %r6685, %r6537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6811, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6813, %r6811, %r6696, %r6541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6817, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6819, %r6817, %r6709, %r6545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6823, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6825, %r6823, %r6720, %r6549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6829, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6831, %r6829, %r6731, %r6553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6835, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6837, %r6835, %r6742, %r6557;
	// end inline asm
	// begin inline asm
	mov.b32 %r6846, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6857, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6843, %r664, %r4257, %r6846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6847, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6848, %r6846, %r6847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6851, %r6843, %r6848;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6854, %r675, %r4257, %r6857, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6858, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6859, %r6857, %r6858;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6862, %r6854, %r6859;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6865, %r664, %r4279, %r6846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6869, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6870, %r6846, %r6869;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6873, %r6865, %r6870;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6876, %r675, %r4279, %r6857, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6880, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6881, %r6857, %r6880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6884, %r6876, %r6881;
	// end inline asm
	// begin inline asm
	mov.b32 %r6892, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6903, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6889, %r664, %r4303, %r6892, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6893, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6894, %r6892, %r6893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6897, %r6889, %r6894;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6900, %r675, %r4303, %r6903, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6904, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6905, %r6903, %r6904;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6908, %r6900, %r6905;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6911, %r664, %r4325, %r6892, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6915, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6916, %r6892, %r6915;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6919, %r6911, %r6916;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6922, %r675, %r4325, %r6903, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6926, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6927, %r6903, %r6926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6930, %r6922, %r6927;
	// end inline asm
	// begin inline asm
	mov.b32 %r6938, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6949, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6935, %r664, %r4349, %r6938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6939, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6940, %r6938, %r6939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6943, %r6935, %r6940;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6946, %r675, %r4349, %r6949, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6950, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6951, %r6949, %r6950;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6954, %r6946, %r6951;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6957, %r664, %r4371, %r6938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6961, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6962, %r6938, %r6961;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6965, %r6957, %r6962;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6968, %r675, %r4371, %r6949, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6972, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6973, %r6949, %r6972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6976, %r6968, %r6973;
	// end inline asm
	// begin inline asm
	mov.b32 %r6984, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6995, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6981, %r664, %r4395, %r6984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6985, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6986, %r6984, %r6985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6989, %r6981, %r6986;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6992, %r675, %r4395, %r6995, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6996, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6997, %r6995, %r6996;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7000, %r6992, %r6997;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7003, %r664, %r4417, %r6984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7007, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7008, %r6984, %r7007;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7011, %r7003, %r7008;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7014, %r675, %r4417, %r6995, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7018, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7019, %r6995, %r7018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7022, %r7014, %r7019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7096, %r262, %r6851, %r6747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7093, %r262, %r6862, %r6753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7105, %r262, %r6873, %r6759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7102, %r262, %r6884, %r6765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7114, %r262, %r6897, %r6771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7111, %r262, %r6908, %r6777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7123, %r262, %r6919, %r6783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7120, %r262, %r6930, %r6789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7132, %r262, %r6943, %r6795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7129, %r262, %r6954, %r6801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7141, %r262, %r6965, %r6807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r262, %r6976, %r6813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7150, %r262, %r6989, %r6819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7147, %r262, %r7000, %r6825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7159, %r262, %r7011, %r6831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7156, %r262, %r7022, %r6837;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7089, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7091, %r7089, %r7093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7094, %r308, %r7096, %r7091;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7098, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7100, %r7098, %r7102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7103, %r308, %r7105, %r7100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7107, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7109, %r7107, %r7111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7112, %r308, %r7114, %r7109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7116, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7118, %r7116, %r7120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7121, %r308, %r7123, %r7118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7125, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7127, %r7125, %r7129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7130, %r308, %r7132, %r7127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7134, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7136, %r7134, %r7138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7139, %r308, %r7141, %r7136;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7143, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7145, %r7143, %r7147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7148, %r308, %r7150, %r7145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7152, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7154, %r7152, %r7156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7157, %r308, %r7159, %r7154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7161, %r311, %r7096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7164, %r308, %r7093, %r7161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7168, %r311, %r7105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7171, %r308, %r7102, %r7168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7175, %r311, %r7114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7178, %r308, %r7111, %r7175;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7182, %r311, %r7123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7185, %r308, %r7120, %r7182;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7189, %r311, %r7132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7192, %r308, %r7129, %r7189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7196, %r311, %r7141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7199, %r308, %r7138, %r7196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7203, %r311, %r7150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7206, %r308, %r7147, %r7203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7210, %r311, %r7159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7213, %r308, %r7156, %r7210;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7304, %r7301}, {%r355, %r361, %r358, %r364}, {%r7094, %r7164}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7313, %r7310}, {%r355, %r361, %r358, %r364}, {%r7103, %r7171}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7322, %r7319}, {%r355, %r361, %r358, %r364}, {%r7112, %r7178}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7331, %r7328}, {%r355, %r361, %r358, %r364}, {%r7121, %r7185}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7340, %r7337}, {%r355, %r361, %r358, %r364}, {%r7130, %r7192}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7349, %r7346}, {%r355, %r361, %r358, %r364}, {%r7139, %r7199}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7358, %r7355}, {%r355, %r361, %r358, %r364}, {%r7148, %r7206}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7367, %r7364}, {%r355, %r361, %r358, %r364}, {%r7157, %r7213}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7297, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7299, %r7297, %r7301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7302, %r399, %r7304, %r7299;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7306, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7308, %r7306, %r7310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7311, %r399, %r7313, %r7308;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7315, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7317, %r7315, %r7319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7320, %r399, %r7322, %r7317;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7324, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7326, %r7324, %r7328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7329, %r399, %r7331, %r7326;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7333, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7335, %r7333, %r7337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7338, %r399, %r7340, %r7335;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7342, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7344, %r7342, %r7346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7347, %r399, %r7349, %r7344;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7351, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7353, %r7351, %r7355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7356, %r399, %r7358, %r7353;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7360, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7362, %r7360, %r7364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7365, %r399, %r7367, %r7362;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7369, %r402, %r7304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7372, %r399, %r7301, %r7369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7376, %r402, %r7313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7379, %r399, %r7310, %r7376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7383, %r402, %r7322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7386, %r399, %r7319, %r7383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7390, %r402, %r7331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7393, %r399, %r7328, %r7390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7397, %r402, %r7340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7400, %r399, %r7337, %r7397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7404, %r402, %r7349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7407, %r399, %r7346, %r7404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7411, %r402, %r7358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7414, %r399, %r7355, %r7411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7418, %r402, %r7367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7421, %r399, %r7364, %r7418;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7425, %r7426}, {%r433, %r439, %r436, %r442}, {%r7302, %r7372}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7435, %r7436}, {%r433, %r439, %r436, %r442}, {%r7311, %r7379}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7445, %r7446}, {%r433, %r439, %r436, %r442}, {%r7320, %r7386}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7455, %r7456}, {%r433, %r439, %r436, %r442}, {%r7329, %r7393}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7465, %r7466}, {%r433, %r439, %r436, %r442}, {%r7338, %r7400}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7475, %r7476}, {%r433, %r439, %r436, %r442}, {%r7347, %r7407}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7485, %r7486}, {%r433, %r439, %r436, %r442}, {%r7356, %r7414}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7495, %r7496}, {%r433, %r439, %r436, %r442}, {%r7365, %r7421}, {%r8005, %r8005};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7505, %r119, %r7425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7508, %r119, %r7426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7511, %r119, %r7435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7514, %r119, %r7436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r119, %r7445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7520, %r119, %r7446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7523, %r119, %r7455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7526, %r119, %r7456;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7529, %r119, %r7465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7532, %r119, %r7466;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7535, %r119, %r7475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7538, %r119, %r7476;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7541, %r119, %r7485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7544, %r119, %r7486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7547, %r119, %r7495;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7550, %r119, %r7496;
	// end inline asm
	// begin inline asm
	mov.b32 %r7553, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7554, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7555, %r7505, %r7553;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7558, %r7555, %r7554;
	// end inline asm
	// begin inline asm
	mov.b32 %r7561, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7562, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7563, %r7508, %r7561;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7566, %r7563, %r7562;
	// end inline asm
	// begin inline asm
	mov.b32 %r7569, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7570, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7571, %r7511, %r7569;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7574, %r7571, %r7570;
	// end inline asm
	// begin inline asm
	mov.b32 %r7577, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7578, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7579, %r7514, %r7577;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7582, %r7579, %r7578;
	// end inline asm
	// begin inline asm
	mov.b32 %r7585, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7586, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7587, %r7517, %r7585;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7590, %r7587, %r7586;
	// end inline asm
	// begin inline asm
	mov.b32 %r7593, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7594, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7595, %r7520, %r7593;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7598, %r7595, %r7594;
	// end inline asm
	// begin inline asm
	mov.b32 %r7601, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7602, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7603, %r7523, %r7601;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7606, %r7603, %r7602;
	// end inline asm
	// begin inline asm
	mov.b32 %r7609, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7610, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7611, %r7526, %r7609;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7614, %r7611, %r7610;
	// end inline asm
	// begin inline asm
	mov.b32 %r7617, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7618, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7619, %r7529, %r7617;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7622, %r7619, %r7618;
	// end inline asm
	// begin inline asm
	mov.b32 %r7625, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7626, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7627, %r7532, %r7625;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7630, %r7627, %r7626;
	// end inline asm
	// begin inline asm
	mov.b32 %r7633, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7634, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7635, %r7535, %r7633;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7638, %r7635, %r7634;
	// end inline asm
	// begin inline asm
	mov.b32 %r7641, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7642, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7643, %r7538, %r7641;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7646, %r7643, %r7642;
	// end inline asm
	// begin inline asm
	mov.b32 %r7649, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7650, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7651, %r7541, %r7649;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7654, %r7651, %r7650;
	// end inline asm
	// begin inline asm
	mov.b32 %r7657, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7658, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7659, %r7544, %r7657;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7662, %r7659, %r7658;
	// end inline asm
	// begin inline asm
	mov.b32 %r7665, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7666, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7667, %r7547, %r7665;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7670, %r7667, %r7666;
	// end inline asm
	// begin inline asm
	mov.b32 %r7673, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7674, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7675, %r7550, %r7673;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7678, %r7675, %r7674;
	// end inline asm
	// begin inline asm
	mov.b32 %r7684, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7682, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7683, %r7684, %r7682;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7686, %r7558, %r7683;
	// end inline asm
	// begin inline asm
	mov.b32 %r7689, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7690, %r7684, %r7689;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7693, %r7566, %r7690;
	// end inline asm
	// begin inline asm
	mov.b32 %r7696, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7697, %r7684, %r7696;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7700, %r7574, %r7697;
	// end inline asm
	// begin inline asm
	mov.b32 %r7703, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7704, %r7684, %r7703;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7707, %r7582, %r7704;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7710, %r7686, %r7700, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7714, %r7693, %r7707, %r2325;
	// end inline asm
	shl.b32 	%r7721, %r7714, 4;
	// begin inline asm
	lop3.b32 %r7718, %r2331, %r7710, %r7721, 202;
	// end inline asm
	xor.b32  	%r7900, %r7718, -2004318072;
	// begin inline asm
	mov.b32 %r7725, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7723, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7724, %r7725, %r7723;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7727, %r7590, %r7724;
	// end inline asm
	// begin inline asm
	mov.b32 %r7730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7731, %r7725, %r7730;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7734, %r7598, %r7731;
	// end inline asm
	// begin inline asm
	mov.b32 %r7737, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7738, %r7725, %r7737;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7741, %r7606, %r7738;
	// end inline asm
	// begin inline asm
	mov.b32 %r7744, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7745, %r7725, %r7744;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7748, %r7614, %r7745;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7751, %r7727, %r7741, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7755, %r7734, %r7748, %r2325;
	// end inline asm
	shl.b32 	%r7762, %r7755, 4;
	// begin inline asm
	lop3.b32 %r7759, %r2331, %r7751, %r7762, 202;
	// end inline asm
	xor.b32  	%r7901, %r7759, -2004318072;
	// begin inline asm
	mov.b32 %r7766, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7764, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7765, %r7766, %r7764;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7768, %r7622, %r7765;
	// end inline asm
	// begin inline asm
	mov.b32 %r7771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7772, %r7766, %r7771;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7775, %r7630, %r7772;
	// end inline asm
	// begin inline asm
	mov.b32 %r7778, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7779, %r7766, %r7778;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7782, %r7638, %r7779;
	// end inline asm
	// begin inline asm
	mov.b32 %r7785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7786, %r7766, %r7785;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7789, %r7646, %r7786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7792, %r7768, %r7782, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7796, %r7775, %r7789, %r2325;
	// end inline asm
	shl.b32 	%r7803, %r7796, 4;
	// begin inline asm
	lop3.b32 %r7800, %r2331, %r7792, %r7803, 202;
	// end inline asm
	xor.b32  	%r7902, %r7800, -2004318072;
	// begin inline asm
	mov.b32 %r7807, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7805, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7806, %r7807, %r7805;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7809, %r7654, %r7806;
	// end inline asm
	// begin inline asm
	mov.b32 %r7812, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7813, %r7807, %r7812;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7816, %r7662, %r7813;
	// end inline asm
	// begin inline asm
	mov.b32 %r7819, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7820, %r7807, %r7819;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7823, %r7670, %r7820;
	// end inline asm
	// begin inline asm
	mov.b32 %r7826, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7827, %r7807, %r7826;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7830, %r7678, %r7827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7833, %r7809, %r7823, %r2325;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7837, %r7816, %r7830, %r2325;
	// end inline asm
	shl.b32 	%r7844, %r7837, 4;
	// begin inline asm
	lop3.b32 %r7841, %r2331, %r7833, %r7844, 202;
	// end inline asm
	xor.b32  	%r7903, %r7841, -2004318072;
	st.shared.u32 	[%rd191], %r7900;
	st.shared.u32 	[%rd192], %r7901;
	st.shared.u32 	[%rd193], %r7902;
	st.shared.u32 	[%rd194], %r7903;
	add.s32 	%r8038, %r8038, 64;
	add.s64 	%rd194, %rd194, 8324;
	add.s64 	%rd193, %rd193, 8324;
	add.s64 	%rd192, %rd192, 8324;
	add.s64 	%rd191, %rd191, 8324;
	add.s32 	%r8037, %r8037, 1;
	setp.eq.s32 	%p238, %r8038, 256;
	@%p238 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit16936
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7909, [%rd5];
	ld.shared.u32 	%r7910, [%rd6+128];
	ld.shared.u32 	%r7917, [%rd7+4];
	ld.shared.u32 	%r7918, [%rd7+132];
	ld.shared.u32 	%r7925, [%rd5+8324];
	ld.shared.u32 	%r7926, [%rd6+8452];
	ld.shared.u32 	%r7933, [%rd7+8328];
	ld.shared.u32 	%r7934, [%rd7+8456];
	ld.shared.u32 	%r7941, [%rd5+16648];
	ld.shared.u32 	%r7942, [%rd6+16776];
	ld.shared.u32 	%r7949, [%rd7+16652];
	ld.shared.u32 	%r7950, [%rd7+16780];
	ld.shared.u32 	%r7957, [%rd5+24972];
	ld.shared.u32 	%r7958, [%rd6+25100];
	ld.shared.u32 	%r7965, [%rd7+24976];
	ld.shared.u32 	%r7966, [%rd7+25104];
	// begin inline asm
	prmt.b32 %r7904, %r7909, %r7910, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7908, %r7909, %r7910, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7912, %r7917, %r7918, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7916, %r7917, %r7918, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7920, %r7925, %r7926, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7924, %r7925, %r7926, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7928, %r7933, %r7934, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7932, %r7933, %r7934, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7936, %r7941, %r7942, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7940, %r7941, %r7942, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7944, %r7949, %r7950, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7948, %r7949, %r7950, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7952, %r7957, %r7958, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7956, %r7957, %r7958, %r578;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7960, %r7965, %r7966, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7964, %r7965, %r7966, %r578;
	// end inline asm
	selp.b32 	%r7968, %r7908, %r7904, %p225;
	shfl.sync.bfly.b32	%r172, %r7968, 8, 31, -1;
	selp.b32 	%r7969, %r7916, %r7912, %p225;
	shfl.sync.bfly.b32	%r173, %r7969, 8, 31, -1;
	selp.b32 	%r7970, %r7924, %r7920, %p225;
	shfl.sync.bfly.b32	%r7971, %r7970, 8, 31, -1;
	selp.b32 	%r7972, %r7932, %r7928, %p225;
	shfl.sync.bfly.b32	%r7973, %r7972, 8, 31, -1;
	selp.b32 	%r7974, %r7940, %r7936, %p225;
	shfl.sync.bfly.b32	%r7975, %r7974, 8, 31, -1;
	selp.b32 	%r7976, %r7948, %r7944, %p225;
	shfl.sync.bfly.b32	%r7977, %r7976, 8, 31, -1;
	selp.b32 	%r7978, %r7956, %r7952, %p225;
	shfl.sync.bfly.b32	%r7979, %r7978, 8, 31, -1;
	selp.b32 	%r7980, %r7964, %r7960, %p225;
	shfl.sync.bfly.b32	%r7981, %r7980, 8, 31, -1;
	and.b32  	%r186, %r110, 256;
	setp.eq.s32 	%p240, %r186, 0;
	shl.b32 	%r8006, %r110, 12;
	@%p240 bra 	$L__BB0_133;
// %bb.132:                             // %pass16086
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7982, %r173, %r7916, %p225;
	selp.b32 	%r7983, %r7912, %r173, %p225;
	selp.b32 	%r7984, %r172, %r7908, %p225;
	selp.b32 	%r7985, %r7904, %r172, %p225;
	or.b32  	%r7987, %r8006, %r87;
	or.b32  	%r7988, %r7987, %r88;
	or.b32  	%r7989, %r97, %r7988;
	cvt.u64.u32 	%rd141, %r7989;
	add.s64 	%rd142, %rd141, %rd8;
	shr.u64 	%rd143, %rd142, 35;
	add.s64 	%rd144, %rd142, %rd143;
	shr.s64 	%rd145, %rd144, 29;
	setp.lt.s64 	%p242, %rd142, 0;
	and.b64  	%rd146, %rd144, -536870912;
	setp.ne.s64 	%p243, %rd146, %rd142;
	and.pred  	%p244, %p242, %p243;
	selp.u64 	%rd147, 1, 0, %p244;
	sub.s64 	%rd148, %rd147, %rd145;
	shl.b64 	%rd149, %rd148, 29;
	add.s64 	%rd150, %rd149, %rd142;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd152, %rd3, %rd151;
	st.global.v4.u32 	[%rd152], {%r7985, %r7983, %r7984, %r7982};
$L__BB0_133:                            // %pass16156
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7990, %r186, 64;
	setp.gt.u32 	%p245, %r7990, 191;
	@%p245 bra 	$L__BB0_150;
// %bb.134:                             // %pass16156.pass16249_crit_edge
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7996, %r8006, %r87;
	or.b32  	%r8051, %r7996, %r88;
	bra.uni 	$L__BB0_151;
$L__BB0_150:                            // %pass16179
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r174, %r7920, %r7971, %p225;
	selp.b32 	%r175, %r7971, %r7924, %p225;
	selp.b32 	%r176, %r7928, %r7973, %p225;
	selp.b32 	%r177, %r7973, %r7932, %p225;
	or.b32  	%r7992, %r8006, %r87;
	or.b32  	%r8051, %r7992, %r88;
	or.b32  	%r7993, %r8051, %r97;
	or.b32  	%r7994, %r7993, 262144;
	cvt.s64.s32 	%rd153, %r7994;
	add.s64 	%rd154, %rd153, %rd8;
	shr.u64 	%rd155, %rd154, 35;
	add.s64 	%rd156, %rd154, %rd155;
	shr.s64 	%rd157, %rd156, 29;
	setp.lt.s64 	%p246, %rd154, 0;
	and.b64  	%rd158, %rd156, -536870912;
	setp.ne.s64 	%p247, %rd158, %rd154;
	and.pred  	%p248, %p246, %p247;
	selp.u64 	%rd159, 1, 0, %p248;
	sub.s64 	%rd160, %rd159, %rd157;
	shl.b64 	%rd161, %rd160, 29;
	add.s64 	%rd162, %rd161, %rd154;
	shl.b64 	%rd163, %rd162, 2;
	add.s64 	%rd164, %rd3, %rd163;
	st.global.v4.u32 	[%rd164], {%r174, %r176, %r175, %r177};
$L__BB0_151:                            // %pass16249
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r182, %r7952, %r7979, %p225;
	selp.b32 	%r183, %r7979, %r7956, %p225;
	selp.b32 	%r184, %r7960, %r7981, %p225;
	selp.b32 	%r185, %r7981, %r7964, %p225;
	or.b32  	%r7997, %r186, 128;
	setp.lt.u32 	%p249, %r7997, 192;
	or.b32  	%r8007, %r8051, %r97;
	@%p249 bra 	$L__BB0_153;
// %bb.152:                             // %pass16272
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r178, %r7936, %r7975, %p225;
	selp.b32 	%r179, %r7975, %r7940, %p225;
	selp.b32 	%r180, %r7944, %r7977, %p225;
	selp.b32 	%r181, %r7977, %r7948, %p225;
	or.b32  	%r7999, %r8007, 524288;
	cvt.s64.s32 	%rd165, %r7999;
	add.s64 	%rd166, %rd165, %rd8;
	shr.u64 	%rd167, %rd166, 35;
	add.s64 	%rd168, %rd166, %rd167;
	shr.s64 	%rd169, %rd168, 29;
	setp.lt.s64 	%p250, %rd166, 0;
	and.b64  	%rd170, %rd168, -536870912;
	setp.ne.s64 	%p251, %rd170, %rd166;
	and.pred  	%p252, %p250, %p251;
	selp.u64 	%rd171, 1, 0, %p252;
	sub.s64 	%rd172, %rd171, %rd169;
	shl.b64 	%rd173, %rd172, 29;
	add.s64 	%rd174, %rd173, %rd166;
	shl.b64 	%rd175, %rd174, 2;
	add.s64 	%rd176, %rd3, %rd175;
	st.global.v4.u32 	[%rd176], {%r178, %r180, %r179, %r181};
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L38264
	st.global.u32 	[%rd4], %r8005;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r8004, 2;
	st.global.u32 	[%rd4], %r8004;
	mov.u64 	%rd189, exception3325;
	cvta.global.u64 	%rd190, %rd189;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd190;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd62, exception1;
	cvta.global.u64 	%rd63, %rd62;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd63;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L38363
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11272, 
	(
	);
	} // callseq 3
	mov.u64 	%rd71, exception1;
	cvta.global.u64 	%rd72, %rd71;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd72;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L38360
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11272, 
	(
	);
	} // callseq 7
	mov.u64 	%rd77, exception1;
	cvta.global.u64 	%rd78, %rd77;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd78;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L38357
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11272, 
	(
	);
	} // callseq 13
	mov.u64 	%rd91, exception1;
	cvta.global.u64 	%rd92, %rd91;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd92;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
