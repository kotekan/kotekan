// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_11281
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11292
(
	.param .align 8 .b8 julia_power_by_squaring_11292_param_0[16],
	.param .b64 julia_power_by_squaring_11292_param_1,
	.param .b64 julia_power_by_squaring_11292_param_2
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3325[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<259>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8044>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<191>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r183, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd40, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r184, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r184, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd57, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd41, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r185, %r4, 9;
	or.b32  	%r186, %r3, %r1;
	or.b32  	%r187, %r186, %r185;
	mul.wide.u32 	%rd63, %r187, 4;
	add.s64 	%rd4, %rd57, %rd63;
	mov.u32 	%r188, 1;
	st.global.u32 	[%rd4], %r188;
	ld.global.u32 	%r5, [%rd41];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd45, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd45];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd49, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd49];
	sub.s32 	%r189, %r6, %r5;
	and.b32  	%r190, %r189, 255;
	setp.ne.s32 	%p6, %r190, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd53, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd53];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 256;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	not.b32 	%r191, %r7;
	add.s32 	%r192, %r191, %r8;
	and.b32  	%r193, %r192, 3;
	setp.eq.s32 	%p12, %r193, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass167
	bfe.u32 	%r119, %r1, 2, 1;
	shr.u32 	%r120, %r1, 4;
	shl.b32 	%r200, %r120, 1;
	shl.b32 	%r201, %r119, 2;
	shl.b32 	%r121, %r1, 3;
	and.b32  	%r202, %r121, 24;
	or.b32  	%r203, %r201, %r202;
	or.b32  	%r204, %r200, %r203;
	bfe.u32 	%r205, %r1, 3, 1;
	or.b32  	%r123, %r205, %r204;
	or.b32  	%r124, %r123, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r123;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L572
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L575
	cvt.rn.f32.s32 	%f217, %r124;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L592
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L595
	or.b32  	%r223, %r123, 64;
	or.b32  	%r10, %r123, 96;
	cvt.rn.f32.s32 	%f252, %r223;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L674
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L677
	and.b32  	%r109, %r1, 16;
	shl.b32 	%r115, %r4, 6;
	cvt.rn.f32.s32 	%f286, %r10;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L694
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L697
	shl.b32 	%r110, %r1, 1;
	and.b32  	%r116, %r1, 2;
	or.b32  	%r194, %r115, %r109;
	or.b32  	%r241, %r123, 128;
	or.b32  	%r12, %r123, 160;
	cvt.rn.f32.s32 	%f321, %r241;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L776
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L779
	and.b32  	%r111, %r110, 8;
	shl.b32 	%r112, %r1, 2;
	or.b32  	%r195, %r194, %r116;
	cvt.rn.f32.s32 	%f355, %r12;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L796
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L799
	and.b32  	%r113, %r112, 32;
	or.b32  	%r196, %r195, %r111;
	or.b32  	%r259, %r123, 192;
	or.b32  	%r14, %r123, 224;
	cvt.rn.f32.s32 	%f390, %r259;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L878
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L881
	and.b32  	%r114, %r112, 4;
	or.b32  	%r197, %r196, %r113;
	cvt.rn.f32.s32 	%f424, %r14;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L898
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L901
	or.b32  	%r198, %r197, %r114;
	mul.lo.s32 	%r16, %r123, 63;
	cvt.rn.f32.s32 	%f458, %r16;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f884;
	and.b32  	%r277, %r18, 8388607;
	or.b32  	%r8001, %r277, 1065353216;
	mov.b32 	%f883, %r8001;
	add.s32 	%r278, %r18, -1073741824;
	and.b32  	%r8002, %r278, -8388608;
	setp.eq.s32 	%p68, %r8002, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r8002, 192937984;
	add.s32 	%r280, %r8001, %r279;
	mov.b32 	%f470, %r280;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r8002, %r8002, %r279;
	mov.b32 	%r8001, %f883;
	setp.ne.s32 	%p69, %r8002, 0;
	setp.ne.s32 	%p70, %r8001, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r199, %r198, 1;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r281, %f35;
	and.b32  	%r282, %r281, -2147483648;
	mov.b32 	%r283, %f884;
	or.b32  	%r284, %r282, %r283;
	mov.b32 	%f884, %r284;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd64, %r199, 4;
	add.s32 	%r293, %r16, 2016;
	cvt.rn.f32.s32 	%f510, %r293;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f888;
	and.b32  	%r294, %r26, 8388607;
	or.b32  	%r8003, %r294, 1065353216;
	mov.b32 	%f887, %r8003;
	add.s32 	%r295, %r26, -1073741824;
	and.b32  	%r8004, %r295, -8388608;
	setp.eq.s32 	%p88, %r8004, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i897.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i897
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r296, %r8004, 192937984;
	add.s32 	%r297, %r8003, %r296;
	mov.b32 	%f522, %r297;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r8004, %r8004, %r296;
	mov.b32 	%r8003, %f887;
	setp.ne.s32 	%p89, %r8004, 0;
	setp.ne.s32 	%p90, %r8003, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i899
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i876
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i880
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i883
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i902
	add.s64 	%rd65, %rd1, %rd64;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r298, %f54;
	and.b32  	%r299, %r298, -2147483648;
	mov.b32 	%r300, %f888;
	or.b32  	%r301, %r299, %r300;
	mov.b32 	%f888, %r301;
$L__BB0_52:                             // %__nv_fmodf.exit903
	ld.global.u32 	%r117, [%rd65];
	mov.u64 	%rd66, 2;
	mov.u64 	%rd67, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11292, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd68, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd68, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass323
	shr.u32 	%r118, %r1, 1;
	shr.u32 	%r122, %r1, 3;
	and.b32  	%r316, %r1, 3;
	and.b32  	%r317, %r122, 2;
	or.b32  	%r318, %r119, %r317;
	and.b32  	%r319, %r118, 4;
	or.b32  	%r125, %r318, %r319;
	mul.lo.s32 	%r320, %r316, %r125;
	shl.b32 	%r321, %r320, 1;
	neg.s32 	%r322, %r321;
	cvt.rn.f32.s32 	%f156, %r322;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r36, %f904;
	and.b32  	%r323, %r36, 8388607;
	or.b32  	%r8005, %r323, 1065353216;
	mov.b32 	%f891, %r8005;
	add.s32 	%r324, %r36, -1073741824;
	and.b32  	%r8006, %r324, -8388608;
	setp.eq.s32 	%p109, %r8006, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i928.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i928
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r325, %r8006, 192937984;
	add.s32 	%r326, %r8005, %r325;
	mov.b32 	%f575, %r326;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r8006, %r8006, %r325;
	mov.b32 	%r8005, %f891;
	setp.ne.s32 	%p110, %r8006, 0;
	setp.ne.s32 	%p111, %r8005, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i930
	setp.gt.u32 	%p113, %r36, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i907
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r35, %f72;
	setp.lt.u32 	%p104, %r35, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r35, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i911
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i914
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i933
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r327, %f157;
	and.b32  	%r43, %r327, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r328, %f892;
	or.b32  	%r329, %r43, %r328;
	mov.b32 	%f892, %r329;
$L__BB0_68:                             // %__nv_fmodf.exit934
	and.b32  	%r338, %r110, 6;
	mov.u32 	%r339, -8;
	sub.s32 	%r340, %r339, %r338;
	mul.lo.s32 	%r341, %r125, %r340;
	cvt.rn.f32.s32 	%f88, %r341;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r45, %f908;
	and.b32  	%r342, %r45, 8388607;
	or.b32  	%r8007, %r342, 1065353216;
	mov.b32 	%f895, %r8007;
	add.s32 	%r343, %r45, -1073741824;
	and.b32  	%r8008, %r343, -8388608;
	setp.eq.s32 	%p129, %r8008, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i959.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i959
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r8008, 192937984;
	add.s32 	%r345, %r8007, %r344;
	mov.b32 	%f626, %r345;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r8008, %r8008, %r344;
	mov.b32 	%r8007, %f895;
	setp.ne.s32 	%p130, %r8008, 0;
	setp.ne.s32 	%p131, %r8007, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i961
	setp.gt.u32 	%p133, %r45, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i938
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r44, %f92;
	setp.lt.u32 	%p124, %r44, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r44, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i942
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i945
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i964
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r346, %f89;
	and.b32  	%r52, %r346, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r347, %f896;
	or.b32  	%r348, %r52, %r347;
	mov.b32 	%f896, %r348;
$L__BB0_82:                             // %__nv_fmodf.exit965
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11292, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd74, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd74, 64;
	@%p142 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_83;
$L__BB0_133:                            // %pass400
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11292, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd80, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd80;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_145;
// %bb.134:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_135;
$L__BB0_141:
	mov.b32 	%r127, %f912;
	and.b32  	%r369, %r127, 8388607;
	or.b32  	%r8028, %r369, 1065353216;
	mov.b32 	%f911, %r8028;
	add.s32 	%r370, %r127, -1073741824;
	and.b32  	%r8029, %r370, -8388608;
	setp.eq.s32 	%p150, %r8029, 0;
	@%p150 bra 	$L__BB0_144;
// %bb.142:                             // %__nv_fmaf_rn.exit4.i.i.i1083.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_143:                            // %__nv_fmaf_rn.exit4.i.i.i1083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r8029, 192937984;
	add.s32 	%r372, %r8028, %r371;
	mov.b32 	%f679, %r372;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8029, %r8029, %r371;
	mov.b32 	%r8028, %f911;
	setp.ne.s32 	%p151, %r8029, 0;
	setp.ne.s32 	%p152, %r8028, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_143;
$L__BB0_144:                            // %__internal_fmodf_slowpath_mod.exit.i.i1085
	setp.gt.u32 	%p154, %r127, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_145;
$L__BB0_135:                            // %__nv_fast_fdividef.exit.i.i.i1062
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r126, %f162;
	setp.lt.u32 	%p145, %r126, 1073741824;
	@%p145 bra 	$L__BB0_140;
// %bb.136:
	setp.lt.u32 	%p146, %r126, -2147483647;
	@%p146 bra 	$L__BB0_138;
// %bb.137:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_140;
$L__BB0_138:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_140;
// %bb.139:                             // %__nv_fmaf_rn.exit.i.i.i1066
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_140:                            // %__internal_fmodf_fastpath_quot.exit.i.i1069
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_145:                            // %__internal_fmodf_kernel.exit.i1088
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_147;
// %bb.146:
	mov.b32 	%r373, %f159;
	and.b32  	%r374, %r373, -2147483648;
	mov.b32 	%r375, %f912;
	or.b32  	%r376, %r374, %r375;
	mov.b32 	%f912, %r376;
$L__BB0_147:                            // %__nv_fmodf.exit1089
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11292, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd84, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd84;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r58, %f900;
	and.b32  	%r385, %r58, 8388607;
	or.b32  	%r8009, %r385, 1065353216;
	mov.b32 	%f899, %r8009;
	add.s32 	%r386, %r58, -1073741824;
	and.b32  	%r8010, %r386, -8388608;
	setp.eq.s32 	%p170, %r8010, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i990.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r387, %r8010, 192937984;
	add.s32 	%r388, %r8009, %r387;
	mov.b32 	%f730, %r388;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8010, %r8010, %r387;
	mov.b32 	%r8009, %f899;
	setp.ne.s32 	%p171, %r8010, 0;
	setp.ne.s32 	%p172, %r8009, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i992
	setp.gt.u32 	%p174, %r58, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i969
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p165, %r57, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r57, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i973
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i976
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i995
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r389, %f178;
	and.b32  	%r390, %r389, -2147483648;
	mov.b32 	%r391, %f900;
	or.b32  	%r392, %r390, %r391;
	mov.b32 	%f900, %r392;
$L__BB0_97:                             // %__nv_fmodf.exit996
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11292, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd88, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd88, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass465
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r68, %f904;
	and.b32  	%r407, %r68, 8388607;
	or.b32  	%r8011, %r407, 1065353216;
	mov.b32 	%f903, %r8011;
	add.s32 	%r408, %r68, -1073741824;
	and.b32  	%r8012, %r408, -8388608;
	setp.eq.s32 	%p191, %r8012, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i1021.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i1021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r409, %r8012, 192937984;
	add.s32 	%r410, %r8011, %r409;
	mov.b32 	%f782, %r410;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8012, %r8012, %r409;
	mov.b32 	%r8011, %f903;
	setp.ne.s32 	%p192, %r8012, 0;
	setp.ne.s32 	%p193, %r8011, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i1023
	setp.gt.u32 	%p195, %r68, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i1000
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r67, %f122;
	setp.lt.u32 	%p186, %r67, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r67, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i1004
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i1007
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i1026
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r411, %f904;
	or.b32  	%r412, %r43, %r411;
	mov.b32 	%f904, %r412;
$L__BB0_113:                            // %__nv_fmodf.exit1027
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r76, %f908;
	and.b32  	%r421, %r76, 8388607;
	or.b32  	%r8013, %r421, 1065353216;
	mov.b32 	%f907, %r8013;
	add.s32 	%r422, %r76, -1073741824;
	and.b32  	%r8014, %r422, -8388608;
	setp.eq.s32 	%p211, %r8014, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1052.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r423, %r8014, 192937984;
	add.s32 	%r424, %r8013, %r423;
	mov.b32 	%f832, %r424;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8014, %r8014, %r423;
	mov.b32 	%r8013, %f907;
	setp.ne.s32 	%p212, %r8014, 0;
	setp.ne.s32 	%p213, %r8013, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1054
	setp.gt.u32 	%p215, %r76, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1031
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r75, %f139;
	setp.lt.u32 	%p206, %r75, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r75, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1035
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1038
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1057
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r425, %f908;
	or.b32  	%r426, %r52, %r425;
	mov.b32 	%f908, %r426;
$L__BB0_127:                            // %__nv_fmodf.exit1058
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r7998, 0;
	@%p224 bra 	$L__BB0_153;
// %bb.128:                             // %L1561.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r206, %f190;
	mov.b32 	%r213, %f224;
	mov.b32 	%r224, %f259;
	mov.b32 	%r231, %f293;
	mov.b32 	%r242, %f328;
	mov.b32 	%r249, %f362;
	mov.b32 	%r260, %f397;
	mov.b32 	%r267, %f431;
	mov.b32 	%r285, %f480;
	mov.b32 	%r308, %f532;
	mov.b32 	%r330, %f585;
	mov.b32 	%r361, %f636;
	and.b32  	%r207, %r206, -2147483648;
	and.b32  	%r214, %r213, -2147483648;
	and.b32  	%r225, %r224, -2147483648;
	and.b32  	%r232, %r231, -2147483648;
	and.b32  	%r243, %r242, -2147483648;
	and.b32  	%r250, %r249, -2147483648;
	and.b32  	%r261, %r260, -2147483648;
	and.b32  	%r268, %r267, -2147483648;
	and.b32  	%r286, %r285, -2147483648;
	and.b32  	%r309, %r308, -2147483648;
	and.b32  	%r331, %r330, -2147483648;
	and.b32  	%r362, %r361, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r208, %r207, 1056964608;
	or.b32  	%r215, %r214, 1056964608;
	or.b32  	%r226, %r225, 1056964608;
	or.b32  	%r233, %r232, 1056964608;
	or.b32  	%r244, %r243, 1056964608;
	or.b32  	%r251, %r250, 1056964608;
	or.b32  	%r262, %r261, 1056964608;
	or.b32  	%r269, %r268, 1056964608;
	or.b32  	%r287, %r286, 1056964608;
	or.b32  	%r310, %r309, 1056964608;
	or.b32  	%r332, %r331, 1056964608;
	or.b32  	%r363, %r362, 1056964608;
	mov.b32 	%r377, %f689;
	mov.b32 	%r399, %f740;
	mov.b32 	%f191, %r208;
	mov.b32 	%f225, %r215;
	mov.b32 	%f260, %r226;
	mov.b32 	%f294, %r233;
	mov.b32 	%f329, %r244;
	mov.b32 	%f363, %r251;
	mov.b32 	%f398, %r262;
	mov.b32 	%f432, %r269;
	mov.b32 	%f481, %r287;
	mov.b32 	%f533, %r310;
	mov.b32 	%f586, %r332;
	mov.b32 	%f637, %r363;
	and.b32  	%r378, %r377, -2147483648;
	and.b32  	%r400, %r399, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r379, %r378, 1056964608;
	or.b32  	%r401, %r400, 1056964608;
	mov.b32 	%r413, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r379;
	mov.b32 	%f741, %r401;
	and.b32  	%r414, %r413, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r415, %r414, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r415;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r209, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r216, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r227, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r234, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r245, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r252, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r263, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r270, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r210, %r209, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r217, %r216, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r228, %r227, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r235, %r234, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r246, %r245, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r253, %r252, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r264, %r263, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r271, %r270, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r288, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r311, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r333, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r364, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r211, %r210, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r218, %r217, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r229, %r228, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r236, %r235, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r247, %r246, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r254, %r253, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r265, %r264, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r272, %r271, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r289, %r288, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r312, %r311, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r334, %r333, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r365, %r364, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r211, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r218, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r229, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r236, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r247, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r254, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r265, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r272, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r289, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r312, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r334, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r365, 1;
	cvt.rzi.s32.f32 	%r380, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r402, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r212, %r210, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r219, %r217, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r230, %r228, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r237, %r235, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r248, %r246, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r255, %r253, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r266, %r264, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r273, %r271, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r290, %r288, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r313, %r311, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r335, %r333, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r366, %r364, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r381, %r380, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r403, %r402, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r212, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r219, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r230, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r237, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r248, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r255, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r266, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r273, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r290, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r291, %r288, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r313, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r314, %r311, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r335, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r336, %r333, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r366, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r367, %r364, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r381, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r403, 1;
	cvt.rzi.s32.f32 	%r416, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r292, %r291, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r315, %r314, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r337, %r336, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r368, %r367, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r382, %r380, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r404, %r402, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r417, %r416, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r292, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r315, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r337, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r368, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r382, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r383, %r380, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r404, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r405, %r402, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r417, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r384, %r383, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r406, %r405, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r418, %r416, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r384, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r406, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r418, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r419, %r416, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.b32 	%r222, %f251;
	mov.b32 	%r221, %f3;
	mov.b32 	%r240, %f320;
	mov.b32 	%r239, %f12;
	mov.b32 	%r258, %f389;
	mov.b32 	%r257, %f21;
	mov.b32 	%r276, %f457;
	mov.b32 	%r275, %f30;
	mov.b32 	%r304, %f563;
	mov.b32 	%r303, %f53;
	mov.b32 	%r307, %f560;
	mov.b32 	%r306, %f52;
	mov.b32 	%r351, %f667;
	mov.b32 	%r350, %f87;
	mov.b32 	%r357, %f664;
	mov.b32 	%r356, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r420, %r419, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r220, %r222, %r221;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r238, %r240, %r239;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r256, %r258, %r257;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r274, %r276, %r275;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r302, %r304, %r303;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r305, %r307, %r306;
	// end inline asm
	xor.b32  	%r354, %r357, -2147483648;
	xor.b32  	%r353, %r356, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r420, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r349, %r351, %r350;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r352, %r354, %r353;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r351, %r350;
	// end inline asm
	mov.b32 	%r395, %f771;
	mov.b32 	%r394, %f177;
	mov.b32 	%r398, %f768;
	mov.b32 	%r397, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r393, %r395, %r394;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r398, %r397;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r439, %f842;
	and.b32  	%r440, %r439, -2147483648;
	or.b32  	%r441, %r440, 1056964608;
	mov.b32 	%f843, %r441;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r442, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r443, %r442, 1;
	setp.eq.b32 	%p219, %r443, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r444, %r442, 2;
	setp.eq.s32 	%p220, %r444, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r445, %r442, 1;
	and.b32  	%r446, %r445, 2;
	setp.eq.s32 	%p221, %r446, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r429, %f873;
	mov.b32 	%r428, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r427, %r429, %r428;
	// end inline asm
	mov.b32 	%r435, %f870;
	xor.b32  	%r432, %r435, -2147483648;
	mov.b32 	%r434, %f136;
	xor.b32  	%r431, %r434, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r430, %r432, %r431;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r429, %r428;
	// end inline asm
	shl.b32 	%r448, %r5, 12;
	shl.b32 	%r449, %r4, 11;
	and.b32  	%r450, %r449, 2048;
	or.b32  	%r451, %r109, %r2;
	or.b32  	%r87, %r451, %r113;
	and.b32  	%r452, %r112, 12;
	and.b32  	%r453, %r112, 16;
	or.b32  	%r454, %r452, %r450;
	or.b32  	%r455, %r454, %r453;
	or.b32  	%r88, %r455, %r448;
	and.b32  	%r89, %r1, 8;
	shl.b32 	%r456, %r1, 4;
	or.b32  	%r457, %r89, %r456;
	shr.u32 	%r458, %r457, 2;
	and.b32  	%r459, %r458, 14;
	or.b32  	%r460, %r459, %r453;
	and.b32  	%r461, %r3, 32;
	shr.u32 	%r462, %r2, 1;
	and.b32  	%r464, %r1, 4;
	or.b32  	%r465, %r464, %r122;
	or.b32  	%r90, %r465, %r202;
	or.b32  	%r91, %r461, %r462;
	or.b32  	%r92, %r91, 8;
	or.b32  	%r93, %r91, 16;
	or.b32  	%r94, %r91, 24;
	or.b32  	%r466, %r114, %r115;
	or.b32  	%r467, %r466, %r111;
	or.b32  	%r468, %r467, %r113;
	or.b32  	%r469, %r468, %r116;
	or.b32  	%r470, %r469, %r109;
	bfe.u32 	%r471, %r470, 1, 5;
	mul.lo.s32 	%r472, %r471, 65;
	add.s32 	%r473, %r472, %r91;
	add.s32 	%r474, %r472, %r92;
	add.s32 	%r475, %r93, %r472;
	add.s32 	%r476, %r94, %r472;
	shl.b32 	%r477, %r2, 1;
	or.b32  	%r478, %r477, %r120;
	mul.lo.s32 	%r479, %r478, 65;
	add.s32 	%r480, %r479, %r453;
	add.s32 	%r481, %r480, %r459;
	mul.wide.u32 	%rd92, %r481, 4;
	mov.u64 	%rd93, shmem;
	add.s64 	%rd5, %rd93, %rd92;
	cvt.u64.u32 	%rd94, %r459;
	cvt.u64.u32 	%rd95, %r479;
	cvt.u64.u32 	%rd96, %r453;
	add.s64 	%rd97, %rd96, %rd95;
	add.s64 	%rd98, %rd97, %rd94;
	shl.b64 	%rd99, %rd98, 2;
	add.s64 	%rd6, %rd93, %rd99;
	shl.b32 	%r482, %r7, 18;
	add.s32 	%r483, %r482, -786432;
	shl.b32 	%r484, %r2, 2;
	or.b32  	%r485, %r115, %r484;
	or.b32  	%r486, %r485, %r122;
	shl.b32 	%r487, %r486, 5;
	and.b32  	%r488, %r112, 28;
	or.b32  	%r95, %r488, %r487;
	cvt.s64.s32 	%rd7, %r483;
	bfe.s32 	%r489, %r2, 1, 1;
	and.b32  	%r490, %r489, 520;
	bfe.s32 	%r491, %r2, 2, 1;
	and.b32  	%r492, %r491, 260;
	and.b32  	%r493, %r2, 1;
	neg.s32 	%r494, %r493;
	and.b32  	%r495, %r494, 1040;
	shr.u32 	%r496, %r2, 3;
	add.s32 	%r497, %r495, %r460;
	add.s32 	%r498, %r497, %r490;
	mad.lo.s32 	%r499, %r120, 65, %r498;
	add.s32 	%r500, %r499, %r492;
	mad.lo.s32 	%r501, %r496, 130, %r500;
	mul.wide.u32 	%rd100, %r501, 4;
	add.s64 	%rd8, %rd93, %rd100;
	add.s32 	%r502, %r501, 32;
	mul.wide.u32 	%rd101, %r502, 4;
	add.s64 	%rd9, %rd93, %rd101;
	add.s32 	%r503, %r501, 1;
	mul.wide.u32 	%rd102, %r503, 4;
	add.s64 	%rd10, %rd93, %rd102;
	add.s32 	%r504, %r501, 33;
	mul.wide.u32 	%rd103, %r504, 4;
	add.s64 	%rd11, %rd93, %rd103;
	add.s32 	%r505, %r501, 2081;
	mul.wide.u32 	%rd104, %r505, 4;
	add.s64 	%rd12, %rd93, %rd104;
	add.s32 	%r506, %r501, 2113;
	mul.wide.u32 	%rd105, %r506, 4;
	add.s64 	%rd13, %rd93, %rd105;
	add.s32 	%r507, %r501, 2082;
	mul.wide.u32 	%rd106, %r507, 4;
	add.s64 	%rd14, %rd93, %rd106;
	add.s32 	%r508, %r501, 2114;
	mul.wide.u32 	%rd107, %r508, 4;
	add.s64 	%rd15, %rd93, %rd107;
	add.s32 	%r509, %r501, 4162;
	mul.wide.u32 	%rd108, %r509, 4;
	add.s64 	%rd16, %rd93, %rd108;
	add.s32 	%r510, %r501, 4194;
	mul.wide.u32 	%rd109, %r510, 4;
	add.s64 	%rd17, %rd93, %rd109;
	add.s32 	%r511, %r501, 4163;
	mul.wide.u32 	%rd110, %r511, 4;
	add.s64 	%rd18, %rd93, %rd110;
	add.s32 	%r512, %r501, 4195;
	mul.wide.u32 	%rd111, %r512, 4;
	add.s64 	%rd19, %rd93, %rd111;
	add.s32 	%r513, %r501, 6243;
	mul.wide.u32 	%rd112, %r513, 4;
	add.s64 	%rd20, %rd93, %rd112;
	add.s32 	%r514, %r501, 6275;
	mul.wide.u32 	%rd113, %r514, 4;
	add.s64 	%rd21, %rd93, %rd113;
	add.s32 	%r515, %r501, 6244;
	mul.wide.u32 	%rd114, %r515, 4;
	add.s64 	%rd22, %rd93, %rd114;
	add.s32 	%r516, %r501, 6276;
	mul.wide.u32 	%rd115, %r516, 4;
	add.s64 	%rd23, %rd93, %rd115;
	mul.wide.u32 	%rd116, %r476, 4;
	add.s64 	%rd24, %rd93, %rd116;
	mul.wide.u32 	%rd117, %r475, 4;
	add.s64 	%rd25, %rd93, %rd117;
	mul.wide.u32 	%rd118, %r474, 4;
	add.s64 	%rd26, %rd93, %rd118;
	mul.wide.u32 	%rd119, %r473, 4;
	add.s64 	%rd27, %rd93, %rd119;
	setp.eq.s32 	%p225, %r89, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8042, %r7998;
	mov.u32 	%r8041, %r7998;
	mov.u32 	%r8040, %r7998;
	mov.u32 	%r8039, %r7998;
	mov.u32 	%r8038, %r7998;
	mov.u32 	%r8037, %r7998;
	mov.u32 	%r8036, %r7998;
	mov.u32 	%r8035, %r7998;
	mov.u32 	%r8034, %r7998;
	mov.u32 	%r8033, %r7998;
	mov.u32 	%r8032, %r7998;
	mov.u32 	%r8031, %r7998;
	mov.u32 	%r108, %r7998;
	bra.uni 	$L__BB0_129;
$L__BB0_152:                            // %pass16391
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7994, %r8000, 786432;
	cvt.s64.s32 	%rd173, %r7994;
	add.s64 	%rd174, %rd173, %rd7;
	shr.u64 	%rd175, %rd174, 39;
	add.s64 	%rd176, %rd174, %rd175;
	shr.s64 	%rd177, %rd176, 25;
	setp.lt.s64 	%p253, %rd174, 0;
	and.b64  	%rd178, %rd176, -33554432;
	setp.ne.s64 	%p254, %rd178, %rd174;
	and.pred  	%p255, %p253, %p254;
	selp.u64 	%rd179, 1, 0, %p255;
	sub.s64 	%rd180, %rd179, %rd177;
	shl.b64 	%rd181, %rd180, 25;
	add.s64 	%rd182, %rd181, %rd174;
	shl.b64 	%rd183, %rd182, 2;
	add.s64 	%rd184, %rd3, %rd183;
	st.global.v4.u32 	[%rd184], {%r178, %r180, %r179, %r181};
	setp.ne.s32 	%p256, %r108, 7936;
	add.s32 	%r108, %r108, 256;
	add.s32 	%r7995, %r108, %r5;
	setp.gt.s32 	%p257, %r6, %r7995;
	and.pred  	%p258, %p256, %p257;
	@%p258 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_153;
$L__BB0_129:                            // %L1561
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	and.b32  	%r582, %r108, 7936;
	or.b32  	%r583, %r87, %r582;
	shl.b32 	%r584, %r583, 12;
	add.s32 	%r585, %r88, %r584;
	shr.s32 	%r586, %r585, 31;
	shr.u32 	%r587, %r586, 7;
	add.s32 	%r588, %r585, %r587;
	shr.s32 	%r589, %r588, 25;
	setp.lt.s32 	%p226, %r585, 0;
	and.b32  	%r590, %r588, -33554432;
	setp.ne.s32 	%p227, %r590, %r585;
	and.pred  	%p228, %p226, %p227;
	selp.u32 	%r591, 1, 0, %p228;
	sub.s32 	%r592, %r591, %r589;
	shl.b32 	%r593, %r592, 25;
	add.s32 	%r594, %r593, %r585;
	mul.wide.s32 	%rd120, %r594, 4;
	add.s64 	%rd121, %rd2, %rd120;
	ld.global.v4.u32 	{%r595, %r596, %r597, %r598}, [%rd121];
	or.b32  	%r599, %r584, 262144;
	add.s32 	%r600, %r88, %r599;
	shr.s32 	%r601, %r600, 31;
	shr.u32 	%r602, %r601, 7;
	add.s32 	%r603, %r600, %r602;
	shr.s32 	%r604, %r603, 25;
	setp.lt.s32 	%p229, %r600, 0;
	and.b32  	%r605, %r603, -33554432;
	setp.ne.s32 	%p230, %r605, %r600;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r606, 1, 0, %p231;
	sub.s32 	%r607, %r606, %r604;
	shl.b32 	%r608, %r607, 25;
	add.s32 	%r609, %r608, %r600;
	mul.wide.s32 	%rd122, %r609, 4;
	add.s64 	%rd123, %rd2, %rd122;
	ld.global.v4.u32 	{%r610, %r611, %r612, %r613}, [%rd123];
	or.b32  	%r614, %r584, 524288;
	add.s32 	%r615, %r88, %r614;
	shr.s32 	%r616, %r615, 31;
	shr.u32 	%r617, %r616, 7;
	add.s32 	%r618, %r615, %r617;
	shr.s32 	%r619, %r618, 25;
	setp.lt.s32 	%p232, %r615, 0;
	and.b32  	%r620, %r618, -33554432;
	setp.ne.s32 	%p233, %r620, %r615;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r621, 1, 0, %p234;
	sub.s32 	%r622, %r621, %r619;
	shl.b32 	%r623, %r622, 25;
	add.s32 	%r624, %r623, %r615;
	mul.wide.s32 	%rd124, %r624, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r625, %r626, %r627, %r628}, [%rd125];
	or.b32  	%r629, %r584, 786432;
	add.s32 	%r630, %r88, %r629;
	shr.s32 	%r631, %r630, 31;
	shr.u32 	%r632, %r631, 7;
	add.s32 	%r633, %r630, %r632;
	shr.s32 	%r634, %r633, 25;
	setp.lt.s32 	%p235, %r630, 0;
	and.b32  	%r635, %r633, -33554432;
	setp.ne.s32 	%p236, %r635, %r630;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r636, 1, 0, %p237;
	sub.s32 	%r637, %r636, %r634;
	shl.b32 	%r638, %r637, 25;
	add.s32 	%r639, %r638, %r630;
	mul.wide.s32 	%rd126, %r639, 4;
	add.s64 	%rd127, %rd2, %rd126;
	ld.global.v4.u32 	{%r640, %r641, %r642, %r643}, [%rd127];
	selp.b32 	%r644, %r597, %r595, %p225;
	shfl.sync.bfly.b32	%r645, %r644, 8, 31, -1;
	selp.b32 	%r518, %r595, %r645, %p225;
	selp.b32 	%r519, %r645, %r597, %p225;
	selp.b32 	%r646, %r598, %r596, %p225;
	shfl.sync.bfly.b32	%r647, %r646, 8, 31, -1;
	selp.b32 	%r526, %r596, %r647, %p225;
	selp.b32 	%r527, %r647, %r598, %p225;
	selp.b32 	%r648, %r612, %r610, %p225;
	shfl.sync.bfly.b32	%r649, %r648, 8, 31, -1;
	selp.b32 	%r534, %r610, %r649, %p225;
	selp.b32 	%r535, %r649, %r612, %p225;
	selp.b32 	%r650, %r613, %r611, %p225;
	shfl.sync.bfly.b32	%r651, %r650, 8, 31, -1;
	selp.b32 	%r542, %r611, %r651, %p225;
	selp.b32 	%r543, %r651, %r613, %p225;
	selp.b32 	%r652, %r627, %r625, %p225;
	shfl.sync.bfly.b32	%r653, %r652, 8, 31, -1;
	selp.b32 	%r550, %r625, %r653, %p225;
	selp.b32 	%r551, %r653, %r627, %p225;
	selp.b32 	%r654, %r628, %r626, %p225;
	shfl.sync.bfly.b32	%r655, %r654, 8, 31, -1;
	selp.b32 	%r558, %r626, %r655, %p225;
	selp.b32 	%r559, %r655, %r628, %p225;
	selp.b32 	%r656, %r642, %r640, %p225;
	shfl.sync.bfly.b32	%r657, %r656, 8, 31, -1;
	selp.b32 	%r566, %r640, %r657, %p225;
	selp.b32 	%r567, %r657, %r642, %p225;
	selp.b32 	%r658, %r643, %r641, %p225;
	shfl.sync.bfly.b32	%r659, %r658, 8, 31, -1;
	selp.b32 	%r574, %r641, %r659, %p225;
	selp.b32 	%r575, %r659, %r643, %p225;
	mov.u32 	%r576, 21520;
	// begin inline asm
	prmt.b32 %r517, %r518, %r519, %r576;
	// end inline asm
	mov.u32 	%r580, 30258;
	// begin inline asm
	prmt.b32 %r521, %r518, %r519, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r526, %r527, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r529, %r526, %r527, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r534, %r535, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r537, %r534, %r535, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r542, %r543, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r545, %r542, %r543, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r549, %r550, %r551, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r553, %r550, %r551, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r557, %r558, %r559, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r561, %r558, %r559, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r565, %r566, %r567, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r569, %r566, %r567, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r573, %r574, %r575, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r577, %r574, %r575, %r580;
	// end inline asm
	st.shared.u32 	[%rd8], %r517;
	st.shared.u32 	[%rd9], %r521;
	st.shared.u32 	[%rd10], %r525;
	st.shared.u32 	[%rd11], %r529;
	st.shared.u32 	[%rd12], %r533;
	st.shared.u32 	[%rd13], %r537;
	st.shared.u32 	[%rd14], %r541;
	st.shared.u32 	[%rd15], %r545;
	st.shared.u32 	[%rd16], %r549;
	st.shared.u32 	[%rd17], %r553;
	st.shared.u32 	[%rd18], %r557;
	st.shared.u32 	[%rd19], %r561;
	st.shared.u32 	[%rd20], %r565;
	st.shared.u32 	[%rd21], %r569;
	st.shared.u32 	[%rd22], %r573;
	st.shared.u32 	[%rd23], %r577;
	bar.sync 	0;
	mov.u64 	%rd187, %rd27;
	mov.u64 	%rd188, %rd26;
	mov.u64 	%rd189, %rd25;
	mov.u64 	%rd190, %rd24;
	mov.u32 	%r8030, %r7998;
$L__BB0_130:                            // %pass5578
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r7844, %r90, %r8030;
	add.s32 	%r7845, %r7844, %r108;
	bfe.s32 	%r7846, %r7845, 1, 1;
	and.b32  	%r7847, %r7846, 520;
	bfe.s32 	%r7848, %r7845, 4, 1;
	and.b32  	%r7849, %r7848, 65;
	bfe.u32 	%r7850, %r7845, 6, 2;
	mul.lo.s32 	%r7851, %r7850, 2081;
	bfe.s32 	%r7852, %r7845, 2, 1;
	and.b32  	%r7853, %r7852, 260;
	and.b32  	%r7854, %r7845, 1;
	neg.s32 	%r7855, %r7854;
	and.b32  	%r7856, %r7855, 1040;
	bfe.s32 	%r7857, %r7845, 3, 1;
	and.b32  	%r7858, %r7857, 130;
	or.b32  	%r7859, %r7856, %r91;
	or.b32  	%r7860, %r7859, %r7847;
	add.s32 	%r7861, %r7860, %r7849;
	add.s32 	%r7862, %r7861, %r7851;
	add.s32 	%r7863, %r7862, %r7853;
	add.s32 	%r7864, %r7863, %r7858;
	mul.wide.u32 	%rd128, %r7864, 4;
	add.s64 	%rd130, %rd93, %rd128;
	ld.shared.u32 	%r7865, [%rd130];
	or.b32  	%r7866, %r7856, %r92;
	add.s32 	%r7867, %r7866, %r7847;
	add.s32 	%r7868, %r7867, %r7849;
	add.s32 	%r7869, %r7868, %r7851;
	add.s32 	%r7870, %r7869, %r7853;
	add.s32 	%r7871, %r7870, %r7858;
	mul.wide.u32 	%rd131, %r7871, 4;
	add.s64 	%rd132, %rd93, %rd131;
	ld.shared.u32 	%r7872, [%rd132];
	add.s32 	%r7873, %r93, %r7856;
	or.b32  	%r7874, %r7873, %r7847;
	add.s32 	%r7875, %r7874, %r7849;
	add.s32 	%r7876, %r7875, %r7851;
	add.s32 	%r7877, %r7876, %r7853;
	add.s32 	%r7878, %r7877, %r7858;
	mul.wide.u32 	%rd133, %r7878, 4;
	add.s64 	%rd134, %rd93, %rd133;
	ld.shared.u32 	%r7879, [%rd134];
	add.s32 	%r7880, %r94, %r7856;
	add.s32 	%r7881, %r7880, %r7847;
	add.s32 	%r7882, %r7881, %r7849;
	add.s32 	%r7883, %r7882, %r7851;
	add.s32 	%r7884, %r7883, %r7853;
	add.s32 	%r7885, %r7884, %r7858;
	mul.wide.u32 	%rd135, %r7885, 4;
	add.s64 	%rd136, %rd93, %rd135;
	ld.shared.u32 	%r7886, [%rd136];
	// begin inline asm
	mov.b32 %r665, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r676, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r664, %r7865, -2004318072;
	mov.u32 	%r663, 983055;
	// begin inline asm
	lop3.b32 %r662, %r663, %r664, %r665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r666, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r667, %r665, %r666;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r670, %r662, %r667;
	// end inline asm
	mov.u32 	%r674, 15728880;
	// begin inline asm
	lop3.b32 %r673, %r674, %r664, %r676, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r677, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r678, %r676, %r677;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r681, %r673, %r678;
	// end inline asm
	shr.u32 	%r686, %r664, 8;
	// begin inline asm
	lop3.b32 %r684, %r663, %r686, %r665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r688, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r689, %r665, %r688;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r692, %r684, %r689;
	// end inline asm
	// begin inline asm
	lop3.b32 %r695, %r674, %r686, %r676, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r699, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r700, %r676, %r699;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r703, %r695, %r700;
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r722, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r710, %r7872, -2004318072;
	// begin inline asm
	lop3.b32 %r708, %r663, %r710, %r711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r712, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r713, %r711, %r712;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r716, %r708, %r713;
	// end inline asm
	// begin inline asm
	lop3.b32 %r719, %r674, %r710, %r722, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r723, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r724, %r722, %r723;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r727, %r719, %r724;
	// end inline asm
	shr.u32 	%r732, %r710, 8;
	// begin inline asm
	lop3.b32 %r730, %r663, %r732, %r711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r734, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r735, %r711, %r734;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r738, %r730, %r735;
	// end inline asm
	// begin inline asm
	lop3.b32 %r741, %r674, %r732, %r722, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r745, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r746, %r722, %r745;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r749, %r741, %r746;
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r756, %r7879, -2004318072;
	// begin inline asm
	lop3.b32 %r754, %r663, %r756, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r758, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r759, %r757, %r758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r762, %r754, %r759;
	// end inline asm
	// begin inline asm
	lop3.b32 %r765, %r674, %r756, %r768, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r769, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r770, %r768, %r769;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r773, %r765, %r770;
	// end inline asm
	shr.u32 	%r778, %r756, 8;
	// begin inline asm
	lop3.b32 %r776, %r663, %r778, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r780, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r781, %r757, %r780;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r784, %r776, %r781;
	// end inline asm
	// begin inline asm
	lop3.b32 %r787, %r674, %r778, %r768, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r791, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r792, %r768, %r791;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r795, %r787, %r792;
	// end inline asm
	// begin inline asm
	mov.b32 %r803, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r814, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r802, %r7886, -2004318072;
	// begin inline asm
	lop3.b32 %r800, %r663, %r802, %r803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r805, %r803, %r804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r808, %r800, %r805;
	// end inline asm
	// begin inline asm
	lop3.b32 %r811, %r674, %r802, %r814, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r815, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r816, %r814, %r815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r819, %r811, %r816;
	// end inline asm
	shr.u32 	%r824, %r802, 8;
	// begin inline asm
	lop3.b32 %r822, %r663, %r824, %r803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r826, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r827, %r803, %r826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r830, %r822, %r827;
	// end inline asm
	// begin inline asm
	lop3.b32 %r833, %r674, %r824, %r814, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r837, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r838, %r814, %r837;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r841, %r833, %r838;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r844, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r846, %r844, %r670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r849, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r851, %r849, %r681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r854, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r856, %r854, %r692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r859, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r861, %r859, %r703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r864, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r866, %r864, %r716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r869, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r871, %r869, %r727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r874, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r876, %r874, %r738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r879, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r881, %r879, %r749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r884, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r886, %r884, %r762;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r889, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r891, %r889, %r773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r894, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r896, %r894, %r784;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r899, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r901, %r899, %r795;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r904, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r906, %r904, %r808;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r909, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r911, %r909, %r819;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r914, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r916, %r914, %r830;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r919, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r921, %r919, %r841;
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r940, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r928, %r8042, -2004318072;
	// begin inline asm
	lop3.b32 %r926, %r663, %r928, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	lop3.b32 %r937, %r674, %r928, %r940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r942, %r940, %r941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r945, %r937, %r942;
	// end inline asm
	shr.u32 	%r950, %r928, 8;
	// begin inline asm
	lop3.b32 %r948, %r663, %r950, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r953, %r929, %r952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r956, %r948, %r953;
	// end inline asm
	// begin inline asm
	lop3.b32 %r959, %r674, %r950, %r940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r963, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r964, %r940, %r963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r967, %r959, %r964;
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r974, %r8041, -2004318072;
	// begin inline asm
	lop3.b32 %r972, %r663, %r974, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	lop3.b32 %r983, %r674, %r974, %r986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r988, %r986, %r987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r991, %r983, %r988;
	// end inline asm
	shr.u32 	%r996, %r974, 8;
	// begin inline asm
	lop3.b32 %r994, %r663, %r996, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r999, %r975, %r998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1002, %r994, %r999;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1005, %r674, %r996, %r986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1009, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1010, %r986, %r1009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1013, %r1005, %r1010;
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1032, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1020, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r1018, %r663, %r1020, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1029, %r674, %r1020, %r1032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1034, %r1032, %r1033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1037, %r1029, %r1034;
	// end inline asm
	shr.u32 	%r1042, %r1020, 8;
	// begin inline asm
	lop3.b32 %r1040, %r663, %r1042, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1045, %r1021, %r1044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1048, %r1040, %r1045;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1051, %r674, %r1042, %r1032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1055, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1056, %r1032, %r1055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1059, %r1051, %r1056;
	// end inline asm
	// begin inline asm
	mov.b32 %r1067, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1078, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1066, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r1064, %r663, %r1066, %r1067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1069, %r1067, %r1068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1072, %r1064, %r1069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1075, %r674, %r1066, %r1078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1079, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1080, %r1078, %r1079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1083, %r1075, %r1080;
	// end inline asm
	shr.u32 	%r1088, %r1066, 8;
	// begin inline asm
	lop3.b32 %r1086, %r663, %r1088, %r1067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1091, %r1067, %r1090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1094, %r1086, %r1091;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1097, %r674, %r1088, %r1078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1101, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1102, %r1078, %r1101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1105, %r1097, %r1102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r220, %r934, %r846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r220, %r945, %r851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r220, %r956, %r856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r220, %r967, %r861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r220, %r980, %r866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r220, %r991, %r871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r220, %r1002, %r876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1136, %r220, %r1013, %r881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r220, %r1026, %r886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r220, %r1037, %r891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r220, %r1048, %r896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r220, %r1059, %r901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r220, %r1072, %r906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r220, %r1083, %r911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1164, %r220, %r1094, %r916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1168, %r220, %r1105, %r921;
	// end inline asm
	// begin inline asm
	mov.b32 %r1177, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1188, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1176, %r8040, -2004318072;
	// begin inline asm
	lop3.b32 %r1174, %r663, %r1176, %r1177, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1178, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1179, %r1177, %r1178;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1182, %r1174, %r1179;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1185, %r674, %r1176, %r1188, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1189, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1190, %r1188, %r1189;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1193, %r1185, %r1190;
	// end inline asm
	shr.u32 	%r1198, %r1176, 8;
	// begin inline asm
	lop3.b32 %r1196, %r663, %r1198, %r1177, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1200, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1201, %r1177, %r1200;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1204, %r1196, %r1201;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1207, %r674, %r1198, %r1188, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1211, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1212, %r1188, %r1211;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1215, %r1207, %r1212;
	// end inline asm
	// begin inline asm
	mov.b32 %r1223, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1234, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1222, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r1220, %r663, %r1222, %r1223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1224, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1225, %r1223, %r1224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1228, %r1220, %r1225;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1231, %r674, %r1222, %r1234, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1235, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1236, %r1234, %r1235;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1239, %r1231, %r1236;
	// end inline asm
	shr.u32 	%r1244, %r1222, 8;
	// begin inline asm
	lop3.b32 %r1242, %r663, %r1244, %r1223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1246, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1247, %r1223, %r1246;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1250, %r1242, %r1247;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1253, %r674, %r1244, %r1234, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1257, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1258, %r1234, %r1257;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1261, %r1253, %r1258;
	// end inline asm
	// begin inline asm
	mov.b32 %r1269, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1280, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1268, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r1266, %r663, %r1268, %r1269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1270, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1271, %r1269, %r1270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1274, %r1266, %r1271;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1277, %r674, %r1268, %r1280, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1281, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1282, %r1280, %r1281;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1285, %r1277, %r1282;
	// end inline asm
	shr.u32 	%r1290, %r1268, 8;
	// begin inline asm
	lop3.b32 %r1288, %r663, %r1290, %r1269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1292, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1293, %r1269, %r1292;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1296, %r1288, %r1293;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1299, %r674, %r1290, %r1280, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1303, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1304, %r1280, %r1303;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1307, %r1299, %r1304;
	// end inline asm
	// begin inline asm
	mov.b32 %r1315, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1326, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1314, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r1312, %r663, %r1314, %r1315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1316, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1317, %r1315, %r1316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1320, %r1312, %r1317;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1323, %r674, %r1314, %r1326, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1327, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1328, %r1326, %r1327;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1331, %r1323, %r1328;
	// end inline asm
	shr.u32 	%r1336, %r1314, 8;
	// begin inline asm
	lop3.b32 %r1334, %r663, %r1336, %r1315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1338, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1339, %r1315, %r1338;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1342, %r1334, %r1339;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1345, %r674, %r1336, %r1326, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1349, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1350, %r1326, %r1349;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1353, %r1345, %r1350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1356, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1358, %r1356, %r1182, %r1108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1362, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r1362, %r1193, %r1112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1368, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1370, %r1368, %r1204, %r1116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1374, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1376, %r1374, %r1215, %r1120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1380, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r1380, %r1228, %r1124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1386, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1388, %r1386, %r1239, %r1128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1392, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1394, %r1392, %r1250, %r1132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1398, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1400, %r1398, %r1261, %r1136;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1404, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r1404, %r1274, %r1140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1410, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1412, %r1410, %r1285, %r1144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1416, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r1416, %r1296, %r1148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1422, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r1422, %r1307, %r1152;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r1428, %r1320, %r1156;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1434, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r1434, %r1331, %r1160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1440, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r1440, %r1342, %r1164;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1446, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1448, %r1446, %r1353, %r1168;
	// end inline asm
	// begin inline asm
	mov.b32 %r1457, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1468, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1456, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r1454, %r663, %r1456, %r1457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1458, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1459, %r1457, %r1458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1462, %r1454, %r1459;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1465, %r674, %r1456, %r1468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1469, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1470, %r1468, %r1469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1473, %r1465, %r1470;
	// end inline asm
	shr.u32 	%r1478, %r1456, 8;
	// begin inline asm
	lop3.b32 %r1476, %r663, %r1478, %r1457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1480, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1481, %r1457, %r1480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1484, %r1476, %r1481;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1487, %r674, %r1478, %r1468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1491, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1492, %r1468, %r1491;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1495, %r1487, %r1492;
	// end inline asm
	// begin inline asm
	mov.b32 %r1503, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1514, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1502, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r1500, %r663, %r1502, %r1503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1504, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1505, %r1503, %r1504;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1508, %r1500, %r1505;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1511, %r674, %r1502, %r1514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1515, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1516, %r1514, %r1515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1519, %r1511, %r1516;
	// end inline asm
	shr.u32 	%r1524, %r1502, 8;
	// begin inline asm
	lop3.b32 %r1522, %r663, %r1524, %r1503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1526, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1527, %r1503, %r1526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1530, %r1522, %r1527;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1533, %r674, %r1524, %r1514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1537, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1538, %r1514, %r1537;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1541, %r1533, %r1538;
	// end inline asm
	// begin inline asm
	mov.b32 %r1549, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1560, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1548, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r1546, %r663, %r1548, %r1549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1550, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1551, %r1549, %r1550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1554, %r1546, %r1551;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1557, %r674, %r1548, %r1560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1561, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1562, %r1560, %r1561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1565, %r1557, %r1562;
	// end inline asm
	shr.u32 	%r1570, %r1548, 8;
	// begin inline asm
	lop3.b32 %r1568, %r663, %r1570, %r1549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1572, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1573, %r1549, %r1572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1576, %r1568, %r1573;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1579, %r674, %r1570, %r1560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1583, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1584, %r1560, %r1583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1587, %r1579, %r1584;
	// end inline asm
	// begin inline asm
	mov.b32 %r1595, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1606, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1594, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r1592, %r663, %r1594, %r1595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1596, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1597, %r1595, %r1596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1600, %r1592, %r1597;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1603, %r674, %r1594, %r1606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1607, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1608, %r1606, %r1607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1611, %r1603, %r1608;
	// end inline asm
	shr.u32 	%r1616, %r1594, 8;
	// begin inline asm
	lop3.b32 %r1614, %r663, %r1616, %r1595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1618, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1619, %r1595, %r1618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1622, %r1614, %r1619;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1625, %r674, %r1616, %r1606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1629, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1630, %r1606, %r1629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1633, %r1625, %r1630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r256, %r1462, %r1358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r256, %r1473, %r1364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r256, %r1484, %r1370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1713, %r256, %r1495, %r1376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r256, %r1508, %r1382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r256, %r1519, %r1388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r256, %r1530, %r1394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r256, %r1541, %r1400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r256, %r1554, %r1406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r256, %r1565, %r1412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r256, %r1576, %r1418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r256, %r1587, %r1424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r256, %r1600, %r1430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1758, %r256, %r1611, %r1436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r256, %r1622, %r1442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r256, %r1633, %r1448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1700, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1702, %r1700, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r302, %r1707, %r1702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1709, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1711, %r1709, %r1713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r302, %r1716, %r1711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1718, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1720, %r1718, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r302, %r1725, %r1720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1727, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1729, %r1727, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r302, %r1734, %r1729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1736, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r1736, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r302, %r1743, %r1738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1745, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1747, %r1745, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r302, %r1752, %r1747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1754, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r1754, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r302, %r1761, %r1756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1763, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1765, %r1763, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r302, %r1770, %r1765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1772, %r305, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r302, %r1704, %r1772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r305, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r302, %r1713, %r1779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1786, %r305, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r302, %r1722, %r1786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1793, %r305, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r302, %r1731, %r1793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1800, %r305, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r302, %r1740, %r1800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1807, %r305, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r302, %r1749, %r1807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1814, %r305, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r302, %r1758, %r1814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r305, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r302, %r1767, %r1821;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1915, %r1912}, {%r349, %r355, %r352, %r358}, {%r1705, %r1775}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1924, %r1921}, {%r349, %r355, %r352, %r358}, {%r1714, %r1782}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1933, %r1930}, {%r349, %r355, %r352, %r358}, {%r1723, %r1789}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1942, %r1939}, {%r349, %r355, %r352, %r358}, {%r1732, %r1796}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1951, %r1948}, {%r349, %r355, %r352, %r358}, {%r1741, %r1803}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1960, %r1957}, {%r349, %r355, %r352, %r358}, {%r1750, %r1810}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1969, %r1966}, {%r349, %r355, %r352, %r358}, {%r1759, %r1817}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1978, %r1975}, {%r349, %r355, %r352, %r358}, {%r1768, %r1824}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1908, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1910, %r1908, %r1912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r393, %r1915, %r1910;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1917, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1919, %r1917, %r1921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r393, %r1924, %r1919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1926, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1928, %r1926, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1931, %r393, %r1933, %r1928;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1935, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1937, %r1935, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1940, %r393, %r1942, %r1937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1944, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1946, %r1944, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1949, %r393, %r1951, %r1946;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1953, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1955, %r1953, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r393, %r1960, %r1955;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1962, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1964, %r1962, %r1966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1967, %r393, %r1969, %r1964;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1971, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r1971, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r393, %r1978, %r1973;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1980, %r396, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r393, %r1912, %r1980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1987, %r396, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r393, %r1921, %r1987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1994, %r396, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r393, %r1930, %r1994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2001, %r396, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r393, %r1939, %r2001;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2008, %r396, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r393, %r1948, %r2008;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2015, %r396, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r393, %r1957, %r2015;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2022, %r396, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r393, %r1966, %r2022;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2029, %r396, %r1978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r393, %r1975, %r2029;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2036, %r2037}, {%r427, %r433, %r430, %r436}, {%r1913, %r1983}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2046, %r2047}, {%r427, %r433, %r430, %r436}, {%r1922, %r1990}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2056, %r2057}, {%r427, %r433, %r430, %r436}, {%r1931, %r1997}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2066, %r2067}, {%r427, %r433, %r430, %r436}, {%r1940, %r2004}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2076, %r2077}, {%r427, %r433, %r430, %r436}, {%r1949, %r2011}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2086, %r2087}, {%r427, %r433, %r430, %r436}, {%r1958, %r2018}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2096, %r2097}, {%r427, %r433, %r430, %r436}, {%r1967, %r2025}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2106, %r2107}, {%r427, %r433, %r430, %r436}, {%r1976, %r2032}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r117, %r2036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r117, %r2037;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r117, %r2046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r117, %r2047;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2128, %r117, %r2056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r117, %r2057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r117, %r2066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2137, %r117, %r2067;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r117, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2143, %r117, %r2077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r117, %r2086;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2149, %r117, %r2087;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2152, %r117, %r2096;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r117, %r2097;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2158, %r117, %r2106;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2161, %r117, %r2107;
	// end inline asm
	// begin inline asm
	mov.b32 %r2164, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2165, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2166, %r2116, %r2164;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2169, %r2166, %r2165;
	// end inline asm
	// begin inline asm
	mov.b32 %r2172, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2173, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2174, %r2119, %r2172;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2177, %r2174, %r2173;
	// end inline asm
	// begin inline asm
	mov.b32 %r2180, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2182, %r2122, %r2180;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2185, %r2182, %r2181;
	// end inline asm
	// begin inline asm
	mov.b32 %r2188, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2189, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2190, %r2125, %r2188;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2193, %r2190, %r2189;
	// end inline asm
	// begin inline asm
	mov.b32 %r2196, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2198, %r2128, %r2196;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2201, %r2198, %r2197;
	// end inline asm
	// begin inline asm
	mov.b32 %r2204, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2206, %r2131, %r2204;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2209, %r2206, %r2205;
	// end inline asm
	// begin inline asm
	mov.b32 %r2212, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2214, %r2134, %r2212;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2217, %r2214, %r2213;
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2222, %r2137, %r2220;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2225, %r2222, %r2221;
	// end inline asm
	// begin inline asm
	mov.b32 %r2228, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2230, %r2140, %r2228;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2233, %r2230, %r2229;
	// end inline asm
	// begin inline asm
	mov.b32 %r2236, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2237, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2238, %r2143, %r2236;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2241, %r2238, %r2237;
	// end inline asm
	// begin inline asm
	mov.b32 %r2244, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2245, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2246, %r2146, %r2244;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2249, %r2246, %r2245;
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2254, %r2149, %r2252;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2257, %r2254, %r2253;
	// end inline asm
	// begin inline asm
	mov.b32 %r2260, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2262, %r2152, %r2260;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2265, %r2262, %r2261;
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2270, %r2155, %r2268;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2273, %r2270, %r2269;
	// end inline asm
	// begin inline asm
	mov.b32 %r2276, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2277, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2278, %r2158, %r2276;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2281, %r2278, %r2277;
	// end inline asm
	// begin inline asm
	mov.b32 %r2284, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2285, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2286, %r2161, %r2284;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2289, %r2286, %r2285;
	// end inline asm
	// begin inline asm
	mov.b32 %r2295, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2293, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2294, %r2295, %r2293;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2169, %r2294;
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2301, %r2295, %r2300;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2304, %r2177, %r2301;
	// end inline asm
	// begin inline asm
	mov.b32 %r2307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2308, %r2295, %r2307;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2185, %r2308;
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2315, %r2295, %r2314;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2318, %r2193, %r2315;
	// end inline asm
	mov.u32 	%r2324, 25152;
	// begin inline asm
	prmt.b32 %r2321, %r2297, %r2311, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2325, %r2304, %r2318, %r2324;
	// end inline asm
	shl.b32 	%r2332, %r2325, 4;
	mov.u32 	%r2330, 252645135;
	// begin inline asm
	lop3.b32 %r2329, %r2330, %r2321, %r2332, 202;
	// end inline asm
	xor.b32  	%r7887, %r2329, -2004318072;
	// begin inline asm
	mov.b32 %r2336, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2335, %r2336, %r2334;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2201, %r2335;
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2342, %r2336, %r2341;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2209, %r2342;
	// end inline asm
	// begin inline asm
	mov.b32 %r2348, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2349, %r2336, %r2348;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2217, %r2349;
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2356, %r2336, %r2355;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2359, %r2225, %r2356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2362, %r2338, %r2352, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2366, %r2345, %r2359, %r2324;
	// end inline asm
	shl.b32 	%r2373, %r2366, 4;
	// begin inline asm
	lop3.b32 %r2370, %r2330, %r2362, %r2373, 202;
	// end inline asm
	xor.b32  	%r7888, %r2370, -2004318072;
	// begin inline asm
	mov.b32 %r2377, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2375, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2376, %r2377, %r2375;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2233, %r2376;
	// end inline asm
	// begin inline asm
	mov.b32 %r2382, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2383, %r2377, %r2382;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2386, %r2241, %r2383;
	// end inline asm
	// begin inline asm
	mov.b32 %r2389, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2390, %r2377, %r2389;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2393, %r2249, %r2390;
	// end inline asm
	// begin inline asm
	mov.b32 %r2396, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2397, %r2377, %r2396;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2400, %r2257, %r2397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2403, %r2379, %r2393, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2407, %r2386, %r2400, %r2324;
	// end inline asm
	shl.b32 	%r2414, %r2407, 4;
	// begin inline asm
	lop3.b32 %r2411, %r2330, %r2403, %r2414, 202;
	// end inline asm
	xor.b32  	%r7889, %r2411, -2004318072;
	// begin inline asm
	mov.b32 %r2418, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2416, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2417, %r2418, %r2416;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2265, %r2417;
	// end inline asm
	// begin inline asm
	mov.b32 %r2423, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2424, %r2418, %r2423;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2427, %r2273, %r2424;
	// end inline asm
	// begin inline asm
	mov.b32 %r2430, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2431, %r2418, %r2430;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2434, %r2281, %r2431;
	// end inline asm
	// begin inline asm
	mov.b32 %r2437, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2438, %r2418, %r2437;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2441, %r2289, %r2438;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2444, %r2420, %r2434, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2448, %r2427, %r2441, %r2324;
	// end inline asm
	shl.b32 	%r2455, %r2448, 4;
	// begin inline asm
	lop3.b32 %r2452, %r2330, %r2444, %r2455, 202;
	// end inline asm
	xor.b32  	%r7890, %r2452, -2004318072;
	st.shared.u32 	[%rd187], %r7887;
	st.shared.u32 	[%rd188], %r7888;
	st.shared.u32 	[%rd189], %r7889;
	st.shared.u32 	[%rd190], %r7890;
	ld.shared.u32 	%r8042, [%rd130];
	ld.shared.u32 	%r8041, [%rd132];
	ld.shared.u32 	%r8036, [%rd134];
	ld.shared.u32 	%r8035, [%rd136];
	// begin inline asm
	mov.b32 %r2461, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2472, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2460, %r8042, -2004318072;
	// begin inline asm
	lop3.b32 %r2458, %r663, %r2460, %r2461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2462, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2463, %r2461, %r2462;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2466, %r2458, %r2463;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2469, %r674, %r2460, %r2472, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2473, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2474, %r2472, %r2473;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2477, %r2469, %r2474;
	// end inline asm
	shr.u32 	%r2482, %r2460, 8;
	// begin inline asm
	lop3.b32 %r2480, %r663, %r2482, %r2461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2485, %r2461, %r2484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2488, %r2480, %r2485;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2491, %r674, %r2482, %r2472, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2495, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2496, %r2472, %r2495;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2499, %r2491, %r2496;
	// end inline asm
	// begin inline asm
	mov.b32 %r2507, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2518, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2506, %r8041, -2004318072;
	// begin inline asm
	lop3.b32 %r2504, %r663, %r2506, %r2507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2509, %r2507, %r2508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2512, %r2504, %r2509;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2515, %r674, %r2506, %r2518, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2519, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2520, %r2518, %r2519;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2523, %r2515, %r2520;
	// end inline asm
	shr.u32 	%r2528, %r2506, 8;
	// begin inline asm
	lop3.b32 %r2526, %r663, %r2528, %r2507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2530, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2531, %r2507, %r2530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2534, %r2526, %r2531;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2537, %r674, %r2528, %r2518, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2541, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2542, %r2518, %r2541;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2545, %r2537, %r2542;
	// end inline asm
	// begin inline asm
	mov.b32 %r2553, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2564, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2552, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r2550, %r663, %r2552, %r2553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2555, %r2553, %r2554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2558, %r2550, %r2555;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2561, %r674, %r2552, %r2564, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2565, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2566, %r2564, %r2565;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2569, %r2561, %r2566;
	// end inline asm
	shr.u32 	%r2574, %r2552, 8;
	// begin inline asm
	lop3.b32 %r2572, %r663, %r2574, %r2553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2576, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2577, %r2553, %r2576;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2580, %r2572, %r2577;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2583, %r674, %r2574, %r2564, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2587, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2588, %r2564, %r2587;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2591, %r2583, %r2588;
	// end inline asm
	// begin inline asm
	mov.b32 %r2599, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2610, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2598, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r2596, %r663, %r2598, %r2599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2600, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2601, %r2599, %r2600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2604, %r2596, %r2601;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2607, %r674, %r2598, %r2610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2611, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2612, %r2610, %r2611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2615, %r2607, %r2612;
	// end inline asm
	shr.u32 	%r2620, %r2598, 8;
	// begin inline asm
	lop3.b32 %r2618, %r663, %r2620, %r2599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2622, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2623, %r2599, %r2622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2626, %r2618, %r2623;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2629, %r674, %r2620, %r2610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2633, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2634, %r2610, %r2633;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2637, %r2629, %r2634;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2640, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r2640, %r2466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2645, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2647, %r2645, %r2477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2650, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2652, %r2650, %r2488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2655, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2657, %r2655, %r2499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2660, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2662, %r2660, %r2512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2665, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2665, %r2523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2670, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2675, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2677, %r2675, %r2545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2685, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2687, %r2685, %r2569;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2690, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2692, %r2690, %r2580;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2591;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2604;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2705, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2707, %r2705, %r2615;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2710, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2712, %r2710, %r2626;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2715, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2717, %r2715, %r2637;
	// end inline asm
	// begin inline asm
	mov.b32 %r2725, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2736, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2722, %r663, %r1176, %r2725, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2726, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2727, %r2725, %r2726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2730, %r2722, %r2727;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2733, %r674, %r1176, %r2736, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2737, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2738, %r2736, %r2737;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2741, %r2733, %r2738;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2744, %r663, %r1198, %r2725, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2748, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2749, %r2725, %r2748;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2752, %r2744, %r2749;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2755, %r674, %r1198, %r2736, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2759, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2760, %r2736, %r2759;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2763, %r2755, %r2760;
	// end inline asm
	// begin inline asm
	mov.b32 %r2771, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2782, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2768, %r663, %r1222, %r2771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2772, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2773, %r2771, %r2772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2776, %r2768, %r2773;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2779, %r674, %r1222, %r2782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2783, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2784, %r2782, %r2783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2787, %r2779, %r2784;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2790, %r663, %r1244, %r2771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2794, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2795, %r2771, %r2794;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2798, %r2790, %r2795;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2801, %r674, %r1244, %r2782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2805, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2806, %r2782, %r2805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2809, %r2801, %r2806;
	// end inline asm
	// begin inline asm
	mov.b32 %r2817, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2828, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2814, %r663, %r1268, %r2817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2819, %r2817, %r2818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2822, %r2814, %r2819;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2825, %r674, %r1268, %r2828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2829, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2830, %r2828, %r2829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2833, %r2825, %r2830;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2836, %r663, %r1290, %r2817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2840, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2841, %r2817, %r2840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2844, %r2836, %r2841;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2847, %r674, %r1290, %r2828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2851, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2852, %r2828, %r2851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2855, %r2847, %r2852;
	// end inline asm
	// begin inline asm
	mov.b32 %r2863, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2874, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2860, %r663, %r1314, %r2863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2864, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2865, %r2863, %r2864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2868, %r2860, %r2865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2871, %r674, %r1314, %r2874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2875, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2876, %r2874, %r2875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2879, %r2871, %r2876;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2882, %r663, %r1336, %r2863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2887, %r2863, %r2886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2890, %r2882, %r2887;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2893, %r674, %r1336, %r2874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2897, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2898, %r2874, %r2897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2901, %r2893, %r2898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2904, %r220, %r2730, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2908, %r220, %r2741, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2912, %r220, %r2752, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r220, %r2763, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2920, %r220, %r2776, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r220, %r2787, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r220, %r2798, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r220, %r2809, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2936, %r220, %r2822, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r220, %r2833, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r220, %r2844, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2948, %r220, %r2855, %r2697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2952, %r220, %r2868, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r220, %r2879, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r220, %r2890, %r2712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2964, %r220, %r2901, %r2717;
	// end inline asm
	// begin inline asm
	mov.b32 %r2973, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2984, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2970, %r663, %r1456, %r2973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2974, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2975, %r2973, %r2974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2978, %r2970, %r2975;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2981, %r674, %r1456, %r2984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2985, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2986, %r2984, %r2985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2989, %r2981, %r2986;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2992, %r663, %r1478, %r2973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2996, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2997, %r2973, %r2996;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3000, %r2992, %r2997;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3003, %r674, %r1478, %r2984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3007, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3008, %r2984, %r3007;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3011, %r3003, %r3008;
	// end inline asm
	// begin inline asm
	mov.b32 %r3019, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3030, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3016, %r663, %r1502, %r3019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3020, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3021, %r3019, %r3020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3024, %r3016, %r3021;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3027, %r674, %r1502, %r3030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3031, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3032, %r3030, %r3031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3035, %r3027, %r3032;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3038, %r663, %r1524, %r3019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3042, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3043, %r3019, %r3042;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3046, %r3038, %r3043;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3049, %r674, %r1524, %r3030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3053, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3054, %r3030, %r3053;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3057, %r3049, %r3054;
	// end inline asm
	// begin inline asm
	mov.b32 %r3065, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3076, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3062, %r663, %r1548, %r3065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3066, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3067, %r3065, %r3066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3070, %r3062, %r3067;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3073, %r674, %r1548, %r3076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3077, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3078, %r3076, %r3077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3081, %r3073, %r3078;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3084, %r663, %r1570, %r3065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3088, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3089, %r3065, %r3088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3092, %r3084, %r3089;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3095, %r674, %r1570, %r3076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3099, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3100, %r3076, %r3099;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3103, %r3095, %r3100;
	// end inline asm
	// begin inline asm
	mov.b32 %r3111, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3122, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3108, %r663, %r1594, %r3111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3112, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3113, %r3111, %r3112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3116, %r3108, %r3113;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3119, %r674, %r1594, %r3122, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3123, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3124, %r3122, %r3123;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3127, %r3119, %r3124;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3130, %r663, %r1616, %r3111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3134, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3135, %r3111, %r3134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3138, %r3130, %r3135;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3141, %r674, %r1616, %r3122, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3145, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3146, %r3122, %r3145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3149, %r3141, %r3146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3152, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r3152, %r2978, %r2904;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3158, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3160, %r3158, %r2989, %r2908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3164, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3166, %r3164, %r3000, %r2912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3170, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r3170, %r3011, %r2916;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3176, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3178, %r3176, %r3024, %r2920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3182, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3184, %r3182, %r3035, %r2924;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3188, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3190, %r3188, %r3046, %r2928;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3194, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3196, %r3194, %r3057, %r2932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3200, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r3200, %r3070, %r2936;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3206, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r3206, %r3081, %r2940;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3212, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r3212, %r3092, %r2944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3218, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r3218, %r3103, %r2948;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3224, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r3224, %r3116, %r2952;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3230, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r3230, %r3127, %r2956;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3236, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3238, %r3236, %r3138, %r2960;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3242, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3244, %r3242, %r3149, %r2964;
	// end inline asm
	// begin inline asm
	mov.b32 %r3253, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3264, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3250, %r663, %r664, %r3253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3254, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3255, %r3253, %r3254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3258, %r3250, %r3255;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3261, %r674, %r664, %r3264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3265, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3266, %r3264, %r3265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3269, %r3261, %r3266;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3272, %r663, %r686, %r3253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3276, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3277, %r3253, %r3276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3280, %r3272, %r3277;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3283, %r674, %r686, %r3264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3287, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3288, %r3264, %r3287;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3291, %r3283, %r3288;
	// end inline asm
	// begin inline asm
	mov.b32 %r3299, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3310, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3296, %r663, %r710, %r3299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3300, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3301, %r3299, %r3300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3304, %r3296, %r3301;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3307, %r674, %r710, %r3310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3311, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3312, %r3310, %r3311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3315, %r3307, %r3312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3318, %r663, %r732, %r3299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3323, %r3299, %r3322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3326, %r3318, %r3323;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3329, %r674, %r732, %r3310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3333, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3334, %r3310, %r3333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3337, %r3329, %r3334;
	// end inline asm
	// begin inline asm
	mov.b32 %r3345, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3356, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3342, %r663, %r756, %r3345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3346, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3347, %r3345, %r3346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3350, %r3342, %r3347;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3353, %r674, %r756, %r3356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3358, %r3356, %r3357;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3361, %r3353, %r3358;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3364, %r663, %r778, %r3345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3369, %r3345, %r3368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3372, %r3364, %r3369;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3375, %r674, %r778, %r3356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3379, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3380, %r3356, %r3379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3383, %r3375, %r3380;
	// end inline asm
	// begin inline asm
	mov.b32 %r3391, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3402, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3388, %r663, %r802, %r3391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3392, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3393, %r3391, %r3392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3396, %r3388, %r3393;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3399, %r674, %r802, %r3402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3403, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3404, %r3402, %r3403;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3407, %r3399, %r3404;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3410, %r663, %r824, %r3391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3414, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3415, %r3391, %r3414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3418, %r3410, %r3415;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3421, %r674, %r824, %r3402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3425, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3426, %r3402, %r3425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3429, %r3421, %r3426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r256, %r3258, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r256, %r3269, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r256, %r3280, %r3166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3509, %r256, %r3291, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r256, %r3304, %r3178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3518, %r256, %r3315, %r3184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r256, %r3326, %r3190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3527, %r256, %r3337, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r256, %r3350, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3536, %r256, %r3361, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3548, %r256, %r3372, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3545, %r256, %r3383, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3557, %r256, %r3396, %r3226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3554, %r256, %r3407, %r3232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3566, %r256, %r3418, %r3238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3563, %r256, %r3429, %r3244;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3496, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3498, %r3496, %r3500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r302, %r3503, %r3498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3505, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3507, %r3505, %r3509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r302, %r3512, %r3507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3514, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3516, %r3514, %r3518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r302, %r3521, %r3516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3523, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3525, %r3523, %r3527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r302, %r3530, %r3525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3532, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3534, %r3532, %r3536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r302, %r3539, %r3534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3541, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3543, %r3541, %r3545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r302, %r3548, %r3543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3550, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3552, %r3550, %r3554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r302, %r3557, %r3552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3559, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3561, %r3559, %r3563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r302, %r3566, %r3561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3568, %r305, %r3503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3571, %r302, %r3500, %r3568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3575, %r305, %r3512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3578, %r302, %r3509, %r3575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3582, %r305, %r3521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3585, %r302, %r3518, %r3582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3589, %r305, %r3530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3592, %r302, %r3527, %r3589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3596, %r305, %r3539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3599, %r302, %r3536, %r3596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3603, %r305, %r3548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3606, %r302, %r3545, %r3603;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3610, %r305, %r3557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3613, %r302, %r3554, %r3610;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3617, %r305, %r3566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3620, %r302, %r3563, %r3617;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3711, %r3708}, {%r349, %r355, %r352, %r358}, {%r3501, %r3571}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3720, %r3717}, {%r349, %r355, %r352, %r358}, {%r3510, %r3578}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3729, %r3726}, {%r349, %r355, %r352, %r358}, {%r3519, %r3585}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3738, %r3735}, {%r349, %r355, %r352, %r358}, {%r3528, %r3592}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3747, %r3744}, {%r349, %r355, %r352, %r358}, {%r3537, %r3599}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3756, %r3753}, {%r349, %r355, %r352, %r358}, {%r3546, %r3606}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3765, %r3762}, {%r349, %r355, %r352, %r358}, {%r3555, %r3613}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3774, %r3771}, {%r349, %r355, %r352, %r358}, {%r3564, %r3620}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3704, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3706, %r3704, %r3708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3709, %r393, %r3711, %r3706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3713, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3715, %r3713, %r3717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3718, %r393, %r3720, %r3715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3722, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3724, %r3722, %r3726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3727, %r393, %r3729, %r3724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3731, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3733, %r3731, %r3735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3736, %r393, %r3738, %r3733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3740, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3742, %r3740, %r3744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3745, %r393, %r3747, %r3742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3749, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3751, %r3749, %r3753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3754, %r393, %r3756, %r3751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3758, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3760, %r3758, %r3762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3763, %r393, %r3765, %r3760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3767, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3769, %r3767, %r3771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3772, %r393, %r3774, %r3769;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3776, %r396, %r3711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3779, %r393, %r3708, %r3776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3783, %r396, %r3720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3786, %r393, %r3717, %r3783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3790, %r396, %r3729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3793, %r393, %r3726, %r3790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3797, %r396, %r3738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3800, %r393, %r3735, %r3797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3804, %r396, %r3747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3807, %r393, %r3744, %r3804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3811, %r396, %r3756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3814, %r393, %r3753, %r3811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3818, %r396, %r3765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3821, %r393, %r3762, %r3818;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3825, %r396, %r3774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3828, %r393, %r3771, %r3825;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3832, %r3833}, {%r427, %r433, %r430, %r436}, {%r3709, %r3779}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3842, %r3843}, {%r427, %r433, %r430, %r436}, {%r3718, %r3786}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3852, %r3853}, {%r427, %r433, %r430, %r436}, {%r3727, %r3793}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3862, %r3863}, {%r427, %r433, %r430, %r436}, {%r3736, %r3800}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3872, %r3873}, {%r427, %r433, %r430, %r436}, {%r3745, %r3807}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3882, %r3883}, {%r427, %r433, %r430, %r436}, {%r3754, %r3814}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3892, %r3893}, {%r427, %r433, %r430, %r436}, {%r3763, %r3821}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3902, %r3903}, {%r427, %r433, %r430, %r436}, {%r3772, %r3828}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3912, %r117, %r3832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3915, %r117, %r3833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3918, %r117, %r3842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3921, %r117, %r3843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3924, %r117, %r3852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3927, %r117, %r3853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3930, %r117, %r3862;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3933, %r117, %r3863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3936, %r117, %r3872;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3939, %r117, %r3873;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3942, %r117, %r3882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3945, %r117, %r3883;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3948, %r117, %r3892;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3951, %r117, %r3893;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3954, %r117, %r3902;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3957, %r117, %r3903;
	// end inline asm
	// begin inline asm
	mov.b32 %r3960, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3961, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3962, %r3912, %r3960;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3965, %r3962, %r3961;
	// end inline asm
	// begin inline asm
	mov.b32 %r3968, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3969, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3970, %r3915, %r3968;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3973, %r3970, %r3969;
	// end inline asm
	// begin inline asm
	mov.b32 %r3976, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3977, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3978, %r3918, %r3976;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3981, %r3978, %r3977;
	// end inline asm
	// begin inline asm
	mov.b32 %r3984, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3985, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3986, %r3921, %r3984;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3989, %r3986, %r3985;
	// end inline asm
	// begin inline asm
	mov.b32 %r3992, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3993, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3994, %r3924, %r3992;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3997, %r3994, %r3993;
	// end inline asm
	// begin inline asm
	mov.b32 %r4000, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4001, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4002, %r3927, %r4000;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4005, %r4002, %r4001;
	// end inline asm
	// begin inline asm
	mov.b32 %r4008, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4009, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4010, %r3930, %r4008;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4013, %r4010, %r4009;
	// end inline asm
	// begin inline asm
	mov.b32 %r4016, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4017, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4018, %r3933, %r4016;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4021, %r4018, %r4017;
	// end inline asm
	// begin inline asm
	mov.b32 %r4024, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4025, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4026, %r3936, %r4024;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4029, %r4026, %r4025;
	// end inline asm
	// begin inline asm
	mov.b32 %r4032, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4033, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4034, %r3939, %r4032;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4037, %r4034, %r4033;
	// end inline asm
	// begin inline asm
	mov.b32 %r4040, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4041, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4042, %r3942, %r4040;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4045, %r4042, %r4041;
	// end inline asm
	// begin inline asm
	mov.b32 %r4048, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4049, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4050, %r3945, %r4048;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4053, %r4050, %r4049;
	// end inline asm
	// begin inline asm
	mov.b32 %r4056, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4057, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4058, %r3948, %r4056;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4061, %r4058, %r4057;
	// end inline asm
	// begin inline asm
	mov.b32 %r4064, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4065, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4066, %r3951, %r4064;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4069, %r4066, %r4065;
	// end inline asm
	// begin inline asm
	mov.b32 %r4072, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4073, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4074, %r3954, %r4072;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4077, %r4074, %r4073;
	// end inline asm
	// begin inline asm
	mov.b32 %r4080, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4081, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4082, %r3957, %r4080;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4085, %r4082, %r4081;
	// end inline asm
	// begin inline asm
	mov.b32 %r4091, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4090, %r4091, %r4089;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4093, %r3965, %r4090;
	// end inline asm
	// begin inline asm
	mov.b32 %r4096, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4097, %r4091, %r4096;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4100, %r3973, %r4097;
	// end inline asm
	// begin inline asm
	mov.b32 %r4103, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4104, %r4091, %r4103;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4107, %r3981, %r4104;
	// end inline asm
	// begin inline asm
	mov.b32 %r4110, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4111, %r4091, %r4110;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4114, %r3989, %r4111;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4117, %r4093, %r4107, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4121, %r4100, %r4114, %r2324;
	// end inline asm
	shl.b32 	%r4128, %r4121, 4;
	// begin inline asm
	lop3.b32 %r4125, %r2330, %r4117, %r4128, 202;
	// end inline asm
	xor.b32  	%r7891, %r4125, -2004318072;
	// begin inline asm
	mov.b32 %r4132, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4130, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4131, %r4132, %r4130;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4134, %r3997, %r4131;
	// end inline asm
	// begin inline asm
	mov.b32 %r4137, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4138, %r4132, %r4137;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4141, %r4005, %r4138;
	// end inline asm
	// begin inline asm
	mov.b32 %r4144, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4145, %r4132, %r4144;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4148, %r4013, %r4145;
	// end inline asm
	// begin inline asm
	mov.b32 %r4151, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4152, %r4132, %r4151;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4155, %r4021, %r4152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4158, %r4134, %r4148, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4162, %r4141, %r4155, %r2324;
	// end inline asm
	shl.b32 	%r4169, %r4162, 4;
	// begin inline asm
	lop3.b32 %r4166, %r2330, %r4158, %r4169, 202;
	// end inline asm
	xor.b32  	%r7892, %r4166, -2004318072;
	// begin inline asm
	mov.b32 %r4173, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4171, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4172, %r4173, %r4171;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4175, %r4029, %r4172;
	// end inline asm
	// begin inline asm
	mov.b32 %r4178, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4179, %r4173, %r4178;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4182, %r4037, %r4179;
	// end inline asm
	// begin inline asm
	mov.b32 %r4185, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4186, %r4173, %r4185;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4189, %r4045, %r4186;
	// end inline asm
	// begin inline asm
	mov.b32 %r4192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4193, %r4173, %r4192;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4196, %r4053, %r4193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4199, %r4175, %r4189, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4203, %r4182, %r4196, %r2324;
	// end inline asm
	shl.b32 	%r4210, %r4203, 4;
	// begin inline asm
	lop3.b32 %r4207, %r2330, %r4199, %r4210, 202;
	// end inline asm
	xor.b32  	%r7893, %r4207, -2004318072;
	// begin inline asm
	mov.b32 %r4214, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4212, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4213, %r4214, %r4212;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4216, %r4061, %r4213;
	// end inline asm
	// begin inline asm
	mov.b32 %r4219, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4220, %r4214, %r4219;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4223, %r4069, %r4220;
	// end inline asm
	// begin inline asm
	mov.b32 %r4226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4227, %r4214, %r4226;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4230, %r4077, %r4227;
	// end inline asm
	// begin inline asm
	mov.b32 %r4233, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4234, %r4214, %r4233;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4237, %r4085, %r4234;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4240, %r4216, %r4230, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4244, %r4223, %r4237, %r2324;
	// end inline asm
	shl.b32 	%r4251, %r4244, 4;
	// begin inline asm
	lop3.b32 %r4248, %r2330, %r4240, %r4251, 202;
	// end inline asm
	xor.b32  	%r7894, %r4248, -2004318072;
	st.shared.u32 	[%rd187], %r7891;
	st.shared.u32 	[%rd188], %r7892;
	st.shared.u32 	[%rd189], %r7893;
	st.shared.u32 	[%rd190], %r7894;
	ld.shared.u32 	%r8040, [%rd130];
	ld.shared.u32 	%r8039, [%rd132];
	ld.shared.u32 	%r8034, [%rd134];
	ld.shared.u32 	%r8033, [%rd136];
	// begin inline asm
	mov.b32 %r4257, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4268, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4256, %r8040, -2004318072;
	// begin inline asm
	lop3.b32 %r4254, %r663, %r4256, %r4257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4258, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4259, %r4257, %r4258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4262, %r4254, %r4259;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4265, %r674, %r4256, %r4268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4269, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4270, %r4268, %r4269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4273, %r4265, %r4270;
	// end inline asm
	shr.u32 	%r4278, %r4256, 8;
	// begin inline asm
	lop3.b32 %r4276, %r663, %r4278, %r4257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4280, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4281, %r4257, %r4280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4284, %r4276, %r4281;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4287, %r674, %r4278, %r4268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4291, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4292, %r4268, %r4291;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4295, %r4287, %r4292;
	// end inline asm
	// begin inline asm
	mov.b32 %r4303, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4314, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4302, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r4300, %r663, %r4302, %r4303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4304, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4305, %r4303, %r4304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4308, %r4300, %r4305;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4311, %r674, %r4302, %r4314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4316, %r4314, %r4315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4319, %r4311, %r4316;
	// end inline asm
	shr.u32 	%r4324, %r4302, 8;
	// begin inline asm
	lop3.b32 %r4322, %r663, %r4324, %r4303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4326, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4327, %r4303, %r4326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4330, %r4322, %r4327;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4333, %r674, %r4324, %r4314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4337, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4338, %r4314, %r4337;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4341, %r4333, %r4338;
	// end inline asm
	// begin inline asm
	mov.b32 %r4349, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4360, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4348, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r4346, %r663, %r4348, %r4349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4351, %r4349, %r4350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4354, %r4346, %r4351;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4357, %r674, %r4348, %r4360, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4361, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4362, %r4360, %r4361;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4365, %r4357, %r4362;
	// end inline asm
	shr.u32 	%r4370, %r4348, 8;
	// begin inline asm
	lop3.b32 %r4368, %r663, %r4370, %r4349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4372, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4373, %r4349, %r4372;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4376, %r4368, %r4373;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4379, %r674, %r4370, %r4360, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4383, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4384, %r4360, %r4383;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4387, %r4379, %r4384;
	// end inline asm
	// begin inline asm
	mov.b32 %r4395, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4406, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4394, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r4392, %r663, %r4394, %r4395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4396, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4397, %r4395, %r4396;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4400, %r4392, %r4397;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4403, %r674, %r4394, %r4406, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4407, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4408, %r4406, %r4407;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4411, %r4403, %r4408;
	// end inline asm
	shr.u32 	%r4416, %r4394, 8;
	// begin inline asm
	lop3.b32 %r4414, %r663, %r4416, %r4395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4418, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4419, %r4395, %r4418;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4422, %r4414, %r4419;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4425, %r674, %r4416, %r4406, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4429, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4430, %r4406, %r4429;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4433, %r4425, %r4430;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4436, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4438, %r4436, %r4262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4441, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4443, %r4441, %r4273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4446, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4448, %r4446, %r4284;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4451, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4453, %r4451, %r4295;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4456, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4458, %r4456, %r4308;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4461, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4463, %r4461, %r4319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4466, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4468, %r4466, %r4330;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4471, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4473, %r4471, %r4341;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4476, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4478, %r4476, %r4354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4481, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4483, %r4481, %r4365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4486, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4488, %r4486, %r4376;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4491, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4493, %r4491, %r4387;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4496, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4498, %r4496, %r4400;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4501, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4503, %r4501, %r4411;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4506, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4508, %r4506, %r4422;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4511, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4513, %r4511, %r4433;
	// end inline asm
	// begin inline asm
	mov.b32 %r4521, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4532, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4518, %r663, %r1456, %r4521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4522, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4523, %r4521, %r4522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4526, %r4518, %r4523;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4529, %r674, %r1456, %r4532, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4533, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4534, %r4532, %r4533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4537, %r4529, %r4534;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4540, %r663, %r1478, %r4521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4544, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4545, %r4521, %r4544;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4548, %r4540, %r4545;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4551, %r674, %r1478, %r4532, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4555, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4556, %r4532, %r4555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4559, %r4551, %r4556;
	// end inline asm
	// begin inline asm
	mov.b32 %r4567, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4578, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4564, %r663, %r1502, %r4567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4568, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4569, %r4567, %r4568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4572, %r4564, %r4569;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4575, %r674, %r1502, %r4578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4579, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4580, %r4578, %r4579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4583, %r4575, %r4580;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4586, %r663, %r1524, %r4567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4590, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4591, %r4567, %r4590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4594, %r4586, %r4591;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4597, %r674, %r1524, %r4578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4601, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4602, %r4578, %r4601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4605, %r4597, %r4602;
	// end inline asm
	// begin inline asm
	mov.b32 %r4613, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4624, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4610, %r663, %r1548, %r4613, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4614, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4615, %r4613, %r4614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4618, %r4610, %r4615;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4621, %r674, %r1548, %r4624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4625, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4626, %r4624, %r4625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4629, %r4621, %r4626;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4632, %r663, %r1570, %r4613, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4636, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4637, %r4613, %r4636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4640, %r4632, %r4637;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4643, %r674, %r1570, %r4624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4647, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4648, %r4624, %r4647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4651, %r4643, %r4648;
	// end inline asm
	// begin inline asm
	mov.b32 %r4659, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4670, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4656, %r663, %r1594, %r4659, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4660, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4661, %r4659, %r4660;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4664, %r4656, %r4661;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4667, %r674, %r1594, %r4670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4671, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4672, %r4670, %r4671;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4675, %r4667, %r4672;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4678, %r663, %r1616, %r4659, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4682, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4683, %r4659, %r4682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4686, %r4678, %r4683;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4689, %r674, %r1616, %r4670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4693, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4694, %r4670, %r4693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4697, %r4689, %r4694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4700, %r220, %r4526, %r4438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4704, %r220, %r4537, %r4443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4708, %r220, %r4548, %r4448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4712, %r220, %r4559, %r4453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4716, %r220, %r4572, %r4458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4720, %r220, %r4583, %r4463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4724, %r220, %r4594, %r4468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4728, %r220, %r4605, %r4473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4732, %r220, %r4618, %r4478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4736, %r220, %r4629, %r4483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4740, %r220, %r4640, %r4488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4744, %r220, %r4651, %r4493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4748, %r220, %r4664, %r4498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4752, %r220, %r4675, %r4503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4756, %r220, %r4686, %r4508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4760, %r220, %r4697, %r4513;
	// end inline asm
	// begin inline asm
	mov.b32 %r4769, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4780, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4766, %r663, %r664, %r4769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4770, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4771, %r4769, %r4770;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4774, %r4766, %r4771;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4777, %r674, %r664, %r4780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4781, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4782, %r4780, %r4781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4785, %r4777, %r4782;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4788, %r663, %r686, %r4769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4792, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4793, %r4769, %r4792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4796, %r4788, %r4793;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4799, %r674, %r686, %r4780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4803, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4804, %r4780, %r4803;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4807, %r4799, %r4804;
	// end inline asm
	// begin inline asm
	mov.b32 %r4815, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4826, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4812, %r663, %r710, %r4815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4816, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4817, %r4815, %r4816;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4820, %r4812, %r4817;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4823, %r674, %r710, %r4826, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4827, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4828, %r4826, %r4827;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4831, %r4823, %r4828;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4834, %r663, %r732, %r4815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4838, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4839, %r4815, %r4838;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4842, %r4834, %r4839;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4845, %r674, %r732, %r4826, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4849, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4850, %r4826, %r4849;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4853, %r4845, %r4850;
	// end inline asm
	// begin inline asm
	mov.b32 %r4861, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4872, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4858, %r663, %r756, %r4861, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4862, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4863, %r4861, %r4862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4866, %r4858, %r4863;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4869, %r674, %r756, %r4872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4873, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4874, %r4872, %r4873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4877, %r4869, %r4874;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4880, %r663, %r778, %r4861, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4884, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4885, %r4861, %r4884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4888, %r4880, %r4885;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4891, %r674, %r778, %r4872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4895, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4896, %r4872, %r4895;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4899, %r4891, %r4896;
	// end inline asm
	// begin inline asm
	mov.b32 %r4907, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4918, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4904, %r663, %r802, %r4907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4908, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4909, %r4907, %r4908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4912, %r4904, %r4909;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4915, %r674, %r802, %r4918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4919, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4920, %r4918, %r4919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4923, %r4915, %r4920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4926, %r663, %r824, %r4907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4930, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4931, %r4907, %r4930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4934, %r4926, %r4931;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4937, %r674, %r824, %r4918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4941, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4942, %r4918, %r4941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4945, %r4937, %r4942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4948, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4950, %r4948, %r4774, %r4700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4954, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4956, %r4954, %r4785, %r4704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4960, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4962, %r4960, %r4796, %r4708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4966, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4968, %r4966, %r4807, %r4712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4972, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4974, %r4972, %r4820, %r4716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4978, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4980, %r4978, %r4831, %r4720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4984, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4986, %r4984, %r4842, %r4724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4990, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4992, %r4990, %r4853, %r4728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4996, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4998, %r4996, %r4866, %r4732;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5002, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5004, %r5002, %r4877, %r4736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5008, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5010, %r5008, %r4888, %r4740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5014, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5016, %r5014, %r4899, %r4744;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5020, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5022, %r5020, %r4912, %r4748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5026, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5028, %r5026, %r4923, %r4752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5032, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5034, %r5032, %r4934, %r4756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5038, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5040, %r5038, %r4945, %r4760;
	// end inline asm
	// begin inline asm
	mov.b32 %r5049, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5060, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5046, %r663, %r2460, %r5049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5050, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5051, %r5049, %r5050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5054, %r5046, %r5051;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5057, %r674, %r2460, %r5060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5061, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5062, %r5060, %r5061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5065, %r5057, %r5062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5068, %r663, %r2482, %r5049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5072, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5073, %r5049, %r5072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5076, %r5068, %r5073;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5079, %r674, %r2482, %r5060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5084, %r5060, %r5083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5087, %r5079, %r5084;
	// end inline asm
	// begin inline asm
	mov.b32 %r5095, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5106, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5092, %r663, %r2506, %r5095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5096, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5097, %r5095, %r5096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5100, %r5092, %r5097;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5103, %r674, %r2506, %r5106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5107, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5108, %r5106, %r5107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5111, %r5103, %r5108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5114, %r663, %r2528, %r5095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5118, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5119, %r5095, %r5118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5122, %r5114, %r5119;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5125, %r674, %r2528, %r5106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5129, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5130, %r5106, %r5129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5133, %r5125, %r5130;
	// end inline asm
	// begin inline asm
	mov.b32 %r5141, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5152, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5138, %r663, %r2552, %r5141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5142, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5143, %r5141, %r5142;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5146, %r5138, %r5143;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5149, %r674, %r2552, %r5152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5153, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5154, %r5152, %r5153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5157, %r5149, %r5154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5160, %r663, %r2574, %r5141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5164, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5165, %r5141, %r5164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5168, %r5160, %r5165;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5171, %r674, %r2574, %r5152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5175, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5176, %r5152, %r5175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5179, %r5171, %r5176;
	// end inline asm
	// begin inline asm
	mov.b32 %r5187, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5198, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5184, %r663, %r2598, %r5187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5188, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5189, %r5187, %r5188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5192, %r5184, %r5189;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5195, %r674, %r2598, %r5198, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5199, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5200, %r5198, %r5199;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5203, %r5195, %r5200;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5206, %r663, %r2620, %r5187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5210, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5211, %r5187, %r5210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5214, %r5206, %r5211;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5217, %r674, %r2620, %r5198, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5221, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5222, %r5198, %r5221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5225, %r5217, %r5222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5299, %r256, %r5054, %r4950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5296, %r256, %r5065, %r4956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5308, %r256, %r5076, %r4962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5305, %r256, %r5087, %r4968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5317, %r256, %r5100, %r4974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5314, %r256, %r5111, %r4980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5326, %r256, %r5122, %r4986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5323, %r256, %r5133, %r4992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5335, %r256, %r5146, %r4998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5332, %r256, %r5157, %r5004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5344, %r256, %r5168, %r5010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5341, %r256, %r5179, %r5016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5353, %r256, %r5192, %r5022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5350, %r256, %r5203, %r5028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5362, %r256, %r5214, %r5034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5359, %r256, %r5225, %r5040;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5292, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5294, %r5292, %r5296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5297, %r302, %r5299, %r5294;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5301, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5303, %r5301, %r5305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5306, %r302, %r5308, %r5303;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5310, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5312, %r5310, %r5314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5315, %r302, %r5317, %r5312;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5319, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5321, %r5319, %r5323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5324, %r302, %r5326, %r5321;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5328, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5330, %r5328, %r5332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5333, %r302, %r5335, %r5330;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5337, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5339, %r5337, %r5341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r302, %r5344, %r5339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5346, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5348, %r5346, %r5350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5351, %r302, %r5353, %r5348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5355, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5357, %r5355, %r5359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5360, %r302, %r5362, %r5357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5364, %r305, %r5299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5367, %r302, %r5296, %r5364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5371, %r305, %r5308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5374, %r302, %r5305, %r5371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5378, %r305, %r5317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5381, %r302, %r5314, %r5378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5385, %r305, %r5326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5388, %r302, %r5323, %r5385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5392, %r305, %r5335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5395, %r302, %r5332, %r5392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5399, %r305, %r5344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5402, %r302, %r5341, %r5399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5406, %r305, %r5353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5409, %r302, %r5350, %r5406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5413, %r305, %r5362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5416, %r302, %r5359, %r5413;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5507, %r5504}, {%r349, %r355, %r352, %r358}, {%r5297, %r5367}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5516, %r5513}, {%r349, %r355, %r352, %r358}, {%r5306, %r5374}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5525, %r5522}, {%r349, %r355, %r352, %r358}, {%r5315, %r5381}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5534, %r5531}, {%r349, %r355, %r352, %r358}, {%r5324, %r5388}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5543, %r5540}, {%r349, %r355, %r352, %r358}, {%r5333, %r5395}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5552, %r5549}, {%r349, %r355, %r352, %r358}, {%r5342, %r5402}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5561, %r5558}, {%r349, %r355, %r352, %r358}, {%r5351, %r5409}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5570, %r5567}, {%r349, %r355, %r352, %r358}, {%r5360, %r5416}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5500, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5502, %r5500, %r5504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5505, %r393, %r5507, %r5502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5509, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5511, %r5509, %r5513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5514, %r393, %r5516, %r5511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5518, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5520, %r5518, %r5522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5523, %r393, %r5525, %r5520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5527, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5529, %r5527, %r5531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5532, %r393, %r5534, %r5529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5536, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5538, %r5536, %r5540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5541, %r393, %r5543, %r5538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5545, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5547, %r5545, %r5549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5550, %r393, %r5552, %r5547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5554, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5556, %r5554, %r5558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5559, %r393, %r5561, %r5556;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5563, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5565, %r5563, %r5567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5568, %r393, %r5570, %r5565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5572, %r396, %r5507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5575, %r393, %r5504, %r5572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5579, %r396, %r5516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5582, %r393, %r5513, %r5579;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5586, %r396, %r5525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5589, %r393, %r5522, %r5586;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5593, %r396, %r5534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5596, %r393, %r5531, %r5593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5600, %r396, %r5543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5603, %r393, %r5540, %r5600;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5607, %r396, %r5552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5610, %r393, %r5549, %r5607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5614, %r396, %r5561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5617, %r393, %r5558, %r5614;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5621, %r396, %r5570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5624, %r393, %r5567, %r5621;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5628, %r5629}, {%r427, %r433, %r430, %r436}, {%r5505, %r5575}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5638, %r5639}, {%r427, %r433, %r430, %r436}, {%r5514, %r5582}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5648, %r5649}, {%r427, %r433, %r430, %r436}, {%r5523, %r5589}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5658, %r5659}, {%r427, %r433, %r430, %r436}, {%r5532, %r5596}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5668, %r5669}, {%r427, %r433, %r430, %r436}, {%r5541, %r5603}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5678, %r5679}, {%r427, %r433, %r430, %r436}, {%r5550, %r5610}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5688, %r5689}, {%r427, %r433, %r430, %r436}, {%r5559, %r5617}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5698, %r5699}, {%r427, %r433, %r430, %r436}, {%r5568, %r5624}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5708, %r117, %r5628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5711, %r117, %r5629;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5714, %r117, %r5638;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5717, %r117, %r5639;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5720, %r117, %r5648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5723, %r117, %r5649;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5726, %r117, %r5658;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5729, %r117, %r5659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5732, %r117, %r5668;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5735, %r117, %r5669;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5738, %r117, %r5678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5741, %r117, %r5679;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5744, %r117, %r5688;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5747, %r117, %r5689;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5750, %r117, %r5698;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5753, %r117, %r5699;
	// end inline asm
	// begin inline asm
	mov.b32 %r5756, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5757, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5758, %r5708, %r5756;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5761, %r5758, %r5757;
	// end inline asm
	// begin inline asm
	mov.b32 %r5764, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5765, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5766, %r5711, %r5764;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5769, %r5766, %r5765;
	// end inline asm
	// begin inline asm
	mov.b32 %r5772, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5773, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5774, %r5714, %r5772;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5777, %r5774, %r5773;
	// end inline asm
	// begin inline asm
	mov.b32 %r5780, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5781, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5782, %r5717, %r5780;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5785, %r5782, %r5781;
	// end inline asm
	// begin inline asm
	mov.b32 %r5788, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5789, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5790, %r5720, %r5788;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5793, %r5790, %r5789;
	// end inline asm
	// begin inline asm
	mov.b32 %r5796, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5797, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5798, %r5723, %r5796;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5801, %r5798, %r5797;
	// end inline asm
	// begin inline asm
	mov.b32 %r5804, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5805, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5806, %r5726, %r5804;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5809, %r5806, %r5805;
	// end inline asm
	// begin inline asm
	mov.b32 %r5812, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5813, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5814, %r5729, %r5812;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5817, %r5814, %r5813;
	// end inline asm
	// begin inline asm
	mov.b32 %r5820, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5821, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5822, %r5732, %r5820;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5825, %r5822, %r5821;
	// end inline asm
	// begin inline asm
	mov.b32 %r5828, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5829, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5830, %r5735, %r5828;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5833, %r5830, %r5829;
	// end inline asm
	// begin inline asm
	mov.b32 %r5836, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5837, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5838, %r5738, %r5836;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5841, %r5838, %r5837;
	// end inline asm
	// begin inline asm
	mov.b32 %r5844, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5845, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5846, %r5741, %r5844;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5849, %r5846, %r5845;
	// end inline asm
	// begin inline asm
	mov.b32 %r5852, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5853, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5854, %r5744, %r5852;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5857, %r5854, %r5853;
	// end inline asm
	// begin inline asm
	mov.b32 %r5860, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5861, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5862, %r5747, %r5860;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5865, %r5862, %r5861;
	// end inline asm
	// begin inline asm
	mov.b32 %r5868, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5869, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5870, %r5750, %r5868;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5873, %r5870, %r5869;
	// end inline asm
	// begin inline asm
	mov.b32 %r5876, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5877, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5878, %r5753, %r5876;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5881, %r5878, %r5877;
	// end inline asm
	// begin inline asm
	mov.b32 %r5887, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5885, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5886, %r5887, %r5885;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5889, %r5761, %r5886;
	// end inline asm
	// begin inline asm
	mov.b32 %r5892, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5893, %r5887, %r5892;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5896, %r5769, %r5893;
	// end inline asm
	// begin inline asm
	mov.b32 %r5899, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5900, %r5887, %r5899;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5903, %r5777, %r5900;
	// end inline asm
	// begin inline asm
	mov.b32 %r5906, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5907, %r5887, %r5906;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5910, %r5785, %r5907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5913, %r5889, %r5903, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5917, %r5896, %r5910, %r2324;
	// end inline asm
	shl.b32 	%r5924, %r5917, 4;
	// begin inline asm
	lop3.b32 %r5921, %r2330, %r5913, %r5924, 202;
	// end inline asm
	xor.b32  	%r7895, %r5921, -2004318072;
	// begin inline asm
	mov.b32 %r5928, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5926, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5927, %r5928, %r5926;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5930, %r5793, %r5927;
	// end inline asm
	// begin inline asm
	mov.b32 %r5933, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5934, %r5928, %r5933;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5937, %r5801, %r5934;
	// end inline asm
	// begin inline asm
	mov.b32 %r5940, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5941, %r5928, %r5940;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5944, %r5809, %r5941;
	// end inline asm
	// begin inline asm
	mov.b32 %r5947, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5948, %r5928, %r5947;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5951, %r5817, %r5948;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5954, %r5930, %r5944, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5958, %r5937, %r5951, %r2324;
	// end inline asm
	shl.b32 	%r5965, %r5958, 4;
	// begin inline asm
	lop3.b32 %r5962, %r2330, %r5954, %r5965, 202;
	// end inline asm
	xor.b32  	%r7896, %r5962, -2004318072;
	// begin inline asm
	mov.b32 %r5969, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5968, %r5969, %r5967;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5971, %r5825, %r5968;
	// end inline asm
	// begin inline asm
	mov.b32 %r5974, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5975, %r5969, %r5974;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5978, %r5833, %r5975;
	// end inline asm
	// begin inline asm
	mov.b32 %r5981, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5982, %r5969, %r5981;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5985, %r5841, %r5982;
	// end inline asm
	// begin inline asm
	mov.b32 %r5988, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5989, %r5969, %r5988;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5992, %r5849, %r5989;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5995, %r5971, %r5985, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5999, %r5978, %r5992, %r2324;
	// end inline asm
	shl.b32 	%r6006, %r5999, 4;
	// begin inline asm
	lop3.b32 %r6003, %r2330, %r5995, %r6006, 202;
	// end inline asm
	xor.b32  	%r7897, %r6003, -2004318072;
	// begin inline asm
	mov.b32 %r6010, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6008, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6009, %r6010, %r6008;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6012, %r5857, %r6009;
	// end inline asm
	// begin inline asm
	mov.b32 %r6015, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6016, %r6010, %r6015;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6019, %r5865, %r6016;
	// end inline asm
	// begin inline asm
	mov.b32 %r6022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6023, %r6010, %r6022;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6026, %r5873, %r6023;
	// end inline asm
	// begin inline asm
	mov.b32 %r6029, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6030, %r6010, %r6029;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6033, %r5881, %r6030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6036, %r6012, %r6026, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6040, %r6019, %r6033, %r2324;
	// end inline asm
	shl.b32 	%r6047, %r6040, 4;
	// begin inline asm
	lop3.b32 %r6044, %r2330, %r6036, %r6047, 202;
	// end inline asm
	xor.b32  	%r7898, %r6044, -2004318072;
	st.shared.u32 	[%rd187], %r7895;
	st.shared.u32 	[%rd188], %r7896;
	st.shared.u32 	[%rd189], %r7897;
	st.shared.u32 	[%rd190], %r7898;
	ld.shared.u32 	%r8038, [%rd130];
	ld.shared.u32 	%r8037, [%rd132];
	ld.shared.u32 	%r8032, [%rd134];
	ld.shared.u32 	%r8031, [%rd136];
	// begin inline asm
	mov.b32 %r6053, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6064, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6052, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r6050, %r663, %r6052, %r6053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6054, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6055, %r6053, %r6054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6058, %r6050, %r6055;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6061, %r674, %r6052, %r6064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6065, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6066, %r6064, %r6065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6069, %r6061, %r6066;
	// end inline asm
	shr.u32 	%r6074, %r6052, 8;
	// begin inline asm
	lop3.b32 %r6072, %r663, %r6074, %r6053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6076, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6077, %r6053, %r6076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6080, %r6072, %r6077;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6083, %r674, %r6074, %r6064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6087, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6088, %r6064, %r6087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6091, %r6083, %r6088;
	// end inline asm
	// begin inline asm
	mov.b32 %r6099, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6110, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6098, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r6096, %r663, %r6098, %r6099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6100, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6101, %r6099, %r6100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6104, %r6096, %r6101;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6107, %r674, %r6098, %r6110, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6112, %r6110, %r6111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6115, %r6107, %r6112;
	// end inline asm
	shr.u32 	%r6120, %r6098, 8;
	// begin inline asm
	lop3.b32 %r6118, %r663, %r6120, %r6099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6122, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6123, %r6099, %r6122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6126, %r6118, %r6123;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6129, %r674, %r6120, %r6110, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6133, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6134, %r6110, %r6133;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6137, %r6129, %r6134;
	// end inline asm
	// begin inline asm
	mov.b32 %r6145, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6156, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6144, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r6142, %r663, %r6144, %r6145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6147, %r6145, %r6146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6150, %r6142, %r6147;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6153, %r674, %r6144, %r6156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6157, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6158, %r6156, %r6157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6161, %r6153, %r6158;
	// end inline asm
	shr.u32 	%r6166, %r6144, 8;
	// begin inline asm
	lop3.b32 %r6164, %r663, %r6166, %r6145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6168, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6169, %r6145, %r6168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6172, %r6164, %r6169;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6175, %r674, %r6166, %r6156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6179, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6180, %r6156, %r6179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6183, %r6175, %r6180;
	// end inline asm
	// begin inline asm
	mov.b32 %r6191, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6202, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6190, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r6188, %r663, %r6190, %r6191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6193, %r6191, %r6192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6196, %r6188, %r6193;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6199, %r674, %r6190, %r6202, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6203, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6204, %r6202, %r6203;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6207, %r6199, %r6204;
	// end inline asm
	shr.u32 	%r6212, %r6190, 8;
	// begin inline asm
	lop3.b32 %r6210, %r663, %r6212, %r6191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6214, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6215, %r6191, %r6214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6218, %r6210, %r6215;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6221, %r674, %r6212, %r6202, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6225, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6226, %r6202, %r6225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6229, %r6221, %r6226;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6232, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6234, %r6232, %r6058;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6237, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6239, %r6237, %r6069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6242, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6244, %r6242, %r6080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6247, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6249, %r6247, %r6091;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6252, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6254, %r6252, %r6104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6257, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6259, %r6257, %r6115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6262, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6264, %r6262, %r6126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6267, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6269, %r6267, %r6137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6272, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6274, %r6272, %r6150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6277, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6279, %r6277, %r6161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6282, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6284, %r6282, %r6172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6287, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6289, %r6287, %r6183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6292, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6294, %r6292, %r6196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6297, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6299, %r6297, %r6207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6302, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6304, %r6302, %r6218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6307, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6309, %r6307, %r6229;
	// end inline asm
	// begin inline asm
	mov.b32 %r6317, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6328, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6314, %r663, %r664, %r6317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6319, %r6317, %r6318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6322, %r6314, %r6319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6325, %r674, %r664, %r6328, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6330, %r6328, %r6329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6333, %r6325, %r6330;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6336, %r663, %r686, %r6317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6340, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6341, %r6317, %r6340;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6344, %r6336, %r6341;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6347, %r674, %r686, %r6328, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6351, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6352, %r6328, %r6351;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6355, %r6347, %r6352;
	// end inline asm
	// begin inline asm
	mov.b32 %r6363, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6374, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6360, %r663, %r710, %r6363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6365, %r6363, %r6364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6368, %r6360, %r6365;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6371, %r674, %r710, %r6374, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6375, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6376, %r6374, %r6375;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6379, %r6371, %r6376;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6382, %r663, %r732, %r6363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6386, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6387, %r6363, %r6386;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6390, %r6382, %r6387;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6393, %r674, %r732, %r6374, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6397, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6398, %r6374, %r6397;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6401, %r6393, %r6398;
	// end inline asm
	// begin inline asm
	mov.b32 %r6409, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6420, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6406, %r663, %r756, %r6409, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6410, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6411, %r6409, %r6410;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6414, %r6406, %r6411;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6417, %r674, %r756, %r6420, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6421, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6422, %r6420, %r6421;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6425, %r6417, %r6422;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6428, %r663, %r778, %r6409, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6432, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6433, %r6409, %r6432;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6436, %r6428, %r6433;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6439, %r674, %r778, %r6420, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6443, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6444, %r6420, %r6443;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6447, %r6439, %r6444;
	// end inline asm
	// begin inline asm
	mov.b32 %r6455, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6466, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6452, %r663, %r802, %r6455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6456, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6457, %r6455, %r6456;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6460, %r6452, %r6457;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6463, %r674, %r802, %r6466, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6467, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6468, %r6466, %r6467;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6471, %r6463, %r6468;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6474, %r663, %r824, %r6455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6478, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6479, %r6455, %r6478;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6482, %r6474, %r6479;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6485, %r674, %r824, %r6466, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6489, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6490, %r6466, %r6489;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6493, %r6485, %r6490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6496, %r220, %r6322, %r6234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6500, %r220, %r6333, %r6239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6504, %r220, %r6344, %r6244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6508, %r220, %r6355, %r6249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6512, %r220, %r6368, %r6254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6516, %r220, %r6379, %r6259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6520, %r220, %r6390, %r6264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6524, %r220, %r6401, %r6269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6528, %r220, %r6414, %r6274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6532, %r220, %r6425, %r6279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6536, %r220, %r6436, %r6284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6540, %r220, %r6447, %r6289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6544, %r220, %r6460, %r6294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6548, %r220, %r6471, %r6299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6552, %r220, %r6482, %r6304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6556, %r220, %r6493, %r6309;
	// end inline asm
	// begin inline asm
	mov.b32 %r6565, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6576, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6562, %r663, %r2460, %r6565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6566, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6567, %r6565, %r6566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6570, %r6562, %r6567;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6573, %r674, %r2460, %r6576, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6577, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6578, %r6576, %r6577;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6581, %r6573, %r6578;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6584, %r663, %r2482, %r6565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6588, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6589, %r6565, %r6588;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6592, %r6584, %r6589;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6595, %r674, %r2482, %r6576, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6599, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6600, %r6576, %r6599;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6603, %r6595, %r6600;
	// end inline asm
	// begin inline asm
	mov.b32 %r6611, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6622, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6608, %r663, %r2506, %r6611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6612, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6613, %r6611, %r6612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6616, %r6608, %r6613;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6619, %r674, %r2506, %r6622, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6623, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6624, %r6622, %r6623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6627, %r6619, %r6624;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6630, %r663, %r2528, %r6611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6634, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6635, %r6611, %r6634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6638, %r6630, %r6635;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6641, %r674, %r2528, %r6622, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6645, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6646, %r6622, %r6645;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6649, %r6641, %r6646;
	// end inline asm
	// begin inline asm
	mov.b32 %r6657, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6668, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6654, %r663, %r2552, %r6657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6658, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6659, %r6657, %r6658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6662, %r6654, %r6659;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6665, %r674, %r2552, %r6668, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6669, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6670, %r6668, %r6669;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6673, %r6665, %r6670;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6676, %r663, %r2574, %r6657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6680, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6681, %r6657, %r6680;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6684, %r6676, %r6681;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6687, %r674, %r2574, %r6668, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6691, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6692, %r6668, %r6691;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6695, %r6687, %r6692;
	// end inline asm
	// begin inline asm
	mov.b32 %r6703, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6714, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6700, %r663, %r2598, %r6703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6704, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6705, %r6703, %r6704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6708, %r6700, %r6705;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6711, %r674, %r2598, %r6714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6715, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6716, %r6714, %r6715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6719, %r6711, %r6716;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6722, %r663, %r2620, %r6703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6726, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6727, %r6703, %r6726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6730, %r6722, %r6727;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6733, %r674, %r2620, %r6714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6737, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6738, %r6714, %r6737;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6741, %r6733, %r6738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6744, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6746, %r6744, %r6570, %r6496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6750, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6752, %r6750, %r6581, %r6500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6756, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6758, %r6756, %r6592, %r6504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6762, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6764, %r6762, %r6603, %r6508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6768, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6770, %r6768, %r6616, %r6512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6774, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6776, %r6774, %r6627, %r6516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6780, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6782, %r6780, %r6638, %r6520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6786, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6788, %r6786, %r6649, %r6524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6792, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6794, %r6792, %r6662, %r6528;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6798, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6800, %r6798, %r6673, %r6532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6804, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6806, %r6804, %r6684, %r6536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6810, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6812, %r6810, %r6695, %r6540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6816, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6818, %r6816, %r6708, %r6544;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6822, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6824, %r6822, %r6719, %r6548;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6828, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6830, %r6828, %r6730, %r6552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6834, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6836, %r6834, %r6741, %r6556;
	// end inline asm
	// begin inline asm
	mov.b32 %r6845, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6856, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6842, %r663, %r4256, %r6845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6846, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6847, %r6845, %r6846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6850, %r6842, %r6847;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6853, %r674, %r4256, %r6856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6857, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6858, %r6856, %r6857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6861, %r6853, %r6858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6864, %r663, %r4278, %r6845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6868, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6869, %r6845, %r6868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6872, %r6864, %r6869;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6875, %r674, %r4278, %r6856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6879, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6880, %r6856, %r6879;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6883, %r6875, %r6880;
	// end inline asm
	// begin inline asm
	mov.b32 %r6891, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6902, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6888, %r663, %r4302, %r6891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6892, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6893, %r6891, %r6892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6896, %r6888, %r6893;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6899, %r674, %r4302, %r6902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6903, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6904, %r6902, %r6903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6907, %r6899, %r6904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6910, %r663, %r4324, %r6891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6914, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6915, %r6891, %r6914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6918, %r6910, %r6915;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6921, %r674, %r4324, %r6902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6925, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6926, %r6902, %r6925;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6929, %r6921, %r6926;
	// end inline asm
	// begin inline asm
	mov.b32 %r6937, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6948, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6934, %r663, %r4348, %r6937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6938, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6939, %r6937, %r6938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6942, %r6934, %r6939;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6945, %r674, %r4348, %r6948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6949, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6950, %r6948, %r6949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6953, %r6945, %r6950;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6956, %r663, %r4370, %r6937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6960, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6961, %r6937, %r6960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6964, %r6956, %r6961;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6967, %r674, %r4370, %r6948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6971, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6972, %r6948, %r6971;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6975, %r6967, %r6972;
	// end inline asm
	// begin inline asm
	mov.b32 %r6983, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6994, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6980, %r663, %r4394, %r6983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6984, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6985, %r6983, %r6984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6988, %r6980, %r6985;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6991, %r674, %r4394, %r6994, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6995, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6996, %r6994, %r6995;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6999, %r6991, %r6996;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7002, %r663, %r4416, %r6983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7006, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7007, %r6983, %r7006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7010, %r7002, %r7007;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7013, %r674, %r4416, %r6994, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7017, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7018, %r6994, %r7017;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7021, %r7013, %r7018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7095, %r256, %r6850, %r6746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7092, %r256, %r6861, %r6752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7104, %r256, %r6872, %r6758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7101, %r256, %r6883, %r6764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7113, %r256, %r6896, %r6770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7110, %r256, %r6907, %r6776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7122, %r256, %r6918, %r6782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7119, %r256, %r6929, %r6788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7131, %r256, %r6942, %r6794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7128, %r256, %r6953, %r6800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7140, %r256, %r6964, %r6806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7137, %r256, %r6975, %r6812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7149, %r256, %r6988, %r6818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7146, %r256, %r6999, %r6824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7158, %r256, %r7010, %r6830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7155, %r256, %r7021, %r6836;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7088, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7090, %r7088, %r7092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7093, %r302, %r7095, %r7090;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7097, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7099, %r7097, %r7101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7102, %r302, %r7104, %r7099;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7106, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7108, %r7106, %r7110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7111, %r302, %r7113, %r7108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7115, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7117, %r7115, %r7119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7120, %r302, %r7122, %r7117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7124, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7126, %r7124, %r7128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7129, %r302, %r7131, %r7126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7133, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7135, %r7133, %r7137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r302, %r7140, %r7135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7142, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7144, %r7142, %r7146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7147, %r302, %r7149, %r7144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7151, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7153, %r7151, %r7155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7156, %r302, %r7158, %r7153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7160, %r305, %r7095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7163, %r302, %r7092, %r7160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7167, %r305, %r7104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7170, %r302, %r7101, %r7167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7174, %r305, %r7113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7177, %r302, %r7110, %r7174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7181, %r305, %r7122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7184, %r302, %r7119, %r7181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7188, %r305, %r7131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7191, %r302, %r7128, %r7188;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7195, %r305, %r7140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7198, %r302, %r7137, %r7195;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7202, %r305, %r7149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7205, %r302, %r7146, %r7202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7209, %r305, %r7158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7212, %r302, %r7155, %r7209;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7303, %r7300}, {%r349, %r355, %r352, %r358}, {%r7093, %r7163}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7312, %r7309}, {%r349, %r355, %r352, %r358}, {%r7102, %r7170}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7321, %r7318}, {%r349, %r355, %r352, %r358}, {%r7111, %r7177}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7330, %r7327}, {%r349, %r355, %r352, %r358}, {%r7120, %r7184}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7339, %r7336}, {%r349, %r355, %r352, %r358}, {%r7129, %r7191}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7348, %r7345}, {%r349, %r355, %r352, %r358}, {%r7138, %r7198}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7357, %r7354}, {%r349, %r355, %r352, %r358}, {%r7147, %r7205}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7366, %r7363}, {%r349, %r355, %r352, %r358}, {%r7156, %r7212}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7296, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7298, %r7296, %r7300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7301, %r393, %r7303, %r7298;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7305, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7307, %r7305, %r7309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7310, %r393, %r7312, %r7307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7314, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7316, %r7314, %r7318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7319, %r393, %r7321, %r7316;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7323, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7325, %r7323, %r7327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7328, %r393, %r7330, %r7325;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7332, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7334, %r7332, %r7336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7337, %r393, %r7339, %r7334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7341, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7343, %r7341, %r7345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7346, %r393, %r7348, %r7343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7350, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7352, %r7350, %r7354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7355, %r393, %r7357, %r7352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7359, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7361, %r7359, %r7363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7364, %r393, %r7366, %r7361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7368, %r396, %r7303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7371, %r393, %r7300, %r7368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7375, %r396, %r7312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7378, %r393, %r7309, %r7375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7382, %r396, %r7321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7385, %r393, %r7318, %r7382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7389, %r396, %r7330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7392, %r393, %r7327, %r7389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7396, %r396, %r7339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7399, %r393, %r7336, %r7396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7403, %r396, %r7348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7406, %r393, %r7345, %r7403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7410, %r396, %r7357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7413, %r393, %r7354, %r7410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7417, %r396, %r7366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7420, %r393, %r7363, %r7417;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7424, %r7425}, {%r427, %r433, %r430, %r436}, {%r7301, %r7371}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7434, %r7435}, {%r427, %r433, %r430, %r436}, {%r7310, %r7378}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7444, %r7445}, {%r427, %r433, %r430, %r436}, {%r7319, %r7385}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7454, %r7455}, {%r427, %r433, %r430, %r436}, {%r7328, %r7392}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7464, %r7465}, {%r427, %r433, %r430, %r436}, {%r7337, %r7399}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7474, %r7475}, {%r427, %r433, %r430, %r436}, {%r7346, %r7406}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7484, %r7485}, {%r427, %r433, %r430, %r436}, {%r7355, %r7413}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7494, %r7495}, {%r427, %r433, %r430, %r436}, {%r7364, %r7420}, {%r7998, %r7998};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7504, %r117, %r7424;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7507, %r117, %r7425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7510, %r117, %r7434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7513, %r117, %r7435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7516, %r117, %r7444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7519, %r117, %r7445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7522, %r117, %r7454;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7525, %r117, %r7455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7528, %r117, %r7464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7531, %r117, %r7465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7534, %r117, %r7474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7537, %r117, %r7475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7540, %r117, %r7484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7543, %r117, %r7485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7546, %r117, %r7494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7549, %r117, %r7495;
	// end inline asm
	// begin inline asm
	mov.b32 %r7552, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7553, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7554, %r7504, %r7552;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7557, %r7554, %r7553;
	// end inline asm
	// begin inline asm
	mov.b32 %r7560, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7561, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7562, %r7507, %r7560;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7565, %r7562, %r7561;
	// end inline asm
	// begin inline asm
	mov.b32 %r7568, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7569, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7570, %r7510, %r7568;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7573, %r7570, %r7569;
	// end inline asm
	// begin inline asm
	mov.b32 %r7576, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7577, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7578, %r7513, %r7576;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7581, %r7578, %r7577;
	// end inline asm
	// begin inline asm
	mov.b32 %r7584, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7585, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7586, %r7516, %r7584;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7589, %r7586, %r7585;
	// end inline asm
	// begin inline asm
	mov.b32 %r7592, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7593, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7594, %r7519, %r7592;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7597, %r7594, %r7593;
	// end inline asm
	// begin inline asm
	mov.b32 %r7600, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7601, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7602, %r7522, %r7600;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7605, %r7602, %r7601;
	// end inline asm
	// begin inline asm
	mov.b32 %r7608, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7609, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7610, %r7525, %r7608;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7613, %r7610, %r7609;
	// end inline asm
	// begin inline asm
	mov.b32 %r7616, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7617, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7618, %r7528, %r7616;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7621, %r7618, %r7617;
	// end inline asm
	// begin inline asm
	mov.b32 %r7624, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7625, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7626, %r7531, %r7624;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7629, %r7626, %r7625;
	// end inline asm
	// begin inline asm
	mov.b32 %r7632, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7633, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7634, %r7534, %r7632;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7637, %r7634, %r7633;
	// end inline asm
	// begin inline asm
	mov.b32 %r7640, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7641, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7642, %r7537, %r7640;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7645, %r7642, %r7641;
	// end inline asm
	// begin inline asm
	mov.b32 %r7648, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7649, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7650, %r7540, %r7648;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7653, %r7650, %r7649;
	// end inline asm
	// begin inline asm
	mov.b32 %r7656, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7657, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7658, %r7543, %r7656;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7661, %r7658, %r7657;
	// end inline asm
	// begin inline asm
	mov.b32 %r7664, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7665, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7666, %r7546, %r7664;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7669, %r7666, %r7665;
	// end inline asm
	// begin inline asm
	mov.b32 %r7672, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7673, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7674, %r7549, %r7672;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7677, %r7674, %r7673;
	// end inline asm
	// begin inline asm
	mov.b32 %r7683, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7681, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7682, %r7683, %r7681;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7685, %r7557, %r7682;
	// end inline asm
	// begin inline asm
	mov.b32 %r7688, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7689, %r7683, %r7688;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7692, %r7565, %r7689;
	// end inline asm
	// begin inline asm
	mov.b32 %r7695, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7696, %r7683, %r7695;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7699, %r7573, %r7696;
	// end inline asm
	// begin inline asm
	mov.b32 %r7702, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7703, %r7683, %r7702;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7706, %r7581, %r7703;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7709, %r7685, %r7699, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7713, %r7692, %r7706, %r2324;
	// end inline asm
	shl.b32 	%r7720, %r7713, 4;
	// begin inline asm
	lop3.b32 %r7717, %r2330, %r7709, %r7720, 202;
	// end inline asm
	xor.b32  	%r7899, %r7717, -2004318072;
	// begin inline asm
	mov.b32 %r7724, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7722, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7723, %r7724, %r7722;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7726, %r7589, %r7723;
	// end inline asm
	// begin inline asm
	mov.b32 %r7729, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7730, %r7724, %r7729;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7733, %r7597, %r7730;
	// end inline asm
	// begin inline asm
	mov.b32 %r7736, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7737, %r7724, %r7736;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7740, %r7605, %r7737;
	// end inline asm
	// begin inline asm
	mov.b32 %r7743, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7744, %r7724, %r7743;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7747, %r7613, %r7744;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7750, %r7726, %r7740, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7754, %r7733, %r7747, %r2324;
	// end inline asm
	shl.b32 	%r7761, %r7754, 4;
	// begin inline asm
	lop3.b32 %r7758, %r2330, %r7750, %r7761, 202;
	// end inline asm
	xor.b32  	%r7900, %r7758, -2004318072;
	// begin inline asm
	mov.b32 %r7765, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7763, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7764, %r7765, %r7763;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7767, %r7621, %r7764;
	// end inline asm
	// begin inline asm
	mov.b32 %r7770, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7771, %r7765, %r7770;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7774, %r7629, %r7771;
	// end inline asm
	// begin inline asm
	mov.b32 %r7777, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7778, %r7765, %r7777;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7781, %r7637, %r7778;
	// end inline asm
	// begin inline asm
	mov.b32 %r7784, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7785, %r7765, %r7784;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7788, %r7645, %r7785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7791, %r7767, %r7781, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7795, %r7774, %r7788, %r2324;
	// end inline asm
	shl.b32 	%r7802, %r7795, 4;
	// begin inline asm
	lop3.b32 %r7799, %r2330, %r7791, %r7802, 202;
	// end inline asm
	xor.b32  	%r7901, %r7799, -2004318072;
	// begin inline asm
	mov.b32 %r7806, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7805, %r7806, %r7804;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7808, %r7653, %r7805;
	// end inline asm
	// begin inline asm
	mov.b32 %r7811, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7812, %r7806, %r7811;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7815, %r7661, %r7812;
	// end inline asm
	// begin inline asm
	mov.b32 %r7818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7819, %r7806, %r7818;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7822, %r7669, %r7819;
	// end inline asm
	// begin inline asm
	mov.b32 %r7825, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7826, %r7806, %r7825;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7829, %r7677, %r7826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7832, %r7808, %r7822, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7836, %r7815, %r7829, %r2324;
	// end inline asm
	shl.b32 	%r7843, %r7836, 4;
	// begin inline asm
	lop3.b32 %r7840, %r2330, %r7832, %r7843, 202;
	// end inline asm
	xor.b32  	%r7902, %r7840, -2004318072;
	st.shared.u32 	[%rd187], %r7899;
	st.shared.u32 	[%rd188], %r7900;
	st.shared.u32 	[%rd189], %r7901;
	st.shared.u32 	[%rd190], %r7902;
	add.s32 	%r8030, %r8030, 64;
	add.s64 	%rd190, %rd190, 8324;
	add.s64 	%rd189, %rd189, 8324;
	add.s64 	%rd188, %rd188, 8324;
	add.s64 	%rd187, %rd187, 8324;
	setp.eq.s32 	%p238, %r8030, 256;
	@%p238 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit16936
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7908, [%rd5];
	ld.shared.u32 	%r7909, [%rd6+128];
	ld.shared.u32 	%r7916, [%rd6+4];
	ld.shared.u32 	%r7917, [%rd6+132];
	ld.shared.u32 	%r7924, [%rd5+8324];
	ld.shared.u32 	%r7925, [%rd6+8452];
	ld.shared.u32 	%r7932, [%rd6+8328];
	ld.shared.u32 	%r7933, [%rd6+8456];
	ld.shared.u32 	%r7940, [%rd5+16648];
	ld.shared.u32 	%r7941, [%rd6+16776];
	ld.shared.u32 	%r7948, [%rd6+16652];
	ld.shared.u32 	%r7949, [%rd6+16780];
	ld.shared.u32 	%r7956, [%rd5+24972];
	ld.shared.u32 	%r7957, [%rd6+25100];
	ld.shared.u32 	%r7964, [%rd6+24976];
	ld.shared.u32 	%r7965, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7903, %r7908, %r7909, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7907, %r7908, %r7909, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7911, %r7916, %r7917, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7915, %r7916, %r7917, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7919, %r7924, %r7925, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7923, %r7924, %r7925, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7927, %r7932, %r7933, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7931, %r7932, %r7933, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7935, %r7940, %r7941, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7939, %r7940, %r7941, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7943, %r7948, %r7949, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7947, %r7948, %r7949, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7951, %r7956, %r7957, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7955, %r7956, %r7957, %r580;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7959, %r7964, %r7965, %r576;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7963, %r7964, %r7965, %r580;
	// end inline asm
	selp.b32 	%r7967, %r7907, %r7903, %p225;
	shfl.sync.bfly.b32	%r168, %r7967, 8, 31, -1;
	selp.b32 	%r7968, %r7915, %r7911, %p225;
	shfl.sync.bfly.b32	%r169, %r7968, 8, 31, -1;
	selp.b32 	%r7969, %r7923, %r7919, %p225;
	shfl.sync.bfly.b32	%r7970, %r7969, 8, 31, -1;
	selp.b32 	%r7971, %r7931, %r7927, %p225;
	shfl.sync.bfly.b32	%r7972, %r7971, 8, 31, -1;
	selp.b32 	%r7973, %r7939, %r7935, %p225;
	shfl.sync.bfly.b32	%r7974, %r7973, 8, 31, -1;
	selp.b32 	%r7975, %r7947, %r7943, %p225;
	shfl.sync.bfly.b32	%r7976, %r7975, 8, 31, -1;
	selp.b32 	%r7977, %r7955, %r7951, %p225;
	shfl.sync.bfly.b32	%r7978, %r7977, 8, 31, -1;
	selp.b32 	%r7979, %r7963, %r7959, %p225;
	shfl.sync.bfly.b32	%r7980, %r7979, 8, 31, -1;
	and.b32  	%r182, %r108, 256;
	setp.eq.s32 	%p240, %r182, 0;
	shl.b32 	%r8043, %r108, 12;
	@%p240 bra 	$L__BB0_148;
// %bb.132:                             // %pass16112
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7981, %r169, %r7915, %p225;
	selp.b32 	%r7982, %r7911, %r169, %p225;
	selp.b32 	%r7983, %r168, %r7907, %p225;
	selp.b32 	%r7984, %r7903, %r168, %p225;
	or.b32  	%r7986, %r95, %r8043;
	cvt.s64.s32 	%rd137, %r7986;
	add.s64 	%rd138, %rd137, %rd7;
	shr.u64 	%rd139, %rd138, 39;
	add.s64 	%rd140, %rd138, %rd139;
	shr.s64 	%rd141, %rd140, 25;
	setp.lt.s64 	%p242, %rd138, 0;
	and.b64  	%rd142, %rd140, -33554432;
	setp.ne.s64 	%p243, %rd142, %rd138;
	and.pred  	%p244, %p242, %p243;
	selp.u64 	%rd143, 1, 0, %p244;
	sub.s64 	%rd144, %rd143, %rd141;
	shl.b64 	%rd145, %rd144, 25;
	add.s64 	%rd146, %rd145, %rd138;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd148, %rd3, %rd147;
	st.global.v4.u32 	[%rd148], {%r7984, %r7982, %r7983, %r7981};
$L__BB0_148:                            // %pass16156
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7987, %r182, 64;
	setp.gt.u32 	%p245, %r7987, 191;
	@%p245 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_150;
$L__BB0_149:                            // %pass16205
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r170, %r7919, %r7970, %p225;
	selp.b32 	%r171, %r7970, %r7923, %p225;
	selp.b32 	%r172, %r7927, %r7972, %p225;
	selp.b32 	%r173, %r7972, %r7931, %p225;
	or.b32  	%r7988, %r8043, %r95;
	or.b32  	%r7989, %r7988, 262144;
	cvt.s64.s32 	%rd149, %r7989;
	add.s64 	%rd150, %rd149, %rd7;
	shr.u64 	%rd151, %rd150, 39;
	add.s64 	%rd152, %rd150, %rd151;
	shr.s64 	%rd153, %rd152, 25;
	setp.lt.s64 	%p246, %rd150, 0;
	and.b64  	%rd154, %rd152, -33554432;
	setp.ne.s64 	%p247, %rd154, %rd150;
	and.pred  	%p248, %p246, %p247;
	selp.u64 	%rd155, 1, 0, %p248;
	sub.s64 	%rd156, %rd155, %rd153;
	shl.b64 	%rd157, %rd156, 25;
	add.s64 	%rd158, %rd157, %rd150;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd160, %rd3, %rd159;
	st.global.v4.u32 	[%rd160], {%r170, %r172, %r171, %r173};
$L__BB0_150:                            // %pass16249
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r178, %r7951, %r7978, %p225;
	selp.b32 	%r179, %r7978, %r7955, %p225;
	selp.b32 	%r180, %r7959, %r7980, %p225;
	selp.b32 	%r181, %r7980, %r7963, %p225;
	or.b32  	%r7990, %r182, 128;
	setp.lt.u32 	%p249, %r7990, 192;
	or.b32  	%r8000, %r8043, %r95;
	@%p249 bra 	$L__BB0_152;
// %bb.151:                             // %pass16298
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r174, %r7935, %r7974, %p225;
	selp.b32 	%r175, %r7974, %r7939, %p225;
	selp.b32 	%r176, %r7943, %r7976, %p225;
	selp.b32 	%r177, %r7976, %r7947, %p225;
	or.b32  	%r7992, %r8000, 524288;
	cvt.s64.s32 	%rd161, %r7992;
	add.s64 	%rd162, %rd161, %rd7;
	shr.u64 	%rd163, %rd162, 39;
	add.s64 	%rd164, %rd162, %rd163;
	shr.s64 	%rd165, %rd164, 25;
	setp.lt.s64 	%p250, %rd162, 0;
	and.b64  	%rd166, %rd164, -33554432;
	setp.ne.s64 	%p251, %rd166, %rd162;
	and.pred  	%p252, %p250, %p251;
	selp.u64 	%rd167, 1, 0, %p252;
	sub.s64 	%rd168, %rd167, %rd165;
	shl.b64 	%rd169, %rd168, 25;
	add.s64 	%rd170, %rd169, %rd162;
	shl.b64 	%rd171, %rd170, 2;
	add.s64 	%rd172, %rd3, %rd171;
	st.global.v4.u32 	[%rd172], {%r174, %r176, %r175, %r177};
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L38264
	st.global.u32 	[%rd4], %r7998;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r7997, 2;
	st.global.u32 	[%rd4], %r7997;
	mov.u64 	%rd185, exception3325;
	cvta.global.u64 	%rd186, %rd185;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd186;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd61, exception1;
	cvta.global.u64 	%rd62, %rd61;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd62;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L38363
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11281, 
	(
	);
	} // callseq 3
	mov.u64 	%rd70, exception1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L38360
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11281, 
	(
	);
	} // callseq 7
	mov.u64 	%rd76, exception1;
	cvta.global.u64 	%rd77, %rd76;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd77;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L38357
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11281, 
	(
	);
	} // callseq 13
	mov.u64 	%rd90, exception1;
	cvta.global.u64 	%rd91, %rd90;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd91;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r183;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
