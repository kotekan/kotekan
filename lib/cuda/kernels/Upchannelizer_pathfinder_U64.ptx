// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_11274
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11285
(
	.param .align 8 .b8 julia_power_by_squaring_11285_param_0[16],
	.param .b64 julia_power_by_squaring_11285_param_1,
	.param .b64 julia_power_by_squaring_11285_param_2
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3325[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<260>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8046>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<191>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r191, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd40, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r192, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r192, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd57, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd41, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r193, %r1, 9;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r194, %r193, %r2;
	or.b32  	%r195, %r194, %r4;
	mul.wide.u32 	%rd63, %r195, 4;
	add.s64 	%rd4, %rd57, %rd63;
	mov.u32 	%r196, 1;
	st.global.u32 	[%rd4], %r196;
	ld.global.u32 	%r5, [%rd41];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L203
	ld.param.u64 	%rd45, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd45];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L213
	ld.param.u64 	%rd49, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd49];
	sub.s32 	%r197, %r6, %r5;
	and.b32  	%r198, %r197, 255;
	setp.ne.s32 	%p6, %r198, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L219
	ld.param.u64 	%rd53, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd53];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 256;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L229
	not.b32 	%r199, %r7;
	add.s32 	%r200, %r199, %r8;
	and.b32  	%r201, %r200, 3;
	setp.eq.s32 	%p12, %r201, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass166
	bfe.u32 	%r125, %r2, 2, 1;
	shr.u32 	%r126, %r2, 4;
	shl.b32 	%r207, %r126, 1;
	shl.b32 	%r208, %r125, 2;
	shl.b32 	%r127, %r2, 3;
	and.b32  	%r209, %r127, 24;
	or.b32  	%r210, %r208, %r209;
	or.b32  	%r211, %r207, %r210;
	bfe.u32 	%r212, %r2, 3, 1;
	or.b32  	%r129, %r212, %r211;
	or.b32  	%r130, %r129, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r129;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L571
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L574
	cvt.rn.f32.s32 	%f217, %r130;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L591
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L594
	or.b32  	%r230, %r129, 64;
	or.b32  	%r10, %r129, 96;
	cvt.rn.f32.s32 	%f252, %r230;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L673
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L676
	and.b32  	%r116, %r2, 16;
	shl.b32 	%r118, %r1, 6;
	cvt.rn.f32.s32 	%f286, %r10;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L693
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L696
	shl.b32 	%r114, %r2, 2;
	and.b32  	%r121, %r2, 2;
	or.b32  	%r122, %r118, %r116;
	or.b32  	%r248, %r129, 128;
	or.b32  	%r12, %r129, 160;
	cvt.rn.f32.s32 	%f321, %r248;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L775
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L778
	and.b32  	%r115, %r114, 32;
	or.b32  	%r202, %r122, %r121;
	cvt.rn.f32.s32 	%f355, %r12;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L795
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L798
	and.b32  	%r117, %r114, 4;
	shl.b32 	%r119, %r2, 1;
	or.b32  	%r203, %r202, %r115;
	or.b32  	%r266, %r129, 192;
	or.b32  	%r14, %r129, 224;
	cvt.rn.f32.s32 	%f390, %r266;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L877
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L880
	and.b32  	%r120, %r119, 8;
	or.b32  	%r204, %r203, %r117;
	cvt.rn.f32.s32 	%f424, %r14;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L897
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L900
	or.b32  	%r205, %r204, %r120;
	mul.lo.s32 	%r16, %r129, 63;
	cvt.rn.f32.s32 	%f458, %r16;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f884;
	and.b32  	%r284, %r18, 8388607;
	or.b32  	%r8002, %r284, 1065353216;
	mov.b32 	%f883, %r8002;
	add.s32 	%r285, %r18, -1073741824;
	and.b32  	%r8003, %r285, -8388608;
	setp.eq.s32 	%p68, %r8003, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r286, %r8003, 192937984;
	add.s32 	%r287, %r8002, %r286;
	mov.b32 	%f470, %r287;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r8003, %r8003, %r286;
	mov.b32 	%r8002, %f883;
	setp.ne.s32 	%p69, %r8003, 0;
	setp.ne.s32 	%p70, %r8002, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r206, %r205, 1;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r288, %f35;
	and.b32  	%r289, %r288, -2147483648;
	mov.b32 	%r290, %f884;
	or.b32  	%r291, %r289, %r290;
	mov.b32 	%f884, %r291;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd64, %r206, 4;
	add.s32 	%r300, %r16, 2016;
	cvt.rn.f32.s32 	%f510, %r300;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f888;
	and.b32  	%r301, %r26, 8388607;
	or.b32  	%r8004, %r301, 1065353216;
	mov.b32 	%f887, %r8004;
	add.s32 	%r302, %r26, -1073741824;
	and.b32  	%r8005, %r302, -8388608;
	setp.eq.s32 	%p88, %r8005, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i897.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i897
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r303, %r8005, 192937984;
	add.s32 	%r304, %r8004, %r303;
	mov.b32 	%f522, %r304;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r8005, %r8005, %r303;
	mov.b32 	%r8004, %f887;
	setp.ne.s32 	%p89, %r8005, 0;
	setp.ne.s32 	%p90, %r8004, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i899
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i876
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i880
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i883
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i902
	add.s64 	%rd65, %rd1, %rd64;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r305, %f54;
	and.b32  	%r306, %r305, -2147483648;
	mov.b32 	%r307, %f888;
	or.b32  	%r308, %r306, %r307;
	mov.b32 	%f888, %r308;
$L__BB0_52:                             // %__nv_fmodf.exit903
	ld.global.u32 	%r123, [%rd65];
	mov.u64 	%rd66, 2;
	mov.u64 	%rd67, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11285, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd68, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd68, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass321
	shr.u32 	%r124, %r2, 1;
	shr.u32 	%r128, %r2, 3;
	and.b32  	%r323, %r2, 3;
	and.b32  	%r324, %r128, 2;
	or.b32  	%r325, %r125, %r324;
	and.b32  	%r326, %r124, 4;
	or.b32  	%r131, %r325, %r326;
	mul.lo.s32 	%r327, %r323, %r131;
	shl.b32 	%r328, %r327, 1;
	neg.s32 	%r329, %r328;
	cvt.rn.f32.s32 	%f156, %r329;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r36, %f904;
	and.b32  	%r330, %r36, 8388607;
	or.b32  	%r8006, %r330, 1065353216;
	mov.b32 	%f891, %r8006;
	add.s32 	%r331, %r36, -1073741824;
	and.b32  	%r8007, %r331, -8388608;
	setp.eq.s32 	%p109, %r8007, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i928.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i928
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r332, %r8007, 192937984;
	add.s32 	%r333, %r8006, %r332;
	mov.b32 	%f575, %r333;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r8007, %r8007, %r332;
	mov.b32 	%r8006, %f891;
	setp.ne.s32 	%p110, %r8007, 0;
	setp.ne.s32 	%p111, %r8006, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i930
	setp.gt.u32 	%p113, %r36, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i907
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r35, %f72;
	setp.lt.u32 	%p104, %r35, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r35, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i911
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i914
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i933
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r334, %f157;
	and.b32  	%r43, %r334, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r335, %f892;
	or.b32  	%r336, %r43, %r335;
	mov.b32 	%f892, %r336;
$L__BB0_68:                             // %__nv_fmodf.exit934
	and.b32  	%r345, %r119, 6;
	mov.u32 	%r346, -8;
	sub.s32 	%r347, %r346, %r345;
	mul.lo.s32 	%r348, %r131, %r347;
	cvt.rn.f32.s32 	%f88, %r348;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r45, %f908;
	and.b32  	%r349, %r45, 8388607;
	or.b32  	%r8008, %r349, 1065353216;
	mov.b32 	%f895, %r8008;
	add.s32 	%r350, %r45, -1073741824;
	and.b32  	%r8009, %r350, -8388608;
	setp.eq.s32 	%p129, %r8009, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i959.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i959
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r351, %r8009, 192937984;
	add.s32 	%r352, %r8008, %r351;
	mov.b32 	%f626, %r352;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r8009, %r8009, %r351;
	mov.b32 	%r8008, %f895;
	setp.ne.s32 	%p130, %r8009, 0;
	setp.ne.s32 	%p131, %r8008, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i961
	setp.gt.u32 	%p133, %r45, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i938
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r44, %f92;
	setp.lt.u32 	%p124, %r44, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r44, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i942
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i945
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i964
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r353, %f89;
	and.b32  	%r52, %r353, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r354, %f896;
	or.b32  	%r355, %r52, %r354;
	mov.b32 	%f896, %r355;
$L__BB0_82:                             // %__nv_fmodf.exit965
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11285, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd74, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd74, 64;
	@%p142 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_83;
$L__BB0_135:                            // %pass398
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11285, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd80, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd80;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_147;
// %bb.136:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_137;
$L__BB0_143:
	mov.b32 	%r133, %f912;
	and.b32  	%r376, %r133, 8388607;
	or.b32  	%r8029, %r376, 1065353216;
	mov.b32 	%f911, %r8029;
	add.s32 	%r377, %r133, -1073741824;
	and.b32  	%r8030, %r377, -8388608;
	setp.eq.s32 	%p150, %r8030, 0;
	@%p150 bra 	$L__BB0_146;
// %bb.144:                             // %__nv_fmaf_rn.exit4.i.i.i1083.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_145:                            // %__nv_fmaf_rn.exit4.i.i.i1083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r378, %r8030, 192937984;
	add.s32 	%r379, %r8029, %r378;
	mov.b32 	%f679, %r379;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8030, %r8030, %r378;
	mov.b32 	%r8029, %f911;
	setp.ne.s32 	%p151, %r8030, 0;
	setp.ne.s32 	%p152, %r8029, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_145;
$L__BB0_146:                            // %__internal_fmodf_slowpath_mod.exit.i.i1085
	setp.gt.u32 	%p154, %r133, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_147;
$L__BB0_137:                            // %__nv_fast_fdividef.exit.i.i.i1062
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r132, %f162;
	setp.lt.u32 	%p145, %r132, 1073741824;
	@%p145 bra 	$L__BB0_142;
// %bb.138:
	setp.lt.u32 	%p146, %r132, -2147483647;
	@%p146 bra 	$L__BB0_140;
// %bb.139:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_142;
$L__BB0_140:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_142;
// %bb.141:                             // %__nv_fmaf_rn.exit.i.i.i1066
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_142:                            // %__internal_fmodf_fastpath_quot.exit.i.i1069
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_147:                            // %__internal_fmodf_kernel.exit.i1088
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_149;
// %bb.148:
	mov.b32 	%r380, %f159;
	and.b32  	%r381, %r380, -2147483648;
	mov.b32 	%r382, %f912;
	or.b32  	%r383, %r381, %r382;
	mov.b32 	%f912, %r383;
$L__BB0_149:                            // %__nv_fmodf.exit1089
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11285, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd84, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd84;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r58, %f900;
	and.b32  	%r392, %r58, 8388607;
	or.b32  	%r8010, %r392, 1065353216;
	mov.b32 	%f899, %r8010;
	add.s32 	%r393, %r58, -1073741824;
	and.b32  	%r8011, %r393, -8388608;
	setp.eq.s32 	%p170, %r8011, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i990.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r394, %r8011, 192937984;
	add.s32 	%r395, %r8010, %r394;
	mov.b32 	%f730, %r395;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8011, %r8011, %r394;
	mov.b32 	%r8010, %f899;
	setp.ne.s32 	%p171, %r8011, 0;
	setp.ne.s32 	%p172, %r8010, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i992
	setp.gt.u32 	%p174, %r58, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i969
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p165, %r57, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r57, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i973
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i976
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i995
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r396, %f178;
	and.b32  	%r397, %r396, -2147483648;
	mov.b32 	%r398, %f900;
	or.b32  	%r399, %r397, %r398;
	mov.b32 	%f900, %r399;
$L__BB0_97:                             // %__nv_fmodf.exit996
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11285, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd88, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd88, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass463
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r68, %f904;
	and.b32  	%r414, %r68, 8388607;
	or.b32  	%r8012, %r414, 1065353216;
	mov.b32 	%f903, %r8012;
	add.s32 	%r415, %r68, -1073741824;
	and.b32  	%r8013, %r415, -8388608;
	setp.eq.s32 	%p191, %r8013, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i1021.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i1021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r416, %r8013, 192937984;
	add.s32 	%r417, %r8012, %r416;
	mov.b32 	%f782, %r417;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8013, %r8013, %r416;
	mov.b32 	%r8012, %f903;
	setp.ne.s32 	%p192, %r8013, 0;
	setp.ne.s32 	%p193, %r8012, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i1023
	setp.gt.u32 	%p195, %r68, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i1000
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r67, %f122;
	setp.lt.u32 	%p186, %r67, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r67, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i1004
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i1007
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i1026
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r418, %f904;
	or.b32  	%r419, %r43, %r418;
	mov.b32 	%f904, %r419;
$L__BB0_113:                            // %__nv_fmodf.exit1027
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r76, %f908;
	and.b32  	%r428, %r76, 8388607;
	or.b32  	%r8014, %r428, 1065353216;
	mov.b32 	%f907, %r8014;
	add.s32 	%r429, %r76, -1073741824;
	and.b32  	%r8015, %r429, -8388608;
	setp.eq.s32 	%p211, %r8015, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1052.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r430, %r8015, 192937984;
	add.s32 	%r431, %r8014, %r430;
	mov.b32 	%f832, %r431;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8015, %r8015, %r430;
	mov.b32 	%r8014, %f907;
	setp.ne.s32 	%p212, %r8015, 0;
	setp.ne.s32 	%p213, %r8014, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1054
	setp.gt.u32 	%p215, %r76, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1031
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r75, %f139;
	setp.lt.u32 	%p206, %r75, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r75, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1035
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1038
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1057
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r432, %f908;
	or.b32  	%r433, %r52, %r432;
	mov.b32 	%f908, %r433;
$L__BB0_127:                            // %__nv_fmodf.exit1058
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r8000, 0;
	@%p224 bra 	$L__BB0_154;
// %bb.128:                             // %L1560.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r213, %f190;
	mov.b32 	%r220, %f224;
	mov.b32 	%r231, %f259;
	mov.b32 	%r238, %f293;
	mov.b32 	%r249, %f328;
	mov.b32 	%r256, %f362;
	mov.b32 	%r267, %f397;
	mov.b32 	%r274, %f431;
	mov.b32 	%r292, %f480;
	mov.b32 	%r315, %f532;
	mov.b32 	%r337, %f585;
	mov.b32 	%r368, %f636;
	and.b32  	%r214, %r213, -2147483648;
	and.b32  	%r221, %r220, -2147483648;
	and.b32  	%r232, %r231, -2147483648;
	and.b32  	%r239, %r238, -2147483648;
	and.b32  	%r250, %r249, -2147483648;
	and.b32  	%r257, %r256, -2147483648;
	and.b32  	%r268, %r267, -2147483648;
	and.b32  	%r275, %r274, -2147483648;
	and.b32  	%r293, %r292, -2147483648;
	and.b32  	%r316, %r315, -2147483648;
	and.b32  	%r338, %r337, -2147483648;
	and.b32  	%r369, %r368, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r215, %r214, 1056964608;
	or.b32  	%r222, %r221, 1056964608;
	or.b32  	%r233, %r232, 1056964608;
	or.b32  	%r240, %r239, 1056964608;
	or.b32  	%r251, %r250, 1056964608;
	or.b32  	%r258, %r257, 1056964608;
	or.b32  	%r269, %r268, 1056964608;
	or.b32  	%r276, %r275, 1056964608;
	or.b32  	%r294, %r293, 1056964608;
	or.b32  	%r317, %r316, 1056964608;
	or.b32  	%r339, %r338, 1056964608;
	or.b32  	%r370, %r369, 1056964608;
	mov.b32 	%r384, %f689;
	mov.b32 	%r406, %f740;
	mov.b32 	%f191, %r215;
	mov.b32 	%f225, %r222;
	mov.b32 	%f260, %r233;
	mov.b32 	%f294, %r240;
	mov.b32 	%f329, %r251;
	mov.b32 	%f363, %r258;
	mov.b32 	%f398, %r269;
	mov.b32 	%f432, %r276;
	mov.b32 	%f481, %r294;
	mov.b32 	%f533, %r317;
	mov.b32 	%f586, %r339;
	mov.b32 	%f637, %r370;
	and.b32  	%r385, %r384, -2147483648;
	and.b32  	%r407, %r406, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r386, %r385, 1056964608;
	or.b32  	%r408, %r407, 1056964608;
	mov.b32 	%r420, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r386;
	mov.b32 	%f741, %r408;
	and.b32  	%r421, %r420, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r422, %r421, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r422;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r216, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r223, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r234, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r241, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r252, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r259, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r270, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r277, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r217, %r216, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r224, %r223, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r235, %r234, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r242, %r241, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r253, %r252, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r260, %r259, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r271, %r270, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r278, %r277, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r295, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r318, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r340, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r371, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r218, %r217, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r225, %r224, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r236, %r235, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r243, %r242, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r254, %r253, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r261, %r260, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r272, %r271, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r279, %r278, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r296, %r295, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r319, %r318, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r341, %r340, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r372, %r371, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r218, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r225, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r236, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r243, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r254, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r261, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r272, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r279, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r296, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r319, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r341, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r372, 1;
	cvt.rzi.s32.f32 	%r387, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r409, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r219, %r217, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r226, %r224, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r237, %r235, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r244, %r242, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r255, %r253, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r262, %r260, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r273, %r271, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r280, %r278, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r297, %r295, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r320, %r318, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r342, %r340, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r373, %r371, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r388, %r387, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r410, %r409, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r219, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r226, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r237, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r244, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r255, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r262, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r273, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r280, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r297, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r298, %r295, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r320, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r321, %r318, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r342, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r343, %r340, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r373, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r374, %r371, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r388, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r410, 1;
	cvt.rzi.s32.f32 	%r423, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r299, %r298, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r322, %r321, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r344, %r343, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r375, %r374, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r389, %r387, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r411, %r409, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r424, %r423, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r299, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r322, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r344, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r375, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r389, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r390, %r387, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r411, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r412, %r409, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r424, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r391, %r390, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r413, %r412, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r425, %r423, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r391, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r413, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r425, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r426, %r423, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.b32 	%r229, %f251;
	mov.b32 	%r228, %f3;
	mov.b32 	%r247, %f320;
	mov.b32 	%r246, %f12;
	mov.b32 	%r265, %f389;
	mov.b32 	%r264, %f21;
	mov.b32 	%r283, %f457;
	mov.b32 	%r282, %f30;
	mov.b32 	%r311, %f563;
	mov.b32 	%r310, %f53;
	mov.b32 	%r314, %f560;
	mov.b32 	%r313, %f52;
	mov.b32 	%r358, %f667;
	mov.b32 	%r357, %f87;
	mov.b32 	%r364, %f664;
	mov.b32 	%r363, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r427, %r426, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r227, %r229, %r228;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r245, %r247, %r246;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r263, %r265, %r264;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r281, %r283, %r282;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r309, %r311, %r310;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r312, %r314, %r313;
	// end inline asm
	xor.b32  	%r361, %r364, -2147483648;
	xor.b32  	%r360, %r363, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r427, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r356, %r358, %r357;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r359, %r361, %r360;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r362, %r364, %r363;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r365, %r358, %r357;
	// end inline asm
	mov.b32 	%r402, %f771;
	mov.b32 	%r401, %f177;
	mov.b32 	%r405, %f768;
	mov.b32 	%r404, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r403, %r405, %r404;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r446, %f842;
	and.b32  	%r447, %r446, -2147483648;
	or.b32  	%r448, %r447, 1056964608;
	mov.b32 	%f843, %r448;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r449, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r450, %r449, 1;
	setp.eq.b32 	%p219, %r450, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r451, %r449, 2;
	setp.eq.s32 	%p220, %r451, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r452, %r449, 1;
	and.b32  	%r453, %r452, 2;
	setp.eq.s32 	%p221, %r453, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r436, %f873;
	mov.b32 	%r435, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r436, %r435;
	// end inline asm
	mov.b32 	%r442, %f870;
	xor.b32  	%r439, %r442, -2147483648;
	mov.b32 	%r441, %f136;
	xor.b32  	%r438, %r441, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r437, %r439, %r438;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r440, %r442, %r441;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r443, %r436, %r435;
	// end inline asm
	shl.b32 	%r455, %r5, 12;
	and.b32  	%r87, %r114, 16;
	or.b32  	%r88, %r116, %r3;
	and.b32  	%r89, %r114, 12;
	shl.b32 	%r456, %r1, 11;
	and.b32  	%r457, %r456, 2048;
	and.b32  	%r458, %r114, 28;
	or.b32  	%r459, %r458, %r457;
	or.b32  	%r90, %r459, %r455;
	bfe.s32 	%r460, %r2, 3, 1;
	and.b32  	%r91, %r2, 8;
	shl.b32 	%r461, %r2, 4;
	or.b32  	%r462, %r91, %r461;
	shr.u32 	%r463, %r462, 2;
	and.b32  	%r464, %r463, 14;
	or.b32  	%r465, %r464, %r87;
	and.b32  	%r467, %r2, 4;
	or.b32  	%r92, %r467, %r209;
	shr.u32 	%r468, %r3, 1;
	and.b32  	%r469, %r4, 32;
	or.b32  	%r470, %r469, %r468;
	or.b32  	%r471, %r470, 8;
	or.b32  	%r472, %r470, 16;
	or.b32  	%r473, %r470, 24;
	or.b32  	%r474, %r122, %r115;
	or.b32  	%r475, %r474, %r121;
	or.b32  	%r476, %r475, %r120;
	or.b32  	%r477, %r476, %r117;
	bfe.u32 	%r478, %r477, 1, 5;
	mul.lo.s32 	%r479, %r478, 65;
	add.s32 	%r480, %r470, %r479;
	add.s32 	%r481, %r471, %r479;
	add.s32 	%r482, %r472, %r479;
	add.s32 	%r483, %r473, %r479;
	shl.b32 	%r484, %r3, 1;
	or.b32  	%r485, %r484, %r126;
	mul.lo.s32 	%r486, %r485, 65;
	add.s32 	%r487, %r486, %r87;
	add.s32 	%r488, %r487, %r464;
	mul.wide.u32 	%rd92, %r488, 4;
	mov.u64 	%rd93, shmem;
	add.s64 	%rd5, %rd93, %rd92;
	cvt.u64.u32 	%rd94, %r464;
	cvt.u64.u32 	%rd95, %r486;
	cvt.u64.u32 	%rd96, %r87;
	add.s64 	%rd97, %rd96, %rd95;
	add.s64 	%rd98, %rd97, %rd94;
	shl.b64 	%rd99, %rd98, 2;
	add.s64 	%rd6, %rd93, %rd99;
	shl.b32 	%r489, %r7, 18;
	add.s32 	%r490, %r489, -786432;
	shl.b32 	%r491, %r3, 2;
	or.b32  	%r492, %r118, %r491;
	or.b32  	%r493, %r492, %r128;
	shl.b32 	%r93, %r493, 5;
	cvt.s64.s32 	%rd7, %r490;
	bfe.s32 	%r494, %r3, 1, 1;
	and.b32  	%r495, %r494, 520;
	shr.u32 	%r496, %r3, 3;
	bfe.s32 	%r497, %r3, 2, 1;
	and.b32  	%r498, %r497, 260;
	and.b32  	%r499, %r3, 1;
	neg.s32 	%r500, %r499;
	and.b32  	%r501, %r500, 1040;
	add.s32 	%r502, %r501, %r465;
	mad.lo.s32 	%r503, %r496, 130, %r502;
	add.s32 	%r504, %r503, %r495;
	add.s32 	%r505, %r504, %r498;
	mad.lo.s32 	%r506, %r126, 65, %r505;
	mul.wide.u32 	%rd100, %r506, 4;
	add.s64 	%rd8, %rd93, %rd100;
	add.s32 	%r507, %r506, 32;
	mul.wide.u32 	%rd101, %r507, 4;
	add.s64 	%rd9, %rd93, %rd101;
	add.s32 	%r508, %r506, 1;
	mul.wide.u32 	%rd102, %r508, 4;
	add.s64 	%rd10, %rd93, %rd102;
	add.s32 	%r509, %r506, 33;
	mul.wide.u32 	%rd103, %r509, 4;
	add.s64 	%rd11, %rd93, %rd103;
	add.s32 	%r510, %r506, 2081;
	mul.wide.u32 	%rd104, %r510, 4;
	add.s64 	%rd12, %rd93, %rd104;
	add.s32 	%r511, %r506, 2113;
	mul.wide.u32 	%rd105, %r511, 4;
	add.s64 	%rd13, %rd93, %rd105;
	add.s32 	%r512, %r506, 2082;
	mul.wide.u32 	%rd106, %r512, 4;
	add.s64 	%rd14, %rd93, %rd106;
	add.s32 	%r513, %r506, 2114;
	mul.wide.u32 	%rd107, %r513, 4;
	add.s64 	%rd15, %rd93, %rd107;
	add.s32 	%r514, %r506, 4162;
	mul.wide.u32 	%rd108, %r514, 4;
	add.s64 	%rd16, %rd93, %rd108;
	add.s32 	%r515, %r506, 4194;
	mul.wide.u32 	%rd109, %r515, 4;
	add.s64 	%rd17, %rd93, %rd109;
	add.s32 	%r516, %r506, 4163;
	mul.wide.u32 	%rd110, %r516, 4;
	add.s64 	%rd18, %rd93, %rd110;
	add.s32 	%r517, %r506, 4195;
	mul.wide.u32 	%rd111, %r517, 4;
	add.s64 	%rd19, %rd93, %rd111;
	add.s32 	%r518, %r506, 6243;
	mul.wide.u32 	%rd112, %r518, 4;
	add.s64 	%rd20, %rd93, %rd112;
	add.s32 	%r519, %r506, 6275;
	mul.wide.u32 	%rd113, %r519, 4;
	add.s64 	%rd21, %rd93, %rd113;
	add.s32 	%r520, %r506, 6244;
	mul.wide.u32 	%rd114, %r520, 4;
	add.s64 	%rd22, %rd93, %rd114;
	add.s32 	%r521, %r506, 6276;
	mul.wide.u32 	%rd115, %r521, 4;
	add.s64 	%rd23, %rd93, %rd115;
	setp.lt.u32 	%p225, %r2, 16;
	selp.b32 	%r94, 0, 520, %p225;
	and.b32  	%r522, %r460, 1040;
	or.b32  	%r95, %r470, %r522;
	or.b32  	%r96, %r471, %r522;
	add.s32 	%r97, %r472, %r522;
	add.s32 	%r98, %r473, %r522;
	mul.wide.u32 	%rd116, %r483, 4;
	add.s64 	%rd24, %rd93, %rd116;
	mul.wide.u32 	%rd117, %r482, 4;
	add.s64 	%rd25, %rd93, %rd117;
	mul.wide.u32 	%rd118, %r481, 4;
	add.s64 	%rd26, %rd93, %rd118;
	mul.wide.u32 	%rd119, %r480, 4;
	add.s64 	%rd27, %rd93, %rd119;
	setp.eq.s32 	%p226, %r91, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8044, %r8000;
	mov.u32 	%r8043, %r8000;
	mov.u32 	%r8042, %r8000;
	mov.u32 	%r8041, %r8000;
	mov.u32 	%r8040, %r8000;
	mov.u32 	%r8039, %r8000;
	mov.u32 	%r8038, %r8000;
	mov.u32 	%r8037, %r8000;
	mov.u32 	%r8036, %r8000;
	mov.u32 	%r8035, %r8000;
	mov.u32 	%r8034, %r8000;
	mov.u32 	%r8033, %r8000;
	mov.u32 	%r111, %r8000;
	bra.uni 	$L__BB0_129;
$L__BB0_153:                            // %pass16349
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7996, %r8045, 786432;
	cvt.s64.s32 	%rd173, %r7996;
	add.s64 	%rd174, %rd173, %rd7;
	shr.u64 	%rd175, %rd174, 39;
	add.s64 	%rd176, %rd174, %rd175;
	shr.s64 	%rd177, %rd176, 25;
	setp.lt.s64 	%p254, %rd174, 0;
	and.b64  	%rd178, %rd176, -33554432;
	setp.ne.s64 	%p255, %rd178, %rd174;
	and.pred  	%p256, %p254, %p255;
	selp.u64 	%rd179, 1, 0, %p256;
	sub.s64 	%rd180, %rd179, %rd177;
	shl.b64 	%rd181, %rd180, 25;
	add.s64 	%rd182, %rd181, %rd174;
	shl.b64 	%rd183, %rd182, 2;
	add.s64 	%rd184, %rd3, %rd183;
	st.global.v4.u32 	[%rd184], {%r186, %r188, %r187, %r189};
	setp.ne.s32 	%p257, %r111, 7936;
	add.s32 	%r111, %r111, 256;
	add.s32 	%r7997, %r111, %r5;
	setp.gt.s32 	%p258, %r6, %r7997;
	and.pred  	%p259, %p257, %p258;
	@%p259 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_154;
$L__BB0_129:                            // %L1560
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	or.b32  	%r588, %r111, %r114;
	and.b32  	%r589, %r588, 7968;
	or.b32  	%r590, %r88, %r589;
	shl.b32 	%r591, %r590, 12;
	add.s32 	%r592, %r90, %r591;
	shr.s32 	%r593, %r592, 31;
	shr.u32 	%r594, %r593, 7;
	add.s32 	%r595, %r592, %r594;
	shr.s32 	%r596, %r595, 25;
	setp.lt.s32 	%p227, %r592, 0;
	and.b32  	%r597, %r595, -33554432;
	setp.ne.s32 	%p228, %r597, %r592;
	and.pred  	%p229, %p227, %p228;
	selp.u32 	%r598, 1, 0, %p229;
	sub.s32 	%r599, %r598, %r596;
	shl.b32 	%r600, %r599, 25;
	add.s32 	%r601, %r600, %r592;
	mul.wide.s32 	%rd120, %r601, 4;
	add.s64 	%rd121, %rd2, %rd120;
	ld.global.v4.u32 	{%r602, %r603, %r604, %r605}, [%rd121];
	or.b32  	%r606, %r591, 262144;
	add.s32 	%r607, %r90, %r606;
	shr.s32 	%r608, %r607, 31;
	shr.u32 	%r609, %r608, 7;
	add.s32 	%r610, %r607, %r609;
	shr.s32 	%r611, %r610, 25;
	setp.lt.s32 	%p230, %r607, 0;
	and.b32  	%r612, %r610, -33554432;
	setp.ne.s32 	%p231, %r612, %r607;
	and.pred  	%p232, %p230, %p231;
	selp.u32 	%r613, 1, 0, %p232;
	sub.s32 	%r614, %r613, %r611;
	shl.b32 	%r615, %r614, 25;
	add.s32 	%r616, %r615, %r607;
	mul.wide.s32 	%rd122, %r616, 4;
	add.s64 	%rd123, %rd2, %rd122;
	ld.global.v4.u32 	{%r617, %r618, %r619, %r620}, [%rd123];
	or.b32  	%r621, %r591, 524288;
	add.s32 	%r622, %r90, %r621;
	shr.s32 	%r623, %r622, 31;
	shr.u32 	%r624, %r623, 7;
	add.s32 	%r625, %r622, %r624;
	shr.s32 	%r626, %r625, 25;
	setp.lt.s32 	%p233, %r622, 0;
	and.b32  	%r627, %r625, -33554432;
	setp.ne.s32 	%p234, %r627, %r622;
	and.pred  	%p235, %p233, %p234;
	selp.u32 	%r628, 1, 0, %p235;
	sub.s32 	%r629, %r628, %r626;
	shl.b32 	%r630, %r629, 25;
	add.s32 	%r631, %r630, %r622;
	mul.wide.s32 	%rd124, %r631, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r632, %r633, %r634, %r635}, [%rd125];
	or.b32  	%r636, %r591, 786432;
	add.s32 	%r637, %r90, %r636;
	shr.s32 	%r638, %r637, 31;
	shr.u32 	%r639, %r638, 7;
	add.s32 	%r640, %r637, %r639;
	shr.s32 	%r641, %r640, 25;
	setp.lt.s32 	%p236, %r637, 0;
	and.b32  	%r642, %r640, -33554432;
	setp.ne.s32 	%p237, %r642, %r637;
	and.pred  	%p238, %p236, %p237;
	selp.u32 	%r643, 1, 0, %p238;
	sub.s32 	%r644, %r643, %r641;
	shl.b32 	%r645, %r644, 25;
	add.s32 	%r646, %r645, %r637;
	mul.wide.s32 	%rd126, %r646, 4;
	add.s64 	%rd127, %rd2, %rd126;
	ld.global.v4.u32 	{%r647, %r648, %r649, %r650}, [%rd127];
	selp.b32 	%r651, %r604, %r602, %p226;
	shfl.sync.bfly.b32	%r652, %r651, 8, 31, -1;
	selp.b32 	%r524, %r602, %r652, %p226;
	selp.b32 	%r525, %r652, %r604, %p226;
	selp.b32 	%r653, %r605, %r603, %p226;
	shfl.sync.bfly.b32	%r654, %r653, 8, 31, -1;
	selp.b32 	%r532, %r603, %r654, %p226;
	selp.b32 	%r533, %r654, %r605, %p226;
	selp.b32 	%r655, %r619, %r617, %p226;
	shfl.sync.bfly.b32	%r656, %r655, 8, 31, -1;
	selp.b32 	%r540, %r617, %r656, %p226;
	selp.b32 	%r541, %r656, %r619, %p226;
	selp.b32 	%r657, %r620, %r618, %p226;
	shfl.sync.bfly.b32	%r658, %r657, 8, 31, -1;
	selp.b32 	%r548, %r618, %r658, %p226;
	selp.b32 	%r549, %r658, %r620, %p226;
	selp.b32 	%r659, %r634, %r632, %p226;
	shfl.sync.bfly.b32	%r660, %r659, 8, 31, -1;
	selp.b32 	%r556, %r632, %r660, %p226;
	selp.b32 	%r557, %r660, %r634, %p226;
	selp.b32 	%r661, %r635, %r633, %p226;
	shfl.sync.bfly.b32	%r662, %r661, 8, 31, -1;
	selp.b32 	%r564, %r633, %r662, %p226;
	selp.b32 	%r565, %r662, %r635, %p226;
	selp.b32 	%r663, %r649, %r647, %p226;
	shfl.sync.bfly.b32	%r664, %r663, 8, 31, -1;
	selp.b32 	%r572, %r647, %r664, %p226;
	selp.b32 	%r573, %r664, %r649, %p226;
	selp.b32 	%r665, %r650, %r648, %p226;
	shfl.sync.bfly.b32	%r666, %r665, 8, 31, -1;
	selp.b32 	%r580, %r648, %r666, %p226;
	selp.b32 	%r581, %r666, %r650, %p226;
	mov.u32 	%r582, 21520;
	// begin inline asm
	prmt.b32 %r523, %r524, %r525, %r582;
	// end inline asm
	mov.u32 	%r586, 30258;
	// begin inline asm
	prmt.b32 %r527, %r524, %r525, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r532, %r533, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r532, %r533, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r540, %r541, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r540, %r541, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r548, %r549, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r548, %r549, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r556, %r557, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r556, %r557, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r564, %r565, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r567, %r564, %r565, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r572, %r573, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r575, %r572, %r573, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r579, %r580, %r581, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r583, %r580, %r581, %r586;
	// end inline asm
	st.shared.u32 	[%rd8], %r523;
	st.shared.u32 	[%rd9], %r527;
	st.shared.u32 	[%rd10], %r531;
	st.shared.u32 	[%rd11], %r535;
	st.shared.u32 	[%rd12], %r539;
	st.shared.u32 	[%rd13], %r543;
	st.shared.u32 	[%rd14], %r547;
	st.shared.u32 	[%rd15], %r551;
	st.shared.u32 	[%rd16], %r555;
	st.shared.u32 	[%rd17], %r559;
	st.shared.u32 	[%rd18], %r563;
	st.shared.u32 	[%rd19], %r567;
	st.shared.u32 	[%rd20], %r571;
	st.shared.u32 	[%rd21], %r575;
	st.shared.u32 	[%rd22], %r579;
	st.shared.u32 	[%rd23], %r583;
	bar.sync 	0;
	or.b32  	%r112, %r111, %r92;
	shr.u32 	%r8031, %r112, 6;
	mov.u64 	%rd187, %rd27;
	mov.u64 	%rd188, %rd26;
	mov.u64 	%rd189, %rd25;
	mov.u64 	%rd190, %rd24;
	mov.u32 	%r8032, %r8000;
$L__BB0_130:                            // %pass5569
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7851, %r112, %r8032;
	bfe.s32 	%r7852, %r7851, 3, 1;
	and.b32  	%r7853, %r7852, 130;
	bfe.s32 	%r7854, %r7851, 2, 1;
	and.b32  	%r7855, %r7854, 260;
	and.b32  	%r7856, %r8031, 3;
	mul.lo.s32 	%r7857, %r7856, 2081;
	bfe.s32 	%r7858, %r7851, 4, 1;
	and.b32  	%r7859, %r7858, 65;
	add.s32 	%r7860, %r95, %r7853;
	add.s32 	%r7861, %r7860, %r94;
	add.s32 	%r7862, %r7861, %r7855;
	add.s32 	%r7863, %r7862, %r7857;
	add.s32 	%r7864, %r7863, %r7859;
	mul.wide.u32 	%rd128, %r7864, 4;
	add.s64 	%rd130, %rd93, %rd128;
	ld.shared.u32 	%r7865, [%rd130];
	add.s32 	%r7866, %r96, %r7853;
	add.s32 	%r7867, %r7866, %r94;
	add.s32 	%r7868, %r7867, %r7855;
	add.s32 	%r7869, %r7868, %r7857;
	add.s32 	%r7870, %r7869, %r7859;
	mul.wide.u32 	%rd131, %r7870, 4;
	add.s64 	%rd132, %rd93, %rd131;
	ld.shared.u32 	%r7871, [%rd132];
	add.s32 	%r7872, %r97, %r7853;
	add.s32 	%r7873, %r7872, %r94;
	add.s32 	%r7874, %r7873, %r7855;
	add.s32 	%r7875, %r7874, %r7857;
	add.s32 	%r7876, %r7875, %r7859;
	mul.wide.u32 	%rd133, %r7876, 4;
	add.s64 	%rd134, %rd93, %rd133;
	ld.shared.u32 	%r7877, [%rd134];
	add.s32 	%r7878, %r98, %r7853;
	add.s32 	%r7879, %r7878, %r94;
	add.s32 	%r7880, %r7879, %r7855;
	add.s32 	%r7881, %r7880, %r7857;
	add.s32 	%r7882, %r7881, %r7859;
	mul.wide.u32 	%rd135, %r7882, 4;
	add.s64 	%rd136, %rd93, %rd135;
	ld.shared.u32 	%r7883, [%rd136];
	// begin inline asm
	mov.b32 %r672, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r683, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r671, %r7865, -2004318072;
	mov.u32 	%r670, 983055;
	// begin inline asm
	lop3.b32 %r669, %r670, %r671, %r672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r673, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r674, %r672, %r673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r677, %r669, %r674;
	// end inline asm
	mov.u32 	%r681, 15728880;
	// begin inline asm
	lop3.b32 %r680, %r681, %r671, %r683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r685, %r683, %r684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r688, %r680, %r685;
	// end inline asm
	shr.u32 	%r693, %r671, 8;
	// begin inline asm
	lop3.b32 %r691, %r670, %r693, %r672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r695, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r696, %r672, %r695;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r699, %r691, %r696;
	// end inline asm
	// begin inline asm
	lop3.b32 %r702, %r681, %r693, %r683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r706, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r707, %r683, %r706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r710, %r702, %r707;
	// end inline asm
	// begin inline asm
	mov.b32 %r718, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r729, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r717, %r7871, -2004318072;
	// begin inline asm
	lop3.b32 %r715, %r670, %r717, %r718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r719, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r720, %r718, %r719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r723, %r715, %r720;
	// end inline asm
	// begin inline asm
	lop3.b32 %r726, %r681, %r717, %r729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r731, %r729, %r730;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r734, %r726, %r731;
	// end inline asm
	shr.u32 	%r739, %r717, 8;
	// begin inline asm
	lop3.b32 %r737, %r670, %r739, %r718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r741, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r742, %r718, %r741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r745, %r737, %r742;
	// end inline asm
	// begin inline asm
	lop3.b32 %r748, %r681, %r739, %r729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r753, %r729, %r752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r756, %r748, %r753;
	// end inline asm
	// begin inline asm
	mov.b32 %r764, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r775, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r763, %r7877, -2004318072;
	// begin inline asm
	lop3.b32 %r761, %r670, %r763, %r764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r765, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r766, %r764, %r765;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r769, %r761, %r766;
	// end inline asm
	// begin inline asm
	lop3.b32 %r772, %r681, %r763, %r775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r776, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r777, %r775, %r776;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r780, %r772, %r777;
	// end inline asm
	shr.u32 	%r785, %r763, 8;
	// begin inline asm
	lop3.b32 %r783, %r670, %r785, %r764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r787, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r788, %r764, %r787;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r791, %r783, %r788;
	// end inline asm
	// begin inline asm
	lop3.b32 %r794, %r681, %r785, %r775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r799, %r775, %r798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r802, %r794, %r799;
	// end inline asm
	// begin inline asm
	mov.b32 %r810, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r821, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r809, %r7883, -2004318072;
	// begin inline asm
	lop3.b32 %r807, %r670, %r809, %r810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r811, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r812, %r810, %r811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r815, %r807, %r812;
	// end inline asm
	// begin inline asm
	lop3.b32 %r818, %r681, %r809, %r821, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r822, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r823, %r821, %r822;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r826, %r818, %r823;
	// end inline asm
	shr.u32 	%r831, %r809, 8;
	// begin inline asm
	lop3.b32 %r829, %r670, %r831, %r810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r833, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r834, %r810, %r833;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r837, %r829, %r834;
	// end inline asm
	// begin inline asm
	lop3.b32 %r840, %r681, %r831, %r821, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r844, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r845, %r821, %r844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r848, %r840, %r845;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r851, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r853, %r851, %r677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r856, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r858, %r856, %r688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r861, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r863, %r861, %r699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r866, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r868, %r866, %r710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r871, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r873, %r871, %r723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r876, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r878, %r876, %r734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r881, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r883, %r881, %r745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r886, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r888, %r886, %r756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r891, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r893, %r891, %r769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r896, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r898, %r896, %r780;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r901, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r903, %r901, %r791;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r906, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r908, %r906, %r802;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r911, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r913, %r911, %r815;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r916, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r918, %r916, %r826;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r921, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r923, %r921, %r837;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r926, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r928, %r926, %r848;
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r935, %r8044, -2004318072;
	// begin inline asm
	lop3.b32 %r933, %r670, %r935, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	// begin inline asm
	lop3.b32 %r944, %r681, %r935, %r947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r949, %r947, %r948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r952, %r944, %r949;
	// end inline asm
	shr.u32 	%r957, %r935, 8;
	// begin inline asm
	lop3.b32 %r955, %r670, %r957, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r960, %r936, %r959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r963, %r955, %r960;
	// end inline asm
	// begin inline asm
	lop3.b32 %r966, %r681, %r957, %r947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r947, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r993, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r981, %r8043, -2004318072;
	// begin inline asm
	lop3.b32 %r979, %r670, %r981, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r990, %r681, %r981, %r993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r995, %r993, %r994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r998, %r990, %r995;
	// end inline asm
	shr.u32 	%r1003, %r981, 8;
	// begin inline asm
	lop3.b32 %r1001, %r670, %r1003, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1006, %r982, %r1005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1009, %r1001, %r1006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1012, %r681, %r1003, %r993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r993, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1039, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1027, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r1025, %r670, %r1027, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1030, %r1028, %r1029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1033, %r1025, %r1030;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1036, %r681, %r1027, %r1039, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1040, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1041, %r1039, %r1040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1044, %r1036, %r1041;
	// end inline asm
	shr.u32 	%r1049, %r1027, 8;
	// begin inline asm
	lop3.b32 %r1047, %r670, %r1049, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1052, %r1028, %r1051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1055, %r1047, %r1052;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1058, %r681, %r1049, %r1039, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1062, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1063, %r1039, %r1062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1066, %r1058, %r1063;
	// end inline asm
	// begin inline asm
	mov.b32 %r1074, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1085, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1073, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r1071, %r670, %r1073, %r1074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1075, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1076, %r1074, %r1075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1079, %r1071, %r1076;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1082, %r681, %r1073, %r1085, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1086, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1087, %r1085, %r1086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1090, %r1082, %r1087;
	// end inline asm
	shr.u32 	%r1095, %r1073, 8;
	// begin inline asm
	lop3.b32 %r1093, %r670, %r1095, %r1074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1097, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1098, %r1074, %r1097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1101, %r1093, %r1098;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1104, %r681, %r1095, %r1085, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1108, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1109, %r1085, %r1108;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1112, %r1104, %r1109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r227, %r941, %r853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r227, %r952, %r858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r227, %r963, %r863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1127, %r227, %r974, %r868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r227, %r987, %r873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r227, %r998, %r878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r227, %r1009, %r883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r227, %r1020, %r888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r227, %r1033, %r893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r227, %r1044, %r898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1155, %r227, %r1055, %r903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r227, %r1066, %r908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r227, %r1079, %r913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r227, %r1090, %r918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1171, %r227, %r1101, %r923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r227, %r1112, %r928;
	// end inline asm
	// begin inline asm
	mov.b32 %r1184, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1195, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1183, %r8042, -2004318072;
	// begin inline asm
	lop3.b32 %r1181, %r670, %r1183, %r1184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1185, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1186, %r1184, %r1185;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1189, %r1181, %r1186;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1192, %r681, %r1183, %r1195, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1196, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1197, %r1195, %r1196;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1200, %r1192, %r1197;
	// end inline asm
	shr.u32 	%r1205, %r1183, 8;
	// begin inline asm
	lop3.b32 %r1203, %r670, %r1205, %r1184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1207, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1208, %r1184, %r1207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1211, %r1203, %r1208;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1214, %r681, %r1205, %r1195, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1218, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1219, %r1195, %r1218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1222, %r1214, %r1219;
	// end inline asm
	// begin inline asm
	mov.b32 %r1230, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1241, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1229, %r8041, -2004318072;
	// begin inline asm
	lop3.b32 %r1227, %r670, %r1229, %r1230, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1231, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1232, %r1230, %r1231;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1235, %r1227, %r1232;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1238, %r681, %r1229, %r1241, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1242, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1243, %r1241, %r1242;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1246, %r1238, %r1243;
	// end inline asm
	shr.u32 	%r1251, %r1229, 8;
	// begin inline asm
	lop3.b32 %r1249, %r670, %r1251, %r1230, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1253, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1254, %r1230, %r1253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1257, %r1249, %r1254;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1260, %r681, %r1251, %r1241, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1264, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1265, %r1241, %r1264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1268, %r1260, %r1265;
	// end inline asm
	// begin inline asm
	mov.b32 %r1276, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1287, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1275, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r1273, %r670, %r1275, %r1276, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1277, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1278, %r1276, %r1277;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1281, %r1273, %r1278;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1284, %r681, %r1275, %r1287, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1288, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1289, %r1287, %r1288;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1292, %r1284, %r1289;
	// end inline asm
	shr.u32 	%r1297, %r1275, 8;
	// begin inline asm
	lop3.b32 %r1295, %r670, %r1297, %r1276, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1299, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1300, %r1276, %r1299;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1303, %r1295, %r1300;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1306, %r681, %r1297, %r1287, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1310, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1311, %r1287, %r1310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1314, %r1306, %r1311;
	// end inline asm
	// begin inline asm
	mov.b32 %r1322, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1333, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1321, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r1319, %r670, %r1321, %r1322, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1323, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1324, %r1322, %r1323;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1327, %r1319, %r1324;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1330, %r681, %r1321, %r1333, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1334, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1335, %r1333, %r1334;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1338, %r1330, %r1335;
	// end inline asm
	shr.u32 	%r1343, %r1321, 8;
	// begin inline asm
	lop3.b32 %r1341, %r670, %r1343, %r1322, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1345, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1346, %r1322, %r1345;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1349, %r1341, %r1346;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1352, %r681, %r1343, %r1333, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1356, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1357, %r1333, %r1356;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1360, %r1352, %r1357;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1365, %r1363, %r1189, %r1115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1369, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r1369, %r1200, %r1119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1375, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r1375, %r1211, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1381, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1383, %r1381, %r1222, %r1127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1387, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r1387, %r1235, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1393, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r1393, %r1246, %r1135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1399, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1401, %r1399, %r1257, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1405, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r1405, %r1268, %r1143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1411, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r1411, %r1281, %r1147;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1419, %r1417, %r1292, %r1151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1423, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r1423, %r1303, %r1155;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1429, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1429, %r1314, %r1159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1435, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r1435, %r1327, %r1163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1441, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r1441, %r1338, %r1167;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1447, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r1447, %r1349, %r1171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1453, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1455, %r1453, %r1360, %r1175;
	// end inline asm
	// begin inline asm
	mov.b32 %r1464, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1475, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1463, %r8040, -2004318072;
	// begin inline asm
	lop3.b32 %r1461, %r670, %r1463, %r1464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1465, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1466, %r1464, %r1465;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1469, %r1461, %r1466;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1472, %r681, %r1463, %r1475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1476, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1477, %r1475, %r1476;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1480, %r1472, %r1477;
	// end inline asm
	shr.u32 	%r1485, %r1463, 8;
	// begin inline asm
	lop3.b32 %r1483, %r670, %r1485, %r1464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1487, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1488, %r1464, %r1487;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1491, %r1483, %r1488;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1494, %r681, %r1485, %r1475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1498, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1499, %r1475, %r1498;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1502, %r1494, %r1499;
	// end inline asm
	// begin inline asm
	mov.b32 %r1510, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1521, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1509, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r1507, %r670, %r1509, %r1510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1511, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1512, %r1510, %r1511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1515, %r1507, %r1512;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1518, %r681, %r1509, %r1521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1523, %r1521, %r1522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1526, %r1518, %r1523;
	// end inline asm
	shr.u32 	%r1531, %r1509, 8;
	// begin inline asm
	lop3.b32 %r1529, %r670, %r1531, %r1510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1533, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1534, %r1510, %r1533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1537, %r1529, %r1534;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1540, %r681, %r1531, %r1521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1544, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1545, %r1521, %r1544;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1548, %r1540, %r1545;
	// end inline asm
	// begin inline asm
	mov.b32 %r1556, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1567, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1555, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r1553, %r670, %r1555, %r1556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1557, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1558, %r1556, %r1557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1561, %r1553, %r1558;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1564, %r681, %r1555, %r1567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1568, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1569, %r1567, %r1568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1572, %r1564, %r1569;
	// end inline asm
	shr.u32 	%r1577, %r1555, 8;
	// begin inline asm
	lop3.b32 %r1575, %r670, %r1577, %r1556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1579, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1580, %r1556, %r1579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1583, %r1575, %r1580;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1586, %r681, %r1577, %r1567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1590, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1591, %r1567, %r1590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1594, %r1586, %r1591;
	// end inline asm
	// begin inline asm
	mov.b32 %r1602, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1613, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1601, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r1599, %r670, %r1601, %r1602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1603, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1604, %r1602, %r1603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1607, %r1599, %r1604;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1610, %r681, %r1601, %r1613, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1614, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1615, %r1613, %r1614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1618, %r1610, %r1615;
	// end inline asm
	shr.u32 	%r1623, %r1601, 8;
	// begin inline asm
	lop3.b32 %r1621, %r670, %r1623, %r1602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1625, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1626, %r1602, %r1625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1629, %r1621, %r1626;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1632, %r681, %r1623, %r1613, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1636, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1637, %r1613, %r1636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1640, %r1632, %r1637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r263, %r1469, %r1365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r263, %r1480, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r263, %r1491, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r263, %r1502, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r263, %r1515, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r263, %r1526, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r263, %r1537, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r263, %r1548, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r263, %r1561, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r263, %r1572, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r263, %r1583, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r263, %r1594, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r263, %r1607, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r263, %r1618, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r263, %r1629, %r1449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r263, %r1640, %r1455;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1707, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r1707, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r309, %r1714, %r1709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1716, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1716, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r309, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1725, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r1725, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r309, %r1732, %r1727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1734, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r1734, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r309, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1743, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r1743, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r309, %r1750, %r1745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r309, %r1759, %r1754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1761, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r1761, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r309, %r1768, %r1763;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1770, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1772, %r1770, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r309, %r1777, %r1772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r312, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r309, %r1711, %r1779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1786, %r312, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r309, %r1720, %r1786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1793, %r312, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r309, %r1729, %r1793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1800, %r312, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r309, %r1738, %r1800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1807, %r312, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r309, %r1747, %r1807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1814, %r312, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r309, %r1756, %r1814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r312, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r309, %r1765, %r1821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1828, %r312, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r309, %r1774, %r1828;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1922, %r1919}, {%r356, %r362, %r359, %r365}, {%r1712, %r1782}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1931, %r1928}, {%r356, %r362, %r359, %r365}, {%r1721, %r1789}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1940, %r1937}, {%r356, %r362, %r359, %r365}, {%r1730, %r1796}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1949, %r1946}, {%r356, %r362, %r359, %r365}, {%r1739, %r1803}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1958, %r1955}, {%r356, %r362, %r359, %r365}, {%r1748, %r1810}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1967, %r1964}, {%r356, %r362, %r359, %r365}, {%r1757, %r1817}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1976, %r1973}, {%r356, %r362, %r359, %r365}, {%r1766, %r1824}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1985, %r1982}, {%r356, %r362, %r359, %r365}, {%r1775, %r1831}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1915, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1917, %r1915, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r400, %r1922, %r1917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1924, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1926, %r1924, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r400, %r1931, %r1926;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1933, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1935, %r1933, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r400, %r1940, %r1935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1942, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1944, %r1942, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r400, %r1949, %r1944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1951, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1953, %r1951, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r400, %r1958, %r1953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1960, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1962, %r1960, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r400, %r1967, %r1962;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1969, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1971, %r1969, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r400, %r1976, %r1971;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1978, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1980, %r1978, %r1982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r400, %r1985, %r1980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1987, %r403, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r400, %r1919, %r1987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1994, %r403, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r400, %r1928, %r1994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2001, %r403, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r400, %r1937, %r2001;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2008, %r403, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r400, %r1946, %r2008;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2015, %r403, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r400, %r1955, %r2015;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2022, %r403, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r400, %r1964, %r2022;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2029, %r403, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r400, %r1973, %r2029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2036, %r403, %r1985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2039, %r400, %r1982, %r2036;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2043, %r2044}, {%r434, %r440, %r437, %r443}, {%r1920, %r1990}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2053, %r2054}, {%r434, %r440, %r437, %r443}, {%r1929, %r1997}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2063, %r2064}, {%r434, %r440, %r437, %r443}, {%r1938, %r2004}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2073, %r2074}, {%r434, %r440, %r437, %r443}, {%r1947, %r2011}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2083, %r2084}, {%r434, %r440, %r437, %r443}, {%r1956, %r2018}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2093, %r2094}, {%r434, %r440, %r437, %r443}, {%r1965, %r2025}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2103, %r2104}, {%r434, %r440, %r437, %r443}, {%r1974, %r2032}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2113, %r2114}, {%r434, %r440, %r437, %r443}, {%r1983, %r2039}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r123, %r2043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r123, %r2044;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r123, %r2053;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r123, %r2054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r123, %r2063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r123, %r2064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r123, %r2073;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r123, %r2074;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r123, %r2083;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r123, %r2084;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r123, %r2093;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r123, %r2094;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r123, %r2103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2162, %r123, %r2104;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r123, %r2113;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2168, %r123, %r2114;
	// end inline asm
	// begin inline asm
	mov.b32 %r2171, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2172, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2173, %r2123, %r2171;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2176, %r2173, %r2172;
	// end inline asm
	// begin inline asm
	mov.b32 %r2179, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2180, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2181, %r2126, %r2179;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2184, %r2181, %r2180;
	// end inline asm
	// begin inline asm
	mov.b32 %r2187, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2188, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2189, %r2129, %r2187;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2192, %r2189, %r2188;
	// end inline asm
	// begin inline asm
	mov.b32 %r2195, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2196, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2197, %r2132, %r2195;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2200, %r2197, %r2196;
	// end inline asm
	// begin inline asm
	mov.b32 %r2203, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2204, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2205, %r2135, %r2203;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2208, %r2205, %r2204;
	// end inline asm
	// begin inline asm
	mov.b32 %r2211, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2212, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2213, %r2138, %r2211;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2216, %r2213, %r2212;
	// end inline asm
	// begin inline asm
	mov.b32 %r2219, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2221, %r2141, %r2219;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2224, %r2221, %r2220;
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2228, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2229, %r2144, %r2227;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2232, %r2229, %r2228;
	// end inline asm
	// begin inline asm
	mov.b32 %r2235, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2236, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2237, %r2147, %r2235;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2240, %r2237, %r2236;
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2244, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2245, %r2150, %r2243;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2248, %r2245, %r2244;
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2253, %r2153, %r2251;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2256, %r2253, %r2252;
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2260, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2261, %r2156, %r2259;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2264, %r2261, %r2260;
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2269, %r2159, %r2267;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2272, %r2269, %r2268;
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2276, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2277, %r2162, %r2275;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2280, %r2277, %r2276;
	// end inline asm
	// begin inline asm
	mov.b32 %r2283, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2284, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2285, %r2165, %r2283;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2288, %r2285, %r2284;
	// end inline asm
	// begin inline asm
	mov.b32 %r2291, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2292, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2293, %r2168, %r2291;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2296, %r2293, %r2292;
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2301, %r2302, %r2300;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2304, %r2176, %r2301;
	// end inline asm
	// begin inline asm
	mov.b32 %r2307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2308, %r2302, %r2307;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2184, %r2308;
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2315, %r2302, %r2314;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2318, %r2192, %r2315;
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2322, %r2302, %r2321;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2325, %r2200, %r2322;
	// end inline asm
	mov.u32 	%r2331, 25152;
	// begin inline asm
	prmt.b32 %r2328, %r2304, %r2318, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2332, %r2311, %r2325, %r2331;
	// end inline asm
	shl.b32 	%r2339, %r2332, 4;
	mov.u32 	%r2337, 252645135;
	// begin inline asm
	lop3.b32 %r2336, %r2337, %r2328, %r2339, 202;
	// end inline asm
	xor.b32  	%r7884, %r2336, -2004318072;
	// begin inline asm
	mov.b32 %r2343, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2342, %r2343, %r2341;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2208, %r2342;
	// end inline asm
	// begin inline asm
	mov.b32 %r2348, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2349, %r2343, %r2348;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2216, %r2349;
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2356, %r2343, %r2355;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2359, %r2224, %r2356;
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2343, %r2362;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2366, %r2232, %r2363;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2369, %r2345, %r2359, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2373, %r2352, %r2366, %r2331;
	// end inline asm
	shl.b32 	%r2380, %r2373, 4;
	// begin inline asm
	lop3.b32 %r2377, %r2337, %r2369, %r2380, 202;
	// end inline asm
	xor.b32  	%r7885, %r2377, -2004318072;
	// begin inline asm
	mov.b32 %r2384, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2382, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2383, %r2384, %r2382;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2386, %r2240, %r2383;
	// end inline asm
	// begin inline asm
	mov.b32 %r2389, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2390, %r2384, %r2389;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2393, %r2248, %r2390;
	// end inline asm
	// begin inline asm
	mov.b32 %r2396, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2397, %r2384, %r2396;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2400, %r2256, %r2397;
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2404, %r2384, %r2403;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2407, %r2264, %r2404;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2410, %r2386, %r2400, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2414, %r2393, %r2407, %r2331;
	// end inline asm
	shl.b32 	%r2421, %r2414, 4;
	// begin inline asm
	lop3.b32 %r2418, %r2337, %r2410, %r2421, 202;
	// end inline asm
	xor.b32  	%r7886, %r2418, -2004318072;
	// begin inline asm
	mov.b32 %r2425, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2423, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2424, %r2425, %r2423;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2427, %r2272, %r2424;
	// end inline asm
	// begin inline asm
	mov.b32 %r2430, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2431, %r2425, %r2430;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2434, %r2280, %r2431;
	// end inline asm
	// begin inline asm
	mov.b32 %r2437, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2438, %r2425, %r2437;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2441, %r2288, %r2438;
	// end inline asm
	// begin inline asm
	mov.b32 %r2444, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2445, %r2425, %r2444;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2448, %r2296, %r2445;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2451, %r2427, %r2441, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2455, %r2434, %r2448, %r2331;
	// end inline asm
	shl.b32 	%r2462, %r2455, 4;
	// begin inline asm
	lop3.b32 %r2459, %r2337, %r2451, %r2462, 202;
	// end inline asm
	xor.b32  	%r7887, %r2459, -2004318072;
	st.shared.u32 	[%rd187], %r7884;
	st.shared.u32 	[%rd188], %r7885;
	st.shared.u32 	[%rd189], %r7886;
	st.shared.u32 	[%rd190], %r7887;
	ld.shared.u32 	%r8044, [%rd130];
	ld.shared.u32 	%r8043, [%rd132];
	ld.shared.u32 	%r8038, [%rd134];
	ld.shared.u32 	%r8037, [%rd136];
	// begin inline asm
	mov.b32 %r2468, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2479, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2467, %r8044, -2004318072;
	// begin inline asm
	lop3.b32 %r2465, %r670, %r2467, %r2468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2469, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2470, %r2468, %r2469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2473, %r2465, %r2470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2476, %r681, %r2467, %r2479, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2480, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2481, %r2479, %r2480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2484, %r2476, %r2481;
	// end inline asm
	shr.u32 	%r2489, %r2467, 8;
	// begin inline asm
	lop3.b32 %r2487, %r670, %r2489, %r2468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2491, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2492, %r2468, %r2491;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2495, %r2487, %r2492;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2498, %r681, %r2489, %r2479, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2502, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2503, %r2479, %r2502;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2506, %r2498, %r2503;
	// end inline asm
	// begin inline asm
	mov.b32 %r2514, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2525, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2513, %r8043, -2004318072;
	// begin inline asm
	lop3.b32 %r2511, %r670, %r2513, %r2514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2515, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2516, %r2514, %r2515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2519, %r2511, %r2516;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2522, %r681, %r2513, %r2525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2526, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2527, %r2525, %r2526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2530, %r2522, %r2527;
	// end inline asm
	shr.u32 	%r2535, %r2513, 8;
	// begin inline asm
	lop3.b32 %r2533, %r670, %r2535, %r2514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2537, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2538, %r2514, %r2537;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2541, %r2533, %r2538;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2544, %r681, %r2535, %r2525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2548, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2549, %r2525, %r2548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2552, %r2544, %r2549;
	// end inline asm
	// begin inline asm
	mov.b32 %r2560, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2571, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2559, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r2557, %r670, %r2559, %r2560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2561, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2562, %r2560, %r2561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2565, %r2557, %r2562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2568, %r681, %r2559, %r2571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2572, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2573, %r2571, %r2572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2576, %r2568, %r2573;
	// end inline asm
	shr.u32 	%r2581, %r2559, 8;
	// begin inline asm
	lop3.b32 %r2579, %r670, %r2581, %r2560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2583, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2584, %r2560, %r2583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2587, %r2579, %r2584;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2590, %r681, %r2581, %r2571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2594, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2595, %r2571, %r2594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2598, %r2590, %r2595;
	// end inline asm
	// begin inline asm
	mov.b32 %r2606, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2617, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2605, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r2603, %r670, %r2605, %r2606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2607, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2608, %r2606, %r2607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2611, %r2603, %r2608;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2614, %r681, %r2605, %r2617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2618, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2619, %r2617, %r2618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2622, %r2614, %r2619;
	// end inline asm
	shr.u32 	%r2627, %r2605, 8;
	// begin inline asm
	lop3.b32 %r2625, %r670, %r2627, %r2606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2629, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2630, %r2606, %r2629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2633, %r2625, %r2630;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2636, %r681, %r2627, %r2617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2640, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2641, %r2617, %r2640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2644, %r2636, %r2641;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2647, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2649, %r2647, %r2473;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2652, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2654, %r2652, %r2484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2657, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2659, %r2657, %r2495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2662, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2664, %r2662, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2667, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r2667, %r2519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2672, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2674, %r2672, %r2530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2677, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r2677, %r2541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2682, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2684, %r2682, %r2552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2687, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2689, %r2687, %r2565;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2692, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r2692, %r2576;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2697, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2699, %r2697, %r2587;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2702, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2704, %r2702, %r2598;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2707, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r2707, %r2611;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2712, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2714, %r2712, %r2622;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2717, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2719, %r2717, %r2633;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2722, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2724, %r2722, %r2644;
	// end inline asm
	// begin inline asm
	mov.b32 %r2732, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2743, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2729, %r670, %r1183, %r2732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2733, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2734, %r2732, %r2733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2737, %r2729, %r2734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2740, %r681, %r1183, %r2743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2744, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2745, %r2743, %r2744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2748, %r2740, %r2745;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2751, %r670, %r1205, %r2732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2755, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2756, %r2732, %r2755;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2759, %r2751, %r2756;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2762, %r681, %r1205, %r2743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2766, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2767, %r2743, %r2766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2770, %r2762, %r2767;
	// end inline asm
	// begin inline asm
	mov.b32 %r2778, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2789, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2775, %r670, %r1229, %r2778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2779, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2780, %r2778, %r2779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2783, %r2775, %r2780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2786, %r681, %r1229, %r2789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2790, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2791, %r2789, %r2790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2794, %r2786, %r2791;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2797, %r670, %r1251, %r2778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2801, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2802, %r2778, %r2801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2805, %r2797, %r2802;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2808, %r681, %r1251, %r2789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2812, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2813, %r2789, %r2812;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2816, %r2808, %r2813;
	// end inline asm
	// begin inline asm
	mov.b32 %r2824, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2835, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2821, %r670, %r1275, %r2824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2825, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2826, %r2824, %r2825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2829, %r2821, %r2826;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2832, %r681, %r1275, %r2835, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2836, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2837, %r2835, %r2836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2840, %r2832, %r2837;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2843, %r670, %r1297, %r2824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2847, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2848, %r2824, %r2847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2851, %r2843, %r2848;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2854, %r681, %r1297, %r2835, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2858, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2859, %r2835, %r2858;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2862, %r2854, %r2859;
	// end inline asm
	// begin inline asm
	mov.b32 %r2870, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2881, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2867, %r670, %r1321, %r2870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2871, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2872, %r2870, %r2871;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2875, %r2867, %r2872;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2878, %r681, %r1321, %r2881, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2882, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2883, %r2881, %r2882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2886, %r2878, %r2883;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2889, %r670, %r1343, %r2870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2893, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2894, %r2870, %r2893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2897, %r2889, %r2894;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2900, %r681, %r1343, %r2881, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2904, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2905, %r2881, %r2904;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2908, %r2900, %r2905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r227, %r2737, %r2649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r227, %r2748, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r227, %r2759, %r2659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r227, %r2770, %r2664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r227, %r2783, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2931, %r227, %r2794, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2935, %r227, %r2805, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2939, %r227, %r2816, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2943, %r227, %r2829, %r2689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r227, %r2840, %r2694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r227, %r2851, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2955, %r227, %r2862, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2959, %r227, %r2875, %r2709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r227, %r2886, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2967, %r227, %r2897, %r2719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r227, %r2908, %r2724;
	// end inline asm
	// begin inline asm
	mov.b32 %r2980, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2991, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2977, %r670, %r1463, %r2980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2981, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2982, %r2980, %r2981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2985, %r2977, %r2982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2988, %r681, %r1463, %r2991, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2992, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2993, %r2991, %r2992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2996, %r2988, %r2993;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2999, %r670, %r1485, %r2980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3003, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3004, %r2980, %r3003;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3007, %r2999, %r3004;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3010, %r681, %r1485, %r2991, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3014, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3015, %r2991, %r3014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3018, %r3010, %r3015;
	// end inline asm
	// begin inline asm
	mov.b32 %r3026, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3037, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3023, %r670, %r1509, %r3026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3027, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3028, %r3026, %r3027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3031, %r3023, %r3028;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3034, %r681, %r1509, %r3037, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3038, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3039, %r3037, %r3038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3042, %r3034, %r3039;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3045, %r670, %r1531, %r3026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3049, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3050, %r3026, %r3049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3053, %r3045, %r3050;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3056, %r681, %r1531, %r3037, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3060, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3061, %r3037, %r3060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3064, %r3056, %r3061;
	// end inline asm
	// begin inline asm
	mov.b32 %r3072, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3083, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3069, %r670, %r1555, %r3072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3073, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3074, %r3072, %r3073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3077, %r3069, %r3074;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3080, %r681, %r1555, %r3083, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3084, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3085, %r3083, %r3084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3088, %r3080, %r3085;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3091, %r670, %r1577, %r3072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3095, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3096, %r3072, %r3095;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3099, %r3091, %r3096;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3102, %r681, %r1577, %r3083, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3106, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3107, %r3083, %r3106;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3110, %r3102, %r3107;
	// end inline asm
	// begin inline asm
	mov.b32 %r3118, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3129, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3115, %r670, %r1601, %r3118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3119, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3120, %r3118, %r3119;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3123, %r3115, %r3120;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3126, %r681, %r1601, %r3129, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3130, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3131, %r3129, %r3130;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3134, %r3126, %r3131;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3137, %r670, %r1623, %r3118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3141, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3142, %r3118, %r3141;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3145, %r3137, %r3142;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3148, %r681, %r1623, %r3129, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3152, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3153, %r3129, %r3152;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3156, %r3148, %r3153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3159, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r3159, %r2985, %r2911;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3165, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3165, %r2996, %r2915;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3171, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3171, %r3007, %r2919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3177, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3177, %r3018, %r2923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3183, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r3183, %r3031, %r2927;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3189, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r3189, %r3042, %r2931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3195, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r3195, %r3053, %r2935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3201, %r3064, %r2939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r3207, %r3077, %r2943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3213, %r3088, %r2947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3219, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r3219, %r3099, %r2951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3225, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r3225, %r3110, %r2955;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3231, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3231, %r3123, %r2959;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3237, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r3237, %r3134, %r2963;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3243, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r3243, %r3145, %r2967;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3249, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r3249, %r3156, %r2971;
	// end inline asm
	// begin inline asm
	mov.b32 %r3260, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3271, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3257, %r670, %r671, %r3260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3261, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3262, %r3260, %r3261;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3265, %r3257, %r3262;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3268, %r681, %r671, %r3271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3272, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3273, %r3271, %r3272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3276, %r3268, %r3273;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3279, %r670, %r693, %r3260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3283, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3284, %r3260, %r3283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3287, %r3279, %r3284;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3290, %r681, %r693, %r3271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3294, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3295, %r3271, %r3294;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3298, %r3290, %r3295;
	// end inline asm
	// begin inline asm
	mov.b32 %r3306, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3317, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3303, %r670, %r717, %r3306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3308, %r3306, %r3307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3311, %r3303, %r3308;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3314, %r681, %r717, %r3317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3319, %r3317, %r3318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3322, %r3314, %r3319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3325, %r670, %r739, %r3306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3330, %r3306, %r3329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3333, %r3325, %r3330;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3336, %r681, %r739, %r3317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3340, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3341, %r3317, %r3340;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3344, %r3336, %r3341;
	// end inline asm
	// begin inline asm
	mov.b32 %r3352, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3363, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3349, %r670, %r763, %r3352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3353, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3354, %r3352, %r3353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3357, %r3349, %r3354;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3360, %r681, %r763, %r3363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3365, %r3363, %r3364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3368, %r3360, %r3365;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3371, %r670, %r785, %r3352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3375, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3376, %r3352, %r3375;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3379, %r3371, %r3376;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3382, %r681, %r785, %r3363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3386, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3387, %r3363, %r3386;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3390, %r3382, %r3387;
	// end inline asm
	// begin inline asm
	mov.b32 %r3398, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3409, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3395, %r670, %r809, %r3398, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3399, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3400, %r3398, %r3399;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3403, %r3395, %r3400;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3406, %r681, %r809, %r3409, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3410, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3411, %r3409, %r3410;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3414, %r3406, %r3411;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3417, %r670, %r831, %r3398, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3421, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3422, %r3398, %r3421;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3425, %r3417, %r3422;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3428, %r681, %r831, %r3409, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3432, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3433, %r3409, %r3432;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3436, %r3428, %r3433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r263, %r3265, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r263, %r3276, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r263, %r3287, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r263, %r3298, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r263, %r3311, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r263, %r3322, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r263, %r3333, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r263, %r3344, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r263, %r3357, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r263, %r3368, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r263, %r3379, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r263, %r3390, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r263, %r3403, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r263, %r3414, %r3239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3573, %r263, %r3425, %r3245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3570, %r263, %r3436, %r3251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3503, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3505, %r3503, %r3507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r309, %r3510, %r3505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3512, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3514, %r3512, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r309, %r3519, %r3514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3521, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3523, %r3521, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r309, %r3528, %r3523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3530, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3532, %r3530, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r309, %r3537, %r3532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3539, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3541, %r3539, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r309, %r3546, %r3541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3548, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r3548, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r309, %r3555, %r3550;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3557, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3559, %r3557, %r3561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3562, %r309, %r3564, %r3559;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3566, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3568, %r3566, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3571, %r309, %r3573, %r3568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3575, %r312, %r3510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3578, %r309, %r3507, %r3575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3582, %r312, %r3519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3585, %r309, %r3516, %r3582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3589, %r312, %r3528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3592, %r309, %r3525, %r3589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3596, %r312, %r3537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3599, %r309, %r3534, %r3596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3603, %r312, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3606, %r309, %r3543, %r3603;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3610, %r312, %r3555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3613, %r309, %r3552, %r3610;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3617, %r312, %r3564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3620, %r309, %r3561, %r3617;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3624, %r312, %r3573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3627, %r309, %r3570, %r3624;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3718, %r3715}, {%r356, %r362, %r359, %r365}, {%r3508, %r3578}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3727, %r3724}, {%r356, %r362, %r359, %r365}, {%r3517, %r3585}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3736, %r3733}, {%r356, %r362, %r359, %r365}, {%r3526, %r3592}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3745, %r3742}, {%r356, %r362, %r359, %r365}, {%r3535, %r3599}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3754, %r3751}, {%r356, %r362, %r359, %r365}, {%r3544, %r3606}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3763, %r3760}, {%r356, %r362, %r359, %r365}, {%r3553, %r3613}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3772, %r3769}, {%r356, %r362, %r359, %r365}, {%r3562, %r3620}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3781, %r3778}, {%r356, %r362, %r359, %r365}, {%r3571, %r3627}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3711, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3713, %r3711, %r3715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3716, %r400, %r3718, %r3713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3720, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3722, %r3720, %r3724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3725, %r400, %r3727, %r3722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3729, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3731, %r3729, %r3733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3734, %r400, %r3736, %r3731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3738, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3740, %r3738, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3743, %r400, %r3745, %r3740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3747, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3749, %r3747, %r3751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3752, %r400, %r3754, %r3749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3756, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3758, %r3756, %r3760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r400, %r3763, %r3758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3765, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3767, %r3765, %r3769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3770, %r400, %r3772, %r3767;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3774, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3776, %r3774, %r3778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3779, %r400, %r3781, %r3776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3783, %r403, %r3718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3786, %r400, %r3715, %r3783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3790, %r403, %r3727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3793, %r400, %r3724, %r3790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3797, %r403, %r3736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3800, %r400, %r3733, %r3797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3804, %r403, %r3745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3807, %r400, %r3742, %r3804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3811, %r403, %r3754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3814, %r400, %r3751, %r3811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3818, %r403, %r3763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3821, %r400, %r3760, %r3818;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3825, %r403, %r3772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3828, %r400, %r3769, %r3825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3832, %r403, %r3781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3835, %r400, %r3778, %r3832;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3839, %r3840}, {%r434, %r440, %r437, %r443}, {%r3716, %r3786}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3849, %r3850}, {%r434, %r440, %r437, %r443}, {%r3725, %r3793}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3859, %r3860}, {%r434, %r440, %r437, %r443}, {%r3734, %r3800}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3869, %r3870}, {%r434, %r440, %r437, %r443}, {%r3743, %r3807}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3879, %r3880}, {%r434, %r440, %r437, %r443}, {%r3752, %r3814}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3889, %r3890}, {%r434, %r440, %r437, %r443}, {%r3761, %r3821}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3899, %r3900}, {%r434, %r440, %r437, %r443}, {%r3770, %r3828}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3909, %r3910}, {%r434, %r440, %r437, %r443}, {%r3779, %r3835}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3919, %r123, %r3839;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3922, %r123, %r3840;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r123, %r3849;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3928, %r123, %r3850;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3931, %r123, %r3859;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3934, %r123, %r3860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3937, %r123, %r3869;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3940, %r123, %r3870;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3943, %r123, %r3879;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3946, %r123, %r3880;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3949, %r123, %r3889;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3952, %r123, %r3890;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3955, %r123, %r3899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3958, %r123, %r3900;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3961, %r123, %r3909;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3964, %r123, %r3910;
	// end inline asm
	// begin inline asm
	mov.b32 %r3967, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3968, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3969, %r3919, %r3967;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3972, %r3969, %r3968;
	// end inline asm
	// begin inline asm
	mov.b32 %r3975, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3976, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3977, %r3922, %r3975;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3980, %r3977, %r3976;
	// end inline asm
	// begin inline asm
	mov.b32 %r3983, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3984, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3985, %r3925, %r3983;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3988, %r3985, %r3984;
	// end inline asm
	// begin inline asm
	mov.b32 %r3991, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3992, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3993, %r3928, %r3991;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3996, %r3993, %r3992;
	// end inline asm
	// begin inline asm
	mov.b32 %r3999, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4000, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4001, %r3931, %r3999;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4004, %r4001, %r4000;
	// end inline asm
	// begin inline asm
	mov.b32 %r4007, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4008, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4009, %r3934, %r4007;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4012, %r4009, %r4008;
	// end inline asm
	// begin inline asm
	mov.b32 %r4015, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4016, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4017, %r3937, %r4015;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4020, %r4017, %r4016;
	// end inline asm
	// begin inline asm
	mov.b32 %r4023, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4024, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4025, %r3940, %r4023;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4028, %r4025, %r4024;
	// end inline asm
	// begin inline asm
	mov.b32 %r4031, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4032, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4033, %r3943, %r4031;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4036, %r4033, %r4032;
	// end inline asm
	// begin inline asm
	mov.b32 %r4039, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4040, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4041, %r3946, %r4039;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4044, %r4041, %r4040;
	// end inline asm
	// begin inline asm
	mov.b32 %r4047, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4048, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4049, %r3949, %r4047;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4052, %r4049, %r4048;
	// end inline asm
	// begin inline asm
	mov.b32 %r4055, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4056, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4057, %r3952, %r4055;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4060, %r4057, %r4056;
	// end inline asm
	// begin inline asm
	mov.b32 %r4063, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4064, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4065, %r3955, %r4063;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4068, %r4065, %r4064;
	// end inline asm
	// begin inline asm
	mov.b32 %r4071, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4072, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4073, %r3958, %r4071;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4076, %r4073, %r4072;
	// end inline asm
	// begin inline asm
	mov.b32 %r4079, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4080, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4081, %r3961, %r4079;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4084, %r4081, %r4080;
	// end inline asm
	// begin inline asm
	mov.b32 %r4087, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4088, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4089, %r3964, %r4087;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4092, %r4089, %r4088;
	// end inline asm
	// begin inline asm
	mov.b32 %r4098, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4096, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4097, %r4098, %r4096;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4100, %r3972, %r4097;
	// end inline asm
	// begin inline asm
	mov.b32 %r4103, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4104, %r4098, %r4103;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4107, %r3980, %r4104;
	// end inline asm
	// begin inline asm
	mov.b32 %r4110, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4111, %r4098, %r4110;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4114, %r3988, %r4111;
	// end inline asm
	// begin inline asm
	mov.b32 %r4117, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4118, %r4098, %r4117;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4121, %r3996, %r4118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4124, %r4100, %r4114, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4128, %r4107, %r4121, %r2331;
	// end inline asm
	shl.b32 	%r4135, %r4128, 4;
	// begin inline asm
	lop3.b32 %r4132, %r2337, %r4124, %r4135, 202;
	// end inline asm
	xor.b32  	%r7888, %r4132, -2004318072;
	// begin inline asm
	mov.b32 %r4139, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4137, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4138, %r4139, %r4137;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4141, %r4004, %r4138;
	// end inline asm
	// begin inline asm
	mov.b32 %r4144, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4145, %r4139, %r4144;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4148, %r4012, %r4145;
	// end inline asm
	// begin inline asm
	mov.b32 %r4151, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4152, %r4139, %r4151;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4155, %r4020, %r4152;
	// end inline asm
	// begin inline asm
	mov.b32 %r4158, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4159, %r4139, %r4158;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4162, %r4028, %r4159;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4165, %r4141, %r4155, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4169, %r4148, %r4162, %r2331;
	// end inline asm
	shl.b32 	%r4176, %r4169, 4;
	// begin inline asm
	lop3.b32 %r4173, %r2337, %r4165, %r4176, 202;
	// end inline asm
	xor.b32  	%r7889, %r4173, -2004318072;
	// begin inline asm
	mov.b32 %r4180, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4178, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4179, %r4180, %r4178;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4182, %r4036, %r4179;
	// end inline asm
	// begin inline asm
	mov.b32 %r4185, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4186, %r4180, %r4185;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4189, %r4044, %r4186;
	// end inline asm
	// begin inline asm
	mov.b32 %r4192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4193, %r4180, %r4192;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4196, %r4052, %r4193;
	// end inline asm
	// begin inline asm
	mov.b32 %r4199, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4200, %r4180, %r4199;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4203, %r4060, %r4200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4206, %r4182, %r4196, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4210, %r4189, %r4203, %r2331;
	// end inline asm
	shl.b32 	%r4217, %r4210, 4;
	// begin inline asm
	lop3.b32 %r4214, %r2337, %r4206, %r4217, 202;
	// end inline asm
	xor.b32  	%r7890, %r4214, -2004318072;
	// begin inline asm
	mov.b32 %r4221, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4219, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4220, %r4221, %r4219;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4223, %r4068, %r4220;
	// end inline asm
	// begin inline asm
	mov.b32 %r4226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4227, %r4221, %r4226;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4230, %r4076, %r4227;
	// end inline asm
	// begin inline asm
	mov.b32 %r4233, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4234, %r4221, %r4233;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4237, %r4084, %r4234;
	// end inline asm
	// begin inline asm
	mov.b32 %r4240, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4241, %r4221, %r4240;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4244, %r4092, %r4241;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4247, %r4223, %r4237, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4251, %r4230, %r4244, %r2331;
	// end inline asm
	shl.b32 	%r4258, %r4251, 4;
	// begin inline asm
	lop3.b32 %r4255, %r2337, %r4247, %r4258, 202;
	// end inline asm
	xor.b32  	%r7891, %r4255, -2004318072;
	st.shared.u32 	[%rd187], %r7888;
	st.shared.u32 	[%rd188], %r7889;
	st.shared.u32 	[%rd189], %r7890;
	st.shared.u32 	[%rd190], %r7891;
	ld.shared.u32 	%r8042, [%rd130];
	ld.shared.u32 	%r8041, [%rd132];
	ld.shared.u32 	%r8036, [%rd134];
	ld.shared.u32 	%r8035, [%rd136];
	// begin inline asm
	mov.b32 %r4264, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4275, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4263, %r8042, -2004318072;
	// begin inline asm
	lop3.b32 %r4261, %r670, %r4263, %r4264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4265, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4266, %r4264, %r4265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4269, %r4261, %r4266;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4272, %r681, %r4263, %r4275, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4276, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4277, %r4275, %r4276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4280, %r4272, %r4277;
	// end inline asm
	shr.u32 	%r4285, %r4263, 8;
	// begin inline asm
	lop3.b32 %r4283, %r670, %r4285, %r4264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4287, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4288, %r4264, %r4287;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4291, %r4283, %r4288;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4294, %r681, %r4285, %r4275, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4298, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4299, %r4275, %r4298;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4302, %r4294, %r4299;
	// end inline asm
	// begin inline asm
	mov.b32 %r4310, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4321, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4309, %r8041, -2004318072;
	// begin inline asm
	lop3.b32 %r4307, %r670, %r4309, %r4310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4311, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4312, %r4310, %r4311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4315, %r4307, %r4312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4318, %r681, %r4309, %r4321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4323, %r4321, %r4322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4326, %r4318, %r4323;
	// end inline asm
	shr.u32 	%r4331, %r4309, 8;
	// begin inline asm
	lop3.b32 %r4329, %r670, %r4331, %r4310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4333, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4334, %r4310, %r4333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4337, %r4329, %r4334;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4340, %r681, %r4331, %r4321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4344, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4345, %r4321, %r4344;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4348, %r4340, %r4345;
	// end inline asm
	// begin inline asm
	mov.b32 %r4356, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4367, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4355, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r4353, %r670, %r4355, %r4356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4358, %r4356, %r4357;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4361, %r4353, %r4358;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4364, %r681, %r4355, %r4367, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4369, %r4367, %r4368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4372, %r4364, %r4369;
	// end inline asm
	shr.u32 	%r4377, %r4355, 8;
	// begin inline asm
	lop3.b32 %r4375, %r670, %r4377, %r4356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4379, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4380, %r4356, %r4379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4383, %r4375, %r4380;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4386, %r681, %r4377, %r4367, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4391, %r4367, %r4390;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4394, %r4386, %r4391;
	// end inline asm
	// begin inline asm
	mov.b32 %r4402, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4413, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4401, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r4399, %r670, %r4401, %r4402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4403, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4404, %r4402, %r4403;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4407, %r4399, %r4404;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4410, %r681, %r4401, %r4413, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4414, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4415, %r4413, %r4414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4418, %r4410, %r4415;
	// end inline asm
	shr.u32 	%r4423, %r4401, 8;
	// begin inline asm
	lop3.b32 %r4421, %r670, %r4423, %r4402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4425, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4426, %r4402, %r4425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4429, %r4421, %r4426;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4432, %r681, %r4423, %r4413, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4436, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4437, %r4413, %r4436;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4440, %r4432, %r4437;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4443, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4445, %r4443, %r4269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4448, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4450, %r4448, %r4280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4453, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4455, %r4453, %r4291;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4458, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4460, %r4458, %r4302;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4463, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4465, %r4463, %r4315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4468, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4470, %r4468, %r4326;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4473, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4475, %r4473, %r4337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4478, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4480, %r4478, %r4348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4483, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4485, %r4483, %r4361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4488, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4490, %r4488, %r4372;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4493, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4495, %r4493, %r4383;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4498, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4500, %r4498, %r4394;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4503, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4505, %r4503, %r4407;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4508, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4510, %r4508, %r4418;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4513, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4515, %r4513, %r4429;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4518, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4520, %r4518, %r4440;
	// end inline asm
	// begin inline asm
	mov.b32 %r4528, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4539, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4525, %r670, %r1463, %r4528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4529, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4530, %r4528, %r4529;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4533, %r4525, %r4530;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4536, %r681, %r1463, %r4539, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4540, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4541, %r4539, %r4540;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4544, %r4536, %r4541;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4547, %r670, %r1485, %r4528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4551, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4552, %r4528, %r4551;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4555, %r4547, %r4552;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4558, %r681, %r1485, %r4539, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4562, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4563, %r4539, %r4562;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4566, %r4558, %r4563;
	// end inline asm
	// begin inline asm
	mov.b32 %r4574, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4585, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4571, %r670, %r1509, %r4574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4575, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4576, %r4574, %r4575;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4579, %r4571, %r4576;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4582, %r681, %r1509, %r4585, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4586, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4587, %r4585, %r4586;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4590, %r4582, %r4587;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4593, %r670, %r1531, %r4574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4597, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4598, %r4574, %r4597;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4601, %r4593, %r4598;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4604, %r681, %r1531, %r4585, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4608, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4609, %r4585, %r4608;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4612, %r4604, %r4609;
	// end inline asm
	// begin inline asm
	mov.b32 %r4620, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4631, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4617, %r670, %r1555, %r4620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4621, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4622, %r4620, %r4621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4625, %r4617, %r4622;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4628, %r681, %r1555, %r4631, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4632, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4633, %r4631, %r4632;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4636, %r4628, %r4633;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4639, %r670, %r1577, %r4620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4643, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4644, %r4620, %r4643;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4647, %r4639, %r4644;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4650, %r681, %r1577, %r4631, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4654, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4655, %r4631, %r4654;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4658, %r4650, %r4655;
	// end inline asm
	// begin inline asm
	mov.b32 %r4666, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4677, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4663, %r670, %r1601, %r4666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4667, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4668, %r4666, %r4667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4671, %r4663, %r4668;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4674, %r681, %r1601, %r4677, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4678, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4679, %r4677, %r4678;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4682, %r4674, %r4679;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4685, %r670, %r1623, %r4666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4689, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4690, %r4666, %r4689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4693, %r4685, %r4690;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4696, %r681, %r1623, %r4677, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4700, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4701, %r4677, %r4700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4704, %r4696, %r4701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4707, %r227, %r4533, %r4445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4711, %r227, %r4544, %r4450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4715, %r227, %r4555, %r4455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4719, %r227, %r4566, %r4460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4723, %r227, %r4579, %r4465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4727, %r227, %r4590, %r4470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4731, %r227, %r4601, %r4475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4735, %r227, %r4612, %r4480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4739, %r227, %r4625, %r4485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4743, %r227, %r4636, %r4490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4747, %r227, %r4647, %r4495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4751, %r227, %r4658, %r4500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4755, %r227, %r4671, %r4505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4759, %r227, %r4682, %r4510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4763, %r227, %r4693, %r4515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4767, %r227, %r4704, %r4520;
	// end inline asm
	// begin inline asm
	mov.b32 %r4776, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4787, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4773, %r670, %r671, %r4776, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4777, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4778, %r4776, %r4777;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4781, %r4773, %r4778;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4784, %r681, %r671, %r4787, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4788, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4789, %r4787, %r4788;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4792, %r4784, %r4789;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4795, %r670, %r693, %r4776, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4799, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4800, %r4776, %r4799;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4803, %r4795, %r4800;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4806, %r681, %r693, %r4787, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4810, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4811, %r4787, %r4810;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4814, %r4806, %r4811;
	// end inline asm
	// begin inline asm
	mov.b32 %r4822, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4833, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4819, %r670, %r717, %r4822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4823, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4824, %r4822, %r4823;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4827, %r4819, %r4824;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4830, %r681, %r717, %r4833, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4834, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4835, %r4833, %r4834;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4838, %r4830, %r4835;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4841, %r670, %r739, %r4822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4845, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4846, %r4822, %r4845;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4849, %r4841, %r4846;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4852, %r681, %r739, %r4833, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4856, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4857, %r4833, %r4856;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4860, %r4852, %r4857;
	// end inline asm
	// begin inline asm
	mov.b32 %r4868, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4879, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4865, %r670, %r763, %r4868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4869, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4870, %r4868, %r4869;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4873, %r4865, %r4870;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4876, %r681, %r763, %r4879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4880, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4881, %r4879, %r4880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4884, %r4876, %r4881;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4887, %r670, %r785, %r4868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4891, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4892, %r4868, %r4891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4895, %r4887, %r4892;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4898, %r681, %r785, %r4879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4902, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4903, %r4879, %r4902;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4906, %r4898, %r4903;
	// end inline asm
	// begin inline asm
	mov.b32 %r4914, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4925, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4911, %r670, %r809, %r4914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4915, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4916, %r4914, %r4915;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4919, %r4911, %r4916;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4922, %r681, %r809, %r4925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4926, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4927, %r4925, %r4926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4930, %r4922, %r4927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4933, %r670, %r831, %r4914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4937, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4938, %r4914, %r4937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4941, %r4933, %r4938;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4944, %r681, %r831, %r4925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4948, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4949, %r4925, %r4948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4952, %r4944, %r4949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4955, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4957, %r4955, %r4781, %r4707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4961, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4963, %r4961, %r4792, %r4711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4967, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4969, %r4967, %r4803, %r4715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4973, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4975, %r4973, %r4814, %r4719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4979, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4981, %r4979, %r4827, %r4723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4985, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4987, %r4985, %r4838, %r4727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4991, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4993, %r4991, %r4849, %r4731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4997, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4999, %r4997, %r4860, %r4735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5003, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5005, %r5003, %r4873, %r4739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5009, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5011, %r5009, %r4884, %r4743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5015, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5017, %r5015, %r4895, %r4747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5021, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5023, %r5021, %r4906, %r4751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5027, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5029, %r5027, %r4919, %r4755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5033, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5035, %r5033, %r4930, %r4759;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5039, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5041, %r5039, %r4941, %r4763;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5045, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5047, %r5045, %r4952, %r4767;
	// end inline asm
	// begin inline asm
	mov.b32 %r5056, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5067, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5053, %r670, %r2467, %r5056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5058, %r5056, %r5057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5061, %r5053, %r5058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5064, %r681, %r2467, %r5067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5069, %r5067, %r5068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5072, %r5064, %r5069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5075, %r670, %r2489, %r5056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5079, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5080, %r5056, %r5079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5083, %r5075, %r5080;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5086, %r681, %r2489, %r5067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5091, %r5067, %r5090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5094, %r5086, %r5091;
	// end inline asm
	// begin inline asm
	mov.b32 %r5102, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5113, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5099, %r670, %r2513, %r5102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5103, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5104, %r5102, %r5103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5107, %r5099, %r5104;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5110, %r681, %r2513, %r5113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5114, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5115, %r5113, %r5114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5118, %r5110, %r5115;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5121, %r670, %r2535, %r5102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5125, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5126, %r5102, %r5125;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5129, %r5121, %r5126;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5132, %r681, %r2535, %r5113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5136, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5137, %r5113, %r5136;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5140, %r5132, %r5137;
	// end inline asm
	// begin inline asm
	mov.b32 %r5148, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5159, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5145, %r670, %r2559, %r5148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5149, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5150, %r5148, %r5149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5153, %r5145, %r5150;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5156, %r681, %r2559, %r5159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5160, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5161, %r5159, %r5160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5164, %r5156, %r5161;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5167, %r670, %r2581, %r5148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5171, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5172, %r5148, %r5171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5175, %r5167, %r5172;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5178, %r681, %r2581, %r5159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5182, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5183, %r5159, %r5182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5186, %r5178, %r5183;
	// end inline asm
	// begin inline asm
	mov.b32 %r5194, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5205, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5191, %r670, %r2605, %r5194, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5195, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5196, %r5194, %r5195;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5199, %r5191, %r5196;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5202, %r681, %r2605, %r5205, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5206, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5207, %r5205, %r5206;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5210, %r5202, %r5207;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5213, %r670, %r2627, %r5194, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5217, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5218, %r5194, %r5217;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5221, %r5213, %r5218;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5224, %r681, %r2627, %r5205, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5228, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5229, %r5205, %r5228;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5232, %r5224, %r5229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5306, %r263, %r5061, %r4957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5303, %r263, %r5072, %r4963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5315, %r263, %r5083, %r4969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r263, %r5094, %r4975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5324, %r263, %r5107, %r4981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r263, %r5118, %r4987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5333, %r263, %r5129, %r4993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r263, %r5140, %r4999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r263, %r5153, %r5005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r263, %r5164, %r5011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5351, %r263, %r5175, %r5017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5348, %r263, %r5186, %r5023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5360, %r263, %r5199, %r5029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5357, %r263, %r5210, %r5035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5369, %r263, %r5221, %r5041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5366, %r263, %r5232, %r5047;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5299, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5301, %r5299, %r5303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5304, %r309, %r5306, %r5301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5308, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5310, %r5308, %r5312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5313, %r309, %r5315, %r5310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5317, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5319, %r5317, %r5321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5322, %r309, %r5324, %r5319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5326, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5328, %r5326, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5331, %r309, %r5333, %r5328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5335, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5337, %r5335, %r5339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5340, %r309, %r5342, %r5337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5344, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5346, %r5344, %r5348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5349, %r309, %r5351, %r5346;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5353, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5355, %r5353, %r5357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5358, %r309, %r5360, %r5355;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5362, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5364, %r5362, %r5366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5367, %r309, %r5369, %r5364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5371, %r312, %r5306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5374, %r309, %r5303, %r5371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5378, %r312, %r5315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5381, %r309, %r5312, %r5378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5385, %r312, %r5324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5388, %r309, %r5321, %r5385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5392, %r312, %r5333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5395, %r309, %r5330, %r5392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5399, %r312, %r5342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5402, %r309, %r5339, %r5399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5406, %r312, %r5351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5409, %r309, %r5348, %r5406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5413, %r312, %r5360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5416, %r309, %r5357, %r5413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5420, %r312, %r5369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5423, %r309, %r5366, %r5420;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5514, %r5511}, {%r356, %r362, %r359, %r365}, {%r5304, %r5374}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5523, %r5520}, {%r356, %r362, %r359, %r365}, {%r5313, %r5381}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5532, %r5529}, {%r356, %r362, %r359, %r365}, {%r5322, %r5388}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5541, %r5538}, {%r356, %r362, %r359, %r365}, {%r5331, %r5395}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5550, %r5547}, {%r356, %r362, %r359, %r365}, {%r5340, %r5402}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5559, %r5556}, {%r356, %r362, %r359, %r365}, {%r5349, %r5409}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5568, %r5565}, {%r356, %r362, %r359, %r365}, {%r5358, %r5416}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5577, %r5574}, {%r356, %r362, %r359, %r365}, {%r5367, %r5423}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5507, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5509, %r5507, %r5511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5512, %r400, %r5514, %r5509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5516, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5518, %r5516, %r5520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5521, %r400, %r5523, %r5518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5525, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5527, %r5525, %r5529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5530, %r400, %r5532, %r5527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5534, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5536, %r5534, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5539, %r400, %r5541, %r5536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5543, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5545, %r5543, %r5547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5548, %r400, %r5550, %r5545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5552, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5554, %r5552, %r5556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5557, %r400, %r5559, %r5554;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5561, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5563, %r5561, %r5565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5566, %r400, %r5568, %r5563;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5570, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5572, %r5570, %r5574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5575, %r400, %r5577, %r5572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5579, %r403, %r5514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5582, %r400, %r5511, %r5579;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5586, %r403, %r5523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5589, %r400, %r5520, %r5586;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5593, %r403, %r5532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5596, %r400, %r5529, %r5593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5600, %r403, %r5541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5603, %r400, %r5538, %r5600;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5607, %r403, %r5550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5610, %r400, %r5547, %r5607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5614, %r403, %r5559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5617, %r400, %r5556, %r5614;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5621, %r403, %r5568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5624, %r400, %r5565, %r5621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5628, %r403, %r5577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5631, %r400, %r5574, %r5628;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5635, %r5636}, {%r434, %r440, %r437, %r443}, {%r5512, %r5582}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5645, %r5646}, {%r434, %r440, %r437, %r443}, {%r5521, %r5589}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5655, %r5656}, {%r434, %r440, %r437, %r443}, {%r5530, %r5596}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5665, %r5666}, {%r434, %r440, %r437, %r443}, {%r5539, %r5603}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5675, %r5676}, {%r434, %r440, %r437, %r443}, {%r5548, %r5610}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5685, %r5686}, {%r434, %r440, %r437, %r443}, {%r5557, %r5617}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5695, %r5696}, {%r434, %r440, %r437, %r443}, {%r5566, %r5624}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5705, %r5706}, {%r434, %r440, %r437, %r443}, {%r5575, %r5631}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5715, %r123, %r5635;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5718, %r123, %r5636;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r123, %r5645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5724, %r123, %r5646;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5727, %r123, %r5655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5730, %r123, %r5656;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5733, %r123, %r5665;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5736, %r123, %r5666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5739, %r123, %r5675;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5742, %r123, %r5676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5745, %r123, %r5685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5748, %r123, %r5686;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5751, %r123, %r5695;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5754, %r123, %r5696;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5757, %r123, %r5705;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5760, %r123, %r5706;
	// end inline asm
	// begin inline asm
	mov.b32 %r5763, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5764, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5765, %r5715, %r5763;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5768, %r5765, %r5764;
	// end inline asm
	// begin inline asm
	mov.b32 %r5771, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5772, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5773, %r5718, %r5771;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5776, %r5773, %r5772;
	// end inline asm
	// begin inline asm
	mov.b32 %r5779, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5780, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5781, %r5721, %r5779;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5784, %r5781, %r5780;
	// end inline asm
	// begin inline asm
	mov.b32 %r5787, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5788, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5789, %r5724, %r5787;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5792, %r5789, %r5788;
	// end inline asm
	// begin inline asm
	mov.b32 %r5795, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5796, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5797, %r5727, %r5795;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5800, %r5797, %r5796;
	// end inline asm
	// begin inline asm
	mov.b32 %r5803, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5804, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5805, %r5730, %r5803;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5808, %r5805, %r5804;
	// end inline asm
	// begin inline asm
	mov.b32 %r5811, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5812, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5813, %r5733, %r5811;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5816, %r5813, %r5812;
	// end inline asm
	// begin inline asm
	mov.b32 %r5819, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5820, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5821, %r5736, %r5819;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5824, %r5821, %r5820;
	// end inline asm
	// begin inline asm
	mov.b32 %r5827, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5828, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5829, %r5739, %r5827;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5832, %r5829, %r5828;
	// end inline asm
	// begin inline asm
	mov.b32 %r5835, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5836, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5837, %r5742, %r5835;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5840, %r5837, %r5836;
	// end inline asm
	// begin inline asm
	mov.b32 %r5843, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5844, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5845, %r5745, %r5843;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5848, %r5845, %r5844;
	// end inline asm
	// begin inline asm
	mov.b32 %r5851, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5852, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5853, %r5748, %r5851;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5856, %r5853, %r5852;
	// end inline asm
	// begin inline asm
	mov.b32 %r5859, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5860, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5861, %r5751, %r5859;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5864, %r5861, %r5860;
	// end inline asm
	// begin inline asm
	mov.b32 %r5867, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5868, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5869, %r5754, %r5867;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5872, %r5869, %r5868;
	// end inline asm
	// begin inline asm
	mov.b32 %r5875, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5876, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5877, %r5757, %r5875;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5880, %r5877, %r5876;
	// end inline asm
	// begin inline asm
	mov.b32 %r5883, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5884, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5885, %r5760, %r5883;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5888, %r5885, %r5884;
	// end inline asm
	// begin inline asm
	mov.b32 %r5894, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5892, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5893, %r5894, %r5892;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5896, %r5768, %r5893;
	// end inline asm
	// begin inline asm
	mov.b32 %r5899, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5900, %r5894, %r5899;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5903, %r5776, %r5900;
	// end inline asm
	// begin inline asm
	mov.b32 %r5906, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5907, %r5894, %r5906;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5910, %r5784, %r5907;
	// end inline asm
	// begin inline asm
	mov.b32 %r5913, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5914, %r5894, %r5913;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5917, %r5792, %r5914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5920, %r5896, %r5910, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5924, %r5903, %r5917, %r2331;
	// end inline asm
	shl.b32 	%r5931, %r5924, 4;
	// begin inline asm
	lop3.b32 %r5928, %r2337, %r5920, %r5931, 202;
	// end inline asm
	xor.b32  	%r7892, %r5928, -2004318072;
	// begin inline asm
	mov.b32 %r5935, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5933, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5934, %r5935, %r5933;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5937, %r5800, %r5934;
	// end inline asm
	// begin inline asm
	mov.b32 %r5940, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5941, %r5935, %r5940;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5944, %r5808, %r5941;
	// end inline asm
	// begin inline asm
	mov.b32 %r5947, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5948, %r5935, %r5947;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5951, %r5816, %r5948;
	// end inline asm
	// begin inline asm
	mov.b32 %r5954, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5955, %r5935, %r5954;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5958, %r5824, %r5955;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5961, %r5937, %r5951, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5965, %r5944, %r5958, %r2331;
	// end inline asm
	shl.b32 	%r5972, %r5965, 4;
	// begin inline asm
	lop3.b32 %r5969, %r2337, %r5961, %r5972, 202;
	// end inline asm
	xor.b32  	%r7893, %r5969, -2004318072;
	// begin inline asm
	mov.b32 %r5976, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5974, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5975, %r5976, %r5974;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5978, %r5832, %r5975;
	// end inline asm
	// begin inline asm
	mov.b32 %r5981, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5982, %r5976, %r5981;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5985, %r5840, %r5982;
	// end inline asm
	// begin inline asm
	mov.b32 %r5988, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5989, %r5976, %r5988;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5992, %r5848, %r5989;
	// end inline asm
	// begin inline asm
	mov.b32 %r5995, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5996, %r5976, %r5995;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5999, %r5856, %r5996;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6002, %r5978, %r5992, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6006, %r5985, %r5999, %r2331;
	// end inline asm
	shl.b32 	%r6013, %r6006, 4;
	// begin inline asm
	lop3.b32 %r6010, %r2337, %r6002, %r6013, 202;
	// end inline asm
	xor.b32  	%r7894, %r6010, -2004318072;
	// begin inline asm
	mov.b32 %r6017, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6015, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6016, %r6017, %r6015;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6019, %r5864, %r6016;
	// end inline asm
	// begin inline asm
	mov.b32 %r6022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6023, %r6017, %r6022;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6026, %r5872, %r6023;
	// end inline asm
	// begin inline asm
	mov.b32 %r6029, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6030, %r6017, %r6029;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6033, %r5880, %r6030;
	// end inline asm
	// begin inline asm
	mov.b32 %r6036, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6037, %r6017, %r6036;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6040, %r5888, %r6037;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6043, %r6019, %r6033, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6047, %r6026, %r6040, %r2331;
	// end inline asm
	shl.b32 	%r6054, %r6047, 4;
	// begin inline asm
	lop3.b32 %r6051, %r2337, %r6043, %r6054, 202;
	// end inline asm
	xor.b32  	%r7895, %r6051, -2004318072;
	st.shared.u32 	[%rd187], %r7892;
	st.shared.u32 	[%rd188], %r7893;
	st.shared.u32 	[%rd189], %r7894;
	st.shared.u32 	[%rd190], %r7895;
	ld.shared.u32 	%r8040, [%rd130];
	ld.shared.u32 	%r8039, [%rd132];
	ld.shared.u32 	%r8034, [%rd134];
	ld.shared.u32 	%r8033, [%rd136];
	// begin inline asm
	mov.b32 %r6060, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6071, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6059, %r8040, -2004318072;
	// begin inline asm
	lop3.b32 %r6057, %r670, %r6059, %r6060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6061, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6062, %r6060, %r6061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6065, %r6057, %r6062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6068, %r681, %r6059, %r6071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6072, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6073, %r6071, %r6072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6076, %r6068, %r6073;
	// end inline asm
	shr.u32 	%r6081, %r6059, 8;
	// begin inline asm
	lop3.b32 %r6079, %r670, %r6081, %r6060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6084, %r6060, %r6083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6087, %r6079, %r6084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6090, %r681, %r6081, %r6071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6094, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6095, %r6071, %r6094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6098, %r6090, %r6095;
	// end inline asm
	// begin inline asm
	mov.b32 %r6106, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6117, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6105, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r6103, %r670, %r6105, %r6106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6107, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6108, %r6106, %r6107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6111, %r6103, %r6108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6114, %r681, %r6105, %r6117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6118, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6119, %r6117, %r6118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6122, %r6114, %r6119;
	// end inline asm
	shr.u32 	%r6127, %r6105, 8;
	// begin inline asm
	lop3.b32 %r6125, %r670, %r6127, %r6106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6129, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6130, %r6106, %r6129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6133, %r6125, %r6130;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6136, %r681, %r6127, %r6117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6140, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6141, %r6117, %r6140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6144, %r6136, %r6141;
	// end inline asm
	// begin inline asm
	mov.b32 %r6152, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6163, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6151, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r6149, %r670, %r6151, %r6152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6153, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6154, %r6152, %r6153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6157, %r6149, %r6154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6160, %r681, %r6151, %r6163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6164, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6165, %r6163, %r6164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6168, %r6160, %r6165;
	// end inline asm
	shr.u32 	%r6173, %r6151, 8;
	// begin inline asm
	lop3.b32 %r6171, %r670, %r6173, %r6152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6175, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6176, %r6152, %r6175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6179, %r6171, %r6176;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6182, %r681, %r6173, %r6163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6186, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6187, %r6163, %r6186;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6190, %r6182, %r6187;
	// end inline asm
	// begin inline asm
	mov.b32 %r6198, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6209, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6197, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r6195, %r670, %r6197, %r6198, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6199, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6200, %r6198, %r6199;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6203, %r6195, %r6200;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6206, %r681, %r6197, %r6209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6210, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6211, %r6209, %r6210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6214, %r6206, %r6211;
	// end inline asm
	shr.u32 	%r6219, %r6197, 8;
	// begin inline asm
	lop3.b32 %r6217, %r670, %r6219, %r6198, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6221, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6222, %r6198, %r6221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6225, %r6217, %r6222;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6228, %r681, %r6219, %r6209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6232, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6233, %r6209, %r6232;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6236, %r6228, %r6233;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6239, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6241, %r6239, %r6065;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6244, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6246, %r6244, %r6076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6249, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6251, %r6249, %r6087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6254, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6256, %r6254, %r6098;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6259, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6261, %r6259, %r6111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6264, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6266, %r6264, %r6122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6269, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6271, %r6269, %r6133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6274, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6276, %r6274, %r6144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6279, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6281, %r6279, %r6157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6284, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6286, %r6284, %r6168;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6289, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6291, %r6289, %r6179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6294, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6296, %r6294, %r6190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6299, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6301, %r6299, %r6203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6304, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6306, %r6304, %r6214;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6309, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6311, %r6309, %r6225;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6314, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6316, %r6314, %r6236;
	// end inline asm
	// begin inline asm
	mov.b32 %r6324, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6335, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6321, %r670, %r671, %r6324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6325, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6326, %r6324, %r6325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6329, %r6321, %r6326;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6332, %r681, %r671, %r6335, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6336, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6337, %r6335, %r6336;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6340, %r6332, %r6337;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6343, %r670, %r693, %r6324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6347, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6348, %r6324, %r6347;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6351, %r6343, %r6348;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6354, %r681, %r693, %r6335, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6358, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6359, %r6335, %r6358;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6362, %r6354, %r6359;
	// end inline asm
	// begin inline asm
	mov.b32 %r6370, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6381, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6367, %r670, %r717, %r6370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6371, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6372, %r6370, %r6371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6375, %r6367, %r6372;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6378, %r681, %r717, %r6381, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6382, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6383, %r6381, %r6382;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6386, %r6378, %r6383;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6389, %r670, %r739, %r6370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6393, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6394, %r6370, %r6393;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6397, %r6389, %r6394;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6400, %r681, %r739, %r6381, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6404, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6405, %r6381, %r6404;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6408, %r6400, %r6405;
	// end inline asm
	// begin inline asm
	mov.b32 %r6416, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6427, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6413, %r670, %r763, %r6416, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6417, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6418, %r6416, %r6417;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6421, %r6413, %r6418;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6424, %r681, %r763, %r6427, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6428, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6429, %r6427, %r6428;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6432, %r6424, %r6429;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6435, %r670, %r785, %r6416, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6439, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6440, %r6416, %r6439;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6443, %r6435, %r6440;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6446, %r681, %r785, %r6427, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6450, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6451, %r6427, %r6450;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6454, %r6446, %r6451;
	// end inline asm
	// begin inline asm
	mov.b32 %r6462, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6473, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6459, %r670, %r809, %r6462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6463, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6464, %r6462, %r6463;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6467, %r6459, %r6464;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6470, %r681, %r809, %r6473, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6474, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6475, %r6473, %r6474;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6478, %r6470, %r6475;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6481, %r670, %r831, %r6462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6485, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6486, %r6462, %r6485;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6489, %r6481, %r6486;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6492, %r681, %r831, %r6473, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6496, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6497, %r6473, %r6496;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6500, %r6492, %r6497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6503, %r227, %r6329, %r6241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6507, %r227, %r6340, %r6246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6511, %r227, %r6351, %r6251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6515, %r227, %r6362, %r6256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6519, %r227, %r6375, %r6261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6523, %r227, %r6386, %r6266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6527, %r227, %r6397, %r6271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6531, %r227, %r6408, %r6276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6535, %r227, %r6421, %r6281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6539, %r227, %r6432, %r6286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6543, %r227, %r6443, %r6291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6547, %r227, %r6454, %r6296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6551, %r227, %r6467, %r6301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6555, %r227, %r6478, %r6306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6559, %r227, %r6489, %r6311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6563, %r227, %r6500, %r6316;
	// end inline asm
	// begin inline asm
	mov.b32 %r6572, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6583, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6569, %r670, %r2467, %r6572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6573, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6574, %r6572, %r6573;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6577, %r6569, %r6574;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6580, %r681, %r2467, %r6583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6584, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6585, %r6583, %r6584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6588, %r6580, %r6585;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6591, %r670, %r2489, %r6572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6595, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6596, %r6572, %r6595;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6599, %r6591, %r6596;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6602, %r681, %r2489, %r6583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6606, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6607, %r6583, %r6606;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6610, %r6602, %r6607;
	// end inline asm
	// begin inline asm
	mov.b32 %r6618, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6629, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6615, %r670, %r2513, %r6618, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6619, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6620, %r6618, %r6619;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6623, %r6615, %r6620;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6626, %r681, %r2513, %r6629, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6630, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6631, %r6629, %r6630;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6634, %r6626, %r6631;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6637, %r670, %r2535, %r6618, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6641, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6642, %r6618, %r6641;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6645, %r6637, %r6642;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6648, %r681, %r2535, %r6629, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6652, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6653, %r6629, %r6652;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6656, %r6648, %r6653;
	// end inline asm
	// begin inline asm
	mov.b32 %r6664, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6675, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6661, %r670, %r2559, %r6664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6665, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6666, %r6664, %r6665;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6669, %r6661, %r6666;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6672, %r681, %r2559, %r6675, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6676, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6677, %r6675, %r6676;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6680, %r6672, %r6677;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6683, %r670, %r2581, %r6664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6687, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6688, %r6664, %r6687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6691, %r6683, %r6688;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6694, %r681, %r2581, %r6675, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6698, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6699, %r6675, %r6698;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6702, %r6694, %r6699;
	// end inline asm
	// begin inline asm
	mov.b32 %r6710, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6721, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6707, %r670, %r2605, %r6710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6711, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6712, %r6710, %r6711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6715, %r6707, %r6712;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6718, %r681, %r2605, %r6721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6722, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6723, %r6721, %r6722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6726, %r6718, %r6723;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6729, %r670, %r2627, %r6710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6733, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6734, %r6710, %r6733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6737, %r6729, %r6734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6740, %r681, %r2627, %r6721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6744, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6745, %r6721, %r6744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6748, %r6740, %r6745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6751, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6753, %r6751, %r6577, %r6503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6757, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6759, %r6757, %r6588, %r6507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6763, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6765, %r6763, %r6599, %r6511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6769, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6771, %r6769, %r6610, %r6515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6775, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6777, %r6775, %r6623, %r6519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6781, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6783, %r6781, %r6634, %r6523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6787, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6789, %r6787, %r6645, %r6527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6793, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6795, %r6793, %r6656, %r6531;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6799, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6801, %r6799, %r6669, %r6535;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6805, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6807, %r6805, %r6680, %r6539;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6811, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6813, %r6811, %r6691, %r6543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6817, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6819, %r6817, %r6702, %r6547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6823, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6825, %r6823, %r6715, %r6551;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6829, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6831, %r6829, %r6726, %r6555;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6835, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6837, %r6835, %r6737, %r6559;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6841, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6843, %r6841, %r6748, %r6563;
	// end inline asm
	// begin inline asm
	mov.b32 %r6852, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6863, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6849, %r670, %r4263, %r6852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6854, %r6852, %r6853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6857, %r6849, %r6854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6860, %r681, %r4263, %r6863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6864, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6865, %r6863, %r6864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6868, %r6860, %r6865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6871, %r670, %r4285, %r6852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6875, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6876, %r6852, %r6875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6879, %r6871, %r6876;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6882, %r681, %r4285, %r6863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6887, %r6863, %r6886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6890, %r6882, %r6887;
	// end inline asm
	// begin inline asm
	mov.b32 %r6898, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6909, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6895, %r670, %r4309, %r6898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6899, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6900, %r6898, %r6899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6903, %r6895, %r6900;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6906, %r681, %r4309, %r6909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6910, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6911, %r6909, %r6910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6914, %r6906, %r6911;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6917, %r670, %r4331, %r6898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6921, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6922, %r6898, %r6921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6925, %r6917, %r6922;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6928, %r681, %r4331, %r6909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6932, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6933, %r6909, %r6932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6936, %r6928, %r6933;
	// end inline asm
	// begin inline asm
	mov.b32 %r6944, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6955, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6941, %r670, %r4355, %r6944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6945, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6946, %r6944, %r6945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6949, %r6941, %r6946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6952, %r681, %r4355, %r6955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6957, %r6955, %r6956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6960, %r6952, %r6957;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6963, %r670, %r4377, %r6944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6968, %r6944, %r6967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6971, %r6963, %r6968;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6974, %r681, %r4377, %r6955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6978, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6979, %r6955, %r6978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6982, %r6974, %r6979;
	// end inline asm
	// begin inline asm
	mov.b32 %r6990, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7001, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6987, %r670, %r4401, %r6990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6991, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6992, %r6990, %r6991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6995, %r6987, %r6992;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6998, %r681, %r4401, %r7001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7002, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7003, %r7001, %r7002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7006, %r6998, %r7003;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7009, %r670, %r4423, %r6990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7013, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7014, %r6990, %r7013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7017, %r7009, %r7014;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7020, %r681, %r4423, %r7001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7024, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7025, %r7001, %r7024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7028, %r7020, %r7025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7102, %r263, %r6857, %r6753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7099, %r263, %r6868, %r6759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7111, %r263, %r6879, %r6765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r263, %r6890, %r6771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7120, %r263, %r6903, %r6777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r263, %r6914, %r6783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7129, %r263, %r6925, %r6789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r263, %r6936, %r6795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r263, %r6949, %r6801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r263, %r6960, %r6807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7147, %r263, %r6971, %r6813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7144, %r263, %r6982, %r6819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7156, %r263, %r6995, %r6825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7153, %r263, %r7006, %r6831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7165, %r263, %r7017, %r6837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7162, %r263, %r7028, %r6843;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7095, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7097, %r7095, %r7099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7100, %r309, %r7102, %r7097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7104, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7106, %r7104, %r7108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7109, %r309, %r7111, %r7106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7113, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7115, %r7113, %r7117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7118, %r309, %r7120, %r7115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7122, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7124, %r7122, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7127, %r309, %r7129, %r7124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7131, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7133, %r7131, %r7135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7136, %r309, %r7138, %r7133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7140, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7142, %r7140, %r7144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7145, %r309, %r7147, %r7142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7149, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7151, %r7149, %r7153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7154, %r309, %r7156, %r7151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7158, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7160, %r7158, %r7162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7163, %r309, %r7165, %r7160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7167, %r312, %r7102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7170, %r309, %r7099, %r7167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7174, %r312, %r7111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7177, %r309, %r7108, %r7174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7181, %r312, %r7120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7184, %r309, %r7117, %r7181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7188, %r312, %r7129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7191, %r309, %r7126, %r7188;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7195, %r312, %r7138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7198, %r309, %r7135, %r7195;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7202, %r312, %r7147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7205, %r309, %r7144, %r7202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7209, %r312, %r7156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7212, %r309, %r7153, %r7209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7216, %r312, %r7165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7219, %r309, %r7162, %r7216;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7310, %r7307}, {%r356, %r362, %r359, %r365}, {%r7100, %r7170}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7319, %r7316}, {%r356, %r362, %r359, %r365}, {%r7109, %r7177}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7328, %r7325}, {%r356, %r362, %r359, %r365}, {%r7118, %r7184}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7337, %r7334}, {%r356, %r362, %r359, %r365}, {%r7127, %r7191}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7346, %r7343}, {%r356, %r362, %r359, %r365}, {%r7136, %r7198}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7355, %r7352}, {%r356, %r362, %r359, %r365}, {%r7145, %r7205}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7364, %r7361}, {%r356, %r362, %r359, %r365}, {%r7154, %r7212}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7373, %r7370}, {%r356, %r362, %r359, %r365}, {%r7163, %r7219}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7303, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7305, %r7303, %r7307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7308, %r400, %r7310, %r7305;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7312, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7314, %r7312, %r7316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7317, %r400, %r7319, %r7314;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7321, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7323, %r7321, %r7325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7326, %r400, %r7328, %r7323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7330, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7332, %r7330, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7335, %r400, %r7337, %r7332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7339, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7341, %r7339, %r7343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7344, %r400, %r7346, %r7341;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7348, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7350, %r7348, %r7352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7353, %r400, %r7355, %r7350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7357, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7359, %r7357, %r7361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7362, %r400, %r7364, %r7359;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7366, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7368, %r7366, %r7370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7371, %r400, %r7373, %r7368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7375, %r403, %r7310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7378, %r400, %r7307, %r7375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7382, %r403, %r7319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7385, %r400, %r7316, %r7382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7389, %r403, %r7328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7392, %r400, %r7325, %r7389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7396, %r403, %r7337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7399, %r400, %r7334, %r7396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7403, %r403, %r7346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7406, %r400, %r7343, %r7403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7410, %r403, %r7355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7413, %r400, %r7352, %r7410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7417, %r403, %r7364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7420, %r400, %r7361, %r7417;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7424, %r403, %r7373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7427, %r400, %r7370, %r7424;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7431, %r7432}, {%r434, %r440, %r437, %r443}, {%r7308, %r7378}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7441, %r7442}, {%r434, %r440, %r437, %r443}, {%r7317, %r7385}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7451, %r7452}, {%r434, %r440, %r437, %r443}, {%r7326, %r7392}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7461, %r7462}, {%r434, %r440, %r437, %r443}, {%r7335, %r7399}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7471, %r7472}, {%r434, %r440, %r437, %r443}, {%r7344, %r7406}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7481, %r7482}, {%r434, %r440, %r437, %r443}, {%r7353, %r7413}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7491, %r7492}, {%r434, %r440, %r437, %r443}, {%r7362, %r7420}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7501, %r7502}, {%r434, %r440, %r437, %r443}, {%r7371, %r7427}, {%r8000, %r8000};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7511, %r123, %r7431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7514, %r123, %r7432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r123, %r7441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7520, %r123, %r7442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7523, %r123, %r7451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7526, %r123, %r7452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7529, %r123, %r7461;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7532, %r123, %r7462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7535, %r123, %r7471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7538, %r123, %r7472;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7541, %r123, %r7481;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7544, %r123, %r7482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7547, %r123, %r7491;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7550, %r123, %r7492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7553, %r123, %r7501;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7556, %r123, %r7502;
	// end inline asm
	// begin inline asm
	mov.b32 %r7559, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7560, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7561, %r7511, %r7559;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7564, %r7561, %r7560;
	// end inline asm
	// begin inline asm
	mov.b32 %r7567, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7568, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7569, %r7514, %r7567;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7572, %r7569, %r7568;
	// end inline asm
	// begin inline asm
	mov.b32 %r7575, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7576, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7577, %r7517, %r7575;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7580, %r7577, %r7576;
	// end inline asm
	// begin inline asm
	mov.b32 %r7583, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7584, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7585, %r7520, %r7583;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7588, %r7585, %r7584;
	// end inline asm
	// begin inline asm
	mov.b32 %r7591, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7592, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7593, %r7523, %r7591;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7596, %r7593, %r7592;
	// end inline asm
	// begin inline asm
	mov.b32 %r7599, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7600, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7601, %r7526, %r7599;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7604, %r7601, %r7600;
	// end inline asm
	// begin inline asm
	mov.b32 %r7607, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7608, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7609, %r7529, %r7607;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7612, %r7609, %r7608;
	// end inline asm
	// begin inline asm
	mov.b32 %r7615, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7616, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7617, %r7532, %r7615;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7620, %r7617, %r7616;
	// end inline asm
	// begin inline asm
	mov.b32 %r7623, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7624, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7625, %r7535, %r7623;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7628, %r7625, %r7624;
	// end inline asm
	// begin inline asm
	mov.b32 %r7631, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7632, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7633, %r7538, %r7631;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7636, %r7633, %r7632;
	// end inline asm
	// begin inline asm
	mov.b32 %r7639, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7640, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7641, %r7541, %r7639;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7644, %r7641, %r7640;
	// end inline asm
	// begin inline asm
	mov.b32 %r7647, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7648, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7649, %r7544, %r7647;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7652, %r7649, %r7648;
	// end inline asm
	// begin inline asm
	mov.b32 %r7655, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7656, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7657, %r7547, %r7655;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7660, %r7657, %r7656;
	// end inline asm
	// begin inline asm
	mov.b32 %r7663, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7664, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7665, %r7550, %r7663;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7668, %r7665, %r7664;
	// end inline asm
	// begin inline asm
	mov.b32 %r7671, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7672, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7673, %r7553, %r7671;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7676, %r7673, %r7672;
	// end inline asm
	// begin inline asm
	mov.b32 %r7679, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7680, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7681, %r7556, %r7679;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7684, %r7681, %r7680;
	// end inline asm
	// begin inline asm
	mov.b32 %r7690, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7688, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7689, %r7690, %r7688;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7692, %r7564, %r7689;
	// end inline asm
	// begin inline asm
	mov.b32 %r7695, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7696, %r7690, %r7695;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7699, %r7572, %r7696;
	// end inline asm
	// begin inline asm
	mov.b32 %r7702, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7703, %r7690, %r7702;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7706, %r7580, %r7703;
	// end inline asm
	// begin inline asm
	mov.b32 %r7709, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7710, %r7690, %r7709;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7713, %r7588, %r7710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7716, %r7692, %r7706, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7720, %r7699, %r7713, %r2331;
	// end inline asm
	shl.b32 	%r7727, %r7720, 4;
	// begin inline asm
	lop3.b32 %r7724, %r2337, %r7716, %r7727, 202;
	// end inline asm
	xor.b32  	%r7896, %r7724, -2004318072;
	// begin inline asm
	mov.b32 %r7731, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7729, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7730, %r7731, %r7729;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7733, %r7596, %r7730;
	// end inline asm
	// begin inline asm
	mov.b32 %r7736, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7737, %r7731, %r7736;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7740, %r7604, %r7737;
	// end inline asm
	// begin inline asm
	mov.b32 %r7743, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7744, %r7731, %r7743;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7747, %r7612, %r7744;
	// end inline asm
	// begin inline asm
	mov.b32 %r7750, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7751, %r7731, %r7750;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7754, %r7620, %r7751;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7757, %r7733, %r7747, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7761, %r7740, %r7754, %r2331;
	// end inline asm
	shl.b32 	%r7768, %r7761, 4;
	// begin inline asm
	lop3.b32 %r7765, %r2337, %r7757, %r7768, 202;
	// end inline asm
	xor.b32  	%r7897, %r7765, -2004318072;
	// begin inline asm
	mov.b32 %r7772, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7770, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7771, %r7772, %r7770;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7774, %r7628, %r7771;
	// end inline asm
	// begin inline asm
	mov.b32 %r7777, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7778, %r7772, %r7777;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7781, %r7636, %r7778;
	// end inline asm
	// begin inline asm
	mov.b32 %r7784, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7785, %r7772, %r7784;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7788, %r7644, %r7785;
	// end inline asm
	// begin inline asm
	mov.b32 %r7791, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7792, %r7772, %r7791;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7795, %r7652, %r7792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7798, %r7774, %r7788, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7802, %r7781, %r7795, %r2331;
	// end inline asm
	shl.b32 	%r7809, %r7802, 4;
	// begin inline asm
	lop3.b32 %r7806, %r2337, %r7798, %r7809, 202;
	// end inline asm
	xor.b32  	%r7898, %r7806, -2004318072;
	// begin inline asm
	mov.b32 %r7813, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7811, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7812, %r7813, %r7811;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7815, %r7660, %r7812;
	// end inline asm
	// begin inline asm
	mov.b32 %r7818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7819, %r7813, %r7818;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7822, %r7668, %r7819;
	// end inline asm
	// begin inline asm
	mov.b32 %r7825, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7826, %r7813, %r7825;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7829, %r7676, %r7826;
	// end inline asm
	// begin inline asm
	mov.b32 %r7832, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7833, %r7813, %r7832;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7836, %r7684, %r7833;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7839, %r7815, %r7829, %r2331;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7843, %r7822, %r7836, %r2331;
	// end inline asm
	shl.b32 	%r7850, %r7843, 4;
	// begin inline asm
	lop3.b32 %r7847, %r2337, %r7839, %r7850, 202;
	// end inline asm
	xor.b32  	%r7899, %r7847, -2004318072;
	st.shared.u32 	[%rd187], %r7896;
	st.shared.u32 	[%rd188], %r7897;
	st.shared.u32 	[%rd189], %r7898;
	st.shared.u32 	[%rd190], %r7899;
	add.s32 	%r8032, %r8032, 64;
	add.s64 	%rd190, %rd190, 8324;
	add.s64 	%rd189, %rd189, 8324;
	add.s64 	%rd188, %rd188, 8324;
	add.s64 	%rd187, %rd187, 8324;
	add.s32 	%r8031, %r8031, 1;
	setp.eq.s32 	%p239, %r8032, 256;
	@%p239 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit16918
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7905, [%rd5];
	ld.shared.u32 	%r7906, [%rd6+128];
	ld.shared.u32 	%r7913, [%rd6+4];
	ld.shared.u32 	%r7914, [%rd6+132];
	ld.shared.u32 	%r7921, [%rd5+8324];
	ld.shared.u32 	%r7922, [%rd6+8452];
	ld.shared.u32 	%r7929, [%rd6+8328];
	ld.shared.u32 	%r7930, [%rd6+8456];
	ld.shared.u32 	%r7937, [%rd5+16648];
	ld.shared.u32 	%r7938, [%rd6+16776];
	ld.shared.u32 	%r7945, [%rd6+16652];
	ld.shared.u32 	%r7946, [%rd6+16780];
	ld.shared.u32 	%r7953, [%rd5+24972];
	ld.shared.u32 	%r7954, [%rd6+25100];
	ld.shared.u32 	%r7961, [%rd6+24976];
	ld.shared.u32 	%r7962, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7900, %r7905, %r7906, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7904, %r7905, %r7906, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7908, %r7913, %r7914, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7912, %r7913, %r7914, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7916, %r7921, %r7922, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7920, %r7921, %r7922, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7924, %r7929, %r7930, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7928, %r7929, %r7930, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7932, %r7937, %r7938, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7936, %r7937, %r7938, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7940, %r7945, %r7946, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7944, %r7945, %r7946, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7948, %r7953, %r7954, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7952, %r7953, %r7954, %r586;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7956, %r7961, %r7962, %r582;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7960, %r7961, %r7962, %r586;
	// end inline asm
	selp.b32 	%r7964, %r7904, %r7900, %p226;
	shfl.sync.bfly.b32	%r176, %r7964, 8, 31, -1;
	selp.b32 	%r7965, %r7912, %r7908, %p226;
	shfl.sync.bfly.b32	%r177, %r7965, 8, 31, -1;
	selp.b32 	%r7966, %r7920, %r7916, %p226;
	shfl.sync.bfly.b32	%r7967, %r7966, 8, 31, -1;
	selp.b32 	%r7968, %r7928, %r7924, %p226;
	shfl.sync.bfly.b32	%r7969, %r7968, 8, 31, -1;
	selp.b32 	%r7970, %r7936, %r7932, %p226;
	shfl.sync.bfly.b32	%r7971, %r7970, 8, 31, -1;
	selp.b32 	%r7972, %r7944, %r7940, %p226;
	shfl.sync.bfly.b32	%r7973, %r7972, 8, 31, -1;
	selp.b32 	%r7974, %r7952, %r7948, %p226;
	shfl.sync.bfly.b32	%r7975, %r7974, 8, 31, -1;
	selp.b32 	%r7976, %r7960, %r7956, %p226;
	shfl.sync.bfly.b32	%r7977, %r7976, 8, 31, -1;
	and.b32  	%r190, %r111, 256;
	setp.eq.s32 	%p241, %r190, 0;
	shl.b32 	%r8001, %r111, 12;
	@%p241 bra 	$L__BB0_133;
// %bb.132:                             // %pass16076
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7978, %r177, %r7912, %p226;
	selp.b32 	%r7979, %r7908, %r177, %p226;
	selp.b32 	%r7980, %r176, %r7904, %p226;
	selp.b32 	%r7981, %r7900, %r176, %p226;
	or.b32  	%r7983, %r8001, %r87;
	or.b32  	%r7984, %r7983, %r89;
	or.b32  	%r7985, %r7984, %r93;
	cvt.u64.u32 	%rd137, %r7985;
	add.s64 	%rd138, %rd137, %rd7;
	shr.u64 	%rd139, %rd138, 39;
	add.s64 	%rd140, %rd138, %rd139;
	shr.s64 	%rd141, %rd140, 25;
	setp.lt.s64 	%p243, %rd138, 0;
	and.b64  	%rd142, %rd140, -33554432;
	setp.ne.s64 	%p244, %rd142, %rd138;
	and.pred  	%p245, %p243, %p244;
	selp.u64 	%rd143, 1, 0, %p245;
	sub.s64 	%rd144, %rd143, %rd141;
	shl.b64 	%rd145, %rd144, 25;
	add.s64 	%rd146, %rd145, %rd138;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd148, %rd3, %rd147;
	st.global.v4.u32 	[%rd148], {%r7981, %r7979, %r7980, %r7978};
$L__BB0_133:                            // %pass16144
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7986, %r190, 64;
	setp.gt.u32 	%p246, %r7986, 191;
	@%p246 bra 	$L__BB0_150;
// %bb.134:                             // %pass16144.pass16235_crit_edge
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7992, %r8001, %r87;
	or.b32  	%r7993, %r7992, %r89;
	or.b32  	%r8045, %r7993, %r93;
	bra.uni 	$L__BB0_151;
$L__BB0_150:                            // %pass16167
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r178, %r7916, %r7967, %p226;
	selp.b32 	%r179, %r7967, %r7920, %p226;
	selp.b32 	%r180, %r7924, %r7969, %p226;
	selp.b32 	%r181, %r7969, %r7928, %p226;
	or.b32  	%r7988, %r8001, %r87;
	or.b32  	%r7989, %r7988, %r89;
	or.b32  	%r8045, %r7989, %r93;
	or.b32  	%r7990, %r8045, 262144;
	cvt.s64.s32 	%rd149, %r7990;
	add.s64 	%rd150, %rd149, %rd7;
	shr.u64 	%rd151, %rd150, 39;
	add.s64 	%rd152, %rd150, %rd151;
	shr.s64 	%rd153, %rd152, 25;
	setp.lt.s64 	%p247, %rd150, 0;
	and.b64  	%rd154, %rd152, -33554432;
	setp.ne.s64 	%p248, %rd154, %rd150;
	and.pred  	%p249, %p247, %p248;
	selp.u64 	%rd155, 1, 0, %p249;
	sub.s64 	%rd156, %rd155, %rd153;
	shl.b64 	%rd157, %rd156, 25;
	add.s64 	%rd158, %rd157, %rd150;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd160, %rd3, %rd159;
	st.global.v4.u32 	[%rd160], {%r178, %r180, %r179, %r181};
$L__BB0_151:                            // %pass16235
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r186, %r7948, %r7975, %p226;
	selp.b32 	%r187, %r7975, %r7952, %p226;
	selp.b32 	%r188, %r7956, %r7977, %p226;
	selp.b32 	%r189, %r7977, %r7960, %p226;
	or.b32  	%r7994, %r190, 128;
	setp.lt.u32 	%p250, %r7994, 192;
	@%p250 bra 	$L__BB0_153;
// %bb.152:                             // %pass16258
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r182, %r7932, %r7971, %p226;
	selp.b32 	%r183, %r7971, %r7936, %p226;
	selp.b32 	%r184, %r7940, %r7973, %p226;
	selp.b32 	%r185, %r7973, %r7944, %p226;
	or.b32  	%r7995, %r8045, 524288;
	cvt.s64.s32 	%rd161, %r7995;
	add.s64 	%rd162, %rd161, %rd7;
	shr.u64 	%rd163, %rd162, 39;
	add.s64 	%rd164, %rd162, %rd163;
	shr.s64 	%rd165, %rd164, 25;
	setp.lt.s64 	%p251, %rd162, 0;
	and.b64  	%rd166, %rd164, -33554432;
	setp.ne.s64 	%p252, %rd166, %rd162;
	and.pred  	%p253, %p251, %p252;
	selp.u64 	%rd167, 1, 0, %p253;
	sub.s64 	%rd168, %rd167, %rd165;
	shl.b64 	%rd169, %rd168, 25;
	add.s64 	%rd170, %rd169, %rd162;
	shl.b64 	%rd171, %rd170, 2;
	add.s64 	%rd172, %rd3, %rd171;
	st.global.v4.u32 	[%rd172], {%r182, %r184, %r183, %r185};
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L38247
	st.global.u32 	[%rd4], %r8000;
	ret;
$L__BB0_7:                              // %L245
	mov.u32 	%r7999, 2;
	st.global.u32 	[%rd4], %r7999;
	mov.u64 	%rd185, exception3325;
	cvta.global.u64 	%rd186, %rd185;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd186;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd61, exception1;
	cvta.global.u64 	%rd62, %rd61;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd62;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L38346
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11274, 
	(
	);
	} // callseq 3
	mov.u64 	%rd70, exception1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L38343
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11274, 
	(
	);
	} // callseq 7
	mov.u64 	%rd76, exception1;
	cvta.global.u64 	%rd77, %rd76;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd77;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L38340
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11274, 
	(
	);
	} // callseq 13
	mov.u64 	%rd90, exception1;
	cvta.global.u64 	%rd91, %rd90;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd91;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r191;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
