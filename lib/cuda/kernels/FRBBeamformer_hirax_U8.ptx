// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2337[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2385[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<299>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3359>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<270>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r215, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r224, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r224, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r216, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 9;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r225, %r3, %r1;
	or.b32  	%r226, %r225, %r5;
	mul.wide.u32 	%rd67, %r226, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r227, 1;
	st.global.u32 	[%rd6], %r227;
	setp.gt.u32 	%p3, %r216, 8191;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r217, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r217, %r216;
	setp.gt.s32 	%p5, %r217, 16383;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r218, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r217, %r216;
	and.b32  	%r228, %r6, 63;
	setp.ne.s32 	%p7, %r228, 0;
	setp.gt.u32 	%p8, %r218, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r219, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r219, %r218;
	setp.lt.s32 	%p11, %r219, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r229, %r219, %r218;
	mul.hi.s32 	%r230, %r6, 715827883;
	shr.u32 	%r231, %r230, 31;
	shr.s32 	%r232, %r230, 3;
	add.s32 	%r233, %r232, %r231;
	setp.eq.s32 	%p13, %r229, %r233;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r220, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r220, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r221, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r221, %r220;
	setp.gt.s32 	%p16, %r221, 128;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r222, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r221, %r220;
	and.b32  	%r234, %r7, 7;
	setp.ne.s32 	%p18, %r234, 0;
	setp.lt.s32 	%p19, %r222, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r223, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r223, %r222;
	setp.gt.s32 	%p22, %r223, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r235, %r223, %r222;
	and.b32  	%r236, %r235, 7;
	setp.eq.s32 	%p24, %r236, 0;
	setp.eq.s32 	%p25, %r235, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_13;
$L__BB0_158:                            // %pass162
	and.b32  	%r128, %r1, 3;
	shr.u32 	%r129, %r1, 2;
	mul.lo.s32 	%r237, %r128, %r129;
	and.b32  	%r238, %r237, 7;
	cvt.rn.f32.s32 	%f185, %r238;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p294, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_170;
// %bb.159:
	@%p294 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_160;
$L__BB0_166:
	mov.b32 	%r131, %f750;
	and.b32  	%r239, %r131, 8388607;
	or.b32  	%r3354, %r239, 1065353216;
	mov.b32 	%f745, %r3354;
	add.s32 	%r240, %r131, -1073741824;
	and.b32  	%r3355, %r240, -8388608;
	setp.eq.s32 	%p34, %r3355, 0;
	@%p34 bra 	$L__BB0_169;
// %bb.167:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_168:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r241, %r3355, 192937984;
	add.s32 	%r242, %r3354, %r241;
	mov.b32 	%f197, %r242;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3355, %r3355, %r241;
	mov.b32 	%r3354, %f745;
	setp.ne.s32 	%p35, %r3355, 0;
	setp.ne.s32 	%p36, %r3354, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_168;
$L__BB0_169:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r131, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_170;
$L__BB0_160:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r130, %f154;
	setp.lt.u32 	%p29, %r130, 1073741824;
	@%p29 bra 	$L__BB0_165;
// %bb.161:
	setp.lt.u32 	%p30, %r130, -2147483647;
	@%p30 bra 	$L__BB0_163;
// %bb.162:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_165;
$L__BB0_163:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_165;
// %bb.164:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_165:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_170:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r243, %f151;
	and.b32  	%r138, %r243, -2147483648;
	@%p39 bra 	$L__BB0_172;
// %bb.171:
	mov.b32 	%r244, %f746;
	or.b32  	%r245, %r138, %r244;
	mov.b32 	%f746, %r245;
$L__BB0_172:                            // %__nv_fmodf.exit
	shl.b32 	%r141, %r1, 1;
	and.b32  	%r260, %r141, 2;
	mul.lo.s32 	%r142, %r260, %r129;
	cvt.rn.f32.s32 	%f239, %r142;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p295, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p295 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r261, %r9, 8388607;
	or.b32  	%r3320, %r261, 1065353216;
	mov.b32 	%f705, %r3320;
	add.s32 	%r262, %r9, -1073741824;
	and.b32  	%r3321, %r262, -8388608;
	setp.eq.s32 	%p54, %r3321, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r263, %r3321, 192937984;
	add.s32 	%r264, %r3320, %r263;
	mov.b32 	%f251, %r264;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3321, %r3321, %r263;
	mov.b32 	%r3320, %f705;
	setp.ne.s32 	%p55, %r3321, 0;
	setp.ne.s32 	%p56, %r3320, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2336
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r265, %f168;
	and.b32  	%r16, %r265, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r266, %f706;
	or.b32  	%r267, %r16, %r266;
	mov.b32 	%f706, %r267;
$L__BB0_27:                             // %__nv_fmodf.exit2337
	add.s32 	%r276, %r142, %r129;
	cvt.rn.f32.s32 	%f291, %r276;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p296, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p296 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r277, %r18, 8388607;
	or.b32  	%r3322, %r277, 1065353216;
	mov.b32 	%f709, %r3322;
	add.s32 	%r278, %r18, -1073741824;
	and.b32  	%r3323, %r278, -8388608;
	setp.eq.s32 	%p74, %r3323, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r3323, 192937984;
	add.s32 	%r280, %r3322, %r279;
	mov.b32 	%f303, %r280;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3323, %r3323, %r279;
	mov.b32 	%r3322, %f709;
	setp.ne.s32 	%p75, %r3323, 0;
	setp.ne.s32 	%p76, %r3322, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2367
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r281, %f18;
	and.b32  	%r25, %r281, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r282, %f710;
	or.b32  	%r283, %r25, %r282;
	mov.b32 	%f710, %r283;
$L__BB0_41:                             // %__nv_fmodf.exit2368
	mul.lo.s32 	%r28, %r141, %r129;
	and.b32  	%r298, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r298;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p297, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p297 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r299, %r30, 8388607;
	or.b32  	%r3324, %r299, 1065353216;
	mov.b32 	%f713, %r3324;
	add.s32 	%r300, %r30, -1073741824;
	and.b32  	%r3325, %r300, -8388608;
	setp.eq.s32 	%p94, %r3325, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r301, %r3325, 192937984;
	add.s32 	%r302, %r3324, %r301;
	mov.b32 	%f357, %r302;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3325, %r3325, %r301;
	mov.b32 	%r3324, %f713;
	setp.ne.s32 	%p95, %r3325, 0;
	setp.ne.s32 	%p96, %r3324, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2398
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r303, %f35;
	and.b32  	%r37, %r303, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r304, %f714;
	or.b32  	%r305, %r37, %r304;
	mov.b32 	%f714, %r305;
$L__BB0_55:                             // %__nv_fmodf.exit2399
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r306, %f367;
	and.b32  	%r307, %r306, -2147483648;
	or.b32  	%r308, %r307, 1056964608;
	mov.b32 	%f368, %r308;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r309, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r310, %r309, 1;
	setp.eq.b32 	%p102, %r310, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r311, %r309, 2;
	setp.eq.s32 	%p103, %r311, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r312, %r309, 1;
	and.b32  	%r313, %r312, 2;
	setp.eq.s32 	%p104, %r313, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r314, %r28, %r129;
	and.b32  	%r315, %r314, 3;
	cvt.rn.f32.s32 	%f397, %r315;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p298, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p298 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r316, %r39, 8388607;
	or.b32  	%r3326, %r316, 1065353216;
	mov.b32 	%f717, %r3326;
	add.s32 	%r317, %r39, -1073741824;
	and.b32  	%r3327, %r317, -8388608;
	setp.eq.s32 	%p114, %r3327, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r318, %r3327, 192937984;
	add.s32 	%r319, %r3326, %r318;
	mov.b32 	%f409, %r319;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3327, %r3327, %r318;
	mov.b32 	%r3326, %f717;
	setp.ne.s32 	%p115, %r3327, 0;
	setp.ne.s32 	%p116, %r3326, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2429
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r320, %f54;
	and.b32  	%r46, %r320, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r321, %f718;
	or.b32  	%r322, %r46, %r321;
	mov.b32 	%f718, %r322;
$L__BB0_69:                             // %__nv_fmodf.exit2430
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r323, %f419;
	and.b32  	%r324, %r323, -2147483648;
	or.b32  	%r325, %r324, 1056964608;
	mov.b32 	%f420, %r325;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r326, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r327, %r326, 1;
	setp.eq.b32 	%p122, %r327, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r328, %r326, 2;
	setp.eq.s32 	%p123, %r328, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r329, %r326, 1;
	and.b32  	%r330, %r329, 2;
	setp.eq.s32 	%p124, %r330, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L690
	@%p27 bra 	$L__BB0_180;
// %bb.72:
	@%p294 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_73;
$L__BB0_176:
	mov.b32 	%r144, %f750;
	and.b32  	%r337, %r144, 8388607;
	or.b32  	%r3356, %r337, 1065353216;
	mov.b32 	%f749, %r3356;
	add.s32 	%r338, %r144, -1073741824;
	and.b32  	%r3357, %r338, -8388608;
	setp.eq.s32 	%p135, %r3357, 0;
	@%p135 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r339, %r3357, 192937984;
	add.s32 	%r340, %r3356, %r339;
	mov.b32 	%f459, %r340;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3357, %r3357, %r339;
	mov.b32 	%r3356, %f749;
	setp.ne.s32 	%p136, %r3357, 0;
	setp.ne.s32 	%p137, %r3356, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p139, %r144, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_180;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r143, %f171;
	setp.lt.u32 	%p130, %r143, 1073741824;
	@%p130 bra 	$L__BB0_175;
// %bb.74:
	setp.lt.u32 	%p131, %r143, -2147483647;
	@%p131 bra 	$L__BB0_173;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i2460
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r341, %f750;
	or.b32  	%r342, %r138, %r341;
	mov.b32 	%f750, %r342;
$L__BB0_182:                            // %__nv_fmodf.exit2461
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p295 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r357, %r51, 8388607;
	or.b32  	%r3328, %r357, 1065353216;
	mov.b32 	%f725, %r3328;
	add.s32 	%r358, %r51, -1073741824;
	and.b32  	%r3329, %r358, -8388608;
	setp.eq.s32 	%p155, %r3329, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r359, %r3329, 192937984;
	add.s32 	%r360, %r3328, %r359;
	mov.b32 	%f511, %r360;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3329, %r3329, %r359;
	mov.b32 	%r3328, %f725;
	setp.ne.s32 	%p156, %r3329, 0;
	setp.ne.s32 	%p157, %r3328, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2491
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r361, %f726;
	or.b32  	%r362, %r16, %r361;
	mov.b32 	%f726, %r362;
$L__BB0_89:                             // %__nv_fmodf.exit2492
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p296 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r371, %r59, 8388607;
	or.b32  	%r3330, %r371, 1065353216;
	mov.b32 	%f729, %r3330;
	add.s32 	%r372, %r59, -1073741824;
	and.b32  	%r3331, %r372, -8388608;
	setp.eq.s32 	%p175, %r3331, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r373, %r3331, 192937984;
	add.s32 	%r374, %r3330, %r373;
	mov.b32 	%f561, %r374;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3331, %r3331, %r373;
	mov.b32 	%r3330, %f729;
	setp.ne.s32 	%p176, %r3331, 0;
	setp.ne.s32 	%p177, %r3330, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2522
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r375, %f730;
	or.b32  	%r376, %r25, %r375;
	mov.b32 	%f730, %r376;
$L__BB0_103:                            // %__nv_fmodf.exit2523
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p297 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r391, %r69, 8388607;
	or.b32  	%r3332, %r391, 1065353216;
	mov.b32 	%f733, %r3332;
	add.s32 	%r392, %r69, -1073741824;
	and.b32  	%r3333, %r392, -8388608;
	setp.eq.s32 	%p195, %r3333, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r393, %r3333, 192937984;
	add.s32 	%r394, %r3332, %r393;
	mov.b32 	%f613, %r394;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3333, %r3333, %r393;
	mov.b32 	%r3332, %f733;
	setp.ne.s32 	%p196, %r3333, 0;
	setp.ne.s32 	%p197, %r3332, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2553
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r395, %f734;
	or.b32  	%r396, %r37, %r395;
	mov.b32 	%f734, %r396;
$L__BB0_117:                            // %__nv_fmodf.exit2554
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r397, %f623;
	and.b32  	%r398, %r397, -2147483648;
	or.b32  	%r399, %r398, 1056964608;
	mov.b32 	%f624, %r399;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r400, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r401, %r400, 1;
	setp.eq.b32 	%p204, %r401, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r402, %r400, 2;
	setp.eq.s32 	%p205, %r402, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r403, %r400, 1;
	and.b32  	%r404, %r403, 2;
	setp.eq.s32 	%p206, %r404, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p298 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r405, %r77, 8388607;
	or.b32  	%r3334, %r405, 1065353216;
	mov.b32 	%f737, %r3334;
	add.s32 	%r406, %r77, -1073741824;
	and.b32  	%r3335, %r406, -8388608;
	setp.eq.s32 	%p215, %r3335, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r407, %r3335, 192937984;
	add.s32 	%r408, %r3334, %r407;
	mov.b32 	%f663, %r408;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3335, %r3335, %r407;
	mov.b32 	%r3334, %f737;
	setp.ne.s32 	%p216, %r3335, 0;
	setp.ne.s32 	%p217, %r3334, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r409, %f738;
	or.b32  	%r410, %r46, %r409;
	mov.b32 	%f738, %r410;
$L__BB0_131:                            // %__nv_fmodf.exit2585
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r411, %f673;
	and.b32  	%r412, %r411, -2147483648;
	or.b32  	%r413, %r412, 1056964608;
	mov.b32 	%f674, %r413;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r414, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r415, %r414, 1;
	setp.eq.b32 	%p224, %r415, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r416, %r414, 2;
	setp.eq.s32 	%p225, %r416, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r417, %r414, 1;
	and.b32  	%r418, %r417, 2;
	setp.eq.s32 	%p226, %r418, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L983
	setp.gt.u32 	%p229, %r1, 15;
	mov.u32 	%r153, 999999999;
	@%p229 bra 	$L__BB0_184;
// %bb.134:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r426, %r1, 4;
	and.b32  	%r427, %r426, 240;
	or.b32  	%r428, %r427, %r4;
	mul.wide.u32 	%rd68, %r428, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r429, [%rd69];
	shl.b32 	%r430, %r429, 16;
	cvt.s32.s16 	%r86, %r429;
	shr.s32 	%r87, %r429, 16;
	or.b32  	%r431, %r430, 65535;
	setp.lt.u32 	%p230, %r431, 1114111;
	setp.lt.u32 	%p231, %r429, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_135;
$L__BB0_183:                            // %L1255
	mul.lo.s32 	%r435, %r87, 546;
	mad.lo.s32 	%r153, %r86, 33, %r435;
$L__BB0_184:                            // %pass565
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r252, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r253, %r252, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r349, %f469;
	or.b32  	%r254, %r253, 1056964608;
	mov.b32 	%r268, %f261;
	mov.b32 	%r290, %f313;
	and.b32  	%r350, %r349, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r254;
	and.b32  	%r269, %r268, -2147483648;
	and.b32  	%r291, %r290, -2147483648;
	or.b32  	%r351, %r350, 1056964608;
	mov.b32 	%r363, %f521;
	mov.b32 	%r383, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r270, %r269, 1056964608;
	or.b32  	%r292, %r291, 1056964608;
	mov.b32 	%f470, %r351;
	and.b32  	%r364, %r363, -2147483648;
	and.b32  	%r384, %r383, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r270;
	mov.b32 	%f314, %r292;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r365, %r364, 1056964608;
	or.b32  	%r385, %r384, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r365;
	mov.b32 	%f572, %r385;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r255, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r256, %r255, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r352, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r256, 1;
	cvt.rzi.s32.f32 	%r271, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r293, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r353, %r352, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r257, %r255, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r272, %r271, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r294, %r293, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r353, 1;
	cvt.rzi.s32.f32 	%r366, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r386, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r257, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r258, %r255, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r272, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r294, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r354, %r352, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r367, %r366, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r387, %r386, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r259, %r258, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r273, %r271, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r295, %r293, 2;
	setp.eq.s32 	%p145, %r354, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r355, %r352, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r367, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r387, 1;
	setp.eq.s32 	%p44, %r259, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r273, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r274, %r271, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r295, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r296, %r293, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r356, %r355, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r368, %r366, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r388, %r386, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r275, %r274, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r297, %r296, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r356, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r368, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r369, %r366, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r388, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r389, %r386, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r275, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r297, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r370, %r369, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r390, %r389, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r248, %f238;
	mov.b32 	%r251, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r370, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r390, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r247, %r251, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r345, %f500;
	mov.b32 	%r348, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r246, %r248, %r247;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r249, %r251, %r248;
	// end inline asm
	mov.b32 	%r286, %f344;
	mov.b32 	%r285, %f17;
	mov.b32 	%r289, %f341;
	mov.b32 	%r288, %f16;
	mov.b32 	%r332, %f75;
	mov.b32 	%r333, %f77;
	mov.b32 	%r335, %f76;
	mov.b32 	%r336, %f78;
	xor.b32  	%r344, %r348, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r284, %r286, %r285;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r287, %r289, %r288;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r333, %r332;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r334, %r336, %r335;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r343, %r345, %r344;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r346, %r348, %r345;
	// end inline asm
	mov.b32 	%r379, %f602;
	mov.b32 	%r378, %f95;
	mov.b32 	%r382, %f599;
	mov.b32 	%r381, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r377, %r379, %r378;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r380, %r382, %r381;
	// end inline asm
	mov.b32 	%r420, %f147;
	mov.b32 	%r421, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	mov.b32 	%r423, %f148;
	mov.b32 	%r424, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r423;
	// end inline asm
	shr.u32 	%r437, %r1, 3;
	and.b32  	%r438, %r437, 2;
	and.b32  	%r439, %r129, 1;
	or.b32  	%r440, %r438, %r439;
	shl.b32 	%r441, %r440, 4;
	bfe.u32 	%r442, %r1, 3, 1;
	shl.b32 	%r443, %r4, 1;
	and.b32  	%r444, %r443, 14;
	or.b32  	%r445, %r442, %r444;
	shl.b32 	%r446, %r1, 6;
	and.b32  	%r447, %r446, 192;
	or.b32  	%r448, %r441, %r3;
	or.b32  	%r449, %r448, %r445;
	or.b32  	%r450, %r449, %r447;
	mul.wide.u32 	%rd75, %r450, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r154, [%rd76];
	ld.global.u32 	%r155, [%rd76+1024];
	shl.b32 	%r451, %r216, 14;
	shl.b32 	%r452, %r220, 7;
	add.s32 	%r156, %r452, %r451;
	shl.b32 	%r453, %r1, 2;
	and.b32  	%r157, %r453, 60;
	and.b32  	%r158, %r453, 64;
	shl.b32 	%r159, %r2, 7;
	and.b32  	%r160, %r1, 16;
	shr.u32 	%r454, %r1, 4;
	and.b32  	%r455, %r141, 30;
	or.b32  	%r456, %r455, %r454;
	mul.lo.s32 	%r457, %r456, 257;
	shr.u32 	%r458, %r4, 3;
	and.b32  	%r459, %r5, 224;
	mad.lo.s32 	%r460, %r458, 257, %r459;
	or.b32  	%r461, %r458, 2;
	mad.lo.s32 	%r462, %r461, 257, %r459;
	or.b32  	%r463, %r458, 4;
	mad.lo.s32 	%r464, %r463, 257, %r459;
	or.b32  	%r465, %r458, 6;
	mad.lo.s32 	%r466, %r465, 257, %r459;
	or.b32  	%r467, %r458, 8;
	mad.lo.s32 	%r468, %r467, 257, %r459;
	or.b32  	%r469, %r458, 10;
	mad.lo.s32 	%r470, %r469, 257, %r459;
	or.b32  	%r471, %r458, 12;
	mad.lo.s32 	%r472, %r471, 257, %r459;
	or.b32  	%r473, %r458, 14;
	mad.lo.s32 	%r474, %r473, 257, %r459;
	or.b32  	%r475, %r458, 16;
	mad.lo.s32 	%r476, %r475, 257, %r459;
	or.b32  	%r477, %r458, 18;
	mad.lo.s32 	%r478, %r477, 257, %r459;
	or.b32  	%r479, %r458, 20;
	mad.lo.s32 	%r480, %r479, 257, %r459;
	or.b32  	%r481, %r458, 22;
	mad.lo.s32 	%r482, %r481, 257, %r459;
	or.b32  	%r483, %r458, 24;
	mad.lo.s32 	%r484, %r483, 257, %r459;
	or.b32  	%r485, %r458, 26;
	mad.lo.s32 	%r486, %r485, 257, %r459;
	or.b32  	%r487, %r458, 28;
	mad.lo.s32 	%r488, %r487, 257, %r459;
	or.b32  	%r489, %r458, 30;
	mad.lo.s32 	%r490, %r489, 257, %r459;
	mul.lo.s32 	%r491, %r128, 2184;
	mad.lo.s32 	%r492, %r440, 546, %r491;
	mad.lo.s32 	%r493, %r445, 33, %r492;
	setp.lt.u32 	%p233, %r1, 4;
	setp.eq.s32 	%p234, %r129, 4;
	setp.eq.s32 	%p235, %r129, 5;
	mul.lo.s32 	%r494, %r458, 258;
	bfe.s32 	%r495, %r4, 1, 1;
	and.b32  	%r496, %r4, 2;
	setp.eq.s32 	%p236, %r496, 0;
	and.b32  	%r497, %r495, 1032;
	and.b32  	%r498, %r453, 12;
	bfe.s32 	%r499, %r4, 2, 1;
	and.b32  	%r500, %r4, 4;
	setp.eq.s32 	%p237, %r500, 0;
	and.b32  	%r501, %r499, 516;
	bfe.s32 	%r502, %r1, 3, 1;
	and.b32  	%r503, %r1, 8;
	setp.eq.s32 	%p238, %r503, 0;
	and.b32  	%r504, %r502, 4144;
	and.b32  	%r505, %r4, 1;
	neg.s32 	%r506, %r505;
	setp.eq.b32 	%p239, %r505, 1;
	and.b32  	%r507, %r506, 2064;
	add.s32 	%r508, %r440, %r494;
	add.s32 	%r509, %r508, %r498;
	add.s32 	%r510, %r509, %r497;
	add.s32 	%r511, %r510, %r501;
	add.s32 	%r512, %r511, %r504;
	add.s32 	%r513, %r512, %r507;
	mul.wide.u32 	%rd77, %r513, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b64 	%rd79, 2064, 0, %p239;
	selp.b64 	%rd80, 0, 4144, %p238;
	selp.b64 	%rd81, 0, 516, %p237;
	selp.b64 	%rd82, 0, 1032, %p236;
	cvt.u64.u32 	%rd83, %r498;
	cvt.u64.u32 	%rd84, %r439;
	cvt.u64.u32 	%rd85, %r438;
	cvt.u64.u32 	%rd86, %r494;
	add.s64 	%rd87, %rd86, %rd85;
	or.b64  	%rd88, %rd87, %rd84;
	add.s64 	%rd89, %rd88, %rd83;
	add.s64 	%rd90, %rd89, %rd82;
	add.s64 	%rd91, %rd90, %rd81;
	add.s64 	%rd92, %rd91, %rd80;
	add.s64 	%rd93, %rd92, %rd79;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd8, %rd78, %rd94;
	shl.b32 	%r514, %r218, 20;
	shl.b32 	%r515, %r222, 9;
	add.s32 	%r516, %r515, %r514;
	and.b32  	%r517, %r1, 15;
	or.b32  	%r518, %r5, %r160;
	or.b32  	%r519, %r517, %r3;
	or.b32  	%r161, %r519, %r518;
	cvt.s64.s32 	%rd9, %r516;
	add.s32 	%r520, %r4, %r457;
	mul.wide.u32 	%rd95, %r520, 4;
	add.s64 	%rd10, %rd78, %rd95;
	cvt.u64.u32 	%rd96, %r4;
	cvt.u64.u32 	%rd11, %r457;
	add.s64 	%rd97, %rd11, %rd96;
	shl.b64 	%rd98, %rd97, 2;
	add.s64 	%rd12, %rd78, %rd98;
	add.s32 	%r521, %r460, %r1;
	mul.wide.u32 	%rd99, %r521, 4;
	add.s64 	%rd13, %rd78, %rd99;
	add.s32 	%r522, %r462, %r1;
	mul.wide.u32 	%rd100, %r522, 4;
	add.s64 	%rd14, %rd78, %rd100;
	add.s32 	%r523, %r464, %r1;
	mul.wide.u32 	%rd101, %r523, 4;
	add.s64 	%rd15, %rd78, %rd101;
	add.s32 	%r524, %r466, %r1;
	mul.wide.u32 	%rd102, %r524, 4;
	add.s64 	%rd16, %rd78, %rd102;
	add.s32 	%r525, %r468, %r1;
	mul.wide.u32 	%rd103, %r525, 4;
	add.s64 	%rd17, %rd78, %rd103;
	add.s32 	%r526, %r470, %r1;
	mul.wide.u32 	%rd104, %r526, 4;
	add.s64 	%rd18, %rd78, %rd104;
	add.s32 	%r527, %r472, %r1;
	mul.wide.u32 	%rd105, %r527, 4;
	add.s64 	%rd19, %rd78, %rd105;
	add.s32 	%r528, %r474, %r1;
	mul.wide.u32 	%rd106, %r528, 4;
	add.s64 	%rd20, %rd78, %rd106;
	add.s32 	%r529, %r476, %r1;
	mul.wide.u32 	%rd107, %r529, 4;
	add.s64 	%rd21, %rd78, %rd107;
	add.s32 	%r530, %r478, %r1;
	mul.wide.u32 	%rd108, %r530, 4;
	add.s64 	%rd22, %rd78, %rd108;
	add.s32 	%r531, %r480, %r1;
	mul.wide.u32 	%rd109, %r531, 4;
	add.s64 	%rd23, %rd78, %rd109;
	add.s32 	%r532, %r482, %r1;
	mul.wide.u32 	%rd110, %r532, 4;
	add.s64 	%rd24, %rd78, %rd110;
	add.s32 	%r533, %r484, %r1;
	mul.wide.u32 	%rd111, %r533, 4;
	add.s64 	%rd25, %rd78, %rd111;
	add.s32 	%r534, %r486, %r1;
	mul.wide.u32 	%rd112, %r534, 4;
	add.s64 	%rd26, %rd78, %rd112;
	add.s32 	%r535, %r488, %r1;
	mul.wide.u32 	%rd113, %r535, 4;
	add.s64 	%rd27, %rd78, %rd113;
	add.s32 	%r536, %r490, %r1;
	mul.wide.u32 	%rd114, %r536, 4;
	add.s64 	%rd28, %rd78, %rd114;
	add.s32 	%r537, %r493, %r458;
	mul.wide.u32 	%rd115, %r537, 4;
	add.s64 	%rd29, %rd78, %rd115;
	add.s32 	%r538, %r493, %r461;
	mul.wide.u32 	%rd116, %r538, 4;
	add.s64 	%rd30, %rd78, %rd116;
	add.s32 	%r539, %r493, %r463;
	mul.wide.u32 	%rd117, %r539, 4;
	add.s64 	%rd31, %rd78, %rd117;
	add.s32 	%r540, %r493, %r465;
	mul.wide.u32 	%rd118, %r540, 4;
	add.s64 	%rd32, %rd78, %rd118;
	add.s32 	%r541, %r493, %r467;
	mul.wide.u32 	%rd119, %r541, 4;
	add.s64 	%rd33, %rd78, %rd119;
	add.s32 	%r542, %r493, %r469;
	mul.wide.u32 	%rd120, %r542, 4;
	add.s64 	%rd34, %rd78, %rd120;
	add.s32 	%r543, %r493, %r471;
	mul.wide.u32 	%rd121, %r543, 4;
	add.s64 	%rd35, %rd78, %rd121;
	add.s32 	%r544, %r493, %r473;
	mul.wide.u32 	%rd122, %r544, 4;
	add.s64 	%rd36, %rd78, %rd122;
	add.s32 	%r545, %r493, %r475;
	mul.wide.u32 	%rd123, %r545, 4;
	add.s64 	%rd37, %rd78, %rd123;
	add.s32 	%r546, %r493, %r477;
	mul.wide.u32 	%rd124, %r546, 4;
	add.s64 	%rd38, %rd78, %rd124;
	add.s32 	%r547, %r493, %r479;
	mul.wide.u32 	%rd125, %r547, 4;
	add.s64 	%rd39, %rd78, %rd125;
	add.s32 	%r548, %r493, %r481;
	mul.wide.u32 	%rd126, %r548, 4;
	add.s64 	%rd40, %rd78, %rd126;
	add.s32 	%r549, %r493, %r483;
	mul.wide.u32 	%rd127, %r549, 4;
	add.s64 	%rd41, %rd78, %rd127;
	add.s32 	%r550, %r493, %r485;
	mul.wide.u32 	%rd128, %r550, 4;
	add.s64 	%rd42, %rd78, %rd128;
	add.s32 	%r551, %r493, %r487;
	mul.wide.u32 	%rd129, %r551, 4;
	add.s64 	%rd43, %rd78, %rd129;
	add.s32 	%r552, %r493, %r489;
	mul.wide.u32 	%rd130, %r552, 4;
	add.s64 	%rd44, %rd78, %rd130;
	add.s32 	%r553, %r129, -1;
	setp.lt.u32 	%p240, %r553, 3;
	or.pred  	%p241, %p233, %p240;
	or.pred  	%p242, %p241, %p234;
	and.b32  	%r554, %r1, 24;
	setp.eq.s32 	%p243, %r554, 24;
	or.pred  	%p244, %p235, %p243;
	selp.b32 	%r162, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	add.s32 	%r555, %r513, 32;
	mul.wide.u32 	%rd131, %r555, 4;
	add.s64 	%rd45, %rd78, %rd131;
	add.s32 	%r556, %r513, 48;
	mul.wide.u32 	%rd132, %r556, 4;
	add.s64 	%rd46, %rd78, %rd132;
	add.s32 	%r557, %r513, 64;
	mul.wide.u32 	%rd133, %r557, 4;
	add.s64 	%rd47, %rd78, %rd133;
	add.s32 	%r558, %r513, 80;
	mul.wide.u32 	%rd134, %r558, 4;
	add.s64 	%rd48, %rd78, %rd134;
	add.s32 	%r559, %r513, 96;
	mul.wide.u32 	%rd135, %r559, 4;
	add.s64 	%rd49, %rd78, %rd135;
	add.s32 	%r560, %r513, 112;
	mul.wide.u32 	%rd136, %r560, 4;
	add.s64 	%rd50, %rd78, %rd136;
	add.s32 	%r561, %r513, 128;
	mul.wide.u32 	%rd137, %r561, 4;
	add.s64 	%rd51, %rd78, %rd137;
	add.s32 	%r562, %r513, 144;
	mul.wide.u32 	%rd138, %r562, 4;
	add.s64 	%rd52, %rd78, %rd138;
	add.s32 	%r563, %r513, 160;
	mul.wide.u32 	%rd139, %r563, 4;
	add.s64 	%rd53, %rd78, %rd139;
	add.s32 	%r564, %r513, 176;
	mul.wide.u32 	%rd140, %r564, 4;
	add.s64 	%rd54, %rd78, %rd140;
	add.s32 	%r565, %r513, 192;
	mul.wide.u32 	%rd141, %r565, 4;
	add.s64 	%rd55, %rd78, %rd141;
	add.s32 	%r566, %r513, 208;
	mul.wide.u32 	%rd142, %r566, 4;
	add.s64 	%rd56, %rd78, %rd142;
	add.s32 	%r567, %r513, 224;
	mul.wide.u32 	%rd143, %r567, 4;
	add.s64 	%rd57, %rd78, %rd143;
	add.s32 	%r568, %r513, 240;
	mul.wide.u32 	%rd144, %r568, 4;
	add.s64 	%rd58, %rd78, %rd144;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r160, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3348, %r89;
	mov.u32 	%r3349, %r89;
	mov.u32 	%r3353, %r89;
	bra.uni 	$L__BB0_185;
$L__BB0_156:                            // %L29357
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r127, %r89, 64;
	setp.ne.s32 	%p293, %r89, 8128;
	mov.u32 	%r89, %r127;
	@%p293 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_157;
$L__BB0_185:                            // %L1610
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_203 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r569, %r89, %r216;
	setp.lt.s32 	%p245, %r569, %r217;
	@%p245 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_157;
$L__BB0_186:                            // %pass728
                                        //   in Loop: Header=BB0_185 Depth=1
	cvt.u32.u64 	%r762, %rd11;
	or.b32  	%r763, %r89, %r4;
	shl.b32 	%r764, %r763, 14;
	and.b32  	%r765, %r764, 133414912;
	or.b32  	%r766, %r765, %r157;
	or.b32  	%r767, %r766, %r158;
	or.b32  	%r768, %r767, %r159;
	add.s32 	%r769, %r156, %r768;
	shr.s32 	%r770, %r769, 31;
	shr.u32 	%r771, %r770, 5;
	add.s32 	%r772, %r769, %r771;
	shr.s32 	%r773, %r772, 27;
	setp.lt.s32 	%p247, %r769, 0;
	and.b32  	%r774, %r772, -134217728;
	setp.ne.s32 	%p248, %r774, %r769;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r775, 1, 0, %p249;
	sub.s32 	%r776, %r775, %r773;
	shl.b32 	%r777, %r776, 27;
	add.s32 	%r778, %r777, %r769;
	mul.wide.s32 	%rd145, %r778, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r779, %r780, %r781, %r782}, [%rd146];
	or.b32  	%r783, %r763, 16;
	shl.b32 	%r784, %r783, 14;
	and.b32  	%r785, %r784, 133677056;
	or.b32  	%r786, %r785, %r157;
	or.b32  	%r787, %r786, %r158;
	or.b32  	%r788, %r787, %r159;
	add.s32 	%r789, %r156, %r788;
	shr.s32 	%r790, %r789, 31;
	shr.u32 	%r791, %r790, 5;
	add.s32 	%r792, %r789, %r791;
	shr.s32 	%r793, %r792, 27;
	setp.lt.s32 	%p250, %r789, 0;
	and.b32  	%r794, %r792, -134217728;
	setp.ne.s32 	%p251, %r794, %r789;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r795, 1, 0, %p252;
	sub.s32 	%r796, %r795, %r793;
	shl.b32 	%r797, %r796, 27;
	add.s32 	%r798, %r797, %r789;
	mul.wide.s32 	%rd147, %r798, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r799, %r800, %r801, %r802}, [%rd148];
	and.b32  	%r803, %r89, 8128;
	or.b32  	%r804, %r4, %r803;
	shl.b32 	%r805, %r804, 14;
	or.b32  	%r806, %r805, %r157;
	or.b32  	%r807, %r806, %r158;
	or.b32  	%r808, %r807, %r159;
	or.b32  	%r809, %r808, 524288;
	add.s32 	%r810, %r156, %r809;
	shr.s32 	%r811, %r810, 31;
	shr.u32 	%r812, %r811, 5;
	add.s32 	%r813, %r810, %r812;
	shr.s32 	%r814, %r813, 27;
	setp.lt.s32 	%p253, %r810, 0;
	and.b32  	%r815, %r813, -134217728;
	setp.ne.s32 	%p254, %r815, %r810;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r816, 1, 0, %p255;
	sub.s32 	%r817, %r816, %r814;
	shl.b32 	%r818, %r817, 27;
	add.s32 	%r819, %r818, %r810;
	mul.wide.s32 	%rd149, %r819, 4;
	add.s64 	%rd150, %rd3, %rd149;
	ld.global.v4.u32 	{%r820, %r821, %r822, %r823}, [%rd150];
	or.b32  	%r824, %r808, 786432;
	add.s32 	%r825, %r156, %r824;
	shr.s32 	%r826, %r825, 31;
	shr.u32 	%r827, %r826, 5;
	add.s32 	%r828, %r825, %r827;
	shr.s32 	%r829, %r828, 27;
	setp.lt.s32 	%p256, %r825, 0;
	and.b32  	%r830, %r828, -134217728;
	setp.ne.s32 	%p257, %r830, %r825;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r831, 1, 0, %p258;
	sub.s32 	%r832, %r831, %r829;
	shl.b32 	%r833, %r832, 27;
	add.s32 	%r834, %r833, %r825;
	mul.wide.s32 	%rd151, %r834, 4;
	add.s64 	%rd152, %rd3, %rd151;
	ld.global.v4.u32 	{%r835, %r836, %r837, %r838}, [%rd152];
	selp.b32 	%r839, %r781, %r779, %p246;
	shfl.sync.bfly.b32	%r840, %r839, 16, 31, -1;
	selp.b32 	%r572, %r779, %r840, %p246;
	selp.b32 	%r577, %r840, %r781, %p246;
	selp.b32 	%r841, %r782, %r780, %p246;
	shfl.sync.bfly.b32	%r842, %r841, 16, 31, -1;
	selp.b32 	%r580, %r780, %r842, %p246;
	selp.b32 	%r585, %r842, %r782, %p246;
	selp.b32 	%r843, %r801, %r799, %p246;
	shfl.sync.bfly.b32	%r844, %r843, 16, 31, -1;
	selp.b32 	%r588, %r799, %r844, %p246;
	selp.b32 	%r593, %r844, %r801, %p246;
	selp.b32 	%r845, %r802, %r800, %p246;
	shfl.sync.bfly.b32	%r846, %r845, 16, 31, -1;
	selp.b32 	%r596, %r800, %r846, %p246;
	selp.b32 	%r601, %r846, %r802, %p246;
	selp.b32 	%r847, %r822, %r820, %p246;
	shfl.sync.bfly.b32	%r848, %r847, 16, 31, -1;
	selp.b32 	%r604, %r820, %r848, %p246;
	selp.b32 	%r609, %r848, %r822, %p246;
	selp.b32 	%r849, %r823, %r821, %p246;
	shfl.sync.bfly.b32	%r850, %r849, 16, 31, -1;
	selp.b32 	%r612, %r821, %r850, %p246;
	selp.b32 	%r617, %r850, %r823, %p246;
	selp.b32 	%r851, %r837, %r835, %p246;
	shfl.sync.bfly.b32	%r852, %r851, 16, 31, -1;
	selp.b32 	%r620, %r835, %r852, %p246;
	selp.b32 	%r625, %r852, %r837, %p246;
	selp.b32 	%r853, %r838, %r836, %p246;
	shfl.sync.bfly.b32	%r854, %r853, 16, 31, -1;
	selp.b32 	%r628, %r836, %r854, %p246;
	selp.b32 	%r633, %r854, %r838, %p246;
	shl.b32 	%r573, %r577, 4;
	mov.u32 	%r571, 252645135;
	// begin inline asm
	lop3.b32 %r635, %r571, %r572, %r573, 202;
	// end inline asm
	shr.u32 	%r576, %r572, 4;
	// begin inline asm
	lop3.b32 %r651, %r571, %r576, %r577, 202;
	// end inline asm
	shl.b32 	%r581, %r585, 4;
	// begin inline asm
	lop3.b32 %r643, %r571, %r580, %r581, 202;
	// end inline asm
	shr.u32 	%r584, %r580, 4;
	// begin inline asm
	lop3.b32 %r659, %r571, %r584, %r585, 202;
	// end inline asm
	shl.b32 	%r589, %r593, 4;
	// begin inline asm
	lop3.b32 %r667, %r571, %r588, %r589, 202;
	// end inline asm
	shr.u32 	%r592, %r588, 4;
	// begin inline asm
	lop3.b32 %r683, %r571, %r592, %r593, 202;
	// end inline asm
	shl.b32 	%r597, %r601, 4;
	// begin inline asm
	lop3.b32 %r675, %r571, %r596, %r597, 202;
	// end inline asm
	shr.u32 	%r600, %r596, 4;
	// begin inline asm
	lop3.b32 %r691, %r571, %r600, %r601, 202;
	// end inline asm
	shl.b32 	%r605, %r609, 4;
	// begin inline asm
	lop3.b32 %r636, %r571, %r604, %r605, 202;
	// end inline asm
	shr.u32 	%r608, %r604, 4;
	// begin inline asm
	lop3.b32 %r652, %r571, %r608, %r609, 202;
	// end inline asm
	shl.b32 	%r613, %r617, 4;
	// begin inline asm
	lop3.b32 %r644, %r571, %r612, %r613, 202;
	// end inline asm
	shr.u32 	%r616, %r612, 4;
	// begin inline asm
	lop3.b32 %r660, %r571, %r616, %r617, 202;
	// end inline asm
	shl.b32 	%r621, %r625, 4;
	// begin inline asm
	lop3.b32 %r668, %r571, %r620, %r621, 202;
	// end inline asm
	shr.u32 	%r624, %r620, 4;
	// begin inline asm
	lop3.b32 %r684, %r571, %r624, %r625, 202;
	// end inline asm
	shl.b32 	%r629, %r633, 4;
	// begin inline asm
	lop3.b32 %r676, %r571, %r628, %r629, 202;
	// end inline asm
	shr.u32 	%r632, %r628, 4;
	// begin inline asm
	lop3.b32 %r692, %r571, %r632, %r633, 202;
	// end inline asm
	mov.u32 	%r637, 25152;
	// begin inline asm
	prmt.b32 %r699, %r635, %r636, %r637;
	// end inline asm
	mov.u32 	%r641, 29521;
	// begin inline asm
	prmt.b32 %r731, %r635, %r636, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r643, %r644, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r739, %r643, %r644, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r651, %r652, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r732, %r651, %r652, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r659, %r660, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r740, %r659, %r660, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r715, %r667, %r668, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r747, %r667, %r668, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r723, %r675, %r676, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r755, %r675, %r676, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r716, %r683, %r684, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r748, %r683, %r684, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r724, %r691, %r692, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r756, %r691, %r692, %r641;
	// end inline asm
	mov.u32 	%r701, 21520;
	// begin inline asm
	prmt.b32 %r698, %r699, %r700, %r701;
	// end inline asm
	mov.u32 	%r705, 30258;
	// begin inline asm
	prmt.b32 %r702, %r699, %r700, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r707, %r708, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r707, %r708, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r714, %r715, %r716, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r715, %r716, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r722, %r723, %r724, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r726, %r723, %r724, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r730, %r731, %r732, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r734, %r731, %r732, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r738, %r739, %r740, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r742, %r739, %r740, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r746, %r747, %r748, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r750, %r747, %r748, %r705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r754, %r755, %r756, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r758, %r755, %r756, %r705;
	// end inline asm
	st.shared.u32 	[%rd10], %r698;
	st.shared.u32 	[%rd12+512], %r706;
	st.shared.u32 	[%rd12+256], %r702;
	st.shared.u32 	[%rd12+768], %r710;
	and.b32  	%r855, %r783, 31;
	add.s32 	%r856, %r855, %r762;
	mul.wide.u32 	%rd153, %r856, 4;
	add.s64 	%rd155, %rd78, %rd153;
	st.shared.u32 	[%rd155], %r714;
	cvt.u64.u32 	%rd156, %r855;
	add.s64 	%rd157, %rd11, %rd156;
	shl.b64 	%rd158, %rd157, 2;
	add.s64 	%rd159, %rd78, %rd158;
	st.shared.u32 	[%rd159+512], %r722;
	st.shared.u32 	[%rd159+256], %r718;
	st.shared.u32 	[%rd159+768], %r726;
	st.shared.u32 	[%rd12+128], %r730;
	st.shared.u32 	[%rd12+640], %r738;
	st.shared.u32 	[%rd12+384], %r734;
	st.shared.u32 	[%rd12+896], %r742;
	st.shared.u32 	[%rd159+128], %r746;
	st.shared.u32 	[%rd159+640], %r754;
	st.shared.u32 	[%rd159+384], %r750;
	st.shared.u32 	[%rd159+896], %r758;
	bar.sync 	0;
	ld.shared.u32 	%r163, [%rd13];
	ld.shared.u32 	%r164, [%rd14];
	ld.shared.u32 	%r165, [%rd15];
	ld.shared.u32 	%r166, [%rd16];
	ld.shared.u32 	%r167, [%rd17];
	ld.shared.u32 	%r168, [%rd18];
	ld.shared.u32 	%r169, [%rd19];
	ld.shared.u32 	%r170, [%rd20];
	ld.shared.u32 	%r171, [%rd21];
	ld.shared.u32 	%r172, [%rd22];
	ld.shared.u32 	%r173, [%rd23];
	ld.shared.u32 	%r174, [%rd24];
	ld.shared.u32 	%r175, [%rd25];
	ld.shared.u32 	%r176, [%rd26];
	ld.shared.u32 	%r177, [%rd27];
	ld.shared.u32 	%r178, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r179, %r153, 0, 31, -1;
	shfl.sync.idx.b32	%r180, %r153, 1, 31, -1;
	shfl.sync.idx.b32	%r181, %r153, 2, 31, -1;
	shfl.sync.idx.b32	%r182, %r153, 3, 31, -1;
	shfl.sync.idx.b32	%r183, %r153, 4, 31, -1;
	shfl.sync.idx.b32	%r184, %r153, 5, 31, -1;
	shfl.sync.idx.b32	%r185, %r153, 6, 31, -1;
	shfl.sync.idx.b32	%r186, %r153, 7, 31, -1;
	shfl.sync.idx.b32	%r187, %r153, 8, 31, -1;
	shfl.sync.idx.b32	%r188, %r153, 9, 31, -1;
	shfl.sync.idx.b32	%r189, %r153, 10, 31, -1;
	shfl.sync.idx.b32	%r190, %r153, 11, 31, -1;
	shfl.sync.idx.b32	%r191, %r153, 12, 31, -1;
	shfl.sync.idx.b32	%r192, %r153, 13, 31, -1;
	shfl.sync.idx.b32	%r193, %r153, 14, 31, -1;
	shfl.sync.idx.b32	%r194, %r153, 15, 31, -1;
	setp.eq.s32 	%p259, %r179, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.187:                             // %pass3083
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r857, %r179, %r1;
	mul.wide.s32 	%rd160, %r857, 4;
	add.s64 	%rd162, %rd78, %rd160;
	st.shared.u32 	[%rd162], %r163;
	setp.eq.s32 	%p260, %r180, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.188:                             // %pass3151
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r858, %r180, %r1;
	mul.wide.s32 	%rd163, %r858, 4;
	add.s64 	%rd165, %rd78, %rd163;
	st.shared.u32 	[%rd165], %r164;
	setp.eq.s32 	%p261, %r181, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.189:                             // %pass3219
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r859, %r181, %r1;
	mul.wide.s32 	%rd166, %r859, 4;
	add.s64 	%rd168, %rd78, %rd166;
	st.shared.u32 	[%rd168], %r165;
	setp.eq.s32 	%p262, %r182, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.190:                             // %pass3287
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r860, %r182, %r1;
	mul.wide.s32 	%rd169, %r860, 4;
	add.s64 	%rd171, %rd78, %rd169;
	st.shared.u32 	[%rd171], %r166;
	setp.eq.s32 	%p263, %r183, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.191:                             // %pass3355
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r861, %r183, %r1;
	mul.wide.s32 	%rd172, %r861, 4;
	add.s64 	%rd174, %rd78, %rd172;
	st.shared.u32 	[%rd174], %r167;
	setp.eq.s32 	%p264, %r184, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.192:                             // %pass3423
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r862, %r184, %r1;
	mul.wide.s32 	%rd175, %r862, 4;
	add.s64 	%rd177, %rd78, %rd175;
	st.shared.u32 	[%rd177], %r168;
	setp.eq.s32 	%p265, %r185, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.193:                             // %pass3491
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r863, %r185, %r1;
	mul.wide.s32 	%rd178, %r863, 4;
	add.s64 	%rd180, %rd78, %rd178;
	st.shared.u32 	[%rd180], %r169;
	setp.eq.s32 	%p266, %r186, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.194:                             // %pass3559
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r864, %r186, %r1;
	mul.wide.s32 	%rd181, %r864, 4;
	add.s64 	%rd183, %rd78, %rd181;
	st.shared.u32 	[%rd183], %r170;
	setp.eq.s32 	%p267, %r187, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.195:                             // %pass3627
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r865, %r187, %r1;
	mul.wide.s32 	%rd184, %r865, 4;
	add.s64 	%rd186, %rd78, %rd184;
	st.shared.u32 	[%rd186], %r171;
	setp.eq.s32 	%p268, %r188, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.196:                             // %pass3695
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r866, %r188, %r1;
	mul.wide.s32 	%rd187, %r866, 4;
	add.s64 	%rd189, %rd78, %rd187;
	st.shared.u32 	[%rd189], %r172;
	setp.eq.s32 	%p269, %r189, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.197:                             // %pass3763
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r867, %r189, %r1;
	mul.wide.s32 	%rd190, %r867, 4;
	add.s64 	%rd192, %rd78, %rd190;
	st.shared.u32 	[%rd192], %r173;
	setp.eq.s32 	%p270, %r190, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.198:                             // %pass3831
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r868, %r190, %r1;
	mul.wide.s32 	%rd193, %r868, 4;
	add.s64 	%rd195, %rd78, %rd193;
	st.shared.u32 	[%rd195], %r174;
	setp.eq.s32 	%p271, %r191, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.199:                             // %pass3899
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r869, %r191, %r1;
	mul.wide.s32 	%rd196, %r869, 4;
	add.s64 	%rd198, %rd78, %rd196;
	st.shared.u32 	[%rd198], %r175;
	setp.eq.s32 	%p272, %r192, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.200:                             // %pass3967
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r870, %r192, %r1;
	mul.wide.s32 	%rd199, %r870, 4;
	add.s64 	%rd201, %rd78, %rd199;
	st.shared.u32 	[%rd201], %r176;
	setp.eq.s32 	%p273, %r193, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.201:                             // %pass4035
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r871, %r193, %r1;
	mul.wide.s32 	%rd202, %r871, 4;
	add.s64 	%rd204, %rd78, %rd202;
	st.shared.u32 	[%rd204], %r177;
	setp.eq.s32 	%p274, %r194, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.202:                             // %pass4103
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r873, %r194, %r1;
	mul.wide.s32 	%rd205, %r873, 4;
	add.s64 	%rd207, %rd78, %rd205;
	st.shared.u32 	[%rd207], %r178;
	bar.sync 	0;
	ld.shared.u32 	%r195, [%rd29];
	ld.shared.u32 	%r196, [%rd30];
	ld.shared.u32 	%r197, [%rd31];
	ld.shared.u32 	%r198, [%rd32];
	ld.shared.u32 	%r199, [%rd33];
	ld.shared.u32 	%r200, [%rd34];
	ld.shared.u32 	%r201, [%rd35];
	ld.shared.u32 	%r202, [%rd36];
	ld.shared.u32 	%r203, [%rd37];
	ld.shared.u32 	%r204, [%rd38];
	ld.shared.u32 	%r205, [%rd39];
	ld.shared.u32 	%r206, [%rd40];
	ld.shared.u32 	%r207, [%rd41];
	ld.shared.u32 	%r208, [%rd42];
	ld.shared.u32 	%r209, [%rd43];
	ld.shared.u32 	%r210, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3340, 16;
	bra.uni 	$L__BB0_203;
$L__BB0_152:                            // %L20843
                                        //   in Loop: Header=BB0_203 Depth=2
	bar.sync 	0;
	add.s32 	%r3340, %r3340, -8;
	setp.ne.s32 	%p283, %r3340, -16;
	@%p283 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_153;
$L__BB0_203:                            // %L12366
                                        //   Parent Loop BB0_185 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3340, 16;
	selp.b32 	%r1266, %r195, 0, %p275;
	setp.eq.s32 	%p276, %r3340, 8;
	selp.b32 	%r1267, %r199, %r1266, %p276;
	setp.eq.s32 	%p277, %r3340, 0;
	selp.b32 	%r1268, %r203, %r1267, %p277;
	setp.eq.s32 	%p278, %r3340, -8;
	selp.b32 	%r1269, %r207, %r1268, %p278;
	selp.b32 	%r1270, %r196, 0, %p275;
	selp.b32 	%r1271, %r200, %r1270, %p276;
	selp.b32 	%r1272, %r204, %r1271, %p277;
	selp.b32 	%r1273, %r208, %r1272, %p278;
	selp.b32 	%r1274, %r197, 0, %p275;
	selp.b32 	%r1275, %r201, %r1274, %p276;
	selp.b32 	%r1276, %r205, %r1275, %p277;
	selp.b32 	%r1277, %r209, %r1276, %p278;
	selp.b32 	%r1278, %r198, 0, %p275;
	selp.b32 	%r1279, %r202, %r1278, %p276;
	selp.b32 	%r1280, %r206, %r1279, %p277;
	selp.b32 	%r1281, %r210, %r1280, %p278;
	// begin inline asm
	mov.b32 %r879, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r890, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r878, %r1269, -2004318072;
	mov.u32 	%r1015, 983055;
	// begin inline asm
	lop3.b32 %r876, %r1015, %r878, %r879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r880, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r881, %r879, %r880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r884, %r876, %r881;
	// end inline asm
	mov.u32 	%r1026, 15728880;
	// begin inline asm
	lop3.b32 %r887, %r1026, %r878, %r890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r892, %r890, %r891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r895, %r887, %r892;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r924, %r1273, -2004318072;
	// begin inline asm
	lop3.b32 %r922, %r1015, %r924, %r925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r927, %r925, %r926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r930, %r922, %r927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r933, %r1026, %r924, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r970, %r1277, -2004318072;
	// begin inline asm
	lop3.b32 %r968, %r1015, %r970, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r973, %r971, %r972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r976, %r968, %r973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r979, %r1026, %r970, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1016, %r1281, -2004318072;
	// begin inline asm
	lop3.b32 %r1014, %r1015, %r1016, %r1017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1019, %r1017, %r1018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1022, %r1014, %r1019;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1025, %r1026, %r1016, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1030, %r1028, %r1029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1033, %r1025, %r1030;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r884;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1058, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r895;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1061, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r930;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1064, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r941;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1067, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r976;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1070, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r987;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1073, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1022;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1076, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1033;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1079, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1137, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1082, %r1083}, {%r246, %r249}, {%r1058}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1089, %r1090}, {%r246, %r249}, {%r1061}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1096, %r1097}, {%r246, %r249}, {%r1064}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1103, %r1104}, {%r246, %r249}, {%r1067}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1110, %r1111}, {%r246, %r249}, {%r1070}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1117, %r1118}, {%r246, %r249}, {%r1073}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1124, %r1125}, {%r246, %r249}, {%r1076}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1131, %r1132}, {%r246, %r249}, {%r1079}, {%r1137, %r1137};
	// end inline asm
	@%p1 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_204;
$L__BB0_205:                            // %pass5517
                                        //   in Loop: Header=BB0_203 Depth=2
	// begin inline asm
	neg.f16x2 %r1138, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1140, %r1138, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r284, %r1082, %r1140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1147, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1149, %r1147, %r1090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r284, %r1089, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1156, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r1156, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r284, %r1096, %r1158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1165, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r1165, %r1104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r284, %r1103, %r1167;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1174, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1176, %r1174, %r1111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r284, %r1110, %r1176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1183, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r1183, %r1118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r284, %r1117, %r1185;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1192, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1194, %r1192, %r1125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1197, %r284, %r1124, %r1194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1201, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1203, %r1201, %r1132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1206, %r284, %r1131, %r1203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1210, %r287, %r1082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r284, %r1083, %r1210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r287, %r1089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r284, %r1090, %r1217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1224, %r287, %r1096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r284, %r1097, %r1224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1231, %r287, %r1103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1234, %r284, %r1104, %r1231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1238, %r287, %r1110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1241, %r284, %r1111, %r1238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r287, %r1117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r284, %r1118, %r1245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r287, %r1124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r284, %r1125, %r1252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1259, %r287, %r1131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1262, %r284, %r1132, %r1259;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1282, %r1283}, {%r331, %r334}, {%r1143, %r1213}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1291, %r1292}, {%r331, %r334}, {%r1152, %r1220}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1300, %r1301}, {%r331, %r334}, {%r1161, %r1227}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1309, %r1310}, {%r331, %r334}, {%r1170, %r1234}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1318, %r1319}, {%r331, %r334}, {%r1179, %r1241}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1327, %r1328}, {%r331, %r334}, {%r1188, %r1248}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1336, %r1337}, {%r331, %r334}, {%r1197, %r1255}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1345, %r1346}, {%r331, %r334}, {%r1206, %r1262}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1422, [%rd7];
	ld.shared.u32 	%r1429, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1439, %r1436}, {%r343, %r346}, {%r1422}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1448, %r1445}, {%r343, %r346}, {%r1429}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1432, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1434, %r1432, %r1436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r377, %r1439, %r1434;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1441, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1443, %r1441, %r1445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1446, %r377, %r1448, %r1443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1450, %r380, %r1439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1453, %r377, %r1436, %r1450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1457, %r380, %r1448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1460, %r377, %r1445, %r1457;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1483, %r1486}, {%r419, %r422}, {%r1437, %r1453}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1490, %r1494}, {%r419, %r422}, {%r1446, %r1460}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1482, %r1483, %r1483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1485, %r1486, %r1486, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1489, %r1490, %r1490, %r1485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r1494, %r1494, %r1489;
	// end inline asm
	mov.u32 	%r2079, 425007445;
	// begin inline asm
	fma.rn.f16x2 %r1497, %r2079, %r1493, %r3353;
	// end inline asm
	ld.shared.u32 	%r1505, [%rd45];
	ld.shared.u32 	%r1512, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1522, %r1519}, {%r343, %r346}, {%r1505}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1531, %r1528}, {%r343, %r346}, {%r1512}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1515, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1517, %r1515, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r377, %r1522, %r1517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1524, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1526, %r1524, %r1528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r377, %r1531, %r1526;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1533, %r380, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1536, %r377, %r1519, %r1533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1540, %r380, %r1531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1543, %r377, %r1528, %r1540;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1566, %r1569}, {%r419, %r422}, {%r1520, %r1536}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1573, %r1577}, {%r419, %r422}, {%r1529, %r1543}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1565, %r1566, %r1566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r1569, %r1569, %r1565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r1573, %r1573, %r1568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1576, %r1577, %r1577, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1580, %r2079, %r1576, %r1497;
	// end inline asm
	ld.shared.u32 	%r1588, [%rd47];
	ld.shared.u32 	%r1595, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1605, %r1602}, {%r343, %r346}, {%r1588}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1614, %r1611}, {%r343, %r346}, {%r1595}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1598, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1600, %r1598, %r1602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1603, %r377, %r1605, %r1600;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1607, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1609, %r1607, %r1611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r377, %r1614, %r1609;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1616, %r380, %r1605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r377, %r1602, %r1616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1623, %r380, %r1614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r377, %r1611, %r1623;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1649, %r1652}, {%r419, %r422}, {%r1603, %r1619}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1656, %r1660}, {%r419, %r422}, {%r1612, %r1626}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1648, %r1649, %r1649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r1652, %r1652, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r1656, %r1656, %r1651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1659, %r1660, %r1660, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1663, %r2079, %r1659, %r1580;
	// end inline asm
	ld.shared.u32 	%r1671, [%rd49];
	ld.shared.u32 	%r1678, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1688, %r1685}, {%r343, %r346}, {%r1671}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1697, %r1694}, {%r343, %r346}, {%r1678}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1681, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1683, %r1681, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r377, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1690, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r1690, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r377, %r1697, %r1692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r380, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r377, %r1685, %r1699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1706, %r380, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r377, %r1694, %r1706;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1732, %r1735}, {%r419, %r422}, {%r1686, %r1702}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1739, %r1743}, {%r419, %r422}, {%r1695, %r1709}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1731, %r1732, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r1735, %r1735, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r1739, %r1739, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r1743, %r1743, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r2079, %r1742, %r1663;
	// end inline asm
	ld.shared.u32 	%r1754, [%rd51];
	ld.shared.u32 	%r1761, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1771, %r1768}, {%r343, %r346}, {%r1754}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1780, %r1777}, {%r343, %r346}, {%r1761}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1764, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1766, %r1764, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r377, %r1771, %r1766;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1773, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r1773, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r377, %r1780, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r380, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r377, %r1768, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r380, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r377, %r1777, %r1789;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1815, %r1818}, {%r419, %r422}, {%r1769, %r1785}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1822, %r1826}, {%r419, %r422}, {%r1778, %r1792}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1814, %r1815, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r1818, %r1818, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r1822, %r1822, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r1826, %r1826, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r2079, %r1825, %r1746;
	// end inline asm
	ld.shared.u32 	%r1837, [%rd53];
	ld.shared.u32 	%r1844, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1854, %r1851}, {%r343, %r346}, {%r1837}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1863, %r1860}, {%r343, %r346}, {%r1844}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1847, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1849, %r1847, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r377, %r1854, %r1849;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1856, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1858, %r1856, %r1860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r377, %r1863, %r1858;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1865, %r380, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r377, %r1851, %r1865;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1872, %r380, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1875, %r377, %r1860, %r1872;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1898, %r1901}, {%r419, %r422}, {%r1852, %r1868}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1905, %r1909}, {%r419, %r422}, {%r1861, %r1875}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1897, %r1898, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1900, %r1901, %r1901, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1904, %r1905, %r1905, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r1909, %r1909, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1912, %r2079, %r1908, %r1829;
	// end inline asm
	ld.shared.u32 	%r1920, [%rd55];
	ld.shared.u32 	%r1927, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1937, %r1934}, {%r343, %r346}, {%r1920}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1946, %r1943}, {%r343, %r346}, {%r1927}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1930, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r1930, %r1934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r377, %r1937, %r1932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1939, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1941, %r1939, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r377, %r1946, %r1941;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1948, %r380, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r377, %r1934, %r1948;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1955, %r380, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r377, %r1943, %r1955;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1981, %r1984}, {%r419, %r422}, {%r1935, %r1951}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1988, %r1992}, {%r419, %r422}, {%r1944, %r1958}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1980, %r1981, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r1984, %r1984, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r1988, %r1988, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r1992, %r1992, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r2079, %r1991, %r1912;
	// end inline asm
	ld.shared.u32 	%r2003, [%rd57];
	ld.shared.u32 	%r2010, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2020, %r2017}, {%r343, %r346}, {%r2003}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2029, %r2026}, {%r343, %r346}, {%r2010}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2013, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2015, %r2013, %r2017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r377, %r2020, %r2015;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2022, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2024, %r2022, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2027, %r377, %r2029, %r2024;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2031, %r380, %r2020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r377, %r2017, %r2031;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2038, %r380, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r377, %r2026, %r2038;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2064, %r2067}, {%r419, %r422}, {%r2018, %r2034}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2071, %r2075}, {%r419, %r422}, {%r2027, %r2041}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2063, %r2064, %r2064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2066, %r2067, %r2067, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r2071, %r2071, %r2066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r2075, %r2075, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3353, %r2079, %r2074, %r1995;
	// end inline asm
	add.s32 	%r3348, %r3348, 8;
	setp.ne.s32 	%p279, %r3348, 48;
	@%p279 bra 	$L__BB0_152;
// %bb.206:                             // %pass8917
                                        //   in Loop: Header=BB0_203 Depth=2
	shl.b32 	%r2083, %r3349, 20;
	or.b32  	%r2084, %r161, %r2083;
	cvt.u64.u32 	%rd210, %r2084;
	add.s64 	%rd211, %rd210, %rd9;
	shr.u64 	%rd212, %rd211, 34;
	add.s64 	%rd213, %rd211, %rd212;
	shr.s64 	%rd214, %rd213, 30;
	setp.lt.s64 	%p280, %rd211, 0;
	and.b64  	%rd215, %rd213, -1073741824;
	setp.ne.s64 	%p281, %rd215, %rd211;
	and.pred  	%p282, %p280, %p281;
	selp.u64 	%rd216, 1, 0, %p282;
	sub.s64 	%rd217, %rd216, %rd214;
	shl.b64 	%rd218, %rd217, 30;
	add.s64 	%rd219, %rd218, %rd211;
	shl.b64 	%rd220, %rd219, 2;
	add.s64 	%rd221, %rd4, %rd220;
	st.global.u32 	[%rd221], %r3353;
	add.s32 	%r3349, %r3349, 1;
	mov.u32 	%r3348, 0;
	mov.u32 	%r3353, %r3348;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L20864.preheader
                                        //   in Loop: Header=BB0_185 Depth=1
	mov.u32 	%r3347, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_155:                            // %L29341
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3347, %r3347, -8;
	setp.ne.s32 	%p292, %r3347, -16;
	@%p292 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L20864
                                        //   Parent Loop BB0_185 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p284, %r3347, 16;
	selp.b32 	%r3278, %r195, 0, %p284;
	setp.eq.s32 	%p285, %r3347, 8;
	selp.b32 	%r3279, %r199, %r3278, %p285;
	setp.eq.s32 	%p286, %r3347, 0;
	selp.b32 	%r3280, %r203, %r3279, %p286;
	setp.eq.s32 	%p287, %r3347, -8;
	selp.b32 	%r3281, %r207, %r3280, %p287;
	selp.b32 	%r3282, %r196, 0, %p284;
	selp.b32 	%r3283, %r200, %r3282, %p285;
	selp.b32 	%r3284, %r204, %r3283, %p286;
	selp.b32 	%r3285, %r208, %r3284, %p287;
	selp.b32 	%r3286, %r197, 0, %p284;
	selp.b32 	%r3287, %r201, %r3286, %p285;
	selp.b32 	%r3288, %r205, %r3287, %p286;
	selp.b32 	%r3289, %r209, %r3288, %p287;
	selp.b32 	%r3290, %r198, 0, %p284;
	selp.b32 	%r3291, %r202, %r3290, %p285;
	selp.b32 	%r3292, %r206, %r3291, %p286;
	selp.b32 	%r3293, %r210, %r3292, %p287;
	// begin inline asm
	mov.b32 %r2113, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2124, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3294, %r3281, 8;
	xor.b32  	%r2123, %r3294, 8947848;
	// begin inline asm
	lop3.b32 %r2110, %r1015, %r2123, %r2113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2114, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2115, %r2113, %r2114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2118, %r2110, %r2115;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2121, %r1026, %r2123, %r2124, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2125, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2126, %r2124, %r2125;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2129, %r2121, %r2126;
	// end inline asm
	// begin inline asm
	mov.b32 %r2159, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2170, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3295, %r3285, 8;
	xor.b32  	%r2169, %r3295, 8947848;
	// begin inline asm
	lop3.b32 %r2156, %r1015, %r2169, %r2159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2160, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2161, %r2159, %r2160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2164, %r2156, %r2161;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2167, %r1026, %r2169, %r2170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2171, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2172, %r2170, %r2171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2175, %r2167, %r2172;
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2216, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3296, %r3289, 8;
	xor.b32  	%r2215, %r3296, 8947848;
	// begin inline asm
	lop3.b32 %r2202, %r1015, %r2215, %r2205, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2207, %r2205, %r2206;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2210, %r2202, %r2207;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2213, %r1026, %r2215, %r2216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2218, %r2216, %r2217;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2221, %r2213, %r2218;
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3297, %r3293, 8;
	xor.b32  	%r2261, %r3297, 8947848;
	// begin inline asm
	lop3.b32 %r2248, %r1015, %r2261, %r2251, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2253, %r2251, %r2252;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2256, %r2248, %r2253;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2259, %r1026, %r2261, %r2262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2264, %r2262, %r2263;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2267, %r2259, %r2264;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2118;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2270, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2129;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2273, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2164;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2276, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2175;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2279, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2210;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2282, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2221;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2285, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2256;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2288, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2267;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2291, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2357, %r2354}, {%r246, %r249}, {%r2270}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2366, %r2363}, {%r246, %r249}, {%r2273}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2375, %r2372}, {%r246, %r249}, {%r2276}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2384, %r2381}, {%r246, %r249}, {%r2279}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2393, %r2390}, {%r246, %r249}, {%r2282}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2402, %r2399}, {%r246, %r249}, {%r2285}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2411, %r2408}, {%r246, %r249}, {%r2288}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2420, %r2417}, {%r246, %r249}, {%r2291}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2350, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2352, %r2350, %r2354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2355, %r284, %r2357, %r2352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2359, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2361, %r2359, %r2363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2364, %r284, %r2366, %r2361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2368, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2370, %r2368, %r2372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2373, %r284, %r2375, %r2370;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2377, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2379, %r2377, %r2381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2382, %r284, %r2384, %r2379;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2386, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2388, %r2386, %r2390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2391, %r284, %r2393, %r2388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2395, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2397, %r2395, %r2399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2400, %r284, %r2402, %r2397;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2404, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2406, %r2404, %r2408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2409, %r284, %r2411, %r2406;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2413, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2415, %r2413, %r2417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2418, %r284, %r2420, %r2415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2422, %r287, %r2357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2425, %r284, %r2354, %r2422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2429, %r287, %r2366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2432, %r284, %r2363, %r2429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2436, %r287, %r2375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2439, %r284, %r2372, %r2436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2443, %r287, %r2384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2446, %r284, %r2381, %r2443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2450, %r287, %r2393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2453, %r284, %r2390, %r2450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2457, %r287, %r2402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r284, %r2399, %r2457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2464, %r287, %r2411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2467, %r284, %r2408, %r2464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r287, %r2420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r284, %r2417, %r2471;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2478, %r2479}, {%r331, %r334}, {%r2355, %r2425}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2487, %r2488}, {%r331, %r334}, {%r2364, %r2432}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2496, %r2497}, {%r331, %r334}, {%r2373, %r2439}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2505, %r2506}, {%r331, %r334}, {%r2382, %r2446}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2514, %r2515}, {%r331, %r334}, {%r2391, %r2453}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2523, %r2524}, {%r331, %r334}, {%r2400, %r2460}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2532, %r2533}, {%r331, %r334}, {%r2409, %r2467}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2541, %r2542}, {%r331, %r334}, {%r2418, %r2474}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2618, [%rd7];
	ld.shared.u32 	%r2625, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2635, %r2632}, {%r343, %r346}, {%r2618}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2644, %r2641}, {%r343, %r346}, {%r2625}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2628, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2630, %r2628, %r2632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2633, %r377, %r2635, %r2630;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2637, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2639, %r2637, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2642, %r377, %r2644, %r2639;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r380, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2649, %r377, %r2632, %r2646;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2653, %r380, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2656, %r377, %r2641, %r2653;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2679, %r2682}, {%r419, %r422}, {%r2633, %r2649}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2686, %r2690}, {%r419, %r422}, {%r2642, %r2656}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r2679, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2681, %r2682, %r2682, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r2686, %r2686, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r2690, %r2690, %r2685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2693, %r2079, %r2689, %r3353;
	// end inline asm
	ld.shared.u32 	%r2701, [%rd45];
	ld.shared.u32 	%r2708, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2718, %r2715}, {%r343, %r346}, {%r2701}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2727, %r2724}, {%r343, %r346}, {%r2708}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2711, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r2711, %r2715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r377, %r2718, %r2713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2720, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r2720, %r2724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r377, %r2727, %r2722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r380, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r377, %r2715, %r2729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r380, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r377, %r2724, %r2736;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2762, %r2765}, {%r419, %r422}, {%r2716, %r2732}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2769, %r2773}, {%r419, %r422}, {%r2725, %r2739}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2761, %r2762, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2764, %r2765, %r2765, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r2769, %r2769, %r2764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r2773, %r2773, %r2768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2776, %r2079, %r2772, %r2693;
	// end inline asm
	ld.shared.u32 	%r2784, [%rd47];
	ld.shared.u32 	%r2791, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2801, %r2798}, {%r343, %r346}, {%r2784}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2810, %r2807}, {%r343, %r346}, {%r2791}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2794, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2796, %r2794, %r2798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r377, %r2801, %r2796;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2803, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2805, %r2803, %r2807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r377, %r2810, %r2805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2812, %r380, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r377, %r2798, %r2812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2819, %r380, %r2810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2822, %r377, %r2807, %r2819;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2845, %r2848}, {%r419, %r422}, {%r2799, %r2815}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2852, %r2856}, {%r419, %r422}, {%r2808, %r2822}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2844, %r2845, %r2845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2847, %r2848, %r2848, %r2844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2851, %r2852, %r2852, %r2847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2855, %r2856, %r2856, %r2851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r2079, %r2855, %r2776;
	// end inline asm
	ld.shared.u32 	%r2867, [%rd49];
	ld.shared.u32 	%r2874, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2884, %r2881}, {%r343, %r346}, {%r2867}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2893, %r2890}, {%r343, %r346}, {%r2874}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2877, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2879, %r2877, %r2881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2882, %r377, %r2884, %r2879;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2886, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2888, %r2886, %r2890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r377, %r2893, %r2888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r380, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r377, %r2881, %r2895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2902, %r380, %r2893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r377, %r2890, %r2902;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2928, %r2931}, {%r419, %r422}, {%r2882, %r2898}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2935, %r2939}, {%r419, %r422}, {%r2891, %r2905}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2927, %r2928, %r2928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r2931, %r2931, %r2927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r2935, %r2935, %r2930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r2939, %r2939, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r2079, %r2938, %r2859;
	// end inline asm
	ld.shared.u32 	%r2950, [%rd51];
	ld.shared.u32 	%r2957, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2967, %r2964}, {%r343, %r346}, {%r2950}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2976, %r2973}, {%r343, %r346}, {%r2957}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2960, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r2960, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r377, %r2967, %r2962;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2969, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2971, %r2969, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r377, %r2976, %r2971;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2978, %r380, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r377, %r2964, %r2978;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2985, %r380, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2988, %r377, %r2973, %r2985;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3011, %r3014}, {%r419, %r422}, {%r2965, %r2981}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3018, %r3022}, {%r419, %r422}, {%r2974, %r2988}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3010, %r3011, %r3011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3013, %r3014, %r3014, %r3010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3017, %r3018, %r3018, %r3013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3021, %r3022, %r3022, %r3017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3025, %r2079, %r3021, %r2942;
	// end inline asm
	ld.shared.u32 	%r3033, [%rd53];
	ld.shared.u32 	%r3040, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3050, %r3047}, {%r343, %r346}, {%r3033}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3059, %r3056}, {%r343, %r346}, {%r3040}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3043, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3045, %r3043, %r3047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3048, %r377, %r3050, %r3045;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3052, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3054, %r3052, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r377, %r3059, %r3054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3061, %r380, %r3050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r377, %r3047, %r3061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3068, %r380, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3071, %r377, %r3056, %r3068;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3094, %r3097}, {%r419, %r422}, {%r3048, %r3064}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3101, %r3105}, {%r419, %r422}, {%r3057, %r3071}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3093, %r3094, %r3094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3096, %r3097, %r3097, %r3093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3100, %r3101, %r3101, %r3096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r3105, %r3105, %r3100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3108, %r2079, %r3104, %r3025;
	// end inline asm
	ld.shared.u32 	%r3116, [%rd55];
	ld.shared.u32 	%r3123, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3133, %r3130}, {%r343, %r346}, {%r3116}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3142, %r3139}, {%r343, %r346}, {%r3123}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3126, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r3126, %r3130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r377, %r3133, %r3128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3135, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3137, %r3135, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r377, %r3142, %r3137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3144, %r380, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r377, %r3130, %r3144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3151, %r380, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r377, %r3139, %r3151;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3177, %r3180}, {%r419, %r422}, {%r3131, %r3147}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3184, %r3188}, {%r419, %r422}, {%r3140, %r3154}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3176, %r3177, %r3177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3180, %r3180, %r3176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3183, %r3184, %r3184, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3187, %r3188, %r3188, %r3183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r2079, %r3187, %r3108;
	// end inline asm
	ld.shared.u32 	%r3199, [%rd57];
	ld.shared.u32 	%r3206, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3216, %r3213}, {%r343, %r346}, {%r3199}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3225, %r3222}, {%r343, %r346}, {%r3206}, {%r1137, %r1137};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3209, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3211, %r3209, %r3213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r377, %r3216, %r3211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3218, %r380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3220, %r3218, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r377, %r3225, %r3220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3227, %r380, %r3216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r377, %r3213, %r3227;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3234, %r380, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r377, %r3222, %r3234;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3260, %r3263}, {%r419, %r422}, {%r3214, %r3230}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3267, %r3271}, {%r419, %r422}, {%r3223, %r3237}, {%r1137, %r1137}, %r162, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3259, %r3260, %r3260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3262, %r3263, %r3263, %r3259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3266, %r3267, %r3267, %r3262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3270, %r3271, %r3271, %r3266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3353, %r2079, %r3270, %r3191;
	// end inline asm
	add.s32 	%r3348, %r3348, 8;
	setp.eq.s32 	%p288, %r3348, 48;
	@%p288 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_155;
$L__BB0_207:                            // %pass12454
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3299, %r3349, 20;
	or.b32  	%r3300, %r161, %r3299;
	cvt.u64.u32 	%rd222, %r3300;
	add.s64 	%rd223, %rd222, %rd9;
	shr.u64 	%rd224, %rd223, 34;
	add.s64 	%rd225, %rd223, %rd224;
	shr.s64 	%rd226, %rd225, 30;
	setp.lt.s64 	%p289, %rd223, 0;
	and.b64  	%rd227, %rd225, -1073741824;
	setp.ne.s64 	%p290, %rd227, %rd223;
	and.pred  	%p291, %p289, %p290;
	selp.u64 	%rd228, 1, 0, %p291;
	sub.s64 	%rd229, %rd228, %rd226;
	shl.b64 	%rd230, %rd229, 30;
	add.s64 	%rd231, %rd230, %rd223;
	shl.b64 	%rd232, %rd231, 2;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3353;
	add.s32 	%r3349, %r3349, 1;
	mov.u32 	%r3348, %r1137;
	mov.u32 	%r3353, %r1137;
	bra.uni 	$L__BB0_155;
$L__BB0_157:                            // %L29372
	mov.u32 	%r3301, 0;
	st.global.u32 	[%rd6], %r3301;
	ret;
$L__BB0_204:                            // %post_box_union
	mov.u64 	%rd208, exception2385;
	cvta.global.u64 	%rd209, %rd208;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd209;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6896
	mov.u32 	%r3317, 5;
	st.global.u32 	[%rd6], %r3317;
	mov.u64 	%rd264, exception2337;
	cvta.global.u64 	%rd265, %rd264;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd265;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7056
	mov.u32 	%r3316, 5;
	st.global.u32 	[%rd6], %r3316;
	mov.u64 	%rd262, exception2337;
	cvta.global.u64 	%rd263, %rd262;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd263;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7216
	mov.u32 	%r3315, 5;
	st.global.u32 	[%rd6], %r3315;
	mov.u64 	%rd260, exception2337;
	cvta.global.u64 	%rd261, %rd260;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd261;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7376
	mov.u32 	%r3314, 5;
	st.global.u32 	[%rd6], %r3314;
	mov.u64 	%rd258, exception2337;
	cvta.global.u64 	%rd259, %rd258;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd259;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7536
	mov.u32 	%r3313, 5;
	st.global.u32 	[%rd6], %r3313;
	mov.u64 	%rd256, exception2337;
	cvta.global.u64 	%rd257, %rd256;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd257;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7696
	mov.u32 	%r3312, 5;
	st.global.u32 	[%rd6], %r3312;
	mov.u64 	%rd254, exception2337;
	cvta.global.u64 	%rd255, %rd254;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd255;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7856
	mov.u32 	%r3311, 5;
	st.global.u32 	[%rd6], %r3311;
	mov.u64 	%rd252, exception2337;
	cvta.global.u64 	%rd253, %rd252;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd253;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8016
	mov.u32 	%r3310, 5;
	st.global.u32 	[%rd6], %r3310;
	mov.u64 	%rd250, exception2337;
	cvta.global.u64 	%rd251, %rd250;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd251;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8176
	mov.u32 	%r3309, 5;
	st.global.u32 	[%rd6], %r3309;
	mov.u64 	%rd248, exception2337;
	cvta.global.u64 	%rd249, %rd248;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd249;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8336
	mov.u32 	%r3308, 5;
	st.global.u32 	[%rd6], %r3308;
	mov.u64 	%rd246, exception2337;
	cvta.global.u64 	%rd247, %rd246;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd247;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8496
	mov.u32 	%r3307, 5;
	st.global.u32 	[%rd6], %r3307;
	mov.u64 	%rd244, exception2337;
	cvta.global.u64 	%rd245, %rd244;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd245;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8656
	mov.u32 	%r3306, 5;
	st.global.u32 	[%rd6], %r3306;
	mov.u64 	%rd242, exception2337;
	cvta.global.u64 	%rd243, %rd242;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd243;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8816
	mov.u32 	%r3305, 5;
	st.global.u32 	[%rd6], %r3305;
	mov.u64 	%rd240, exception2337;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8976
	mov.u32 	%r3304, 5;
	st.global.u32 	[%rd6], %r3304;
	mov.u64 	%rd238, exception2337;
	cvta.global.u64 	%rd239, %rd238;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd239;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9136
	mov.u32 	%r3303, 5;
	st.global.u32 	[%rd6], %r3303;
	mov.u64 	%rd236, exception2337;
	cvta.global.u64 	%rd237, %rd236;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd237;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9296
	mov.u32 	%r3302, 5;
	st.global.u32 	[%rd6], %r3302;
	mov.u64 	%rd234, exception2337;
	cvta.global.u64 	%rd235, %rd234;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd235;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3319, 2;
	st.global.u32 	[%rd6], %r3319;
	mov.u64 	%rd268, exception2337;
	cvta.global.u64 	%rd269, %rd268;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd269;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r3318, 3;
	st.global.u32 	[%rd6], %r3318;
	mov.u64 	%rd266, exception2337;
	cvta.global.u64 	%rd267, %rd266;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd267;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r432, [retval0+0];
	} // callseq 47
	mov.u32 	%r434, 4;
	st.global.u32 	[%rd6], %r434;
	mov.u64 	%rd73, exception2337;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r215;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
