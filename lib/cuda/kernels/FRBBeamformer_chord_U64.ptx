// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2823[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<276>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<3739>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<293>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r312, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd40, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r317, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r317, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd41, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r313, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r318, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r319, %r318, %r2;
	add.s32 	%r320, %r319, %r4;
	mul.wide.u32 	%rd47, %r320, 4;
	add.s64 	%rd5, %rd41, %rd47;
	mov.u32 	%r321, 1;
	st.global.u32 	[%rd5], %r321;
	setp.lt.s32 	%p4, %r313, 0;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L117
	ld.param.u32 	%r314, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r314, %r313;
	setp.gt.s32 	%p6, %r314, 4096;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r315, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r314, %r313;
	mad.lo.s32 	%r322, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r323, %r322, %r322, 4;
	setp.gt.u32 	%p8, %r323, 89478484;
	setp.lt.s32 	%p9, %r315, 0;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L133
	ld.param.u32 	%r316, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r316, %r315;
	setp.lt.s32 	%p12, %r316, 129;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_6;
$L__BB0_167:                            // %pass51
	sub.s32 	%r324, %r316, %r315;
	mul.hi.s32 	%r325, %r5, 1717986919;
	shr.u32 	%r326, %r325, 31;
	shr.s32 	%r327, %r325, 4;
	add.s32 	%r328, %r327, %r326;
	setp.ne.s32 	%p14, %r324, %r328;
	@%p14 bra 	$L__BB0_6;
// %bb.168:                             // %pass102
	and.b32  	%r222, %r2, 3;
	shr.u32 	%r223, %r2, 2;
	mul.lo.s32 	%r329, %r222, %r223;
	and.b32  	%r330, %r329, 7;
	cvt.rn.f32.s32 	%f201, %r330;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p15, %f785, 0f40000000;
	setp.gtu.f32 	%p275, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p15 bra 	$L__BB0_180;
// %bb.169:
	@%p275 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_170;
$L__BB0_176:
	mov.b32 	%r225, %f785;
	and.b32  	%r331, %r225, 8388607;
	or.b32  	%r3734, %r331, 1065353216;
	mov.b32 	%f780, %r3734;
	add.s32 	%r332, %r225, -1073741824;
	and.b32  	%r3735, %r332, -8388608;
	setp.eq.s32 	%p22, %r3735, 0;
	@%p22 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r333, %r3735, 192937984;
	add.s32 	%r334, %r3734, %r333;
	mov.b32 	%f213, %r334;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3735, %r3735, %r333;
	mov.b32 	%r3734, %f780;
	setp.ne.s32 	%p23, %r3735, 0;
	setp.ne.s32 	%p24, %r3734, 0;
	and.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p26, %r225, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p26;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_180;
$L__BB0_170:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r224, %f172;
	setp.lt.u32 	%p17, %r224, 1073741824;
	@%p17 bra 	$L__BB0_175;
// %bb.171:
	setp.lt.u32 	%p18, %r224, -2147483647;
	@%p18 bra 	$L__BB0_173;
// %bb.172:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p21, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p21;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p19, %f172, 0f40800000;
	@%p19 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p20, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p20;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p27, %f222, 0f7F800000;
	mov.b32 	%r335, %f169;
	and.b32  	%r232, %r335, -2147483648;
	@%p27 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r336, %f781;
	or.b32  	%r337, %r232, %r336;
	mov.b32 	%f781, %r337;
$L__BB0_182:                            // %__nv_fmodf.exit
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r344, %f224;
	and.b32  	%r345, %r344, -2147483648;
	or.b32  	%r346, %r345, 1056964608;
	mov.b32 	%f225, %r346;
	add.f32 	%f226, %f224, %f225;
	cvt.rzi.f32.f32 	%f227, %f226;
	abs.f32 	%f228, %f224;
	setp.gt.f32 	%p28, %f228, 0f4B000000;
	selp.f32 	%f229, %f224, %f227, %p28;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p29, %f228, 0f3F000000;
	selp.f32 	%f231, %f230, %f229, %p29;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r235, %r2, 1;
	and.b32  	%r236, %r235, 6;
	or.b32  	%r237, %r236, 1;
	setp.eq.s32 	%p35, %r236, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3631, %r236, %r223;
	mov.f32 	%f735, %f223;
	mov.f32 	%f736, %f223;
	@%p35 bra 	$L__BB0_22;
// %bb.7:                               // %L340
	cvt.u16.u32 	%rs1, %r3631;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p36, %f733, 0f40000000;
	@%p36 bra 	$L__BB0_19;
// %bb.8:
	setp.gtu.f32 	%p37, %f733, 0f4B800000;
	@%p37 bra 	$L__BB0_15;
	bra.uni 	$L__BB0_9;
$L__BB0_15:
	mov.b32 	%r7, %f733;
	and.b32  	%r353, %r7, 8388607;
	or.b32  	%r3635, %r353, 1065353216;
	mov.b32 	%f732, %r3635;
	add.s32 	%r354, %r7, -1073741824;
	and.b32  	%r3636, %r354, -8388608;
	setp.eq.s32 	%p43, %r3636, 0;
	@%p43 bra 	$L__BB0_18;
// %bb.16:                              // %__nv_fmaf_rn.exit4.i.i.i991.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_17:                             // %__nv_fmaf_rn.exit4.i.i.i991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r355, %r3636, 192937984;
	add.s32 	%r356, %r3635, %r355;
	mov.b32 	%f267, %r356;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3636, %r3636, %r355;
	mov.b32 	%r3635, %f732;
	setp.ne.s32 	%p44, %r3636, 0;
	setp.ne.s32 	%p45, %r3635, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_17;
$L__BB0_18:                             // %__internal_fmodf_slowpath_mod.exit.i.i993
	setp.gt.u32 	%p47, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_19;
$L__BB0_9:                              // %__nv_fast_fdividef.exit.i.i.i970
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p38, %r6, 1073741824;
	@%p38 bra 	$L__BB0_14;
// %bb.10:
	setp.lt.u32 	%p39, %r6, -2147483647;
	@%p39 bra 	$L__BB0_12;
// %bb.11:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p42, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p42;
	bra.uni 	$L__BB0_14;
$L__BB0_12:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p40, %f4, 0f40800000;
	@%p40 bra 	$L__BB0_14;
// %bb.13:                              // %__nv_fmaf_rn.exit.i.i.i974
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p41, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p41;
$L__BB0_14:                             // %__internal_fmodf_fastpath_quot.exit.i.i977
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_19:                             // %__internal_fmodf_kernel.exit.i996
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p48, %f276, 0f7F800000;
	@%p48 bra 	$L__BB0_21;
// %bb.20:
	mov.b32 	%r357, %f1;
	and.b32  	%r358, %r357, -2147483648;
	mov.b32 	%r359, %f733;
	or.b32  	%r360, %r358, %r359;
	mov.b32 	%f733, %r360;
$L__BB0_21:                             // %__nv_fmodf.exit997
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r361, %f277;
	and.b32  	%r362, %r361, -2147483648;
	or.b32  	%r363, %r362, 1056964608;
	mov.b32 	%f278, %r363;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p49, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p49;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p50, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p50;
	cvt.rzi.s32.f32 	%r364, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r365, %r364, 1;
	setp.eq.b32 	%p51, %r365, 1;
	selp.f32 	%f296, %f294, %f295, %p51;
	selp.f32 	%f297, %f295, %f294, %p51;
	and.b32  	%r366, %r364, 2;
	setp.eq.s32 	%p52, %r366, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p52;
	add.s32 	%r367, %r364, 1;
	and.b32  	%r368, %r367, 2;
	setp.eq.s32 	%p53, %r368, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p53;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p54, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f736, %f304, %f299, %p54;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p55, %f305, 0f4B800000;
	add.f32 	%f306, %f736, 0f3F800000;
	selp.f32 	%f735, %f306, %f302, %p55;
$L__BB0_22:                             // %L374
	cvt.rzi.s32.f32 	%r347, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	setp.gt.u32 	%p56, %r237, 5;
	mul.lo.s32 	%r3632, %r237, %r223;
	mov.f32 	%f741, %f223;
	mov.f32 	%f742, %f223;
	@%p56 bra 	$L__BB0_38;
// %bb.23:                              // %L378
	mul.hi.u32 	%r370, %r3632, -1431655765;
	shr.u32 	%r371, %r370, 5;
	mul.lo.s32 	%r372, %r371, 48;
	sub.s32 	%r373, %r3632, %r372;
	cvt.rn.f32.s32 	%f308, %r373;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p57, %f739, 0f40000000;
	@%p57 bra 	$L__BB0_35;
// %bb.24:
	setp.gtu.f32 	%p58, %f739, 0f4B800000;
	@%p58 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_25;
$L__BB0_31:
	mov.b32 	%r15, %f739;
	and.b32  	%r374, %r15, 8388607;
	or.b32  	%r3637, %r374, 1065353216;
	mov.b32 	%f738, %r3637;
	add.s32 	%r375, %r15, -1073741824;
	and.b32  	%r3638, %r375, -8388608;
	setp.eq.s32 	%p64, %r3638, 0;
	@%p64 bra 	$L__BB0_34;
// %bb.32:                              // %__nv_fmaf_rn.exit4.i.i.i1022.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_33:                             // %__nv_fmaf_rn.exit4.i.i.i1022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r376, %r3638, 192937984;
	add.s32 	%r377, %r3637, %r376;
	mov.b32 	%f320, %r377;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3638, %r3638, %r376;
	mov.b32 	%r3637, %f738;
	setp.ne.s32 	%p65, %r3638, 0;
	setp.ne.s32 	%p66, %r3637, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_33;
$L__BB0_34:                             // %__internal_fmodf_slowpath_mod.exit.i.i1024
	setp.gt.u32 	%p68, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_35;
$L__BB0_25:                             // %__nv_fast_fdividef.exit.i.i.i1001
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p59, %r14, 1073741824;
	@%p59 bra 	$L__BB0_30;
// %bb.26:
	setp.lt.u32 	%p60, %r14, -2147483647;
	@%p60 bra 	$L__BB0_28;
// %bb.27:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p63, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p63;
	bra.uni 	$L__BB0_30;
$L__BB0_28:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p61, %f25, 0f40800000;
	@%p61 bra 	$L__BB0_30;
// %bb.29:                              // %__nv_fmaf_rn.exit.i.i.i1005
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p62, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p62;
$L__BB0_30:                             // %__internal_fmodf_fastpath_quot.exit.i.i1008
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_35:                             // %__internal_fmodf_kernel.exit.i1027
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p69, %f329, 0f7F800000;
	@%p69 bra 	$L__BB0_37;
// %bb.36:
	mov.b32 	%r378, %f22;
	and.b32  	%r379, %r378, -2147483648;
	mov.b32 	%r380, %f739;
	or.b32  	%r381, %r379, %r380;
	mov.b32 	%f739, %r381;
$L__BB0_37:                             // %__nv_fmodf.exit1028
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r382, %f330;
	and.b32  	%r383, %r382, -2147483648;
	or.b32  	%r384, %r383, 1056964608;
	mov.b32 	%f331, %r384;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p70, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p70;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p71, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p71;
	cvt.rzi.s32.f32 	%r385, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r386, %r385, 1;
	setp.eq.b32 	%p72, %r386, 1;
	selp.f32 	%f349, %f347, %f348, %p72;
	selp.f32 	%f350, %f348, %f347, %p72;
	and.b32  	%r387, %r385, 2;
	setp.eq.s32 	%p73, %r387, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p73;
	add.s32 	%r388, %r385, 1;
	and.b32  	%r389, %r388, 2;
	setp.eq.s32 	%p74, %r389, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p74;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p75, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f742, %f357, %f352, %p75;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p76, %f358, 0f4B800000;
	add.f32 	%f359, %f742, 0f3F800000;
	selp.f32 	%f741, %f359, %f355, %p76;
$L__BB0_38:                             // %L412
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r348, %r347, 1;
	setp.gt.u32 	%p78, %r2, 23;
	or.pred  	%p1, %p35, %p78;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f747, %f223;
	mov.f32 	%f748, %f223;
	@%p1 bra 	$L__BB0_54;
// %bb.39:                              // %L450
	cvt.u16.u32 	%rs8, %r3631;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p79, %f745, 0f40000000;
	@%p79 bra 	$L__BB0_51;
// %bb.40:
	setp.gtu.f32 	%p80, %f745, 0f4B800000;
	@%p80 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_41;
$L__BB0_47:
	mov.b32 	%r25, %f745;
	and.b32  	%r397, %r25, 8388607;
	or.b32  	%r3639, %r397, 1065353216;
	mov.b32 	%f744, %r3639;
	add.s32 	%r398, %r25, -1073741824;
	and.b32  	%r3640, %r398, -8388608;
	setp.eq.s32 	%p86, %r3640, 0;
	@%p86 bra 	$L__BB0_50;
// %bb.48:                              // %__nv_fmaf_rn.exit4.i.i.i1053.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_49:                             // %__nv_fmaf_rn.exit4.i.i.i1053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r399, %r3640, 192937984;
	add.s32 	%r400, %r3639, %r399;
	mov.b32 	%f373, %r400;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3640, %r3640, %r399;
	mov.b32 	%r3639, %f744;
	setp.ne.s32 	%p87, %r3640, 0;
	setp.ne.s32 	%p88, %r3639, 0;
	and.pred  	%p89, %p87, %p88;
	@%p89 bra 	$L__BB0_49;
$L__BB0_50:                             // %__internal_fmodf_slowpath_mod.exit.i.i1055
	setp.gt.u32 	%p90, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p90;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_51;
$L__BB0_41:                             // %__nv_fast_fdividef.exit.i.i.i1032
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p81, %r24, 1073741824;
	@%p81 bra 	$L__BB0_46;
// %bb.42:
	setp.lt.u32 	%p82, %r24, -2147483647;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p85, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p85;
	bra.uni 	$L__BB0_46;
$L__BB0_44:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p83, %f46, 0f40800000;
	@%p83 bra 	$L__BB0_46;
// %bb.45:                              // %__nv_fmaf_rn.exit.i.i.i1036
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p84, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p84;
$L__BB0_46:                             // %__internal_fmodf_fastpath_quot.exit.i.i1039
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_51:                             // %__internal_fmodf_kernel.exit.i1058
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p91, %f382, 0f7F800000;
	@%p91 bra 	$L__BB0_53;
// %bb.52:
	mov.b32 	%r401, %f43;
	and.b32  	%r402, %r401, -2147483648;
	mov.b32 	%r403, %f745;
	or.b32  	%r404, %r402, %r403;
	mov.b32 	%f745, %r404;
$L__BB0_53:                             // %__nv_fmodf.exit1059
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r405, %f383;
	and.b32  	%r406, %r405, -2147483648;
	or.b32  	%r407, %r406, 1056964608;
	mov.b32 	%f384, %r407;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p92, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p92;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p93, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p93;
	cvt.rzi.s32.f32 	%r408, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r409, %r408, 1;
	setp.eq.b32 	%p94, %r409, 1;
	selp.f32 	%f402, %f400, %f401, %p94;
	selp.f32 	%f403, %f401, %f400, %p94;
	and.b32  	%r410, %r408, 2;
	setp.eq.s32 	%p95, %r410, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p95;
	add.s32 	%r411, %r408, 1;
	and.b32  	%r412, %r411, 2;
	setp.eq.s32 	%p96, %r412, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p96;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p97, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f748, %f410, %f405, %p97;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p98, %f411, 0f4B800000;
	add.f32 	%f412, %f748, 0f3F800000;
	selp.f32 	%f747, %f412, %f408, %p98;
$L__BB0_54:                             // %L484
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p30, %r348, 1;
	or.pred  	%p2, %p56, %p78;
	mov.f32 	%f753, %f223;
	mov.f32 	%f754, %f223;
	@%p2 bra 	$L__BB0_70;
// %bb.55:                              // %L492
	mul.hi.u32 	%r414, %r3632, -1431655765;
	shr.u32 	%r415, %r414, 2;
	mul.lo.s32 	%r416, %r415, 6;
	sub.s32 	%r417, %r3632, %r416;
	cvt.rn.f32.s32 	%f414, %r417;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p101, %f751, 0f40000000;
	@%p101 bra 	$L__BB0_67;
// %bb.56:
	setp.gtu.f32 	%p102, %f751, 0f4B800000;
	@%p102 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r33, %f751;
	and.b32  	%r418, %r33, 8388607;
	or.b32  	%r3641, %r418, 1065353216;
	mov.b32 	%f750, %r3641;
	add.s32 	%r419, %r33, -1073741824;
	and.b32  	%r3642, %r419, -8388608;
	setp.eq.s32 	%p108, %r3642, 0;
	@%p108 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i1084.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i1084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r420, %r3642, 192937984;
	add.s32 	%r421, %r3641, %r420;
	mov.b32 	%f426, %r421;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3642, %r3642, %r420;
	mov.b32 	%r3641, %f750;
	setp.ne.s32 	%p109, %r3642, 0;
	setp.ne.s32 	%p110, %r3641, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i1086
	setp.gt.u32 	%p112, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i1063
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p103, %r32, 1073741824;
	@%p103 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p104, %r32, -2147483647;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p107, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p107;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p105, %f67, 0f40800000;
	@%p105 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i1067
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p106, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p106;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i1070
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i1089
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p113, %f435, 0f7F800000;
	@%p113 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r422, %f64;
	and.b32  	%r423, %r422, -2147483648;
	mov.b32 	%r424, %f751;
	or.b32  	%r425, %r423, %r424;
	mov.b32 	%f751, %r425;
$L__BB0_69:                             // %__nv_fmodf.exit1090
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r426, %f436;
	and.b32  	%r427, %r426, -2147483648;
	or.b32  	%r428, %r427, 1056964608;
	mov.b32 	%f437, %r428;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p114, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p114;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p115, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p115;
	cvt.rzi.s32.f32 	%r429, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r430, %r429, 1;
	setp.eq.b32 	%p116, %r430, 1;
	selp.f32 	%f455, %f453, %f454, %p116;
	selp.f32 	%f456, %f454, %f453, %p116;
	and.b32  	%r431, %r429, 2;
	setp.eq.s32 	%p117, %r431, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p117;
	add.s32 	%r432, %r429, 1;
	and.b32  	%r433, %r432, 2;
	setp.eq.s32 	%p118, %r433, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p118;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p119, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f754, %f463, %f458, %p119;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p120, %f464, 0f4B800000;
	add.f32 	%f465, %f754, 0f3F800000;
	selp.f32 	%f753, %f465, %f461, %p120;
$L__BB0_70:                             // %L526
	selp.f32 	%f243, %f241, %f242, %p30;
	and.b32  	%r349, %r347, 2;
	@%p15 bra 	$L__BB0_190;
// %bb.71:
	@%p275 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_72;
$L__BB0_186:
	mov.b32 	%r239, %f785;
	and.b32  	%r446, %r239, 8388607;
	or.b32  	%r3736, %r446, 1065353216;
	mov.b32 	%f784, %r3736;
	add.s32 	%r447, %r239, -1073741824;
	and.b32  	%r3737, %r447, -8388608;
	setp.eq.s32 	%p128, %r3737, 0;
	@%p128 bra 	$L__BB0_189;
// %bb.187:                             // %__nv_fmaf_rn.exit4.i.i.i1115.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_188:                            // %__nv_fmaf_rn.exit4.i.i.i1115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r448, %r3737, 192937984;
	add.s32 	%r449, %r3736, %r448;
	mov.b32 	%f476, %r449;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3737, %r3737, %r448;
	mov.b32 	%r3736, %f784;
	setp.ne.s32 	%p129, %r3737, 0;
	setp.ne.s32 	%p130, %r3736, 0;
	and.pred  	%p131, %p129, %p130;
	@%p131 bra 	$L__BB0_188;
$L__BB0_189:                            // %__internal_fmodf_slowpath_mod.exit.i.i1117
	setp.gt.u32 	%p132, %r239, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p132;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_190;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i1094
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r238, %f187;
	setp.lt.u32 	%p123, %r238, 1073741824;
	@%p123 bra 	$L__BB0_185;
// %bb.73:
	setp.lt.u32 	%p124, %r238, -2147483647;
	@%p124 bra 	$L__BB0_183;
// %bb.74:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p127, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p127;
	bra.uni 	$L__BB0_185;
$L__BB0_183:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p125, %f187, 0f40800000;
	@%p125 bra 	$L__BB0_185;
// %bb.184:                             // %__nv_fmaf_rn.exit.i.i.i1098
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p126, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p126;
$L__BB0_185:                            // %__internal_fmodf_fastpath_quot.exit.i.i1101
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_190:                            // %__internal_fmodf_kernel.exit.i1120
	setp.eq.s32 	%p31, %r349, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r350, %r347, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p133, %f485, 0f7F800000;
	@%p133 bra 	$L__BB0_192;
// %bb.191:
	mov.b32 	%r450, %f785;
	or.b32  	%r451, %r232, %r450;
	mov.b32 	%f785, %r451;
$L__BB0_192:                            // %__nv_fmodf.exit1121
	selp.f32 	%f244, %f242, %f241, %p30;
	selp.f32 	%f246, %f243, %f245, %p31;
	and.b32  	%r351, %r350, 2;
	setp.eq.f32 	%p33, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	add.f32 	%f487, %f785, %f785;
	mov.b32 	%r458, %f487;
	and.b32  	%r459, %r458, -2147483648;
	or.b32  	%r460, %r459, 1056964608;
	mov.b32 	%f488, %r460;
	add.f32 	%f489, %f487, %f488;
	cvt.rzi.f32.f32 	%f490, %f489;
	abs.f32 	%f491, %f487;
	setp.gt.f32 	%p135, %f491, 0f4B000000;
	selp.f32 	%f492, %f487, %f490, %p135;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p136, %f491, 0f3F000000;
	selp.f32 	%f494, %f493, %f492, %p136;
	cvt.rzi.s32.f32 	%r461, %f494;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	mul.f32 	%f496, %f495, %f495;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	and.b32  	%r462, %r461, 1;
	setp.eq.b32 	%p137, %r462, 1;
	selp.f32 	%f506, %f504, %f505, %p137;
	selp.f32 	%f507, %f505, %f504, %p137;
	and.b32  	%r463, %r461, 2;
	setp.eq.s32 	%p138, %r463, 0;
	neg.f32 	%f508, %f506;
	selp.f32 	%f509, %f506, %f508, %p138;
	add.s32 	%r464, %r461, 1;
	and.b32  	%r465, %r464, 2;
	mov.f32 	%f777, 0f00000000;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.f32 	%p140, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	mov.f32 	%f759, %f777;
	mov.f32 	%f760, %f777;
	@%p35 bra 	$L__BB0_90;
// %bb.75:                              // %L628
	cvt.u16.u32 	%rs15, %r3631;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p142, %f757, 0f40000000;
	@%p142 bra 	$L__BB0_87;
// %bb.76:
	setp.gtu.f32 	%p143, %f757, 0f4B800000;
	@%p143 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r45, %f757;
	and.b32  	%r467, %r45, 8388607;
	or.b32  	%r3643, %r467, 1065353216;
	mov.b32 	%f756, %r3643;
	add.s32 	%r468, %r45, -1073741824;
	and.b32  	%r3644, %r468, -8388608;
	setp.eq.s32 	%p149, %r3644, 0;
	@%p149 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i1146.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i1146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r469, %r3644, 192937984;
	add.s32 	%r470, %r3643, %r469;
	mov.b32 	%f530, %r470;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3644, %r3644, %r469;
	mov.b32 	%r3643, %f756;
	setp.ne.s32 	%p150, %r3644, 0;
	setp.ne.s32 	%p151, %r3643, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i1148
	setp.gt.u32 	%p153, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i1125
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p144, %r44, 1073741824;
	@%p144 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p145, %r44, -2147483647;
	@%p145 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p148;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p147;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i1132
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i1151
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p154, %f539, 0f7F800000;
	@%p154 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r471, %f85;
	and.b32  	%r472, %r471, -2147483648;
	mov.b32 	%r473, %f757;
	or.b32  	%r474, %r472, %r473;
	mov.b32 	%f757, %r474;
$L__BB0_89:                             // %__nv_fmodf.exit1152
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r475, %f540;
	and.b32  	%r476, %r475, -2147483648;
	or.b32  	%r477, %r476, 1056964608;
	mov.b32 	%f541, %r477;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p155, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p155;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p156, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p156;
	cvt.rzi.s32.f32 	%r478, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r479, %r478, 1;
	setp.eq.b32 	%p157, %r479, 1;
	selp.f32 	%f559, %f557, %f558, %p157;
	selp.f32 	%f560, %f558, %f557, %p157;
	and.b32  	%r480, %r478, 2;
	setp.eq.s32 	%p158, %r480, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p158;
	add.s32 	%r481, %r478, 1;
	and.b32  	%r482, %r481, 2;
	setp.eq.s32 	%p159, %r482, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p159;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p160, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f760, %f567, %f562, %p160;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p161, %f568, 0f4B800000;
	add.f32 	%f569, %f760, 0f3F800000;
	selp.f32 	%f759, %f569, %f565, %p161;
$L__BB0_90:                             // %L662
	setp.eq.s32 	%p32, %r351, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p33;
	abs.f32 	%f252, %f781;
	setp.eq.s32 	%p139, %r465, 0;
	sub.f32 	%f510, %f777, %f507;
	selp.f32 	%f514, %f513, %f509, %p140;
	abs.f32 	%f515, %f785;
	mov.f32 	%f765, %f777;
	mov.f32 	%f766, %f777;
	@%p56 bra 	$L__BB0_106;
// %bb.91:                              // %L666
	mul.hi.u32 	%r484, %r3632, -1431655765;
	shr.u32 	%r485, %r484, 5;
	mul.lo.s32 	%r486, %r485, 48;
	sub.s32 	%r487, %r3632, %r486;
	cvt.rn.f32.s32 	%f571, %r487;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p163, %f763, 0f40000000;
	@%p163 bra 	$L__BB0_103;
// %bb.92:
	setp.gtu.f32 	%p164, %f763, 0f4B800000;
	@%p164 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_93;
$L__BB0_99:
	mov.b32 	%r53, %f763;
	and.b32  	%r488, %r53, 8388607;
	or.b32  	%r3645, %r488, 1065353216;
	mov.b32 	%f762, %r3645;
	add.s32 	%r489, %r53, -1073741824;
	and.b32  	%r3646, %r489, -8388608;
	setp.eq.s32 	%p170, %r3646, 0;
	@%p170 bra 	$L__BB0_102;
// %bb.100:                             // %__nv_fmaf_rn.exit4.i.i.i1177.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_101:                            // %__nv_fmaf_rn.exit4.i.i.i1177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r490, %r3646, 192937984;
	add.s32 	%r491, %r3645, %r490;
	mov.b32 	%f583, %r491;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3646, %r3646, %r490;
	mov.b32 	%r3645, %f762;
	setp.ne.s32 	%p171, %r3646, 0;
	setp.ne.s32 	%p172, %r3645, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_101;
$L__BB0_102:                            // %__internal_fmodf_slowpath_mod.exit.i.i1179
	setp.gt.u32 	%p174, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_103;
$L__BB0_93:                             // %__nv_fast_fdividef.exit.i.i.i1156
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p165, %r52, 1073741824;
	@%p165 bra 	$L__BB0_98;
// %bb.94:
	setp.lt.u32 	%p166, %r52, -2147483647;
	@%p166 bra 	$L__BB0_96;
// %bb.95:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p169, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p169;
	bra.uni 	$L__BB0_98;
$L__BB0_96:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p167, %f109, 0f40800000;
	@%p167 bra 	$L__BB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i1160
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p168, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p168;
$L__BB0_98:                             // %__internal_fmodf_fastpath_quot.exit.i.i1163
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_103:                            // %__internal_fmodf_kernel.exit.i1182
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p175, %f592, 0f7F800000;
	@%p175 bra 	$L__BB0_105;
// %bb.104:
	mov.b32 	%r492, %f106;
	and.b32  	%r493, %r492, -2147483648;
	mov.b32 	%r494, %f763;
	or.b32  	%r495, %r493, %r494;
	mov.b32 	%f763, %r495;
$L__BB0_105:                            // %__nv_fmodf.exit1183
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r496, %f593;
	and.b32  	%r497, %r496, -2147483648;
	or.b32  	%r498, %r497, 1056964608;
	mov.b32 	%f594, %r498;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p176, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p176;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p177, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p177;
	cvt.rzi.s32.f32 	%r499, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r500, %r499, 1;
	setp.eq.b32 	%p178, %r500, 1;
	selp.f32 	%f612, %f610, %f611, %p178;
	selp.f32 	%f613, %f611, %f610, %p178;
	and.b32  	%r501, %r499, 2;
	setp.eq.s32 	%p179, %r501, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p179;
	add.s32 	%r502, %r499, 1;
	and.b32  	%r503, %r502, 2;
	setp.eq.s32 	%p180, %r503, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p180;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p181, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f766, %f620, %f615, %p181;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p182, %f621, 0f4B800000;
	add.f32 	%f622, %f766, 0f3F800000;
	selp.f32 	%f765, %f622, %f618, %p182;
$L__BB0_106:                            // %L700
	selp.f32 	%f248, %f244, %f247, %p32;
	setp.gt.f32 	%p34, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	selp.f32 	%f511, %f507, %f510, %p139;
	setp.gt.f32 	%p141, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.f32 	%f771, %f777;
	mov.f32 	%f772, %f777;
	@%p1 bra 	$L__BB0_122;
// %bb.107:                             // %L738
	cvt.u16.u32 	%rs22, %r3631;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p183, %f769, 0f40000000;
	@%p183 bra 	$L__BB0_119;
// %bb.108:
	setp.gtu.f32 	%p184, %f769, 0f4B800000;
	@%p184 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_109;
$L__BB0_115:
	mov.b32 	%r63, %f769;
	and.b32  	%r511, %r63, 8388607;
	or.b32  	%r3647, %r511, 1065353216;
	mov.b32 	%f768, %r3647;
	add.s32 	%r512, %r63, -1073741824;
	and.b32  	%r3648, %r512, -8388608;
	setp.eq.s32 	%p190, %r3648, 0;
	@%p190 bra 	$L__BB0_118;
// %bb.116:                             // %__nv_fmaf_rn.exit4.i.i.i1208.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_117:                            // %__nv_fmaf_rn.exit4.i.i.i1208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r513, %r3648, 192937984;
	add.s32 	%r514, %r3647, %r513;
	mov.b32 	%f636, %r514;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3648, %r3648, %r513;
	mov.b32 	%r3647, %f768;
	setp.ne.s32 	%p191, %r3648, 0;
	setp.ne.s32 	%p192, %r3647, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_117;
$L__BB0_118:                            // %__internal_fmodf_slowpath_mod.exit.i.i1210
	setp.gt.u32 	%p194, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_119;
$L__BB0_109:                            // %__nv_fast_fdividef.exit.i.i.i1187
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p185, %r62, 1073741824;
	@%p185 bra 	$L__BB0_114;
// %bb.110:
	setp.lt.u32 	%p186, %r62, -2147483647;
	@%p186 bra 	$L__BB0_112;
// %bb.111:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p189, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p189;
	bra.uni 	$L__BB0_114;
$L__BB0_112:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p187, %f130, 0f40800000;
	@%p187 bra 	$L__BB0_114;
// %bb.113:                             // %__nv_fmaf_rn.exit.i.i.i1191
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p188, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p188;
$L__BB0_114:                            // %__internal_fmodf_fastpath_quot.exit.i.i1194
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_119:                            // %__internal_fmodf_kernel.exit.i1213
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p195, %f645, 0f7F800000;
	@%p195 bra 	$L__BB0_121;
// %bb.120:
	mov.b32 	%r515, %f127;
	and.b32  	%r516, %r515, -2147483648;
	mov.b32 	%r517, %f769;
	or.b32  	%r518, %r516, %r517;
	mov.b32 	%f769, %r518;
$L__BB0_121:                            // %__nv_fmodf.exit1214
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r519, %f646;
	and.b32  	%r520, %r519, -2147483648;
	or.b32  	%r521, %r520, 1056964608;
	mov.b32 	%f647, %r521;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p196, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p196;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p197, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p197;
	cvt.rzi.s32.f32 	%r522, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r523, %r522, 1;
	setp.eq.b32 	%p198, %r523, 1;
	selp.f32 	%f665, %f663, %f664, %p198;
	selp.f32 	%f666, %f664, %f663, %p198;
	and.b32  	%r524, %r522, 2;
	setp.eq.s32 	%p199, %r524, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p199;
	add.s32 	%r525, %r522, 1;
	and.b32  	%r526, %r525, 2;
	setp.eq.s32 	%p200, %r526, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p200;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p201, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f772, %f673, %f668, %p201;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p202, %f674, 0f4B800000;
	add.f32 	%f675, %f772, 0f3F800000;
	selp.f32 	%f771, %f675, %f671, %p202;
$L__BB0_122:                            // %L772
	selp.f32 	%f254, %f253, %f248, %p34;
	selp.f32 	%f517, %f516, %f511, %p141;
	mov.f32 	%f778, %f777;
	@%p2 bra 	$L__BB0_138;
// %bb.123:                             // %L780
	mul.hi.u32 	%r528, %r3632, -1431655765;
	shr.u32 	%r529, %r528, 2;
	mul.lo.s32 	%r530, %r529, 6;
	sub.s32 	%r531, %r3632, %r530;
	cvt.rn.f32.s32 	%f677, %r531;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p203, %f775, 0f40000000;
	@%p203 bra 	$L__BB0_135;
// %bb.124:
	setp.gtu.f32 	%p204, %f775, 0f4B800000;
	@%p204 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_125;
$L__BB0_131:
	mov.b32 	%r71, %f775;
	and.b32  	%r532, %r71, 8388607;
	or.b32  	%r3649, %r532, 1065353216;
	mov.b32 	%f774, %r3649;
	add.s32 	%r533, %r71, -1073741824;
	and.b32  	%r3650, %r533, -8388608;
	setp.eq.s32 	%p210, %r3650, 0;
	@%p210 bra 	$L__BB0_134;
// %bb.132:                             // %__nv_fmaf_rn.exit4.i.i.i1239.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_133:                            // %__nv_fmaf_rn.exit4.i.i.i1239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r534, %r3650, 192937984;
	add.s32 	%r535, %r3649, %r534;
	mov.b32 	%f689, %r535;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3650, %r3650, %r534;
	mov.b32 	%r3649, %f774;
	setp.ne.s32 	%p211, %r3650, 0;
	setp.ne.s32 	%p212, %r3649, 0;
	and.pred  	%p213, %p211, %p212;
	@%p213 bra 	$L__BB0_133;
$L__BB0_134:                            // %__internal_fmodf_slowpath_mod.exit.i.i1241
	setp.gt.u32 	%p214, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p214;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_135;
$L__BB0_125:                            // %__nv_fast_fdividef.exit.i.i.i1218
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p205, %r70, 1073741824;
	@%p205 bra 	$L__BB0_130;
// %bb.126:
	setp.lt.u32 	%p206, %r70, -2147483647;
	@%p206 bra 	$L__BB0_128;
// %bb.127:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p209, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p209;
	bra.uni 	$L__BB0_130;
$L__BB0_128:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p207, %f151, 0f40800000;
	@%p207 bra 	$L__BB0_130;
// %bb.129:                             // %__nv_fmaf_rn.exit.i.i.i1222
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p208, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p208;
$L__BB0_130:                            // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_135:                            // %__internal_fmodf_kernel.exit.i1244
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p215, %f698, 0f7F800000;
	@%p215 bra 	$L__BB0_137;
// %bb.136:
	mov.b32 	%r536, %f148;
	and.b32  	%r537, %r536, -2147483648;
	mov.b32 	%r538, %f775;
	or.b32  	%r539, %r537, %r538;
	mov.b32 	%f775, %r539;
$L__BB0_137:                            // %__nv_fmodf.exit1245
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r540, %f699;
	and.b32  	%r541, %r540, -2147483648;
	or.b32  	%r542, %r541, 1056964608;
	mov.b32 	%f700, %r542;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p216, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p216;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p217, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p217;
	cvt.rzi.s32.f32 	%r543, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r544, %r543, 1;
	setp.eq.b32 	%p218, %r544, 1;
	selp.f32 	%f718, %f716, %f717, %p218;
	selp.f32 	%f719, %f717, %f716, %p218;
	and.b32  	%r545, %r543, 2;
	setp.eq.s32 	%p219, %r545, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p219;
	add.s32 	%r546, %r543, 1;
	and.b32  	%r547, %r546, 2;
	setp.eq.s32 	%p220, %r547, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p220;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p221, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f778, %f726, %f721, %p221;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p222, %f727, 0f4B800000;
	add.f32 	%f728, %f778, 0f3F800000;
	selp.f32 	%f777, %f728, %f724, %p222;
$L__BB0_138:                            // %L814
	mov.b32 	%r340, %f254;
	mov.b32 	%r343, %f251;
	mov.b32 	%r435, %f747;
	mov.b32 	%r436, %f753;
	mov.b32 	%r441, %f748;
	mov.b32 	%r442, %f754;
	mov.b32 	%r454, %f517;
	mov.b32 	%r457, %f514;
	mov.b32 	%r549, %f771;
	mov.b32 	%r550, %f777;
	mov.b32 	%r555, %f772;
	mov.b32 	%r556, %f778;
	mov.u32 	%r3738, 999999999;
	cvt.u16.u32 	%rs247, %r2;
	@%p78 bra 	$L__BB0_140;
// %bb.139:                             // %L850
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b16  	%rs30, %rs247, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs247, %rs33;
	cvt.u32.u16 	%r561, %rs34;
	and.b32  	%r562, %r561, 255;
	mad.lo.s32 	%r563, %r562, 24, %r3;
	cvt.u16.u32 	%rs35, %r563;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r564, %rs39;
	mul.wide.u32 	%rd48, %r564, 4;
	add.s64 	%rd49, %rd1, %rd48;
	ld.global.u32 	%r565, [%rd49];
	cvt.s32.s16 	%r566, %r565;
	shr.s32 	%r567, %r565, 16;
	mul.lo.s32 	%r568, %r567, 801;
	mad.lo.s32 	%r3738, %r566, 33, %r568;
$L__BB0_140:                            // %pass400
	xor.b32  	%r339, %r343, -2147483648;
	mov.b32 	%r391, %f735;
	mov.b32 	%r392, %f741;
	mov.b32 	%r394, %f736;
	mov.b32 	%r395, %f742;
	xor.b32  	%r438, %r441, -2147483648;
	xor.b32  	%r439, %r442, -2147483648;
	xor.b32  	%r453, %r457, -2147483648;
	mov.b32 	%r505, %f759;
	mov.b32 	%r506, %f765;
	mov.b32 	%r508, %f760;
	mov.b32 	%r509, %f766;
	xor.b32  	%r552, %r555, -2147483648;
	xor.b32  	%r553, %r556, -2147483648;
	and.b32  	%r569, %r2, 24;
	setp.ne.s32 	%p224, %r569, 24;
	cvt.u16.u32 	%rs248, %r223;
	mul.lo.s32 	%r3651, %r1, 1152;
	@%p224 bra 	$L__BB0_141;
// %bb.193:                             // %pass400.L1184_crit_edge
	mul.lo.s16 	%rs47, %rs248, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs248, %rs49;
	cvt.u32.u16 	%r581, %rs50;
	and.b32  	%r3652, %r581, 255;
	mov.u32 	%r3653, 0;
	mov.u32 	%r3654, %r3653;
	bra.uni 	$L__BB0_142;
$L__BB0_141:                            // %pass437
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mul.lo.s32 	%r570, %r222, 144;
	mul.lo.s16 	%rs41, %rs248, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs248, %rs43;
	cvt.u32.u16 	%r571, %rs44;
	and.b32  	%r3652, %r571, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r572, %rs45, 24;
	or.b32  	%r573, %r3651, %r3;
	add.s32 	%r574, %r573, %r570;
	add.s32 	%r575, %r574, %r572;
	mul.wide.u32 	%rd50, %r575, 4;
	add.s64 	%rd51, %rd2, %rd50;
	ld.global.u32 	%r3653, [%rd51];
	or.b32  	%r576, %r3, 576;
	add.s32 	%r577, %r576, %r3651;
	add.s32 	%r578, %r577, %r570;
	add.s32 	%r579, %r578, %r572;
	mul.wide.u32 	%rd52, %r579, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.u32 	%r3654, [%rd53];
$L__BB0_142:                            // %L1184
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r338, %r340, %r339;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r341, %r343, %r340;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r390, %r392, %r391;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r393, %r395, %r394;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r436, %r435;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r437, %r439, %r438;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r440, %r442, %r441;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r443, %r436, %r435;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r452, %r454, %r453;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r455, %r457, %r454;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r504, %r506, %r505;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r509, %r508;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r548, %r550, %r549;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r551, %r553, %r552;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r554, %r556, %r555;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r557, %r550, %r549;
	// end inline asm
	mov.u32 	%r3655, 0;
	shl.b32 	%r87, %r313, 18;
	shl.b32 	%r583, %r2, 3;
	and.b32  	%r88, %r583, 128;
	shl.b32 	%r584, %r2, 2;
	and.b32  	%r89, %r584, 60;
	shl.b32 	%r90, %r1, 8;
	or.b32  	%r585, %r584, %r90;
	or.b32  	%r91, %r585, 64;
	add.s32 	%r92, %r3, 24;
	and.b32  	%r586, %r235, 30;
	shr.u32 	%r587, %r2, 4;
	or.b32  	%r588, %r586, %r587;
	mul.lo.s32 	%r93, %r588, 257;
	or.b32  	%r589, %r587, %r235;
	or.b32  	%r590, %r589, 32;
	mul.lo.s32 	%r94, %r590, 257;
	and.b32  	%r591, %r4, 224;
	and.b16  	%rs52, %rs247, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs247, %rs55;
	cvt.u32.u16 	%r592, %rs56;
	and.b32  	%r95, %r592, 255;
	shr.u32 	%r593, %r3, 3;
	mad.lo.s32 	%r96, %r593, 257, %r591;
	shr.u32 	%r594, %r92, 3;
	mad.lo.s32 	%r97, %r594, 257, %r591;
	add.s32 	%r595, %r3, 48;
	shr.u32 	%r596, %r595, 3;
	mad.lo.s32 	%r98, %r596, 257, %r591;
	add.s32 	%r597, %r3, 72;
	shr.u32 	%r598, %r597, 3;
	mad.lo.s32 	%r99, %r598, 257, %r591;
	or.b32  	%r599, %r593, 12;
	mad.lo.s32 	%r100, %r599, 257, %r591;
	add.s32 	%r600, %r3, 120;
	shr.u32 	%r601, %r600, 3;
	mad.lo.s32 	%r101, %r601, 257, %r591;
	add.s32 	%r602, %r3, 144;
	shr.u32 	%r603, %r602, 3;
	mad.lo.s32 	%r102, %r603, 257, %r591;
	add.s32 	%r604, %r3, 168;
	shr.u32 	%r605, %r604, 3;
	mad.lo.s32 	%r103, %r605, 257, %r591;
	or.b32  	%r606, %r593, 24;
	mad.lo.s32 	%r104, %r606, 257, %r591;
	add.s32 	%r607, %r3, 216;
	shr.u32 	%r608, %r607, 3;
	mad.lo.s32 	%r105, %r608, 257, %r591;
	add.s32 	%r609, %r3, 240;
	shr.u32 	%r610, %r609, 3;
	mad.lo.s32 	%r106, %r610, 257, %r591;
	add.s32 	%r611, %r3, 264;
	shr.u32 	%r612, %r611, 3;
	mad.lo.s32 	%r107, %r612, 257, %r591;
	or.b32  	%r613, %r593, 36;
	mad.lo.s32 	%r108, %r613, 257, %r591;
	add.s32 	%r614, %r3, 312;
	shr.u32 	%r615, %r614, 3;
	mad.lo.s32 	%r109, %r615, 257, %r591;
	add.s32 	%r616, %r3, 336;
	shr.u32 	%r617, %r616, 3;
	mad.lo.s32 	%r110, %r617, 257, %r591;
	add.s32 	%r618, %r3, 360;
	shr.u32 	%r619, %r618, 3;
	mad.lo.s32 	%r111, %r619, 257, %r591;
	or.b32  	%r620, %r593, 48;
	mad.lo.s32 	%r112, %r620, 257, %r591;
	add.s32 	%r621, %r3, 408;
	shr.u32 	%r622, %r621, 3;
	mad.lo.s32 	%r113, %r622, 257, %r591;
	add.s32 	%r623, %r3, 432;
	shr.u32 	%r624, %r623, 3;
	mad.lo.s32 	%r114, %r624, 257, %r591;
	add.s32 	%r625, %r3, 456;
	shr.u32 	%r626, %r625, 3;
	mad.lo.s32 	%r115, %r626, 257, %r591;
	or.b32  	%r627, %r593, 60;
	mad.lo.s32 	%r116, %r627, 257, %r591;
	add.s32 	%r628, %r3, 504;
	bfe.u32 	%r629, %r628, 3, 6;
	mad.lo.s32 	%r117, %r629, 257, %r591;
	mul.lo.s32 	%r630, %r3, 33;
	mad.lo.s32 	%r631, %r222, 4806, %r630;
	mad.lo.s32 	%r632, %r3652, 801, %r631;
	bfe.s32 	%r633, %r2, 3, 1;
	and.b32  	%r634, %r633, 514;
	and.b32  	%r635, %r2, 1;
	neg.s32 	%r636, %r635;
	and.b32  	%r637, %r636, 4112;
	bfe.s32 	%r638, %r2, 1, 1;
	and.b32  	%r639, %r638, 2056;
	bfe.s32 	%r640, %r2, 2, 1;
	and.b32  	%r641, %r640, 1028;
	mul.lo.s32 	%r642, %r587, 257;
	add.s32 	%r643, %r642, %r3;
	add.s32 	%r644, %r643, %r634;
	add.s32 	%r645, %r644, %r637;
	add.s32 	%r646, %r645, %r639;
	add.s32 	%r647, %r646, %r641;
	mul.wide.u32 	%rd54, %r647, 4;
	mov.u64 	%rd55, shmem;
	add.s64 	%rd6, %rd55, %rd54;
	or.b32  	%r648, %r3, 8256;
	add.s32 	%r649, %r648, %r642;
	add.s32 	%r650, %r649, %r634;
	add.s32 	%r651, %r650, %r637;
	add.s32 	%r652, %r651, %r639;
	add.s32 	%r653, %r652, %r641;
	mul.wide.u32 	%rd56, %r653, 4;
	add.s64 	%rd7, %rd55, %rd56;
	or.b32  	%r654, %r3, 32;
	add.s32 	%r655, %r654, %r642;
	add.s32 	%r656, %r655, %r634;
	add.s32 	%r657, %r656, %r637;
	add.s32 	%r658, %r657, %r639;
	add.s32 	%r659, %r658, %r641;
	mul.wide.u32 	%rd57, %r659, 4;
	add.s64 	%rd8, %rd55, %rd57;
	or.b32  	%r660, %r3, 8288;
	add.s32 	%r661, %r660, %r642;
	add.s32 	%r662, %r661, %r634;
	add.s32 	%r663, %r662, %r637;
	add.s32 	%r664, %r663, %r639;
	add.s32 	%r665, %r664, %r641;
	mul.wide.u32 	%rd58, %r665, 4;
	add.s64 	%rd9, %rd55, %rd58;
	mul.lo.s32 	%r666, %r222, 6;
	shr.u32 	%r667, %r3, 4;
	bfe.s32 	%r668, %r3, 1, 1;
	and.b32  	%r669, %r668, 4112;
	bfe.s32 	%r670, %r3, 2, 1;
	and.b32  	%r671, %r670, 2056;
	and.b32  	%r672, %r3, 1;
	neg.s32 	%r673, %r672;
	and.b32  	%r674, %r673, 8256;
	bfe.s32 	%r675, %r3, 3, 1;
	and.b32  	%r676, %r3, 8;
	setp.eq.s32 	%p225, %r676, 0;
	and.b32  	%r677, %r675, 1028;
	mad.lo.s32 	%r678, %r667, 514, %r666;
	add.s32 	%r679, %r678, %r669;
	add.s32 	%r680, %r679, %r671;
	add.s32 	%r681, %r680, %r677;
	add.s32 	%r682, %r681, %r674;
	add.s32 	%r683, %r682, %r3652;
	mul.wide.u32 	%rd59, %r683, 4;
	add.s64 	%rd10, %rd55, %rd59;
	bfe.s32 	%r684, %r92, 4, 1;
	and.b32  	%r685, %r684, 514;
	selp.b32 	%r686, 1028, 0, %p225;
	shr.u32 	%r687, %r92, 5;
	add.s32 	%r688, %r669, %r666;
	add.s32 	%r689, %r688, %r671;
	add.s32 	%r690, %r689, %r686;
	add.s32 	%r691, %r690, %r674;
	mad.lo.s32 	%r692, %r687, 257, %r691;
	add.s32 	%r693, %r692, %r685;
	add.s32 	%r694, %r693, %r3652;
	mul.wide.u32 	%rd60, %r694, 4;
	add.s64 	%rd11, %rd55, %rd60;
	add.s32 	%r695, %r683, 32;
	mul.wide.u32 	%rd61, %r695, 4;
	add.s64 	%rd12, %rd55, %rd61;
	add.s32 	%r696, %r694, 32;
	mul.wide.u32 	%rd62, %r696, 4;
	add.s64 	%rd13, %rd55, %rd62;
	mul.lo.s32 	%r697, %r315, 1179648;
	mad.lo.s32 	%r698, %r3, 24, %r3651;
	add.s32 	%r118, %r698, %r95;
	cvt.s64.s32 	%rd14, %r697;
	cvt.u16.u32 	%rs57, %r92;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r699, %rs62;
	and.b32  	%r700, %r699, 255;
	or.b32  	%r701, %r3651, %r95;
	mad.lo.s32 	%r119, %r700, 24, %r701;
	mul.wide.u32 	%rd63, %r632, 4;
	add.s64 	%rd15, %rd55, %rd63;
	add.s32 	%r702, %r647, 64;
	mul.wide.u32 	%rd64, %r702, 4;
	add.s64 	%rd16, %rd55, %rd64;
	add.s32 	%r703, %r653, 64;
	mul.wide.u32 	%rd65, %r703, 4;
	add.s64 	%rd17, %rd55, %rd65;
	add.s32 	%r704, %r659, 64;
	mul.wide.u32 	%rd66, %r704, 4;
	add.s64 	%rd18, %rd55, %rd66;
	add.s32 	%r705, %r665, 64;
	mul.wide.u32 	%rd67, %r705, 4;
	add.s64 	%rd19, %rd55, %rd67;
	add.s32 	%r706, %r647, 128;
	mul.wide.u32 	%rd68, %r706, 4;
	add.s64 	%rd20, %rd55, %rd68;
	add.s32 	%r707, %r653, 128;
	mul.wide.u32 	%rd69, %r707, 4;
	add.s64 	%rd21, %rd55, %rd69;
	add.s32 	%r708, %r659, 128;
	mul.wide.u32 	%rd70, %r708, 4;
	add.s64 	%rd22, %rd55, %rd70;
	add.s32 	%r709, %r665, 128;
	mul.wide.u32 	%rd71, %r709, 4;
	add.s64 	%rd23, %rd55, %rd71;
	add.s32 	%r710, %r647, 192;
	mul.wide.u32 	%rd72, %r710, 4;
	add.s64 	%rd24, %rd55, %rd72;
	add.s32 	%r711, %r653, 192;
	mul.wide.u32 	%rd73, %r711, 4;
	add.s64 	%rd25, %rd55, %rd73;
	add.s32 	%r712, %r659, 192;
	mul.wide.u32 	%rd74, %r712, 4;
	add.s64 	%rd26, %rd55, %rd74;
	add.s32 	%r713, %r665, 192;
	mul.wide.u32 	%rd75, %r713, 4;
	add.s64 	%rd27, %rd55, %rd75;
	add.s32 	%r714, %r683, 64;
	mul.wide.u32 	%rd76, %r714, 4;
	add.s64 	%rd28, %rd55, %rd76;
	add.s32 	%r715, %r694, 64;
	mul.wide.u32 	%rd77, %r715, 4;
	add.s64 	%rd29, %rd55, %rd77;
	add.s32 	%r716, %r683, 96;
	mul.wide.u32 	%rd78, %r716, 4;
	add.s64 	%rd30, %rd55, %rd78;
	add.s32 	%r717, %r694, 96;
	mul.wide.u32 	%rd79, %r717, 4;
	add.s64 	%rd31, %rd55, %rd79;
	add.s32 	%r718, %r683, 128;
	mul.wide.u32 	%rd80, %r718, 4;
	add.s64 	%rd32, %rd55, %rd80;
	add.s32 	%r719, %r694, 128;
	mul.wide.u32 	%rd81, %r719, 4;
	add.s64 	%rd33, %rd55, %rd81;
	add.s32 	%r720, %r683, 160;
	mul.wide.u32 	%rd82, %r720, 4;
	add.s64 	%rd34, %rd55, %rd82;
	add.s32 	%r721, %r694, 160;
	mul.wide.u32 	%rd83, %r721, 4;
	add.s64 	%rd35, %rd55, %rd83;
	add.s32 	%r722, %r683, 192;
	mul.wide.u32 	%rd84, %r722, 4;
	add.s64 	%rd36, %rd55, %rd84;
	add.s32 	%r723, %r694, 192;
	mul.wide.u32 	%rd85, %r723, 4;
	add.s64 	%rd37, %rd55, %rd85;
	add.s32 	%r724, %r683, 224;
	mul.wide.u32 	%rd86, %r724, 4;
	add.s64 	%rd38, %rd55, %rd86;
	add.s32 	%r725, %r694, 224;
	mul.wide.u32 	%rd87, %r725, 4;
	add.s64 	%rd39, %rd55, %rd87;
	setp.gt.u32 	%p227, %r3, 7;
	setp.lt.u32 	%p228, %r2, 16;
	setp.lt.u32 	%p236, %r2, 24;
	mov.u32 	%r3685, %r3655;
	mov.u32 	%r3686, %r3655;
	mov.u32 	%r3687, %r3655;
	mov.u32 	%r3688, %r3655;
	bra.uni 	$L__BB0_143;
$L__BB0_165:                            // %L30549
                                        //   in Loop: Header=BB0_143 Depth=1
	add.s32 	%r221, %r3655, 48;
	setp.ne.s32 	%p274, %r3655, 1968;
	mov.u32 	%r3655, %r221;
	@%p274 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_166;
$L__BB0_143:                            // %L1187
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_146 Depth 2
                                        //     Child Loop BB0_156 Depth 2
	add.s32 	%r726, %r3655, %r313;
	setp.lt.s32 	%p226, %r726, %r314;
	@%p226 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_166;
$L__BB0_144:                            // %oksrem576
                                        //   in Loop: Header=BB0_143 Depth=1
	mul.hi.u32 	%r920, %r3655, -1431655765;
	shr.u32 	%r921, %r920, 5;
	mul.lo.s32 	%r255, %r921, 48;
	add.s32 	%r922, %r255, %r3;
	cvt.u16.u32 	%rs63, %r922;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 5;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, 14336;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r923, %rs68;
	shl.b32 	%r924, %r923, 18;
	or.b32  	%r925, %r924, %r88;
	or.b32  	%r926, %r925, %r89;
	or.b32  	%r927, %r926, %r90;
	add.s32 	%r928, %r927, %r87;
	shr.s32 	%r929, %r928, 31;
	shr.u32 	%r930, %r929, 3;
	add.s32 	%r931, %r928, %r930;
	shr.s32 	%r932, %r931, 29;
	setp.lt.s32 	%p230, %r928, 0;
	and.b32  	%r933, %r931, -536870912;
	setp.ne.s32 	%p231, %r933, %r928;
	and.pred  	%p232, %p230, %p231;
	selp.u32 	%r934, 1, 0, %p232;
	sub.s32 	%r935, %r934, %r932;
	shl.b32 	%r936, %r935, 29;
	add.s32 	%r937, %r936, %r928;
	mul.wide.s32 	%rd88, %r937, 4;
	add.s64 	%rd89, %rd3, %rd88;
	ld.global.v4.u32 	{%r938, %r939, %r940, %r941}, [%rd89];
	or.b32  	%r942, %r91, %r925;
	add.s32 	%r943, %r942, %r87;
	shr.s32 	%r944, %r943, 31;
	shr.u32 	%r945, %r944, 3;
	add.s32 	%r946, %r943, %r945;
	shr.u32 	%r947, %r946, 29;
	shr.u32 	%r948, %r943, 31;
	sub.s32 	%r949, %r948, %r947;
	shl.b32 	%r950, %r949, 29;
	add.s32 	%r951, %r950, %r943;
	mul.wide.s32 	%rd90, %r951, 4;
	add.s64 	%rd91, %rd3, %rd90;
	ld.global.v4.u32 	{%r952, %r953, %r954, %r955}, [%rd91];
	add.s32 	%r956, %r92, %r255;
	cvt.u16.u32 	%rs69, %r956;
	shr.s16 	%rs70, %rs69, 15;
	shr.u16 	%rs71, %rs70, 5;
	add.s16 	%rs72, %rs69, %rs71;
	and.b16  	%rs73, %rs72, 14336;
	sub.s16 	%rs74, %rs69, %rs73;
	cvt.u32.u16 	%r957, %rs74;
	shl.b32 	%r958, %r957, 18;
	or.b32  	%r959, %r958, %r88;
	or.b32  	%r960, %r959, %r89;
	or.b32  	%r961, %r960, %r90;
	add.s32 	%r962, %r961, %r87;
	shr.s32 	%r963, %r962, 31;
	shr.u32 	%r964, %r963, 3;
	add.s32 	%r965, %r962, %r964;
	shr.s32 	%r966, %r965, 29;
	setp.lt.s32 	%p233, %r962, 0;
	and.b32  	%r967, %r965, -536870912;
	setp.ne.s32 	%p234, %r967, %r962;
	and.pred  	%p235, %p233, %p234;
	selp.u32 	%r968, 1, 0, %p235;
	sub.s32 	%r969, %r968, %r966;
	shl.b32 	%r970, %r969, 29;
	add.s32 	%r971, %r970, %r962;
	mul.wide.s32 	%rd92, %r971, 4;
	add.s64 	%rd93, %rd3, %rd92;
	ld.global.v4.u32 	{%r972, %r973, %r974, %r975}, [%rd93];
	or.b32  	%r976, %r91, %r959;
	add.s32 	%r977, %r976, %r87;
	shr.s32 	%r978, %r977, 31;
	shr.u32 	%r979, %r978, 3;
	add.s32 	%r980, %r977, %r979;
	shr.u32 	%r981, %r980, 29;
	shr.u32 	%r982, %r977, 31;
	sub.s32 	%r983, %r982, %r981;
	shl.b32 	%r984, %r983, 29;
	add.s32 	%r985, %r984, %r977;
	mul.wide.s32 	%rd94, %r985, 4;
	add.s64 	%rd95, %rd3, %rd94;
	ld.global.v4.u32 	{%r986, %r987, %r988, %r989}, [%rd95];
	selp.b32 	%r990, %r940, %r938, %p228;
	shfl.sync.bfly.b32	%r991, %r990, 16, 31, -1;
	selp.b32 	%r729, %r938, %r991, %p228;
	selp.b32 	%r734, %r991, %r940, %p228;
	selp.b32 	%r992, %r941, %r939, %p228;
	shfl.sync.bfly.b32	%r993, %r992, 16, 31, -1;
	selp.b32 	%r737, %r939, %r993, %p228;
	selp.b32 	%r742, %r993, %r941, %p228;
	selp.b32 	%r994, %r954, %r952, %p228;
	shfl.sync.bfly.b32	%r995, %r994, 16, 31, -1;
	selp.b32 	%r745, %r952, %r995, %p228;
	selp.b32 	%r750, %r995, %r954, %p228;
	selp.b32 	%r996, %r955, %r953, %p228;
	shfl.sync.bfly.b32	%r997, %r996, 16, 31, -1;
	selp.b32 	%r753, %r953, %r997, %p228;
	selp.b32 	%r758, %r997, %r955, %p228;
	selp.b32 	%r998, %r974, %r972, %p228;
	shfl.sync.bfly.b32	%r999, %r998, 16, 31, -1;
	selp.b32 	%r761, %r972, %r999, %p228;
	selp.b32 	%r766, %r999, %r974, %p228;
	selp.b32 	%r1000, %r975, %r973, %p228;
	shfl.sync.bfly.b32	%r1001, %r1000, 16, 31, -1;
	selp.b32 	%r769, %r973, %r1001, %p228;
	selp.b32 	%r774, %r1001, %r975, %p228;
	selp.b32 	%r1002, %r988, %r986, %p228;
	shfl.sync.bfly.b32	%r1003, %r1002, 16, 31, -1;
	selp.b32 	%r777, %r986, %r1003, %p228;
	selp.b32 	%r782, %r1003, %r988, %p228;
	selp.b32 	%r1004, %r989, %r987, %p228;
	shfl.sync.bfly.b32	%r1005, %r1004, 16, 31, -1;
	selp.b32 	%r785, %r987, %r1005, %p228;
	selp.b32 	%r790, %r1005, %r989, %p228;
	shl.b32 	%r730, %r734, 4;
	mov.u32 	%r728, 252645135;
	// begin inline asm
	lop3.b32 %r792, %r728, %r729, %r730, 202;
	// end inline asm
	shr.u32 	%r733, %r729, 4;
	// begin inline asm
	lop3.b32 %r808, %r728, %r733, %r734, 202;
	// end inline asm
	shl.b32 	%r738, %r742, 4;
	// begin inline asm
	lop3.b32 %r800, %r728, %r737, %r738, 202;
	// end inline asm
	shr.u32 	%r741, %r737, 4;
	// begin inline asm
	lop3.b32 %r816, %r728, %r741, %r742, 202;
	// end inline asm
	shl.b32 	%r746, %r750, 4;
	// begin inline asm
	lop3.b32 %r824, %r728, %r745, %r746, 202;
	// end inline asm
	shr.u32 	%r749, %r745, 4;
	// begin inline asm
	lop3.b32 %r840, %r728, %r749, %r750, 202;
	// end inline asm
	shl.b32 	%r754, %r758, 4;
	// begin inline asm
	lop3.b32 %r832, %r728, %r753, %r754, 202;
	// end inline asm
	shr.u32 	%r757, %r753, 4;
	// begin inline asm
	lop3.b32 %r848, %r728, %r757, %r758, 202;
	// end inline asm
	shl.b32 	%r762, %r766, 4;
	// begin inline asm
	lop3.b32 %r793, %r728, %r761, %r762, 202;
	// end inline asm
	shr.u32 	%r765, %r761, 4;
	// begin inline asm
	lop3.b32 %r809, %r728, %r765, %r766, 202;
	// end inline asm
	shl.b32 	%r770, %r774, 4;
	// begin inline asm
	lop3.b32 %r801, %r728, %r769, %r770, 202;
	// end inline asm
	shr.u32 	%r773, %r769, 4;
	// begin inline asm
	lop3.b32 %r817, %r728, %r773, %r774, 202;
	// end inline asm
	shl.b32 	%r778, %r782, 4;
	// begin inline asm
	lop3.b32 %r825, %r728, %r777, %r778, 202;
	// end inline asm
	shr.u32 	%r781, %r777, 4;
	// begin inline asm
	lop3.b32 %r841, %r728, %r781, %r782, 202;
	// end inline asm
	shl.b32 	%r786, %r790, 4;
	// begin inline asm
	lop3.b32 %r833, %r728, %r785, %r786, 202;
	// end inline asm
	shr.u32 	%r789, %r785, 4;
	// begin inline asm
	lop3.b32 %r849, %r728, %r789, %r790, 202;
	// end inline asm
	mov.u32 	%r794, 25152;
	// begin inline asm
	prmt.b32 %r856, %r792, %r793, %r794;
	// end inline asm
	mov.u32 	%r798, 29521;
	// begin inline asm
	prmt.b32 %r888, %r792, %r793, %r798;
	// end inline asm
	// begin inline asm
	prmt.b32 %r864, %r800, %r801, %r794;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r800, %r801, %r798;
	// end inline asm
	// begin inline asm
	prmt.b32 %r857, %r808, %r809, %r794;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r808, %r809, %r798;
	// end inline asm
	// begin inline asm
	prmt.b32 %r865, %r816, %r817, %r794;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r816, %r817, %r798;
	// end inline asm
	// begin inline asm
	prmt.b32 %r872, %r824, %r825, %r794;
	// end inline asm
	// begin inline asm
	prmt.b32 %r904, %r824, %r825, %r798;
	// end inline asm
	// begin inline asm
	prmt.b32 %r880, %r832, %r833, %r794;
	// end inline asm
	// begin inline asm
	prmt.b32 %r912, %r832, %r833, %r798;
	// end inline asm
	// begin inline asm
	prmt.b32 %r873, %r840, %r841, %r794;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r840, %r841, %r798;
	// end inline asm
	// begin inline asm
	prmt.b32 %r881, %r848, %r849, %r794;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r848, %r849, %r798;
	// end inline asm
	mov.u32 	%r914, 21520;
	// begin inline asm
	prmt.b32 %r855, %r856, %r857, %r914;
	// end inline asm
	mov.u32 	%r918, 30258;
	// begin inline asm
	prmt.b32 %r859, %r856, %r857, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r863, %r864, %r865, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r867, %r864, %r865, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r872, %r873, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r875, %r872, %r873, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r880, %r881, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r883, %r880, %r881, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r888, %r889, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r891, %r888, %r889, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r896, %r897, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r899, %r896, %r897, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r904, %r905, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r907, %r904, %r905, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r911, %r912, %r913, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r915, %r912, %r913, %r918;
	// end inline asm
	mul.hi.s16 	%rs75, %rs63, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs63, %rs79;
	cvt.s32.s16 	%r1006, %rs80;
	add.s32 	%r1007, %r93, %r1006;
	mul.wide.s32 	%rd96, %r1007, 4;
	add.s64 	%rd98, %rd55, %rd96;
	st.shared.u32 	[%rd98], %r855;
	add.s32 	%r1008, %r1007, 128;
	mul.wide.u32 	%rd99, %r1008, 4;
	add.s64 	%rd100, %rd55, %rd99;
	st.shared.u32 	[%rd100], %r863;
	add.s32 	%r1009, %r1007, 64;
	mul.wide.u32 	%rd101, %r1009, 4;
	add.s64 	%rd102, %rd55, %rd101;
	st.shared.u32 	[%rd102], %r859;
	add.s32 	%r1010, %r1007, 192;
	mul.wide.u32 	%rd103, %r1010, 4;
	add.s64 	%rd104, %rd55, %rd103;
	st.shared.u32 	[%rd104], %r867;
	add.s32 	%r1011, %r94, %r1006;
	mul.wide.u32 	%rd105, %r1011, 4;
	add.s64 	%rd106, %rd55, %rd105;
	st.shared.u32 	[%rd106], %r871;
	add.s32 	%r1012, %r1011, 128;
	mul.wide.u32 	%rd107, %r1012, 4;
	add.s64 	%rd108, %rd55, %rd107;
	st.shared.u32 	[%rd108], %r879;
	add.s32 	%r1013, %r1011, 64;
	mul.wide.u32 	%rd109, %r1013, 4;
	add.s64 	%rd110, %rd55, %rd109;
	st.shared.u32 	[%rd110], %r875;
	add.s32 	%r1014, %r1011, 192;
	mul.wide.u32 	%rd111, %r1014, 4;
	add.s64 	%rd112, %rd55, %rd111;
	st.shared.u32 	[%rd112], %r883;
	add.s32 	%r1015, %r1007, 32;
	mul.wide.u32 	%rd113, %r1015, 4;
	add.s64 	%rd114, %rd55, %rd113;
	st.shared.u32 	[%rd114], %r887;
	add.s32 	%r1016, %r1007, 160;
	mul.wide.u32 	%rd115, %r1016, 4;
	add.s64 	%rd116, %rd55, %rd115;
	st.shared.u32 	[%rd116], %r895;
	add.s32 	%r1017, %r1007, 96;
	mul.wide.u32 	%rd117, %r1017, 4;
	add.s64 	%rd118, %rd55, %rd117;
	st.shared.u32 	[%rd118], %r891;
	add.s32 	%r1018, %r1007, 224;
	mul.wide.u32 	%rd119, %r1018, 4;
	add.s64 	%rd120, %rd55, %rd119;
	st.shared.u32 	[%rd120], %r899;
	add.s32 	%r1019, %r1011, 32;
	mul.wide.u32 	%rd121, %r1019, 4;
	add.s64 	%rd122, %rd55, %rd121;
	st.shared.u32 	[%rd122], %r903;
	add.s32 	%r1020, %r1011, 160;
	mul.wide.u32 	%rd123, %r1020, 4;
	add.s64 	%rd124, %rd55, %rd123;
	st.shared.u32 	[%rd124], %r911;
	add.s32 	%r1021, %r1011, 96;
	mul.wide.u32 	%rd125, %r1021, 4;
	add.s64 	%rd126, %rd55, %rd125;
	st.shared.u32 	[%rd126], %r907;
	add.s32 	%r1022, %r1011, 224;
	mul.wide.u32 	%rd127, %r1022, 4;
	add.s64 	%rd128, %rd55, %rd127;
	st.shared.u32 	[%rd128], %r915;
	bar.sync 	0;
	add.s32 	%r1023, %r255, %r95;
	cvt.u16.u32 	%rs81, %r1023;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r1024, %rs87;
	add.s32 	%r1025, %r96, %r1024;
	mul.wide.s32 	%rd129, %r1025, 4;
	add.s64 	%rd130, %rd55, %rd129;
	ld.shared.u32 	%r1026, [%rd130];
	add.s32 	%r1027, %r97, %r1024;
	mul.wide.u32 	%rd131, %r1027, 4;
	add.s64 	%rd132, %rd55, %rd131;
	ld.shared.u32 	%r1028, [%rd132];
	add.s32 	%r1029, %r98, %r1024;
	mul.wide.u32 	%rd133, %r1029, 4;
	add.s64 	%rd134, %rd55, %rd133;
	ld.shared.u32 	%r1030, [%rd134];
	add.s32 	%r1031, %r99, %r1024;
	mul.wide.u32 	%rd135, %r1031, 4;
	add.s64 	%rd136, %rd55, %rd135;
	ld.shared.u32 	%r1032, [%rd136];
	add.s32 	%r1033, %r100, %r1024;
	mul.wide.u32 	%rd137, %r1033, 4;
	add.s64 	%rd138, %rd55, %rd137;
	ld.shared.u32 	%r1034, [%rd138];
	add.s32 	%r1035, %r101, %r1024;
	mul.wide.u32 	%rd139, %r1035, 4;
	add.s64 	%rd140, %rd55, %rd139;
	ld.shared.u32 	%r1036, [%rd140];
	add.s32 	%r1037, %r102, %r1024;
	mul.wide.u32 	%rd141, %r1037, 4;
	add.s64 	%rd142, %rd55, %rd141;
	ld.shared.u32 	%r1038, [%rd142];
	add.s32 	%r1039, %r103, %r1024;
	mul.wide.u32 	%rd143, %r1039, 4;
	add.s64 	%rd144, %rd55, %rd143;
	ld.shared.u32 	%r1040, [%rd144];
	add.s32 	%r1041, %r104, %r1024;
	mul.wide.u32 	%rd145, %r1041, 4;
	add.s64 	%rd146, %rd55, %rd145;
	ld.shared.u32 	%r1042, [%rd146];
	add.s32 	%r1043, %r105, %r1024;
	mul.wide.u32 	%rd147, %r1043, 4;
	add.s64 	%rd148, %rd55, %rd147;
	ld.shared.u32 	%r1044, [%rd148];
	add.s32 	%r1045, %r106, %r1024;
	mul.wide.u32 	%rd149, %r1045, 4;
	add.s64 	%rd150, %rd55, %rd149;
	ld.shared.u32 	%r1046, [%rd150];
	add.s32 	%r1047, %r107, %r1024;
	mul.wide.u32 	%rd151, %r1047, 4;
	add.s64 	%rd152, %rd55, %rd151;
	ld.shared.u32 	%r1048, [%rd152];
	add.s32 	%r1049, %r108, %r1024;
	mul.wide.u32 	%rd153, %r1049, 4;
	add.s64 	%rd154, %rd55, %rd153;
	ld.shared.u32 	%r1050, [%rd154];
	add.s32 	%r1051, %r109, %r1024;
	mul.wide.u32 	%rd155, %r1051, 4;
	add.s64 	%rd156, %rd55, %rd155;
	ld.shared.u32 	%r1052, [%rd156];
	add.s32 	%r1053, %r110, %r1024;
	mul.wide.u32 	%rd157, %r1053, 4;
	add.s64 	%rd158, %rd55, %rd157;
	ld.shared.u32 	%r1054, [%rd158];
	add.s32 	%r1055, %r111, %r1024;
	mul.wide.u32 	%rd159, %r1055, 4;
	add.s64 	%rd160, %rd55, %rd159;
	ld.shared.u32 	%r1056, [%rd160];
	add.s32 	%r1057, %r112, %r1024;
	mul.wide.u32 	%rd161, %r1057, 4;
	add.s64 	%rd162, %rd55, %rd161;
	ld.shared.u32 	%r1058, [%rd162];
	add.s32 	%r1059, %r113, %r1024;
	mul.wide.u32 	%rd163, %r1059, 4;
	add.s64 	%rd164, %rd55, %rd163;
	ld.shared.u32 	%r1060, [%rd164];
	add.s32 	%r1061, %r114, %r1024;
	mul.wide.u32 	%rd165, %r1061, 4;
	add.s64 	%rd166, %rd55, %rd165;
	ld.shared.u32 	%r1062, [%rd166];
	add.s32 	%r1063, %r115, %r1024;
	mul.wide.u32 	%rd167, %r1063, 4;
	add.s64 	%rd168, %rd55, %rd167;
	ld.shared.u32 	%r1064, [%rd168];
	add.s32 	%r1065, %r116, %r1024;
	mul.wide.u32 	%rd169, %r1065, 4;
	add.s64 	%rd170, %rd55, %rd169;
	ld.shared.u32 	%r1066, [%rd170];
	add.s32 	%r1067, %r117, %r1024;
	mul.wide.s32 	%rd171, %r1067, 4;
	add.s64 	%rd172, %rd55, %rd171;
	ld.shared.u32 	%r1068, [%rd172];
	bar.sync 	0;
	shfl.sync.idx.b32	%r1069, %r3738, 0, 31, -1;
	shfl.sync.idx.b32	%r1070, %r3738, 1, 31, -1;
	shfl.sync.idx.b32	%r1071, %r3738, 2, 31, -1;
	shfl.sync.idx.b32	%r1072, %r3738, 3, 31, -1;
	shfl.sync.idx.b32	%r1073, %r3738, 4, 31, -1;
	shfl.sync.idx.b32	%r1074, %r3738, 5, 31, -1;
	shfl.sync.idx.b32	%r1075, %r3738, 6, 31, -1;
	shfl.sync.idx.b32	%r1076, %r3738, 7, 31, -1;
	shfl.sync.idx.b32	%r1077, %r3738, 8, 31, -1;
	shfl.sync.idx.b32	%r1078, %r3738, 9, 31, -1;
	shfl.sync.idx.b32	%r1079, %r3738, 10, 31, -1;
	shfl.sync.idx.b32	%r1080, %r3738, 11, 31, -1;
	shfl.sync.idx.b32	%r1081, %r3738, 12, 31, -1;
	shfl.sync.idx.b32	%r1082, %r3738, 13, 31, -1;
	shfl.sync.idx.b32	%r1083, %r3738, 14, 31, -1;
	shfl.sync.idx.b32	%r1084, %r3738, 15, 31, -1;
	shfl.sync.idx.b32	%r1085, %r3738, 16, 31, -1;
	shfl.sync.idx.b32	%r1086, %r3738, 17, 31, -1;
	shfl.sync.idx.b32	%r1087, %r3738, 18, 31, -1;
	shfl.sync.idx.b32	%r1088, %r3738, 19, 31, -1;
	shfl.sync.idx.b32	%r1089, %r3738, 20, 31, -1;
	shfl.sync.idx.b32	%r1090, %r3738, 21, 31, -1;
	shfl.sync.idx.b32	%r1091, %r3738, 22, 31, -1;
	shfl.sync.idx.b32	%r1092, %r3738, 23, 31, -1;
	add.s32 	%r1093, %r1069, %r1024;
	mul.wide.s32 	%rd173, %r1093, 4;
	add.s64 	%rd174, %rd55, %rd173;
	st.shared.u32 	[%rd174], %r1026;
	add.s32 	%r1094, %r1070, %r1024;
	mul.wide.s32 	%rd175, %r1094, 4;
	add.s64 	%rd176, %rd55, %rd175;
	st.shared.u32 	[%rd176], %r1028;
	add.s32 	%r1095, %r1071, %r1024;
	mul.wide.s32 	%rd177, %r1095, 4;
	add.s64 	%rd178, %rd55, %rd177;
	st.shared.u32 	[%rd178], %r1030;
	add.s32 	%r1096, %r1072, %r1024;
	mul.wide.s32 	%rd179, %r1096, 4;
	add.s64 	%rd180, %rd55, %rd179;
	st.shared.u32 	[%rd180], %r1032;
	add.s32 	%r1097, %r1073, %r1024;
	mul.wide.s32 	%rd181, %r1097, 4;
	add.s64 	%rd182, %rd55, %rd181;
	st.shared.u32 	[%rd182], %r1034;
	add.s32 	%r1098, %r1074, %r1024;
	mul.wide.s32 	%rd183, %r1098, 4;
	add.s64 	%rd184, %rd55, %rd183;
	st.shared.u32 	[%rd184], %r1036;
	add.s32 	%r1099, %r1075, %r1024;
	mul.wide.s32 	%rd185, %r1099, 4;
	add.s64 	%rd186, %rd55, %rd185;
	st.shared.u32 	[%rd186], %r1038;
	add.s32 	%r1100, %r1076, %r1024;
	mul.wide.s32 	%rd187, %r1100, 4;
	add.s64 	%rd188, %rd55, %rd187;
	st.shared.u32 	[%rd188], %r1040;
	add.s32 	%r1101, %r1077, %r1024;
	mul.wide.s32 	%rd189, %r1101, 4;
	add.s64 	%rd190, %rd55, %rd189;
	st.shared.u32 	[%rd190], %r1042;
	add.s32 	%r1102, %r1078, %r1024;
	mul.wide.s32 	%rd191, %r1102, 4;
	add.s64 	%rd192, %rd55, %rd191;
	st.shared.u32 	[%rd192], %r1044;
	add.s32 	%r1103, %r1079, %r1024;
	mul.wide.s32 	%rd193, %r1103, 4;
	add.s64 	%rd194, %rd55, %rd193;
	st.shared.u32 	[%rd194], %r1046;
	add.s32 	%r1104, %r1080, %r1024;
	mul.wide.s32 	%rd195, %r1104, 4;
	add.s64 	%rd196, %rd55, %rd195;
	st.shared.u32 	[%rd196], %r1048;
	add.s32 	%r1105, %r1081, %r1024;
	mul.wide.s32 	%rd197, %r1105, 4;
	add.s64 	%rd198, %rd55, %rd197;
	st.shared.u32 	[%rd198], %r1050;
	add.s32 	%r1106, %r1082, %r1024;
	mul.wide.s32 	%rd199, %r1106, 4;
	add.s64 	%rd200, %rd55, %rd199;
	st.shared.u32 	[%rd200], %r1052;
	add.s32 	%r1107, %r1083, %r1024;
	mul.wide.s32 	%rd201, %r1107, 4;
	add.s64 	%rd202, %rd55, %rd201;
	st.shared.u32 	[%rd202], %r1054;
	add.s32 	%r1108, %r1084, %r1024;
	mul.wide.s32 	%rd203, %r1108, 4;
	add.s64 	%rd204, %rd55, %rd203;
	st.shared.u32 	[%rd204], %r1056;
	add.s32 	%r1109, %r1085, %r1024;
	mul.wide.s32 	%rd205, %r1109, 4;
	add.s64 	%rd206, %rd55, %rd205;
	st.shared.u32 	[%rd206], %r1058;
	add.s32 	%r1110, %r1086, %r1024;
	mul.wide.s32 	%rd207, %r1110, 4;
	add.s64 	%rd208, %rd55, %rd207;
	st.shared.u32 	[%rd208], %r1060;
	add.s32 	%r1111, %r1087, %r1024;
	mul.wide.s32 	%rd209, %r1111, 4;
	add.s64 	%rd210, %rd55, %rd209;
	st.shared.u32 	[%rd210], %r1062;
	add.s32 	%r1112, %r1088, %r1024;
	mul.wide.s32 	%rd211, %r1112, 4;
	add.s64 	%rd212, %rd55, %rd211;
	st.shared.u32 	[%rd212], %r1064;
	add.s32 	%r1113, %r1089, %r1024;
	mul.wide.s32 	%rd213, %r1113, 4;
	add.s64 	%rd214, %rd55, %rd213;
	st.shared.u32 	[%rd214], %r1066;
	selp.b32 	%r1114, 0, %r1068, %p227;
	add.s32 	%r1115, %r1090, %r1024;
	mul.wide.s32 	%rd215, %r1115, 4;
	add.s64 	%rd216, %rd55, %rd215;
	st.shared.u32 	[%rd216], %r1114;
	add.s32 	%r1116, %r1091, %r1024;
	mul.wide.s32 	%rd217, %r1116, 4;
	add.s64 	%rd218, %rd55, %rd217;
	mov.u32 	%r3660, 0;
	st.shared.u32 	[%rd218], %r3660;
	add.s32 	%r1117, %r1092, %r1024;
	mul.wide.s32 	%rd219, %r1117, 4;
	add.s64 	%rd220, %rd55, %rd219;
	st.shared.u32 	[%rd220], %r3660;
	bar.sync 	0;
	mov.u32 	%r3661, %r3660;
	mov.u32 	%r3662, %r3660;
	mov.u32 	%r3663, %r3660;
	mov.u32 	%r3664, %r3660;
	mov.u32 	%r3665, %r3660;
	mov.u32 	%r3666, %r3660;
	mov.u32 	%r3667, %r3660;
	mov.u32 	%r3668, %r3660;
	mov.u32 	%r3669, %r3660;
	mov.u32 	%r3670, %r3660;
	mov.u32 	%r3671, %r3660;
	mov.u32 	%r3672, %r3660;
	mov.u32 	%r3673, %r3660;
	mov.u32 	%r3674, %r3660;
	mov.u32 	%r3675, %r3660;
	mov.u32 	%r3676, %r3660;
	mov.u32 	%r3677, %r3660;
	mov.u32 	%r3678, %r3660;
	mov.u32 	%r3679, %r3660;
	mov.u32 	%r3680, %r3660;
	mov.u32 	%r3681, %r3660;
	mov.u32 	%r3682, %r3660;
	mov.u32 	%r3683, %r3660;
	@%p78 bra 	$L__BB0_145;
// %bb.194:                             // %oksrem3907
                                        //   in Loop: Header=BB0_143 Depth=1
	cvt.u16.u32 	%rs88, %r255;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r1118, %rs94;
	mul.wide.s32 	%rd221, %r1118, 4;
	add.s64 	%rd222, %rd15, %rd221;
	ld.shared.u32 	%r3660, [%rd222];
	ld.shared.u32 	%r3661, [%rd15+4];
	ld.shared.u32 	%r3662, [%rd15+8];
	ld.shared.u32 	%r3663, [%rd15+12];
	ld.shared.u32 	%r3664, [%rd15+16];
	ld.shared.u32 	%r3665, [%rd15+20];
	ld.shared.u32 	%r3666, [%rd15+24];
	ld.shared.u32 	%r3667, [%rd15+28];
	ld.shared.u32 	%r3668, [%rd15+32];
	ld.shared.u32 	%r3669, [%rd15+36];
	ld.shared.u32 	%r3670, [%rd15+40];
	ld.shared.u32 	%r3671, [%rd15+44];
	ld.shared.u32 	%r3672, [%rd15+48];
	ld.shared.u32 	%r3673, [%rd15+52];
	ld.shared.u32 	%r3674, [%rd15+56];
	ld.shared.u32 	%r3675, [%rd15+60];
	add.s16 	%rs95, %rs88, 16;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r1119, %rs101;
	mul.wide.s32 	%rd223, %r1119, 4;
	add.s64 	%rd224, %rd15, %rd223;
	ld.shared.u32 	%r3676, [%rd224];
	add.s16 	%rs102, %rs88, 17;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r1120, %rs108;
	mul.wide.s32 	%rd225, %r1120, 4;
	add.s64 	%rd226, %rd15, %rd225;
	ld.shared.u32 	%r3677, [%rd226];
	add.s16 	%rs109, %rs88, 18;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r1121, %rs115;
	mul.wide.s32 	%rd227, %r1121, 4;
	add.s64 	%rd228, %rd15, %rd227;
	ld.shared.u32 	%r3678, [%rd228];
	add.s16 	%rs116, %rs88, 19;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r1122, %rs122;
	mul.wide.s32 	%rd229, %r1122, 4;
	add.s64 	%rd230, %rd15, %rd229;
	ld.shared.u32 	%r3679, [%rd230];
	add.s16 	%rs123, %rs88, 20;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r1123, %rs129;
	mul.wide.s32 	%rd231, %r1123, 4;
	add.s64 	%rd232, %rd15, %rd231;
	ld.shared.u32 	%r3680, [%rd232];
	add.s16 	%rs130, %rs88, 21;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r1124, %rs136;
	mul.wide.s32 	%rd233, %r1124, 4;
	add.s64 	%rd234, %rd15, %rd233;
	ld.shared.u32 	%r3681, [%rd234];
	add.s16 	%rs137, %rs88, 22;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r1125, %rs143;
	mul.wide.s32 	%rd235, %r1125, 4;
	add.s64 	%rd236, %rd15, %rd235;
	ld.shared.u32 	%r3682, [%rd236];
	add.s16 	%rs144, %rs88, 23;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r1126, %rs150;
	mul.wide.s32 	%rd237, %r1126, 4;
	add.s64 	%rd238, %rd15, %rd237;
	ld.shared.u32 	%r3683, [%rd238];
$L__BB0_145:                            // %L11334
                                        //   in Loop: Header=BB0_143 Depth=1
	bar.sync 	0;
	mov.u32 	%r3684, 12;
	bra.uni 	$L__BB0_146;
$L__BB0_153:                            // %L20932
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r3686, %r3686, 1;
	mov.u32 	%r3685, 0;
	mov.u32 	%r3687, %r3685;
	mov.u32 	%r3688, %r3685;
$L__BB0_154:                            // %L20933
                                        //   in Loop: Header=BB0_146 Depth=2
	bar.sync 	0;
	add.s32 	%r3684, %r3684, -4;
	setp.ne.s32 	%p254, %r3684, -12;
	@%p254 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_155;
$L__BB0_146:                            // %L11360
                                        //   Parent Loop BB0_143 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p237, %r3684, 12;
	selp.b32 	%r1665, %r3660, 0, %p237;
	setp.eq.s32 	%p238, %r3684, 8;
	selp.b32 	%r1666, %r3664, %r1665, %p238;
	setp.eq.s32 	%p239, %r3684, 4;
	selp.b32 	%r1667, %r3668, %r1666, %p239;
	setp.eq.s32 	%p240, %r3684, 0;
	selp.b32 	%r1668, %r3672, %r1667, %p240;
	setp.eq.s32 	%p241, %r3684, -4;
	selp.b32 	%r1669, %r3676, %r1668, %p241;
	setp.eq.s32 	%p242, %r3684, -8;
	selp.b32 	%r1670, %r3680, %r1669, %p242;
	selp.b32 	%r1671, %r3661, 0, %p237;
	selp.b32 	%r1672, %r3665, %r1671, %p238;
	selp.b32 	%r1673, %r3669, %r1672, %p239;
	selp.b32 	%r1674, %r3673, %r1673, %p240;
	selp.b32 	%r1675, %r3677, %r1674, %p241;
	selp.b32 	%r1676, %r3681, %r1675, %p242;
	selp.b32 	%r1677, %r3662, 0, %p237;
	selp.b32 	%r1678, %r3666, %r1677, %p238;
	selp.b32 	%r1679, %r3670, %r1678, %p239;
	selp.b32 	%r1680, %r3674, %r1679, %p240;
	selp.b32 	%r1681, %r3678, %r1680, %p241;
	selp.b32 	%r1682, %r3682, %r1681, %p242;
	selp.b32 	%r1683, %r3663, 0, %p237;
	selp.b32 	%r1684, %r3667, %r1683, %p238;
	selp.b32 	%r1685, %r3671, %r1684, %p239;
	selp.b32 	%r1686, %r3675, %r1685, %p240;
	selp.b32 	%r1687, %r3679, %r1686, %p241;
	selp.b32 	%r1688, %r3683, %r1687, %p242;
	mov.u16 	%rs188, 25600;
	// begin inline asm
	mov.b32 %r1133, {%rs188, %rs188};
	// end inline asm
	mov.u16 	%rs190, 21504;
	// begin inline asm
	mov.b32 %r1144, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1132, %r1670, -2004318072;
	mov.u32 	%r1269, 983055;
	// begin inline asm
	lop3.b32 %r1130, %r1269, %r1132, %r1133, 202;
	// end inline asm
	mov.u16 	%rs194, 18432;
	// begin inline asm
	mov.b32 %r1134, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1135, %r1133, %r1134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1138, %r1130, %r1135;
	// end inline asm
	mov.u32 	%r1280, 15728880;
	// begin inline asm
	lop3.b32 %r1141, %r1280, %r1132, %r1144, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1145, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1146, %r1144, %r1145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1149, %r1141, %r1146;
	// end inline asm
	// begin inline asm
	mov.b32 %r1179, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1190, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1178, %r1676, -2004318072;
	// begin inline asm
	lop3.b32 %r1176, %r1269, %r1178, %r1179, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1180, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1181, %r1179, %r1180;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1184, %r1176, %r1181;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1187, %r1280, %r1178, %r1190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1191, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1192, %r1190, %r1191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1195, %r1187, %r1192;
	// end inline asm
	// begin inline asm
	mov.b32 %r1225, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1236, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1224, %r1682, -2004318072;
	// begin inline asm
	lop3.b32 %r1222, %r1269, %r1224, %r1225, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1226, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1227, %r1225, %r1226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1230, %r1222, %r1227;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1233, %r1280, %r1224, %r1236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1238, %r1236, %r1237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1241, %r1233, %r1238;
	// end inline asm
	// begin inline asm
	mov.b32 %r1271, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1282, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1270, %r1688, -2004318072;
	// begin inline asm
	lop3.b32 %r1268, %r1269, %r1270, %r1271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1272, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1273, %r1271, %r1272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1276, %r1268, %r1273;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1279, %r1280, %r1270, %r1282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1284, %r1282, %r1283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1287, %r1279, %r1284;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3653;
    mov.b32 {%r2re, %r2im}, %r1138;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1312, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3654;
    mov.b32 {%r2re, %r2im}, %r1149;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1315, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3653;
    mov.b32 {%r2re, %r2im}, %r1184;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1318, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3654;
    mov.b32 {%r2re, %r2im}, %r1195;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1321, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3653;
    mov.b32 {%r2re, %r2im}, %r1230;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1324, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3654;
    mov.b32 {%r2re, %r2im}, %r1241;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1327, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3653;
    mov.b32 {%r2re, %r2im}, %r1276;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1330, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3654;
    mov.b32 {%r2re, %r2im}, %r1287;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1333, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1664, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1399, %r1396}, {%r338, %r341}, {%r1312}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1408, %r1405}, {%r338, %r341}, {%r1315}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1417, %r1414}, {%r338, %r341}, {%r1318}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1426, %r1423}, {%r338, %r341}, {%r1321}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1435, %r1432}, {%r338, %r341}, {%r1324}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1444, %r1441}, {%r338, %r341}, {%r1327}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1453, %r1450}, {%r338, %r341}, {%r1330}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1462, %r1459}, {%r338, %r341}, {%r1333}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1392, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1394, %r1392, %r1396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r390, %r1399, %r1394;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1403, %r1401, %r1405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r390, %r1408, %r1403;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1410, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1412, %r1410, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1415, %r390, %r1417, %r1412;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1419, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r1419, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r390, %r1426, %r1421;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1428, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r390, %r1435, %r1430;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1437, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r1437, %r1441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r390, %r1444, %r1439;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1446, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r1446, %r1450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r390, %r1453, %r1448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1455, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1457, %r1455, %r1459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1460, %r390, %r1462, %r1457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1464, %r393, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1467, %r390, %r1396, %r1464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r393, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r390, %r1405, %r1471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1478, %r393, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1481, %r390, %r1414, %r1478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1485, %r393, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r390, %r1423, %r1485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1492, %r393, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1495, %r390, %r1432, %r1492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1499, %r393, %r1444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1502, %r390, %r1441, %r1499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1506, %r393, %r1453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r390, %r1450, %r1506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r393, %r1462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r390, %r1459, %r1513;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1601, %r1602}, {%r434, %r440, %r437, %r443}, {%r1397, %r1467}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1609, %r1610}, {%r434, %r440, %r437, %r443}, {%r1406, %r1474}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1617, %r1618}, {%r434, %r440, %r437, %r443}, {%r1415, %r1481}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1625, %r1626}, {%r434, %r440, %r437, %r443}, {%r1424, %r1488}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1633, %r1634}, {%r434, %r440, %r437, %r443}, {%r1433, %r1495}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1641, %r1642}, {%r434, %r440, %r437, %r443}, {%r1442, %r1502}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1649, %r1650}, {%r434, %r440, %r437, %r443}, {%r1451, %r1509}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1657, %r1658}, {%r434, %r440, %r437, %r443}, {%r1460, %r1516}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1600, %r1601, %r1602, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1604, %r1601, %r1602, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1608, %r1609, %r1610, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1612, %r1609, %r1610, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1616, %r1617, %r1618, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1620, %r1617, %r1618, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1624, %r1625, %r1626, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1628, %r1625, %r1626, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1632, %r1633, %r1634, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1636, %r1633, %r1634, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1640, %r1641, %r1642, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1644, %r1641, %r1642, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1648, %r1649, %r1650, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1652, %r1649, %r1650, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1656, %r1657, %r1658, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1660, %r1657, %r1658, %r918;
	// end inline asm
	st.shared.u32 	[%rd6], %r1600;
	st.shared.u32 	[%rd7], %r1604;
	st.shared.u32 	[%rd8], %r1608;
	st.shared.u32 	[%rd9], %r1612;
	st.shared.u32 	[%rd16], %r1616;
	st.shared.u32 	[%rd17], %r1620;
	st.shared.u32 	[%rd18], %r1624;
	st.shared.u32 	[%rd19], %r1628;
	st.shared.u32 	[%rd20], %r1632;
	st.shared.u32 	[%rd21], %r1636;
	st.shared.u32 	[%rd22], %r1640;
	st.shared.u32 	[%rd23], %r1644;
	st.shared.u32 	[%rd24], %r1648;
	st.shared.u32 	[%rd25], %r1652;
	st.shared.u32 	[%rd26], %r1656;
	st.shared.u32 	[%rd27], %r1660;
	bar.sync 	0;
	mov.u32 	%r3689, %r1664;
	mov.u32 	%r3690, %r1664;
	mov.u32 	%r3691, %r1664;
	mov.u32 	%r3692, %r1664;
	@%p236 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_147;
$L__BB0_195:                            // %pass7517
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3689, [%rd10];
	ld.shared.u32 	%r3690, [%rd11];
	ld.shared.u32 	%r3691, [%rd12];
	ld.shared.u32 	%r3692, [%rd13];
$L__BB0_147:                            // %L16849
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1724, %r1721}, {%r452, %r455}, {%r3689}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1733, %r1730}, {%r452, %r455}, {%r3690}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1742, %r1739}, {%r452, %r455}, {%r3691}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1751, %r1748}, {%r452, %r455}, {%r3692}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1717, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1719, %r1717, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r504, %r1724, %r1719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1726, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1728, %r1726, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r504, %r1733, %r1728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1735, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1737, %r1735, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r504, %r1742, %r1737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1744, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r1744, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r504, %r1751, %r1746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r507, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r504, %r1721, %r1753;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r507, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r504, %r1730, %r1760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r507, %r1742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r504, %r1739, %r1767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r507, %r1751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r504, %r1748, %r1774;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1822, %r1825}, {%r548, %r554, %r551, %r557}, {%r1722, %r1756}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1841, %r1844}, {%r548, %r554, %r551, %r557}, {%r1731, %r1763}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1829, %r1833}, {%r548, %r554, %r551, %r557}, {%r1740, %r1770}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1848, %r1852}, {%r548, %r554, %r551, %r557}, {%r1749, %r1777}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r1822, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1825, %r1825, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1829, %r1829, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r1833, %r1833, %r1828;
	// end inline asm
	mov.u32 	%r1856, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1836, %r1856, %r1832, %r3688;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1840, %r1841, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r1844, %r1844, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r1848, %r1848, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r1852, %r1852, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r1856, %r1851, %r3687;
	// end inline asm
	mov.u32 	%r3693, %r1664;
	mov.u32 	%r3694, %r1664;
	mov.u32 	%r3695, %r1664;
	mov.u32 	%r3696, %r1664;
	@%p236 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_148;
$L__BB0_196:                            // %pass8122
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3693, [%rd28];
	ld.shared.u32 	%r3694, [%rd29];
	ld.shared.u32 	%r3695, [%rd30];
	ld.shared.u32 	%r3696, [%rd31];
$L__BB0_148:                            // %L18052
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1895, %r1892}, {%r452, %r455}, {%r3693}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1904, %r1901}, {%r452, %r455}, {%r3694}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1913, %r1910}, {%r452, %r455}, {%r3695}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1922, %r1919}, {%r452, %r455}, {%r3696}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1888, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1890, %r1888, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r504, %r1895, %r1890;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1897, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r1897, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r504, %r1904, %r1899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1906, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r1906, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r504, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1915, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1917, %r1915, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r504, %r1922, %r1917;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1924, %r507, %r1895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1927, %r504, %r1892, %r1924;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1931, %r507, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1934, %r504, %r1901, %r1931;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1938, %r507, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1941, %r504, %r1910, %r1938;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1945, %r507, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r504, %r1919, %r1945;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1993, %r1996}, {%r548, %r554, %r551, %r557}, {%r1893, %r1927}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2012, %r2015}, {%r548, %r554, %r551, %r557}, {%r1902, %r1934}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2000, %r2004}, {%r548, %r554, %r551, %r557}, {%r1911, %r1941}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2019, %r2023}, {%r548, %r554, %r551, %r557}, {%r1920, %r1948}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1992, %r1993, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r1996, %r1996, %r1992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r2000, %r2000, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r2004, %r2004, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r1856, %r2003, %r1836;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r2012, %r2012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r2015, %r2015, %r2011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r2019, %r2019, %r2014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2022, %r2023, %r2023, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r1856, %r2022, %r1855;
	// end inline asm
	mov.u32 	%r3697, %r1664;
	mov.u32 	%r3698, %r1664;
	mov.u32 	%r3699, %r1664;
	mov.u32 	%r3700, %r1664;
	@%p236 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_149;
$L__BB0_197:                            // %pass8727
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3697, [%rd32];
	ld.shared.u32 	%r3698, [%rd33];
	ld.shared.u32 	%r3699, [%rd34];
	ld.shared.u32 	%r3700, [%rd35];
$L__BB0_149:                            // %L19255
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2066, %r2063}, {%r452, %r455}, {%r3697}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2075, %r2072}, {%r452, %r455}, {%r3698}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2084, %r2081}, {%r452, %r455}, {%r3699}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2093, %r2090}, {%r452, %r455}, {%r3700}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2059, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2061, %r2059, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r504, %r2066, %r2061;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2068, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2070, %r2068, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2073, %r504, %r2075, %r2070;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2077, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2079, %r2077, %r2081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r504, %r2084, %r2079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2086, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2088, %r2086, %r2090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r504, %r2093, %r2088;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2095, %r507, %r2066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2098, %r504, %r2063, %r2095;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2102, %r507, %r2075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2105, %r504, %r2072, %r2102;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2109, %r507, %r2084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2112, %r504, %r2081, %r2109;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r507, %r2093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2119, %r504, %r2090, %r2116;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2164, %r2167}, {%r548, %r554, %r551, %r557}, {%r2064, %r2098}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2183, %r2186}, {%r548, %r554, %r551, %r557}, {%r2073, %r2105}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2171, %r2175}, {%r548, %r554, %r551, %r557}, {%r2082, %r2112}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2190, %r2194}, {%r548, %r554, %r551, %r557}, {%r2091, %r2119}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2163, %r2164, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r2167, %r2167, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r2171, %r2171, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r2175, %r2175, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r1856, %r2174, %r2007;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2182, %r2183, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2185, %r2186, %r2186, %r2182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r2190, %r2190, %r2185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r2194, %r2194, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2197, %r1856, %r2193, %r2026;
	// end inline asm
	mov.u32 	%r3701, %r1664;
	mov.u32 	%r3702, %r1664;
	mov.u32 	%r3703, %r1664;
	mov.u32 	%r3704, %r1664;
	@%p236 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_150;
$L__BB0_198:                            // %pass9332
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3701, [%rd36];
	ld.shared.u32 	%r3702, [%rd37];
	ld.shared.u32 	%r3703, [%rd38];
	ld.shared.u32 	%r3704, [%rd39];
$L__BB0_150:                            // %L20458
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2237, %r2234}, {%r452, %r455}, {%r3701}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2246, %r2243}, {%r452, %r455}, {%r3702}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2255, %r2252}, {%r452, %r455}, {%r3703}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2264, %r2261}, {%r452, %r455}, {%r3704}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2230, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2232, %r2230, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2235, %r504, %r2237, %r2232;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2239, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2241, %r2239, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2244, %r504, %r2246, %r2241;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2248, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2250, %r2248, %r2252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2253, %r504, %r2255, %r2250;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2257, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2259, %r2257, %r2261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2262, %r504, %r2264, %r2259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2266, %r507, %r2237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2269, %r504, %r2234, %r2266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r507, %r2246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2276, %r504, %r2243, %r2273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r507, %r2255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2283, %r504, %r2252, %r2280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2287, %r507, %r2264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2290, %r504, %r2261, %r2287;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2335, %r2338}, {%r548, %r554, %r551, %r557}, {%r2235, %r2269}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2354, %r2357}, {%r548, %r554, %r551, %r557}, {%r2244, %r2276}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2342, %r2346}, {%r548, %r554, %r551, %r557}, {%r2253, %r2283}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2361, %r2365}, {%r548, %r554, %r551, %r557}, {%r2262, %r2290}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2334, %r2335, %r2335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2337, %r2338, %r2338, %r2334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2341, %r2342, %r2342, %r2337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2345, %r2346, %r2346, %r2341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3688, %r1856, %r2345, %r2178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2353, %r2354, %r2354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2356, %r2357, %r2357, %r2353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2360, %r2361, %r2361, %r2356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2364, %r2365, %r2365, %r2360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3687, %r1856, %r2364, %r2197;
	// end inline asm
	add.s32 	%r3685, %r3685, 4;
	setp.ne.s32 	%p246, %r3685, 40;
	@%p246 bra 	$L__BB0_154;
// %bb.151:                             // %L20608
                                        //   in Loop: Header=BB0_146 Depth=2
	@%p78 bra 	$L__BB0_153;
// %bb.152:                             // %L20668
                                        //   in Loop: Header=BB0_146 Depth=2
	mul.lo.s32 	%r2372, %r3686, 1179648;
	add.s32 	%r2373, %r118, %r2372;
	cvt.s64.s32 	%rd239, %r2373;
	add.s64 	%rd240, %rd239, %rd14;
	mul.hi.s64 	%rd241, %rd240, 1024819115206086201;
	shr.u64 	%rd242, %rd241, 63;
	shr.s64 	%rd243, %rd241, 22;
	add.s64 	%rd244, %rd243, %rd242;
	setp.lt.s64 	%p248, %rd240, 0;
	mul.lo.s64 	%rd245, %rd244, 75497472;
	setp.ne.s64 	%p249, %rd245, %rd240;
	and.pred  	%p250, %p248, %p249;
	selp.s64 	%rd246, -1, 0, %p250;
	add.s64 	%rd247, %rd244, %rd246;
	mul.lo.s64 	%rd248, %rd247, -75497472;
	add.s64 	%rd249, %rd248, %rd240;
	shl.b64 	%rd250, %rd249, 2;
	add.s64 	%rd251, %rd4, %rd250;
	st.global.u32 	[%rd251], %r3688;
	add.s32 	%r2374, %r119, %r2372;
	cvt.s64.s32 	%rd252, %r2374;
	add.s64 	%rd253, %rd252, %rd14;
	mul.hi.s64 	%rd254, %rd253, 1024819115206086201;
	shr.u64 	%rd255, %rd254, 63;
	shr.s64 	%rd256, %rd254, 22;
	add.s64 	%rd257, %rd256, %rd255;
	setp.lt.s64 	%p251, %rd253, 0;
	mul.lo.s64 	%rd258, %rd257, 75497472;
	setp.ne.s64 	%p252, %rd258, %rd253;
	and.pred  	%p253, %p251, %p252;
	selp.s64 	%rd259, -1, 0, %p253;
	add.s64 	%rd260, %rd257, %rd259;
	mul.lo.s64 	%rd261, %rd260, -75497472;
	add.s64 	%rd262, %rd261, %rd253;
	shl.b64 	%rd263, %rd262, 2;
	add.s64 	%rd264, %rd4, %rd263;
	st.global.u32 	[%rd264], %r3687;
	bra.uni 	$L__BB0_153;
$L__BB0_155:                            // %L20958.preheader
                                        //   in Loop: Header=BB0_143 Depth=1
	mov.u32 	%r3709, 12;
	bra.uni 	$L__BB0_156;
$L__BB0_163:                            // %L30530
                                        //   in Loop: Header=BB0_156 Depth=2
	add.s32 	%r3686, %r3686, 1;
	mov.u32 	%r3685, 0;
	mov.u32 	%r3687, %r3685;
	mov.u32 	%r3688, %r3685;
$L__BB0_164:                            // %L30531
                                        //   in Loop: Header=BB0_156 Depth=2
	bar.sync 	0;
	add.s32 	%r3709, %r3709, -4;
	setp.ne.s32 	%p273, %r3709, -12;
	@%p273 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_165;
$L__BB0_156:                            // %L20958
                                        //   Parent Loop BB0_143 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p256, %r3709, 12;
	selp.b32 	%r2914, %r3660, 0, %p256;
	setp.eq.s32 	%p257, %r3709, 8;
	selp.b32 	%r2915, %r3664, %r2914, %p257;
	setp.eq.s32 	%p258, %r3709, 4;
	selp.b32 	%r2916, %r3668, %r2915, %p258;
	setp.eq.s32 	%p259, %r3709, 0;
	selp.b32 	%r2917, %r3672, %r2916, %p259;
	setp.eq.s32 	%p260, %r3709, -4;
	selp.b32 	%r2918, %r3676, %r2917, %p260;
	setp.eq.s32 	%p261, %r3709, -8;
	selp.b32 	%r2919, %r3680, %r2918, %p261;
	selp.b32 	%r2920, %r3661, 0, %p256;
	selp.b32 	%r2921, %r3665, %r2920, %p257;
	selp.b32 	%r2922, %r3669, %r2921, %p258;
	selp.b32 	%r2923, %r3673, %r2922, %p259;
	selp.b32 	%r2924, %r3677, %r2923, %p260;
	selp.b32 	%r2925, %r3681, %r2924, %p261;
	selp.b32 	%r2926, %r3662, 0, %p256;
	selp.b32 	%r2927, %r3666, %r2926, %p257;
	selp.b32 	%r2928, %r3670, %r2927, %p258;
	selp.b32 	%r2929, %r3674, %r2928, %p259;
	selp.b32 	%r2930, %r3678, %r2929, %p260;
	selp.b32 	%r2931, %r3682, %r2930, %p261;
	selp.b32 	%r2932, %r3663, 0, %p256;
	selp.b32 	%r2933, %r3667, %r2932, %p257;
	selp.b32 	%r2934, %r3671, %r2933, %p258;
	selp.b32 	%r2935, %r3675, %r2934, %p259;
	selp.b32 	%r2936, %r3679, %r2935, %p260;
	selp.b32 	%r2937, %r3683, %r2936, %p261;
	// begin inline asm
	mov.b32 %r2404, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2415, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2938, %r2919, 8;
	xor.b32  	%r2414, %r2938, 8947848;
	// begin inline asm
	lop3.b32 %r2401, %r1269, %r2414, %r2404, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2405, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2406, %r2404, %r2405;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2409, %r2401, %r2406;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2412, %r1280, %r2414, %r2415, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2416, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2417, %r2415, %r2416;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2420, %r2412, %r2417;
	// end inline asm
	// begin inline asm
	mov.b32 %r2450, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2461, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2939, %r2925, 8;
	xor.b32  	%r2460, %r2939, 8947848;
	// begin inline asm
	lop3.b32 %r2447, %r1269, %r2460, %r2450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2451, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2452, %r2450, %r2451;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2455, %r2447, %r2452;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2458, %r1280, %r2460, %r2461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2462, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2463, %r2461, %r2462;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2466, %r2458, %r2463;
	// end inline asm
	// begin inline asm
	mov.b32 %r2496, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2507, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2940, %r2931, 8;
	xor.b32  	%r2506, %r2940, 8947848;
	// begin inline asm
	lop3.b32 %r2493, %r1269, %r2506, %r2496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2497, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2498, %r2496, %r2497;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2501, %r2493, %r2498;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2504, %r1280, %r2506, %r2507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2509, %r2507, %r2508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2512, %r2504, %r2509;
	// end inline asm
	// begin inline asm
	mov.b32 %r2542, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2553, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2941, %r2937, 8;
	xor.b32  	%r2552, %r2941, 8947848;
	// begin inline asm
	lop3.b32 %r2539, %r1269, %r2552, %r2542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2543, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2544, %r2542, %r2543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2547, %r2539, %r2544;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2550, %r1280, %r2552, %r2553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2555, %r2553, %r2554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2558, %r2550, %r2555;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3653;
    mov.b32 {%r2re, %r2im}, %r2409;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2561, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3654;
    mov.b32 {%r2re, %r2im}, %r2420;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2564, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3653;
    mov.b32 {%r2re, %r2im}, %r2455;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2567, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3654;
    mov.b32 {%r2re, %r2im}, %r2466;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2570, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3653;
    mov.b32 {%r2re, %r2im}, %r2501;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2573, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3654;
    mov.b32 {%r2re, %r2im}, %r2512;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2576, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3653;
    mov.b32 {%r2re, %r2im}, %r2547;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2579, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3654;
    mov.b32 {%r2re, %r2im}, %r2558;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2582, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2913, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2648, %r2645}, {%r338, %r341}, {%r2561}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2657, %r2654}, {%r338, %r341}, {%r2564}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2666, %r2663}, {%r338, %r341}, {%r2567}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2675, %r2672}, {%r338, %r341}, {%r2570}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2684, %r2681}, {%r338, %r341}, {%r2573}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2693, %r2690}, {%r338, %r341}, {%r2576}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2702, %r2699}, {%r338, %r341}, {%r2579}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2711, %r2708}, {%r338, %r341}, {%r2582}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2641, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2643, %r2641, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2646, %r390, %r2648, %r2643;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2650, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2652, %r2650, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2655, %r390, %r2657, %r2652;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2659, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2661, %r2659, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2664, %r390, %r2666, %r2661;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2668, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r2668, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2673, %r390, %r2675, %r2670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2677, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r2677, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2682, %r390, %r2684, %r2679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2686, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r2686, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r390, %r2693, %r2688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2700, %r390, %r2702, %r2697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r390, %r2711, %r2706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r393, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r390, %r2645, %r2713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r393, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r390, %r2654, %r2720;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2727, %r393, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2730, %r390, %r2663, %r2727;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2734, %r393, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2737, %r390, %r2672, %r2734;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2741, %r393, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2744, %r390, %r2681, %r2741;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2748, %r393, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2751, %r390, %r2690, %r2748;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2755, %r393, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2758, %r390, %r2699, %r2755;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2762, %r393, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2765, %r390, %r2708, %r2762;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2850, %r2851}, {%r434, %r440, %r437, %r443}, {%r2646, %r2716}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2858, %r2859}, {%r434, %r440, %r437, %r443}, {%r2655, %r2723}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2866, %r2867}, {%r434, %r440, %r437, %r443}, {%r2664, %r2730}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2874, %r2875}, {%r434, %r440, %r437, %r443}, {%r2673, %r2737}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2882, %r2883}, {%r434, %r440, %r437, %r443}, {%r2682, %r2744}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2890, %r2891}, {%r434, %r440, %r437, %r443}, {%r2691, %r2751}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2898, %r2899}, {%r434, %r440, %r437, %r443}, {%r2700, %r2758}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2906, %r2907}, {%r434, %r440, %r437, %r443}, {%r2709, %r2765}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2849, %r2850, %r2851, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2853, %r2850, %r2851, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2857, %r2858, %r2859, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2861, %r2858, %r2859, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2865, %r2866, %r2867, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2869, %r2866, %r2867, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2873, %r2874, %r2875, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2877, %r2874, %r2875, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2881, %r2882, %r2883, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2885, %r2882, %r2883, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2889, %r2890, %r2891, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2893, %r2890, %r2891, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2897, %r2898, %r2899, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2901, %r2898, %r2899, %r918;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2905, %r2906, %r2907, %r914;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2909, %r2906, %r2907, %r918;
	// end inline asm
	st.shared.u32 	[%rd6], %r2849;
	st.shared.u32 	[%rd7], %r2853;
	st.shared.u32 	[%rd8], %r2857;
	st.shared.u32 	[%rd9], %r2861;
	st.shared.u32 	[%rd16], %r2865;
	st.shared.u32 	[%rd17], %r2869;
	st.shared.u32 	[%rd18], %r2873;
	st.shared.u32 	[%rd19], %r2877;
	st.shared.u32 	[%rd20], %r2881;
	st.shared.u32 	[%rd21], %r2885;
	st.shared.u32 	[%rd22], %r2889;
	st.shared.u32 	[%rd23], %r2893;
	st.shared.u32 	[%rd24], %r2897;
	st.shared.u32 	[%rd25], %r2901;
	st.shared.u32 	[%rd26], %r2905;
	st.shared.u32 	[%rd27], %r2909;
	bar.sync 	0;
	mov.u32 	%r3714, %r2913;
	mov.u32 	%r3715, %r2913;
	mov.u32 	%r3716, %r2913;
	mov.u32 	%r3717, %r2913;
	@%p236 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_157;
$L__BB0_199:                            // %pass12213
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3717, [%rd10];
	ld.shared.u32 	%r3716, [%rd11];
	ld.shared.u32 	%r3715, [%rd12];
	ld.shared.u32 	%r3714, [%rd13];
$L__BB0_157:                            // %L26447
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2977, %r2974}, {%r452, %r455}, {%r3717}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2986, %r2983}, {%r452, %r455}, {%r3716}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2995, %r2992}, {%r452, %r455}, {%r3715}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3004, %r3001}, {%r452, %r455}, {%r3714}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2970, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2972, %r2970, %r2974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r504, %r2977, %r2972;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2979, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2981, %r2979, %r2983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2984, %r504, %r2986, %r2981;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2988, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2990, %r2988, %r2992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r504, %r2995, %r2990;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2997, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2999, %r2997, %r3001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3002, %r504, %r3004, %r2999;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3006, %r507, %r2977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3009, %r504, %r2974, %r3006;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3013, %r507, %r2986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3016, %r504, %r2983, %r3013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3020, %r507, %r2995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3023, %r504, %r2992, %r3020;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3027, %r507, %r3004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3030, %r504, %r3001, %r3027;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3075, %r3078}, {%r548, %r554, %r551, %r557}, {%r2975, %r3009}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3094, %r3097}, {%r548, %r554, %r551, %r557}, {%r2984, %r3016}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3082, %r3086}, {%r548, %r554, %r551, %r557}, {%r2993, %r3023}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3101, %r3105}, {%r548, %r554, %r551, %r557}, {%r3002, %r3030}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3074, %r3075, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3077, %r3078, %r3078, %r3074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r3082, %r3082, %r3077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3085, %r3086, %r3086, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r1856, %r3085, %r3688;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3093, %r3094, %r3094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3096, %r3097, %r3097, %r3093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3100, %r3101, %r3101, %r3096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r3105, %r3105, %r3100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3108, %r1856, %r3104, %r3687;
	// end inline asm
	mov.u32 	%r3718, %r2913;
	mov.u32 	%r3719, %r2913;
	mov.u32 	%r3720, %r2913;
	mov.u32 	%r3721, %r2913;
	@%p236 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass12818
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3721, [%rd28];
	ld.shared.u32 	%r3720, [%rd29];
	ld.shared.u32 	%r3719, [%rd30];
	ld.shared.u32 	%r3718, [%rd31];
$L__BB0_158:                            // %L27650
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3148, %r3145}, {%r452, %r455}, {%r3721}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3157, %r3154}, {%r452, %r455}, {%r3720}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3166, %r3163}, {%r452, %r455}, {%r3719}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3175, %r3172}, {%r452, %r455}, {%r3718}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3141, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3143, %r3141, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r504, %r3148, %r3143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3150, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3152, %r3150, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r504, %r3157, %r3152;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3159, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3161, %r3159, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3164, %r504, %r3166, %r3161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3168, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3170, %r3168, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r504, %r3175, %r3170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3177, %r507, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3180, %r504, %r3145, %r3177;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3184, %r507, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3187, %r504, %r3154, %r3184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3191, %r507, %r3166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r504, %r3163, %r3191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3198, %r507, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3201, %r504, %r3172, %r3198;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3246, %r3249}, {%r548, %r554, %r551, %r557}, {%r3146, %r3180}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3265, %r3268}, {%r548, %r554, %r551, %r557}, {%r3155, %r3187}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3253, %r3257}, {%r548, %r554, %r551, %r557}, {%r3164, %r3194}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3272, %r3276}, {%r548, %r554, %r551, %r557}, {%r3173, %r3201}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3245, %r3246, %r3246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r3249, %r3249, %r3245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3252, %r3253, %r3253, %r3248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3256, %r3257, %r3257, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r1856, %r3256, %r3089;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3264, %r3265, %r3265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3267, %r3268, %r3268, %r3264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3271, %r3272, %r3272, %r3267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3275, %r3276, %r3276, %r3271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3279, %r1856, %r3275, %r3108;
	// end inline asm
	mov.u32 	%r3722, %r2913;
	mov.u32 	%r3723, %r2913;
	mov.u32 	%r3724, %r2913;
	mov.u32 	%r3725, %r2913;
	@%p236 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_159;
$L__BB0_201:                            // %pass13423
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3725, [%rd32];
	ld.shared.u32 	%r3724, [%rd33];
	ld.shared.u32 	%r3723, [%rd34];
	ld.shared.u32 	%r3722, [%rd35];
$L__BB0_159:                            // %L28853
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3319, %r3316}, {%r452, %r455}, {%r3725}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3328, %r3325}, {%r452, %r455}, {%r3724}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3337, %r3334}, {%r452, %r455}, {%r3723}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3346, %r3343}, {%r452, %r455}, {%r3722}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3312, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3314, %r3312, %r3316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3317, %r504, %r3319, %r3314;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3321, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3323, %r3321, %r3325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3326, %r504, %r3328, %r3323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3330, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3332, %r3330, %r3334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3335, %r504, %r3337, %r3332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3339, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3341, %r3339, %r3343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3344, %r504, %r3346, %r3341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3348, %r507, %r3319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3351, %r504, %r3316, %r3348;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3355, %r507, %r3328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3358, %r504, %r3325, %r3355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3362, %r507, %r3337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3365, %r504, %r3334, %r3362;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3369, %r507, %r3346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3372, %r504, %r3343, %r3369;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3417, %r3420}, {%r548, %r554, %r551, %r557}, {%r3317, %r3351}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3436, %r3439}, {%r548, %r554, %r551, %r557}, {%r3326, %r3358}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3424, %r3428}, {%r548, %r554, %r551, %r557}, {%r3335, %r3365}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3443, %r3447}, {%r548, %r554, %r551, %r557}, {%r3344, %r3372}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3416, %r3417, %r3417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3419, %r3420, %r3420, %r3416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3423, %r3424, %r3424, %r3419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3427, %r3428, %r3428, %r3423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r1856, %r3427, %r3260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3435, %r3436, %r3436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3438, %r3439, %r3439, %r3435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3442, %r3443, %r3443, %r3438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3446, %r3447, %r3447, %r3442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3450, %r1856, %r3446, %r3279;
	// end inline asm
	mov.u32 	%r3726, %r2913;
	mov.u32 	%r3727, %r2913;
	mov.u32 	%r3728, %r2913;
	mov.u32 	%r3729, %r2913;
	@%p236 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_160;
$L__BB0_202:                            // %pass14028
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3729, [%rd36];
	ld.shared.u32 	%r3728, [%rd37];
	ld.shared.u32 	%r3727, [%rd38];
	ld.shared.u32 	%r3726, [%rd39];
$L__BB0_160:                            // %L30056
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3490, %r3487}, {%r452, %r455}, {%r3729}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3499, %r3496}, {%r452, %r455}, {%r3728}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3508, %r3505}, {%r452, %r455}, {%r3727}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3517, %r3514}, {%r452, %r455}, {%r3726}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3483, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3485, %r3483, %r3487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r504, %r3490, %r3485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3492, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3494, %r3492, %r3496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r504, %r3499, %r3494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3501, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3503, %r3501, %r3505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r504, %r3508, %r3503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3510, %r507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3512, %r3510, %r3514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r504, %r3517, %r3512;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3519, %r507, %r3490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r504, %r3487, %r3519;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3526, %r507, %r3499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3529, %r504, %r3496, %r3526;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3533, %r507, %r3508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3536, %r504, %r3505, %r3533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3540, %r507, %r3517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r504, %r3514, %r3540;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3588, %r3591}, {%r548, %r554, %r551, %r557}, {%r3488, %r3522}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3607, %r3610}, {%r548, %r554, %r551, %r557}, {%r3497, %r3529}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3595, %r3599}, {%r548, %r554, %r551, %r557}, {%r3506, %r3536}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3614, %r3618}, {%r548, %r554, %r551, %r557}, {%r3515, %r3543}, {%r2913, %r2913};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3587, %r3588, %r3588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3590, %r3591, %r3591, %r3587;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3594, %r3595, %r3595, %r3590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3598, %r3599, %r3599, %r3594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3688, %r1856, %r3598, %r3431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3606, %r3607, %r3607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3609, %r3610, %r3610, %r3606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3613, %r3614, %r3614, %r3609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3617, %r3618, %r3618, %r3613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3687, %r1856, %r3617, %r3450;
	// end inline asm
	add.s32 	%r3685, %r3685, 4;
	setp.ne.s32 	%p265, %r3685, 40;
	@%p265 bra 	$L__BB0_164;
// %bb.161:                             // %L30206
                                        //   in Loop: Header=BB0_156 Depth=2
	@%p78 bra 	$L__BB0_163;
// %bb.162:                             // %L30266
                                        //   in Loop: Header=BB0_156 Depth=2
	mul.lo.s32 	%r3625, %r3686, 1179648;
	add.s32 	%r3626, %r118, %r3625;
	cvt.s64.s32 	%rd265, %r3626;
	add.s64 	%rd266, %rd265, %rd14;
	mul.hi.s64 	%rd267, %rd266, 1024819115206086201;
	shr.u64 	%rd268, %rd267, 63;
	shr.s64 	%rd269, %rd267, 22;
	add.s64 	%rd270, %rd269, %rd268;
	setp.lt.s64 	%p267, %rd266, 0;
	mul.lo.s64 	%rd271, %rd270, 75497472;
	setp.ne.s64 	%p268, %rd271, %rd266;
	and.pred  	%p269, %p267, %p268;
	selp.s64 	%rd272, -1, 0, %p269;
	add.s64 	%rd273, %rd270, %rd272;
	mul.lo.s64 	%rd274, %rd273, -75497472;
	add.s64 	%rd275, %rd274, %rd266;
	shl.b64 	%rd276, %rd275, 2;
	add.s64 	%rd277, %rd4, %rd276;
	st.global.u32 	[%rd277], %r3688;
	add.s32 	%r3627, %r119, %r3625;
	cvt.s64.s32 	%rd278, %r3627;
	add.s64 	%rd279, %rd278, %rd14;
	mul.hi.s64 	%rd280, %rd279, 1024819115206086201;
	shr.u64 	%rd281, %rd280, 63;
	shr.s64 	%rd282, %rd280, 22;
	add.s64 	%rd283, %rd282, %rd281;
	setp.lt.s64 	%p270, %rd279, 0;
	mul.lo.s64 	%rd284, %rd283, 75497472;
	setp.ne.s64 	%p271, %rd284, %rd279;
	and.pred  	%p272, %p270, %p271;
	selp.s64 	%rd285, -1, 0, %p272;
	add.s64 	%rd286, %rd283, %rd285;
	mul.lo.s64 	%rd287, %rd286, -75497472;
	add.s64 	%rd288, %rd287, %rd279;
	shl.b64 	%rd289, %rd288, 2;
	add.s64 	%rd290, %rd4, %rd289;
	st.global.u32 	[%rd290], %r3687;
	bra.uni 	$L__BB0_163;
$L__BB0_166:                            // %L30566
	mov.u32 	%r3629, 0;
	st.global.u32 	[%rd5], %r3629;
	ret;
$L__BB0_6:                              // %L159
	mov.u32 	%r3630, 2;
	st.global.u32 	[%rd5], %r3630;
	mov.u64 	%rd291, exception2823;
	cvta.global.u64 	%rd292, %rd291;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd292;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd45, exception1;
	cvta.global.u64 	%rd46, %rd45;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd46;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
