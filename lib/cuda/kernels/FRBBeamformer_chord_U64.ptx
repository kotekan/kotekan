// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2371[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<364>;
	.reg .b16 	%rs<248>;
	.reg .b32 	%r<3812>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<496>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r396, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r405, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r405, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r397, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r406, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r407, %r406, %r1;
	add.s32 	%r408, %r407, %r4;
	mul.wide.u32 	%rd33, %r408, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r409, 1;
	st.global.u32 	[%rd6], %r409;
	setp.gt.u32 	%p4, %r397, 511;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r398, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r398, %r397;
	setp.gt.s32 	%p6, %r398, 1023;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r399, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r398, %r397;
	mad.lo.s32 	%r410, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r411, %r410, %r410, 4;
	setp.gt.u32 	%p8, %r411, 89478484;
	setp.gt.u32 	%p9, %r399, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r400, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r400, %r399;
	setp.lt.s32 	%p12, %r400, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r412, %r400, %r399;
	mul.hi.s32 	%r413, %r5, 1431655766;
	shr.u32 	%r414, %r413, 31;
	add.s32 	%r415, %r413, %r414;
	setp.eq.s32 	%p14, %r412, %r415;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r401, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r401, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r402, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r402, %r401;
	setp.gt.s32 	%p17, %r402, 256;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r403, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r402, %r401;
	and.b32  	%r416, %r6, 63;
	setp.ne.s32 	%p19, %r416, 0;
	setp.lt.s32 	%p20, %r403, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r404, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r404, %r403;
	setp.gt.s32 	%p23, %r404, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r417, %r404, %r403;
	and.b32  	%r418, %r417, 63;
	setp.eq.s32 	%p25, %r418, 0;
	setp.eq.s32 	%p26, %r417, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_13;
$L__BB0_198:                            // %pass162
	and.b32  	%r235, %r1, 3;
	shr.u32 	%r236, %r1, 2;
	mul.lo.s32 	%r419, %r235, %r236;
	and.b32  	%r420, %r419, 7;
	cvt.rn.f32.s32 	%f201, %r420;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p363, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_210;
// %bb.199:
	@%p363 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_200;
$L__BB0_206:
	mov.b32 	%r238, %f785;
	and.b32  	%r421, %r238, 8388607;
	or.b32  	%r3783, %r421, 1065353216;
	mov.b32 	%f780, %r3783;
	add.s32 	%r422, %r238, -1073741824;
	and.b32  	%r3784, %r422, -8388608;
	setp.eq.s32 	%p35, %r3784, 0;
	@%p35 bra 	$L__BB0_209;
// %bb.207:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_208:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r423, %r3784, 192937984;
	add.s32 	%r424, %r3783, %r423;
	mov.b32 	%f213, %r424;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3784, %r3784, %r423;
	mov.b32 	%r3783, %f780;
	setp.ne.s32 	%p36, %r3784, 0;
	setp.ne.s32 	%p37, %r3783, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_208;
$L__BB0_209:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r238, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_210;
$L__BB0_200:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r237, %f172;
	setp.lt.u32 	%p30, %r237, 1073741824;
	@%p30 bra 	$L__BB0_205;
// %bb.201:
	setp.lt.u32 	%p31, %r237, -2147483647;
	@%p31 bra 	$L__BB0_203;
// %bb.202:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_205;
$L__BB0_203:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_205;
// %bb.204:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_205:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_210:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r425, %f169;
	and.b32  	%r245, %r425, -2147483648;
	@%p40 bra 	$L__BB0_212;
// %bb.211:
	mov.b32 	%r426, %f781;
	or.b32  	%r427, %r245, %r426;
	mov.b32 	%f781, %r427;
$L__BB0_212:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r248, %r1, 1;
	and.b32  	%r249, %r248, 6;
	or.b32  	%r250, %r249, 1;
	setp.eq.s32 	%p48, %r249, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3680, %r249, %r236;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L487
	cvt.u16.u32 	%rs1, %r3680;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r443, %r8, 8388607;
	or.b32  	%r3684, %r443, 1065353216;
	mov.b32 	%f732, %r3684;
	add.s32 	%r444, %r8, -1073741824;
	and.b32  	%r3685, %r444, -8388608;
	setp.eq.s32 	%p56, %r3685, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r445, %r3685, 192937984;
	add.s32 	%r446, %r3684, %r445;
	mov.b32 	%f267, %r446;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3685, %r3685, %r445;
	mov.b32 	%r3684, %f732;
	setp.ne.s32 	%p57, %r3685, 0;
	setp.ne.s32 	%p58, %r3684, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i964
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r447, %f1;
	and.b32  	%r448, %r447, -2147483648;
	mov.b32 	%r449, %f733;
	or.b32  	%r450, %r448, %r449;
	mov.b32 	%f733, %r450;
$L__BB0_28:                             // %__nv_fmodf.exit991
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r451, %f277;
	and.b32  	%r452, %r451, -2147483648;
	or.b32  	%r453, %r452, 1056964608;
	mov.b32 	%f278, %r453;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r454, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r455, %r454, 1;
	setp.eq.b32 	%p64, %r455, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r456, %r454, 2;
	setp.eq.s32 	%p65, %r456, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r457, %r454, 1;
	and.b32  	%r458, %r457, 2;
	setp.eq.s32 	%p66, %r458, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L521
	setp.gt.u32 	%p69, %r250, 5;
	mul.lo.s32 	%r3681, %r250, %r236;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L525
	mul.hi.u32 	%r460, %r3681, -1431655765;
	shr.u32 	%r461, %r460, 5;
	mul.lo.s32 	%r462, %r461, 48;
	sub.s32 	%r463, %r3681, %r462;
	cvt.rn.f32.s32 	%f308, %r463;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r464, %r16, 8388607;
	or.b32  	%r3686, %r464, 1065353216;
	mov.b32 	%f738, %r3686;
	add.s32 	%r465, %r16, -1073741824;
	and.b32  	%r3687, %r465, -8388608;
	setp.eq.s32 	%p77, %r3687, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1016.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1016
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r466, %r3687, 192937984;
	add.s32 	%r467, %r3686, %r466;
	mov.b32 	%f320, %r467;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3687, %r3687, %r466;
	mov.b32 	%r3686, %f738;
	setp.ne.s32 	%p78, %r3687, 0;
	setp.ne.s32 	%p79, %r3686, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1018
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i995
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i999
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1002
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1021
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r468, %f22;
	and.b32  	%r469, %r468, -2147483648;
	mov.b32 	%r470, %f739;
	or.b32  	%r471, %r469, %r470;
	mov.b32 	%f739, %r471;
$L__BB0_44:                             // %__nv_fmodf.exit1022
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r472, %f330;
	and.b32  	%r473, %r472, -2147483648;
	or.b32  	%r474, %r473, 1056964608;
	mov.b32 	%f331, %r474;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r475, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r476, %r475, 1;
	setp.eq.b32 	%p85, %r476, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r477, %r475, 2;
	setp.eq.s32 	%p86, %r477, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r478, %r475, 1;
	and.b32  	%r479, %r478, 2;
	setp.eq.s32 	%p87, %r479, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L559
	setp.gt.u32 	%p91, %r1, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L597
	cvt.u16.u32 	%rs8, %r3680;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r487, %r26, 8388607;
	or.b32  	%r3688, %r487, 1065353216;
	mov.b32 	%f744, %r3688;
	add.s32 	%r488, %r26, -1073741824;
	and.b32  	%r3689, %r488, -8388608;
	setp.eq.s32 	%p99, %r3689, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1047.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1047
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r489, %r3689, 192937984;
	add.s32 	%r490, %r3688, %r489;
	mov.b32 	%f373, %r490;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3689, %r3689, %r489;
	mov.b32 	%r3688, %f744;
	setp.ne.s32 	%p100, %r3689, 0;
	setp.ne.s32 	%p101, %r3688, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1049
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1026
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1030
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1033
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1052
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r491, %f43;
	and.b32  	%r492, %r491, -2147483648;
	mov.b32 	%r493, %f745;
	or.b32  	%r494, %r492, %r493;
	mov.b32 	%f745, %r494;
$L__BB0_60:                             // %__nv_fmodf.exit1053
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r495, %f383;
	and.b32  	%r496, %r495, -2147483648;
	or.b32  	%r497, %r496, 1056964608;
	mov.b32 	%f384, %r497;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r498, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r499, %r498, 1;
	setp.eq.b32 	%p107, %r499, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r500, %r498, 2;
	setp.eq.s32 	%p108, %r500, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r501, %r498, 1;
	and.b32  	%r502, %r501, 2;
	setp.eq.s32 	%p109, %r502, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L631
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L639
	mul.hi.u32 	%r504, %r3681, -1431655765;
	shr.u32 	%r505, %r504, 2;
	mul.lo.s32 	%r506, %r505, 6;
	sub.s32 	%r507, %r3681, %r506;
	cvt.rn.f32.s32 	%f414, %r507;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r508, %r34, 8388607;
	or.b32  	%r3690, %r508, 1065353216;
	mov.b32 	%f750, %r3690;
	add.s32 	%r509, %r34, -1073741824;
	and.b32  	%r3691, %r509, -8388608;
	setp.eq.s32 	%p121, %r3691, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1078.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1078
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r510, %r3691, 192937984;
	add.s32 	%r511, %r3690, %r510;
	mov.b32 	%f426, %r511;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3691, %r3691, %r510;
	mov.b32 	%r3690, %f750;
	setp.ne.s32 	%p122, %r3691, 0;
	setp.ne.s32 	%p123, %r3690, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1080
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1057
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1061
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1064
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1083
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r512, %f64;
	and.b32  	%r513, %r512, -2147483648;
	mov.b32 	%r514, %f751;
	or.b32  	%r515, %r513, %r514;
	mov.b32 	%f751, %r515;
$L__BB0_76:                             // %__nv_fmodf.exit1084
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r516, %f436;
	and.b32  	%r517, %r516, -2147483648;
	or.b32  	%r518, %r517, 1056964608;
	mov.b32 	%f437, %r518;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r519, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r520, %r519, 1;
	setp.eq.b32 	%p129, %r520, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r521, %r519, 2;
	setp.eq.s32 	%p130, %r521, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r522, %r519, 1;
	and.b32  	%r523, %r522, 2;
	setp.eq.s32 	%p131, %r523, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L673
	@%p28 bra 	$L__BB0_220;
// %bb.78:
	@%p363 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_79;
$L__BB0_216:
	mov.b32 	%r252, %f785;
	and.b32  	%r536, %r252, 8388607;
	or.b32  	%r3785, %r536, 1065353216;
	mov.b32 	%f784, %r3785;
	add.s32 	%r537, %r252, -1073741824;
	and.b32  	%r3786, %r537, -8388608;
	setp.eq.s32 	%p141, %r3786, 0;
	@%p141 bra 	$L__BB0_219;
// %bb.217:                             // %__nv_fmaf_rn.exit4.i.i.i1109.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_218:                            // %__nv_fmaf_rn.exit4.i.i.i1109
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r538, %r3786, 192937984;
	add.s32 	%r539, %r3785, %r538;
	mov.b32 	%f476, %r539;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3786, %r3786, %r538;
	mov.b32 	%r3785, %f784;
	setp.ne.s32 	%p142, %r3786, 0;
	setp.ne.s32 	%p143, %r3785, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_218;
$L__BB0_219:                            // %__internal_fmodf_slowpath_mod.exit.i.i1111
	setp.gt.u32 	%p145, %r252, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_220;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1088
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r251, %f187;
	setp.lt.u32 	%p136, %r251, 1073741824;
	@%p136 bra 	$L__BB0_215;
// %bb.80:
	setp.lt.u32 	%p137, %r251, -2147483647;
	@%p137 bra 	$L__BB0_213;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_215;
$L__BB0_213:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_215;
// %bb.214:                             // %__nv_fmaf_rn.exit.i.i.i1092
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_215:                            // %__internal_fmodf_fastpath_quot.exit.i.i1095
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_220:                            // %__internal_fmodf_kernel.exit.i1114
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_222;
// %bb.221:
	mov.b32 	%r540, %f785;
	or.b32  	%r541, %r245, %r540;
	mov.b32 	%f785, %r541;
$L__BB0_222:                            // %__nv_fmodf.exit1115
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L775
	cvt.u16.u32 	%rs15, %r3680;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r557, %r46, 8388607;
	or.b32  	%r3692, %r557, 1065353216;
	mov.b32 	%f756, %r3692;
	add.s32 	%r558, %r46, -1073741824;
	and.b32  	%r3693, %r558, -8388608;
	setp.eq.s32 	%p162, %r3693, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1140.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1140
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r559, %r3693, 192937984;
	add.s32 	%r560, %r3692, %r559;
	mov.b32 	%f530, %r560;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3693, %r3693, %r559;
	mov.b32 	%r3692, %f756;
	setp.ne.s32 	%p163, %r3693, 0;
	setp.ne.s32 	%p164, %r3692, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1142
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1119
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1123
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1126
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1145
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r561, %f85;
	and.b32  	%r562, %r561, -2147483648;
	mov.b32 	%r563, %f757;
	or.b32  	%r564, %r562, %r563;
	mov.b32 	%f757, %r564;
$L__BB0_96:                             // %__nv_fmodf.exit1146
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r565, %f540;
	and.b32  	%r566, %r565, -2147483648;
	or.b32  	%r567, %r566, 1056964608;
	mov.b32 	%f541, %r567;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r568, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r569, %r568, 1;
	setp.eq.b32 	%p170, %r569, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r570, %r568, 2;
	setp.eq.s32 	%p171, %r570, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r571, %r568, 1;
	and.b32  	%r572, %r571, 2;
	setp.eq.s32 	%p172, %r572, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L813
	mul.hi.u32 	%r574, %r3681, -1431655765;
	shr.u32 	%r575, %r574, 5;
	mul.lo.s32 	%r576, %r575, 48;
	sub.s32 	%r577, %r3681, %r576;
	cvt.rn.f32.s32 	%f571, %r577;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r578, %r54, 8388607;
	or.b32  	%r3694, %r578, 1065353216;
	mov.b32 	%f762, %r3694;
	add.s32 	%r579, %r54, -1073741824;
	and.b32  	%r3695, %r579, -8388608;
	setp.eq.s32 	%p183, %r3695, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1171.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1171
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r580, %r3695, 192937984;
	add.s32 	%r581, %r3694, %r580;
	mov.b32 	%f583, %r581;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3695, %r3695, %r580;
	mov.b32 	%r3694, %f762;
	setp.ne.s32 	%p184, %r3695, 0;
	setp.ne.s32 	%p185, %r3694, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1173
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1150
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1154
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1157
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1176
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r582, %f106;
	and.b32  	%r583, %r582, -2147483648;
	mov.b32 	%r584, %f763;
	or.b32  	%r585, %r583, %r584;
	mov.b32 	%f763, %r585;
$L__BB0_112:                            // %__nv_fmodf.exit1177
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r586, %f593;
	and.b32  	%r587, %r586, -2147483648;
	or.b32  	%r588, %r587, 1056964608;
	mov.b32 	%f594, %r588;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r589, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r590, %r589, 1;
	setp.eq.b32 	%p191, %r590, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r591, %r589, 2;
	setp.eq.s32 	%p192, %r591, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r592, %r589, 1;
	and.b32  	%r593, %r592, 2;
	setp.eq.s32 	%p193, %r593, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L885
	cvt.u16.u32 	%rs22, %r3680;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r601, %r64, 8388607;
	or.b32  	%r3696, %r601, 1065353216;
	mov.b32 	%f768, %r3696;
	add.s32 	%r602, %r64, -1073741824;
	and.b32  	%r3697, %r602, -8388608;
	setp.eq.s32 	%p203, %r3697, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1202.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1202
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r603, %r3697, 192937984;
	add.s32 	%r604, %r3696, %r603;
	mov.b32 	%f636, %r604;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3697, %r3697, %r603;
	mov.b32 	%r3696, %f768;
	setp.ne.s32 	%p204, %r3697, 0;
	setp.ne.s32 	%p205, %r3696, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1204
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1181
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1185
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1188
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1207
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r605, %f127;
	and.b32  	%r606, %r605, -2147483648;
	mov.b32 	%r607, %f769;
	or.b32  	%r608, %r606, %r607;
	mov.b32 	%f769, %r608;
$L__BB0_128:                            // %__nv_fmodf.exit1208
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r609, %f646;
	and.b32  	%r610, %r609, -2147483648;
	or.b32  	%r611, %r610, 1056964608;
	mov.b32 	%f647, %r611;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r612, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r613, %r612, 1;
	setp.eq.b32 	%p211, %r613, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r614, %r612, 2;
	setp.eq.s32 	%p212, %r614, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r615, %r612, 1;
	and.b32  	%r616, %r615, 2;
	setp.eq.s32 	%p213, %r616, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L927
	mul.hi.u32 	%r618, %r3681, -1431655765;
	shr.u32 	%r619, %r618, 2;
	mul.lo.s32 	%r620, %r619, 6;
	sub.s32 	%r621, %r3681, %r620;
	cvt.rn.f32.s32 	%f677, %r621;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r622, %r72, 8388607;
	or.b32  	%r3698, %r622, 1065353216;
	mov.b32 	%f774, %r3698;
	add.s32 	%r623, %r72, -1073741824;
	and.b32  	%r3699, %r623, -8388608;
	setp.eq.s32 	%p223, %r3699, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1233.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1233
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r624, %r3699, 192937984;
	add.s32 	%r625, %r3698, %r624;
	mov.b32 	%f689, %r625;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3699, %r3699, %r624;
	mov.b32 	%r3698, %f774;
	setp.ne.s32 	%p224, %r3699, 0;
	setp.ne.s32 	%p225, %r3698, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1235
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1216
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1219
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1238
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r626, %f148;
	and.b32  	%r627, %r626, -2147483648;
	mov.b32 	%r628, %f775;
	or.b32  	%r629, %r627, %r628;
	mov.b32 	%f775, %r629;
$L__BB0_144:                            // %__nv_fmodf.exit1239
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r630, %f699;
	and.b32  	%r631, %r630, -2147483648;
	or.b32  	%r632, %r631, 1056964608;
	mov.b32 	%f700, %r632;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r633, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r634, %r633, 1;
	setp.eq.b32 	%p231, %r634, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r635, %r633, 2;
	setp.eq.s32 	%p232, %r635, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r636, %r633, 1;
	and.b32  	%r637, %r636, 2;
	setp.eq.s32 	%p233, %r637, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L961
	mov.u32 	%r261, 999999999;
	cvt.u16.u32 	%rs246, %r1;
	@%p91 bra 	$L__BB0_224;
// %bb.146:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs246, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs246, %rs33;
	cvt.u32.u16 	%r651, %rs34;
	and.b32  	%r652, %r651, 255;
	mad.lo.s32 	%r653, %r652, 24, %r3;
	cvt.u16.u32 	%rs35, %r653;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r654, %rs39;
	mul.wide.u32 	%rd34, %r654, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r655, [%rd35];
	shl.b32 	%r656, %r655, 16;
	cvt.s32.s16 	%r83, %r655;
	shr.s32 	%r84, %r655, 16;
	or.b32  	%r657, %r656, 65535;
	setp.lt.u32 	%p237, %r657, 1638399;
	setp.lt.u32 	%p238, %r655, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_147;
$L__BB0_223:                            // %L1237
	mul.lo.s32 	%r661, %r84, 801;
	mad.lo.s32 	%r261, %r83, 33, %r661;
$L__BB0_224:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r434, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r435, %r434, -2147483648;
	mov.b32 	%r548, %f487;
	or.b32  	%r436, %r435, 1056964608;
	and.b32  	%r549, %r548, -2147483648;
	mov.b32 	%f225, %r436;
	or.b32  	%r550, %r549, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r550;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r437, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r438, %r437, 1;
	cvt.rzi.s32.f32 	%r551, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r438, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r552, %r551, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r439, %r437, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r552, 1;
	setp.eq.s32 	%p44, %r439, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r440, %r437, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r553, %r551, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r441, %r440, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r553, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r554, %r551, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r441, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r555, %r554, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r555, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r430, %f254;
	mov.b32 	%r433, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r429, %r433, -2147483648;
	mov.b32 	%r525, %f62;
	mov.b32 	%r526, %f83;
	mov.b32 	%r531, %f63;
	mov.b32 	%r532, %f84;
	mov.b32 	%r544, %f517;
	mov.b32 	%r547, %f514;
	mov.b32 	%r481, %f20;
	mov.b32 	%r482, %f41;
	mov.b32 	%r484, %f21;
	mov.b32 	%r485, %f42;
	xor.b32  	%r528, %r531, -2147483648;
	xor.b32  	%r529, %r532, -2147483648;
	xor.b32  	%r543, %r547, -2147483648;
	mov.b32 	%r595, %f104;
	mov.b32 	%r596, %f125;
	mov.b32 	%r598, %f105;
	mov.b32 	%r599, %f126;
	mov.b32 	%r639, %f146;
	mov.b32 	%r640, %f167;
	mov.b32 	%r645, %f147;
	xor.b32  	%r642, %r645, -2147483648;
	mov.b32 	%r646, %f168;
	xor.b32  	%r643, %r646, -2147483648;
	and.b32  	%r662, %r1, 24;
	setp.ne.s32 	%p240, %r662, 24;
	cvt.u16.u32 	%rs247, %r236;
	mul.lo.s32 	%r3700, %r2, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.225:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs46, %rs247, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs247, %rs48;
	cvt.u32.u16 	%r668, %rs49;
	and.b32  	%r3701, %r668, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass529
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s16 	%rs41, %rs247, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs247, %rs43;
	cvt.u32.u16 	%r663, %rs44;
	and.b32  	%r3701, %r663, 255;
	or.b32  	%r664, %r3700, %r3;
	mad.lo.s32 	%r665, %r235, 144, %r664;
	mad.lo.s32 	%r666, %r3701, 24, %r665;
	mul.wide.u32 	%rd41, %r666, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r88, [%rd42];
	ld.global.u32 	%r89, [%rd42+2304];
$L__BB0_149:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r430;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r480, %r482, %r481;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r483, %r485, %r484;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r524, %r526, %r525;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r527, %r529, %r528;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r530, %r532, %r531;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r533, %r526, %r525;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r542, %r544, %r543;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r545, %r547, %r544;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r594, %r596, %r595;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r597, %r599, %r598;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r638, %r640, %r639;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r641, %r643, %r642;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r644, %r646, %r645;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r647, %r640, %r639;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r670, %r397, 16;
	shl.b32 	%r671, %r401, 8;
	add.s32 	%r90, %r671, %r670;
	shl.b32 	%r672, %r2, 8;
	shl.b32 	%r673, %r1, 3;
	and.b32  	%r674, %r673, 128;
	shl.b32 	%r675, %r1, 2;
	and.b32  	%r676, %r675, 60;
	or.b32  	%r677, %r674, %r672;
	or.b32  	%r91, %r677, %r676;
	or.b32  	%r678, %r675, %r672;
	or.b32  	%r679, %r678, %r674;
	or.b32  	%r92, %r679, 64;
	add.s32 	%r93, %r3, 24;
	shr.u32 	%r680, %r1, 4;
	and.b32  	%r681, %r248, 30;
	or.b32  	%r682, %r681, %r680;
	mul.lo.s32 	%r94, %r682, 257;
	or.b32  	%r683, %r248, %r680;
	or.b32  	%r684, %r683, 32;
	mul.lo.s32 	%r95, %r684, 257;
	and.b16  	%rs51, %rs246, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs246, %rs54;
	cvt.u32.u16 	%r685, %rs55;
	and.b32  	%r96, %r685, 255;
	and.b32  	%r686, %r4, 224;
	shr.u32 	%r687, %r3, 3;
	mad.lo.s32 	%r97, %r687, 257, %r686;
	shr.u32 	%r688, %r93, 3;
	mad.lo.s32 	%r98, %r688, 257, %r686;
	add.s32 	%r689, %r3, 48;
	shr.u32 	%r690, %r689, 3;
	mad.lo.s32 	%r99, %r690, 257, %r686;
	add.s32 	%r691, %r3, 72;
	shr.u32 	%r692, %r691, 3;
	mad.lo.s32 	%r100, %r692, 257, %r686;
	or.b32  	%r693, %r687, 12;
	mad.lo.s32 	%r101, %r693, 257, %r686;
	add.s32 	%r694, %r3, 120;
	shr.u32 	%r695, %r694, 3;
	mad.lo.s32 	%r102, %r695, 257, %r686;
	add.s32 	%r696, %r3, 144;
	shr.u32 	%r697, %r696, 3;
	mad.lo.s32 	%r103, %r697, 257, %r686;
	add.s32 	%r698, %r3, 168;
	shr.u32 	%r699, %r698, 3;
	mad.lo.s32 	%r104, %r699, 257, %r686;
	or.b32  	%r700, %r687, 24;
	mad.lo.s32 	%r105, %r700, 257, %r686;
	add.s32 	%r701, %r3, 216;
	shr.u32 	%r702, %r701, 3;
	mad.lo.s32 	%r106, %r702, 257, %r686;
	add.s32 	%r703, %r3, 240;
	shr.u32 	%r704, %r703, 3;
	mad.lo.s32 	%r107, %r704, 257, %r686;
	add.s32 	%r705, %r3, 264;
	shr.u32 	%r706, %r705, 3;
	mad.lo.s32 	%r108, %r706, 257, %r686;
	or.b32  	%r707, %r687, 36;
	mad.lo.s32 	%r109, %r707, 257, %r686;
	add.s32 	%r708, %r3, 312;
	shr.u32 	%r709, %r708, 3;
	mad.lo.s32 	%r110, %r709, 257, %r686;
	add.s32 	%r710, %r3, 336;
	shr.u32 	%r711, %r710, 3;
	mad.lo.s32 	%r111, %r711, 257, %r686;
	add.s32 	%r712, %r3, 360;
	shr.u32 	%r713, %r712, 3;
	mad.lo.s32 	%r112, %r713, 257, %r686;
	or.b32  	%r714, %r687, 48;
	mad.lo.s32 	%r113, %r714, 257, %r686;
	add.s32 	%r715, %r3, 408;
	shr.u32 	%r716, %r715, 3;
	mad.lo.s32 	%r114, %r716, 257, %r686;
	add.s32 	%r717, %r3, 432;
	shr.u32 	%r718, %r717, 3;
	mad.lo.s32 	%r115, %r718, 257, %r686;
	add.s32 	%r719, %r3, 456;
	shr.u32 	%r720, %r719, 3;
	mad.lo.s32 	%r116, %r720, 257, %r686;
	or.b32  	%r721, %r687, 60;
	mad.lo.s32 	%r117, %r721, 257, %r686;
	add.s32 	%r722, %r3, 504;
	bfe.u32 	%r723, %r722, 3, 6;
	mad.lo.s32 	%r118, %r723, 257, %r686;
	mul.lo.s32 	%r724, %r3, 33;
	mad.lo.s32 	%r725, %r235, 4806, %r724;
	mad.lo.s32 	%r726, %r3701, 801, %r725;
	bfe.s32 	%r727, %r3, 1, 1;
	and.b32  	%r728, %r727, 4112;
	shr.u32 	%r729, %r3, 4;
	bfe.s32 	%r730, %r3, 2, 1;
	and.b32  	%r731, %r730, 2056;
	mul.lo.s32 	%r732, %r235, 6;
	bfe.s32 	%r733, %r3, 3, 1;
	and.b32  	%r734, %r3, 8;
	setp.eq.s32 	%p241, %r734, 0;
	and.b32  	%r735, %r733, 1028;
	and.b32  	%r736, %r3, 1;
	neg.s32 	%r737, %r736;
	and.b32  	%r738, %r737, 8256;
	mad.lo.s32 	%r739, %r729, 514, %r732;
	add.s32 	%r740, %r739, %r728;
	add.s32 	%r741, %r740, %r731;
	add.s32 	%r742, %r741, %r735;
	add.s32 	%r743, %r742, %r738;
	add.s32 	%r744, %r743, %r3701;
	mul.wide.u32 	%rd43, %r744, 4;
	mov.u64 	%rd44, shmem;
	add.s64 	%rd7, %rd44, %rd43;
	shr.u32 	%r745, %r93, 5;
	bfe.s32 	%r746, %r93, 4, 1;
	and.b32  	%r747, %r746, 514;
	selp.b32 	%r748, 1028, 0, %p241;
	mad.lo.s32 	%r749, %r745, 257, %r732;
	add.s32 	%r750, %r749, %r728;
	add.s32 	%r751, %r750, %r731;
	add.s32 	%r752, %r751, %r748;
	add.s32 	%r753, %r752, %r738;
	add.s32 	%r754, %r753, %r747;
	add.s32 	%r755, %r754, %r3701;
	mul.wide.u32 	%rd45, %r755, 4;
	add.s64 	%rd8, %rd44, %rd45;
	add.s32 	%r756, %r744, 32;
	mul.wide.u32 	%rd46, %r756, 4;
	add.s64 	%rd9, %rd44, %rd46;
	add.s32 	%r757, %r755, 32;
	mul.wide.u32 	%rd47, %r757, 4;
	add.s64 	%rd10, %rd44, %rd47;
	mul.lo.s32 	%r758, %r399, 589824;
	mad.lo.s32 	%r759, %r403, 1152, %r758;
	mad.lo.s32 	%r760, %r3, 24, %r3700;
	add.s32 	%r119, %r760, %r96;
	cvt.s64.s32 	%rd11, %r759;
	cvt.u16.u32 	%rs56, %r93;
	and.b16  	%rs57, %rs56, 255;
	mul.lo.s16 	%rs58, %rs57, 171;
	shr.u16 	%rs59, %rs58, 13;
	mul.lo.s16 	%rs60, %rs59, 48;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.u32.u16 	%r761, %rs61;
	and.b32  	%r762, %r761, 255;
	or.b32  	%r763, %r3700, %r96;
	mad.lo.s32 	%r120, %r762, 24, %r763;
	mul.wide.u32 	%rd48, %r726, 4;
	add.s64 	%rd12, %rd44, %rd48;
	add.s32 	%r764, %r744, 64;
	mul.wide.u32 	%rd49, %r764, 4;
	add.s64 	%rd13, %rd44, %rd49;
	add.s32 	%r765, %r755, 64;
	mul.wide.u32 	%rd50, %r765, 4;
	add.s64 	%rd14, %rd44, %rd50;
	add.s32 	%r766, %r744, 96;
	mul.wide.u32 	%rd51, %r766, 4;
	add.s64 	%rd15, %rd44, %rd51;
	add.s32 	%r767, %r755, 96;
	mul.wide.u32 	%rd52, %r767, 4;
	add.s64 	%rd16, %rd44, %rd52;
	add.s32 	%r768, %r744, 128;
	mul.wide.u32 	%rd53, %r768, 4;
	add.s64 	%rd17, %rd44, %rd53;
	add.s32 	%r769, %r755, 128;
	mul.wide.u32 	%rd54, %r769, 4;
	add.s64 	%rd18, %rd44, %rd54;
	add.s32 	%r770, %r744, 160;
	mul.wide.u32 	%rd55, %r770, 4;
	add.s64 	%rd19, %rd44, %rd55;
	add.s32 	%r771, %r755, 160;
	mul.wide.u32 	%rd56, %r771, 4;
	add.s64 	%rd20, %rd44, %rd56;
	add.s32 	%r772, %r744, 192;
	mul.wide.u32 	%rd57, %r772, 4;
	add.s64 	%rd21, %rd44, %rd57;
	add.s32 	%r773, %r755, 192;
	mul.wide.u32 	%rd58, %r773, 4;
	add.s64 	%rd22, %rd44, %rd58;
	add.s32 	%r774, %r744, 224;
	mul.wide.u32 	%rd59, %r774, 4;
	add.s64 	%rd23, %rd44, %rd59;
	add.s32 	%r775, %r755, 224;
	mul.wide.u32 	%rd60, %r775, 4;
	add.s64 	%rd24, %rd44, %rd60;
	setp.lt.u32 	%p243, %r1, 16;
	setp.gt.u32 	%p272, %r3, 7;
	setp.lt.u32 	%p276, %r1, 24;
	mov.u32 	%r3734, %r121;
	mov.u32 	%r3735, %r121;
	mov.u32 	%r3736, %r121;
	mov.u32 	%r3737, %r121;
	bra.uni 	$L__BB0_150;
$L__BB0_196:                            // %L27973
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r234, %r121, 48;
	setp.ne.s32 	%p362, %r121, 432;
	mov.u32 	%r121, %r234;
	@%p362 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_197;
$L__BB0_150:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_187 Depth 2
	add.s32 	%r776, %r121, %r397;
	setp.lt.s32 	%p242, %r776, %r398;
	@%p242 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_197;
$L__BB0_151:                            // %oksrem676
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r969, %r121, -1431655765;
	shr.u32 	%r970, %r969, 5;
	mul.lo.s32 	%r268, %r970, 48;
	add.s32 	%r971, %r268, %r3;
	cvt.u16.u32 	%rs62, %r971;
	shr.s16 	%rs63, %rs62, 15;
	shr.u16 	%rs64, %rs63, 7;
	add.s16 	%rs65, %rs62, %rs64;
	and.b16  	%rs66, %rs65, -512;
	sub.s16 	%rs67, %rs62, %rs66;
	cvt.u32.u16 	%r972, %rs67;
	shl.b32 	%r973, %r972, 16;
	or.b32  	%r974, %r91, %r973;
	add.s32 	%r975, %r90, %r974;
	shr.s32 	%r976, %r975, 31;
	shr.u32 	%r977, %r976, 7;
	add.s32 	%r978, %r975, %r977;
	shr.s32 	%r979, %r978, 25;
	setp.lt.s32 	%p244, %r975, 0;
	and.b32  	%r980, %r978, -33554432;
	setp.ne.s32 	%p245, %r980, %r975;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r981, 1, 0, %p246;
	sub.s32 	%r982, %r981, %r979;
	shl.b32 	%r983, %r982, 25;
	add.s32 	%r984, %r983, %r975;
	mul.wide.s32 	%rd61, %r984, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r985, %r986, %r987, %r988}, [%rd62];
	or.b32  	%r989, %r92, %r973;
	add.s32 	%r990, %r90, %r989;
	shr.s32 	%r991, %r990, 31;
	shr.u32 	%r992, %r991, 7;
	add.s32 	%r993, %r990, %r992;
	shr.u32 	%r994, %r993, 25;
	shr.u32 	%r995, %r990, 31;
	sub.s32 	%r996, %r995, %r994;
	shl.b32 	%r997, %r996, 25;
	add.s32 	%r998, %r997, %r990;
	mul.wide.s32 	%rd63, %r998, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r999, %r1000, %r1001, %r1002}, [%rd64];
	add.s32 	%r1003, %r93, %r268;
	cvt.u16.u32 	%rs68, %r1003;
	shr.s16 	%rs69, %rs68, 15;
	shr.u16 	%rs70, %rs69, 7;
	add.s16 	%rs71, %rs68, %rs70;
	and.b16  	%rs72, %rs71, -512;
	sub.s16 	%rs73, %rs68, %rs72;
	cvt.u32.u16 	%r1004, %rs73;
	shl.b32 	%r1005, %r1004, 16;
	or.b32  	%r1006, %r91, %r1005;
	add.s32 	%r1007, %r90, %r1006;
	shr.s32 	%r1008, %r1007, 31;
	shr.u32 	%r1009, %r1008, 7;
	add.s32 	%r1010, %r1007, %r1009;
	shr.s32 	%r1011, %r1010, 25;
	setp.lt.s32 	%p247, %r1007, 0;
	and.b32  	%r1012, %r1010, -33554432;
	setp.ne.s32 	%p248, %r1012, %r1007;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r1013, 1, 0, %p249;
	sub.s32 	%r1014, %r1013, %r1011;
	shl.b32 	%r1015, %r1014, 25;
	add.s32 	%r1016, %r1015, %r1007;
	mul.wide.s32 	%rd65, %r1016, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r1017, %r1018, %r1019, %r1020}, [%rd66];
	or.b32  	%r1021, %r92, %r1005;
	add.s32 	%r1022, %r90, %r1021;
	shr.s32 	%r1023, %r1022, 31;
	shr.u32 	%r1024, %r1023, 7;
	add.s32 	%r1025, %r1022, %r1024;
	shr.u32 	%r1026, %r1025, 25;
	shr.u32 	%r1027, %r1022, 31;
	sub.s32 	%r1028, %r1027, %r1026;
	shl.b32 	%r1029, %r1028, 25;
	add.s32 	%r1030, %r1029, %r1022;
	mul.wide.s32 	%rd67, %r1030, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r1031, %r1032, %r1033, %r1034}, [%rd68];
	selp.b32 	%r1035, %r987, %r985, %p243;
	shfl.sync.bfly.b32	%r1036, %r1035, 16, 31, -1;
	selp.b32 	%r779, %r985, %r1036, %p243;
	selp.b32 	%r784, %r1036, %r987, %p243;
	selp.b32 	%r1037, %r988, %r986, %p243;
	shfl.sync.bfly.b32	%r1038, %r1037, 16, 31, -1;
	selp.b32 	%r787, %r986, %r1038, %p243;
	selp.b32 	%r792, %r1038, %r988, %p243;
	selp.b32 	%r1039, %r1001, %r999, %p243;
	shfl.sync.bfly.b32	%r1040, %r1039, 16, 31, -1;
	selp.b32 	%r795, %r999, %r1040, %p243;
	selp.b32 	%r800, %r1040, %r1001, %p243;
	selp.b32 	%r1041, %r1002, %r1000, %p243;
	shfl.sync.bfly.b32	%r1042, %r1041, 16, 31, -1;
	selp.b32 	%r803, %r1000, %r1042, %p243;
	selp.b32 	%r808, %r1042, %r1002, %p243;
	selp.b32 	%r1043, %r1019, %r1017, %p243;
	shfl.sync.bfly.b32	%r1044, %r1043, 16, 31, -1;
	selp.b32 	%r811, %r1017, %r1044, %p243;
	selp.b32 	%r816, %r1044, %r1019, %p243;
	selp.b32 	%r1045, %r1020, %r1018, %p243;
	shfl.sync.bfly.b32	%r1046, %r1045, 16, 31, -1;
	selp.b32 	%r819, %r1018, %r1046, %p243;
	selp.b32 	%r824, %r1046, %r1020, %p243;
	selp.b32 	%r1047, %r1033, %r1031, %p243;
	shfl.sync.bfly.b32	%r1048, %r1047, 16, 31, -1;
	selp.b32 	%r827, %r1031, %r1048, %p243;
	selp.b32 	%r832, %r1048, %r1033, %p243;
	selp.b32 	%r1049, %r1034, %r1032, %p243;
	shfl.sync.bfly.b32	%r1050, %r1049, 16, 31, -1;
	selp.b32 	%r835, %r1032, %r1050, %p243;
	selp.b32 	%r840, %r1050, %r1034, %p243;
	shl.b32 	%r780, %r784, 4;
	mov.u32 	%r778, 252645135;
	// begin inline asm
	lop3.b32 %r842, %r778, %r779, %r780, 202;
	// end inline asm
	shr.u32 	%r783, %r779, 4;
	// begin inline asm
	lop3.b32 %r858, %r778, %r783, %r784, 202;
	// end inline asm
	shl.b32 	%r788, %r792, 4;
	// begin inline asm
	lop3.b32 %r850, %r778, %r787, %r788, 202;
	// end inline asm
	shr.u32 	%r791, %r787, 4;
	// begin inline asm
	lop3.b32 %r866, %r778, %r791, %r792, 202;
	// end inline asm
	shl.b32 	%r796, %r800, 4;
	// begin inline asm
	lop3.b32 %r874, %r778, %r795, %r796, 202;
	// end inline asm
	shr.u32 	%r799, %r795, 4;
	// begin inline asm
	lop3.b32 %r890, %r778, %r799, %r800, 202;
	// end inline asm
	shl.b32 	%r804, %r808, 4;
	// begin inline asm
	lop3.b32 %r882, %r778, %r803, %r804, 202;
	// end inline asm
	shr.u32 	%r807, %r803, 4;
	// begin inline asm
	lop3.b32 %r898, %r778, %r807, %r808, 202;
	// end inline asm
	shl.b32 	%r812, %r816, 4;
	// begin inline asm
	lop3.b32 %r843, %r778, %r811, %r812, 202;
	// end inline asm
	shr.u32 	%r815, %r811, 4;
	// begin inline asm
	lop3.b32 %r859, %r778, %r815, %r816, 202;
	// end inline asm
	shl.b32 	%r820, %r824, 4;
	// begin inline asm
	lop3.b32 %r851, %r778, %r819, %r820, 202;
	// end inline asm
	shr.u32 	%r823, %r819, 4;
	// begin inline asm
	lop3.b32 %r867, %r778, %r823, %r824, 202;
	// end inline asm
	shl.b32 	%r828, %r832, 4;
	// begin inline asm
	lop3.b32 %r875, %r778, %r827, %r828, 202;
	// end inline asm
	shr.u32 	%r831, %r827, 4;
	// begin inline asm
	lop3.b32 %r891, %r778, %r831, %r832, 202;
	// end inline asm
	shl.b32 	%r836, %r840, 4;
	// begin inline asm
	lop3.b32 %r883, %r778, %r835, %r836, 202;
	// end inline asm
	shr.u32 	%r839, %r835, 4;
	// begin inline asm
	lop3.b32 %r899, %r778, %r839, %r840, 202;
	// end inline asm
	mov.u32 	%r844, 25152;
	// begin inline asm
	prmt.b32 %r906, %r842, %r843, %r844;
	// end inline asm
	mov.u32 	%r848, 29521;
	// begin inline asm
	prmt.b32 %r938, %r842, %r843, %r848;
	// end inline asm
	// begin inline asm
	prmt.b32 %r914, %r850, %r851, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r946, %r850, %r851, %r848;
	// end inline asm
	// begin inline asm
	prmt.b32 %r907, %r858, %r859, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r939, %r858, %r859, %r848;
	// end inline asm
	// begin inline asm
	prmt.b32 %r915, %r866, %r867, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r947, %r866, %r867, %r848;
	// end inline asm
	// begin inline asm
	prmt.b32 %r922, %r874, %r875, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r954, %r874, %r875, %r848;
	// end inline asm
	// begin inline asm
	prmt.b32 %r930, %r882, %r883, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r962, %r882, %r883, %r848;
	// end inline asm
	// begin inline asm
	prmt.b32 %r923, %r890, %r891, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r955, %r890, %r891, %r848;
	// end inline asm
	// begin inline asm
	prmt.b32 %r931, %r898, %r899, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r963, %r898, %r899, %r848;
	// end inline asm
	mov.u32 	%r908, 21520;
	// begin inline asm
	prmt.b32 %r905, %r906, %r907, %r908;
	// end inline asm
	mov.u32 	%r912, 30258;
	// begin inline asm
	prmt.b32 %r909, %r906, %r907, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r914, %r915, %r908;
	// end inline asm
	// begin inline asm
	prmt.b32 %r917, %r914, %r915, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r921, %r922, %r923, %r908;
	// end inline asm
	// begin inline asm
	prmt.b32 %r925, %r922, %r923, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r930, %r931, %r908;
	// end inline asm
	// begin inline asm
	prmt.b32 %r933, %r930, %r931, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r937, %r938, %r939, %r908;
	// end inline asm
	// begin inline asm
	prmt.b32 %r941, %r938, %r939, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r945, %r946, %r947, %r908;
	// end inline asm
	// begin inline asm
	prmt.b32 %r949, %r946, %r947, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r953, %r954, %r955, %r908;
	// end inline asm
	// begin inline asm
	prmt.b32 %r957, %r954, %r955, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r961, %r962, %r963, %r908;
	// end inline asm
	// begin inline asm
	prmt.b32 %r965, %r962, %r963, %r912;
	// end inline asm
	mul.hi.s16 	%rs74, %rs62, 10923;
	shr.u16 	%rs75, %rs74, 15;
	shr.s16 	%rs76, %rs74, 2;
	add.s16 	%rs77, %rs76, %rs75;
	mul.lo.s16 	%rs78, %rs77, 24;
	sub.s16 	%rs79, %rs62, %rs78;
	cvt.s32.s16 	%r1051, %rs79;
	add.s32 	%r1052, %r94, %r1051;
	mul.wide.s32 	%rd69, %r1052, 4;
	add.s64 	%rd71, %rd44, %rd69;
	st.shared.u32 	[%rd71], %r905;
	add.s32 	%r1053, %r1052, 128;
	mul.wide.u32 	%rd72, %r1053, 4;
	add.s64 	%rd73, %rd44, %rd72;
	st.shared.u32 	[%rd73], %r913;
	add.s32 	%r1054, %r1052, 64;
	mul.wide.u32 	%rd74, %r1054, 4;
	add.s64 	%rd75, %rd44, %rd74;
	st.shared.u32 	[%rd75], %r909;
	add.s32 	%r1055, %r1052, 192;
	mul.wide.u32 	%rd76, %r1055, 4;
	add.s64 	%rd77, %rd44, %rd76;
	st.shared.u32 	[%rd77], %r917;
	add.s32 	%r1056, %r95, %r1051;
	mul.wide.u32 	%rd78, %r1056, 4;
	add.s64 	%rd79, %rd44, %rd78;
	st.shared.u32 	[%rd79], %r921;
	add.s32 	%r1057, %r1056, 128;
	mul.wide.u32 	%rd80, %r1057, 4;
	add.s64 	%rd81, %rd44, %rd80;
	st.shared.u32 	[%rd81], %r929;
	add.s32 	%r1058, %r1056, 64;
	mul.wide.u32 	%rd82, %r1058, 4;
	add.s64 	%rd83, %rd44, %rd82;
	st.shared.u32 	[%rd83], %r925;
	add.s32 	%r1059, %r1056, 192;
	mul.wide.u32 	%rd84, %r1059, 4;
	add.s64 	%rd85, %rd44, %rd84;
	st.shared.u32 	[%rd85], %r933;
	add.s32 	%r1060, %r1052, 32;
	mul.wide.u32 	%rd86, %r1060, 4;
	add.s64 	%rd87, %rd44, %rd86;
	st.shared.u32 	[%rd87], %r937;
	add.s32 	%r1061, %r1052, 160;
	mul.wide.u32 	%rd88, %r1061, 4;
	add.s64 	%rd89, %rd44, %rd88;
	st.shared.u32 	[%rd89], %r945;
	add.s32 	%r1062, %r1052, 96;
	mul.wide.u32 	%rd90, %r1062, 4;
	add.s64 	%rd91, %rd44, %rd90;
	st.shared.u32 	[%rd91], %r941;
	add.s32 	%r1063, %r1052, 224;
	mul.wide.u32 	%rd92, %r1063, 4;
	add.s64 	%rd93, %rd44, %rd92;
	st.shared.u32 	[%rd93], %r949;
	add.s32 	%r1064, %r1056, 32;
	mul.wide.u32 	%rd94, %r1064, 4;
	add.s64 	%rd95, %rd44, %rd94;
	st.shared.u32 	[%rd95], %r953;
	add.s32 	%r1065, %r1056, 160;
	mul.wide.u32 	%rd96, %r1065, 4;
	add.s64 	%rd97, %rd44, %rd96;
	st.shared.u32 	[%rd97], %r961;
	add.s32 	%r1066, %r1056, 96;
	mul.wide.u32 	%rd98, %r1066, 4;
	add.s64 	%rd99, %rd44, %rd98;
	st.shared.u32 	[%rd99], %r957;
	add.s32 	%r1067, %r1056, 224;
	mul.wide.u32 	%rd100, %r1067, 4;
	add.s64 	%rd101, %rd44, %rd100;
	st.shared.u32 	[%rd101], %r965;
	bar.sync 	0;
	add.s32 	%r1068, %r268, %r96;
	cvt.u16.u32 	%rs80, %r1068;
	mul.hi.s16 	%rs81, %rs80, 10923;
	shr.u16 	%rs82, %rs81, 15;
	shr.s16 	%rs83, %rs81, 2;
	add.s16 	%rs84, %rs83, %rs82;
	mul.lo.s16 	%rs85, %rs84, 24;
	sub.s16 	%rs86, %rs80, %rs85;
	cvt.s32.s16 	%r269, %rs86;
	add.s32 	%r1069, %r97, %r269;
	mul.wide.s32 	%rd102, %r1069, 4;
	add.s64 	%rd103, %rd44, %rd102;
	ld.shared.u32 	%r270, [%rd103];
	add.s32 	%r1070, %r98, %r269;
	mul.wide.u32 	%rd104, %r1070, 4;
	add.s64 	%rd105, %rd44, %rd104;
	ld.shared.u32 	%r271, [%rd105];
	add.s32 	%r1071, %r99, %r269;
	mul.wide.u32 	%rd106, %r1071, 4;
	add.s64 	%rd107, %rd44, %rd106;
	ld.shared.u32 	%r272, [%rd107];
	add.s32 	%r1072, %r100, %r269;
	mul.wide.u32 	%rd108, %r1072, 4;
	add.s64 	%rd109, %rd44, %rd108;
	ld.shared.u32 	%r273, [%rd109];
	add.s32 	%r1073, %r101, %r269;
	mul.wide.u32 	%rd110, %r1073, 4;
	add.s64 	%rd111, %rd44, %rd110;
	ld.shared.u32 	%r274, [%rd111];
	add.s32 	%r1074, %r102, %r269;
	mul.wide.u32 	%rd112, %r1074, 4;
	add.s64 	%rd113, %rd44, %rd112;
	ld.shared.u32 	%r275, [%rd113];
	add.s32 	%r1075, %r103, %r269;
	mul.wide.u32 	%rd114, %r1075, 4;
	add.s64 	%rd115, %rd44, %rd114;
	ld.shared.u32 	%r276, [%rd115];
	add.s32 	%r1076, %r104, %r269;
	mul.wide.u32 	%rd116, %r1076, 4;
	add.s64 	%rd117, %rd44, %rd116;
	ld.shared.u32 	%r277, [%rd117];
	add.s32 	%r1077, %r105, %r269;
	mul.wide.u32 	%rd118, %r1077, 4;
	add.s64 	%rd119, %rd44, %rd118;
	ld.shared.u32 	%r278, [%rd119];
	add.s32 	%r1078, %r106, %r269;
	mul.wide.u32 	%rd120, %r1078, 4;
	add.s64 	%rd121, %rd44, %rd120;
	ld.shared.u32 	%r279, [%rd121];
	add.s32 	%r1079, %r107, %r269;
	mul.wide.u32 	%rd122, %r1079, 4;
	add.s64 	%rd123, %rd44, %rd122;
	ld.shared.u32 	%r280, [%rd123];
	add.s32 	%r1080, %r108, %r269;
	mul.wide.u32 	%rd124, %r1080, 4;
	add.s64 	%rd125, %rd44, %rd124;
	ld.shared.u32 	%r281, [%rd125];
	add.s32 	%r1081, %r109, %r269;
	mul.wide.u32 	%rd126, %r1081, 4;
	add.s64 	%rd127, %rd44, %rd126;
	ld.shared.u32 	%r282, [%rd127];
	add.s32 	%r1082, %r110, %r269;
	mul.wide.u32 	%rd128, %r1082, 4;
	add.s64 	%rd129, %rd44, %rd128;
	ld.shared.u32 	%r283, [%rd129];
	add.s32 	%r1083, %r111, %r269;
	mul.wide.u32 	%rd130, %r1083, 4;
	add.s64 	%rd131, %rd44, %rd130;
	ld.shared.u32 	%r284, [%rd131];
	add.s32 	%r1084, %r112, %r269;
	mul.wide.u32 	%rd132, %r1084, 4;
	add.s64 	%rd133, %rd44, %rd132;
	ld.shared.u32 	%r285, [%rd133];
	add.s32 	%r1085, %r113, %r269;
	mul.wide.u32 	%rd134, %r1085, 4;
	add.s64 	%rd135, %rd44, %rd134;
	ld.shared.u32 	%r286, [%rd135];
	add.s32 	%r1086, %r114, %r269;
	mul.wide.u32 	%rd136, %r1086, 4;
	add.s64 	%rd137, %rd44, %rd136;
	ld.shared.u32 	%r287, [%rd137];
	add.s32 	%r1087, %r115, %r269;
	mul.wide.u32 	%rd138, %r1087, 4;
	add.s64 	%rd139, %rd44, %rd138;
	ld.shared.u32 	%r288, [%rd139];
	add.s32 	%r1088, %r116, %r269;
	mul.wide.u32 	%rd140, %r1088, 4;
	add.s64 	%rd141, %rd44, %rd140;
	ld.shared.u32 	%r289, [%rd141];
	add.s32 	%r1089, %r117, %r269;
	mul.wide.u32 	%rd142, %r1089, 4;
	add.s64 	%rd143, %rd44, %rd142;
	ld.shared.u32 	%r290, [%rd143];
	add.s32 	%r1090, %r118, %r269;
	mul.wide.s32 	%rd144, %r1090, 4;
	add.s64 	%rd145, %rd44, %rd144;
	ld.shared.u32 	%r291, [%rd145];
	bar.sync 	0;
	shfl.sync.idx.b32	%r292, %r261, 0, 31, -1;
	shfl.sync.idx.b32	%r293, %r261, 1, 31, -1;
	shfl.sync.idx.b32	%r294, %r261, 2, 31, -1;
	shfl.sync.idx.b32	%r295, %r261, 3, 31, -1;
	shfl.sync.idx.b32	%r296, %r261, 4, 31, -1;
	shfl.sync.idx.b32	%r297, %r261, 5, 31, -1;
	shfl.sync.idx.b32	%r298, %r261, 6, 31, -1;
	shfl.sync.idx.b32	%r299, %r261, 7, 31, -1;
	shfl.sync.idx.b32	%r300, %r261, 8, 31, -1;
	shfl.sync.idx.b32	%r301, %r261, 9, 31, -1;
	shfl.sync.idx.b32	%r302, %r261, 10, 31, -1;
	shfl.sync.idx.b32	%r303, %r261, 11, 31, -1;
	shfl.sync.idx.b32	%r304, %r261, 12, 31, -1;
	shfl.sync.idx.b32	%r305, %r261, 13, 31, -1;
	shfl.sync.idx.b32	%r306, %r261, 14, 31, -1;
	shfl.sync.idx.b32	%r307, %r261, 15, 31, -1;
	shfl.sync.idx.b32	%r308, %r261, 16, 31, -1;
	shfl.sync.idx.b32	%r309, %r261, 17, 31, -1;
	shfl.sync.idx.b32	%r310, %r261, 18, 31, -1;
	shfl.sync.idx.b32	%r311, %r261, 19, 31, -1;
	shfl.sync.idx.b32	%r312, %r261, 20, 31, -1;
	shfl.sync.idx.b32	%r313, %r261, 21, 31, -1;
	shfl.sync.idx.b32	%r314, %r261, 22, 31, -1;
	shfl.sync.idx.b32	%r315, %r261, 23, 31, -1;
	setp.eq.s32 	%p250, %r292, 999999999;
	@%p250 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3332
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1091, %r292, %r269;
	mul.wide.s32 	%rd146, %r1091, 4;
	add.s64 	%rd148, %rd44, %rd146;
	st.shared.u32 	[%rd148], %r270;
	setp.eq.s32 	%p251, %r293, 999999999;
	@%p251 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3400
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1092, %r293, %r269;
	mul.wide.s32 	%rd149, %r1092, 4;
	add.s64 	%rd151, %rd44, %rd149;
	st.shared.u32 	[%rd151], %r271;
	setp.eq.s32 	%p252, %r294, 999999999;
	@%p252 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3468
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1093, %r294, %r269;
	mul.wide.s32 	%rd152, %r1093, 4;
	add.s64 	%rd154, %rd44, %rd152;
	st.shared.u32 	[%rd154], %r272;
	setp.eq.s32 	%p253, %r295, 999999999;
	@%p253 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3536
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1094, %r295, %r269;
	mul.wide.s32 	%rd155, %r1094, 4;
	add.s64 	%rd157, %rd44, %rd155;
	st.shared.u32 	[%rd157], %r273;
	setp.eq.s32 	%p254, %r296, 999999999;
	@%p254 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3604
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1095, %r296, %r269;
	mul.wide.s32 	%rd158, %r1095, 4;
	add.s64 	%rd160, %rd44, %rd158;
	st.shared.u32 	[%rd160], %r274;
	setp.eq.s32 	%p255, %r297, 999999999;
	@%p255 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3672
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1096, %r297, %r269;
	mul.wide.s32 	%rd161, %r1096, 4;
	add.s64 	%rd163, %rd44, %rd161;
	st.shared.u32 	[%rd163], %r275;
	setp.eq.s32 	%p256, %r298, 999999999;
	@%p256 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3740
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1097, %r298, %r269;
	mul.wide.s32 	%rd164, %r1097, 4;
	add.s64 	%rd166, %rd44, %rd164;
	st.shared.u32 	[%rd166], %r276;
	setp.eq.s32 	%p257, %r299, 999999999;
	@%p257 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3808
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1098, %r299, %r269;
	mul.wide.s32 	%rd167, %r1098, 4;
	add.s64 	%rd169, %rd44, %rd167;
	st.shared.u32 	[%rd169], %r277;
	setp.eq.s32 	%p258, %r300, 999999999;
	@%p258 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3876
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1099, %r300, %r269;
	mul.wide.s32 	%rd170, %r1099, 4;
	add.s64 	%rd172, %rd44, %rd170;
	st.shared.u32 	[%rd172], %r278;
	setp.eq.s32 	%p259, %r301, 999999999;
	@%p259 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem3944
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1100, %r301, %r269;
	mul.wide.s32 	%rd173, %r1100, 4;
	add.s64 	%rd175, %rd44, %rd173;
	st.shared.u32 	[%rd175], %r279;
	setp.eq.s32 	%p260, %r302, 999999999;
	@%p260 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4012
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1101, %r302, %r269;
	mul.wide.s32 	%rd176, %r1101, 4;
	add.s64 	%rd178, %rd44, %rd176;
	st.shared.u32 	[%rd178], %r280;
	setp.eq.s32 	%p261, %r303, 999999999;
	@%p261 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4080
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1102, %r303, %r269;
	mul.wide.s32 	%rd179, %r1102, 4;
	add.s64 	%rd181, %rd44, %rd179;
	st.shared.u32 	[%rd181], %r281;
	setp.eq.s32 	%p262, %r304, 999999999;
	@%p262 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4148
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1103, %r304, %r269;
	mul.wide.s32 	%rd182, %r1103, 4;
	add.s64 	%rd184, %rd44, %rd182;
	st.shared.u32 	[%rd184], %r282;
	setp.eq.s32 	%p263, %r305, 999999999;
	@%p263 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4216
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1104, %r305, %r269;
	mul.wide.s32 	%rd185, %r1104, 4;
	add.s64 	%rd187, %rd44, %rd185;
	st.shared.u32 	[%rd187], %r283;
	setp.eq.s32 	%p264, %r306, 999999999;
	@%p264 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4284
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1105, %r306, %r269;
	mul.wide.s32 	%rd188, %r1105, 4;
	add.s64 	%rd190, %rd44, %rd188;
	st.shared.u32 	[%rd190], %r284;
	setp.eq.s32 	%p265, %r307, 999999999;
	@%p265 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4352
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1106, %r307, %r269;
	mul.wide.s32 	%rd191, %r1106, 4;
	add.s64 	%rd193, %rd44, %rd191;
	st.shared.u32 	[%rd193], %r285;
	setp.eq.s32 	%p266, %r308, 999999999;
	@%p266 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4420
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1107, %r308, %r269;
	mul.wide.s32 	%rd194, %r1107, 4;
	add.s64 	%rd196, %rd44, %rd194;
	st.shared.u32 	[%rd196], %r286;
	setp.eq.s32 	%p267, %r309, 999999999;
	@%p267 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4488
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1108, %r309, %r269;
	mul.wide.s32 	%rd197, %r1108, 4;
	add.s64 	%rd199, %rd44, %rd197;
	st.shared.u32 	[%rd199], %r287;
	setp.eq.s32 	%p268, %r310, 999999999;
	@%p268 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4556
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1109, %r310, %r269;
	mul.wide.s32 	%rd200, %r1109, 4;
	add.s64 	%rd202, %rd44, %rd200;
	st.shared.u32 	[%rd202], %r288;
	setp.eq.s32 	%p269, %r311, 999999999;
	@%p269 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4624
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1110, %r311, %r269;
	mul.wide.s32 	%rd203, %r1110, 4;
	add.s64 	%rd205, %rd44, %rd203;
	st.shared.u32 	[%rd205], %r289;
	setp.eq.s32 	%p270, %r312, 999999999;
	@%p270 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4692
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1111, %r312, %r269;
	mul.wide.s32 	%rd206, %r1111, 4;
	add.s64 	%rd208, %rd44, %rd206;
	st.shared.u32 	[%rd208], %r290;
	setp.eq.s32 	%p271, %r313, 999999999;
	@%p271 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4761
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1112, 0, %r291, %p272;
	add.s32 	%r1113, %r313, %r269;
	mul.wide.s32 	%rd209, %r1113, 4;
	add.s64 	%rd211, %rd44, %rd209;
	st.shared.u32 	[%rd211], %r1112;
	setp.eq.s32 	%p273, %r314, 999999999;
	@%p273 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4829
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1114, %r314, %r269;
	mul.wide.s32 	%rd212, %r1114, 4;
	add.s64 	%rd214, %rd44, %rd212;
	mov.u32 	%r3709, 0;
	st.shared.u32 	[%rd214], %r3709;
	setp.eq.s32 	%p274, %r315, 999999999;
	@%p274 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4896
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1117, %r315, %r269;
	mul.wide.s32 	%rd215, %r1117, 4;
	add.s64 	%rd217, %rd44, %rd215;
	st.shared.u32 	[%rd217], %r3709;
	bar.sync 	0;
	mov.u32 	%r3710, %r3709;
	mov.u32 	%r3711, %r3709;
	mov.u32 	%r3712, %r3709;
	mov.u32 	%r3713, %r3709;
	mov.u32 	%r3714, %r3709;
	mov.u32 	%r3715, %r3709;
	mov.u32 	%r3716, %r3709;
	mov.u32 	%r3717, %r3709;
	mov.u32 	%r3718, %r3709;
	mov.u32 	%r3719, %r3709;
	mov.u32 	%r3720, %r3709;
	mov.u32 	%r3721, %r3709;
	mov.u32 	%r3722, %r3709;
	mov.u32 	%r3723, %r3709;
	mov.u32 	%r3724, %r3709;
	mov.u32 	%r3725, %r3709;
	mov.u32 	%r3726, %r3709;
	mov.u32 	%r3727, %r3709;
	mov.u32 	%r3728, %r3709;
	mov.u32 	%r3729, %r3709;
	mov.u32 	%r3730, %r3709;
	mov.u32 	%r3731, %r3709;
	mov.u32 	%r3732, %r3709;
	@%p91 bra 	$L__BB0_176;
// %bb.250:                             // %oksrem4970
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs87, %r268;
	mul.hi.s16 	%rs88, %rs87, 10923;
	shr.u16 	%rs89, %rs88, 15;
	shr.s16 	%rs90, %rs88, 2;
	add.s16 	%rs91, %rs90, %rs89;
	mul.lo.s16 	%rs92, %rs91, 24;
	sub.s16 	%rs93, %rs87, %rs92;
	cvt.s32.s16 	%r1118, %rs93;
	mul.wide.s32 	%rd218, %r1118, 4;
	add.s64 	%rd219, %rd12, %rd218;
	ld.shared.u32 	%r3709, [%rd219];
	ld.shared.u32 	%r3710, [%rd12+4];
	ld.shared.u32 	%r3711, [%rd12+8];
	ld.shared.u32 	%r3712, [%rd12+12];
	ld.shared.u32 	%r3713, [%rd12+16];
	ld.shared.u32 	%r3714, [%rd12+20];
	ld.shared.u32 	%r3715, [%rd12+24];
	ld.shared.u32 	%r3716, [%rd12+28];
	ld.shared.u32 	%r3717, [%rd12+32];
	ld.shared.u32 	%r3718, [%rd12+36];
	ld.shared.u32 	%r3719, [%rd12+40];
	ld.shared.u32 	%r3720, [%rd12+44];
	ld.shared.u32 	%r3721, [%rd12+48];
	ld.shared.u32 	%r3722, [%rd12+52];
	ld.shared.u32 	%r3723, [%rd12+56];
	ld.shared.u32 	%r3724, [%rd12+60];
	add.s16 	%rs94, %rs87, 16;
	mul.hi.s16 	%rs95, %rs94, 10923;
	shr.u16 	%rs96, %rs95, 15;
	shr.s16 	%rs97, %rs95, 2;
	add.s16 	%rs98, %rs97, %rs96;
	mul.lo.s16 	%rs99, %rs98, 24;
	sub.s16 	%rs100, %rs94, %rs99;
	cvt.s32.s16 	%r1119, %rs100;
	mul.wide.s32 	%rd220, %r1119, 4;
	add.s64 	%rd221, %rd12, %rd220;
	ld.shared.u32 	%r3725, [%rd221];
	add.s16 	%rs101, %rs87, 17;
	mul.hi.s16 	%rs102, %rs101, 10923;
	shr.u16 	%rs103, %rs102, 15;
	shr.s16 	%rs104, %rs102, 2;
	add.s16 	%rs105, %rs104, %rs103;
	mul.lo.s16 	%rs106, %rs105, 24;
	sub.s16 	%rs107, %rs101, %rs106;
	cvt.s32.s16 	%r1120, %rs107;
	mul.wide.s32 	%rd222, %r1120, 4;
	add.s64 	%rd223, %rd12, %rd222;
	ld.shared.u32 	%r3726, [%rd223];
	add.s16 	%rs108, %rs87, 18;
	mul.hi.s16 	%rs109, %rs108, 10923;
	shr.u16 	%rs110, %rs109, 15;
	shr.s16 	%rs111, %rs109, 2;
	add.s16 	%rs112, %rs111, %rs110;
	mul.lo.s16 	%rs113, %rs112, 24;
	sub.s16 	%rs114, %rs108, %rs113;
	cvt.s32.s16 	%r1121, %rs114;
	mul.wide.s32 	%rd224, %r1121, 4;
	add.s64 	%rd225, %rd12, %rd224;
	ld.shared.u32 	%r3727, [%rd225];
	add.s16 	%rs115, %rs87, 19;
	mul.hi.s16 	%rs116, %rs115, 10923;
	shr.u16 	%rs117, %rs116, 15;
	shr.s16 	%rs118, %rs116, 2;
	add.s16 	%rs119, %rs118, %rs117;
	mul.lo.s16 	%rs120, %rs119, 24;
	sub.s16 	%rs121, %rs115, %rs120;
	cvt.s32.s16 	%r1122, %rs121;
	mul.wide.s32 	%rd226, %r1122, 4;
	add.s64 	%rd227, %rd12, %rd226;
	ld.shared.u32 	%r3728, [%rd227];
	add.s16 	%rs122, %rs87, 20;
	mul.hi.s16 	%rs123, %rs122, 10923;
	shr.u16 	%rs124, %rs123, 15;
	shr.s16 	%rs125, %rs123, 2;
	add.s16 	%rs126, %rs125, %rs124;
	mul.lo.s16 	%rs127, %rs126, 24;
	sub.s16 	%rs128, %rs122, %rs127;
	cvt.s32.s16 	%r1123, %rs128;
	mul.wide.s32 	%rd228, %r1123, 4;
	add.s64 	%rd229, %rd12, %rd228;
	ld.shared.u32 	%r3729, [%rd229];
	add.s16 	%rs129, %rs87, 21;
	mul.hi.s16 	%rs130, %rs129, 10923;
	shr.u16 	%rs131, %rs130, 15;
	shr.s16 	%rs132, %rs130, 2;
	add.s16 	%rs133, %rs132, %rs131;
	mul.lo.s16 	%rs134, %rs133, 24;
	sub.s16 	%rs135, %rs129, %rs134;
	cvt.s32.s16 	%r1124, %rs135;
	mul.wide.s32 	%rd230, %r1124, 4;
	add.s64 	%rd231, %rd12, %rd230;
	ld.shared.u32 	%r3730, [%rd231];
	add.s16 	%rs136, %rs87, 22;
	mul.hi.s16 	%rs137, %rs136, 10923;
	shr.u16 	%rs138, %rs137, 15;
	shr.s16 	%rs139, %rs137, 2;
	add.s16 	%rs140, %rs139, %rs138;
	mul.lo.s16 	%rs141, %rs140, 24;
	sub.s16 	%rs142, %rs136, %rs141;
	cvt.s32.s16 	%r1125, %rs142;
	mul.wide.s32 	%rd232, %r1125, 4;
	add.s64 	%rd233, %rd12, %rd232;
	ld.shared.u32 	%r3731, [%rd233];
	add.s16 	%rs143, %rs87, 23;
	mul.hi.s16 	%rs144, %rs143, 10923;
	shr.u16 	%rs145, %rs144, 15;
	shr.s16 	%rs146, %rs144, 2;
	add.s16 	%rs147, %rs146, %rs145;
	mul.lo.s16 	%rs148, %rs147, 24;
	sub.s16 	%rs149, %rs143, %rs148;
	cvt.s32.s16 	%r1126, %rs149;
	mul.wide.s32 	%rd234, %r1126, 4;
	add.s64 	%rd235, %rd12, %rd234;
	ld.shared.u32 	%r3732, [%rd235];
$L__BB0_176:                            // %L13906
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3733, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_184:                            // %L20930
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3735, %r3735, 1;
	mov.u32 	%r3734, 0;
	mov.u32 	%r3736, %r3734;
	mov.u32 	%r3737, %r3734;
$L__BB0_185:                            // %L20931
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3733, %r3733, -4;
	setp.ne.s32 	%p318, %r3733, -12;
	@%p318 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_186;
$L__BB0_177:                            // %L13932
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r3733, 12;
	selp.b32 	%r1665, %r3709, 0, %p277;
	setp.eq.s32 	%p278, %r3733, 8;
	selp.b32 	%r1666, %r3713, %r1665, %p278;
	setp.eq.s32 	%p279, %r3733, 4;
	selp.b32 	%r1667, %r3717, %r1666, %p279;
	setp.eq.s32 	%p280, %r3733, 0;
	selp.b32 	%r1668, %r3721, %r1667, %p280;
	setp.eq.s32 	%p281, %r3733, -4;
	selp.b32 	%r1669, %r3725, %r1668, %p281;
	setp.eq.s32 	%p282, %r3733, -8;
	selp.b32 	%r1670, %r3729, %r1669, %p282;
	selp.b32 	%r1671, %r3710, 0, %p277;
	selp.b32 	%r1672, %r3714, %r1671, %p278;
	selp.b32 	%r1673, %r3718, %r1672, %p279;
	selp.b32 	%r1674, %r3722, %r1673, %p280;
	selp.b32 	%r1675, %r3726, %r1674, %p281;
	selp.b32 	%r1676, %r3730, %r1675, %p282;
	selp.b32 	%r1677, %r3711, 0, %p277;
	selp.b32 	%r1678, %r3715, %r1677, %p278;
	selp.b32 	%r1679, %r3719, %r1678, %p279;
	selp.b32 	%r1680, %r3723, %r1679, %p280;
	selp.b32 	%r1681, %r3727, %r1680, %p281;
	selp.b32 	%r1682, %r3731, %r1681, %p282;
	selp.b32 	%r1683, %r3712, 0, %p277;
	selp.b32 	%r1684, %r3716, %r1683, %p278;
	selp.b32 	%r1685, %r3720, %r1684, %p279;
	selp.b32 	%r1686, %r3724, %r1685, %p280;
	selp.b32 	%r1687, %r3728, %r1686, %p281;
	selp.b32 	%r1688, %r3732, %r1687, %p282;
	mov.u16 	%rs187, 25600;
	// begin inline asm
	mov.b32 %r1133, {%rs187, %rs187};
	// end inline asm
	mov.u16 	%rs189, 21504;
	// begin inline asm
	mov.b32 %r1144, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1132, %r1670, -2004318072;
	mov.u32 	%r1269, 983055;
	// begin inline asm
	lop3.b32 %r1130, %r1269, %r1132, %r1133, 202;
	// end inline asm
	mov.u16 	%rs193, 18432;
	// begin inline asm
	mov.b32 %r1134, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1135, %r1133, %r1134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1138, %r1130, %r1135;
	// end inline asm
	mov.u32 	%r1280, 15728880;
	// begin inline asm
	lop3.b32 %r1141, %r1280, %r1132, %r1144, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1145, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1146, %r1144, %r1145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1149, %r1141, %r1146;
	// end inline asm
	// begin inline asm
	mov.b32 %r1179, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r1190, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1178, %r1676, -2004318072;
	// begin inline asm
	lop3.b32 %r1176, %r1269, %r1178, %r1179, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1180, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1181, %r1179, %r1180;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1184, %r1176, %r1181;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1187, %r1280, %r1178, %r1190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1191, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1192, %r1190, %r1191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1195, %r1187, %r1192;
	// end inline asm
	// begin inline asm
	mov.b32 %r1225, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r1236, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1224, %r1682, -2004318072;
	// begin inline asm
	lop3.b32 %r1222, %r1269, %r1224, %r1225, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1226, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1227, %r1225, %r1226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1230, %r1222, %r1227;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1233, %r1280, %r1224, %r1236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1238, %r1236, %r1237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1241, %r1233, %r1238;
	// end inline asm
	// begin inline asm
	mov.b32 %r1271, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r1282, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1270, %r1688, -2004318072;
	// begin inline asm
	lop3.b32 %r1268, %r1269, %r1270, %r1271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1272, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1273, %r1271, %r1272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1276, %r1268, %r1273;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1279, %r1280, %r1270, %r1282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1284, %r1282, %r1283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1287, %r1279, %r1284;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1138;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1312, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1149;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1315, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1184;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1318, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1195;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1321, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1230;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1324, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1241;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1327, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1276;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1330, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1287;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1333, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1664, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1399, %r1396}, {%r428, %r431}, {%r1312}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1408, %r1405}, {%r428, %r431}, {%r1315}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1417, %r1414}, {%r428, %r431}, {%r1318}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1426, %r1423}, {%r428, %r431}, {%r1321}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1435, %r1432}, {%r428, %r431}, {%r1324}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1444, %r1441}, {%r428, %r431}, {%r1327}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1453, %r1450}, {%r428, %r431}, {%r1330}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1462, %r1459}, {%r428, %r431}, {%r1333}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1392, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1394, %r1392, %r1396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r480, %r1399, %r1394;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1403, %r1401, %r1405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r480, %r1408, %r1403;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1410, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1412, %r1410, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1415, %r480, %r1417, %r1412;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1419, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r1419, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r480, %r1426, %r1421;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1428, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r480, %r1435, %r1430;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1437, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r1437, %r1441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r480, %r1444, %r1439;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1446, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r1446, %r1450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r480, %r1453, %r1448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1455, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1457, %r1455, %r1459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1460, %r480, %r1462, %r1457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1464, %r483, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1467, %r480, %r1396, %r1464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r483, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r480, %r1405, %r1471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1478, %r483, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1481, %r480, %r1414, %r1478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1485, %r483, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r480, %r1423, %r1485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1492, %r483, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1495, %r480, %r1432, %r1492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1499, %r483, %r1444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1502, %r480, %r1441, %r1499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1506, %r483, %r1453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r480, %r1450, %r1506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r483, %r1462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r480, %r1459, %r1513;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1520, %r1521}, {%r524, %r530, %r527, %r533}, {%r1397, %r1467}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1530, %r1531}, {%r524, %r530, %r527, %r533}, {%r1406, %r1474}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1540, %r1541}, {%r524, %r530, %r527, %r533}, {%r1415, %r1481}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1550, %r1551}, {%r524, %r530, %r527, %r533}, {%r1424, %r1488}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1560, %r1561}, {%r524, %r530, %r527, %r533}, {%r1433, %r1495}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1570, %r1571}, {%r524, %r530, %r527, %r533}, {%r1442, %r1502}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1580, %r1581}, {%r524, %r530, %r527, %r533}, {%r1451, %r1509}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1590, %r1591}, {%r524, %r530, %r527, %r533}, {%r1460, %r1516}, {%r1664, %r1664};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3738, %r1664;
	mov.u32 	%r3739, %r1664;
	mov.u32 	%r3740, %r1664;
	mov.u32 	%r3741, %r1664;
	@%p276 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %oksrem6465
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3738, [%rd7];
	ld.shared.u32 	%r3739, [%rd8];
	ld.shared.u32 	%r3740, [%rd9];
	ld.shared.u32 	%r3741, [%rd10];
$L__BB0_178:                            // %L15565
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1724, %r1721}, {%r542, %r545}, {%r3738}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1733, %r1730}, {%r542, %r545}, {%r3739}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1742, %r1739}, {%r542, %r545}, {%r3740}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1751, %r1748}, {%r542, %r545}, {%r3741}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1717, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1719, %r1717, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r594, %r1724, %r1719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1726, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1728, %r1726, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r594, %r1733, %r1728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1735, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1737, %r1735, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r594, %r1742, %r1737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1744, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r1744, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r594, %r1751, %r1746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r597, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r594, %r1721, %r1753;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r597, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r594, %r1730, %r1760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r597, %r1742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r594, %r1739, %r1767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r597, %r1751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r594, %r1748, %r1774;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1822, %r1825}, {%r638, %r644, %r641, %r647}, {%r1722, %r1756}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1841, %r1844}, {%r638, %r644, %r641, %r647}, {%r1731, %r1763}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1829, %r1833}, {%r638, %r644, %r641, %r647}, {%r1740, %r1770}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1848, %r1852}, {%r638, %r644, %r641, %r647}, {%r1749, %r1777}, {%r1664, %r1664};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r1822, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1825, %r1825, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1829, %r1829, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r1833, %r1833, %r1828;
	// end inline asm
	mov.u32 	%r1856, 693446997;
	// begin inline asm
	fma.rn.f16x2 %r3791, %r1856, %r1832, %r3737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1840, %r1841, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r1844, %r1844, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r1848, %r1848, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r1852, %r1852, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3790, %r1856, %r1851, %r3736;
	// end inline asm
	add.s32 	%r3788, %r3734, 1;
	setp.eq.s32 	%p283, %r3788, 3;
	@%p283 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_182;
$L__BB0_179:                            // %pass6958
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_181;
// %bb.180:                             // %pass6968
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r1859, %r3735, 589824;
	add.s32 	%r1860, %r119, %r1859;
	cvt.s64.s32 	%rd236, %r1860;
	add.s64 	%rd237, %rd236, %rd11;
	mul.hi.s64 	%rd238, %rd237, 1024819115206086201;
	shr.u64 	%rd239, %rd238, 63;
	shr.s64 	%rd240, %rd238, 25;
	add.s64 	%rd241, %rd240, %rd239;
	setp.lt.s64 	%p285, %rd237, 0;
	mul.lo.s64 	%rd242, %rd241, 603979776;
	setp.ne.s64 	%p286, %rd242, %rd237;
	and.pred  	%p287, %p285, %p286;
	selp.s64 	%rd243, -1, 0, %p287;
	add.s64 	%rd244, %rd241, %rd243;
	mul.lo.s64 	%rd245, %rd244, -603979776;
	add.s64 	%rd246, %rd245, %rd237;
	shl.b64 	%rd247, %rd246, 2;
	add.s64 	%rd248, %rd4, %rd247;
	st.global.u32 	[%rd248], %r3791;
	add.s32 	%r1861, %r120, %r1859;
	cvt.s64.s32 	%rd249, %r1861;
	add.s64 	%rd250, %rd249, %rd11;
	mul.hi.s64 	%rd251, %rd250, 1024819115206086201;
	shr.u64 	%rd252, %rd251, 63;
	shr.s64 	%rd253, %rd251, 25;
	add.s64 	%rd254, %rd253, %rd252;
	setp.lt.s64 	%p288, %rd250, 0;
	mul.lo.s64 	%rd255, %rd254, 603979776;
	setp.ne.s64 	%p289, %rd255, %rd250;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd256, -1, 0, %p290;
	add.s64 	%rd257, %rd254, %rd256;
	mul.lo.s64 	%rd258, %rd257, -603979776;
	add.s64 	%rd259, %rd258, %rd250;
	shl.b64 	%rd260, %rd259, 2;
	add.s64 	%rd261, %rd4, %rd260;
	st.global.u32 	[%rd261], %r3790;
$L__BB0_181:                            // %L16097
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3735, %r3735, 1;
	mov.u32 	%r3788, 0;
	mov.u32 	%r3790, %r3788;
	mov.u32 	%r3791, %r3788;
$L__BB0_182:                            // %pass7134
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r1863, 0;
	mov.u32 	%r3742, %r1863;
	mov.u32 	%r3743, %r1863;
	mov.u32 	%r3744, %r1863;
	mov.u32 	%r3745, %r1863;
	@%p91 bra 	$L__BB0_252;
// %bb.183:                             // %oksrem7240
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3742, [%rd13];
	ld.shared.u32 	%r3743, [%rd14];
	ld.shared.u32 	%r3744, [%rd15];
	ld.shared.u32 	%r3745, [%rd16];
$L__BB0_252:                            // %L17176
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1899, %r1896}, {%r542, %r545}, {%r3742}, {%r1863, %r1863};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1908, %r1905}, {%r542, %r545}, {%r3743}, {%r1863, %r1863};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1917, %r1914}, {%r542, %r545}, {%r3744}, {%r1863, %r1863};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1926, %r1923}, {%r542, %r545}, {%r3745}, {%r1863, %r1863};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1892, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1894, %r1892, %r1896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1897, %r594, %r1899, %r1894;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1901, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1903, %r1901, %r1905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r594, %r1908, %r1903;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1910, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1912, %r1910, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r594, %r1917, %r1912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1919, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1921, %r1919, %r1923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1924, %r594, %r1926, %r1921;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1928, %r597, %r1899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1931, %r594, %r1896, %r1928;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1935, %r597, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r594, %r1905, %r1935;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1942, %r597, %r1917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r594, %r1914, %r1942;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r597, %r1926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r594, %r1923, %r1949;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1997, %r2000}, {%r638, %r644, %r641, %r647}, {%r1897, %r1931}, {%r1863, %r1863};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2016, %r2019}, {%r638, %r644, %r641, %r647}, {%r1906, %r1938}, {%r1863, %r1863};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2004, %r2008}, {%r638, %r644, %r641, %r647}, {%r1915, %r1945}, {%r1863, %r1863};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2023, %r2027}, {%r638, %r644, %r641, %r647}, {%r1924, %r1952}, {%r1863, %r1863};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1996, %r1997, %r1997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r2000, %r2000, %r1996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r2004, %r2004, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r2008, %r2008, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3795, %r1856, %r2007, %r3791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2015, %r2016, %r2016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r2019, %r2019, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2022, %r2023, %r2023, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r2027, %r2027, %r2022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3794, %r1856, %r2026, %r3790;
	// end inline asm
	add.s32 	%r3792, %r3788, 1;
	setp.eq.s32 	%p292, %r3792, 3;
	@%p292 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_256;
$L__BB0_253:                            // %pass7733
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_255;
// %bb.254:                             // %pass7743
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2034, %r3735, 589824;
	add.s32 	%r2035, %r119, %r2034;
	cvt.s64.s32 	%rd262, %r2035;
	add.s64 	%rd263, %rd262, %rd11;
	mul.hi.s64 	%rd264, %rd263, 1024819115206086201;
	shr.u64 	%rd265, %rd264, 63;
	shr.s64 	%rd266, %rd264, 25;
	add.s64 	%rd267, %rd266, %rd265;
	setp.lt.s64 	%p294, %rd263, 0;
	mul.lo.s64 	%rd268, %rd267, 603979776;
	setp.ne.s64 	%p295, %rd268, %rd263;
	and.pred  	%p296, %p294, %p295;
	selp.s64 	%rd269, -1, 0, %p296;
	add.s64 	%rd270, %rd267, %rd269;
	mul.lo.s64 	%rd271, %rd270, -603979776;
	add.s64 	%rd272, %rd271, %rd263;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd4, %rd273;
	st.global.u32 	[%rd274], %r3795;
	add.s32 	%r2036, %r120, %r2034;
	cvt.s64.s32 	%rd275, %r2036;
	add.s64 	%rd276, %rd275, %rd11;
	mul.hi.s64 	%rd277, %rd276, 1024819115206086201;
	shr.u64 	%rd278, %rd277, 63;
	shr.s64 	%rd279, %rd277, 25;
	add.s64 	%rd280, %rd279, %rd278;
	setp.lt.s64 	%p297, %rd276, 0;
	mul.lo.s64 	%rd281, %rd280, 603979776;
	setp.ne.s64 	%p298, %rd281, %rd276;
	and.pred  	%p299, %p297, %p298;
	selp.s64 	%rd282, -1, 0, %p299;
	add.s64 	%rd283, %rd280, %rd282;
	mul.lo.s64 	%rd284, %rd283, -603979776;
	add.s64 	%rd285, %rd284, %rd276;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd287, %rd4, %rd286;
	st.global.u32 	[%rd287], %r3794;
$L__BB0_255:                            // %L17708
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3735, %r3735, 1;
	mov.u32 	%r3792, 0;
	mov.u32 	%r3794, %r3792;
	mov.u32 	%r3795, %r3792;
$L__BB0_256:                            // %pass7909
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2038, 0;
	mov.u32 	%r3746, %r2038;
	mov.u32 	%r3747, %r2038;
	mov.u32 	%r3748, %r2038;
	mov.u32 	%r3749, %r2038;
	@%p91 bra 	$L__BB0_258;
// %bb.257:                             // %oksrem8015
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3746, [%rd17];
	ld.shared.u32 	%r3747, [%rd18];
	ld.shared.u32 	%r3748, [%rd19];
	ld.shared.u32 	%r3749, [%rd20];
$L__BB0_258:                            // %L18787
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2074, %r2071}, {%r542, %r545}, {%r3746}, {%r2038, %r2038};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2083, %r2080}, {%r542, %r545}, {%r3747}, {%r2038, %r2038};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2092, %r2089}, {%r542, %r545}, {%r3748}, {%r2038, %r2038};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2101, %r2098}, {%r542, %r545}, {%r3749}, {%r2038, %r2038};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2067, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2069, %r2067, %r2071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r594, %r2074, %r2069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2076, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2078, %r2076, %r2080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2081, %r594, %r2083, %r2078;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2085, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2087, %r2085, %r2089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2090, %r594, %r2092, %r2087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2094, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2096, %r2094, %r2098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2099, %r594, %r2101, %r2096;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2103, %r597, %r2074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2106, %r594, %r2071, %r2103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r597, %r2083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r594, %r2080, %r2110;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r597, %r2092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2120, %r594, %r2089, %r2117;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2124, %r597, %r2101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2127, %r594, %r2098, %r2124;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2172, %r2175}, {%r638, %r644, %r641, %r647}, {%r2072, %r2106}, {%r2038, %r2038};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2191, %r2194}, {%r638, %r644, %r641, %r647}, {%r2081, %r2113}, {%r2038, %r2038};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2179, %r2183}, {%r638, %r644, %r641, %r647}, {%r2090, %r2120}, {%r2038, %r2038};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2198, %r2202}, {%r638, %r644, %r641, %r647}, {%r2099, %r2127}, {%r2038, %r2038};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2171, %r2172, %r2172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r2175, %r2175, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r2179, %r2179, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r2183, %r2183, %r2178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3799, %r1856, %r2182, %r3795;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2190, %r2191, %r2191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r2194, %r2194, %r2190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2197, %r2198, %r2198, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2201, %r2202, %r2202, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3798, %r1856, %r2201, %r3794;
	// end inline asm
	add.s32 	%r3796, %r3792, 1;
	setp.eq.s32 	%p301, %r3796, 3;
	@%p301 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_262;
$L__BB0_259:                            // %pass8508
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_261;
// %bb.260:                             // %pass8518
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2209, %r3735, 589824;
	add.s32 	%r2210, %r119, %r2209;
	cvt.s64.s32 	%rd288, %r2210;
	add.s64 	%rd289, %rd288, %rd11;
	mul.hi.s64 	%rd290, %rd289, 1024819115206086201;
	shr.u64 	%rd291, %rd290, 63;
	shr.s64 	%rd292, %rd290, 25;
	add.s64 	%rd293, %rd292, %rd291;
	setp.lt.s64 	%p303, %rd289, 0;
	mul.lo.s64 	%rd294, %rd293, 603979776;
	setp.ne.s64 	%p304, %rd294, %rd289;
	and.pred  	%p305, %p303, %p304;
	selp.s64 	%rd295, -1, 0, %p305;
	add.s64 	%rd296, %rd293, %rd295;
	mul.lo.s64 	%rd297, %rd296, -603979776;
	add.s64 	%rd298, %rd297, %rd289;
	shl.b64 	%rd299, %rd298, 2;
	add.s64 	%rd300, %rd4, %rd299;
	st.global.u32 	[%rd300], %r3799;
	add.s32 	%r2211, %r120, %r2209;
	cvt.s64.s32 	%rd301, %r2211;
	add.s64 	%rd302, %rd301, %rd11;
	mul.hi.s64 	%rd303, %rd302, 1024819115206086201;
	shr.u64 	%rd304, %rd303, 63;
	shr.s64 	%rd305, %rd303, 25;
	add.s64 	%rd306, %rd305, %rd304;
	setp.lt.s64 	%p306, %rd302, 0;
	mul.lo.s64 	%rd307, %rd306, 603979776;
	setp.ne.s64 	%p307, %rd307, %rd302;
	and.pred  	%p308, %p306, %p307;
	selp.s64 	%rd308, -1, 0, %p308;
	add.s64 	%rd309, %rd306, %rd308;
	mul.lo.s64 	%rd310, %rd309, -603979776;
	add.s64 	%rd311, %rd310, %rd302;
	shl.b64 	%rd312, %rd311, 2;
	add.s64 	%rd313, %rd4, %rd312;
	st.global.u32 	[%rd313], %r3798;
$L__BB0_261:                            // %L19319
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3735, %r3735, 1;
	mov.u32 	%r3796, 0;
	mov.u32 	%r3798, %r3796;
	mov.u32 	%r3799, %r3796;
$L__BB0_262:                            // %pass8684
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2213, 0;
	mov.u32 	%r3750, %r2213;
	mov.u32 	%r3751, %r2213;
	mov.u32 	%r3752, %r2213;
	mov.u32 	%r3753, %r2213;
	@%p91 bra 	$L__BB0_264;
// %bb.263:                             // %oksrem8790
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3750, [%rd21];
	ld.shared.u32 	%r3751, [%rd22];
	ld.shared.u32 	%r3752, [%rd23];
	ld.shared.u32 	%r3753, [%rd24];
$L__BB0_264:                            // %L20398
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2249, %r2246}, {%r542, %r545}, {%r3750}, {%r2213, %r2213};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2258, %r2255}, {%r542, %r545}, {%r3751}, {%r2213, %r2213};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2267, %r2264}, {%r542, %r545}, {%r3752}, {%r2213, %r2213};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2276, %r2273}, {%r542, %r545}, {%r3753}, {%r2213, %r2213};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2242, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r2242, %r2246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r594, %r2249, %r2244;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2251, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2253, %r2251, %r2255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2256, %r594, %r2258, %r2253;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2260, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2262, %r2260, %r2264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2265, %r594, %r2267, %r2262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2269, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r2269, %r2273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r594, %r2276, %r2271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2278, %r597, %r2249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2281, %r594, %r2246, %r2278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2285, %r597, %r2258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2288, %r594, %r2255, %r2285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2292, %r597, %r2267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2295, %r594, %r2264, %r2292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2299, %r597, %r2276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2302, %r594, %r2273, %r2299;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2347, %r2350}, {%r638, %r644, %r641, %r647}, {%r2247, %r2281}, {%r2213, %r2213};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2366, %r2369}, {%r638, %r644, %r641, %r647}, {%r2256, %r2288}, {%r2213, %r2213};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2354, %r2358}, {%r638, %r644, %r641, %r647}, {%r2265, %r2295}, {%r2213, %r2213};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2373, %r2377}, {%r638, %r644, %r641, %r647}, {%r2274, %r2302}, {%r2213, %r2213};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2346, %r2347, %r2347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2349, %r2350, %r2350, %r2346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2353, %r2354, %r2354, %r2349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2357, %r2358, %r2358, %r2353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3737, %r1856, %r2357, %r3799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2365, %r2366, %r2366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2368, %r2369, %r2369, %r2365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2372, %r2373, %r2373, %r2368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2376, %r2377, %r2377, %r2372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3736, %r1856, %r2376, %r3798;
	// end inline asm
	add.s32 	%r3734, %r3796, 1;
	setp.eq.s32 	%p310, %r3734, 3;
	@%p310 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_185;
$L__BB0_265:                            // %pass9283
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_184;
// %bb.266:                             // %pass9293
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2384, %r3735, 589824;
	add.s32 	%r2385, %r119, %r2384;
	cvt.s64.s32 	%rd314, %r2385;
	add.s64 	%rd315, %rd314, %rd11;
	mul.hi.s64 	%rd316, %rd315, 1024819115206086201;
	shr.u64 	%rd317, %rd316, 63;
	shr.s64 	%rd318, %rd316, 25;
	add.s64 	%rd319, %rd318, %rd317;
	setp.lt.s64 	%p312, %rd315, 0;
	mul.lo.s64 	%rd320, %rd319, 603979776;
	setp.ne.s64 	%p313, %rd320, %rd315;
	and.pred  	%p314, %p312, %p313;
	selp.s64 	%rd321, -1, 0, %p314;
	add.s64 	%rd322, %rd319, %rd321;
	mul.lo.s64 	%rd323, %rd322, -603979776;
	add.s64 	%rd324, %rd323, %rd315;
	shl.b64 	%rd325, %rd324, 2;
	add.s64 	%rd326, %rd4, %rd325;
	st.global.u32 	[%rd326], %r3737;
	add.s32 	%r2386, %r120, %r2384;
	cvt.s64.s32 	%rd327, %r2386;
	add.s64 	%rd328, %rd327, %rd11;
	mul.hi.s64 	%rd329, %rd328, 1024819115206086201;
	shr.u64 	%rd330, %rd329, 63;
	shr.s64 	%rd331, %rd329, 25;
	add.s64 	%rd332, %rd331, %rd330;
	setp.lt.s64 	%p315, %rd328, 0;
	mul.lo.s64 	%rd333, %rd332, 603979776;
	setp.ne.s64 	%p316, %rd333, %rd328;
	and.pred  	%p317, %p315, %p316;
	selp.s64 	%rd334, -1, 0, %p317;
	add.s64 	%rd335, %rd332, %rd334;
	mul.lo.s64 	%rd336, %rd335, -603979776;
	add.s64 	%rd337, %rd336, %rd328;
	shl.b64 	%rd338, %rd337, 2;
	add.s64 	%rd339, %rd4, %rd338;
	st.global.u32 	[%rd339], %r3736;
	bra.uni 	$L__BB0_184;
$L__BB0_186:                            // %L20956.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3758, 12;
	bra.uni 	$L__BB0_187;
$L__BB0_194:                            // %L27954
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3735, %r3735, 1;
	mov.u32 	%r3734, 0;
	mov.u32 	%r3736, %r3734;
	mov.u32 	%r3737, %r3734;
$L__BB0_195:                            // %L27955
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	add.s32 	%r3758, %r3758, -4;
	setp.ne.s32 	%p361, %r3758, -12;
	@%p361 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_196;
$L__BB0_187:                            // %L20956
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p320, %r3758, 12;
	selp.b32 	%r2926, %r3709, 0, %p320;
	setp.eq.s32 	%p321, %r3758, 8;
	selp.b32 	%r2927, %r3713, %r2926, %p321;
	setp.eq.s32 	%p322, %r3758, 4;
	selp.b32 	%r2928, %r3717, %r2927, %p322;
	setp.eq.s32 	%p323, %r3758, 0;
	selp.b32 	%r2929, %r3721, %r2928, %p323;
	setp.eq.s32 	%p324, %r3758, -4;
	selp.b32 	%r2930, %r3725, %r2929, %p324;
	setp.eq.s32 	%p325, %r3758, -8;
	selp.b32 	%r2931, %r3729, %r2930, %p325;
	selp.b32 	%r2932, %r3710, 0, %p320;
	selp.b32 	%r2933, %r3714, %r2932, %p321;
	selp.b32 	%r2934, %r3718, %r2933, %p322;
	selp.b32 	%r2935, %r3722, %r2934, %p323;
	selp.b32 	%r2936, %r3726, %r2935, %p324;
	selp.b32 	%r2937, %r3730, %r2936, %p325;
	selp.b32 	%r2938, %r3711, 0, %p320;
	selp.b32 	%r2939, %r3715, %r2938, %p321;
	selp.b32 	%r2940, %r3719, %r2939, %p322;
	selp.b32 	%r2941, %r3723, %r2940, %p323;
	selp.b32 	%r2942, %r3727, %r2941, %p324;
	selp.b32 	%r2943, %r3731, %r2942, %p325;
	selp.b32 	%r2944, %r3712, 0, %p320;
	selp.b32 	%r2945, %r3716, %r2944, %p321;
	selp.b32 	%r2946, %r3720, %r2945, %p322;
	selp.b32 	%r2947, %r3724, %r2946, %p323;
	selp.b32 	%r2948, %r3728, %r2947, %p324;
	selp.b32 	%r2949, %r3732, %r2948, %p325;
	// begin inline asm
	mov.b32 %r2416, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2427, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2950, %r2931, 8;
	xor.b32  	%r2426, %r2950, 8947848;
	// begin inline asm
	lop3.b32 %r2413, %r1269, %r2426, %r2416, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2417, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2418, %r2416, %r2417;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2421, %r2413, %r2418;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2424, %r1280, %r2426, %r2427, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2428, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2429, %r2427, %r2428;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2432, %r2424, %r2429;
	// end inline asm
	// begin inline asm
	mov.b32 %r2462, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2473, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2951, %r2937, 8;
	xor.b32  	%r2472, %r2951, 8947848;
	// begin inline asm
	lop3.b32 %r2459, %r1269, %r2472, %r2462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2463, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2464, %r2462, %r2463;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2467, %r2459, %r2464;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2470, %r1280, %r2472, %r2473, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2475, %r2473, %r2474;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2478, %r2470, %r2475;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2519, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2952, %r2943, 8;
	xor.b32  	%r2518, %r2952, 8947848;
	// begin inline asm
	lop3.b32 %r2505, %r1269, %r2518, %r2508, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2509, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2510, %r2508, %r2509;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2513, %r2505, %r2510;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2516, %r1280, %r2518, %r2519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2521, %r2519, %r2520;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2524, %r2516, %r2521;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2565, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2953, %r2949, 8;
	xor.b32  	%r2564, %r2953, 8947848;
	// begin inline asm
	lop3.b32 %r2551, %r1269, %r2564, %r2554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2555, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2556, %r2554, %r2555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2559, %r2551, %r2556;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2562, %r1280, %r2564, %r2565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2566, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2567, %r2565, %r2566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2570, %r2562, %r2567;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2421;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2573, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2432;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2576, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2467;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2579, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2478;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2582, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2513;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2585, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2524;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2588, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2559;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2591, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2570;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2594, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2925, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2660, %r2657}, {%r428, %r431}, {%r2573}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2669, %r2666}, {%r428, %r431}, {%r2576}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2678, %r2675}, {%r428, %r431}, {%r2579}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2687, %r2684}, {%r428, %r431}, {%r2582}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2696, %r2693}, {%r428, %r431}, {%r2585}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2705, %r2702}, {%r428, %r431}, {%r2588}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2714, %r2711}, {%r428, %r431}, {%r2591}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2723, %r2720}, {%r428, %r431}, {%r2594}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2653, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2653, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2658, %r480, %r2660, %r2655;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2662, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2664, %r2662, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2667, %r480, %r2669, %r2664;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2671, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2673, %r2671, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2676, %r480, %r2678, %r2673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r480, %r2687, %r2682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2689, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2689, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r480, %r2696, %r2691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2698, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r2698, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2703, %r480, %r2705, %r2700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2707, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r2707, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r480, %r2714, %r2709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2716, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r2716, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r480, %r2723, %r2718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r483, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r480, %r2657, %r2725;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2732, %r483, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2735, %r480, %r2666, %r2732;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2739, %r483, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2742, %r480, %r2675, %r2739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r483, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r480, %r2684, %r2746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2753, %r483, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r480, %r2693, %r2753;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2760, %r483, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2763, %r480, %r2702, %r2760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2767, %r483, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2770, %r480, %r2711, %r2767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2774, %r483, %r2723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r480, %r2720, %r2774;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2781, %r2782}, {%r524, %r530, %r527, %r533}, {%r2658, %r2728}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2791, %r2792}, {%r524, %r530, %r527, %r533}, {%r2667, %r2735}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2801, %r2802}, {%r524, %r530, %r527, %r533}, {%r2676, %r2742}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2811, %r2812}, {%r524, %r530, %r527, %r533}, {%r2685, %r2749}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2821, %r2822}, {%r524, %r530, %r527, %r533}, {%r2694, %r2756}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2831, %r2832}, {%r524, %r530, %r527, %r533}, {%r2703, %r2763}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2841, %r2842}, {%r524, %r530, %r527, %r533}, {%r2712, %r2770}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2851, %r2852}, {%r524, %r530, %r527, %r533}, {%r2721, %r2777}, {%r2925, %r2925};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3763, %r2925;
	mov.u32 	%r3764, %r2925;
	mov.u32 	%r3765, %r2925;
	mov.u32 	%r3766, %r2925;
	@%p276 bra 	$L__BB0_267;
	bra.uni 	$L__BB0_188;
$L__BB0_267:                            // %oksrem9626
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3766, [%rd7];
	ld.shared.u32 	%r3765, [%rd8];
	ld.shared.u32 	%r3764, [%rd9];
	ld.shared.u32 	%r3763, [%rd10];
$L__BB0_188:                            // %L22589
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2989, %r2986}, {%r542, %r545}, {%r3766}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2998, %r2995}, {%r542, %r545}, {%r3765}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3007, %r3004}, {%r542, %r545}, {%r3764}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3016, %r3013}, {%r542, %r545}, {%r3763}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2982, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2984, %r2982, %r2986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2987, %r594, %r2989, %r2984;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2991, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2993, %r2991, %r2995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2996, %r594, %r2998, %r2993;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3000, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3002, %r3000, %r3004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r594, %r3007, %r3002;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3009, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3011, %r3009, %r3013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3014, %r594, %r3016, %r3011;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3018, %r597, %r2989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3021, %r594, %r2986, %r3018;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3025, %r597, %r2998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3028, %r594, %r2995, %r3025;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3032, %r597, %r3007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r594, %r3004, %r3032;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3039, %r597, %r3016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3042, %r594, %r3013, %r3039;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3087, %r3090}, {%r638, %r644, %r641, %r647}, {%r2987, %r3021}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3106, %r3109}, {%r638, %r644, %r641, %r647}, {%r2996, %r3028}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3094, %r3098}, {%r638, %r644, %r641, %r647}, {%r3005, %r3035}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3113, %r3117}, {%r638, %r644, %r641, %r647}, {%r3014, %r3042}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3086, %r3087, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r3090, %r3090, %r3086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3093, %r3094, %r3094, %r3089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3097, %r3098, %r3098, %r3093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3803, %r1856, %r3097, %r3737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3105, %r3106, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3108, %r3109, %r3109, %r3105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3112, %r3113, %r3113, %r3108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r3117, %r3117, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3802, %r1856, %r3116, %r3736;
	// end inline asm
	add.s32 	%r3800, %r3734, 1;
	setp.eq.s32 	%p326, %r3800, 3;
	@%p326 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_192;
$L__BB0_189:                            // %pass10119
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_191;
// %bb.190:                             // %pass10129
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3124, %r3735, 589824;
	add.s32 	%r3125, %r119, %r3124;
	cvt.s64.s32 	%rd340, %r3125;
	add.s64 	%rd341, %rd340, %rd11;
	mul.hi.s64 	%rd342, %rd341, 1024819115206086201;
	shr.u64 	%rd343, %rd342, 63;
	shr.s64 	%rd344, %rd342, 25;
	add.s64 	%rd345, %rd344, %rd343;
	setp.lt.s64 	%p328, %rd341, 0;
	mul.lo.s64 	%rd346, %rd345, 603979776;
	setp.ne.s64 	%p329, %rd346, %rd341;
	and.pred  	%p330, %p328, %p329;
	selp.s64 	%rd347, -1, 0, %p330;
	add.s64 	%rd348, %rd345, %rd347;
	mul.lo.s64 	%rd349, %rd348, -603979776;
	add.s64 	%rd350, %rd349, %rd341;
	shl.b64 	%rd351, %rd350, 2;
	add.s64 	%rd352, %rd4, %rd351;
	st.global.u32 	[%rd352], %r3803;
	add.s32 	%r3126, %r120, %r3124;
	cvt.s64.s32 	%rd353, %r3126;
	add.s64 	%rd354, %rd353, %rd11;
	mul.hi.s64 	%rd355, %rd354, 1024819115206086201;
	shr.u64 	%rd356, %rd355, 63;
	shr.s64 	%rd357, %rd355, 25;
	add.s64 	%rd358, %rd357, %rd356;
	setp.lt.s64 	%p331, %rd354, 0;
	mul.lo.s64 	%rd359, %rd358, 603979776;
	setp.ne.s64 	%p332, %rd359, %rd354;
	and.pred  	%p333, %p331, %p332;
	selp.s64 	%rd360, -1, 0, %p333;
	add.s64 	%rd361, %rd358, %rd360;
	mul.lo.s64 	%rd362, %rd361, -603979776;
	add.s64 	%rd363, %rd362, %rd354;
	shl.b64 	%rd364, %rd363, 2;
	add.s64 	%rd365, %rd4, %rd364;
	st.global.u32 	[%rd365], %r3802;
$L__BB0_191:                            // %L23121
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3735, %r3735, 1;
	mov.u32 	%r3800, 0;
	mov.u32 	%r3802, %r3800;
	mov.u32 	%r3803, %r3800;
$L__BB0_192:                            // %pass10295
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3128, 0;
	mov.u32 	%r3767, %r3128;
	mov.u32 	%r3768, %r3128;
	mov.u32 	%r3769, %r3128;
	mov.u32 	%r3770, %r3128;
	@%p91 bra 	$L__BB0_268;
// %bb.193:                             // %oksrem10401
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3770, [%rd13];
	ld.shared.u32 	%r3769, [%rd14];
	ld.shared.u32 	%r3768, [%rd15];
	ld.shared.u32 	%r3767, [%rd16];
$L__BB0_268:                            // %L24200
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3164, %r3161}, {%r542, %r545}, {%r3770}, {%r3128, %r3128};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3173, %r3170}, {%r542, %r545}, {%r3769}, {%r3128, %r3128};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3182, %r3179}, {%r542, %r545}, {%r3768}, {%r3128, %r3128};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3191, %r3188}, {%r542, %r545}, {%r3767}, {%r3128, %r3128};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3157, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3159, %r3157, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r594, %r3164, %r3159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3166, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3168, %r3166, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r594, %r3173, %r3168;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3175, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3177, %r3175, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3180, %r594, %r3182, %r3177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3184, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3186, %r3184, %r3188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3189, %r594, %r3191, %r3186;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3193, %r597, %r3164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3196, %r594, %r3161, %r3193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3200, %r597, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r594, %r3170, %r3200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3207, %r597, %r3182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r594, %r3179, %r3207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3214, %r597, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3217, %r594, %r3188, %r3214;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3262, %r3265}, {%r638, %r644, %r641, %r647}, {%r3162, %r3196}, {%r3128, %r3128};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3281, %r3284}, {%r638, %r644, %r641, %r647}, {%r3171, %r3203}, {%r3128, %r3128};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3269, %r3273}, {%r638, %r644, %r641, %r647}, {%r3180, %r3210}, {%r3128, %r3128};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3288, %r3292}, {%r638, %r644, %r641, %r647}, {%r3189, %r3217}, {%r3128, %r3128};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3261, %r3262, %r3262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3264, %r3265, %r3265, %r3261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3268, %r3269, %r3269, %r3264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3272, %r3273, %r3273, %r3268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3807, %r1856, %r3272, %r3803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3280, %r3281, %r3281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3283, %r3284, %r3284, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3287, %r3288, %r3288, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r3292, %r3292, %r3287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3806, %r1856, %r3291, %r3802;
	// end inline asm
	add.s32 	%r3804, %r3800, 1;
	setp.eq.s32 	%p335, %r3804, 3;
	@%p335 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_272;
$L__BB0_269:                            // %pass10894
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_271;
// %bb.270:                             // %pass10904
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3299, %r3735, 589824;
	add.s32 	%r3300, %r119, %r3299;
	cvt.s64.s32 	%rd366, %r3300;
	add.s64 	%rd367, %rd366, %rd11;
	mul.hi.s64 	%rd368, %rd367, 1024819115206086201;
	shr.u64 	%rd369, %rd368, 63;
	shr.s64 	%rd370, %rd368, 25;
	add.s64 	%rd371, %rd370, %rd369;
	setp.lt.s64 	%p337, %rd367, 0;
	mul.lo.s64 	%rd372, %rd371, 603979776;
	setp.ne.s64 	%p338, %rd372, %rd367;
	and.pred  	%p339, %p337, %p338;
	selp.s64 	%rd373, -1, 0, %p339;
	add.s64 	%rd374, %rd371, %rd373;
	mul.lo.s64 	%rd375, %rd374, -603979776;
	add.s64 	%rd376, %rd375, %rd367;
	shl.b64 	%rd377, %rd376, 2;
	add.s64 	%rd378, %rd4, %rd377;
	st.global.u32 	[%rd378], %r3807;
	add.s32 	%r3301, %r120, %r3299;
	cvt.s64.s32 	%rd379, %r3301;
	add.s64 	%rd380, %rd379, %rd11;
	mul.hi.s64 	%rd381, %rd380, 1024819115206086201;
	shr.u64 	%rd382, %rd381, 63;
	shr.s64 	%rd383, %rd381, 25;
	add.s64 	%rd384, %rd383, %rd382;
	setp.lt.s64 	%p340, %rd380, 0;
	mul.lo.s64 	%rd385, %rd384, 603979776;
	setp.ne.s64 	%p341, %rd385, %rd380;
	and.pred  	%p342, %p340, %p341;
	selp.s64 	%rd386, -1, 0, %p342;
	add.s64 	%rd387, %rd384, %rd386;
	mul.lo.s64 	%rd388, %rd387, -603979776;
	add.s64 	%rd389, %rd388, %rd380;
	shl.b64 	%rd390, %rd389, 2;
	add.s64 	%rd391, %rd4, %rd390;
	st.global.u32 	[%rd391], %r3806;
$L__BB0_271:                            // %L24732
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3735, %r3735, 1;
	mov.u32 	%r3804, 0;
	mov.u32 	%r3806, %r3804;
	mov.u32 	%r3807, %r3804;
$L__BB0_272:                            // %pass11070
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3303, 0;
	mov.u32 	%r3771, %r3303;
	mov.u32 	%r3772, %r3303;
	mov.u32 	%r3773, %r3303;
	mov.u32 	%r3774, %r3303;
	@%p91 bra 	$L__BB0_274;
// %bb.273:                             // %oksrem11176
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3774, [%rd17];
	ld.shared.u32 	%r3773, [%rd18];
	ld.shared.u32 	%r3772, [%rd19];
	ld.shared.u32 	%r3771, [%rd20];
$L__BB0_274:                            // %L25811
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3339, %r3336}, {%r542, %r545}, {%r3774}, {%r3303, %r3303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3348, %r3345}, {%r542, %r545}, {%r3773}, {%r3303, %r3303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3357, %r3354}, {%r542, %r545}, {%r3772}, {%r3303, %r3303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3366, %r3363}, {%r542, %r545}, {%r3771}, {%r3303, %r3303};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3332, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3334, %r3332, %r3336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3337, %r594, %r3339, %r3334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3341, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3343, %r3341, %r3345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3346, %r594, %r3348, %r3343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3350, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3352, %r3350, %r3354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3355, %r594, %r3357, %r3352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3359, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3361, %r3359, %r3363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r594, %r3366, %r3361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3368, %r597, %r3339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3371, %r594, %r3336, %r3368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3375, %r597, %r3348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3378, %r594, %r3345, %r3375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3382, %r597, %r3357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3385, %r594, %r3354, %r3382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3389, %r597, %r3366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3392, %r594, %r3363, %r3389;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3437, %r3440}, {%r638, %r644, %r641, %r647}, {%r3337, %r3371}, {%r3303, %r3303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3456, %r3459}, {%r638, %r644, %r641, %r647}, {%r3346, %r3378}, {%r3303, %r3303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3444, %r3448}, {%r638, %r644, %r641, %r647}, {%r3355, %r3385}, {%r3303, %r3303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3463, %r3467}, {%r638, %r644, %r641, %r647}, {%r3364, %r3392}, {%r3303, %r3303};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3436, %r3437, %r3437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3439, %r3440, %r3440, %r3436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3443, %r3444, %r3444, %r3439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3447, %r3448, %r3448, %r3443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3811, %r1856, %r3447, %r3807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3455, %r3456, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3458, %r3459, %r3459, %r3455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3462, %r3463, %r3463, %r3458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3466, %r3467, %r3467, %r3462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3810, %r1856, %r3466, %r3806;
	// end inline asm
	add.s32 	%r3808, %r3804, 1;
	setp.eq.s32 	%p344, %r3808, 3;
	@%p344 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_278;
$L__BB0_275:                            // %pass11669
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_277;
// %bb.276:                             // %pass11679
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3474, %r3735, 589824;
	add.s32 	%r3475, %r119, %r3474;
	cvt.s64.s32 	%rd392, %r3475;
	add.s64 	%rd393, %rd392, %rd11;
	mul.hi.s64 	%rd394, %rd393, 1024819115206086201;
	shr.u64 	%rd395, %rd394, 63;
	shr.s64 	%rd396, %rd394, 25;
	add.s64 	%rd397, %rd396, %rd395;
	setp.lt.s64 	%p346, %rd393, 0;
	mul.lo.s64 	%rd398, %rd397, 603979776;
	setp.ne.s64 	%p347, %rd398, %rd393;
	and.pred  	%p348, %p346, %p347;
	selp.s64 	%rd399, -1, 0, %p348;
	add.s64 	%rd400, %rd397, %rd399;
	mul.lo.s64 	%rd401, %rd400, -603979776;
	add.s64 	%rd402, %rd401, %rd393;
	shl.b64 	%rd403, %rd402, 2;
	add.s64 	%rd404, %rd4, %rd403;
	st.global.u32 	[%rd404], %r3811;
	add.s32 	%r3476, %r120, %r3474;
	cvt.s64.s32 	%rd405, %r3476;
	add.s64 	%rd406, %rd405, %rd11;
	mul.hi.s64 	%rd407, %rd406, 1024819115206086201;
	shr.u64 	%rd408, %rd407, 63;
	shr.s64 	%rd409, %rd407, 25;
	add.s64 	%rd410, %rd409, %rd408;
	setp.lt.s64 	%p349, %rd406, 0;
	mul.lo.s64 	%rd411, %rd410, 603979776;
	setp.ne.s64 	%p350, %rd411, %rd406;
	and.pred  	%p351, %p349, %p350;
	selp.s64 	%rd412, -1, 0, %p351;
	add.s64 	%rd413, %rd410, %rd412;
	mul.lo.s64 	%rd414, %rd413, -603979776;
	add.s64 	%rd415, %rd414, %rd406;
	shl.b64 	%rd416, %rd415, 2;
	add.s64 	%rd417, %rd4, %rd416;
	st.global.u32 	[%rd417], %r3810;
$L__BB0_277:                            // %L26343
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3735, %r3735, 1;
	mov.u32 	%r3808, 0;
	mov.u32 	%r3810, %r3808;
	mov.u32 	%r3811, %r3808;
$L__BB0_278:                            // %pass11845
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3478, 0;
	mov.u32 	%r3775, %r3478;
	mov.u32 	%r3776, %r3478;
	mov.u32 	%r3777, %r3478;
	mov.u32 	%r3778, %r3478;
	@%p91 bra 	$L__BB0_280;
// %bb.279:                             // %oksrem11951
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3778, [%rd21];
	ld.shared.u32 	%r3777, [%rd22];
	ld.shared.u32 	%r3776, [%rd23];
	ld.shared.u32 	%r3775, [%rd24];
$L__BB0_280:                            // %L27422
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3514, %r3511}, {%r542, %r545}, {%r3778}, {%r3478, %r3478};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3523, %r3520}, {%r542, %r545}, {%r3777}, {%r3478, %r3478};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3532, %r3529}, {%r542, %r545}, {%r3776}, {%r3478, %r3478};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3541, %r3538}, {%r542, %r545}, {%r3775}, {%r3478, %r3478};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3507, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3509, %r3507, %r3511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r594, %r3514, %r3509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3516, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3518, %r3516, %r3520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r594, %r3523, %r3518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3525, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3527, %r3525, %r3529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r594, %r3532, %r3527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3534, %r597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3536, %r3534, %r3538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r594, %r3541, %r3536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3543, %r597, %r3514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r594, %r3511, %r3543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r597, %r3523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r594, %r3520, %r3550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3557, %r597, %r3532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r594, %r3529, %r3557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r597, %r3541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r594, %r3538, %r3564;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3612, %r3615}, {%r638, %r644, %r641, %r647}, {%r3512, %r3546}, {%r3478, %r3478};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3631, %r3634}, {%r638, %r644, %r641, %r647}, {%r3521, %r3553}, {%r3478, %r3478};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3619, %r3623}, {%r638, %r644, %r641, %r647}, {%r3530, %r3560}, {%r3478, %r3478};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3638, %r3642}, {%r638, %r644, %r641, %r647}, {%r3539, %r3567}, {%r3478, %r3478};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3611, %r3612, %r3612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3614, %r3615, %r3615, %r3611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3618, %r3619, %r3619, %r3614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3622, %r3623, %r3623, %r3618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3737, %r1856, %r3622, %r3811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3630, %r3631, %r3631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3633, %r3634, %r3634, %r3630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3637, %r3638, %r3638, %r3633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3641, %r3642, %r3642, %r3637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3736, %r1856, %r3641, %r3810;
	// end inline asm
	add.s32 	%r3734, %r3808, 1;
	setp.eq.s32 	%p353, %r3734, 3;
	@%p353 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_195;
$L__BB0_281:                            // %pass12444
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_194;
// %bb.282:                             // %pass12454
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3649, %r3735, 589824;
	add.s32 	%r3650, %r119, %r3649;
	cvt.s64.s32 	%rd418, %r3650;
	add.s64 	%rd419, %rd418, %rd11;
	mul.hi.s64 	%rd420, %rd419, 1024819115206086201;
	shr.u64 	%rd421, %rd420, 63;
	shr.s64 	%rd422, %rd420, 25;
	add.s64 	%rd423, %rd422, %rd421;
	setp.lt.s64 	%p355, %rd419, 0;
	mul.lo.s64 	%rd424, %rd423, 603979776;
	setp.ne.s64 	%p356, %rd424, %rd419;
	and.pred  	%p357, %p355, %p356;
	selp.s64 	%rd425, -1, 0, %p357;
	add.s64 	%rd426, %rd423, %rd425;
	mul.lo.s64 	%rd427, %rd426, -603979776;
	add.s64 	%rd428, %rd427, %rd419;
	shl.b64 	%rd429, %rd428, 2;
	add.s64 	%rd430, %rd4, %rd429;
	st.global.u32 	[%rd430], %r3737;
	add.s32 	%r3651, %r120, %r3649;
	cvt.s64.s32 	%rd431, %r3651;
	add.s64 	%rd432, %rd431, %rd11;
	mul.hi.s64 	%rd433, %rd432, 1024819115206086201;
	shr.u64 	%rd434, %rd433, 63;
	shr.s64 	%rd435, %rd433, 25;
	add.s64 	%rd436, %rd435, %rd434;
	setp.lt.s64 	%p358, %rd432, 0;
	mul.lo.s64 	%rd437, %rd436, 603979776;
	setp.ne.s64 	%p359, %rd437, %rd432;
	and.pred  	%p360, %p358, %p359;
	selp.s64 	%rd438, -1, 0, %p360;
	add.s64 	%rd439, %rd436, %rd438;
	mul.lo.s64 	%rd440, %rd439, -603979776;
	add.s64 	%rd441, %rd440, %rd432;
	shl.b64 	%rd442, %rd441, 2;
	add.s64 	%rd443, %rd4, %rd442;
	st.global.u32 	[%rd443], %r3736;
	bra.uni 	$L__BB0_194;
$L__BB0_197:                            // %L27990
	mov.u32 	%r3653, 0;
	st.global.u32 	[%rd6], %r3653;
	ret;
$L__BB0_152:                            // %L7443
	mov.u32 	%r3677, 5;
	st.global.u32 	[%rd6], %r3677;
	mov.u64 	%rd490, exception2371;
	cvta.global.u64 	%rd491, %rd490;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd491;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7599
	mov.u32 	%r3676, 5;
	st.global.u32 	[%rd6], %r3676;
	mov.u64 	%rd488, exception2371;
	cvta.global.u64 	%rd489, %rd488;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd489;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7755
	mov.u32 	%r3675, 5;
	st.global.u32 	[%rd6], %r3675;
	mov.u64 	%rd486, exception2371;
	cvta.global.u64 	%rd487, %rd486;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd487;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7911
	mov.u32 	%r3674, 5;
	st.global.u32 	[%rd6], %r3674;
	mov.u64 	%rd484, exception2371;
	cvta.global.u64 	%rd485, %rd484;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd485;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8067
	mov.u32 	%r3673, 5;
	st.global.u32 	[%rd6], %r3673;
	mov.u64 	%rd482, exception2371;
	cvta.global.u64 	%rd483, %rd482;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd483;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8223
	mov.u32 	%r3672, 5;
	st.global.u32 	[%rd6], %r3672;
	mov.u64 	%rd480, exception2371;
	cvta.global.u64 	%rd481, %rd480;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd481;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8379
	mov.u32 	%r3671, 5;
	st.global.u32 	[%rd6], %r3671;
	mov.u64 	%rd478, exception2371;
	cvta.global.u64 	%rd479, %rd478;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd479;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8535
	mov.u32 	%r3670, 5;
	st.global.u32 	[%rd6], %r3670;
	mov.u64 	%rd476, exception2371;
	cvta.global.u64 	%rd477, %rd476;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd477;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8691
	mov.u32 	%r3669, 5;
	st.global.u32 	[%rd6], %r3669;
	mov.u64 	%rd474, exception2371;
	cvta.global.u64 	%rd475, %rd474;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd475;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8847
	mov.u32 	%r3668, 5;
	st.global.u32 	[%rd6], %r3668;
	mov.u64 	%rd472, exception2371;
	cvta.global.u64 	%rd473, %rd472;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd473;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9003
	mov.u32 	%r3667, 5;
	st.global.u32 	[%rd6], %r3667;
	mov.u64 	%rd470, exception2371;
	cvta.global.u64 	%rd471, %rd470;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd471;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9159
	mov.u32 	%r3666, 5;
	st.global.u32 	[%rd6], %r3666;
	mov.u64 	%rd468, exception2371;
	cvta.global.u64 	%rd469, %rd468;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd469;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9315
	mov.u32 	%r3665, 5;
	st.global.u32 	[%rd6], %r3665;
	mov.u64 	%rd466, exception2371;
	cvta.global.u64 	%rd467, %rd466;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd467;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9471
	mov.u32 	%r3664, 5;
	st.global.u32 	[%rd6], %r3664;
	mov.u64 	%rd464, exception2371;
	cvta.global.u64 	%rd465, %rd464;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd465;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9627
	mov.u32 	%r3663, 5;
	st.global.u32 	[%rd6], %r3663;
	mov.u64 	%rd462, exception2371;
	cvta.global.u64 	%rd463, %rd462;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd463;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9783
	mov.u32 	%r3662, 5;
	st.global.u32 	[%rd6], %r3662;
	mov.u64 	%rd460, exception2371;
	cvta.global.u64 	%rd461, %rd460;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd461;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L9939
	mov.u32 	%r3661, 5;
	st.global.u32 	[%rd6], %r3661;
	mov.u64 	%rd458, exception2371;
	cvta.global.u64 	%rd459, %rd458;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd459;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10095
	mov.u32 	%r3660, 5;
	st.global.u32 	[%rd6], %r3660;
	mov.u64 	%rd456, exception2371;
	cvta.global.u64 	%rd457, %rd456;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd457;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10251
	mov.u32 	%r3659, 5;
	st.global.u32 	[%rd6], %r3659;
	mov.u64 	%rd454, exception2371;
	cvta.global.u64 	%rd455, %rd454;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd455;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10407
	mov.u32 	%r3658, 5;
	st.global.u32 	[%rd6], %r3658;
	mov.u64 	%rd452, exception2371;
	cvta.global.u64 	%rd453, %rd452;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd453;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10563
	mov.u32 	%r3657, 5;
	st.global.u32 	[%rd6], %r3657;
	mov.u64 	%rd450, exception2371;
	cvta.global.u64 	%rd451, %rd450;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd451;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10745
	mov.u32 	%r3656, 5;
	st.global.u32 	[%rd6], %r3656;
	mov.u64 	%rd448, exception2371;
	cvta.global.u64 	%rd449, %rd448;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd449;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L10901
	mov.u32 	%r3655, 5;
	st.global.u32 	[%rd6], %r3655;
	mov.u64 	%rd446, exception2371;
	cvta.global.u64 	%rd447, %rd446;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd447;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11057
	mov.u32 	%r3654, 5;
	st.global.u32 	[%rd6], %r3654;
	mov.u64 	%rd444, exception2371;
	cvta.global.u64 	%rd445, %rd444;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd445;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3679, 2;
	st.global.u32 	[%rd6], %r3679;
	mov.u64 	%rd494, exception2371;
	cvta.global.u64 	%rd495, %rd494;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd495;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3678, 3;
	st.global.u32 	[%rd6], %r3678;
	mov.u64 	%rd492, exception2371;
	cvta.global.u64 	%rd493, %rd492;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd493;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1143
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r3};
	st.local.v2.u32 	[%rd5+8], {%r2, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r658, [retval0+0];
	} // callseq 61
	mov.u32 	%r660, 4;
	st.global.u32 	[%rd6], %r660;
	mov.u64 	%rd39, exception2371;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r396;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
