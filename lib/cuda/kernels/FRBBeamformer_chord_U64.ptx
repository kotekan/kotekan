// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2371[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<365>;
	.reg .b16 	%rs<242>;
	.reg .b32 	%r<3822>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<498>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r397, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r406, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r406, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r398, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r407, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r408, %r407, %r1;
	add.s32 	%r409, %r408, %r4;
	mul.wide.u32 	%rd33, %r409, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r410, 1;
	st.global.u32 	[%rd6], %r410;
	setp.gt.u32 	%p4, %r398, 511;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r399, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r399, %r398;
	setp.gt.s32 	%p6, %r399, 1023;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r400, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r399, %r398;
	mad.lo.s32 	%r411, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r412, %r411, %r411, 4;
	setp.gt.u32 	%p8, %r412, 89478484;
	setp.gt.u32 	%p9, %r400, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r401, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r401, %r400;
	setp.lt.s32 	%p12, %r401, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r413, %r401, %r400;
	mul.hi.s32 	%r414, %r5, 1431655766;
	shr.u32 	%r415, %r414, 31;
	add.s32 	%r416, %r414, %r415;
	setp.eq.s32 	%p14, %r413, %r416;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r402, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r402, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r403, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r403, %r402;
	setp.gt.s32 	%p17, %r403, 256;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r404, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r403, %r402;
	and.b32  	%r417, %r6, 63;
	setp.ne.s32 	%p19, %r417, 0;
	setp.lt.s32 	%p20, %r404, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r405, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r405, %r404;
	setp.gt.s32 	%p23, %r405, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r418, %r405, %r404;
	and.b32  	%r419, %r418, 63;
	setp.eq.s32 	%p25, %r419, 0;
	setp.eq.s32 	%p26, %r418, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_13;
$L__BB0_198:                            // %pass162
	and.b32  	%r237, %r1, 3;
	shr.u32 	%r238, %r1, 2;
	mul.lo.s32 	%r420, %r237, %r238;
	and.b32  	%r421, %r420, 7;
	cvt.rn.f32.s32 	%f201, %r421;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p364, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_210;
// %bb.199:
	@%p364 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_200;
$L__BB0_206:
	mov.b32 	%r240, %f785;
	and.b32  	%r422, %r240, 8388607;
	or.b32  	%r3793, %r422, 1065353216;
	mov.b32 	%f780, %r3793;
	add.s32 	%r423, %r240, -1073741824;
	and.b32  	%r3794, %r423, -8388608;
	setp.eq.s32 	%p35, %r3794, 0;
	@%p35 bra 	$L__BB0_209;
// %bb.207:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_208:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r3794, 192937984;
	add.s32 	%r425, %r3793, %r424;
	mov.b32 	%f213, %r425;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3794, %r3794, %r424;
	mov.b32 	%r3793, %f780;
	setp.ne.s32 	%p36, %r3794, 0;
	setp.ne.s32 	%p37, %r3793, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_208;
$L__BB0_209:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r240, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_210;
$L__BB0_200:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r239, %f172;
	setp.lt.u32 	%p30, %r239, 1073741824;
	@%p30 bra 	$L__BB0_205;
// %bb.201:
	setp.lt.u32 	%p31, %r239, -2147483647;
	@%p31 bra 	$L__BB0_203;
// %bb.202:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_205;
$L__BB0_203:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_205;
// %bb.204:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_205:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_210:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r426, %f169;
	and.b32  	%r247, %r426, -2147483648;
	@%p40 bra 	$L__BB0_212;
// %bb.211:
	mov.b32 	%r427, %f781;
	or.b32  	%r428, %r247, %r427;
	mov.b32 	%f781, %r428;
$L__BB0_212:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r250, %r1, 1;
	and.b32  	%r251, %r250, 6;
	or.b32  	%r252, %r251, 1;
	setp.eq.s32 	%p48, %r251, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3691, %r251, %r238;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L493
	cvt.u16.u32 	%rs1, %r3691;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r444, %r8, 8388607;
	or.b32  	%r3695, %r444, 1065353216;
	mov.b32 	%f732, %r3695;
	add.s32 	%r445, %r8, -1073741824;
	and.b32  	%r3696, %r445, -8388608;
	setp.eq.s32 	%p56, %r3696, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r446, %r3696, 192937984;
	add.s32 	%r447, %r3695, %r446;
	mov.b32 	%f267, %r447;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3696, %r3696, %r446;
	mov.b32 	%r3695, %f732;
	setp.ne.s32 	%p57, %r3696, 0;
	setp.ne.s32 	%p58, %r3695, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i964
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r448, %f1;
	and.b32  	%r449, %r448, -2147483648;
	mov.b32 	%r450, %f733;
	or.b32  	%r451, %r449, %r450;
	mov.b32 	%f733, %r451;
$L__BB0_28:                             // %__nv_fmodf.exit991
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r452, %f277;
	and.b32  	%r453, %r452, -2147483648;
	or.b32  	%r454, %r453, 1056964608;
	mov.b32 	%f278, %r454;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r455, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r456, %r455, 1;
	setp.eq.b32 	%p64, %r456, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r457, %r455, 2;
	setp.eq.s32 	%p65, %r457, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r458, %r455, 1;
	and.b32  	%r459, %r458, 2;
	setp.eq.s32 	%p66, %r459, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L527
	setp.gt.u32 	%p69, %r252, 5;
	mul.lo.s32 	%r3692, %r252, %r238;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L531
	mul.hi.u32 	%r461, %r3692, -1431655765;
	shr.u32 	%r462, %r461, 5;
	mul.lo.s32 	%r463, %r462, 48;
	sub.s32 	%r464, %r3692, %r463;
	cvt.rn.f32.s32 	%f308, %r464;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r465, %r16, 8388607;
	or.b32  	%r3697, %r465, 1065353216;
	mov.b32 	%f738, %r3697;
	add.s32 	%r466, %r16, -1073741824;
	and.b32  	%r3698, %r466, -8388608;
	setp.eq.s32 	%p77, %r3698, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1016.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1016
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r467, %r3698, 192937984;
	add.s32 	%r468, %r3697, %r467;
	mov.b32 	%f320, %r468;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3698, %r3698, %r467;
	mov.b32 	%r3697, %f738;
	setp.ne.s32 	%p78, %r3698, 0;
	setp.ne.s32 	%p79, %r3697, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1018
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i995
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i999
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1002
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1021
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r469, %f22;
	and.b32  	%r470, %r469, -2147483648;
	mov.b32 	%r471, %f739;
	or.b32  	%r472, %r470, %r471;
	mov.b32 	%f739, %r472;
$L__BB0_44:                             // %__nv_fmodf.exit1022
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r473, %f330;
	and.b32  	%r474, %r473, -2147483648;
	or.b32  	%r475, %r474, 1056964608;
	mov.b32 	%f331, %r475;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r476, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r477, %r476, 1;
	setp.eq.b32 	%p85, %r477, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r478, %r476, 2;
	setp.eq.s32 	%p86, %r478, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r479, %r476, 1;
	and.b32  	%r480, %r479, 2;
	setp.eq.s32 	%p87, %r480, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L565
	setp.gt.u32 	%p91, %r1, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L603
	cvt.u16.u32 	%rs8, %r3691;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r488, %r26, 8388607;
	or.b32  	%r3699, %r488, 1065353216;
	mov.b32 	%f744, %r3699;
	add.s32 	%r489, %r26, -1073741824;
	and.b32  	%r3700, %r489, -8388608;
	setp.eq.s32 	%p99, %r3700, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1047.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1047
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r490, %r3700, 192937984;
	add.s32 	%r491, %r3699, %r490;
	mov.b32 	%f373, %r491;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3700, %r3700, %r490;
	mov.b32 	%r3699, %f744;
	setp.ne.s32 	%p100, %r3700, 0;
	setp.ne.s32 	%p101, %r3699, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1049
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1026
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1030
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1033
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1052
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r492, %f43;
	and.b32  	%r493, %r492, -2147483648;
	mov.b32 	%r494, %f745;
	or.b32  	%r495, %r493, %r494;
	mov.b32 	%f745, %r495;
$L__BB0_60:                             // %__nv_fmodf.exit1053
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r496, %f383;
	and.b32  	%r497, %r496, -2147483648;
	or.b32  	%r498, %r497, 1056964608;
	mov.b32 	%f384, %r498;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r499, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r500, %r499, 1;
	setp.eq.b32 	%p107, %r500, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r501, %r499, 2;
	setp.eq.s32 	%p108, %r501, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r502, %r499, 1;
	and.b32  	%r503, %r502, 2;
	setp.eq.s32 	%p109, %r503, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L637
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L645
	mul.hi.u32 	%r505, %r3692, -1431655765;
	shr.u32 	%r506, %r505, 2;
	mul.lo.s32 	%r507, %r506, 6;
	sub.s32 	%r508, %r3692, %r507;
	cvt.rn.f32.s32 	%f414, %r508;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r509, %r34, 8388607;
	or.b32  	%r3701, %r509, 1065353216;
	mov.b32 	%f750, %r3701;
	add.s32 	%r510, %r34, -1073741824;
	and.b32  	%r3702, %r510, -8388608;
	setp.eq.s32 	%p121, %r3702, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1078.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1078
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r511, %r3702, 192937984;
	add.s32 	%r512, %r3701, %r511;
	mov.b32 	%f426, %r512;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3702, %r3702, %r511;
	mov.b32 	%r3701, %f750;
	setp.ne.s32 	%p122, %r3702, 0;
	setp.ne.s32 	%p123, %r3701, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1080
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1057
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1061
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1064
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1083
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r513, %f64;
	and.b32  	%r514, %r513, -2147483648;
	mov.b32 	%r515, %f751;
	or.b32  	%r516, %r514, %r515;
	mov.b32 	%f751, %r516;
$L__BB0_76:                             // %__nv_fmodf.exit1084
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r517, %f436;
	and.b32  	%r518, %r517, -2147483648;
	or.b32  	%r519, %r518, 1056964608;
	mov.b32 	%f437, %r519;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r520, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r521, %r520, 1;
	setp.eq.b32 	%p129, %r521, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r522, %r520, 2;
	setp.eq.s32 	%p130, %r522, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r523, %r520, 1;
	and.b32  	%r524, %r523, 2;
	setp.eq.s32 	%p131, %r524, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L679
	@%p28 bra 	$L__BB0_220;
// %bb.78:
	@%p364 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_79;
$L__BB0_216:
	mov.b32 	%r254, %f785;
	and.b32  	%r537, %r254, 8388607;
	or.b32  	%r3795, %r537, 1065353216;
	mov.b32 	%f784, %r3795;
	add.s32 	%r538, %r254, -1073741824;
	and.b32  	%r3796, %r538, -8388608;
	setp.eq.s32 	%p141, %r3796, 0;
	@%p141 bra 	$L__BB0_219;
// %bb.217:                             // %__nv_fmaf_rn.exit4.i.i.i1109.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_218:                            // %__nv_fmaf_rn.exit4.i.i.i1109
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r539, %r3796, 192937984;
	add.s32 	%r540, %r3795, %r539;
	mov.b32 	%f476, %r540;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3796, %r3796, %r539;
	mov.b32 	%r3795, %f784;
	setp.ne.s32 	%p142, %r3796, 0;
	setp.ne.s32 	%p143, %r3795, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_218;
$L__BB0_219:                            // %__internal_fmodf_slowpath_mod.exit.i.i1111
	setp.gt.u32 	%p145, %r254, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_220;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1088
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r253, %f187;
	setp.lt.u32 	%p136, %r253, 1073741824;
	@%p136 bra 	$L__BB0_215;
// %bb.80:
	setp.lt.u32 	%p137, %r253, -2147483647;
	@%p137 bra 	$L__BB0_213;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_215;
$L__BB0_213:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_215;
// %bb.214:                             // %__nv_fmaf_rn.exit.i.i.i1092
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_215:                            // %__internal_fmodf_fastpath_quot.exit.i.i1095
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_220:                            // %__internal_fmodf_kernel.exit.i1114
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_222;
// %bb.221:
	mov.b32 	%r541, %f785;
	or.b32  	%r542, %r247, %r541;
	mov.b32 	%f785, %r542;
$L__BB0_222:                            // %__nv_fmodf.exit1115
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L781
	cvt.u16.u32 	%rs15, %r3691;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r558, %r46, 8388607;
	or.b32  	%r3703, %r558, 1065353216;
	mov.b32 	%f756, %r3703;
	add.s32 	%r559, %r46, -1073741824;
	and.b32  	%r3704, %r559, -8388608;
	setp.eq.s32 	%p162, %r3704, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1140.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1140
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r560, %r3704, 192937984;
	add.s32 	%r561, %r3703, %r560;
	mov.b32 	%f530, %r561;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3704, %r3704, %r560;
	mov.b32 	%r3703, %f756;
	setp.ne.s32 	%p163, %r3704, 0;
	setp.ne.s32 	%p164, %r3703, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1142
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1119
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1123
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1126
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1145
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r562, %f85;
	and.b32  	%r563, %r562, -2147483648;
	mov.b32 	%r564, %f757;
	or.b32  	%r565, %r563, %r564;
	mov.b32 	%f757, %r565;
$L__BB0_96:                             // %__nv_fmodf.exit1146
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r566, %f540;
	and.b32  	%r567, %r566, -2147483648;
	or.b32  	%r568, %r567, 1056964608;
	mov.b32 	%f541, %r568;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r569, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r570, %r569, 1;
	setp.eq.b32 	%p170, %r570, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r571, %r569, 2;
	setp.eq.s32 	%p171, %r571, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r572, %r569, 1;
	and.b32  	%r573, %r572, 2;
	setp.eq.s32 	%p172, %r573, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L815
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L819
	mul.hi.u32 	%r575, %r3692, -1431655765;
	shr.u32 	%r576, %r575, 5;
	mul.lo.s32 	%r577, %r576, 48;
	sub.s32 	%r578, %r3692, %r577;
	cvt.rn.f32.s32 	%f571, %r578;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r579, %r54, 8388607;
	or.b32  	%r3705, %r579, 1065353216;
	mov.b32 	%f762, %r3705;
	add.s32 	%r580, %r54, -1073741824;
	and.b32  	%r3706, %r580, -8388608;
	setp.eq.s32 	%p183, %r3706, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1171.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1171
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r581, %r3706, 192937984;
	add.s32 	%r582, %r3705, %r581;
	mov.b32 	%f583, %r582;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3706, %r3706, %r581;
	mov.b32 	%r3705, %f762;
	setp.ne.s32 	%p184, %r3706, 0;
	setp.ne.s32 	%p185, %r3705, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1173
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1150
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1154
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1157
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1176
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r583, %f106;
	and.b32  	%r584, %r583, -2147483648;
	mov.b32 	%r585, %f763;
	or.b32  	%r586, %r584, %r585;
	mov.b32 	%f763, %r586;
$L__BB0_112:                            // %__nv_fmodf.exit1177
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r587, %f593;
	and.b32  	%r588, %r587, -2147483648;
	or.b32  	%r589, %r588, 1056964608;
	mov.b32 	%f594, %r589;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r590, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r591, %r590, 1;
	setp.eq.b32 	%p191, %r591, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r592, %r590, 2;
	setp.eq.s32 	%p192, %r592, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r593, %r590, 1;
	and.b32  	%r594, %r593, 2;
	setp.eq.s32 	%p193, %r594, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L853
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L891
	cvt.u16.u32 	%rs22, %r3691;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r602, %r64, 8388607;
	or.b32  	%r3707, %r602, 1065353216;
	mov.b32 	%f768, %r3707;
	add.s32 	%r603, %r64, -1073741824;
	and.b32  	%r3708, %r603, -8388608;
	setp.eq.s32 	%p203, %r3708, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1202.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1202
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r604, %r3708, 192937984;
	add.s32 	%r605, %r3707, %r604;
	mov.b32 	%f636, %r605;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3708, %r3708, %r604;
	mov.b32 	%r3707, %f768;
	setp.ne.s32 	%p204, %r3708, 0;
	setp.ne.s32 	%p205, %r3707, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1204
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1181
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1185
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1188
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1207
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r606, %f127;
	and.b32  	%r607, %r606, -2147483648;
	mov.b32 	%r608, %f769;
	or.b32  	%r609, %r607, %r608;
	mov.b32 	%f769, %r609;
$L__BB0_128:                            // %__nv_fmodf.exit1208
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r610, %f646;
	and.b32  	%r611, %r610, -2147483648;
	or.b32  	%r612, %r611, 1056964608;
	mov.b32 	%f647, %r612;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r613, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r614, %r613, 1;
	setp.eq.b32 	%p211, %r614, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r615, %r613, 2;
	setp.eq.s32 	%p212, %r615, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r616, %r613, 1;
	and.b32  	%r617, %r616, 2;
	setp.eq.s32 	%p213, %r617, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L925
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L933
	mul.hi.u32 	%r619, %r3692, -1431655765;
	shr.u32 	%r620, %r619, 2;
	mul.lo.s32 	%r621, %r620, 6;
	sub.s32 	%r622, %r3692, %r621;
	cvt.rn.f32.s32 	%f677, %r622;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r623, %r72, 8388607;
	or.b32  	%r3709, %r623, 1065353216;
	mov.b32 	%f774, %r3709;
	add.s32 	%r624, %r72, -1073741824;
	and.b32  	%r3710, %r624, -8388608;
	setp.eq.s32 	%p223, %r3710, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1233.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1233
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r625, %r3710, 192937984;
	add.s32 	%r626, %r3709, %r625;
	mov.b32 	%f689, %r626;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3710, %r3710, %r625;
	mov.b32 	%r3709, %f774;
	setp.ne.s32 	%p224, %r3710, 0;
	setp.ne.s32 	%p225, %r3709, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1235
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1216
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1219
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1238
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r627, %f148;
	and.b32  	%r628, %r627, -2147483648;
	mov.b32 	%r629, %f775;
	or.b32  	%r630, %r628, %r629;
	mov.b32 	%f775, %r630;
$L__BB0_144:                            // %__nv_fmodf.exit1239
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r631, %f699;
	and.b32  	%r632, %r631, -2147483648;
	or.b32  	%r633, %r632, 1056964608;
	mov.b32 	%f700, %r633;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r634, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r635, %r634, 1;
	setp.eq.b32 	%p231, %r635, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r636, %r634, 2;
	setp.eq.s32 	%p232, %r636, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r637, %r634, 1;
	and.b32  	%r638, %r637, 2;
	setp.eq.s32 	%p233, %r638, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L967
	mov.u32 	%r263, 999999999;
	cvt.u16.u32 	%rs241, %r1;
	@%p91 bra 	$L__BB0_224;
// %bb.146:                             // %L1003
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs241, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs241, %rs33;
	cvt.u32.u16 	%r652, %rs34;
	and.b32  	%r653, %r652, 255;
	mad.lo.s32 	%r654, %r653, 24, %r3;
	cvt.u16.u32 	%rs35, %r654;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r655, %rs39;
	mul.wide.u32 	%rd34, %r655, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r656, [%rd35];
	shl.b32 	%r657, %r656, 16;
	cvt.s32.s16 	%r83, %r656;
	shr.s32 	%r84, %r656, 16;
	or.b32  	%r658, %r657, 65535;
	setp.lt.u32 	%p237, %r658, 1638399;
	setp.lt.u32 	%p238, %r656, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_147;
$L__BB0_223:                            // %L1245
	mul.lo.s32 	%r662, %r84, 801;
	mad.lo.s32 	%r263, %r83, 33, %r662;
$L__BB0_224:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r435, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r436, %r435, -2147483648;
	mov.b32 	%r549, %f487;
	or.b32  	%r437, %r436, 1056964608;
	and.b32  	%r550, %r549, -2147483648;
	mov.b32 	%f225, %r437;
	or.b32  	%r551, %r550, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r551;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r438, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r439, %r438, 1;
	cvt.rzi.s32.f32 	%r552, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r439, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r553, %r552, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r440, %r438, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r553, 1;
	setp.eq.s32 	%p44, %r440, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r441, %r438, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r554, %r552, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r442, %r441, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r554, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r555, %r552, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r442, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r556, %r555, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r556, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r431, %f254;
	mov.b32 	%r434, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r430, %r434, -2147483648;
	mov.b32 	%r526, %f62;
	mov.b32 	%r527, %f83;
	mov.b32 	%r532, %f63;
	mov.b32 	%r533, %f84;
	mov.b32 	%r545, %f517;
	mov.b32 	%r548, %f514;
	mov.b32 	%r482, %f20;
	mov.b32 	%r483, %f41;
	mov.b32 	%r485, %f21;
	mov.b32 	%r486, %f42;
	xor.b32  	%r529, %r532, -2147483648;
	xor.b32  	%r530, %r533, -2147483648;
	xor.b32  	%r544, %r548, -2147483648;
	mov.b32 	%r596, %f104;
	mov.b32 	%r597, %f125;
	mov.b32 	%r599, %f105;
	mov.b32 	%r600, %f126;
	mov.b32 	%r640, %f146;
	mov.b32 	%r641, %f167;
	mov.b32 	%r646, %f147;
	xor.b32  	%r643, %r646, -2147483648;
	mov.b32 	%r647, %f168;
	xor.b32  	%r644, %r647, -2147483648;
	and.b32  	%r663, %r1, 24;
	setp.ne.s32 	%p240, %r663, 24;
	cvt.u16.u32 	%rs40, %r238;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs40, %rs43;
	cvt.u32.u16 	%r664, %rs44;
	and.b32  	%r264, %r664, 255;
	mul.lo.s32 	%r3711, %r2, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.225:                             // %pass503.L1505_crit_edge
	mov.u32 	%r87, 0;
	mov.u32 	%r88, %r87;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass518
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r665, %r264, 24;
	mul.lo.s32 	%r666, %r237, 144;
	or.b32  	%r667, %r3711, %r3;
	add.s32 	%r668, %r667, %r666;
	add.s32 	%r669, %r668, %r665;
	mul.wide.u32 	%rd41, %r669, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r87, [%rd42];
	or.b32  	%r670, %r3, 576;
	add.s32 	%r671, %r3711, %r670;
	add.s32 	%r672, %r671, %r666;
	add.s32 	%r673, %r672, %r665;
	mul.wide.u32 	%rd43, %r673, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.u32 	%r88, [%rd44];
$L__BB0_149:                            // %L1505
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r429, %r431, %r430;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r431;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r481, %r483, %r482;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r484, %r486, %r485;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r525, %r527, %r526;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r528, %r530, %r529;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r531, %r533, %r532;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r534, %r527, %r526;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r543, %r545, %r544;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r546, %r548, %r545;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r595, %r597, %r596;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r598, %r600, %r599;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r639, %r641, %r640;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r642, %r644, %r643;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r645, %r647, %r646;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r648, %r641, %r640;
	// end inline asm
	mov.u32 	%r123, 0;
	shl.b32 	%r676, %r398, 16;
	shl.b32 	%r677, %r402, 8;
	add.s32 	%r89, %r677, %r676;
	shl.b32 	%r90, %r1, 2;
	and.b32  	%r91, %r90, 60;
	shl.b32 	%r678, %r1, 3;
	and.b32  	%r92, %r678, 128;
	shl.b32 	%r93, %r2, 8;
	or.b32  	%r679, %r93, %r92;
	or.b32  	%r94, %r679, 64;
	add.s32 	%r95, %r3, 24;
	and.b32  	%r680, %r250, 30;
	shr.u32 	%r681, %r1, 4;
	or.b32  	%r682, %r680, %r681;
	mul.lo.s32 	%r96, %r682, 257;
	or.b32  	%r683, %r681, %r250;
	or.b32  	%r684, %r683, 32;
	mul.lo.s32 	%r97, %r684, 257;
	and.b16  	%rs46, %rs241, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 12;
	mul.lo.s16 	%rs49, %rs48, 24;
	sub.s16 	%rs50, %rs241, %rs49;
	cvt.u32.u16 	%r685, %rs50;
	and.b32  	%r98, %r685, 255;
	shr.u32 	%r686, %r3, 3;
	and.b32  	%r687, %r4, 224;
	mad.lo.s32 	%r99, %r686, 257, %r687;
	shr.u32 	%r688, %r95, 3;
	mad.lo.s32 	%r100, %r688, 257, %r687;
	add.s32 	%r689, %r3, 48;
	shr.u32 	%r690, %r689, 3;
	mad.lo.s32 	%r101, %r690, 257, %r687;
	add.s32 	%r691, %r3, 72;
	shr.u32 	%r692, %r691, 3;
	mad.lo.s32 	%r102, %r692, 257, %r687;
	or.b32  	%r693, %r686, 12;
	mad.lo.s32 	%r103, %r693, 257, %r687;
	add.s32 	%r694, %r3, 120;
	shr.u32 	%r695, %r694, 3;
	mad.lo.s32 	%r104, %r695, 257, %r687;
	add.s32 	%r696, %r3, 144;
	shr.u32 	%r697, %r696, 3;
	mad.lo.s32 	%r105, %r697, 257, %r687;
	add.s32 	%r698, %r3, 168;
	shr.u32 	%r699, %r698, 3;
	mad.lo.s32 	%r106, %r699, 257, %r687;
	or.b32  	%r700, %r686, 24;
	mad.lo.s32 	%r107, %r700, 257, %r687;
	add.s32 	%r701, %r3, 216;
	shr.u32 	%r702, %r701, 3;
	mad.lo.s32 	%r108, %r702, 257, %r687;
	add.s32 	%r703, %r3, 240;
	shr.u32 	%r704, %r703, 3;
	mad.lo.s32 	%r109, %r704, 257, %r687;
	add.s32 	%r705, %r3, 264;
	shr.u32 	%r706, %r705, 3;
	mad.lo.s32 	%r110, %r706, 257, %r687;
	or.b32  	%r707, %r686, 36;
	mad.lo.s32 	%r111, %r707, 257, %r687;
	add.s32 	%r708, %r3, 312;
	shr.u32 	%r709, %r708, 3;
	mad.lo.s32 	%r112, %r709, 257, %r687;
	add.s32 	%r710, %r3, 336;
	shr.u32 	%r711, %r710, 3;
	mad.lo.s32 	%r113, %r711, 257, %r687;
	add.s32 	%r712, %r3, 360;
	shr.u32 	%r713, %r712, 3;
	mad.lo.s32 	%r114, %r713, 257, %r687;
	or.b32  	%r714, %r686, 48;
	mad.lo.s32 	%r115, %r714, 257, %r687;
	add.s32 	%r715, %r3, 408;
	shr.u32 	%r716, %r715, 3;
	mad.lo.s32 	%r116, %r716, 257, %r687;
	add.s32 	%r717, %r3, 432;
	shr.u32 	%r718, %r717, 3;
	mad.lo.s32 	%r117, %r718, 257, %r687;
	add.s32 	%r719, %r3, 456;
	shr.u32 	%r720, %r719, 3;
	mad.lo.s32 	%r118, %r720, 257, %r687;
	or.b32  	%r721, %r686, 60;
	mad.lo.s32 	%r119, %r721, 257, %r687;
	add.s32 	%r722, %r3, 504;
	bfe.u32 	%r723, %r722, 3, 6;
	mad.lo.s32 	%r120, %r723, 257, %r687;
	mul.lo.s32 	%r724, %r3, 33;
	mad.lo.s32 	%r725, %r237, 4806, %r724;
	mad.lo.s32 	%r726, %r264, 801, %r725;
	shr.u32 	%r727, %r3, 4;
	bfe.s32 	%r728, %r3, 2, 1;
	and.b32  	%r729, %r728, 2056;
	mul.lo.s32 	%r730, %r237, 6;
	bfe.s32 	%r731, %r3, 3, 1;
	and.b32  	%r732, %r3, 8;
	setp.eq.s32 	%p241, %r732, 0;
	and.b32  	%r733, %r731, 1028;
	and.b32  	%r734, %r3, 1;
	neg.s32 	%r735, %r734;
	and.b32  	%r736, %r735, 8256;
	bfe.s32 	%r737, %r3, 1, 1;
	and.b32  	%r738, %r737, 4112;
	mad.lo.s32 	%r739, %r727, 514, %r730;
	add.s32 	%r740, %r739, %r729;
	add.s32 	%r741, %r740, %r733;
	add.s32 	%r742, %r741, %r736;
	add.s32 	%r743, %r742, %r738;
	add.s32 	%r744, %r743, %r264;
	mul.wide.u32 	%rd45, %r744, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	bfe.s32 	%r745, %r95, 4, 1;
	and.b32  	%r746, %r95, 16;
	setp.eq.s32 	%p242, %r746, 0;
	and.b32  	%r747, %r745, 514;
	shr.u32 	%r748, %r95, 5;
	selp.b32 	%r749, 1028, 0, %p241;
	mad.lo.s32 	%r750, %r748, 257, %r730;
	add.s32 	%r751, %r750, %r729;
	add.s32 	%r752, %r751, %r749;
	add.s32 	%r753, %r752, %r736;
	add.s32 	%r754, %r753, %r738;
	add.s32 	%r755, %r754, %r747;
	add.s32 	%r756, %r755, %r264;
	mul.wide.u32 	%rd47, %r756, 4;
	add.s64 	%rd8, %rd46, %rd47;
	add.s32 	%r757, %r744, 32;
	mul.wide.u32 	%rd48, %r757, 4;
	add.s64 	%rd9, %rd46, %rd48;
	selp.b32 	%r758, 32, 546, %p242;
	add.s32 	%r759, %r754, %r758;
	add.s32 	%r760, %r759, %r264;
	mul.wide.u32 	%rd49, %r760, 4;
	add.s64 	%rd10, %rd46, %rd49;
	mul.lo.s32 	%r761, %r400, 589824;
	mad.lo.s32 	%r762, %r404, 1152, %r761;
	mad.lo.s32 	%r763, %r3, 24, %r3711;
	add.s32 	%r121, %r763, %r98;
	cvt.s64.s32 	%rd11, %r762;
	cvt.u16.u32 	%rs51, %r95;
	and.b16  	%rs52, %rs51, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r764, %rs56;
	and.b32  	%r765, %r764, 255;
	or.b32  	%r766, %r3711, %r98;
	mad.lo.s32 	%r122, %r765, 24, %r766;
	mul.wide.u32 	%rd50, %r726, 4;
	add.s64 	%rd12, %rd46, %rd50;
	add.s32 	%r767, %r744, 64;
	mul.wide.u32 	%rd51, %r767, 4;
	add.s64 	%rd13, %rd46, %rd51;
	add.s32 	%r768, %r756, 64;
	mul.wide.u32 	%rd52, %r768, 4;
	add.s64 	%rd14, %rd46, %rd52;
	add.s32 	%r769, %r744, 96;
	mul.wide.u32 	%rd53, %r769, 4;
	add.s64 	%rd15, %rd46, %rd53;
	add.s32 	%r770, %r760, 64;
	mul.wide.u32 	%rd54, %r770, 4;
	add.s64 	%rd16, %rd46, %rd54;
	add.s32 	%r771, %r744, 128;
	mul.wide.u32 	%rd55, %r771, 4;
	add.s64 	%rd17, %rd46, %rd55;
	add.s32 	%r772, %r756, 128;
	mul.wide.u32 	%rd56, %r772, 4;
	add.s64 	%rd18, %rd46, %rd56;
	add.s32 	%r773, %r744, 160;
	mul.wide.u32 	%rd57, %r773, 4;
	add.s64 	%rd19, %rd46, %rd57;
	add.s32 	%r774, %r760, 128;
	mul.wide.u32 	%rd58, %r774, 4;
	add.s64 	%rd20, %rd46, %rd58;
	add.s32 	%r775, %r744, 192;
	mul.wide.u32 	%rd59, %r775, 4;
	add.s64 	%rd21, %rd46, %rd59;
	add.s32 	%r776, %r756, 192;
	mul.wide.u32 	%rd60, %r776, 4;
	add.s64 	%rd22, %rd46, %rd60;
	add.s32 	%r777, %r744, 224;
	mul.wide.u32 	%rd61, %r777, 4;
	add.s64 	%rd23, %rd46, %rd61;
	add.s32 	%r778, %r760, 192;
	mul.wide.u32 	%rd62, %r778, 4;
	add.s64 	%rd24, %rd46, %rd62;
	setp.lt.u32 	%p244, %r1, 16;
	setp.gt.u32 	%p273, %r3, 7;
	setp.lt.u32 	%p277, %r1, 24;
	mov.u32 	%r3744, %r123;
	mov.u32 	%r3745, %r123;
	mov.u32 	%r3746, %r123;
	mov.u32 	%r3747, %r123;
	bra.uni 	$L__BB0_150;
$L__BB0_196:                            // %L28109
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r236, %r123, 48;
	setp.ne.s32 	%p363, %r123, 432;
	mov.u32 	%r123, %r236;
	@%p363 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_197;
$L__BB0_150:                            // %L1508
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_187 Depth 2
	add.s32 	%r779, %r123, %r398;
	setp.lt.s32 	%p243, %r779, %r399;
	@%p243 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_197;
$L__BB0_151:                            // %oksrem679
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r972, %r123, -1431655765;
	shr.u32 	%r973, %r972, 5;
	mul.lo.s32 	%r269, %r973, 48;
	add.s32 	%r974, %r269, %r3;
	cvt.u16.u32 	%rs57, %r974;
	shr.s16 	%rs58, %rs57, 15;
	shr.u16 	%rs59, %rs58, 7;
	add.s16 	%rs60, %rs57, %rs59;
	and.b16  	%rs61, %rs60, -512;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r975, %rs62;
	shl.b32 	%r976, %r975, 16;
	or.b32  	%r977, %r976, %r91;
	or.b32  	%r978, %r977, %r92;
	or.b32  	%r979, %r978, %r93;
	add.s32 	%r980, %r89, %r979;
	shr.s32 	%r981, %r980, 31;
	shr.u32 	%r982, %r981, 7;
	add.s32 	%r983, %r980, %r982;
	shr.s32 	%r984, %r983, 25;
	setp.lt.s32 	%p245, %r980, 0;
	and.b32  	%r985, %r983, -33554432;
	setp.ne.s32 	%p246, %r985, %r980;
	and.pred  	%p247, %p245, %p246;
	selp.u32 	%r986, 1, 0, %p247;
	sub.s32 	%r987, %r986, %r984;
	shl.b32 	%r988, %r987, 25;
	add.s32 	%r989, %r988, %r980;
	mul.wide.s32 	%rd63, %r989, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r990, %r991, %r992, %r993}, [%rd64];
	or.b32  	%r994, %r976, %r90;
	or.b32  	%r995, %r94, %r994;
	add.s32 	%r996, %r89, %r995;
	shr.s32 	%r997, %r996, 31;
	shr.u32 	%r998, %r997, 7;
	add.s32 	%r999, %r996, %r998;
	shr.u32 	%r1000, %r999, 25;
	shr.u32 	%r1001, %r996, 31;
	sub.s32 	%r1002, %r1001, %r1000;
	shl.b32 	%r1003, %r1002, 25;
	or.b32  	%r1004, %r996, 1;
	add.s32 	%r1005, %r1004, %r1003;
	mul.wide.s32 	%rd65, %r1005, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r1006, %r1007, %r1008, %r1009}, [%rd66+-4];
	add.s32 	%r1010, %r95, %r269;
	cvt.u16.u32 	%rs63, %r1010;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 7;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -512;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r1011, %rs68;
	shl.b32 	%r1012, %r1011, 16;
	or.b32  	%r1013, %r1012, %r91;
	or.b32  	%r1014, %r1013, %r92;
	or.b32  	%r1015, %r1014, %r93;
	add.s32 	%r1016, %r89, %r1015;
	shr.s32 	%r1017, %r1016, 31;
	shr.u32 	%r1018, %r1017, 7;
	add.s32 	%r1019, %r1016, %r1018;
	shr.s32 	%r1020, %r1019, 25;
	setp.lt.s32 	%p248, %r1016, 0;
	and.b32  	%r1021, %r1019, -33554432;
	setp.ne.s32 	%p249, %r1021, %r1016;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r1022, 1, 0, %p250;
	sub.s32 	%r1023, %r1022, %r1020;
	shl.b32 	%r1024, %r1023, 25;
	add.s32 	%r1025, %r1024, %r1016;
	mul.wide.s32 	%rd67, %r1025, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r1026, %r1027, %r1028, %r1029}, [%rd68];
	or.b32  	%r1030, %r1012, %r90;
	or.b32  	%r1031, %r94, %r1030;
	add.s32 	%r1032, %r89, %r1031;
	shr.s32 	%r1033, %r1032, 31;
	shr.u32 	%r1034, %r1033, 7;
	add.s32 	%r1035, %r1032, %r1034;
	shr.u32 	%r1036, %r1035, 25;
	shr.u32 	%r1037, %r1032, 31;
	sub.s32 	%r1038, %r1037, %r1036;
	shl.b32 	%r1039, %r1038, 25;
	or.b32  	%r1040, %r1032, 1;
	add.s32 	%r1041, %r1040, %r1039;
	mul.wide.s32 	%rd69, %r1041, 4;
	add.s64 	%rd70, %rd3, %rd69;
	ld.global.v4.u32 	{%r1042, %r1043, %r1044, %r1045}, [%rd70+-4];
	selp.b32 	%r1046, %r992, %r990, %p244;
	shfl.sync.bfly.b32	%r1047, %r1046, 16, 31, -1;
	selp.b32 	%r782, %r990, %r1047, %p244;
	selp.b32 	%r787, %r1047, %r992, %p244;
	selp.b32 	%r1048, %r993, %r991, %p244;
	shfl.sync.bfly.b32	%r1049, %r1048, 16, 31, -1;
	selp.b32 	%r790, %r991, %r1049, %p244;
	selp.b32 	%r795, %r1049, %r993, %p244;
	selp.b32 	%r1050, %r1008, %r1006, %p244;
	shfl.sync.bfly.b32	%r1051, %r1050, 16, 31, -1;
	selp.b32 	%r798, %r1006, %r1051, %p244;
	selp.b32 	%r803, %r1051, %r1008, %p244;
	selp.b32 	%r1052, %r1009, %r1007, %p244;
	shfl.sync.bfly.b32	%r1053, %r1052, 16, 31, -1;
	selp.b32 	%r806, %r1007, %r1053, %p244;
	selp.b32 	%r811, %r1053, %r1009, %p244;
	selp.b32 	%r1054, %r1028, %r1026, %p244;
	shfl.sync.bfly.b32	%r1055, %r1054, 16, 31, -1;
	selp.b32 	%r814, %r1026, %r1055, %p244;
	selp.b32 	%r819, %r1055, %r1028, %p244;
	selp.b32 	%r1056, %r1029, %r1027, %p244;
	shfl.sync.bfly.b32	%r1057, %r1056, 16, 31, -1;
	selp.b32 	%r822, %r1027, %r1057, %p244;
	selp.b32 	%r827, %r1057, %r1029, %p244;
	selp.b32 	%r1058, %r1044, %r1042, %p244;
	shfl.sync.bfly.b32	%r1059, %r1058, 16, 31, -1;
	selp.b32 	%r830, %r1042, %r1059, %p244;
	selp.b32 	%r835, %r1059, %r1044, %p244;
	selp.b32 	%r1060, %r1045, %r1043, %p244;
	shfl.sync.bfly.b32	%r1061, %r1060, 16, 31, -1;
	selp.b32 	%r838, %r1043, %r1061, %p244;
	selp.b32 	%r843, %r1061, %r1045, %p244;
	shl.b32 	%r783, %r787, 4;
	mov.u32 	%r781, 252645135;
	// begin inline asm
	lop3.b32 %r845, %r781, %r782, %r783, 202;
	// end inline asm
	shr.u32 	%r786, %r782, 4;
	// begin inline asm
	lop3.b32 %r861, %r781, %r786, %r787, 202;
	// end inline asm
	shl.b32 	%r791, %r795, 4;
	// begin inline asm
	lop3.b32 %r853, %r781, %r790, %r791, 202;
	// end inline asm
	shr.u32 	%r794, %r790, 4;
	// begin inline asm
	lop3.b32 %r869, %r781, %r794, %r795, 202;
	// end inline asm
	shl.b32 	%r799, %r803, 4;
	// begin inline asm
	lop3.b32 %r877, %r781, %r798, %r799, 202;
	// end inline asm
	shr.u32 	%r802, %r798, 4;
	// begin inline asm
	lop3.b32 %r893, %r781, %r802, %r803, 202;
	// end inline asm
	shl.b32 	%r807, %r811, 4;
	// begin inline asm
	lop3.b32 %r885, %r781, %r806, %r807, 202;
	// end inline asm
	shr.u32 	%r810, %r806, 4;
	// begin inline asm
	lop3.b32 %r901, %r781, %r810, %r811, 202;
	// end inline asm
	shl.b32 	%r815, %r819, 4;
	// begin inline asm
	lop3.b32 %r846, %r781, %r814, %r815, 202;
	// end inline asm
	shr.u32 	%r818, %r814, 4;
	// begin inline asm
	lop3.b32 %r862, %r781, %r818, %r819, 202;
	// end inline asm
	shl.b32 	%r823, %r827, 4;
	// begin inline asm
	lop3.b32 %r854, %r781, %r822, %r823, 202;
	// end inline asm
	shr.u32 	%r826, %r822, 4;
	// begin inline asm
	lop3.b32 %r870, %r781, %r826, %r827, 202;
	// end inline asm
	shl.b32 	%r831, %r835, 4;
	// begin inline asm
	lop3.b32 %r878, %r781, %r830, %r831, 202;
	// end inline asm
	shr.u32 	%r834, %r830, 4;
	// begin inline asm
	lop3.b32 %r894, %r781, %r834, %r835, 202;
	// end inline asm
	shl.b32 	%r839, %r843, 4;
	// begin inline asm
	lop3.b32 %r886, %r781, %r838, %r839, 202;
	// end inline asm
	shr.u32 	%r842, %r838, 4;
	// begin inline asm
	lop3.b32 %r902, %r781, %r842, %r843, 202;
	// end inline asm
	mov.u32 	%r847, 25152;
	// begin inline asm
	prmt.b32 %r909, %r845, %r846, %r847;
	// end inline asm
	mov.u32 	%r851, 29521;
	// begin inline asm
	prmt.b32 %r941, %r845, %r846, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r917, %r853, %r854, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r949, %r853, %r854, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r910, %r861, %r862, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r942, %r861, %r862, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r918, %r869, %r870, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r950, %r869, %r870, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r925, %r877, %r878, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r957, %r877, %r878, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r933, %r885, %r886, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r965, %r885, %r886, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r926, %r893, %r894, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r958, %r893, %r894, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r934, %r901, %r902, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r966, %r901, %r902, %r851;
	// end inline asm
	mov.u32 	%r911, 21520;
	// begin inline asm
	prmt.b32 %r908, %r909, %r910, %r911;
	// end inline asm
	mov.u32 	%r915, 30258;
	// begin inline asm
	prmt.b32 %r912, %r909, %r910, %r915;
	// end inline asm
	// begin inline asm
	prmt.b32 %r916, %r917, %r918, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r920, %r917, %r918, %r915;
	// end inline asm
	// begin inline asm
	prmt.b32 %r924, %r925, %r926, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r928, %r925, %r926, %r915;
	// end inline asm
	// begin inline asm
	prmt.b32 %r932, %r933, %r934, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r936, %r933, %r934, %r915;
	// end inline asm
	// begin inline asm
	prmt.b32 %r940, %r941, %r942, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r944, %r941, %r942, %r915;
	// end inline asm
	// begin inline asm
	prmt.b32 %r948, %r949, %r950, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r952, %r949, %r950, %r915;
	// end inline asm
	// begin inline asm
	prmt.b32 %r956, %r957, %r958, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r960, %r957, %r958, %r915;
	// end inline asm
	// begin inline asm
	prmt.b32 %r964, %r965, %r966, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r968, %r965, %r966, %r915;
	// end inline asm
	mul.hi.s16 	%rs69, %rs57, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs57, %rs73;
	cvt.s32.s16 	%r1062, %rs74;
	add.s32 	%r1063, %r96, %r1062;
	mul.wide.s32 	%rd71, %r1063, 4;
	add.s64 	%rd73, %rd46, %rd71;
	st.shared.u32 	[%rd73], %r908;
	add.s32 	%r1064, %r1063, 128;
	mul.wide.u32 	%rd74, %r1064, 4;
	add.s64 	%rd75, %rd46, %rd74;
	st.shared.u32 	[%rd75], %r916;
	add.s32 	%r1065, %r1063, 64;
	mul.wide.u32 	%rd76, %r1065, 4;
	add.s64 	%rd77, %rd46, %rd76;
	st.shared.u32 	[%rd77], %r912;
	add.s32 	%r1066, %r1063, 192;
	mul.wide.u32 	%rd78, %r1066, 4;
	add.s64 	%rd79, %rd46, %rd78;
	st.shared.u32 	[%rd79], %r920;
	add.s32 	%r1067, %r97, %r1062;
	mul.wide.u32 	%rd80, %r1067, 4;
	add.s64 	%rd81, %rd46, %rd80;
	st.shared.u32 	[%rd81], %r924;
	add.s32 	%r1068, %r1067, 128;
	mul.wide.u32 	%rd82, %r1068, 4;
	add.s64 	%rd83, %rd46, %rd82;
	st.shared.u32 	[%rd83], %r932;
	add.s32 	%r1069, %r1067, 64;
	mul.wide.u32 	%rd84, %r1069, 4;
	add.s64 	%rd85, %rd46, %rd84;
	st.shared.u32 	[%rd85], %r928;
	add.s32 	%r1070, %r1067, 192;
	mul.wide.u32 	%rd86, %r1070, 4;
	add.s64 	%rd87, %rd46, %rd86;
	st.shared.u32 	[%rd87], %r936;
	add.s32 	%r1071, %r1063, 32;
	mul.wide.u32 	%rd88, %r1071, 4;
	add.s64 	%rd89, %rd46, %rd88;
	st.shared.u32 	[%rd89], %r940;
	add.s32 	%r1072, %r1063, 160;
	mul.wide.u32 	%rd90, %r1072, 4;
	add.s64 	%rd91, %rd46, %rd90;
	st.shared.u32 	[%rd91], %r948;
	add.s32 	%r1073, %r1063, 96;
	mul.wide.u32 	%rd92, %r1073, 4;
	add.s64 	%rd93, %rd46, %rd92;
	st.shared.u32 	[%rd93], %r944;
	add.s32 	%r1074, %r1063, 224;
	mul.wide.u32 	%rd94, %r1074, 4;
	add.s64 	%rd95, %rd46, %rd94;
	st.shared.u32 	[%rd95], %r952;
	add.s32 	%r1075, %r1067, 32;
	mul.wide.u32 	%rd96, %r1075, 4;
	add.s64 	%rd97, %rd46, %rd96;
	st.shared.u32 	[%rd97], %r956;
	add.s32 	%r1076, %r1067, 160;
	mul.wide.u32 	%rd98, %r1076, 4;
	add.s64 	%rd99, %rd46, %rd98;
	st.shared.u32 	[%rd99], %r964;
	add.s32 	%r1077, %r1067, 96;
	mul.wide.u32 	%rd100, %r1077, 4;
	add.s64 	%rd101, %rd46, %rd100;
	st.shared.u32 	[%rd101], %r960;
	add.s32 	%r1078, %r1067, 224;
	mul.wide.u32 	%rd102, %r1078, 4;
	add.s64 	%rd103, %rd46, %rd102;
	st.shared.u32 	[%rd103], %r968;
	bar.sync 	0;
	add.s32 	%r1079, %r269, %r98;
	cvt.u16.u32 	%rs75, %r1079;
	mul.hi.s16 	%rs76, %rs75, 10923;
	shr.u16 	%rs77, %rs76, 15;
	shr.s16 	%rs78, %rs76, 2;
	add.s16 	%rs79, %rs78, %rs77;
	mul.lo.s16 	%rs80, %rs79, 24;
	sub.s16 	%rs81, %rs75, %rs80;
	cvt.s32.s16 	%r270, %rs81;
	add.s32 	%r1080, %r99, %r270;
	mul.wide.s32 	%rd104, %r1080, 4;
	add.s64 	%rd105, %rd46, %rd104;
	ld.shared.u32 	%r271, [%rd105];
	add.s32 	%r1081, %r100, %r270;
	mul.wide.u32 	%rd106, %r1081, 4;
	add.s64 	%rd107, %rd46, %rd106;
	ld.shared.u32 	%r272, [%rd107];
	add.s32 	%r1082, %r101, %r270;
	mul.wide.u32 	%rd108, %r1082, 4;
	add.s64 	%rd109, %rd46, %rd108;
	ld.shared.u32 	%r273, [%rd109];
	add.s32 	%r1083, %r102, %r270;
	mul.wide.u32 	%rd110, %r1083, 4;
	add.s64 	%rd111, %rd46, %rd110;
	ld.shared.u32 	%r274, [%rd111];
	add.s32 	%r1084, %r103, %r270;
	mul.wide.u32 	%rd112, %r1084, 4;
	add.s64 	%rd113, %rd46, %rd112;
	ld.shared.u32 	%r275, [%rd113];
	add.s32 	%r1085, %r104, %r270;
	mul.wide.u32 	%rd114, %r1085, 4;
	add.s64 	%rd115, %rd46, %rd114;
	ld.shared.u32 	%r276, [%rd115];
	add.s32 	%r1086, %r105, %r270;
	mul.wide.u32 	%rd116, %r1086, 4;
	add.s64 	%rd117, %rd46, %rd116;
	ld.shared.u32 	%r277, [%rd117];
	add.s32 	%r1087, %r106, %r270;
	mul.wide.u32 	%rd118, %r1087, 4;
	add.s64 	%rd119, %rd46, %rd118;
	ld.shared.u32 	%r278, [%rd119];
	add.s32 	%r1088, %r107, %r270;
	mul.wide.u32 	%rd120, %r1088, 4;
	add.s64 	%rd121, %rd46, %rd120;
	ld.shared.u32 	%r279, [%rd121];
	add.s32 	%r1089, %r108, %r270;
	mul.wide.u32 	%rd122, %r1089, 4;
	add.s64 	%rd123, %rd46, %rd122;
	ld.shared.u32 	%r280, [%rd123];
	add.s32 	%r1090, %r109, %r270;
	mul.wide.u32 	%rd124, %r1090, 4;
	add.s64 	%rd125, %rd46, %rd124;
	ld.shared.u32 	%r281, [%rd125];
	add.s32 	%r1091, %r110, %r270;
	mul.wide.u32 	%rd126, %r1091, 4;
	add.s64 	%rd127, %rd46, %rd126;
	ld.shared.u32 	%r282, [%rd127];
	add.s32 	%r1092, %r111, %r270;
	mul.wide.u32 	%rd128, %r1092, 4;
	add.s64 	%rd129, %rd46, %rd128;
	ld.shared.u32 	%r283, [%rd129];
	add.s32 	%r1093, %r112, %r270;
	mul.wide.u32 	%rd130, %r1093, 4;
	add.s64 	%rd131, %rd46, %rd130;
	ld.shared.u32 	%r284, [%rd131];
	add.s32 	%r1094, %r113, %r270;
	mul.wide.u32 	%rd132, %r1094, 4;
	add.s64 	%rd133, %rd46, %rd132;
	ld.shared.u32 	%r285, [%rd133];
	add.s32 	%r1095, %r114, %r270;
	mul.wide.u32 	%rd134, %r1095, 4;
	add.s64 	%rd135, %rd46, %rd134;
	ld.shared.u32 	%r286, [%rd135];
	add.s32 	%r1096, %r115, %r270;
	mul.wide.u32 	%rd136, %r1096, 4;
	add.s64 	%rd137, %rd46, %rd136;
	ld.shared.u32 	%r287, [%rd137];
	add.s32 	%r1097, %r116, %r270;
	mul.wide.u32 	%rd138, %r1097, 4;
	add.s64 	%rd139, %rd46, %rd138;
	ld.shared.u32 	%r288, [%rd139];
	add.s32 	%r1098, %r117, %r270;
	mul.wide.u32 	%rd140, %r1098, 4;
	add.s64 	%rd141, %rd46, %rd140;
	ld.shared.u32 	%r289, [%rd141];
	add.s32 	%r1099, %r118, %r270;
	mul.wide.u32 	%rd142, %r1099, 4;
	add.s64 	%rd143, %rd46, %rd142;
	ld.shared.u32 	%r290, [%rd143];
	add.s32 	%r1100, %r119, %r270;
	mul.wide.u32 	%rd144, %r1100, 4;
	add.s64 	%rd145, %rd46, %rd144;
	ld.shared.u32 	%r291, [%rd145];
	add.s32 	%r1101, %r120, %r270;
	mul.wide.s32 	%rd146, %r1101, 4;
	add.s64 	%rd147, %rd46, %rd146;
	ld.shared.u32 	%r292, [%rd147];
	bar.sync 	0;
	shfl.sync.idx.b32	%r293, %r263, 0, 31, -1;
	shfl.sync.idx.b32	%r294, %r263, 1, 31, -1;
	shfl.sync.idx.b32	%r295, %r263, 2, 31, -1;
	shfl.sync.idx.b32	%r296, %r263, 3, 31, -1;
	shfl.sync.idx.b32	%r297, %r263, 4, 31, -1;
	shfl.sync.idx.b32	%r298, %r263, 5, 31, -1;
	shfl.sync.idx.b32	%r299, %r263, 6, 31, -1;
	shfl.sync.idx.b32	%r300, %r263, 7, 31, -1;
	shfl.sync.idx.b32	%r301, %r263, 8, 31, -1;
	shfl.sync.idx.b32	%r302, %r263, 9, 31, -1;
	shfl.sync.idx.b32	%r303, %r263, 10, 31, -1;
	shfl.sync.idx.b32	%r304, %r263, 11, 31, -1;
	shfl.sync.idx.b32	%r305, %r263, 12, 31, -1;
	shfl.sync.idx.b32	%r306, %r263, 13, 31, -1;
	shfl.sync.idx.b32	%r307, %r263, 14, 31, -1;
	shfl.sync.idx.b32	%r308, %r263, 15, 31, -1;
	shfl.sync.idx.b32	%r309, %r263, 16, 31, -1;
	shfl.sync.idx.b32	%r310, %r263, 17, 31, -1;
	shfl.sync.idx.b32	%r311, %r263, 18, 31, -1;
	shfl.sync.idx.b32	%r312, %r263, 19, 31, -1;
	shfl.sync.idx.b32	%r313, %r263, 20, 31, -1;
	shfl.sync.idx.b32	%r314, %r263, 21, 31, -1;
	shfl.sync.idx.b32	%r315, %r263, 22, 31, -1;
	shfl.sync.idx.b32	%r316, %r263, 23, 31, -1;
	setp.eq.s32 	%p251, %r293, 999999999;
	@%p251 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3332
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1102, %r293, %r270;
	mul.wide.s32 	%rd148, %r1102, 4;
	add.s64 	%rd150, %rd46, %rd148;
	st.shared.u32 	[%rd150], %r271;
	setp.eq.s32 	%p252, %r294, 999999999;
	@%p252 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3400
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1103, %r294, %r270;
	mul.wide.s32 	%rd151, %r1103, 4;
	add.s64 	%rd153, %rd46, %rd151;
	st.shared.u32 	[%rd153], %r272;
	setp.eq.s32 	%p253, %r295, 999999999;
	@%p253 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3468
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1104, %r295, %r270;
	mul.wide.s32 	%rd154, %r1104, 4;
	add.s64 	%rd156, %rd46, %rd154;
	st.shared.u32 	[%rd156], %r273;
	setp.eq.s32 	%p254, %r296, 999999999;
	@%p254 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3536
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1105, %r296, %r270;
	mul.wide.s32 	%rd157, %r1105, 4;
	add.s64 	%rd159, %rd46, %rd157;
	st.shared.u32 	[%rd159], %r274;
	setp.eq.s32 	%p255, %r297, 999999999;
	@%p255 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3604
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1106, %r297, %r270;
	mul.wide.s32 	%rd160, %r1106, 4;
	add.s64 	%rd162, %rd46, %rd160;
	st.shared.u32 	[%rd162], %r275;
	setp.eq.s32 	%p256, %r298, 999999999;
	@%p256 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3672
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1107, %r298, %r270;
	mul.wide.s32 	%rd163, %r1107, 4;
	add.s64 	%rd165, %rd46, %rd163;
	st.shared.u32 	[%rd165], %r276;
	setp.eq.s32 	%p257, %r299, 999999999;
	@%p257 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3740
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1108, %r299, %r270;
	mul.wide.s32 	%rd166, %r1108, 4;
	add.s64 	%rd168, %rd46, %rd166;
	st.shared.u32 	[%rd168], %r277;
	setp.eq.s32 	%p258, %r300, 999999999;
	@%p258 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3808
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1109, %r300, %r270;
	mul.wide.s32 	%rd169, %r1109, 4;
	add.s64 	%rd171, %rd46, %rd169;
	st.shared.u32 	[%rd171], %r278;
	setp.eq.s32 	%p259, %r301, 999999999;
	@%p259 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3876
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1110, %r301, %r270;
	mul.wide.s32 	%rd172, %r1110, 4;
	add.s64 	%rd174, %rd46, %rd172;
	st.shared.u32 	[%rd174], %r279;
	setp.eq.s32 	%p260, %r302, 999999999;
	@%p260 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem3944
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1111, %r302, %r270;
	mul.wide.s32 	%rd175, %r1111, 4;
	add.s64 	%rd177, %rd46, %rd175;
	st.shared.u32 	[%rd177], %r280;
	setp.eq.s32 	%p261, %r303, 999999999;
	@%p261 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4012
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1112, %r303, %r270;
	mul.wide.s32 	%rd178, %r1112, 4;
	add.s64 	%rd180, %rd46, %rd178;
	st.shared.u32 	[%rd180], %r281;
	setp.eq.s32 	%p262, %r304, 999999999;
	@%p262 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4080
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1113, %r304, %r270;
	mul.wide.s32 	%rd181, %r1113, 4;
	add.s64 	%rd183, %rd46, %rd181;
	st.shared.u32 	[%rd183], %r282;
	setp.eq.s32 	%p263, %r305, 999999999;
	@%p263 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4148
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1114, %r305, %r270;
	mul.wide.s32 	%rd184, %r1114, 4;
	add.s64 	%rd186, %rd46, %rd184;
	st.shared.u32 	[%rd186], %r283;
	setp.eq.s32 	%p264, %r306, 999999999;
	@%p264 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4216
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1115, %r306, %r270;
	mul.wide.s32 	%rd187, %r1115, 4;
	add.s64 	%rd189, %rd46, %rd187;
	st.shared.u32 	[%rd189], %r284;
	setp.eq.s32 	%p265, %r307, 999999999;
	@%p265 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4284
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1116, %r307, %r270;
	mul.wide.s32 	%rd190, %r1116, 4;
	add.s64 	%rd192, %rd46, %rd190;
	st.shared.u32 	[%rd192], %r285;
	setp.eq.s32 	%p266, %r308, 999999999;
	@%p266 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4352
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1117, %r308, %r270;
	mul.wide.s32 	%rd193, %r1117, 4;
	add.s64 	%rd195, %rd46, %rd193;
	st.shared.u32 	[%rd195], %r286;
	setp.eq.s32 	%p267, %r309, 999999999;
	@%p267 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4420
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1118, %r309, %r270;
	mul.wide.s32 	%rd196, %r1118, 4;
	add.s64 	%rd198, %rd46, %rd196;
	st.shared.u32 	[%rd198], %r287;
	setp.eq.s32 	%p268, %r310, 999999999;
	@%p268 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4488
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1119, %r310, %r270;
	mul.wide.s32 	%rd199, %r1119, 4;
	add.s64 	%rd201, %rd46, %rd199;
	st.shared.u32 	[%rd201], %r288;
	setp.eq.s32 	%p269, %r311, 999999999;
	@%p269 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4556
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1120, %r311, %r270;
	mul.wide.s32 	%rd202, %r1120, 4;
	add.s64 	%rd204, %rd46, %rd202;
	st.shared.u32 	[%rd204], %r289;
	setp.eq.s32 	%p270, %r312, 999999999;
	@%p270 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4624
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1121, %r312, %r270;
	mul.wide.s32 	%rd205, %r1121, 4;
	add.s64 	%rd207, %rd46, %rd205;
	st.shared.u32 	[%rd207], %r290;
	setp.eq.s32 	%p271, %r313, 999999999;
	@%p271 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4692
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1122, %r313, %r270;
	mul.wide.s32 	%rd208, %r1122, 4;
	add.s64 	%rd210, %rd46, %rd208;
	st.shared.u32 	[%rd210], %r291;
	setp.eq.s32 	%p272, %r314, 999999999;
	@%p272 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4761
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1123, 0, %r292, %p273;
	add.s32 	%r1124, %r314, %r270;
	mul.wide.s32 	%rd211, %r1124, 4;
	add.s64 	%rd213, %rd46, %rd211;
	st.shared.u32 	[%rd213], %r1123;
	setp.eq.s32 	%p274, %r315, 999999999;
	@%p274 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4829
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1125, %r315, %r270;
	mul.wide.s32 	%rd214, %r1125, 4;
	add.s64 	%rd216, %rd46, %rd214;
	mov.u32 	%r3719, 0;
	st.shared.u32 	[%rd216], %r3719;
	setp.eq.s32 	%p275, %r316, 999999999;
	@%p275 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4896
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1128, %r316, %r270;
	mul.wide.s32 	%rd217, %r1128, 4;
	add.s64 	%rd219, %rd46, %rd217;
	st.shared.u32 	[%rd219], %r3719;
	bar.sync 	0;
	mov.u32 	%r3720, %r3719;
	mov.u32 	%r3721, %r3719;
	mov.u32 	%r3722, %r3719;
	mov.u32 	%r3723, %r3719;
	mov.u32 	%r3724, %r3719;
	mov.u32 	%r3725, %r3719;
	mov.u32 	%r3726, %r3719;
	mov.u32 	%r3727, %r3719;
	mov.u32 	%r3728, %r3719;
	mov.u32 	%r3729, %r3719;
	mov.u32 	%r3730, %r3719;
	mov.u32 	%r3731, %r3719;
	mov.u32 	%r3732, %r3719;
	mov.u32 	%r3733, %r3719;
	mov.u32 	%r3734, %r3719;
	mov.u32 	%r3735, %r3719;
	mov.u32 	%r3736, %r3719;
	mov.u32 	%r3737, %r3719;
	mov.u32 	%r3738, %r3719;
	mov.u32 	%r3739, %r3719;
	mov.u32 	%r3740, %r3719;
	mov.u32 	%r3741, %r3719;
	mov.u32 	%r3742, %r3719;
	@%p91 bra 	$L__BB0_176;
// %bb.250:                             // %oksrem4959
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs82, %r269;
	mul.hi.s16 	%rs83, %rs82, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs82, %rs87;
	cvt.s32.s16 	%r1129, %rs88;
	mul.wide.s32 	%rd220, %r1129, 4;
	add.s64 	%rd221, %rd12, %rd220;
	ld.shared.u32 	%r3719, [%rd221];
	ld.shared.u32 	%r3720, [%rd12+4];
	ld.shared.u32 	%r3721, [%rd12+8];
	ld.shared.u32 	%r3722, [%rd12+12];
	ld.shared.u32 	%r3723, [%rd12+16];
	ld.shared.u32 	%r3724, [%rd12+20];
	ld.shared.u32 	%r3725, [%rd12+24];
	ld.shared.u32 	%r3726, [%rd12+28];
	ld.shared.u32 	%r3727, [%rd12+32];
	ld.shared.u32 	%r3728, [%rd12+36];
	ld.shared.u32 	%r3729, [%rd12+40];
	ld.shared.u32 	%r3730, [%rd12+44];
	ld.shared.u32 	%r3731, [%rd12+48];
	ld.shared.u32 	%r3732, [%rd12+52];
	ld.shared.u32 	%r3733, [%rd12+56];
	ld.shared.u32 	%r3734, [%rd12+60];
	add.s16 	%rs89, %rs82, 16;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r1130, %rs95;
	mul.wide.s32 	%rd222, %r1130, 4;
	add.s64 	%rd223, %rd12, %rd222;
	ld.shared.u32 	%r3735, [%rd223];
	add.s16 	%rs96, %rs82, 17;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r1131, %rs102;
	mul.wide.s32 	%rd224, %r1131, 4;
	add.s64 	%rd225, %rd12, %rd224;
	ld.shared.u32 	%r3736, [%rd225];
	add.s16 	%rs103, %rs82, 18;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r1132, %rs109;
	mul.wide.s32 	%rd226, %r1132, 4;
	add.s64 	%rd227, %rd12, %rd226;
	ld.shared.u32 	%r3737, [%rd227];
	add.s16 	%rs110, %rs82, 19;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r1133, %rs116;
	mul.wide.s32 	%rd228, %r1133, 4;
	add.s64 	%rd229, %rd12, %rd228;
	ld.shared.u32 	%r3738, [%rd229];
	add.s16 	%rs117, %rs82, 20;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r1134, %rs123;
	mul.wide.s32 	%rd230, %r1134, 4;
	add.s64 	%rd231, %rd12, %rd230;
	ld.shared.u32 	%r3739, [%rd231];
	add.s16 	%rs124, %rs82, 21;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r1135, %rs130;
	mul.wide.s32 	%rd232, %r1135, 4;
	add.s64 	%rd233, %rd12, %rd232;
	ld.shared.u32 	%r3740, [%rd233];
	add.s16 	%rs131, %rs82, 22;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r1136, %rs137;
	mul.wide.s32 	%rd234, %r1136, 4;
	add.s64 	%rd235, %rd12, %rd234;
	ld.shared.u32 	%r3741, [%rd235];
	add.s16 	%rs138, %rs82, 23;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r1137, %rs144;
	mul.wide.s32 	%rd236, %r1137, 4;
	add.s64 	%rd237, %rd12, %rd236;
	ld.shared.u32 	%r3742, [%rd237];
$L__BB0_176:                            // %L14042
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3743, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_184:                            // %L21066
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3745, %r3745, 1;
	mov.u32 	%r3744, 0;
	mov.u32 	%r3746, %r3744;
	mov.u32 	%r3747, %r3744;
$L__BB0_185:                            // %L21067
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3743, %r3743, -4;
	setp.ne.s32 	%p319, %r3743, -12;
	@%p319 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_186;
$L__BB0_177:                            // %L14068
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p278, %r3743, 12;
	selp.b32 	%r1676, %r3719, 0, %p278;
	setp.eq.s32 	%p279, %r3743, 8;
	selp.b32 	%r1677, %r3723, %r1676, %p279;
	setp.eq.s32 	%p280, %r3743, 4;
	selp.b32 	%r1678, %r3727, %r1677, %p280;
	setp.eq.s32 	%p281, %r3743, 0;
	selp.b32 	%r1679, %r3731, %r1678, %p281;
	setp.eq.s32 	%p282, %r3743, -4;
	selp.b32 	%r1680, %r3735, %r1679, %p282;
	setp.eq.s32 	%p283, %r3743, -8;
	selp.b32 	%r1681, %r3739, %r1680, %p283;
	selp.b32 	%r1682, %r3720, 0, %p278;
	selp.b32 	%r1683, %r3724, %r1682, %p279;
	selp.b32 	%r1684, %r3728, %r1683, %p280;
	selp.b32 	%r1685, %r3732, %r1684, %p281;
	selp.b32 	%r1686, %r3736, %r1685, %p282;
	selp.b32 	%r1687, %r3740, %r1686, %p283;
	selp.b32 	%r1688, %r3721, 0, %p278;
	selp.b32 	%r1689, %r3725, %r1688, %p279;
	selp.b32 	%r1690, %r3729, %r1689, %p280;
	selp.b32 	%r1691, %r3733, %r1690, %p281;
	selp.b32 	%r1692, %r3737, %r1691, %p282;
	selp.b32 	%r1693, %r3741, %r1692, %p283;
	selp.b32 	%r1694, %r3722, 0, %p278;
	selp.b32 	%r1695, %r3726, %r1694, %p279;
	selp.b32 	%r1696, %r3730, %r1695, %p280;
	selp.b32 	%r1697, %r3734, %r1696, %p281;
	selp.b32 	%r1698, %r3738, %r1697, %p282;
	selp.b32 	%r1699, %r3742, %r1698, %p283;
	mov.u16 	%rs182, 25600;
	// begin inline asm
	mov.b32 %r1144, {%rs182, %rs182};
	// end inline asm
	mov.u16 	%rs184, 21504;
	// begin inline asm
	mov.b32 %r1155, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1143, %r1681, -2004318072;
	mov.u32 	%r1280, 983055;
	// begin inline asm
	lop3.b32 %r1141, %r1280, %r1143, %r1144, 202;
	// end inline asm
	mov.u16 	%rs188, 18432;
	// begin inline asm
	mov.b32 %r1145, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1146, %r1144, %r1145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1149, %r1141, %r1146;
	// end inline asm
	mov.u32 	%r1291, 15728880;
	// begin inline asm
	lop3.b32 %r1152, %r1291, %r1143, %r1155, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1156, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1157, %r1155, %r1156;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1160, %r1152, %r1157;
	// end inline asm
	// begin inline asm
	mov.b32 %r1190, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1201, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1189, %r1687, -2004318072;
	// begin inline asm
	lop3.b32 %r1187, %r1280, %r1189, %r1190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1191, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1192, %r1190, %r1191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1195, %r1187, %r1192;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1198, %r1291, %r1189, %r1201, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1202, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1203, %r1201, %r1202;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1206, %r1198, %r1203;
	// end inline asm
	// begin inline asm
	mov.b32 %r1236, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1247, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1235, %r1693, -2004318072;
	// begin inline asm
	lop3.b32 %r1233, %r1280, %r1235, %r1236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1238, %r1236, %r1237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1241, %r1233, %r1238;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1244, %r1291, %r1235, %r1247, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1248, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1249, %r1247, %r1248;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1252, %r1244, %r1249;
	// end inline asm
	// begin inline asm
	mov.b32 %r1282, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1293, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1281, %r1699, -2004318072;
	// begin inline asm
	lop3.b32 %r1279, %r1280, %r1281, %r1282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1284, %r1282, %r1283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1287, %r1279, %r1284;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1290, %r1291, %r1281, %r1293, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1294, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1295, %r1293, %r1294;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1298, %r1290, %r1295;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1149;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1323, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1160;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1326, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1195;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1329, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1206;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1332, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1241;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1335, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1252;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1338, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1287;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1341, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1298;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1344, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1675, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1410, %r1407}, {%r429, %r432}, {%r1323}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1419, %r1416}, {%r429, %r432}, {%r1326}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1428, %r1425}, {%r429, %r432}, {%r1329}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1437, %r1434}, {%r429, %r432}, {%r1332}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1446, %r1443}, {%r429, %r432}, {%r1335}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1455, %r1452}, {%r429, %r432}, {%r1338}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1464, %r1461}, {%r429, %r432}, {%r1341}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1473, %r1470}, {%r429, %r432}, {%r1344}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1403, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1405, %r1403, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1408, %r481, %r1410, %r1405;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1412, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1414, %r1412, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1417, %r481, %r1419, %r1414;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1421, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1423, %r1421, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1426, %r481, %r1428, %r1423;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1430, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1432, %r1430, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r481, %r1437, %r1432;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1439, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1441, %r1439, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1444, %r481, %r1446, %r1441;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1448, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1450, %r1448, %r1452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1453, %r481, %r1455, %r1450;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1457, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1459, %r1457, %r1461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1462, %r481, %r1464, %r1459;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1466, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1468, %r1466, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1471, %r481, %r1473, %r1468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1475, %r484, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1478, %r481, %r1407, %r1475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1482, %r484, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1485, %r481, %r1416, %r1482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1489, %r484, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r481, %r1425, %r1489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1496, %r484, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1499, %r481, %r1434, %r1496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1503, %r484, %r1446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1506, %r481, %r1443, %r1503;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1510, %r484, %r1455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r481, %r1452, %r1510;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1517, %r484, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r481, %r1461, %r1517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r484, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r481, %r1470, %r1524;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1531, %r1532}, {%r525, %r531, %r528, %r534}, {%r1408, %r1478}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1541, %r1542}, {%r525, %r531, %r528, %r534}, {%r1417, %r1485}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1551, %r1552}, {%r525, %r531, %r528, %r534}, {%r1426, %r1492}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1561, %r1562}, {%r525, %r531, %r528, %r534}, {%r1435, %r1499}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1571, %r1572}, {%r525, %r531, %r528, %r534}, {%r1444, %r1506}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1581, %r1582}, {%r525, %r531, %r528, %r534}, {%r1453, %r1513}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1591, %r1592}, {%r525, %r531, %r528, %r534}, {%r1462, %r1520}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1601, %r1602}, {%r525, %r531, %r528, %r534}, {%r1471, %r1527}, {%r1675, %r1675};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3748, %r1675;
	mov.u32 	%r3749, %r1675;
	mov.u32 	%r3750, %r1675;
	mov.u32 	%r3751, %r1675;
	@%p277 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %oksrem6461
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3748, [%rd7];
	ld.shared.u32 	%r3749, [%rd8];
	ld.shared.u32 	%r3750, [%rd9];
	ld.shared.u32 	%r3751, [%rd10];
$L__BB0_178:                            // %L15701
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1735, %r1732}, {%r543, %r546}, {%r3748}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1744, %r1741}, {%r543, %r546}, {%r3749}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1753, %r1750}, {%r543, %r546}, {%r3750}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1762, %r1759}, {%r543, %r546}, {%r3751}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1728, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r595, %r1735, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1737, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r1737, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r595, %r1744, %r1739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1746, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1748, %r1746, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1751, %r595, %r1753, %r1748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1755, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1757, %r1755, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r595, %r1762, %r1757;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1764, %r598, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r595, %r1732, %r1764;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1771, %r598, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r595, %r1741, %r1771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r598, %r1753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r595, %r1750, %r1778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1785, %r598, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r595, %r1759, %r1785;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1833, %r1836}, {%r639, %r645, %r642, %r648}, {%r1733, %r1767}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1852, %r1855}, {%r639, %r645, %r642, %r648}, {%r1742, %r1774}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1840, %r1844}, {%r639, %r645, %r642, %r648}, {%r1751, %r1781}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1859, %r1863}, {%r639, %r645, %r642, %r648}, {%r1760, %r1788}, {%r1675, %r1675};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1832, %r1833, %r1833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r1836, %r1836, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r1840, %r1840, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r1844, %r1844, %r1839;
	// end inline asm
	mov.u32 	%r1867, 693446997;
	// begin inline asm
	fma.rn.f16x2 %r3801, %r1867, %r1843, %r3747;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1851, %r1852, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1854, %r1855, %r1855, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r1859, %r1859, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1862, %r1863, %r1863, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3800, %r1867, %r1862, %r3746;
	// end inline asm
	add.s32 	%r3798, %r3744, 1;
	setp.eq.s32 	%p284, %r3798, 3;
	@%p284 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_182;
$L__BB0_179:                            // %pass6958
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_181;
// %bb.180:                             // %pass6968
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r1870, %r3745, 589824;
	add.s32 	%r1871, %r121, %r1870;
	cvt.s64.s32 	%rd238, %r1871;
	add.s64 	%rd239, %rd238, %rd11;
	mul.hi.s64 	%rd240, %rd239, 1024819115206086201;
	shr.u64 	%rd241, %rd240, 63;
	shr.s64 	%rd242, %rd240, 25;
	add.s64 	%rd243, %rd242, %rd241;
	setp.lt.s64 	%p286, %rd239, 0;
	mul.lo.s64 	%rd244, %rd243, 603979776;
	setp.ne.s64 	%p287, %rd244, %rd239;
	and.pred  	%p288, %p286, %p287;
	selp.s64 	%rd245, -1, 0, %p288;
	add.s64 	%rd246, %rd243, %rd245;
	mul.lo.s64 	%rd247, %rd246, -603979776;
	add.s64 	%rd248, %rd247, %rd239;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r3801;
	add.s32 	%r1872, %r122, %r1870;
	cvt.s64.s32 	%rd251, %r1872;
	add.s64 	%rd252, %rd251, %rd11;
	mul.hi.s64 	%rd253, %rd252, 1024819115206086201;
	shr.u64 	%rd254, %rd253, 63;
	shr.s64 	%rd255, %rd253, 25;
	add.s64 	%rd256, %rd255, %rd254;
	setp.lt.s64 	%p289, %rd252, 0;
	mul.lo.s64 	%rd257, %rd256, 603979776;
	setp.ne.s64 	%p290, %rd257, %rd252;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd258, -1, 0, %p291;
	add.s64 	%rd259, %rd256, %rd258;
	mul.lo.s64 	%rd260, %rd259, -603979776;
	add.s64 	%rd261, %rd260, %rd252;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd263, %rd4, %rd262;
	st.global.u32 	[%rd263], %r3800;
$L__BB0_181:                            // %L16233
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3745, %r3745, 1;
	mov.u32 	%r3798, 0;
	mov.u32 	%r3800, %r3798;
	mov.u32 	%r3801, %r3798;
$L__BB0_182:                            // %pass7134
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r1874, 0;
	mov.u32 	%r3752, %r1874;
	mov.u32 	%r3753, %r1874;
	mov.u32 	%r3754, %r1874;
	mov.u32 	%r3755, %r1874;
	@%p91 bra 	$L__BB0_252;
// %bb.183:                             // %oksrem7236
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3752, [%rd13];
	ld.shared.u32 	%r3753, [%rd14];
	ld.shared.u32 	%r3754, [%rd15];
	ld.shared.u32 	%r3755, [%rd16];
$L__BB0_252:                            // %L17312
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1910, %r1907}, {%r543, %r546}, {%r3752}, {%r1874, %r1874};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1919, %r1916}, {%r543, %r546}, {%r3753}, {%r1874, %r1874};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1928, %r1925}, {%r543, %r546}, {%r3754}, {%r1874, %r1874};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1937, %r1934}, {%r543, %r546}, {%r3755}, {%r1874, %r1874};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1903, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r1903, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r595, %r1910, %r1905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1912, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1914, %r1912, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1917, %r595, %r1919, %r1914;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1921, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1923, %r1921, %r1925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1926, %r595, %r1928, %r1923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1930, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r1930, %r1934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r595, %r1937, %r1932;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1939, %r598, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1942, %r595, %r1907, %r1939;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1946, %r598, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1949, %r595, %r1916, %r1946;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1953, %r598, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r595, %r1925, %r1953;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1960, %r598, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r595, %r1934, %r1960;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2008, %r2011}, {%r639, %r645, %r642, %r648}, {%r1908, %r1942}, {%r1874, %r1874};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2027, %r2030}, {%r639, %r645, %r642, %r648}, {%r1917, %r1949}, {%r1874, %r1874};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2015, %r2019}, {%r639, %r645, %r642, %r648}, {%r1926, %r1956}, {%r1874, %r1874};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2034, %r2038}, {%r639, %r645, %r642, %r648}, {%r1935, %r1963}, {%r1874, %r1874};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2007, %r2008, %r2008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r2011, %r2011, %r2007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r2015, %r2015, %r2010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r2019, %r2019, %r2014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3805, %r1867, %r2018, %r3801;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2026, %r2027, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2029, %r2030, %r2030, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2033, %r2034, %r2034, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r2038, %r2038, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3804, %r1867, %r2037, %r3800;
	// end inline asm
	add.s32 	%r3802, %r3798, 1;
	setp.eq.s32 	%p293, %r3802, 3;
	@%p293 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_256;
$L__BB0_253:                            // %pass7733
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_255;
// %bb.254:                             // %pass7743
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2045, %r3745, 589824;
	add.s32 	%r2046, %r121, %r2045;
	cvt.s64.s32 	%rd264, %r2046;
	add.s64 	%rd265, %rd264, %rd11;
	mul.hi.s64 	%rd266, %rd265, 1024819115206086201;
	shr.u64 	%rd267, %rd266, 63;
	shr.s64 	%rd268, %rd266, 25;
	add.s64 	%rd269, %rd268, %rd267;
	setp.lt.s64 	%p295, %rd265, 0;
	mul.lo.s64 	%rd270, %rd269, 603979776;
	setp.ne.s64 	%p296, %rd270, %rd265;
	and.pred  	%p297, %p295, %p296;
	selp.s64 	%rd271, -1, 0, %p297;
	add.s64 	%rd272, %rd269, %rd271;
	mul.lo.s64 	%rd273, %rd272, -603979776;
	add.s64 	%rd274, %rd273, %rd265;
	shl.b64 	%rd275, %rd274, 2;
	add.s64 	%rd276, %rd4, %rd275;
	st.global.u32 	[%rd276], %r3805;
	add.s32 	%r2047, %r122, %r2045;
	cvt.s64.s32 	%rd277, %r2047;
	add.s64 	%rd278, %rd277, %rd11;
	mul.hi.s64 	%rd279, %rd278, 1024819115206086201;
	shr.u64 	%rd280, %rd279, 63;
	shr.s64 	%rd281, %rd279, 25;
	add.s64 	%rd282, %rd281, %rd280;
	setp.lt.s64 	%p298, %rd278, 0;
	mul.lo.s64 	%rd283, %rd282, 603979776;
	setp.ne.s64 	%p299, %rd283, %rd278;
	and.pred  	%p300, %p298, %p299;
	selp.s64 	%rd284, -1, 0, %p300;
	add.s64 	%rd285, %rd282, %rd284;
	mul.lo.s64 	%rd286, %rd285, -603979776;
	add.s64 	%rd287, %rd286, %rd278;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3804;
$L__BB0_255:                            // %L17844
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3745, %r3745, 1;
	mov.u32 	%r3802, 0;
	mov.u32 	%r3804, %r3802;
	mov.u32 	%r3805, %r3802;
$L__BB0_256:                            // %pass7909
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2049, 0;
	mov.u32 	%r3756, %r2049;
	mov.u32 	%r3757, %r2049;
	mov.u32 	%r3758, %r2049;
	mov.u32 	%r3759, %r2049;
	@%p91 bra 	$L__BB0_258;
// %bb.257:                             // %oksrem8011
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3756, [%rd17];
	ld.shared.u32 	%r3757, [%rd18];
	ld.shared.u32 	%r3758, [%rd19];
	ld.shared.u32 	%r3759, [%rd20];
$L__BB0_258:                            // %L18923
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2085, %r2082}, {%r543, %r546}, {%r3756}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2094, %r2091}, {%r543, %r546}, {%r3757}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2103, %r2100}, {%r543, %r546}, {%r3758}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2112, %r2109}, {%r543, %r546}, {%r3759}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2078, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2080, %r2078, %r2082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2083, %r595, %r2085, %r2080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2087, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2089, %r2087, %r2091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2092, %r595, %r2094, %r2089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2096, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r2096, %r2100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r595, %r2103, %r2098;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2105, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2107, %r2105, %r2109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2110, %r595, %r2112, %r2107;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2114, %r598, %r2085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2117, %r595, %r2082, %r2114;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2121, %r598, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2124, %r595, %r2091, %r2121;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2128, %r598, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2131, %r595, %r2100, %r2128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r598, %r2112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2138, %r595, %r2109, %r2135;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2183, %r2186}, {%r639, %r645, %r642, %r648}, {%r2083, %r2117}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2202, %r2205}, {%r639, %r645, %r642, %r648}, {%r2092, %r2124}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2190, %r2194}, {%r639, %r645, %r642, %r648}, {%r2101, %r2131}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2209, %r2213}, {%r639, %r645, %r642, %r648}, {%r2110, %r2138}, {%r2049, %r2049};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2182, %r2183, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2185, %r2186, %r2186, %r2182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r2190, %r2190, %r2185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r2194, %r2194, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3809, %r1867, %r2193, %r3805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2201, %r2202, %r2202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r2205, %r2205, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2208, %r2209, %r2209, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r2213, %r2213, %r2208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3808, %r1867, %r2212, %r3804;
	// end inline asm
	add.s32 	%r3806, %r3802, 1;
	setp.eq.s32 	%p302, %r3806, 3;
	@%p302 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_262;
$L__BB0_259:                            // %pass8508
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_261;
// %bb.260:                             // %pass8518
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2220, %r3745, 589824;
	add.s32 	%r2221, %r121, %r2220;
	cvt.s64.s32 	%rd290, %r2221;
	add.s64 	%rd291, %rd290, %rd11;
	mul.hi.s64 	%rd292, %rd291, 1024819115206086201;
	shr.u64 	%rd293, %rd292, 63;
	shr.s64 	%rd294, %rd292, 25;
	add.s64 	%rd295, %rd294, %rd293;
	setp.lt.s64 	%p304, %rd291, 0;
	mul.lo.s64 	%rd296, %rd295, 603979776;
	setp.ne.s64 	%p305, %rd296, %rd291;
	and.pred  	%p306, %p304, %p305;
	selp.s64 	%rd297, -1, 0, %p306;
	add.s64 	%rd298, %rd295, %rd297;
	mul.lo.s64 	%rd299, %rd298, -603979776;
	add.s64 	%rd300, %rd299, %rd291;
	shl.b64 	%rd301, %rd300, 2;
	add.s64 	%rd302, %rd4, %rd301;
	st.global.u32 	[%rd302], %r3809;
	add.s32 	%r2222, %r122, %r2220;
	cvt.s64.s32 	%rd303, %r2222;
	add.s64 	%rd304, %rd303, %rd11;
	mul.hi.s64 	%rd305, %rd304, 1024819115206086201;
	shr.u64 	%rd306, %rd305, 63;
	shr.s64 	%rd307, %rd305, 25;
	add.s64 	%rd308, %rd307, %rd306;
	setp.lt.s64 	%p307, %rd304, 0;
	mul.lo.s64 	%rd309, %rd308, 603979776;
	setp.ne.s64 	%p308, %rd309, %rd304;
	and.pred  	%p309, %p307, %p308;
	selp.s64 	%rd310, -1, 0, %p309;
	add.s64 	%rd311, %rd308, %rd310;
	mul.lo.s64 	%rd312, %rd311, -603979776;
	add.s64 	%rd313, %rd312, %rd304;
	shl.b64 	%rd314, %rd313, 2;
	add.s64 	%rd315, %rd4, %rd314;
	st.global.u32 	[%rd315], %r3808;
$L__BB0_261:                            // %L19455
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3745, %r3745, 1;
	mov.u32 	%r3806, 0;
	mov.u32 	%r3808, %r3806;
	mov.u32 	%r3809, %r3806;
$L__BB0_262:                            // %pass8684
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2224, 0;
	mov.u32 	%r3760, %r2224;
	mov.u32 	%r3761, %r2224;
	mov.u32 	%r3762, %r2224;
	mov.u32 	%r3763, %r2224;
	@%p91 bra 	$L__BB0_264;
// %bb.263:                             // %oksrem8786
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3760, [%rd21];
	ld.shared.u32 	%r3761, [%rd22];
	ld.shared.u32 	%r3762, [%rd23];
	ld.shared.u32 	%r3763, [%rd24];
$L__BB0_264:                            // %L20534
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2260, %r2257}, {%r543, %r546}, {%r3760}, {%r2224, %r2224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2269, %r2266}, {%r543, %r546}, {%r3761}, {%r2224, %r2224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2278, %r2275}, {%r543, %r546}, {%r3762}, {%r2224, %r2224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2287, %r2284}, {%r543, %r546}, {%r3763}, {%r2224, %r2224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2253, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r2253, %r2257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2258, %r595, %r2260, %r2255;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2262, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r2262, %r2266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r595, %r2269, %r2264;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2271, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r2271, %r2275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2276, %r595, %r2278, %r2273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2280, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r2280, %r2284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r595, %r2287, %r2282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2289, %r598, %r2260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2292, %r595, %r2257, %r2289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2296, %r598, %r2269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2299, %r595, %r2266, %r2296;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2303, %r598, %r2278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2306, %r595, %r2275, %r2303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2310, %r598, %r2287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2313, %r595, %r2284, %r2310;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2358, %r2361}, {%r639, %r645, %r642, %r648}, {%r2258, %r2292}, {%r2224, %r2224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2377, %r2380}, {%r639, %r645, %r642, %r648}, {%r2267, %r2299}, {%r2224, %r2224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2365, %r2369}, {%r639, %r645, %r642, %r648}, {%r2276, %r2306}, {%r2224, %r2224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2384, %r2388}, {%r639, %r645, %r642, %r648}, {%r2285, %r2313}, {%r2224, %r2224};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2357, %r2358, %r2358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2360, %r2361, %r2361, %r2357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2364, %r2365, %r2365, %r2360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2368, %r2369, %r2369, %r2364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3747, %r1867, %r2368, %r3809;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2376, %r2377, %r2377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2379, %r2380, %r2380, %r2376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2383, %r2384, %r2384, %r2379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2387, %r2388, %r2388, %r2383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3746, %r1867, %r2387, %r3808;
	// end inline asm
	add.s32 	%r3744, %r3806, 1;
	setp.eq.s32 	%p311, %r3744, 3;
	@%p311 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_185;
$L__BB0_265:                            // %pass9283
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_184;
// %bb.266:                             // %pass9293
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2395, %r3745, 589824;
	add.s32 	%r2396, %r121, %r2395;
	cvt.s64.s32 	%rd316, %r2396;
	add.s64 	%rd317, %rd316, %rd11;
	mul.hi.s64 	%rd318, %rd317, 1024819115206086201;
	shr.u64 	%rd319, %rd318, 63;
	shr.s64 	%rd320, %rd318, 25;
	add.s64 	%rd321, %rd320, %rd319;
	setp.lt.s64 	%p313, %rd317, 0;
	mul.lo.s64 	%rd322, %rd321, 603979776;
	setp.ne.s64 	%p314, %rd322, %rd317;
	and.pred  	%p315, %p313, %p314;
	selp.s64 	%rd323, -1, 0, %p315;
	add.s64 	%rd324, %rd321, %rd323;
	mul.lo.s64 	%rd325, %rd324, -603979776;
	add.s64 	%rd326, %rd325, %rd317;
	shl.b64 	%rd327, %rd326, 2;
	add.s64 	%rd328, %rd4, %rd327;
	st.global.u32 	[%rd328], %r3747;
	add.s32 	%r2397, %r122, %r2395;
	cvt.s64.s32 	%rd329, %r2397;
	add.s64 	%rd330, %rd329, %rd11;
	mul.hi.s64 	%rd331, %rd330, 1024819115206086201;
	shr.u64 	%rd332, %rd331, 63;
	shr.s64 	%rd333, %rd331, 25;
	add.s64 	%rd334, %rd333, %rd332;
	setp.lt.s64 	%p316, %rd330, 0;
	mul.lo.s64 	%rd335, %rd334, 603979776;
	setp.ne.s64 	%p317, %rd335, %rd330;
	and.pred  	%p318, %p316, %p317;
	selp.s64 	%rd336, -1, 0, %p318;
	add.s64 	%rd337, %rd334, %rd336;
	mul.lo.s64 	%rd338, %rd337, -603979776;
	add.s64 	%rd339, %rd338, %rd330;
	shl.b64 	%rd340, %rd339, 2;
	add.s64 	%rd341, %rd4, %rd340;
	st.global.u32 	[%rd341], %r3746;
	bra.uni 	$L__BB0_184;
$L__BB0_186:                            // %L21092.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3768, 12;
	bra.uni 	$L__BB0_187;
$L__BB0_194:                            // %L28090
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3745, %r3745, 1;
	mov.u32 	%r3744, 0;
	mov.u32 	%r3746, %r3744;
	mov.u32 	%r3747, %r3744;
$L__BB0_195:                            // %L28091
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	add.s32 	%r3768, %r3768, -4;
	setp.ne.s32 	%p362, %r3768, -12;
	@%p362 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_196;
$L__BB0_187:                            // %L21092
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p321, %r3768, 12;
	selp.b32 	%r2937, %r3719, 0, %p321;
	setp.eq.s32 	%p322, %r3768, 8;
	selp.b32 	%r2938, %r3723, %r2937, %p322;
	setp.eq.s32 	%p323, %r3768, 4;
	selp.b32 	%r2939, %r3727, %r2938, %p323;
	setp.eq.s32 	%p324, %r3768, 0;
	selp.b32 	%r2940, %r3731, %r2939, %p324;
	setp.eq.s32 	%p325, %r3768, -4;
	selp.b32 	%r2941, %r3735, %r2940, %p325;
	setp.eq.s32 	%p326, %r3768, -8;
	selp.b32 	%r2942, %r3739, %r2941, %p326;
	selp.b32 	%r2943, %r3720, 0, %p321;
	selp.b32 	%r2944, %r3724, %r2943, %p322;
	selp.b32 	%r2945, %r3728, %r2944, %p323;
	selp.b32 	%r2946, %r3732, %r2945, %p324;
	selp.b32 	%r2947, %r3736, %r2946, %p325;
	selp.b32 	%r2948, %r3740, %r2947, %p326;
	selp.b32 	%r2949, %r3721, 0, %p321;
	selp.b32 	%r2950, %r3725, %r2949, %p322;
	selp.b32 	%r2951, %r3729, %r2950, %p323;
	selp.b32 	%r2952, %r3733, %r2951, %p324;
	selp.b32 	%r2953, %r3737, %r2952, %p325;
	selp.b32 	%r2954, %r3741, %r2953, %p326;
	selp.b32 	%r2955, %r3722, 0, %p321;
	selp.b32 	%r2956, %r3726, %r2955, %p322;
	selp.b32 	%r2957, %r3730, %r2956, %p323;
	selp.b32 	%r2958, %r3734, %r2957, %p324;
	selp.b32 	%r2959, %r3738, %r2958, %p325;
	selp.b32 	%r2960, %r3742, %r2959, %p326;
	// begin inline asm
	mov.b32 %r2427, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2438, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2961, %r2942, 8;
	xor.b32  	%r2437, %r2961, 8947848;
	// begin inline asm
	lop3.b32 %r2424, %r1280, %r2437, %r2427, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2428, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2429, %r2427, %r2428;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2432, %r2424, %r2429;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2435, %r1291, %r2437, %r2438, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2439, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2440, %r2438, %r2439;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2443, %r2435, %r2440;
	// end inline asm
	// begin inline asm
	mov.b32 %r2473, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2962, %r2948, 8;
	xor.b32  	%r2483, %r2962, 8947848;
	// begin inline asm
	lop3.b32 %r2470, %r1280, %r2483, %r2473, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2475, %r2473, %r2474;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2478, %r2470, %r2475;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2481, %r1291, %r2483, %r2484, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2485, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2486, %r2484, %r2485;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2489, %r2481, %r2486;
	// end inline asm
	// begin inline asm
	mov.b32 %r2519, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2530, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2963, %r2954, 8;
	xor.b32  	%r2529, %r2963, 8947848;
	// begin inline asm
	lop3.b32 %r2516, %r1280, %r2529, %r2519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2521, %r2519, %r2520;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2524, %r2516, %r2521;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2527, %r1291, %r2529, %r2530, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2531, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2532, %r2530, %r2531;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2535, %r2527, %r2532;
	// end inline asm
	// begin inline asm
	mov.b32 %r2565, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2576, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2964, %r2960, 8;
	xor.b32  	%r2575, %r2964, 8947848;
	// begin inline asm
	lop3.b32 %r2562, %r1280, %r2575, %r2565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2566, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2567, %r2565, %r2566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2570, %r2562, %r2567;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2573, %r1291, %r2575, %r2576, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2577, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2578, %r2576, %r2577;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2581, %r2573, %r2578;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2432;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2584, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2443;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2587, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2478;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2590, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2489;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2593, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2524;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2596, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2535;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2599, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2570;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2602, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2581;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2605, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2936, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2671, %r2668}, {%r429, %r432}, {%r2584}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2680, %r2677}, {%r429, %r432}, {%r2587}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2689, %r2686}, {%r429, %r432}, {%r2590}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2698, %r2695}, {%r429, %r432}, {%r2593}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2707, %r2704}, {%r429, %r432}, {%r2596}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2716, %r2713}, {%r429, %r432}, {%r2599}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2725, %r2722}, {%r429, %r432}, {%r2602}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2734, %r2731}, {%r429, %r432}, {%r2605}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2664, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2666, %r2664, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2669, %r481, %r2671, %r2666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2673, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2675, %r2673, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2678, %r481, %r2680, %r2675;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2682, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2684, %r2682, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2687, %r481, %r2689, %r2684;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2691, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2693, %r2691, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2696, %r481, %r2698, %r2693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r481, %r2707, %r2702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2709, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2709, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r481, %r2716, %r2711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2718, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r2718, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r481, %r2725, %r2720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2727, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r2727, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r481, %r2734, %r2729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r484, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r481, %r2668, %r2736;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2743, %r484, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2746, %r481, %r2677, %r2743;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2750, %r484, %r2689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2753, %r481, %r2686, %r2750;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2757, %r484, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2760, %r481, %r2695, %r2757;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2764, %r484, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2767, %r481, %r2704, %r2764;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2771, %r484, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2774, %r481, %r2713, %r2771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2778, %r484, %r2725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r481, %r2722, %r2778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2785, %r484, %r2734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r481, %r2731, %r2785;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2792, %r2793}, {%r525, %r531, %r528, %r534}, {%r2669, %r2739}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2802, %r2803}, {%r525, %r531, %r528, %r534}, {%r2678, %r2746}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2812, %r2813}, {%r525, %r531, %r528, %r534}, {%r2687, %r2753}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2822, %r2823}, {%r525, %r531, %r528, %r534}, {%r2696, %r2760}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2832, %r2833}, {%r525, %r531, %r528, %r534}, {%r2705, %r2767}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2842, %r2843}, {%r525, %r531, %r528, %r534}, {%r2714, %r2774}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2852, %r2853}, {%r525, %r531, %r528, %r534}, {%r2723, %r2781}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2862, %r2863}, {%r525, %r531, %r528, %r534}, {%r2732, %r2788}, {%r2936, %r2936};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3773, %r2936;
	mov.u32 	%r3774, %r2936;
	mov.u32 	%r3775, %r2936;
	mov.u32 	%r3776, %r2936;
	@%p277 bra 	$L__BB0_267;
	bra.uni 	$L__BB0_188;
$L__BB0_267:                            // %oksrem9622
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3776, [%rd7];
	ld.shared.u32 	%r3775, [%rd8];
	ld.shared.u32 	%r3774, [%rd9];
	ld.shared.u32 	%r3773, [%rd10];
$L__BB0_188:                            // %L22725
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3000, %r2997}, {%r543, %r546}, {%r3776}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3009, %r3006}, {%r543, %r546}, {%r3775}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3018, %r3015}, {%r543, %r546}, {%r3774}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3027, %r3024}, {%r543, %r546}, {%r3773}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2993, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2995, %r2993, %r2997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2998, %r595, %r3000, %r2995;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3002, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3004, %r3002, %r3006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3007, %r595, %r3009, %r3004;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3011, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3013, %r3011, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3016, %r595, %r3018, %r3013;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3020, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3022, %r3020, %r3024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3025, %r595, %r3027, %r3022;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3029, %r598, %r3000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3032, %r595, %r2997, %r3029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3036, %r598, %r3009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3039, %r595, %r3006, %r3036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3043, %r598, %r3018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r595, %r3015, %r3043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3050, %r598, %r3027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r595, %r3024, %r3050;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3098, %r3101}, {%r639, %r645, %r642, %r648}, {%r2998, %r3032}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3117, %r3120}, {%r639, %r645, %r642, %r648}, {%r3007, %r3039}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3105, %r3109}, {%r639, %r645, %r642, %r648}, {%r3016, %r3046}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3124, %r3128}, {%r639, %r645, %r642, %r648}, {%r3025, %r3053}, {%r2936, %r2936};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3097, %r3098, %r3098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3100, %r3101, %r3101, %r3097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r3105, %r3105, %r3100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3108, %r3109, %r3109, %r3104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3813, %r1867, %r3108, %r3747;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3116, %r3117, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3119, %r3120, %r3120, %r3116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3123, %r3124, %r3124, %r3119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r3128, %r3128, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3812, %r1867, %r3127, %r3746;
	// end inline asm
	add.s32 	%r3810, %r3744, 1;
	setp.eq.s32 	%p327, %r3810, 3;
	@%p327 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_192;
$L__BB0_189:                            // %pass10119
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_191;
// %bb.190:                             // %pass10129
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3135, %r3745, 589824;
	add.s32 	%r3136, %r121, %r3135;
	cvt.s64.s32 	%rd342, %r3136;
	add.s64 	%rd343, %rd342, %rd11;
	mul.hi.s64 	%rd344, %rd343, 1024819115206086201;
	shr.u64 	%rd345, %rd344, 63;
	shr.s64 	%rd346, %rd344, 25;
	add.s64 	%rd347, %rd346, %rd345;
	setp.lt.s64 	%p329, %rd343, 0;
	mul.lo.s64 	%rd348, %rd347, 603979776;
	setp.ne.s64 	%p330, %rd348, %rd343;
	and.pred  	%p331, %p329, %p330;
	selp.s64 	%rd349, -1, 0, %p331;
	add.s64 	%rd350, %rd347, %rd349;
	mul.lo.s64 	%rd351, %rd350, -603979776;
	add.s64 	%rd352, %rd351, %rd343;
	shl.b64 	%rd353, %rd352, 2;
	add.s64 	%rd354, %rd4, %rd353;
	st.global.u32 	[%rd354], %r3813;
	add.s32 	%r3137, %r122, %r3135;
	cvt.s64.s32 	%rd355, %r3137;
	add.s64 	%rd356, %rd355, %rd11;
	mul.hi.s64 	%rd357, %rd356, 1024819115206086201;
	shr.u64 	%rd358, %rd357, 63;
	shr.s64 	%rd359, %rd357, 25;
	add.s64 	%rd360, %rd359, %rd358;
	setp.lt.s64 	%p332, %rd356, 0;
	mul.lo.s64 	%rd361, %rd360, 603979776;
	setp.ne.s64 	%p333, %rd361, %rd356;
	and.pred  	%p334, %p332, %p333;
	selp.s64 	%rd362, -1, 0, %p334;
	add.s64 	%rd363, %rd360, %rd362;
	mul.lo.s64 	%rd364, %rd363, -603979776;
	add.s64 	%rd365, %rd364, %rd356;
	shl.b64 	%rd366, %rd365, 2;
	add.s64 	%rd367, %rd4, %rd366;
	st.global.u32 	[%rd367], %r3812;
$L__BB0_191:                            // %L23257
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3745, %r3745, 1;
	mov.u32 	%r3810, 0;
	mov.u32 	%r3812, %r3810;
	mov.u32 	%r3813, %r3810;
$L__BB0_192:                            // %pass10295
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3139, 0;
	mov.u32 	%r3777, %r3139;
	mov.u32 	%r3778, %r3139;
	mov.u32 	%r3779, %r3139;
	mov.u32 	%r3780, %r3139;
	@%p91 bra 	$L__BB0_268;
// %bb.193:                             // %oksrem10397
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3780, [%rd13];
	ld.shared.u32 	%r3779, [%rd14];
	ld.shared.u32 	%r3778, [%rd15];
	ld.shared.u32 	%r3777, [%rd16];
$L__BB0_268:                            // %L24336
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3175, %r3172}, {%r543, %r546}, {%r3780}, {%r3139, %r3139};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3184, %r3181}, {%r543, %r546}, {%r3779}, {%r3139, %r3139};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3193, %r3190}, {%r543, %r546}, {%r3778}, {%r3139, %r3139};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3202, %r3199}, {%r543, %r546}, {%r3777}, {%r3139, %r3139};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3168, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3170, %r3168, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r595, %r3175, %r3170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3177, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3179, %r3177, %r3181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r595, %r3184, %r3179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3186, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3188, %r3186, %r3190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r595, %r3193, %r3188;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3195, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3197, %r3195, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3200, %r595, %r3202, %r3197;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3204, %r598, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r595, %r3172, %r3204;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3211, %r598, %r3184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r595, %r3181, %r3211;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3218, %r598, %r3193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r595, %r3190, %r3218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3225, %r598, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r595, %r3199, %r3225;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3273, %r3276}, {%r639, %r645, %r642, %r648}, {%r3173, %r3207}, {%r3139, %r3139};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3292, %r3295}, {%r639, %r645, %r642, %r648}, {%r3182, %r3214}, {%r3139, %r3139};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3280, %r3284}, {%r639, %r645, %r642, %r648}, {%r3191, %r3221}, {%r3139, %r3139};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3299, %r3303}, {%r639, %r645, %r642, %r648}, {%r3200, %r3228}, {%r3139, %r3139};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3272, %r3273, %r3273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3275, %r3276, %r3276, %r3272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3279, %r3280, %r3280, %r3275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3283, %r3284, %r3284, %r3279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3817, %r1867, %r3283, %r3813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3291, %r3292, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3294, %r3295, %r3295, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r3299, %r3299, %r3294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3302, %r3303, %r3303, %r3298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3816, %r1867, %r3302, %r3812;
	// end inline asm
	add.s32 	%r3814, %r3810, 1;
	setp.eq.s32 	%p336, %r3814, 3;
	@%p336 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_272;
$L__BB0_269:                            // %pass10894
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_271;
// %bb.270:                             // %pass10904
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3310, %r3745, 589824;
	add.s32 	%r3311, %r121, %r3310;
	cvt.s64.s32 	%rd368, %r3311;
	add.s64 	%rd369, %rd368, %rd11;
	mul.hi.s64 	%rd370, %rd369, 1024819115206086201;
	shr.u64 	%rd371, %rd370, 63;
	shr.s64 	%rd372, %rd370, 25;
	add.s64 	%rd373, %rd372, %rd371;
	setp.lt.s64 	%p338, %rd369, 0;
	mul.lo.s64 	%rd374, %rd373, 603979776;
	setp.ne.s64 	%p339, %rd374, %rd369;
	and.pred  	%p340, %p338, %p339;
	selp.s64 	%rd375, -1, 0, %p340;
	add.s64 	%rd376, %rd373, %rd375;
	mul.lo.s64 	%rd377, %rd376, -603979776;
	add.s64 	%rd378, %rd377, %rd369;
	shl.b64 	%rd379, %rd378, 2;
	add.s64 	%rd380, %rd4, %rd379;
	st.global.u32 	[%rd380], %r3817;
	add.s32 	%r3312, %r122, %r3310;
	cvt.s64.s32 	%rd381, %r3312;
	add.s64 	%rd382, %rd381, %rd11;
	mul.hi.s64 	%rd383, %rd382, 1024819115206086201;
	shr.u64 	%rd384, %rd383, 63;
	shr.s64 	%rd385, %rd383, 25;
	add.s64 	%rd386, %rd385, %rd384;
	setp.lt.s64 	%p341, %rd382, 0;
	mul.lo.s64 	%rd387, %rd386, 603979776;
	setp.ne.s64 	%p342, %rd387, %rd382;
	and.pred  	%p343, %p341, %p342;
	selp.s64 	%rd388, -1, 0, %p343;
	add.s64 	%rd389, %rd386, %rd388;
	mul.lo.s64 	%rd390, %rd389, -603979776;
	add.s64 	%rd391, %rd390, %rd382;
	shl.b64 	%rd392, %rd391, 2;
	add.s64 	%rd393, %rd4, %rd392;
	st.global.u32 	[%rd393], %r3816;
$L__BB0_271:                            // %L24868
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3745, %r3745, 1;
	mov.u32 	%r3814, 0;
	mov.u32 	%r3816, %r3814;
	mov.u32 	%r3817, %r3814;
$L__BB0_272:                            // %pass11070
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3314, 0;
	mov.u32 	%r3781, %r3314;
	mov.u32 	%r3782, %r3314;
	mov.u32 	%r3783, %r3314;
	mov.u32 	%r3784, %r3314;
	@%p91 bra 	$L__BB0_274;
// %bb.273:                             // %oksrem11172
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3784, [%rd17];
	ld.shared.u32 	%r3783, [%rd18];
	ld.shared.u32 	%r3782, [%rd19];
	ld.shared.u32 	%r3781, [%rd20];
$L__BB0_274:                            // %L25947
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3350, %r3347}, {%r543, %r546}, {%r3784}, {%r3314, %r3314};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3359, %r3356}, {%r543, %r546}, {%r3783}, {%r3314, %r3314};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3368, %r3365}, {%r543, %r546}, {%r3782}, {%r3314, %r3314};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3377, %r3374}, {%r543, %r546}, {%r3781}, {%r3314, %r3314};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3343, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3345, %r3343, %r3347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3348, %r595, %r3350, %r3345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3352, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3354, %r3352, %r3356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3357, %r595, %r3359, %r3354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3361, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3363, %r3361, %r3365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3366, %r595, %r3368, %r3363;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3370, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3372, %r3370, %r3374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3375, %r595, %r3377, %r3372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3379, %r598, %r3350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3382, %r595, %r3347, %r3379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3386, %r598, %r3359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3389, %r595, %r3356, %r3386;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3393, %r598, %r3368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r595, %r3365, %r3393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3400, %r598, %r3377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r595, %r3374, %r3400;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3448, %r3451}, {%r639, %r645, %r642, %r648}, {%r3348, %r3382}, {%r3314, %r3314};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3467, %r3470}, {%r639, %r645, %r642, %r648}, {%r3357, %r3389}, {%r3314, %r3314};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3455, %r3459}, {%r639, %r645, %r642, %r648}, {%r3366, %r3396}, {%r3314, %r3314};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3474, %r3478}, {%r639, %r645, %r642, %r648}, {%r3375, %r3403}, {%r3314, %r3314};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3447, %r3448, %r3448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3450, %r3451, %r3451, %r3447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3454, %r3455, %r3455, %r3450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3458, %r3459, %r3459, %r3454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3821, %r1867, %r3458, %r3817;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3466, %r3467, %r3467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r3470, %r3470, %r3466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3473, %r3474, %r3474, %r3469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r3478, %r3478, %r3473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3820, %r1867, %r3477, %r3816;
	// end inline asm
	add.s32 	%r3818, %r3814, 1;
	setp.eq.s32 	%p345, %r3818, 3;
	@%p345 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_278;
$L__BB0_275:                            // %pass11669
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_277;
// %bb.276:                             // %pass11679
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3485, %r3745, 589824;
	add.s32 	%r3486, %r121, %r3485;
	cvt.s64.s32 	%rd394, %r3486;
	add.s64 	%rd395, %rd394, %rd11;
	mul.hi.s64 	%rd396, %rd395, 1024819115206086201;
	shr.u64 	%rd397, %rd396, 63;
	shr.s64 	%rd398, %rd396, 25;
	add.s64 	%rd399, %rd398, %rd397;
	setp.lt.s64 	%p347, %rd395, 0;
	mul.lo.s64 	%rd400, %rd399, 603979776;
	setp.ne.s64 	%p348, %rd400, %rd395;
	and.pred  	%p349, %p347, %p348;
	selp.s64 	%rd401, -1, 0, %p349;
	add.s64 	%rd402, %rd399, %rd401;
	mul.lo.s64 	%rd403, %rd402, -603979776;
	add.s64 	%rd404, %rd403, %rd395;
	shl.b64 	%rd405, %rd404, 2;
	add.s64 	%rd406, %rd4, %rd405;
	st.global.u32 	[%rd406], %r3821;
	add.s32 	%r3487, %r122, %r3485;
	cvt.s64.s32 	%rd407, %r3487;
	add.s64 	%rd408, %rd407, %rd11;
	mul.hi.s64 	%rd409, %rd408, 1024819115206086201;
	shr.u64 	%rd410, %rd409, 63;
	shr.s64 	%rd411, %rd409, 25;
	add.s64 	%rd412, %rd411, %rd410;
	setp.lt.s64 	%p350, %rd408, 0;
	mul.lo.s64 	%rd413, %rd412, 603979776;
	setp.ne.s64 	%p351, %rd413, %rd408;
	and.pred  	%p352, %p350, %p351;
	selp.s64 	%rd414, -1, 0, %p352;
	add.s64 	%rd415, %rd412, %rd414;
	mul.lo.s64 	%rd416, %rd415, -603979776;
	add.s64 	%rd417, %rd416, %rd408;
	shl.b64 	%rd418, %rd417, 2;
	add.s64 	%rd419, %rd4, %rd418;
	st.global.u32 	[%rd419], %r3820;
$L__BB0_277:                            // %L26479
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3745, %r3745, 1;
	mov.u32 	%r3818, 0;
	mov.u32 	%r3820, %r3818;
	mov.u32 	%r3821, %r3818;
$L__BB0_278:                            // %pass11845
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3489, 0;
	mov.u32 	%r3785, %r3489;
	mov.u32 	%r3786, %r3489;
	mov.u32 	%r3787, %r3489;
	mov.u32 	%r3788, %r3489;
	@%p91 bra 	$L__BB0_280;
// %bb.279:                             // %oksrem11947
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3788, [%rd21];
	ld.shared.u32 	%r3787, [%rd22];
	ld.shared.u32 	%r3786, [%rd23];
	ld.shared.u32 	%r3785, [%rd24];
$L__BB0_280:                            // %L27558
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3525, %r3522}, {%r543, %r546}, {%r3788}, {%r3489, %r3489};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3534, %r3531}, {%r543, %r546}, {%r3787}, {%r3489, %r3489};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3543, %r3540}, {%r543, %r546}, {%r3786}, {%r3489, %r3489};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3552, %r3549}, {%r543, %r546}, {%r3785}, {%r3489, %r3489};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3518, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3520, %r3518, %r3522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r595, %r3525, %r3520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3527, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3529, %r3527, %r3531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r595, %r3534, %r3529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3536, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3538, %r3536, %r3540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r595, %r3543, %r3538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3545, %r598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3547, %r3545, %r3549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r595, %r3552, %r3547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3554, %r598, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3557, %r595, %r3522, %r3554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3561, %r598, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r595, %r3531, %r3561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3568, %r598, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3571, %r595, %r3540, %r3568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3575, %r598, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3578, %r595, %r3549, %r3575;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3623, %r3626}, {%r639, %r645, %r642, %r648}, {%r3523, %r3557}, {%r3489, %r3489};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3642, %r3645}, {%r639, %r645, %r642, %r648}, {%r3532, %r3564}, {%r3489, %r3489};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3630, %r3634}, {%r639, %r645, %r642, %r648}, {%r3541, %r3571}, {%r3489, %r3489};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3649, %r3653}, {%r639, %r645, %r642, %r648}, {%r3550, %r3578}, {%r3489, %r3489};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3622, %r3623, %r3623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3625, %r3626, %r3626, %r3622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3629, %r3630, %r3630, %r3625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3633, %r3634, %r3634, %r3629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3747, %r1867, %r3633, %r3821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3641, %r3642, %r3642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3644, %r3645, %r3645, %r3641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3648, %r3649, %r3649, %r3644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3652, %r3653, %r3653, %r3648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3746, %r1867, %r3652, %r3820;
	// end inline asm
	add.s32 	%r3744, %r3818, 1;
	setp.eq.s32 	%p354, %r3744, 3;
	@%p354 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_195;
$L__BB0_281:                            // %pass12444
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_194;
// %bb.282:                             // %pass12454
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3660, %r3745, 589824;
	add.s32 	%r3661, %r121, %r3660;
	cvt.s64.s32 	%rd420, %r3661;
	add.s64 	%rd421, %rd420, %rd11;
	mul.hi.s64 	%rd422, %rd421, 1024819115206086201;
	shr.u64 	%rd423, %rd422, 63;
	shr.s64 	%rd424, %rd422, 25;
	add.s64 	%rd425, %rd424, %rd423;
	setp.lt.s64 	%p356, %rd421, 0;
	mul.lo.s64 	%rd426, %rd425, 603979776;
	setp.ne.s64 	%p357, %rd426, %rd421;
	and.pred  	%p358, %p356, %p357;
	selp.s64 	%rd427, -1, 0, %p358;
	add.s64 	%rd428, %rd425, %rd427;
	mul.lo.s64 	%rd429, %rd428, -603979776;
	add.s64 	%rd430, %rd429, %rd421;
	shl.b64 	%rd431, %rd430, 2;
	add.s64 	%rd432, %rd4, %rd431;
	st.global.u32 	[%rd432], %r3747;
	add.s32 	%r3662, %r122, %r3660;
	cvt.s64.s32 	%rd433, %r3662;
	add.s64 	%rd434, %rd433, %rd11;
	mul.hi.s64 	%rd435, %rd434, 1024819115206086201;
	shr.u64 	%rd436, %rd435, 63;
	shr.s64 	%rd437, %rd435, 25;
	add.s64 	%rd438, %rd437, %rd436;
	setp.lt.s64 	%p359, %rd434, 0;
	mul.lo.s64 	%rd439, %rd438, 603979776;
	setp.ne.s64 	%p360, %rd439, %rd434;
	and.pred  	%p361, %p359, %p360;
	selp.s64 	%rd440, -1, 0, %p361;
	add.s64 	%rd441, %rd438, %rd440;
	mul.lo.s64 	%rd442, %rd441, -603979776;
	add.s64 	%rd443, %rd442, %rd434;
	shl.b64 	%rd444, %rd443, 2;
	add.s64 	%rd445, %rd4, %rd444;
	st.global.u32 	[%rd445], %r3746;
	bra.uni 	$L__BB0_194;
$L__BB0_197:                            // %L28126
	mov.u32 	%r3664, 0;
	st.global.u32 	[%rd6], %r3664;
	ret;
$L__BB0_152:                            // %L7484
	mov.u32 	%r3688, 5;
	st.global.u32 	[%rd6], %r3688;
	mov.u64 	%rd492, exception2371;
	cvta.global.u64 	%rd493, %rd492;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd493;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7644
	mov.u32 	%r3687, 5;
	st.global.u32 	[%rd6], %r3687;
	mov.u64 	%rd490, exception2371;
	cvta.global.u64 	%rd491, %rd490;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd491;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7804
	mov.u32 	%r3686, 5;
	st.global.u32 	[%rd6], %r3686;
	mov.u64 	%rd488, exception2371;
	cvta.global.u64 	%rd489, %rd488;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd489;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7964
	mov.u32 	%r3685, 5;
	st.global.u32 	[%rd6], %r3685;
	mov.u64 	%rd486, exception2371;
	cvta.global.u64 	%rd487, %rd486;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd487;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8124
	mov.u32 	%r3684, 5;
	st.global.u32 	[%rd6], %r3684;
	mov.u64 	%rd484, exception2371;
	cvta.global.u64 	%rd485, %rd484;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd485;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8284
	mov.u32 	%r3683, 5;
	st.global.u32 	[%rd6], %r3683;
	mov.u64 	%rd482, exception2371;
	cvta.global.u64 	%rd483, %rd482;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd483;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8444
	mov.u32 	%r3682, 5;
	st.global.u32 	[%rd6], %r3682;
	mov.u64 	%rd480, exception2371;
	cvta.global.u64 	%rd481, %rd480;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd481;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8604
	mov.u32 	%r3681, 5;
	st.global.u32 	[%rd6], %r3681;
	mov.u64 	%rd478, exception2371;
	cvta.global.u64 	%rd479, %rd478;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd479;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8764
	mov.u32 	%r3680, 5;
	st.global.u32 	[%rd6], %r3680;
	mov.u64 	%rd476, exception2371;
	cvta.global.u64 	%rd477, %rd476;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd477;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8924
	mov.u32 	%r3679, 5;
	st.global.u32 	[%rd6], %r3679;
	mov.u64 	%rd474, exception2371;
	cvta.global.u64 	%rd475, %rd474;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd475;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9084
	mov.u32 	%r3678, 5;
	st.global.u32 	[%rd6], %r3678;
	mov.u64 	%rd472, exception2371;
	cvta.global.u64 	%rd473, %rd472;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd473;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9244
	mov.u32 	%r3677, 5;
	st.global.u32 	[%rd6], %r3677;
	mov.u64 	%rd470, exception2371;
	cvta.global.u64 	%rd471, %rd470;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd471;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9404
	mov.u32 	%r3676, 5;
	st.global.u32 	[%rd6], %r3676;
	mov.u64 	%rd468, exception2371;
	cvta.global.u64 	%rd469, %rd468;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd469;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9564
	mov.u32 	%r3675, 5;
	st.global.u32 	[%rd6], %r3675;
	mov.u64 	%rd466, exception2371;
	cvta.global.u64 	%rd467, %rd466;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd467;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9724
	mov.u32 	%r3674, 5;
	st.global.u32 	[%rd6], %r3674;
	mov.u64 	%rd464, exception2371;
	cvta.global.u64 	%rd465, %rd464;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd465;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9884
	mov.u32 	%r3673, 5;
	st.global.u32 	[%rd6], %r3673;
	mov.u64 	%rd462, exception2371;
	cvta.global.u64 	%rd463, %rd462;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd463;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10044
	mov.u32 	%r3672, 5;
	st.global.u32 	[%rd6], %r3672;
	mov.u64 	%rd460, exception2371;
	cvta.global.u64 	%rd461, %rd460;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd461;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10204
	mov.u32 	%r3671, 5;
	st.global.u32 	[%rd6], %r3671;
	mov.u64 	%rd458, exception2371;
	cvta.global.u64 	%rd459, %rd458;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd459;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10364
	mov.u32 	%r3670, 5;
	st.global.u32 	[%rd6], %r3670;
	mov.u64 	%rd456, exception2371;
	cvta.global.u64 	%rd457, %rd456;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd457;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10524
	mov.u32 	%r3669, 5;
	st.global.u32 	[%rd6], %r3669;
	mov.u64 	%rd454, exception2371;
	cvta.global.u64 	%rd455, %rd454;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd455;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10684
	mov.u32 	%r3668, 5;
	st.global.u32 	[%rd6], %r3668;
	mov.u64 	%rd452, exception2371;
	cvta.global.u64 	%rd453, %rd452;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd453;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10870
	mov.u32 	%r3667, 5;
	st.global.u32 	[%rd6], %r3667;
	mov.u64 	%rd450, exception2371;
	cvta.global.u64 	%rd451, %rd450;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd451;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11030
	mov.u32 	%r3666, 5;
	st.global.u32 	[%rd6], %r3666;
	mov.u64 	%rd448, exception2371;
	cvta.global.u64 	%rd449, %rd448;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd449;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11190
	mov.u32 	%r3665, 5;
	st.global.u32 	[%rd6], %r3665;
	mov.u64 	%rd446, exception2371;
	cvta.global.u64 	%rd447, %rd446;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd447;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3690, 2;
	st.global.u32 	[%rd6], %r3690;
	mov.u64 	%rd496, exception2371;
	cvta.global.u64 	%rd497, %rd496;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd497;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r3689, 3;
	st.global.u32 	[%rd6], %r3689;
	mov.u64 	%rd494, exception2371;
	cvta.global.u64 	%rd495, %rd494;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd495;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1149
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r3};
	st.local.v2.u32 	[%rd5+8], {%r2, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r659, [retval0+0];
	} // callseq 61
	mov.u32 	%r661, 4;
	st.global.u32 	[%rd6], %r661;
	mov.u64 	%rd39, exception2371;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r397;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
