// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2611[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2651[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12663[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<211>;
	.reg .b32 	%r<3072>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<376>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r259, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd11, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r264, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r264, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r260, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r265, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r266, %r2, %r265;
	add.s32 	%r267, %r266, %r5;
	mul.wide.u32 	%rd18, %r267, 4;
	add.s64 	%rd5, %rd12, %rd18;
	mov.u32 	%r268, 1;
	st.global.u32 	[%rd5], %r268;
	setp.lt.s32 	%p5, %r260, 0;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L117
	ld.param.u32 	%r261, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r261, %r260;
	setp.gt.s32 	%p7, %r261, 32768;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r262, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r261, %r260;
	mad.lo.s32 	%r269, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r270, %r269, %r269, 4;
	setp.gt.u32 	%p9, %r270, 89478484;
	setp.lt.s32 	%p10, %r262, 0;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L133
	ld.param.u32 	%r263, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r263, %r262;
	setp.lt.s32 	%p13, %r263, 4097;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_6;
$L__BB0_162:                            // %pass51
	sub.s32 	%r271, %r263, %r262;
	shr.s32 	%r272, %r6, 31;
	shr.u32 	%r273, %r272, 25;
	add.s32 	%r274, %r6, %r273;
	shr.s32 	%r275, %r274, 7;
	setp.ne.s32 	%p15, %r271, %r275;
	@%p15 bra 	$L__BB0_6;
// %bb.163:                             // %pass102
	and.b32  	%r148, %r265, 3;
	shr.u32 	%r149, %r265, 2;
	mul.lo.s32 	%r276, %r148, %r149;
	and.b32  	%r277, %r276, 7;
	cvt.rn.f32.s32 	%f205, %r277;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p16, %f788, 0f40000000;
	setp.gtu.f32 	%p292, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p16 bra 	$L__BB0_175;
// %bb.164:
	@%p292 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_165;
$L__BB0_171:
	mov.b32 	%r151, %f788;
	and.b32  	%r278, %r151, 8388607;
	or.b32  	%r3055, %r278, 1065353216;
	mov.b32 	%f783, %r3055;
	add.s32 	%r279, %r151, -1073741824;
	and.b32  	%r3056, %r279, -8388608;
	setp.eq.s32 	%p23, %r3056, 0;
	@%p23 bra 	$L__BB0_174;
// %bb.172:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_173:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r280, %r3056, 192937984;
	add.s32 	%r281, %r3055, %r280;
	mov.b32 	%f217, %r281;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3056, %r3056, %r280;
	mov.b32 	%r3055, %f783;
	setp.ne.s32 	%p24, %r3056, 0;
	setp.ne.s32 	%p25, %r3055, 0;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_173;
$L__BB0_174:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p27, %r151, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p27;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_175;
$L__BB0_165:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r150, %f172;
	setp.lt.u32 	%p18, %r150, 1073741824;
	@%p18 bra 	$L__BB0_170;
// %bb.166:
	setp.lt.u32 	%p19, %r150, -2147483647;
	@%p19 bra 	$L__BB0_168;
// %bb.167:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p22, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p22;
	bra.uni 	$L__BB0_170;
$L__BB0_168:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p20, %f172, 0f40800000;
	@%p20 bra 	$L__BB0_170;
// %bb.169:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p21, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p21;
$L__BB0_170:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_175:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p28, %f226, 0f7F800000;
	mov.b32 	%r282, %f169;
	and.b32  	%r158, %r282, -2147483648;
	@%p28 bra 	$L__BB0_177;
// %bb.176:
	mov.b32 	%r283, %f784;
	or.b32  	%r284, %r158, %r283;
	mov.b32 	%f784, %r284;
$L__BB0_177:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r291, %f227;
	and.b32  	%r292, %r291, -2147483648;
	or.b32  	%r293, %r292, 1056964608;
	mov.b32 	%f228, %r293;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p29, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p29;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p30, %f231, 0f3F000000;
	shl.b32 	%r161, %r265, 1;
	and.b32  	%r162, %r161, 2;
	mul.lo.s32 	%r299, %r162, %r149;
	cvt.rn.f32.s32 	%f259, %r299;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p36, %f734, 0f40000000;
	@%p36 bra 	$L__BB0_18;
// %bb.7:
	setp.gtu.f32 	%p37, %f734, 0f4B800000;
	@%p37 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r8, %f734;
	and.b32  	%r300, %r8, 8388607;
	or.b32  	%r3004, %r300, 1065353216;
	mov.b32 	%f733, %r3004;
	add.s32 	%r301, %r8, -1073741824;
	and.b32  	%r3005, %r301, -8388608;
	setp.eq.s32 	%p43, %r3005, 0;
	@%p43 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r302, %r3005, 192937984;
	add.s32 	%r303, %r3004, %r302;
	mov.b32 	%f271, %r303;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3005, %r3005, %r302;
	mov.b32 	%r3004, %f733;
	setp.ne.s32 	%p44, %r3005, 0;
	setp.ne.s32 	%p45, %r3004, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p47, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p38, %r7, 1073741824;
	@%p38 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p39, %r7, -2147483647;
	@%p39 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p42, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p42;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p40, %f2, 0f40800000;
	@%p40 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p41, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p41;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p30;
	or.b32  	%r163, %r162, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p48, %f280, 0f7F800000;
	@%p48 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r304, %f186;
	and.b32  	%r305, %r304, -2147483648;
	mov.b32 	%r306, %f734;
	or.b32  	%r307, %r305, %r306;
	mov.b32 	%f734, %r307;
$L__BB0_20:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r308, %f282;
	and.b32  	%r309, %r308, -2147483648;
	or.b32  	%r310, %r309, 1056964608;
	mov.b32 	%f283, %r310;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p49, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p49;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p50, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p50;
	setp.eq.s32 	%p56, %r163, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p56 bra 	$L__BB0_36;
// %bb.21:                              // %L378
	mul.lo.s32 	%r316, %r163, %r149;
	mul.hi.u32 	%r317, %r316, -1431655765;
	shr.u32 	%r318, %r317, 4;
	mul.lo.s32 	%r319, %r318, 24;
	sub.s32 	%r320, %r316, %r319;
	cvt.rn.f32.s32 	%f311, %r320;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p57, %f738, 0f40000000;
	@%p57 bra 	$L__BB0_33;
// %bb.22:
	setp.gtu.f32 	%p58, %f738, 0f4B800000;
	@%p58 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_23;
$L__BB0_29:
	mov.b32 	%r16, %f738;
	and.b32  	%r321, %r16, 8388607;
	or.b32  	%r3006, %r321, 1065353216;
	mov.b32 	%f737, %r3006;
	add.s32 	%r322, %r16, -1073741824;
	and.b32  	%r3007, %r322, -8388608;
	setp.eq.s32 	%p64, %r3007, 0;
	@%p64 bra 	$L__BB0_32;
// %bb.30:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_31:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r323, %r3007, 192937984;
	add.s32 	%r324, %r3006, %r323;
	mov.b32 	%f323, %r324;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3007, %r3007, %r323;
	mov.b32 	%r3006, %f737;
	setp.ne.s32 	%p65, %r3007, 0;
	setp.ne.s32 	%p66, %r3006, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_31;
$L__BB0_32:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p68, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_33;
$L__BB0_23:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p59, %r15, 1073741824;
	@%p59 bra 	$L__BB0_28;
// %bb.24:
	setp.lt.u32 	%p60, %r15, -2147483647;
	@%p60 bra 	$L__BB0_26;
// %bb.25:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p63, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p63;
	bra.uni 	$L__BB0_28;
$L__BB0_26:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p61, %f21, 0f40800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p62, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p62;
$L__BB0_28:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_33:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p69, %f332, 0f7F800000;
	@%p69 bra 	$L__BB0_35;
// %bb.34:
	mov.b32 	%r325, %f18;
	and.b32  	%r326, %r325, -2147483648;
	mov.b32 	%r327, %f738;
	or.b32  	%r328, %r326, %r327;
	mov.b32 	%f738, %r328;
$L__BB0_35:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r329, %f333;
	and.b32  	%r330, %r329, -2147483648;
	or.b32  	%r331, %r330, 1056964608;
	mov.b32 	%f334, %r331;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p70, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p70;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p71, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p71;
	cvt.rzi.s32.f32 	%r332, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r333, %r332, 1;
	setp.eq.b32 	%p72, %r333, 1;
	selp.f32 	%f352, %f350, %f351, %p72;
	selp.f32 	%f353, %f351, %f350, %p72;
	and.b32  	%r334, %r332, 2;
	setp.eq.s32 	%p73, %r334, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p73;
	add.s32 	%r335, %r332, 1;
	and.b32  	%r336, %r335, 2;
	setp.eq.s32 	%p74, %r336, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p74;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p75, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p75;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p76, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p76;
$L__BB0_36:                             // %L412
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r25, %r149, 3;
	setp.eq.s32 	%p77, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p77 bra 	$L__BB0_52;
// %bb.37:                              // %L450
	mul.lo.s32 	%r343, %r162, %r25;
	cvt.u16.u32 	%rs11, %r343;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p78, %f744, 0f40000000;
	@%p78 bra 	$L__BB0_49;
// %bb.38:
	setp.gtu.f32 	%p79, %f744, 0f4B800000;
	@%p79 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_39;
$L__BB0_45:
	mov.b32 	%r27, %f744;
	and.b32  	%r344, %r27, 8388607;
	or.b32  	%r3008, %r344, 1065353216;
	mov.b32 	%f743, %r3008;
	add.s32 	%r345, %r27, -1073741824;
	and.b32  	%r3009, %r345, -8388608;
	setp.eq.s32 	%p85, %r3009, 0;
	@%p85 bra 	$L__BB0_48;
// %bb.46:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_47:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r346, %r3009, 192937984;
	add.s32 	%r347, %r3008, %r346;
	mov.b32 	%f376, %r347;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3009, %r3009, %r346;
	mov.b32 	%r3008, %f743;
	setp.ne.s32 	%p86, %r3009, 0;
	setp.ne.s32 	%p87, %r3008, 0;
	and.pred  	%p88, %p86, %p87;
	@%p88 bra 	$L__BB0_47;
$L__BB0_48:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p89, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p89;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_49;
$L__BB0_39:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p80, %r26, 1073741824;
	@%p80 bra 	$L__BB0_44;
// %bb.40:
	setp.lt.u32 	%p81, %r26, -2147483647;
	@%p81 bra 	$L__BB0_42;
// %bb.41:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p84, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p84;
	bra.uni 	$L__BB0_44;
$L__BB0_42:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p82, %f42, 0f40800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p83, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p83;
$L__BB0_44:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_49:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p90, %f385, 0f7F800000;
	@%p90 bra 	$L__BB0_51;
// %bb.50:
	mov.b32 	%r348, %f39;
	and.b32  	%r349, %r348, -2147483648;
	mov.b32 	%r350, %f744;
	or.b32  	%r351, %r349, %r350;
	mov.b32 	%f744, %r351;
$L__BB0_51:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r352, %f386;
	and.b32  	%r353, %r352, -2147483648;
	or.b32  	%r354, %r353, 1056964608;
	mov.b32 	%f387, %r354;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p91, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p91;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p92, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p92;
	cvt.rzi.s32.f32 	%r355, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r356, %r355, 1;
	setp.eq.b32 	%p93, %r356, 1;
	selp.f32 	%f405, %f403, %f404, %p93;
	selp.f32 	%f406, %f404, %f403, %p93;
	and.b32  	%r357, %r355, 2;
	setp.eq.s32 	%p94, %r357, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p94;
	add.s32 	%r358, %r355, 1;
	and.b32  	%r359, %r358, 2;
	setp.eq.s32 	%p95, %r359, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p95;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p96, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p96;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p97, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p97;
$L__BB0_52:                             // %L484
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p100, %p56, %p77;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p100 bra 	$L__BB0_68;
// %bb.53:                              // %L492
	mul.lo.s32 	%r360, %r163, %r25;
	mul.hi.u32 	%r361, %r360, -1431655765;
	shr.u32 	%r362, %r361, 1;
	mul.lo.s32 	%r363, %r362, 3;
	sub.s32 	%r364, %r360, %r363;
	cvt.rn.f32.s32 	%f417, %r364;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p101, %f750, 0f40000000;
	@%p101 bra 	$L__BB0_65;
// %bb.54:
	setp.gtu.f32 	%p102, %f750, 0f4B800000;
	@%p102 bra 	$L__BB0_61;
	bra.uni 	$L__BB0_55;
$L__BB0_61:
	mov.b32 	%r35, %f750;
	and.b32  	%r365, %r35, 8388607;
	or.b32  	%r3010, %r365, 1065353216;
	mov.b32 	%f749, %r3010;
	add.s32 	%r366, %r35, -1073741824;
	and.b32  	%r3011, %r366, -8388608;
	setp.eq.s32 	%p108, %r3011, 0;
	@%p108 bra 	$L__BB0_64;
// %bb.62:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_63:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r3011, 192937984;
	add.s32 	%r368, %r3010, %r367;
	mov.b32 	%f429, %r368;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3011, %r3011, %r367;
	mov.b32 	%r3010, %f749;
	setp.ne.s32 	%p109, %r3011, 0;
	setp.ne.s32 	%p110, %r3010, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_63;
$L__BB0_64:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p112, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_65;
$L__BB0_55:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p103, %r34, 1073741824;
	@%p103 bra 	$L__BB0_60;
// %bb.56:
	setp.lt.u32 	%p104, %r34, -2147483647;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p107, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p107;
	bra.uni 	$L__BB0_60;
$L__BB0_58:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p105, %f63, 0f40800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p106, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p106;
$L__BB0_60:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_65:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p113, %f438, 0f7F800000;
	@%p113 bra 	$L__BB0_67;
// %bb.66:
	mov.b32 	%r369, %f60;
	and.b32  	%r370, %r369, -2147483648;
	mov.b32 	%r371, %f750;
	or.b32  	%r372, %r370, %r371;
	mov.b32 	%f750, %r372;
$L__BB0_67:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r373, %f439;
	and.b32  	%r374, %r373, -2147483648;
	or.b32  	%r375, %r374, 1056964608;
	mov.b32 	%f440, %r375;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p114, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p114;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p115, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p115;
	cvt.rzi.s32.f32 	%r376, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r377, %r376, 1;
	setp.eq.b32 	%p116, %r377, 1;
	selp.f32 	%f458, %f456, %f457, %p116;
	selp.f32 	%f459, %f457, %f456, %p116;
	and.b32  	%r378, %r376, 2;
	setp.eq.s32 	%p117, %r378, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p117;
	add.s32 	%r379, %r376, 1;
	and.b32  	%r380, %r379, 2;
	setp.eq.s32 	%p118, %r380, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p118;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p119, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p119;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p120, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p120;
$L__BB0_68:                             // %L526
	cvt.rzi.s32.f32 	%r294, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r42, %r265, 2;
	setp.eq.s32 	%p121, %r42, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p121 bra 	$L__BB0_70;
// %bb.69:                              // %L535
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_70:                             // %L537
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r295, %r294, 1;
	cvt.rzi.s32.f32 	%r311, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p16 bra 	$L__BB0_185;
// %bb.71:
	@%p292 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_72;
$L__BB0_181:
	mov.b32 	%r165, %f788;
	and.b32  	%r387, %r165, 8388607;
	or.b32  	%r3057, %r387, 1065353216;
	mov.b32 	%f787, %r3057;
	add.s32 	%r388, %r165, -1073741824;
	and.b32  	%r3058, %r388, -8388608;
	setp.eq.s32 	%p129, %r3058, 0;
	@%p129 bra 	$L__BB0_184;
// %bb.182:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_183:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r389, %r3058, 192937984;
	add.s32 	%r390, %r3057, %r389;
	mov.b32 	%f479, %r390;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3058, %r3058, %r389;
	mov.b32 	%r3057, %f787;
	setp.ne.s32 	%p130, %r3058, 0;
	setp.ne.s32 	%p131, %r3057, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_183;
$L__BB0_184:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p133, %r165, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_185;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r164, %f189;
	setp.lt.u32 	%p124, %r164, 1073741824;
	@%p124 bra 	$L__BB0_180;
// %bb.73:
	setp.lt.u32 	%p125, %r164, -2147483647;
	@%p125 bra 	$L__BB0_178;
// %bb.74:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p128, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p128;
	bra.uni 	$L__BB0_180;
$L__BB0_178:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p126, %f189, 0f40800000;
	@%p126 bra 	$L__BB0_180;
// %bb.179:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p127, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p127;
$L__BB0_180:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_185:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p31, %r295, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r312, %r311, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p134, %f488, 0f7F800000;
	@%p134 bra 	$L__BB0_187;
// %bb.186:
	mov.b32 	%r391, %f788;
	or.b32  	%r392, %r158, %r391;
	mov.b32 	%f788, %r392;
$L__BB0_187:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p31;
	and.b32  	%r296, %r294, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p51, %r312, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r399, %f489;
	and.b32  	%r400, %r399, -2147483648;
	or.b32  	%r401, %r400, 1056964608;
	mov.b32 	%f490, %r401;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p135, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p135;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p136, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p136;
	cvt.rzi.s32.f32 	%r402, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r403, %r402, 1;
	setp.eq.b32 	%p137, %r403, 1;
	selp.f32 	%f508, %f506, %f507, %p137;
	and.b32  	%r404, %r402, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p142, %f760, 0f40000000;
	@%p142 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p143, %f760, 0f4B800000;
	@%p143 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r46, %f760;
	and.b32  	%r407, %r46, 8388607;
	or.b32  	%r3012, %r407, 1065353216;
	mov.b32 	%f759, %r3012;
	add.s32 	%r408, %r46, -1073741824;
	and.b32  	%r3013, %r408, -8388608;
	setp.eq.s32 	%p149, %r3013, 0;
	@%p149 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r409, %r3013, 192937984;
	add.s32 	%r410, %r3012, %r409;
	mov.b32 	%f532, %r410;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3013, %r3013, %r409;
	mov.b32 	%r3012, %f759;
	setp.ne.s32 	%p150, %r3013, 0;
	setp.ne.s32 	%p151, %r3012, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p153, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p144, %r45, 1073741824;
	@%p144 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p145, %r45, -2147483647;
	@%p145 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p148;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p147;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p32, %r296, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r297, %r294, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p51;
	and.b32  	%r313, %r311, 2;
	setp.eq.s32 	%p138, %r404, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r405, %r402, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p154, %f541, 0f7F800000;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r411, %f203;
	and.b32  	%r412, %r411, -2147483648;
	mov.b32 	%r413, %f760;
	or.b32  	%r414, %r412, %r413;
	mov.b32 	%f760, %r414;
$L__BB0_88:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p31;
	selp.f32 	%f249, %f246, %f248, %p32;
	and.b32  	%r298, %r297, 2;
	setp.eq.f32 	%p34, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p52, %r313, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r314, %r311, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p137;
	selp.f32 	%f511, %f508, %f510, %p138;
	and.b32  	%r406, %r405, 2;
	setp.eq.f32 	%p140, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r415, %f542;
	and.b32  	%r416, %r415, -2147483648;
	or.b32  	%r417, %r416, 1056964608;
	mov.b32 	%f543, %r417;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p155, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p155;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p156, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p156;
	cvt.rzi.s32.f32 	%r418, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r419, %r418, 1;
	setp.eq.b32 	%p157, %r419, 1;
	selp.f32 	%f561, %f559, %f560, %p157;
	and.b32  	%r420, %r418, 2;
	setp.eq.s32 	%p158, %r420, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r421, %r418, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r149;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p162, %f764, 0f40000000;
	@%p162 bra 	$L__BB0_100;
// %bb.89:
	setp.gtu.f32 	%p163, %f764, 0f4B800000;
	@%p163 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r54, %f764;
	and.b32  	%r423, %r54, 8388607;
	or.b32  	%r3014, %r423, 1065353216;
	mov.b32 	%f763, %r3014;
	add.s32 	%r424, %r54, -1073741824;
	and.b32  	%r3015, %r424, -8388608;
	setp.eq.s32 	%p169, %r3015, 0;
	@%p169 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r425, %r3015, 192937984;
	add.s32 	%r426, %r3014, %r425;
	mov.b32 	%f584, %r426;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3015, %r3015, %r425;
	mov.b32 	%r3014, %f763;
	setp.ne.s32 	%p170, %r3015, 0;
	setp.ne.s32 	%p171, %r3014, 0;
	and.pred  	%p172, %p170, %p171;
	@%p172 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p173, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p173;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p164, %r53, 1073741824;
	@%p164 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p165, %r53, -2147483647;
	@%p165 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p168, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p168;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p166, %f107, 0f40800000;
	@%p166 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p167, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p167;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p33, %r298, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p34;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p51;
	selp.f32 	%f304, %f301, %f303, %p52;
	and.b32  	%r315, %r314, 2;
	setp.eq.f32 	%p54, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p139, %r406, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p140;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p157;
	selp.f32 	%f564, %f561, %f563, %p158;
	and.b32  	%r422, %r421, 2;
	setp.eq.f32 	%p160, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p174, %f593, 0f7F800000;
	@%p174 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r427, %f104;
	and.b32  	%r428, %r427, -2147483648;
	mov.b32 	%r429, %f764;
	or.b32  	%r430, %r428, %r429;
	mov.b32 	%f764, %r430;
$L__BB0_102:                            // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p33;
	setp.gt.f32 	%p35, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p53, %r315, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p54;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p139;
	setp.gt.f32 	%p141, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p159, %r422, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f102, %f569, %f564, %p160;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r437, %f595;
	and.b32  	%r438, %r437, -2147483648;
	or.b32  	%r439, %r438, 1056964608;
	mov.b32 	%f596, %r439;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p175, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p175;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p176, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p176;
	cvt.rzi.s32.f32 	%r440, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r441, %r440, 1;
	setp.eq.b32 	%p177, %r441, 1;
	selp.f32 	%f614, %f612, %f613, %p177;
	selp.f32 	%f615, %f613, %f612, %p177;
	and.b32  	%r442, %r440, 2;
	setp.eq.s32 	%p178, %r442, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p178;
	add.s32 	%r443, %r440, 1;
	and.b32  	%r444, %r443, 2;
	setp.eq.s32 	%p179, %r444, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p180, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p180;
	abs.f32 	%f623, %f764;
	and.b32  	%r64, %r265, 1;
	shr.u32 	%r65, %r265, 4;
	setp.ne.s32 	%p182, %r64, %r65;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p182 bra 	$L__BB0_118;
// %bb.103:                             // %L742
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p183, %f768, 0f40000000;
	@%p183 bra 	$L__BB0_115;
// %bb.104:
	setp.gtu.f32 	%p184, %f768, 0f4B800000;
	@%p184 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r67, %f768;
	and.b32  	%r445, %r67, 8388607;
	or.b32  	%r3016, %r445, 1065353216;
	mov.b32 	%f767, %r3016;
	add.s32 	%r446, %r67, -1073741824;
	and.b32  	%r3017, %r446, -8388608;
	setp.eq.s32 	%p190, %r3017, 0;
	@%p190 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r447, %r3017, 192937984;
	add.s32 	%r448, %r3016, %r447;
	mov.b32 	%f638, %r448;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3017, %r3017, %r447;
	mov.b32 	%r3016, %f767;
	setp.ne.s32 	%p191, %r3017, 0;
	setp.ne.s32 	%p192, %r3016, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p194, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p185, %r66, 1073741824;
	@%p185 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p186, %r66, -2147483647;
	@%p186 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p189, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p189;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p187, %f124, 0f40800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p188, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p188;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p195, %f647, 0f7F800000;
	@%p195 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r449, %f121;
	and.b32  	%r450, %r449, -2147483648;
	mov.b32 	%r451, %f768;
	or.b32  	%r452, %r450, %r451;
	mov.b32 	%f768, %r452;
$L__BB0_117:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r453, %f648;
	and.b32  	%r454, %r453, -2147483648;
	or.b32  	%r455, %r454, 1056964608;
	mov.b32 	%f649, %r455;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p196, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p196;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p197, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p197;
	cvt.rzi.s32.f32 	%r456, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r457, %r456, 1;
	setp.eq.b32 	%p198, %r457, 1;
	selp.f32 	%f667, %f665, %f666, %p198;
	selp.f32 	%f668, %f666, %f665, %p198;
	and.b32  	%r458, %r456, 2;
	setp.eq.s32 	%p199, %r458, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p199;
	add.s32 	%r459, %r456, 1;
	and.b32  	%r460, %r459, 2;
	setp.eq.s32 	%p200, %r460, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p200;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p201, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p201;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p202, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p202;
$L__BB0_118:                            // %L781
	selp.f32 	%f258, %f257, %f252, %p35;
	selp.f32 	%f306, %f302, %f305, %p53;
	setp.gt.f32 	%p55, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p141;
	selp.f32 	%f567, %f562, %f566, %p159;
	setp.gt.f32 	%p161, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p179;
	setp.gt.f32 	%p181, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r63, %r149, 1;
	mov.f32 	%f781, %f776;
	@%p182 bra 	$L__BB0_134;
// %bb.119:                             // %L784
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p204, %f774, 0f40000000;
	@%p204 bra 	$L__BB0_131;
// %bb.120:
	setp.gtu.f32 	%p205, %f774, 0f4B800000;
	@%p205 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_121;
$L__BB0_127:
	mov.b32 	%r75, %f774;
	and.b32  	%r461, %r75, 8388607;
	or.b32  	%r3018, %r461, 1065353216;
	mov.b32 	%f773, %r3018;
	add.s32 	%r462, %r75, -1073741824;
	and.b32  	%r3019, %r462, -8388608;
	setp.eq.s32 	%p211, %r3019, 0;
	@%p211 bra 	$L__BB0_130;
// %bb.128:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_129:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r463, %r3019, 192937984;
	add.s32 	%r464, %r3018, %r463;
	mov.b32 	%f691, %r464;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3019, %r3019, %r463;
	mov.b32 	%r3018, %f773;
	setp.ne.s32 	%p212, %r3019, 0;
	setp.ne.s32 	%p213, %r3018, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_129;
$L__BB0_130:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p215, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_131;
$L__BB0_121:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p206, %r74, 1073741824;
	@%p206 bra 	$L__BB0_126;
// %bb.122:
	setp.lt.u32 	%p207, %r74, -2147483647;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p210, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p210;
	bra.uni 	$L__BB0_126;
$L__BB0_124:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p208, %f145, 0f40800000;
	@%p208 bra 	$L__BB0_126;
// %bb.125:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p209, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p209;
$L__BB0_126:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_131:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p216, %f700, 0f7F800000;
	@%p216 bra 	$L__BB0_133;
// %bb.132:
	mov.b32 	%r465, %f142;
	and.b32  	%r466, %r465, -2147483648;
	mov.b32 	%r467, %f774;
	or.b32  	%r468, %r466, %r467;
	mov.b32 	%f774, %r468;
$L__BB0_133:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r469, %f701;
	and.b32  	%r470, %r469, -2147483648;
	or.b32  	%r471, %r470, 1056964608;
	mov.b32 	%f702, %r471;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p217, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p217;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p218, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p218;
	cvt.rzi.s32.f32 	%r472, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r473, %r472, 1;
	setp.eq.b32 	%p219, %r473, 1;
	selp.f32 	%f720, %f718, %f719, %p219;
	selp.f32 	%f721, %f719, %f718, %p219;
	and.b32  	%r474, %r472, 2;
	setp.eq.s32 	%p220, %r474, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p220;
	add.s32 	%r475, %r472, 1;
	and.b32  	%r476, %r475, 2;
	setp.eq.s32 	%p221, %r476, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p221;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p222, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p222;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p223, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p223;
$L__BB0_134:                            // %L818
	mov.b32 	%r287, %f258;
	mov.b32 	%r290, %f255;
	selp.f32 	%f17, %f310, %f306, %p55;
	mov.b32 	%r395, %f520;
	mov.b32 	%r398, %f517;
	selp.f32 	%f103, %f571, %f567, %p161;
	selp.f32 	%f625, %f624, %f619, %p181;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p121 bra 	$L__BB0_136;
// %bb.135:                             // %L827
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_136:                            // %L829
	xor.b32  	%r286, %r290, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mov.b32 	%r338, %f17;
	mov.b32 	%r339, %f740;
	mov.b32 	%r341, %f16;
	mov.b32 	%r342, %f741;
	mov.b32 	%r382, %f754;
	mov.b32 	%r383, %f756;
	mov.b32 	%r385, %f755;
	mov.b32 	%r386, %f757;
	xor.b32  	%r394, %r398, -2147483648;
	mov.b32 	%r433, %f625;
	mov.b32 	%r432, %f103;
	mov.b32 	%r436, %f622;
	mov.b32 	%r435, %f102;
	mov.b32 	%r478, %f778;
	mov.b32 	%r479, %f780;
	mov.b32 	%r481, %f779;
	mov.b32 	%r482, %f781;
	setp.gt.u32 	%p225, %r265, 15;
	mov.u32 	%r174, 999999999;
	@%p225 bra 	$L__BB0_138;
// %bb.137:                             // %L859
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mad.lo.s32 	%r484, %r265, 6, %r4;
	cvt.u16.u32 	%rs17, %r484;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r485, %rs22;
	and.b32  	%r486, %r485, 255;
	mul.wide.u32 	%rd19, %r486, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.u32 	%r487, [%rd20];
	cvt.s32.s16 	%r488, %r487;
	shr.s32 	%r489, %r487, 16;
	mul.lo.s32 	%r490, %r489, 290;
	mad.lo.s32 	%r174, %r488, 33, %r490;
$L__BB0_138:                            // %pass430
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r287, %r286;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r288, %r290, %r287;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r337, %r339, %r338;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r340, %r342, %r341;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r381, %r383, %r382;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r384, %r386, %r385;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r393, %r395, %r394;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r398, %r395;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r432;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r436, %r435;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r477, %r479, %r478;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r480, %r482, %r481;
	// end inline asm
	mul.lo.s32 	%r492, %r148, 24;
	shl.b32 	%r493, %r4, 1;
	and.b32  	%r494, %r493, 2;
	shr.u32 	%r175, %r265, 3;
	bfe.u32 	%r495, %r265, 3, 1;
	or.b32  	%r496, %r494, %r495;
	and.b32  	%r497, %r175, 2;
	or.b32  	%r176, %r497, %r63;
	cvt.u16.u32 	%rs25, %r176;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r498, %rs29;
	and.b32  	%r499, %r498, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r500, %rs30, 8;
	add.s32 	%r501, %r492, %r2;
	or.b32  	%r502, %r501, %r496;
	add.s32 	%r503, %r502, %r500;
	mul.wide.u32 	%rd21, %r503, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.u32 	%r177, [%rd22];
	or.b32  	%r504, %r496, 4;
	cvt.u64.u32 	%rd23, %r500;
	cvt.u64.u32 	%rd24, %r501;
	cvt.u64.u32 	%rd25, %r496;
	add.s64 	%rd26, %rd24, %rd25;
	add.s64 	%rd27, %rd26, %rd23;
	shl.b64 	%rd28, %rd27, 2;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r178, [%rd29+16];
	cvt.u64.u32 	%rd30, %r492;
	cvt.u64.u32 	%rd31, %r2;
	add.s64 	%rd32, %rd31, %rd30;
	add.s64 	%rd33, %rd32, %rd25;
	add.s64 	%rd34, %rd33, %rd23;
	shl.b64 	%rd35, %rd34, 2;
	add.s64 	%rd36, %rd2, %rd35;
	ld.global.u32 	%r179, [%rd36+384];
	cvt.u64.u32 	%rd37, %r504;
	add.s64 	%rd38, %rd32, %rd37;
	add.s64 	%rd39, %rd38, %rd23;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd41, %rd2, %rd40;
	ld.global.u32 	%r180, [%rd41+384];
	shl.b32 	%r505, %r265, 2;
	shl.b32 	%r506, %r1, 5;
	and.b32  	%r507, %r505, 28;
	shl.b32 	%r181, %r4, 2;
	or.b32  	%r182, %r507, %r506;
	and.b32  	%r183, %r265, 4;
	bfe.s32 	%r508, %r265, 2, 1;
	shl.b32 	%r509, %r265, 4;
	and.b32  	%r510, %r161, 8;
	or.b32  	%r511, %r510, %r509;
	bfe.u32 	%r512, %r511, 3, 3;
	mul.lo.s32 	%r184, %r512, 260;
	cvt.u16.u32 	%rs31, %r265;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r513, %rs36;
	and.b32  	%r185, %r513, 255;
	add.s32 	%r514, %r5, 192;
	and.b32  	%r515, %r514, 224;
	add.s32 	%r516, %r4, 6;
	shr.u32 	%r517, %r516, 3;
	mad.lo.s32 	%r186, %r517, 260, %r515;
	add.s32 	%r518, %r5, 128;
	and.b32  	%r519, %r518, 224;
	add.s32 	%r520, %r4, 12;
	shr.u32 	%r521, %r520, 3;
	mad.lo.s32 	%r187, %r521, 260, %r519;
	add.s32 	%r522, %r5, 64;
	and.b32  	%r523, %r522, 224;
	add.s32 	%r524, %r4, 18;
	shr.u32 	%r525, %r524, 3;
	mad.lo.s32 	%r188, %r525, 260, %r523;
	or.b32  	%r189, %r5, 780;
	add.s32 	%r526, %r4, 30;
	shr.u32 	%r527, %r526, 3;
	mad.lo.s32 	%r190, %r527, 260, %r515;
	add.s32 	%r528, %r4, 36;
	shr.u32 	%r529, %r528, 3;
	mad.lo.s32 	%r191, %r529, 260, %r519;
	add.s32 	%r530, %r4, 42;
	shr.u32 	%r531, %r530, 3;
	mad.lo.s32 	%r192, %r531, 260, %r523;
	or.b32  	%r193, %r5, 1560;
	add.s32 	%r532, %r4, 54;
	shr.u32 	%r533, %r532, 3;
	mad.lo.s32 	%r194, %r533, 260, %r515;
	add.s32 	%r534, %r4, 60;
	bfe.u32 	%r535, %r534, 3, 3;
	mad.lo.s32 	%r195, %r535, 260, %r519;
	mul.lo.s32 	%r536, %r148, 870;
	shr.u32 	%r537, %r4, 1;
	cvt.u16.u32 	%rs37, %r537;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r538, %rs42;
	and.b32  	%r196, %r538, 255;
	mad.lo.s32 	%r539, %r496, 33, %r536;
	mad.lo.s32 	%r197, %r499, 290, %r539;
	add.s32 	%r198, %r197, 132;
	setp.lt.u32 	%p227, %r265, 4;
	setp.eq.s32 	%p228, %r149, 1;
	setp.eq.s32 	%p229, %r149, 4;
	setp.eq.s32 	%p230, %r149, 5;
	or.b32  	%r199, %r494, %r65;
	bfe.s32 	%r540, %r265, 3, 1;
	and.b32  	%r200, %r540, 98;
	setp.eq.s32 	%p231, %r64, 0;
	selp.b32 	%r201, 0, 784, %p231;
	selp.b32 	%r202, 0, 392, %p121;
	and.b32  	%r203, %r508, 196;
	or.b32  	%r204, %r201, %r200;
	add.s32 	%r541, %r204, %r202;
	add.s32 	%r205, %r541, %r203;
	or.b32  	%r206, %r199, 4;
	add.s32 	%r542, %r202, %r201;
	add.s32 	%r207, %r542, %r203;
	and.b32  	%r543, %r161, 6;
	shr.u32 	%r544, %r4, 2;
	mul.lo.s32 	%r545, %r544, 98;
	and.b32  	%r546, %r4, 1;
	neg.s32 	%r547, %r546;
	and.b32  	%r548, %r547, 392;
	bfe.s32 	%r549, %r4, 1, 1;
	and.b32  	%r550, %r549, 196;
	and.b32  	%r551, %r540, 1576;
	or.b32  	%r552, %r63, %r543;
	mad.lo.s32 	%r553, %r65, 784, %r545;
	add.s32 	%r554, %r553, %r552;
	add.s32 	%r555, %r554, %r548;
	add.s32 	%r556, %r555, %r550;
	add.s32 	%r208, %r556, %r551;
	add.s32 	%r209, %r208, 8;
	mul.lo.s32 	%r557, %r262, 147456;
	or.b32  	%r558, %r175, %r181;
	cvt.u16.u32 	%rs43, %r558;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r559, %rs49;
	and.b32  	%r560, %r559, 248;
	and.b32  	%r561, %r265, 7;
	or.b32  	%r562, %r561, %r2;
	add.s32 	%r210, %r562, %r560;
	cvt.s64.s32 	%rd6, %r557;
	add.s32 	%r563, %r197, %r196;
	mul.wide.u32 	%rd42, %r563, 4;
	mov.u64 	%rd43, shmem;
	add.s64 	%rd7, %rd43, %rd42;
	add.s32 	%r564, %r198, %r196;
	mul.wide.u32 	%rd44, %r564, 4;
	add.s64 	%rd8, %rd43, %rd44;
	cvt.u64.u32 	%rd45, %r197;
	cvt.u64.u16 	%rd46, %rs42;
	and.b64  	%rd47, %rd46, 255;
	add.s64 	%rd48, %rd45, %rd47;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd9, %rd43, %rd49;
	cvt.u64.u32 	%rd50, %r198;
	add.s64 	%rd51, %rd50, %rd47;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd10, %rd43, %rd52;
	or.pred  	%p232, %p227, %p228;
	and.b32  	%r565, %r265, 24;
	setp.eq.s32 	%p233, %r565, 8;
	or.pred  	%p234, %p232, %p233;
	or.pred  	%p235, %p234, %p229;
	setp.eq.s32 	%p236, %r565, 24;
	or.pred  	%p237, %p230, %p236;
	selp.b32 	%r211, 1145324612, -286331154, %p234;
	or.pred  	%p1, %p235, %p237;
	selp.b32 	%r212, 1145324612, -286331154, %p232;
	add.s32 	%r566, %r149, -1;
	setp.lt.u32 	%p238, %r566, 3;
	or.pred  	%p2, %p227, %p238;
	setp.eq.s32 	%p239, %r565, 16;
	or.pred  	%p3, %p239, %p236;
	selp.b32 	%r213, 1145324612, -286331154, %p239;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r86, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r235, %r212, %r213, %p2;
	or.pred  	%p254, %p2, %p3;
	mov.u32 	%r85, %r196;
	mov.u32 	%r106, %r86;
	mov.u32 	%r107, %r86;
	mov.u32 	%r108, %r86;
	bra.uni 	$L__BB0_188;
$L__BB0_160:                            // %L30818
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r146, %r86, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s32 	%r85, %r85, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p291, %r86, 16320;
	mov.u32 	%r86, %r146;
	@%p291 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_161;
$L__BB0_188:                            // %L1614
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_150 Depth 2
	add.s32 	%r567, %r86, %r260;
	setp.lt.s32 	%p240, %r567, %r261;
	@%p240 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_161;
$L__BB0_189:                            // %oksrem799
                                        //   in Loop: Header=BB0_188 Depth=1
	setp.eq.s32 	%p241, %r176, 3;
	setp.gt.u32 	%p242, %r4, 3;
	setp.eq.s32 	%p243, %r183, 0;
	mul.hi.u32 	%r665, %r86, -1431655765;
	shr.u32 	%r666, %r665, 5;
	mul.lo.s32 	%r667, %r666, 48;
	or.b32  	%r668, %r667, %r175;
	add.s32 	%r669, %r668, %r181;
	shr.s32 	%r670, %r669, 31;
	shr.u32 	%r671, %r670, 18;
	add.s32 	%r672, %r669, %r671;
	and.b32  	%r673, %r672, -16384;
	sub.s32 	%r674, %r669, %r673;
	add.s32 	%r675, %r674, %r260;
	mad.lo.s32 	%r676, %r675, 24576, %r182;
	mul.hi.s32 	%r677, %r676, 715827883;
	shr.u32 	%r678, %r677, 31;
	shr.s32 	%r679, %r677, 26;
	add.s32 	%r680, %r679, %r678;
	setp.lt.s32 	%p244, %r676, 0;
	mul.lo.s32 	%r681, %r680, 402653184;
	setp.ne.s32 	%p245, %r681, %r676;
	and.pred  	%p246, %p244, %p245;
	selp.s32 	%r682, -1, 0, %p246;
	add.s32 	%r683, %r680, %r682;
	mad.lo.s32 	%r684, %r683, -402653184, %r676;
	mul.wide.s32 	%rd53, %r684, 4;
	add.s64 	%rd54, %rd3, %rd53;
	ld.global.v4.u32 	{%r685, %r686, %r687, %r688}, [%rd54];
	add.s32 	%r689, %r667, 24;
	or.b32  	%r690, %r689, %r175;
	add.s32 	%r691, %r690, %r181;
	shr.s32 	%r692, %r691, 31;
	shr.u32 	%r693, %r692, 18;
	add.s32 	%r694, %r691, %r693;
	and.b32  	%r695, %r694, -16384;
	sub.s32 	%r696, %r691, %r695;
	add.s32 	%r697, %r696, %r260;
	mad.lo.s32 	%r698, %r697, 24576, %r182;
	mul.hi.s32 	%r699, %r698, 715827883;
	shr.u32 	%r700, %r699, 31;
	shr.s32 	%r701, %r699, 26;
	add.s32 	%r702, %r701, %r700;
	setp.lt.s32 	%p247, %r698, 0;
	mul.lo.s32 	%r703, %r702, 402653184;
	setp.ne.s32 	%p248, %r703, %r698;
	and.pred  	%p249, %p247, %p248;
	selp.s32 	%r704, -1, 0, %p249;
	add.s32 	%r705, %r702, %r704;
	mad.lo.s32 	%r706, %r705, -402653184, %r698;
	mul.wide.s32 	%rd55, %r706, 4;
	add.s64 	%rd56, %rd3, %rd55;
	ld.global.v4.u32 	{%r707, %r708, %r709, %r710}, [%rd56];
	selp.b32 	%r711, %r687, %r685, %p243;
	shfl.sync.bfly.b32	%r712, %r711, 4, 31, -1;
	selp.b32 	%r570, %r685, %r712, %p243;
	selp.b32 	%r575, %r712, %r687, %p243;
	selp.b32 	%r713, %r688, %r686, %p243;
	shfl.sync.bfly.b32	%r714, %r713, 4, 31, -1;
	selp.b32 	%r578, %r686, %r714, %p243;
	selp.b32 	%r583, %r714, %r688, %p243;
	selp.b32 	%r715, %r709, %r707, %p243;
	shfl.sync.bfly.b32	%r716, %r715, 4, 31, -1;
	selp.b32 	%r586, %r707, %r716, %p243;
	selp.b32 	%r591, %r716, %r709, %p243;
	selp.b32 	%r717, %r710, %r708, %p243;
	shfl.sync.bfly.b32	%r718, %r717, 4, 31, -1;
	selp.b32 	%r594, %r708, %r718, %p243;
	selp.b32 	%r599, %r718, %r710, %p243;
	shl.b32 	%r571, %r575, 4;
	mov.u32 	%r569, 252645135;
	// begin inline asm
	lop3.b32 %r601, %r569, %r570, %r571, 202;
	// end inline asm
	shr.u32 	%r574, %r570, 4;
	// begin inline asm
	lop3.b32 %r617, %r569, %r574, %r575, 202;
	// end inline asm
	shl.b32 	%r579, %r583, 4;
	// begin inline asm
	lop3.b32 %r609, %r569, %r578, %r579, 202;
	// end inline asm
	shr.u32 	%r582, %r578, 4;
	// begin inline asm
	lop3.b32 %r625, %r569, %r582, %r583, 202;
	// end inline asm
	shl.b32 	%r587, %r591, 4;
	// begin inline asm
	lop3.b32 %r602, %r569, %r586, %r587, 202;
	// end inline asm
	shr.u32 	%r590, %r586, 4;
	// begin inline asm
	lop3.b32 %r618, %r569, %r590, %r591, 202;
	// end inline asm
	shl.b32 	%r595, %r599, 4;
	// begin inline asm
	lop3.b32 %r610, %r569, %r594, %r595, 202;
	// end inline asm
	shr.u32 	%r598, %r594, 4;
	// begin inline asm
	lop3.b32 %r626, %r569, %r598, %r599, 202;
	// end inline asm
	mov.u32 	%r603, 25152;
	// begin inline asm
	prmt.b32 %r633, %r601, %r602, %r603;
	// end inline asm
	mov.u32 	%r607, 29521;
	// begin inline asm
	prmt.b32 %r649, %r601, %r602, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r641, %r609, %r610, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r609, %r610, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r634, %r617, %r618, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r650, %r617, %r618, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r642, %r625, %r626, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r625, %r626, %r607;
	// end inline asm
	mov.u32 	%r659, 21520;
	// begin inline asm
	prmt.b32 %r632, %r633, %r634, %r659;
	// end inline asm
	mov.u32 	%r663, 30258;
	// begin inline asm
	prmt.b32 %r636, %r633, %r634, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r640, %r641, %r642, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r644, %r641, %r642, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r648, %r649, %r650, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r652, %r649, %r650, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r657, %r658, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r657, %r658, %r663;
	// end inline asm
	mul.hi.s32 	%r719, %r669, 715827883;
	shr.u32 	%r720, %r719, 31;
	shr.s32 	%r721, %r719, 2;
	add.s32 	%r722, %r721, %r720;
	mul.lo.s32 	%r723, %r722, 24;
	sub.s32 	%r724, %r669, %r723;
	add.s32 	%r725, %r724, %r184;
	mul.wide.s32 	%rd57, %r725, 4;
	add.s64 	%rd59, %rd43, %rd57;
	st.shared.u32 	[%rd59], %r632;
	add.s32 	%r726, %r725, 128;
	mul.wide.u32 	%rd60, %r726, 4;
	add.s64 	%rd61, %rd43, %rd60;
	st.shared.u32 	[%rd61], %r640;
	add.s32 	%r727, %r725, 64;
	mul.wide.u32 	%rd62, %r727, 4;
	add.s64 	%rd63, %rd43, %rd62;
	st.shared.u32 	[%rd63], %r636;
	add.s32 	%r728, %r725, 192;
	mul.wide.u32 	%rd64, %r728, 4;
	add.s64 	%rd65, %rd43, %rd64;
	st.shared.u32 	[%rd65], %r644;
	add.s32 	%r729, %r725, 32;
	mul.wide.u32 	%rd66, %r729, 4;
	add.s64 	%rd67, %rd43, %rd66;
	st.shared.u32 	[%rd67], %r648;
	add.s32 	%r730, %r725, 160;
	mul.wide.u32 	%rd68, %r730, 4;
	add.s64 	%rd69, %rd43, %rd68;
	st.shared.u32 	[%rd69], %r656;
	add.s32 	%r731, %r725, 96;
	mul.wide.u32 	%rd70, %r731, 4;
	add.s64 	%rd71, %rd43, %rd70;
	st.shared.u32 	[%rd71], %r652;
	add.s32 	%r732, %r725, 224;
	mul.wide.u32 	%rd72, %r732, 4;
	add.s64 	%rd73, %rd43, %rd72;
	st.shared.u32 	[%rd73], %r660;
	bar.sync 	0;
	add.s32 	%r733, %r667, %r185;
	cvt.u16.u32 	%rs50, %r733;
	mul.hi.s16 	%rs51, %rs50, 10923;
	shr.u16 	%rs52, %rs51, 15;
	shr.s16 	%rs53, %rs51, 2;
	add.s16 	%rs54, %rs53, %rs52;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs50, %rs55;
	cvt.s32.s16 	%r734, %rs56;
	add.s32 	%r735, %r5, %r734;
	mul.wide.s32 	%rd74, %r735, 4;
	add.s64 	%rd75, %rd43, %rd74;
	ld.shared.u32 	%r736, [%rd75];
	add.s32 	%r737, %r186, %r734;
	mul.wide.s32 	%rd76, %r737, 4;
	add.s64 	%rd77, %rd43, %rd76;
	ld.shared.u32 	%r738, [%rd77];
	add.s32 	%r739, %r187, %r734;
	mul.wide.u32 	%rd78, %r739, 4;
	add.s64 	%rd79, %rd43, %rd78;
	ld.shared.u32 	%r740, [%rd79];
	add.s32 	%r741, %r188, %r734;
	mul.wide.u32 	%rd80, %r741, 4;
	add.s64 	%rd81, %rd43, %rd80;
	ld.shared.u32 	%r742, [%rd81];
	add.s32 	%r743, %r189, %r734;
	mul.wide.u32 	%rd82, %r743, 4;
	add.s64 	%rd83, %rd43, %rd82;
	ld.shared.u32 	%r744, [%rd83];
	add.s32 	%r745, %r190, %r734;
	mul.wide.u32 	%rd84, %r745, 4;
	add.s64 	%rd85, %rd43, %rd84;
	ld.shared.u32 	%r746, [%rd85];
	add.s32 	%r747, %r191, %r734;
	mul.wide.u32 	%rd86, %r747, 4;
	add.s64 	%rd87, %rd43, %rd86;
	ld.shared.u32 	%r748, [%rd87];
	add.s32 	%r749, %r192, %r734;
	mul.wide.u32 	%rd88, %r749, 4;
	add.s64 	%rd89, %rd43, %rd88;
	ld.shared.u32 	%r750, [%rd89];
	add.s32 	%r751, %r193, %r734;
	mul.wide.u32 	%rd90, %r751, 4;
	add.s64 	%rd91, %rd43, %rd90;
	ld.shared.u32 	%r752, [%rd91];
	add.s32 	%r753, %r194, %r734;
	mul.wide.u32 	%rd92, %r753, 4;
	add.s64 	%rd93, %rd43, %rd92;
	ld.shared.u32 	%r754, [%rd93];
	add.s32 	%r755, %r195, %r734;
	mul.wide.s32 	%rd94, %r755, 4;
	add.s64 	%rd95, %rd43, %rd94;
	ld.shared.u32 	%r756, [%rd95];
	bar.sync 	0;
	shfl.sync.idx.b32	%r757, %r174, 0, 31, -1;
	shfl.sync.idx.b32	%r758, %r174, 1, 31, -1;
	shfl.sync.idx.b32	%r759, %r174, 2, 31, -1;
	shfl.sync.idx.b32	%r760, %r174, 3, 31, -1;
	shfl.sync.idx.b32	%r761, %r174, 4, 31, -1;
	shfl.sync.idx.b32	%r762, %r174, 5, 31, -1;
	shfl.sync.idx.b32	%r763, %r174, 6, 31, -1;
	shfl.sync.idx.b32	%r764, %r174, 7, 31, -1;
	shfl.sync.idx.b32	%r765, %r174, 8, 31, -1;
	shfl.sync.idx.b32	%r766, %r174, 9, 31, -1;
	shfl.sync.idx.b32	%r767, %r174, 10, 31, -1;
	shfl.sync.idx.b32	%r768, %r174, 11, 31, -1;
	shfl.sync.idx.b32	%r769, %r174, 12, 31, -1;
	shfl.sync.idx.b32	%r770, %r174, 13, 31, -1;
	shfl.sync.idx.b32	%r771, %r174, 14, 31, -1;
	shfl.sync.idx.b32	%r772, %r174, 15, 31, -1;
	add.s32 	%r773, %r757, %r734;
	mul.wide.s32 	%rd96, %r773, 4;
	add.s64 	%rd97, %rd43, %rd96;
	st.shared.u32 	[%rd97], %r736;
	add.s32 	%r774, %r758, %r734;
	mul.wide.s32 	%rd98, %r774, 4;
	add.s64 	%rd99, %rd43, %rd98;
	st.shared.u32 	[%rd99], %r738;
	add.s32 	%r775, %r759, %r734;
	mul.wide.s32 	%rd100, %r775, 4;
	add.s64 	%rd101, %rd43, %rd100;
	st.shared.u32 	[%rd101], %r740;
	add.s32 	%r776, %r760, %r734;
	mul.wide.s32 	%rd102, %r776, 4;
	add.s64 	%rd103, %rd43, %rd102;
	st.shared.u32 	[%rd103], %r742;
	add.s32 	%r777, %r761, %r734;
	mul.wide.s32 	%rd104, %r777, 4;
	add.s64 	%rd105, %rd43, %rd104;
	st.shared.u32 	[%rd105], %r744;
	add.s32 	%r778, %r762, %r734;
	mul.wide.s32 	%rd106, %r778, 4;
	add.s64 	%rd107, %rd43, %rd106;
	st.shared.u32 	[%rd107], %r746;
	add.s32 	%r779, %r763, %r734;
	mul.wide.s32 	%rd108, %r779, 4;
	add.s64 	%rd109, %rd43, %rd108;
	st.shared.u32 	[%rd109], %r748;
	add.s32 	%r780, %r764, %r734;
	mul.wide.s32 	%rd110, %r780, 4;
	add.s64 	%rd111, %rd43, %rd110;
	st.shared.u32 	[%rd111], %r750;
	add.s32 	%r781, %r765, %r734;
	mul.wide.s32 	%rd112, %r781, 4;
	add.s64 	%rd113, %rd43, %rd112;
	st.shared.u32 	[%rd113], %r752;
	add.s32 	%r782, %r766, %r734;
	mul.wide.s32 	%rd114, %r782, 4;
	add.s64 	%rd115, %rd43, %rd114;
	st.shared.u32 	[%rd115], %r754;
	selp.b32 	%r783, 0, %r756, %p242;
	add.s32 	%r784, %r767, %r734;
	mul.wide.s32 	%rd116, %r784, 4;
	add.s64 	%rd117, %rd43, %rd116;
	st.shared.u32 	[%rd117], %r783;
	add.s32 	%r785, %r768, %r734;
	mul.wide.s32 	%rd118, %r785, 4;
	add.s64 	%rd119, %rd43, %rd118;
	mov.u32 	%r664, 0;
	st.shared.u32 	[%rd119], %r664;
	add.s32 	%r786, %r769, %r734;
	mul.wide.s32 	%rd120, %r786, 4;
	add.s64 	%rd121, %rd43, %rd120;
	st.shared.u32 	[%rd121], %r664;
	add.s32 	%r787, %r770, %r734;
	mul.wide.s32 	%rd122, %r787, 4;
	add.s64 	%rd123, %rd43, %rd122;
	st.shared.u32 	[%rd123], %r664;
	add.s32 	%r788, %r771, %r734;
	mul.wide.s32 	%rd124, %r788, 4;
	add.s64 	%rd125, %rd43, %rd124;
	st.shared.u32 	[%rd125], %r664;
	add.s32 	%r789, %r772, %r734;
	mul.wide.s32 	%rd126, %r789, 4;
	add.s64 	%rd127, %rd43, %rd126;
	st.shared.u32 	[%rd127], %r664;
	bar.sync 	0;
	mov.u32 	%r90, %r664;
	mov.u32 	%r91, %r664;
	mov.u32 	%r92, %r664;
	mov.u32 	%r93, %r664;
	mov.u32 	%r94, %r664;
	mov.u32 	%r95, %r664;
	mov.u32 	%r96, %r664;
	mov.u32 	%r97, %r664;
	mov.u32 	%r98, %r664;
	mov.u32 	%r99, %r664;
	mov.u32 	%r100, %r664;
	mov.u32 	%r101, %r664;
	mov.u32 	%r102, %r664;
	mov.u32 	%r103, %r664;
	mov.u32 	%r104, %r664;
	mov.u32 	%r105, %r664;
	@%p241 bra 	$L__BB0_139;
// %bb.190:                             // %oksrem2687
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r214, %r667, %r196;
	ld.shared.u32 	%r90, [%rd7];
	ld.shared.u32 	%r91, [%rd8];
	ld.shared.u32 	%r92, [%rd9+12];
	ld.shared.u32 	%r93, [%rd10+12];
	ld.shared.u32 	%r94, [%rd9+24];
	ld.shared.u32 	%r95, [%rd10+24];
	ld.shared.u32 	%r96, [%rd9+36];
	ld.shared.u32 	%r97, [%rd10+36];
	add.s32 	%r790, %r214, 12;
	mul.hi.u32 	%r791, %r790, -1431655765;
	shr.u32 	%r792, %r791, 4;
	mul.lo.s32 	%r793, %r792, 24;
	sub.s32 	%r794, %r790, %r793;
	add.s32 	%r795, %r197, %r794;
	mul.wide.u32 	%rd128, %r795, 4;
	add.s64 	%rd130, %rd43, %rd128;
	ld.shared.u32 	%r98, [%rd130];
	add.s32 	%r796, %r198, %r794;
	mul.wide.u32 	%rd131, %r796, 4;
	add.s64 	%rd132, %rd43, %rd131;
	ld.shared.u32 	%r99, [%rd132];
	ld.shared.u32 	%r100, [%rd9+60];
	ld.shared.u32 	%r101, [%rd10+60];
	ld.shared.u32 	%r102, [%rd9+72];
	ld.shared.u32 	%r103, [%rd10+72];
	ld.shared.u32 	%r104, [%rd9+84];
	ld.shared.u32 	%r105, [%rd10+84];
$L__BB0_139:                            // %L8741
                                        //   in Loop: Header=BB0_188 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r109, %r664;
	bra.uni 	$L__BB0_140;
$L__BB0_147:                            // %L19769
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r106, 0;
	mov.u32 	%r108, %r106;
$L__BB0_148:                            // %L19770
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r109, %r109, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p270, %r109, 24;
	@%p270 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_149;
$L__BB0_140:                            // %L8759
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p250, %r109, 0;
	selp.b32 	%r1190, %r90, 0, %p250;
	setp.eq.s32 	%p251, %r109, 6;
	selp.b32 	%r1191, %r94, %r1190, %p251;
	setp.eq.s32 	%p252, %r109, 12;
	selp.b32 	%r1192, %r98, %r1191, %p252;
	setp.eq.s32 	%p253, %r109, 18;
	selp.b32 	%r1193, %r102, %r1192, %p253;
	selp.b32 	%r1194, %r91, 0, %p250;
	selp.b32 	%r1195, %r95, %r1194, %p251;
	selp.b32 	%r1196, %r99, %r1195, %p252;
	selp.b32 	%r1197, %r103, %r1196, %p253;
	selp.b32 	%r1198, %r92, 0, %p250;
	selp.b32 	%r1199, %r96, %r1198, %p251;
	selp.b32 	%r1200, %r100, %r1199, %p252;
	selp.b32 	%r1201, %r104, %r1200, %p253;
	selp.b32 	%r1202, %r93, 0, %p250;
	selp.b32 	%r1203, %r97, %r1202, %p251;
	selp.b32 	%r1204, %r101, %r1203, %p252;
	selp.b32 	%r1205, %r105, %r1204, %p253;
	mov.u16 	%rs94, 25600;
	// begin inline asm
	mov.b32 %r803, {%rs94, %rs94};
	// end inline asm
	mov.u16 	%rs96, 21504;
	// begin inline asm
	mov.b32 %r814, {%rs96, %rs96};
	// end inline asm
	xor.b32  	%r802, %r1193, -2004318072;
	mov.u32 	%r939, 983055;
	// begin inline asm
	lop3.b32 %r800, %r939, %r802, %r803, 202;
	// end inline asm
	mov.u16 	%rs100, 18432;
	// begin inline asm
	mov.b32 %r804, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r805, %r803, %r804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r808, %r800, %r805;
	// end inline asm
	mov.u32 	%r950, 15728880;
	// begin inline asm
	lop3.b32 %r811, %r950, %r802, %r814, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r815, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r816, %r814, %r815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r819, %r811, %r816;
	// end inline asm
	// begin inline asm
	mov.b32 %r849, {%rs94, %rs94};
	// end inline asm
	// begin inline asm
	mov.b32 %r860, {%rs96, %rs96};
	// end inline asm
	xor.b32  	%r848, %r1197, -2004318072;
	// begin inline asm
	lop3.b32 %r846, %r939, %r848, %r849, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r850, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r851, %r849, %r850;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r854, %r846, %r851;
	// end inline asm
	// begin inline asm
	lop3.b32 %r857, %r950, %r848, %r860, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r861, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r862, %r860, %r861;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r865, %r857, %r862;
	// end inline asm
	// begin inline asm
	mov.b32 %r895, {%rs94, %rs94};
	// end inline asm
	// begin inline asm
	mov.b32 %r906, {%rs96, %rs96};
	// end inline asm
	xor.b32  	%r894, %r1201, -2004318072;
	// begin inline asm
	lop3.b32 %r892, %r939, %r894, %r895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r897, %r895, %r896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r900, %r892, %r897;
	// end inline asm
	// begin inline asm
	lop3.b32 %r903, %r950, %r894, %r906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r907, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r908, %r906, %r907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r911, %r903, %r908;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs94, %rs94};
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs96, %rs96};
	// end inline asm
	xor.b32  	%r940, %r1205, -2004318072;
	// begin inline asm
	lop3.b32 %r938, %r939, %r940, %r941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r943, %r941, %r942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r946, %r938, %r943;
	// end inline asm
	// begin inline asm
	lop3.b32 %r949, %r950, %r940, %r952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r954, %r952, %r953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r957, %r949, %r954;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r808;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r982, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r854;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r985, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r819;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r988, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r865;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r991, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r900;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r994, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r946;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r997, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r911;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1000, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r957;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1003, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1006, %r1007}, {%r285, %r288}, {%r982}, {%r664, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1013, %r1014}, {%r285, %r288}, {%r985}, {%r664, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1020, %r1021}, {%r285, %r288}, {%r988}, {%r664, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1027, %r1028}, {%r285, %r288}, {%r991}, {%r664, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1034, %r1035}, {%r285, %r288}, {%r994}, {%r664, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1041, %r1042}, {%r285, %r288}, {%r997}, {%r664, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1048, %r1049}, {%r285, %r288}, {%r1000}, {%r664, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1055, %r1056}, {%r285, %r288}, {%r1003}, {%r664, %r664};
	// end inline asm
	@%p1 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_141;
$L__BB0_191:                            // %pass4004
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1062, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1064, %r1062, %r1007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1067, %r337, %r1006, %r1064;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1071, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1073, %r1071, %r1014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1076, %r337, %r1013, %r1073;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1080, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1082, %r1080, %r1021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1085, %r337, %r1020, %r1082;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1089, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1091, %r1089, %r1028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1094, %r337, %r1027, %r1091;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1098, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1100, %r1098, %r1035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1103, %r337, %r1034, %r1100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1107, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1109, %r1107, %r1042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r337, %r1041, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1116, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1118, %r1116, %r1049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r337, %r1048, %r1118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1125, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1127, %r1125, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r337, %r1055, %r1127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1134, %r340, %r1006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r337, %r1007, %r1134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1141, %r340, %r1013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r337, %r1014, %r1141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r340, %r1020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r337, %r1021, %r1148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1155, %r340, %r1027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r337, %r1028, %r1155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1162, %r340, %r1034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r337, %r1035, %r1162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1169, %r340, %r1041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r337, %r1042, %r1169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1176, %r340, %r1048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r337, %r1049, %r1176;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1183, %r340, %r1055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r337, %r1056, %r1183;
	// end inline asm
	mov.u32 	%r1355, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1279, %r1280}, {%r381, %r384}, {%r1067, %r1137}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1287, %r1288}, {%r381, %r384}, {%r1076, %r1144}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1295, %r1296}, {%r381, %r384}, {%r1085, %r1151}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1303, %r1304}, {%r381, %r384}, {%r1094, %r1158}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1311, %r1312}, {%r381, %r384}, {%r1103, %r1165}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1319, %r1320}, {%r381, %r384}, {%r1112, %r1172}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1327, %r1328}, {%r381, %r384}, {%r1121, %r1179}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1335, %r1336}, {%r381, %r384}, {%r1130, %r1186}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1279, %r1280, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1279, %r1280, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1287, %r1288, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1287, %r1288, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1295, %r1296, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1298, %r1295, %r1296, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1302, %r1303, %r1304, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1306, %r1303, %r1304, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1310, %r1311, %r1312, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1314, %r1311, %r1312, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1318, %r1319, %r1320, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1322, %r1319, %r1320, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1326, %r1327, %r1328, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1330, %r1327, %r1328, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1334, %r1335, %r1336, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1338, %r1335, %r1336, %r663;
	// end inline asm
	add.s32 	%r1388, %r85, %r109;
	mul.hi.u32 	%r1389, %r1388, -1431655765;
	shr.u32 	%r1390, %r1389, 2;
	mul.lo.s32 	%r1391, %r1390, 6;
	sub.s32 	%r1392, %r1388, %r1391;
	shl.b32 	%r1393, %r1392, 4;
	or.b32  	%r1394, %r199, %r1393;
	add.s32 	%r1395, %r205, %r1394;
	mul.wide.u32 	%rd135, %r1395, 4;
	add.s64 	%rd137, %rd43, %rd135;
	st.shared.u32 	[%rd137], %r1278;
	cvt.u64.u32 	%rd138, %r1394;
	cvt.u64.u32 	%rd139, %r203;
	cvt.u64.u32 	%rd140, %r202;
	cvt.u64.u32 	%rd141, %r201;
	cvt.u64.u32 	%rd142, %r200;
	add.s64 	%rd143, %rd141, %rd140;
	add.s64 	%rd144, %rd143, %rd139;
	add.s64 	%rd145, %rd144, %rd142;
	add.s64 	%rd146, %rd145, %rd138;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd148, %rd43, %rd147;
	st.shared.u32 	[%rd148+6304], %r1282;
	or.b32  	%r1396, %r206, %r1393;
	add.s32 	%r1397, %r205, %r1396;
	mul.wide.u32 	%rd149, %r1397, 4;
	add.s64 	%rd150, %rd43, %rd149;
	st.shared.u32 	[%rd150], %r1286;
	cvt.u64.u32 	%rd151, %r1396;
	add.s64 	%rd152, %rd145, %rd151;
	shl.b64 	%rd153, %rd152, 2;
	add.s64 	%rd154, %rd43, %rd153;
	st.shared.u32 	[%rd154+6304], %r1290;
	add.s32 	%r1398, %r1394, %r200;
	or.b32  	%r1399, %r1398, 8;
	add.s32 	%r1400, %r207, %r1399;
	mul.wide.u32 	%rd155, %r1400, 4;
	add.s64 	%rd156, %rd43, %rd155;
	st.shared.u32 	[%rd156], %r1294;
	cvt.u64.u32 	%rd157, %r1399;
	add.s64 	%rd158, %rd144, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd160, %rd43, %rd159;
	st.shared.u32 	[%rd160+6304], %r1298;
	cvt.u64.u32 	%rd161, %r204;
	add.s64 	%rd162, %rd161, %rd140;
	add.s64 	%rd163, %rd162, %rd139;
	add.s64 	%rd164, %rd163, %rd151;
	shl.b64 	%rd165, %rd164, 2;
	add.s64 	%rd166, %rd43, %rd165;
	st.shared.u32 	[%rd166+32], %r1302;
	st.shared.u32 	[%rd154+6336], %r1306;
	add.s32 	%r1401, %r1388, 3;
	mul.hi.u32 	%r1402, %r1401, -1431655765;
	shr.u32 	%r1403, %r1402, 2;
	mul.lo.s32 	%r1404, %r1403, 6;
	sub.s32 	%r1405, %r1401, %r1404;
	shl.b32 	%r1406, %r1405, 4;
	or.b32  	%r1407, %r199, %r1406;
	add.s32 	%r1408, %r205, %r1407;
	mul.wide.u32 	%rd167, %r1408, 4;
	add.s64 	%rd168, %rd43, %rd167;
	st.shared.u32 	[%rd168], %r1310;
	cvt.u64.u32 	%rd169, %r1407;
	add.s64 	%rd170, %rd145, %rd169;
	shl.b64 	%rd171, %rd170, 2;
	add.s64 	%rd172, %rd43, %rd171;
	st.shared.u32 	[%rd172+6304], %r1314;
	or.b32  	%r1409, %r206, %r1406;
	add.s32 	%r1410, %r205, %r1409;
	mul.wide.u32 	%rd173, %r1410, 4;
	add.s64 	%rd174, %rd43, %rd173;
	st.shared.u32 	[%rd174], %r1318;
	cvt.u64.u32 	%rd175, %r1409;
	add.s64 	%rd176, %rd145, %rd175;
	shl.b64 	%rd177, %rd176, 2;
	add.s64 	%rd178, %rd43, %rd177;
	st.shared.u32 	[%rd178+6304], %r1322;
	add.s32 	%r1411, %r1407, %r200;
	or.b32  	%r1412, %r1411, 8;
	add.s32 	%r1413, %r207, %r1412;
	mul.wide.u32 	%rd179, %r1413, 4;
	add.s64 	%rd180, %rd43, %rd179;
	st.shared.u32 	[%rd180], %r1326;
	cvt.u64.u32 	%rd181, %r1412;
	add.s64 	%rd182, %rd144, %rd181;
	shl.b64 	%rd183, %rd182, 2;
	add.s64 	%rd184, %rd43, %rd183;
	st.shared.u32 	[%rd184+6304], %r1330;
	add.s64 	%rd185, %rd163, %rd175;
	shl.b64 	%rd186, %rd185, 2;
	add.s64 	%rd187, %rd43, %rd186;
	st.shared.u32 	[%rd187+32], %r1334;
	st.shared.u32 	[%rd178+6336], %r1338;
	bar.sync 	0;
	mul.hi.s16 	%rs105, %rs3, 10923;
	shr.u16 	%rs106, %rs105, 15;
	add.s16 	%rs107, %rs105, %rs106;
	mul.lo.s16 	%rs108, %rs107, 6;
	sub.s16 	%rs109, %rs3, %rs108;
	mul.wide.s16 	%r1414, %rs109, 16;
	add.s32 	%r1415, %r208, %r1414;
	mul.wide.s32 	%rd188, %r1415, 4;
	add.s64 	%rd189, %rd43, %rd188;
	ld.shared.u32 	%r1346, [%rd189];
	add.s32 	%r1416, %r209, %r1414;
	mul.wide.s32 	%rd190, %r1416, 4;
	add.s64 	%rd191, %rd43, %rd190;
	ld.shared.u32 	%r1353, [%rd191];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1342, %r1343}, {%r393, %r396}, {%r1346}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1349, %r1350}, {%r393, %r396}, {%r1353}, {%r1355, %r1355};
	// end inline asm
	@%p254 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_192;
$L__BB0_194:                            // %pass6644
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1356, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1358, %r1356, %r1343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1361, %r431, %r1342, %r1358;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1365, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1367, %r1365, %r1350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1370, %r431, %r1349, %r1367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1374, %r434, %r1342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r431, %r1343, %r1374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1381, %r434, %r1349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1384, %r431, %r1350, %r1381;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1436, %r1439}, {%r477, %r480}, {%r1361, %r1377}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1443, %r1447}, {%r477, %r480}, {%r1370, %r1384}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1435, %r1436, %r1436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r1439, %r1439, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r1443, %r1443, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1446, %r1447, %r1447, %r1442;
	// end inline asm
	mov.u32 	%r1534, 335549440;
	// begin inline asm
	fma.rn.f16x2 %r1450, %r1534, %r1446, %r108;
	// end inline asm
	add.s32 	%r236, %r86, %r109;
	add.s32 	%r1537, %r236, 1;
	mul.hi.u32 	%r1538, %r1537, -1431655765;
	shr.u32 	%r1539, %r1538, 2;
	mul.lo.s32 	%r1540, %r1539, 6;
	sub.s32 	%r1541, %r1537, %r1540;
	shl.b32 	%r1542, %r1541, 4;
	add.s32 	%r1543, %r208, %r1542;
	mul.wide.u32 	%rd194, %r1543, 4;
	add.s64 	%rd196, %rd43, %rd194;
	ld.shared.u32 	%r1458, [%rd196];
	add.s32 	%r1544, %r209, %r1542;
	mul.wide.u32 	%rd197, %r1544, 4;
	add.s64 	%rd198, %rd43, %rd197;
	ld.shared.u32 	%r1465, [%rd198];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1475, %r1472}, {%r393, %r396}, {%r1458}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1484, %r1481}, {%r393, %r396}, {%r1465}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1468, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1470, %r1468, %r1472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r431, %r1475, %r1470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1477, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1479, %r1477, %r1481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1482, %r431, %r1484, %r1479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1486, %r434, %r1475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1489, %r431, %r1472, %r1486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1493, %r434, %r1484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1496, %r431, %r1481, %r1493;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1519, %r1522}, {%r477, %r480}, {%r1473, %r1489}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1526, %r1530}, {%r477, %r480}, {%r1482, %r1496}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1518, %r1519, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r1522, %r1522, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r1526, %r1526, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r1530, %r1530, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r1534, %r1529, %r1450;
	// end inline asm
	add.s32 	%r3060, %r106, 2;
	setp.eq.s32 	%p255, %r3060, 128;
	setp.lt.u32 	%p297, %r265, 8;
	@%p255 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_195;
$L__BB0_142:                            // %L15635
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_143;
$L__BB0_193:                            // %pass7073
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1545, %r107, 147456, %r210;
	cvt.u64.u32 	%rd199, %r1545;
	add.s64 	%rd200, %rd199, %rd6;
	mul.hi.s64 	%rd201, %rd200, 1024819115206086201;
	shr.u64 	%rd202, %rd201, 63;
	shr.s64 	%rd203, %rd201, 24;
	add.s64 	%rd204, %rd203, %rd202;
	setp.lt.s64 	%p257, %rd200, 0;
	mul.lo.s64 	%rd205, %rd204, 301989888;
	setp.ne.s64 	%p258, %rd205, %rd200;
	and.pred  	%p259, %p257, %p258;
	selp.s64 	%rd206, -1, 0, %p259;
	add.s64 	%rd207, %rd204, %rd206;
	mul.lo.s64 	%rd208, %rd207, -301989888;
	add.s64 	%rd209, %rd208, %rd200;
	shl.b64 	%rd210, %rd209, 2;
	add.s64 	%rd211, %rd4, %rd210;
	st.global.u32 	[%rd211], %r3062;
$L__BB0_143:                            // %L15849
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r3060, 0;
	mov.u32 	%r3062, %r3060;
$L__BB0_195:                            // %oksrem7177
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r1713, %r236, 2;
	mul.hi.u32 	%r1714, %r1713, -1431655765;
	shr.u32 	%r1715, %r1714, 2;
	mul.lo.s32 	%r1716, %r1715, 6;
	sub.s32 	%r1717, %r1713, %r1716;
	shl.b32 	%r1718, %r1717, 4;
	add.s32 	%r1719, %r208, %r1718;
	mul.wide.u32 	%rd212, %r1719, 4;
	add.s64 	%rd214, %rd43, %rd212;
	ld.shared.u32 	%r1551, [%rd214];
	add.s32 	%r1720, %r209, %r1718;
	mul.wide.u32 	%rd215, %r1720, 4;
	add.s64 	%rd216, %rd43, %rd215;
	ld.shared.u32 	%r1558, [%rd216];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1568, %r1565}, {%r393, %r396}, {%r1551}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1577, %r1574}, {%r393, %r396}, {%r1558}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1561, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1563, %r1561, %r1565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r431, %r1568, %r1563;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1570, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1572, %r1570, %r1574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r431, %r1577, %r1572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1579, %r434, %r1568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1582, %r431, %r1565, %r1579;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1586, %r434, %r1577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1589, %r431, %r1574, %r1586;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1612, %r1615}, {%r477, %r480}, {%r1566, %r1582}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1619, %r1623}, {%r477, %r480}, {%r1575, %r1589}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1611, %r1612, %r1612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r1615, %r1615, %r1611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r1619, %r1619, %r1614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r1623, %r1623, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r1534, %r1622, %r3062;
	// end inline asm
	add.s32 	%r1721, %r236, 3;
	mul.hi.u32 	%r1722, %r1721, -1431655765;
	shr.u32 	%r1723, %r1722, 2;
	mul.lo.s32 	%r1724, %r1723, 6;
	sub.s32 	%r1725, %r1721, %r1724;
	shl.b32 	%r1726, %r1725, 4;
	add.s32 	%r1727, %r208, %r1726;
	mul.wide.u32 	%rd217, %r1727, 4;
	add.s64 	%rd218, %rd43, %rd217;
	ld.shared.u32 	%r1634, [%rd218];
	add.s32 	%r1728, %r209, %r1726;
	mul.wide.u32 	%rd219, %r1728, 4;
	add.s64 	%rd220, %rd43, %rd219;
	ld.shared.u32 	%r1641, [%rd220];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1651, %r1648}, {%r393, %r396}, {%r1634}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1660, %r1657}, {%r393, %r396}, {%r1641}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1644, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1646, %r1644, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1649, %r431, %r1651, %r1646;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1653, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1655, %r1653, %r1657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r431, %r1660, %r1655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1662, %r434, %r1651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1665, %r431, %r1648, %r1662;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1669, %r434, %r1660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r431, %r1657, %r1669;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1695, %r1698}, {%r477, %r480}, {%r1649, %r1665}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1702, %r1706}, {%r477, %r480}, {%r1658, %r1672}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r1695, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r1698, %r1698, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r1702, %r1702, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r1706, %r1706, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r1534, %r1705, %r1626;
	// end inline asm
	add.s32 	%r3063, %r3060, 2;
	setp.eq.s32 	%p260, %r3063, 128;
	@%p260 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_196;
$L__BB0_144:                            // %L17595
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_145;
$L__BB0_201:                            // %pass7929
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1729, %r107, 147456, %r210;
	cvt.u64.u32 	%rd221, %r1729;
	add.s64 	%rd222, %rd221, %rd6;
	mul.hi.s64 	%rd223, %rd222, 1024819115206086201;
	shr.u64 	%rd224, %rd223, 63;
	shr.s64 	%rd225, %rd223, 24;
	add.s64 	%rd226, %rd225, %rd224;
	setp.lt.s64 	%p262, %rd222, 0;
	mul.lo.s64 	%rd227, %rd226, 301989888;
	setp.ne.s64 	%p263, %rd227, %rd222;
	and.pred  	%p264, %p262, %p263;
	selp.s64 	%rd228, -1, 0, %p264;
	add.s64 	%rd229, %rd226, %rd228;
	mul.lo.s64 	%rd230, %rd229, -301989888;
	add.s64 	%rd231, %rd230, %rd222;
	shl.b64 	%rd232, %rd231, 2;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3065;
$L__BB0_145:                            // %L17809
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r3063, 0;
	mov.u32 	%r3065, %r3063;
$L__BB0_196:                            // %oksrem8033
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r1897, %r236, 4;
	mul.hi.u32 	%r1898, %r1897, -1431655765;
	shr.u32 	%r1899, %r1898, 2;
	mul.lo.s32 	%r1900, %r1899, 6;
	sub.s32 	%r1901, %r1897, %r1900;
	shl.b32 	%r1902, %r1901, 4;
	add.s32 	%r1903, %r208, %r1902;
	mul.wide.u32 	%rd234, %r1903, 4;
	add.s64 	%rd236, %rd43, %rd234;
	ld.shared.u32 	%r1735, [%rd236];
	add.s32 	%r1904, %r209, %r1902;
	mul.wide.u32 	%rd237, %r1904, 4;
	add.s64 	%rd238, %rd43, %rd237;
	ld.shared.u32 	%r1742, [%rd238];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1752, %r1749}, {%r393, %r396}, {%r1735}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1761, %r1758}, {%r393, %r396}, {%r1742}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1745, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1747, %r1745, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r431, %r1752, %r1747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1754, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r1754, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r431, %r1761, %r1756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r434, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r431, %r1749, %r1763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r434, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r431, %r1758, %r1770;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1796, %r1799}, {%r477, %r480}, {%r1750, %r1766}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1803, %r1807}, {%r477, %r480}, {%r1759, %r1773}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1795, %r1796, %r1796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r1799, %r1799, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r1803, %r1803, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r1807, %r1807, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r1534, %r1806, %r3065;
	// end inline asm
	add.s32 	%r1905, %r236, 5;
	mul.hi.u32 	%r1906, %r1905, -1431655765;
	shr.u32 	%r1907, %r1906, 2;
	mul.lo.s32 	%r1908, %r1907, 6;
	sub.s32 	%r1909, %r1905, %r1908;
	shl.b32 	%r1910, %r1909, 4;
	add.s32 	%r1911, %r208, %r1910;
	mul.wide.u32 	%rd239, %r1911, 4;
	add.s64 	%rd240, %rd43, %rd239;
	ld.shared.u32 	%r1818, [%rd240];
	add.s32 	%r1912, %r209, %r1910;
	mul.wide.u32 	%rd241, %r1912, 4;
	add.s64 	%rd242, %rd43, %rd241;
	ld.shared.u32 	%r1825, [%rd242];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1835, %r1832}, {%r393, %r396}, {%r1818}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1844, %r1841}, {%r393, %r396}, {%r1825}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1828, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1830, %r1828, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1833, %r431, %r1835, %r1830;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1837, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1839, %r1837, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r431, %r1844, %r1839;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1846, %r434, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1849, %r431, %r1832, %r1846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1853, %r434, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r431, %r1841, %r1853;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1879, %r1882}, {%r477, %r480}, {%r1833, %r1849}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1886, %r1890}, {%r477, %r480}, {%r1842, %r1856}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1878, %r1879, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r1882, %r1882, %r1878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r1886, %r1886, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r1890, %r1890, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r108, %r1534, %r1889, %r1810;
	// end inline asm
	add.s32 	%r106, %r3063, 2;
	setp.eq.s32 	%p265, %r106, 128;
	@%p265 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_148;
$L__BB0_146:                            // %L19555
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_147;
$L__BB0_197:                            // %pass8785
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1913, %r107, 147456, %r210;
	cvt.u64.u32 	%rd243, %r1913;
	add.s64 	%rd244, %rd243, %rd6;
	mul.hi.s64 	%rd245, %rd244, 1024819115206086201;
	shr.u64 	%rd246, %rd245, 63;
	shr.s64 	%rd247, %rd245, 24;
	add.s64 	%rd248, %rd247, %rd246;
	setp.lt.s64 	%p267, %rd244, 0;
	mul.lo.s64 	%rd249, %rd248, 301989888;
	setp.ne.s64 	%p268, %rd249, %rd244;
	and.pred  	%p269, %p267, %p268;
	selp.s64 	%rd250, -1, 0, %p269;
	add.s64 	%rd251, %rd248, %rd250;
	mul.lo.s64 	%rd252, %rd251, -301989888;
	add.s64 	%rd253, %rd252, %rd244;
	shl.b64 	%rd254, %rd253, 2;
	add.s64 	%rd255, %rd4, %rd254;
	st.global.u32 	[%rd255], %r108;
	bra.uni 	$L__BB0_147;
$L__BB0_149:                            // %L19791.preheader
                                        //   in Loop: Header=BB0_188 Depth=1
	mov.u16 	%rs210, %rs1;
	mov.u32 	%r3051, %r1355;
	bra.uni 	$L__BB0_150;
$L__BB0_158:                            // %L30801
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r106, %r2799;
	mov.u32 	%r108, %r2799;
$L__BB0_159:                            // %L30802
                                        //   in Loop: Header=BB0_150 Depth=2
	bar.sync 	0;
	add.s32 	%r3051, %r3051, 6;
	add.s16 	%rs210, %rs210, 6;
	setp.ne.s32 	%p290, %r3051, 24;
	@%p290 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_160;
$L__BB0_150:                            // %L19791
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p271, %r3051, 0;
	selp.b32 	%r2610, %r90, 0, %p271;
	setp.eq.s32 	%p272, %r3051, 6;
	selp.b32 	%r2611, %r94, %r2610, %p272;
	setp.eq.s32 	%p273, %r3051, 12;
	selp.b32 	%r2612, %r98, %r2611, %p273;
	setp.eq.s32 	%p274, %r3051, 18;
	selp.b32 	%r2613, %r102, %r2612, %p274;
	selp.b32 	%r2614, %r91, 0, %p271;
	selp.b32 	%r2615, %r95, %r2614, %p272;
	selp.b32 	%r2616, %r99, %r2615, %p273;
	selp.b32 	%r2617, %r103, %r2616, %p274;
	selp.b32 	%r2618, %r92, 0, %p271;
	selp.b32 	%r2619, %r96, %r2618, %p272;
	selp.b32 	%r2620, %r100, %r2619, %p273;
	selp.b32 	%r2621, %r104, %r2620, %p274;
	selp.b32 	%r2622, %r93, 0, %p271;
	selp.b32 	%r2623, %r97, %r2622, %p272;
	selp.b32 	%r2624, %r101, %r2623, %p273;
	selp.b32 	%r2625, %r105, %r2624, %p274;
	// begin inline asm
	mov.b32 %r1943, {%rs94, %rs94};
	// end inline asm
	// begin inline asm
	mov.b32 %r1954, {%rs96, %rs96};
	// end inline asm
	shr.u32 	%r2626, %r2613, 8;
	xor.b32  	%r1953, %r2626, 8947848;
	// begin inline asm
	lop3.b32 %r1940, %r939, %r1953, %r1943, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1944, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1945, %r1943, %r1944;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1948, %r1940, %r1945;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1951, %r950, %r1953, %r1954, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1955, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1956, %r1954, %r1955;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1959, %r1951, %r1956;
	// end inline asm
	// begin inline asm
	mov.b32 %r1989, {%rs94, %rs94};
	// end inline asm
	// begin inline asm
	mov.b32 %r2000, {%rs96, %rs96};
	// end inline asm
	shr.u32 	%r2627, %r2617, 8;
	xor.b32  	%r1999, %r2627, 8947848;
	// begin inline asm
	lop3.b32 %r1986, %r939, %r1999, %r1989, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1990, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1991, %r1989, %r1990;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1994, %r1986, %r1991;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1997, %r950, %r1999, %r2000, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2001, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2002, %r2000, %r2001;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2005, %r1997, %r2002;
	// end inline asm
	// begin inline asm
	mov.b32 %r2035, {%rs94, %rs94};
	// end inline asm
	// begin inline asm
	mov.b32 %r2046, {%rs96, %rs96};
	// end inline asm
	shr.u32 	%r2628, %r2621, 8;
	xor.b32  	%r2045, %r2628, 8947848;
	// begin inline asm
	lop3.b32 %r2032, %r939, %r2045, %r2035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2036, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2037, %r2035, %r2036;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2040, %r2032, %r2037;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2043, %r950, %r2045, %r2046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2047, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2048, %r2046, %r2047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2051, %r2043, %r2048;
	// end inline asm
	// begin inline asm
	mov.b32 %r2081, {%rs94, %rs94};
	// end inline asm
	// begin inline asm
	mov.b32 %r2092, {%rs96, %rs96};
	// end inline asm
	shr.u32 	%r2629, %r2625, 8;
	xor.b32  	%r2091, %r2629, 8947848;
	// begin inline asm
	lop3.b32 %r2078, %r939, %r2091, %r2081, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2082, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2083, %r2081, %r2082;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2086, %r2078, %r2083;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2089, %r950, %r2091, %r2092, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2093, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2094, %r2092, %r2093;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2097, %r2089, %r2094;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1948;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2100, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1994;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2103, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r1959;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2106, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2005;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2109, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2040;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2112, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2086;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2115, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2051;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2118, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2097;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2121, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2187, %r2184}, {%r285, %r288}, {%r2100}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2196, %r2193}, {%r285, %r288}, {%r2103}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2205, %r2202}, {%r285, %r288}, {%r2106}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2214, %r2211}, {%r285, %r288}, {%r2109}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2223, %r2220}, {%r285, %r288}, {%r2112}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2232, %r2229}, {%r285, %r288}, {%r2115}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2241, %r2238}, {%r285, %r288}, {%r2118}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2250, %r2247}, {%r285, %r288}, {%r2121}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2180, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2182, %r2180, %r2184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2185, %r337, %r2187, %r2182;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2189, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2191, %r2189, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2194, %r337, %r2196, %r2191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2198, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2200, %r2198, %r2202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2203, %r337, %r2205, %r2200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2207, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r2207, %r2211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r337, %r2214, %r2209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2216, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2218, %r2216, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2221, %r337, %r2223, %r2218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2225, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2227, %r2225, %r2229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r337, %r2232, %r2227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2234, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2236, %r2234, %r2238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r337, %r2241, %r2236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2243, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r2243, %r2247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r337, %r2250, %r2245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2252, %r340, %r2187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2255, %r337, %r2184, %r2252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2259, %r340, %r2196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2262, %r337, %r2193, %r2259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2266, %r340, %r2205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2269, %r337, %r2202, %r2266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r340, %r2214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2276, %r337, %r2211, %r2273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r340, %r2223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2283, %r337, %r2220, %r2280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2287, %r340, %r2232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2290, %r337, %r2229, %r2287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2294, %r340, %r2241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2297, %r337, %r2238, %r2294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2301, %r340, %r2250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2304, %r337, %r2247, %r2301;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2381, %r2382}, {%r381, %r384}, {%r2185, %r2255}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2389, %r2390}, {%r381, %r384}, {%r2194, %r2262}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2397, %r2398}, {%r381, %r384}, {%r2203, %r2269}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2405, %r2406}, {%r381, %r384}, {%r2212, %r2276}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2413, %r2414}, {%r381, %r384}, {%r2221, %r2283}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2421, %r2422}, {%r381, %r384}, {%r2230, %r2290}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2429, %r2430}, {%r381, %r384}, {%r2239, %r2297}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2437, %r2438}, {%r381, %r384}, {%r2248, %r2304}, {%r1355, %r1355}, %r211, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2380, %r2381, %r2382, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2384, %r2381, %r2382, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2388, %r2389, %r2390, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2392, %r2389, %r2390, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2396, %r2397, %r2398, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2400, %r2397, %r2398, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2404, %r2405, %r2406, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2408, %r2405, %r2406, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2412, %r2413, %r2414, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2416, %r2413, %r2414, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2420, %r2421, %r2422, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2424, %r2421, %r2422, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2428, %r2429, %r2430, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2432, %r2429, %r2430, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2436, %r2437, %r2438, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2440, %r2437, %r2438, %r663;
	// end inline asm
	add.s16 	%rs158, %rs10, %rs210;
	add.s16 	%rs159, %rs158, -29;
	mul.hi.s16 	%rs160, %rs159, 10923;
	shr.u16 	%rs161, %rs160, 15;
	add.s16 	%rs162, %rs160, %rs161;
	mul.lo.s16 	%rs163, %rs162, 6;
	sub.s16 	%rs164, %rs159, %rs163;
	mul.wide.s16 	%r2630, %rs164, 16;
	or.b32  	%r2631, %r199, %r2630;
	add.s32 	%r2632, %r205, %r2631;
	mul.wide.s32 	%rd256, %r2632, 4;
	add.s64 	%rd258, %rd43, %rd256;
	st.shared.u32 	[%rd258], %r2380;
	cvt.s64.s32 	%rd259, %r2631;
	add.s64 	%rd267, %rd145, %rd259;
	shl.b64 	%rd268, %rd267, 2;
	add.s64 	%rd269, %rd43, %rd268;
	st.shared.u32 	[%rd269+6304], %r2384;
	or.b32  	%r2633, %r206, %r2630;
	add.s32 	%r2634, %r205, %r2633;
	mul.wide.s32 	%rd270, %r2634, 4;
	add.s64 	%rd271, %rd43, %rd270;
	st.shared.u32 	[%rd271], %r2388;
	cvt.s64.s32 	%rd272, %r2633;
	add.s64 	%rd273, %rd145, %rd272;
	shl.b64 	%rd274, %rd273, 2;
	add.s64 	%rd275, %rd43, %rd274;
	st.shared.u32 	[%rd275+6304], %r2392;
	add.s32 	%r2635, %r2631, %r200;
	or.b32  	%r2636, %r2635, 8;
	add.s32 	%r2637, %r207, %r2636;
	mul.wide.s32 	%rd276, %r2637, 4;
	add.s64 	%rd277, %rd43, %rd276;
	st.shared.u32 	[%rd277], %r2396;
	cvt.s64.s32 	%rd278, %r2636;
	add.s64 	%rd279, %rd144, %rd278;
	shl.b64 	%rd280, %rd279, 2;
	add.s64 	%rd281, %rd43, %rd280;
	st.shared.u32 	[%rd281+6304], %r2400;
	add.s64 	%rd285, %rd163, %rd272;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd287, %rd43, %rd286;
	st.shared.u32 	[%rd287+32], %r2404;
	st.shared.u32 	[%rd275+6336], %r2408;
	add.s16 	%rs165, %rs9, %rs210;
	add.s16 	%rs166, %rs165, -2;
	mul.hi.s16 	%rs167, %rs166, 10923;
	shr.u16 	%rs168, %rs167, 15;
	add.s16 	%rs169, %rs167, %rs168;
	mul.lo.s16 	%rs170, %rs169, 6;
	sub.s16 	%rs171, %rs166, %rs170;
	mul.wide.s16 	%r2638, %rs171, 16;
	or.b32  	%r2639, %r199, %r2638;
	add.s32 	%r2640, %r205, %r2639;
	mul.wide.s32 	%rd288, %r2640, 4;
	add.s64 	%rd289, %rd43, %rd288;
	st.shared.u32 	[%rd289], %r2412;
	cvt.s64.s32 	%rd290, %r2639;
	add.s64 	%rd291, %rd145, %rd290;
	shl.b64 	%rd292, %rd291, 2;
	add.s64 	%rd293, %rd43, %rd292;
	st.shared.u32 	[%rd293+6304], %r2416;
	or.b32  	%r2641, %r206, %r2638;
	add.s32 	%r2642, %r205, %r2641;
	mul.wide.s32 	%rd294, %r2642, 4;
	add.s64 	%rd295, %rd43, %rd294;
	st.shared.u32 	[%rd295], %r2420;
	cvt.s64.s32 	%rd296, %r2641;
	add.s64 	%rd297, %rd145, %rd296;
	shl.b64 	%rd298, %rd297, 2;
	add.s64 	%rd299, %rd43, %rd298;
	st.shared.u32 	[%rd299+6304], %r2424;
	add.s32 	%r2643, %r2639, %r200;
	or.b32  	%r2644, %r2643, 8;
	add.s32 	%r2645, %r207, %r2644;
	mul.wide.s32 	%rd300, %r2645, 4;
	add.s64 	%rd301, %rd43, %rd300;
	st.shared.u32 	[%rd301], %r2428;
	cvt.s64.s32 	%rd302, %r2644;
	add.s64 	%rd303, %rd144, %rd302;
	shl.b64 	%rd304, %rd303, 2;
	add.s64 	%rd305, %rd43, %rd304;
	st.shared.u32 	[%rd305+6304], %r2432;
	add.s64 	%rd306, %rd163, %rd296;
	shl.b64 	%rd307, %rd306, 2;
	add.s64 	%rd308, %rd43, %rd307;
	st.shared.u32 	[%rd308+32], %r2436;
	st.shared.u32 	[%rd299+6336], %r2440;
	bar.sync 	0;
	add.s16 	%rs172, %rs210, -5;
	mul.hi.s16 	%rs173, %rs172, 10923;
	shr.u16 	%rs174, %rs173, 15;
	add.s16 	%rs175, %rs173, %rs174;
	mul.lo.s16 	%rs176, %rs175, 6;
	sub.s16 	%rs177, %rs172, %rs176;
	mul.wide.s16 	%r2646, %rs177, 16;
	add.s32 	%r2647, %r208, %r2646;
	mul.wide.s32 	%rd309, %r2647, 4;
	add.s64 	%rd310, %rd43, %rd309;
	ld.shared.u32 	%r2448, [%rd310];
	add.s32 	%r2648, %r209, %r2646;
	mul.wide.s32 	%rd311, %r2648, 4;
	add.s64 	%rd312, %rd43, %rd311;
	ld.shared.u32 	%r2455, [%rd312];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2465, %r2462}, {%r393, %r396}, {%r2448}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2474, %r2471}, {%r393, %r396}, {%r2455}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2458, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2460, %r2458, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2463, %r431, %r2465, %r2460;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2467, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2469, %r2467, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2472, %r431, %r2474, %r2469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2476, %r434, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2479, %r431, %r2462, %r2476;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2483, %r434, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2486, %r431, %r2471, %r2483;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2509, %r2512}, {%r477, %r480}, {%r2463, %r2479}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2516, %r2520}, {%r477, %r480}, {%r2472, %r2486}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2508, %r2509, %r2509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r2512, %r2512, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2515, %r2516, %r2516, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r2520, %r2520, %r2515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2523, %r1534, %r2519, %r108;
	// end inline asm
	add.s16 	%rs178, %rs210, -4;
	mul.hi.s16 	%rs179, %rs178, 10923;
	shr.u16 	%rs180, %rs179, 15;
	add.s16 	%rs181, %rs179, %rs180;
	mul.lo.s16 	%rs182, %rs181, 6;
	sub.s16 	%rs183, %rs178, %rs182;
	mul.wide.s16 	%r2649, %rs183, 16;
	add.s32 	%r2650, %r208, %r2649;
	mul.wide.s32 	%rd313, %r2650, 4;
	add.s64 	%rd314, %rd43, %rd313;
	ld.shared.u32 	%r2531, [%rd314];
	add.s32 	%r2651, %r209, %r2649;
	mul.wide.s32 	%rd315, %r2651, 4;
	add.s64 	%rd316, %rd43, %rd315;
	ld.shared.u32 	%r2538, [%rd316];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2548, %r2545}, {%r393, %r396}, {%r2531}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2557, %r2554}, {%r393, %r396}, {%r2538}, {%r1355, %r1355};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2541, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2543, %r2541, %r2545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2546, %r431, %r2548, %r2543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2550, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2552, %r2550, %r2554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2555, %r431, %r2557, %r2552;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2559, %r434, %r2548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2562, %r431, %r2545, %r2559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2566, %r434, %r2557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2569, %r431, %r2554, %r2566;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2592, %r2595}, {%r477, %r480}, {%r2546, %r2562}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2599, %r2603}, {%r477, %r480}, {%r2555, %r2569}, {%r1355, %r1355}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2591, %r2592, %r2592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2594, %r2595, %r2595, %r2591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2598, %r2599, %r2599, %r2594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2602, %r2603, %r2603, %r2598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r1534, %r2602, %r2523;
	// end inline asm
	add.s32 	%r3066, %r106, 2;
	setp.ne.s32 	%p275, %r3066, 128;
	@%p275 bra 	$L__BB0_153;
// %bb.151:                             // %L26667
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_152;
$L__BB0_198:                            // %pass11970
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2652, %r107, 147456, %r210;
	cvt.u64.u32 	%rd317, %r2652;
	add.s64 	%rd318, %rd317, %rd6;
	mul.hi.s64 	%rd319, %rd318, 1024819115206086201;
	shr.u64 	%rd320, %rd319, 63;
	shr.s64 	%rd321, %rd319, 24;
	add.s64 	%rd322, %rd321, %rd320;
	setp.lt.s64 	%p277, %rd318, 0;
	mul.lo.s64 	%rd323, %rd322, 301989888;
	setp.ne.s64 	%p278, %rd323, %rd318;
	and.pred  	%p279, %p277, %p278;
	selp.s64 	%rd324, -1, 0, %p279;
	add.s64 	%rd325, %rd322, %rd324;
	mul.lo.s64 	%rd326, %rd325, -301989888;
	add.s64 	%rd327, %rd326, %rd318;
	shl.b64 	%rd328, %rd327, 2;
	add.s64 	%rd329, %rd4, %rd328;
	st.global.u32 	[%rd329], %r3068;
$L__BB0_152:                            // %L26881
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r3066, 0;
	mov.u32 	%r3068, %r3066;
$L__BB0_153:                            // %oksrem12074
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs184, %rs210, -3;
	mul.hi.s16 	%rs185, %rs184, 10923;
	shr.u16 	%rs186, %rs185, 15;
	add.s16 	%rs187, %rs185, %rs186;
	mul.lo.s16 	%rs188, %rs187, 6;
	sub.s16 	%rs189, %rs184, %rs188;
	mul.wide.s16 	%r2820, %rs189, 16;
	add.s32 	%r2821, %r208, %r2820;
	mul.wide.s32 	%rd330, %r2821, 4;
	add.s64 	%rd332, %rd43, %rd330;
	ld.shared.u32 	%r2658, [%rd332];
	add.s32 	%r2822, %r209, %r2820;
	mul.wide.s32 	%rd333, %r2822, 4;
	add.s64 	%rd334, %rd43, %rd333;
	ld.shared.u32 	%r2665, [%rd334];
	mov.u32 	%r2799, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2675, %r2672}, {%r393, %r396}, {%r2658}, {%r2799, %r2799};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2684, %r2681}, {%r393, %r396}, {%r2665}, {%r2799, %r2799};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2668, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r2668, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2673, %r431, %r2675, %r2670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2677, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r2677, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2682, %r431, %r2684, %r2679;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r434, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r431, %r2672, %r2686;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2693, %r434, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2696, %r431, %r2681, %r2693;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2719, %r2722}, {%r477, %r480}, {%r2673, %r2689}, {%r2799, %r2799}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2726, %r2730}, {%r477, %r480}, {%r2682, %r2696}, {%r2799, %r2799}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r2719, %r2719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r2722, %r2722, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r2726, %r2726, %r2721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r2730, %r2730, %r2725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r1534, %r2729, %r3068;
	// end inline asm
	add.s16 	%rs190, %rs210, -2;
	mul.hi.s16 	%rs191, %rs190, 10923;
	shr.u16 	%rs192, %rs191, 15;
	add.s16 	%rs193, %rs191, %rs192;
	mul.lo.s16 	%rs194, %rs193, 6;
	sub.s16 	%rs195, %rs190, %rs194;
	mul.wide.s16 	%r2823, %rs195, 16;
	add.s32 	%r2824, %r208, %r2823;
	mul.wide.s32 	%rd335, %r2824, 4;
	add.s64 	%rd336, %rd43, %rd335;
	ld.shared.u32 	%r2741, [%rd336];
	add.s32 	%r2825, %r209, %r2823;
	mul.wide.s32 	%rd337, %r2825, 4;
	add.s64 	%rd338, %rd43, %rd337;
	ld.shared.u32 	%r2748, [%rd338];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2758, %r2755}, {%r393, %r396}, {%r2741}, {%r2799, %r2799};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2767, %r2764}, {%r393, %r396}, {%r2748}, {%r2799, %r2799};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2751, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2753, %r2751, %r2755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r431, %r2758, %r2753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2760, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2762, %r2760, %r2764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2765, %r431, %r2767, %r2762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2769, %r434, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r431, %r2755, %r2769;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2776, %r434, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2779, %r431, %r2764, %r2776;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2802, %r2805}, {%r477, %r480}, {%r2756, %r2772}, {%r2799, %r2799}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2809, %r2813}, {%r477, %r480}, {%r2765, %r2779}, {%r2799, %r2799}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2801, %r2802, %r2802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r2805, %r2805, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r2809, %r2809, %r2804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2812, %r2813, %r2813, %r2808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3071, %r1534, %r2812, %r2733;
	// end inline asm
	add.s32 	%r3069, %r3066, 2;
	setp.eq.s32 	%p280, %r3069, 128;
	@%p280 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L28627
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_155;
$L__BB0_199:                            // %pass12826
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2826, %r107, 147456, %r210;
	cvt.u64.u32 	%rd339, %r2826;
	add.s64 	%rd340, %rd339, %rd6;
	mul.hi.s64 	%rd341, %rd340, 1024819115206086201;
	shr.u64 	%rd342, %rd341, 63;
	shr.s64 	%rd343, %rd341, 24;
	add.s64 	%rd344, %rd343, %rd342;
	setp.lt.s64 	%p282, %rd340, 0;
	mul.lo.s64 	%rd345, %rd344, 301989888;
	setp.ne.s64 	%p283, %rd345, %rd340;
	and.pred  	%p284, %p282, %p283;
	selp.s64 	%rd346, -1, 0, %p284;
	add.s64 	%rd347, %rd344, %rd346;
	mul.lo.s64 	%rd348, %rd347, -301989888;
	add.s64 	%rd349, %rd348, %rd340;
	shl.b64 	%rd350, %rd349, 2;
	add.s64 	%rd351, %rd4, %rd350;
	st.global.u32 	[%rd351], %r3071;
$L__BB0_155:                            // %L28841
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r3069, 0;
	mov.u32 	%r3071, %r3069;
$L__BB0_156:                            // %oksrem12930
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs196, %rs210, -1;
	mul.hi.s16 	%rs197, %rs196, 10923;
	shr.u16 	%rs198, %rs197, 15;
	add.s16 	%rs199, %rs197, %rs198;
	mul.lo.s16 	%rs200, %rs199, 6;
	sub.s16 	%rs201, %rs196, %rs200;
	mul.wide.s16 	%r2994, %rs201, 16;
	add.s32 	%r2995, %r208, %r2994;
	mul.wide.s32 	%rd352, %r2995, 4;
	add.s64 	%rd354, %rd43, %rd352;
	ld.shared.u32 	%r2832, [%rd354];
	add.s32 	%r2996, %r209, %r2994;
	mul.wide.s32 	%rd355, %r2996, 4;
	add.s64 	%rd356, %rd43, %rd355;
	ld.shared.u32 	%r2839, [%rd356];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2849, %r2846}, {%r393, %r396}, {%r2832}, {%r2799, %r2799};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2858, %r2855}, {%r393, %r396}, {%r2839}, {%r2799, %r2799};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2842, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2844, %r2842, %r2846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2847, %r431, %r2849, %r2844;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2851, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2853, %r2851, %r2855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2856, %r431, %r2858, %r2853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r434, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r431, %r2846, %r2860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2867, %r434, %r2858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r431, %r2855, %r2867;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2893, %r2896}, {%r477, %r480}, {%r2847, %r2863}, {%r2799, %r2799}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2900, %r2904}, {%r477, %r480}, {%r2856, %r2870}, {%r2799, %r2799}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2892, %r2893, %r2893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2895, %r2896, %r2896, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2899, %r2900, %r2900, %r2895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2903, %r2904, %r2904, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r1534, %r2903, %r3071;
	// end inline asm
	mul.hi.s16 	%rs202, %rs210, 10923;
	shr.u16 	%rs203, %rs202, 15;
	add.s16 	%rs204, %rs202, %rs203;
	mul.lo.s16 	%rs205, %rs204, 6;
	sub.s16 	%rs206, %rs210, %rs205;
	mul.wide.s16 	%r2997, %rs206, 16;
	add.s32 	%r2998, %r208, %r2997;
	mul.wide.s32 	%rd357, %r2998, 4;
	add.s64 	%rd358, %rd43, %rd357;
	ld.shared.u32 	%r2915, [%rd358];
	add.s32 	%r2999, %r209, %r2997;
	mul.wide.s32 	%rd359, %r2999, 4;
	add.s64 	%rd360, %rd43, %rd359;
	ld.shared.u32 	%r2922, [%rd360];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2932, %r2929}, {%r393, %r396}, {%r2915}, {%r2799, %r2799};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2941, %r2938}, {%r393, %r396}, {%r2922}, {%r2799, %r2799};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2925, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2927, %r2925, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r431, %r2932, %r2927;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2934, %r434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2936, %r2934, %r2938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2939, %r431, %r2941, %r2936;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r434, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r431, %r2929, %r2943;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2950, %r434, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r431, %r2938, %r2950;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2976, %r2979}, {%r477, %r480}, {%r2930, %r2946}, {%r2799, %r2799}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2983, %r2987}, {%r477, %r480}, {%r2939, %r2953}, {%r2799, %r2799}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2975, %r2976, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2978, %r2979, %r2979, %r2975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2982, %r2983, %r2983, %r2978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r2987, %r2987, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r108, %r1534, %r2986, %r2907;
	// end inline asm
	add.s32 	%r106, %r3069, 2;
	setp.eq.s32 	%p285, %r106, 128;
	@%p285 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_159;
$L__BB0_157:                            // %L30587
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass13682
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r3000, %r107, 147456, %r210;
	cvt.u64.u32 	%rd361, %r3000;
	add.s64 	%rd362, %rd361, %rd6;
	mul.hi.s64 	%rd363, %rd362, 1024819115206086201;
	shr.u64 	%rd364, %rd363, 63;
	shr.s64 	%rd365, %rd363, 24;
	add.s64 	%rd366, %rd365, %rd364;
	setp.lt.s64 	%p287, %rd362, 0;
	mul.lo.s64 	%rd367, %rd366, 301989888;
	setp.ne.s64 	%p288, %rd367, %rd362;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd368, -1, 0, %p289;
	add.s64 	%rd369, %rd366, %rd368;
	mul.lo.s64 	%rd370, %rd369, -301989888;
	add.s64 	%rd371, %rd370, %rd362;
	shl.b64 	%rd372, %rd371, 2;
	add.s64 	%rd373, %rd4, %rd372;
	st.global.u32 	[%rd373], %r108;
	bra.uni 	$L__BB0_158;
$L__BB0_161:                            // %L30833
	mov.u32 	%r3002, 0;
	st.global.u32 	[%rd5], %r3002;
	ret;
$L__BB0_141:                            // %post_box_union
	mov.u64 	%rd133, exception2651;
	cvta.global.u64 	%rd134, %rd133;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd134;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r259;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_192:                            // %post_box_union6639
	mov.u64 	%rd192, exception2651;
	cvta.global.u64 	%rd193, %rd192;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd193;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r259;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L159
	mov.u32 	%r3003, 2;
	st.global.u32 	[%rd5], %r3003;
	mov.u64 	%rd374, exception2611;
	cvta.global.u64 	%rd375, %rd374;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd375;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r259;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception12663;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r259;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
