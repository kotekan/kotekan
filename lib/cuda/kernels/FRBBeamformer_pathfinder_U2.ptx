// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1869[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1909[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<324>;
	.reg .b16 	%rs<195>;
	.reg .b32 	%r<3063>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<329>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r280, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r289, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r289, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r281, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mul.lo.s32 	%r4, %r3, 192;
	mov.u32 	%r290, %tid.x;
	add.s32 	%r291, %r2, %r4;
	or.b32  	%r292, %r291, %r290;
	mul.wide.u32 	%rd20, %r292, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r293, 1;
	st.global.u32 	[%rd6], %r293;
	setp.gt.u32 	%p5, %r281, 16383;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r282, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r282, %r281;
	setp.gt.s32 	%p7, %r282, 32767;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r283, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r282, %r281;
	mad.lo.s32 	%r294, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r295, %r294, %r294, 4;
	setp.gt.u32 	%p9, %r295, 89478484;
	setp.gt.u32 	%p10, %r283, 511;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r284, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r284, %r283;
	setp.lt.s32 	%p13, %r284, 1024;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass40
	sub.s32 	%r296, %r284, %r283;
	shr.s32 	%r297, %r6, 31;
	shr.u32 	%r298, %r297, 25;
	add.s32 	%r299, %r6, %r298;
	shr.s32 	%r300, %r299, 7;
	setp.eq.s32 	%p15, %r296, %r300;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L261
	ld.param.u32 	%r285, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r285, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L263
	ld.param.u32 	%r286, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r286, %r285;
	setp.gt.s32 	%p18, %r286, 256;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L273
	ld.param.u32 	%r287, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r286, %r285;
	and.b32  	%r301, %r7, 1;
	setp.eq.b32 	%p20, %r301, 1;
	setp.lt.s32 	%p21, %r287, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L279
	ld.param.u32 	%r288, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r288, %r287;
	setp.gt.s32 	%p24, %r288, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L289
	sub.s32 	%r302, %r288, %r287;
	and.b32  	%r303, %r302, 1;
	setp.eq.b32 	%p26, %r303, 1;
	not.pred 	%p27, %p26;
	setp.eq.s32 	%p28, %r302, %r7;
	and.pred  	%p29, %p27, %p28;
	@%p29 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_13;
$L__BB0_191:                            // %pass149
	and.b32  	%r149, %r290, 3;
	shr.u32 	%r150, %r290, 2;
	mul.lo.s32 	%r304, %r149, %r150;
	and.b32  	%r305, %r304, 7;
	cvt.rn.f32.s32 	%f205, %r305;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p30, %f788, 0f40000000;
	setp.gtu.f32 	%p323, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p30 bra 	$L__BB0_203;
// %bb.192:
	@%p323 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_193;
$L__BB0_199:
	mov.b32 	%r152, %f788;
	and.b32  	%r306, %r152, 8388607;
	or.b32  	%r3046, %r306, 1065353216;
	mov.b32 	%f783, %r3046;
	add.s32 	%r307, %r152, -1073741824;
	and.b32  	%r3047, %r307, -8388608;
	setp.eq.s32 	%p37, %r3047, 0;
	@%p37 bra 	$L__BB0_202;
// %bb.200:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_201:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r308, %r3047, 192937984;
	add.s32 	%r309, %r3046, %r308;
	mov.b32 	%f217, %r309;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3047, %r3047, %r308;
	mov.b32 	%r3046, %f783;
	setp.ne.s32 	%p38, %r3047, 0;
	setp.ne.s32 	%p39, %r3046, 0;
	and.pred  	%p40, %p38, %p39;
	@%p40 bra 	$L__BB0_201;
$L__BB0_202:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p41, %r152, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p41;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_203;
$L__BB0_193:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r151, %f172;
	setp.lt.u32 	%p32, %r151, 1073741824;
	@%p32 bra 	$L__BB0_198;
// %bb.194:
	setp.lt.u32 	%p33, %r151, -2147483647;
	@%p33 bra 	$L__BB0_196;
// %bb.195:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p36, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p36;
	bra.uni 	$L__BB0_198;
$L__BB0_196:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p34, %f172, 0f40800000;
	@%p34 bra 	$L__BB0_198;
// %bb.197:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p35, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p35;
$L__BB0_198:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_203:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p42, %f226, 0f7F800000;
	mov.b32 	%r310, %f169;
	and.b32  	%r159, %r310, -2147483648;
	@%p42 bra 	$L__BB0_205;
// %bb.204:
	mov.b32 	%r311, %f784;
	or.b32  	%r312, %r159, %r311;
	mov.b32 	%f784, %r312;
$L__BB0_205:                            // %__nv_fmodf.exit
	shl.b32 	%r162, %r290, 1;
	and.b32  	%r163, %r162, 2;
	mul.lo.s32 	%r327, %r163, %r150;
	cvt.rn.f32.s32 	%f259, %r327;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p50, %f734, 0f40000000;
	@%p50 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p51, %f734, 0f4B800000;
	@%p51 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r328, %r9, 8388607;
	or.b32  	%r2996, %r328, 1065353216;
	mov.b32 	%f733, %r2996;
	add.s32 	%r329, %r9, -1073741824;
	and.b32  	%r2997, %r329, -8388608;
	setp.eq.s32 	%p57, %r2997, 0;
	@%p57 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1988.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r330, %r2997, 192937984;
	add.s32 	%r331, %r2996, %r330;
	mov.b32 	%f271, %r331;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2997, %r2997, %r330;
	mov.b32 	%r2996, %f733;
	setp.ne.s32 	%p58, %r2997, 0;
	setp.ne.s32 	%p59, %r2996, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1990
	setp.gt.u32 	%p61, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i1967
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p52, %r8, 1073741824;
	@%p52 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p53, %r8, -2147483647;
	@%p53 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p56, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p56;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p54, %f2, 0f40800000;
	@%p54 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1971
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p55, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p55;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1974
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1993
	or.b32  	%r164, %r163, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p62, %f280, 0f7F800000;
	@%p62 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r332, %f186;
	and.b32  	%r333, %r332, -2147483648;
	mov.b32 	%r334, %f734;
	or.b32  	%r335, %r333, %r334;
	mov.b32 	%f734, %r335;
$L__BB0_27:                             // %__nv_fmodf.exit1994
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p70, %r164, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p70 bra 	$L__BB0_43;
// %bb.28:                              // %L531
	mul.lo.s32 	%r344, %r164, %r150;
	mul.hi.u32 	%r345, %r344, -1431655765;
	shr.u32 	%r346, %r345, 4;
	mul.lo.s32 	%r347, %r346, 24;
	sub.s32 	%r348, %r344, %r347;
	cvt.rn.f32.s32 	%f311, %r348;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p71, %f738, 0f40000000;
	@%p71 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p72, %f738, 0f4B800000;
	@%p72 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r349, %r17, 8388607;
	or.b32  	%r2998, %r349, 1065353216;
	mov.b32 	%f737, %r2998;
	add.s32 	%r350, %r17, -1073741824;
	and.b32  	%r2999, %r350, -8388608;
	setp.eq.s32 	%p78, %r2999, 0;
	@%p78 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2019.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r351, %r2999, 192937984;
	add.s32 	%r352, %r2998, %r351;
	mov.b32 	%f323, %r352;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2999, %r2999, %r351;
	mov.b32 	%r2998, %f737;
	setp.ne.s32 	%p79, %r2999, 0;
	setp.ne.s32 	%p80, %r2998, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2021
	setp.gt.u32 	%p82, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i1998
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p73, %r16, 1073741824;
	@%p73 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p74, %r16, -2147483647;
	@%p74 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p77, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p77;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p75, %f21, 0f40800000;
	@%p75 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2002
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p76, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p76;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2005
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2024
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p83, %f332, 0f7F800000;
	@%p83 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r353, %f18;
	and.b32  	%r354, %r353, -2147483648;
	mov.b32 	%r355, %f738;
	or.b32  	%r356, %r354, %r355;
	mov.b32 	%f738, %r356;
$L__BB0_42:                             // %__nv_fmodf.exit2025
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r357, %f333;
	and.b32  	%r358, %r357, -2147483648;
	or.b32  	%r359, %r358, 1056964608;
	mov.b32 	%f334, %r359;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p84, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p84;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p85, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p85;
	cvt.rzi.s32.f32 	%r360, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r361, %r360, 1;
	setp.eq.b32 	%p86, %r361, 1;
	selp.f32 	%f352, %f350, %f351, %p86;
	selp.f32 	%f353, %f351, %f350, %p86;
	and.b32  	%r362, %r360, 2;
	setp.eq.s32 	%p87, %r362, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p87;
	add.s32 	%r363, %r360, 1;
	and.b32  	%r364, %r363, 2;
	setp.eq.s32 	%p88, %r364, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p88;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p89, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p89;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p90, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p90;
$L__BB0_43:                             // %L565
	and.b32  	%r26, %r150, 3;
	setp.eq.s32 	%p91, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p91 bra 	$L__BB0_59;
// %bb.44:                              // %L603
	mul.lo.s32 	%r371, %r163, %r26;
	cvt.u16.u32 	%rs9, %r371;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p92, %f744, 0f40000000;
	@%p92 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p93, %f744, 0f4B800000;
	@%p93 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r372, %r28, 8388607;
	or.b32  	%r3000, %r372, 1065353216;
	mov.b32 	%f743, %r3000;
	add.s32 	%r373, %r28, -1073741824;
	and.b32  	%r3001, %r373, -8388608;
	setp.eq.s32 	%p99, %r3001, 0;
	@%p99 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2050.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r374, %r3001, 192937984;
	add.s32 	%r375, %r3000, %r374;
	mov.b32 	%f376, %r375;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3001, %r3001, %r374;
	mov.b32 	%r3000, %f743;
	setp.ne.s32 	%p100, %r3001, 0;
	setp.ne.s32 	%p101, %r3000, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2052
	setp.gt.u32 	%p103, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2029
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p94, %r27, 1073741824;
	@%p94 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p95, %r27, -2147483647;
	@%p95 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p98, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p98;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p96, %f42, 0f40800000;
	@%p96 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2033
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p97, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p97;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2036
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2055
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p104, %f385, 0f7F800000;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r376, %f39;
	and.b32  	%r377, %r376, -2147483648;
	mov.b32 	%r378, %f744;
	or.b32  	%r379, %r377, %r378;
	mov.b32 	%f744, %r379;
$L__BB0_58:                             // %__nv_fmodf.exit2056
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r380, %f386;
	and.b32  	%r381, %r380, -2147483648;
	or.b32  	%r382, %r381, 1056964608;
	mov.b32 	%f387, %r382;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p105, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p105;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p106, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p106;
	cvt.rzi.s32.f32 	%r383, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r384, %r383, 1;
	setp.eq.b32 	%p107, %r384, 1;
	selp.f32 	%f405, %f403, %f404, %p107;
	selp.f32 	%f406, %f404, %f403, %p107;
	and.b32  	%r385, %r383, 2;
	setp.eq.s32 	%p108, %r385, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p108;
	add.s32 	%r386, %r383, 1;
	and.b32  	%r387, %r386, 2;
	setp.eq.s32 	%p109, %r387, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p109;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p110, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p110;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p111, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p111;
$L__BB0_59:                             // %L637
	or.pred  	%p114, %p70, %p91;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p114 bra 	$L__BB0_75;
// %bb.60:                              // %L645
	mul.lo.s32 	%r388, %r164, %r26;
	mul.hi.u32 	%r389, %r388, -1431655765;
	shr.u32 	%r390, %r389, 1;
	mul.lo.s32 	%r391, %r390, 3;
	sub.s32 	%r392, %r388, %r391;
	cvt.rn.f32.s32 	%f417, %r392;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p115, %f750, 0f40000000;
	@%p115 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p116, %f750, 0f4B800000;
	@%p116 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r393, %r36, 8388607;
	or.b32  	%r3002, %r393, 1065353216;
	mov.b32 	%f749, %r3002;
	add.s32 	%r394, %r36, -1073741824;
	and.b32  	%r3003, %r394, -8388608;
	setp.eq.s32 	%p122, %r3003, 0;
	@%p122 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2081.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r395, %r3003, 192937984;
	add.s32 	%r396, %r3002, %r395;
	mov.b32 	%f429, %r396;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3003, %r3003, %r395;
	mov.b32 	%r3002, %f749;
	setp.ne.s32 	%p123, %r3003, 0;
	setp.ne.s32 	%p124, %r3002, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2083
	setp.gt.u32 	%p126, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2060
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p117, %r35, 1073741824;
	@%p117 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p118, %r35, -2147483647;
	@%p118 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p121, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p121;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p119, %f63, 0f40800000;
	@%p119 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2064
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p120, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p120;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2067
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2086
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p127, %f438, 0f7F800000;
	@%p127 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r397, %f60;
	and.b32  	%r398, %r397, -2147483648;
	mov.b32 	%r399, %f750;
	or.b32  	%r400, %r398, %r399;
	mov.b32 	%f750, %r400;
$L__BB0_74:                             // %__nv_fmodf.exit2087
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r401, %f439;
	and.b32  	%r402, %r401, -2147483648;
	or.b32  	%r403, %r402, 1056964608;
	mov.b32 	%f440, %r403;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p128, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p128;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p129, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p129;
	cvt.rzi.s32.f32 	%r404, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r405, %r404, 1;
	setp.eq.b32 	%p130, %r405, 1;
	selp.f32 	%f458, %f456, %f457, %p130;
	selp.f32 	%f459, %f457, %f456, %p130;
	and.b32  	%r406, %r404, 2;
	setp.eq.s32 	%p131, %r406, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p131;
	add.s32 	%r407, %r404, 1;
	and.b32  	%r408, %r407, 2;
	setp.eq.s32 	%p132, %r408, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p132;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p133, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p133;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p134, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p134;
$L__BB0_75:                             // %L679
	and.b32  	%r43, %r290, 2;
	setp.eq.s32 	%p135, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p135 bra 	$L__BB0_77;
// %bb.76:                              // %L688
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L690
	@%p30 bra 	$L__BB0_213;
// %bb.78:
	@%p323 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_79;
$L__BB0_209:
	mov.b32 	%r166, %f788;
	and.b32  	%r415, %r166, 8388607;
	or.b32  	%r3048, %r415, 1065353216;
	mov.b32 	%f787, %r3048;
	add.s32 	%r416, %r166, -1073741824;
	and.b32  	%r3049, %r416, -8388608;
	setp.eq.s32 	%p143, %r3049, 0;
	@%p143 bra 	$L__BB0_212;
// %bb.210:                             // %__nv_fmaf_rn.exit4.i.i.i2112.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_211:                            // %__nv_fmaf_rn.exit4.i.i.i2112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r417, %r3049, 192937984;
	add.s32 	%r418, %r3048, %r417;
	mov.b32 	%f479, %r418;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3049, %r3049, %r417;
	mov.b32 	%r3048, %f787;
	setp.ne.s32 	%p144, %r3049, 0;
	setp.ne.s32 	%p145, %r3048, 0;
	and.pred  	%p146, %p144, %p145;
	@%p146 bra 	$L__BB0_211;
$L__BB0_212:                            // %__internal_fmodf_slowpath_mod.exit.i.i2114
	setp.gt.u32 	%p147, %r166, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p147;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_213;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2091
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r165, %f189;
	setp.lt.u32 	%p138, %r165, 1073741824;
	@%p138 bra 	$L__BB0_208;
// %bb.80:
	setp.lt.u32 	%p139, %r165, -2147483647;
	@%p139 bra 	$L__BB0_206;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p142, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p142;
	bra.uni 	$L__BB0_208;
$L__BB0_206:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p140, %f189, 0f40800000;
	@%p140 bra 	$L__BB0_208;
// %bb.207:                             // %__nv_fmaf_rn.exit.i.i.i2095
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p141, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p141;
$L__BB0_208:                            // %__internal_fmodf_fastpath_quot.exit.i.i2098
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_213:                            // %__internal_fmodf_kernel.exit.i2117
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p148, %f488, 0f7F800000;
	@%p148 bra 	$L__BB0_215;
// %bb.214:
	mov.b32 	%r419, %f788;
	or.b32  	%r420, %r159, %r419;
	mov.b32 	%f788, %r420;
$L__BB0_215:                            // %__nv_fmodf.exit2118
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p156, %f760, 0f40000000;
	@%p156 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p157, %f760, 0f4B800000;
	@%p157 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r435, %r47, 8388607;
	or.b32  	%r3004, %r435, 1065353216;
	mov.b32 	%f759, %r3004;
	add.s32 	%r436, %r47, -1073741824;
	and.b32  	%r3005, %r436, -8388608;
	setp.eq.s32 	%p163, %r3005, 0;
	@%p163 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2143.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r437, %r3005, 192937984;
	add.s32 	%r438, %r3004, %r437;
	mov.b32 	%f532, %r438;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3005, %r3005, %r437;
	mov.b32 	%r3004, %f759;
	setp.ne.s32 	%p164, %r3005, 0;
	setp.ne.s32 	%p165, %r3004, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2145
	setp.gt.u32 	%p167, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2122
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p158, %r46, 1073741824;
	@%p158 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p159, %r46, -2147483647;
	@%p159 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p162;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2126
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p161;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2129
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2148
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p168, %f541, 0f7F800000;
	@%p168 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r439, %f203;
	and.b32  	%r440, %r439, -2147483648;
	mov.b32 	%r441, %f760;
	or.b32  	%r442, %r440, %r441;
	mov.b32 	%f760, %r442;
$L__BB0_95:                             // %__nv_fmodf.exit2149
	cvt.rn.f32.s32 	%f572, %r150;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p176, %f764, 0f40000000;
	@%p176 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p177, %f764, 0f4B800000;
	@%p177 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r451, %r55, 8388607;
	or.b32  	%r3006, %r451, 1065353216;
	mov.b32 	%f763, %r3006;
	add.s32 	%r452, %r55, -1073741824;
	and.b32  	%r3007, %r452, -8388608;
	setp.eq.s32 	%p183, %r3007, 0;
	@%p183 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2174.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r453, %r3007, 192937984;
	add.s32 	%r454, %r3006, %r453;
	mov.b32 	%f584, %r454;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3007, %r3007, %r453;
	mov.b32 	%r3006, %f763;
	setp.ne.s32 	%p184, %r3007, 0;
	setp.ne.s32 	%p185, %r3006, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2176
	setp.gt.u32 	%p187, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2153
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p178, %r54, 1073741824;
	@%p178 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p179, %r54, -2147483647;
	@%p179 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p182, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p182;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p180, %f107, 0f40800000;
	@%p180 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2157
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p181, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p181;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2160
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2179
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p188, %f593, 0f7F800000;
	@%p188 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r455, %f104;
	and.b32  	%r456, %r455, -2147483648;
	mov.b32 	%r457, %f764;
	or.b32  	%r458, %r456, %r457;
	mov.b32 	%f764, %r458;
$L__BB0_109:                            // %__nv_fmodf.exit2180
	and.b32  	%r65, %r290, 1;
	shr.u32 	%r66, %r290, 4;
	setp.ne.s32 	%p196, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p196 bra 	$L__BB0_125;
// %bb.110:                             // %L895
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p197, %f768, 0f40000000;
	@%p197 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p198, %f768, 0f4B800000;
	@%p198 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r473, %r68, 8388607;
	or.b32  	%r3008, %r473, 1065353216;
	mov.b32 	%f767, %r3008;
	add.s32 	%r474, %r68, -1073741824;
	and.b32  	%r3009, %r474, -8388608;
	setp.eq.s32 	%p204, %r3009, 0;
	@%p204 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2205.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r475, %r3009, 192937984;
	add.s32 	%r476, %r3008, %r475;
	mov.b32 	%f638, %r476;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3009, %r3009, %r475;
	mov.b32 	%r3008, %f767;
	setp.ne.s32 	%p205, %r3009, 0;
	setp.ne.s32 	%p206, %r3008, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2207
	setp.gt.u32 	%p208, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2184
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p199, %r67, 1073741824;
	@%p199 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p200, %r67, -2147483647;
	@%p200 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p203, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p203;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p201, %f124, 0f40800000;
	@%p201 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2188
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p202, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p202;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2191
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2210
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p209, %f647, 0f7F800000;
	@%p209 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r477, %f121;
	and.b32  	%r478, %r477, -2147483648;
	mov.b32 	%r479, %f768;
	or.b32  	%r480, %r478, %r479;
	mov.b32 	%f768, %r480;
$L__BB0_124:                            // %__nv_fmodf.exit2211
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r481, %f648;
	and.b32  	%r482, %r481, -2147483648;
	or.b32  	%r483, %r482, 1056964608;
	mov.b32 	%f649, %r483;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p210, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p210;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p211, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p211;
	cvt.rzi.s32.f32 	%r484, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r485, %r484, 1;
	setp.eq.b32 	%p212, %r485, 1;
	selp.f32 	%f667, %f665, %f666, %p212;
	selp.f32 	%f668, %f666, %f665, %p212;
	and.b32  	%r486, %r484, 2;
	setp.eq.s32 	%p213, %r486, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p213;
	add.s32 	%r487, %r484, 1;
	and.b32  	%r488, %r487, 2;
	setp.eq.s32 	%p214, %r488, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p214;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p215, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p215;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p216, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p216;
$L__BB0_125:                            // %L934
	and.b32  	%r64, %r150, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p196 bra 	$L__BB0_141;
// %bb.126:                             // %L937
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p218, %f774, 0f40000000;
	@%p218 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p219, %f774, 0f4B800000;
	@%p219 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r489, %r76, 8388607;
	or.b32  	%r3010, %r489, 1065353216;
	mov.b32 	%f773, %r3010;
	add.s32 	%r490, %r76, -1073741824;
	and.b32  	%r3011, %r490, -8388608;
	setp.eq.s32 	%p225, %r3011, 0;
	@%p225 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2236.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r491, %r3011, 192937984;
	add.s32 	%r492, %r3010, %r491;
	mov.b32 	%f691, %r492;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3011, %r3011, %r491;
	mov.b32 	%r3010, %f773;
	setp.ne.s32 	%p226, %r3011, 0;
	setp.ne.s32 	%p227, %r3010, 0;
	and.pred  	%p228, %p226, %p227;
	@%p228 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2238
	setp.gt.u32 	%p229, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p229;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2215
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p220, %r75, 1073741824;
	@%p220 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p221, %r75, -2147483647;
	@%p221 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p224, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p224;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p222, %f145, 0f40800000;
	@%p222 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2219
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p223, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p223;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2222
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2241
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p230, %f700, 0f7F800000;
	@%p230 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r493, %f142;
	and.b32  	%r494, %r493, -2147483648;
	mov.b32 	%r495, %f774;
	or.b32  	%r496, %r494, %r495;
	mov.b32 	%f774, %r496;
$L__BB0_140:                            // %__nv_fmodf.exit2242
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r497, %f701;
	and.b32  	%r498, %r497, -2147483648;
	or.b32  	%r499, %r498, 1056964608;
	mov.b32 	%f702, %r499;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p231, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p231;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p232, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p232;
	cvt.rzi.s32.f32 	%r500, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r501, %r500, 1;
	setp.eq.b32 	%p233, %r501, 1;
	selp.f32 	%f720, %f718, %f719, %p233;
	selp.f32 	%f721, %f719, %f718, %p233;
	and.b32  	%r502, %r500, 2;
	setp.eq.s32 	%p234, %r502, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p234;
	add.s32 	%r503, %r500, 1;
	and.b32  	%r504, %r503, 2;
	setp.eq.s32 	%p235, %r504, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p235;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p236, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p236;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p237, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p237;
$L__BB0_141:                            // %L971
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p135 bra 	$L__BB0_143;
// %bb.142:                             // %L980
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L982
	setp.gt.u32 	%p239, %r290, 15;
	mov.u32 	%r175, 999999999;
	@%p239 bra 	$L__BB0_217;
// %bb.144:                             // %L1012
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r512, %r290, 6, %r1;
	cvt.u16.u32 	%rs15, %r512;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r513, %rs20;
	and.b32  	%r514, %r513, 255;
	mul.wide.u32 	%rd21, %r514, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r515, [%rd22];
	shl.b32 	%r516, %r515, 16;
	cvt.s32.s16 	%r85, %r515;
	shr.s32 	%r86, %r515, 16;
	or.b32  	%r517, %r516, 65535;
	setp.lt.u32 	%p240, %r517, 589823;
	setp.lt.u32 	%p241, %r515, 786432;
	and.pred  	%p242, %p240, %p241;
	@%p242 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_145;
$L__BB0_216:                            // %L1256
	mul.lo.s32 	%r521, %r86, 290;
	mad.lo.s32 	%r175, %r85, 33, %r521;
$L__BB0_217:                            // %pass532
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r319, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r320, %r319, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r427, %f489;
	or.b32  	%r321, %r320, 1056964608;
	mov.b32 	%r336, %f282;
	and.b32  	%r428, %r427, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r321;
	and.b32  	%r337, %r336, -2147483648;
	or.b32  	%r429, %r428, 1056964608;
	mov.b32 	%r443, %f542;
	mov.b32 	%r465, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r338, %r337, 1056964608;
	mov.b32 	%f490, %r429;
	and.b32  	%r444, %r443, -2147483648;
	and.b32  	%r466, %r465, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p43, %f231, 0f4B000000;
	mov.b32 	%f283, %r338;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r445, %r444, 1056964608;
	or.b32  	%r467, %r466, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p43;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p44, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p149, %f493, 0f4B000000;
	mov.b32 	%f543, %r445;
	mov.b32 	%f596, %r467;
	selp.f32 	%f234, %f233, %f232, %p44;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p63, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p149;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p150, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p63;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p64, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p150;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p169, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p189, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p64;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p169;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p170, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p189;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p190, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p170;
	selp.f32 	%f602, %f601, %f600, %p190;
	cvt.rzi.s32.f32 	%r322, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r323, %r322, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r430, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p45, %r323, 1;
	cvt.rzi.s32.f32 	%r339, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r431, %r430, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p45;
	and.b32  	%r324, %r322, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r340, %r339, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p151, %r431, 1;
	cvt.rzi.s32.f32 	%r446, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r468, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p46, %r324, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r325, %r322, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p65, %r340, 1;
	selp.f32 	%f508, %f506, %f507, %p151;
	and.b32  	%r432, %r430, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r447, %r446, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r469, %r468, 1;
	selp.f32 	%f247, %f245, %f244, %p45;
	selp.f32 	%f249, %f246, %f248, %p46;
	and.b32  	%r326, %r325, 2;
	setp.eq.f32 	%p48, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p65;
	and.b32  	%r341, %r339, 2;
	setp.eq.s32 	%p152, %r432, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r433, %r430, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p171, %r447, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p191, %r469, 1;
	setp.eq.s32 	%p47, %r326, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p48;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p66, %r341, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r342, %r339, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p151;
	selp.f32 	%f511, %f508, %f510, %p152;
	and.b32  	%r434, %r433, 2;
	setp.eq.f32 	%p154, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p171;
	and.b32  	%r448, %r446, 2;
	selp.f32 	%f614, %f612, %f613, %p191;
	and.b32  	%r470, %r468, 2;
	selp.f32 	%f252, %f247, %f251, %p47;
	setp.gt.f32 	%p49, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p65;
	selp.f32 	%f304, %f301, %f303, %p66;
	and.b32  	%r343, %r342, 2;
	setp.eq.f32 	%p68, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p153, %r434, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p154;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p172, %r448, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r449, %r446, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p192, %r470, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r471, %r468, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p49;
	setp.eq.s32 	%p67, %r343, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p68;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p153;
	setp.gt.f32 	%p155, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p171;
	selp.f32 	%f564, %f561, %f563, %p172;
	and.b32  	%r450, %r449, 2;
	setp.eq.f32 	%p174, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p191;
	selp.f32 	%f617, %f614, %f616, %p192;
	and.b32  	%r472, %r471, 2;
	setp.eq.f32 	%p194, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r315, %f258;
	mov.b32 	%r318, %f255;
	selp.f32 	%f306, %f302, %f305, %p67;
	setp.gt.f32 	%p69, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p155;
	setp.eq.s32 	%p173, %r450, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p174;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p193, %r472, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p194;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r314, %r318, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p69;
	mov.b32 	%r423, %f520;
	mov.b32 	%r426, %f517;
	selp.f32 	%f567, %f562, %f566, %p173;
	setp.gt.f32 	%p175, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p193;
	setp.gt.f32 	%p195, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r313, %r315, %r314;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r316, %r318, %r315;
	// end inline asm
	mov.b32 	%r366, %f17;
	mov.b32 	%r367, %f37;
	mov.b32 	%r369, %f16;
	mov.b32 	%r370, %f38;
	mov.b32 	%r410, %f83;
	mov.b32 	%r411, %f85;
	mov.b32 	%r413, %f755;
	mov.b32 	%r414, %f757;
	xor.b32  	%r422, %r426, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p175;
	selp.f32 	%f625, %f624, %f619, %p195;
	// begin inline asm
	cvt.rn.f16x2.f32 %r365, %r367, %r366;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r368, %r370, %r369;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r409, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r412, %r414, %r413;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r421, %r423, %r422;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r424, %r426, %r423;
	// end inline asm
	mov.b32 	%r461, %f625;
	mov.b32 	%r460, %f103;
	mov.b32 	%r464, %f622;
	mov.b32 	%r463, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r459, %r461, %r460;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r462, %r464, %r463;
	// end inline asm
	mov.b32 	%r506, %f165;
	mov.b32 	%r507, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r505, %r507, %r506;
	// end inline asm
	mov.b32 	%r509, %f779;
	mov.b32 	%r510, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r508, %r510, %r509;
	// end inline asm
	shr.u32 	%r176, %r290, 3;
	bfe.u32 	%r523, %r290, 3, 1;
	shl.b32 	%r524, %r1, 1;
	and.b32  	%r525, %r524, 2;
	or.b32  	%r526, %r523, %r525;
	mul.lo.s32 	%r527, %r149, 24;
	and.b32  	%r528, %r176, 2;
	or.b32  	%r177, %r64, %r528;
	cvt.u16.u32 	%rs23, %r177;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r529, %rs27;
	and.b32  	%r530, %r529, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r531, %rs28, 8;
	add.s32 	%r532, %r527, %r4;
	or.b32  	%r533, %r532, %r526;
	add.s32 	%r534, %r533, %r531;
	mul.wide.u32 	%rd28, %r534, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r178, [%rd29];
	or.b32  	%r535, %r526, 4;
	cvt.u64.u32 	%rd30, %r531;
	cvt.u64.u32 	%rd31, %r532;
	cvt.u64.u32 	%rd32, %r526;
	add.s64 	%rd33, %rd31, %rd32;
	add.s64 	%rd34, %rd33, %rd30;
	shl.b64 	%rd35, %rd34, 2;
	add.s64 	%rd36, %rd2, %rd35;
	ld.global.u32 	%r179, [%rd36+16];
	cvt.u64.u32 	%rd37, %r527;
	cvt.u64.u32 	%rd38, %r4;
	add.s64 	%rd39, %rd38, %rd37;
	add.s64 	%rd40, %rd39, %rd32;
	add.s64 	%rd41, %rd40, %rd30;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.u32 	%r180, [%rd43+384];
	cvt.u64.u32 	%rd44, %r535;
	add.s64 	%rd45, %rd39, %rd44;
	add.s64 	%rd46, %rd45, %rd30;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.u32 	%r181, [%rd48+384];
	shl.b32 	%r536, %r281, 13;
	shl.b32 	%r537, %r285, 5;
	add.s32 	%r182, %r537, %r536;
	shl.b32 	%r538, %r3, 5;
	shl.b32 	%r539, %r290, 2;
	shl.b32 	%r183, %r1, 2;
	and.b32  	%r540, %r539, 28;
	or.b32  	%r184, %r540, %r538;
	and.b32  	%r185, %r290, 4;
	and.b32  	%r541, %r162, 8;
	shl.b32 	%r542, %r290, 4;
	or.b32  	%r543, %r541, %r542;
	bfe.u32 	%r544, %r543, 3, 3;
	mul.lo.s32 	%r186, %r544, 260;
	cvt.u16.u32 	%rs29, %r290;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r545, %rs34;
	and.b32  	%r187, %r545, 255;
	add.s32 	%r546, %r1, 6;
	add.s32 	%r547, %r2, 192;
	and.b32  	%r548, %r547, 224;
	shr.u32 	%r549, %r546, 3;
	mad.lo.s32 	%r188, %r549, 260, %r548;
	add.s32 	%r550, %r1, 12;
	add.s32 	%r551, %r2, 128;
	and.b32  	%r552, %r551, 224;
	shr.u32 	%r553, %r550, 3;
	mad.lo.s32 	%r189, %r553, 260, %r552;
	add.s32 	%r554, %r1, 18;
	add.s32 	%r555, %r2, 64;
	and.b32  	%r556, %r555, 224;
	shr.u32 	%r557, %r554, 3;
	mad.lo.s32 	%r190, %r557, 260, %r556;
	or.b32  	%r191, %r2, 780;
	add.s32 	%r558, %r1, 30;
	shr.u32 	%r559, %r558, 3;
	mad.lo.s32 	%r192, %r559, 260, %r548;
	add.s32 	%r560, %r1, 36;
	shr.u32 	%r561, %r560, 3;
	mad.lo.s32 	%r193, %r561, 260, %r552;
	add.s32 	%r562, %r1, 42;
	shr.u32 	%r563, %r562, 3;
	mad.lo.s32 	%r194, %r563, 260, %r556;
	or.b32  	%r195, %r2, 1560;
	add.s32 	%r564, %r1, 54;
	shr.u32 	%r565, %r564, 3;
	mad.lo.s32 	%r196, %r565, 260, %r548;
	add.s32 	%r566, %r1, 60;
	bfe.u32 	%r567, %r566, 3, 3;
	mad.lo.s32 	%r197, %r567, 260, %r552;
	shr.u32 	%r568, %r1, 1;
	cvt.u16.u32 	%rs35, %r568;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r569, %rs40;
	and.b32  	%r198, %r569, 255;
	mul.lo.s32 	%r570, %r149, 870;
	mad.lo.s32 	%r571, %r526, 33, %r570;
	mad.lo.s32 	%r199, %r530, 290, %r571;
	add.s32 	%r200, %r199, 132;
	setp.lt.u32 	%p243, %r290, 4;
	setp.eq.s32 	%p244, %r150, 1;
	setp.eq.s32 	%p245, %r150, 4;
	setp.eq.s32 	%p246, %r150, 5;
	mul.lo.s32 	%r572, %r66, 784;
	and.b32  	%r573, %r1, 1;
	neg.s32 	%r574, %r573;
	and.b32  	%r575, %r574, 392;
	bfe.s32 	%r576, %r1, 1, 1;
	and.b32  	%r577, %r576, 196;
	and.b32  	%r578, %r162, 6;
	bfe.s32 	%r579, %r290, 3, 1;
	and.b32  	%r580, %r579, 1576;
	shr.u32 	%r581, %r1, 2;
	or.b32  	%r582, %r578, %r572;
	mad.lo.s32 	%r583, %r581, 98, %r582;
	or.b32  	%r584, %r583, %r64;
	add.s32 	%r585, %r584, %r575;
	add.s32 	%r586, %r585, %r577;
	add.s32 	%r201, %r586, %r580;
	add.s32 	%r202, %r201, 8;
	mul.lo.s32 	%r587, %r283, 786432;
	mad.lo.s32 	%r588, %r287, 192, %r587;
	and.b32  	%r589, %r290, 7;
	or.b32  	%r590, %r183, %r176;
	cvt.u16.u32 	%rs41, %r590;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r591, %rs47;
	and.b32  	%r592, %r591, 248;
	or.b32  	%r593, %r4, %r589;
	add.s32 	%r203, %r593, %r592;
	cvt.s64.s32 	%rd7, %r588;
	add.s32 	%r594, %r199, %r198;
	mul.wide.u32 	%rd49, %r594, 4;
	mov.u64 	%rd50, shmem;
	add.s64 	%rd8, %rd50, %rd49;
	add.s32 	%r595, %r200, %r198;
	mul.wide.u32 	%rd51, %r595, 4;
	add.s64 	%rd9, %rd50, %rd51;
	cvt.u64.u32 	%rd52, %r199;
	cvt.u64.u16 	%rd53, %rs40;
	and.b64  	%rd54, %rd53, 255;
	add.s64 	%rd55, %rd52, %rd54;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd10, %rd50, %rd56;
	cvt.u64.u32 	%rd57, %r200;
	add.s64 	%rd58, %rd57, %rd54;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd11, %rd50, %rd59;
	or.pred  	%p247, %p243, %p244;
	and.b32  	%r596, %r290, 24;
	setp.eq.s32 	%p248, %r596, 8;
	or.pred  	%p249, %p247, %p248;
	or.pred  	%p250, %p249, %p245;
	setp.eq.s32 	%p251, %r596, 24;
	or.pred  	%p252, %p246, %p251;
	selp.b32 	%r204, 1145324612, -286331154, %p249;
	or.pred  	%p1, %p250, %p252;
	selp.b32 	%r205, 1145324612, -286331154, %p247;
	add.s32 	%r597, %r150, -1;
	setp.lt.u32 	%p253, %r597, 3;
	or.pred  	%p2, %p243, %p253;
	setp.eq.s32 	%p254, %r596, 16;
	or.pred  	%p3, %p254, %p251;
	selp.b32 	%r206, 1145324612, -286331154, %p254;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r256, %r205, %r206, %p2;
	or.pred  	%p285, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_218;
$L__BB0_189:                            // %L24370
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r148, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p322, %r88, 16320;
	mov.u32 	%r88, %r148;
	@%p322 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_190;
$L__BB0_218:                            // %L1941
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_176 Depth 2
	add.s32 	%r598, %r88, %r281;
	setp.lt.s32 	%p255, %r598, %r282;
	@%p255 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_190;
$L__BB0_219:                            // %oksrem867
                                        //   in Loop: Header=BB0_218 Depth=1
	setp.eq.s32 	%p256, %r185, 0;
	mul.hi.u32 	%r695, %r88, -1431655765;
	shr.u32 	%r696, %r695, 5;
	mul.lo.s32 	%r207, %r696, 48;
	or.b32  	%r697, %r207, %r176;
	add.s32 	%r698, %r697, %r183;
	shr.s32 	%r699, %r698, 31;
	shr.u32 	%r700, %r699, 18;
	add.s32 	%r701, %r698, %r700;
	and.b32  	%r702, %r701, 507904;
	sub.s32 	%r703, %r698, %r702;
	shl.b32 	%r704, %r703, 13;
	or.b32  	%r705, %r184, %r704;
	add.s32 	%r706, %r182, %r705;
	shr.s32 	%r707, %r706, 31;
	shr.u32 	%r708, %r707, 5;
	add.s32 	%r709, %r706, %r708;
	shr.s32 	%r710, %r709, 27;
	setp.lt.s32 	%p257, %r706, 0;
	and.b32  	%r711, %r709, -134217728;
	setp.ne.s32 	%p258, %r711, %r706;
	and.pred  	%p259, %p257, %p258;
	selp.u32 	%r712, 1, 0, %p259;
	sub.s32 	%r713, %r712, %r710;
	shl.b32 	%r714, %r713, 27;
	add.s32 	%r715, %r714, %r706;
	mul.wide.s32 	%rd60, %r715, 4;
	add.s64 	%rd61, %rd3, %rd60;
	ld.global.v4.u32 	{%r716, %r717, %r718, %r719}, [%rd61];
	add.s32 	%r720, %r207, 24;
	or.b32  	%r721, %r720, %r176;
	add.s32 	%r722, %r721, %r183;
	shr.s32 	%r723, %r722, 31;
	shr.u32 	%r724, %r723, 18;
	add.s32 	%r725, %r722, %r724;
	and.b32  	%r726, %r725, 507904;
	sub.s32 	%r727, %r722, %r726;
	shl.b32 	%r728, %r727, 13;
	or.b32  	%r729, %r184, %r728;
	add.s32 	%r730, %r182, %r729;
	shr.s32 	%r731, %r730, 31;
	shr.u32 	%r732, %r731, 5;
	add.s32 	%r733, %r730, %r732;
	shr.s32 	%r734, %r733, 27;
	setp.lt.s32 	%p260, %r730, 0;
	and.b32  	%r735, %r733, -134217728;
	setp.ne.s32 	%p261, %r735, %r730;
	and.pred  	%p262, %p260, %p261;
	selp.u32 	%r736, 1, 0, %p262;
	sub.s32 	%r737, %r736, %r734;
	shl.b32 	%r738, %r737, 27;
	add.s32 	%r739, %r738, %r730;
	mul.wide.s32 	%rd62, %r739, 4;
	add.s64 	%rd63, %rd3, %rd62;
	ld.global.v4.u32 	{%r740, %r741, %r742, %r743}, [%rd63];
	selp.b32 	%r744, %r718, %r716, %p256;
	shfl.sync.bfly.b32	%r745, %r744, 4, 31, -1;
	selp.b32 	%r601, %r716, %r745, %p256;
	selp.b32 	%r606, %r745, %r718, %p256;
	selp.b32 	%r746, %r719, %r717, %p256;
	shfl.sync.bfly.b32	%r747, %r746, 4, 31, -1;
	selp.b32 	%r609, %r717, %r747, %p256;
	selp.b32 	%r614, %r747, %r719, %p256;
	selp.b32 	%r748, %r742, %r740, %p256;
	shfl.sync.bfly.b32	%r749, %r748, 4, 31, -1;
	selp.b32 	%r617, %r740, %r749, %p256;
	selp.b32 	%r622, %r749, %r742, %p256;
	selp.b32 	%r750, %r743, %r741, %p256;
	shfl.sync.bfly.b32	%r751, %r750, 4, 31, -1;
	selp.b32 	%r625, %r741, %r751, %p256;
	selp.b32 	%r630, %r751, %r743, %p256;
	shl.b32 	%r602, %r606, 4;
	mov.u32 	%r600, 252645135;
	// begin inline asm
	lop3.b32 %r632, %r600, %r601, %r602, 202;
	// end inline asm
	shr.u32 	%r605, %r601, 4;
	// begin inline asm
	lop3.b32 %r648, %r600, %r605, %r606, 202;
	// end inline asm
	shl.b32 	%r610, %r614, 4;
	// begin inline asm
	lop3.b32 %r640, %r600, %r609, %r610, 202;
	// end inline asm
	shr.u32 	%r613, %r609, 4;
	// begin inline asm
	lop3.b32 %r656, %r600, %r613, %r614, 202;
	// end inline asm
	shl.b32 	%r618, %r622, 4;
	// begin inline asm
	lop3.b32 %r633, %r600, %r617, %r618, 202;
	// end inline asm
	shr.u32 	%r621, %r617, 4;
	// begin inline asm
	lop3.b32 %r649, %r600, %r621, %r622, 202;
	// end inline asm
	shl.b32 	%r626, %r630, 4;
	// begin inline asm
	lop3.b32 %r641, %r600, %r625, %r626, 202;
	// end inline asm
	shr.u32 	%r629, %r625, 4;
	// begin inline asm
	lop3.b32 %r657, %r600, %r629, %r630, 202;
	// end inline asm
	mov.u32 	%r634, 25152;
	// begin inline asm
	prmt.b32 %r664, %r632, %r633, %r634;
	// end inline asm
	mov.u32 	%r638, 29521;
	// begin inline asm
	prmt.b32 %r680, %r632, %r633, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r640, %r641, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r640, %r641, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r665, %r648, %r649, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r648, %r649, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r656, %r657, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r656, %r657, %r638;
	// end inline asm
	mov.u32 	%r666, 21520;
	// begin inline asm
	prmt.b32 %r663, %r664, %r665, %r666;
	// end inline asm
	mov.u32 	%r670, 30258;
	// begin inline asm
	prmt.b32 %r667, %r664, %r665, %r670;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r672, %r673, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r675, %r672, %r673, %r670;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r680, %r681, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r683, %r680, %r681, %r670;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r688, %r689, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r691, %r688, %r689, %r670;
	// end inline asm
	mul.hi.s32 	%r752, %r698, 715827883;
	shr.u32 	%r753, %r752, 31;
	shr.s32 	%r754, %r752, 2;
	add.s32 	%r755, %r754, %r753;
	mul.lo.s32 	%r756, %r755, 24;
	sub.s32 	%r757, %r698, %r756;
	add.s32 	%r758, %r757, %r186;
	mul.wide.s32 	%rd64, %r758, 4;
	add.s64 	%rd66, %rd50, %rd64;
	st.shared.u32 	[%rd66], %r663;
	add.s32 	%r759, %r758, 128;
	mul.wide.u32 	%rd67, %r759, 4;
	add.s64 	%rd68, %rd50, %rd67;
	st.shared.u32 	[%rd68], %r671;
	add.s32 	%r760, %r758, 64;
	mul.wide.u32 	%rd69, %r760, 4;
	add.s64 	%rd70, %rd50, %rd69;
	st.shared.u32 	[%rd70], %r667;
	add.s32 	%r761, %r758, 192;
	mul.wide.u32 	%rd71, %r761, 4;
	add.s64 	%rd72, %rd50, %rd71;
	st.shared.u32 	[%rd72], %r675;
	add.s32 	%r762, %r758, 32;
	mul.wide.u32 	%rd73, %r762, 4;
	add.s64 	%rd74, %rd50, %rd73;
	st.shared.u32 	[%rd74], %r679;
	add.s32 	%r763, %r758, 160;
	mul.wide.u32 	%rd75, %r763, 4;
	add.s64 	%rd76, %rd50, %rd75;
	st.shared.u32 	[%rd76], %r687;
	add.s32 	%r764, %r758, 96;
	mul.wide.u32 	%rd77, %r764, 4;
	add.s64 	%rd78, %rd50, %rd77;
	st.shared.u32 	[%rd78], %r683;
	add.s32 	%r765, %r758, 224;
	mul.wide.u32 	%rd79, %r765, 4;
	add.s64 	%rd80, %rd50, %rd79;
	st.shared.u32 	[%rd80], %r691;
	bar.sync 	0;
	add.s32 	%r766, %r207, %r187;
	cvt.u16.u32 	%rs48, %r766;
	mul.hi.s16 	%rs49, %rs48, 10923;
	shr.u16 	%rs50, %rs49, 15;
	shr.s16 	%rs51, %rs49, 2;
	add.s16 	%rs52, %rs51, %rs50;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs48, %rs53;
	cvt.s32.s16 	%r208, %rs54;
	add.s32 	%r767, %r2, %r208;
	mul.wide.s32 	%rd81, %r767, 4;
	add.s64 	%rd82, %rd50, %rd81;
	ld.shared.u32 	%r209, [%rd82];
	add.s32 	%r768, %r188, %r208;
	mul.wide.s32 	%rd83, %r768, 4;
	add.s64 	%rd84, %rd50, %rd83;
	ld.shared.u32 	%r210, [%rd84];
	add.s32 	%r769, %r189, %r208;
	mul.wide.u32 	%rd85, %r769, 4;
	add.s64 	%rd86, %rd50, %rd85;
	ld.shared.u32 	%r211, [%rd86];
	add.s32 	%r770, %r190, %r208;
	mul.wide.u32 	%rd87, %r770, 4;
	add.s64 	%rd88, %rd50, %rd87;
	ld.shared.u32 	%r212, [%rd88];
	add.s32 	%r771, %r191, %r208;
	mul.wide.u32 	%rd89, %r771, 4;
	add.s64 	%rd90, %rd50, %rd89;
	ld.shared.u32 	%r213, [%rd90];
	add.s32 	%r772, %r192, %r208;
	mul.wide.u32 	%rd91, %r772, 4;
	add.s64 	%rd92, %rd50, %rd91;
	ld.shared.u32 	%r214, [%rd92];
	add.s32 	%r773, %r193, %r208;
	mul.wide.u32 	%rd93, %r773, 4;
	add.s64 	%rd94, %rd50, %rd93;
	ld.shared.u32 	%r215, [%rd94];
	add.s32 	%r774, %r194, %r208;
	mul.wide.u32 	%rd95, %r774, 4;
	add.s64 	%rd96, %rd50, %rd95;
	ld.shared.u32 	%r216, [%rd96];
	add.s32 	%r775, %r195, %r208;
	mul.wide.u32 	%rd97, %r775, 4;
	add.s64 	%rd98, %rd50, %rd97;
	ld.shared.u32 	%r217, [%rd98];
	add.s32 	%r776, %r196, %r208;
	mul.wide.u32 	%rd99, %r776, 4;
	add.s64 	%rd100, %rd50, %rd99;
	ld.shared.u32 	%r218, [%rd100];
	add.s32 	%r777, %r197, %r208;
	mul.wide.s32 	%rd101, %r777, 4;
	add.s64 	%rd102, %rd50, %rd101;
	ld.shared.u32 	%r219, [%rd102];
	bar.sync 	0;
	shfl.sync.idx.b32	%r220, %r175, 0, 31, -1;
	shfl.sync.idx.b32	%r221, %r175, 1, 31, -1;
	shfl.sync.idx.b32	%r222, %r175, 2, 31, -1;
	shfl.sync.idx.b32	%r223, %r175, 3, 31, -1;
	shfl.sync.idx.b32	%r224, %r175, 4, 31, -1;
	shfl.sync.idx.b32	%r225, %r175, 5, 31, -1;
	shfl.sync.idx.b32	%r226, %r175, 6, 31, -1;
	shfl.sync.idx.b32	%r227, %r175, 7, 31, -1;
	shfl.sync.idx.b32	%r228, %r175, 8, 31, -1;
	shfl.sync.idx.b32	%r229, %r175, 9, 31, -1;
	shfl.sync.idx.b32	%r230, %r175, 10, 31, -1;
	shfl.sync.idx.b32	%r231, %r175, 11, 31, -1;
	shfl.sync.idx.b32	%r232, %r175, 12, 31, -1;
	shfl.sync.idx.b32	%r233, %r175, 13, 31, -1;
	shfl.sync.idx.b32	%r234, %r175, 14, 31, -1;
	shfl.sync.idx.b32	%r235, %r175, 15, 31, -1;
	setp.eq.s32 	%p263, %r220, 999999999;
	@%p263 bra 	$L__BB0_146;
// %bb.220:                             // %oksrem2271
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r778, %r220, %r208;
	mul.wide.s32 	%rd103, %r778, 4;
	add.s64 	%rd105, %rd50, %rd103;
	st.shared.u32 	[%rd105], %r209;
	setp.eq.s32 	%p264, %r221, 999999999;
	@%p264 bra 	$L__BB0_147;
// %bb.221:                             // %oksrem2337
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r779, %r221, %r208;
	mul.wide.s32 	%rd106, %r779, 4;
	add.s64 	%rd108, %rd50, %rd106;
	st.shared.u32 	[%rd108], %r210;
	setp.eq.s32 	%p265, %r222, 999999999;
	@%p265 bra 	$L__BB0_148;
// %bb.222:                             // %oksrem2403
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r780, %r222, %r208;
	mul.wide.s32 	%rd109, %r780, 4;
	add.s64 	%rd111, %rd50, %rd109;
	st.shared.u32 	[%rd111], %r211;
	setp.eq.s32 	%p266, %r223, 999999999;
	@%p266 bra 	$L__BB0_149;
// %bb.223:                             // %oksrem2469
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r781, %r223, %r208;
	mul.wide.s32 	%rd112, %r781, 4;
	add.s64 	%rd114, %rd50, %rd112;
	st.shared.u32 	[%rd114], %r212;
	setp.eq.s32 	%p267, %r224, 999999999;
	@%p267 bra 	$L__BB0_150;
// %bb.224:                             // %oksrem2535
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r782, %r224, %r208;
	mul.wide.s32 	%rd115, %r782, 4;
	add.s64 	%rd117, %rd50, %rd115;
	st.shared.u32 	[%rd117], %r213;
	setp.eq.s32 	%p268, %r225, 999999999;
	@%p268 bra 	$L__BB0_151;
// %bb.225:                             // %oksrem2601
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r783, %r225, %r208;
	mul.wide.s32 	%rd118, %r783, 4;
	add.s64 	%rd120, %rd50, %rd118;
	st.shared.u32 	[%rd120], %r214;
	setp.eq.s32 	%p269, %r226, 999999999;
	@%p269 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem2667
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r784, %r226, %r208;
	mul.wide.s32 	%rd121, %r784, 4;
	add.s64 	%rd123, %rd50, %rd121;
	st.shared.u32 	[%rd123], %r215;
	setp.eq.s32 	%p270, %r227, 999999999;
	@%p270 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem2733
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r785, %r227, %r208;
	mul.wide.s32 	%rd124, %r785, 4;
	add.s64 	%rd126, %rd50, %rd124;
	st.shared.u32 	[%rd126], %r216;
	setp.eq.s32 	%p271, %r228, 999999999;
	@%p271 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem2799
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r786, %r228, %r208;
	mul.wide.s32 	%rd127, %r786, 4;
	add.s64 	%rd129, %rd50, %rd127;
	st.shared.u32 	[%rd129], %r217;
	setp.eq.s32 	%p272, %r229, 999999999;
	@%p272 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem2865
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r787, %r229, %r208;
	mul.wide.s32 	%rd130, %r787, 4;
	add.s64 	%rd132, %rd50, %rd130;
	st.shared.u32 	[%rd132], %r218;
	setp.eq.s32 	%p273, %r230, 999999999;
	@%p273 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem2932
                                        //   in Loop: Header=BB0_218 Depth=1
	setp.gt.u32 	%p274, %r1, 3;
	selp.b32 	%r788, 0, %r219, %p274;
	add.s32 	%r789, %r230, %r208;
	mul.wide.s32 	%rd133, %r789, 4;
	add.s64 	%rd135, %rd50, %rd133;
	st.shared.u32 	[%rd135], %r788;
	setp.eq.s32 	%p275, %r231, 999999999;
	@%p275 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem2998
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r790, %r231, %r208;
	mul.wide.s32 	%rd136, %r790, 4;
	add.s64 	%rd138, %rd50, %rd136;
	mov.u32 	%r791, 0;
	st.shared.u32 	[%rd138], %r791;
	setp.eq.s32 	%p276, %r232, 999999999;
	@%p276 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3063
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r792, %r232, %r208;
	mul.wide.s32 	%rd139, %r792, 4;
	add.s64 	%rd141, %rd50, %rd139;
	st.shared.u32 	[%rd141], %r791;
	setp.eq.s32 	%p277, %r233, 999999999;
	@%p277 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3128
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r794, %r233, %r208;
	mul.wide.s32 	%rd142, %r794, 4;
	add.s64 	%rd144, %rd50, %rd142;
	st.shared.u32 	[%rd144], %r791;
	setp.eq.s32 	%p278, %r234, 999999999;
	@%p278 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3193
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r796, %r234, %r208;
	mul.wide.s32 	%rd145, %r796, 4;
	add.s64 	%rd147, %rd50, %rd145;
	st.shared.u32 	[%rd147], %r791;
	setp.eq.s32 	%p279, %r235, 999999999;
	@%p279 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem3258
                                        //   in Loop: Header=BB0_218 Depth=1
	setp.eq.s32 	%p280, %r177, 3;
	add.s32 	%r799, %r235, %r208;
	mul.wide.s32 	%rd148, %r799, 4;
	add.s64 	%rd150, %rd50, %rd148;
	st.shared.u32 	[%rd150], %r791;
	bar.sync 	0;
	mov.u32 	%r92, %r791;
	mov.u32 	%r93, %r791;
	mov.u32 	%r94, %r791;
	mov.u32 	%r95, %r791;
	mov.u32 	%r96, %r791;
	mov.u32 	%r97, %r791;
	mov.u32 	%r98, %r791;
	mov.u32 	%r99, %r791;
	mov.u32 	%r100, %r791;
	mov.u32 	%r101, %r791;
	mov.u32 	%r102, %r791;
	mov.u32 	%r103, %r791;
	mov.u32 	%r104, %r791;
	mov.u32 	%r105, %r791;
	mov.u32 	%r106, %r791;
	mov.u32 	%r107, %r791;
	@%p280 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem3304
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r800, %r207, %r198;
	ld.shared.u32 	%r92, [%rd8];
	ld.shared.u32 	%r93, [%rd9];
	ld.shared.u32 	%r94, [%rd10+12];
	ld.shared.u32 	%r95, [%rd11+12];
	ld.shared.u32 	%r96, [%rd10+24];
	ld.shared.u32 	%r97, [%rd11+24];
	ld.shared.u32 	%r98, [%rd10+36];
	ld.shared.u32 	%r99, [%rd11+36];
	add.s32 	%r801, %r800, 12;
	mul.hi.u32 	%r802, %r801, -1431655765;
	shr.u32 	%r803, %r802, 4;
	mul.lo.s32 	%r804, %r803, 24;
	sub.s32 	%r805, %r801, %r804;
	add.s32 	%r806, %r199, %r805;
	mul.wide.u32 	%rd151, %r806, 4;
	add.s64 	%rd153, %rd50, %rd151;
	ld.shared.u32 	%r100, [%rd153];
	add.s32 	%r807, %r200, %r805;
	mul.wide.u32 	%rd154, %r807, 4;
	add.s64 	%rd155, %rd50, %rd154;
	ld.shared.u32 	%r101, [%rd155];
	ld.shared.u32 	%r102, [%rd10+60];
	ld.shared.u32 	%r103, [%rd11+60];
	ld.shared.u32 	%r104, [%rd10+72];
	ld.shared.u32 	%r105, [%rd11+72];
	ld.shared.u32 	%r106, [%rd10+84];
	ld.shared.u32 	%r107, [%rd11+84];
$L__BB0_162:                            // %L10675
                                        //   in Loop: Header=BB0_218 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r791;
	bra.uni 	$L__BB0_163;
$L__BB0_173:                            // %L17512
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
$L__BB0_174:                            // %L17513
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p301, %r111, 24;
	@%p301 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_175;
$L__BB0_163:                            // %L10693
                                        //   Parent Loop BB0_218 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p281, %r111, 0;
	selp.b32 	%r1201, %r92, 0, %p281;
	setp.eq.s32 	%p282, %r111, 6;
	selp.b32 	%r1202, %r96, %r1201, %p282;
	setp.eq.s32 	%p283, %r111, 12;
	selp.b32 	%r1203, %r100, %r1202, %p283;
	setp.eq.s32 	%p284, %r111, 18;
	selp.b32 	%r1204, %r104, %r1203, %p284;
	selp.b32 	%r1205, %r93, 0, %p281;
	selp.b32 	%r1206, %r97, %r1205, %p282;
	selp.b32 	%r1207, %r101, %r1206, %p283;
	selp.b32 	%r1208, %r105, %r1207, %p284;
	selp.b32 	%r1209, %r94, 0, %p281;
	selp.b32 	%r1210, %r98, %r1209, %p282;
	selp.b32 	%r1211, %r102, %r1210, %p283;
	selp.b32 	%r1212, %r106, %r1211, %p284;
	selp.b32 	%r1213, %r95, 0, %p281;
	selp.b32 	%r1214, %r99, %r1213, %p282;
	selp.b32 	%r1215, %r103, %r1214, %p283;
	selp.b32 	%r1216, %r107, %r1215, %p284;
	mov.u16 	%rs92, 25600;
	// begin inline asm
	mov.b32 %r814, {%rs92, %rs92};
	// end inline asm
	mov.u16 	%rs94, 21504;
	// begin inline asm
	mov.b32 %r825, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r813, %r1204, -2004318072;
	mov.u32 	%r950, 983055;
	// begin inline asm
	lop3.b32 %r811, %r950, %r813, %r814, 202;
	// end inline asm
	mov.u16 	%rs98, 18432;
	// begin inline asm
	mov.b32 %r815, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r816, %r814, %r815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r819, %r811, %r816;
	// end inline asm
	mov.u32 	%r961, 15728880;
	// begin inline asm
	lop3.b32 %r822, %r961, %r813, %r825, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r826, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r827, %r825, %r826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r830, %r822, %r827;
	// end inline asm
	// begin inline asm
	mov.b32 %r860, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r871, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r859, %r1208, -2004318072;
	// begin inline asm
	lop3.b32 %r857, %r950, %r859, %r860, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r861, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r862, %r860, %r861;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r865, %r857, %r862;
	// end inline asm
	// begin inline asm
	lop3.b32 %r868, %r961, %r859, %r871, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r872, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r873, %r871, %r872;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r876, %r868, %r873;
	// end inline asm
	// begin inline asm
	mov.b32 %r906, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r917, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r905, %r1212, -2004318072;
	// begin inline asm
	lop3.b32 %r903, %r950, %r905, %r906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r907, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r908, %r906, %r907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r911, %r903, %r908;
	// end inline asm
	// begin inline asm
	lop3.b32 %r914, %r961, %r905, %r917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r919, %r917, %r918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r922, %r914, %r919;
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r963, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r951, %r1216, -2004318072;
	// begin inline asm
	lop3.b32 %r949, %r950, %r951, %r952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r954, %r952, %r953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r957, %r949, %r954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r960, %r961, %r951, %r963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r965, %r963, %r964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r968, %r960, %r965;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r819;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r993, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r865;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r996, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r830;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r999, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r876;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1002, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r911;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1005, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r957;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1008, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r922;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1011, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r968;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1014, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1017, %r1018}, {%r313, %r316}, {%r993}, {%r791, %r791};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1024, %r1025}, {%r313, %r316}, {%r996}, {%r791, %r791};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1031, %r1032}, {%r313, %r316}, {%r999}, {%r791, %r791};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1038, %r1039}, {%r313, %r316}, {%r1002}, {%r791, %r791};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1045, %r1046}, {%r313, %r316}, {%r1005}, {%r791, %r791};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1052, %r1053}, {%r313, %r316}, {%r1008}, {%r791, %r791};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1059, %r1060}, {%r313, %r316}, {%r1011}, {%r791, %r791};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1066, %r1067}, {%r313, %r316}, {%r1014}, {%r791, %r791};
	// end inline asm
	@%p1 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_164;
$L__BB0_237:                            // %pass4659
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1073, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1075, %r1073, %r1018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1078, %r365, %r1017, %r1075;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1082, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1084, %r1082, %r1025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1087, %r365, %r1024, %r1084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1091, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1093, %r1091, %r1032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1096, %r365, %r1031, %r1093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1100, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1102, %r1100, %r1039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r365, %r1038, %r1102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1109, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1111, %r1109, %r1046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1114, %r365, %r1045, %r1111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1118, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1120, %r1118, %r1053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r365, %r1052, %r1120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1127, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1129, %r1127, %r1060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r365, %r1059, %r1129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1136, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1138, %r1136, %r1067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r365, %r1066, %r1138;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1145, %r368, %r1017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r365, %r1018, %r1145;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1152, %r368, %r1024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1155, %r365, %r1025, %r1152;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1159, %r368, %r1031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1162, %r365, %r1032, %r1159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r368, %r1038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r365, %r1039, %r1166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1173, %r368, %r1045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1176, %r365, %r1046, %r1173;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1180, %r368, %r1052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r365, %r1053, %r1180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1187, %r368, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r365, %r1060, %r1187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1194, %r368, %r1066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1197, %r365, %r1067, %r1194;
	// end inline asm
	mov.u32 	%r1366, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1217, %r1218}, {%r409, %r412}, {%r1078, %r1148}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1226, %r1227}, {%r409, %r412}, {%r1087, %r1155}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1235, %r1236}, {%r409, %r412}, {%r1096, %r1162}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1244, %r1245}, {%r409, %r412}, {%r1105, %r1169}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1253, %r1254}, {%r409, %r412}, {%r1114, %r1176}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1262, %r1263}, {%r409, %r412}, {%r1123, %r1183}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1271, %r1272}, {%r409, %r412}, {%r1132, %r1190}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1280, %r1281}, {%r409, %r412}, {%r1141, %r1197}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs103, %rs3, 10923;
	shr.u16 	%rs104, %rs103, 15;
	add.s16 	%rs105, %rs103, %rs104;
	mul.lo.s16 	%rs106, %rs105, 6;
	sub.s16 	%rs107, %rs3, %rs106;
	mul.wide.s16 	%r1399, %rs107, 16;
	add.s32 	%r1400, %r201, %r1399;
	mul.wide.s32 	%rd158, %r1400, 4;
	add.s64 	%rd160, %rd50, %rd158;
	ld.shared.u32 	%r1357, [%rd160];
	add.s32 	%r1401, %r202, %r1399;
	mul.wide.s32 	%rd161, %r1401, 4;
	add.s64 	%rd162, %rd50, %rd161;
	ld.shared.u32 	%r1364, [%rd162];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1353, %r1354}, {%r421, %r424}, {%r1357}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1360, %r1361}, {%r421, %r424}, {%r1364}, {%r1366, %r1366};
	// end inline asm
	@%p285 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;
$L__BB0_239:                            // %pass5153
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1367, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1369, %r1367, %r1354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1372, %r459, %r1353, %r1369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1376, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r1376, %r1361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r459, %r1360, %r1378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1385, %r462, %r1353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1388, %r459, %r1354, %r1385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1392, %r462, %r1360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r459, %r1361, %r1392;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1421, %r1424}, {%r505, %r508}, {%r1372, %r1388}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1428, %r1432}, {%r505, %r508}, {%r1381, %r1395}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1420, %r1421, %r1421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1423, %r1424, %r1424, %r1420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r1428, %r1428, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1432, %r1432, %r1427;
	// end inline asm
	mov.u32 	%r1519, 335549440;
	// begin inline asm
	fma.rn.f16x2 %r1435, %r1519, %r1431, %r110;
	// end inline asm
	add.s32 	%r257, %r88, %r111;
	add.s32 	%r1522, %r257, 1;
	mul.hi.u32 	%r1523, %r1522, -1431655765;
	shr.u32 	%r1524, %r1523, 2;
	mul.lo.s32 	%r1525, %r1524, 6;
	sub.s32 	%r1526, %r1522, %r1525;
	shl.b32 	%r1527, %r1526, 4;
	add.s32 	%r1528, %r201, %r1527;
	mul.wide.u32 	%rd165, %r1528, 4;
	add.s64 	%rd167, %rd50, %rd165;
	ld.shared.u32 	%r1443, [%rd167];
	add.s32 	%r1529, %r202, %r1527;
	mul.wide.u32 	%rd168, %r1529, 4;
	add.s64 	%rd169, %rd50, %rd168;
	ld.shared.u32 	%r1450, [%rd169];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1460, %r1457}, {%r421, %r424}, {%r1443}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1469, %r1466}, {%r421, %r424}, {%r1450}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1453, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1455, %r1453, %r1457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1458, %r459, %r1460, %r1455;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1462, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1464, %r1462, %r1466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1467, %r459, %r1469, %r1464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r462, %r1460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r459, %r1457, %r1471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1478, %r462, %r1469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1481, %r459, %r1466, %r1478;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1504, %r1507}, {%r505, %r508}, {%r1458, %r1474}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1511, %r1515}, {%r505, %r508}, {%r1467, %r1481}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1503, %r1504, %r1504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1506, %r1507, %r1507, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r1511, %r1511, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r1515, %r1515, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r1519, %r1514, %r1435;
	// end inline asm
	add.s32 	%r3051, %r108, 2;
	setp.eq.s32 	%p286, %r3051, 128;
	@%p286 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_240;
$L__BB0_165:                            // %L13369
                                        //   in Loop: Header=BB0_163 Depth=2
	setp.gt.u32 	%p287, %r290, 7;
	@%p287 bra 	$L__BB0_167;
// %bb.166:                             // %L13429
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1530, %r109, 786432;
	or.b32  	%r1531, %r203, %r1530;
	cvt.u64.u32 	%rd170, %r1531;
	add.s64 	%rd171, %rd170, %rd7;
	mul.hi.s64 	%rd172, %rd171, 3074457345618258603;
	shr.u64 	%rd173, %rd172, 63;
	shr.s64 	%rd174, %rd172, 26;
	add.s64 	%rd175, %rd174, %rd173;
	setp.lt.s64 	%p288, %rd171, 0;
	mul.lo.s64 	%rd176, %rd175, 402653184;
	setp.ne.s64 	%p289, %rd176, %rd171;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd177, -1, 0, %p290;
	add.s64 	%rd178, %rd175, %rd177;
	mul.lo.s64 	%rd179, %rd178, -402653184;
	add.s64 	%rd180, %rd179, %rd171;
	shl.b64 	%rd181, %rd180, 2;
	add.s64 	%rd182, %rd4, %rd181;
	st.global.u32 	[%rd182], %r3053;
$L__BB0_167:                            // %L13586
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3051, 0;
	mov.u32 	%r3053, %r3051;
$L__BB0_240:                            // %oksrem5658
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r1699, %r257, 2;
	mul.hi.u32 	%r1700, %r1699, -1431655765;
	shr.u32 	%r1701, %r1700, 2;
	mul.lo.s32 	%r1702, %r1701, 6;
	sub.s32 	%r1703, %r1699, %r1702;
	shl.b32 	%r1704, %r1703, 4;
	add.s32 	%r1705, %r201, %r1704;
	mul.wide.u32 	%rd183, %r1705, 4;
	add.s64 	%rd185, %rd50, %rd183;
	ld.shared.u32 	%r1537, [%rd185];
	add.s32 	%r1706, %r202, %r1704;
	mul.wide.u32 	%rd186, %r1706, 4;
	add.s64 	%rd187, %rd50, %rd186;
	ld.shared.u32 	%r1544, [%rd187];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1554, %r1551}, {%r421, %r424}, {%r1537}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1563, %r1560}, {%r421, %r424}, {%r1544}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1547, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1549, %r1547, %r1551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r459, %r1554, %r1549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1556, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1558, %r1556, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1561, %r459, %r1563, %r1558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1565, %r462, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r459, %r1551, %r1565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1572, %r462, %r1563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r459, %r1560, %r1572;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1598, %r1601}, {%r505, %r508}, {%r1552, %r1568}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1605, %r1609}, {%r505, %r508}, {%r1561, %r1575}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1597, %r1598, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r1601, %r1601, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r1605, %r1605, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r1609, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r1519, %r1608, %r3053;
	// end inline asm
	add.s32 	%r1707, %r257, 3;
	mul.hi.u32 	%r1708, %r1707, -1431655765;
	shr.u32 	%r1709, %r1708, 2;
	mul.lo.s32 	%r1710, %r1709, 6;
	sub.s32 	%r1711, %r1707, %r1710;
	shl.b32 	%r1712, %r1711, 4;
	add.s32 	%r1713, %r201, %r1712;
	mul.wide.u32 	%rd188, %r1713, 4;
	add.s64 	%rd189, %rd50, %rd188;
	ld.shared.u32 	%r1620, [%rd189];
	add.s32 	%r1714, %r202, %r1712;
	mul.wide.u32 	%rd190, %r1714, 4;
	add.s64 	%rd191, %rd50, %rd190;
	ld.shared.u32 	%r1627, [%rd191];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1637, %r1634}, {%r421, %r424}, {%r1620}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1646, %r1643}, {%r421, %r424}, {%r1627}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1630, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1632, %r1630, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r459, %r1637, %r1632;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1639, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1641, %r1639, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1644, %r459, %r1646, %r1641;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1648, %r462, %r1637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r459, %r1634, %r1648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1655, %r462, %r1646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r459, %r1643, %r1655;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1681, %r1684}, {%r505, %r508}, {%r1635, %r1651}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1688, %r1692}, {%r505, %r508}, {%r1644, %r1658}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1680, %r1681, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r1684, %r1684, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r1688, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r1692, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r1519, %r1691, %r1612;
	// end inline asm
	add.s32 	%r3054, %r3051, 2;
	setp.eq.s32 	%p291, %r3054, 128;
	@%p291 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_241;
$L__BB0_168:                            // %L15332
                                        //   in Loop: Header=BB0_163 Depth=2
	setp.gt.u32 	%p292, %r290, 7;
	@%p292 bra 	$L__BB0_170;
// %bb.169:                             // %L15392
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1715, %r109, 786432;
	or.b32  	%r1716, %r203, %r1715;
	cvt.u64.u32 	%rd192, %r1716;
	add.s64 	%rd193, %rd192, %rd7;
	mul.hi.s64 	%rd194, %rd193, 3074457345618258603;
	shr.u64 	%rd195, %rd194, 63;
	shr.s64 	%rd196, %rd194, 26;
	add.s64 	%rd197, %rd196, %rd195;
	setp.lt.s64 	%p293, %rd193, 0;
	mul.lo.s64 	%rd198, %rd197, 402653184;
	setp.ne.s64 	%p294, %rd198, %rd193;
	and.pred  	%p295, %p293, %p294;
	selp.s64 	%rd199, -1, 0, %p295;
	add.s64 	%rd200, %rd197, %rd199;
	mul.lo.s64 	%rd201, %rd200, -402653184;
	add.s64 	%rd202, %rd201, %rd193;
	shl.b64 	%rd203, %rd202, 2;
	add.s64 	%rd204, %rd4, %rd203;
	st.global.u32 	[%rd204], %r3056;
$L__BB0_170:                            // %L15549
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3054, 0;
	mov.u32 	%r3056, %r3054;
$L__BB0_241:                            // %oksrem6509
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r1884, %r257, 4;
	mul.hi.u32 	%r1885, %r1884, -1431655765;
	shr.u32 	%r1886, %r1885, 2;
	mul.lo.s32 	%r1887, %r1886, 6;
	sub.s32 	%r1888, %r1884, %r1887;
	shl.b32 	%r1889, %r1888, 4;
	add.s32 	%r1890, %r201, %r1889;
	mul.wide.u32 	%rd205, %r1890, 4;
	add.s64 	%rd207, %rd50, %rd205;
	ld.shared.u32 	%r1722, [%rd207];
	add.s32 	%r1891, %r202, %r1889;
	mul.wide.u32 	%rd208, %r1891, 4;
	add.s64 	%rd209, %rd50, %rd208;
	ld.shared.u32 	%r1729, [%rd209];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1739, %r1736}, {%r421, %r424}, {%r1722}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1748, %r1745}, {%r421, %r424}, {%r1729}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1732, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1734, %r1732, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r459, %r1739, %r1734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1741, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1743, %r1741, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r459, %r1748, %r1743;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r462, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r459, %r1736, %r1750;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1757, %r462, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r459, %r1745, %r1757;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1783, %r1786}, {%r505, %r508}, {%r1737, %r1753}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1790, %r1794}, {%r505, %r508}, {%r1746, %r1760}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r1783, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r1786, %r1786, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r1790, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r1794, %r1794, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r1519, %r1793, %r3056;
	// end inline asm
	add.s32 	%r1892, %r257, 5;
	mul.hi.u32 	%r1893, %r1892, -1431655765;
	shr.u32 	%r1894, %r1893, 2;
	mul.lo.s32 	%r1895, %r1894, 6;
	sub.s32 	%r1896, %r1892, %r1895;
	shl.b32 	%r1897, %r1896, 4;
	add.s32 	%r1898, %r201, %r1897;
	mul.wide.u32 	%rd210, %r1898, 4;
	add.s64 	%rd211, %rd50, %rd210;
	ld.shared.u32 	%r1805, [%rd211];
	add.s32 	%r1899, %r202, %r1897;
	mul.wide.u32 	%rd212, %r1899, 4;
	add.s64 	%rd213, %rd50, %rd212;
	ld.shared.u32 	%r1812, [%rd213];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1822, %r1819}, {%r421, %r424}, {%r1805}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1831, %r1828}, {%r421, %r424}, {%r1812}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1815, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r1815, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r459, %r1822, %r1817;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1824, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1826, %r1824, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r459, %r1831, %r1826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1833, %r462, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r459, %r1819, %r1833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1840, %r462, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r459, %r1828, %r1840;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1866, %r1869}, {%r505, %r508}, {%r1820, %r1836}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1873, %r1877}, {%r505, %r508}, {%r1829, %r1843}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1865, %r1866, %r1866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r1873, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1877, %r1877, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1519, %r1876, %r1797;
	// end inline asm
	add.s32 	%r108, %r3054, 2;
	setp.eq.s32 	%p296, %r108, 128;
	@%p296 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_174;
$L__BB0_171:                            // %L17295
                                        //   in Loop: Header=BB0_163 Depth=2
	setp.gt.u32 	%p297, %r290, 7;
	@%p297 bra 	$L__BB0_173;
// %bb.172:                             // %L17355
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1900, %r109, 786432;
	or.b32  	%r1901, %r203, %r1900;
	cvt.u64.u32 	%rd214, %r1901;
	add.s64 	%rd215, %rd214, %rd7;
	mul.hi.s64 	%rd216, %rd215, 3074457345618258603;
	shr.u64 	%rd217, %rd216, 63;
	shr.s64 	%rd218, %rd216, 26;
	add.s64 	%rd219, %rd218, %rd217;
	setp.lt.s64 	%p298, %rd215, 0;
	mul.lo.s64 	%rd220, %rd219, 402653184;
	setp.ne.s64 	%p299, %rd220, %rd215;
	and.pred  	%p300, %p298, %p299;
	selp.s64 	%rd221, -1, 0, %p300;
	add.s64 	%rd222, %rd219, %rd221;
	mul.lo.s64 	%rd223, %rd222, -402653184;
	add.s64 	%rd224, %rd223, %rd215;
	shl.b64 	%rd225, %rd224, 2;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r110;
	bra.uni 	$L__BB0_173;
$L__BB0_175:                            // %L17534.preheader
                                        //   in Loop: Header=BB0_218 Depth=1
	mov.u16 	%rs194, %rs1;
	mov.u32 	%r3042, %r1366;
	bra.uni 	$L__BB0_176;
$L__BB0_187:                            // %L24353
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2772;
	mov.u32 	%r110, %r2772;
$L__BB0_188:                            // %L24354
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	add.s32 	%r3042, %r3042, 6;
	add.s16 	%rs194, %rs194, 6;
	setp.ne.s32 	%p321, %r3042, 24;
	@%p321 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_189;
$L__BB0_176:                            // %L17534
                                        //   Parent Loop BB0_218 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p302, %r3042, 0;
	selp.b32 	%r2598, %r92, 0, %p302;
	setp.eq.s32 	%p303, %r3042, 6;
	selp.b32 	%r2599, %r96, %r2598, %p303;
	setp.eq.s32 	%p304, %r3042, 12;
	selp.b32 	%r2600, %r100, %r2599, %p304;
	setp.eq.s32 	%p305, %r3042, 18;
	selp.b32 	%r2601, %r104, %r2600, %p305;
	selp.b32 	%r2602, %r93, 0, %p302;
	selp.b32 	%r2603, %r97, %r2602, %p303;
	selp.b32 	%r2604, %r101, %r2603, %p304;
	selp.b32 	%r2605, %r105, %r2604, %p305;
	selp.b32 	%r2606, %r94, 0, %p302;
	selp.b32 	%r2607, %r98, %r2606, %p303;
	selp.b32 	%r2608, %r102, %r2607, %p304;
	selp.b32 	%r2609, %r106, %r2608, %p305;
	selp.b32 	%r2610, %r95, 0, %p302;
	selp.b32 	%r2611, %r99, %r2610, %p303;
	selp.b32 	%r2612, %r103, %r2611, %p304;
	selp.b32 	%r2613, %r107, %r2612, %p305;
	// begin inline asm
	mov.b32 %r1931, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1942, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2614, %r2601, 8;
	xor.b32  	%r1941, %r2614, 8947848;
	// begin inline asm
	lop3.b32 %r1928, %r950, %r1941, %r1931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1932, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1933, %r1931, %r1932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1936, %r1928, %r1933;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1939, %r961, %r1941, %r1942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1943, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1944, %r1942, %r1943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1947, %r1939, %r1944;
	// end inline asm
	// begin inline asm
	mov.b32 %r1977, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1988, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2615, %r2605, 8;
	xor.b32  	%r1987, %r2615, 8947848;
	// begin inline asm
	lop3.b32 %r1974, %r950, %r1987, %r1977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1978, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1979, %r1977, %r1978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1982, %r1974, %r1979;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1985, %r961, %r1987, %r1988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1989, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1990, %r1988, %r1989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1993, %r1985, %r1990;
	// end inline asm
	// begin inline asm
	mov.b32 %r2023, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r2034, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2616, %r2609, 8;
	xor.b32  	%r2033, %r2616, 8947848;
	// begin inline asm
	lop3.b32 %r2020, %r950, %r2033, %r2023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2024, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2025, %r2023, %r2024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2028, %r2020, %r2025;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2031, %r961, %r2033, %r2034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2035, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2036, %r2034, %r2035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2039, %r2031, %r2036;
	// end inline asm
	// begin inline asm
	mov.b32 %r2069, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r2080, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2617, %r2613, 8;
	xor.b32  	%r2079, %r2617, 8947848;
	// begin inline asm
	lop3.b32 %r2066, %r950, %r2079, %r2069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2070, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2071, %r2069, %r2070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2074, %r2066, %r2071;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2077, %r961, %r2079, %r2080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2081, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2082, %r2080, %r2081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2085, %r2077, %r2082;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1936;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2088, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r1982;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2091, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r1947;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2094, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r1993;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2097, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2028;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2100, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2074;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2103, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2039;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2106, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r2085;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2109, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2175, %r2172}, {%r313, %r316}, {%r2088}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2184, %r2181}, {%r313, %r316}, {%r2091}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2193, %r2190}, {%r313, %r316}, {%r2094}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2202, %r2199}, {%r313, %r316}, {%r2097}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2211, %r2208}, {%r313, %r316}, {%r2100}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2220, %r2217}, {%r313, %r316}, {%r2103}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2229, %r2226}, {%r313, %r316}, {%r2106}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2238, %r2235}, {%r313, %r316}, {%r2109}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2168, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2170, %r2168, %r2172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r365, %r2175, %r2170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2177, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2179, %r2177, %r2181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r365, %r2184, %r2179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2186, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2188, %r2186, %r2190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2191, %r365, %r2193, %r2188;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2195, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2197, %r2195, %r2199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2200, %r365, %r2202, %r2197;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2204, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2206, %r2204, %r2208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r365, %r2211, %r2206;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2213, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2215, %r2213, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r365, %r2220, %r2215;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2222, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2224, %r2222, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r365, %r2229, %r2224;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2231, %r368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2233, %r2231, %r2235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r365, %r2238, %r2233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2240, %r368, %r2175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r365, %r2172, %r2240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2247, %r368, %r2184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r365, %r2181, %r2247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r368, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r365, %r2190, %r2254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2261, %r368, %r2202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2264, %r365, %r2199, %r2261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2268, %r368, %r2211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2271, %r365, %r2208, %r2268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2275, %r368, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2278, %r365, %r2217, %r2275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r368, %r2229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r365, %r2226, %r2282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2289, %r368, %r2238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2292, %r365, %r2235, %r2289;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2296, %r2297}, {%r409, %r412}, {%r2173, %r2243}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2305, %r2306}, {%r409, %r412}, {%r2182, %r2250}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2314, %r2315}, {%r409, %r412}, {%r2191, %r2257}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2323, %r2324}, {%r409, %r412}, {%r2200, %r2264}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2332, %r2333}, {%r409, %r412}, {%r2209, %r2271}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2341, %r2342}, {%r409, %r412}, {%r2218, %r2278}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2350, %r2351}, {%r409, %r412}, {%r2227, %r2285}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2359, %r2360}, {%r409, %r412}, {%r2236, %r2292}, {%r1366, %r1366}, %r204, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs156, %rs194, -5;
	mul.hi.s16 	%rs157, %rs156, 10923;
	shr.u16 	%rs158, %rs157, 15;
	add.s16 	%rs159, %rs157, %rs158;
	mul.lo.s16 	%rs160, %rs159, 6;
	sub.s16 	%rs161, %rs156, %rs160;
	mul.wide.s16 	%r2618, %rs161, 16;
	add.s32 	%r2619, %r201, %r2618;
	mul.wide.s32 	%rd227, %r2619, 4;
	add.s64 	%rd229, %rd50, %rd227;
	ld.shared.u32 	%r2436, [%rd229];
	add.s32 	%r2620, %r202, %r2618;
	mul.wide.s32 	%rd230, %r2620, 4;
	add.s64 	%rd231, %rd50, %rd230;
	ld.shared.u32 	%r2443, [%rd231];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2453, %r2450}, {%r421, %r424}, {%r2436}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2462, %r2459}, {%r421, %r424}, {%r2443}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2446, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2448, %r2446, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2451, %r459, %r2453, %r2448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2455, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2457, %r2455, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r459, %r2462, %r2457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2464, %r462, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2467, %r459, %r2450, %r2464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r462, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r459, %r2459, %r2471;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2497, %r2500}, {%r505, %r508}, {%r2451, %r2467}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2504, %r2508}, {%r505, %r508}, {%r2460, %r2474}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2496, %r2497, %r2497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2499, %r2500, %r2500, %r2496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r2504, %r2504, %r2499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2507, %r2508, %r2508, %r2503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r1519, %r2507, %r110;
	// end inline asm
	add.s16 	%rs162, %rs194, -4;
	mul.hi.s16 	%rs163, %rs162, 10923;
	shr.u16 	%rs164, %rs163, 15;
	add.s16 	%rs165, %rs163, %rs164;
	mul.lo.s16 	%rs166, %rs165, 6;
	sub.s16 	%rs167, %rs162, %rs166;
	mul.wide.s16 	%r2621, %rs167, 16;
	add.s32 	%r2622, %r201, %r2621;
	mul.wide.s32 	%rd232, %r2622, 4;
	add.s64 	%rd233, %rd50, %rd232;
	ld.shared.u32 	%r2519, [%rd233];
	add.s32 	%r2623, %r202, %r2621;
	mul.wide.s32 	%rd234, %r2623, 4;
	add.s64 	%rd235, %rd50, %rd234;
	ld.shared.u32 	%r2526, [%rd235];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2536, %r2533}, {%r421, %r424}, {%r2519}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2545, %r2542}, {%r421, %r424}, {%r2526}, {%r1366, %r1366};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2529, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2531, %r2529, %r2533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2534, %r459, %r2536, %r2531;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2538, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2540, %r2538, %r2542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2543, %r459, %r2545, %r2540;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2547, %r462, %r2536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2550, %r459, %r2533, %r2547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2554, %r462, %r2545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2557, %r459, %r2542, %r2554;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2580, %r2583}, {%r505, %r508}, {%r2534, %r2550}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2587, %r2591}, {%r505, %r508}, {%r2543, %r2557}, {%r1366, %r1366}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2579, %r2580, %r2580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2582, %r2583, %r2583, %r2579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2586, %r2587, %r2587, %r2582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2590, %r2591, %r2591, %r2586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r1519, %r2590, %r2511;
	// end inline asm
	add.s32 	%r3057, %r108, 2;
	setp.ne.s32 	%p306, %r3057, 128;
	@%p306 bra 	$L__BB0_180;
// %bb.177:                             // %L20210
                                        //   in Loop: Header=BB0_176 Depth=2
	setp.gt.u32 	%p307, %r290, 7;
	@%p307 bra 	$L__BB0_179;
// %bb.178:                             // %L20270
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2624, %r109, 786432;
	or.b32  	%r2625, %r203, %r2624;
	cvt.u64.u32 	%rd236, %r2625;
	add.s64 	%rd237, %rd236, %rd7;
	mul.hi.s64 	%rd238, %rd237, 3074457345618258603;
	shr.u64 	%rd239, %rd238, 63;
	shr.s64 	%rd240, %rd238, 26;
	add.s64 	%rd241, %rd240, %rd239;
	setp.lt.s64 	%p308, %rd237, 0;
	mul.lo.s64 	%rd242, %rd241, 402653184;
	setp.ne.s64 	%p309, %rd242, %rd237;
	and.pred  	%p310, %p308, %p309;
	selp.s64 	%rd243, -1, 0, %p310;
	add.s64 	%rd244, %rd241, %rd243;
	mul.lo.s64 	%rd245, %rd244, -402653184;
	add.s64 	%rd246, %rd245, %rd237;
	shl.b64 	%rd247, %rd246, 2;
	add.s64 	%rd248, %rd4, %rd247;
	st.global.u32 	[%rd248], %r3059;
$L__BB0_179:                            // %L20427
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3057, 0;
	mov.u32 	%r3059, %r3057;
$L__BB0_180:                            // %oksrem8396
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s16 	%rs168, %rs194, -3;
	mul.hi.s16 	%rs169, %rs168, 10923;
	shr.u16 	%rs170, %rs169, 15;
	add.s16 	%rs171, %rs169, %rs170;
	mul.lo.s16 	%rs172, %rs171, 6;
	sub.s16 	%rs173, %rs168, %rs172;
	mul.wide.s16 	%r2793, %rs173, 16;
	add.s32 	%r2794, %r201, %r2793;
	mul.wide.s32 	%rd249, %r2794, 4;
	add.s64 	%rd251, %rd50, %rd249;
	ld.shared.u32 	%r2631, [%rd251];
	add.s32 	%r2795, %r202, %r2793;
	mul.wide.s32 	%rd252, %r2795, 4;
	add.s64 	%rd253, %rd50, %rd252;
	ld.shared.u32 	%r2638, [%rd253];
	mov.u32 	%r2772, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2648, %r2645}, {%r421, %r424}, {%r2631}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2657, %r2654}, {%r421, %r424}, {%r2638}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2641, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2643, %r2641, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2646, %r459, %r2648, %r2643;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2650, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2652, %r2650, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2655, %r459, %r2657, %r2652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2659, %r462, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2662, %r459, %r2645, %r2659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2666, %r462, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2669, %r459, %r2654, %r2666;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2692, %r2695}, {%r505, %r508}, {%r2646, %r2662}, {%r2772, %r2772}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2699, %r2703}, {%r505, %r508}, {%r2655, %r2669}, {%r2772, %r2772}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2692, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r2695, %r2695, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r2699, %r2699, %r2694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2702, %r2703, %r2703, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2706, %r1519, %r2702, %r3059;
	// end inline asm
	add.s16 	%rs174, %rs194, -2;
	mul.hi.s16 	%rs175, %rs174, 10923;
	shr.u16 	%rs176, %rs175, 15;
	add.s16 	%rs177, %rs175, %rs176;
	mul.lo.s16 	%rs178, %rs177, 6;
	sub.s16 	%rs179, %rs174, %rs178;
	mul.wide.s16 	%r2796, %rs179, 16;
	add.s32 	%r2797, %r201, %r2796;
	mul.wide.s32 	%rd254, %r2797, 4;
	add.s64 	%rd255, %rd50, %rd254;
	ld.shared.u32 	%r2714, [%rd255];
	add.s32 	%r2798, %r202, %r2796;
	mul.wide.s32 	%rd256, %r2798, 4;
	add.s64 	%rd257, %rd50, %rd256;
	ld.shared.u32 	%r2721, [%rd257];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2731, %r2728}, {%r421, %r424}, {%r2714}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2740, %r2737}, {%r421, %r424}, {%r2721}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2724, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r2724, %r2728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r459, %r2731, %r2726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2733, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2735, %r2733, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2738, %r459, %r2740, %r2735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2742, %r462, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r459, %r2728, %r2742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r462, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r459, %r2737, %r2749;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2775, %r2778}, {%r505, %r508}, {%r2729, %r2745}, {%r2772, %r2772}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2782, %r2786}, {%r505, %r508}, {%r2738, %r2752}, {%r2772, %r2772}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2774, %r2775, %r2775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r2778, %r2778, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r2782, %r2782, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r2786, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r1519, %r2785, %r2706;
	// end inline asm
	add.s32 	%r3060, %r3057, 2;
	setp.eq.s32 	%p311, %r3060, 128;
	@%p311 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_184;
$L__BB0_181:                            // %L22173
                                        //   in Loop: Header=BB0_176 Depth=2
	setp.gt.u32 	%p312, %r290, 7;
	@%p312 bra 	$L__BB0_183;
// %bb.182:                             // %L22233
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2799, %r109, 786432;
	or.b32  	%r2800, %r203, %r2799;
	cvt.u64.u32 	%rd258, %r2800;
	add.s64 	%rd259, %rd258, %rd7;
	mul.hi.s64 	%rd260, %rd259, 3074457345618258603;
	shr.u64 	%rd261, %rd260, 63;
	shr.s64 	%rd262, %rd260, 26;
	add.s64 	%rd263, %rd262, %rd261;
	setp.lt.s64 	%p313, %rd259, 0;
	mul.lo.s64 	%rd264, %rd263, 402653184;
	setp.ne.s64 	%p314, %rd264, %rd259;
	and.pred  	%p315, %p313, %p314;
	selp.s64 	%rd265, -1, 0, %p315;
	add.s64 	%rd266, %rd263, %rd265;
	mul.lo.s64 	%rd267, %rd266, -402653184;
	add.s64 	%rd268, %rd267, %rd259;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd270, %rd4, %rd269;
	st.global.u32 	[%rd270], %r3062;
$L__BB0_183:                            // %L22390
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3060, 0;
	mov.u32 	%r3062, %r3060;
$L__BB0_184:                            // %oksrem9247
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s16 	%rs180, %rs194, -1;
	mul.hi.s16 	%rs181, %rs180, 10923;
	shr.u16 	%rs182, %rs181, 15;
	add.s16 	%rs183, %rs181, %rs182;
	mul.lo.s16 	%rs184, %rs183, 6;
	sub.s16 	%rs185, %rs180, %rs184;
	mul.wide.s16 	%r2968, %rs185, 16;
	add.s32 	%r2969, %r201, %r2968;
	mul.wide.s32 	%rd271, %r2969, 4;
	add.s64 	%rd273, %rd50, %rd271;
	ld.shared.u32 	%r2806, [%rd273];
	add.s32 	%r2970, %r202, %r2968;
	mul.wide.s32 	%rd274, %r2970, 4;
	add.s64 	%rd275, %rd50, %rd274;
	ld.shared.u32 	%r2813, [%rd275];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2823, %r2820}, {%r421, %r424}, {%r2806}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2832, %r2829}, {%r421, %r424}, {%r2813}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2816, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2818, %r2816, %r2820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2821, %r459, %r2823, %r2818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2825, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2827, %r2825, %r2829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2830, %r459, %r2832, %r2827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2834, %r462, %r2823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2837, %r459, %r2820, %r2834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2841, %r462, %r2832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2844, %r459, %r2829, %r2841;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2867, %r2870}, {%r505, %r508}, {%r2821, %r2837}, {%r2772, %r2772}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2874, %r2878}, {%r505, %r508}, {%r2830, %r2844}, {%r2772, %r2772}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2866, %r2867, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2869, %r2870, %r2870, %r2866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r2874, %r2874, %r2869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r2878, %r2878, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r1519, %r2877, %r3062;
	// end inline asm
	mul.hi.s16 	%rs186, %rs194, 10923;
	shr.u16 	%rs187, %rs186, 15;
	add.s16 	%rs188, %rs186, %rs187;
	mul.lo.s16 	%rs189, %rs188, 6;
	sub.s16 	%rs190, %rs194, %rs189;
	mul.wide.s16 	%r2971, %rs190, 16;
	add.s32 	%r2972, %r201, %r2971;
	mul.wide.s32 	%rd276, %r2972, 4;
	add.s64 	%rd277, %rd50, %rd276;
	ld.shared.u32 	%r2889, [%rd277];
	add.s32 	%r2973, %r202, %r2971;
	mul.wide.s32 	%rd278, %r2973, 4;
	add.s64 	%rd279, %rd50, %rd278;
	ld.shared.u32 	%r2896, [%rd279];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2906, %r2903}, {%r421, %r424}, {%r2889}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2915, %r2912}, {%r421, %r424}, {%r2896}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2899, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2901, %r2899, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2904, %r459, %r2906, %r2901;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2908, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2910, %r2908, %r2912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r459, %r2915, %r2910;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2917, %r462, %r2906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2920, %r459, %r2903, %r2917;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2924, %r462, %r2915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r459, %r2912, %r2924;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2950, %r2953}, {%r505, %r508}, {%r2904, %r2920}, {%r2772, %r2772}, %r256, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2957, %r2961}, {%r505, %r508}, {%r2913, %r2927}, {%r2772, %r2772}, %r256, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2949, %r2950, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2952, %r2953, %r2953, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r2957, %r2957, %r2952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r2961, %r2961, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1519, %r2960, %r2881;
	// end inline asm
	add.s32 	%r108, %r3060, 2;
	setp.eq.s32 	%p316, %r108, 128;
	@%p316 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_188;
$L__BB0_185:                            // %L24136
                                        //   in Loop: Header=BB0_176 Depth=2
	setp.gt.u32 	%p317, %r290, 7;
	@%p317 bra 	$L__BB0_187;
// %bb.186:                             // %L24196
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2974, %r109, 786432;
	or.b32  	%r2975, %r203, %r2974;
	cvt.u64.u32 	%rd280, %r2975;
	add.s64 	%rd281, %rd280, %rd7;
	mul.hi.s64 	%rd282, %rd281, 3074457345618258603;
	shr.u64 	%rd283, %rd282, 63;
	shr.s64 	%rd284, %rd282, 26;
	add.s64 	%rd285, %rd284, %rd283;
	setp.lt.s64 	%p318, %rd281, 0;
	mul.lo.s64 	%rd286, %rd285, 402653184;
	setp.ne.s64 	%p319, %rd286, %rd281;
	and.pred  	%p320, %p318, %p319;
	selp.s64 	%rd287, -1, 0, %p320;
	add.s64 	%rd288, %rd285, %rd287;
	mul.lo.s64 	%rd289, %rd288, -402653184;
	add.s64 	%rd290, %rd289, %rd281;
	shl.b64 	%rd291, %rd290, 2;
	add.s64 	%rd292, %rd4, %rd291;
	st.global.u32 	[%rd292], %r110;
	bra.uni 	$L__BB0_187;
$L__BB0_190:                            // %L24385
	mov.u32 	%r2977, 0;
	st.global.u32 	[%rd6], %r2977;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd156, exception1909;
	cvta.global.u64 	%rd157, %rd156;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd157;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_238:                            // %post_box_union5148
	mov.u64 	%rd163, exception1909;
	cvta.global.u64 	%rd164, %rd163;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd164;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5143
	mov.u32 	%r2993, 5;
	st.global.u32 	[%rd6], %r2993;
	mov.u64 	%rd323, exception1869;
	cvta.global.u64 	%rd324, %rd323;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd324;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5305
	mov.u32 	%r2992, 5;
	st.global.u32 	[%rd6], %r2992;
	mov.u64 	%rd321, exception1869;
	cvta.global.u64 	%rd322, %rd321;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd322;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5467
	mov.u32 	%r2991, 5;
	st.global.u32 	[%rd6], %r2991;
	mov.u64 	%rd319, exception1869;
	cvta.global.u64 	%rd320, %rd319;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd320;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5629
	mov.u32 	%r2990, 5;
	st.global.u32 	[%rd6], %r2990;
	mov.u64 	%rd317, exception1869;
	cvta.global.u64 	%rd318, %rd317;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd318;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5791
	mov.u32 	%r2989, 5;
	st.global.u32 	[%rd6], %r2989;
	mov.u64 	%rd315, exception1869;
	cvta.global.u64 	%rd316, %rd315;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd316;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5953
	mov.u32 	%r2988, 5;
	st.global.u32 	[%rd6], %r2988;
	mov.u64 	%rd313, exception1869;
	cvta.global.u64 	%rd314, %rd313;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd314;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6115
	mov.u32 	%r2987, 5;
	st.global.u32 	[%rd6], %r2987;
	mov.u64 	%rd311, exception1869;
	cvta.global.u64 	%rd312, %rd311;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd312;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6277
	mov.u32 	%r2986, 5;
	st.global.u32 	[%rd6], %r2986;
	mov.u64 	%rd309, exception1869;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6439
	mov.u32 	%r2985, 5;
	st.global.u32 	[%rd6], %r2985;
	mov.u64 	%rd307, exception1869;
	cvta.global.u64 	%rd308, %rd307;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd308;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6601
	mov.u32 	%r2984, 5;
	st.global.u32 	[%rd6], %r2984;
	mov.u64 	%rd305, exception1869;
	cvta.global.u64 	%rd306, %rd305;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd306;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6789
	mov.u32 	%r2983, 5;
	st.global.u32 	[%rd6], %r2983;
	mov.u64 	%rd303, exception1869;
	cvta.global.u64 	%rd304, %rd303;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd304;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6951
	mov.u32 	%r2982, 5;
	st.global.u32 	[%rd6], %r2982;
	mov.u64 	%rd301, exception1869;
	cvta.global.u64 	%rd302, %rd301;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd302;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7113
	mov.u32 	%r2981, 5;
	st.global.u32 	[%rd6], %r2981;
	mov.u64 	%rd299, exception1869;
	cvta.global.u64 	%rd300, %rd299;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd300;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7275
	mov.u32 	%r2980, 5;
	st.global.u32 	[%rd6], %r2980;
	mov.u64 	%rd297, exception1869;
	cvta.global.u64 	%rd298, %rd297;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd298;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7437
	mov.u32 	%r2979, 5;
	st.global.u32 	[%rd6], %r2979;
	mov.u64 	%rd295, exception1869;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7599
	mov.u32 	%r2978, 5;
	st.global.u32 	[%rd6], %r2978;
	mov.u64 	%rd293, exception1869;
	cvta.global.u64 	%rd294, %rd293;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd294;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L167
	mov.u32 	%r2995, 2;
	st.global.u32 	[%rd6], %r2995;
	mov.u64 	%rd327, exception1869;
	cvta.global.u64 	%rd328, %rd327;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd328;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L311
	mov.u32 	%r2994, 3;
	st.global.u32 	[%rd6], %r2994;
	mov.u64 	%rd325, exception1869;
	cvta.global.u64 	%rd326, %rd325;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd326;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1159
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r290, %r1};
	st.local.v2.u32 	[%rd5+8], {%r3, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r518, [retval0+0];
	} // callseq 49
	mov.u32 	%r520, 4;
	st.global.u32 	[%rd6], %r520;
	mov.u64 	%rd26, exception1869;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r280;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
