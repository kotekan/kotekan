// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2604[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2644[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<251>;
	.reg .b32 	%r<3065>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<374>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r263, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd11, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r268, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r268, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r264, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mul.lo.s32 	%r4, %r3, 192;
	mov.u32 	%r269, %tid.x;
	add.s32 	%r270, %r2, %r4;
	or.b32  	%r271, %r270, %r269;
	mul.wide.u32 	%rd18, %r271, 4;
	add.s64 	%rd5, %rd12, %rd18;
	mov.u32 	%r272, 1;
	st.global.u32 	[%rd5], %r272;
	setp.lt.s32 	%p5, %r264, 0;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L115
	ld.param.u32 	%r265, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r265, %r264;
	setp.gt.s32 	%p7, %r265, 32768;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L125
	ld.param.u32 	%r266, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r265, %r264;
	mad.lo.s32 	%r273, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r274, %r273, %r273, 4;
	setp.gt.u32 	%p9, %r274, 89478484;
	setp.lt.s32 	%p10, %r266, 0;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L131
	ld.param.u32 	%r267, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r267, %r266;
	setp.lt.s32 	%p13, %r267, 2049;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_6;
$L__BB0_162:                            // %pass40
	sub.s32 	%r275, %r267, %r266;
	shr.s32 	%r276, %r6, 31;
	shr.u32 	%r277, %r276, 25;
	add.s32 	%r278, %r6, %r277;
	shr.s32 	%r279, %r278, 7;
	setp.ne.s32 	%p15, %r275, %r279;
	@%p15 bra 	$L__BB0_6;
// %bb.163:                             // %pass90
	and.b32  	%r148, %r269, 3;
	shr.u32 	%r149, %r269, 2;
	mul.lo.s32 	%r280, %r148, %r149;
	and.b32  	%r281, %r280, 7;
	cvt.rn.f32.s32 	%f205, %r281;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p16, %f788, 0f40000000;
	setp.gtu.f32 	%p292, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p16 bra 	$L__BB0_175;
// %bb.164:
	@%p292 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_165;
$L__BB0_171:
	mov.b32 	%r151, %f788;
	and.b32  	%r282, %r151, 8388607;
	or.b32  	%r3048, %r282, 1065353216;
	mov.b32 	%f783, %r3048;
	add.s32 	%r283, %r151, -1073741824;
	and.b32  	%r3049, %r283, -8388608;
	setp.eq.s32 	%p23, %r3049, 0;
	@%p23 bra 	$L__BB0_174;
// %bb.172:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_173:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r284, %r3049, 192937984;
	add.s32 	%r285, %r3048, %r284;
	mov.b32 	%f217, %r285;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3049, %r3049, %r284;
	mov.b32 	%r3048, %f783;
	setp.ne.s32 	%p24, %r3049, 0;
	setp.ne.s32 	%p25, %r3048, 0;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_173;
$L__BB0_174:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p27, %r151, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p27;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_175;
$L__BB0_165:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r150, %f172;
	setp.lt.u32 	%p18, %r150, 1073741824;
	@%p18 bra 	$L__BB0_170;
// %bb.166:
	setp.lt.u32 	%p19, %r150, -2147483647;
	@%p19 bra 	$L__BB0_168;
// %bb.167:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p22, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p22;
	bra.uni 	$L__BB0_170;
$L__BB0_168:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p20, %f172, 0f40800000;
	@%p20 bra 	$L__BB0_170;
// %bb.169:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p21, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p21;
$L__BB0_170:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_175:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p28, %f226, 0f7F800000;
	mov.b32 	%r286, %f169;
	and.b32  	%r158, %r286, -2147483648;
	@%p28 bra 	$L__BB0_177;
// %bb.176:
	mov.b32 	%r287, %f784;
	or.b32  	%r288, %r158, %r287;
	mov.b32 	%f784, %r288;
$L__BB0_177:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r295, %f227;
	and.b32  	%r296, %r295, -2147483648;
	or.b32  	%r297, %r296, 1056964608;
	mov.b32 	%f228, %r297;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p29, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p29;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p30, %f231, 0f3F000000;
	shl.b32 	%r161, %r269, 1;
	and.b32  	%r162, %r161, 2;
	mul.lo.s32 	%r303, %r162, %r149;
	cvt.rn.f32.s32 	%f259, %r303;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p36, %f734, 0f40000000;
	@%p36 bra 	$L__BB0_18;
// %bb.7:
	setp.gtu.f32 	%p37, %f734, 0f4B800000;
	@%p37 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r8, %f734;
	and.b32  	%r304, %r8, 8388607;
	or.b32  	%r2997, %r304, 1065353216;
	mov.b32 	%f733, %r2997;
	add.s32 	%r305, %r8, -1073741824;
	and.b32  	%r2998, %r305, -8388608;
	setp.eq.s32 	%p43, %r2998, 0;
	@%p43 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r306, %r2998, 192937984;
	add.s32 	%r307, %r2997, %r306;
	mov.b32 	%f271, %r307;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2998, %r2998, %r306;
	mov.b32 	%r2997, %f733;
	setp.ne.s32 	%p44, %r2998, 0;
	setp.ne.s32 	%p45, %r2997, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p47, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p38, %r7, 1073741824;
	@%p38 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p39, %r7, -2147483647;
	@%p39 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p42, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p42;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p40, %f2, 0f40800000;
	@%p40 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p41, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p41;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p30;
	or.b32  	%r163, %r162, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p48, %f280, 0f7F800000;
	@%p48 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r308, %f186;
	and.b32  	%r309, %r308, -2147483648;
	mov.b32 	%r310, %f734;
	or.b32  	%r311, %r309, %r310;
	mov.b32 	%f734, %r311;
$L__BB0_20:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r312, %f282;
	and.b32  	%r313, %r312, -2147483648;
	or.b32  	%r314, %r313, 1056964608;
	mov.b32 	%f283, %r314;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p49, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p49;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p50, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p50;
	setp.eq.s32 	%p56, %r163, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p56 bra 	$L__BB0_36;
// %bb.21:                              // %L377
	mul.lo.s32 	%r320, %r163, %r149;
	mul.hi.u32 	%r321, %r320, -1431655765;
	shr.u32 	%r322, %r321, 4;
	mul.lo.s32 	%r323, %r322, 24;
	sub.s32 	%r324, %r320, %r323;
	cvt.rn.f32.s32 	%f311, %r324;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p57, %f738, 0f40000000;
	@%p57 bra 	$L__BB0_33;
// %bb.22:
	setp.gtu.f32 	%p58, %f738, 0f4B800000;
	@%p58 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_23;
$L__BB0_29:
	mov.b32 	%r16, %f738;
	and.b32  	%r325, %r16, 8388607;
	or.b32  	%r2999, %r325, 1065353216;
	mov.b32 	%f737, %r2999;
	add.s32 	%r326, %r16, -1073741824;
	and.b32  	%r3000, %r326, -8388608;
	setp.eq.s32 	%p64, %r3000, 0;
	@%p64 bra 	$L__BB0_32;
// %bb.30:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_31:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r327, %r3000, 192937984;
	add.s32 	%r328, %r2999, %r327;
	mov.b32 	%f323, %r328;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3000, %r3000, %r327;
	mov.b32 	%r2999, %f737;
	setp.ne.s32 	%p65, %r3000, 0;
	setp.ne.s32 	%p66, %r2999, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_31;
$L__BB0_32:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p68, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_33;
$L__BB0_23:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p59, %r15, 1073741824;
	@%p59 bra 	$L__BB0_28;
// %bb.24:
	setp.lt.u32 	%p60, %r15, -2147483647;
	@%p60 bra 	$L__BB0_26;
// %bb.25:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p63, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p63;
	bra.uni 	$L__BB0_28;
$L__BB0_26:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p61, %f21, 0f40800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p62, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p62;
$L__BB0_28:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_33:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p69, %f332, 0f7F800000;
	@%p69 bra 	$L__BB0_35;
// %bb.34:
	mov.b32 	%r329, %f18;
	and.b32  	%r330, %r329, -2147483648;
	mov.b32 	%r331, %f738;
	or.b32  	%r332, %r330, %r331;
	mov.b32 	%f738, %r332;
$L__BB0_35:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r333, %f333;
	and.b32  	%r334, %r333, -2147483648;
	or.b32  	%r335, %r334, 1056964608;
	mov.b32 	%f334, %r335;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p70, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p70;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p71, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p71;
	cvt.rzi.s32.f32 	%r336, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r337, %r336, 1;
	setp.eq.b32 	%p72, %r337, 1;
	selp.f32 	%f352, %f350, %f351, %p72;
	selp.f32 	%f353, %f351, %f350, %p72;
	and.b32  	%r338, %r336, 2;
	setp.eq.s32 	%p73, %r338, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p73;
	add.s32 	%r339, %r336, 1;
	and.b32  	%r340, %r339, 2;
	setp.eq.s32 	%p74, %r340, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p74;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p75, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p75;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p76, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p76;
$L__BB0_36:                             // %L411
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r25, %r149, 3;
	setp.eq.s32 	%p77, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p77 bra 	$L__BB0_52;
// %bb.37:                              // %L449
	mul.lo.s32 	%r347, %r162, %r25;
	cvt.u16.u32 	%rs11, %r347;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p78, %f744, 0f40000000;
	@%p78 bra 	$L__BB0_49;
// %bb.38:
	setp.gtu.f32 	%p79, %f744, 0f4B800000;
	@%p79 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_39;
$L__BB0_45:
	mov.b32 	%r27, %f744;
	and.b32  	%r348, %r27, 8388607;
	or.b32  	%r3001, %r348, 1065353216;
	mov.b32 	%f743, %r3001;
	add.s32 	%r349, %r27, -1073741824;
	and.b32  	%r3002, %r349, -8388608;
	setp.eq.s32 	%p85, %r3002, 0;
	@%p85 bra 	$L__BB0_48;
// %bb.46:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_47:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r350, %r3002, 192937984;
	add.s32 	%r351, %r3001, %r350;
	mov.b32 	%f376, %r351;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3002, %r3002, %r350;
	mov.b32 	%r3001, %f743;
	setp.ne.s32 	%p86, %r3002, 0;
	setp.ne.s32 	%p87, %r3001, 0;
	and.pred  	%p88, %p86, %p87;
	@%p88 bra 	$L__BB0_47;
$L__BB0_48:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p89, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p89;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_49;
$L__BB0_39:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p80, %r26, 1073741824;
	@%p80 bra 	$L__BB0_44;
// %bb.40:
	setp.lt.u32 	%p81, %r26, -2147483647;
	@%p81 bra 	$L__BB0_42;
// %bb.41:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p84, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p84;
	bra.uni 	$L__BB0_44;
$L__BB0_42:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p82, %f42, 0f40800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p83, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p83;
$L__BB0_44:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_49:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p90, %f385, 0f7F800000;
	@%p90 bra 	$L__BB0_51;
// %bb.50:
	mov.b32 	%r352, %f39;
	and.b32  	%r353, %r352, -2147483648;
	mov.b32 	%r354, %f744;
	or.b32  	%r355, %r353, %r354;
	mov.b32 	%f744, %r355;
$L__BB0_51:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r356, %f386;
	and.b32  	%r357, %r356, -2147483648;
	or.b32  	%r358, %r357, 1056964608;
	mov.b32 	%f387, %r358;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p91, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p91;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p92, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p92;
	cvt.rzi.s32.f32 	%r359, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r360, %r359, 1;
	setp.eq.b32 	%p93, %r360, 1;
	selp.f32 	%f405, %f403, %f404, %p93;
	selp.f32 	%f406, %f404, %f403, %p93;
	and.b32  	%r361, %r359, 2;
	setp.eq.s32 	%p94, %r361, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p94;
	add.s32 	%r362, %r359, 1;
	and.b32  	%r363, %r362, 2;
	setp.eq.s32 	%p95, %r363, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p95;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p96, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p96;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p97, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p97;
$L__BB0_52:                             // %L483
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p100, %p56, %p77;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p100 bra 	$L__BB0_68;
// %bb.53:                              // %L491
	mul.lo.s32 	%r364, %r163, %r25;
	mul.hi.u32 	%r365, %r364, -1431655765;
	shr.u32 	%r366, %r365, 1;
	mul.lo.s32 	%r367, %r366, 3;
	sub.s32 	%r368, %r364, %r367;
	cvt.rn.f32.s32 	%f417, %r368;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p101, %f750, 0f40000000;
	@%p101 bra 	$L__BB0_65;
// %bb.54:
	setp.gtu.f32 	%p102, %f750, 0f4B800000;
	@%p102 bra 	$L__BB0_61;
	bra.uni 	$L__BB0_55;
$L__BB0_61:
	mov.b32 	%r35, %f750;
	and.b32  	%r369, %r35, 8388607;
	or.b32  	%r3003, %r369, 1065353216;
	mov.b32 	%f749, %r3003;
	add.s32 	%r370, %r35, -1073741824;
	and.b32  	%r3004, %r370, -8388608;
	setp.eq.s32 	%p108, %r3004, 0;
	@%p108 bra 	$L__BB0_64;
// %bb.62:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_63:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r3004, 192937984;
	add.s32 	%r372, %r3003, %r371;
	mov.b32 	%f429, %r372;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3004, %r3004, %r371;
	mov.b32 	%r3003, %f749;
	setp.ne.s32 	%p109, %r3004, 0;
	setp.ne.s32 	%p110, %r3003, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_63;
$L__BB0_64:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p112, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_65;
$L__BB0_55:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p103, %r34, 1073741824;
	@%p103 bra 	$L__BB0_60;
// %bb.56:
	setp.lt.u32 	%p104, %r34, -2147483647;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p107, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p107;
	bra.uni 	$L__BB0_60;
$L__BB0_58:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p105, %f63, 0f40800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p106, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p106;
$L__BB0_60:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_65:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p113, %f438, 0f7F800000;
	@%p113 bra 	$L__BB0_67;
// %bb.66:
	mov.b32 	%r373, %f60;
	and.b32  	%r374, %r373, -2147483648;
	mov.b32 	%r375, %f750;
	or.b32  	%r376, %r374, %r375;
	mov.b32 	%f750, %r376;
$L__BB0_67:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r377, %f439;
	and.b32  	%r378, %r377, -2147483648;
	or.b32  	%r379, %r378, 1056964608;
	mov.b32 	%f440, %r379;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p114, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p114;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p115, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p115;
	cvt.rzi.s32.f32 	%r380, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r381, %r380, 1;
	setp.eq.b32 	%p116, %r381, 1;
	selp.f32 	%f458, %f456, %f457, %p116;
	selp.f32 	%f459, %f457, %f456, %p116;
	and.b32  	%r382, %r380, 2;
	setp.eq.s32 	%p117, %r382, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p117;
	add.s32 	%r383, %r380, 1;
	and.b32  	%r384, %r383, 2;
	setp.eq.s32 	%p118, %r384, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p118;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p119, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p119;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p120, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p120;
$L__BB0_68:                             // %L525
	cvt.rzi.s32.f32 	%r298, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r42, %r269, 2;
	setp.eq.s32 	%p121, %r42, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p121 bra 	$L__BB0_70;
// %bb.69:                              // %L534
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_70:                             // %L536
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r299, %r298, 1;
	cvt.rzi.s32.f32 	%r315, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p16 bra 	$L__BB0_185;
// %bb.71:
	@%p292 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_72;
$L__BB0_181:
	mov.b32 	%r165, %f788;
	and.b32  	%r391, %r165, 8388607;
	or.b32  	%r3050, %r391, 1065353216;
	mov.b32 	%f787, %r3050;
	add.s32 	%r392, %r165, -1073741824;
	and.b32  	%r3051, %r392, -8388608;
	setp.eq.s32 	%p129, %r3051, 0;
	@%p129 bra 	$L__BB0_184;
// %bb.182:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_183:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r393, %r3051, 192937984;
	add.s32 	%r394, %r3050, %r393;
	mov.b32 	%f479, %r394;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3051, %r3051, %r393;
	mov.b32 	%r3050, %f787;
	setp.ne.s32 	%p130, %r3051, 0;
	setp.ne.s32 	%p131, %r3050, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_183;
$L__BB0_184:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p133, %r165, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_185;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r164, %f189;
	setp.lt.u32 	%p124, %r164, 1073741824;
	@%p124 bra 	$L__BB0_180;
// %bb.73:
	setp.lt.u32 	%p125, %r164, -2147483647;
	@%p125 bra 	$L__BB0_178;
// %bb.74:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p128, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p128;
	bra.uni 	$L__BB0_180;
$L__BB0_178:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p126, %f189, 0f40800000;
	@%p126 bra 	$L__BB0_180;
// %bb.179:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p127, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p127;
$L__BB0_180:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_185:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p31, %r299, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r316, %r315, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p134, %f488, 0f7F800000;
	@%p134 bra 	$L__BB0_187;
// %bb.186:
	mov.b32 	%r395, %f788;
	or.b32  	%r396, %r158, %r395;
	mov.b32 	%f788, %r396;
$L__BB0_187:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p31;
	and.b32  	%r300, %r298, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p51, %r316, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r403, %f489;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f490, %r405;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p135, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p135;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p136, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p136;
	cvt.rzi.s32.f32 	%r406, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p137, %r407, 1;
	selp.f32 	%f508, %f506, %f507, %p137;
	and.b32  	%r408, %r406, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p142, %f760, 0f40000000;
	@%p142 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p143, %f760, 0f4B800000;
	@%p143 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r46, %f760;
	and.b32  	%r411, %r46, 8388607;
	or.b32  	%r3005, %r411, 1065353216;
	mov.b32 	%f759, %r3005;
	add.s32 	%r412, %r46, -1073741824;
	and.b32  	%r3006, %r412, -8388608;
	setp.eq.s32 	%p149, %r3006, 0;
	@%p149 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r413, %r3006, 192937984;
	add.s32 	%r414, %r3005, %r413;
	mov.b32 	%f532, %r414;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3006, %r3006, %r413;
	mov.b32 	%r3005, %f759;
	setp.ne.s32 	%p150, %r3006, 0;
	setp.ne.s32 	%p151, %r3005, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p153, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p144, %r45, 1073741824;
	@%p144 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p145, %r45, -2147483647;
	@%p145 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p148;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p147;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p32, %r300, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r301, %r298, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p51;
	and.b32  	%r317, %r315, 2;
	setp.eq.s32 	%p138, %r408, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r409, %r406, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p154, %f541, 0f7F800000;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r415, %f203;
	and.b32  	%r416, %r415, -2147483648;
	mov.b32 	%r417, %f760;
	or.b32  	%r418, %r416, %r417;
	mov.b32 	%f760, %r418;
$L__BB0_88:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p31;
	selp.f32 	%f249, %f246, %f248, %p32;
	and.b32  	%r302, %r301, 2;
	setp.eq.f32 	%p34, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p52, %r317, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r318, %r315, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p137;
	selp.f32 	%f511, %f508, %f510, %p138;
	and.b32  	%r410, %r409, 2;
	setp.eq.f32 	%p140, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r419, %f542;
	and.b32  	%r420, %r419, -2147483648;
	or.b32  	%r421, %r420, 1056964608;
	mov.b32 	%f543, %r421;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p155, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p155;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p156, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p156;
	cvt.rzi.s32.f32 	%r422, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r423, %r422, 1;
	setp.eq.b32 	%p157, %r423, 1;
	selp.f32 	%f561, %f559, %f560, %p157;
	and.b32  	%r424, %r422, 2;
	setp.eq.s32 	%p158, %r424, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r425, %r422, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r149;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p162, %f764, 0f40000000;
	@%p162 bra 	$L__BB0_100;
// %bb.89:
	setp.gtu.f32 	%p163, %f764, 0f4B800000;
	@%p163 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r54, %f764;
	and.b32  	%r427, %r54, 8388607;
	or.b32  	%r3007, %r427, 1065353216;
	mov.b32 	%f763, %r3007;
	add.s32 	%r428, %r54, -1073741824;
	and.b32  	%r3008, %r428, -8388608;
	setp.eq.s32 	%p169, %r3008, 0;
	@%p169 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r429, %r3008, 192937984;
	add.s32 	%r430, %r3007, %r429;
	mov.b32 	%f584, %r430;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3008, %r3008, %r429;
	mov.b32 	%r3007, %f763;
	setp.ne.s32 	%p170, %r3008, 0;
	setp.ne.s32 	%p171, %r3007, 0;
	and.pred  	%p172, %p170, %p171;
	@%p172 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p173, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p173;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p164, %r53, 1073741824;
	@%p164 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p165, %r53, -2147483647;
	@%p165 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p168, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p168;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p166, %f107, 0f40800000;
	@%p166 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p167, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p167;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p33, %r302, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p34;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p51;
	selp.f32 	%f304, %f301, %f303, %p52;
	and.b32  	%r319, %r318, 2;
	setp.eq.f32 	%p54, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p139, %r410, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p140;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p157;
	selp.f32 	%f564, %f561, %f563, %p158;
	and.b32  	%r426, %r425, 2;
	setp.eq.f32 	%p160, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p174, %f593, 0f7F800000;
	@%p174 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r431, %f104;
	and.b32  	%r432, %r431, -2147483648;
	mov.b32 	%r433, %f764;
	or.b32  	%r434, %r432, %r433;
	mov.b32 	%f764, %r434;
$L__BB0_102:                            // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p33;
	setp.gt.f32 	%p35, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p53, %r319, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p54;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p139;
	setp.gt.f32 	%p141, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p159, %r426, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f102, %f569, %f564, %p160;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r441, %f595;
	and.b32  	%r442, %r441, -2147483648;
	or.b32  	%r443, %r442, 1056964608;
	mov.b32 	%f596, %r443;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p175, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p175;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p176, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p176;
	cvt.rzi.s32.f32 	%r444, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r445, %r444, 1;
	setp.eq.b32 	%p177, %r445, 1;
	selp.f32 	%f614, %f612, %f613, %p177;
	selp.f32 	%f615, %f613, %f612, %p177;
	and.b32  	%r446, %r444, 2;
	setp.eq.s32 	%p178, %r446, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p178;
	add.s32 	%r447, %r444, 1;
	and.b32  	%r448, %r447, 2;
	setp.eq.s32 	%p179, %r448, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p180, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p180;
	abs.f32 	%f623, %f764;
	and.b32  	%r64, %r269, 1;
	shr.u32 	%r65, %r269, 4;
	setp.ne.s32 	%p182, %r64, %r65;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p182 bra 	$L__BB0_118;
// %bb.103:                             // %L741
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p183, %f768, 0f40000000;
	@%p183 bra 	$L__BB0_115;
// %bb.104:
	setp.gtu.f32 	%p184, %f768, 0f4B800000;
	@%p184 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r67, %f768;
	and.b32  	%r449, %r67, 8388607;
	or.b32  	%r3009, %r449, 1065353216;
	mov.b32 	%f767, %r3009;
	add.s32 	%r450, %r67, -1073741824;
	and.b32  	%r3010, %r450, -8388608;
	setp.eq.s32 	%p190, %r3010, 0;
	@%p190 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r451, %r3010, 192937984;
	add.s32 	%r452, %r3009, %r451;
	mov.b32 	%f638, %r452;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3010, %r3010, %r451;
	mov.b32 	%r3009, %f767;
	setp.ne.s32 	%p191, %r3010, 0;
	setp.ne.s32 	%p192, %r3009, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p194, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p185, %r66, 1073741824;
	@%p185 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p186, %r66, -2147483647;
	@%p186 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p189, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p189;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p187, %f124, 0f40800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p188, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p188;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p195, %f647, 0f7F800000;
	@%p195 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r453, %f121;
	and.b32  	%r454, %r453, -2147483648;
	mov.b32 	%r455, %f768;
	or.b32  	%r456, %r454, %r455;
	mov.b32 	%f768, %r456;
$L__BB0_117:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r457, %f648;
	and.b32  	%r458, %r457, -2147483648;
	or.b32  	%r459, %r458, 1056964608;
	mov.b32 	%f649, %r459;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p196, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p196;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p197, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p197;
	cvt.rzi.s32.f32 	%r460, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r461, %r460, 1;
	setp.eq.b32 	%p198, %r461, 1;
	selp.f32 	%f667, %f665, %f666, %p198;
	selp.f32 	%f668, %f666, %f665, %p198;
	and.b32  	%r462, %r460, 2;
	setp.eq.s32 	%p199, %r462, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p199;
	add.s32 	%r463, %r460, 1;
	and.b32  	%r464, %r463, 2;
	setp.eq.s32 	%p200, %r464, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p200;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p201, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p201;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p202, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p202;
$L__BB0_118:                            // %L780
	selp.f32 	%f258, %f257, %f252, %p35;
	selp.f32 	%f306, %f302, %f305, %p53;
	setp.gt.f32 	%p55, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p141;
	selp.f32 	%f567, %f562, %f566, %p159;
	setp.gt.f32 	%p161, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p179;
	setp.gt.f32 	%p181, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r63, %r149, 1;
	mov.f32 	%f781, %f776;
	@%p182 bra 	$L__BB0_134;
// %bb.119:                             // %L783
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p204, %f774, 0f40000000;
	@%p204 bra 	$L__BB0_131;
// %bb.120:
	setp.gtu.f32 	%p205, %f774, 0f4B800000;
	@%p205 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_121;
$L__BB0_127:
	mov.b32 	%r75, %f774;
	and.b32  	%r465, %r75, 8388607;
	or.b32  	%r3011, %r465, 1065353216;
	mov.b32 	%f773, %r3011;
	add.s32 	%r466, %r75, -1073741824;
	and.b32  	%r3012, %r466, -8388608;
	setp.eq.s32 	%p211, %r3012, 0;
	@%p211 bra 	$L__BB0_130;
// %bb.128:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_129:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r467, %r3012, 192937984;
	add.s32 	%r468, %r3011, %r467;
	mov.b32 	%f691, %r468;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3012, %r3012, %r467;
	mov.b32 	%r3011, %f773;
	setp.ne.s32 	%p212, %r3012, 0;
	setp.ne.s32 	%p213, %r3011, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_129;
$L__BB0_130:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p215, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_131;
$L__BB0_121:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p206, %r74, 1073741824;
	@%p206 bra 	$L__BB0_126;
// %bb.122:
	setp.lt.u32 	%p207, %r74, -2147483647;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p210, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p210;
	bra.uni 	$L__BB0_126;
$L__BB0_124:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p208, %f145, 0f40800000;
	@%p208 bra 	$L__BB0_126;
// %bb.125:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p209, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p209;
$L__BB0_126:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_131:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p216, %f700, 0f7F800000;
	@%p216 bra 	$L__BB0_133;
// %bb.132:
	mov.b32 	%r469, %f142;
	and.b32  	%r470, %r469, -2147483648;
	mov.b32 	%r471, %f774;
	or.b32  	%r472, %r470, %r471;
	mov.b32 	%f774, %r472;
$L__BB0_133:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r473, %f701;
	and.b32  	%r474, %r473, -2147483648;
	or.b32  	%r475, %r474, 1056964608;
	mov.b32 	%f702, %r475;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p217, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p217;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p218, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p218;
	cvt.rzi.s32.f32 	%r476, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r477, %r476, 1;
	setp.eq.b32 	%p219, %r477, 1;
	selp.f32 	%f720, %f718, %f719, %p219;
	selp.f32 	%f721, %f719, %f718, %p219;
	and.b32  	%r478, %r476, 2;
	setp.eq.s32 	%p220, %r478, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p220;
	add.s32 	%r479, %r476, 1;
	and.b32  	%r480, %r479, 2;
	setp.eq.s32 	%p221, %r480, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p221;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p222, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p222;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p223, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p223;
$L__BB0_134:                            // %L817
	mov.b32 	%r291, %f258;
	mov.b32 	%r294, %f255;
	selp.f32 	%f17, %f310, %f306, %p55;
	mov.b32 	%r399, %f520;
	mov.b32 	%r402, %f517;
	selp.f32 	%f103, %f571, %f567, %p161;
	selp.f32 	%f625, %f624, %f619, %p181;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p121 bra 	$L__BB0_136;
// %bb.135:                             // %L826
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_136:                            // %L828
	xor.b32  	%r290, %r294, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mov.b32 	%r342, %f17;
	mov.b32 	%r343, %f740;
	mov.b32 	%r345, %f16;
	mov.b32 	%r346, %f741;
	mov.b32 	%r386, %f754;
	mov.b32 	%r387, %f756;
	mov.b32 	%r389, %f755;
	mov.b32 	%r390, %f757;
	xor.b32  	%r398, %r402, -2147483648;
	mov.b32 	%r437, %f625;
	mov.b32 	%r436, %f103;
	mov.b32 	%r440, %f622;
	mov.b32 	%r439, %f102;
	mov.b32 	%r482, %f778;
	mov.b32 	%r483, %f780;
	mov.b32 	%r485, %f779;
	mov.b32 	%r486, %f781;
	setp.gt.u32 	%p225, %r269, 15;
	mov.u32 	%r174, 999999999;
	@%p225 bra 	$L__BB0_138;
// %bb.137:                             // %L858
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mad.lo.s32 	%r488, %r269, 6, %r1;
	cvt.u16.u32 	%rs17, %r488;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r489, %rs22;
	and.b32  	%r490, %r489, 255;
	mul.wide.u32 	%rd19, %r490, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.u32 	%r491, [%rd20];
	cvt.s32.s16 	%r492, %r491;
	shr.s32 	%r493, %r491, 16;
	mul.lo.s32 	%r494, %r493, 290;
	mad.lo.s32 	%r174, %r492, 33, %r494;
$L__BB0_138:                            // %pass426
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r289, %r291, %r290;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r292, %r294, %r291;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r341, %r343, %r342;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r344, %r346, %r345;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r385, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r388, %r390, %r389;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r397, %r399, %r398;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r399;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r435, %r437, %r436;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r438, %r440, %r439;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r481, %r483, %r482;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r484, %r486, %r485;
	// end inline asm
	shl.b32 	%r496, %r1, 1;
	and.b32  	%r497, %r496, 2;
	shr.u32 	%r498, %r269, 3;
	bfe.u32 	%r499, %r269, 3, 1;
	or.b32  	%r500, %r497, %r499;
	mul.lo.s32 	%r501, %r148, 24;
	and.b32  	%r502, %r498, 2;
	or.b32  	%r175, %r502, %r63;
	cvt.u16.u32 	%rs25, %r175;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r503, %rs29;
	and.b32  	%r504, %r503, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r505, %rs30, 8;
	add.s32 	%r506, %r501, %r4;
	or.b32  	%r507, %r506, %r500;
	add.s32 	%r508, %r507, %r505;
	mul.wide.u32 	%rd21, %r508, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.u32 	%r176, [%rd22];
	cvt.u64.u32 	%rd23, %r505;
	cvt.u64.u32 	%rd24, %r500;
	cvt.u64.u32 	%rd25, %r501;
	cvt.u64.u32 	%rd26, %r4;
	add.s64 	%rd27, %rd26, %rd25;
	add.s64 	%rd28, %rd27, %rd24;
	add.s64 	%rd29, %rd28, %rd23;
	shl.b64 	%rd30, %rd29, 2;
	add.s64 	%rd31, %rd2, %rd30;
	ld.global.u32 	%r177, [%rd31+16];
	ld.global.u32 	%r178, [%rd31+384];
	ld.global.u32 	%r179, [%rd31+400];
	shl.b32 	%r509, %r1, 2;
	or.b32  	%r180, %r498, %r509;
	shl.b32 	%r510, %r269, 2;
	shl.b32 	%r511, %r3, 5;
	and.b32  	%r512, %r510, 28;
	or.b32  	%r181, %r512, %r511;
	or.b32  	%r513, %r498, 24;
	add.s32 	%r182, %r513, %r509;
	and.b32  	%r183, %r269, 4;
	bfe.s32 	%r514, %r269, 2, 1;
	shl.b32 	%r515, %r269, 4;
	and.b32  	%r516, %r161, 8;
	or.b32  	%r517, %r516, %r515;
	bfe.u32 	%r518, %r517, 3, 3;
	mul.lo.s32 	%r184, %r518, 260;
	cvt.u16.u32 	%rs31, %r269;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r519, %rs36;
	and.b32  	%r185, %r519, 255;
	add.s32 	%r520, %r1, 6;
	add.s32 	%r521, %r2, 192;
	and.b32  	%r522, %r521, 224;
	shr.u32 	%r523, %r520, 3;
	mad.lo.s32 	%r186, %r523, 260, %r522;
	add.s32 	%r524, %r1, 12;
	add.s32 	%r525, %r2, 128;
	and.b32  	%r526, %r525, 224;
	shr.u32 	%r527, %r524, 3;
	mad.lo.s32 	%r187, %r527, 260, %r526;
	add.s32 	%r528, %r1, 18;
	add.s32 	%r529, %r2, 64;
	and.b32  	%r530, %r529, 224;
	shr.u32 	%r531, %r528, 3;
	mad.lo.s32 	%r188, %r531, 260, %r530;
	or.b32  	%r189, %r2, 780;
	add.s32 	%r532, %r1, 30;
	shr.u32 	%r533, %r532, 3;
	mad.lo.s32 	%r190, %r533, 260, %r522;
	add.s32 	%r534, %r1, 36;
	shr.u32 	%r535, %r534, 3;
	mad.lo.s32 	%r191, %r535, 260, %r526;
	add.s32 	%r536, %r1, 42;
	shr.u32 	%r537, %r536, 3;
	mad.lo.s32 	%r192, %r537, 260, %r530;
	or.b32  	%r193, %r2, 1560;
	add.s32 	%r538, %r1, 54;
	shr.u32 	%r539, %r538, 3;
	mad.lo.s32 	%r194, %r539, 260, %r522;
	add.s32 	%r540, %r1, 60;
	bfe.u32 	%r541, %r540, 3, 3;
	mad.lo.s32 	%r195, %r541, 260, %r526;
	shr.u32 	%r542, %r1, 1;
	cvt.u16.u32 	%rs37, %r542;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r543, %rs42;
	and.b32  	%r196, %r543, 255;
	mul.lo.s32 	%r544, %r148, 870;
	mad.lo.s32 	%r545, %r500, 33, %r544;
	mad.lo.s32 	%r197, %r504, 290, %r545;
	add.s32 	%r198, %r197, 132;
	setp.lt.u32 	%p227, %r269, 4;
	setp.eq.s32 	%p228, %r149, 1;
	setp.eq.s32 	%p229, %r149, 4;
	setp.eq.s32 	%p230, %r149, 5;
	bfe.s32 	%r546, %r269, 3, 1;
	and.b32  	%r199, %r546, 98;
	setp.eq.s32 	%p231, %r64, 0;
	selp.b32 	%r200, 0, 784, %p231;
	selp.b32 	%r201, 0, 392, %p121;
	or.b32  	%r202, %r497, %r65;
	and.b32  	%r203, %r514, 196;
	or.b32  	%r204, %r199, %r200;
	add.s32 	%r547, %r204, %r201;
	add.s32 	%r548, %r547, %r202;
	add.s32 	%r205, %r548, %r203;
	add.s32 	%r549, %r547, 1576;
	add.s32 	%r550, %r549, %r202;
	add.s32 	%r206, %r550, %r203;
	or.b32  	%r207, %r202, 4;
	add.s32 	%r551, %r547, %r207;
	add.s32 	%r208, %r551, %r203;
	add.s32 	%r552, %r549, %r207;
	add.s32 	%r209, %r552, %r203;
	add.s32 	%r553, %r547, 1584;
	add.s32 	%r554, %r553, %r202;
	add.s32 	%r210, %r554, %r203;
	add.s32 	%r555, %r553, %r207;
	add.s32 	%r211, %r555, %r203;
	shr.u32 	%r556, %r1, 2;
	mul.lo.s32 	%r557, %r65, 784;
	and.b32  	%r558, %r1, 1;
	neg.s32 	%r559, %r558;
	and.b32  	%r560, %r559, 392;
	and.b32  	%r561, %r161, 6;
	and.b32  	%r562, %r546, 1576;
	bfe.s32 	%r563, %r1, 1, 1;
	and.b32  	%r564, %r563, 196;
	mad.lo.s32 	%r565, %r556, 98, %r557;
	add.s32 	%r566, %r565, %r561;
	or.b32  	%r567, %r566, %r63;
	add.s32 	%r568, %r567, %r560;
	add.s32 	%r569, %r568, %r562;
	add.s32 	%r212, %r569, %r564;
	add.s32 	%r213, %r212, 8;
	mul.lo.s32 	%r570, %r266, 147456;
	cvt.u16.u32 	%rs43, %r180;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r571, %rs49;
	and.b32  	%r572, %r571, 248;
	and.b32  	%r573, %r269, 7;
	or.b32  	%r574, %r4, %r573;
	add.s32 	%r214, %r574, %r572;
	cvt.s64.s32 	%rd6, %r570;
	add.s32 	%r575, %r197, %r196;
	mul.wide.u32 	%rd32, %r575, 4;
	mov.u64 	%rd33, shmem;
	add.s64 	%rd7, %rd33, %rd32;
	add.s32 	%r576, %r198, %r196;
	mul.wide.u32 	%rd34, %r576, 4;
	add.s64 	%rd8, %rd33, %rd34;
	cvt.u64.u32 	%rd35, %r197;
	cvt.u64.u16 	%rd36, %rs42;
	and.b64  	%rd37, %rd36, 255;
	add.s64 	%rd38, %rd35, %rd37;
	shl.b64 	%rd39, %rd38, 2;
	add.s64 	%rd9, %rd33, %rd39;
	cvt.u64.u32 	%rd40, %r198;
	add.s64 	%rd41, %rd40, %rd37;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd10, %rd33, %rd42;
	or.pred  	%p232, %p227, %p228;
	and.b32  	%r577, %r269, 24;
	setp.eq.s32 	%p233, %r577, 8;
	or.pred  	%p234, %p232, %p233;
	or.pred  	%p235, %p234, %p229;
	setp.eq.s32 	%p236, %r577, 24;
	or.pred  	%p237, %p230, %p236;
	selp.b32 	%r215, 1145324612, -286331154, %p234;
	or.pred  	%p1, %p235, %p237;
	selp.b32 	%r216, 1145324612, -286331154, %p232;
	add.s32 	%r578, %r149, -1;
	setp.lt.u32 	%p238, %r578, 3;
	or.pred  	%p2, %p227, %p238;
	setp.eq.s32 	%p239, %r577, 16;
	or.pred  	%p3, %p239, %p236;
	selp.b32 	%r217, 1145324612, -286331154, %p239;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r86, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r239, %r216, %r217, %p2;
	or.pred  	%p254, %p2, %p3;
	mov.u32 	%r85, %r196;
	mov.u32 	%r106, %r86;
	mov.u32 	%r107, %r86;
	mov.u32 	%r108, %r86;
	bra.uni 	$L__BB0_188;
$L__BB0_160:                            // %L30899
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r146, %r86, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s32 	%r85, %r85, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p291, %r86, 16320;
	mov.u32 	%r86, %r146;
	@%p291 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_161;
$L__BB0_188:                            // %L1618
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_150 Depth 2
	add.s32 	%r579, %r86, %r264;
	setp.lt.s32 	%p240, %r579, %r265;
	@%p240 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_161;
$L__BB0_189:                            // %oksrem756
                                        //   in Loop: Header=BB0_188 Depth=1
	setp.eq.s32 	%p241, %r175, 3;
	setp.gt.u32 	%p242, %r1, 3;
	setp.eq.s32 	%p243, %r183, 0;
	mul.hi.u32 	%r677, %r86, -1431655765;
	shr.u32 	%r678, %r677, 5;
	mul.lo.s32 	%r679, %r678, 48;
	add.s32 	%r680, %r679, %r180;
	cvt.u16.u32 	%rs50, %r680;
	shr.s16 	%rs51, %rs50, 15;
	shr.u16 	%rs52, %rs51, 2;
	add.s16 	%rs53, %rs50, %rs52;
	and.b16  	%rs54, %rs53, -16384;
	sub.s16 	%rs55, %rs50, %rs54;
	cvt.s32.s16 	%r681, %rs55;
	add.s32 	%r682, %r681, %r264;
	mad.lo.s32 	%r683, %r682, 24576, %r181;
	mul.hi.s32 	%r684, %r683, 715827883;
	shr.u32 	%r685, %r684, 31;
	shr.s32 	%r686, %r684, 26;
	add.s32 	%r687, %r686, %r685;
	setp.lt.s32 	%p244, %r683, 0;
	mul.lo.s32 	%r688, %r687, 402653184;
	setp.ne.s32 	%p245, %r688, %r683;
	and.pred  	%p246, %p244, %p245;
	selp.s32 	%r689, -1, 0, %p246;
	add.s32 	%r690, %r687, %r689;
	mad.lo.s32 	%r691, %r690, -402653184, %r683;
	mul.wide.s32 	%rd43, %r691, 4;
	add.s64 	%rd44, %rd3, %rd43;
	ld.global.v4.u32 	{%r692, %r693, %r694, %r695}, [%rd44];
	add.s32 	%r696, %r182, %r679;
	cvt.u16.u32 	%rs56, %r696;
	shr.s16 	%rs57, %rs56, 15;
	shr.u16 	%rs58, %rs57, 2;
	add.s16 	%rs59, %rs56, %rs58;
	and.b16  	%rs60, %rs59, -16384;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.s32.s16 	%r697, %rs61;
	add.s32 	%r698, %r697, %r264;
	mad.lo.s32 	%r699, %r698, 24576, %r181;
	mul.hi.s32 	%r700, %r699, 715827883;
	shr.u32 	%r701, %r700, 31;
	shr.s32 	%r702, %r700, 26;
	add.s32 	%r703, %r702, %r701;
	setp.lt.s32 	%p247, %r699, 0;
	mul.lo.s32 	%r704, %r703, 402653184;
	setp.ne.s32 	%p248, %r704, %r699;
	and.pred  	%p249, %p247, %p248;
	selp.s32 	%r705, -1, 0, %p249;
	add.s32 	%r706, %r703, %r705;
	mad.lo.s32 	%r707, %r706, -402653184, %r699;
	mul.wide.s32 	%rd45, %r707, 4;
	add.s64 	%rd46, %rd3, %rd45;
	ld.global.v4.u32 	{%r708, %r709, %r710, %r711}, [%rd46];
	selp.b32 	%r712, %r694, %r692, %p243;
	shfl.sync.bfly.b32	%r713, %r712, 4, 31, -1;
	selp.b32 	%r582, %r692, %r713, %p243;
	selp.b32 	%r587, %r713, %r694, %p243;
	selp.b32 	%r714, %r695, %r693, %p243;
	shfl.sync.bfly.b32	%r715, %r714, 4, 31, -1;
	selp.b32 	%r590, %r693, %r715, %p243;
	selp.b32 	%r595, %r715, %r695, %p243;
	selp.b32 	%r716, %r710, %r708, %p243;
	shfl.sync.bfly.b32	%r717, %r716, 4, 31, -1;
	selp.b32 	%r598, %r708, %r717, %p243;
	selp.b32 	%r603, %r717, %r710, %p243;
	selp.b32 	%r718, %r711, %r709, %p243;
	shfl.sync.bfly.b32	%r719, %r718, 4, 31, -1;
	selp.b32 	%r606, %r709, %r719, %p243;
	selp.b32 	%r611, %r719, %r711, %p243;
	shl.b32 	%r583, %r587, 4;
	mov.u32 	%r581, 252645135;
	// begin inline asm
	lop3.b32 %r613, %r581, %r582, %r583, 202;
	// end inline asm
	shr.u32 	%r586, %r582, 4;
	// begin inline asm
	lop3.b32 %r629, %r581, %r586, %r587, 202;
	// end inline asm
	shl.b32 	%r591, %r595, 4;
	// begin inline asm
	lop3.b32 %r621, %r581, %r590, %r591, 202;
	// end inline asm
	shr.u32 	%r594, %r590, 4;
	// begin inline asm
	lop3.b32 %r637, %r581, %r594, %r595, 202;
	// end inline asm
	shl.b32 	%r599, %r603, 4;
	// begin inline asm
	lop3.b32 %r614, %r581, %r598, %r599, 202;
	// end inline asm
	shr.u32 	%r602, %r598, 4;
	// begin inline asm
	lop3.b32 %r630, %r581, %r602, %r603, 202;
	// end inline asm
	shl.b32 	%r607, %r611, 4;
	// begin inline asm
	lop3.b32 %r622, %r581, %r606, %r607, 202;
	// end inline asm
	shr.u32 	%r610, %r606, 4;
	// begin inline asm
	lop3.b32 %r638, %r581, %r610, %r611, 202;
	// end inline asm
	mov.u32 	%r615, 25152;
	// begin inline asm
	prmt.b32 %r645, %r613, %r614, %r615;
	// end inline asm
	mov.u32 	%r619, 29521;
	// begin inline asm
	prmt.b32 %r661, %r613, %r614, %r619;
	// end inline asm
	// begin inline asm
	prmt.b32 %r653, %r621, %r622, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r669, %r621, %r622, %r619;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r629, %r630, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r629, %r630, %r619;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r637, %r638, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r637, %r638, %r619;
	// end inline asm
	mov.u32 	%r671, 21520;
	// begin inline asm
	prmt.b32 %r644, %r645, %r646, %r671;
	// end inline asm
	mov.u32 	%r675, 30258;
	// begin inline asm
	prmt.b32 %r648, %r645, %r646, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r652, %r653, %r654, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r653, %r654, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r661, %r662, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r661, %r662, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r668, %r669, %r670, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r669, %r670, %r675;
	// end inline asm
	mul.hi.s16 	%rs62, %rs50, 10923;
	shr.u16 	%rs63, %rs62, 15;
	shr.s16 	%rs64, %rs62, 2;
	add.s16 	%rs65, %rs64, %rs63;
	mul.lo.s16 	%rs66, %rs65, 24;
	sub.s16 	%rs67, %rs50, %rs66;
	cvt.s32.s16 	%r720, %rs67;
	add.s32 	%r721, %r184, %r720;
	mul.wide.s32 	%rd47, %r721, 4;
	add.s64 	%rd49, %rd33, %rd47;
	st.shared.u32 	[%rd49], %r644;
	add.s32 	%r722, %r721, 128;
	mul.wide.u32 	%rd50, %r722, 4;
	add.s64 	%rd51, %rd33, %rd50;
	st.shared.u32 	[%rd51], %r652;
	add.s32 	%r723, %r721, 64;
	mul.wide.u32 	%rd52, %r723, 4;
	add.s64 	%rd53, %rd33, %rd52;
	st.shared.u32 	[%rd53], %r648;
	add.s32 	%r724, %r721, 192;
	mul.wide.u32 	%rd54, %r724, 4;
	add.s64 	%rd55, %rd33, %rd54;
	st.shared.u32 	[%rd55], %r656;
	add.s32 	%r725, %r721, 32;
	mul.wide.u32 	%rd56, %r725, 4;
	add.s64 	%rd57, %rd33, %rd56;
	st.shared.u32 	[%rd57], %r660;
	add.s32 	%r726, %r721, 160;
	mul.wide.u32 	%rd58, %r726, 4;
	add.s64 	%rd59, %rd33, %rd58;
	st.shared.u32 	[%rd59], %r668;
	add.s32 	%r727, %r721, 96;
	mul.wide.u32 	%rd60, %r727, 4;
	add.s64 	%rd61, %rd33, %rd60;
	st.shared.u32 	[%rd61], %r664;
	add.s32 	%r728, %r721, 224;
	mul.wide.u32 	%rd62, %r728, 4;
	add.s64 	%rd63, %rd33, %rd62;
	st.shared.u32 	[%rd63], %r672;
	bar.sync 	0;
	add.s32 	%r729, %r679, %r185;
	cvt.u16.u32 	%rs68, %r729;
	mul.hi.s16 	%rs69, %rs68, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs68, %rs73;
	cvt.s32.s16 	%r730, %rs74;
	add.s32 	%r731, %r2, %r730;
	mul.wide.s32 	%rd64, %r731, 4;
	add.s64 	%rd65, %rd33, %rd64;
	ld.shared.u32 	%r732, [%rd65];
	add.s32 	%r733, %r186, %r730;
	mul.wide.s32 	%rd66, %r733, 4;
	add.s64 	%rd67, %rd33, %rd66;
	ld.shared.u32 	%r734, [%rd67];
	add.s32 	%r735, %r187, %r730;
	mul.wide.u32 	%rd68, %r735, 4;
	add.s64 	%rd69, %rd33, %rd68;
	ld.shared.u32 	%r736, [%rd69];
	add.s32 	%r737, %r188, %r730;
	mul.wide.u32 	%rd70, %r737, 4;
	add.s64 	%rd71, %rd33, %rd70;
	ld.shared.u32 	%r738, [%rd71];
	add.s32 	%r739, %r189, %r730;
	mul.wide.u32 	%rd72, %r739, 4;
	add.s64 	%rd73, %rd33, %rd72;
	ld.shared.u32 	%r740, [%rd73];
	add.s32 	%r741, %r190, %r730;
	mul.wide.u32 	%rd74, %r741, 4;
	add.s64 	%rd75, %rd33, %rd74;
	ld.shared.u32 	%r742, [%rd75];
	add.s32 	%r743, %r191, %r730;
	mul.wide.u32 	%rd76, %r743, 4;
	add.s64 	%rd77, %rd33, %rd76;
	ld.shared.u32 	%r744, [%rd77];
	add.s32 	%r745, %r192, %r730;
	mul.wide.u32 	%rd78, %r745, 4;
	add.s64 	%rd79, %rd33, %rd78;
	ld.shared.u32 	%r746, [%rd79];
	add.s32 	%r747, %r193, %r730;
	mul.wide.u32 	%rd80, %r747, 4;
	add.s64 	%rd81, %rd33, %rd80;
	ld.shared.u32 	%r748, [%rd81];
	add.s32 	%r749, %r194, %r730;
	mul.wide.u32 	%rd82, %r749, 4;
	add.s64 	%rd83, %rd33, %rd82;
	ld.shared.u32 	%r750, [%rd83];
	add.s32 	%r751, %r195, %r730;
	mul.wide.s32 	%rd84, %r751, 4;
	add.s64 	%rd85, %rd33, %rd84;
	ld.shared.u32 	%r752, [%rd85];
	bar.sync 	0;
	shfl.sync.idx.b32	%r753, %r174, 0, 31, -1;
	shfl.sync.idx.b32	%r754, %r174, 1, 31, -1;
	shfl.sync.idx.b32	%r755, %r174, 2, 31, -1;
	shfl.sync.idx.b32	%r756, %r174, 3, 31, -1;
	shfl.sync.idx.b32	%r757, %r174, 4, 31, -1;
	shfl.sync.idx.b32	%r758, %r174, 5, 31, -1;
	shfl.sync.idx.b32	%r759, %r174, 6, 31, -1;
	shfl.sync.idx.b32	%r760, %r174, 7, 31, -1;
	shfl.sync.idx.b32	%r761, %r174, 8, 31, -1;
	shfl.sync.idx.b32	%r762, %r174, 9, 31, -1;
	shfl.sync.idx.b32	%r763, %r174, 10, 31, -1;
	shfl.sync.idx.b32	%r764, %r174, 11, 31, -1;
	shfl.sync.idx.b32	%r765, %r174, 12, 31, -1;
	shfl.sync.idx.b32	%r766, %r174, 13, 31, -1;
	shfl.sync.idx.b32	%r767, %r174, 14, 31, -1;
	shfl.sync.idx.b32	%r768, %r174, 15, 31, -1;
	add.s32 	%r769, %r753, %r730;
	mul.wide.s32 	%rd86, %r769, 4;
	add.s64 	%rd87, %rd33, %rd86;
	st.shared.u32 	[%rd87], %r732;
	add.s32 	%r770, %r754, %r730;
	mul.wide.s32 	%rd88, %r770, 4;
	add.s64 	%rd89, %rd33, %rd88;
	st.shared.u32 	[%rd89], %r734;
	add.s32 	%r771, %r755, %r730;
	mul.wide.s32 	%rd90, %r771, 4;
	add.s64 	%rd91, %rd33, %rd90;
	st.shared.u32 	[%rd91], %r736;
	add.s32 	%r772, %r756, %r730;
	mul.wide.s32 	%rd92, %r772, 4;
	add.s64 	%rd93, %rd33, %rd92;
	st.shared.u32 	[%rd93], %r738;
	add.s32 	%r773, %r757, %r730;
	mul.wide.s32 	%rd94, %r773, 4;
	add.s64 	%rd95, %rd33, %rd94;
	st.shared.u32 	[%rd95], %r740;
	add.s32 	%r774, %r758, %r730;
	mul.wide.s32 	%rd96, %r774, 4;
	add.s64 	%rd97, %rd33, %rd96;
	st.shared.u32 	[%rd97], %r742;
	add.s32 	%r775, %r759, %r730;
	mul.wide.s32 	%rd98, %r775, 4;
	add.s64 	%rd99, %rd33, %rd98;
	st.shared.u32 	[%rd99], %r744;
	add.s32 	%r776, %r760, %r730;
	mul.wide.s32 	%rd100, %r776, 4;
	add.s64 	%rd101, %rd33, %rd100;
	st.shared.u32 	[%rd101], %r746;
	add.s32 	%r777, %r761, %r730;
	mul.wide.s32 	%rd102, %r777, 4;
	add.s64 	%rd103, %rd33, %rd102;
	st.shared.u32 	[%rd103], %r748;
	add.s32 	%r778, %r762, %r730;
	mul.wide.s32 	%rd104, %r778, 4;
	add.s64 	%rd105, %rd33, %rd104;
	st.shared.u32 	[%rd105], %r750;
	selp.b32 	%r779, 0, %r752, %p242;
	add.s32 	%r780, %r763, %r730;
	mul.wide.s32 	%rd106, %r780, 4;
	add.s64 	%rd107, %rd33, %rd106;
	st.shared.u32 	[%rd107], %r779;
	add.s32 	%r781, %r764, %r730;
	mul.wide.s32 	%rd108, %r781, 4;
	add.s64 	%rd109, %rd33, %rd108;
	mov.u32 	%r676, 0;
	st.shared.u32 	[%rd109], %r676;
	add.s32 	%r782, %r765, %r730;
	mul.wide.s32 	%rd110, %r782, 4;
	add.s64 	%rd111, %rd33, %rd110;
	st.shared.u32 	[%rd111], %r676;
	add.s32 	%r783, %r766, %r730;
	mul.wide.s32 	%rd112, %r783, 4;
	add.s64 	%rd113, %rd33, %rd112;
	st.shared.u32 	[%rd113], %r676;
	add.s32 	%r784, %r767, %r730;
	mul.wide.s32 	%rd114, %r784, 4;
	add.s64 	%rd115, %rd33, %rd114;
	st.shared.u32 	[%rd115], %r676;
	add.s32 	%r785, %r768, %r730;
	mul.wide.s32 	%rd116, %r785, 4;
	add.s64 	%rd117, %rd33, %rd116;
	st.shared.u32 	[%rd117], %r676;
	bar.sync 	0;
	mov.u32 	%r90, %r676;
	mov.u32 	%r91, %r676;
	mov.u32 	%r92, %r676;
	mov.u32 	%r93, %r676;
	mov.u32 	%r94, %r676;
	mov.u32 	%r95, %r676;
	mov.u32 	%r96, %r676;
	mov.u32 	%r97, %r676;
	mov.u32 	%r98, %r676;
	mov.u32 	%r99, %r676;
	mov.u32 	%r100, %r676;
	mov.u32 	%r101, %r676;
	mov.u32 	%r102, %r676;
	mov.u32 	%r103, %r676;
	mov.u32 	%r104, %r676;
	mov.u32 	%r105, %r676;
	@%p241 bra 	$L__BB0_139;
// %bb.190:                             // %oksrem2599
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r218, %r679, %r196;
	ld.shared.u32 	%r90, [%rd7];
	ld.shared.u32 	%r91, [%rd8];
	ld.shared.u32 	%r92, [%rd9+12];
	ld.shared.u32 	%r93, [%rd10+12];
	ld.shared.u32 	%r94, [%rd9+24];
	ld.shared.u32 	%r95, [%rd10+24];
	ld.shared.u32 	%r96, [%rd9+36];
	ld.shared.u32 	%r97, [%rd10+36];
	add.s32 	%r786, %r218, 12;
	mul.hi.u32 	%r787, %r786, -1431655765;
	shr.u32 	%r788, %r787, 4;
	mul.lo.s32 	%r789, %r788, 24;
	sub.s32 	%r790, %r786, %r789;
	add.s32 	%r791, %r197, %r790;
	mul.wide.u32 	%rd118, %r791, 4;
	add.s64 	%rd120, %rd33, %rd118;
	ld.shared.u32 	%r98, [%rd120];
	add.s32 	%r792, %r198, %r790;
	mul.wide.u32 	%rd121, %r792, 4;
	add.s64 	%rd122, %rd33, %rd121;
	ld.shared.u32 	%r99, [%rd122];
	cvt.u16.u32 	%rs75, %r218;
	add.s16 	%rs76, %rs75, 15;
	mul.hi.s16 	%rs77, %rs76, 10923;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 2;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 24;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.s32.s16 	%r793, %rs82;
	add.s32 	%r794, %r197, %r793;
	mul.wide.s32 	%rd123, %r794, 4;
	add.s64 	%rd124, %rd33, %rd123;
	ld.shared.u32 	%r100, [%rd124];
	add.s32 	%r795, %r198, %r793;
	mul.wide.u32 	%rd125, %r795, 4;
	add.s64 	%rd126, %rd33, %rd125;
	ld.shared.u32 	%r101, [%rd126];
	add.s16 	%rs83, %rs75, 18;
	mul.hi.s16 	%rs84, %rs83, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r796, %rs89;
	add.s32 	%r797, %r197, %r796;
	mul.wide.s32 	%rd127, %r797, 4;
	add.s64 	%rd128, %rd33, %rd127;
	ld.shared.u32 	%r102, [%rd128];
	add.s32 	%r798, %r198, %r796;
	mul.wide.u32 	%rd129, %r798, 4;
	add.s64 	%rd130, %rd33, %rd129;
	ld.shared.u32 	%r103, [%rd130];
	add.s16 	%rs90, %rs75, 21;
	mul.hi.s16 	%rs91, %rs90, 10923;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 2;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 24;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.s32.s16 	%r799, %rs96;
	add.s32 	%r800, %r197, %r799;
	mul.wide.s32 	%rd131, %r800, 4;
	add.s64 	%rd132, %rd33, %rd131;
	ld.shared.u32 	%r104, [%rd132];
	add.s32 	%r801, %r198, %r799;
	mul.wide.u32 	%rd133, %r801, 4;
	add.s64 	%rd134, %rd33, %rd133;
	ld.shared.u32 	%r105, [%rd134];
$L__BB0_139:                            // %L8800
                                        //   in Loop: Header=BB0_188 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r109, %r676;
	bra.uni 	$L__BB0_140;
$L__BB0_147:                            // %L19839
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r106, 0;
	mov.u32 	%r108, %r106;
$L__BB0_148:                            // %L19840
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r109, %r109, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p270, %r109, 24;
	@%p270 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_149;
$L__BB0_140:                            // %L8818
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p250, %r109, 0;
	selp.b32 	%r1195, %r90, 0, %p250;
	setp.eq.s32 	%p251, %r109, 6;
	selp.b32 	%r1196, %r94, %r1195, %p251;
	setp.eq.s32 	%p252, %r109, 12;
	selp.b32 	%r1197, %r98, %r1196, %p252;
	setp.eq.s32 	%p253, %r109, 18;
	selp.b32 	%r1198, %r102, %r1197, %p253;
	selp.b32 	%r1199, %r91, 0, %p250;
	selp.b32 	%r1200, %r95, %r1199, %p251;
	selp.b32 	%r1201, %r99, %r1200, %p252;
	selp.b32 	%r1202, %r103, %r1201, %p253;
	selp.b32 	%r1203, %r92, 0, %p250;
	selp.b32 	%r1204, %r96, %r1203, %p251;
	selp.b32 	%r1205, %r100, %r1204, %p252;
	selp.b32 	%r1206, %r104, %r1205, %p253;
	selp.b32 	%r1207, %r93, 0, %p250;
	selp.b32 	%r1208, %r97, %r1207, %p251;
	selp.b32 	%r1209, %r101, %r1208, %p252;
	selp.b32 	%r1210, %r105, %r1209, %p253;
	mov.u16 	%rs134, 25600;
	// begin inline asm
	mov.b32 %r808, {%rs134, %rs134};
	// end inline asm
	mov.u16 	%rs136, 21504;
	// begin inline asm
	mov.b32 %r819, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r807, %r1198, -2004318072;
	mov.u32 	%r944, 983055;
	// begin inline asm
	lop3.b32 %r805, %r944, %r807, %r808, 202;
	// end inline asm
	mov.u16 	%rs140, 18432;
	// begin inline asm
	mov.b32 %r809, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r810, %r808, %r809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r813, %r805, %r810;
	// end inline asm
	mov.u32 	%r955, 15728880;
	// begin inline asm
	lop3.b32 %r816, %r955, %r807, %r819, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r820, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r821, %r819, %r820;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r824, %r816, %r821;
	// end inline asm
	// begin inline asm
	mov.b32 %r854, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r865, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r853, %r1202, -2004318072;
	// begin inline asm
	lop3.b32 %r851, %r944, %r853, %r854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r855, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r856, %r854, %r855;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r859, %r851, %r856;
	// end inline asm
	// begin inline asm
	lop3.b32 %r862, %r955, %r853, %r865, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r866, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r867, %r865, %r866;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r870, %r862, %r867;
	// end inline asm
	// begin inline asm
	mov.b32 %r900, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r911, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r899, %r1206, -2004318072;
	// begin inline asm
	lop3.b32 %r897, %r944, %r899, %r900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r901, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r902, %r900, %r901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r905, %r897, %r902;
	// end inline asm
	// begin inline asm
	lop3.b32 %r908, %r955, %r899, %r911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r912, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r913, %r911, %r912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r916, %r908, %r913;
	// end inline asm
	// begin inline asm
	mov.b32 %r946, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r957, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r945, %r1210, -2004318072;
	// begin inline asm
	lop3.b32 %r943, %r944, %r945, %r946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r948, %r946, %r947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r951, %r943, %r948;
	// end inline asm
	// begin inline asm
	lop3.b32 %r954, %r955, %r945, %r957, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r958, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r959, %r957, %r958;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r962, %r954, %r959;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r813;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r987, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r859;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r990, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r824;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r993, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r870;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r996, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r905;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r999, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r951;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1002, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r916;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1005, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r962;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1008, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1011, %r1012}, {%r289, %r292}, {%r987}, {%r676, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1018, %r1019}, {%r289, %r292}, {%r990}, {%r676, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1025, %r1026}, {%r289, %r292}, {%r993}, {%r676, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1032, %r1033}, {%r289, %r292}, {%r996}, {%r676, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1039, %r1040}, {%r289, %r292}, {%r999}, {%r676, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1046, %r1047}, {%r289, %r292}, {%r1002}, {%r676, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1053, %r1054}, {%r289, %r292}, {%r1005}, {%r676, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1060, %r1061}, {%r289, %r292}, {%r1008}, {%r676, %r676};
	// end inline asm
	@%p1 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_141;
$L__BB0_191:                            // %pass3934
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1067, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1069, %r1067, %r1012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1072, %r341, %r1011, %r1069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1076, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1078, %r1076, %r1019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1081, %r341, %r1018, %r1078;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1085, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1087, %r1085, %r1026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1090, %r341, %r1025, %r1087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1094, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1096, %r1094, %r1033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r341, %r1032, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1103, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1105, %r1103, %r1040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r341, %r1039, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1112, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1114, %r1112, %r1047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r341, %r1046, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1121, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r1121, %r1054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r341, %r1053, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1130, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r1130, %r1061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r341, %r1060, %r1132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r344, %r1011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r341, %r1012, %r1139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1146, %r344, %r1018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r341, %r1019, %r1146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r344, %r1025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r341, %r1026, %r1153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1160, %r344, %r1032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r341, %r1033, %r1160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r344, %r1039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r341, %r1040, %r1167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1174, %r344, %r1046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r341, %r1047, %r1174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1181, %r344, %r1053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r341, %r1054, %r1181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1188, %r344, %r1060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1191, %r341, %r1061, %r1188;
	// end inline asm
	mov.u32 	%r1360, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1284, %r1285}, {%r385, %r388}, {%r1072, %r1142}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1292, %r1293}, {%r385, %r388}, {%r1081, %r1149}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1300, %r1301}, {%r385, %r388}, {%r1090, %r1156}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1308, %r1309}, {%r385, %r388}, {%r1099, %r1163}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1316, %r1317}, {%r385, %r388}, {%r1108, %r1170}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1324, %r1325}, {%r385, %r388}, {%r1117, %r1177}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1332, %r1333}, {%r385, %r388}, {%r1126, %r1184}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1340, %r1341}, {%r385, %r388}, {%r1135, %r1191}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1284, %r1285, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1284, %r1285, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1291, %r1292, %r1293, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1295, %r1292, %r1293, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1299, %r1300, %r1301, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r1300, %r1301, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1307, %r1308, %r1309, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1311, %r1308, %r1309, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1315, %r1316, %r1317, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1319, %r1316, %r1317, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1323, %r1324, %r1325, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1327, %r1324, %r1325, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1331, %r1332, %r1333, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1335, %r1332, %r1333, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1339, %r1340, %r1341, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1343, %r1340, %r1341, %r675;
	// end inline asm
	add.s32 	%r1393, %r85, %r109;
	mul.hi.u32 	%r1394, %r1393, -1431655765;
	shr.u32 	%r1395, %r1394, 2;
	mul.lo.s32 	%r1396, %r1395, 6;
	sub.s32 	%r1397, %r1393, %r1396;
	shl.b32 	%r1398, %r1397, 4;
	add.s32 	%r1399, %r205, %r1398;
	mul.wide.u32 	%rd137, %r1399, 4;
	add.s64 	%rd139, %rd33, %rd137;
	st.shared.u32 	[%rd139], %r1283;
	cvt.u64.u32 	%rd140, %r1398;
	cvt.u64.u32 	%rd141, %r203;
	cvt.u64.u32 	%rd142, %r202;
	cvt.u64.u32 	%rd143, %r201;
	cvt.u64.u32 	%rd144, %r199;
	cvt.u64.u32 	%rd145, %r200;
	add.s64 	%rd146, %rd145, %rd144;
	add.s64 	%rd147, %rd146, %rd143;
	add.s64 	%rd148, %rd147, %rd142;
	add.s64 	%rd149, %rd148, %rd141;
	add.s64 	%rd150, %rd149, %rd140;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd152, %rd33, %rd151;
	st.shared.u32 	[%rd152+6304], %r1287;
	add.s32 	%r1400, %r208, %r1398;
	mul.wide.u32 	%rd153, %r1400, 4;
	add.s64 	%rd154, %rd33, %rd153;
	st.shared.u32 	[%rd154], %r1291;
	cvt.u64.u32 	%rd155, %r207;
	add.s64 	%rd156, %rd147, %rd155;
	add.s64 	%rd157, %rd156, %rd141;
	add.s64 	%rd158, %rd157, %rd140;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd160, %rd33, %rd159;
	st.shared.u32 	[%rd160+6304], %r1295;
	cvt.u64.u32 	%rd161, %r204;
	add.s64 	%rd162, %rd161, %rd143;
	add.s64 	%rd163, %rd162, %rd142;
	add.s64 	%rd164, %rd163, %rd141;
	add.s64 	%rd165, %rd164, %rd140;
	shl.b64 	%rd166, %rd165, 2;
	add.s64 	%rd167, %rd33, %rd166;
	st.shared.u32 	[%rd167+32], %r1299;
	st.shared.u32 	[%rd152+6336], %r1303;
	add.s64 	%rd168, %rd162, %rd155;
	add.s64 	%rd169, %rd168, %rd141;
	add.s64 	%rd170, %rd169, %rd140;
	shl.b64 	%rd171, %rd170, 2;
	add.s64 	%rd172, %rd33, %rd171;
	st.shared.u32 	[%rd172+32], %r1307;
	st.shared.u32 	[%rd160+6336], %r1311;
	add.s32 	%r1401, %r1393, 3;
	mul.hi.u32 	%r1402, %r1401, -1431655765;
	shr.u32 	%r1403, %r1402, 2;
	mul.lo.s32 	%r1404, %r1403, 6;
	sub.s32 	%r1405, %r1401, %r1404;
	shl.b32 	%r1406, %r1405, 4;
	add.s32 	%r1407, %r205, %r1406;
	mul.wide.u32 	%rd173, %r1407, 4;
	add.s64 	%rd174, %rd33, %rd173;
	st.shared.u32 	[%rd174], %r1315;
	cvt.u64.u32 	%rd175, %r1406;
	add.s64 	%rd176, %rd149, %rd175;
	shl.b64 	%rd177, %rd176, 2;
	add.s64 	%rd178, %rd33, %rd177;
	st.shared.u32 	[%rd178+6304], %r1319;
	add.s32 	%r1408, %r208, %r1406;
	mul.wide.u32 	%rd179, %r1408, 4;
	add.s64 	%rd180, %rd33, %rd179;
	st.shared.u32 	[%rd180], %r1323;
	add.s64 	%rd181, %rd157, %rd175;
	shl.b64 	%rd182, %rd181, 2;
	add.s64 	%rd183, %rd33, %rd182;
	st.shared.u32 	[%rd183+6304], %r1327;
	add.s64 	%rd184, %rd164, %rd175;
	shl.b64 	%rd185, %rd184, 2;
	add.s64 	%rd186, %rd33, %rd185;
	st.shared.u32 	[%rd186+32], %r1331;
	st.shared.u32 	[%rd178+6336], %r1335;
	add.s64 	%rd187, %rd169, %rd175;
	shl.b64 	%rd188, %rd187, 2;
	add.s64 	%rd189, %rd33, %rd188;
	st.shared.u32 	[%rd189+32], %r1339;
	st.shared.u32 	[%rd183+6336], %r1343;
	bar.sync 	0;
	mul.hi.s16 	%rs145, %rs3, 10923;
	shr.u16 	%rs146, %rs145, 15;
	add.s16 	%rs147, %rs145, %rs146;
	mul.lo.s16 	%rs148, %rs147, 6;
	sub.s16 	%rs149, %rs3, %rs148;
	mul.wide.s16 	%r1409, %rs149, 16;
	add.s32 	%r1410, %r212, %r1409;
	mul.wide.s32 	%rd190, %r1410, 4;
	add.s64 	%rd191, %rd33, %rd190;
	ld.shared.u32 	%r1351, [%rd191];
	add.s32 	%r1411, %r213, %r1409;
	mul.wide.s32 	%rd192, %r1411, 4;
	add.s64 	%rd193, %rd33, %rd192;
	ld.shared.u32 	%r1358, [%rd193];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1347, %r1348}, {%r397, %r400}, {%r1351}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1354, %r1355}, {%r397, %r400}, {%r1358}, {%r1360, %r1360};
	// end inline asm
	@%p254 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_192;
$L__BB0_194:                            // %pass6556
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1361, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1363, %r1361, %r1348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1366, %r435, %r1347, %r1363;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1370, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1372, %r1370, %r1355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1375, %r435, %r1354, %r1372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r438, %r1347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r435, %r1348, %r1379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1386, %r438, %r1354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r435, %r1355, %r1386;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1431, %r1434}, {%r481, %r484}, {%r1366, %r1382}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1438, %r1442}, {%r481, %r484}, {%r1375, %r1389}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1431, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r1434, %r1434, %r1430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r1438, %r1438, %r1433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1441, %r1442, %r1442, %r1437;
	// end inline asm
	mov.u32 	%r1529, 335549440;
	// begin inline asm
	fma.rn.f16x2 %r1445, %r1529, %r1441, %r108;
	// end inline asm
	add.s32 	%r240, %r86, %r109;
	add.s32 	%r1532, %r240, 1;
	mul.hi.u32 	%r1533, %r1532, -1431655765;
	shr.u32 	%r1534, %r1533, 2;
	mul.lo.s32 	%r1535, %r1534, 6;
	sub.s32 	%r1536, %r1532, %r1535;
	shl.b32 	%r1537, %r1536, 4;
	add.s32 	%r1538, %r212, %r1537;
	mul.wide.u32 	%rd196, %r1538, 4;
	add.s64 	%rd198, %rd33, %rd196;
	ld.shared.u32 	%r1453, [%rd198];
	add.s32 	%r1539, %r213, %r1537;
	mul.wide.u32 	%rd199, %r1539, 4;
	add.s64 	%rd200, %rd33, %rd199;
	ld.shared.u32 	%r1460, [%rd200];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1470, %r1467}, {%r397, %r400}, {%r1453}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1479, %r1476}, {%r397, %r400}, {%r1460}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1463, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1465, %r1463, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1468, %r435, %r1470, %r1465;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1472, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1474, %r1472, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r435, %r1479, %r1474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1481, %r438, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r435, %r1467, %r1481;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1488, %r438, %r1479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1491, %r435, %r1476, %r1488;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1514, %r1517}, {%r481, %r484}, {%r1468, %r1484}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1521, %r1525}, {%r481, %r484}, {%r1477, %r1491}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r1514, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r1517, %r1517, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r1521, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1524, %r1525, %r1525, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r1529, %r1524, %r1445;
	// end inline asm
	add.s32 	%r3053, %r106, 2;
	setp.eq.s32 	%p255, %r3053, 128;
	setp.lt.u32 	%p297, %r269, 8;
	@%p255 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_195;
$L__BB0_142:                            // %L15702
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_143;
$L__BB0_193:                            // %pass6997
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1540, %r107, 147456, %r214;
	cvt.u64.u32 	%rd201, %r1540;
	add.s64 	%rd202, %rd201, %rd6;
	mul.hi.s64 	%rd203, %rd202, 1024819115206086201;
	shr.u64 	%rd204, %rd203, 63;
	shr.s64 	%rd205, %rd203, 23;
	add.s64 	%rd206, %rd205, %rd204;
	setp.lt.s64 	%p257, %rd202, 0;
	mul.lo.s64 	%rd207, %rd206, 150994944;
	setp.ne.s64 	%p258, %rd207, %rd202;
	and.pred  	%p259, %p257, %p258;
	selp.s64 	%rd208, -1, 0, %p259;
	add.s64 	%rd209, %rd206, %rd208;
	mul.lo.s64 	%rd210, %rd209, -150994944;
	add.s64 	%rd211, %rd210, %rd202;
	shl.b64 	%rd212, %rd211, 2;
	add.s64 	%rd213, %rd4, %rd212;
	st.global.u32 	[%rd213], %r3055;
$L__BB0_143:                            // %L15917
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r3053, 0;
	mov.u32 	%r3055, %r3053;
$L__BB0_195:                            // %oksrem7141
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r1708, %r240, 2;
	mul.hi.u32 	%r1709, %r1708, -1431655765;
	shr.u32 	%r1710, %r1709, 2;
	mul.lo.s32 	%r1711, %r1710, 6;
	sub.s32 	%r1712, %r1708, %r1711;
	shl.b32 	%r1713, %r1712, 4;
	add.s32 	%r1714, %r212, %r1713;
	mul.wide.u32 	%rd214, %r1714, 4;
	add.s64 	%rd216, %rd33, %rd214;
	ld.shared.u32 	%r1546, [%rd216];
	add.s32 	%r1715, %r213, %r1713;
	mul.wide.u32 	%rd217, %r1715, 4;
	add.s64 	%rd218, %rd33, %rd217;
	ld.shared.u32 	%r1553, [%rd218];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1563, %r1560}, {%r397, %r400}, {%r1546}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1572, %r1569}, {%r397, %r400}, {%r1553}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1556, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1558, %r1556, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1561, %r435, %r1563, %r1558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1565, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1567, %r1565, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r435, %r1572, %r1567;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1574, %r438, %r1563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1577, %r435, %r1560, %r1574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1581, %r438, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r435, %r1569, %r1581;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1607, %r1610}, {%r481, %r484}, {%r1561, %r1577}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1614, %r1618}, {%r481, %r484}, {%r1570, %r1584}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1606, %r1607, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r1610, %r1610, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1613, %r1614, %r1614, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1617, %r1618, %r1618, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1621, %r1529, %r1617, %r3055;
	// end inline asm
	add.s32 	%r1716, %r240, 3;
	mul.hi.u32 	%r1717, %r1716, -1431655765;
	shr.u32 	%r1718, %r1717, 2;
	mul.lo.s32 	%r1719, %r1718, 6;
	sub.s32 	%r1720, %r1716, %r1719;
	shl.b32 	%r1721, %r1720, 4;
	add.s32 	%r1722, %r212, %r1721;
	mul.wide.u32 	%rd219, %r1722, 4;
	add.s64 	%rd220, %rd33, %rd219;
	ld.shared.u32 	%r1629, [%rd220];
	add.s32 	%r1723, %r213, %r1721;
	mul.wide.u32 	%rd221, %r1723, 4;
	add.s64 	%rd222, %rd33, %rd221;
	ld.shared.u32 	%r1636, [%rd222];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1646, %r1643}, {%r397, %r400}, {%r1629}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1655, %r1652}, {%r397, %r400}, {%r1636}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1639, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1641, %r1639, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1644, %r435, %r1646, %r1641;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1648, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1650, %r1648, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r435, %r1655, %r1650;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1657, %r438, %r1646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1660, %r435, %r1643, %r1657;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1664, %r438, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1667, %r435, %r1652, %r1664;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1690, %r1693}, {%r481, %r484}, {%r1644, %r1660}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1697, %r1701}, {%r481, %r484}, {%r1653, %r1667}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1689, %r1690, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1692, %r1693, %r1693, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r1697, %r1697, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r1701, %r1701, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r1529, %r1700, %r1621;
	// end inline asm
	add.s32 	%r3056, %r3053, 2;
	setp.eq.s32 	%p260, %r3056, 128;
	@%p260 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_196;
$L__BB0_144:                            // %L17663
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_145;
$L__BB0_201:                            // %pass7848
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1724, %r107, 147456, %r214;
	cvt.u64.u32 	%rd223, %r1724;
	add.s64 	%rd224, %rd223, %rd6;
	mul.hi.s64 	%rd225, %rd224, 1024819115206086201;
	shr.u64 	%rd226, %rd225, 63;
	shr.s64 	%rd227, %rd225, 23;
	add.s64 	%rd228, %rd227, %rd226;
	setp.lt.s64 	%p262, %rd224, 0;
	mul.lo.s64 	%rd229, %rd228, 150994944;
	setp.ne.s64 	%p263, %rd229, %rd224;
	and.pred  	%p264, %p262, %p263;
	selp.s64 	%rd230, -1, 0, %p264;
	add.s64 	%rd231, %rd228, %rd230;
	mul.lo.s64 	%rd232, %rd231, -150994944;
	add.s64 	%rd233, %rd232, %rd224;
	shl.b64 	%rd234, %rd233, 2;
	add.s64 	%rd235, %rd4, %rd234;
	st.global.u32 	[%rd235], %r3058;
$L__BB0_145:                            // %L17878
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r3056, 0;
	mov.u32 	%r3058, %r3056;
$L__BB0_196:                            // %oksrem7992
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r1892, %r240, 4;
	mul.hi.u32 	%r1893, %r1892, -1431655765;
	shr.u32 	%r1894, %r1893, 2;
	mul.lo.s32 	%r1895, %r1894, 6;
	sub.s32 	%r1896, %r1892, %r1895;
	shl.b32 	%r1897, %r1896, 4;
	add.s32 	%r1898, %r212, %r1897;
	mul.wide.u32 	%rd236, %r1898, 4;
	add.s64 	%rd238, %rd33, %rd236;
	ld.shared.u32 	%r1730, [%rd238];
	add.s32 	%r1899, %r213, %r1897;
	mul.wide.u32 	%rd239, %r1899, 4;
	add.s64 	%rd240, %rd33, %rd239;
	ld.shared.u32 	%r1737, [%rd240];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1747, %r1744}, {%r397, %r400}, {%r1730}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1756, %r1753}, {%r397, %r400}, {%r1737}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r1740, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r435, %r1747, %r1742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1749, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r1749, %r1753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r435, %r1756, %r1751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1758, %r438, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r435, %r1744, %r1758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1765, %r438, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r435, %r1753, %r1765;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1791, %r1794}, {%r481, %r484}, {%r1745, %r1761}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1798, %r1802}, {%r481, %r484}, {%r1754, %r1768}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1790, %r1791, %r1791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r1794, %r1794, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r1798, %r1798, %r1793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1802, %r1802, %r1797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1529, %r1801, %r3058;
	// end inline asm
	add.s32 	%r1900, %r240, 5;
	mul.hi.u32 	%r1901, %r1900, -1431655765;
	shr.u32 	%r1902, %r1901, 2;
	mul.lo.s32 	%r1903, %r1902, 6;
	sub.s32 	%r1904, %r1900, %r1903;
	shl.b32 	%r1905, %r1904, 4;
	add.s32 	%r1906, %r212, %r1905;
	mul.wide.u32 	%rd241, %r1906, 4;
	add.s64 	%rd242, %rd33, %rd241;
	ld.shared.u32 	%r1813, [%rd242];
	add.s32 	%r1907, %r213, %r1905;
	mul.wide.u32 	%rd243, %r1907, 4;
	add.s64 	%rd244, %rd33, %rd243;
	ld.shared.u32 	%r1820, [%rd244];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1830, %r1827}, {%r397, %r400}, {%r1813}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1839, %r1836}, {%r397, %r400}, {%r1820}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1823, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r1823, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r435, %r1830, %r1825;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1832, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1834, %r1832, %r1836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r435, %r1839, %r1834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1841, %r438, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1844, %r435, %r1827, %r1841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r438, %r1839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r435, %r1836, %r1848;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1874, %r1877}, {%r481, %r484}, {%r1828, %r1844}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1881, %r1885}, {%r481, %r484}, {%r1837, %r1851}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1873, %r1874, %r1874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1877, %r1877, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r1881, %r1881, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r1885, %r1885, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r108, %r1529, %r1884, %r1805;
	// end inline asm
	add.s32 	%r106, %r3056, 2;
	setp.eq.s32 	%p265, %r106, 128;
	@%p265 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_148;
$L__BB0_146:                            // %L19624
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_147;
$L__BB0_197:                            // %pass8699
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1908, %r107, 147456, %r214;
	cvt.u64.u32 	%rd245, %r1908;
	add.s64 	%rd246, %rd245, %rd6;
	mul.hi.s64 	%rd247, %rd246, 1024819115206086201;
	shr.u64 	%rd248, %rd247, 63;
	shr.s64 	%rd249, %rd247, 23;
	add.s64 	%rd250, %rd249, %rd248;
	setp.lt.s64 	%p267, %rd246, 0;
	mul.lo.s64 	%rd251, %rd250, 150994944;
	setp.ne.s64 	%p268, %rd251, %rd246;
	and.pred  	%p269, %p267, %p268;
	selp.s64 	%rd252, -1, 0, %p269;
	add.s64 	%rd253, %rd250, %rd252;
	mul.lo.s64 	%rd254, %rd253, -150994944;
	add.s64 	%rd255, %rd254, %rd246;
	shl.b64 	%rd256, %rd255, 2;
	add.s64 	%rd257, %rd4, %rd256;
	st.global.u32 	[%rd257], %r108;
	bra.uni 	$L__BB0_147;
$L__BB0_149:                            // %L19861.preheader
                                        //   in Loop: Header=BB0_188 Depth=1
	mov.u16 	%rs250, %rs1;
	mov.u32 	%r3044, %r1360;
	bra.uni 	$L__BB0_150;
$L__BB0_158:                            // %L30882
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r106, %r2792;
	mov.u32 	%r108, %r2792;
$L__BB0_159:                            // %L30883
                                        //   in Loop: Header=BB0_150 Depth=2
	bar.sync 	0;
	add.s32 	%r3044, %r3044, 6;
	add.s16 	%rs250, %rs250, 6;
	setp.ne.s32 	%p290, %r3044, 24;
	@%p290 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_160;
$L__BB0_150:                            // %L19861
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p271, %r3044, 0;
	selp.b32 	%r2605, %r90, 0, %p271;
	setp.eq.s32 	%p272, %r3044, 6;
	selp.b32 	%r2606, %r94, %r2605, %p272;
	setp.eq.s32 	%p273, %r3044, 12;
	selp.b32 	%r2607, %r98, %r2606, %p273;
	setp.eq.s32 	%p274, %r3044, 18;
	selp.b32 	%r2608, %r102, %r2607, %p274;
	selp.b32 	%r2609, %r91, 0, %p271;
	selp.b32 	%r2610, %r95, %r2609, %p272;
	selp.b32 	%r2611, %r99, %r2610, %p273;
	selp.b32 	%r2612, %r103, %r2611, %p274;
	selp.b32 	%r2613, %r92, 0, %p271;
	selp.b32 	%r2614, %r96, %r2613, %p272;
	selp.b32 	%r2615, %r100, %r2614, %p273;
	selp.b32 	%r2616, %r104, %r2615, %p274;
	selp.b32 	%r2617, %r93, 0, %p271;
	selp.b32 	%r2618, %r97, %r2617, %p272;
	selp.b32 	%r2619, %r101, %r2618, %p273;
	selp.b32 	%r2620, %r105, %r2619, %p274;
	// begin inline asm
	mov.b32 %r1938, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r1949, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2621, %r2608, 8;
	xor.b32  	%r1948, %r2621, 8947848;
	// begin inline asm
	lop3.b32 %r1935, %r944, %r1948, %r1938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1939, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1940, %r1938, %r1939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1943, %r1935, %r1940;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1946, %r955, %r1948, %r1949, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1950, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1951, %r1949, %r1950;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1954, %r1946, %r1951;
	// end inline asm
	// begin inline asm
	mov.b32 %r1984, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r1995, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2622, %r2612, 8;
	xor.b32  	%r1994, %r2622, 8947848;
	// begin inline asm
	lop3.b32 %r1981, %r944, %r1994, %r1984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1985, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1986, %r1984, %r1985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1989, %r1981, %r1986;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1992, %r955, %r1994, %r1995, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1996, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1997, %r1995, %r1996;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2000, %r1992, %r1997;
	// end inline asm
	// begin inline asm
	mov.b32 %r2030, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r2041, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2623, %r2616, 8;
	xor.b32  	%r2040, %r2623, 8947848;
	// begin inline asm
	lop3.b32 %r2027, %r944, %r2040, %r2030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2031, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2032, %r2030, %r2031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2035, %r2027, %r2032;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2038, %r955, %r2040, %r2041, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2042, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2043, %r2041, %r2042;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2046, %r2038, %r2043;
	// end inline asm
	// begin inline asm
	mov.b32 %r2076, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r2087, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2624, %r2620, 8;
	xor.b32  	%r2086, %r2624, 8947848;
	// begin inline asm
	lop3.b32 %r2073, %r944, %r2086, %r2076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2077, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2078, %r2076, %r2077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2081, %r2073, %r2078;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2084, %r955, %r2086, %r2087, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2088, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2089, %r2087, %r2088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2092, %r2084, %r2089;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1943;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2095, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1989;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2098, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1954;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2101, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2000;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2104, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2035;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2107, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2081;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2110, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2046;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2113, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2092;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2116, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2182, %r2179}, {%r289, %r292}, {%r2095}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2191, %r2188}, {%r289, %r292}, {%r2098}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2200, %r2197}, {%r289, %r292}, {%r2101}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2209, %r2206}, {%r289, %r292}, {%r2104}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2218, %r2215}, {%r289, %r292}, {%r2107}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2227, %r2224}, {%r289, %r292}, {%r2110}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2236, %r2233}, {%r289, %r292}, {%r2113}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2245, %r2242}, {%r289, %r292}, {%r2116}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2175, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2177, %r2175, %r2179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2180, %r341, %r2182, %r2177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2184, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2186, %r2184, %r2188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r341, %r2191, %r2186;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2193, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2195, %r2193, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r341, %r2200, %r2195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2202, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2204, %r2202, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2207, %r341, %r2209, %r2204;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2211, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r2211, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r341, %r2218, %r2213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2220, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r2220, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r341, %r2227, %r2222;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2229, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r2229, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r341, %r2236, %r2231;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2238, %r344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2240, %r2238, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r341, %r2245, %r2240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2247, %r344, %r2182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r341, %r2179, %r2247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r344, %r2191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r341, %r2188, %r2254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2261, %r344, %r2200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2264, %r341, %r2197, %r2261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2268, %r344, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2271, %r341, %r2206, %r2268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2275, %r344, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2278, %r341, %r2215, %r2275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r344, %r2227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r341, %r2224, %r2282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2289, %r344, %r2236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2292, %r341, %r2233, %r2289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2296, %r344, %r2245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2299, %r341, %r2242, %r2296;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2376, %r2377}, {%r385, %r388}, {%r2180, %r2250}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2384, %r2385}, {%r385, %r388}, {%r2189, %r2257}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2392, %r2393}, {%r385, %r388}, {%r2198, %r2264}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2400, %r2401}, {%r385, %r388}, {%r2207, %r2271}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2408, %r2409}, {%r385, %r388}, {%r2216, %r2278}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2416, %r2417}, {%r385, %r388}, {%r2225, %r2285}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2424, %r2425}, {%r385, %r388}, {%r2234, %r2292}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2432, %r2433}, {%r385, %r388}, {%r2243, %r2299}, {%r1360, %r1360}, %r215, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2375, %r2376, %r2377, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2379, %r2376, %r2377, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2383, %r2384, %r2385, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2387, %r2384, %r2385, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2391, %r2392, %r2393, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2395, %r2392, %r2393, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2399, %r2400, %r2401, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2403, %r2400, %r2401, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2407, %r2408, %r2409, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2411, %r2408, %r2409, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2415, %r2416, %r2417, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2419, %r2416, %r2417, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2423, %r2424, %r2425, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2427, %r2424, %r2425, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2431, %r2432, %r2433, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2435, %r2432, %r2433, %r675;
	// end inline asm
	add.s16 	%rs198, %rs10, %rs250;
	add.s16 	%rs199, %rs198, -29;
	mul.hi.s16 	%rs200, %rs199, 10923;
	shr.u16 	%rs201, %rs200, 15;
	add.s16 	%rs202, %rs200, %rs201;
	mul.lo.s16 	%rs203, %rs202, 6;
	sub.s16 	%rs204, %rs199, %rs203;
	mul.wide.s16 	%r2625, %rs204, 16;
	add.s32 	%r2626, %r205, %r2625;
	mul.wide.s32 	%rd258, %r2626, 4;
	add.s64 	%rd260, %rd33, %rd258;
	st.shared.u32 	[%rd260], %r2375;
	add.s32 	%r2627, %r206, %r2625;
	mul.wide.u32 	%rd261, %r2627, 4;
	add.s64 	%rd262, %rd33, %rd261;
	st.shared.u32 	[%rd262], %r2379;
	add.s32 	%r2628, %r208, %r2625;
	mul.wide.s32 	%rd263, %r2628, 4;
	add.s64 	%rd264, %rd33, %rd263;
	st.shared.u32 	[%rd264], %r2383;
	add.s32 	%r2629, %r209, %r2625;
	mul.wide.u32 	%rd265, %r2629, 4;
	add.s64 	%rd266, %rd33, %rd265;
	st.shared.u32 	[%rd266], %r2387;
	cvt.s64.s32 	%rd267, %r2625;
	add.s64 	%rd275, %rd164, %rd267;
	shl.b64 	%rd276, %rd275, 2;
	add.s64 	%rd277, %rd33, %rd276;
	st.shared.u32 	[%rd277+32], %r2391;
	add.s32 	%r2630, %r210, %r2625;
	mul.wide.u32 	%rd278, %r2630, 4;
	add.s64 	%rd279, %rd33, %rd278;
	st.shared.u32 	[%rd279], %r2395;
	add.s64 	%rd283, %rd169, %rd267;
	shl.b64 	%rd284, %rd283, 2;
	add.s64 	%rd285, %rd33, %rd284;
	st.shared.u32 	[%rd285+32], %r2399;
	add.s32 	%r2631, %r211, %r2625;
	mul.wide.u32 	%rd286, %r2631, 4;
	add.s64 	%rd287, %rd33, %rd286;
	st.shared.u32 	[%rd287], %r2403;
	add.s16 	%rs205, %rs9, %rs250;
	add.s16 	%rs206, %rs205, -2;
	mul.hi.s16 	%rs207, %rs206, 10923;
	shr.u16 	%rs208, %rs207, 15;
	add.s16 	%rs209, %rs207, %rs208;
	mul.lo.s16 	%rs210, %rs209, 6;
	sub.s16 	%rs211, %rs206, %rs210;
	mul.wide.s16 	%r2632, %rs211, 16;
	add.s32 	%r2633, %r205, %r2632;
	mul.wide.s32 	%rd288, %r2633, 4;
	add.s64 	%rd289, %rd33, %rd288;
	st.shared.u32 	[%rd289], %r2407;
	add.s32 	%r2634, %r206, %r2632;
	mul.wide.u32 	%rd290, %r2634, 4;
	add.s64 	%rd291, %rd33, %rd290;
	st.shared.u32 	[%rd291], %r2411;
	add.s32 	%r2635, %r208, %r2632;
	mul.wide.s32 	%rd292, %r2635, 4;
	add.s64 	%rd293, %rd33, %rd292;
	st.shared.u32 	[%rd293], %r2415;
	add.s32 	%r2636, %r209, %r2632;
	mul.wide.u32 	%rd294, %r2636, 4;
	add.s64 	%rd295, %rd33, %rd294;
	st.shared.u32 	[%rd295], %r2419;
	cvt.s64.s32 	%rd296, %r2632;
	add.s64 	%rd297, %rd164, %rd296;
	shl.b64 	%rd298, %rd297, 2;
	add.s64 	%rd299, %rd33, %rd298;
	st.shared.u32 	[%rd299+32], %r2423;
	add.s32 	%r2637, %r210, %r2632;
	mul.wide.u32 	%rd300, %r2637, 4;
	add.s64 	%rd301, %rd33, %rd300;
	st.shared.u32 	[%rd301], %r2427;
	add.s64 	%rd302, %rd169, %rd296;
	shl.b64 	%rd303, %rd302, 2;
	add.s64 	%rd304, %rd33, %rd303;
	st.shared.u32 	[%rd304+32], %r2431;
	add.s32 	%r2638, %r211, %r2632;
	mul.wide.u32 	%rd305, %r2638, 4;
	add.s64 	%rd306, %rd33, %rd305;
	st.shared.u32 	[%rd306], %r2435;
	bar.sync 	0;
	add.s16 	%rs212, %rs250, -5;
	mul.hi.s16 	%rs213, %rs212, 10923;
	shr.u16 	%rs214, %rs213, 15;
	add.s16 	%rs215, %rs213, %rs214;
	mul.lo.s16 	%rs216, %rs215, 6;
	sub.s16 	%rs217, %rs212, %rs216;
	mul.wide.s16 	%r2639, %rs217, 16;
	add.s32 	%r2640, %r212, %r2639;
	mul.wide.s32 	%rd307, %r2640, 4;
	add.s64 	%rd308, %rd33, %rd307;
	ld.shared.u32 	%r2443, [%rd308];
	add.s32 	%r2641, %r213, %r2639;
	mul.wide.s32 	%rd309, %r2641, 4;
	add.s64 	%rd310, %rd33, %rd309;
	ld.shared.u32 	%r2450, [%rd310];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2460, %r2457}, {%r397, %r400}, {%r2443}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2469, %r2466}, {%r397, %r400}, {%r2450}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2453, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2455, %r2453, %r2457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2458, %r435, %r2460, %r2455;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2462, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2464, %r2462, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2467, %r435, %r2469, %r2464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r438, %r2460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r435, %r2457, %r2471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2478, %r438, %r2469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2481, %r435, %r2466, %r2478;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2504, %r2507}, {%r481, %r484}, {%r2458, %r2474}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2511, %r2515}, {%r481, %r484}, {%r2467, %r2481}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2503, %r2504, %r2504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2506, %r2507, %r2507, %r2503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r2511, %r2511, %r2506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2514, %r2515, %r2515, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r1529, %r2514, %r108;
	// end inline asm
	add.s16 	%rs218, %rs250, -4;
	mul.hi.s16 	%rs219, %rs218, 10923;
	shr.u16 	%rs220, %rs219, 15;
	add.s16 	%rs221, %rs219, %rs220;
	mul.lo.s16 	%rs222, %rs221, 6;
	sub.s16 	%rs223, %rs218, %rs222;
	mul.wide.s16 	%r2642, %rs223, 16;
	add.s32 	%r2643, %r212, %r2642;
	mul.wide.s32 	%rd311, %r2643, 4;
	add.s64 	%rd312, %rd33, %rd311;
	ld.shared.u32 	%r2526, [%rd312];
	add.s32 	%r2644, %r213, %r2642;
	mul.wide.s32 	%rd313, %r2644, 4;
	add.s64 	%rd314, %rd33, %rd313;
	ld.shared.u32 	%r2533, [%rd314];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2543, %r2540}, {%r397, %r400}, {%r2526}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2552, %r2549}, {%r397, %r400}, {%r2533}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2536, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2538, %r2536, %r2540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2541, %r435, %r2543, %r2538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2545, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2547, %r2545, %r2549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2550, %r435, %r2552, %r2547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2554, %r438, %r2543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2557, %r435, %r2540, %r2554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2561, %r438, %r2552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2564, %r435, %r2549, %r2561;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2587, %r2590}, {%r481, %r484}, {%r2541, %r2557}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2594, %r2598}, {%r481, %r484}, {%r2550, %r2564}, {%r1360, %r1360}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2586, %r2587, %r2587;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2589, %r2590, %r2590, %r2586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2593, %r2594, %r2594, %r2589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2597, %r2598, %r2598, %r2593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r1529, %r2597, %r2518;
	// end inline asm
	add.s32 	%r3059, %r106, 2;
	setp.ne.s32 	%p275, %r3059, 128;
	@%p275 bra 	$L__BB0_153;
// %bb.151:                             // %L26745
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_152;
$L__BB0_198:                            // %pass11863
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2645, %r107, 147456, %r214;
	cvt.u64.u32 	%rd315, %r2645;
	add.s64 	%rd316, %rd315, %rd6;
	mul.hi.s64 	%rd317, %rd316, 1024819115206086201;
	shr.u64 	%rd318, %rd317, 63;
	shr.s64 	%rd319, %rd317, 23;
	add.s64 	%rd320, %rd319, %rd318;
	setp.lt.s64 	%p277, %rd316, 0;
	mul.lo.s64 	%rd321, %rd320, 150994944;
	setp.ne.s64 	%p278, %rd321, %rd316;
	and.pred  	%p279, %p277, %p278;
	selp.s64 	%rd322, -1, 0, %p279;
	add.s64 	%rd323, %rd320, %rd322;
	mul.lo.s64 	%rd324, %rd323, -150994944;
	add.s64 	%rd325, %rd324, %rd316;
	shl.b64 	%rd326, %rd325, 2;
	add.s64 	%rd327, %rd4, %rd326;
	st.global.u32 	[%rd327], %r3061;
$L__BB0_152:                            // %L26960
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r3059, 0;
	mov.u32 	%r3061, %r3059;
$L__BB0_153:                            // %oksrem12007
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs224, %rs250, -3;
	mul.hi.s16 	%rs225, %rs224, 10923;
	shr.u16 	%rs226, %rs225, 15;
	add.s16 	%rs227, %rs225, %rs226;
	mul.lo.s16 	%rs228, %rs227, 6;
	sub.s16 	%rs229, %rs224, %rs228;
	mul.wide.s16 	%r2813, %rs229, 16;
	add.s32 	%r2814, %r212, %r2813;
	mul.wide.s32 	%rd328, %r2814, 4;
	add.s64 	%rd330, %rd33, %rd328;
	ld.shared.u32 	%r2651, [%rd330];
	add.s32 	%r2815, %r213, %r2813;
	mul.wide.s32 	%rd331, %r2815, 4;
	add.s64 	%rd332, %rd33, %rd331;
	ld.shared.u32 	%r2658, [%rd332];
	mov.u32 	%r2792, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2668, %r2665}, {%r397, %r400}, {%r2651}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2677, %r2674}, {%r397, %r400}, {%r2658}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2661, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2663, %r2661, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2666, %r435, %r2668, %r2663;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2670, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2675, %r435, %r2677, %r2672;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r438, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2682, %r435, %r2665, %r2679;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r438, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r435, %r2674, %r2686;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2712, %r2715}, {%r481, %r484}, {%r2666, %r2682}, {%r2792, %r2792}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2719, %r2723}, {%r481, %r484}, {%r2675, %r2689}, {%r2792, %r2792}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2712, %r2712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r2715, %r2715, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r2719, %r2719, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r2723, %r2723, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2726, %r1529, %r2722, %r3061;
	// end inline asm
	add.s16 	%rs230, %rs250, -2;
	mul.hi.s16 	%rs231, %rs230, 10923;
	shr.u16 	%rs232, %rs231, 15;
	add.s16 	%rs233, %rs231, %rs232;
	mul.lo.s16 	%rs234, %rs233, 6;
	sub.s16 	%rs235, %rs230, %rs234;
	mul.wide.s16 	%r2816, %rs235, 16;
	add.s32 	%r2817, %r212, %r2816;
	mul.wide.s32 	%rd333, %r2817, 4;
	add.s64 	%rd334, %rd33, %rd333;
	ld.shared.u32 	%r2734, [%rd334];
	add.s32 	%r2818, %r213, %r2816;
	mul.wide.s32 	%rd335, %r2818, 4;
	add.s64 	%rd336, %rd33, %rd335;
	ld.shared.u32 	%r2741, [%rd336];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2751, %r2748}, {%r397, %r400}, {%r2734}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2760, %r2757}, {%r397, %r400}, {%r2741}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2744, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r2744, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r435, %r2751, %r2746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2753, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2755, %r2753, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2758, %r435, %r2760, %r2755;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2762, %r438, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2765, %r435, %r2748, %r2762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2769, %r438, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r435, %r2757, %r2769;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2795, %r2798}, {%r481, %r484}, {%r2749, %r2765}, {%r2792, %r2792}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2802, %r2806}, {%r481, %r484}, {%r2758, %r2772}, {%r2792, %r2792}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r2795, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r2798, %r2798, %r2794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r2802, %r2802, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2805, %r2806, %r2806, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r1529, %r2805, %r2726;
	// end inline asm
	add.s32 	%r3062, %r3059, 2;
	setp.eq.s32 	%p280, %r3062, 128;
	@%p280 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L28706
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_155;
$L__BB0_199:                            // %pass12714
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2819, %r107, 147456, %r214;
	cvt.u64.u32 	%rd337, %r2819;
	add.s64 	%rd338, %rd337, %rd6;
	mul.hi.s64 	%rd339, %rd338, 1024819115206086201;
	shr.u64 	%rd340, %rd339, 63;
	shr.s64 	%rd341, %rd339, 23;
	add.s64 	%rd342, %rd341, %rd340;
	setp.lt.s64 	%p282, %rd338, 0;
	mul.lo.s64 	%rd343, %rd342, 150994944;
	setp.ne.s64 	%p283, %rd343, %rd338;
	and.pred  	%p284, %p282, %p283;
	selp.s64 	%rd344, -1, 0, %p284;
	add.s64 	%rd345, %rd342, %rd344;
	mul.lo.s64 	%rd346, %rd345, -150994944;
	add.s64 	%rd347, %rd346, %rd338;
	shl.b64 	%rd348, %rd347, 2;
	add.s64 	%rd349, %rd4, %rd348;
	st.global.u32 	[%rd349], %r3064;
$L__BB0_155:                            // %L28921
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r107, %r107, 1;
	mov.u32 	%r3062, 0;
	mov.u32 	%r3064, %r3062;
$L__BB0_156:                            // %oksrem12858
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs236, %rs250, -1;
	mul.hi.s16 	%rs237, %rs236, 10923;
	shr.u16 	%rs238, %rs237, 15;
	add.s16 	%rs239, %rs237, %rs238;
	mul.lo.s16 	%rs240, %rs239, 6;
	sub.s16 	%rs241, %rs236, %rs240;
	mul.wide.s16 	%r2987, %rs241, 16;
	add.s32 	%r2988, %r212, %r2987;
	mul.wide.s32 	%rd350, %r2988, 4;
	add.s64 	%rd352, %rd33, %rd350;
	ld.shared.u32 	%r2825, [%rd352];
	add.s32 	%r2989, %r213, %r2987;
	mul.wide.s32 	%rd353, %r2989, 4;
	add.s64 	%rd354, %rd33, %rd353;
	ld.shared.u32 	%r2832, [%rd354];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2842, %r2839}, {%r397, %r400}, {%r2825}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2851, %r2848}, {%r397, %r400}, {%r2832}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2835, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2837, %r2835, %r2839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r435, %r2842, %r2837;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2844, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2846, %r2844, %r2848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2849, %r435, %r2851, %r2846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2853, %r438, %r2842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2856, %r435, %r2839, %r2853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r438, %r2851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r435, %r2848, %r2860;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2886, %r2889}, {%r481, %r484}, {%r2840, %r2856}, {%r2792, %r2792}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2893, %r2897}, {%r481, %r484}, {%r2849, %r2863}, {%r2792, %r2792}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2885, %r2886, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r2889, %r2889, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2892, %r2893, %r2893, %r2888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2896, %r2897, %r2897, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r1529, %r2896, %r3064;
	// end inline asm
	mul.hi.s16 	%rs242, %rs250, 10923;
	shr.u16 	%rs243, %rs242, 15;
	add.s16 	%rs244, %rs242, %rs243;
	mul.lo.s16 	%rs245, %rs244, 6;
	sub.s16 	%rs246, %rs250, %rs245;
	mul.wide.s16 	%r2990, %rs246, 16;
	add.s32 	%r2991, %r212, %r2990;
	mul.wide.s32 	%rd355, %r2991, 4;
	add.s64 	%rd356, %rd33, %rd355;
	ld.shared.u32 	%r2908, [%rd356];
	add.s32 	%r2992, %r213, %r2990;
	mul.wide.s32 	%rd357, %r2992, 4;
	add.s64 	%rd358, %rd33, %rd357;
	ld.shared.u32 	%r2915, [%rd358];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2925, %r2922}, {%r397, %r400}, {%r2908}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2934, %r2931}, {%r397, %r400}, {%r2915}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2918, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2920, %r2918, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r435, %r2925, %r2920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2927, %r438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2929, %r2927, %r2931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r435, %r2934, %r2929;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2936, %r438, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2939, %r435, %r2922, %r2936;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r438, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r435, %r2931, %r2943;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2969, %r2972}, {%r481, %r484}, {%r2923, %r2939}, {%r2792, %r2792}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2976, %r2980}, {%r481, %r484}, {%r2932, %r2946}, {%r2792, %r2792}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2968, %r2969, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r2972, %r2972, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r2976, %r2976, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r2980, %r2980, %r2975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r108, %r1529, %r2979, %r2900;
	// end inline asm
	add.s32 	%r106, %r3062, 2;
	setp.eq.s32 	%p285, %r106, 128;
	@%p285 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_159;
$L__BB0_157:                            // %L30667
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass13565
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2993, %r107, 147456, %r214;
	cvt.u64.u32 	%rd359, %r2993;
	add.s64 	%rd360, %rd359, %rd6;
	mul.hi.s64 	%rd361, %rd360, 1024819115206086201;
	shr.u64 	%rd362, %rd361, 63;
	shr.s64 	%rd363, %rd361, 23;
	add.s64 	%rd364, %rd363, %rd362;
	setp.lt.s64 	%p287, %rd360, 0;
	mul.lo.s64 	%rd365, %rd364, 150994944;
	setp.ne.s64 	%p288, %rd365, %rd360;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd366, -1, 0, %p289;
	add.s64 	%rd367, %rd364, %rd366;
	mul.lo.s64 	%rd368, %rd367, -150994944;
	add.s64 	%rd369, %rd368, %rd360;
	shl.b64 	%rd370, %rd369, 2;
	add.s64 	%rd371, %rd4, %rd370;
	st.global.u32 	[%rd371], %r108;
	bra.uni 	$L__BB0_158;
$L__BB0_161:                            // %L30914
	mov.u32 	%r2995, 0;
	st.global.u32 	[%rd5], %r2995;
	ret;
$L__BB0_141:                            // %post_box_union
	mov.u64 	%rd135, exception2644;
	cvta.global.u64 	%rd136, %rd135;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd136;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r263;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_192:                            // %post_box_union6551
	mov.u64 	%rd194, exception2644;
	cvta.global.u64 	%rd195, %rd194;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd195;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r263;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L157
	mov.u32 	%r2996, 2;
	st.global.u32 	[%rd5], %r2996;
	mov.u64 	%rd372, exception2604;
	cvta.global.u64 	%rd373, %rd372;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd373;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r263;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r263;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
