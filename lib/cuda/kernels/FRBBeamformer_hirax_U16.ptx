// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2501[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2549[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12561[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<369>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3556>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<432>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r309, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r309, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r301, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r310, %r2, %r3;
	or.b32  	%r311, %r310, %r5;
	mul.wide.u32 	%rd67, %r311, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r312, 1;
	st.global.u32 	[%rd6], %r312;
	setp.gt.u32 	%p3, %r301, 2047;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r302, %r301;
	setp.gt.s32 	%p5, %r302, 4095;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r302, %r301;
	and.b32  	%r313, %r6, 63;
	setp.ne.s32 	%p7, %r313, 0;
	setp.gt.u32 	%p8, %r303, 255;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r304, %r303;
	setp.lt.s32 	%p11, %r304, 512;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass40
	sub.s32 	%r314, %r304, %r303;
	mul.hi.s32 	%r315, %r6, 1374389535;
	shr.u32 	%r316, %r315, 31;
	shr.s32 	%r317, %r315, 3;
	add.s32 	%r318, %r317, %r316;
	setp.eq.s32 	%p13, %r314, %r318;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L261
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r305, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L263
	ld.param.u32 	%r306, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r306, %r305;
	setp.gt.s32 	%p16, %r306, 1024;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L273
	ld.param.u32 	%r307, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r306, %r305;
	and.b32  	%r319, %r7, 15;
	setp.ne.s32 	%p18, %r319, 0;
	setp.lt.s32 	%p19, %r307, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L279
	ld.param.u32 	%r308, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r308, %r307;
	setp.gt.s32 	%p22, %r308, 1024;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L289
	sub.s32 	%r320, %r308, %r307;
	and.b32  	%r321, %r320, 15;
	setp.eq.s32 	%p24, %r321, 0;
	setp.eq.s32 	%p25, %r320, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_13;
$L__BB0_197:                            // %pass149
	and.b32  	%r144, %r3, 3;
	shr.u32 	%r145, %r3, 2;
	mul.lo.s32 	%r322, %r144, %r145;
	and.b32  	%r323, %r322, 7;
	cvt.rn.f32.s32 	%f185, %r323;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p364, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_209;
// %bb.198:
	@%p364 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_199;
$L__BB0_205:
	mov.b32 	%r147, %f750;
	and.b32  	%r324, %r147, 8388607;
	or.b32  	%r3509, %r324, 1065353216;
	mov.b32 	%f745, %r3509;
	add.s32 	%r325, %r147, -1073741824;
	and.b32  	%r3510, %r325, -8388608;
	setp.eq.s32 	%p34, %r3510, 0;
	@%p34 bra 	$L__BB0_208;
// %bb.206:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_207:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r326, %r3510, 192937984;
	add.s32 	%r327, %r3509, %r326;
	mov.b32 	%f197, %r327;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3510, %r3510, %r326;
	mov.b32 	%r3509, %f745;
	setp.ne.s32 	%p35, %r3510, 0;
	setp.ne.s32 	%p36, %r3509, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_207;
$L__BB0_208:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r147, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_209;
$L__BB0_199:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r146, %f154;
	setp.lt.u32 	%p29, %r146, 1073741824;
	@%p29 bra 	$L__BB0_204;
// %bb.200:
	setp.lt.u32 	%p30, %r146, -2147483647;
	@%p30 bra 	$L__BB0_202;
// %bb.201:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_204;
$L__BB0_202:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_204;
// %bb.203:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_204:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_209:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r328, %f151;
	and.b32  	%r154, %r328, -2147483648;
	@%p39 bra 	$L__BB0_211;
// %bb.210:
	mov.b32 	%r329, %f746;
	or.b32  	%r330, %r154, %r329;
	mov.b32 	%f746, %r330;
$L__BB0_211:                            // %__nv_fmodf.exit
	shl.b32 	%r157, %r3, 1;
	and.b32  	%r345, %r157, 2;
	mul.lo.s32 	%r158, %r345, %r145;
	cvt.rn.f32.s32 	%f239, %r158;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p365, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p365 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r346, %r9, 8388607;
	or.b32  	%r3475, %r346, 1065353216;
	mov.b32 	%f705, %r3475;
	add.s32 	%r347, %r9, -1073741824;
	and.b32  	%r3476, %r347, -8388608;
	setp.eq.s32 	%p54, %r3476, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2328.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2328
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r3476, 192937984;
	add.s32 	%r349, %r3475, %r348;
	mov.b32 	%f251, %r349;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3476, %r3476, %r348;
	mov.b32 	%r3475, %f705;
	setp.ne.s32 	%p55, %r3476, 0;
	setp.ne.s32 	%p56, %r3475, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2330
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2307
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2311
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2314
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2333
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r350, %f168;
	and.b32  	%r16, %r350, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r351, %f706;
	or.b32  	%r352, %r16, %r351;
	mov.b32 	%f706, %r352;
$L__BB0_27:                             // %__nv_fmodf.exit2334
	add.s32 	%r361, %r158, %r145;
	cvt.rn.f32.s32 	%f291, %r361;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p366, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p366 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r362, %r18, 8388607;
	or.b32  	%r3477, %r362, 1065353216;
	mov.b32 	%f709, %r3477;
	add.s32 	%r363, %r18, -1073741824;
	and.b32  	%r3478, %r363, -8388608;
	setp.eq.s32 	%p74, %r3478, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2359.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2359
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r364, %r3478, 192937984;
	add.s32 	%r365, %r3477, %r364;
	mov.b32 	%f303, %r365;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3478, %r3478, %r364;
	mov.b32 	%r3477, %f709;
	setp.ne.s32 	%p75, %r3478, 0;
	setp.ne.s32 	%p76, %r3477, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2361
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2338
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2342
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2345
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2364
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r366, %f18;
	and.b32  	%r25, %r366, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r367, %f710;
	or.b32  	%r368, %r25, %r367;
	mov.b32 	%f710, %r368;
$L__BB0_41:                             // %__nv_fmodf.exit2365
	mul.lo.s32 	%r28, %r157, %r145;
	and.b32  	%r383, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r383;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p367, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p367 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r384, %r30, 8388607;
	or.b32  	%r3479, %r384, 1065353216;
	mov.b32 	%f713, %r3479;
	add.s32 	%r385, %r30, -1073741824;
	and.b32  	%r3480, %r385, -8388608;
	setp.eq.s32 	%p94, %r3480, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2390.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2390
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r386, %r3480, 192937984;
	add.s32 	%r387, %r3479, %r386;
	mov.b32 	%f357, %r387;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3480, %r3480, %r386;
	mov.b32 	%r3479, %f713;
	setp.ne.s32 	%p95, %r3480, 0;
	setp.ne.s32 	%p96, %r3479, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2392
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2369
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2373
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2376
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2395
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r388, %f35;
	and.b32  	%r37, %r388, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r389, %f714;
	or.b32  	%r390, %r37, %r389;
	mov.b32 	%f714, %r390;
$L__BB0_55:                             // %__nv_fmodf.exit2396
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r391, %f367;
	and.b32  	%r392, %r391, -2147483648;
	or.b32  	%r393, %r392, 1056964608;
	mov.b32 	%f368, %r393;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r394, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r395, %r394, 1;
	setp.eq.b32 	%p102, %r395, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r396, %r394, 2;
	setp.eq.s32 	%p103, %r396, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r397, %r394, 1;
	and.b32  	%r398, %r397, 2;
	setp.eq.s32 	%p104, %r398, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r399, %r28, %r145;
	and.b32  	%r400, %r399, 3;
	cvt.rn.f32.s32 	%f397, %r400;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p368, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p368 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r401, %r39, 8388607;
	or.b32  	%r3481, %r401, 1065353216;
	mov.b32 	%f717, %r3481;
	add.s32 	%r402, %r39, -1073741824;
	and.b32  	%r3482, %r402, -8388608;
	setp.eq.s32 	%p114, %r3482, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2421.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2421
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r403, %r3482, 192937984;
	add.s32 	%r404, %r3481, %r403;
	mov.b32 	%f409, %r404;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3482, %r3482, %r403;
	mov.b32 	%r3481, %f717;
	setp.ne.s32 	%p115, %r3482, 0;
	setp.ne.s32 	%p116, %r3481, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2423
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2400
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2404
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2407
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2426
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r405, %f54;
	and.b32  	%r46, %r405, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r406, %f718;
	or.b32  	%r407, %r46, %r406;
	mov.b32 	%f718, %r407;
$L__BB0_69:                             // %__nv_fmodf.exit2427
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r408, %f419;
	and.b32  	%r409, %r408, -2147483648;
	or.b32  	%r410, %r409, 1056964608;
	mov.b32 	%f420, %r410;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r411, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r412, %r411, 1;
	setp.eq.b32 	%p122, %r412, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r413, %r411, 2;
	setp.eq.s32 	%p123, %r413, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r414, %r411, 1;
	and.b32  	%r415, %r414, 2;
	setp.eq.s32 	%p124, %r415, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r3, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L690
	@%p27 bra 	$L__BB0_219;
// %bb.72:
	@%p364 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_73;
$L__BB0_215:
	mov.b32 	%r160, %f750;
	and.b32  	%r422, %r160, 8388607;
	or.b32  	%r3511, %r422, 1065353216;
	mov.b32 	%f749, %r3511;
	add.s32 	%r423, %r160, -1073741824;
	and.b32  	%r3512, %r423, -8388608;
	setp.eq.s32 	%p135, %r3512, 0;
	@%p135 bra 	$L__BB0_218;
// %bb.216:                             // %__nv_fmaf_rn.exit4.i.i.i2452.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_217:                            // %__nv_fmaf_rn.exit4.i.i.i2452
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r3512, 192937984;
	add.s32 	%r425, %r3511, %r424;
	mov.b32 	%f459, %r425;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3512, %r3512, %r424;
	mov.b32 	%r3511, %f749;
	setp.ne.s32 	%p136, %r3512, 0;
	setp.ne.s32 	%p137, %r3511, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_217;
$L__BB0_218:                            // %__internal_fmodf_slowpath_mod.exit.i.i2454
	setp.gt.u32 	%p139, %r160, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_219;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2431
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r159, %f171;
	setp.lt.u32 	%p130, %r159, 1073741824;
	@%p130 bra 	$L__BB0_214;
// %bb.74:
	setp.lt.u32 	%p131, %r159, -2147483647;
	@%p131 bra 	$L__BB0_212;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_214;
$L__BB0_212:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_214;
// %bb.213:                             // %__nv_fmaf_rn.exit.i.i.i2435
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_214:                            // %__internal_fmodf_fastpath_quot.exit.i.i2438
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_219:                            // %__internal_fmodf_kernel.exit.i2457
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_221;
// %bb.220:
	mov.b32 	%r426, %f750;
	or.b32  	%r427, %r154, %r426;
	mov.b32 	%f750, %r427;
$L__BB0_221:                            // %__nv_fmodf.exit2458
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p365 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r442, %r51, 8388607;
	or.b32  	%r3483, %r442, 1065353216;
	mov.b32 	%f725, %r3483;
	add.s32 	%r443, %r51, -1073741824;
	and.b32  	%r3484, %r443, -8388608;
	setp.eq.s32 	%p155, %r3484, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2483.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2483
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r444, %r3484, 192937984;
	add.s32 	%r445, %r3483, %r444;
	mov.b32 	%f511, %r445;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3484, %r3484, %r444;
	mov.b32 	%r3483, %f725;
	setp.ne.s32 	%p156, %r3484, 0;
	setp.ne.s32 	%p157, %r3483, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2485
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2462
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2466
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2469
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2488
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r446, %f726;
	or.b32  	%r447, %r16, %r446;
	mov.b32 	%f726, %r447;
$L__BB0_89:                             // %__nv_fmodf.exit2489
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p366 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r456, %r59, 8388607;
	or.b32  	%r3485, %r456, 1065353216;
	mov.b32 	%f729, %r3485;
	add.s32 	%r457, %r59, -1073741824;
	and.b32  	%r3486, %r457, -8388608;
	setp.eq.s32 	%p175, %r3486, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2514.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2514
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r458, %r3486, 192937984;
	add.s32 	%r459, %r3485, %r458;
	mov.b32 	%f561, %r459;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3486, %r3486, %r458;
	mov.b32 	%r3485, %f729;
	setp.ne.s32 	%p176, %r3486, 0;
	setp.ne.s32 	%p177, %r3485, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2516
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2493
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2497
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2500
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2519
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r460, %f730;
	or.b32  	%r461, %r25, %r460;
	mov.b32 	%f730, %r461;
$L__BB0_103:                            // %__nv_fmodf.exit2520
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p367 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r476, %r69, 8388607;
	or.b32  	%r3487, %r476, 1065353216;
	mov.b32 	%f733, %r3487;
	add.s32 	%r477, %r69, -1073741824;
	and.b32  	%r3488, %r477, -8388608;
	setp.eq.s32 	%p195, %r3488, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2545.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2545
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r478, %r3488, 192937984;
	add.s32 	%r479, %r3487, %r478;
	mov.b32 	%f613, %r479;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3488, %r3488, %r478;
	mov.b32 	%r3487, %f733;
	setp.ne.s32 	%p196, %r3488, 0;
	setp.ne.s32 	%p197, %r3487, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2547
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2524
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2528
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2531
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2550
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r480, %f734;
	or.b32  	%r481, %r37, %r480;
	mov.b32 	%f734, %r481;
$L__BB0_117:                            // %__nv_fmodf.exit2551
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r482, %f623;
	and.b32  	%r483, %r482, -2147483648;
	or.b32  	%r484, %r483, 1056964608;
	mov.b32 	%f624, %r484;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r485, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r486, %r485, 1;
	setp.eq.b32 	%p204, %r486, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r487, %r485, 2;
	setp.eq.s32 	%p205, %r487, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r488, %r485, 1;
	and.b32  	%r489, %r488, 2;
	setp.eq.s32 	%p206, %r489, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p368 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r490, %r77, 8388607;
	or.b32  	%r3489, %r490, 1065353216;
	mov.b32 	%f737, %r3489;
	add.s32 	%r491, %r77, -1073741824;
	and.b32  	%r3490, %r491, -8388608;
	setp.eq.s32 	%p215, %r3490, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2576.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2576
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r492, %r3490, 192937984;
	add.s32 	%r493, %r3489, %r492;
	mov.b32 	%f663, %r493;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3490, %r3490, %r492;
	mov.b32 	%r3489, %f737;
	setp.ne.s32 	%p216, %r3490, 0;
	setp.ne.s32 	%p217, %r3489, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2578
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2555
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2559
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2562
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2581
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r494, %f738;
	or.b32  	%r495, %r46, %r494;
	mov.b32 	%f738, %r495;
$L__BB0_131:                            // %__nv_fmodf.exit2582
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r496, %f673;
	and.b32  	%r497, %r496, -2147483648;
	or.b32  	%r498, %r497, 1056964608;
	mov.b32 	%f674, %r498;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r499, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r500, %r499, 1;
	setp.eq.b32 	%p224, %r500, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r501, %r499, 2;
	setp.eq.s32 	%p225, %r501, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r502, %r499, 1;
	and.b32  	%r503, %r502, 2;
	setp.eq.s32 	%p226, %r503, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L983
	setp.gt.u32 	%p229, %r3, 15;
	mov.u32 	%r169, 999999999;
	@%p229 bra 	$L__BB0_223;
// %bb.134:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r511, %r3, 4;
	and.b32  	%r512, %r511, 240;
	or.b32  	%r513, %r512, %r1;
	mul.wide.u32 	%rd68, %r513, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r514, [%rd69];
	shl.b32 	%r515, %r514, 16;
	cvt.s32.s16 	%r86, %r514;
	shr.s32 	%r87, %r514, 16;
	or.b32  	%r516, %r515, 65535;
	setp.lt.u32 	%p230, %r516, 1114111;
	setp.lt.u32 	%p231, %r514, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_135;
$L__BB0_222:                            // %L1257
	mul.lo.s32 	%r520, %r87, 546;
	mad.lo.s32 	%r169, %r86, 33, %r520;
$L__BB0_223:                            // %pass544
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r337, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r338, %r337, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r434, %f469;
	or.b32  	%r339, %r338, 1056964608;
	mov.b32 	%r353, %f261;
	mov.b32 	%r375, %f313;
	and.b32  	%r435, %r434, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r339;
	and.b32  	%r354, %r353, -2147483648;
	and.b32  	%r376, %r375, -2147483648;
	or.b32  	%r436, %r435, 1056964608;
	mov.b32 	%r448, %f521;
	mov.b32 	%r468, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r355, %r354, 1056964608;
	or.b32  	%r377, %r376, 1056964608;
	mov.b32 	%f470, %r436;
	and.b32  	%r449, %r448, -2147483648;
	and.b32  	%r469, %r468, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r355;
	mov.b32 	%f314, %r377;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r450, %r449, 1056964608;
	or.b32  	%r470, %r469, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r450;
	mov.b32 	%f572, %r470;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r340, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r341, %r340, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r437, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r341, 1;
	cvt.rzi.s32.f32 	%r356, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r378, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r438, %r437, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r342, %r340, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r357, %r356, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r379, %r378, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r438, 1;
	cvt.rzi.s32.f32 	%r451, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r471, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r342, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r343, %r340, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r357, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r379, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r439, %r437, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r452, %r451, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r472, %r471, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r344, %r343, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r358, %r356, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r380, %r378, 2;
	setp.eq.s32 	%p145, %r439, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r440, %r437, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r452, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r472, 1;
	setp.eq.s32 	%p44, %r344, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r358, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r359, %r356, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r380, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r381, %r378, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r441, %r440, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r453, %r451, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r473, %r471, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r360, %r359, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r382, %r381, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r441, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r453, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r454, %r451, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r473, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r474, %r471, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r360, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r382, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r455, %r454, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r475, %r474, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r333, %f238;
	mov.b32 	%r336, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r455, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r475, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r332, %r336, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r430, %f500;
	mov.b32 	%r433, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r333, %r332;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r334, %r336, %r333;
	// end inline asm
	mov.b32 	%r371, %f344;
	mov.b32 	%r370, %f17;
	mov.b32 	%r374, %f341;
	mov.b32 	%r373, %f16;
	mov.b32 	%r417, %f75;
	mov.b32 	%r418, %f77;
	mov.b32 	%r420, %f76;
	mov.b32 	%r421, %f78;
	xor.b32  	%r429, %r433, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r372, %r374, %r373;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r430;
	// end inline asm
	mov.b32 	%r464, %f602;
	mov.b32 	%r463, %f95;
	mov.b32 	%r467, %f599;
	mov.b32 	%r466, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r462, %r464, %r463;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r465, %r467, %r466;
	// end inline asm
	mov.b32 	%r505, %f147;
	mov.b32 	%r506, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r504, %r506, %r505;
	// end inline asm
	mov.b32 	%r508, %f148;
	mov.b32 	%r509, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r509, %r508;
	// end inline asm
	shl.b32 	%r522, %r1, 1;
	and.b32  	%r523, %r145, 1;
	shr.u32 	%r524, %r3, 3;
	and.b32  	%r525, %r524, 2;
	or.b32  	%r526, %r523, %r525;
	shl.b32 	%r527, %r526, 4;
	bfe.u32 	%r528, %r3, 3, 1;
	and.b32  	%r529, %r522, 14;
	or.b32  	%r530, %r529, %r528;
	shl.b32 	%r531, %r3, 6;
	and.b32  	%r532, %r531, 192;
	or.b32  	%r533, %r527, %r530;
	or.b32  	%r534, %r533, %r532;
	or.b32  	%r535, %r534, %r5;
	mul.wide.u32 	%rd75, %r535, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r170, [%rd76];
	ld.global.u32 	%r171, [%rd76+1024];
	shl.b32 	%r536, %r301, 17;
	shl.b32 	%r537, %r305, 7;
	add.s32 	%r172, %r537, %r536;
	shl.b32 	%r538, %r3, 2;
	and.b32  	%r173, %r538, 64;
	and.b32  	%r174, %r538, 60;
	shl.b32 	%r175, %r4, 7;
	and.b32  	%r176, %r3, 16;
	shr.u32 	%r539, %r3, 4;
	and.b32  	%r540, %r157, 30;
	or.b32  	%r541, %r540, %r539;
	mul.lo.s32 	%r542, %r541, 257;
	shr.u32 	%r543, %r1, 3;
	and.b32  	%r544, %r2, 224;
	mad.lo.s32 	%r545, %r543, 257, %r544;
	or.b32  	%r546, %r543, 2;
	mad.lo.s32 	%r547, %r546, 257, %r544;
	or.b32  	%r548, %r543, 4;
	mad.lo.s32 	%r549, %r548, 257, %r544;
	or.b32  	%r550, %r543, 6;
	mad.lo.s32 	%r551, %r550, 257, %r544;
	or.b32  	%r552, %r543, 8;
	mad.lo.s32 	%r553, %r552, 257, %r544;
	or.b32  	%r554, %r543, 10;
	mad.lo.s32 	%r555, %r554, 257, %r544;
	or.b32  	%r556, %r543, 12;
	mad.lo.s32 	%r557, %r556, 257, %r544;
	or.b32  	%r558, %r543, 14;
	mad.lo.s32 	%r559, %r558, 257, %r544;
	or.b32  	%r560, %r543, 16;
	mad.lo.s32 	%r561, %r560, 257, %r544;
	or.b32  	%r562, %r543, 18;
	mad.lo.s32 	%r563, %r562, 257, %r544;
	or.b32  	%r564, %r543, 20;
	mad.lo.s32 	%r565, %r564, 257, %r544;
	or.b32  	%r566, %r543, 22;
	mad.lo.s32 	%r567, %r566, 257, %r544;
	or.b32  	%r568, %r543, 24;
	mad.lo.s32 	%r569, %r568, 257, %r544;
	or.b32  	%r570, %r543, 26;
	mad.lo.s32 	%r571, %r570, 257, %r544;
	or.b32  	%r572, %r543, 28;
	mad.lo.s32 	%r573, %r572, 257, %r544;
	or.b32  	%r574, %r543, 30;
	mad.lo.s32 	%r575, %r574, 257, %r544;
	mul.lo.s32 	%r576, %r144, 2184;
	mad.lo.s32 	%r577, %r530, 33, %r576;
	mad.lo.s32 	%r578, %r526, 546, %r577;
	setp.lt.u32 	%p233, %r3, 4;
	setp.eq.s32 	%p234, %r145, 4;
	setp.eq.s32 	%p235, %r145, 5;
	and.b32  	%r579, %r1, 1;
	neg.s32 	%r580, %r579;
	and.b32  	%r581, %r580, 2064;
	bfe.s32 	%r582, %r1, 1, 1;
	and.b32  	%r583, %r582, 1032;
	bfe.s32 	%r584, %r1, 2, 1;
	and.b32  	%r585, %r1, 4;
	setp.eq.s32 	%p236, %r585, 0;
	and.b32  	%r586, %r584, 516;
	and.b32  	%r587, %r538, 12;
	bfe.s32 	%r588, %r3, 3, 1;
	and.b32  	%r589, %r3, 8;
	setp.eq.s32 	%p237, %r589, 0;
	and.b32  	%r590, %r588, 4144;
	mul.lo.s32 	%r591, %r543, 258;
	or.b32  	%r592, %r581, %r583;
	or.b32  	%r593, %r526, %r587;
	add.s32 	%r594, %r593, %r591;
	add.s32 	%r595, %r594, %r586;
	add.s32 	%r596, %r595, %r590;
	add.s32 	%r597, %r596, %r592;
	mul.wide.u32 	%rd77, %r597, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	cvt.u64.u32 	%rd79, %r592;
	selp.b64 	%rd80, 0, 4144, %p237;
	selp.b64 	%rd81, 0, 516, %p236;
	cvt.u64.u32 	%rd82, %r591;
	cvt.u64.u32 	%rd83, %r593;
	add.s64 	%rd84, %rd83, %rd82;
	add.s64 	%rd85, %rd84, %rd81;
	add.s64 	%rd86, %rd85, %rd80;
	add.s64 	%rd87, %rd86, %rd79;
	shl.b64 	%rd88, %rd87, 2;
	add.s64 	%rd8, %rd78, %rd88;
	shl.b32 	%r598, %r303, 19;
	shl.b32 	%r599, %r307, 9;
	add.s32 	%r600, %r599, %r598;
	and.b32  	%r177, %r3, 15;
	or.b32  	%r178, %r2, %r176;
	cvt.s64.s32 	%rd9, %r600;
	add.s32 	%r601, %r1, %r542;
	mul.wide.u32 	%rd89, %r601, 4;
	add.s64 	%rd10, %rd78, %rd89;
	cvt.u64.u32 	%rd90, %r1;
	cvt.u64.u32 	%rd11, %r542;
	add.s64 	%rd91, %rd11, %rd90;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd12, %rd78, %rd92;
	add.s32 	%r602, %r545, %r3;
	mul.wide.u32 	%rd93, %r602, 4;
	add.s64 	%rd13, %rd78, %rd93;
	add.s32 	%r603, %r547, %r3;
	mul.wide.u32 	%rd94, %r603, 4;
	add.s64 	%rd14, %rd78, %rd94;
	add.s32 	%r604, %r549, %r3;
	mul.wide.u32 	%rd95, %r604, 4;
	add.s64 	%rd15, %rd78, %rd95;
	add.s32 	%r605, %r551, %r3;
	mul.wide.u32 	%rd96, %r605, 4;
	add.s64 	%rd16, %rd78, %rd96;
	add.s32 	%r606, %r553, %r3;
	mul.wide.u32 	%rd97, %r606, 4;
	add.s64 	%rd17, %rd78, %rd97;
	add.s32 	%r607, %r555, %r3;
	mul.wide.u32 	%rd98, %r607, 4;
	add.s64 	%rd18, %rd78, %rd98;
	add.s32 	%r608, %r557, %r3;
	mul.wide.u32 	%rd99, %r608, 4;
	add.s64 	%rd19, %rd78, %rd99;
	add.s32 	%r609, %r559, %r3;
	mul.wide.u32 	%rd100, %r609, 4;
	add.s64 	%rd20, %rd78, %rd100;
	add.s32 	%r610, %r561, %r3;
	mul.wide.u32 	%rd101, %r610, 4;
	add.s64 	%rd21, %rd78, %rd101;
	add.s32 	%r611, %r563, %r3;
	mul.wide.u32 	%rd102, %r611, 4;
	add.s64 	%rd22, %rd78, %rd102;
	add.s32 	%r612, %r565, %r3;
	mul.wide.u32 	%rd103, %r612, 4;
	add.s64 	%rd23, %rd78, %rd103;
	add.s32 	%r613, %r567, %r3;
	mul.wide.u32 	%rd104, %r613, 4;
	add.s64 	%rd24, %rd78, %rd104;
	add.s32 	%r614, %r569, %r3;
	mul.wide.u32 	%rd105, %r614, 4;
	add.s64 	%rd25, %rd78, %rd105;
	add.s32 	%r615, %r571, %r3;
	mul.wide.u32 	%rd106, %r615, 4;
	add.s64 	%rd26, %rd78, %rd106;
	add.s32 	%r616, %r573, %r3;
	mul.wide.u32 	%rd107, %r616, 4;
	add.s64 	%rd27, %rd78, %rd107;
	add.s32 	%r617, %r575, %r3;
	mul.wide.u32 	%rd108, %r617, 4;
	add.s64 	%rd28, %rd78, %rd108;
	add.s32 	%r618, %r578, %r543;
	mul.wide.u32 	%rd109, %r618, 4;
	add.s64 	%rd29, %rd78, %rd109;
	add.s32 	%r619, %r578, %r546;
	mul.wide.u32 	%rd110, %r619, 4;
	add.s64 	%rd30, %rd78, %rd110;
	add.s32 	%r620, %r578, %r548;
	mul.wide.u32 	%rd111, %r620, 4;
	add.s64 	%rd31, %rd78, %rd111;
	add.s32 	%r621, %r578, %r550;
	mul.wide.u32 	%rd112, %r621, 4;
	add.s64 	%rd32, %rd78, %rd112;
	add.s32 	%r622, %r578, %r552;
	mul.wide.u32 	%rd113, %r622, 4;
	add.s64 	%rd33, %rd78, %rd113;
	add.s32 	%r623, %r578, %r554;
	mul.wide.u32 	%rd114, %r623, 4;
	add.s64 	%rd34, %rd78, %rd114;
	add.s32 	%r624, %r578, %r556;
	mul.wide.u32 	%rd115, %r624, 4;
	add.s64 	%rd35, %rd78, %rd115;
	add.s32 	%r625, %r578, %r558;
	mul.wide.u32 	%rd116, %r625, 4;
	add.s64 	%rd36, %rd78, %rd116;
	add.s32 	%r626, %r578, %r560;
	mul.wide.u32 	%rd117, %r626, 4;
	add.s64 	%rd37, %rd78, %rd117;
	add.s32 	%r627, %r578, %r562;
	mul.wide.u32 	%rd118, %r627, 4;
	add.s64 	%rd38, %rd78, %rd118;
	add.s32 	%r628, %r578, %r564;
	mul.wide.u32 	%rd119, %r628, 4;
	add.s64 	%rd39, %rd78, %rd119;
	add.s32 	%r629, %r578, %r566;
	mul.wide.u32 	%rd120, %r629, 4;
	add.s64 	%rd40, %rd78, %rd120;
	add.s32 	%r630, %r578, %r568;
	mul.wide.u32 	%rd121, %r630, 4;
	add.s64 	%rd41, %rd78, %rd121;
	add.s32 	%r631, %r578, %r570;
	mul.wide.u32 	%rd122, %r631, 4;
	add.s64 	%rd42, %rd78, %rd122;
	add.s32 	%r632, %r578, %r572;
	mul.wide.u32 	%rd123, %r632, 4;
	add.s64 	%rd43, %rd78, %rd123;
	add.s32 	%r633, %r578, %r574;
	mul.wide.u32 	%rd124, %r633, 4;
	add.s64 	%rd44, %rd78, %rd124;
	add.s32 	%r634, %r145, -1;
	setp.lt.u32 	%p238, %r634, 3;
	or.pred  	%p239, %p233, %p238;
	or.pred  	%p240, %p239, %p234;
	and.b32  	%r635, %r3, 24;
	setp.eq.s32 	%p241, %r635, 24;
	or.pred  	%p242, %p235, %p241;
	selp.b32 	%r179, 1145324612, -286331154, %p239;
	or.pred  	%p1, %p240, %p242;
	add.s32 	%r636, %r597, 32;
	mul.wide.u32 	%rd125, %r636, 4;
	add.s64 	%rd45, %rd78, %rd125;
	add.s32 	%r637, %r597, 48;
	mul.wide.u32 	%rd126, %r637, 4;
	add.s64 	%rd46, %rd78, %rd126;
	add.s32 	%r638, %r597, 64;
	mul.wide.u32 	%rd127, %r638, 4;
	add.s64 	%rd47, %rd78, %rd127;
	add.s32 	%r639, %r597, 80;
	mul.wide.u32 	%rd128, %r639, 4;
	add.s64 	%rd48, %rd78, %rd128;
	add.s32 	%r640, %r597, 96;
	mul.wide.u32 	%rd129, %r640, 4;
	add.s64 	%rd49, %rd78, %rd129;
	add.s32 	%r641, %r597, 112;
	mul.wide.u32 	%rd130, %r641, 4;
	add.s64 	%rd50, %rd78, %rd130;
	add.s32 	%r642, %r597, 128;
	mul.wide.u32 	%rd131, %r642, 4;
	add.s64 	%rd51, %rd78, %rd131;
	add.s32 	%r643, %r597, 144;
	mul.wide.u32 	%rd132, %r643, 4;
	add.s64 	%rd52, %rd78, %rd132;
	add.s32 	%r644, %r597, 160;
	mul.wide.u32 	%rd133, %r644, 4;
	add.s64 	%rd53, %rd78, %rd133;
	add.s32 	%r645, %r597, 176;
	mul.wide.u32 	%rd134, %r645, 4;
	add.s64 	%rd54, %rd78, %rd134;
	add.s32 	%r646, %r597, 192;
	mul.wide.u32 	%rd135, %r646, 4;
	add.s64 	%rd55, %rd78, %rd135;
	add.s32 	%r647, %r597, 208;
	mul.wide.u32 	%rd136, %r647, 4;
	add.s64 	%rd56, %rd78, %rd136;
	add.s32 	%r648, %r597, 224;
	mul.wide.u32 	%rd137, %r648, 4;
	add.s64 	%rd57, %rd78, %rd137;
	add.s32 	%r649, %r597, 240;
	mul.wide.u32 	%rd138, %r649, 4;
	add.s64 	%rd58, %rd78, %rd138;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p244, %r176, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3503, %r89;
	mov.u32 	%r3504, %r89;
	mov.u32 	%r3505, %r89;
	bra.uni 	$L__BB0_224;
$L__BB0_195:                            // %L32549
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r143, %r89, 64;
	setp.ne.s32 	%p363, %r89, 1984;
	mov.u32 	%r89, %r143;
	@%p363 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_196;
$L__BB0_224:                            // %L1614
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_242 Depth 2
                                        //     Child Loop BB0_170 Depth 2
	add.s32 	%r650, %r89, %r301;
	setp.lt.s32 	%p243, %r650, %r302;
	@%p243 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_196;
$L__BB0_225:                            // %pass761
                                        //   in Loop: Header=BB0_224 Depth=1
	cvt.u32.u64 	%r843, %rd11;
	or.b32  	%r844, %r89, %r1;
	shl.b32 	%r845, %r844, 17;
	and.b32  	%r846, %r845, 262012928;
	or.b32  	%r847, %r846, %r173;
	or.b32  	%r848, %r847, %r174;
	or.b32  	%r849, %r848, %r175;
	add.s32 	%r850, %r172, %r849;
	shr.s32 	%r851, %r850, 31;
	shr.u32 	%r852, %r851, 4;
	add.s32 	%r853, %r850, %r852;
	shr.s32 	%r854, %r853, 28;
	setp.lt.s32 	%p245, %r850, 0;
	and.b32  	%r855, %r853, -268435456;
	setp.ne.s32 	%p246, %r855, %r850;
	and.pred  	%p247, %p245, %p246;
	selp.u32 	%r856, 1, 0, %p247;
	sub.s32 	%r857, %r856, %r854;
	shl.b32 	%r858, %r857, 28;
	add.s32 	%r859, %r858, %r850;
	mul.wide.s32 	%rd139, %r859, 4;
	add.s64 	%rd140, %rd3, %rd139;
	ld.global.v4.u32 	{%r860, %r861, %r862, %r863}, [%rd140];
	or.b32  	%r864, %r844, 16;
	shl.b32 	%r865, %r864, 17;
	and.b32  	%r866, %r865, 264110080;
	or.b32  	%r867, %r866, %r173;
	or.b32  	%r868, %r867, %r174;
	or.b32  	%r869, %r868, %r175;
	add.s32 	%r870, %r172, %r869;
	shr.s32 	%r871, %r870, 31;
	shr.u32 	%r872, %r871, 4;
	add.s32 	%r873, %r870, %r872;
	shr.s32 	%r874, %r873, 28;
	setp.lt.s32 	%p248, %r870, 0;
	and.b32  	%r875, %r873, -268435456;
	setp.ne.s32 	%p249, %r875, %r870;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r876, 1, 0, %p250;
	sub.s32 	%r877, %r876, %r874;
	shl.b32 	%r878, %r877, 28;
	add.s32 	%r879, %r878, %r870;
	mul.wide.s32 	%rd141, %r879, 4;
	add.s64 	%rd142, %rd3, %rd141;
	ld.global.v4.u32 	{%r880, %r881, %r882, %r883}, [%rd142];
	and.b32  	%r884, %r89, 1984;
	or.b32  	%r885, %r1, %r884;
	shl.b32 	%r886, %r885, 17;
	or.b32  	%r887, %r886, %r173;
	or.b32  	%r888, %r887, %r174;
	or.b32  	%r889, %r888, %r175;
	or.b32  	%r890, %r889, 4194304;
	add.s32 	%r891, %r172, %r890;
	shr.s32 	%r892, %r891, 31;
	shr.u32 	%r893, %r892, 4;
	add.s32 	%r894, %r891, %r893;
	shr.s32 	%r895, %r894, 28;
	setp.lt.s32 	%p251, %r891, 0;
	and.b32  	%r896, %r894, -268435456;
	setp.ne.s32 	%p252, %r896, %r891;
	and.pred  	%p253, %p251, %p252;
	selp.u32 	%r897, 1, 0, %p253;
	sub.s32 	%r898, %r897, %r895;
	shl.b32 	%r899, %r898, 28;
	add.s32 	%r900, %r899, %r891;
	mul.wide.s32 	%rd143, %r900, 4;
	add.s64 	%rd144, %rd3, %rd143;
	ld.global.v4.u32 	{%r901, %r902, %r903, %r904}, [%rd144];
	or.b32  	%r905, %r889, 6291456;
	add.s32 	%r906, %r172, %r905;
	shr.s32 	%r907, %r906, 31;
	shr.u32 	%r908, %r907, 4;
	add.s32 	%r909, %r906, %r908;
	shr.s32 	%r910, %r909, 28;
	setp.lt.s32 	%p254, %r906, 0;
	and.b32  	%r911, %r909, -268435456;
	setp.ne.s32 	%p255, %r911, %r906;
	and.pred  	%p256, %p254, %p255;
	selp.u32 	%r912, 1, 0, %p256;
	sub.s32 	%r913, %r912, %r910;
	shl.b32 	%r914, %r913, 28;
	add.s32 	%r915, %r914, %r906;
	mul.wide.s32 	%rd145, %r915, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r916, %r917, %r918, %r919}, [%rd146];
	selp.b32 	%r920, %r862, %r860, %p244;
	shfl.sync.bfly.b32	%r921, %r920, 16, 31, -1;
	selp.b32 	%r653, %r860, %r921, %p244;
	selp.b32 	%r658, %r921, %r862, %p244;
	selp.b32 	%r922, %r863, %r861, %p244;
	shfl.sync.bfly.b32	%r923, %r922, 16, 31, -1;
	selp.b32 	%r661, %r861, %r923, %p244;
	selp.b32 	%r666, %r923, %r863, %p244;
	selp.b32 	%r924, %r882, %r880, %p244;
	shfl.sync.bfly.b32	%r925, %r924, 16, 31, -1;
	selp.b32 	%r669, %r880, %r925, %p244;
	selp.b32 	%r674, %r925, %r882, %p244;
	selp.b32 	%r926, %r883, %r881, %p244;
	shfl.sync.bfly.b32	%r927, %r926, 16, 31, -1;
	selp.b32 	%r677, %r881, %r927, %p244;
	selp.b32 	%r682, %r927, %r883, %p244;
	selp.b32 	%r928, %r903, %r901, %p244;
	shfl.sync.bfly.b32	%r929, %r928, 16, 31, -1;
	selp.b32 	%r685, %r901, %r929, %p244;
	selp.b32 	%r690, %r929, %r903, %p244;
	selp.b32 	%r930, %r904, %r902, %p244;
	shfl.sync.bfly.b32	%r931, %r930, 16, 31, -1;
	selp.b32 	%r693, %r902, %r931, %p244;
	selp.b32 	%r698, %r931, %r904, %p244;
	selp.b32 	%r932, %r918, %r916, %p244;
	shfl.sync.bfly.b32	%r933, %r932, 16, 31, -1;
	selp.b32 	%r701, %r916, %r933, %p244;
	selp.b32 	%r706, %r933, %r918, %p244;
	selp.b32 	%r934, %r919, %r917, %p244;
	shfl.sync.bfly.b32	%r935, %r934, 16, 31, -1;
	selp.b32 	%r709, %r917, %r935, %p244;
	selp.b32 	%r714, %r935, %r919, %p244;
	shl.b32 	%r654, %r658, 4;
	mov.u32 	%r652, 252645135;
	// begin inline asm
	lop3.b32 %r716, %r652, %r653, %r654, 202;
	// end inline asm
	shr.u32 	%r657, %r653, 4;
	// begin inline asm
	lop3.b32 %r732, %r652, %r657, %r658, 202;
	// end inline asm
	shl.b32 	%r662, %r666, 4;
	// begin inline asm
	lop3.b32 %r724, %r652, %r661, %r662, 202;
	// end inline asm
	shr.u32 	%r665, %r661, 4;
	// begin inline asm
	lop3.b32 %r740, %r652, %r665, %r666, 202;
	// end inline asm
	shl.b32 	%r670, %r674, 4;
	// begin inline asm
	lop3.b32 %r748, %r652, %r669, %r670, 202;
	// end inline asm
	shr.u32 	%r673, %r669, 4;
	// begin inline asm
	lop3.b32 %r764, %r652, %r673, %r674, 202;
	// end inline asm
	shl.b32 	%r678, %r682, 4;
	// begin inline asm
	lop3.b32 %r756, %r652, %r677, %r678, 202;
	// end inline asm
	shr.u32 	%r681, %r677, 4;
	// begin inline asm
	lop3.b32 %r772, %r652, %r681, %r682, 202;
	// end inline asm
	shl.b32 	%r686, %r690, 4;
	// begin inline asm
	lop3.b32 %r717, %r652, %r685, %r686, 202;
	// end inline asm
	shr.u32 	%r689, %r685, 4;
	// begin inline asm
	lop3.b32 %r733, %r652, %r689, %r690, 202;
	// end inline asm
	shl.b32 	%r694, %r698, 4;
	// begin inline asm
	lop3.b32 %r725, %r652, %r693, %r694, 202;
	// end inline asm
	shr.u32 	%r697, %r693, 4;
	// begin inline asm
	lop3.b32 %r741, %r652, %r697, %r698, 202;
	// end inline asm
	shl.b32 	%r702, %r706, 4;
	// begin inline asm
	lop3.b32 %r749, %r652, %r701, %r702, 202;
	// end inline asm
	shr.u32 	%r705, %r701, 4;
	// begin inline asm
	lop3.b32 %r765, %r652, %r705, %r706, 202;
	// end inline asm
	shl.b32 	%r710, %r714, 4;
	// begin inline asm
	lop3.b32 %r757, %r652, %r709, %r710, 202;
	// end inline asm
	shr.u32 	%r713, %r709, 4;
	// begin inline asm
	lop3.b32 %r773, %r652, %r713, %r714, 202;
	// end inline asm
	mov.u32 	%r718, 25152;
	// begin inline asm
	prmt.b32 %r780, %r716, %r717, %r718;
	// end inline asm
	mov.u32 	%r722, 29521;
	// begin inline asm
	prmt.b32 %r812, %r716, %r717, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r724, %r725, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r820, %r724, %r725, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r781, %r732, %r733, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r732, %r733, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r740, %r741, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r821, %r740, %r741, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r748, %r749, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r828, %r748, %r749, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r756, %r757, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r836, %r756, %r757, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r764, %r765, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r764, %r765, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r772, %r773, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r772, %r773, %r722;
	// end inline asm
	mov.u32 	%r782, 21520;
	// begin inline asm
	prmt.b32 %r779, %r780, %r781, %r782;
	// end inline asm
	mov.u32 	%r786, 30258;
	// begin inline asm
	prmt.b32 %r783, %r780, %r781, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r788, %r789, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r788, %r789, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r796, %r797, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r796, %r797, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r804, %r805, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r804, %r805, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r812, %r813, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r812, %r813, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r820, %r821, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r820, %r821, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r827, %r828, %r829, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r831, %r828, %r829, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r835, %r836, %r837, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r839, %r836, %r837, %r786;
	// end inline asm
	st.shared.u32 	[%rd10], %r779;
	st.shared.u32 	[%rd12+512], %r787;
	st.shared.u32 	[%rd12+256], %r783;
	st.shared.u32 	[%rd12+768], %r791;
	and.b32  	%r936, %r864, 31;
	add.s32 	%r937, %r936, %r843;
	mul.wide.u32 	%rd147, %r937, 4;
	add.s64 	%rd149, %rd78, %rd147;
	st.shared.u32 	[%rd149], %r795;
	cvt.u64.u32 	%rd150, %r936;
	add.s64 	%rd151, %rd11, %rd150;
	shl.b64 	%rd152, %rd151, 2;
	add.s64 	%rd153, %rd78, %rd152;
	st.shared.u32 	[%rd153+512], %r803;
	st.shared.u32 	[%rd153+256], %r799;
	st.shared.u32 	[%rd153+768], %r807;
	st.shared.u32 	[%rd12+128], %r811;
	st.shared.u32 	[%rd12+640], %r819;
	st.shared.u32 	[%rd12+384], %r815;
	st.shared.u32 	[%rd12+896], %r823;
	st.shared.u32 	[%rd153+128], %r827;
	st.shared.u32 	[%rd153+640], %r835;
	st.shared.u32 	[%rd153+384], %r831;
	st.shared.u32 	[%rd153+896], %r839;
	bar.sync 	0;
	ld.shared.u32 	%r180, [%rd13];
	ld.shared.u32 	%r181, [%rd14];
	ld.shared.u32 	%r182, [%rd15];
	ld.shared.u32 	%r183, [%rd16];
	ld.shared.u32 	%r184, [%rd17];
	ld.shared.u32 	%r185, [%rd18];
	ld.shared.u32 	%r186, [%rd19];
	ld.shared.u32 	%r187, [%rd20];
	ld.shared.u32 	%r188, [%rd21];
	ld.shared.u32 	%r189, [%rd22];
	ld.shared.u32 	%r190, [%rd23];
	ld.shared.u32 	%r191, [%rd24];
	ld.shared.u32 	%r192, [%rd25];
	ld.shared.u32 	%r193, [%rd26];
	ld.shared.u32 	%r194, [%rd27];
	ld.shared.u32 	%r195, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r196, %r169, 0, 31, -1;
	shfl.sync.idx.b32	%r197, %r169, 1, 31, -1;
	shfl.sync.idx.b32	%r198, %r169, 2, 31, -1;
	shfl.sync.idx.b32	%r199, %r169, 3, 31, -1;
	shfl.sync.idx.b32	%r200, %r169, 4, 31, -1;
	shfl.sync.idx.b32	%r201, %r169, 5, 31, -1;
	shfl.sync.idx.b32	%r202, %r169, 6, 31, -1;
	shfl.sync.idx.b32	%r203, %r169, 7, 31, -1;
	shfl.sync.idx.b32	%r204, %r169, 8, 31, -1;
	shfl.sync.idx.b32	%r205, %r169, 9, 31, -1;
	shfl.sync.idx.b32	%r206, %r169, 10, 31, -1;
	shfl.sync.idx.b32	%r207, %r169, 11, 31, -1;
	shfl.sync.idx.b32	%r208, %r169, 12, 31, -1;
	shfl.sync.idx.b32	%r209, %r169, 13, 31, -1;
	shfl.sync.idx.b32	%r210, %r169, 14, 31, -1;
	shfl.sync.idx.b32	%r211, %r169, 15, 31, -1;
	setp.eq.s32 	%p257, %r196, 999999999;
	@%p257 bra 	$L__BB0_136;
// %bb.226:                             // %pass3025
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r938, %r196, %r3;
	mul.wide.s32 	%rd154, %r938, 4;
	add.s64 	%rd156, %rd78, %rd154;
	st.shared.u32 	[%rd156], %r180;
	setp.eq.s32 	%p258, %r197, 999999999;
	@%p258 bra 	$L__BB0_137;
// %bb.227:                             // %pass3091
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r939, %r197, %r3;
	mul.wide.s32 	%rd157, %r939, 4;
	add.s64 	%rd159, %rd78, %rd157;
	st.shared.u32 	[%rd159], %r181;
	setp.eq.s32 	%p259, %r198, 999999999;
	@%p259 bra 	$L__BB0_138;
// %bb.228:                             // %pass3157
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r940, %r198, %r3;
	mul.wide.s32 	%rd160, %r940, 4;
	add.s64 	%rd162, %rd78, %rd160;
	st.shared.u32 	[%rd162], %r182;
	setp.eq.s32 	%p260, %r199, 999999999;
	@%p260 bra 	$L__BB0_139;
// %bb.229:                             // %pass3223
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r941, %r199, %r3;
	mul.wide.s32 	%rd163, %r941, 4;
	add.s64 	%rd165, %rd78, %rd163;
	st.shared.u32 	[%rd165], %r183;
	setp.eq.s32 	%p261, %r200, 999999999;
	@%p261 bra 	$L__BB0_140;
// %bb.230:                             // %pass3289
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r942, %r200, %r3;
	mul.wide.s32 	%rd166, %r942, 4;
	add.s64 	%rd168, %rd78, %rd166;
	st.shared.u32 	[%rd168], %r184;
	setp.eq.s32 	%p262, %r201, 999999999;
	@%p262 bra 	$L__BB0_141;
// %bb.231:                             // %pass3355
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r943, %r201, %r3;
	mul.wide.s32 	%rd169, %r943, 4;
	add.s64 	%rd171, %rd78, %rd169;
	st.shared.u32 	[%rd171], %r185;
	setp.eq.s32 	%p263, %r202, 999999999;
	@%p263 bra 	$L__BB0_142;
// %bb.232:                             // %pass3421
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r944, %r202, %r3;
	mul.wide.s32 	%rd172, %r944, 4;
	add.s64 	%rd174, %rd78, %rd172;
	st.shared.u32 	[%rd174], %r186;
	setp.eq.s32 	%p264, %r203, 999999999;
	@%p264 bra 	$L__BB0_143;
// %bb.233:                             // %pass3487
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r945, %r203, %r3;
	mul.wide.s32 	%rd175, %r945, 4;
	add.s64 	%rd177, %rd78, %rd175;
	st.shared.u32 	[%rd177], %r187;
	setp.eq.s32 	%p265, %r204, 999999999;
	@%p265 bra 	$L__BB0_144;
// %bb.234:                             // %pass3553
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r946, %r204, %r3;
	mul.wide.s32 	%rd178, %r946, 4;
	add.s64 	%rd180, %rd78, %rd178;
	st.shared.u32 	[%rd180], %r188;
	setp.eq.s32 	%p266, %r205, 999999999;
	@%p266 bra 	$L__BB0_145;
// %bb.235:                             // %pass3619
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r947, %r205, %r3;
	mul.wide.s32 	%rd181, %r947, 4;
	add.s64 	%rd183, %rd78, %rd181;
	st.shared.u32 	[%rd183], %r189;
	setp.eq.s32 	%p267, %r206, 999999999;
	@%p267 bra 	$L__BB0_146;
// %bb.236:                             // %pass3685
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r948, %r206, %r3;
	mul.wide.s32 	%rd184, %r948, 4;
	add.s64 	%rd186, %rd78, %rd184;
	st.shared.u32 	[%rd186], %r190;
	setp.eq.s32 	%p268, %r207, 999999999;
	@%p268 bra 	$L__BB0_147;
// %bb.237:                             // %pass3751
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r949, %r207, %r3;
	mul.wide.s32 	%rd187, %r949, 4;
	add.s64 	%rd189, %rd78, %rd187;
	st.shared.u32 	[%rd189], %r191;
	setp.eq.s32 	%p269, %r208, 999999999;
	@%p269 bra 	$L__BB0_148;
// %bb.238:                             // %pass3817
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r950, %r208, %r3;
	mul.wide.s32 	%rd190, %r950, 4;
	add.s64 	%rd192, %rd78, %rd190;
	st.shared.u32 	[%rd192], %r192;
	setp.eq.s32 	%p270, %r209, 999999999;
	@%p270 bra 	$L__BB0_149;
// %bb.239:                             // %pass3883
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r951, %r209, %r3;
	mul.wide.s32 	%rd193, %r951, 4;
	add.s64 	%rd195, %rd78, %rd193;
	st.shared.u32 	[%rd195], %r193;
	setp.eq.s32 	%p271, %r210, 999999999;
	@%p271 bra 	$L__BB0_150;
// %bb.240:                             // %pass3949
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r952, %r210, %r3;
	mul.wide.s32 	%rd196, %r952, 4;
	add.s64 	%rd198, %rd78, %rd196;
	st.shared.u32 	[%rd198], %r194;
	setp.eq.s32 	%p272, %r211, 999999999;
	@%p272 bra 	$L__BB0_151;
// %bb.241:                             // %pass4015
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r954, %r211, %r3;
	mul.wide.s32 	%rd199, %r954, 4;
	add.s64 	%rd201, %rd78, %rd199;
	st.shared.u32 	[%rd201], %r195;
	bar.sync 	0;
	ld.shared.u32 	%r212, [%rd29];
	ld.shared.u32 	%r213, [%rd30];
	ld.shared.u32 	%r214, [%rd31];
	ld.shared.u32 	%r215, [%rd32];
	ld.shared.u32 	%r216, [%rd33];
	ld.shared.u32 	%r217, [%rd34];
	ld.shared.u32 	%r218, [%rd35];
	ld.shared.u32 	%r219, [%rd36];
	ld.shared.u32 	%r220, [%rd37];
	ld.shared.u32 	%r221, [%rd38];
	ld.shared.u32 	%r222, [%rd39];
	ld.shared.u32 	%r223, [%rd40];
	ld.shared.u32 	%r224, [%rd41];
	ld.shared.u32 	%r225, [%rd42];
	ld.shared.u32 	%r226, [%rd43];
	ld.shared.u32 	%r227, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3495, 16;
	bra.uni 	$L__BB0_242;
$L__BB0_167:                            // %L22444
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3503, 0;
	mov.u32 	%r3505, %r3503;
$L__BB0_168:                            // %L22445
                                        //   in Loop: Header=BB0_242 Depth=2
	bar.sync 	0;
	add.s32 	%r3495, %r3495, -8;
	setp.ne.s32 	%p317, %r3495, -16;
	@%p317 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_169;
$L__BB0_242:                            // %L12378
                                        //   Parent Loop BB0_224 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p273, %r3495, 16;
	selp.b32 	%r1347, %r212, 0, %p273;
	setp.eq.s32 	%p274, %r3495, 8;
	selp.b32 	%r1348, %r216, %r1347, %p274;
	setp.eq.s32 	%p275, %r3495, 0;
	selp.b32 	%r1349, %r220, %r1348, %p275;
	setp.eq.s32 	%p276, %r3495, -8;
	selp.b32 	%r1350, %r224, %r1349, %p276;
	selp.b32 	%r1351, %r213, 0, %p273;
	selp.b32 	%r1352, %r217, %r1351, %p274;
	selp.b32 	%r1353, %r221, %r1352, %p275;
	selp.b32 	%r1354, %r225, %r1353, %p276;
	selp.b32 	%r1355, %r214, 0, %p273;
	selp.b32 	%r1356, %r218, %r1355, %p274;
	selp.b32 	%r1357, %r222, %r1356, %p275;
	selp.b32 	%r1358, %r226, %r1357, %p276;
	selp.b32 	%r1359, %r215, 0, %p273;
	selp.b32 	%r1360, %r219, %r1359, %p274;
	selp.b32 	%r1361, %r223, %r1360, %p275;
	selp.b32 	%r1362, %r227, %r1361, %p276;
	// begin inline asm
	mov.b32 %r960, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r959, %r1350, -2004318072;
	mov.u32 	%r1096, 983055;
	// begin inline asm
	lop3.b32 %r957, %r1096, %r959, %r960, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r961, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r962, %r960, %r961;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r965, %r957, %r962;
	// end inline asm
	mov.u32 	%r1107, 15728880;
	// begin inline asm
	lop3.b32 %r968, %r1107, %r959, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r973, %r971, %r972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r976, %r968, %r973;
	// end inline asm
	// begin inline asm
	mov.b32 %r1006, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1005, %r1354, -2004318072;
	// begin inline asm
	lop3.b32 %r1003, %r1096, %r1005, %r1006, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1007, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1008, %r1006, %r1007;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1011, %r1003, %r1008;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1014, %r1107, %r1005, %r1017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1019, %r1017, %r1018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1022, %r1014, %r1019;
	// end inline asm
	// begin inline asm
	mov.b32 %r1052, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1063, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1051, %r1358, -2004318072;
	// begin inline asm
	lop3.b32 %r1049, %r1096, %r1051, %r1052, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1053, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1054, %r1052, %r1053;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1057, %r1049, %r1054;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1060, %r1107, %r1051, %r1063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1064, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1065, %r1063, %r1064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1068, %r1060, %r1065;
	// end inline asm
	// begin inline asm
	mov.b32 %r1098, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1109, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1097, %r1362, -2004318072;
	// begin inline asm
	lop3.b32 %r1095, %r1096, %r1097, %r1098, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1099, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1100, %r1098, %r1099;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1103, %r1095, %r1100;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1106, %r1107, %r1097, %r1109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1110, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1111, %r1109, %r1110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1114, %r1106, %r1111;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r965;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1139, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r976;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1142, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1011;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1145, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1022;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1148, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1057;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1151, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1068;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1154, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1103;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1157, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1114;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1160, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1218, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1163, %r1164}, {%r331, %r334}, {%r1139}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1170, %r1171}, {%r331, %r334}, {%r1142}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1177, %r1178}, {%r331, %r334}, {%r1145}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1184, %r1185}, {%r331, %r334}, {%r1148}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1191, %r1192}, {%r331, %r334}, {%r1151}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1198, %r1199}, {%r331, %r334}, {%r1154}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1205, %r1206}, {%r331, %r334}, {%r1157}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1212, %r1213}, {%r331, %r334}, {%r1160}, {%r1218, %r1218};
	// end inline asm
	@%p1 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_243;
$L__BB0_245:                            // %pass5418
                                        //   in Loop: Header=BB0_242 Depth=2
	// begin inline asm
	neg.f16x2 %r1219, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r1219, %r1164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r369, %r1163, %r1221;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1228, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1230, %r1228, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1233, %r369, %r1170, %r1230;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1237, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1239, %r1237, %r1178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1242, %r369, %r1177, %r1239;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1246, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1248, %r1246, %r1185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r369, %r1184, %r1248;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1255, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r1255, %r1192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r369, %r1191, %r1257;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1264, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1266, %r1264, %r1199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r369, %r1198, %r1266;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1273, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1275, %r1273, %r1206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1278, %r369, %r1205, %r1275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1282, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1284, %r1282, %r1213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1287, %r369, %r1212, %r1284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1291, %r372, %r1163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1294, %r369, %r1164, %r1291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1298, %r372, %r1170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1301, %r369, %r1171, %r1298;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1305, %r372, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1308, %r369, %r1178, %r1305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1312, %r372, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1315, %r369, %r1185, %r1312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1319, %r372, %r1191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1322, %r369, %r1192, %r1319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1326, %r372, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1329, %r369, %r1199, %r1326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1333, %r372, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1336, %r369, %r1206, %r1333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1340, %r372, %r1212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1343, %r369, %r1213, %r1340;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1363, %r1364}, {%r416, %r419}, {%r1224, %r1294}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1372, %r1373}, {%r416, %r419}, {%r1233, %r1301}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1381, %r1382}, {%r416, %r419}, {%r1242, %r1308}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1390, %r1391}, {%r416, %r419}, {%r1251, %r1315}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1399, %r1400}, {%r416, %r419}, {%r1260, %r1322}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1408, %r1409}, {%r416, %r419}, {%r1269, %r1329}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1417, %r1418}, {%r416, %r419}, {%r1278, %r1336}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1426, %r1427}, {%r416, %r419}, {%r1287, %r1343}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1503, [%rd7];
	ld.shared.u32 	%r1510, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1520, %r1517}, {%r428, %r431}, {%r1503}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1529, %r1526}, {%r428, %r431}, {%r1510}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1513, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1515, %r1513, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r462, %r1520, %r1515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1522, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r1522, %r1526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r462, %r1529, %r1524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1531, %r465, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r462, %r1517, %r1531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1538, %r465, %r1529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r462, %r1526, %r1538;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1564, %r1567}, {%r504, %r507}, {%r1518, %r1534}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1571, %r1575}, {%r504, %r507}, {%r1527, %r1541}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1563, %r1564, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r1567, %r1567, %r1563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r1571, %r1571, %r1566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1574, %r1575, %r1575, %r1570;
	// end inline asm
	mov.u32 	%r1579, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3516, %r1579, %r1574, %r3505;
	// end inline asm
	add.s32 	%r3514, %r3503, 1;
	setp.eq.s32 	%p277, %r3514, 25;
	@%p277 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_246;
$L__BB0_152:                            // %L14233
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p278, %r3, 16;
	@%p278 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_153;
$L__BB0_244:                            // %pass5965
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1582, %r3504, 19;
	or.b32  	%r1583, %r1582, %r177;
	or.b32  	%r1584, %r1583, %r178;
	or.b32  	%r1585, %r1584, %r5;
	cvt.u64.u32 	%rd204, %r1585;
	add.s64 	%rd205, %rd204, %rd9;
	shr.u64 	%rd206, %rd205, 37;
	add.s64 	%rd207, %rd205, %rd206;
	shr.s64 	%rd208, %rd207, 27;
	setp.lt.s64 	%p279, %rd205, 0;
	and.b64  	%rd209, %rd207, -134217728;
	setp.ne.s64 	%p280, %rd209, %rd205;
	and.pred  	%p281, %p279, %p280;
	selp.u64 	%rd210, 1, 0, %p281;
	sub.s64 	%rd211, %rd210, %rd208;
	shl.b64 	%rd212, %rd211, 27;
	add.s64 	%rd213, %rd212, %rd205;
	shl.b64 	%rd214, %rd213, 2;
	add.s64 	%rd215, %rd4, %rd214;
	st.global.u32 	[%rd215], %r3516;
$L__BB0_153:                            // %L14450
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3514, 0;
	mov.u32 	%r3516, %r3514;
$L__BB0_246:                            // %pass6200
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1591, [%rd45];
	ld.shared.u32 	%r1598, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1608, %r1605}, {%r428, %r431}, {%r1591}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1617, %r1614}, {%r428, %r431}, {%r1598}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1601, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1603, %r1601, %r1605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1606, %r462, %r1608, %r1603;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1610, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1612, %r1610, %r1614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1615, %r462, %r1617, %r1612;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1619, %r465, %r1608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r462, %r1605, %r1619;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1626, %r465, %r1617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1629, %r462, %r1614, %r1626;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1652, %r1655}, {%r504, %r507}, {%r1606, %r1622}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1659, %r1663}, {%r504, %r507}, {%r1615, %r1629}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1651, %r1652, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1655, %r1655, %r1651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r1659, %r1659, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r1663, %r1663, %r1658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r1579, %r1662, %r3516;
	// end inline asm
	add.s32 	%r3517, %r3514, 1;
	setp.eq.s32 	%p282, %r3517, 25;
	@%p282 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_247;
$L__BB0_154:                            // %L15375
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p283, %r3, 16;
	@%p283 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_155;
$L__BB0_262:                            // %pass6448
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1670, %r3504, 19;
	or.b32  	%r1671, %r1670, %r177;
	or.b32  	%r1672, %r1671, %r178;
	or.b32  	%r1673, %r1672, %r5;
	cvt.u64.u32 	%rd216, %r1673;
	add.s64 	%rd217, %rd216, %rd9;
	shr.u64 	%rd218, %rd217, 37;
	add.s64 	%rd219, %rd217, %rd218;
	shr.s64 	%rd220, %rd219, 27;
	setp.lt.s64 	%p284, %rd217, 0;
	and.b64  	%rd221, %rd219, -134217728;
	setp.ne.s64 	%p285, %rd221, %rd217;
	and.pred  	%p286, %p284, %p285;
	selp.u64 	%rd222, 1, 0, %p286;
	sub.s64 	%rd223, %rd222, %rd220;
	shl.b64 	%rd224, %rd223, 27;
	add.s64 	%rd225, %rd224, %rd217;
	shl.b64 	%rd226, %rd225, 2;
	add.s64 	%rd227, %rd4, %rd226;
	st.global.u32 	[%rd227], %r3519;
$L__BB0_155:                            // %L15592
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3517, 0;
	mov.u32 	%r3519, %r3517;
$L__BB0_247:                            // %pass6683
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1679, [%rd47];
	ld.shared.u32 	%r1686, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1696, %r1693}, {%r428, %r431}, {%r1679}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1705, %r1702}, {%r428, %r431}, {%r1686}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1689, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1689, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r462, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1698, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1698, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r462, %r1705, %r1700;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1707, %r465, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r462, %r1693, %r1707;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r465, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r462, %r1702, %r1714;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1740, %r1743}, {%r504, %r507}, {%r1694, %r1710}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1747, %r1751}, {%r504, %r507}, {%r1703, %r1717}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r1740, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r1743, %r1743, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r1747, %r1747, %r1742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r1751, %r1751, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r1579, %r1750, %r3519;
	// end inline asm
	add.s32 	%r3520, %r3517, 1;
	setp.eq.s32 	%p287, %r3520, 25;
	@%p287 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_248;
$L__BB0_156:                            // %L16517
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p288, %r3, 16;
	@%p288 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_157;
$L__BB0_263:                            // %pass6931
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1758, %r3504, 19;
	or.b32  	%r1759, %r1758, %r177;
	or.b32  	%r1760, %r1759, %r178;
	or.b32  	%r1761, %r1760, %r5;
	cvt.u64.u32 	%rd228, %r1761;
	add.s64 	%rd229, %rd228, %rd9;
	shr.u64 	%rd230, %rd229, 37;
	add.s64 	%rd231, %rd229, %rd230;
	shr.s64 	%rd232, %rd231, 27;
	setp.lt.s64 	%p289, %rd229, 0;
	and.b64  	%rd233, %rd231, -134217728;
	setp.ne.s64 	%p290, %rd233, %rd229;
	and.pred  	%p291, %p289, %p290;
	selp.u64 	%rd234, 1, 0, %p291;
	sub.s64 	%rd235, %rd234, %rd232;
	shl.b64 	%rd236, %rd235, 27;
	add.s64 	%rd237, %rd236, %rd229;
	shl.b64 	%rd238, %rd237, 2;
	add.s64 	%rd239, %rd4, %rd238;
	st.global.u32 	[%rd239], %r3522;
$L__BB0_157:                            // %L16734
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3520, 0;
	mov.u32 	%r3522, %r3520;
$L__BB0_248:                            // %pass7166
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1767, [%rd49];
	ld.shared.u32 	%r1774, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1784, %r1781}, {%r428, %r431}, {%r1767}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1793, %r1790}, {%r428, %r431}, {%r1774}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1777, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r1777, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r462, %r1784, %r1779;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1786, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r1786, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r462, %r1793, %r1788;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1795, %r465, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r462, %r1781, %r1795;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1802, %r465, %r1793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r462, %r1790, %r1802;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1828, %r1831}, {%r504, %r507}, {%r1782, %r1798}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1835, %r1839}, {%r504, %r507}, {%r1791, %r1805}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r1828, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r1831, %r1831, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1834, %r1835, %r1835, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1838, %r1839, %r1839, %r1834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r1579, %r1838, %r3522;
	// end inline asm
	add.s32 	%r3523, %r3520, 1;
	setp.eq.s32 	%p292, %r3523, 25;
	@%p292 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_249;
$L__BB0_158:                            // %L17659
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p293, %r3, 16;
	@%p293 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_159;
$L__BB0_264:                            // %pass7414
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1846, %r3504, 19;
	or.b32  	%r1847, %r1846, %r177;
	or.b32  	%r1848, %r1847, %r178;
	or.b32  	%r1849, %r1848, %r5;
	cvt.u64.u32 	%rd240, %r1849;
	add.s64 	%rd241, %rd240, %rd9;
	shr.u64 	%rd242, %rd241, 37;
	add.s64 	%rd243, %rd241, %rd242;
	shr.s64 	%rd244, %rd243, 27;
	setp.lt.s64 	%p294, %rd241, 0;
	and.b64  	%rd245, %rd243, -134217728;
	setp.ne.s64 	%p295, %rd245, %rd241;
	and.pred  	%p296, %p294, %p295;
	selp.u64 	%rd246, 1, 0, %p296;
	sub.s64 	%rd247, %rd246, %rd244;
	shl.b64 	%rd248, %rd247, 27;
	add.s64 	%rd249, %rd248, %rd241;
	shl.b64 	%rd250, %rd249, 2;
	add.s64 	%rd251, %rd4, %rd250;
	st.global.u32 	[%rd251], %r3525;
$L__BB0_159:                            // %L17876
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3523, 0;
	mov.u32 	%r3525, %r3523;
$L__BB0_249:                            // %pass7649
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1855, [%rd51];
	ld.shared.u32 	%r1862, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1872, %r1869}, {%r428, %r431}, {%r1855}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1881, %r1878}, {%r428, %r431}, {%r1862}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1865, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1867, %r1865, %r1869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1870, %r462, %r1872, %r1867;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1874, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1876, %r1874, %r1878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1879, %r462, %r1881, %r1876;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1883, %r465, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r462, %r1869, %r1883;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1890, %r465, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r462, %r1878, %r1890;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1916, %r1919}, {%r504, %r507}, {%r1870, %r1886}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1923, %r1927}, {%r504, %r507}, {%r1879, %r1893}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1915, %r1916, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r1919, %r1919, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r1923, %r1923, %r1918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1926, %r1927, %r1927, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r1579, %r1926, %r3525;
	// end inline asm
	add.s32 	%r3526, %r3523, 1;
	setp.eq.s32 	%p297, %r3526, 25;
	@%p297 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_250;
$L__BB0_160:                            // %L18801
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p298, %r3, 16;
	@%p298 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_161;
$L__BB0_265:                            // %pass7897
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1934, %r3504, 19;
	or.b32  	%r1935, %r1934, %r177;
	or.b32  	%r1936, %r1935, %r178;
	or.b32  	%r1937, %r1936, %r5;
	cvt.u64.u32 	%rd252, %r1937;
	add.s64 	%rd253, %rd252, %rd9;
	shr.u64 	%rd254, %rd253, 37;
	add.s64 	%rd255, %rd253, %rd254;
	shr.s64 	%rd256, %rd255, 27;
	setp.lt.s64 	%p299, %rd253, 0;
	and.b64  	%rd257, %rd255, -134217728;
	setp.ne.s64 	%p300, %rd257, %rd253;
	and.pred  	%p301, %p299, %p300;
	selp.u64 	%rd258, 1, 0, %p301;
	sub.s64 	%rd259, %rd258, %rd256;
	shl.b64 	%rd260, %rd259, 27;
	add.s64 	%rd261, %rd260, %rd253;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd263, %rd4, %rd262;
	st.global.u32 	[%rd263], %r3528;
$L__BB0_161:                            // %L19018
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3526, 0;
	mov.u32 	%r3528, %r3526;
$L__BB0_250:                            // %pass8132
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1943, [%rd53];
	ld.shared.u32 	%r1950, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1960, %r1957}, {%r428, %r431}, {%r1943}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1969, %r1966}, {%r428, %r431}, {%r1950}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1953, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1955, %r1953, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r462, %r1960, %r1955;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1962, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1964, %r1962, %r1966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1967, %r462, %r1969, %r1964;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1971, %r465, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r462, %r1957, %r1971;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1978, %r465, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r462, %r1966, %r1978;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2004, %r2007}, {%r504, %r507}, {%r1958, %r1974}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2011, %r2015}, {%r504, %r507}, {%r1967, %r1981}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2003, %r2004, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r2007, %r2007, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r2011, %r2011, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r2015, %r2015, %r2010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r1579, %r2014, %r3528;
	// end inline asm
	add.s32 	%r3529, %r3526, 1;
	setp.eq.s32 	%p302, %r3529, 25;
	@%p302 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_251;
$L__BB0_162:                            // %L19943
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p303, %r3, 16;
	@%p303 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_163;
$L__BB0_266:                            // %pass8380
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r2022, %r3504, 19;
	or.b32  	%r2023, %r2022, %r177;
	or.b32  	%r2024, %r2023, %r178;
	or.b32  	%r2025, %r2024, %r5;
	cvt.u64.u32 	%rd264, %r2025;
	add.s64 	%rd265, %rd264, %rd9;
	shr.u64 	%rd266, %rd265, 37;
	add.s64 	%rd267, %rd265, %rd266;
	shr.s64 	%rd268, %rd267, 27;
	setp.lt.s64 	%p304, %rd265, 0;
	and.b64  	%rd269, %rd267, -134217728;
	setp.ne.s64 	%p305, %rd269, %rd265;
	and.pred  	%p306, %p304, %p305;
	selp.u64 	%rd270, 1, 0, %p306;
	sub.s64 	%rd271, %rd270, %rd268;
	shl.b64 	%rd272, %rd271, 27;
	add.s64 	%rd273, %rd272, %rd265;
	shl.b64 	%rd274, %rd273, 2;
	add.s64 	%rd275, %rd4, %rd274;
	st.global.u32 	[%rd275], %r3531;
$L__BB0_163:                            // %L20160
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3529, 0;
	mov.u32 	%r3531, %r3529;
$L__BB0_251:                            // %pass8615
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r2031, [%rd55];
	ld.shared.u32 	%r2038, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2048, %r2045}, {%r428, %r431}, {%r2031}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2057, %r2054}, {%r428, %r431}, {%r2038}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2041, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2043, %r2041, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r462, %r2048, %r2043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2050, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r2050, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r462, %r2057, %r2052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2059, %r465, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2062, %r462, %r2045, %r2059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2066, %r465, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2069, %r462, %r2054, %r2066;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2092, %r2095}, {%r504, %r507}, {%r2046, %r2062}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2099, %r2103}, {%r504, %r507}, {%r2055, %r2069}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2091, %r2092, %r2092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r2095, %r2095, %r2091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2098, %r2099, %r2099, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2102, %r2103, %r2103, %r2098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r1579, %r2102, %r3531;
	// end inline asm
	add.s32 	%r3532, %r3529, 1;
	setp.eq.s32 	%p307, %r3532, 25;
	@%p307 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_252;
$L__BB0_164:                            // %L21085
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p308, %r3, 16;
	@%p308 bra 	$L__BB0_267;
	bra.uni 	$L__BB0_165;
$L__BB0_267:                            // %pass8863
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r2110, %r3504, 19;
	or.b32  	%r2111, %r2110, %r177;
	or.b32  	%r2112, %r2111, %r178;
	or.b32  	%r2113, %r2112, %r5;
	cvt.u64.u32 	%rd276, %r2113;
	add.s64 	%rd277, %rd276, %rd9;
	shr.u64 	%rd278, %rd277, 37;
	add.s64 	%rd279, %rd277, %rd278;
	shr.s64 	%rd280, %rd279, 27;
	setp.lt.s64 	%p309, %rd277, 0;
	and.b64  	%rd281, %rd279, -134217728;
	setp.ne.s64 	%p310, %rd281, %rd277;
	and.pred  	%p311, %p309, %p310;
	selp.u64 	%rd282, 1, 0, %p311;
	sub.s64 	%rd283, %rd282, %rd280;
	shl.b64 	%rd284, %rd283, 27;
	add.s64 	%rd285, %rd284, %rd277;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd287, %rd4, %rd286;
	st.global.u32 	[%rd287], %r3534;
$L__BB0_165:                            // %L21302
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3532, 0;
	mov.u32 	%r3534, %r3532;
$L__BB0_252:                            // %pass9098
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r2119, [%rd57];
	ld.shared.u32 	%r2126, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2136, %r2133}, {%r428, %r431}, {%r2119}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2145, %r2142}, {%r428, %r431}, {%r2126}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2129, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r2129, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2134, %r462, %r2136, %r2131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2138, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r2138, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2143, %r462, %r2145, %r2140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r465, %r2136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2150, %r462, %r2133, %r2147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2154, %r465, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r462, %r2142, %r2154;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2180, %r2183}, {%r504, %r507}, {%r2134, %r2150}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2187, %r2191}, {%r504, %r507}, {%r2143, %r2157}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2179, %r2180, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r2183, %r2183, %r2179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2186, %r2187, %r2187, %r2182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2190, %r2191, %r2191, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r1579, %r2190, %r3534;
	// end inline asm
	add.s32 	%r3503, %r3532, 1;
	setp.eq.s32 	%p312, %r3503, 25;
	@%p312 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_168;
$L__BB0_166:                            // %L22227
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p313, %r3, 16;
	@%p313 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_167;
$L__BB0_253:                            // %pass9346
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r2198, %r3504, 19;
	or.b32  	%r2199, %r2198, %r177;
	or.b32  	%r2200, %r2199, %r178;
	or.b32  	%r2201, %r2200, %r5;
	cvt.u64.u32 	%rd288, %r2201;
	add.s64 	%rd289, %rd288, %rd9;
	shr.u64 	%rd290, %rd289, 37;
	add.s64 	%rd291, %rd289, %rd290;
	shr.s64 	%rd292, %rd291, 27;
	setp.lt.s64 	%p314, %rd289, 0;
	and.b64  	%rd293, %rd291, -134217728;
	setp.ne.s64 	%p315, %rd293, %rd289;
	and.pred  	%p316, %p314, %p315;
	selp.u64 	%rd294, 1, 0, %p316;
	sub.s64 	%rd295, %rd294, %rd292;
	shl.b64 	%rd296, %rd295, 27;
	add.s64 	%rd297, %rd296, %rd289;
	shl.b64 	%rd298, %rd297, 2;
	add.s64 	%rd299, %rd4, %rd298;
	st.global.u32 	[%rd299], %r3505;
	bra.uni 	$L__BB0_167;
$L__BB0_169:                            // %L22466.preheader
                                        //   in Loop: Header=BB0_224 Depth=1
	mov.u32 	%r3502, 16;
	bra.uni 	$L__BB0_170;
$L__BB0_193:                            // %L32532
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3503, %r1218;
	mov.u32 	%r3505, %r1218;
$L__BB0_194:                            // %L32533
                                        //   in Loop: Header=BB0_170 Depth=2
	bar.sync 	0;
	add.s32 	%r3502, %r3502, -8;
	setp.ne.s32 	%p362, %r3502, -16;
	@%p362 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_195;
$L__BB0_170:                            // %L22466
                                        //   Parent Loop BB0_224 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p318, %r3502, 16;
	selp.b32 	%r2815, %r212, 0, %p318;
	setp.eq.s32 	%p319, %r3502, 8;
	selp.b32 	%r2816, %r216, %r2815, %p319;
	setp.eq.s32 	%p320, %r3502, 0;
	selp.b32 	%r2817, %r220, %r2816, %p320;
	setp.eq.s32 	%p321, %r3502, -8;
	selp.b32 	%r2818, %r224, %r2817, %p321;
	selp.b32 	%r2819, %r213, 0, %p318;
	selp.b32 	%r2820, %r217, %r2819, %p319;
	selp.b32 	%r2821, %r221, %r2820, %p320;
	selp.b32 	%r2822, %r225, %r2821, %p321;
	selp.b32 	%r2823, %r214, 0, %p318;
	selp.b32 	%r2824, %r218, %r2823, %p319;
	selp.b32 	%r2825, %r222, %r2824, %p320;
	selp.b32 	%r2826, %r226, %r2825, %p321;
	selp.b32 	%r2827, %r215, 0, %p318;
	selp.b32 	%r2828, %r219, %r2827, %p319;
	selp.b32 	%r2829, %r223, %r2828, %p320;
	selp.b32 	%r2830, %r227, %r2829, %p321;
	// begin inline asm
	mov.b32 %r2231, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2831, %r2818, 8;
	xor.b32  	%r2241, %r2831, 8947848;
	// begin inline asm
	lop3.b32 %r2228, %r1096, %r2241, %r2231, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2232, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2233, %r2231, %r2232;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2236, %r2228, %r2233;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2239, %r1107, %r2241, %r2242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2244, %r2242, %r2243;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2247, %r2239, %r2244;
	// end inline asm
	// begin inline asm
	mov.b32 %r2277, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2288, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2832, %r2822, 8;
	xor.b32  	%r2287, %r2832, 8947848;
	// begin inline asm
	lop3.b32 %r2274, %r1096, %r2287, %r2277, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2279, %r2277, %r2278;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2282, %r2274, %r2279;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2285, %r1107, %r2287, %r2288, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2288, %r2289;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2293, %r2285, %r2290;
	// end inline asm
	// begin inline asm
	mov.b32 %r2323, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2833, %r2826, 8;
	xor.b32  	%r2333, %r2833, 8947848;
	// begin inline asm
	lop3.b32 %r2320, %r1096, %r2333, %r2323, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2324, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2325, %r2323, %r2324;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2328, %r2320, %r2325;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2331, %r1107, %r2333, %r2334, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2336, %r2334, %r2335;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2339, %r2331, %r2336;
	// end inline asm
	// begin inline asm
	mov.b32 %r2369, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2380, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2834, %r2830, 8;
	xor.b32  	%r2379, %r2834, 8947848;
	// begin inline asm
	lop3.b32 %r2366, %r1096, %r2379, %r2369, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2370, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2371, %r2369, %r2370;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2374, %r2366, %r2371;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2377, %r1107, %r2379, %r2380, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2381, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2380, %r2381;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2385, %r2377, %r2382;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2236;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2388, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2247;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2391, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2282;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2394, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2293;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2397, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2328;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2400, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2339;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2403, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2374;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2406, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2385;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2409, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2475, %r2472}, {%r331, %r334}, {%r2388}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2484, %r2481}, {%r331, %r334}, {%r2391}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2493, %r2490}, {%r331, %r334}, {%r2394}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2502, %r2499}, {%r331, %r334}, {%r2397}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2511, %r2508}, {%r331, %r334}, {%r2400}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2520, %r2517}, {%r331, %r334}, {%r2403}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2529, %r2526}, {%r331, %r334}, {%r2406}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2538, %r2535}, {%r331, %r334}, {%r2409}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2468, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2470, %r2468, %r2472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2473, %r369, %r2475, %r2470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2477, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2479, %r2477, %r2481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r369, %r2484, %r2479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2486, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2488, %r2486, %r2490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2491, %r369, %r2493, %r2488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2495, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2497, %r2495, %r2499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2500, %r369, %r2502, %r2497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2504, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r2504, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r369, %r2511, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2513, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r2513, %r2517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r369, %r2520, %r2515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2522, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2524, %r2522, %r2526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2527, %r369, %r2529, %r2524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2531, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2533, %r2531, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2536, %r369, %r2538, %r2533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2540, %r372, %r2475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2543, %r369, %r2472, %r2540;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2547, %r372, %r2484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2550, %r369, %r2481, %r2547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2554, %r372, %r2493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2557, %r369, %r2490, %r2554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2561, %r372, %r2502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2564, %r369, %r2499, %r2561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2568, %r372, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2571, %r369, %r2508, %r2568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2575, %r372, %r2520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2578, %r369, %r2517, %r2575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2582, %r372, %r2529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2585, %r369, %r2526, %r2582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2589, %r372, %r2538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2592, %r369, %r2535, %r2589;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2596, %r2597}, {%r416, %r419}, {%r2473, %r2543}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2605, %r2606}, {%r416, %r419}, {%r2482, %r2550}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2614, %r2615}, {%r416, %r419}, {%r2491, %r2557}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2623, %r2624}, {%r416, %r419}, {%r2500, %r2564}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2632, %r2633}, {%r416, %r419}, {%r2509, %r2571}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2641, %r2642}, {%r416, %r419}, {%r2518, %r2578}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2650, %r2651}, {%r416, %r419}, {%r2527, %r2585}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2659, %r2660}, {%r416, %r419}, {%r2536, %r2592}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2736, [%rd7];
	ld.shared.u32 	%r2743, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2753, %r2750}, {%r428, %r431}, {%r2736}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2762, %r2759}, {%r428, %r431}, {%r2743}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2746, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2748, %r2746, %r2750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2751, %r462, %r2753, %r2748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2755, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2757, %r2755, %r2759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2760, %r462, %r2762, %r2757;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2764, %r465, %r2753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2767, %r462, %r2750, %r2764;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2771, %r465, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2774, %r462, %r2759, %r2771;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2797, %r2800}, {%r504, %r507}, {%r2751, %r2767}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2804, %r2808}, {%r504, %r507}, {%r2760, %r2774}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2796, %r2797, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r2800, %r2800, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r2804, %r2804, %r2799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r2808, %r2808, %r2803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r1579, %r2807, %r3505;
	// end inline asm
	add.s32 	%r3535, %r3503, 1;
	setp.ne.s32 	%p322, %r3535, 25;
	@%p322 bra 	$L__BB0_173;
// %bb.171:                             // %L24321
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p323, %r3, 16;
	@%p323 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_172;
$L__BB0_254:                            // %pass10014
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r2835, %r3504, 19;
	or.b32  	%r2836, %r2835, %r177;
	or.b32  	%r2837, %r2836, %r178;
	or.b32  	%r2838, %r2837, %r5;
	cvt.u64.u32 	%rd300, %r2838;
	add.s64 	%rd301, %rd300, %rd9;
	shr.u64 	%rd302, %rd301, 37;
	add.s64 	%rd303, %rd301, %rd302;
	shr.s64 	%rd304, %rd303, 27;
	setp.lt.s64 	%p324, %rd301, 0;
	and.b64  	%rd305, %rd303, -134217728;
	setp.ne.s64 	%p325, %rd305, %rd301;
	and.pred  	%p326, %p324, %p325;
	selp.u64 	%rd306, 1, 0, %p326;
	sub.s64 	%rd307, %rd306, %rd304;
	shl.b64 	%rd308, %rd307, 27;
	add.s64 	%rd309, %rd308, %rd301;
	shl.b64 	%rd310, %rd309, 2;
	add.s64 	%rd311, %rd4, %rd310;
	st.global.u32 	[%rd311], %r3537;
$L__BB0_172:                            // %L24538
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3535, 0;
	mov.u32 	%r3537, %r3535;
$L__BB0_173:                            // %pass10249
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r2844, [%rd45];
	ld.shared.u32 	%r2851, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2861, %r2858}, {%r428, %r431}, {%r2844}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2870, %r2867}, {%r428, %r431}, {%r2851}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2854, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2856, %r2854, %r2858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r462, %r2861, %r2856;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2863, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2865, %r2863, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2868, %r462, %r2870, %r2865;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2872, %r465, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2875, %r462, %r2858, %r2872;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2879, %r465, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2882, %r462, %r2867, %r2879;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2905, %r2908}, {%r504, %r507}, {%r2859, %r2875}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2912, %r2916}, {%r504, %r507}, {%r2868, %r2882}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2904, %r2905, %r2905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r2908, %r2908, %r2904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r2912, %r2912, %r2907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r2916, %r2916, %r2911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3540, %r1579, %r2915, %r3537;
	// end inline asm
	add.s32 	%r3538, %r3535, 1;
	setp.eq.s32 	%p327, %r3538, 25;
	@%p327 bra 	$L__BB0_174;
	bra.uni 	$L__BB0_176;
$L__BB0_174:                            // %L25463
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p328, %r3, 16;
	@%p328 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_175;
$L__BB0_255:                            // %pass10497
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r2923, %r3504, 19;
	or.b32  	%r2924, %r2923, %r177;
	or.b32  	%r2925, %r2924, %r178;
	or.b32  	%r2926, %r2925, %r5;
	cvt.u64.u32 	%rd312, %r2926;
	add.s64 	%rd313, %rd312, %rd9;
	shr.u64 	%rd314, %rd313, 37;
	add.s64 	%rd315, %rd313, %rd314;
	shr.s64 	%rd316, %rd315, 27;
	setp.lt.s64 	%p329, %rd313, 0;
	and.b64  	%rd317, %rd315, -134217728;
	setp.ne.s64 	%p330, %rd317, %rd313;
	and.pred  	%p331, %p329, %p330;
	selp.u64 	%rd318, 1, 0, %p331;
	sub.s64 	%rd319, %rd318, %rd316;
	shl.b64 	%rd320, %rd319, 27;
	add.s64 	%rd321, %rd320, %rd313;
	shl.b64 	%rd322, %rd321, 2;
	add.s64 	%rd323, %rd4, %rd322;
	st.global.u32 	[%rd323], %r3540;
$L__BB0_175:                            // %L25680
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3538, 0;
	mov.u32 	%r3540, %r3538;
$L__BB0_176:                            // %pass10732
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r2932, [%rd47];
	ld.shared.u32 	%r2939, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2949, %r2946}, {%r428, %r431}, {%r2932}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2958, %r2955}, {%r428, %r431}, {%r2939}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2942, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2944, %r2942, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r462, %r2949, %r2944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2951, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r2951, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r462, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r465, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r462, %r2946, %r2960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2967, %r465, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r462, %r2955, %r2967;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2993, %r2996}, {%r504, %r507}, {%r2947, %r2963}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3000, %r3004}, {%r504, %r507}, {%r2956, %r2970}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2992, %r2993, %r2993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2995, %r2996, %r2996, %r2992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2999, %r3000, %r3000, %r2995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3003, %r3004, %r3004, %r2999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r1579, %r3003, %r3540;
	// end inline asm
	add.s32 	%r3541, %r3538, 1;
	setp.eq.s32 	%p332, %r3541, 25;
	@%p332 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_179;
$L__BB0_177:                            // %L26605
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p333, %r3, 16;
	@%p333 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_178;
$L__BB0_256:                            // %pass10980
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3011, %r3504, 19;
	or.b32  	%r3012, %r3011, %r177;
	or.b32  	%r3013, %r3012, %r178;
	or.b32  	%r3014, %r3013, %r5;
	cvt.u64.u32 	%rd324, %r3014;
	add.s64 	%rd325, %rd324, %rd9;
	shr.u64 	%rd326, %rd325, 37;
	add.s64 	%rd327, %rd325, %rd326;
	shr.s64 	%rd328, %rd327, 27;
	setp.lt.s64 	%p334, %rd325, 0;
	and.b64  	%rd329, %rd327, -134217728;
	setp.ne.s64 	%p335, %rd329, %rd325;
	and.pred  	%p336, %p334, %p335;
	selp.u64 	%rd330, 1, 0, %p336;
	sub.s64 	%rd331, %rd330, %rd328;
	shl.b64 	%rd332, %rd331, 27;
	add.s64 	%rd333, %rd332, %rd325;
	shl.b64 	%rd334, %rd333, 2;
	add.s64 	%rd335, %rd4, %rd334;
	st.global.u32 	[%rd335], %r3543;
$L__BB0_178:                            // %L26822
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3541, 0;
	mov.u32 	%r3543, %r3541;
$L__BB0_179:                            // %pass11215
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3020, [%rd49];
	ld.shared.u32 	%r3027, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3037, %r3034}, {%r428, %r431}, {%r3020}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3046, %r3043}, {%r428, %r431}, {%r3027}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3030, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3032, %r3030, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r462, %r3037, %r3032;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3039, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3041, %r3039, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r462, %r3046, %r3041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3048, %r465, %r3037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r462, %r3034, %r3048;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3055, %r465, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r462, %r3043, %r3055;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3081, %r3084}, {%r504, %r507}, {%r3035, %r3051}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3088, %r3092}, {%r504, %r507}, {%r3044, %r3058}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3080, %r3081, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3083, %r3084, %r3084, %r3080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3087, %r3088, %r3088, %r3083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3091, %r3092, %r3092, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r1579, %r3091, %r3543;
	// end inline asm
	add.s32 	%r3544, %r3541, 1;
	setp.eq.s32 	%p337, %r3544, 25;
	@%p337 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_182;
$L__BB0_180:                            // %L27747
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p338, %r3, 16;
	@%p338 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_181;
$L__BB0_257:                            // %pass11463
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3099, %r3504, 19;
	or.b32  	%r3100, %r3099, %r177;
	or.b32  	%r3101, %r3100, %r178;
	or.b32  	%r3102, %r3101, %r5;
	cvt.u64.u32 	%rd336, %r3102;
	add.s64 	%rd337, %rd336, %rd9;
	shr.u64 	%rd338, %rd337, 37;
	add.s64 	%rd339, %rd337, %rd338;
	shr.s64 	%rd340, %rd339, 27;
	setp.lt.s64 	%p339, %rd337, 0;
	and.b64  	%rd341, %rd339, -134217728;
	setp.ne.s64 	%p340, %rd341, %rd337;
	and.pred  	%p341, %p339, %p340;
	selp.u64 	%rd342, 1, 0, %p341;
	sub.s64 	%rd343, %rd342, %rd340;
	shl.b64 	%rd344, %rd343, 27;
	add.s64 	%rd345, %rd344, %rd337;
	shl.b64 	%rd346, %rd345, 2;
	add.s64 	%rd347, %rd4, %rd346;
	st.global.u32 	[%rd347], %r3546;
$L__BB0_181:                            // %L27964
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3544, 0;
	mov.u32 	%r3546, %r3544;
$L__BB0_182:                            // %pass11698
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3108, [%rd51];
	ld.shared.u32 	%r3115, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3125, %r3122}, {%r428, %r431}, {%r3108}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3134, %r3131}, {%r428, %r431}, {%r3115}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3118, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3120, %r3118, %r3122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3123, %r462, %r3125, %r3120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3127, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3129, %r3127, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3132, %r462, %r3134, %r3129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3136, %r465, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r462, %r3122, %r3136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3143, %r465, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r462, %r3131, %r3143;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3169, %r3172}, {%r504, %r507}, {%r3123, %r3139}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3176, %r3180}, {%r504, %r507}, {%r3132, %r3146}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3168, %r3169, %r3169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r3172, %r3172, %r3168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r3176, %r3176, %r3171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3180, %r3180, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r1579, %r3179, %r3546;
	// end inline asm
	add.s32 	%r3547, %r3544, 1;
	setp.eq.s32 	%p342, %r3547, 25;
	@%p342 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_185;
$L__BB0_183:                            // %L28889
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p343, %r3, 16;
	@%p343 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_184;
$L__BB0_258:                            // %pass11946
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3187, %r3504, 19;
	or.b32  	%r3188, %r3187, %r177;
	or.b32  	%r3189, %r3188, %r178;
	or.b32  	%r3190, %r3189, %r5;
	cvt.u64.u32 	%rd348, %r3190;
	add.s64 	%rd349, %rd348, %rd9;
	shr.u64 	%rd350, %rd349, 37;
	add.s64 	%rd351, %rd349, %rd350;
	shr.s64 	%rd352, %rd351, 27;
	setp.lt.s64 	%p344, %rd349, 0;
	and.b64  	%rd353, %rd351, -134217728;
	setp.ne.s64 	%p345, %rd353, %rd349;
	and.pred  	%p346, %p344, %p345;
	selp.u64 	%rd354, 1, 0, %p346;
	sub.s64 	%rd355, %rd354, %rd352;
	shl.b64 	%rd356, %rd355, 27;
	add.s64 	%rd357, %rd356, %rd349;
	shl.b64 	%rd358, %rd357, 2;
	add.s64 	%rd359, %rd4, %rd358;
	st.global.u32 	[%rd359], %r3549;
$L__BB0_184:                            // %L29106
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3547, 0;
	mov.u32 	%r3549, %r3547;
$L__BB0_185:                            // %pass12181
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3196, [%rd53];
	ld.shared.u32 	%r3203, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3213, %r3210}, {%r428, %r431}, {%r3196}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3222, %r3219}, {%r428, %r431}, {%r3203}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3206, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3208, %r3206, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r462, %r3213, %r3208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3215, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3217, %r3215, %r3219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r462, %r3222, %r3217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3224, %r465, %r3213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r462, %r3210, %r3224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3231, %r465, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3234, %r462, %r3219, %r3231;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3257, %r3260}, {%r504, %r507}, {%r3211, %r3227}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3264, %r3268}, {%r504, %r507}, {%r3220, %r3234}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3256, %r3257, %r3257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r3260, %r3260, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3263, %r3264, %r3264, %r3259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3267, %r3268, %r3268, %r3263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r1579, %r3267, %r3549;
	// end inline asm
	add.s32 	%r3550, %r3547, 1;
	setp.eq.s32 	%p347, %r3550, 25;
	@%p347 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_188;
$L__BB0_186:                            // %L30031
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p348, %r3, 16;
	@%p348 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_187;
$L__BB0_259:                            // %pass12429
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3275, %r3504, 19;
	or.b32  	%r3276, %r3275, %r177;
	or.b32  	%r3277, %r3276, %r178;
	or.b32  	%r3278, %r3277, %r5;
	cvt.u64.u32 	%rd360, %r3278;
	add.s64 	%rd361, %rd360, %rd9;
	shr.u64 	%rd362, %rd361, 37;
	add.s64 	%rd363, %rd361, %rd362;
	shr.s64 	%rd364, %rd363, 27;
	setp.lt.s64 	%p349, %rd361, 0;
	and.b64  	%rd365, %rd363, -134217728;
	setp.ne.s64 	%p350, %rd365, %rd361;
	and.pred  	%p351, %p349, %p350;
	selp.u64 	%rd366, 1, 0, %p351;
	sub.s64 	%rd367, %rd366, %rd364;
	shl.b64 	%rd368, %rd367, 27;
	add.s64 	%rd369, %rd368, %rd361;
	shl.b64 	%rd370, %rd369, 2;
	add.s64 	%rd371, %rd4, %rd370;
	st.global.u32 	[%rd371], %r3552;
$L__BB0_187:                            // %L30248
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3550, 0;
	mov.u32 	%r3552, %r3550;
$L__BB0_188:                            // %pass12664
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3284, [%rd55];
	ld.shared.u32 	%r3291, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3301, %r3298}, {%r428, %r431}, {%r3284}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3310, %r3307}, {%r428, %r431}, {%r3291}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3294, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3296, %r3294, %r3298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3299, %r462, %r3301, %r3296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3303, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3305, %r3303, %r3307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3308, %r462, %r3310, %r3305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3312, %r465, %r3301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3315, %r462, %r3298, %r3312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3319, %r465, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3322, %r462, %r3307, %r3319;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3345, %r3348}, {%r504, %r507}, {%r3299, %r3315}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3352, %r3356}, {%r504, %r507}, {%r3308, %r3322}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3344, %r3345, %r3345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r3348, %r3348, %r3344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3351, %r3352, %r3352, %r3347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3355, %r3356, %r3356, %r3351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r1579, %r3355, %r3552;
	// end inline asm
	add.s32 	%r3553, %r3550, 1;
	setp.eq.s32 	%p352, %r3553, 25;
	@%p352 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_191;
$L__BB0_189:                            // %L31173
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p353, %r3, 16;
	@%p353 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_190;
$L__BB0_260:                            // %pass12912
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3363, %r3504, 19;
	or.b32  	%r3364, %r3363, %r177;
	or.b32  	%r3365, %r3364, %r178;
	or.b32  	%r3366, %r3365, %r5;
	cvt.u64.u32 	%rd372, %r3366;
	add.s64 	%rd373, %rd372, %rd9;
	shr.u64 	%rd374, %rd373, 37;
	add.s64 	%rd375, %rd373, %rd374;
	shr.s64 	%rd376, %rd375, 27;
	setp.lt.s64 	%p354, %rd373, 0;
	and.b64  	%rd377, %rd375, -134217728;
	setp.ne.s64 	%p355, %rd377, %rd373;
	and.pred  	%p356, %p354, %p355;
	selp.u64 	%rd378, 1, 0, %p356;
	sub.s64 	%rd379, %rd378, %rd376;
	shl.b64 	%rd380, %rd379, 27;
	add.s64 	%rd381, %rd380, %rd373;
	shl.b64 	%rd382, %rd381, 2;
	add.s64 	%rd383, %rd4, %rd382;
	st.global.u32 	[%rd383], %r3555;
$L__BB0_190:                            // %L31390
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3504, %r3504, 1;
	mov.u32 	%r3553, 0;
	mov.u32 	%r3555, %r3553;
$L__BB0_191:                            // %pass13147
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3372, [%rd57];
	ld.shared.u32 	%r3379, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3389, %r3386}, {%r428, %r431}, {%r3372}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3398, %r3395}, {%r428, %r431}, {%r3379}, {%r1218, %r1218};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3382, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3384, %r3382, %r3386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3387, %r462, %r3389, %r3384;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3391, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3393, %r3391, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r462, %r3398, %r3393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3400, %r465, %r3389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r462, %r3386, %r3400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3407, %r465, %r3398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3410, %r462, %r3395, %r3407;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3433, %r3436}, {%r504, %r507}, {%r3387, %r3403}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3440, %r3444}, {%r504, %r507}, {%r3396, %r3410}, {%r1218, %r1218}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3432, %r3433, %r3433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3435, %r3436, %r3436, %r3432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3439, %r3440, %r3440, %r3435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3443, %r3444, %r3444, %r3439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r1579, %r3443, %r3555;
	// end inline asm
	add.s32 	%r3503, %r3553, 1;
	setp.eq.s32 	%p357, %r3503, 25;
	@%p357 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_194;
$L__BB0_192:                            // %L32315
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p358, %r3, 16;
	@%p358 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_193;
$L__BB0_261:                            // %pass13395
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3451, %r3504, 19;
	or.b32  	%r3452, %r3451, %r177;
	or.b32  	%r3453, %r3452, %r178;
	or.b32  	%r3454, %r3453, %r5;
	cvt.u64.u32 	%rd384, %r3454;
	add.s64 	%rd385, %rd384, %rd9;
	shr.u64 	%rd386, %rd385, 37;
	add.s64 	%rd387, %rd385, %rd386;
	shr.s64 	%rd388, %rd387, 27;
	setp.lt.s64 	%p359, %rd385, 0;
	and.b64  	%rd389, %rd387, -134217728;
	setp.ne.s64 	%p360, %rd389, %rd385;
	and.pred  	%p361, %p359, %p360;
	selp.u64 	%rd390, 1, 0, %p361;
	sub.s64 	%rd391, %rd390, %rd388;
	shl.b64 	%rd392, %rd391, 27;
	add.s64 	%rd393, %rd392, %rd385;
	shl.b64 	%rd394, %rd393, 2;
	add.s64 	%rd395, %rd4, %rd394;
	st.global.u32 	[%rd395], %r3505;
	bra.uni 	$L__BB0_193;
$L__BB0_196:                            // %L32564
	mov.u32 	%r3456, 0;
	st.global.u32 	[%rd6], %r3456;
	ret;
$L__BB0_243:                            // %post_box_union
	mov.u64 	%rd202, exception2549;
	cvta.global.u64 	%rd203, %rd202;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd203;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6861
	mov.u32 	%r3472, 5;
	st.global.u32 	[%rd6], %r3472;
	mov.u64 	%rd426, exception2501;
	cvta.global.u64 	%rd427, %rd426;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd427;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7023
	mov.u32 	%r3471, 5;
	st.global.u32 	[%rd6], %r3471;
	mov.u64 	%rd424, exception2501;
	cvta.global.u64 	%rd425, %rd424;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd425;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7185
	mov.u32 	%r3470, 5;
	st.global.u32 	[%rd6], %r3470;
	mov.u64 	%rd422, exception2501;
	cvta.global.u64 	%rd423, %rd422;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd423;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7347
	mov.u32 	%r3469, 5;
	st.global.u32 	[%rd6], %r3469;
	mov.u64 	%rd420, exception2501;
	cvta.global.u64 	%rd421, %rd420;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd421;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7509
	mov.u32 	%r3468, 5;
	st.global.u32 	[%rd6], %r3468;
	mov.u64 	%rd418, exception2501;
	cvta.global.u64 	%rd419, %rd418;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd419;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7671
	mov.u32 	%r3467, 5;
	st.global.u32 	[%rd6], %r3467;
	mov.u64 	%rd416, exception2501;
	cvta.global.u64 	%rd417, %rd416;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd417;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7833
	mov.u32 	%r3466, 5;
	st.global.u32 	[%rd6], %r3466;
	mov.u64 	%rd414, exception2501;
	cvta.global.u64 	%rd415, %rd414;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd415;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7995
	mov.u32 	%r3465, 5;
	st.global.u32 	[%rd6], %r3465;
	mov.u64 	%rd412, exception2501;
	cvta.global.u64 	%rd413, %rd412;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd413;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8157
	mov.u32 	%r3464, 5;
	st.global.u32 	[%rd6], %r3464;
	mov.u64 	%rd410, exception2501;
	cvta.global.u64 	%rd411, %rd410;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd411;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8319
	mov.u32 	%r3463, 5;
	st.global.u32 	[%rd6], %r3463;
	mov.u64 	%rd408, exception2501;
	cvta.global.u64 	%rd409, %rd408;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd409;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8481
	mov.u32 	%r3462, 5;
	st.global.u32 	[%rd6], %r3462;
	mov.u64 	%rd406, exception2501;
	cvta.global.u64 	%rd407, %rd406;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd407;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8643
	mov.u32 	%r3461, 5;
	st.global.u32 	[%rd6], %r3461;
	mov.u64 	%rd404, exception2501;
	cvta.global.u64 	%rd405, %rd404;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd405;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8805
	mov.u32 	%r3460, 5;
	st.global.u32 	[%rd6], %r3460;
	mov.u64 	%rd402, exception2501;
	cvta.global.u64 	%rd403, %rd402;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd403;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8967
	mov.u32 	%r3459, 5;
	st.global.u32 	[%rd6], %r3459;
	mov.u64 	%rd400, exception2501;
	cvta.global.u64 	%rd401, %rd400;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd401;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9129
	mov.u32 	%r3458, 5;
	st.global.u32 	[%rd6], %r3458;
	mov.u64 	%rd398, exception2501;
	cvta.global.u64 	%rd399, %rd398;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd399;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9291
	mov.u32 	%r3457, 5;
	st.global.u32 	[%rd6], %r3457;
	mov.u64 	%rd396, exception2501;
	cvta.global.u64 	%rd397, %rd396;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd397;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L167
	mov.u32 	%r3474, 2;
	st.global.u32 	[%rd6], %r3474;
	mov.u64 	%rd430, exception2501;
	cvta.global.u64 	%rd431, %rd430;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd431;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L311
	mov.u32 	%r3473, 3;
	st.global.u32 	[%rd6], %r3473;
	mov.u64 	%rd428, exception2501;
	cvta.global.u64 	%rd429, %rd428;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd429;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception12561;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1160
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r517, [retval0+0];
	} // callseq 47
	mov.u32 	%r519, 4;
	st.global.u32 	[%rd6], %r519;
	mov.u64 	%rd73, exception2501;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
