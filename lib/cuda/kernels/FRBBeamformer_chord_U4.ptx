// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3856[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13868[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<320>;
	.reg .b16 	%rs<242>;
	.reg .b32 	%r<3813>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<374>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r391, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r400, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r400, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd42, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r392, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r401, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r402, %r401, %r1;
	add.s32 	%r403, %r402, %r4;
	mul.wide.u32 	%rd49, %r403, 4;
	add.s64 	%rd6, %rd42, %rd49;
	mov.u32 	%r404, 1;
	st.global.u32 	[%rd6], %r404;
	setp.gt.u32 	%p4, %r392, 8191;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r393, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r393, %r392;
	setp.gt.s32 	%p6, %r393, 16383;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r394, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r405, %r393, %r392;
	mul.hi.s32 	%r407, %r405, 715827883;
	shr.u32 	%r408, %r407, 31;
	shr.s32 	%r409, %r407, 3;
	add.s32 	%r5, %r409, %r408;
	mul.lo.s32 	%r410, %r5, -48;
	neg.s32 	%r411, %r405;
	setp.ne.s32 	%p8, %r410, %r411;
	setp.gt.u32 	%p9, %r394, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r395, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r395, %r394;
	setp.lt.s32 	%p12, %r395, 2048;
	and.pred  	%p13, %p11, %p12;
	sub.s32 	%r412, %r395, %r394;
	setp.eq.s32 	%p14, %r412, %r5;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %L258
	ld.param.u32 	%r396, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r396, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.8:                               // %L260
	ld.param.u32 	%r397, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r397, %r396;
	setp.gt.s32 	%p18, %r397, 64;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.9:                               // %L270
	ld.param.u32 	%r398, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r397, %r396;
	and.b32  	%r413, %r6, 3;
	setp.ne.s32 	%p20, %r413, 0;
	setp.lt.s32 	%p21, %r398, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r399, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r399, %r398;
	setp.gt.s32 	%p24, %r399, 512;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r414, %r399, %r398;
	and.b32  	%r415, %r414, 3;
	setp.eq.s32 	%p26, %r415, 0;
	setp.eq.s32 	%p27, %r414, %r6;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_12;
$L__BB0_197:                            // %pass162
	and.b32  	%r255, %r1, 3;
	shr.u32 	%r256, %r1, 2;
	mul.lo.s32 	%r416, %r255, %r256;
	and.b32  	%r417, %r416, 7;
	cvt.rn.f32.s32 	%f201, %r417;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p29, %f785, 0f40000000;
	setp.gtu.f32 	%p319, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p29 bra 	$L__BB0_209;
// %bb.198:
	@%p319 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_199;
$L__BB0_205:
	mov.b32 	%r258, %f785;
	and.b32  	%r418, %r258, 8388607;
	or.b32  	%r3808, %r418, 1065353216;
	mov.b32 	%f780, %r3808;
	add.s32 	%r419, %r258, -1073741824;
	and.b32  	%r3809, %r419, -8388608;
	setp.eq.s32 	%p36, %r3809, 0;
	@%p36 bra 	$L__BB0_208;
// %bb.206:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_207:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r420, %r3809, 192937984;
	add.s32 	%r421, %r3808, %r420;
	mov.b32 	%f213, %r421;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3809, %r3809, %r420;
	mov.b32 	%r3808, %f780;
	setp.ne.s32 	%p37, %r3809, 0;
	setp.ne.s32 	%p38, %r3808, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_207;
$L__BB0_208:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r258, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_209;
$L__BB0_199:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r257, %f172;
	setp.lt.u32 	%p31, %r257, 1073741824;
	@%p31 bra 	$L__BB0_204;
// %bb.200:
	setp.lt.u32 	%p32, %r257, -2147483647;
	@%p32 bra 	$L__BB0_202;
// %bb.201:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p35;
	bra.uni 	$L__BB0_204;
$L__BB0_202:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_204;
// %bb.203:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p34;
$L__BB0_204:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_209:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p41, %f222, 0f7F800000;
	mov.b32 	%r422, %f169;
	and.b32  	%r265, %r422, -2147483648;
	@%p41 bra 	$L__BB0_211;
// %bb.210:
	mov.b32 	%r423, %f781;
	or.b32  	%r424, %r265, %r423;
	mov.b32 	%f781, %r424;
$L__BB0_211:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r268, %r1, 1;
	and.b32  	%r269, %r268, 6;
	or.b32  	%r270, %r269, 1;
	setp.eq.s32 	%p49, %r269, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3706, %r269, %r256;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p49 bra 	$L__BB0_28;
// %bb.13:                              // %L487
	cvt.u16.u32 	%rs1, %r3706;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p50, %f733, 0f40000000;
	@%p50 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p51, %f733, 0f4B800000;
	@%p51 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r8, %f733;
	and.b32  	%r440, %r8, 8388607;
	or.b32  	%r3710, %r440, 1065353216;
	mov.b32 	%f732, %r3710;
	add.s32 	%r441, %r8, -1073741824;
	and.b32  	%r3711, %r441, -8388608;
	setp.eq.s32 	%p57, %r3711, 0;
	@%p57 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1020.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1020
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r442, %r3711, 192937984;
	add.s32 	%r443, %r3710, %r442;
	mov.b32 	%f267, %r443;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3711, %r3711, %r442;
	mov.b32 	%r3710, %f732;
	setp.ne.s32 	%p58, %r3711, 0;
	setp.ne.s32 	%p59, %r3710, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1022
	setp.gt.u32 	%p61, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i999
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p52, %r7, 1073741824;
	@%p52 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p53, %r7, -2147483647;
	@%p53 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p56, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p56;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p54, %f4, 0f40800000;
	@%p54 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1003
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p55, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p55;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1006
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1025
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p62, %f276, 0f7F800000;
	@%p62 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r444, %f1;
	and.b32  	%r445, %r444, -2147483648;
	mov.b32 	%r446, %f733;
	or.b32  	%r447, %r445, %r446;
	mov.b32 	%f733, %r447;
$L__BB0_27:                             // %__nv_fmodf.exit1026
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r448, %f277;
	and.b32  	%r449, %r448, -2147483648;
	or.b32  	%r450, %r449, 1056964608;
	mov.b32 	%f278, %r450;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p63, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p63;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p64, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p64;
	cvt.rzi.s32.f32 	%r451, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r452, %r451, 1;
	setp.eq.b32 	%p65, %r452, 1;
	selp.f32 	%f296, %f294, %f295, %p65;
	selp.f32 	%f297, %f295, %f294, %p65;
	and.b32  	%r453, %r451, 2;
	setp.eq.s32 	%p66, %r453, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p66;
	add.s32 	%r454, %r451, 1;
	and.b32  	%r455, %r454, 2;
	setp.eq.s32 	%p67, %r455, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p67;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p68, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p68;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p69, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p69;
$L__BB0_28:                             // %L521
	setp.gt.u32 	%p70, %r270, 5;
	mul.lo.s32 	%r3707, %r270, %r256;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p70 bra 	$L__BB0_44;
// %bb.29:                              // %L525
	mul.hi.u32 	%r457, %r3707, -1431655765;
	shr.u32 	%r458, %r457, 5;
	mul.lo.s32 	%r459, %r458, 48;
	sub.s32 	%r460, %r3707, %r459;
	cvt.rn.f32.s32 	%f308, %r460;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p71, %f739, 0f40000000;
	@%p71 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p72, %f739, 0f4B800000;
	@%p72 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r16, %f739;
	and.b32  	%r461, %r16, 8388607;
	or.b32  	%r3712, %r461, 1065353216;
	mov.b32 	%f738, %r3712;
	add.s32 	%r462, %r16, -1073741824;
	and.b32  	%r3713, %r462, -8388608;
	setp.eq.s32 	%p78, %r3713, 0;
	@%p78 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1051.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1051
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r463, %r3713, 192937984;
	add.s32 	%r464, %r3712, %r463;
	mov.b32 	%f320, %r464;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3713, %r3713, %r463;
	mov.b32 	%r3712, %f738;
	setp.ne.s32 	%p79, %r3713, 0;
	setp.ne.s32 	%p80, %r3712, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1053
	setp.gt.u32 	%p82, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i1030
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p73, %r15, 1073741824;
	@%p73 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p74, %r15, -2147483647;
	@%p74 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p77, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p77;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p75, %f25, 0f40800000;
	@%p75 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i1034
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p76, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p76;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1037
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1056
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p83, %f329, 0f7F800000;
	@%p83 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r465, %f22;
	and.b32  	%r466, %r465, -2147483648;
	mov.b32 	%r467, %f739;
	or.b32  	%r468, %r466, %r467;
	mov.b32 	%f739, %r468;
$L__BB0_43:                             // %__nv_fmodf.exit1057
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r469, %f330;
	and.b32  	%r470, %r469, -2147483648;
	or.b32  	%r471, %r470, 1056964608;
	mov.b32 	%f331, %r471;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p84, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p84;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p85, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p85;
	cvt.rzi.s32.f32 	%r472, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r473, %r472, 1;
	setp.eq.b32 	%p86, %r473, 1;
	selp.f32 	%f349, %f347, %f348, %p86;
	selp.f32 	%f350, %f348, %f347, %p86;
	and.b32  	%r474, %r472, 2;
	setp.eq.s32 	%p87, %r474, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p87;
	add.s32 	%r475, %r472, 1;
	and.b32  	%r476, %r475, 2;
	setp.eq.s32 	%p88, %r476, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p88;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p89, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p89;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p90, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p90;
$L__BB0_44:                             // %L559
	setp.gt.u32 	%p92, %r1, 23;
	or.pred  	%p1, %p49, %p92;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L597
	cvt.u16.u32 	%rs8, %r3706;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p93, %f745, 0f40000000;
	@%p93 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p94, %f745, 0f4B800000;
	@%p94 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r26, %f745;
	and.b32  	%r484, %r26, 8388607;
	or.b32  	%r3714, %r484, 1065353216;
	mov.b32 	%f744, %r3714;
	add.s32 	%r485, %r26, -1073741824;
	and.b32  	%r3715, %r485, -8388608;
	setp.eq.s32 	%p100, %r3715, 0;
	@%p100 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1082.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1082
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r486, %r3715, 192937984;
	add.s32 	%r487, %r3714, %r486;
	mov.b32 	%f373, %r487;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3715, %r3715, %r486;
	mov.b32 	%r3714, %f744;
	setp.ne.s32 	%p101, %r3715, 0;
	setp.ne.s32 	%p102, %r3714, 0;
	and.pred  	%p103, %p101, %p102;
	@%p103 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1084
	setp.gt.u32 	%p104, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p104;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1061
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p95, %r25, 1073741824;
	@%p95 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p96, %r25, -2147483647;
	@%p96 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p99, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p99;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p97, %f46, 0f40800000;
	@%p97 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1065
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p98, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p98;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1068
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1087
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p105, %f382, 0f7F800000;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r488, %f43;
	and.b32  	%r489, %r488, -2147483648;
	mov.b32 	%r490, %f745;
	or.b32  	%r491, %r489, %r490;
	mov.b32 	%f745, %r491;
$L__BB0_59:                             // %__nv_fmodf.exit1088
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r492, %f383;
	and.b32  	%r493, %r492, -2147483648;
	or.b32  	%r494, %r493, 1056964608;
	mov.b32 	%f384, %r494;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p106, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p106;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p107, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p107;
	cvt.rzi.s32.f32 	%r495, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r496, %r495, 1;
	setp.eq.b32 	%p108, %r496, 1;
	selp.f32 	%f402, %f400, %f401, %p108;
	selp.f32 	%f403, %f401, %f400, %p108;
	and.b32  	%r497, %r495, 2;
	setp.eq.s32 	%p109, %r497, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p109;
	add.s32 	%r498, %r495, 1;
	and.b32  	%r499, %r498, 2;
	setp.eq.s32 	%p110, %r499, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p110;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p111, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p111;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p112, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p112;
$L__BB0_60:                             // %L631
	or.pred  	%p2, %p70, %p92;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L639
	mul.hi.u32 	%r501, %r3707, -1431655765;
	shr.u32 	%r502, %r501, 2;
	mul.lo.s32 	%r503, %r502, 6;
	sub.s32 	%r504, %r3707, %r503;
	cvt.rn.f32.s32 	%f414, %r504;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p115, %f751, 0f40000000;
	@%p115 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p116, %f751, 0f4B800000;
	@%p116 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r34, %f751;
	and.b32  	%r505, %r34, 8388607;
	or.b32  	%r3716, %r505, 1065353216;
	mov.b32 	%f750, %r3716;
	add.s32 	%r506, %r34, -1073741824;
	and.b32  	%r3717, %r506, -8388608;
	setp.eq.s32 	%p122, %r3717, 0;
	@%p122 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1113.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1113
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r507, %r3717, 192937984;
	add.s32 	%r508, %r3716, %r507;
	mov.b32 	%f426, %r508;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3717, %r3717, %r507;
	mov.b32 	%r3716, %f750;
	setp.ne.s32 	%p123, %r3717, 0;
	setp.ne.s32 	%p124, %r3716, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1115
	setp.gt.u32 	%p126, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1092
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p117, %r33, 1073741824;
	@%p117 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p118, %r33, -2147483647;
	@%p118 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p121, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p121;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p119, %f67, 0f40800000;
	@%p119 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1096
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p120, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p120;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1099
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1118
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p127, %f435, 0f7F800000;
	@%p127 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r509, %f64;
	and.b32  	%r510, %r509, -2147483648;
	mov.b32 	%r511, %f751;
	or.b32  	%r512, %r510, %r511;
	mov.b32 	%f751, %r512;
$L__BB0_75:                             // %__nv_fmodf.exit1119
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r513, %f436;
	and.b32  	%r514, %r513, -2147483648;
	or.b32  	%r515, %r514, 1056964608;
	mov.b32 	%f437, %r515;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p128, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p128;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p129, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p129;
	cvt.rzi.s32.f32 	%r516, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r517, %r516, 1;
	setp.eq.b32 	%p130, %r517, 1;
	selp.f32 	%f455, %f453, %f454, %p130;
	selp.f32 	%f456, %f454, %f453, %p130;
	and.b32  	%r518, %r516, 2;
	setp.eq.s32 	%p131, %r518, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p131;
	add.s32 	%r519, %r516, 1;
	and.b32  	%r520, %r519, 2;
	setp.eq.s32 	%p132, %r520, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p132;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p133, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p133;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p134, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p134;
$L__BB0_76:                             // %L673
	@%p29 bra 	$L__BB0_219;
// %bb.77:
	@%p319 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_78;
$L__BB0_215:
	mov.b32 	%r272, %f785;
	and.b32  	%r533, %r272, 8388607;
	or.b32  	%r3810, %r533, 1065353216;
	mov.b32 	%f784, %r3810;
	add.s32 	%r534, %r272, -1073741824;
	and.b32  	%r3811, %r534, -8388608;
	setp.eq.s32 	%p142, %r3811, 0;
	@%p142 bra 	$L__BB0_218;
// %bb.216:                             // %__nv_fmaf_rn.exit4.i.i.i1144.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_217:                            // %__nv_fmaf_rn.exit4.i.i.i1144
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r535, %r3811, 192937984;
	add.s32 	%r536, %r3810, %r535;
	mov.b32 	%f476, %r536;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3811, %r3811, %r535;
	mov.b32 	%r3810, %f784;
	setp.ne.s32 	%p143, %r3811, 0;
	setp.ne.s32 	%p144, %r3810, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_217;
$L__BB0_218:                            // %__internal_fmodf_slowpath_mod.exit.i.i1146
	setp.gt.u32 	%p146, %r272, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_219;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1123
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r271, %f187;
	setp.lt.u32 	%p137, %r271, 1073741824;
	@%p137 bra 	$L__BB0_214;
// %bb.79:
	setp.lt.u32 	%p138, %r271, -2147483647;
	@%p138 bra 	$L__BB0_212;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p141, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p141;
	bra.uni 	$L__BB0_214;
$L__BB0_212:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p139, %f187, 0f40800000;
	@%p139 bra 	$L__BB0_214;
// %bb.213:                             // %__nv_fmaf_rn.exit.i.i.i1127
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p140, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p140;
$L__BB0_214:                            // %__internal_fmodf_fastpath_quot.exit.i.i1130
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_219:                            // %__internal_fmodf_kernel.exit.i1149
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p147, %f485, 0f7F800000;
	@%p147 bra 	$L__BB0_221;
// %bb.220:
	mov.b32 	%r537, %f785;
	or.b32  	%r538, %r265, %r537;
	mov.b32 	%f785, %r538;
$L__BB0_221:                            // %__nv_fmodf.exit1150
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p49 bra 	$L__BB0_96;
// %bb.81:                              // %L775
	cvt.u16.u32 	%rs15, %r3706;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p156, %f757, 0f40000000;
	@%p156 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p157, %f757, 0f4B800000;
	@%p157 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r46, %f757;
	and.b32  	%r554, %r46, 8388607;
	or.b32  	%r3718, %r554, 1065353216;
	mov.b32 	%f756, %r3718;
	add.s32 	%r555, %r46, -1073741824;
	and.b32  	%r3719, %r555, -8388608;
	setp.eq.s32 	%p163, %r3719, 0;
	@%p163 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1175.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1175
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r556, %r3719, 192937984;
	add.s32 	%r557, %r3718, %r556;
	mov.b32 	%f530, %r557;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3719, %r3719, %r556;
	mov.b32 	%r3718, %f756;
	setp.ne.s32 	%p164, %r3719, 0;
	setp.ne.s32 	%p165, %r3718, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1177
	setp.gt.u32 	%p167, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1154
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p158, %r45, 1073741824;
	@%p158 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p159, %r45, -2147483647;
	@%p159 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p162;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1158
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p161;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1161
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1180
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p168, %f539, 0f7F800000;
	@%p168 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r558, %f85;
	and.b32  	%r559, %r558, -2147483648;
	mov.b32 	%r560, %f757;
	or.b32  	%r561, %r559, %r560;
	mov.b32 	%f757, %r561;
$L__BB0_95:                             // %__nv_fmodf.exit1181
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r562, %f540;
	and.b32  	%r563, %r562, -2147483648;
	or.b32  	%r564, %r563, 1056964608;
	mov.b32 	%f541, %r564;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p169, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p169;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p170, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p170;
	cvt.rzi.s32.f32 	%r565, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r566, %r565, 1;
	setp.eq.b32 	%p171, %r566, 1;
	selp.f32 	%f559, %f557, %f558, %p171;
	selp.f32 	%f560, %f558, %f557, %p171;
	and.b32  	%r567, %r565, 2;
	setp.eq.s32 	%p172, %r567, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p172;
	add.s32 	%r568, %r565, 1;
	and.b32  	%r569, %r568, 2;
	setp.eq.s32 	%p173, %r569, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p173;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p174, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p174;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p175, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p175;
$L__BB0_96:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p70 bra 	$L__BB0_112;
// %bb.97:                              // %L813
	mul.hi.u32 	%r571, %r3707, -1431655765;
	shr.u32 	%r572, %r571, 5;
	mul.lo.s32 	%r573, %r572, 48;
	sub.s32 	%r574, %r3707, %r573;
	cvt.rn.f32.s32 	%f571, %r574;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p177, %f763, 0f40000000;
	@%p177 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p178, %f763, 0f4B800000;
	@%p178 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r54, %f763;
	and.b32  	%r575, %r54, 8388607;
	or.b32  	%r3720, %r575, 1065353216;
	mov.b32 	%f762, %r3720;
	add.s32 	%r576, %r54, -1073741824;
	and.b32  	%r3721, %r576, -8388608;
	setp.eq.s32 	%p184, %r3721, 0;
	@%p184 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1206.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1206
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r577, %r3721, 192937984;
	add.s32 	%r578, %r3720, %r577;
	mov.b32 	%f583, %r578;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3721, %r3721, %r577;
	mov.b32 	%r3720, %f762;
	setp.ne.s32 	%p185, %r3721, 0;
	setp.ne.s32 	%p186, %r3720, 0;
	and.pred  	%p187, %p185, %p186;
	@%p187 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1208
	setp.gt.u32 	%p188, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p188;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1185
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p179, %r53, 1073741824;
	@%p179 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p180, %r53, -2147483647;
	@%p180 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p183, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p183;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p181, %f109, 0f40800000;
	@%p181 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1189
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p182, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p182;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1192
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1211
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p189, %f592, 0f7F800000;
	@%p189 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r579, %f106;
	and.b32  	%r580, %r579, -2147483648;
	mov.b32 	%r581, %f763;
	or.b32  	%r582, %r580, %r581;
	mov.b32 	%f763, %r582;
$L__BB0_111:                            // %__nv_fmodf.exit1212
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r583, %f593;
	and.b32  	%r584, %r583, -2147483648;
	or.b32  	%r585, %r584, 1056964608;
	mov.b32 	%f594, %r585;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p190, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p190;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p191, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p191;
	cvt.rzi.s32.f32 	%r586, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r587, %r586, 1;
	setp.eq.b32 	%p192, %r587, 1;
	selp.f32 	%f612, %f610, %f611, %p192;
	selp.f32 	%f613, %f611, %f610, %p192;
	and.b32  	%r588, %r586, 2;
	setp.eq.s32 	%p193, %r588, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p193;
	add.s32 	%r589, %r586, 1;
	and.b32  	%r590, %r589, 2;
	setp.eq.s32 	%p194, %r590, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p194;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p195, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p195;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p196, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p196;
$L__BB0_112:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L885
	cvt.u16.u32 	%rs22, %r3706;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p197, %f769, 0f40000000;
	@%p197 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p198, %f769, 0f4B800000;
	@%p198 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r64, %f769;
	and.b32  	%r598, %r64, 8388607;
	or.b32  	%r3722, %r598, 1065353216;
	mov.b32 	%f768, %r3722;
	add.s32 	%r599, %r64, -1073741824;
	and.b32  	%r3723, %r599, -8388608;
	setp.eq.s32 	%p204, %r3723, 0;
	@%p204 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1237.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1237
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r600, %r3723, 192937984;
	add.s32 	%r601, %r3722, %r600;
	mov.b32 	%f636, %r601;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3723, %r3723, %r600;
	mov.b32 	%r3722, %f768;
	setp.ne.s32 	%p205, %r3723, 0;
	setp.ne.s32 	%p206, %r3722, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1239
	setp.gt.u32 	%p208, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1216
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p199, %r63, 1073741824;
	@%p199 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p200, %r63, -2147483647;
	@%p200 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p203, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p203;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p201, %f130, 0f40800000;
	@%p201 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1220
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p202, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p202;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1223
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1242
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p209, %f645, 0f7F800000;
	@%p209 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r602, %f127;
	and.b32  	%r603, %r602, -2147483648;
	mov.b32 	%r604, %f769;
	or.b32  	%r605, %r603, %r604;
	mov.b32 	%f769, %r605;
$L__BB0_127:                            // %__nv_fmodf.exit1243
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r606, %f646;
	and.b32  	%r607, %r606, -2147483648;
	or.b32  	%r608, %r607, 1056964608;
	mov.b32 	%f647, %r608;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p210, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p210;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p211, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p211;
	cvt.rzi.s32.f32 	%r609, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r610, %r609, 1;
	setp.eq.b32 	%p212, %r610, 1;
	selp.f32 	%f665, %f663, %f664, %p212;
	selp.f32 	%f666, %f664, %f663, %p212;
	and.b32  	%r611, %r609, 2;
	setp.eq.s32 	%p213, %r611, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p213;
	add.s32 	%r612, %r609, 1;
	and.b32  	%r613, %r612, 2;
	setp.eq.s32 	%p214, %r613, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p214;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p215, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p215;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p216, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p216;
$L__BB0_128:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L927
	mul.hi.u32 	%r615, %r3707, -1431655765;
	shr.u32 	%r616, %r615, 2;
	mul.lo.s32 	%r617, %r616, 6;
	sub.s32 	%r618, %r3707, %r617;
	cvt.rn.f32.s32 	%f677, %r618;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p217, %f775, 0f40000000;
	@%p217 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p218, %f775, 0f4B800000;
	@%p218 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r72, %f775;
	and.b32  	%r619, %r72, 8388607;
	or.b32  	%r3724, %r619, 1065353216;
	mov.b32 	%f774, %r3724;
	add.s32 	%r620, %r72, -1073741824;
	and.b32  	%r3725, %r620, -8388608;
	setp.eq.s32 	%p224, %r3725, 0;
	@%p224 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1268.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1268
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r621, %r3725, 192937984;
	add.s32 	%r622, %r3724, %r621;
	mov.b32 	%f689, %r622;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3725, %r3725, %r621;
	mov.b32 	%r3724, %f774;
	setp.ne.s32 	%p225, %r3725, 0;
	setp.ne.s32 	%p226, %r3724, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1270
	setp.gt.u32 	%p228, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1247
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p219, %r71, 1073741824;
	@%p219 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p220, %r71, -2147483647;
	@%p220 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p223, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p223;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p221, %f151, 0f40800000;
	@%p221 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1251
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p222, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p222;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1254
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1273
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p229, %f698, 0f7F800000;
	@%p229 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r623, %f148;
	and.b32  	%r624, %r623, -2147483648;
	mov.b32 	%r625, %f775;
	or.b32  	%r626, %r624, %r625;
	mov.b32 	%f775, %r626;
$L__BB0_143:                            // %__nv_fmodf.exit1274
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r627, %f699;
	and.b32  	%r628, %r627, -2147483648;
	or.b32  	%r629, %r628, 1056964608;
	mov.b32 	%f700, %r629;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p230, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p230;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p231, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p231;
	cvt.rzi.s32.f32 	%r630, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r631, %r630, 1;
	setp.eq.b32 	%p232, %r631, 1;
	selp.f32 	%f718, %f716, %f717, %p232;
	selp.f32 	%f719, %f717, %f716, %p232;
	and.b32  	%r632, %r630, 2;
	setp.eq.s32 	%p233, %r632, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p233;
	add.s32 	%r633, %r630, 1;
	and.b32  	%r634, %r633, 2;
	setp.eq.s32 	%p234, %r634, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p234;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p235, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p235;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p236, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p236;
$L__BB0_144:                            // %L961
	mov.u32 	%r281, 999999999;
	cvt.u16.u32 	%rs241, %r1;
	@%p92 bra 	$L__BB0_223;
// %bb.145:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs241, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs241, %rs33;
	cvt.u32.u16 	%r648, %rs34;
	and.b32  	%r649, %r648, 255;
	mad.lo.s32 	%r650, %r649, 24, %r3;
	cvt.u16.u32 	%rs35, %r650;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r651, %rs39;
	mul.wide.u32 	%rd50, %r651, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r652, [%rd51];
	shl.b32 	%r653, %r652, 16;
	cvt.s32.s16 	%r83, %r652;
	shr.s32 	%r84, %r652, 16;
	or.b32  	%r654, %r653, 65535;
	setp.lt.u32 	%p238, %r654, 1638399;
	setp.lt.u32 	%p239, %r652, 1572864;
	and.pred  	%p240, %p238, %p239;
	@%p240 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_146;
$L__BB0_222:                            // %L1237
	mul.lo.s32 	%r658, %r84, 801;
	mad.lo.s32 	%r281, %r83, 33, %r658;
$L__BB0_223:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r431, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r432, %r431, -2147483648;
	mov.b32 	%r545, %f487;
	or.b32  	%r433, %r432, 1056964608;
	and.b32  	%r546, %r545, -2147483648;
	mov.b32 	%f225, %r433;
	or.b32  	%r547, %r546, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r547;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p42, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p42;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p43, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p149, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p43;
	selp.f32 	%f492, %f487, %f490, %p149;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p150, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p150;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r434, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r435, %r434, 1;
	cvt.rzi.s32.f32 	%r548, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p44, %r435, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r549, %r548, 1;
	selp.f32 	%f243, %f241, %f242, %p44;
	and.b32  	%r436, %r434, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p151, %r549, 1;
	setp.eq.s32 	%p45, %r436, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r437, %r434, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p151;
	and.b32  	%r550, %r548, 2;
	selp.f32 	%f244, %f242, %f241, %p44;
	selp.f32 	%f246, %f243, %f245, %p45;
	and.b32  	%r438, %r437, 2;
	setp.eq.f32 	%p47, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p152, %r550, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r551, %r548, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p46, %r438, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p47;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p151;
	selp.f32 	%f509, %f506, %f508, %p152;
	and.b32  	%r552, %r551, 2;
	setp.eq.f32 	%p154, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p46;
	setp.gt.f32 	%p48, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p153, %r552, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p154;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p48;
	selp.f32 	%f511, %f507, %f510, %p153;
	setp.gt.f32 	%p155, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r427, %f254;
	mov.b32 	%r430, %f251;
	selp.f32 	%f517, %f516, %f511, %p155;
	xor.b32  	%r426, %r430, -2147483648;
	mov.b32 	%r522, %f62;
	mov.b32 	%r523, %f83;
	mov.b32 	%r528, %f63;
	mov.b32 	%r529, %f84;
	mov.b32 	%r541, %f517;
	mov.b32 	%r544, %f514;
	mov.b32 	%r478, %f20;
	mov.b32 	%r479, %f41;
	mov.b32 	%r481, %f21;
	mov.b32 	%r482, %f42;
	xor.b32  	%r525, %r528, -2147483648;
	xor.b32  	%r526, %r529, -2147483648;
	xor.b32  	%r540, %r544, -2147483648;
	mov.b32 	%r592, %f104;
	mov.b32 	%r593, %f125;
	mov.b32 	%r595, %f105;
	mov.b32 	%r596, %f126;
	mov.b32 	%r636, %f146;
	mov.b32 	%r637, %f167;
	mov.b32 	%r642, %f147;
	xor.b32  	%r639, %r642, -2147483648;
	mov.b32 	%r643, %f168;
	xor.b32  	%r640, %r643, -2147483648;
	and.b32  	%r659, %r1, 24;
	setp.ne.s32 	%p241, %r659, 24;
	cvt.u16.u32 	%rs40, %r256;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs40, %rs43;
	cvt.u32.u16 	%r660, %rs44;
	and.b32  	%r282, %r660, 255;
	mul.lo.s32 	%r3726, %r2, 1152;
	@%p241 bra 	$L__BB0_147;
// %bb.224:                             // %pass503.L1497_crit_edge
	mov.u32 	%r87, 0;
	mov.u32 	%r88, %r87;
	bra.uni 	$L__BB0_148;
$L__BB0_147:                            // %pass507
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r661, %r282, 24;
	mul.lo.s32 	%r662, %r255, 144;
	or.b32  	%r663, %r3726, %r3;
	add.s32 	%r664, %r663, %r662;
	add.s32 	%r665, %r664, %r661;
	mul.wide.u32 	%rd57, %r665, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.u32 	%r87, [%rd58];
	or.b32  	%r666, %r3, 576;
	add.s32 	%r667, %r666, %r3726;
	add.s32 	%r668, %r667, %r662;
	add.s32 	%r669, %r668, %r661;
	mul.wide.u32 	%rd59, %r669, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.u32 	%r88, [%rd60];
$L__BB0_148:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r427;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r477, %r479, %r478;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r480, %r482, %r481;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r521, %r523, %r522;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r524, %r526, %r525;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r527, %r529, %r528;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r530, %r523, %r522;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r539, %r541, %r540;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r542, %r544, %r541;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r591, %r593, %r592;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r594, %r596, %r595;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r635, %r637, %r636;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r638, %r640, %r639;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r641, %r643, %r642;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r644, %r637, %r636;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r672, %r392, 14;
	shl.b32 	%r673, %r396, 8;
	add.s32 	%r89, %r673, %r672;
	shl.b32 	%r674, %r1, 3;
	and.b32  	%r90, %r674, 128;
	shl.b32 	%r675, %r2, 8;
	shl.b32 	%r676, %r1, 2;
	and.b32  	%r677, %r676, 60;
	or.b32  	%r91, %r677, %r675;
	or.b32  	%r678, %r676, %r675;
	or.b32  	%r92, %r678, 64;
	add.s32 	%r93, %r3, 24;
	shr.u32 	%r679, %r1, 4;
	and.b32  	%r680, %r268, 30;
	or.b32  	%r681, %r680, %r679;
	mul.lo.s32 	%r94, %r681, 257;
	or.b32  	%r682, %r268, %r679;
	or.b32  	%r683, %r682, 32;
	mul.lo.s32 	%r95, %r683, 257;
	shr.u32 	%r684, %r3, 3;
	and.b16  	%rs46, %rs241, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 12;
	mul.lo.s16 	%rs49, %rs48, 24;
	sub.s16 	%rs50, %rs241, %rs49;
	cvt.u32.u16 	%r685, %rs50;
	and.b32  	%r96, %r685, 255;
	and.b32  	%r686, %r4, 224;
	mad.lo.s32 	%r97, %r684, 257, %r686;
	shr.u32 	%r687, %r93, 3;
	mad.lo.s32 	%r98, %r687, 257, %r686;
	add.s32 	%r688, %r3, 48;
	shr.u32 	%r689, %r688, 3;
	mad.lo.s32 	%r99, %r689, 257, %r686;
	add.s32 	%r690, %r3, 72;
	shr.u32 	%r691, %r690, 3;
	mad.lo.s32 	%r100, %r691, 257, %r686;
	or.b32  	%r692, %r684, 12;
	mad.lo.s32 	%r101, %r692, 257, %r686;
	add.s32 	%r693, %r3, 120;
	shr.u32 	%r694, %r693, 3;
	mad.lo.s32 	%r102, %r694, 257, %r686;
	add.s32 	%r695, %r3, 144;
	shr.u32 	%r696, %r695, 3;
	mad.lo.s32 	%r103, %r696, 257, %r686;
	add.s32 	%r697, %r3, 168;
	shr.u32 	%r698, %r697, 3;
	mad.lo.s32 	%r104, %r698, 257, %r686;
	or.b32  	%r699, %r684, 24;
	mad.lo.s32 	%r105, %r699, 257, %r686;
	add.s32 	%r700, %r3, 216;
	shr.u32 	%r701, %r700, 3;
	mad.lo.s32 	%r106, %r701, 257, %r686;
	add.s32 	%r702, %r3, 240;
	shr.u32 	%r703, %r702, 3;
	mad.lo.s32 	%r107, %r703, 257, %r686;
	add.s32 	%r704, %r3, 264;
	shr.u32 	%r705, %r704, 3;
	mad.lo.s32 	%r108, %r705, 257, %r686;
	or.b32  	%r706, %r684, 36;
	mad.lo.s32 	%r109, %r706, 257, %r686;
	add.s32 	%r707, %r3, 312;
	shr.u32 	%r708, %r707, 3;
	mad.lo.s32 	%r110, %r708, 257, %r686;
	add.s32 	%r709, %r3, 336;
	shr.u32 	%r710, %r709, 3;
	mad.lo.s32 	%r111, %r710, 257, %r686;
	add.s32 	%r711, %r3, 360;
	shr.u32 	%r712, %r711, 3;
	mad.lo.s32 	%r112, %r712, 257, %r686;
	or.b32  	%r713, %r684, 48;
	mad.lo.s32 	%r113, %r713, 257, %r686;
	add.s32 	%r714, %r3, 408;
	shr.u32 	%r715, %r714, 3;
	mad.lo.s32 	%r114, %r715, 257, %r686;
	add.s32 	%r716, %r3, 432;
	shr.u32 	%r717, %r716, 3;
	mad.lo.s32 	%r115, %r717, 257, %r686;
	add.s32 	%r718, %r3, 456;
	shr.u32 	%r719, %r718, 3;
	mad.lo.s32 	%r116, %r719, 257, %r686;
	or.b32  	%r720, %r684, 60;
	mad.lo.s32 	%r117, %r720, 257, %r686;
	add.s32 	%r721, %r3, 504;
	bfe.u32 	%r722, %r721, 3, 6;
	mad.lo.s32 	%r118, %r722, 257, %r686;
	mul.lo.s32 	%r723, %r3, 33;
	mad.lo.s32 	%r724, %r255, 4806, %r723;
	mad.lo.s32 	%r725, %r282, 801, %r724;
	bfe.s32 	%r726, %r1, 1, 1;
	and.b32  	%r727, %r726, 2056;
	mul.lo.s32 	%r728, %r679, 257;
	and.b32  	%r729, %r1, 1;
	neg.s32 	%r730, %r729;
	and.b32  	%r731, %r730, 4112;
	bfe.s32 	%r732, %r1, 3, 1;
	and.b32  	%r733, %r732, 514;
	bfe.s32 	%r734, %r1, 2, 1;
	and.b32  	%r735, %r734, 1028;
	add.s32 	%r736, %r728, %r3;
	add.s32 	%r737, %r736, %r727;
	add.s32 	%r738, %r737, %r731;
	add.s32 	%r739, %r738, %r733;
	add.s32 	%r740, %r739, %r735;
	mul.wide.u32 	%rd61, %r740, 4;
	mov.u64 	%rd62, shmem;
	add.s64 	%rd7, %rd62, %rd61;
	or.b32  	%r741, %r3, 8256;
	add.s32 	%r742, %r741, %r728;
	add.s32 	%r743, %r742, %r727;
	add.s32 	%r744, %r743, %r731;
	add.s32 	%r745, %r744, %r733;
	add.s32 	%r746, %r745, %r735;
	mul.wide.u32 	%rd63, %r746, 4;
	add.s64 	%rd8, %rd62, %rd63;
	or.b32  	%r747, %r3, 32;
	add.s32 	%r748, %r747, %r728;
	add.s32 	%r749, %r748, %r727;
	add.s32 	%r750, %r749, %r731;
	add.s32 	%r751, %r750, %r733;
	add.s32 	%r752, %r751, %r735;
	mul.wide.u32 	%rd64, %r752, 4;
	add.s64 	%rd9, %rd62, %rd64;
	or.b32  	%r753, %r3, 8288;
	add.s32 	%r754, %r753, %r728;
	add.s32 	%r755, %r754, %r727;
	add.s32 	%r756, %r755, %r731;
	add.s32 	%r757, %r756, %r733;
	add.s32 	%r758, %r757, %r735;
	mul.wide.u32 	%rd65, %r758, 4;
	add.s64 	%rd10, %rd62, %rd65;
	bfe.s32 	%r759, %r3, 2, 1;
	and.b32  	%r760, %r3, 4;
	setp.eq.s32 	%p242, %r760, 0;
	and.b32  	%r761, %r759, 2056;
	and.b32  	%r762, %r3, 1;
	neg.s32 	%r763, %r762;
	and.b32  	%r764, %r763, 8256;
	bfe.s32 	%r765, %r3, 1, 1;
	and.b32  	%r766, %r765, 4112;
	mul.lo.s32 	%r767, %r255, 6;
	shr.u32 	%r768, %r3, 4;
	bfe.s32 	%r769, %r3, 3, 1;
	and.b32  	%r770, %r3, 8;
	setp.eq.s32 	%p243, %r770, 0;
	and.b32  	%r771, %r769, 1028;
	mad.lo.s32 	%r772, %r768, 514, %r767;
	add.s32 	%r773, %r772, %r761;
	add.s32 	%r774, %r773, %r764;
	add.s32 	%r775, %r774, %r766;
	add.s32 	%r776, %r775, %r771;
	add.s32 	%r777, %r776, %r282;
	mul.wide.u32 	%rd66, %r777, 4;
	add.s64 	%rd11, %rd62, %rd66;
	shr.u32 	%r778, %r93, 5;
	bfe.s32 	%r779, %r93, 4, 1;
	and.b32  	%r780, %r779, 514;
	selp.b32 	%r781, 1028, 0, %p243;
	mad.lo.s32 	%r782, %r778, 257, %r767;
	add.s32 	%r783, %r782, %r761;
	add.s32 	%r784, %r783, %r764;
	add.s32 	%r785, %r784, %r766;
	add.s32 	%r786, %r785, %r781;
	add.s32 	%r787, %r786, %r282;
	add.s32 	%r788, %r787, %r780;
	mul.wide.u32 	%rd67, %r788, 4;
	add.s64 	%rd12, %rd62, %rd67;
	selp.b32 	%r789, 32, 2088, %p242;
	add.s32 	%r790, %r772, %r789;
	add.s32 	%r791, %r790, %r764;
	add.s32 	%r792, %r791, %r766;
	add.s32 	%r793, %r792, %r771;
	add.s32 	%r794, %r793, %r282;
	mul.wide.u32 	%rd68, %r794, 4;
	add.s64 	%rd13, %rd62, %rd68;
	add.s32 	%r795, %r788, 32;
	mul.wide.u32 	%rd69, %r795, 4;
	add.s64 	%rd14, %rd62, %rd69;
	mul.lo.s32 	%r796, %r394, 589824;
	mad.lo.s32 	%r797, %r398, 1152, %r796;
	mad.lo.s32 	%r798, %r3, 24, %r3726;
	add.s32 	%r119, %r798, %r96;
	cvt.s64.s32 	%rd15, %r797;
	cvt.u16.u32 	%rs51, %r93;
	and.b16  	%rs52, %rs51, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r799, %rs56;
	and.b32  	%r800, %r799, 255;
	or.b32  	%r801, %r3726, %r96;
	mad.lo.s32 	%r120, %r800, 24, %r801;
	mul.wide.u32 	%rd70, %r725, 4;
	add.s64 	%rd16, %rd62, %rd70;
	add.s32 	%r802, %r740, 64;
	mul.wide.u32 	%rd71, %r802, 4;
	add.s64 	%rd17, %rd62, %rd71;
	add.s32 	%r803, %r746, 64;
	mul.wide.u32 	%rd72, %r803, 4;
	add.s64 	%rd18, %rd62, %rd72;
	add.s32 	%r804, %r752, 64;
	mul.wide.u32 	%rd73, %r804, 4;
	add.s64 	%rd19, %rd62, %rd73;
	add.s32 	%r805, %r758, 64;
	mul.wide.u32 	%rd74, %r805, 4;
	add.s64 	%rd20, %rd62, %rd74;
	add.s32 	%r806, %r740, 128;
	mul.wide.u32 	%rd75, %r806, 4;
	add.s64 	%rd21, %rd62, %rd75;
	add.s32 	%r807, %r746, 128;
	mul.wide.u32 	%rd76, %r807, 4;
	add.s64 	%rd22, %rd62, %rd76;
	add.s32 	%r808, %r752, 128;
	mul.wide.u32 	%rd77, %r808, 4;
	add.s64 	%rd23, %rd62, %rd77;
	add.s32 	%r809, %r758, 128;
	mul.wide.u32 	%rd78, %r809, 4;
	add.s64 	%rd24, %rd62, %rd78;
	add.s32 	%r810, %r740, 192;
	mul.wide.u32 	%rd79, %r810, 4;
	add.s64 	%rd25, %rd62, %rd79;
	add.s32 	%r811, %r746, 192;
	mul.wide.u32 	%rd80, %r811, 4;
	add.s64 	%rd26, %rd62, %rd80;
	add.s32 	%r812, %r752, 192;
	mul.wide.u32 	%rd81, %r812, 4;
	add.s64 	%rd27, %rd62, %rd81;
	add.s32 	%r813, %r758, 192;
	mul.wide.u32 	%rd82, %r813, 4;
	add.s64 	%rd28, %rd62, %rd82;
	add.s32 	%r814, %r777, 64;
	mul.wide.u32 	%rd83, %r814, 4;
	add.s64 	%rd29, %rd62, %rd83;
	add.s32 	%r815, %r788, 64;
	mul.wide.u32 	%rd84, %r815, 4;
	add.s64 	%rd30, %rd62, %rd84;
	add.s32 	%r816, %r794, 64;
	mul.wide.u32 	%rd85, %r816, 4;
	add.s64 	%rd31, %rd62, %rd85;
	add.s32 	%r817, %r788, 96;
	mul.wide.u32 	%rd86, %r817, 4;
	add.s64 	%rd32, %rd62, %rd86;
	add.s32 	%r818, %r777, 128;
	mul.wide.u32 	%rd87, %r818, 4;
	add.s64 	%rd33, %rd62, %rd87;
	add.s32 	%r819, %r788, 128;
	mul.wide.u32 	%rd88, %r819, 4;
	add.s64 	%rd34, %rd62, %rd88;
	add.s32 	%r820, %r794, 128;
	mul.wide.u32 	%rd89, %r820, 4;
	add.s64 	%rd35, %rd62, %rd89;
	add.s32 	%r821, %r788, 160;
	mul.wide.u32 	%rd90, %r821, 4;
	add.s64 	%rd36, %rd62, %rd90;
	add.s32 	%r822, %r777, 192;
	mul.wide.u32 	%rd91, %r822, 4;
	add.s64 	%rd37, %rd62, %rd91;
	add.s32 	%r823, %r788, 192;
	mul.wide.u32 	%rd92, %r823, 4;
	add.s64 	%rd38, %rd62, %rd92;
	add.s32 	%r824, %r794, 192;
	mul.wide.u32 	%rd93, %r824, 4;
	add.s64 	%rd39, %rd62, %rd93;
	add.s32 	%r825, %r788, 224;
	mul.wide.u32 	%rd94, %r825, 4;
	add.s64 	%rd40, %rd62, %rd94;
	setp.lt.u32 	%p245, %r1, 16;
	setp.gt.u32 	%p274, %r3, 7;
	setp.lt.u32 	%p278, %r1, 24;
	mov.u32 	%r3759, %r121;
	mov.u32 	%r3760, %r121;
	mov.u32 	%r3761, %r121;
	mov.u32 	%r3762, %r121;
	bra.uni 	$L__BB0_149;
$L__BB0_195:                            // %L41253
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r254, %r121, 48;
	setp.ne.s32 	%p318, %r121, 8112;
	mov.u32 	%r121, %r254;
	@%p318 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_196;
$L__BB0_149:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_176 Depth 2
                                        //     Child Loop BB0_186 Depth 2
	add.s32 	%r826, %r121, %r392;
	setp.lt.s32 	%p244, %r826, %r393;
	@%p244 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_196;
$L__BB0_150:                            // %oksrem673
                                        //   in Loop: Header=BB0_149 Depth=1
	mul.hi.u32 	%r1019, %r121, -1431655765;
	shr.u32 	%r1020, %r1019, 5;
	mul.lo.s32 	%r287, %r1020, 48;
	add.s32 	%r1021, %r287, %r3;
	cvt.u16.u32 	%rs57, %r1021;
	shr.s16 	%rs58, %rs57, 15;
	shr.u16 	%rs59, %rs58, 3;
	add.s16 	%rs60, %rs57, %rs59;
	and.b16  	%rs61, %rs60, -8192;
	sub.s16 	%rs62, %rs57, %rs61;
	mul.wide.s16 	%r1022, %rs62, 16384;
	or.b32  	%r1023, %r1022, %r90;
	or.b32  	%r1024, %r91, %r1023;
	add.s32 	%r1025, %r89, %r1024;
	shr.s32 	%r1026, %r1025, 31;
	shr.u32 	%r1027, %r1026, 5;
	add.s32 	%r1028, %r1025, %r1027;
	shr.s32 	%r1029, %r1028, 27;
	setp.lt.s32 	%p246, %r1025, 0;
	and.b32  	%r1030, %r1028, -134217728;
	setp.ne.s32 	%p247, %r1030, %r1025;
	and.pred  	%p248, %p246, %p247;
	selp.u32 	%r1031, 1, 0, %p248;
	sub.s32 	%r1032, %r1031, %r1029;
	shl.b32 	%r1033, %r1032, 27;
	add.s32 	%r1034, %r1033, %r1025;
	mul.wide.s32 	%rd95, %r1034, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r1035, %r1036, %r1037, %r1038}, [%rd96];
	or.b32  	%r1039, %r92, %r1023;
	add.s32 	%r1040, %r89, %r1039;
	shr.s32 	%r1041, %r1040, 31;
	shr.u32 	%r1042, %r1041, 5;
	add.s32 	%r1043, %r1040, %r1042;
	shr.u32 	%r1044, %r1043, 27;
	shr.u32 	%r1045, %r1040, 31;
	sub.s32 	%r1046, %r1045, %r1044;
	shl.b32 	%r1047, %r1046, 27;
	add.s32 	%r1048, %r1047, %r1040;
	mul.wide.s32 	%rd97, %r1048, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r1049, %r1050, %r1051, %r1052}, [%rd98];
	add.s32 	%r1053, %r93, %r287;
	cvt.u16.u32 	%rs63, %r1053;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 3;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -8192;
	sub.s16 	%rs68, %rs63, %rs67;
	mul.wide.s16 	%r1054, %rs68, 16384;
	or.b32  	%r1055, %r1054, %r90;
	or.b32  	%r1056, %r91, %r1055;
	add.s32 	%r1057, %r89, %r1056;
	shr.s32 	%r1058, %r1057, 31;
	shr.u32 	%r1059, %r1058, 5;
	add.s32 	%r1060, %r1057, %r1059;
	shr.s32 	%r1061, %r1060, 27;
	setp.lt.s32 	%p249, %r1057, 0;
	and.b32  	%r1062, %r1060, -134217728;
	setp.ne.s32 	%p250, %r1062, %r1057;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r1063, 1, 0, %p251;
	sub.s32 	%r1064, %r1063, %r1061;
	shl.b32 	%r1065, %r1064, 27;
	add.s32 	%r1066, %r1065, %r1057;
	mul.wide.s32 	%rd99, %r1066, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r1067, %r1068, %r1069, %r1070}, [%rd100];
	or.b32  	%r1071, %r92, %r1055;
	add.s32 	%r1072, %r89, %r1071;
	shr.s32 	%r1073, %r1072, 31;
	shr.u32 	%r1074, %r1073, 5;
	add.s32 	%r1075, %r1072, %r1074;
	shr.u32 	%r1076, %r1075, 27;
	shr.u32 	%r1077, %r1072, 31;
	sub.s32 	%r1078, %r1077, %r1076;
	shl.b32 	%r1079, %r1078, 27;
	add.s32 	%r1080, %r1079, %r1072;
	mul.wide.s32 	%rd101, %r1080, 4;
	add.s64 	%rd102, %rd3, %rd101;
	ld.global.v4.u32 	{%r1081, %r1082, %r1083, %r1084}, [%rd102];
	selp.b32 	%r1085, %r1037, %r1035, %p245;
	shfl.sync.bfly.b32	%r1086, %r1085, 16, 31, -1;
	selp.b32 	%r829, %r1035, %r1086, %p245;
	selp.b32 	%r834, %r1086, %r1037, %p245;
	selp.b32 	%r1087, %r1038, %r1036, %p245;
	shfl.sync.bfly.b32	%r1088, %r1087, 16, 31, -1;
	selp.b32 	%r837, %r1036, %r1088, %p245;
	selp.b32 	%r842, %r1088, %r1038, %p245;
	selp.b32 	%r1089, %r1051, %r1049, %p245;
	shfl.sync.bfly.b32	%r1090, %r1089, 16, 31, -1;
	selp.b32 	%r845, %r1049, %r1090, %p245;
	selp.b32 	%r850, %r1090, %r1051, %p245;
	selp.b32 	%r1091, %r1052, %r1050, %p245;
	shfl.sync.bfly.b32	%r1092, %r1091, 16, 31, -1;
	selp.b32 	%r853, %r1050, %r1092, %p245;
	selp.b32 	%r858, %r1092, %r1052, %p245;
	selp.b32 	%r1093, %r1069, %r1067, %p245;
	shfl.sync.bfly.b32	%r1094, %r1093, 16, 31, -1;
	selp.b32 	%r861, %r1067, %r1094, %p245;
	selp.b32 	%r866, %r1094, %r1069, %p245;
	selp.b32 	%r1095, %r1070, %r1068, %p245;
	shfl.sync.bfly.b32	%r1096, %r1095, 16, 31, -1;
	selp.b32 	%r869, %r1068, %r1096, %p245;
	selp.b32 	%r874, %r1096, %r1070, %p245;
	selp.b32 	%r1097, %r1083, %r1081, %p245;
	shfl.sync.bfly.b32	%r1098, %r1097, 16, 31, -1;
	selp.b32 	%r877, %r1081, %r1098, %p245;
	selp.b32 	%r882, %r1098, %r1083, %p245;
	selp.b32 	%r1099, %r1084, %r1082, %p245;
	shfl.sync.bfly.b32	%r1100, %r1099, 16, 31, -1;
	selp.b32 	%r885, %r1082, %r1100, %p245;
	selp.b32 	%r890, %r1100, %r1084, %p245;
	shl.b32 	%r830, %r834, 4;
	mov.u32 	%r828, 252645135;
	// begin inline asm
	lop3.b32 %r892, %r828, %r829, %r830, 202;
	// end inline asm
	shr.u32 	%r833, %r829, 4;
	// begin inline asm
	lop3.b32 %r908, %r828, %r833, %r834, 202;
	// end inline asm
	shl.b32 	%r838, %r842, 4;
	// begin inline asm
	lop3.b32 %r900, %r828, %r837, %r838, 202;
	// end inline asm
	shr.u32 	%r841, %r837, 4;
	// begin inline asm
	lop3.b32 %r916, %r828, %r841, %r842, 202;
	// end inline asm
	shl.b32 	%r846, %r850, 4;
	// begin inline asm
	lop3.b32 %r924, %r828, %r845, %r846, 202;
	// end inline asm
	shr.u32 	%r849, %r845, 4;
	// begin inline asm
	lop3.b32 %r940, %r828, %r849, %r850, 202;
	// end inline asm
	shl.b32 	%r854, %r858, 4;
	// begin inline asm
	lop3.b32 %r932, %r828, %r853, %r854, 202;
	// end inline asm
	shr.u32 	%r857, %r853, 4;
	// begin inline asm
	lop3.b32 %r948, %r828, %r857, %r858, 202;
	// end inline asm
	shl.b32 	%r862, %r866, 4;
	// begin inline asm
	lop3.b32 %r893, %r828, %r861, %r862, 202;
	// end inline asm
	shr.u32 	%r865, %r861, 4;
	// begin inline asm
	lop3.b32 %r909, %r828, %r865, %r866, 202;
	// end inline asm
	shl.b32 	%r870, %r874, 4;
	// begin inline asm
	lop3.b32 %r901, %r828, %r869, %r870, 202;
	// end inline asm
	shr.u32 	%r873, %r869, 4;
	// begin inline asm
	lop3.b32 %r917, %r828, %r873, %r874, 202;
	// end inline asm
	shl.b32 	%r878, %r882, 4;
	// begin inline asm
	lop3.b32 %r925, %r828, %r877, %r878, 202;
	// end inline asm
	shr.u32 	%r881, %r877, 4;
	// begin inline asm
	lop3.b32 %r941, %r828, %r881, %r882, 202;
	// end inline asm
	shl.b32 	%r886, %r890, 4;
	// begin inline asm
	lop3.b32 %r933, %r828, %r885, %r886, 202;
	// end inline asm
	shr.u32 	%r889, %r885, 4;
	// begin inline asm
	lop3.b32 %r949, %r828, %r889, %r890, 202;
	// end inline asm
	mov.u32 	%r894, 25152;
	// begin inline asm
	prmt.b32 %r956, %r892, %r893, %r894;
	// end inline asm
	mov.u32 	%r898, 29521;
	// begin inline asm
	prmt.b32 %r988, %r892, %r893, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r964, %r900, %r901, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r996, %r900, %r901, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r957, %r908, %r909, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r989, %r908, %r909, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r965, %r916, %r917, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r997, %r916, %r917, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r972, %r924, %r925, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1004, %r924, %r925, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r980, %r932, %r933, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1012, %r932, %r933, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r973, %r940, %r941, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1005, %r940, %r941, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r981, %r948, %r949, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1013, %r948, %r949, %r898;
	// end inline asm
	mov.u32 	%r1014, 21520;
	// begin inline asm
	prmt.b32 %r955, %r956, %r957, %r1014;
	// end inline asm
	mov.u32 	%r1018, 30258;
	// begin inline asm
	prmt.b32 %r959, %r956, %r957, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r963, %r964, %r965, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r967, %r964, %r965, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r971, %r972, %r973, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r975, %r972, %r973, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r980, %r981, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r983, %r980, %r981, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r988, %r989, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r991, %r988, %r989, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r995, %r996, %r997, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r999, %r996, %r997, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1003, %r1004, %r1005, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1007, %r1004, %r1005, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1011, %r1012, %r1013, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1015, %r1012, %r1013, %r1018;
	// end inline asm
	mul.hi.s16 	%rs69, %rs57, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs57, %rs73;
	cvt.s32.s16 	%r1101, %rs74;
	add.s32 	%r1102, %r94, %r1101;
	mul.wide.s32 	%rd103, %r1102, 4;
	add.s64 	%rd105, %rd62, %rd103;
	st.shared.u32 	[%rd105], %r955;
	add.s32 	%r1103, %r1102, 128;
	mul.wide.u32 	%rd106, %r1103, 4;
	add.s64 	%rd107, %rd62, %rd106;
	st.shared.u32 	[%rd107], %r963;
	add.s32 	%r1104, %r1102, 64;
	mul.wide.u32 	%rd108, %r1104, 4;
	add.s64 	%rd109, %rd62, %rd108;
	st.shared.u32 	[%rd109], %r959;
	add.s32 	%r1105, %r1102, 192;
	mul.wide.u32 	%rd110, %r1105, 4;
	add.s64 	%rd111, %rd62, %rd110;
	st.shared.u32 	[%rd111], %r967;
	add.s32 	%r1106, %r95, %r1101;
	mul.wide.u32 	%rd112, %r1106, 4;
	add.s64 	%rd113, %rd62, %rd112;
	st.shared.u32 	[%rd113], %r971;
	add.s32 	%r1107, %r1106, 128;
	mul.wide.u32 	%rd114, %r1107, 4;
	add.s64 	%rd115, %rd62, %rd114;
	st.shared.u32 	[%rd115], %r979;
	add.s32 	%r1108, %r1106, 64;
	mul.wide.u32 	%rd116, %r1108, 4;
	add.s64 	%rd117, %rd62, %rd116;
	st.shared.u32 	[%rd117], %r975;
	add.s32 	%r1109, %r1106, 192;
	mul.wide.u32 	%rd118, %r1109, 4;
	add.s64 	%rd119, %rd62, %rd118;
	st.shared.u32 	[%rd119], %r983;
	add.s32 	%r1110, %r1102, 32;
	mul.wide.u32 	%rd120, %r1110, 4;
	add.s64 	%rd121, %rd62, %rd120;
	st.shared.u32 	[%rd121], %r987;
	add.s32 	%r1111, %r1102, 160;
	mul.wide.u32 	%rd122, %r1111, 4;
	add.s64 	%rd123, %rd62, %rd122;
	st.shared.u32 	[%rd123], %r995;
	add.s32 	%r1112, %r1102, 96;
	mul.wide.u32 	%rd124, %r1112, 4;
	add.s64 	%rd125, %rd62, %rd124;
	st.shared.u32 	[%rd125], %r991;
	add.s32 	%r1113, %r1102, 224;
	mul.wide.u32 	%rd126, %r1113, 4;
	add.s64 	%rd127, %rd62, %rd126;
	st.shared.u32 	[%rd127], %r999;
	add.s32 	%r1114, %r1106, 32;
	mul.wide.u32 	%rd128, %r1114, 4;
	add.s64 	%rd129, %rd62, %rd128;
	st.shared.u32 	[%rd129], %r1003;
	add.s32 	%r1115, %r1106, 160;
	mul.wide.u32 	%rd130, %r1115, 4;
	add.s64 	%rd131, %rd62, %rd130;
	st.shared.u32 	[%rd131], %r1011;
	add.s32 	%r1116, %r1106, 96;
	mul.wide.u32 	%rd132, %r1116, 4;
	add.s64 	%rd133, %rd62, %rd132;
	st.shared.u32 	[%rd133], %r1007;
	add.s32 	%r1117, %r1106, 224;
	mul.wide.u32 	%rd134, %r1117, 4;
	add.s64 	%rd135, %rd62, %rd134;
	st.shared.u32 	[%rd135], %r1015;
	bar.sync 	0;
	add.s32 	%r1118, %r287, %r96;
	cvt.u16.u32 	%rs75, %r1118;
	mul.hi.s16 	%rs76, %rs75, 10923;
	shr.u16 	%rs77, %rs76, 15;
	shr.s16 	%rs78, %rs76, 2;
	add.s16 	%rs79, %rs78, %rs77;
	mul.lo.s16 	%rs80, %rs79, 24;
	sub.s16 	%rs81, %rs75, %rs80;
	cvt.s32.s16 	%r288, %rs81;
	add.s32 	%r1119, %r97, %r288;
	mul.wide.s32 	%rd136, %r1119, 4;
	add.s64 	%rd137, %rd62, %rd136;
	ld.shared.u32 	%r289, [%rd137];
	add.s32 	%r1120, %r98, %r288;
	mul.wide.u32 	%rd138, %r1120, 4;
	add.s64 	%rd139, %rd62, %rd138;
	ld.shared.u32 	%r290, [%rd139];
	add.s32 	%r1121, %r99, %r288;
	mul.wide.u32 	%rd140, %r1121, 4;
	add.s64 	%rd141, %rd62, %rd140;
	ld.shared.u32 	%r291, [%rd141];
	add.s32 	%r1122, %r100, %r288;
	mul.wide.u32 	%rd142, %r1122, 4;
	add.s64 	%rd143, %rd62, %rd142;
	ld.shared.u32 	%r292, [%rd143];
	add.s32 	%r1123, %r101, %r288;
	mul.wide.u32 	%rd144, %r1123, 4;
	add.s64 	%rd145, %rd62, %rd144;
	ld.shared.u32 	%r293, [%rd145];
	add.s32 	%r1124, %r102, %r288;
	mul.wide.u32 	%rd146, %r1124, 4;
	add.s64 	%rd147, %rd62, %rd146;
	ld.shared.u32 	%r294, [%rd147];
	add.s32 	%r1125, %r103, %r288;
	mul.wide.u32 	%rd148, %r1125, 4;
	add.s64 	%rd149, %rd62, %rd148;
	ld.shared.u32 	%r295, [%rd149];
	add.s32 	%r1126, %r104, %r288;
	mul.wide.u32 	%rd150, %r1126, 4;
	add.s64 	%rd151, %rd62, %rd150;
	ld.shared.u32 	%r296, [%rd151];
	add.s32 	%r1127, %r105, %r288;
	mul.wide.u32 	%rd152, %r1127, 4;
	add.s64 	%rd153, %rd62, %rd152;
	ld.shared.u32 	%r297, [%rd153];
	add.s32 	%r1128, %r106, %r288;
	mul.wide.u32 	%rd154, %r1128, 4;
	add.s64 	%rd155, %rd62, %rd154;
	ld.shared.u32 	%r298, [%rd155];
	add.s32 	%r1129, %r107, %r288;
	mul.wide.u32 	%rd156, %r1129, 4;
	add.s64 	%rd157, %rd62, %rd156;
	ld.shared.u32 	%r299, [%rd157];
	add.s32 	%r1130, %r108, %r288;
	mul.wide.u32 	%rd158, %r1130, 4;
	add.s64 	%rd159, %rd62, %rd158;
	ld.shared.u32 	%r300, [%rd159];
	add.s32 	%r1131, %r109, %r288;
	mul.wide.u32 	%rd160, %r1131, 4;
	add.s64 	%rd161, %rd62, %rd160;
	ld.shared.u32 	%r301, [%rd161];
	add.s32 	%r1132, %r110, %r288;
	mul.wide.u32 	%rd162, %r1132, 4;
	add.s64 	%rd163, %rd62, %rd162;
	ld.shared.u32 	%r302, [%rd163];
	add.s32 	%r1133, %r111, %r288;
	mul.wide.u32 	%rd164, %r1133, 4;
	add.s64 	%rd165, %rd62, %rd164;
	ld.shared.u32 	%r303, [%rd165];
	add.s32 	%r1134, %r112, %r288;
	mul.wide.u32 	%rd166, %r1134, 4;
	add.s64 	%rd167, %rd62, %rd166;
	ld.shared.u32 	%r304, [%rd167];
	add.s32 	%r1135, %r113, %r288;
	mul.wide.u32 	%rd168, %r1135, 4;
	add.s64 	%rd169, %rd62, %rd168;
	ld.shared.u32 	%r305, [%rd169];
	add.s32 	%r1136, %r114, %r288;
	mul.wide.u32 	%rd170, %r1136, 4;
	add.s64 	%rd171, %rd62, %rd170;
	ld.shared.u32 	%r306, [%rd171];
	add.s32 	%r1137, %r115, %r288;
	mul.wide.u32 	%rd172, %r1137, 4;
	add.s64 	%rd173, %rd62, %rd172;
	ld.shared.u32 	%r307, [%rd173];
	add.s32 	%r1138, %r116, %r288;
	mul.wide.u32 	%rd174, %r1138, 4;
	add.s64 	%rd175, %rd62, %rd174;
	ld.shared.u32 	%r308, [%rd175];
	add.s32 	%r1139, %r117, %r288;
	mul.wide.u32 	%rd176, %r1139, 4;
	add.s64 	%rd177, %rd62, %rd176;
	ld.shared.u32 	%r309, [%rd177];
	add.s32 	%r1140, %r118, %r288;
	mul.wide.s32 	%rd178, %r1140, 4;
	add.s64 	%rd179, %rd62, %rd178;
	ld.shared.u32 	%r310, [%rd179];
	bar.sync 	0;
	shfl.sync.idx.b32	%r311, %r281, 0, 31, -1;
	shfl.sync.idx.b32	%r312, %r281, 1, 31, -1;
	shfl.sync.idx.b32	%r313, %r281, 2, 31, -1;
	shfl.sync.idx.b32	%r314, %r281, 3, 31, -1;
	shfl.sync.idx.b32	%r315, %r281, 4, 31, -1;
	shfl.sync.idx.b32	%r316, %r281, 5, 31, -1;
	shfl.sync.idx.b32	%r317, %r281, 6, 31, -1;
	shfl.sync.idx.b32	%r318, %r281, 7, 31, -1;
	shfl.sync.idx.b32	%r319, %r281, 8, 31, -1;
	shfl.sync.idx.b32	%r320, %r281, 9, 31, -1;
	shfl.sync.idx.b32	%r321, %r281, 10, 31, -1;
	shfl.sync.idx.b32	%r322, %r281, 11, 31, -1;
	shfl.sync.idx.b32	%r323, %r281, 12, 31, -1;
	shfl.sync.idx.b32	%r324, %r281, 13, 31, -1;
	shfl.sync.idx.b32	%r325, %r281, 14, 31, -1;
	shfl.sync.idx.b32	%r326, %r281, 15, 31, -1;
	shfl.sync.idx.b32	%r327, %r281, 16, 31, -1;
	shfl.sync.idx.b32	%r328, %r281, 17, 31, -1;
	shfl.sync.idx.b32	%r329, %r281, 18, 31, -1;
	shfl.sync.idx.b32	%r330, %r281, 19, 31, -1;
	shfl.sync.idx.b32	%r331, %r281, 20, 31, -1;
	shfl.sync.idx.b32	%r332, %r281, 21, 31, -1;
	shfl.sync.idx.b32	%r333, %r281, 22, 31, -1;
	shfl.sync.idx.b32	%r334, %r281, 23, 31, -1;
	setp.eq.s32 	%p252, %r311, 999999999;
	@%p252 bra 	$L__BB0_151;
// %bb.225:                             // %oksrem3332
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1141, %r311, %r288;
	mul.wide.s32 	%rd180, %r1141, 4;
	add.s64 	%rd182, %rd62, %rd180;
	st.shared.u32 	[%rd182], %r289;
	setp.eq.s32 	%p253, %r312, 999999999;
	@%p253 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3400
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1142, %r312, %r288;
	mul.wide.s32 	%rd183, %r1142, 4;
	add.s64 	%rd185, %rd62, %rd183;
	st.shared.u32 	[%rd185], %r290;
	setp.eq.s32 	%p254, %r313, 999999999;
	@%p254 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3468
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1143, %r313, %r288;
	mul.wide.s32 	%rd186, %r1143, 4;
	add.s64 	%rd188, %rd62, %rd186;
	st.shared.u32 	[%rd188], %r291;
	setp.eq.s32 	%p255, %r314, 999999999;
	@%p255 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3536
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1144, %r314, %r288;
	mul.wide.s32 	%rd189, %r1144, 4;
	add.s64 	%rd191, %rd62, %rd189;
	st.shared.u32 	[%rd191], %r292;
	setp.eq.s32 	%p256, %r315, 999999999;
	@%p256 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3604
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1145, %r315, %r288;
	mul.wide.s32 	%rd192, %r1145, 4;
	add.s64 	%rd194, %rd62, %rd192;
	st.shared.u32 	[%rd194], %r293;
	setp.eq.s32 	%p257, %r316, 999999999;
	@%p257 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3672
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1146, %r316, %r288;
	mul.wide.s32 	%rd195, %r1146, 4;
	add.s64 	%rd197, %rd62, %rd195;
	st.shared.u32 	[%rd197], %r294;
	setp.eq.s32 	%p258, %r317, 999999999;
	@%p258 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3740
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1147, %r317, %r288;
	mul.wide.s32 	%rd198, %r1147, 4;
	add.s64 	%rd200, %rd62, %rd198;
	st.shared.u32 	[%rd200], %r295;
	setp.eq.s32 	%p259, %r318, 999999999;
	@%p259 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3808
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1148, %r318, %r288;
	mul.wide.s32 	%rd201, %r1148, 4;
	add.s64 	%rd203, %rd62, %rd201;
	st.shared.u32 	[%rd203], %r296;
	setp.eq.s32 	%p260, %r319, 999999999;
	@%p260 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3876
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1149, %r319, %r288;
	mul.wide.s32 	%rd204, %r1149, 4;
	add.s64 	%rd206, %rd62, %rd204;
	st.shared.u32 	[%rd206], %r297;
	setp.eq.s32 	%p261, %r320, 999999999;
	@%p261 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3944
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1150, %r320, %r288;
	mul.wide.s32 	%rd207, %r1150, 4;
	add.s64 	%rd209, %rd62, %rd207;
	st.shared.u32 	[%rd209], %r298;
	setp.eq.s32 	%p262, %r321, 999999999;
	@%p262 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem4012
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1151, %r321, %r288;
	mul.wide.s32 	%rd210, %r1151, 4;
	add.s64 	%rd212, %rd62, %rd210;
	st.shared.u32 	[%rd212], %r299;
	setp.eq.s32 	%p263, %r322, 999999999;
	@%p263 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4080
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1152, %r322, %r288;
	mul.wide.s32 	%rd213, %r1152, 4;
	add.s64 	%rd215, %rd62, %rd213;
	st.shared.u32 	[%rd215], %r300;
	setp.eq.s32 	%p264, %r323, 999999999;
	@%p264 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4148
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1153, %r323, %r288;
	mul.wide.s32 	%rd216, %r1153, 4;
	add.s64 	%rd218, %rd62, %rd216;
	st.shared.u32 	[%rd218], %r301;
	setp.eq.s32 	%p265, %r324, 999999999;
	@%p265 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4216
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1154, %r324, %r288;
	mul.wide.s32 	%rd219, %r1154, 4;
	add.s64 	%rd221, %rd62, %rd219;
	st.shared.u32 	[%rd221], %r302;
	setp.eq.s32 	%p266, %r325, 999999999;
	@%p266 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4284
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1155, %r325, %r288;
	mul.wide.s32 	%rd222, %r1155, 4;
	add.s64 	%rd224, %rd62, %rd222;
	st.shared.u32 	[%rd224], %r303;
	setp.eq.s32 	%p267, %r326, 999999999;
	@%p267 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4352
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1156, %r326, %r288;
	mul.wide.s32 	%rd225, %r1156, 4;
	add.s64 	%rd227, %rd62, %rd225;
	st.shared.u32 	[%rd227], %r304;
	setp.eq.s32 	%p268, %r327, 999999999;
	@%p268 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4420
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1157, %r327, %r288;
	mul.wide.s32 	%rd228, %r1157, 4;
	add.s64 	%rd230, %rd62, %rd228;
	st.shared.u32 	[%rd230], %r305;
	setp.eq.s32 	%p269, %r328, 999999999;
	@%p269 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4488
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1158, %r328, %r288;
	mul.wide.s32 	%rd231, %r1158, 4;
	add.s64 	%rd233, %rd62, %rd231;
	st.shared.u32 	[%rd233], %r306;
	setp.eq.s32 	%p270, %r329, 999999999;
	@%p270 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4556
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1159, %r329, %r288;
	mul.wide.s32 	%rd234, %r1159, 4;
	add.s64 	%rd236, %rd62, %rd234;
	st.shared.u32 	[%rd236], %r307;
	setp.eq.s32 	%p271, %r330, 999999999;
	@%p271 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4624
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1160, %r330, %r288;
	mul.wide.s32 	%rd237, %r1160, 4;
	add.s64 	%rd239, %rd62, %rd237;
	st.shared.u32 	[%rd239], %r308;
	setp.eq.s32 	%p272, %r331, 999999999;
	@%p272 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4692
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1161, %r331, %r288;
	mul.wide.s32 	%rd240, %r1161, 4;
	add.s64 	%rd242, %rd62, %rd240;
	st.shared.u32 	[%rd242], %r309;
	setp.eq.s32 	%p273, %r332, 999999999;
	@%p273 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4761
                                        //   in Loop: Header=BB0_149 Depth=1
	selp.b32 	%r1162, 0, %r310, %p274;
	add.s32 	%r1163, %r332, %r288;
	mul.wide.s32 	%rd243, %r1163, 4;
	add.s64 	%rd245, %rd62, %rd243;
	st.shared.u32 	[%rd245], %r1162;
	setp.eq.s32 	%p275, %r333, 999999999;
	@%p275 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4829
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1164, %r333, %r288;
	mul.wide.s32 	%rd246, %r1164, 4;
	add.s64 	%rd248, %rd62, %rd246;
	mov.u32 	%r3734, 0;
	st.shared.u32 	[%rd248], %r3734;
	setp.eq.s32 	%p276, %r334, 999999999;
	@%p276 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4896
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1167, %r334, %r288;
	mul.wide.s32 	%rd249, %r1167, 4;
	add.s64 	%rd251, %rd62, %rd249;
	st.shared.u32 	[%rd251], %r3734;
	bar.sync 	0;
	mov.u32 	%r3735, %r3734;
	mov.u32 	%r3736, %r3734;
	mov.u32 	%r3737, %r3734;
	mov.u32 	%r3738, %r3734;
	mov.u32 	%r3739, %r3734;
	mov.u32 	%r3740, %r3734;
	mov.u32 	%r3741, %r3734;
	mov.u32 	%r3742, %r3734;
	mov.u32 	%r3743, %r3734;
	mov.u32 	%r3744, %r3734;
	mov.u32 	%r3745, %r3734;
	mov.u32 	%r3746, %r3734;
	mov.u32 	%r3747, %r3734;
	mov.u32 	%r3748, %r3734;
	mov.u32 	%r3749, %r3734;
	mov.u32 	%r3750, %r3734;
	mov.u32 	%r3751, %r3734;
	mov.u32 	%r3752, %r3734;
	mov.u32 	%r3753, %r3734;
	mov.u32 	%r3754, %r3734;
	mov.u32 	%r3755, %r3734;
	mov.u32 	%r3756, %r3734;
	mov.u32 	%r3757, %r3734;
	@%p92 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4959
                                        //   in Loop: Header=BB0_149 Depth=1
	cvt.u16.u32 	%rs82, %r287;
	mul.hi.s16 	%rs83, %rs82, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs82, %rs87;
	cvt.s32.s16 	%r1168, %rs88;
	mul.wide.s32 	%rd252, %r1168, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3734, [%rd253];
	ld.shared.u32 	%r3735, [%rd16+4];
	ld.shared.u32 	%r3736, [%rd16+8];
	ld.shared.u32 	%r3737, [%rd16+12];
	ld.shared.u32 	%r3738, [%rd16+16];
	ld.shared.u32 	%r3739, [%rd16+20];
	ld.shared.u32 	%r3740, [%rd16+24];
	ld.shared.u32 	%r3741, [%rd16+28];
	ld.shared.u32 	%r3742, [%rd16+32];
	ld.shared.u32 	%r3743, [%rd16+36];
	ld.shared.u32 	%r3744, [%rd16+40];
	ld.shared.u32 	%r3745, [%rd16+44];
	ld.shared.u32 	%r3746, [%rd16+48];
	ld.shared.u32 	%r3747, [%rd16+52];
	ld.shared.u32 	%r3748, [%rd16+56];
	ld.shared.u32 	%r3749, [%rd16+60];
	add.s16 	%rs89, %rs82, 16;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r1169, %rs95;
	mul.wide.s32 	%rd254, %r1169, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3750, [%rd255];
	add.s16 	%rs96, %rs82, 17;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r1170, %rs102;
	mul.wide.s32 	%rd256, %r1170, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3751, [%rd257];
	add.s16 	%rs103, %rs82, 18;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r1171, %rs109;
	mul.wide.s32 	%rd258, %r1171, 4;
	add.s64 	%rd259, %rd16, %rd258;
	ld.shared.u32 	%r3752, [%rd259];
	add.s16 	%rs110, %rs82, 19;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r1172, %rs116;
	mul.wide.s32 	%rd260, %r1172, 4;
	add.s64 	%rd261, %rd16, %rd260;
	ld.shared.u32 	%r3753, [%rd261];
	add.s16 	%rs117, %rs82, 20;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r1173, %rs123;
	mul.wide.s32 	%rd262, %r1173, 4;
	add.s64 	%rd263, %rd16, %rd262;
	ld.shared.u32 	%r3754, [%rd263];
	add.s16 	%rs124, %rs82, 21;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r1174, %rs130;
	mul.wide.s32 	%rd264, %r1174, 4;
	add.s64 	%rd265, %rd16, %rd264;
	ld.shared.u32 	%r3755, [%rd265];
	add.s16 	%rs131, %rs82, 22;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r1175, %rs137;
	mul.wide.s32 	%rd266, %r1175, 4;
	add.s64 	%rd267, %rd16, %rd266;
	ld.shared.u32 	%r3756, [%rd267];
	add.s16 	%rs138, %rs82, 23;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r1176, %rs144;
	mul.wide.s32 	%rd268, %r1176, 4;
	add.s64 	%rd269, %rd16, %rd268;
	ld.shared.u32 	%r3757, [%rd269];
$L__BB0_175:                            // %L13906
                                        //   in Loop: Header=BB0_149 Depth=1
	bar.sync 	0;
	mov.u32 	%r3758, 12;
	bra.uni 	$L__BB0_176;
$L__BB0_183:                            // %L27570
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r3760, %r3760, 1;
	mov.u32 	%r3759, 0;
	mov.u32 	%r3761, %r3759;
	mov.u32 	%r3762, %r3759;
$L__BB0_184:                            // %L27571
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	add.s32 	%r3758, %r3758, -4;
	setp.ne.s32 	%p297, %r3758, -12;
	@%p297 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_185;
$L__BB0_176:                            // %L13932
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p279, %r3758, 12;
	selp.b32 	%r1714, %r3734, 0, %p279;
	setp.eq.s32 	%p280, %r3758, 8;
	selp.b32 	%r1715, %r3738, %r1714, %p280;
	setp.eq.s32 	%p281, %r3758, 4;
	selp.b32 	%r1716, %r3742, %r1715, %p281;
	setp.eq.s32 	%p282, %r3758, 0;
	selp.b32 	%r1717, %r3746, %r1716, %p282;
	setp.eq.s32 	%p283, %r3758, -4;
	selp.b32 	%r1718, %r3750, %r1717, %p283;
	setp.eq.s32 	%p284, %r3758, -8;
	selp.b32 	%r1719, %r3754, %r1718, %p284;
	selp.b32 	%r1720, %r3735, 0, %p279;
	selp.b32 	%r1721, %r3739, %r1720, %p280;
	selp.b32 	%r1722, %r3743, %r1721, %p281;
	selp.b32 	%r1723, %r3747, %r1722, %p282;
	selp.b32 	%r1724, %r3751, %r1723, %p283;
	selp.b32 	%r1725, %r3755, %r1724, %p284;
	selp.b32 	%r1726, %r3736, 0, %p279;
	selp.b32 	%r1727, %r3740, %r1726, %p280;
	selp.b32 	%r1728, %r3744, %r1727, %p281;
	selp.b32 	%r1729, %r3748, %r1728, %p282;
	selp.b32 	%r1730, %r3752, %r1729, %p283;
	selp.b32 	%r1731, %r3756, %r1730, %p284;
	selp.b32 	%r1732, %r3737, 0, %p279;
	selp.b32 	%r1733, %r3741, %r1732, %p280;
	selp.b32 	%r1734, %r3745, %r1733, %p281;
	selp.b32 	%r1735, %r3749, %r1734, %p282;
	selp.b32 	%r1736, %r3753, %r1735, %p283;
	selp.b32 	%r1737, %r3757, %r1736, %p284;
	mov.u16 	%rs182, 25600;
	// begin inline asm
	mov.b32 %r1183, {%rs182, %rs182};
	// end inline asm
	mov.u16 	%rs184, 21504;
	// begin inline asm
	mov.b32 %r1194, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1182, %r1719, -2004318072;
	mov.u32 	%r1319, 983055;
	// begin inline asm
	lop3.b32 %r1180, %r1319, %r1182, %r1183, 202;
	// end inline asm
	mov.u16 	%rs188, 18432;
	// begin inline asm
	mov.b32 %r1184, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1185, %r1183, %r1184;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1188, %r1180, %r1185;
	// end inline asm
	mov.u32 	%r1330, 15728880;
	// begin inline asm
	lop3.b32 %r1191, %r1330, %r1182, %r1194, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1195, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1196, %r1194, %r1195;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1199, %r1191, %r1196;
	// end inline asm
	// begin inline asm
	mov.b32 %r1229, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1240, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1228, %r1725, -2004318072;
	// begin inline asm
	lop3.b32 %r1226, %r1319, %r1228, %r1229, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1230, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1231, %r1229, %r1230;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1234, %r1226, %r1231;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1237, %r1330, %r1228, %r1240, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1241, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1242, %r1240, %r1241;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1245, %r1237, %r1242;
	// end inline asm
	// begin inline asm
	mov.b32 %r1275, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1286, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1274, %r1731, -2004318072;
	// begin inline asm
	lop3.b32 %r1272, %r1319, %r1274, %r1275, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1276, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1277, %r1275, %r1276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1280, %r1272, %r1277;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1283, %r1330, %r1274, %r1286, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1287, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1288, %r1286, %r1287;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1291, %r1283, %r1288;
	// end inline asm
	// begin inline asm
	mov.b32 %r1321, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1332, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1320, %r1737, -2004318072;
	// begin inline asm
	lop3.b32 %r1318, %r1319, %r1320, %r1321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1322, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1323, %r1321, %r1322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1326, %r1318, %r1323;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1329, %r1330, %r1320, %r1332, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1333, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1334, %r1332, %r1333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1337, %r1329, %r1334;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1188;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1362, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1199;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1365, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1234;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1368, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1245;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1371, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1280;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1374, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1291;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1377, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1326;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1380, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1337;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1383, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1649, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1449, %r1446}, {%r425, %r428}, {%r1362}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1458, %r1455}, {%r425, %r428}, {%r1365}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1467, %r1464}, {%r425, %r428}, {%r1368}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1476, %r1473}, {%r425, %r428}, {%r1371}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1485, %r1482}, {%r425, %r428}, {%r1374}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1494, %r1491}, {%r425, %r428}, {%r1377}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1503, %r1500}, {%r425, %r428}, {%r1380}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1512, %r1509}, {%r425, %r428}, {%r1383}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1442, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1444, %r1442, %r1446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1447, %r477, %r1449, %r1444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1451, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r1451, %r1455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r477, %r1458, %r1453;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1460, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r1460, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r477, %r1467, %r1462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1469, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r1469, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r477, %r1476, %r1471;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1478, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1480, %r1478, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r477, %r1485, %r1480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1487, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1489, %r1487, %r1491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r477, %r1494, %r1489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1496, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1498, %r1496, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1501, %r477, %r1503, %r1498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1505, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1505, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r477, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1514, %r480, %r1449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r477, %r1446, %r1514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1521, %r480, %r1458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1524, %r477, %r1455, %r1521;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1528, %r480, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1531, %r477, %r1464, %r1528;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1535, %r480, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1538, %r477, %r1473, %r1535;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1542, %r480, %r1485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1545, %r477, %r1482, %r1542;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1549, %r480, %r1494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r477, %r1491, %r1549;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1556, %r480, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1559, %r477, %r1500, %r1556;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1563, %r480, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r477, %r1509, %r1563;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1651, %r1652}, {%r521, %r527, %r524, %r530}, {%r1447, %r1517}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1659, %r1660}, {%r521, %r527, %r524, %r530}, {%r1456, %r1524}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1667, %r1668}, {%r521, %r527, %r524, %r530}, {%r1465, %r1531}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1675, %r1676}, {%r521, %r527, %r524, %r530}, {%r1474, %r1538}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1683, %r1684}, {%r521, %r527, %r524, %r530}, {%r1483, %r1545}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1691, %r1692}, {%r521, %r527, %r524, %r530}, {%r1492, %r1552}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1699, %r1700}, {%r521, %r527, %r524, %r530}, {%r1501, %r1559}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1707, %r1708}, {%r521, %r527, %r524, %r530}, {%r1510, %r1566}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1650, %r1651, %r1652, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1654, %r1651, %r1652, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1658, %r1659, %r1660, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1662, %r1659, %r1660, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1666, %r1667, %r1668, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1670, %r1667, %r1668, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1674, %r1675, %r1676, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1678, %r1675, %r1676, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1682, %r1683, %r1684, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1686, %r1683, %r1684, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1690, %r1691, %r1692, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1694, %r1691, %r1692, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1698, %r1699, %r1700, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1702, %r1699, %r1700, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1706, %r1707, %r1708, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1710, %r1707, %r1708, %r1018;
	// end inline asm
	st.shared.u32 	[%rd7], %r1650;
	st.shared.u32 	[%rd8], %r1654;
	st.shared.u32 	[%rd9], %r1658;
	st.shared.u32 	[%rd10], %r1662;
	st.shared.u32 	[%rd17], %r1666;
	st.shared.u32 	[%rd18], %r1670;
	st.shared.u32 	[%rd19], %r1674;
	st.shared.u32 	[%rd20], %r1678;
	st.shared.u32 	[%rd21], %r1682;
	st.shared.u32 	[%rd22], %r1686;
	st.shared.u32 	[%rd23], %r1690;
	st.shared.u32 	[%rd24], %r1694;
	st.shared.u32 	[%rd25], %r1698;
	st.shared.u32 	[%rd26], %r1702;
	st.shared.u32 	[%rd27], %r1706;
	st.shared.u32 	[%rd28], %r1710;
	@%p278 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_177;
$L__BB0_250:                            // %pass8550
                                        //   in Loop: Header=BB0_176 Depth=2
	st.shared.u32 	[%rd7], %r1650;
	st.shared.u32 	[%rd8], %r1654;
	st.shared.u32 	[%rd9], %r1658;
	st.shared.u32 	[%rd10], %r1662;
	st.shared.u32 	[%rd17], %r1666;
	st.shared.u32 	[%rd18], %r1670;
	st.shared.u32 	[%rd19], %r1674;
	st.shared.u32 	[%rd20], %r1678;
	st.shared.u32 	[%rd21], %r1682;
	st.shared.u32 	[%rd22], %r1686;
	st.shared.u32 	[%rd23], %r1690;
	st.shared.u32 	[%rd24], %r1694;
	st.shared.u32 	[%rd25], %r1698;
	st.shared.u32 	[%rd26], %r1702;
	st.shared.u32 	[%rd27], %r1706;
	st.shared.u32 	[%rd28], %r1710;
$L__BB0_177:                            // %L22306
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	mov.u32 	%r3763, %r1649;
	mov.u32 	%r3764, %r1649;
	mov.u32 	%r3765, %r1649;
	mov.u32 	%r3766, %r1649;
	@%p278 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %pass10645
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3763, [%rd11];
	ld.shared.u32 	%r3764, [%rd12];
	ld.shared.u32 	%r3765, [%rd13];
	ld.shared.u32 	%r3766, [%rd14];
$L__BB0_178:                            // %L23381
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1774, %r1771}, {%r539, %r542}, {%r3763}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1783, %r1780}, {%r539, %r542}, {%r3764}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1792, %r1789}, {%r539, %r542}, {%r3765}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1801, %r1798}, {%r539, %r542}, {%r3766}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1767, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r1767, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r591, %r1774, %r1769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1776, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1776, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r591, %r1783, %r1778;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1785, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r1785, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r591, %r1792, %r1787;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1794, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r1794, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r591, %r1801, %r1796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r594, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r591, %r1771, %r1803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1810, %r594, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r591, %r1780, %r1810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r594, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r591, %r1789, %r1817;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1824, %r594, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r591, %r1798, %r1824;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1872, %r1875}, {%r635, %r641, %r638, %r644}, {%r1772, %r1806}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1891, %r1894}, {%r635, %r641, %r638, %r644}, {%r1781, %r1813}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1879, %r1883}, {%r635, %r641, %r638, %r644}, {%r1790, %r1820}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1898, %r1902}, {%r635, %r641, %r638, %r644}, {%r1799, %r1827}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r1872, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r1875, %r1875, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r1879, %r1879, %r1874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r1883, %r1883, %r1878;
	// end inline asm
	mov.u32 	%r1906, 425007445;
	// begin inline asm
	fma.rn.f16x2 %r1886, %r1906, %r1882, %r3762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1890, %r1891, %r1891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r1894, %r1894, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1897, %r1898, %r1898, %r1893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r1902, %r1902, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1905, %r1906, %r1901, %r3761;
	// end inline asm
	mov.u32 	%r3767, %r1649;
	mov.u32 	%r3768, %r1649;
	mov.u32 	%r3769, %r1649;
	mov.u32 	%r3770, %r1649;
	@%p278 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_179;
$L__BB0_252:                            // %pass11250
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3767, [%rd29];
	ld.shared.u32 	%r3768, [%rd30];
	ld.shared.u32 	%r3769, [%rd31];
	ld.shared.u32 	%r3770, [%rd32];
$L__BB0_179:                            // %L24600
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1945, %r1942}, {%r539, %r542}, {%r3767}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1954, %r1951}, {%r539, %r542}, {%r3768}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1963, %r1960}, {%r539, %r542}, {%r3769}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1972, %r1969}, {%r539, %r542}, {%r3770}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1938, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1940, %r1938, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r591, %r1945, %r1940;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1947, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r1947, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r591, %r1954, %r1949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1956, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1958, %r1956, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r591, %r1963, %r1958;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1965, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r1965, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r591, %r1972, %r1967;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r594, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r591, %r1942, %r1974;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1981, %r594, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r591, %r1951, %r1981;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r594, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r591, %r1960, %r1988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r594, %r1972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r591, %r1969, %r1995;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2043, %r2046}, {%r635, %r641, %r638, %r644}, {%r1943, %r1977}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2062, %r2065}, {%r635, %r641, %r638, %r644}, {%r1952, %r1984}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2050, %r2054}, {%r635, %r641, %r638, %r644}, {%r1961, %r1991}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2069, %r2073}, {%r635, %r641, %r638, %r644}, {%r1970, %r1998}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r2043, %r2043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r2046, %r2046, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r2050, %r2050, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r2054, %r2054, %r2049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r1906, %r2053, %r1886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2061, %r2062, %r2062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r2065, %r2065, %r2061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2068, %r2069, %r2069, %r2064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r2073, %r2073, %r2068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r1906, %r2072, %r1905;
	// end inline asm
	mov.u32 	%r3771, %r1649;
	mov.u32 	%r3772, %r1649;
	mov.u32 	%r3773, %r1649;
	mov.u32 	%r3774, %r1649;
	@%p278 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_180;
$L__BB0_253:                            // %pass11855
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3771, [%rd33];
	ld.shared.u32 	%r3772, [%rd34];
	ld.shared.u32 	%r3773, [%rd35];
	ld.shared.u32 	%r3774, [%rd36];
$L__BB0_180:                            // %L25819
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2116, %r2113}, {%r539, %r542}, {%r3771}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2125, %r2122}, {%r539, %r542}, {%r3772}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2134, %r2131}, {%r539, %r542}, {%r3773}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2143, %r2140}, {%r539, %r542}, {%r3774}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2109, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2111, %r2109, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2114, %r591, %r2116, %r2111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2118, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r2118, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r591, %r2125, %r2120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2127, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r2127, %r2131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2132, %r591, %r2134, %r2129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2136, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r2136, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2141, %r591, %r2143, %r2138;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r594, %r2116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r591, %r2113, %r2145;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2152, %r594, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r591, %r2122, %r2152;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r594, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r591, %r2131, %r2159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2166, %r594, %r2143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2169, %r591, %r2140, %r2166;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2214, %r2217}, {%r635, %r641, %r638, %r644}, {%r2114, %r2148}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2233, %r2236}, {%r635, %r641, %r638, %r644}, {%r2123, %r2155}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2221, %r2225}, {%r635, %r641, %r638, %r644}, {%r2132, %r2162}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2240, %r2244}, {%r635, %r641, %r638, %r644}, {%r2141, %r2169}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r2214, %r2214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r2217, %r2217, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r2221, %r2221, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r2225, %r2225, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2228, %r1906, %r2224, %r2057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2232, %r2233, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2235, %r2236, %r2236, %r2232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r2240, %r2240, %r2235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r2244, %r2244, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r1906, %r2243, %r2076;
	// end inline asm
	mov.u32 	%r3775, %r1649;
	mov.u32 	%r3776, %r1649;
	mov.u32 	%r3777, %r1649;
	mov.u32 	%r3778, %r1649;
	@%p278 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_181;
$L__BB0_254:                            // %pass12460
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3775, [%rd37];
	ld.shared.u32 	%r3776, [%rd38];
	ld.shared.u32 	%r3777, [%rd39];
	ld.shared.u32 	%r3778, [%rd40];
$L__BB0_181:                            // %L27038
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2287, %r2284}, {%r539, %r542}, {%r3775}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2296, %r2293}, {%r539, %r542}, {%r3776}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2305, %r2302}, {%r539, %r542}, {%r3777}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2314, %r2311}, {%r539, %r542}, {%r3778}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2280, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r2280, %r2284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r591, %r2287, %r2282;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2289, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2291, %r2289, %r2293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2294, %r591, %r2296, %r2291;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2298, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2300, %r2298, %r2302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2303, %r591, %r2305, %r2300;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2307, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2309, %r2307, %r2311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2312, %r591, %r2314, %r2309;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2316, %r594, %r2287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2319, %r591, %r2284, %r2316;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2323, %r594, %r2296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2326, %r591, %r2293, %r2323;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2330, %r594, %r2305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2333, %r591, %r2302, %r2330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2337, %r594, %r2314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2340, %r591, %r2311, %r2337;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2385, %r2388}, {%r635, %r641, %r638, %r644}, {%r2285, %r2319}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2404, %r2407}, {%r635, %r641, %r638, %r644}, {%r2294, %r2326}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2392, %r2396}, {%r635, %r641, %r638, %r644}, {%r2303, %r2333}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2411, %r2415}, {%r635, %r641, %r638, %r644}, {%r2312, %r2340}, {%r1649, %r1649};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2384, %r2385, %r2385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2387, %r2388, %r2388, %r2384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2391, %r2392, %r2392, %r2387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2395, %r2396, %r2396, %r2391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3762, %r1906, %r2395, %r2228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2403, %r2404, %r2404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2406, %r2407, %r2407, %r2403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2410, %r2411, %r2411, %r2406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2414, %r2415, %r2415, %r2410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r1906, %r2414, %r2247;
	// end inline asm
	add.s32 	%r3759, %r3759, 4;
	setp.eq.s32 	%p289, %r3759, 48;
	@%p289 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_184;
$L__BB0_182:                            // %pass12918
                                        //   in Loop: Header=BB0_176 Depth=2
	@%p92 bra 	$L__BB0_183;
// %bb.255:                             // %pass12954
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2422, %r3760, 589824;
	add.s32 	%r2423, %r119, %r2422;
	cvt.s64.s32 	%rd270, %r2423;
	add.s64 	%rd271, %rd270, %rd15;
	mul.hi.s64 	%rd272, %rd271, 1024819115206086201;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 25;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p291, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 603979776;
	setp.ne.s64 	%p292, %rd276, %rd271;
	and.pred  	%p293, %p291, %p292;
	selp.s64 	%rd277, -1, 0, %p293;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -603979776;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3762;
	add.s32 	%r2424, %r120, %r2422;
	cvt.s64.s32 	%rd283, %r2424;
	add.s64 	%rd284, %rd283, %rd15;
	mul.hi.s64 	%rd285, %rd284, 1024819115206086201;
	shr.u64 	%rd286, %rd285, 63;
	shr.s64 	%rd287, %rd285, 25;
	add.s64 	%rd288, %rd287, %rd286;
	setp.lt.s64 	%p294, %rd284, 0;
	mul.lo.s64 	%rd289, %rd288, 603979776;
	setp.ne.s64 	%p295, %rd289, %rd284;
	and.pred  	%p296, %p294, %p295;
	selp.s64 	%rd290, -1, 0, %p296;
	add.s64 	%rd291, %rd288, %rd290;
	mul.lo.s64 	%rd292, %rd291, -603979776;
	add.s64 	%rd293, %rd292, %rd284;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3761;
	bra.uni 	$L__BB0_183;
$L__BB0_185:                            // %L27596.preheader
                                        //   in Loop: Header=BB0_149 Depth=1
	mov.u32 	%r3783, 12;
	bra.uni 	$L__BB0_186;
$L__BB0_193:                            // %L41234
                                        //   in Loop: Header=BB0_186 Depth=2
	add.s32 	%r3760, %r3760, 1;
	mov.u32 	%r3759, 0;
	mov.u32 	%r3761, %r3759;
	mov.u32 	%r3762, %r3759;
$L__BB0_194:                            // %L41235
                                        //   in Loop: Header=BB0_186 Depth=2
	bar.sync 	0;
	add.s32 	%r3783, %r3783, -4;
	setp.ne.s32 	%p317, %r3783, -12;
	@%p317 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_195;
$L__BB0_186:                            // %L27596
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p299, %r3783, 12;
	selp.b32 	%r2963, %r3734, 0, %p299;
	setp.eq.s32 	%p300, %r3783, 8;
	selp.b32 	%r2964, %r3738, %r2963, %p300;
	setp.eq.s32 	%p301, %r3783, 4;
	selp.b32 	%r2965, %r3742, %r2964, %p301;
	setp.eq.s32 	%p302, %r3783, 0;
	selp.b32 	%r2966, %r3746, %r2965, %p302;
	setp.eq.s32 	%p303, %r3783, -4;
	selp.b32 	%r2967, %r3750, %r2966, %p303;
	setp.eq.s32 	%p304, %r3783, -8;
	selp.b32 	%r2968, %r3754, %r2967, %p304;
	selp.b32 	%r2969, %r3735, 0, %p299;
	selp.b32 	%r2970, %r3739, %r2969, %p300;
	selp.b32 	%r2971, %r3743, %r2970, %p301;
	selp.b32 	%r2972, %r3747, %r2971, %p302;
	selp.b32 	%r2973, %r3751, %r2972, %p303;
	selp.b32 	%r2974, %r3755, %r2973, %p304;
	selp.b32 	%r2975, %r3736, 0, %p299;
	selp.b32 	%r2976, %r3740, %r2975, %p300;
	selp.b32 	%r2977, %r3744, %r2976, %p301;
	selp.b32 	%r2978, %r3748, %r2977, %p302;
	selp.b32 	%r2979, %r3752, %r2978, %p303;
	selp.b32 	%r2980, %r3756, %r2979, %p304;
	selp.b32 	%r2981, %r3737, 0, %p299;
	selp.b32 	%r2982, %r3741, %r2981, %p300;
	selp.b32 	%r2983, %r3745, %r2982, %p301;
	selp.b32 	%r2984, %r3749, %r2983, %p302;
	selp.b32 	%r2985, %r3753, %r2984, %p303;
	selp.b32 	%r2986, %r3757, %r2985, %p304;
	// begin inline asm
	mov.b32 %r2454, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2465, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2987, %r2968, 8;
	xor.b32  	%r2464, %r2987, 8947848;
	// begin inline asm
	lop3.b32 %r2451, %r1319, %r2464, %r2454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2455, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2456, %r2454, %r2455;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2459, %r2451, %r2456;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2462, %r1330, %r2464, %r2465, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2466, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2467, %r2465, %r2466;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2470, %r2462, %r2467;
	// end inline asm
	// begin inline asm
	mov.b32 %r2500, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2511, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2988, %r2974, 8;
	xor.b32  	%r2510, %r2988, 8947848;
	// begin inline asm
	lop3.b32 %r2497, %r1319, %r2510, %r2500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2501, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2502, %r2500, %r2501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2505, %r2497, %r2502;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2508, %r1330, %r2510, %r2511, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2512, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2513, %r2511, %r2512;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2516, %r2508, %r2513;
	// end inline asm
	// begin inline asm
	mov.b32 %r2546, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2557, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2989, %r2980, 8;
	xor.b32  	%r2556, %r2989, 8947848;
	// begin inline asm
	lop3.b32 %r2543, %r1319, %r2556, %r2546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2547, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2548, %r2546, %r2547;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2551, %r2543, %r2548;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2554, %r1330, %r2556, %r2557, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2558, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2559, %r2557, %r2558;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2562, %r2554, %r2559;
	// end inline asm
	// begin inline asm
	mov.b32 %r2592, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2603, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2990, %r2986, 8;
	xor.b32  	%r2602, %r2990, 8947848;
	// begin inline asm
	lop3.b32 %r2589, %r1319, %r2602, %r2592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2593, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2594, %r2592, %r2593;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2597, %r2589, %r2594;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2600, %r1330, %r2602, %r2603, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2604, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2605, %r2603, %r2604;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2608, %r2600, %r2605;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2459;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2611, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2470;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2614, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2505;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2617, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2516;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2620, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2551;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2623, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2562;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2626, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2597;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2629, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2608;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2632, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2898, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2698, %r2695}, {%r425, %r428}, {%r2611}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2707, %r2704}, {%r425, %r428}, {%r2614}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2716, %r2713}, {%r425, %r428}, {%r2617}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2725, %r2722}, {%r425, %r428}, {%r2620}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2734, %r2731}, {%r425, %r428}, {%r2623}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2743, %r2740}, {%r425, %r428}, {%r2626}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2752, %r2749}, {%r425, %r428}, {%r2629}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2761, %r2758}, {%r425, %r428}, {%r2632}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2691, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2693, %r2691, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2696, %r477, %r2698, %r2693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r477, %r2707, %r2702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2709, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2709, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r477, %r2716, %r2711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2718, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r2718, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r477, %r2725, %r2720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2727, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r2727, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r477, %r2734, %r2729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2736, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2738, %r2736, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r477, %r2743, %r2738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2745, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2747, %r2745, %r2749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2750, %r477, %r2752, %r2747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2754, %r480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r2754, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r477, %r2761, %r2756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2763, %r480, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r477, %r2695, %r2763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2770, %r480, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2773, %r477, %r2704, %r2770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2777, %r480, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2780, %r477, %r2713, %r2777;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2784, %r480, %r2725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2787, %r477, %r2722, %r2784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2791, %r480, %r2734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2794, %r477, %r2731, %r2791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2798, %r480, %r2743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r477, %r2740, %r2798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2805, %r480, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r477, %r2749, %r2805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2812, %r480, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r477, %r2758, %r2812;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2900, %r2901}, {%r521, %r527, %r524, %r530}, {%r2696, %r2766}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2908, %r2909}, {%r521, %r527, %r524, %r530}, {%r2705, %r2773}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2916, %r2917}, {%r521, %r527, %r524, %r530}, {%r2714, %r2780}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2924, %r2925}, {%r521, %r527, %r524, %r530}, {%r2723, %r2787}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2932, %r2933}, {%r521, %r527, %r524, %r530}, {%r2732, %r2794}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2940, %r2941}, {%r521, %r527, %r524, %r530}, {%r2741, %r2801}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2948, %r2949}, {%r521, %r527, %r524, %r530}, {%r2750, %r2808}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2956, %r2957}, {%r521, %r527, %r524, %r530}, {%r2759, %r2815}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2899, %r2900, %r2901, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2903, %r2900, %r2901, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2907, %r2908, %r2909, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2911, %r2908, %r2909, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2915, %r2916, %r2917, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2919, %r2916, %r2917, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2923, %r2924, %r2925, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2927, %r2924, %r2925, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2931, %r2932, %r2933, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2935, %r2932, %r2933, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2939, %r2940, %r2941, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2943, %r2940, %r2941, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2947, %r2948, %r2949, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2951, %r2948, %r2949, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2955, %r2956, %r2957, %r1014;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2959, %r2956, %r2957, %r1018;
	// end inline asm
	st.shared.u32 	[%rd7], %r2899;
	st.shared.u32 	[%rd8], %r2903;
	st.shared.u32 	[%rd9], %r2907;
	st.shared.u32 	[%rd10], %r2911;
	st.shared.u32 	[%rd17], %r2915;
	st.shared.u32 	[%rd18], %r2919;
	st.shared.u32 	[%rd19], %r2923;
	st.shared.u32 	[%rd20], %r2927;
	st.shared.u32 	[%rd21], %r2931;
	st.shared.u32 	[%rd22], %r2935;
	st.shared.u32 	[%rd23], %r2939;
	st.shared.u32 	[%rd24], %r2943;
	st.shared.u32 	[%rd25], %r2947;
	st.shared.u32 	[%rd26], %r2951;
	st.shared.u32 	[%rd27], %r2955;
	st.shared.u32 	[%rd28], %r2959;
	@%p278 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_187;
$L__BB0_256:                            // %pass15346
                                        //   in Loop: Header=BB0_186 Depth=2
	st.shared.u32 	[%rd7], %r2899;
	st.shared.u32 	[%rd8], %r2903;
	st.shared.u32 	[%rd9], %r2907;
	st.shared.u32 	[%rd10], %r2911;
	st.shared.u32 	[%rd17], %r2915;
	st.shared.u32 	[%rd18], %r2919;
	st.shared.u32 	[%rd19], %r2923;
	st.shared.u32 	[%rd20], %r2927;
	st.shared.u32 	[%rd21], %r2931;
	st.shared.u32 	[%rd22], %r2935;
	st.shared.u32 	[%rd23], %r2939;
	st.shared.u32 	[%rd24], %r2943;
	st.shared.u32 	[%rd25], %r2947;
	st.shared.u32 	[%rd26], %r2951;
	st.shared.u32 	[%rd27], %r2955;
	st.shared.u32 	[%rd28], %r2959;
$L__BB0_187:                            // %L35970
                                        //   in Loop: Header=BB0_186 Depth=2
	bar.sync 	0;
	mov.u32 	%r3788, %r2898;
	mov.u32 	%r3789, %r2898;
	mov.u32 	%r3790, %r2898;
	mov.u32 	%r3791, %r2898;
	@%p278 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_188;
$L__BB0_257:                            // %pass17441
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3791, [%rd11];
	ld.shared.u32 	%r3790, [%rd12];
	ld.shared.u32 	%r3789, [%rd13];
	ld.shared.u32 	%r3788, [%rd14];
$L__BB0_188:                            // %L37045
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3027, %r3024}, {%r539, %r542}, {%r3791}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3036, %r3033}, {%r539, %r542}, {%r3790}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3045, %r3042}, {%r539, %r542}, {%r3789}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3054, %r3051}, {%r539, %r542}, {%r3788}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3020, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3022, %r3020, %r3024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3025, %r591, %r3027, %r3022;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3029, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3031, %r3029, %r3033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r591, %r3036, %r3031;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3038, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3040, %r3038, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3043, %r591, %r3045, %r3040;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3047, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3049, %r3047, %r3051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r591, %r3054, %r3049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r594, %r3027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r591, %r3024, %r3056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3063, %r594, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r591, %r3033, %r3063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3070, %r594, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r591, %r3042, %r3070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3077, %r594, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r591, %r3051, %r3077;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3125, %r3128}, {%r635, %r641, %r638, %r644}, {%r3025, %r3059}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3144, %r3147}, {%r635, %r641, %r638, %r644}, {%r3034, %r3066}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3132, %r3136}, {%r635, %r641, %r638, %r644}, {%r3043, %r3073}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3151, %r3155}, {%r635, %r641, %r638, %r644}, {%r3052, %r3080}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r3125, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r3128, %r3128, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r3132, %r3132, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r3136, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r1906, %r3135, %r3762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3143, %r3144, %r3144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r3147, %r3147, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3150, %r3151, %r3151, %r3146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r3155, %r3155, %r3150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r1906, %r3154, %r3761;
	// end inline asm
	mov.u32 	%r3792, %r2898;
	mov.u32 	%r3793, %r2898;
	mov.u32 	%r3794, %r2898;
	mov.u32 	%r3795, %r2898;
	@%p278 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_189;
$L__BB0_258:                            // %pass18046
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3795, [%rd29];
	ld.shared.u32 	%r3794, [%rd30];
	ld.shared.u32 	%r3793, [%rd31];
	ld.shared.u32 	%r3792, [%rd32];
$L__BB0_189:                            // %L38264
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3198, %r3195}, {%r539, %r542}, {%r3795}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3207, %r3204}, {%r539, %r542}, {%r3794}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3216, %r3213}, {%r539, %r542}, {%r3793}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3225, %r3222}, {%r539, %r542}, {%r3792}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3191, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3193, %r3191, %r3195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3196, %r591, %r3198, %r3193;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3200, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3202, %r3200, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3205, %r591, %r3207, %r3202;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3209, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3211, %r3209, %r3213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r591, %r3216, %r3211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3218, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3220, %r3218, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r591, %r3225, %r3220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3227, %r594, %r3198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r591, %r3195, %r3227;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3234, %r594, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r591, %r3204, %r3234;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3241, %r594, %r3216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3244, %r591, %r3213, %r3241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3248, %r594, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r591, %r3222, %r3248;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3296, %r3299}, {%r635, %r641, %r638, %r644}, {%r3196, %r3230}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3315, %r3318}, {%r635, %r641, %r638, %r644}, {%r3205, %r3237}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3303, %r3307}, {%r635, %r641, %r638, %r644}, {%r3214, %r3244}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3322, %r3326}, {%r635, %r641, %r638, %r644}, {%r3223, %r3251}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3295, %r3296, %r3296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r3299, %r3299, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3302, %r3303, %r3303, %r3298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3306, %r3307, %r3307, %r3302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r1906, %r3306, %r3139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3314, %r3315, %r3315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3317, %r3318, %r3318, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3321, %r3322, %r3322, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r3326, %r3326, %r3321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3329, %r1906, %r3325, %r3158;
	// end inline asm
	mov.u32 	%r3796, %r2898;
	mov.u32 	%r3797, %r2898;
	mov.u32 	%r3798, %r2898;
	mov.u32 	%r3799, %r2898;
	@%p278 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_190;
$L__BB0_259:                            // %pass18651
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3799, [%rd33];
	ld.shared.u32 	%r3798, [%rd34];
	ld.shared.u32 	%r3797, [%rd35];
	ld.shared.u32 	%r3796, [%rd36];
$L__BB0_190:                            // %L39483
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3369, %r3366}, {%r539, %r542}, {%r3799}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3378, %r3375}, {%r539, %r542}, {%r3798}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3387, %r3384}, {%r539, %r542}, {%r3797}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3396, %r3393}, {%r539, %r542}, {%r3796}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3362, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3364, %r3362, %r3366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3367, %r591, %r3369, %r3364;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3371, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3373, %r3371, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3376, %r591, %r3378, %r3373;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3380, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3382, %r3380, %r3384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3385, %r591, %r3387, %r3382;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3389, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3391, %r3389, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3394, %r591, %r3396, %r3391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3398, %r594, %r3369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3401, %r591, %r3366, %r3398;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3405, %r594, %r3378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3408, %r591, %r3375, %r3405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3412, %r594, %r3387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3415, %r591, %r3384, %r3412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3419, %r594, %r3396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3422, %r591, %r3393, %r3419;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3467, %r3470}, {%r635, %r641, %r638, %r644}, {%r3367, %r3401}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3486, %r3489}, {%r635, %r641, %r638, %r644}, {%r3376, %r3408}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3474, %r3478}, {%r635, %r641, %r638, %r644}, {%r3385, %r3415}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3493, %r3497}, {%r635, %r641, %r638, %r644}, {%r3394, %r3422}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3466, %r3467, %r3467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r3470, %r3470, %r3466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3473, %r3474, %r3474, %r3469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r3478, %r3478, %r3473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3481, %r1906, %r3477, %r3310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3485, %r3486, %r3486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r3489, %r3489, %r3485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3492, %r3493, %r3493, %r3488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r3497, %r3497, %r3492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r1906, %r3496, %r3329;
	// end inline asm
	mov.u32 	%r3800, %r2898;
	mov.u32 	%r3801, %r2898;
	mov.u32 	%r3802, %r2898;
	mov.u32 	%r3803, %r2898;
	@%p278 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_191;
$L__BB0_260:                            // %pass19256
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3803, [%rd37];
	ld.shared.u32 	%r3802, [%rd38];
	ld.shared.u32 	%r3801, [%rd39];
	ld.shared.u32 	%r3800, [%rd40];
$L__BB0_191:                            // %L40702
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3540, %r3537}, {%r539, %r542}, {%r3803}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3549, %r3546}, {%r539, %r542}, {%r3802}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3558, %r3555}, {%r539, %r542}, {%r3801}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3567, %r3564}, {%r539, %r542}, {%r3800}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3533, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3535, %r3533, %r3537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3538, %r591, %r3540, %r3535;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3542, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3544, %r3542, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3547, %r591, %r3549, %r3544;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3551, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3553, %r3551, %r3555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3556, %r591, %r3558, %r3553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3560, %r594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3562, %r3560, %r3564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3565, %r591, %r3567, %r3562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3569, %r594, %r3540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3572, %r591, %r3537, %r3569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3576, %r594, %r3549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3579, %r591, %r3546, %r3576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3583, %r594, %r3558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3586, %r591, %r3555, %r3583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3590, %r594, %r3567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r591, %r3564, %r3590;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3638, %r3641}, {%r635, %r641, %r638, %r644}, {%r3538, %r3572}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3657, %r3660}, {%r635, %r641, %r638, %r644}, {%r3547, %r3579}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3645, %r3649}, {%r635, %r641, %r638, %r644}, {%r3556, %r3586}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3664, %r3668}, {%r635, %r641, %r638, %r644}, {%r3565, %r3593}, {%r2898, %r2898};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3637, %r3638, %r3638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3640, %r3641, %r3641, %r3637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3644, %r3645, %r3645, %r3640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3648, %r3649, %r3649, %r3644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3762, %r1906, %r3648, %r3481;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3656, %r3657, %r3657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3659, %r3660, %r3660, %r3656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3663, %r3664, %r3664, %r3659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3667, %r3668, %r3668, %r3663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r1906, %r3667, %r3500;
	// end inline asm
	add.s32 	%r3759, %r3759, 4;
	setp.eq.s32 	%p309, %r3759, 48;
	@%p309 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_194;
$L__BB0_192:                            // %pass19714
                                        //   in Loop: Header=BB0_186 Depth=2
	@%p92 bra 	$L__BB0_193;
// %bb.261:                             // %pass19750
                                        //   in Loop: Header=BB0_186 Depth=2
	mul.lo.s32 	%r3675, %r3760, 589824;
	add.s32 	%r3676, %r119, %r3675;
	cvt.s64.s32 	%rd296, %r3676;
	add.s64 	%rd297, %rd296, %rd15;
	mul.hi.s64 	%rd298, %rd297, 1024819115206086201;
	shr.u64 	%rd299, %rd298, 63;
	shr.s64 	%rd300, %rd298, 25;
	add.s64 	%rd301, %rd300, %rd299;
	setp.lt.s64 	%p311, %rd297, 0;
	mul.lo.s64 	%rd302, %rd301, 603979776;
	setp.ne.s64 	%p312, %rd302, %rd297;
	and.pred  	%p313, %p311, %p312;
	selp.s64 	%rd303, -1, 0, %p313;
	add.s64 	%rd304, %rd301, %rd303;
	mul.lo.s64 	%rd305, %rd304, -603979776;
	add.s64 	%rd306, %rd305, %rd297;
	shl.b64 	%rd307, %rd306, 2;
	add.s64 	%rd308, %rd4, %rd307;
	st.global.u32 	[%rd308], %r3762;
	add.s32 	%r3677, %r120, %r3675;
	cvt.s64.s32 	%rd309, %r3677;
	add.s64 	%rd310, %rd309, %rd15;
	mul.hi.s64 	%rd311, %rd310, 1024819115206086201;
	shr.u64 	%rd312, %rd311, 63;
	shr.s64 	%rd313, %rd311, 25;
	add.s64 	%rd314, %rd313, %rd312;
	setp.lt.s64 	%p314, %rd310, 0;
	mul.lo.s64 	%rd315, %rd314, 603979776;
	setp.ne.s64 	%p315, %rd315, %rd310;
	and.pred  	%p316, %p314, %p315;
	selp.s64 	%rd316, -1, 0, %p316;
	add.s64 	%rd317, %rd314, %rd316;
	mul.lo.s64 	%rd318, %rd317, -603979776;
	add.s64 	%rd319, %rd318, %rd310;
	shl.b64 	%rd320, %rd319, 2;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r3761;
	bra.uni 	$L__BB0_193;
$L__BB0_196:                            // %L41270
	mov.u32 	%r3679, 0;
	st.global.u32 	[%rd6], %r3679;
	ret;
$L__BB0_151:                            // %L7443
	mov.u32 	%r3703, 5;
	st.global.u32 	[%rd6], %r3703;
	mov.u64 	%rd368, exception3856;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7599
	mov.u32 	%r3702, 5;
	st.global.u32 	[%rd6], %r3702;
	mov.u64 	%rd366, exception3856;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7755
	mov.u32 	%r3701, 5;
	st.global.u32 	[%rd6], %r3701;
	mov.u64 	%rd364, exception3856;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7911
	mov.u32 	%r3700, 5;
	st.global.u32 	[%rd6], %r3700;
	mov.u64 	%rd362, exception3856;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8067
	mov.u32 	%r3699, 5;
	st.global.u32 	[%rd6], %r3699;
	mov.u64 	%rd360, exception3856;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8223
	mov.u32 	%r3698, 5;
	st.global.u32 	[%rd6], %r3698;
	mov.u64 	%rd358, exception3856;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8379
	mov.u32 	%r3697, 5;
	st.global.u32 	[%rd6], %r3697;
	mov.u64 	%rd356, exception3856;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8535
	mov.u32 	%r3696, 5;
	st.global.u32 	[%rd6], %r3696;
	mov.u64 	%rd354, exception3856;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8691
	mov.u32 	%r3695, 5;
	st.global.u32 	[%rd6], %r3695;
	mov.u64 	%rd352, exception3856;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8847
	mov.u32 	%r3694, 5;
	st.global.u32 	[%rd6], %r3694;
	mov.u64 	%rd350, exception3856;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L9003
	mov.u32 	%r3693, 5;
	st.global.u32 	[%rd6], %r3693;
	mov.u64 	%rd348, exception3856;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9159
	mov.u32 	%r3692, 5;
	st.global.u32 	[%rd6], %r3692;
	mov.u64 	%rd346, exception3856;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9315
	mov.u32 	%r3691, 5;
	st.global.u32 	[%rd6], %r3691;
	mov.u64 	%rd344, exception3856;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9471
	mov.u32 	%r3690, 5;
	st.global.u32 	[%rd6], %r3690;
	mov.u64 	%rd342, exception3856;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9627
	mov.u32 	%r3689, 5;
	st.global.u32 	[%rd6], %r3689;
	mov.u64 	%rd340, exception3856;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9783
	mov.u32 	%r3688, 5;
	st.global.u32 	[%rd6], %r3688;
	mov.u64 	%rd338, exception3856;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9939
	mov.u32 	%r3687, 5;
	st.global.u32 	[%rd6], %r3687;
	mov.u64 	%rd336, exception3856;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10095
	mov.u32 	%r3686, 5;
	st.global.u32 	[%rd6], %r3686;
	mov.u64 	%rd334, exception3856;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10251
	mov.u32 	%r3685, 5;
	st.global.u32 	[%rd6], %r3685;
	mov.u64 	%rd332, exception3856;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10407
	mov.u32 	%r3684, 5;
	st.global.u32 	[%rd6], %r3684;
	mov.u64 	%rd330, exception3856;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10563
	mov.u32 	%r3683, 5;
	st.global.u32 	[%rd6], %r3683;
	mov.u64 	%rd328, exception3856;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10745
	mov.u32 	%r3682, 5;
	st.global.u32 	[%rd6], %r3682;
	mov.u64 	%rd326, exception3856;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10901
	mov.u32 	%r3681, 5;
	st.global.u32 	[%rd6], %r3681;
	mov.u64 	%rd324, exception3856;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11057
	mov.u32 	%r3680, 5;
	st.global.u32 	[%rd6], %r3680;
	mov.u64 	%rd322, exception3856;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3704, 3;
	st.global.u32 	[%rd6], %r3704;
	mov.u64 	%rd370, exception3856;
	cvta.global.u64 	%rd371, %rd370;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd371;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3705, 2;
	st.global.u32 	[%rd6], %r3705;
	mov.u64 	%rd372, exception3856;
	cvta.global.u64 	%rd373, %rd372;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd373;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd47, exception13868;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1143
	add.u64 	%rd46, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r3};
	st.local.v2.u32 	[%rd5+8], {%r2, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd52, __unnamed_1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r655, [retval0+0];
	} // callseq 61
	mov.u32 	%r657, 4;
	st.global.u32 	[%rd6], %r657;
	mov.u64 	%rd55, exception3856;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r391;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
