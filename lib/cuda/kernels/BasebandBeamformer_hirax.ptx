// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception632[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<14>;
	.reg .b32 	%r<830>;
	.reg .b64 	%rd<87>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r60, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd14, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r61, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r61, 8319;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r62, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r62, 13439;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 7;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r63, %r2, %r3;
	or.b32  	%r64, %r63, %r5;
	mul.wide.u32 	%rd23, %r64, 4;
	add.s64 	%rd5, %rd4, %rd23;
	mov.u32 	%r65, 1;
	st.global.u32 	[%rd5], %r65;
	shl.b32 	%r6, %r4, 2;
	shr.u32 	%r7, %r3, 3;
	or.b32  	%r8, %r6, %r7;
	and.b32  	%r66, %r1, 2032;
	or.b32  	%r67, %r8, %r66;
	mul.wide.u32 	%rd24, %r67, 4;
	add.s64 	%rd25, %rd3, %rd24;
	ld.global.u32 	%r9, [%rd25];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:                              // %pass157
	ld.param.u64 	%rd15, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	add.s32 	%r198, %r9, -3;
	shl.b32 	%r199, %r3, 6;
	and.b32  	%r200, %r199, 64;
	shl.b32 	%r28, %r3, 3;
	and.b32  	%r201, %r28, 48;
	or.b32  	%r202, %r200, %r201;
	shl.b32 	%r203, %r4, 8;
	and.b32  	%r204, %r203, 256;
	or.b32  	%r205, %r204, %r202;
	shl.b32 	%r206, %r1, 9;
	and.b32  	%r207, %r206, 8192;
	and.b32  	%r208, %r6, 8;
	shr.u32 	%r29, %r3, 2;
	and.b32  	%r209, %r29, 6;
	or.b32  	%r210, %r208, %r209;
	shl.b32 	%r211, %r210, 9;
	and.b32  	%r212, %r206, 1032192;
	or.b32  	%r213, %r207, %r205;
	or.b32  	%r214, %r213, %r211;
	or.b32  	%r215, %r214, %r212;
	cvt.u64.u32 	%rd28, %r215;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r70, %r71, %r78, %r79}, [%rd29];
	shl.b32 	%r216, %r3, 4;
	and.b32  	%r217, %r216, 16;
	shl.b32 	%r30, %r3, 1;
	and.b32  	%r218, %r30, 12;
	or.b32  	%r219, %r217, %r218;
	shl.b32 	%r220, %r4, 6;
	and.b32  	%r221, %r220, 64;
	or.b32  	%r222, %r221, %r219;
	and.b32  	%r223, %r2, 2048;
	shl.b32 	%r224, %r210, 7;
	and.b32  	%r225, %r2, 258048;
	or.b32  	%r226, %r223, %r222;
	or.b32  	%r227, %r226, %r224;
	or.b32  	%r228, %r227, %r225;
	or.b32  	%r229, %r228, 32;
	mul.wide.u32 	%rd30, %r229, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r86, %r87, %r94, %r95}, [%rd31];
	or.b32  	%r230, %r219, %r220;
	or.b32  	%r231, %r208, %r29;
	shl.b32 	%r232, %r231, 7;
	and.b32  	%r233, %r2, 260096;
	or.b32  	%r234, %r233, %r230;
	or.b32  	%r235, %r234, %r232;
	shl.b32 	%r236, %r235, 2;
	or.b32  	%r237, %r236, 512;
	cvt.u64.u32 	%rd32, %r237;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r102, %r103, %r110, %r111}, [%rd33];
	or.b32  	%r238, %r230, %r223;
	or.b32  	%r239, %r238, %r225;
	or.b32  	%r240, %r239, %r232;
	or.b32  	%r241, %r240, 160;
	add.s32 	%r242, %r241, 1;
	mul.wide.u32 	%rd34, %r242, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r118, %r119, %r126, %r127}, [%rd35+-4];
	mov.u32 	%r128, 21520;
	// begin inline asm
	prmt.b32 %r134, %r70, %r71, %r128;
	// end inline asm
	mov.u32 	%r132, 30258;
	// begin inline asm
	prmt.b32 %r135, %r70, %r71, %r132;
	// end inline asm
	// begin inline asm
	prmt.b32 %r142, %r78, %r79, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r143, %r78, %r79, %r132;
	// end inline asm
	// begin inline asm
	prmt.b32 %r150, %r86, %r87, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r151, %r86, %r87, %r132;
	// end inline asm
	// begin inline asm
	prmt.b32 %r158, %r94, %r95, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r159, %r94, %r95, %r132;
	// end inline asm
	// begin inline asm
	prmt.b32 %r166, %r102, %r103, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r167, %r102, %r103, %r132;
	// end inline asm
	// begin inline asm
	prmt.b32 %r174, %r110, %r111, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r175, %r110, %r111, %r132;
	// end inline asm
	// begin inline asm
	prmt.b32 %r182, %r118, %r119, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r183, %r118, %r119, %r132;
	// end inline asm
	// begin inline asm
	prmt.b32 %r190, %r126, %r127, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r191, %r126, %r127, %r132;
	// end inline asm
	mov.u32 	%r192, 25152;
	// begin inline asm
	prmt.b32 %r133, %r134, %r135, %r192;
	// end inline asm
	mov.u32 	%r196, 29521;
	// begin inline asm
	prmt.b32 %r137, %r134, %r135, %r196;
	// end inline asm
	// begin inline asm
	prmt.b32 %r141, %r142, %r143, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r145, %r142, %r143, %r196;
	// end inline asm
	// begin inline asm
	prmt.b32 %r149, %r150, %r151, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r153, %r150, %r151, %r196;
	// end inline asm
	// begin inline asm
	prmt.b32 %r157, %r158, %r159, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r161, %r158, %r159, %r196;
	// end inline asm
	// begin inline asm
	prmt.b32 %r165, %r166, %r167, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r169, %r166, %r167, %r196;
	// end inline asm
	// begin inline asm
	prmt.b32 %r173, %r174, %r175, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r177, %r174, %r175, %r196;
	// end inline asm
	// begin inline asm
	prmt.b32 %r181, %r182, %r183, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r185, %r182, %r183, %r196;
	// end inline asm
	// begin inline asm
	prmt.b32 %r189, %r190, %r191, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r193, %r190, %r191, %r196;
	// end inline asm
	and.b32  	%r31, %r3, 2;
	setp.eq.s32 	%p4, %r31, 0;
	selp.b32 	%r243, %r149, %r133, %p4;
	shfl.sync.bfly.b32	%r244, %r243, 2, 31, -1;
	selp.b32 	%r245, %r133, %r244, %p4;
	selp.b32 	%r246, %r244, %r149, %p4;
	selp.b32 	%r247, %r153, %r137, %p4;
	shfl.sync.bfly.b32	%r248, %r247, 2, 31, -1;
	selp.b32 	%r249, %r137, %r248, %p4;
	selp.b32 	%r250, %r248, %r153, %p4;
	selp.b32 	%r251, %r157, %r141, %p4;
	shfl.sync.bfly.b32	%r252, %r251, 2, 31, -1;
	selp.b32 	%r253, %r141, %r252, %p4;
	selp.b32 	%r254, %r252, %r157, %p4;
	selp.b32 	%r255, %r161, %r145, %p4;
	shfl.sync.bfly.b32	%r256, %r255, 2, 31, -1;
	selp.b32 	%r257, %r145, %r256, %p4;
	selp.b32 	%r258, %r256, %r161, %p4;
	selp.b32 	%r259, %r181, %r165, %p4;
	shfl.sync.bfly.b32	%r260, %r259, 2, 31, -1;
	selp.b32 	%r261, %r165, %r260, %p4;
	selp.b32 	%r262, %r260, %r181, %p4;
	selp.b32 	%r263, %r185, %r169, %p4;
	shfl.sync.bfly.b32	%r264, %r263, 2, 31, -1;
	selp.b32 	%r265, %r169, %r264, %p4;
	selp.b32 	%r266, %r264, %r185, %p4;
	selp.b32 	%r267, %r189, %r173, %p4;
	shfl.sync.bfly.b32	%r268, %r267, 2, 31, -1;
	selp.b32 	%r269, %r173, %r268, %p4;
	selp.b32 	%r270, %r268, %r189, %p4;
	selp.b32 	%r271, %r193, %r177, %p4;
	shfl.sync.bfly.b32	%r272, %r271, 2, 31, -1;
	selp.b32 	%r273, %r177, %r272, %p4;
	selp.b32 	%r274, %r272, %r193, %p4;
	and.b32  	%r32, %r3, 4;
	setp.eq.s32 	%p5, %r32, 0;
	selp.b32 	%r275, %r261, %r245, %p5;
	shfl.sync.bfly.b32	%r276, %r275, 4, 31, -1;
	selp.b32 	%r33, %r245, %r276, %p5;
	selp.b32 	%r34, %r276, %r261, %p5;
	selp.b32 	%r277, %r265, %r249, %p5;
	shfl.sync.bfly.b32	%r278, %r277, 4, 31, -1;
	selp.b32 	%r35, %r249, %r278, %p5;
	selp.b32 	%r36, %r278, %r265, %p5;
	selp.b32 	%r279, %r269, %r253, %p5;
	shfl.sync.bfly.b32	%r280, %r279, 4, 31, -1;
	selp.b32 	%r37, %r253, %r280, %p5;
	selp.b32 	%r38, %r280, %r269, %p5;
	selp.b32 	%r281, %r273, %r257, %p5;
	shfl.sync.bfly.b32	%r282, %r281, 4, 31, -1;
	selp.b32 	%r39, %r257, %r282, %p5;
	selp.b32 	%r40, %r282, %r273, %p5;
	selp.b32 	%r283, %r262, %r246, %p5;
	shfl.sync.bfly.b32	%r284, %r283, 4, 31, -1;
	selp.b32 	%r41, %r246, %r284, %p5;
	selp.b32 	%r42, %r284, %r262, %p5;
	selp.b32 	%r285, %r266, %r250, %p5;
	shfl.sync.bfly.b32	%r286, %r285, 4, 31, -1;
	selp.b32 	%r43, %r250, %r286, %p5;
	selp.b32 	%r44, %r286, %r266, %p5;
	selp.b32 	%r287, %r270, %r254, %p5;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r45, %r254, %r288, %p5;
	selp.b32 	%r46, %r288, %r270, %p5;
	selp.b32 	%r289, %r274, %r258, %p5;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r47, %r258, %r290, %p5;
	selp.b32 	%r48, %r290, %r274, %p5;
	shl.b32 	%r49, %r3, 2;
	and.b32  	%r291, %r49, 28;
	and.b32  	%r292, %r5, 32;
	or.b32  	%r50, %r291, %r292;
	shl.b32 	%r293, %r1, 2;
	and.b32  	%r294, %r293, 64;
	shl.b32 	%r295, %r4, 1;
	and.b32  	%r51, %r295, 4;
	and.b32  	%r52, %r2, 1920;
	and.b32  	%r53, %r293, 8064;
	or.b32  	%r54, %r294, %r50;
	and.b32  	%r296, %r28, 24;
	or.b32  	%r55, %r296, %r292;
	and.b32  	%r56, %r30, 6;
	and.b32  	%r297, %r4, 1;
	neg.s32 	%r298, %r297;
	and.b32  	%r299, %r298, 640;
	or.b32  	%r57, %r299, %r231;
	and.b32  	%r300, %r3, 7;
	or.b32  	%r301, %r8, 640;
	shl.b32 	%r58, %r65, %r10;
	min.u32 	%r59, %r198, 31;
	mul.lo.s32 	%r303, %r300, 20;
	add.s32 	%r304, %r303, %r8;
	mul.wide.u32 	%rd36, %r304, 4;
	mov.u64 	%rd37, shmem;
	add.s64 	%rd38, %rd37, 8320;
	add.s64 	%rd6, %rd38, %rd36;
	add.s32 	%r305, %r301, %r303;
	mul.wide.u32 	%rd39, %r305, 4;
	add.s64 	%rd7, %rd38, %rd39;
	add.s32 	%r306, %r303, 160;
	add.s32 	%r307, %r306, %r8;
	mul.wide.u32 	%rd40, %r307, 4;
	add.s64 	%rd8, %rd38, %rd40;
	add.s32 	%r308, %r301, %r306;
	mul.wide.u32 	%rd41, %r308, 4;
	add.s64 	%rd9, %rd38, %rd41;
	add.s32 	%r309, %r303, 320;
	add.s32 	%r310, %r309, %r8;
	mul.wide.u32 	%rd42, %r310, 4;
	add.s64 	%rd10, %rd38, %rd42;
	add.s32 	%r311, %r301, %r309;
	mul.wide.u32 	%rd43, %r311, 4;
	add.s64 	%rd11, %rd38, %rd43;
	or.b32  	%r312, %r3, 24;
	mul.lo.s32 	%r313, %r312, 20;
	add.s32 	%r314, %r313, %r8;
	mul.wide.u32 	%rd44, %r314, 4;
	add.s64 	%rd12, %rd38, %rd44;
	add.s32 	%r315, %r301, %r313;
	mul.wide.u32 	%rd45, %r315, 4;
	add.s64 	%rd13, %rd38, %rd45;
	mov.u32 	%r197, 0;
	mov.u32 	%r822, %r197;
	mov.u32 	%r823, %r197;
	mov.u32 	%r824, %r197;
	mov.u32 	%r825, %r197;
	mov.u32 	%r826, %r197;
	mov.u32 	%r827, %r197;
	mov.u32 	%r828, %r197;
$L__BB0_7:                              // %L1379
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
	or.b32  	%r317, %r822, %r51;
	or.b32  	%r318, %r317, %r7;
	add.s32 	%r319, %r318, %r52;
	shl.b32 	%r320, %r319, 13;
	and.b32  	%r321, %r320, 16572416;
	or.b32  	%r322, %r321, %r54;
	or.b32  	%r323, %r322, %r53;
	shl.b32 	%r324, %r323, 2;
	cvt.u64.u32 	%rd46, %r324;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.v4.u32 	{%r325, %r326, %r327, %r328}, [%rd47];
	or.b32  	%r329, %r318, 8;
	add.s32 	%r330, %r329, %r52;
	shl.b32 	%r331, %r330, 13;
	and.b32  	%r332, %r331, 16637952;
	or.b32  	%r333, %r332, %r54;
	or.b32  	%r334, %r333, %r53;
	shl.b32 	%r335, %r334, 2;
	cvt.u64.u32 	%rd48, %r335;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.v4.u32 	{%r336, %r337, %r338, %r339}, [%rd49];
	or.b32  	%r340, %r318, 16;
	add.s32 	%r341, %r340, %r52;
	shl.b32 	%r342, %r341, 13;
	and.b32  	%r343, %r342, 16703488;
	or.b32  	%r344, %r343, %r54;
	or.b32  	%r345, %r344, %r53;
	shl.b32 	%r346, %r345, 2;
	cvt.u64.u32 	%rd50, %r346;
	add.s64 	%rd51, %rd2, %rd50;
	ld.global.v4.u32 	{%r347, %r348, %r349, %r350}, [%rd51];
	or.b32  	%r351, %r318, 24;
	add.s32 	%r352, %r351, %r52;
	shl.b32 	%r353, %r352, 13;
	and.b32  	%r354, %r353, 16769024;
	or.b32  	%r355, %r354, %r54;
	or.b32  	%r356, %r355, %r53;
	shl.b32 	%r357, %r356, 2;
	cvt.u64.u32 	%rd52, %r357;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.v4.u32 	{%r358, %r359, %r360, %r361}, [%rd53];
	and.b32  	%r362, %r319, 7;
	mul.lo.s32 	%r363, %r362, 65;
	add.s32 	%r364, %r50, %r363;
	mul.wide.u32 	%rd54, %r364, 4;
	add.s64 	%rd56, %rd37, %rd54;
	st.shared.u32 	[%rd56], %r325;
	cvt.u64.u32 	%rd57, %r363;
	cvt.u64.u32 	%rd58, %r50;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd61, %rd37, %rd60;
	st.shared.u32 	[%rd61+4], %r326;
	st.shared.u32 	[%rd61+8], %r327;
	st.shared.u32 	[%rd61+12], %r328;
	and.b32  	%r365, %r330, 15;
	mul.lo.s32 	%r366, %r365, 65;
	add.s32 	%r367, %r50, %r366;
	mul.wide.u32 	%rd62, %r367, 4;
	add.s64 	%rd63, %rd37, %rd62;
	st.shared.u32 	[%rd63], %r336;
	cvt.u64.u32 	%rd64, %r366;
	add.s64 	%rd65, %rd58, %rd64;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd67, %rd37, %rd66;
	st.shared.u32 	[%rd67+4], %r337;
	st.shared.u32 	[%rd67+8], %r338;
	st.shared.u32 	[%rd67+12], %r339;
	and.b32  	%r368, %r341, 23;
	mul.lo.s32 	%r369, %r368, 65;
	add.s32 	%r370, %r50, %r369;
	mul.wide.u32 	%rd68, %r370, 4;
	add.s64 	%rd69, %rd37, %rd68;
	st.shared.u32 	[%rd69], %r347;
	cvt.u64.u32 	%rd70, %r369;
	add.s64 	%rd71, %rd58, %rd70;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd73, %rd37, %rd72;
	st.shared.u32 	[%rd73+4], %r348;
	st.shared.u32 	[%rd73+8], %r349;
	st.shared.u32 	[%rd73+12], %r350;
	and.b32  	%r371, %r352, 31;
	mul.lo.s32 	%r372, %r371, 65;
	add.s32 	%r373, %r50, %r372;
	mul.wide.u32 	%rd74, %r373, 4;
	add.s64 	%rd75, %rd37, %rd74;
	st.shared.u32 	[%rd75], %r358;
	cvt.u64.u32 	%rd76, %r372;
	add.s64 	%rd77, %rd58, %rd76;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd37, %rd78;
	st.shared.u32 	[%rd79+4], %r359;
	st.shared.u32 	[%rd79+8], %r360;
	st.shared.u32 	[%rd79+12], %r361;
	bar.sync 	0;
	mov.u32 	%r829, %r197;
$L__BB0_8:                              // %L4752
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r636, %r829, %r29;
	mad.lo.s32 	%r637, %r636, 65, %r55;
	mul.wide.u32 	%rd80, %r637, 4;
	add.s64 	%rd82, %rd37, %rd80;
	ld.shared.u32 	%r375, [%rd82];
	mov.u32 	%r376, 134744072;
	mov.u32 	%r377, 252645135;
	// begin inline asm
	lop3.b32 %r374, %r375, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r638, %r374, 2021161080;
	xor.b32  	%r385, %r638, -2139062144;
	shr.u32 	%r379, %r375, 4;
	// begin inline asm
	lop3.b32 %r378, %r379, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r639, %r378, 2021161080;
	xor.b32  	%r391, %r639, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r382, %r383}, {%r33}, {%r385}, {%r197, %r197};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r388, %r389}, {%r35}, {%r391}, {%r197, %r197};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r394, %r395}, {%r33}, {%r391}, {%r197, %r197};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r400, %r401}, {%r35}, {%r385}, {%r394, %r395};
	// end inline asm
	ld.shared.u32 	%r407, [%rd82+4];
	// begin inline asm
	lop3.b32 %r406, %r407, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r640, %r406, 2021161080;
	xor.b32  	%r417, %r640, -2139062144;
	shr.u32 	%r411, %r407, 4;
	// begin inline asm
	lop3.b32 %r410, %r411, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r641, %r410, 2021161080;
	xor.b32  	%r423, %r641, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r414, %r415}, {%r37}, {%r417}, {%r382, %r383};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r420, %r421}, {%r39}, {%r423}, {%r388, %r389};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r426, %r427}, {%r37}, {%r423}, {%r400, %r401};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r432, %r433}, {%r39}, {%r417}, {%r426, %r427};
	// end inline asm
	ld.shared.u32 	%r439, [%rd82+8];
	// begin inline asm
	lop3.b32 %r438, %r439, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r642, %r438, 2021161080;
	xor.b32  	%r449, %r642, -2139062144;
	shr.u32 	%r443, %r439, 4;
	// begin inline asm
	lop3.b32 %r442, %r443, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r643, %r442, 2021161080;
	xor.b32  	%r455, %r643, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r446, %r447}, {%r41}, {%r449}, {%r414, %r415};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r452, %r453}, {%r43}, {%r455}, {%r420, %r421};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r458, %r459}, {%r41}, {%r455}, {%r432, %r433};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r464, %r465}, {%r43}, {%r449}, {%r458, %r459};
	// end inline asm
	ld.shared.u32 	%r471, [%rd82+12];
	// begin inline asm
	lop3.b32 %r470, %r471, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r644, %r470, 2021161080;
	xor.b32  	%r481, %r644, -2139062144;
	shr.u32 	%r475, %r471, 4;
	// begin inline asm
	lop3.b32 %r474, %r475, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r645, %r474, 2021161080;
	xor.b32  	%r487, %r645, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r478, %r479}, {%r45}, {%r481}, {%r446, %r447};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r484, %r485}, {%r47}, {%r487}, {%r452, %r453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r490, %r491}, {%r45}, {%r487}, {%r464, %r465};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r496, %r497}, {%r47}, {%r481}, {%r490, %r491};
	// end inline asm
	ld.shared.u32 	%r503, [%rd82+16];
	// begin inline asm
	lop3.b32 %r502, %r503, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r646, %r502, 2021161080;
	xor.b32  	%r513, %r646, -2139062144;
	shr.u32 	%r507, %r503, 4;
	// begin inline asm
	lop3.b32 %r506, %r507, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r647, %r506, 2021161080;
	xor.b32  	%r519, %r647, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r510, %r511}, {%r34}, {%r513}, {%r478, %r479};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r516, %r517}, {%r36}, {%r519}, {%r484, %r485};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r522, %r523}, {%r34}, {%r519}, {%r496, %r497};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r528, %r529}, {%r36}, {%r513}, {%r522, %r523};
	// end inline asm
	ld.shared.u32 	%r535, [%rd82+20];
	// begin inline asm
	lop3.b32 %r534, %r535, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r648, %r534, 2021161080;
	xor.b32  	%r545, %r648, -2139062144;
	shr.u32 	%r539, %r535, 4;
	// begin inline asm
	lop3.b32 %r538, %r539, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r649, %r538, 2021161080;
	xor.b32  	%r551, %r649, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r542, %r543}, {%r38}, {%r545}, {%r510, %r511};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r548, %r549}, {%r40}, {%r551}, {%r516, %r517};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r554, %r555}, {%r38}, {%r551}, {%r528, %r529};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r560, %r561}, {%r40}, {%r545}, {%r554, %r555};
	// end inline asm
	ld.shared.u32 	%r567, [%rd82+24];
	// begin inline asm
	lop3.b32 %r566, %r567, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r650, %r566, 2021161080;
	xor.b32  	%r577, %r650, -2139062144;
	shr.u32 	%r571, %r567, 4;
	// begin inline asm
	lop3.b32 %r570, %r571, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r651, %r570, 2021161080;
	xor.b32  	%r583, %r651, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r574, %r575}, {%r42}, {%r577}, {%r542, %r543};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r580, %r581}, {%r44}, {%r583}, {%r548, %r549};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r586, %r587}, {%r42}, {%r583}, {%r560, %r561};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r44}, {%r577}, {%r586, %r587};
	// end inline asm
	ld.shared.u32 	%r599, [%rd82+28];
	// begin inline asm
	lop3.b32 %r598, %r599, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r652, %r598, 2021161080;
	xor.b32  	%r609, %r652, -2139062144;
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r602, %r603, %r376, %r377, 40;
	// end inline asm
	add.s32 	%r653, %r602, 2021161080;
	xor.b32  	%r615, %r653, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r606, %r607}, {%r46}, {%r609}, {%r574, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r612, %r613}, {%r48}, {%r615}, {%r580, %r581};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r618, %r619}, {%r46}, {%r615}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r48}, {%r609}, {%r618, %r619};
	// end inline asm
	sub.s32 	%r654, %r606, %r612;
	add.s32 	%r655, %r654, 4;
	shr.s32 	%r632, %r655, 3;
	add.s32 	%r656, %r624, 4;
	shr.s32 	%r631, %r656, 3;
	sub.s32 	%r657, %r607, %r613;
	add.s32 	%r658, %r657, 4;
	shr.s32 	%r635, %r658, 3;
	add.s32 	%r659, %r625, 4;
	shr.s32 	%r634, %r659, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r630, %r631, %r632;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r633, %r634, %r635;
	// end inline asm
	or.b32  	%r660, %r56, %r829;
	mad.lo.s32 	%r661, %r660, 20, %r57;
	mul.wide.u32 	%rd83, %r661, 4;
	add.s64 	%rd84, %rd37, %rd83;
	st.shared.u32 	[%rd84+8320], %r630;
	st.shared.u32 	[%rd84+8400], %r633;
	add.s32 	%r829, %r829, 8;
	setp.ne.s32 	%p6, %r829, 32;
	@%p6 bra 	$L__BB0_8;
// %bb.9:                               // %L6622
                                        //   in Loop: Header=BB0_7 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r680, [%rd6];
	ld.shared.u32 	%r681, [%rd7];
	ld.shared.u32 	%r682, [%rd8];
	ld.shared.u32 	%r683, [%rd9];
	ld.shared.u32 	%r684, [%rd10];
	ld.shared.u32 	%r685, [%rd11];
	ld.shared.u32 	%r686, [%rd12];
	ld.shared.u32 	%r687, [%rd13];
	cvt.s32.s16 	%r688, %r680;
	shr.s32 	%r689, %r680, 16;
	cvt.s32.s16 	%r690, %r681;
	shr.s32 	%r691, %r681, 16;
	cvt.s32.s16 	%r692, %r682;
	shr.s32 	%r693, %r682, 16;
	cvt.s32.s16 	%r694, %r683;
	shr.s32 	%r695, %r683, 16;
	cvt.s32.s16 	%r696, %r684;
	shr.s32 	%r697, %r684, 16;
	cvt.s32.s16 	%r698, %r685;
	shr.s32 	%r699, %r685, 16;
	cvt.s32.s16 	%r700, %r686;
	shr.s32 	%r701, %r686, 16;
	cvt.s32.s16 	%r702, %r687;
	shr.s32 	%r703, %r687, 16;
	add.s32 	%r704, %r688, %r58;
	add.s32 	%r705, %r704, %r690;
	shr.s32 	%r706, %r705, %r59;
	add.s32 	%r707, %r689, %r58;
	add.s32 	%r708, %r707, %r691;
	shr.s32 	%r709, %r708, %r59;
	add.s32 	%r710, %r692, %r58;
	add.s32 	%r711, %r710, %r694;
	shr.s32 	%r712, %r711, %r59;
	add.s32 	%r713, %r693, %r58;
	add.s32 	%r714, %r713, %r695;
	shr.s32 	%r715, %r714, %r59;
	add.s32 	%r716, %r696, %r58;
	add.s32 	%r717, %r716, %r698;
	shr.s32 	%r718, %r717, %r59;
	add.s32 	%r719, %r697, %r58;
	add.s32 	%r720, %r719, %r699;
	shr.s32 	%r721, %r720, %r59;
	add.s32 	%r722, %r700, %r58;
	add.s32 	%r723, %r722, %r702;
	shr.s32 	%r724, %r723, %r59;
	add.s32 	%r725, %r701, %r58;
	add.s32 	%r726, %r725, %r703;
	shr.s32 	%r727, %r726, %r59;
	max.s32 	%r728, %r706, -7;
	min.s32 	%r667, %r728, 7;
	max.s32 	%r729, %r709, -7;
	min.s32 	%r674, %r729, 7;
	max.s32 	%r730, %r712, -7;
	min.s32 	%r666, %r730, 7;
	max.s32 	%r731, %r715, -7;
	min.s32 	%r673, %r731, 7;
	max.s32 	%r732, %r718, -7;
	min.s32 	%r664, %r732, 7;
	max.s32 	%r733, %r721, -7;
	min.s32 	%r671, %r733, 7;
	max.s32 	%r734, %r724, -7;
	min.s32 	%r663, %r734, 7;
	max.s32 	%r735, %r727, -7;
	min.s32 	%r670, %r735, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r662, %r663, %r664, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r665, %r666, %r667, %r662;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r669, %r670, %r671, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r672, %r673, %r674, %r669;
	// end inline asm
	shl.b32 	%r679, %r672, 4;
	// begin inline asm
	lop3.b32 %r746, %r377, %r665, %r679, 202;
	// end inline asm
	setp.eq.s32 	%p7, %r822, 0;
	selp.b32 	%r827, %r746, %r827, %p7;
	selp.b32 	%r828, %r746, %r828, %p7;
	setp.eq.s32 	%p8, %r822, 32;
	selp.b32 	%r823, %r746, %r823, %p8;
	selp.b32 	%r824, %r746, %r824, %p8;
	setp.eq.s32 	%p9, %r822, 64;
	selp.b32 	%r825, %r746, %r825, %p9;
	selp.b32 	%r826, %r746, %r826, %p9;
	add.s32 	%r27, %r822, 32;
	setp.ne.s32 	%p10, %r822, 96;
	mov.u32 	%r822, %r27;
	@%p10 bra 	$L__BB0_7;
// %bb.10:                              // %L7880
	// begin inline asm
	prmt.b32 %r736, %r827, %r823, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r740, %r828, %r824, %r196;
	// end inline asm
	// begin inline asm
	prmt.b32 %r744, %r825, %r746, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r748, %r826, %r746, %r196;
	// end inline asm
	and.b32  	%r784, %r3, 1;
	setp.eq.b32 	%p13, %r784, 1;
	selp.b32 	%r785, %r736, %r740, %p13;
	shfl.sync.bfly.b32	%r786, %r785, 1, 31, -1;
	selp.b32 	%r757, %r786, %r736, %p13;
	selp.b32 	%r758, %r740, %r786, %p13;
	selp.b32 	%r787, %r744, %r748, %p13;
	shfl.sync.bfly.b32	%r788, %r787, 1, 31, -1;
	selp.b32 	%r765, %r788, %r744, %p13;
	selp.b32 	%r766, %r748, %r788, %p13;
	// begin inline asm
	prmt.b32 %r752, %r757, %r758, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r756, %r757, %r758, %r196;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r765, %r766, %r192;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r765, %r766, %r196;
	// end inline asm
	selp.b32 	%r789, %r760, %r752, %p4;
	shfl.sync.bfly.b32	%r790, %r789, 2, 31, -1;
	selp.b32 	%r769, %r752, %r790, %p4;
	selp.b32 	%r770, %r790, %r760, %p4;
	selp.b32 	%r791, %r764, %r756, %p4;
	shfl.sync.bfly.b32	%r792, %r791, 2, 31, -1;
	selp.b32 	%r777, %r756, %r792, %p4;
	selp.b32 	%r778, %r792, %r764, %p4;
	// begin inline asm
	prmt.b32 %r768, %r769, %r770, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r772, %r769, %r770, %r132;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r777, %r778, %r128;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r777, %r778, %r132;
	// end inline asm
	selp.b32 	%r793, %r776, %r768, %p5;
	shfl.sync.bfly.b32	%r794, %r793, 4, 31, -1;
	selp.b32 	%r795, %r768, %r794, %p5;
	selp.b32 	%r796, %r794, %r776, %p5;
	selp.b32 	%r797, %r780, %r772, %p5;
	shfl.sync.bfly.b32	%r798, %r797, 4, 31, -1;
	selp.b32 	%r799, %r772, %r798, %p5;
	selp.b32 	%r800, %r798, %r780, %p5;
	selp.b32 	%r801, %r795, %r799, %p13;
	shfl.sync.bfly.b32	%r802, %r801, 1, 31, -1;
	selp.b32 	%r803, %r796, %r800, %p13;
	shfl.sync.bfly.b32	%r804, %r803, 1, 31, -1;
	shl.b32 	%r805, %r4, 18;
	shl.b32 	%r806, %r3, 13;
	and.b32  	%r807, %r806, 196608;
	shl.b32 	%r808, %r1, 5;
	and.b32  	%r809, %r30, 8;
	and.b32  	%r810, %r28, 16;
	and.b32  	%r811, %r49, 4;
	selp.b32 	%r812, %r800, %r804, %p13;
	selp.b32 	%r813, %r804, %r796, %p13;
	selp.b32 	%r814, %r799, %r802, %p13;
	selp.b32 	%r815, %r802, %r795, %p13;
	or.b32  	%r816, %r810, %r805;
	or.b32  	%r817, %r816, %r809;
	or.b32  	%r818, %r817, %r811;
	or.b32  	%r819, %r818, %r807;
	or.b32  	%r820, %r819, %r808;
	mul.wide.u32 	%rd85, %r820, 4;
	add.s64 	%rd86, %rd15, %rd85;
	st.global.v4.u32 	[%rd86], {%r815, %r813, %r814, %r812};
	mov.u32 	%r821, 0;
	st.global.u32 	[%rd5], %r821;
	ret;
$L__BB0_1:                              // %L8
	mov.u64 	%rd19, exception1;
	cvta.global.u64 	%rd20, %rd19;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd20;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L25
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_5:                              // %L254
	mov.u32 	%r68, 2;
	st.global.u32 	[%rd5], %r68;
	mov.u64 	%rd26, exception632;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
