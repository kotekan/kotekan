// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception707[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1713[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<33>;
	.reg .b32 	%r<871>;
	.reg .b64 	%rd<86>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r60, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd18, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r63, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r63, 8319;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L17
	// begin inline asm
	mov.u32 %r64, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r64, 13439;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L32
	ld.param.u32 	%r61, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r65, %r3, 7;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r66, %r65, %r4;
	or.b32  	%r67, %r66, %r2;
	mul.wide.u32 	%rd23, %r67, 4;
	add.s64 	%rd6, %rd5, %rd23;
	mov.u32 	%r68, 1;
	st.global.u32 	[%rd6], %r68;
	setp.gt.u32 	%p3, %r61, 65535;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L132
	ld.param.u32 	%r62, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r62, %r61;
	setp.gt.s32 	%p5, %r62, 131071;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L139
	sub.s32 	%r69, %r62, %r61;
	and.b32  	%r70, %r69, 127;
	setp.eq.s32 	%p7, %r70, 0;
	@%p7 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L245
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r71, %r3, 4;
	shl.b32 	%r5, %r1, 2;
	shr.u32 	%r6, %r4, 3;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r72, %r7, %r71;
	mul.wide.u32 	%rd24, %r72, 4;
	add.s64 	%rd25, %rd3, %rd24;
	ld.global.u32 	%r8, [%rd25];
	add.s32 	%r9, %r8, -4;
	setp.lt.u32 	%p8, %r9, 31;
	@%p8 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %pass190
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	add.s32 	%r203, %r8, -3;
	shl.b32 	%r204, %r1, 8;
	shl.b32 	%r205, %r4, 6;
	and.b32  	%r206, %r205, 64;
	shl.b32 	%r207, %r4, 3;
	and.b32  	%r208, %r207, 48;
	and.b32  	%r209, %r204, 256;
	or.b32  	%r210, %r209, %r206;
	or.b32  	%r211, %r208, %r210;
	shl.b32 	%r212, %r3, 13;
	and.b32  	%r213, %r212, 8192;
	and.b32  	%r214, %r5, 8;
	shr.u32 	%r29, %r4, 2;
	and.b32  	%r215, %r29, 6;
	or.b32  	%r216, %r214, %r215;
	shl.b32 	%r217, %r216, 9;
	and.b32  	%r218, %r212, 1032192;
	or.b32  	%r219, %r213, %r211;
	or.b32  	%r220, %r219, %r217;
	or.b32  	%r221, %r220, %r218;
	cvt.u64.u32 	%rd28, %r221;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r75, %r76, %r83, %r84}, [%rd29];
	shl.b32 	%r222, %r1, 6;
	and.b32  	%r223, %r222, 64;
	shl.b32 	%r224, %r4, 4;
	and.b32  	%r30, %r224, 16;
	or.b32  	%r225, %r223, %r30;
	shl.b32 	%r226, %r4, 1;
	and.b32  	%r227, %r226, 12;
	or.b32  	%r228, %r227, %r225;
	shl.b32 	%r229, %r3, 11;
	and.b32  	%r230, %r229, 2048;
	shl.b32 	%r231, %r216, 7;
	and.b32  	%r232, %r229, 258048;
	or.b32  	%r233, %r230, %r228;
	or.b32  	%r234, %r233, %r231;
	or.b32  	%r235, %r234, %r232;
	or.b32  	%r236, %r235, 32;
	mul.wide.u32 	%rd30, %r236, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r91, %r92, %r99, %r100}, [%rd31];
	or.b32  	%r237, %r214, %r29;
	shl.b32 	%r238, %r237, 7;
	or.b32  	%r239, %r30, %r222;
	or.b32  	%r240, %r239, %r227;
	or.b32  	%r241, %r240, %r230;
	or.b32  	%r242, %r241, %r232;
	or.b32  	%r243, %r242, %r238;
	or.b32  	%r244, %r243, 128;
	mul.wide.u32 	%rd32, %r244, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r107, %r108, %r115, %r116}, [%rd33];
	or.b32  	%r245, %r243, 160;
	add.s32 	%r246, %r245, 1;
	mul.wide.u32 	%rd34, %r246, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r123, %r124, %r131, %r132}, [%rd35+-4];
	mov.u32 	%r133, 21520;
	// begin inline asm
	prmt.b32 %r139, %r75, %r76, %r133;
	// end inline asm
	mov.u32 	%r137, 30258;
	// begin inline asm
	prmt.b32 %r140, %r75, %r76, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r83, %r84, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r148, %r83, %r84, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r155, %r91, %r92, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r156, %r91, %r92, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r163, %r99, %r100, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r164, %r99, %r100, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r171, %r107, %r108, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r172, %r107, %r108, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r179, %r115, %r116, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r180, %r115, %r116, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r187, %r123, %r124, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r188, %r123, %r124, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r195, %r131, %r132, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r196, %r131, %r132, %r137;
	// end inline asm
	mov.u32 	%r197, 25152;
	// begin inline asm
	prmt.b32 %r138, %r139, %r140, %r197;
	// end inline asm
	mov.u32 	%r201, 29521;
	// begin inline asm
	prmt.b32 %r142, %r139, %r140, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r146, %r147, %r148, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r150, %r147, %r148, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r154, %r155, %r156, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r158, %r155, %r156, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r162, %r163, %r164, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r166, %r163, %r164, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r170, %r171, %r172, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r174, %r171, %r172, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r178, %r179, %r180, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r182, %r179, %r180, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r186, %r187, %r188, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r190, %r187, %r188, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r194, %r195, %r196, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r198, %r195, %r196, %r201;
	// end inline asm
	and.b32  	%r31, %r4, 2;
	setp.eq.s32 	%p9, %r31, 0;
	selp.b32 	%r247, %r154, %r138, %p9;
	shfl.sync.bfly.b32	%r248, %r247, 2, 31, -1;
	selp.b32 	%r249, %r138, %r248, %p9;
	selp.b32 	%r250, %r248, %r154, %p9;
	selp.b32 	%r251, %r158, %r142, %p9;
	shfl.sync.bfly.b32	%r252, %r251, 2, 31, -1;
	selp.b32 	%r253, %r142, %r252, %p9;
	selp.b32 	%r254, %r252, %r158, %p9;
	selp.b32 	%r255, %r162, %r146, %p9;
	shfl.sync.bfly.b32	%r256, %r255, 2, 31, -1;
	selp.b32 	%r257, %r146, %r256, %p9;
	selp.b32 	%r258, %r256, %r162, %p9;
	selp.b32 	%r259, %r166, %r150, %p9;
	shfl.sync.bfly.b32	%r260, %r259, 2, 31, -1;
	selp.b32 	%r261, %r150, %r260, %p9;
	selp.b32 	%r262, %r260, %r166, %p9;
	selp.b32 	%r263, %r186, %r170, %p9;
	shfl.sync.bfly.b32	%r264, %r263, 2, 31, -1;
	selp.b32 	%r265, %r170, %r264, %p9;
	selp.b32 	%r266, %r264, %r186, %p9;
	selp.b32 	%r267, %r190, %r174, %p9;
	shfl.sync.bfly.b32	%r268, %r267, 2, 31, -1;
	selp.b32 	%r269, %r174, %r268, %p9;
	selp.b32 	%r270, %r268, %r190, %p9;
	selp.b32 	%r271, %r194, %r178, %p9;
	shfl.sync.bfly.b32	%r272, %r271, 2, 31, -1;
	selp.b32 	%r273, %r178, %r272, %p9;
	selp.b32 	%r274, %r272, %r194, %p9;
	selp.b32 	%r275, %r198, %r182, %p9;
	shfl.sync.bfly.b32	%r276, %r275, 2, 31, -1;
	selp.b32 	%r277, %r182, %r276, %p9;
	selp.b32 	%r278, %r276, %r198, %p9;
	and.b32  	%r32, %r4, 4;
	setp.eq.s32 	%p10, %r32, 0;
	selp.b32 	%r279, %r265, %r249, %p10;
	shfl.sync.bfly.b32	%r280, %r279, 4, 31, -1;
	selp.b32 	%r33, %r249, %r280, %p10;
	selp.b32 	%r34, %r280, %r265, %p10;
	selp.b32 	%r281, %r269, %r253, %p10;
	shfl.sync.bfly.b32	%r282, %r281, 4, 31, -1;
	selp.b32 	%r35, %r253, %r282, %p10;
	selp.b32 	%r36, %r282, %r269, %p10;
	selp.b32 	%r283, %r273, %r257, %p10;
	shfl.sync.bfly.b32	%r284, %r283, 4, 31, -1;
	selp.b32 	%r37, %r257, %r284, %p10;
	selp.b32 	%r38, %r284, %r273, %p10;
	selp.b32 	%r285, %r277, %r261, %p10;
	shfl.sync.bfly.b32	%r286, %r285, 4, 31, -1;
	selp.b32 	%r39, %r261, %r286, %p10;
	selp.b32 	%r40, %r286, %r277, %p10;
	selp.b32 	%r287, %r266, %r250, %p10;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r41, %r250, %r288, %p10;
	selp.b32 	%r42, %r288, %r266, %p10;
	selp.b32 	%r289, %r270, %r254, %p10;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r43, %r254, %r290, %p10;
	selp.b32 	%r44, %r290, %r270, %p10;
	selp.b32 	%r291, %r274, %r258, %p10;
	shfl.sync.bfly.b32	%r292, %r291, 4, 31, -1;
	selp.b32 	%r45, %r258, %r292, %p10;
	selp.b32 	%r46, %r292, %r274, %p10;
	selp.b32 	%r293, %r278, %r262, %p10;
	shfl.sync.bfly.b32	%r294, %r293, 4, 31, -1;
	selp.b32 	%r47, %r262, %r294, %p10;
	selp.b32 	%r48, %r294, %r278, %p10;
	shl.b32 	%r295, %r61, 13;
	shl.b32 	%r296, %r3, 6;
	and.b32  	%r297, %r296, 64;
	shl.b32 	%r298, %r4, 2;
	and.b32  	%r299, %r298, 28;
	and.b32  	%r300, %r2, 32;
	or.b32  	%r301, %r300, %r299;
	or.b32  	%r302, %r297, %r301;
	shl.b32 	%r303, %r1, 1;
	and.b32  	%r304, %r303, 4;
	or.b32  	%r49, %r304, %r6;
	and.b32  	%r305, %r296, 8064;
	or.b32  	%r306, %r295, %r305;
	or.b32  	%r50, %r306, %r302;
	and.b32  	%r307, %r207, 24;
	or.b32  	%r51, %r307, %r300;
	and.b32  	%r308, %r1, 1;
	neg.s32 	%r309, %r308;
	and.b32  	%r310, %r309, 640;
	and.b32  	%r52, %r226, 6;
	or.b32  	%r53, %r237, %r310;
	and.b32  	%r311, %r4, 7;
	or.b32  	%r312, %r7, 640;
	shl.b32 	%r54, %r68, %r9;
	min.u32 	%r55, %r203, 31;
	and.b32  	%r56, %r4, 1;
	and.b32  	%r57, %r207, 32;
	shl.b32 	%r314, %r4, 5;
	and.b32  	%r58, %r314, 64;
	shl.b32 	%r315, %r3, 14;
	shl.b32 	%r316, %r1, 23;
	shl.b32 	%r317, %r4, 18;
	and.b32  	%r318, %r317, 6291456;
	or.b32  	%r319, %r318, %r316;
	or.b32  	%r59, %r319, %r315;
	mul.lo.s32 	%r320, %r49, 65;
	add.s32 	%r321, %r301, %r320;
	mul.wide.u32 	%rd36, %r321, 4;
	mov.u64 	%rd37, shmem;
	add.s64 	%rd7, %rd37, %rd36;
	cvt.u64.u32 	%rd38, %r320;
	cvt.u64.u32 	%rd8, %r301;
	add.s64 	%rd39, %rd8, %rd38;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd9, %rd37, %rd40;
	mul.lo.s32 	%r322, %r311, 20;
	add.s32 	%r323, %r322, %r7;
	mul.wide.u32 	%rd41, %r323, 4;
	add.s64 	%rd42, %rd37, 8320;
	add.s64 	%rd10, %rd42, %rd41;
	add.s32 	%r324, %r312, %r322;
	mul.wide.u32 	%rd43, %r324, 4;
	add.s64 	%rd11, %rd42, %rd43;
	add.s32 	%r325, %r322, 160;
	add.s32 	%r326, %r325, %r7;
	mul.wide.u32 	%rd44, %r326, 4;
	add.s64 	%rd12, %rd42, %rd44;
	add.s32 	%r327, %r312, %r325;
	mul.wide.u32 	%rd45, %r327, 4;
	add.s64 	%rd13, %rd42, %rd45;
	add.s32 	%r328, %r322, 320;
	add.s32 	%r329, %r328, %r7;
	mul.wide.u32 	%rd46, %r329, 4;
	add.s64 	%rd14, %rd42, %rd46;
	add.s32 	%r330, %r312, %r328;
	mul.wide.u32 	%rd47, %r330, 4;
	add.s64 	%rd15, %rd42, %rd47;
	or.b32  	%r331, %r4, 24;
	mul.lo.s32 	%r332, %r331, 20;
	add.s32 	%r333, %r332, %r7;
	mul.wide.u32 	%rd48, %r333, 4;
	add.s64 	%rd16, %rd42, %rd48;
	add.s32 	%r334, %r312, %r332;
	mul.wide.u32 	%rd49, %r334, 4;
	add.s64 	%rd17, %rd42, %rd49;
	mov.u32 	%r862, 0;
$L__BB0_11:                             // %L1484
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r335, %r862, %r61;
	setp.ge.s32 	%p11, %r335, %r62;
	@%p11 bra 	$L__BB0_17;
// %bb.12:                              // %L1491.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	mov.u32 	%r433, 0;
	mov.u32 	%r863, %r433;
	mov.u32 	%r864, %r433;
	mov.u32 	%r865, %r433;
	mov.u32 	%r866, %r433;
	mov.u32 	%r867, %r433;
	mov.u32 	%r868, %r433;
	mov.u32 	%r869, %r433;
$L__BB0_13:                             // %L1491
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	cvt.u32.u64 	%r338, %rd8;
	add.s32 	%r339, %r863, %r862;
	or.b32  	%r340, %r49, %r339;
	shl.b32 	%r341, %r340, 13;
	and.b32  	%r342, %r341, 536666112;
	add.s32 	%r343, %r50, %r342;
	shr.s32 	%r344, %r343, 31;
	shr.u32 	%r345, %r344, 3;
	add.s32 	%r346, %r343, %r345;
	shr.s32 	%r347, %r346, 29;
	setp.lt.s32 	%p12, %r343, 0;
	and.b32  	%r348, %r346, -536870912;
	setp.ne.s32 	%p13, %r348, %r343;
	and.pred  	%p14, %p12, %p13;
	selp.u32 	%r349, 1, 0, %p14;
	sub.s32 	%r350, %r349, %r347;
	shl.b32 	%r351, %r350, 29;
	or.b32  	%r352, %r343, 1;
	add.s32 	%r353, %r352, %r351;
	mul.wide.s32 	%rd50, %r353, 4;
	add.s64 	%rd51, %rd2, %rd50;
	ld.global.v4.u32 	{%r354, %r355, %r356, %r357}, [%rd51+-4];
	or.b32  	%r358, %r340, 8;
	shl.b32 	%r359, %r358, 13;
	and.b32  	%r360, %r359, 536731648;
	add.s32 	%r361, %r50, %r360;
	shr.s32 	%r362, %r361, 31;
	shr.u32 	%r363, %r362, 3;
	add.s32 	%r364, %r361, %r363;
	shr.s32 	%r365, %r364, 29;
	setp.lt.s32 	%p15, %r361, 0;
	and.b32  	%r366, %r364, -536870912;
	setp.ne.s32 	%p16, %r366, %r361;
	and.pred  	%p17, %p15, %p16;
	selp.u32 	%r367, 1, 0, %p17;
	sub.s32 	%r368, %r367, %r365;
	shl.b32 	%r369, %r368, 29;
	or.b32  	%r370, %r361, 1;
	add.s32 	%r371, %r370, %r369;
	mul.wide.s32 	%rd52, %r371, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.v4.u32 	{%r372, %r373, %r374, %r375}, [%rd53+-4];
	or.b32  	%r376, %r340, 16;
	shl.b32 	%r377, %r376, 13;
	and.b32  	%r378, %r377, 536797184;
	add.s32 	%r379, %r50, %r378;
	shr.s32 	%r380, %r379, 31;
	shr.u32 	%r381, %r380, 3;
	add.s32 	%r382, %r379, %r381;
	shr.s32 	%r383, %r382, 29;
	setp.lt.s32 	%p18, %r379, 0;
	and.b32  	%r384, %r382, -536870912;
	setp.ne.s32 	%p19, %r384, %r379;
	and.pred  	%p20, %p18, %p19;
	selp.u32 	%r385, 1, 0, %p20;
	sub.s32 	%r386, %r385, %r383;
	shl.b32 	%r387, %r386, 29;
	or.b32  	%r388, %r379, 1;
	add.s32 	%r389, %r388, %r387;
	mul.wide.s32 	%rd54, %r389, 4;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.v4.u32 	{%r390, %r391, %r392, %r393}, [%rd55+-4];
	or.b32  	%r394, %r340, 24;
	shl.b32 	%r395, %r394, 13;
	and.b32  	%r396, %r395, 536862720;
	add.s32 	%r397, %r50, %r396;
	shr.s32 	%r398, %r397, 31;
	shr.u32 	%r399, %r398, 3;
	add.s32 	%r400, %r397, %r399;
	shr.s32 	%r401, %r400, 29;
	setp.lt.s32 	%p21, %r397, 0;
	and.b32  	%r402, %r400, -536870912;
	setp.ne.s32 	%p22, %r402, %r397;
	and.pred  	%p23, %p21, %p22;
	selp.u32 	%r403, 1, 0, %p23;
	sub.s32 	%r404, %r403, %r401;
	shl.b32 	%r405, %r404, 29;
	or.b32  	%r406, %r397, 1;
	add.s32 	%r407, %r406, %r405;
	mul.wide.s32 	%rd56, %r407, 4;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.v4.u32 	{%r408, %r409, %r410, %r411}, [%rd57+-4];
	st.shared.u32 	[%rd7], %r354;
	st.shared.u32 	[%rd9+4], %r355;
	st.shared.u32 	[%rd9+8], %r356;
	st.shared.u32 	[%rd9+12], %r357;
	and.b32  	%r412, %r358, 15;
	mul.lo.s32 	%r413, %r412, 65;
	add.s32 	%r414, %r338, %r413;
	mul.wide.u32 	%rd58, %r414, 4;
	add.s64 	%rd60, %rd37, %rd58;
	st.shared.u32 	[%rd60], %r372;
	cvt.u64.u32 	%rd61, %r413;
	add.s64 	%rd62, %rd8, %rd61;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd64, %rd37, %rd63;
	st.shared.u32 	[%rd64+4], %r373;
	st.shared.u32 	[%rd64+8], %r374;
	st.shared.u32 	[%rd64+12], %r375;
	and.b32  	%r415, %r376, 23;
	mul.lo.s32 	%r416, %r415, 65;
	add.s32 	%r417, %r338, %r416;
	mul.wide.u32 	%rd65, %r417, 4;
	add.s64 	%rd66, %rd37, %rd65;
	st.shared.u32 	[%rd66], %r390;
	cvt.u64.u32 	%rd67, %r416;
	add.s64 	%rd68, %rd8, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd37, %rd69;
	st.shared.u32 	[%rd70+4], %r391;
	st.shared.u32 	[%rd70+8], %r392;
	st.shared.u32 	[%rd70+12], %r393;
	and.b32  	%r418, %r394, 31;
	mul.lo.s32 	%r419, %r418, 65;
	add.s32 	%r420, %r338, %r419;
	mul.wide.u32 	%rd71, %r420, 4;
	add.s64 	%rd72, %rd37, %rd71;
	st.shared.u32 	[%rd72], %r408;
	cvt.u64.u32 	%rd73, %r419;
	add.s64 	%rd74, %rd8, %rd73;
	shl.b64 	%rd75, %rd74, 2;
	add.s64 	%rd76, %rd37, %rd75;
	st.shared.u32 	[%rd76+4], %r409;
	st.shared.u32 	[%rd76+8], %r410;
	st.shared.u32 	[%rd76+12], %r411;
	bar.sync 	0;
	mov.u32 	%r870, %r433;
$L__BB0_14:                             // %L4928
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r683, %r870, %r29;
	mad.lo.s32 	%r684, %r683, 65, %r51;
	mul.wide.u32 	%rd77, %r684, 4;
	add.s64 	%rd79, %rd37, %rd77;
	ld.shared.u32 	%r422, [%rd79];
	mov.u32 	%r423, 134744072;
	mov.u32 	%r424, 252645135;
	// begin inline asm
	lop3.b32 %r421, %r422, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r685, %r421, 2021161080;
	xor.b32  	%r432, %r685, -2139062144;
	shr.u32 	%r426, %r422, 4;
	// begin inline asm
	lop3.b32 %r425, %r426, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r686, %r425, 2021161080;
	xor.b32  	%r438, %r686, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r429, %r430}, {%r33}, {%r432}, {%r433, %r433};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r435, %r436}, {%r35}, {%r438}, {%r433, %r433};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r441, %r442}, {%r33}, {%r438}, {%r433, %r433};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r447, %r448}, {%r35}, {%r432}, {%r441, %r442};
	// end inline asm
	ld.shared.u32 	%r454, [%rd79+4];
	// begin inline asm
	lop3.b32 %r453, %r454, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r687, %r453, 2021161080;
	xor.b32  	%r464, %r687, -2139062144;
	shr.u32 	%r458, %r454, 4;
	// begin inline asm
	lop3.b32 %r457, %r458, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r688, %r457, 2021161080;
	xor.b32  	%r470, %r688, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r461, %r462}, {%r37}, {%r464}, {%r429, %r430};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r467, %r468}, {%r39}, {%r470}, {%r435, %r436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r473, %r474}, {%r37}, {%r470}, {%r447, %r448};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r479, %r480}, {%r39}, {%r464}, {%r473, %r474};
	// end inline asm
	ld.shared.u32 	%r486, [%rd79+8];
	// begin inline asm
	lop3.b32 %r485, %r486, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r689, %r485, 2021161080;
	xor.b32  	%r496, %r689, -2139062144;
	shr.u32 	%r490, %r486, 4;
	// begin inline asm
	lop3.b32 %r489, %r490, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r690, %r489, 2021161080;
	xor.b32  	%r502, %r690, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r493, %r494}, {%r41}, {%r496}, {%r461, %r462};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r499, %r500}, {%r43}, {%r502}, {%r467, %r468};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r505, %r506}, {%r41}, {%r502}, {%r479, %r480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r511, %r512}, {%r43}, {%r496}, {%r505, %r506};
	// end inline asm
	ld.shared.u32 	%r518, [%rd79+12];
	// begin inline asm
	lop3.b32 %r517, %r518, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r691, %r517, 2021161080;
	xor.b32  	%r528, %r691, -2139062144;
	shr.u32 	%r522, %r518, 4;
	// begin inline asm
	lop3.b32 %r521, %r522, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r692, %r521, 2021161080;
	xor.b32  	%r534, %r692, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r525, %r526}, {%r45}, {%r528}, {%r493, %r494};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r531, %r532}, {%r47}, {%r534}, {%r499, %r500};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r537, %r538}, {%r45}, {%r534}, {%r511, %r512};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r543, %r544}, {%r47}, {%r528}, {%r537, %r538};
	// end inline asm
	ld.shared.u32 	%r550, [%rd79+16];
	// begin inline asm
	lop3.b32 %r549, %r550, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r693, %r549, 2021161080;
	xor.b32  	%r560, %r693, -2139062144;
	shr.u32 	%r554, %r550, 4;
	// begin inline asm
	lop3.b32 %r553, %r554, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r694, %r553, 2021161080;
	xor.b32  	%r566, %r694, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r557, %r558}, {%r34}, {%r560}, {%r525, %r526};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r563, %r564}, {%r36}, {%r566}, {%r531, %r532};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r569, %r570}, {%r34}, {%r566}, {%r543, %r544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r575, %r576}, {%r36}, {%r560}, {%r569, %r570};
	// end inline asm
	ld.shared.u32 	%r582, [%rd79+20];
	// begin inline asm
	lop3.b32 %r581, %r582, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r695, %r581, 2021161080;
	xor.b32  	%r592, %r695, -2139062144;
	shr.u32 	%r586, %r582, 4;
	// begin inline asm
	lop3.b32 %r585, %r586, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r696, %r585, 2021161080;
	xor.b32  	%r598, %r696, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r589, %r590}, {%r38}, {%r592}, {%r557, %r558};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r595, %r596}, {%r40}, {%r598}, {%r563, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r601, %r602}, {%r38}, {%r598}, {%r575, %r576};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r607, %r608}, {%r40}, {%r592}, {%r601, %r602};
	// end inline asm
	ld.shared.u32 	%r614, [%rd79+24];
	// begin inline asm
	lop3.b32 %r613, %r614, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r697, %r613, 2021161080;
	xor.b32  	%r624, %r697, -2139062144;
	shr.u32 	%r618, %r614, 4;
	// begin inline asm
	lop3.b32 %r617, %r618, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r698, %r617, 2021161080;
	xor.b32  	%r630, %r698, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r621, %r622}, {%r42}, {%r624}, {%r589, %r590};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r627, %r628}, {%r44}, {%r630}, {%r595, %r596};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r633, %r634}, {%r42}, {%r630}, {%r607, %r608};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r639, %r640}, {%r44}, {%r624}, {%r633, %r634};
	// end inline asm
	ld.shared.u32 	%r646, [%rd79+28];
	// begin inline asm
	lop3.b32 %r645, %r646, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r699, %r645, 2021161080;
	xor.b32  	%r656, %r699, -2139062144;
	shr.u32 	%r650, %r646, 4;
	// begin inline asm
	lop3.b32 %r649, %r650, %r423, %r424, 40;
	// end inline asm
	add.s32 	%r700, %r649, 2021161080;
	xor.b32  	%r662, %r700, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r653, %r654}, {%r46}, {%r656}, {%r621, %r622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r659, %r660}, {%r48}, {%r662}, {%r627, %r628};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r665, %r666}, {%r46}, {%r662}, {%r639, %r640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r671, %r672}, {%r48}, {%r656}, {%r665, %r666};
	// end inline asm
	sub.s32 	%r701, %r653, %r659;
	add.s32 	%r702, %r701, 4;
	shr.s32 	%r679, %r702, 3;
	add.s32 	%r703, %r671, 4;
	shr.s32 	%r678, %r703, 3;
	sub.s32 	%r704, %r654, %r660;
	add.s32 	%r705, %r704, 4;
	shr.s32 	%r682, %r705, 3;
	add.s32 	%r706, %r672, 4;
	shr.s32 	%r681, %r706, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r677, %r678, %r679;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r680, %r681, %r682;
	// end inline asm
	or.b32  	%r707, %r870, %r52;
	mad.lo.s32 	%r708, %r707, 20, %r53;
	mul.wide.u32 	%rd80, %r708, 4;
	add.s64 	%rd81, %rd37, %rd80;
	st.shared.u32 	[%rd81+8320], %r677;
	st.shared.u32 	[%rd81+8400], %r680;
	add.s32 	%r870, %r870, 8;
	setp.ne.s32 	%p24, %r870, 32;
	@%p24 bra 	$L__BB0_14;
// %bb.15:                              // %L6808
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r727, [%rd10];
	ld.shared.u32 	%r728, [%rd11];
	ld.shared.u32 	%r729, [%rd12];
	ld.shared.u32 	%r730, [%rd13];
	ld.shared.u32 	%r731, [%rd14];
	ld.shared.u32 	%r732, [%rd15];
	ld.shared.u32 	%r733, [%rd16];
	ld.shared.u32 	%r734, [%rd17];
	cvt.s32.s16 	%r735, %r727;
	shr.s32 	%r736, %r727, 16;
	cvt.s32.s16 	%r737, %r728;
	shr.s32 	%r738, %r728, 16;
	cvt.s32.s16 	%r739, %r729;
	shr.s32 	%r740, %r729, 16;
	cvt.s32.s16 	%r741, %r730;
	shr.s32 	%r742, %r730, 16;
	cvt.s32.s16 	%r743, %r731;
	shr.s32 	%r744, %r731, 16;
	cvt.s32.s16 	%r745, %r732;
	shr.s32 	%r746, %r732, 16;
	cvt.s32.s16 	%r747, %r733;
	shr.s32 	%r748, %r733, 16;
	cvt.s32.s16 	%r749, %r734;
	shr.s32 	%r750, %r734, 16;
	add.s32 	%r751, %r735, %r54;
	add.s32 	%r752, %r751, %r737;
	shr.s32 	%r753, %r752, %r55;
	add.s32 	%r754, %r736, %r54;
	add.s32 	%r755, %r754, %r738;
	shr.s32 	%r756, %r755, %r55;
	add.s32 	%r757, %r739, %r54;
	add.s32 	%r758, %r757, %r741;
	shr.s32 	%r759, %r758, %r55;
	add.s32 	%r760, %r740, %r54;
	add.s32 	%r761, %r760, %r742;
	shr.s32 	%r762, %r761, %r55;
	add.s32 	%r763, %r743, %r54;
	add.s32 	%r764, %r763, %r745;
	shr.s32 	%r765, %r764, %r55;
	add.s32 	%r766, %r744, %r54;
	add.s32 	%r767, %r766, %r746;
	shr.s32 	%r768, %r767, %r55;
	add.s32 	%r769, %r747, %r54;
	add.s32 	%r770, %r769, %r749;
	shr.s32 	%r771, %r770, %r55;
	add.s32 	%r772, %r748, %r54;
	add.s32 	%r773, %r772, %r750;
	shr.s32 	%r774, %r773, %r55;
	max.s32 	%r775, %r753, -7;
	min.s32 	%r714, %r775, 7;
	max.s32 	%r776, %r756, -7;
	min.s32 	%r721, %r776, 7;
	max.s32 	%r777, %r759, -7;
	min.s32 	%r713, %r777, 7;
	max.s32 	%r778, %r762, -7;
	min.s32 	%r720, %r778, 7;
	max.s32 	%r779, %r765, -7;
	min.s32 	%r711, %r779, 7;
	max.s32 	%r780, %r768, -7;
	min.s32 	%r718, %r780, 7;
	max.s32 	%r781, %r771, -7;
	min.s32 	%r710, %r781, 7;
	max.s32 	%r782, %r774, -7;
	min.s32 	%r717, %r782, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r709, %r710, %r711, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r712, %r713, %r714, %r709;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r716, %r717, %r718, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r719, %r720, %r721, %r716;
	// end inline asm
	shl.b32 	%r726, %r719, 4;
	// begin inline asm
	lop3.b32 %r793, %r424, %r712, %r726, 202;
	// end inline asm
	setp.eq.s32 	%p25, %r863, 0;
	selp.b32 	%r868, %r793, %r868, %p25;
	selp.b32 	%r869, %r793, %r869, %p25;
	setp.eq.s32 	%p26, %r863, 32;
	selp.b32 	%r864, %r793, %r864, %p26;
	selp.b32 	%r865, %r793, %r865, %p26;
	setp.eq.s32 	%p27, %r863, 64;
	selp.b32 	%r866, %r793, %r866, %p27;
	selp.b32 	%r867, %r793, %r867, %p27;
	add.s32 	%r27, %r863, 32;
	setp.ne.s32 	%p28, %r863, 96;
	mov.u32 	%r863, %r27;
	@%p28 bra 	$L__BB0_13;
// %bb.16:                              // %L8074
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p29, %r56, 0;
	// begin inline asm
	prmt.b32 %r783, %r868, %r864, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r869, %r865, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r866, %r793, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r867, %r793, %r201;
	// end inline asm
	selp.b32 	%r831, %r787, %r783, %p29;
	shfl.sync.bfly.b32	%r832, %r831, 1, 31, -1;
	selp.b32 	%r800, %r783, %r832, %p29;
	selp.b32 	%r801, %r832, %r787, %p29;
	selp.b32 	%r833, %r795, %r791, %p29;
	shfl.sync.bfly.b32	%r834, %r833, 1, 31, -1;
	selp.b32 	%r808, %r791, %r834, %p29;
	selp.b32 	%r809, %r834, %r795, %p29;
	// begin inline asm
	prmt.b32 %r799, %r800, %r801, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r800, %r801, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r808, %r809, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r808, %r809, %r201;
	// end inline asm
	selp.b32 	%r835, %r807, %r799, %p9;
	shfl.sync.bfly.b32	%r836, %r835, 2, 31, -1;
	selp.b32 	%r816, %r799, %r836, %p9;
	selp.b32 	%r817, %r836, %r807, %p9;
	selp.b32 	%r837, %r811, %r803, %p9;
	shfl.sync.bfly.b32	%r838, %r837, 2, 31, -1;
	selp.b32 	%r824, %r803, %r838, %p9;
	selp.b32 	%r825, %r838, %r811, %p9;
	// begin inline asm
	prmt.b32 %r815, %r816, %r817, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r816, %r817, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r824, %r825, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r827, %r824, %r825, %r137;
	// end inline asm
	selp.b32 	%r839, %r823, %r815, %p10;
	shfl.sync.bfly.b32	%r840, %r839, 4, 31, -1;
	selp.b32 	%r841, %r815, %r840, %p10;
	selp.b32 	%r842, %r840, %r823, %p10;
	selp.b32 	%r843, %r827, %r819, %p10;
	shfl.sync.bfly.b32	%r844, %r843, 4, 31, -1;
	selp.b32 	%r845, %r819, %r844, %p10;
	selp.b32 	%r846, %r844, %r827, %p10;
	selp.b32 	%r847, %r845, %r841, %p29;
	shfl.sync.bfly.b32	%r848, %r847, 1, 31, -1;
	selp.b32 	%r849, %r841, %r848, %p29;
	selp.b32 	%r850, %r848, %r845, %p29;
	selp.b32 	%r851, %r846, %r842, %p29;
	shfl.sync.bfly.b32	%r852, %r851, 1, 31, -1;
	selp.b32 	%r853, %r842, %r852, %p29;
	selp.b32 	%r854, %r852, %r846, %p29;
	and.b32  	%r855, %r862, 16256;
	or.b32  	%r856, %r855, %r30;
	or.b32  	%r857, %r856, %r57;
	or.b32  	%r858, %r857, %r58;
	or.b32  	%r859, %r59, %r858;
	cvt.u64.u32 	%rd82, %r859;
	add.s64 	%rd83, %rd4, %rd82;
	st.global.v4.u32 	[%rd83], {%r849, %r853, %r850, %r854};
	add.s32 	%r28, %r862, 128;
	setp.ne.s32 	%p32, %r862, 65408;
	mov.u32 	%r862, %r28;
	@%p32 bra 	$L__BB0_11;
$L__BB0_17:                             // %L8453
	mov.u32 	%r860, 0;
	st.global.u32 	[%rd6], %r860;
	ret;
$L__BB0_7:                              // %L151
	mov.u32 	%r861, 2;
	st.global.u32 	[%rd6], %r861;
	mov.u64 	%rd84, exception707;
	cvta.global.u64 	%rd85, %rd84;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd85;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd19, exception1713;
	cvta.global.u64 	%rd20, %rd19;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd20;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L23
	mov.u64 	%rd21, exception1713;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_9:                              // %L371
	mov.u32 	%r73, 2;
	st.global.u32 	[%rd6], %r73;
	mov.u64 	%rd26, exception707;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
