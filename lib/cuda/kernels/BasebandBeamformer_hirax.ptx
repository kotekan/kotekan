// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception761[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<33>;
	.reg .b32 	%r<898>;
	.reg .b64 	%rd<71>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r66, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r67, 8319;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r68, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r68, 13439;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	ld.param.u64 	%rd7, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 7;
	or.b32  	%r69, %r2, %r3;
	or.b32  	%r70, %r69, %r5;
	mul.wide.u32 	%rd22, %r70, 4;
	add.s64 	%rd8, %rd7, %rd22;
	mov.u32 	%r71, 1;
	st.global.u32 	[%rd8], %r71;
	ld.global.u32 	%r6, [%rd1];
	setp.lt.s32 	%p3, %r6, 0;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L172
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r7, [%rd2];
	setp.lt.s32 	%p4, %r7, %r6;
	setp.gt.s32 	%p5, %r7, 16384;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L182
	sub.s32 	%r72, %r7, %r6;
	and.b32  	%r73, %r72, 127;
	setp.eq.s32 	%p7, %r73, 0;
	@%p7 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_7;
$L__BB0_16:                             // %pass134
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	shl.b32 	%r28, %r1, 2;
	shr.u32 	%r29, %r3, 3;
	or.b32  	%r30, %r28, %r29;
	and.b32  	%r74, %r4, 2032;
	or.b32  	%r75, %r30, %r74;
	mul.wide.u32 	%rd23, %r75, 4;
	add.s64 	%rd24, %rd5, %rd23;
	ld.global.u32 	%r31, [%rd24];
	add.s32 	%r32, %r31, -4;
	setp.gt.u32 	%p8, %r32, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.17:                              // %pass214
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.param.u64 	%rd6, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	add.s32 	%r206, %r31, -3;
	shl.b32 	%r207, %r3, 6;
	and.b32  	%r208, %r207, 64;
	shl.b32 	%r209, %r3, 3;
	and.b32  	%r210, %r209, 48;
	or.b32  	%r211, %r208, %r210;
	shl.b32 	%r212, %r1, 8;
	and.b32  	%r213, %r212, 256;
	or.b32  	%r214, %r213, %r211;
	shl.b32 	%r215, %r4, 9;
	and.b32  	%r216, %r215, 1032192;
	and.b32  	%r217, %r28, 8;
	shr.u32 	%r33, %r3, 2;
	and.b32  	%r218, %r33, 6;
	or.b32  	%r219, %r217, %r218;
	shl.b32 	%r220, %r219, 9;
	and.b32  	%r221, %r215, 8192;
	or.b32  	%r222, %r216, %r214;
	or.b32  	%r223, %r222, %r220;
	or.b32  	%r224, %r223, %r221;
	cvt.u64.u32 	%rd27, %r224;
	add.s64 	%rd28, %rd3, %rd27;
	ld.global.v4.u32 	{%r78, %r79, %r86, %r87}, [%rd28];
	shl.b32 	%r225, %r3, 4;
	and.b32  	%r34, %r225, 16;
	shl.b32 	%r226, %r3, 1;
	and.b32  	%r227, %r226, 12;
	or.b32  	%r228, %r34, %r227;
	shl.b32 	%r229, %r1, 6;
	and.b32  	%r230, %r229, 64;
	or.b32  	%r231, %r230, %r228;
	and.b32  	%r232, %r5, 258048;
	shl.b32 	%r233, %r219, 7;
	and.b32  	%r234, %r5, 2048;
	or.b32  	%r235, %r232, %r231;
	or.b32  	%r236, %r235, %r233;
	or.b32  	%r237, %r236, %r234;
	or.b32  	%r238, %r237, 32;
	mul.wide.u32 	%rd29, %r238, 4;
	add.s64 	%rd30, %rd3, %rd29;
	ld.global.v4.u32 	{%r94, %r95, %r102, %r103}, [%rd30];
	or.b32  	%r239, %r228, %r229;
	or.b32  	%r240, %r217, %r33;
	shl.b32 	%r241, %r240, 7;
	and.b32  	%r242, %r5, 260096;
	or.b32  	%r243, %r242, %r239;
	or.b32  	%r244, %r243, %r241;
	shl.b32 	%r245, %r244, 2;
	or.b32  	%r246, %r245, 512;
	cvt.u64.u32 	%rd31, %r246;
	add.s64 	%rd32, %rd3, %rd31;
	ld.global.v4.u32 	{%r110, %r111, %r118, %r119}, [%rd32];
	or.b32  	%r247, %r239, %r232;
	or.b32  	%r248, %r247, %r234;
	or.b32  	%r249, %r248, %r241;
	or.b32  	%r250, %r249, 160;
	add.s32 	%r251, %r250, 1;
	mul.wide.u32 	%rd33, %r251, 4;
	add.s64 	%rd34, %rd3, %rd33;
	ld.global.v4.u32 	{%r126, %r127, %r134, %r135}, [%rd34+-4];
	mov.u32 	%r136, 21520;
	// begin inline asm
	prmt.b32 %r142, %r78, %r79, %r136;
	// end inline asm
	mov.u32 	%r140, 30258;
	// begin inline asm
	prmt.b32 %r143, %r78, %r79, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r150, %r86, %r87, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r151, %r86, %r87, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r158, %r94, %r95, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r159, %r94, %r95, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r166, %r102, %r103, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r167, %r102, %r103, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r174, %r110, %r111, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r175, %r110, %r111, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r182, %r118, %r119, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r183, %r118, %r119, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r190, %r126, %r127, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r191, %r126, %r127, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r198, %r134, %r135, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r199, %r134, %r135, %r140;
	// end inline asm
	mov.u32 	%r200, 25152;
	// begin inline asm
	prmt.b32 %r141, %r142, %r143, %r200;
	// end inline asm
	mov.u32 	%r204, 29521;
	// begin inline asm
	prmt.b32 %r145, %r142, %r143, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r149, %r150, %r151, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r153, %r150, %r151, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r157, %r158, %r159, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r161, %r158, %r159, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r165, %r166, %r167, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r169, %r166, %r167, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r173, %r174, %r175, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r177, %r174, %r175, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r181, %r182, %r183, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r185, %r182, %r183, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r189, %r190, %r191, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r193, %r190, %r191, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r197, %r198, %r199, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r201, %r198, %r199, %r204;
	// end inline asm
	and.b32  	%r35, %r3, 2;
	setp.eq.s32 	%p9, %r35, 0;
	selp.b32 	%r252, %r157, %r141, %p9;
	shfl.sync.bfly.b32	%r253, %r252, 2, 31, -1;
	selp.b32 	%r254, %r141, %r253, %p9;
	selp.b32 	%r255, %r253, %r157, %p9;
	selp.b32 	%r256, %r161, %r145, %p9;
	shfl.sync.bfly.b32	%r257, %r256, 2, 31, -1;
	selp.b32 	%r258, %r145, %r257, %p9;
	selp.b32 	%r259, %r257, %r161, %p9;
	selp.b32 	%r260, %r165, %r149, %p9;
	shfl.sync.bfly.b32	%r261, %r260, 2, 31, -1;
	selp.b32 	%r262, %r149, %r261, %p9;
	selp.b32 	%r263, %r261, %r165, %p9;
	selp.b32 	%r264, %r169, %r153, %p9;
	shfl.sync.bfly.b32	%r265, %r264, 2, 31, -1;
	selp.b32 	%r266, %r153, %r265, %p9;
	selp.b32 	%r267, %r265, %r169, %p9;
	selp.b32 	%r268, %r189, %r173, %p9;
	shfl.sync.bfly.b32	%r269, %r268, 2, 31, -1;
	selp.b32 	%r270, %r173, %r269, %p9;
	selp.b32 	%r271, %r269, %r189, %p9;
	selp.b32 	%r272, %r193, %r177, %p9;
	shfl.sync.bfly.b32	%r273, %r272, 2, 31, -1;
	selp.b32 	%r274, %r177, %r273, %p9;
	selp.b32 	%r275, %r273, %r193, %p9;
	selp.b32 	%r276, %r197, %r181, %p9;
	shfl.sync.bfly.b32	%r277, %r276, 2, 31, -1;
	selp.b32 	%r278, %r181, %r277, %p9;
	selp.b32 	%r279, %r277, %r197, %p9;
	selp.b32 	%r280, %r201, %r185, %p9;
	shfl.sync.bfly.b32	%r281, %r280, 2, 31, -1;
	selp.b32 	%r282, %r185, %r281, %p9;
	selp.b32 	%r283, %r281, %r201, %p9;
	and.b32  	%r36, %r3, 4;
	setp.eq.s32 	%p10, %r36, 0;
	selp.b32 	%r284, %r270, %r254, %p10;
	shfl.sync.bfly.b32	%r285, %r284, 4, 31, -1;
	selp.b32 	%r37, %r254, %r285, %p10;
	selp.b32 	%r38, %r285, %r270, %p10;
	selp.b32 	%r286, %r274, %r258, %p10;
	shfl.sync.bfly.b32	%r287, %r286, 4, 31, -1;
	selp.b32 	%r39, %r258, %r287, %p10;
	selp.b32 	%r40, %r287, %r274, %p10;
	selp.b32 	%r288, %r278, %r262, %p10;
	shfl.sync.bfly.b32	%r289, %r288, 4, 31, -1;
	selp.b32 	%r41, %r262, %r289, %p10;
	selp.b32 	%r42, %r289, %r278, %p10;
	selp.b32 	%r290, %r282, %r266, %p10;
	shfl.sync.bfly.b32	%r291, %r290, 4, 31, -1;
	selp.b32 	%r43, %r266, %r291, %p10;
	selp.b32 	%r44, %r291, %r282, %p10;
	selp.b32 	%r292, %r271, %r255, %p10;
	shfl.sync.bfly.b32	%r293, %r292, 4, 31, -1;
	selp.b32 	%r45, %r255, %r293, %p10;
	selp.b32 	%r46, %r293, %r271, %p10;
	selp.b32 	%r294, %r275, %r259, %p10;
	shfl.sync.bfly.b32	%r295, %r294, 4, 31, -1;
	selp.b32 	%r47, %r259, %r295, %p10;
	selp.b32 	%r48, %r295, %r275, %p10;
	selp.b32 	%r296, %r279, %r263, %p10;
	shfl.sync.bfly.b32	%r297, %r296, 4, 31, -1;
	selp.b32 	%r49, %r263, %r297, %p10;
	selp.b32 	%r50, %r297, %r279, %p10;
	selp.b32 	%r298, %r283, %r267, %p10;
	shfl.sync.bfly.b32	%r299, %r298, 4, 31, -1;
	selp.b32 	%r51, %r267, %r299, %p10;
	selp.b32 	%r52, %r299, %r283, %p10;
	shl.b32 	%r300, %r6, 13;
	shl.b32 	%r301, %r4, 2;
	and.b32  	%r53, %r215, 7680;
	shl.b32 	%r302, %r1, 1;
	and.b32  	%r54, %r302, 4;
	shl.b32 	%r303, %r3, 2;
	and.b32  	%r304, %r303, 28;
	and.b32  	%r305, %r2, 32;
	or.b32  	%r55, %r304, %r305;
	and.b32  	%r306, %r301, 8128;
	or.b32  	%r307, %r306, %r55;
	or.b32  	%r56, %r307, %r300;
	and.b32  	%r308, %r209, 24;
	or.b32  	%r57, %r308, %r305;
	and.b32  	%r58, %r226, 6;
	and.b32  	%r309, %r1, 1;
	neg.s32 	%r310, %r309;
	and.b32  	%r311, %r310, 640;
	or.b32  	%r59, %r311, %r240;
	and.b32  	%r312, %r3, 7;
	or.b32  	%r313, %r30, 640;
	shl.b32 	%r60, %r71, %r32;
	min.u32 	%r61, %r206, 31;
	and.b32  	%r62, %r3, 1;
	shl.b32 	%r315, %r3, 5;
	and.b32  	%r63, %r315, 64;
	and.b32  	%r64, %r209, 32;
	shl.b32 	%r316, %r1, 20;
	shl.b32 	%r317, %r3, 15;
	and.b32  	%r318, %r317, 786432;
	or.b32  	%r319, %r318, %r316;
	or.b32  	%r65, %r319, %r242;
	or.b32  	%r320, %r3, 24;
	mul.lo.s32 	%r321, %r320, 20;
	add.s32 	%r322, %r313, %r321;
	mul.wide.u32 	%rd35, %r322, 4;
	mov.u64 	%rd36, shmem;
	add.s64 	%rd37, %rd36, 8320;
	add.s64 	%rd9, %rd37, %rd35;
	mul.lo.s32 	%r323, %r312, 20;
	add.s32 	%r324, %r323, %r30;
	mul.wide.u32 	%rd38, %r324, 4;
	add.s64 	%rd10, %rd37, %rd38;
	add.s32 	%r325, %r313, %r323;
	mul.wide.u32 	%rd39, %r325, 4;
	add.s64 	%rd11, %rd37, %rd39;
	add.s32 	%r326, %r323, 160;
	add.s32 	%r327, %r326, %r30;
	mul.wide.u32 	%rd40, %r327, 4;
	add.s64 	%rd12, %rd37, %rd40;
	add.s32 	%r328, %r313, %r326;
	mul.wide.u32 	%rd41, %r328, 4;
	add.s64 	%rd13, %rd37, %rd41;
	add.s32 	%r329, %r323, 320;
	add.s32 	%r330, %r329, %r30;
	mul.wide.u32 	%rd42, %r330, 4;
	add.s64 	%rd14, %rd37, %rd42;
	add.s32 	%r331, %r313, %r329;
	mul.wide.u32 	%rd43, %r331, 4;
	add.s64 	%rd15, %rd37, %rd43;
	add.s32 	%r332, %r321, %r30;
	mul.wide.u32 	%rd44, %r332, 4;
	add.s64 	%rd16, %rd37, %rd44;
	mov.u32 	%r889, 0;
$L__BB0_9:                              // %L1526
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_12 Depth 3
	add.s32 	%r333, %r889, %r6;
	setp.le.s32 	%p11, %r7, %r333;
	@%p11 bra 	$L__BB0_15;
// %bb.10:                              // %L1533.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	add.s32 	%r9, %r889, %r53;
	mov.u32 	%r460, 0;
	mov.u32 	%r890, %r460;
	mov.u32 	%r891, %r460;
	mov.u32 	%r892, %r460;
	mov.u32 	%r893, %r460;
	mov.u32 	%r894, %r460;
	mov.u32 	%r895, %r460;
	mov.u32 	%r896, %r460;
$L__BB0_11:                             // %L1533
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_12 Depth 3
	or.b32  	%r336, %r890, %r29;
	add.s32 	%r337, %r9, %r336;
	or.b32  	%r338, %r337, %r54;
	shr.s32 	%r339, %r337, 31;
	shr.u32 	%r340, %r339, 19;
	add.s32 	%r341, %r338, %r340;
	and.b32  	%r342, %r341, 516096;
	sub.s32 	%r343, %r338, %r342;
	shl.b32 	%r344, %r343, 13;
	add.s32 	%r345, %r56, %r344;
	shr.s32 	%r346, %r345, 31;
	shr.u32 	%r347, %r346, 6;
	add.s32 	%r348, %r345, %r347;
	shr.s32 	%r349, %r348, 26;
	setp.lt.s32 	%p12, %r345, 0;
	and.b32  	%r350, %r348, -67108864;
	setp.ne.s32 	%p13, %r350, %r345;
	and.pred  	%p14, %p12, %p13;
	selp.u32 	%r351, 1, 0, %p14;
	sub.s32 	%r352, %r351, %r349;
	shl.b32 	%r353, %r352, 26;
	add.s32 	%r354, %r353, %r345;
	mul.wide.s32 	%rd45, %r354, 4;
	add.s64 	%rd46, %rd4, %rd45;
	ld.global.v4.u32 	{%r355, %r356, %r357, %r358}, [%rd46];
	or.b32  	%r359, %r336, 8;
	add.s32 	%r360, %r9, %r359;
	or.b32  	%r361, %r360, %r54;
	shr.s32 	%r362, %r360, 31;
	shr.u32 	%r363, %r362, 19;
	add.s32 	%r364, %r361, %r363;
	and.b32  	%r365, %r364, 516096;
	sub.s32 	%r366, %r361, %r365;
	shl.b32 	%r367, %r366, 13;
	add.s32 	%r368, %r56, %r367;
	shr.s32 	%r369, %r368, 31;
	shr.u32 	%r370, %r369, 6;
	add.s32 	%r371, %r368, %r370;
	shr.s32 	%r372, %r371, 26;
	setp.lt.s32 	%p15, %r368, 0;
	and.b32  	%r373, %r371, -67108864;
	setp.ne.s32 	%p16, %r373, %r368;
	and.pred  	%p17, %p15, %p16;
	selp.u32 	%r374, 1, 0, %p17;
	sub.s32 	%r375, %r374, %r372;
	shl.b32 	%r376, %r375, 26;
	add.s32 	%r377, %r376, %r368;
	mul.wide.s32 	%rd47, %r377, 4;
	add.s64 	%rd48, %rd4, %rd47;
	ld.global.v4.u32 	{%r378, %r379, %r380, %r381}, [%rd48];
	or.b32  	%r382, %r336, 16;
	add.s32 	%r383, %r9, %r382;
	or.b32  	%r384, %r383, %r54;
	shr.s32 	%r385, %r383, 31;
	shr.u32 	%r386, %r385, 19;
	add.s32 	%r387, %r384, %r386;
	and.b32  	%r388, %r387, 516096;
	sub.s32 	%r389, %r384, %r388;
	shl.b32 	%r390, %r389, 13;
	add.s32 	%r391, %r56, %r390;
	shr.s32 	%r392, %r391, 31;
	shr.u32 	%r393, %r392, 6;
	add.s32 	%r394, %r391, %r393;
	shr.s32 	%r395, %r394, 26;
	setp.lt.s32 	%p18, %r391, 0;
	and.b32  	%r396, %r394, -67108864;
	setp.ne.s32 	%p19, %r396, %r391;
	and.pred  	%p20, %p18, %p19;
	selp.u32 	%r397, 1, 0, %p20;
	sub.s32 	%r398, %r397, %r395;
	shl.b32 	%r399, %r398, 26;
	add.s32 	%r400, %r399, %r391;
	mul.wide.s32 	%rd49, %r400, 4;
	add.s64 	%rd50, %rd4, %rd49;
	ld.global.v4.u32 	{%r401, %r402, %r403, %r404}, [%rd50];
	or.b32  	%r405, %r336, 24;
	add.s32 	%r406, %r9, %r405;
	or.b32  	%r407, %r406, %r54;
	shr.s32 	%r408, %r406, 31;
	shr.u32 	%r409, %r408, 19;
	add.s32 	%r410, %r407, %r409;
	and.b32  	%r411, %r410, 516096;
	sub.s32 	%r412, %r407, %r411;
	shl.b32 	%r413, %r412, 13;
	add.s32 	%r414, %r56, %r413;
	shr.s32 	%r415, %r414, 31;
	shr.u32 	%r416, %r415, 6;
	add.s32 	%r417, %r414, %r416;
	shr.s32 	%r418, %r417, 26;
	setp.lt.s32 	%p21, %r414, 0;
	and.b32  	%r419, %r417, -67108864;
	setp.ne.s32 	%p22, %r419, %r414;
	and.pred  	%p23, %p21, %p22;
	selp.u32 	%r420, 1, 0, %p23;
	sub.s32 	%r421, %r420, %r418;
	shl.b32 	%r422, %r421, 26;
	add.s32 	%r423, %r422, %r414;
	mul.wide.s32 	%rd51, %r423, 4;
	add.s64 	%rd52, %rd4, %rd51;
	ld.global.v4.u32 	{%r424, %r425, %r426, %r427}, [%rd52];
	shr.u32 	%r428, %r339, 27;
	add.s32 	%r429, %r338, %r428;
	and.b32  	%r430, %r429, -32;
	sub.s32 	%r431, %r338, %r430;
	mad.lo.s32 	%r432, %r431, 65, %r55;
	mul.wide.s32 	%rd53, %r432, 4;
	add.s64 	%rd55, %rd36, %rd53;
	st.shared.u32 	[%rd55], %r355;
	st.shared.u32 	[%rd55+4], %r356;
	st.shared.u32 	[%rd55+8], %r357;
	st.shared.u32 	[%rd55+12], %r358;
	shr.u32 	%r433, %r362, 27;
	add.s32 	%r434, %r361, %r433;
	and.b32  	%r435, %r434, -32;
	sub.s32 	%r436, %r361, %r435;
	mad.lo.s32 	%r437, %r436, 65, %r55;
	mul.wide.s32 	%rd56, %r437, 4;
	add.s64 	%rd57, %rd36, %rd56;
	st.shared.u32 	[%rd57], %r378;
	st.shared.u32 	[%rd57+4], %r379;
	st.shared.u32 	[%rd57+8], %r380;
	st.shared.u32 	[%rd57+12], %r381;
	shr.u32 	%r438, %r385, 27;
	add.s32 	%r439, %r384, %r438;
	and.b32  	%r440, %r439, -32;
	sub.s32 	%r441, %r384, %r440;
	mad.lo.s32 	%r442, %r441, 65, %r55;
	mul.wide.s32 	%rd58, %r442, 4;
	add.s64 	%rd59, %rd36, %rd58;
	st.shared.u32 	[%rd59], %r401;
	st.shared.u32 	[%rd59+4], %r402;
	st.shared.u32 	[%rd59+8], %r403;
	st.shared.u32 	[%rd59+12], %r404;
	shr.u32 	%r443, %r408, 27;
	add.s32 	%r444, %r407, %r443;
	and.b32  	%r445, %r444, -32;
	sub.s32 	%r446, %r407, %r445;
	mad.lo.s32 	%r447, %r446, 65, %r55;
	mul.wide.s32 	%rd60, %r447, 4;
	add.s64 	%rd61, %rd36, %rd60;
	st.shared.u32 	[%rd61], %r424;
	st.shared.u32 	[%rd61+4], %r425;
	st.shared.u32 	[%rd61+8], %r426;
	st.shared.u32 	[%rd61+12], %r427;
	bar.sync 	0;
	mov.u32 	%r897, %r460;
$L__BB0_12:                             // %L5398
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r710, %r897, %r33;
	mad.lo.s32 	%r711, %r710, 65, %r57;
	mul.wide.u32 	%rd62, %r711, 4;
	add.s64 	%rd64, %rd36, %rd62;
	ld.shared.u32 	%r449, [%rd64];
	mov.u32 	%r450, 134744072;
	mov.u32 	%r451, 252645135;
	// begin inline asm
	lop3.b32 %r448, %r449, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r712, %r448, 2021161080;
	xor.b32  	%r459, %r712, -2139062144;
	shr.u32 	%r453, %r449, 4;
	// begin inline asm
	lop3.b32 %r452, %r453, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r713, %r452, 2021161080;
	xor.b32  	%r465, %r713, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r456, %r457}, {%r37}, {%r459}, {%r460, %r460};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r462, %r463}, {%r39}, {%r465}, {%r460, %r460};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r468, %r469}, {%r37}, {%r465}, {%r460, %r460};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r474, %r475}, {%r39}, {%r459}, {%r468, %r469};
	// end inline asm
	ld.shared.u32 	%r481, [%rd64+4];
	// begin inline asm
	lop3.b32 %r480, %r481, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r714, %r480, 2021161080;
	xor.b32  	%r491, %r714, -2139062144;
	shr.u32 	%r485, %r481, 4;
	// begin inline asm
	lop3.b32 %r484, %r485, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r715, %r484, 2021161080;
	xor.b32  	%r497, %r715, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r488, %r489}, {%r41}, {%r491}, {%r456, %r457};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r494, %r495}, {%r43}, {%r497}, {%r462, %r463};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r500, %r501}, {%r41}, {%r497}, {%r474, %r475};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r506, %r507}, {%r43}, {%r491}, {%r500, %r501};
	// end inline asm
	ld.shared.u32 	%r513, [%rd64+8];
	// begin inline asm
	lop3.b32 %r512, %r513, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r716, %r512, 2021161080;
	xor.b32  	%r523, %r716, -2139062144;
	shr.u32 	%r517, %r513, 4;
	// begin inline asm
	lop3.b32 %r516, %r517, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r717, %r516, 2021161080;
	xor.b32  	%r529, %r717, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r520, %r521}, {%r45}, {%r523}, {%r488, %r489};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r526, %r527}, {%r47}, {%r529}, {%r494, %r495};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r532, %r533}, {%r45}, {%r529}, {%r506, %r507};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r538, %r539}, {%r47}, {%r523}, {%r532, %r533};
	// end inline asm
	ld.shared.u32 	%r545, [%rd64+12];
	// begin inline asm
	lop3.b32 %r544, %r545, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r718, %r544, 2021161080;
	xor.b32  	%r555, %r718, -2139062144;
	shr.u32 	%r549, %r545, 4;
	// begin inline asm
	lop3.b32 %r548, %r549, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r719, %r548, 2021161080;
	xor.b32  	%r561, %r719, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r552, %r553}, {%r49}, {%r555}, {%r520, %r521};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r558, %r559}, {%r51}, {%r561}, {%r526, %r527};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r564, %r565}, {%r49}, {%r561}, {%r538, %r539};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r570, %r571}, {%r51}, {%r555}, {%r564, %r565};
	// end inline asm
	ld.shared.u32 	%r577, [%rd64+16];
	// begin inline asm
	lop3.b32 %r576, %r577, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r720, %r576, 2021161080;
	xor.b32  	%r587, %r720, -2139062144;
	shr.u32 	%r581, %r577, 4;
	// begin inline asm
	lop3.b32 %r580, %r581, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r721, %r580, 2021161080;
	xor.b32  	%r593, %r721, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r38}, {%r587}, {%r552, %r553};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r40}, {%r593}, {%r558, %r559};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r38}, {%r593}, {%r570, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r602, %r603}, {%r40}, {%r587}, {%r596, %r597};
	// end inline asm
	ld.shared.u32 	%r609, [%rd64+20];
	// begin inline asm
	lop3.b32 %r608, %r609, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r722, %r608, 2021161080;
	xor.b32  	%r619, %r722, -2139062144;
	shr.u32 	%r613, %r609, 4;
	// begin inline asm
	lop3.b32 %r612, %r613, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r723, %r612, 2021161080;
	xor.b32  	%r625, %r723, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r42}, {%r619}, {%r584, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r44}, {%r625}, {%r590, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r42}, {%r625}, {%r602, %r603};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r634, %r635}, {%r44}, {%r619}, {%r628, %r629};
	// end inline asm
	ld.shared.u32 	%r641, [%rd64+24];
	// begin inline asm
	lop3.b32 %r640, %r641, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r724, %r640, 2021161080;
	xor.b32  	%r651, %r724, -2139062144;
	shr.u32 	%r645, %r641, 4;
	// begin inline asm
	lop3.b32 %r644, %r645, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r725, %r644, 2021161080;
	xor.b32  	%r657, %r725, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r46}, {%r651}, {%r616, %r617};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r48}, {%r657}, {%r622, %r623};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r660, %r661}, {%r46}, {%r657}, {%r634, %r635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r666, %r667}, {%r48}, {%r651}, {%r660, %r661};
	// end inline asm
	ld.shared.u32 	%r673, [%rd64+28];
	// begin inline asm
	lop3.b32 %r672, %r673, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r726, %r672, 2021161080;
	xor.b32  	%r683, %r726, -2139062144;
	shr.u32 	%r677, %r673, 4;
	// begin inline asm
	lop3.b32 %r676, %r677, %r450, %r451, 40;
	// end inline asm
	add.s32 	%r727, %r676, 2021161080;
	xor.b32  	%r689, %r727, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r680, %r681}, {%r50}, {%r683}, {%r648, %r649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r686, %r687}, {%r52}, {%r689}, {%r654, %r655};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r692, %r693}, {%r50}, {%r689}, {%r666, %r667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r698, %r699}, {%r52}, {%r683}, {%r692, %r693};
	// end inline asm
	sub.s32 	%r728, %r680, %r686;
	add.s32 	%r729, %r728, 4;
	shr.s32 	%r706, %r729, 3;
	add.s32 	%r730, %r698, 4;
	shr.s32 	%r705, %r730, 3;
	sub.s32 	%r731, %r681, %r687;
	add.s32 	%r732, %r731, 4;
	shr.s32 	%r709, %r732, 3;
	add.s32 	%r733, %r699, 4;
	shr.s32 	%r708, %r733, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r704, %r705, %r706;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r707, %r708, %r709;
	// end inline asm
	or.b32  	%r734, %r58, %r897;
	mad.lo.s32 	%r735, %r734, 20, %r59;
	mul.wide.u32 	%rd65, %r735, 4;
	add.s64 	%rd66, %rd36, %rd65;
	st.shared.u32 	[%rd66+8320], %r704;
	st.shared.u32 	[%rd66+8400], %r707;
	add.s32 	%r897, %r897, 8;
	setp.ne.s32 	%p24, %r897, 32;
	@%p24 bra 	$L__BB0_12;
// %bb.13:                              // %L7488
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r754, [%rd10];
	ld.shared.u32 	%r755, [%rd11];
	ld.shared.u32 	%r756, [%rd12];
	ld.shared.u32 	%r757, [%rd13];
	ld.shared.u32 	%r758, [%rd14];
	ld.shared.u32 	%r759, [%rd15];
	ld.shared.u32 	%r760, [%rd16];
	ld.shared.u32 	%r761, [%rd9];
	cvt.s32.s16 	%r762, %r754;
	shr.s32 	%r763, %r754, 16;
	cvt.s32.s16 	%r764, %r755;
	shr.s32 	%r765, %r755, 16;
	cvt.s32.s16 	%r766, %r756;
	shr.s32 	%r767, %r756, 16;
	cvt.s32.s16 	%r768, %r757;
	shr.s32 	%r769, %r757, 16;
	cvt.s32.s16 	%r770, %r758;
	shr.s32 	%r771, %r758, 16;
	cvt.s32.s16 	%r772, %r759;
	shr.s32 	%r773, %r759, 16;
	cvt.s32.s16 	%r774, %r760;
	shr.s32 	%r775, %r760, 16;
	cvt.s32.s16 	%r776, %r761;
	shr.s32 	%r777, %r761, 16;
	add.s32 	%r778, %r762, %r60;
	add.s32 	%r779, %r778, %r764;
	shr.s32 	%r780, %r779, %r61;
	add.s32 	%r781, %r763, %r60;
	add.s32 	%r782, %r781, %r765;
	shr.s32 	%r783, %r782, %r61;
	add.s32 	%r784, %r766, %r60;
	add.s32 	%r785, %r784, %r768;
	shr.s32 	%r786, %r785, %r61;
	add.s32 	%r787, %r767, %r60;
	add.s32 	%r788, %r787, %r769;
	shr.s32 	%r789, %r788, %r61;
	add.s32 	%r790, %r770, %r60;
	add.s32 	%r791, %r790, %r772;
	shr.s32 	%r792, %r791, %r61;
	add.s32 	%r793, %r771, %r60;
	add.s32 	%r794, %r793, %r773;
	shr.s32 	%r795, %r794, %r61;
	add.s32 	%r796, %r774, %r60;
	add.s32 	%r797, %r796, %r776;
	shr.s32 	%r798, %r797, %r61;
	add.s32 	%r799, %r775, %r60;
	add.s32 	%r800, %r799, %r777;
	shr.s32 	%r801, %r800, %r61;
	max.s32 	%r802, %r780, -7;
	min.s32 	%r741, %r802, 7;
	max.s32 	%r803, %r783, -7;
	min.s32 	%r748, %r803, 7;
	max.s32 	%r804, %r786, -7;
	min.s32 	%r740, %r804, 7;
	max.s32 	%r805, %r789, -7;
	min.s32 	%r747, %r805, 7;
	max.s32 	%r806, %r792, -7;
	min.s32 	%r738, %r806, 7;
	max.s32 	%r807, %r795, -7;
	min.s32 	%r745, %r807, 7;
	max.s32 	%r808, %r798, -7;
	min.s32 	%r737, %r808, 7;
	max.s32 	%r809, %r801, -7;
	min.s32 	%r744, %r809, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r736, %r737, %r738, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r739, %r740, %r741, %r736;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r743, %r744, %r745, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r746, %r747, %r748, %r743;
	// end inline asm
	shl.b32 	%r753, %r746, 4;
	// begin inline asm
	lop3.b32 %r820, %r451, %r739, %r753, 202;
	// end inline asm
	setp.eq.s32 	%p25, %r890, 0;
	selp.b32 	%r895, %r820, %r895, %p25;
	selp.b32 	%r896, %r820, %r896, %p25;
	setp.eq.s32 	%p26, %r890, 32;
	selp.b32 	%r891, %r820, %r891, %p26;
	selp.b32 	%r892, %r820, %r892, %p26;
	setp.eq.s32 	%p27, %r890, 64;
	selp.b32 	%r893, %r820, %r893, %p27;
	selp.b32 	%r894, %r820, %r894, %p27;
	add.s32 	%r26, %r890, 32;
	setp.ne.s32 	%p28, %r890, 96;
	mov.u32 	%r890, %r26;
	@%p28 bra 	$L__BB0_11;
// %bb.14:                              // %L8922
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p29, %r62, 0;
	// begin inline asm
	prmt.b32 %r810, %r895, %r891, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r814, %r896, %r892, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r818, %r893, %r820, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r894, %r820, %r204;
	// end inline asm
	selp.b32 	%r858, %r814, %r810, %p29;
	shfl.sync.bfly.b32	%r859, %r858, 1, 31, -1;
	selp.b32 	%r827, %r810, %r859, %p29;
	selp.b32 	%r828, %r859, %r814, %p29;
	selp.b32 	%r860, %r822, %r818, %p29;
	shfl.sync.bfly.b32	%r861, %r860, 1, 31, -1;
	selp.b32 	%r835, %r818, %r861, %p29;
	selp.b32 	%r836, %r861, %r822, %p29;
	// begin inline asm
	prmt.b32 %r826, %r827, %r828, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r830, %r827, %r828, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r834, %r835, %r836, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r838, %r835, %r836, %r204;
	// end inline asm
	selp.b32 	%r862, %r834, %r826, %p9;
	shfl.sync.bfly.b32	%r863, %r862, 2, 31, -1;
	selp.b32 	%r843, %r826, %r863, %p9;
	selp.b32 	%r844, %r863, %r834, %p9;
	selp.b32 	%r864, %r838, %r830, %p9;
	shfl.sync.bfly.b32	%r865, %r864, 2, 31, -1;
	selp.b32 	%r851, %r830, %r865, %p9;
	selp.b32 	%r852, %r865, %r838, %p9;
	// begin inline asm
	prmt.b32 %r842, %r843, %r844, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r846, %r843, %r844, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r850, %r851, %r852, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r854, %r851, %r852, %r140;
	// end inline asm
	selp.b32 	%r866, %r850, %r842, %p10;
	shfl.sync.bfly.b32	%r867, %r866, 4, 31, -1;
	selp.b32 	%r868, %r842, %r867, %p10;
	selp.b32 	%r869, %r867, %r850, %p10;
	selp.b32 	%r870, %r854, %r846, %p10;
	shfl.sync.bfly.b32	%r871, %r870, 4, 31, -1;
	selp.b32 	%r872, %r846, %r871, %p10;
	selp.b32 	%r873, %r871, %r854, %p10;
	selp.b32 	%r874, %r872, %r868, %p29;
	shfl.sync.bfly.b32	%r875, %r874, 1, 31, -1;
	selp.b32 	%r876, %r868, %r875, %p29;
	selp.b32 	%r877, %r875, %r872, %p29;
	selp.b32 	%r878, %r873, %r869, %p29;
	shfl.sync.bfly.b32	%r879, %r878, 1, 31, -1;
	selp.b32 	%r880, %r869, %r879, %p29;
	selp.b32 	%r881, %r879, %r873, %p29;
	and.b32  	%r882, %r9, 1920;
	or.b32  	%r883, %r882, %r63;
	or.b32  	%r884, %r883, %r34;
	or.b32  	%r885, %r884, %r64;
	or.b32  	%r886, %r65, %r885;
	cvt.u64.u32 	%rd67, %r886;
	add.s64 	%rd68, %rd6, %rd67;
	st.global.v4.u32 	[%rd68], {%r876, %r880, %r877, %r881};
	add.s32 	%r27, %r889, 128;
	setp.ne.s32 	%p32, %r889, 384;
	mov.u32 	%r889, %r27;
	@%p32 bra 	$L__BB0_9;
$L__BB0_15:                             // %L9324
	mov.u32 	%r887, 0;
	st.global.u32 	[%rd8], %r887;
	ret;
$L__BB0_7:                              // %L191
	mov.u32 	%r888, 2;
	st.global.u32 	[%rd8], %r888;
	mov.u64 	%rd69, exception761;
	cvta.global.u64 	%rd70, %rd69;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd70;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r66;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r66;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r66;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L410
	mov.u32 	%r76, 2;
	st.global.u32 	[%rd8], %r76;
	mov.u64 	%rd25, exception761;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r66;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
