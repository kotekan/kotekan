// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception749[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<841>;
	.reg .b64 	%rd<84>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r64, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r65, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r65, 8319;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r66, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r66, 13439;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 7;
	or.b32  	%r67, %r3, %r1;
	or.b32  	%r68, %r67, %r5;
	mul.wide.u32 	%rd20, %r68, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r69, 1;
	st.global.u32 	[%rd6], %r69;
	shr.u32 	%r6, %r1, 3;
	shl.b32 	%r7, %r2, 2;
	and.b32  	%r70, %r4, 2032;
	or.b32  	%r71, %r70, %r7;
	or.b32  	%r72, %r71, %r6;
	mul.wide.u32 	%rd21, %r72, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r8, [%rd22];
	add.s32 	%r9, %r8, -4;
	setp.lt.u32 	%p3, %r9, 31;
	@%p3 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:                              // %pass137
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r203, %r8, -3;
	shl.b32 	%r204, %r4, 9;
	and.b32  	%r205, %r204, 8192;
	shl.b32 	%r206, %r2, 8;
	shl.b32 	%r207, %r1, 6;
	and.b32  	%r208, %r207, 64;
	shl.b32 	%r209, %r1, 3;
	and.b32  	%r210, %r209, 48;
	and.b32  	%r211, %r206, 256;
	or.b32  	%r212, %r211, %r208;
	or.b32  	%r213, %r210, %r212;
	shr.u32 	%r33, %r1, 2;
	and.b32  	%r214, %r33, 6;
	and.b32  	%r215, %r7, 8;
	or.b32  	%r216, %r214, %r215;
	shl.b32 	%r217, %r216, 9;
	and.b32  	%r218, %r204, 1032192;
	or.b32  	%r219, %r205, %r213;
	or.b32  	%r220, %r219, %r217;
	or.b32  	%r221, %r220, %r218;
	cvt.u64.u32 	%rd25, %r221;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r75, %r76, %r83, %r84}, [%rd26];
	and.b32  	%r222, %r5, 2048;
	shl.b32 	%r223, %r2, 6;
	and.b32  	%r224, %r223, 64;
	shl.b32 	%r225, %r1, 4;
	and.b32  	%r226, %r225, 16;
	or.b32  	%r227, %r224, %r226;
	shl.b32 	%r228, %r1, 1;
	and.b32  	%r229, %r228, 12;
	or.b32  	%r230, %r229, %r227;
	or.b32  	%r231, %r230, %r222;
	shl.b32 	%r232, %r216, 7;
	and.b32  	%r233, %r5, 258048;
	or.b32  	%r234, %r233, %r232;
	or.b32  	%r235, %r231, %r234;
	or.b32  	%r236, %r235, 33;
	mul.wide.u32 	%rd27, %r236, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r91, %r92, %r99, %r100}, [%rd28+-4];
	or.b32  	%r237, %r215, %r33;
	shl.b32 	%r238, %r237, 7;
	or.b32  	%r239, %r226, %r223;
	or.b32  	%r240, %r239, %r229;
	or.b32  	%r241, %r240, %r222;
	or.b32  	%r242, %r241, %r233;
	or.b32  	%r243, %r242, %r238;
	or.b32  	%r244, %r243, 128;
	mul.wide.u32 	%rd29, %r244, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r107, %r108, %r115, %r116}, [%rd30];
	or.b32  	%r245, %r243, 160;
	add.s32 	%r246, %r245, 1;
	mul.wide.u32 	%rd31, %r246, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r123, %r124, %r131, %r132}, [%rd32+-4];
	mov.u32 	%r133, 21520;
	// begin inline asm
	prmt.b32 %r139, %r75, %r76, %r133;
	// end inline asm
	mov.u32 	%r137, 30258;
	// begin inline asm
	prmt.b32 %r140, %r75, %r76, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r83, %r84, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r148, %r83, %r84, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r155, %r91, %r92, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r156, %r91, %r92, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r163, %r99, %r100, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r164, %r99, %r100, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r171, %r107, %r108, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r172, %r107, %r108, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r179, %r115, %r116, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r180, %r115, %r116, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r187, %r123, %r124, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r188, %r123, %r124, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r195, %r131, %r132, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r196, %r131, %r132, %r137;
	// end inline asm
	mov.u32 	%r197, 25152;
	// begin inline asm
	prmt.b32 %r138, %r139, %r140, %r197;
	// end inline asm
	mov.u32 	%r201, 29521;
	// begin inline asm
	prmt.b32 %r142, %r139, %r140, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r146, %r147, %r148, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r150, %r147, %r148, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r154, %r155, %r156, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r158, %r155, %r156, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r162, %r163, %r164, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r166, %r163, %r164, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r170, %r171, %r172, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r174, %r171, %r172, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r178, %r179, %r180, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r182, %r179, %r180, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r186, %r187, %r188, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r190, %r187, %r188, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r194, %r195, %r196, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r198, %r195, %r196, %r201;
	// end inline asm
	and.b32  	%r34, %r1, 2;
	setp.eq.s32 	%p4, %r34, 0;
	selp.b32 	%r247, %r154, %r138, %p4;
	shfl.sync.bfly.b32	%r248, %r247, 2, 31, -1;
	selp.b32 	%r249, %r138, %r248, %p4;
	selp.b32 	%r250, %r248, %r154, %p4;
	selp.b32 	%r251, %r158, %r142, %p4;
	shfl.sync.bfly.b32	%r252, %r251, 2, 31, -1;
	selp.b32 	%r253, %r142, %r252, %p4;
	selp.b32 	%r254, %r252, %r158, %p4;
	selp.b32 	%r255, %r162, %r146, %p4;
	shfl.sync.bfly.b32	%r256, %r255, 2, 31, -1;
	selp.b32 	%r257, %r146, %r256, %p4;
	selp.b32 	%r258, %r256, %r162, %p4;
	selp.b32 	%r259, %r166, %r150, %p4;
	shfl.sync.bfly.b32	%r260, %r259, 2, 31, -1;
	selp.b32 	%r261, %r150, %r260, %p4;
	selp.b32 	%r262, %r260, %r166, %p4;
	selp.b32 	%r263, %r186, %r170, %p4;
	shfl.sync.bfly.b32	%r264, %r263, 2, 31, -1;
	selp.b32 	%r265, %r170, %r264, %p4;
	selp.b32 	%r266, %r264, %r186, %p4;
	selp.b32 	%r267, %r190, %r174, %p4;
	shfl.sync.bfly.b32	%r268, %r267, 2, 31, -1;
	selp.b32 	%r269, %r174, %r268, %p4;
	selp.b32 	%r270, %r268, %r190, %p4;
	selp.b32 	%r271, %r194, %r178, %p4;
	shfl.sync.bfly.b32	%r272, %r271, 2, 31, -1;
	selp.b32 	%r273, %r178, %r272, %p4;
	selp.b32 	%r274, %r272, %r194, %p4;
	selp.b32 	%r275, %r198, %r182, %p4;
	shfl.sync.bfly.b32	%r276, %r275, 2, 31, -1;
	selp.b32 	%r277, %r182, %r276, %p4;
	selp.b32 	%r278, %r276, %r198, %p4;
	and.b32  	%r35, %r1, 4;
	setp.eq.s32 	%p5, %r35, 0;
	selp.b32 	%r279, %r265, %r249, %p5;
	shfl.sync.bfly.b32	%r280, %r279, 4, 31, -1;
	selp.b32 	%r36, %r249, %r280, %p5;
	selp.b32 	%r37, %r280, %r265, %p5;
	selp.b32 	%r281, %r269, %r253, %p5;
	shfl.sync.bfly.b32	%r282, %r281, 4, 31, -1;
	selp.b32 	%r38, %r253, %r282, %p5;
	selp.b32 	%r39, %r282, %r269, %p5;
	selp.b32 	%r283, %r273, %r257, %p5;
	shfl.sync.bfly.b32	%r284, %r283, 4, 31, -1;
	selp.b32 	%r40, %r257, %r284, %p5;
	selp.b32 	%r41, %r284, %r273, %p5;
	selp.b32 	%r285, %r277, %r261, %p5;
	shfl.sync.bfly.b32	%r286, %r285, 4, 31, -1;
	selp.b32 	%r42, %r261, %r286, %p5;
	selp.b32 	%r43, %r286, %r277, %p5;
	selp.b32 	%r287, %r266, %r250, %p5;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r44, %r250, %r288, %p5;
	selp.b32 	%r45, %r288, %r266, %p5;
	selp.b32 	%r289, %r270, %r254, %p5;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r46, %r254, %r290, %p5;
	selp.b32 	%r47, %r290, %r270, %p5;
	selp.b32 	%r291, %r274, %r258, %p5;
	shfl.sync.bfly.b32	%r292, %r291, 4, 31, -1;
	selp.b32 	%r48, %r258, %r292, %p5;
	selp.b32 	%r49, %r292, %r274, %p5;
	selp.b32 	%r293, %r278, %r262, %p5;
	shfl.sync.bfly.b32	%r294, %r293, 4, 31, -1;
	selp.b32 	%r50, %r262, %r294, %p5;
	selp.b32 	%r51, %r294, %r278, %p5;
	shl.b32 	%r295, %r4, 2;
	shl.b32 	%r296, %r1, 2;
	and.b32  	%r297, %r296, 28;
	shl.b32 	%r298, %r2, 1;
	and.b32  	%r52, %r298, 4;
	shl.b32 	%r299, %r4, 11;
	and.b32  	%r53, %r299, 30720;
	and.b32  	%r300, %r3, 32;
	or.b32  	%r54, %r300, %r297;
	and.b32  	%r55, %r295, 8128;
	and.b32  	%r301, %r209, 24;
	or.b32  	%r56, %r300, %r301;
	and.b32  	%r302, %r2, 1;
	neg.s32 	%r303, %r302;
	and.b32  	%r304, %r303, 640;
	and.b32  	%r57, %r228, 6;
	or.b32  	%r58, %r237, %r304;
	or.b32  	%r305, %r6, %r7;
	and.b32  	%r306, %r1, 7;
	or.b32  	%r307, %r305, 640;
	shl.b32 	%r59, %r69, %r9;
	min.u32 	%r60, %r203, 31;
	and.b32  	%r61, %r1, 1;
	shl.b32 	%r309, %r2, 22;
	shl.b32 	%r310, %r1, 17;
	and.b32  	%r311, %r310, 3145728;
	or.b32  	%r312, %r311, %r309;
	shl.b32 	%r313, %r1, 5;
	and.b32  	%r314, %r313, 64;
	and.b32  	%r315, %r209, 32;
	or.b32  	%r316, %r226, %r314;
	or.b32  	%r317, %r316, %r315;
	and.b32  	%r318, %r204, 1040384;
	or.b32  	%r62, %r312, %r318;
	or.b32  	%r319, %r1, 24;
	or.b32  	%r63, %r317, %r53;
	mul.lo.s32 	%r320, %r319, 20;
	add.s32 	%r321, %r320, %r307;
	mul.wide.u32 	%rd33, %r321, 4;
	mov.u64 	%rd34, shmem;
	add.s64 	%rd35, %rd34, 8320;
	add.s64 	%rd7, %rd35, %rd33;
	mul.lo.s32 	%r322, %r306, 20;
	add.s32 	%r323, %r322, %r305;
	mul.wide.u32 	%rd36, %r323, 4;
	add.s64 	%rd8, %rd35, %rd36;
	add.s32 	%r324, %r322, %r307;
	mul.wide.u32 	%rd37, %r324, 4;
	add.s64 	%rd9, %rd35, %rd37;
	add.s32 	%r325, %r322, 160;
	add.s32 	%r326, %r325, %r305;
	mul.wide.u32 	%rd38, %r326, 4;
	add.s64 	%rd10, %rd35, %rd38;
	add.s32 	%r327, %r325, %r307;
	mul.wide.u32 	%rd39, %r327, 4;
	add.s64 	%rd11, %rd35, %rd39;
	add.s32 	%r328, %r322, 320;
	add.s32 	%r329, %r328, %r305;
	mul.wide.u32 	%rd40, %r329, 4;
	add.s64 	%rd12, %rd35, %rd40;
	add.s32 	%r330, %r328, %r307;
	mul.wide.u32 	%rd41, %r330, 4;
	add.s64 	%rd13, %rd35, %rd41;
	add.s32 	%r331, %r320, %r305;
	mul.wide.u32 	%rd42, %r331, 4;
	add.s64 	%rd14, %rd35, %rd42;
	mov.u32 	%r202, 0;
	mov.u32 	%r832, %r202;
$L__BB0_7:                              // %L1378
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	or.b32  	%r11, %r832, %r6;
	or.b32  	%r12, %r11, 8;
	or.b32  	%r13, %r11, 16;
	or.b32  	%r14, %r11, 24;
	mov.u32 	%r833, %r202;
	mov.u32 	%r834, %r202;
	mov.u32 	%r835, %r202;
	mov.u32 	%r836, %r202;
	mov.u32 	%r837, %r202;
	mov.u32 	%r838, %r202;
	mov.u32 	%r839, %r202;
$L__BB0_8:                              // %L1381
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	add.s32 	%r334, %r11, %r833;
	or.b32  	%r335, %r334, %r52;
	add.s32 	%r336, %r335, %r53;
	shl.b32 	%r337, %r336, 13;
	and.b32  	%r338, %r337, 268427264;
	or.b32  	%r339, %r338, %r55;
	or.b32  	%r340, %r339, %r54;
	shl.b32 	%r341, %r340, 2;
	cvt.u64.u32 	%rd43, %r341;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.v4.u32 	{%r342, %r343, %r344, %r345}, [%rd44];
	add.s32 	%r346, %r833, %r12;
	or.b32  	%r347, %r346, %r52;
	add.s32 	%r348, %r347, %r53;
	shl.b32 	%r349, %r348, 13;
	and.b32  	%r350, %r349, 268427264;
	or.b32  	%r351, %r350, %r55;
	or.b32  	%r352, %r351, %r54;
	shl.b32 	%r353, %r352, 2;
	cvt.u64.u32 	%rd45, %r353;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.v4.u32 	{%r354, %r355, %r356, %r357}, [%rd46];
	add.s32 	%r358, %r833, %r13;
	or.b32  	%r359, %r358, %r52;
	add.s32 	%r360, %r359, %r53;
	shl.b32 	%r361, %r360, 13;
	and.b32  	%r362, %r361, 268427264;
	or.b32  	%r363, %r362, %r55;
	or.b32  	%r364, %r363, %r54;
	shl.b32 	%r365, %r364, 2;
	cvt.u64.u32 	%rd47, %r365;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.v4.u32 	{%r366, %r367, %r368, %r369}, [%rd48];
	add.s32 	%r370, %r833, %r14;
	or.b32  	%r371, %r370, %r52;
	add.s32 	%r372, %r371, %r53;
	shl.b32 	%r373, %r372, 13;
	and.b32  	%r374, %r373, 268427264;
	or.b32  	%r375, %r374, %r55;
	or.b32  	%r376, %r375, %r54;
	shl.b32 	%r377, %r376, 2;
	cvt.u64.u32 	%rd49, %r377;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.v4.u32 	{%r378, %r379, %r380, %r381}, [%rd50];
	and.b32  	%r382, %r336, 31;
	mul.lo.s32 	%r383, %r382, 65;
	add.s32 	%r384, %r54, %r383;
	mul.wide.u32 	%rd51, %r384, 4;
	add.s64 	%rd53, %rd34, %rd51;
	st.shared.u32 	[%rd53], %r342;
	cvt.u64.u32 	%rd54, %r383;
	cvt.u64.u32 	%rd55, %r54;
	add.s64 	%rd56, %rd55, %rd54;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd58, %rd34, %rd57;
	st.shared.u32 	[%rd58+4], %r343;
	st.shared.u32 	[%rd58+8], %r344;
	st.shared.u32 	[%rd58+12], %r345;
	and.b32  	%r385, %r348, 31;
	mul.lo.s32 	%r386, %r385, 65;
	add.s32 	%r387, %r54, %r386;
	mul.wide.u32 	%rd59, %r387, 4;
	add.s64 	%rd60, %rd34, %rd59;
	st.shared.u32 	[%rd60], %r354;
	cvt.u64.u32 	%rd61, %r386;
	add.s64 	%rd62, %rd55, %rd61;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd64, %rd34, %rd63;
	st.shared.u32 	[%rd64+4], %r355;
	st.shared.u32 	[%rd64+8], %r356;
	st.shared.u32 	[%rd64+12], %r357;
	and.b32  	%r388, %r360, 31;
	mul.lo.s32 	%r389, %r388, 65;
	add.s32 	%r390, %r54, %r389;
	mul.wide.u32 	%rd65, %r390, 4;
	add.s64 	%rd66, %rd34, %rd65;
	st.shared.u32 	[%rd66], %r366;
	cvt.u64.u32 	%rd67, %r389;
	add.s64 	%rd68, %rd55, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd34, %rd69;
	st.shared.u32 	[%rd70+4], %r367;
	st.shared.u32 	[%rd70+8], %r368;
	st.shared.u32 	[%rd70+12], %r369;
	and.b32  	%r391, %r372, 31;
	mul.lo.s32 	%r392, %r391, 65;
	add.s32 	%r393, %r54, %r392;
	mul.wide.u32 	%rd71, %r393, 4;
	add.s64 	%rd72, %rd34, %rd71;
	st.shared.u32 	[%rd72], %r378;
	cvt.u64.u32 	%rd73, %r392;
	add.s64 	%rd74, %rd55, %rd73;
	shl.b64 	%rd75, %rd74, 2;
	add.s64 	%rd76, %rd34, %rd75;
	st.shared.u32 	[%rd76+4], %r379;
	st.shared.u32 	[%rd76+8], %r380;
	st.shared.u32 	[%rd76+12], %r381;
	bar.sync 	0;
	mov.u32 	%r840, %r202;
$L__BB0_9:                              // %L5194
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r656, %r840, %r33;
	mad.lo.s32 	%r657, %r656, 65, %r56;
	mul.wide.u32 	%rd77, %r657, 4;
	add.s64 	%rd79, %rd34, %rd77;
	ld.shared.u32 	%r395, [%rd79];
	mov.u32 	%r396, 134744072;
	mov.u32 	%r397, 252645135;
	// begin inline asm
	lop3.b32 %r394, %r395, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r658, %r394, 2021161080;
	xor.b32  	%r405, %r658, -2139062144;
	shr.u32 	%r399, %r395, 4;
	// begin inline asm
	lop3.b32 %r398, %r399, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r659, %r398, 2021161080;
	xor.b32  	%r411, %r659, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r402, %r403}, {%r36}, {%r405}, {%r202, %r202};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r408, %r409}, {%r38}, {%r411}, {%r202, %r202};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r414, %r415}, {%r36}, {%r411}, {%r202, %r202};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r420, %r421}, {%r38}, {%r405}, {%r414, %r415};
	// end inline asm
	ld.shared.u32 	%r427, [%rd79+4];
	// begin inline asm
	lop3.b32 %r426, %r427, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r660, %r426, 2021161080;
	xor.b32  	%r437, %r660, -2139062144;
	shr.u32 	%r431, %r427, 4;
	// begin inline asm
	lop3.b32 %r430, %r431, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r661, %r430, 2021161080;
	xor.b32  	%r443, %r661, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r434, %r435}, {%r40}, {%r437}, {%r402, %r403};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r440, %r441}, {%r42}, {%r443}, {%r408, %r409};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r446, %r447}, {%r40}, {%r443}, {%r420, %r421};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r452, %r453}, {%r42}, {%r437}, {%r446, %r447};
	// end inline asm
	ld.shared.u32 	%r459, [%rd79+8];
	// begin inline asm
	lop3.b32 %r458, %r459, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r662, %r458, 2021161080;
	xor.b32  	%r469, %r662, -2139062144;
	shr.u32 	%r463, %r459, 4;
	// begin inline asm
	lop3.b32 %r462, %r463, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r663, %r462, 2021161080;
	xor.b32  	%r475, %r663, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r466, %r467}, {%r44}, {%r469}, {%r434, %r435};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r472, %r473}, {%r46}, {%r475}, {%r440, %r441};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r478, %r479}, {%r44}, {%r475}, {%r452, %r453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r484, %r485}, {%r46}, {%r469}, {%r478, %r479};
	// end inline asm
	ld.shared.u32 	%r491, [%rd79+12];
	// begin inline asm
	lop3.b32 %r490, %r491, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r664, %r490, 2021161080;
	xor.b32  	%r501, %r664, -2139062144;
	shr.u32 	%r495, %r491, 4;
	// begin inline asm
	lop3.b32 %r494, %r495, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r665, %r494, 2021161080;
	xor.b32  	%r507, %r665, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r498, %r499}, {%r48}, {%r501}, {%r466, %r467};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r504, %r505}, {%r50}, {%r507}, {%r472, %r473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r510, %r511}, {%r48}, {%r507}, {%r484, %r485};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r516, %r517}, {%r50}, {%r501}, {%r510, %r511};
	// end inline asm
	ld.shared.u32 	%r523, [%rd79+16];
	// begin inline asm
	lop3.b32 %r522, %r523, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r666, %r522, 2021161080;
	xor.b32  	%r533, %r666, -2139062144;
	shr.u32 	%r527, %r523, 4;
	// begin inline asm
	lop3.b32 %r526, %r527, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r667, %r526, 2021161080;
	xor.b32  	%r539, %r667, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r530, %r531}, {%r37}, {%r533}, {%r498, %r499};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r536, %r537}, {%r39}, {%r539}, {%r504, %r505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r542, %r543}, {%r37}, {%r539}, {%r516, %r517};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r548, %r549}, {%r39}, {%r533}, {%r542, %r543};
	// end inline asm
	ld.shared.u32 	%r555, [%rd79+20];
	// begin inline asm
	lop3.b32 %r554, %r555, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r668, %r554, 2021161080;
	xor.b32  	%r565, %r668, -2139062144;
	shr.u32 	%r559, %r555, 4;
	// begin inline asm
	lop3.b32 %r558, %r559, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r669, %r558, 2021161080;
	xor.b32  	%r571, %r669, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r562, %r563}, {%r41}, {%r565}, {%r530, %r531};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r568, %r569}, {%r43}, {%r571}, {%r536, %r537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r574, %r575}, {%r41}, {%r571}, {%r548, %r549};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r580, %r581}, {%r43}, {%r565}, {%r574, %r575};
	// end inline asm
	ld.shared.u32 	%r587, [%rd79+24];
	// begin inline asm
	lop3.b32 %r586, %r587, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r670, %r586, 2021161080;
	xor.b32  	%r597, %r670, -2139062144;
	shr.u32 	%r591, %r587, 4;
	// begin inline asm
	lop3.b32 %r590, %r591, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r671, %r590, 2021161080;
	xor.b32  	%r603, %r671, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r594, %r595}, {%r45}, {%r597}, {%r562, %r563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r600, %r601}, {%r47}, {%r603}, {%r568, %r569};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r606, %r607}, {%r45}, {%r603}, {%r580, %r581};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r612, %r613}, {%r47}, {%r597}, {%r606, %r607};
	// end inline asm
	ld.shared.u32 	%r619, [%rd79+28];
	// begin inline asm
	lop3.b32 %r618, %r619, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r672, %r618, 2021161080;
	xor.b32  	%r629, %r672, -2139062144;
	shr.u32 	%r623, %r619, 4;
	// begin inline asm
	lop3.b32 %r622, %r623, %r396, %r397, 40;
	// end inline asm
	add.s32 	%r673, %r622, 2021161080;
	xor.b32  	%r635, %r673, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r626, %r627}, {%r49}, {%r629}, {%r594, %r595};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r632, %r633}, {%r51}, {%r635}, {%r600, %r601};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r638, %r639}, {%r49}, {%r635}, {%r612, %r613};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r644, %r645}, {%r51}, {%r629}, {%r638, %r639};
	// end inline asm
	sub.s32 	%r674, %r626, %r632;
	add.s32 	%r675, %r674, 4;
	shr.s32 	%r652, %r675, 3;
	add.s32 	%r676, %r644, 4;
	shr.s32 	%r651, %r676, 3;
	sub.s32 	%r677, %r627, %r633;
	add.s32 	%r678, %r677, 4;
	shr.s32 	%r655, %r678, 3;
	add.s32 	%r679, %r645, 4;
	shr.s32 	%r654, %r679, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r650, %r651, %r652;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r653, %r654, %r655;
	// end inline asm
	or.b32  	%r680, %r57, %r840;
	mad.lo.s32 	%r681, %r680, 20, %r58;
	mul.wide.u32 	%rd80, %r681, 4;
	add.s64 	%rd81, %rd34, %rd80;
	st.shared.u32 	[%rd81+8320], %r650;
	st.shared.u32 	[%rd81+8400], %r653;
	add.s32 	%r840, %r840, 8;
	setp.ne.s32 	%p6, %r840, 32;
	@%p6 bra 	$L__BB0_9;
// %bb.10:                              // %L7284
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r700, [%rd8];
	ld.shared.u32 	%r701, [%rd9];
	ld.shared.u32 	%r702, [%rd10];
	ld.shared.u32 	%r703, [%rd11];
	ld.shared.u32 	%r704, [%rd12];
	ld.shared.u32 	%r705, [%rd13];
	ld.shared.u32 	%r706, [%rd14];
	ld.shared.u32 	%r707, [%rd7];
	cvt.s32.s16 	%r708, %r700;
	shr.s32 	%r709, %r700, 16;
	cvt.s32.s16 	%r710, %r701;
	shr.s32 	%r711, %r701, 16;
	cvt.s32.s16 	%r712, %r702;
	shr.s32 	%r713, %r702, 16;
	cvt.s32.s16 	%r714, %r703;
	shr.s32 	%r715, %r703, 16;
	cvt.s32.s16 	%r716, %r704;
	shr.s32 	%r717, %r704, 16;
	cvt.s32.s16 	%r718, %r705;
	shr.s32 	%r719, %r705, 16;
	cvt.s32.s16 	%r720, %r706;
	shr.s32 	%r721, %r706, 16;
	cvt.s32.s16 	%r722, %r707;
	shr.s32 	%r723, %r707, 16;
	add.s32 	%r724, %r708, %r59;
	add.s32 	%r725, %r724, %r710;
	shr.s32 	%r726, %r725, %r60;
	add.s32 	%r727, %r709, %r59;
	add.s32 	%r728, %r727, %r711;
	shr.s32 	%r729, %r728, %r60;
	add.s32 	%r730, %r712, %r59;
	add.s32 	%r731, %r730, %r714;
	shr.s32 	%r732, %r731, %r60;
	add.s32 	%r733, %r713, %r59;
	add.s32 	%r734, %r733, %r715;
	shr.s32 	%r735, %r734, %r60;
	add.s32 	%r736, %r716, %r59;
	add.s32 	%r737, %r736, %r718;
	shr.s32 	%r738, %r737, %r60;
	add.s32 	%r739, %r717, %r59;
	add.s32 	%r740, %r739, %r719;
	shr.s32 	%r741, %r740, %r60;
	add.s32 	%r742, %r720, %r59;
	add.s32 	%r743, %r742, %r722;
	shr.s32 	%r744, %r743, %r60;
	add.s32 	%r745, %r721, %r59;
	add.s32 	%r746, %r745, %r723;
	shr.s32 	%r747, %r746, %r60;
	max.s32 	%r748, %r726, -7;
	min.s32 	%r687, %r748, 7;
	max.s32 	%r749, %r729, -7;
	min.s32 	%r694, %r749, 7;
	max.s32 	%r750, %r732, -7;
	min.s32 	%r686, %r750, 7;
	max.s32 	%r751, %r735, -7;
	min.s32 	%r693, %r751, 7;
	max.s32 	%r752, %r738, -7;
	min.s32 	%r684, %r752, 7;
	max.s32 	%r753, %r741, -7;
	min.s32 	%r691, %r753, 7;
	max.s32 	%r754, %r744, -7;
	min.s32 	%r683, %r754, 7;
	max.s32 	%r755, %r747, -7;
	min.s32 	%r690, %r755, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r682, %r683, %r684, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r685, %r686, %r687, %r682;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r689, %r690, %r691, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r692, %r693, %r694, %r689;
	// end inline asm
	shl.b32 	%r699, %r692, 4;
	// begin inline asm
	lop3.b32 %r766, %r397, %r685, %r699, 202;
	// end inline asm
	setp.eq.s32 	%p7, %r833, 0;
	selp.b32 	%r838, %r766, %r838, %p7;
	selp.b32 	%r839, %r766, %r839, %p7;
	setp.eq.s32 	%p8, %r833, 32;
	selp.b32 	%r834, %r766, %r834, %p8;
	selp.b32 	%r835, %r766, %r835, %p8;
	setp.eq.s32 	%p9, %r833, 64;
	selp.b32 	%r836, %r766, %r836, %p9;
	selp.b32 	%r837, %r766, %r837, %p9;
	add.s32 	%r31, %r833, 32;
	setp.ne.s32 	%p10, %r833, 96;
	mov.u32 	%r833, %r31;
	@%p10 bra 	$L__BB0_8;
// %bb.11:                              // %L8718
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p11, %r61, 0;
	// begin inline asm
	prmt.b32 %r756, %r838, %r834, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r839, %r835, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r836, %r766, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r768, %r837, %r766, %r201;
	// end inline asm
	selp.b32 	%r804, %r760, %r756, %p11;
	shfl.sync.bfly.b32	%r805, %r804, 1, 31, -1;
	selp.b32 	%r773, %r756, %r805, %p11;
	selp.b32 	%r774, %r805, %r760, %p11;
	selp.b32 	%r806, %r768, %r764, %p11;
	shfl.sync.bfly.b32	%r807, %r806, 1, 31, -1;
	selp.b32 	%r781, %r764, %r807, %p11;
	selp.b32 	%r782, %r807, %r768, %p11;
	// begin inline asm
	prmt.b32 %r772, %r773, %r774, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r773, %r774, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r781, %r782, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r781, %r782, %r201;
	// end inline asm
	selp.b32 	%r808, %r780, %r772, %p4;
	shfl.sync.bfly.b32	%r809, %r808, 2, 31, -1;
	selp.b32 	%r789, %r772, %r809, %p4;
	selp.b32 	%r790, %r809, %r780, %p4;
	selp.b32 	%r810, %r784, %r776, %p4;
	shfl.sync.bfly.b32	%r811, %r810, 2, 31, -1;
	selp.b32 	%r797, %r776, %r811, %p4;
	selp.b32 	%r798, %r811, %r784, %p4;
	// begin inline asm
	prmt.b32 %r788, %r789, %r790, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r789, %r790, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r797, %r798, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r797, %r798, %r137;
	// end inline asm
	selp.b32 	%r812, %r796, %r788, %p5;
	shfl.sync.bfly.b32	%r813, %r812, 4, 31, -1;
	selp.b32 	%r814, %r788, %r813, %p5;
	selp.b32 	%r815, %r813, %r796, %p5;
	selp.b32 	%r816, %r800, %r792, %p5;
	shfl.sync.bfly.b32	%r817, %r816, 4, 31, -1;
	selp.b32 	%r818, %r792, %r817, %p5;
	selp.b32 	%r819, %r817, %r800, %p5;
	selp.b32 	%r820, %r818, %r814, %p11;
	shfl.sync.bfly.b32	%r821, %r820, 1, 31, -1;
	selp.b32 	%r822, %r814, %r821, %p11;
	selp.b32 	%r823, %r821, %r818, %p11;
	selp.b32 	%r824, %r819, %r815, %p11;
	shfl.sync.bfly.b32	%r825, %r824, 1, 31, -1;
	selp.b32 	%r826, %r815, %r825, %p11;
	selp.b32 	%r827, %r825, %r819, %p11;
	add.s32 	%r828, %r63, %r832;
	shr.u32 	%r829, %r828, 2;
	add.s32 	%r830, %r62, %r829;
	mul.wide.u32 	%rd82, %r830, 4;
	add.s64 	%rd83, %rd4, %rd82;
	st.global.v4.u32 	[%rd83], {%r822, %r826, %r823, %r827};
	add.s32 	%r32, %r832, 128;
	setp.ne.s32 	%p14, %r832, 1920;
	mov.u32 	%r832, %r32;
	@%p14 bra 	$L__BB0_7;
// %bb.12:                              // %L9122
	mov.u32 	%r831, 0;
	st.global.u32 	[%rd6], %r831;
	ret;
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L25
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_5:                              // %L254
	mov.u32 	%r73, 2;
	st.global.u32 	[%rd6], %r73;
	mov.u64 	%rd23, exception749;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
