// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception749[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<837>;
	.reg .b64 	%rd<84>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r68, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r69, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r69, 8319;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r70, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r70, 13439;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 7;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r71, %r2, %r3;
	or.b32  	%r72, %r71, %r5;
	mul.wide.u32 	%rd20, %r72, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r73, 1;
	st.global.u32 	[%rd6], %r73;
	shr.u32 	%r6, %r3, 3;
	shl.b32 	%r7, %r4, 2;
	or.b32  	%r8, %r6, %r7;
	and.b32  	%r74, %r1, 2032;
	or.b32  	%r75, %r8, %r74;
	mul.wide.u32 	%rd21, %r75, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r9, [%rd22];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:                              // %pass137
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r206, %r9, -3;
	shl.b32 	%r207, %r1, 9;
	and.b32  	%r208, %r207, 1032192;
	and.b32  	%r209, %r7, 8;
	shr.u32 	%r34, %r3, 2;
	and.b32  	%r210, %r34, 6;
	or.b32  	%r211, %r209, %r210;
	shl.b32 	%r212, %r211, 9;
	shl.b32 	%r213, %r3, 3;
	and.b32  	%r214, %r213, 48;
	shl.b32 	%r215, %r3, 6;
	and.b32  	%r216, %r215, 64;
	shl.b32 	%r217, %r4, 8;
	and.b32  	%r218, %r217, 256;
	and.b32  	%r219, %r207, 8192;
	or.b32  	%r220, %r218, %r216;
	or.b32  	%r221, %r220, %r214;
	or.b32  	%r222, %r221, %r208;
	or.b32  	%r223, %r222, %r219;
	or.b32  	%r224, %r223, %r212;
	cvt.u64.u32 	%rd25, %r224;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r78, %r79, %r86, %r87}, [%rd26];
	or.b32  	%r225, %r220, %r208;
	or.b32  	%r226, %r225, %r214;
	or.b32  	%r227, %r226, %r219;
	or.b32  	%r228, %r227, %r212;
	cvt.u64.u32 	%rd27, %r228;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r94, %r95, %r102, %r103}, [%rd28+128];
	and.b32  	%r229, %r2, 258048;
	or.b32  	%r230, %r209, %r34;
	shl.b32 	%r231, %r230, 7;
	or.b32  	%r232, %r231, %r229;
	shl.b32 	%r233, %r3, 1;
	and.b32  	%r234, %r233, 12;
	shl.b32 	%r235, %r3, 4;
	and.b32  	%r236, %r235, 16;
	shl.b32 	%r237, %r4, 6;
	and.b32  	%r238, %r2, 2048;
	or.b32  	%r239, %r238, %r234;
	or.b32  	%r240, %r239, %r236;
	or.b32  	%r241, %r240, %r237;
	or.b32  	%r242, %r232, %r241;
	or.b32  	%r243, %r242, 128;
	mul.wide.u32 	%rd29, %r243, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r110, %r111, %r118, %r119}, [%rd30];
	or.b32  	%r244, %r242, 160;
	mul.wide.u32 	%rd31, %r244, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r126, %r127, %r134, %r135}, [%rd32];
	mov.u32 	%r136, 21520;
	// begin inline asm
	prmt.b32 %r142, %r78, %r79, %r136;
	// end inline asm
	mov.u32 	%r140, 30258;
	// begin inline asm
	prmt.b32 %r143, %r78, %r79, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r150, %r86, %r87, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r151, %r86, %r87, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r158, %r94, %r95, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r159, %r94, %r95, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r166, %r102, %r103, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r167, %r102, %r103, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r174, %r110, %r111, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r175, %r110, %r111, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r182, %r118, %r119, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r183, %r118, %r119, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r190, %r126, %r127, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r191, %r126, %r127, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r198, %r134, %r135, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r199, %r134, %r135, %r140;
	// end inline asm
	mov.u32 	%r200, 25152;
	// begin inline asm
	prmt.b32 %r141, %r142, %r143, %r200;
	// end inline asm
	mov.u32 	%r204, 29521;
	// begin inline asm
	prmt.b32 %r145, %r142, %r143, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r149, %r150, %r151, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r153, %r150, %r151, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r157, %r158, %r159, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r161, %r158, %r159, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r165, %r166, %r167, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r169, %r166, %r167, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r173, %r174, %r175, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r177, %r174, %r175, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r181, %r182, %r183, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r185, %r182, %r183, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r189, %r190, %r191, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r193, %r190, %r191, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r197, %r198, %r199, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r201, %r198, %r199, %r204;
	// end inline asm
	and.b32  	%r35, %r3, 2;
	setp.eq.s32 	%p4, %r35, 0;
	selp.b32 	%r245, %r157, %r141, %p4;
	shfl.sync.bfly.b32	%r246, %r245, 2, 31, -1;
	selp.b32 	%r247, %r141, %r246, %p4;
	selp.b32 	%r248, %r246, %r157, %p4;
	selp.b32 	%r249, %r161, %r145, %p4;
	shfl.sync.bfly.b32	%r250, %r249, 2, 31, -1;
	selp.b32 	%r251, %r145, %r250, %p4;
	selp.b32 	%r252, %r250, %r161, %p4;
	selp.b32 	%r253, %r165, %r149, %p4;
	shfl.sync.bfly.b32	%r254, %r253, 2, 31, -1;
	selp.b32 	%r255, %r149, %r254, %p4;
	selp.b32 	%r256, %r254, %r165, %p4;
	selp.b32 	%r257, %r169, %r153, %p4;
	shfl.sync.bfly.b32	%r258, %r257, 2, 31, -1;
	selp.b32 	%r259, %r153, %r258, %p4;
	selp.b32 	%r260, %r258, %r169, %p4;
	selp.b32 	%r261, %r189, %r173, %p4;
	shfl.sync.bfly.b32	%r262, %r261, 2, 31, -1;
	selp.b32 	%r263, %r173, %r262, %p4;
	selp.b32 	%r264, %r262, %r189, %p4;
	selp.b32 	%r265, %r193, %r177, %p4;
	shfl.sync.bfly.b32	%r266, %r265, 2, 31, -1;
	selp.b32 	%r267, %r177, %r266, %p4;
	selp.b32 	%r268, %r266, %r193, %p4;
	selp.b32 	%r269, %r197, %r181, %p4;
	shfl.sync.bfly.b32	%r270, %r269, 2, 31, -1;
	selp.b32 	%r271, %r181, %r270, %p4;
	selp.b32 	%r272, %r270, %r197, %p4;
	selp.b32 	%r273, %r201, %r185, %p4;
	shfl.sync.bfly.b32	%r274, %r273, 2, 31, -1;
	selp.b32 	%r275, %r185, %r274, %p4;
	selp.b32 	%r276, %r274, %r201, %p4;
	and.b32  	%r36, %r3, 4;
	setp.eq.s32 	%p5, %r36, 0;
	selp.b32 	%r277, %r263, %r247, %p5;
	shfl.sync.bfly.b32	%r278, %r277, 4, 31, -1;
	selp.b32 	%r37, %r247, %r278, %p5;
	selp.b32 	%r38, %r278, %r263, %p5;
	selp.b32 	%r279, %r267, %r251, %p5;
	shfl.sync.bfly.b32	%r280, %r279, 4, 31, -1;
	selp.b32 	%r39, %r251, %r280, %p5;
	selp.b32 	%r40, %r280, %r267, %p5;
	selp.b32 	%r281, %r271, %r255, %p5;
	shfl.sync.bfly.b32	%r282, %r281, 4, 31, -1;
	selp.b32 	%r41, %r255, %r282, %p5;
	selp.b32 	%r42, %r282, %r271, %p5;
	selp.b32 	%r283, %r275, %r259, %p5;
	shfl.sync.bfly.b32	%r284, %r283, 4, 31, -1;
	selp.b32 	%r43, %r259, %r284, %p5;
	selp.b32 	%r44, %r284, %r275, %p5;
	selp.b32 	%r285, %r264, %r248, %p5;
	shfl.sync.bfly.b32	%r286, %r285, 4, 31, -1;
	selp.b32 	%r45, %r248, %r286, %p5;
	selp.b32 	%r46, %r286, %r264, %p5;
	selp.b32 	%r287, %r268, %r252, %p5;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r47, %r252, %r288, %p5;
	selp.b32 	%r48, %r288, %r268, %p5;
	selp.b32 	%r289, %r272, %r256, %p5;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r49, %r256, %r290, %p5;
	selp.b32 	%r50, %r290, %r272, %p5;
	selp.b32 	%r291, %r276, %r260, %p5;
	shfl.sync.bfly.b32	%r292, %r291, 4, 31, -1;
	selp.b32 	%r51, %r260, %r292, %p5;
	selp.b32 	%r52, %r292, %r276, %p5;
	shl.b32 	%r293, %r3, 2;
	and.b32  	%r294, %r293, 28;
	and.b32  	%r295, %r5, 32;
	or.b32  	%r53, %r295, %r294;
	shl.b32 	%r296, %r1, 2;
	and.b32  	%r297, %r296, 8064;
	shl.b32 	%r298, %r4, 1;
	shl.b32 	%r299, %r1, 11;
	or.b32  	%r300, %r299, %r298;
	and.b32  	%r301, %r299, 30720;
	and.b32  	%r54, %r300, 30724;
	and.b32  	%r55, %r296, 64;
	or.b32  	%r56, %r297, %r53;
	or.b32  	%r57, %r54, 8;
	or.b32  	%r58, %r54, 16;
	or.b32  	%r59, %r54, 24;
	and.b32  	%r302, %r213, 24;
	or.b32  	%r60, %r302, %r295;
	and.b32  	%r303, %r4, 1;
	neg.s32 	%r304, %r303;
	and.b32  	%r305, %r304, 640;
	and.b32  	%r61, %r233, 6;
	or.b32  	%r62, %r230, %r305;
	and.b32  	%r306, %r3, 7;
	or.b32  	%r307, %r8, 640;
	shl.b32 	%r63, %r73, %r10;
	min.u32 	%r64, %r206, 31;
	and.b32  	%r65, %r3, 1;
	shl.b32 	%r309, %r4, 22;
	shl.b32 	%r310, %r3, 17;
	and.b32  	%r311, %r310, 3145728;
	shl.b32 	%r312, %r3, 5;
	and.b32  	%r313, %r312, 64;
	and.b32  	%r314, %r213, 32;
	or.b32  	%r315, %r313, %r236;
	or.b32  	%r316, %r311, %r309;
	or.b32  	%r317, %r316, %r208;
	or.b32  	%r66, %r317, %r219;
	or.b32  	%r318, %r3, 24;
	or.b32  	%r319, %r315, %r301;
	or.b32  	%r67, %r319, %r314;
	mul.lo.s32 	%r320, %r318, 20;
	add.s32 	%r321, %r307, %r320;
	mul.wide.u32 	%rd33, %r321, 4;
	mov.u64 	%rd34, shmem;
	add.s64 	%rd35, %rd34, 8320;
	add.s64 	%rd7, %rd35, %rd33;
	mul.lo.s32 	%r322, %r306, 20;
	add.s32 	%r323, %r322, %r8;
	mul.wide.u32 	%rd36, %r323, 4;
	add.s64 	%rd8, %rd35, %rd36;
	add.s32 	%r324, %r307, %r322;
	mul.wide.u32 	%rd37, %r324, 4;
	add.s64 	%rd9, %rd35, %rd37;
	add.s32 	%r325, %r322, 160;
	add.s32 	%r326, %r325, %r8;
	mul.wide.u32 	%rd38, %r326, 4;
	add.s64 	%rd10, %rd35, %rd38;
	add.s32 	%r327, %r307, %r325;
	mul.wide.u32 	%rd39, %r327, 4;
	add.s64 	%rd11, %rd35, %rd39;
	add.s32 	%r328, %r322, 320;
	add.s32 	%r329, %r328, %r8;
	mul.wide.u32 	%rd40, %r329, 4;
	add.s64 	%rd12, %rd35, %rd40;
	add.s32 	%r330, %r307, %r328;
	mul.wide.u32 	%rd41, %r330, 4;
	add.s64 	%rd13, %rd35, %rd41;
	add.s32 	%r331, %r320, %r8;
	mul.wide.u32 	%rd42, %r331, 4;
	add.s64 	%rd14, %rd35, %rd42;
	mov.u32 	%r205, 0;
	mov.u32 	%r828, %r205;
$L__BB0_7:                              // %L1378
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	add.s32 	%r12, %r54, %r828;
	add.s32 	%r13, %r57, %r828;
	add.s32 	%r14, %r58, %r828;
	add.s32 	%r15, %r59, %r828;
	mov.u32 	%r829, %r205;
	mov.u32 	%r830, %r205;
	mov.u32 	%r831, %r205;
	mov.u32 	%r832, %r205;
	mov.u32 	%r833, %r205;
	mov.u32 	%r834, %r205;
	mov.u32 	%r835, %r205;
$L__BB0_8:                              // %L1381
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	add.s32 	%r334, %r12, %r829;
	or.b32  	%r335, %r334, %r6;
	shl.b32 	%r336, %r335, 13;
	and.b32  	%r337, %r336, 268230656;
	or.b32  	%r338, %r337, %r56;
	or.b32  	%r339, %r338, %r55;
	shl.b32 	%r340, %r339, 2;
	cvt.u64.u32 	%rd43, %r340;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.v4.u32 	{%r341, %r342, %r343, %r344}, [%rd44];
	add.s32 	%r345, %r13, %r829;
	or.b32  	%r346, %r345, %r6;
	shl.b32 	%r347, %r346, 13;
	and.b32  	%r348, %r347, 268427264;
	or.b32  	%r349, %r348, %r56;
	or.b32  	%r350, %r349, %r55;
	shl.b32 	%r351, %r350, 2;
	cvt.u64.u32 	%rd45, %r351;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.v4.u32 	{%r352, %r353, %r354, %r355}, [%rd46];
	add.s32 	%r356, %r14, %r829;
	or.b32  	%r357, %r356, %r6;
	shl.b32 	%r358, %r357, 13;
	and.b32  	%r359, %r358, 268427264;
	or.b32  	%r360, %r359, %r56;
	or.b32  	%r361, %r360, %r55;
	shl.b32 	%r362, %r361, 2;
	cvt.u64.u32 	%rd47, %r362;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.v4.u32 	{%r363, %r364, %r365, %r366}, [%rd48];
	add.s32 	%r367, %r15, %r829;
	or.b32  	%r368, %r367, %r6;
	shl.b32 	%r369, %r368, 13;
	and.b32  	%r370, %r369, 268427264;
	or.b32  	%r371, %r370, %r56;
	or.b32  	%r372, %r371, %r55;
	shl.b32 	%r373, %r372, 2;
	cvt.u64.u32 	%rd49, %r373;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.v4.u32 	{%r374, %r375, %r376, %r377}, [%rd50];
	and.b32  	%r378, %r335, 7;
	mul.lo.s32 	%r379, %r378, 65;
	add.s32 	%r380, %r53, %r379;
	mul.wide.u32 	%rd51, %r380, 4;
	add.s64 	%rd53, %rd34, %rd51;
	st.shared.u32 	[%rd53], %r341;
	cvt.u64.u32 	%rd54, %r379;
	cvt.u64.u32 	%rd55, %r53;
	add.s64 	%rd56, %rd55, %rd54;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd58, %rd34, %rd57;
	st.shared.u32 	[%rd58+4], %r342;
	st.shared.u32 	[%rd58+8], %r343;
	st.shared.u32 	[%rd58+12], %r344;
	and.b32  	%r381, %r346, 31;
	mul.lo.s32 	%r382, %r381, 65;
	add.s32 	%r383, %r53, %r382;
	mul.wide.u32 	%rd59, %r383, 4;
	add.s64 	%rd60, %rd34, %rd59;
	st.shared.u32 	[%rd60], %r352;
	cvt.u64.u32 	%rd61, %r382;
	add.s64 	%rd62, %rd55, %rd61;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd64, %rd34, %rd63;
	st.shared.u32 	[%rd64+4], %r353;
	st.shared.u32 	[%rd64+8], %r354;
	st.shared.u32 	[%rd64+12], %r355;
	and.b32  	%r384, %r357, 31;
	mul.lo.s32 	%r385, %r384, 65;
	add.s32 	%r386, %r53, %r385;
	mul.wide.u32 	%rd65, %r386, 4;
	add.s64 	%rd66, %rd34, %rd65;
	st.shared.u32 	[%rd66], %r363;
	cvt.u64.u32 	%rd67, %r385;
	add.s64 	%rd68, %rd55, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd34, %rd69;
	st.shared.u32 	[%rd70+4], %r364;
	st.shared.u32 	[%rd70+8], %r365;
	st.shared.u32 	[%rd70+12], %r366;
	and.b32  	%r387, %r368, 31;
	mul.lo.s32 	%r388, %r387, 65;
	add.s32 	%r389, %r53, %r388;
	mul.wide.u32 	%rd71, %r389, 4;
	add.s64 	%rd72, %rd34, %rd71;
	st.shared.u32 	[%rd72], %r374;
	cvt.u64.u32 	%rd73, %r388;
	add.s64 	%rd74, %rd55, %rd73;
	shl.b64 	%rd75, %rd74, 2;
	add.s64 	%rd76, %rd34, %rd75;
	st.shared.u32 	[%rd76+4], %r375;
	st.shared.u32 	[%rd76+8], %r376;
	st.shared.u32 	[%rd76+12], %r377;
	bar.sync 	0;
	mov.u32 	%r836, %r205;
$L__BB0_9:                              // %L5194
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r652, %r836, %r34;
	mad.lo.s32 	%r653, %r652, 65, %r60;
	mul.wide.u32 	%rd77, %r653, 4;
	add.s64 	%rd79, %rd34, %rd77;
	ld.shared.u32 	%r391, [%rd79];
	mov.u32 	%r392, 134744072;
	mov.u32 	%r393, 252645135;
	// begin inline asm
	lop3.b32 %r390, %r391, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r654, %r390, 2021161080;
	xor.b32  	%r401, %r654, -2139062144;
	shr.u32 	%r395, %r391, 4;
	// begin inline asm
	lop3.b32 %r394, %r395, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r655, %r394, 2021161080;
	xor.b32  	%r407, %r655, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r398, %r399}, {%r37}, {%r401}, {%r205, %r205};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r404, %r405}, {%r39}, {%r407}, {%r205, %r205};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r410, %r411}, {%r37}, {%r407}, {%r205, %r205};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r416, %r417}, {%r39}, {%r401}, {%r410, %r411};
	// end inline asm
	ld.shared.u32 	%r423, [%rd79+4];
	// begin inline asm
	lop3.b32 %r422, %r423, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r656, %r422, 2021161080;
	xor.b32  	%r433, %r656, -2139062144;
	shr.u32 	%r427, %r423, 4;
	// begin inline asm
	lop3.b32 %r426, %r427, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r657, %r426, 2021161080;
	xor.b32  	%r439, %r657, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r430, %r431}, {%r41}, {%r433}, {%r398, %r399};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r436, %r437}, {%r43}, {%r439}, {%r404, %r405};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r442, %r443}, {%r41}, {%r439}, {%r416, %r417};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r448, %r449}, {%r43}, {%r433}, {%r442, %r443};
	// end inline asm
	ld.shared.u32 	%r455, [%rd79+8];
	// begin inline asm
	lop3.b32 %r454, %r455, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r658, %r454, 2021161080;
	xor.b32  	%r465, %r658, -2139062144;
	shr.u32 	%r459, %r455, 4;
	// begin inline asm
	lop3.b32 %r458, %r459, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r659, %r458, 2021161080;
	xor.b32  	%r471, %r659, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r462, %r463}, {%r45}, {%r465}, {%r430, %r431};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r468, %r469}, {%r47}, {%r471}, {%r436, %r437};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r474, %r475}, {%r45}, {%r471}, {%r448, %r449};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r480, %r481}, {%r47}, {%r465}, {%r474, %r475};
	// end inline asm
	ld.shared.u32 	%r487, [%rd79+12];
	// begin inline asm
	lop3.b32 %r486, %r487, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r660, %r486, 2021161080;
	xor.b32  	%r497, %r660, -2139062144;
	shr.u32 	%r491, %r487, 4;
	// begin inline asm
	lop3.b32 %r490, %r491, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r661, %r490, 2021161080;
	xor.b32  	%r503, %r661, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r494, %r495}, {%r49}, {%r497}, {%r462, %r463};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r500, %r501}, {%r51}, {%r503}, {%r468, %r469};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r506, %r507}, {%r49}, {%r503}, {%r480, %r481};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r512, %r513}, {%r51}, {%r497}, {%r506, %r507};
	// end inline asm
	ld.shared.u32 	%r519, [%rd79+16];
	// begin inline asm
	lop3.b32 %r518, %r519, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r662, %r518, 2021161080;
	xor.b32  	%r529, %r662, -2139062144;
	shr.u32 	%r523, %r519, 4;
	// begin inline asm
	lop3.b32 %r522, %r523, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r663, %r522, 2021161080;
	xor.b32  	%r535, %r663, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r526, %r527}, {%r38}, {%r529}, {%r494, %r495};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r532, %r533}, {%r40}, {%r535}, {%r500, %r501};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r538, %r539}, {%r38}, {%r535}, {%r512, %r513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r544, %r545}, {%r40}, {%r529}, {%r538, %r539};
	// end inline asm
	ld.shared.u32 	%r551, [%rd79+20];
	// begin inline asm
	lop3.b32 %r550, %r551, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r664, %r550, 2021161080;
	xor.b32  	%r561, %r664, -2139062144;
	shr.u32 	%r555, %r551, 4;
	// begin inline asm
	lop3.b32 %r554, %r555, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r665, %r554, 2021161080;
	xor.b32  	%r567, %r665, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r558, %r559}, {%r42}, {%r561}, {%r526, %r527};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r564, %r565}, {%r44}, {%r567}, {%r532, %r533};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r570, %r571}, {%r42}, {%r567}, {%r544, %r545};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r576, %r577}, {%r44}, {%r561}, {%r570, %r571};
	// end inline asm
	ld.shared.u32 	%r583, [%rd79+24];
	// begin inline asm
	lop3.b32 %r582, %r583, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r666, %r582, 2021161080;
	xor.b32  	%r593, %r666, -2139062144;
	shr.u32 	%r587, %r583, 4;
	// begin inline asm
	lop3.b32 %r586, %r587, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r667, %r586, 2021161080;
	xor.b32  	%r599, %r667, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r46}, {%r593}, {%r558, %r559};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r48}, {%r599}, {%r564, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r602, %r603}, {%r46}, {%r599}, {%r576, %r577};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r608, %r609}, {%r48}, {%r593}, {%r602, %r603};
	// end inline asm
	ld.shared.u32 	%r615, [%rd79+28];
	// begin inline asm
	lop3.b32 %r614, %r615, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r668, %r614, 2021161080;
	xor.b32  	%r625, %r668, -2139062144;
	shr.u32 	%r619, %r615, 4;
	// begin inline asm
	lop3.b32 %r618, %r619, %r392, %r393, 40;
	// end inline asm
	add.s32 	%r669, %r618, 2021161080;
	xor.b32  	%r631, %r669, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r50}, {%r625}, {%r590, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r52}, {%r631}, {%r596, %r597};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r634, %r635}, {%r50}, {%r631}, {%r608, %r609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r640, %r641}, {%r52}, {%r625}, {%r634, %r635};
	// end inline asm
	sub.s32 	%r670, %r622, %r628;
	add.s32 	%r671, %r670, 4;
	shr.s32 	%r648, %r671, 3;
	add.s32 	%r672, %r640, 4;
	shr.s32 	%r647, %r672, 3;
	sub.s32 	%r673, %r623, %r629;
	add.s32 	%r674, %r673, 4;
	shr.s32 	%r651, %r674, 3;
	add.s32 	%r675, %r641, 4;
	shr.s32 	%r650, %r675, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r646, %r647, %r648;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r649, %r650, %r651;
	// end inline asm
	or.b32  	%r676, %r61, %r836;
	mad.lo.s32 	%r677, %r676, 20, %r62;
	mul.wide.u32 	%rd80, %r677, 4;
	add.s64 	%rd81, %rd34, %rd80;
	st.shared.u32 	[%rd81+8320], %r646;
	st.shared.u32 	[%rd81+8400], %r649;
	add.s32 	%r836, %r836, 8;
	setp.ne.s32 	%p6, %r836, 32;
	@%p6 bra 	$L__BB0_9;
// %bb.10:                              // %L7284
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r696, [%rd8];
	ld.shared.u32 	%r697, [%rd9];
	ld.shared.u32 	%r698, [%rd10];
	ld.shared.u32 	%r699, [%rd11];
	ld.shared.u32 	%r700, [%rd12];
	ld.shared.u32 	%r701, [%rd13];
	ld.shared.u32 	%r702, [%rd14];
	ld.shared.u32 	%r703, [%rd7];
	cvt.s32.s16 	%r704, %r696;
	shr.s32 	%r705, %r696, 16;
	cvt.s32.s16 	%r706, %r697;
	shr.s32 	%r707, %r697, 16;
	cvt.s32.s16 	%r708, %r698;
	shr.s32 	%r709, %r698, 16;
	cvt.s32.s16 	%r710, %r699;
	shr.s32 	%r711, %r699, 16;
	cvt.s32.s16 	%r712, %r700;
	shr.s32 	%r713, %r700, 16;
	cvt.s32.s16 	%r714, %r701;
	shr.s32 	%r715, %r701, 16;
	cvt.s32.s16 	%r716, %r702;
	shr.s32 	%r717, %r702, 16;
	cvt.s32.s16 	%r718, %r703;
	shr.s32 	%r719, %r703, 16;
	add.s32 	%r720, %r704, %r63;
	add.s32 	%r721, %r720, %r706;
	shr.s32 	%r722, %r721, %r64;
	add.s32 	%r723, %r705, %r63;
	add.s32 	%r724, %r723, %r707;
	shr.s32 	%r725, %r724, %r64;
	add.s32 	%r726, %r708, %r63;
	add.s32 	%r727, %r726, %r710;
	shr.s32 	%r728, %r727, %r64;
	add.s32 	%r729, %r709, %r63;
	add.s32 	%r730, %r729, %r711;
	shr.s32 	%r731, %r730, %r64;
	add.s32 	%r732, %r712, %r63;
	add.s32 	%r733, %r732, %r714;
	shr.s32 	%r734, %r733, %r64;
	add.s32 	%r735, %r713, %r63;
	add.s32 	%r736, %r735, %r715;
	shr.s32 	%r737, %r736, %r64;
	add.s32 	%r738, %r716, %r63;
	add.s32 	%r739, %r738, %r718;
	shr.s32 	%r740, %r739, %r64;
	add.s32 	%r741, %r717, %r63;
	add.s32 	%r742, %r741, %r719;
	shr.s32 	%r743, %r742, %r64;
	max.s32 	%r744, %r722, -7;
	min.s32 	%r683, %r744, 7;
	max.s32 	%r745, %r725, -7;
	min.s32 	%r690, %r745, 7;
	max.s32 	%r746, %r728, -7;
	min.s32 	%r682, %r746, 7;
	max.s32 	%r747, %r731, -7;
	min.s32 	%r689, %r747, 7;
	max.s32 	%r748, %r734, -7;
	min.s32 	%r680, %r748, 7;
	max.s32 	%r749, %r737, -7;
	min.s32 	%r687, %r749, 7;
	max.s32 	%r750, %r740, -7;
	min.s32 	%r679, %r750, 7;
	max.s32 	%r751, %r743, -7;
	min.s32 	%r686, %r751, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r678, %r679, %r680, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r681, %r682, %r683, %r678;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r685, %r686, %r687, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r688, %r689, %r690, %r685;
	// end inline asm
	shl.b32 	%r695, %r688, 4;
	// begin inline asm
	lop3.b32 %r762, %r393, %r681, %r695, 202;
	// end inline asm
	setp.eq.s32 	%p7, %r829, 0;
	selp.b32 	%r834, %r762, %r834, %p7;
	selp.b32 	%r835, %r762, %r835, %p7;
	setp.eq.s32 	%p8, %r829, 32;
	selp.b32 	%r830, %r762, %r830, %p8;
	selp.b32 	%r831, %r762, %r831, %p8;
	setp.eq.s32 	%p9, %r829, 64;
	selp.b32 	%r832, %r762, %r832, %p9;
	selp.b32 	%r833, %r762, %r833, %p9;
	add.s32 	%r32, %r829, 32;
	setp.ne.s32 	%p10, %r829, 96;
	mov.u32 	%r829, %r32;
	@%p10 bra 	$L__BB0_8;
// %bb.11:                              // %L8718
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p11, %r65, 0;
	// begin inline asm
	prmt.b32 %r752, %r834, %r830, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r756, %r835, %r831, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r832, %r762, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r833, %r762, %r204;
	// end inline asm
	selp.b32 	%r800, %r756, %r752, %p11;
	shfl.sync.bfly.b32	%r801, %r800, 1, 31, -1;
	selp.b32 	%r769, %r752, %r801, %p11;
	selp.b32 	%r770, %r801, %r756, %p11;
	selp.b32 	%r802, %r764, %r760, %p11;
	shfl.sync.bfly.b32	%r803, %r802, 1, 31, -1;
	selp.b32 	%r777, %r760, %r803, %p11;
	selp.b32 	%r778, %r803, %r764, %p11;
	// begin inline asm
	prmt.b32 %r768, %r769, %r770, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r772, %r769, %r770, %r204;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r777, %r778, %r200;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r777, %r778, %r204;
	// end inline asm
	selp.b32 	%r804, %r776, %r768, %p4;
	shfl.sync.bfly.b32	%r805, %r804, 2, 31, -1;
	selp.b32 	%r785, %r768, %r805, %p4;
	selp.b32 	%r786, %r805, %r776, %p4;
	selp.b32 	%r806, %r780, %r772, %p4;
	shfl.sync.bfly.b32	%r807, %r806, 2, 31, -1;
	selp.b32 	%r793, %r772, %r807, %p4;
	selp.b32 	%r794, %r807, %r780, %p4;
	// begin inline asm
	prmt.b32 %r784, %r785, %r786, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r785, %r786, %r140;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r793, %r794, %r136;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r793, %r794, %r140;
	// end inline asm
	selp.b32 	%r808, %r792, %r784, %p5;
	shfl.sync.bfly.b32	%r809, %r808, 4, 31, -1;
	selp.b32 	%r810, %r784, %r809, %p5;
	selp.b32 	%r811, %r809, %r792, %p5;
	selp.b32 	%r812, %r796, %r788, %p5;
	shfl.sync.bfly.b32	%r813, %r812, 4, 31, -1;
	selp.b32 	%r814, %r788, %r813, %p5;
	selp.b32 	%r815, %r813, %r796, %p5;
	selp.b32 	%r816, %r814, %r810, %p11;
	shfl.sync.bfly.b32	%r817, %r816, 1, 31, -1;
	selp.b32 	%r818, %r810, %r817, %p11;
	selp.b32 	%r819, %r817, %r814, %p11;
	selp.b32 	%r820, %r815, %r811, %p11;
	shfl.sync.bfly.b32	%r821, %r820, 1, 31, -1;
	selp.b32 	%r822, %r811, %r821, %p11;
	selp.b32 	%r823, %r821, %r815, %p11;
	add.s32 	%r824, %r67, %r828;
	shr.u32 	%r825, %r824, 2;
	add.s32 	%r826, %r66, %r825;
	mul.wide.u32 	%rd82, %r826, 4;
	add.s64 	%rd83, %rd4, %rd82;
	st.global.v4.u32 	[%rd83], {%r818, %r822, %r819, %r823};
	add.s32 	%r33, %r828, 128;
	setp.ne.s32 	%p14, %r828, 1920;
	mov.u32 	%r828, %r33;
	@%p14 bra 	$L__BB0_7;
// %bb.12:                              // %L9122
	mov.u32 	%r827, 0;
	st.global.u32 	[%rd6], %r827;
	ret;
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L25
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_5:                              // %L254
	mov.u32 	%r76, 2;
	st.global.u32 	[%rd6], %r76;
	mov.u64 	%rd23, exception749;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r68;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
