// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception716[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<60>;
	.reg .b32 	%r<878>;
	.reg .b64 	%rd<89>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r62, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r65, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r65, 8319;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r66, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r66, 13439;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r63, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r67, %r1, 7;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r68, %r67, %r2;
	or.b32  	%r69, %r68, %r4;
	mul.wide.u32 	%rd22, %r69, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r70, 1;
	st.global.u32 	[%rd7], %r70;
	setp.gt.u32 	%p8, %r63, 65535;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r64, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r64, %r63;
	setp.gt.s32 	%p10, %r64, 131071;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r71, %r64, %r63;
	and.b32  	%r72, %r71, 127;
	setp.eq.s32 	%p12, %r72, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass109
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r57, %r3, 2;
	shl.b32 	%r73, %r1, 4;
	shr.u32 	%r58, %r2, 3;
	or.b32  	%r59, %r57, %r58;
	or.b32  	%r74, %r59, %r73;
	mul.wide.u32 	%rd23, %r74, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r75, [%rd24];
	add.s32 	%r61, %r75, -4;
	setp.lt.u32 	%p13, %r61, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r60, %r75, -3;
	or.b32  	%r77, %r2, %r3;
	setp.ne.s32 	%p1, %r77, 0;
	mul.wide.u32 	%rd27, %r1, 4;
	add.s64 	%rd8, %rd6, %rd27;
	mov.u32 	%r869, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L487
	st.global.u32 	[%rd8], %r869;
$L__BB0_10:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r208, %r1, 13;
	and.b32  	%r209, %r208, 1032192;
	shl.b32 	%r210, %r3, 8;
	shl.b32 	%r211, %r2, 6;
	and.b32  	%r212, %r211, 64;
	shl.b32 	%r213, %r2, 3;
	and.b32  	%r214, %r213, 48;
	and.b32  	%r215, %r210, 256;
	or.b32  	%r216, %r215, %r212;
	or.b32  	%r217, %r214, %r216;
	shr.u32 	%r5, %r2, 2;
	and.b32  	%r218, %r5, 6;
	and.b32  	%r219, %r57, 8;
	or.b32  	%r220, %r218, %r219;
	shl.b32 	%r221, %r220, 9;
	and.b32  	%r222, %r208, 8192;
	or.b32  	%r223, %r209, %r217;
	or.b32  	%r224, %r223, %r221;
	or.b32  	%r225, %r224, %r222;
	cvt.u64.u32 	%rd28, %r225;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r80, %r81, %r88, %r89}, [%rd29];
	shl.b32 	%r226, %r1, 11;
	and.b32  	%r227, %r226, 258048;
	shl.b32 	%r228, %r3, 6;
	and.b32  	%r229, %r228, 64;
	shl.b32 	%r230, %r2, 4;
	and.b32  	%r6, %r230, 16;
	or.b32  	%r231, %r229, %r6;
	shl.b32 	%r232, %r2, 1;
	and.b32  	%r233, %r232, 12;
	or.b32  	%r234, %r233, %r231;
	or.b32  	%r235, %r234, %r227;
	shl.b32 	%r236, %r220, 7;
	and.b32  	%r237, %r226, 2048;
	or.b32  	%r238, %r237, %r236;
	or.b32  	%r239, %r235, %r238;
	or.b32  	%r240, %r239, 33;
	mul.wide.u32 	%rd30, %r240, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r96, %r97, %r104, %r105}, [%rd31+-4];
	or.b32  	%r241, %r219, %r5;
	shl.b32 	%r242, %r241, 7;
	or.b32  	%r243, %r6, %r228;
	or.b32  	%r244, %r243, %r233;
	or.b32  	%r245, %r244, %r227;
	or.b32  	%r246, %r245, %r237;
	or.b32  	%r247, %r246, %r242;
	or.b32  	%r248, %r247, 128;
	mul.wide.u32 	%rd32, %r248, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r112, %r113, %r120, %r121}, [%rd33];
	or.b32  	%r249, %r247, 160;
	add.s32 	%r250, %r249, 1;
	mul.wide.u32 	%rd34, %r250, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r128, %r129, %r136, %r137}, [%rd35+-4];
	mov.u32 	%r82, 21520;
	// begin inline asm
	prmt.b32 %r144, %r80, %r81, %r82;
	// end inline asm
	mov.u32 	%r86, 30258;
	// begin inline asm
	prmt.b32 %r145, %r80, %r81, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r152, %r88, %r89, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r153, %r88, %r89, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r160, %r96, %r97, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r161, %r96, %r97, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r168, %r104, %r105, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r169, %r104, %r105, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r176, %r112, %r113, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r177, %r112, %r113, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r184, %r120, %r121, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r185, %r120, %r121, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r192, %r128, %r129, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r193, %r128, %r129, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r200, %r136, %r137, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r201, %r136, %r137, %r86;
	// end inline asm
	mov.u32 	%r146, 25152;
	// begin inline asm
	prmt.b32 %r143, %r144, %r145, %r146;
	// end inline asm
	mov.u32 	%r150, 29521;
	// begin inline asm
	prmt.b32 %r147, %r144, %r145, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r151, %r152, %r153, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r155, %r152, %r153, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r159, %r160, %r161, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r163, %r160, %r161, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r167, %r168, %r169, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r171, %r168, %r169, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r175, %r176, %r177, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r179, %r176, %r177, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r183, %r184, %r185, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r187, %r184, %r185, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r191, %r192, %r193, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r195, %r192, %r193, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r199, %r200, %r201, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r203, %r200, %r201, %r150;
	// end inline asm
	and.b32  	%r7, %r2, 2;
	setp.eq.s32 	%p15, %r7, 0;
	selp.b32 	%r251, %r159, %r143, %p15;
	shfl.sync.bfly.b32	%r252, %r251, 2, 31, -1;
	selp.b32 	%r253, %r143, %r252, %p15;
	selp.b32 	%r254, %r252, %r159, %p15;
	selp.b32 	%r255, %r163, %r147, %p15;
	shfl.sync.bfly.b32	%r256, %r255, 2, 31, -1;
	selp.b32 	%r257, %r147, %r256, %p15;
	selp.b32 	%r258, %r256, %r163, %p15;
	selp.b32 	%r259, %r167, %r151, %p15;
	shfl.sync.bfly.b32	%r260, %r259, 2, 31, -1;
	selp.b32 	%r261, %r151, %r260, %p15;
	selp.b32 	%r262, %r260, %r167, %p15;
	selp.b32 	%r263, %r171, %r155, %p15;
	shfl.sync.bfly.b32	%r264, %r263, 2, 31, -1;
	selp.b32 	%r265, %r155, %r264, %p15;
	selp.b32 	%r266, %r264, %r171, %p15;
	selp.b32 	%r267, %r191, %r175, %p15;
	shfl.sync.bfly.b32	%r268, %r267, 2, 31, -1;
	selp.b32 	%r269, %r175, %r268, %p15;
	selp.b32 	%r270, %r268, %r191, %p15;
	selp.b32 	%r271, %r195, %r179, %p15;
	shfl.sync.bfly.b32	%r272, %r271, 2, 31, -1;
	selp.b32 	%r273, %r179, %r272, %p15;
	selp.b32 	%r274, %r272, %r195, %p15;
	selp.b32 	%r275, %r199, %r183, %p15;
	shfl.sync.bfly.b32	%r276, %r275, 2, 31, -1;
	selp.b32 	%r277, %r183, %r276, %p15;
	selp.b32 	%r278, %r276, %r199, %p15;
	selp.b32 	%r279, %r203, %r187, %p15;
	shfl.sync.bfly.b32	%r280, %r279, 2, 31, -1;
	selp.b32 	%r281, %r187, %r280, %p15;
	selp.b32 	%r282, %r280, %r203, %p15;
	and.b32  	%r8, %r2, 4;
	setp.eq.s32 	%p16, %r8, 0;
	selp.b32 	%r283, %r269, %r253, %p16;
	shfl.sync.bfly.b32	%r284, %r283, 4, 31, -1;
	selp.b32 	%r434, %r253, %r284, %p16;
	selp.b32 	%r562, %r284, %r269, %p16;
	selp.b32 	%r285, %r273, %r257, %p16;
	shfl.sync.bfly.b32	%r286, %r285, 4, 31, -1;
	selp.b32 	%r440, %r257, %r286, %p16;
	selp.b32 	%r568, %r286, %r273, %p16;
	selp.b32 	%r287, %r277, %r261, %p16;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r466, %r261, %r288, %p16;
	selp.b32 	%r594, %r288, %r277, %p16;
	selp.b32 	%r289, %r281, %r265, %p16;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r472, %r265, %r290, %p16;
	selp.b32 	%r600, %r290, %r281, %p16;
	selp.b32 	%r291, %r270, %r254, %p16;
	shfl.sync.bfly.b32	%r292, %r291, 4, 31, -1;
	selp.b32 	%r498, %r254, %r292, %p16;
	selp.b32 	%r626, %r292, %r270, %p16;
	selp.b32 	%r293, %r274, %r258, %p16;
	shfl.sync.bfly.b32	%r294, %r293, 4, 31, -1;
	selp.b32 	%r504, %r258, %r294, %p16;
	selp.b32 	%r632, %r294, %r274, %p16;
	selp.b32 	%r295, %r278, %r262, %p16;
	shfl.sync.bfly.b32	%r296, %r295, 4, 31, -1;
	selp.b32 	%r530, %r262, %r296, %p16;
	selp.b32 	%r658, %r296, %r278, %p16;
	selp.b32 	%r297, %r282, %r266, %p16;
	shfl.sync.bfly.b32	%r298, %r297, 4, 31, -1;
	selp.b32 	%r536, %r266, %r298, %p16;
	selp.b32 	%r664, %r298, %r282, %p16;
	shl.b32 	%r299, %r63, 13;
	shl.b32 	%r300, %r2, 2;
	and.b32  	%r301, %r300, 28;
	and.b32  	%r302, %r4, 32;
	or.b32  	%r25, %r301, %r302;
	shl.b32 	%r303, %r1, 6;
	and.b32  	%r304, %r303, 8064;
	shl.b32 	%r305, %r3, 1;
	and.b32  	%r26, %r305, 4;
	or.b32  	%r306, %r304, %r25;
	and.b32  	%r307, %r303, 64;
	or.b32  	%r308, %r299, %r307;
	or.b32  	%r27, %r308, %r306;
	and.b32  	%r309, %r213, 24;
	or.b32  	%r28, %r309, %r302;
	and.b32  	%r310, %r3, 1;
	neg.s32 	%r311, %r310;
	and.b32  	%r312, %r311, 640;
	and.b32  	%r29, %r232, 6;
	or.b32  	%r30, %r241, %r312;
	and.b32  	%r313, %r2, 7;
	or.b32  	%r314, %r59, 640;
	shl.b32 	%r316, %r70, %r61;
	setp.gt.u32 	%p17, %r61, 31;
	selp.b32 	%r31, 0, %r316, %p17;
	min.u32 	%r32, %r60, 31;
	and.b32  	%r33, %r2, 1;
	shl.b32 	%r317, %r1, 14;
	shl.b32 	%r318, %r3, 23;
	shl.b32 	%r319, %r2, 18;
	and.b32  	%r320, %r319, 6291456;
	shl.b32 	%r321, %r2, 5;
	and.b32  	%r34, %r321, 64;
	and.b32  	%r35, %r213, 32;
	or.b32  	%r322, %r320, %r318;
	or.b32  	%r36, %r322, %r317;
	or.b32  	%r323, %r2, 24;
	mul.lo.s32 	%r324, %r323, 20;
	add.s32 	%r325, %r324, %r314;
	mul.wide.u32 	%rd36, %r325, 4;
	mov.u64 	%rd37, shmem;
	add.s64 	%rd38, %rd37, 8320;
	add.s64 	%rd9, %rd38, %rd36;
	mul.lo.s32 	%r326, %r313, 20;
	add.s32 	%r327, %r326, %r59;
	mul.wide.u32 	%rd39, %r327, 4;
	add.s64 	%rd10, %rd38, %rd39;
	add.s32 	%r328, %r326, %r314;
	mul.wide.u32 	%rd40, %r328, 4;
	add.s64 	%rd11, %rd38, %rd40;
	add.s32 	%r329, %r326, 160;
	add.s32 	%r330, %r329, %r59;
	mul.wide.u32 	%rd41, %r330, 4;
	add.s64 	%rd12, %rd38, %rd41;
	add.s32 	%r331, %r329, %r314;
	mul.wide.u32 	%rd42, %r331, 4;
	add.s64 	%rd13, %rd38, %rd42;
	add.s32 	%r332, %r326, 320;
	add.s32 	%r333, %r332, %r59;
	mul.wide.u32 	%rd43, %r333, 4;
	add.s64 	%rd14, %rd38, %rd43;
	add.s32 	%r334, %r332, %r314;
	mul.wide.u32 	%rd44, %r334, 4;
	add.s64 	%rd15, %rd38, %rd44;
	add.s32 	%r335, %r324, %r59;
	mul.wide.u32 	%rd45, %r335, 4;
	add.s64 	%rd16, %rd38, %rd45;
	mov.pred 	%p59, 0;
$L__BB0_11:                             // %L1557
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r336, %r869, %r63;
	setp.ge.s32 	%p18, %r336, %r64;
	@%p18 bra 	$L__BB0_17;
// %bb.12:                              // %L1565.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r338, %r869, %r58;
	or.b32  	%r38, %r338, %r26;
	mov.u32 	%r436, 0;
	mov.u32 	%r870, %r436;
	mov.u32 	%r871, %r436;
	mov.u32 	%r872, %r436;
	mov.u32 	%r873, %r436;
	mov.u32 	%r874, %r436;
	mov.u32 	%r875, %r436;
	mov.u32 	%r876, %r436;
$L__BB0_13:                             // %L1565
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r340, %r870, %r38;
	shl.b32 	%r341, %r340, 13;
	and.b32  	%r342, %r341, 536666112;
	add.s32 	%r343, %r27, %r342;
	shr.s32 	%r344, %r343, 31;
	shr.u32 	%r345, %r344, 3;
	add.s32 	%r346, %r343, %r345;
	shr.s32 	%r347, %r346, 29;
	setp.lt.s32 	%p19, %r343, 0;
	and.b32  	%r348, %r346, -536870912;
	setp.ne.s32 	%p20, %r348, %r343;
	and.pred  	%p21, %p19, %p20;
	selp.u32 	%r349, 1, 0, %p21;
	sub.s32 	%r350, %r349, %r347;
	shl.b32 	%r351, %r350, 29;
	or.b32  	%r352, %r343, 1;
	add.s32 	%r353, %r352, %r351;
	mul.wide.s32 	%rd46, %r353, 4;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.v4.u32 	{%r354, %r355, %r356, %r357}, [%rd47+-4];
	or.b32  	%r358, %r340, 8;
	shl.b32 	%r359, %r358, 13;
	and.b32  	%r360, %r359, 536862720;
	add.s32 	%r361, %r27, %r360;
	shr.s32 	%r362, %r361, 31;
	shr.u32 	%r363, %r362, 3;
	add.s32 	%r364, %r361, %r363;
	shr.s32 	%r365, %r364, 29;
	setp.lt.s32 	%p22, %r361, 0;
	and.b32  	%r366, %r364, -536870912;
	setp.ne.s32 	%p23, %r366, %r361;
	and.pred  	%p24, %p22, %p23;
	selp.u32 	%r367, 1, 0, %p24;
	sub.s32 	%r368, %r367, %r365;
	shl.b32 	%r369, %r368, 29;
	or.b32  	%r370, %r361, 1;
	add.s32 	%r371, %r370, %r369;
	mul.wide.s32 	%rd48, %r371, 4;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.v4.u32 	{%r372, %r373, %r374, %r375}, [%rd49+-4];
	or.b32  	%r376, %r340, 16;
	shl.b32 	%r377, %r376, 13;
	and.b32  	%r378, %r377, 536862720;
	add.s32 	%r379, %r27, %r378;
	shr.s32 	%r380, %r379, 31;
	shr.u32 	%r381, %r380, 3;
	add.s32 	%r382, %r379, %r381;
	shr.s32 	%r383, %r382, 29;
	setp.lt.s32 	%p25, %r379, 0;
	and.b32  	%r384, %r382, -536870912;
	setp.ne.s32 	%p26, %r384, %r379;
	and.pred  	%p27, %p25, %p26;
	selp.u32 	%r385, 1, 0, %p27;
	sub.s32 	%r386, %r385, %r383;
	shl.b32 	%r387, %r386, 29;
	or.b32  	%r388, %r379, 1;
	add.s32 	%r389, %r388, %r387;
	mul.wide.s32 	%rd50, %r389, 4;
	add.s64 	%rd51, %rd2, %rd50;
	ld.global.v4.u32 	{%r390, %r391, %r392, %r393}, [%rd51+-4];
	or.b32  	%r394, %r340, 24;
	shl.b32 	%r395, %r394, 13;
	and.b32  	%r396, %r395, 536862720;
	add.s32 	%r397, %r27, %r396;
	shr.s32 	%r398, %r397, 31;
	shr.u32 	%r399, %r398, 3;
	add.s32 	%r400, %r397, %r399;
	shr.s32 	%r401, %r400, 29;
	setp.lt.s32 	%p28, %r397, 0;
	and.b32  	%r402, %r400, -536870912;
	setp.ne.s32 	%p29, %r402, %r397;
	and.pred  	%p30, %p28, %p29;
	selp.u32 	%r403, 1, 0, %p30;
	sub.s32 	%r404, %r403, %r401;
	shl.b32 	%r405, %r404, 29;
	or.b32  	%r406, %r397, 1;
	add.s32 	%r407, %r406, %r405;
	mul.wide.s32 	%rd52, %r407, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.v4.u32 	{%r408, %r409, %r410, %r411}, [%rd53+-4];
	and.b32  	%r412, %r340, 7;
	mul.lo.s32 	%r413, %r412, 65;
	add.s32 	%r414, %r25, %r413;
	mul.wide.u32 	%rd54, %r414, 4;
	add.s64 	%rd56, %rd37, %rd54;
	st.shared.u32 	[%rd56], %r354;
	cvt.u64.u32 	%rd57, %r413;
	cvt.u64.u32 	%rd58, %r25;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd61, %rd37, %rd60;
	st.shared.u32 	[%rd61+4], %r355;
	st.shared.u32 	[%rd61+8], %r356;
	st.shared.u32 	[%rd61+12], %r357;
	and.b32  	%r415, %r358, 31;
	mul.lo.s32 	%r416, %r415, 65;
	add.s32 	%r417, %r25, %r416;
	mul.wide.u32 	%rd62, %r417, 4;
	add.s64 	%rd63, %rd37, %rd62;
	st.shared.u32 	[%rd63], %r372;
	cvt.u64.u32 	%rd64, %r416;
	add.s64 	%rd65, %rd58, %rd64;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd67, %rd37, %rd66;
	st.shared.u32 	[%rd67+4], %r373;
	st.shared.u32 	[%rd67+8], %r374;
	st.shared.u32 	[%rd67+12], %r375;
	and.b32  	%r418, %r376, 31;
	mul.lo.s32 	%r419, %r418, 65;
	add.s32 	%r420, %r25, %r419;
	mul.wide.u32 	%rd68, %r420, 4;
	add.s64 	%rd69, %rd37, %rd68;
	st.shared.u32 	[%rd69], %r390;
	cvt.u64.u32 	%rd70, %r419;
	add.s64 	%rd71, %rd58, %rd70;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd73, %rd37, %rd72;
	st.shared.u32 	[%rd73+4], %r391;
	st.shared.u32 	[%rd73+8], %r392;
	st.shared.u32 	[%rd73+12], %r393;
	and.b32  	%r421, %r394, 31;
	mul.lo.s32 	%r422, %r421, 65;
	add.s32 	%r423, %r25, %r422;
	mul.wide.u32 	%rd74, %r423, 4;
	add.s64 	%rd75, %rd37, %rd74;
	st.shared.u32 	[%rd75], %r408;
	cvt.u64.u32 	%rd76, %r422;
	add.s64 	%rd77, %rd58, %rd76;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd37, %rd78;
	st.shared.u32 	[%rd79+4], %r409;
	st.shared.u32 	[%rd79+8], %r410;
	st.shared.u32 	[%rd79+12], %r411;
	bar.sync 	0;
	mov.u32 	%r877, %r436;
$L__BB0_14:                             // %L5000
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r686, %r5, %r877;
	mad.lo.s32 	%r687, %r686, 65, %r28;
	mul.wide.u32 	%rd80, %r687, 4;
	add.s64 	%rd82, %rd37, %rd80;
	ld.shared.u32 	%r425, [%rd82];
	mov.u32 	%r426, 134744072;
	mov.u32 	%r427, 252645135;
	// begin inline asm
	lop3.b32 %r424, %r425, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r688, %r424, 2021161080;
	xor.b32  	%r435, %r688, -2139062144;
	shr.u32 	%r429, %r425, 4;
	// begin inline asm
	lop3.b32 %r428, %r429, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r689, %r428, 2021161080;
	xor.b32  	%r441, %r689, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r432, %r433}, {%r434}, {%r435}, {%r436, %r436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r438, %r439}, {%r440}, {%r441}, {%r436, %r436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r444, %r445}, {%r434}, {%r441}, {%r436, %r436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r450, %r451}, {%r440}, {%r435}, {%r444, %r445};
	// end inline asm
	ld.shared.u32 	%r457, [%rd82+4];
	// begin inline asm
	lop3.b32 %r456, %r457, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r690, %r456, 2021161080;
	xor.b32  	%r467, %r690, -2139062144;
	shr.u32 	%r461, %r457, 4;
	// begin inline asm
	lop3.b32 %r460, %r461, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r691, %r460, 2021161080;
	xor.b32  	%r473, %r691, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r464, %r465}, {%r466}, {%r467}, {%r432, %r433};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r470, %r471}, {%r472}, {%r473}, {%r438, %r439};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r476, %r477}, {%r466}, {%r473}, {%r450, %r451};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r482, %r483}, {%r472}, {%r467}, {%r476, %r477};
	// end inline asm
	ld.shared.u32 	%r489, [%rd82+8];
	// begin inline asm
	lop3.b32 %r488, %r489, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r692, %r488, 2021161080;
	xor.b32  	%r499, %r692, -2139062144;
	shr.u32 	%r493, %r489, 4;
	// begin inline asm
	lop3.b32 %r492, %r493, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r693, %r492, 2021161080;
	xor.b32  	%r505, %r693, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r496, %r497}, {%r498}, {%r499}, {%r464, %r465};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r502, %r503}, {%r504}, {%r505}, {%r470, %r471};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r508, %r509}, {%r498}, {%r505}, {%r482, %r483};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r514, %r515}, {%r504}, {%r499}, {%r508, %r509};
	// end inline asm
	ld.shared.u32 	%r521, [%rd82+12];
	// begin inline asm
	lop3.b32 %r520, %r521, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r694, %r520, 2021161080;
	xor.b32  	%r531, %r694, -2139062144;
	shr.u32 	%r525, %r521, 4;
	// begin inline asm
	lop3.b32 %r524, %r525, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r695, %r524, 2021161080;
	xor.b32  	%r537, %r695, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r528, %r529}, {%r530}, {%r531}, {%r496, %r497};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r534, %r535}, {%r536}, {%r537}, {%r502, %r503};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r540, %r541}, {%r530}, {%r537}, {%r514, %r515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r546, %r547}, {%r536}, {%r531}, {%r540, %r541};
	// end inline asm
	ld.shared.u32 	%r553, [%rd82+16];
	// begin inline asm
	lop3.b32 %r552, %r553, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r696, %r552, 2021161080;
	xor.b32  	%r563, %r696, -2139062144;
	shr.u32 	%r557, %r553, 4;
	// begin inline asm
	lop3.b32 %r556, %r557, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r697, %r556, 2021161080;
	xor.b32  	%r569, %r697, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r560, %r561}, {%r562}, {%r563}, {%r528, %r529};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r566, %r567}, {%r568}, {%r569}, {%r534, %r535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r562}, {%r569}, {%r546, %r547};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r568}, {%r563}, {%r572, %r573};
	// end inline asm
	ld.shared.u32 	%r585, [%rd82+20];
	// begin inline asm
	lop3.b32 %r584, %r585, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r698, %r584, 2021161080;
	xor.b32  	%r595, %r698, -2139062144;
	shr.u32 	%r589, %r585, 4;
	// begin inline asm
	lop3.b32 %r588, %r589, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r699, %r588, 2021161080;
	xor.b32  	%r601, %r699, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r594}, {%r595}, {%r560, %r561};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r598, %r599}, {%r600}, {%r601}, {%r566, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r594}, {%r601}, {%r578, %r579};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r600}, {%r595}, {%r604, %r605};
	// end inline asm
	ld.shared.u32 	%r617, [%rd82+24];
	// begin inline asm
	lop3.b32 %r616, %r617, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r700, %r616, 2021161080;
	xor.b32  	%r627, %r700, -2139062144;
	shr.u32 	%r621, %r617, 4;
	// begin inline asm
	lop3.b32 %r620, %r621, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r701, %r620, 2021161080;
	xor.b32  	%r633, %r701, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r626}, {%r627}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r630, %r631}, {%r632}, {%r633}, {%r598, %r599};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r626}, {%r633}, {%r610, %r611};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r632}, {%r627}, {%r636, %r637};
	// end inline asm
	ld.shared.u32 	%r649, [%rd82+28];
	// begin inline asm
	lop3.b32 %r648, %r649, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r702, %r648, 2021161080;
	xor.b32  	%r659, %r702, -2139062144;
	shr.u32 	%r653, %r649, 4;
	// begin inline asm
	lop3.b32 %r652, %r653, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r703, %r652, 2021161080;
	xor.b32  	%r665, %r703, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r658}, {%r659}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r662, %r663}, {%r664}, {%r665}, {%r630, %r631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r668, %r669}, {%r658}, {%r665}, {%r642, %r643};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r674, %r675}, {%r664}, {%r659}, {%r668, %r669};
	// end inline asm
	sub.s32 	%r704, %r656, %r662;
	add.s32 	%r705, %r704, 4;
	shr.s32 	%r682, %r705, 3;
	add.s32 	%r706, %r674, 4;
	shr.s32 	%r681, %r706, 3;
	sub.s32 	%r707, %r657, %r663;
	add.s32 	%r708, %r707, 4;
	shr.s32 	%r685, %r708, 3;
	add.s32 	%r709, %r675, 4;
	shr.s32 	%r684, %r709, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r680, %r681, %r682;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r683, %r684, %r685;
	// end inline asm
	or.b32  	%r710, %r877, %r29;
	mad.lo.s32 	%r711, %r710, 20, %r30;
	mul.wide.u32 	%rd83, %r711, 4;
	add.s64 	%rd84, %rd37, %rd83;
	st.shared.u32 	[%rd84+8320], %r680;
	st.shared.u32 	[%rd84+8400], %r683;
	add.s32 	%r877, %r877, 8;
	setp.ne.s32 	%p31, %r877, 32;
	@%p31 bra 	$L__BB0_14;
// %bb.15:                              // %L6871
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r730, [%rd10];
	ld.shared.u32 	%r731, [%rd11];
	ld.shared.u32 	%r732, [%rd12];
	ld.shared.u32 	%r733, [%rd13];
	ld.shared.u32 	%r734, [%rd14];
	ld.shared.u32 	%r735, [%rd15];
	ld.shared.u32 	%r736, [%rd16];
	ld.shared.u32 	%r737, [%rd9];
	cvt.s32.s16 	%r738, %r730;
	shr.s32 	%r739, %r730, 16;
	cvt.s32.s16 	%r740, %r731;
	shr.s32 	%r741, %r731, 16;
	cvt.s32.s16 	%r742, %r732;
	shr.s32 	%r743, %r732, 16;
	cvt.s32.s16 	%r744, %r733;
	shr.s32 	%r745, %r733, 16;
	cvt.s32.s16 	%r746, %r734;
	shr.s32 	%r747, %r734, 16;
	cvt.s32.s16 	%r748, %r735;
	shr.s32 	%r749, %r735, 16;
	cvt.s32.s16 	%r750, %r736;
	shr.s32 	%r751, %r736, 16;
	cvt.s32.s16 	%r752, %r737;
	shr.s32 	%r753, %r737, 16;
	add.s32 	%r754, %r738, %r31;
	add.s32 	%r755, %r754, %r740;
	shr.s32 	%r756, %r755, %r32;
	add.s32 	%r757, %r739, %r31;
	add.s32 	%r758, %r757, %r741;
	shr.s32 	%r759, %r758, %r32;
	add.s32 	%r760, %r742, %r31;
	add.s32 	%r761, %r760, %r744;
	shr.s32 	%r762, %r761, %r32;
	add.s32 	%r763, %r743, %r31;
	add.s32 	%r764, %r763, %r745;
	shr.s32 	%r765, %r764, %r32;
	add.s32 	%r766, %r746, %r31;
	add.s32 	%r767, %r766, %r748;
	shr.s32 	%r768, %r767, %r32;
	add.s32 	%r769, %r747, %r31;
	add.s32 	%r770, %r769, %r749;
	shr.s32 	%r771, %r770, %r32;
	add.s32 	%r772, %r750, %r31;
	add.s32 	%r773, %r772, %r752;
	shr.s32 	%r774, %r773, %r32;
	add.s32 	%r775, %r751, %r31;
	add.s32 	%r776, %r775, %r753;
	shr.s32 	%r777, %r776, %r32;
	max.s32 	%r778, %r756, -7;
	min.s32 	%r717, %r778, 7;
	setp.ne.s32 	%p32, %r717, %r756;
	or.pred  	%p33, %p59, %p32;
	max.s32 	%r779, %r759, -7;
	min.s32 	%r724, %r779, 7;
	setp.ne.s32 	%p34, %r724, %r759;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r780, %r762, -7;
	min.s32 	%r716, %r780, 7;
	setp.ne.s32 	%p36, %r716, %r762;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r781, %r765, -7;
	min.s32 	%r723, %r781, 7;
	setp.ne.s32 	%p38, %r723, %r765;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r782, %r768, -7;
	min.s32 	%r714, %r782, 7;
	setp.ne.s32 	%p40, %r714, %r768;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r783, %r771, -7;
	min.s32 	%r721, %r783, 7;
	setp.ne.s32 	%p42, %r721, %r771;
	or.pred  	%p43, %p42, %p41;
	max.s32 	%r784, %r774, -7;
	min.s32 	%r713, %r784, 7;
	setp.ne.s32 	%p44, %r713, %r774;
	or.pred  	%p45, %p43, %p44;
	max.s32 	%r785, %r777, -7;
	min.s32 	%r720, %r785, 7;
	setp.ne.s32 	%p46, %r720, %r777;
	or.pred  	%p59, %p46, %p45;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r712, %r713, %r714, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r715, %r716, %r717, %r712;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r719, %r720, %r721, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r722, %r723, %r724, %r719;
	// end inline asm
	shl.b32 	%r729, %r722, 4;
	// begin inline asm
	lop3.b32 %r796, %r427, %r715, %r729, 202;
	// end inline asm
	setp.eq.s32 	%p47, %r870, 0;
	selp.b32 	%r875, %r796, %r875, %p47;
	selp.b32 	%r876, %r796, %r876, %p47;
	setp.eq.s32 	%p48, %r870, 32;
	selp.b32 	%r871, %r796, %r871, %p48;
	selp.b32 	%r872, %r796, %r872, %p48;
	setp.eq.s32 	%p49, %r870, 64;
	selp.b32 	%r873, %r796, %r873, %p49;
	selp.b32 	%r874, %r796, %r874, %p49;
	add.s32 	%r55, %r870, 32;
	setp.ne.s32 	%p50, %r870, 96;
	mov.u32 	%r870, %r55;
	@%p50 bra 	$L__BB0_13;
// %bb.16:                              // %L8149.L8155_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p51, %r33, 0;
	// begin inline asm
	prmt.b32 %r786, %r875, %r871, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r876, %r872, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r794, %r873, %r796, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r798, %r874, %r796, %r150;
	// end inline asm
	selp.b32 	%r834, %r790, %r786, %p51;
	shfl.sync.bfly.b32	%r835, %r834, 1, 31, -1;
	selp.b32 	%r803, %r786, %r835, %p51;
	selp.b32 	%r804, %r835, %r790, %p51;
	selp.b32 	%r836, %r798, %r794, %p51;
	shfl.sync.bfly.b32	%r837, %r836, 1, 31, -1;
	selp.b32 	%r811, %r794, %r837, %p51;
	selp.b32 	%r812, %r837, %r798, %p51;
	// begin inline asm
	prmt.b32 %r802, %r803, %r804, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r806, %r803, %r804, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r810, %r811, %r812, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r814, %r811, %r812, %r150;
	// end inline asm
	selp.b32 	%r838, %r810, %r802, %p15;
	shfl.sync.bfly.b32	%r839, %r838, 2, 31, -1;
	selp.b32 	%r819, %r802, %r839, %p15;
	selp.b32 	%r820, %r839, %r810, %p15;
	selp.b32 	%r840, %r814, %r806, %p15;
	shfl.sync.bfly.b32	%r841, %r840, 2, 31, -1;
	selp.b32 	%r827, %r806, %r841, %p15;
	selp.b32 	%r828, %r841, %r814, %p15;
	// begin inline asm
	prmt.b32 %r818, %r819, %r820, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r819, %r820, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r826, %r827, %r828, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r830, %r827, %r828, %r86;
	// end inline asm
	selp.b32 	%r842, %r826, %r818, %p16;
	shfl.sync.bfly.b32	%r843, %r842, 4, 31, -1;
	selp.b32 	%r844, %r818, %r843, %p16;
	selp.b32 	%r845, %r843, %r826, %p16;
	selp.b32 	%r846, %r830, %r822, %p16;
	shfl.sync.bfly.b32	%r847, %r846, 4, 31, -1;
	selp.b32 	%r848, %r822, %r847, %p16;
	selp.b32 	%r849, %r847, %r830, %p16;
	selp.b32 	%r850, %r848, %r844, %p51;
	shfl.sync.bfly.b32	%r851, %r850, 1, 31, -1;
	selp.b32 	%r852, %r844, %r851, %p51;
	selp.b32 	%r853, %r851, %r848, %p51;
	selp.b32 	%r854, %r849, %r845, %p51;
	shfl.sync.bfly.b32	%r855, %r854, 1, 31, -1;
	selp.b32 	%r856, %r845, %r855, %p51;
	selp.b32 	%r857, %r855, %r849, %p51;
	and.b32  	%r858, %r869, 16256;
	or.b32  	%r859, %r858, %r6;
	or.b32  	%r860, %r859, %r34;
	or.b32  	%r861, %r860, %r35;
	or.b32  	%r862, %r36, %r861;
	cvt.u64.u32 	%rd85, %r862;
	add.s64 	%rd86, %rd4, %rd85;
	st.global.v4.u32 	[%rd86], {%r852, %r856, %r853, %r857};
	add.s32 	%r56, %r869, 128;
	setp.ne.s32 	%p54, %r869, 65408;
	mov.u32 	%r869, %r56;
	@%p54 bra 	$L__BB0_11;
$L__BB0_17:                             // %L8536
	selp.u32 	%r863, 1, 0, %p59;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r863, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r864, 1, 0, %p2; 
	}
	setp.eq.s32 	%p55, %r864, 0;
	or.pred  	%p56, %p55, %p1;
	@%p56 bra 	$L__BB0_19;
// %bb.18:                              // %L8567
	st.global.u32 	[%rd8], %r70;
$L__BB0_19:                             // %L8613
	mov.u32 	%r866, 0;
	st.global.u32 	[%rd7], %r866;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r867, 2;
	st.global.u32 	[%rd7], %r867;
	mov.u64 	%rd87, exception716;
	cvta.global.u64 	%rd88, %rd87;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd88;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r62;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r62;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r62;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L370
	mov.u32 	%r76, 3;
	st.global.u32 	[%rd7], %r76;
	mov.u64 	%rd25, exception716;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r62;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
