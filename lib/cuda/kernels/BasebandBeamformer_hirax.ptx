// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception716[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1722[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<60>;
	.reg .b32 	%r<889>;
	.reg .b64 	%rd<89>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r64, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd20, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r67, 8319;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r68, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r68, 13439;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r65, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r69, %r4, 7;
	or.b32  	%r70, %r2, %r3;
	or.b32  	%r71, %r70, %r69;
	mul.wide.u32 	%rd25, %r71, 4;
	add.s64 	%rd7, %rd5, %rd25;
	mov.u32 	%r72, 1;
	st.global.u32 	[%rd7], %r72;
	setp.gt.u32 	%p8, %r65, 65535;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r66, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r66, %r65;
	setp.gt.s32 	%p10, %r66, 131071;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r73, %r66, %r65;
	and.b32  	%r74, %r73, 127;
	setp.eq.s32 	%p12, %r74, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass103
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r75, %r4, 4;
	shr.u32 	%r59, %r3, 3;
	shl.b32 	%r60, %r1, 2;
	or.b32  	%r61, %r59, %r60;
	or.b32  	%r76, %r61, %r75;
	mul.wide.u32 	%rd26, %r76, 4;
	add.s64 	%rd27, %rd3, %rd26;
	ld.global.u32 	%r77, [%rd27];
	add.s32 	%r63, %r77, -4;
	setp.lt.u32 	%p13, %r63, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r62, %r77, -3;
	or.b32  	%r79, %r3, %r1;
	setp.ne.s32 	%p1, %r79, 0;
	mul.wide.u32 	%rd30, %r4, 4;
	add.s64 	%rd8, %rd6, %rd30;
	mov.u32 	%r880, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L487
	st.global.u32 	[%rd8], %r880;
$L__BB0_10:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r210, %r3, 3;
	and.b32  	%r211, %r210, 48;
	shl.b32 	%r212, %r3, 6;
	and.b32  	%r213, %r212, 64;
	or.b32  	%r214, %r211, %r213;
	shl.b32 	%r215, %r1, 8;
	and.b32  	%r216, %r215, 256;
	or.b32  	%r217, %r216, %r214;
	shl.b32 	%r218, %r4, 13;
	and.b32  	%r219, %r218, 1032192;
	and.b32  	%r220, %r60, 8;
	shr.u32 	%r5, %r3, 2;
	and.b32  	%r221, %r5, 6;
	or.b32  	%r222, %r220, %r221;
	shl.b32 	%r223, %r222, 9;
	and.b32  	%r224, %r218, 8192;
	or.b32  	%r225, %r219, %r217;
	or.b32  	%r226, %r225, %r223;
	or.b32  	%r227, %r226, %r224;
	cvt.u64.u32 	%rd31, %r227;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r82, %r83, %r90, %r91}, [%rd32];
	shl.b32 	%r228, %r3, 1;
	and.b32  	%r229, %r228, 12;
	shl.b32 	%r230, %r3, 4;
	and.b32  	%r6, %r230, 16;
	or.b32  	%r231, %r229, %r6;
	shl.b32 	%r232, %r1, 6;
	and.b32  	%r233, %r232, 64;
	or.b32  	%r234, %r233, %r231;
	shl.b32 	%r235, %r4, 11;
	and.b32  	%r236, %r235, 258048;
	shl.b32 	%r237, %r222, 7;
	and.b32  	%r238, %r235, 2048;
	or.b32  	%r239, %r236, %r234;
	or.b32  	%r240, %r239, %r237;
	or.b32  	%r241, %r240, %r238;
	or.b32  	%r242, %r241, 32;
	mul.wide.u32 	%rd33, %r242, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r98, %r99, %r106, %r107}, [%rd34];
	or.b32  	%r243, %r231, %r232;
	or.b32  	%r244, %r220, %r5;
	shl.b32 	%r245, %r244, 7;
	or.b32  	%r246, %r235, %r243;
	or.b32  	%r247, %r246, %r245;
	shl.b32 	%r248, %r247, 2;
	or.b32  	%r249, %r248, 512;
	cvt.u64.u32 	%rd35, %r249;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r114, %r115, %r122, %r123}, [%rd36];
	or.b32  	%r250, %r243, %r236;
	or.b32  	%r251, %r250, %r238;
	or.b32  	%r252, %r251, %r245;
	or.b32  	%r253, %r252, 160;
	add.s32 	%r254, %r253, 1;
	mul.wide.u32 	%rd37, %r254, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r130, %r131, %r138, %r139}, [%rd38+-4];
	mov.u32 	%r84, 21520;
	// begin inline asm
	prmt.b32 %r146, %r82, %r83, %r84;
	// end inline asm
	mov.u32 	%r88, 30258;
	// begin inline asm
	prmt.b32 %r147, %r82, %r83, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r154, %r90, %r91, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r155, %r90, %r91, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r162, %r98, %r99, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r163, %r98, %r99, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r170, %r106, %r107, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r171, %r106, %r107, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r178, %r114, %r115, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r179, %r114, %r115, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r186, %r122, %r123, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r187, %r122, %r123, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r194, %r130, %r131, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r195, %r130, %r131, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r202, %r138, %r139, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r203, %r138, %r139, %r88;
	// end inline asm
	mov.u32 	%r148, 25152;
	// begin inline asm
	prmt.b32 %r145, %r146, %r147, %r148;
	// end inline asm
	mov.u32 	%r152, 29521;
	// begin inline asm
	prmt.b32 %r149, %r146, %r147, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r153, %r154, %r155, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r157, %r154, %r155, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r161, %r162, %r163, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r165, %r162, %r163, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r169, %r170, %r171, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r173, %r170, %r171, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r177, %r178, %r179, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r181, %r178, %r179, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r185, %r186, %r187, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r189, %r186, %r187, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r193, %r194, %r195, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r197, %r194, %r195, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r201, %r202, %r203, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r205, %r202, %r203, %r152;
	// end inline asm
	and.b32  	%r7, %r3, 2;
	setp.eq.s32 	%p15, %r7, 0;
	selp.b32 	%r255, %r161, %r145, %p15;
	shfl.sync.bfly.b32	%r256, %r255, 2, 31, -1;
	selp.b32 	%r257, %r145, %r256, %p15;
	selp.b32 	%r258, %r256, %r161, %p15;
	selp.b32 	%r259, %r165, %r149, %p15;
	shfl.sync.bfly.b32	%r260, %r259, 2, 31, -1;
	selp.b32 	%r261, %r149, %r260, %p15;
	selp.b32 	%r262, %r260, %r165, %p15;
	selp.b32 	%r263, %r169, %r153, %p15;
	shfl.sync.bfly.b32	%r264, %r263, 2, 31, -1;
	selp.b32 	%r265, %r153, %r264, %p15;
	selp.b32 	%r266, %r264, %r169, %p15;
	selp.b32 	%r267, %r173, %r157, %p15;
	shfl.sync.bfly.b32	%r268, %r267, 2, 31, -1;
	selp.b32 	%r269, %r157, %r268, %p15;
	selp.b32 	%r270, %r268, %r173, %p15;
	selp.b32 	%r271, %r193, %r177, %p15;
	shfl.sync.bfly.b32	%r272, %r271, 2, 31, -1;
	selp.b32 	%r273, %r177, %r272, %p15;
	selp.b32 	%r274, %r272, %r193, %p15;
	selp.b32 	%r275, %r197, %r181, %p15;
	shfl.sync.bfly.b32	%r276, %r275, 2, 31, -1;
	selp.b32 	%r277, %r181, %r276, %p15;
	selp.b32 	%r278, %r276, %r197, %p15;
	selp.b32 	%r279, %r201, %r185, %p15;
	shfl.sync.bfly.b32	%r280, %r279, 2, 31, -1;
	selp.b32 	%r281, %r185, %r280, %p15;
	selp.b32 	%r282, %r280, %r201, %p15;
	selp.b32 	%r283, %r205, %r189, %p15;
	shfl.sync.bfly.b32	%r284, %r283, 2, 31, -1;
	selp.b32 	%r285, %r189, %r284, %p15;
	selp.b32 	%r286, %r284, %r205, %p15;
	and.b32  	%r8, %r3, 4;
	setp.eq.s32 	%p16, %r8, 0;
	selp.b32 	%r287, %r273, %r257, %p16;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r439, %r257, %r288, %p16;
	selp.b32 	%r567, %r288, %r273, %p16;
	selp.b32 	%r289, %r277, %r261, %p16;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r445, %r261, %r290, %p16;
	selp.b32 	%r573, %r290, %r277, %p16;
	selp.b32 	%r291, %r281, %r265, %p16;
	shfl.sync.bfly.b32	%r292, %r291, 4, 31, -1;
	selp.b32 	%r471, %r265, %r292, %p16;
	selp.b32 	%r599, %r292, %r281, %p16;
	selp.b32 	%r293, %r285, %r269, %p16;
	shfl.sync.bfly.b32	%r294, %r293, 4, 31, -1;
	selp.b32 	%r477, %r269, %r294, %p16;
	selp.b32 	%r605, %r294, %r285, %p16;
	selp.b32 	%r295, %r274, %r258, %p16;
	shfl.sync.bfly.b32	%r296, %r295, 4, 31, -1;
	selp.b32 	%r503, %r258, %r296, %p16;
	selp.b32 	%r631, %r296, %r274, %p16;
	selp.b32 	%r297, %r278, %r262, %p16;
	shfl.sync.bfly.b32	%r298, %r297, 4, 31, -1;
	selp.b32 	%r509, %r262, %r298, %p16;
	selp.b32 	%r637, %r298, %r278, %p16;
	selp.b32 	%r299, %r282, %r266, %p16;
	shfl.sync.bfly.b32	%r300, %r299, 4, 31, -1;
	selp.b32 	%r535, %r266, %r300, %p16;
	selp.b32 	%r663, %r300, %r282, %p16;
	selp.b32 	%r301, %r286, %r270, %p16;
	shfl.sync.bfly.b32	%r302, %r301, 4, 31, -1;
	selp.b32 	%r541, %r270, %r302, %p16;
	selp.b32 	%r669, %r302, %r286, %p16;
	shl.b32 	%r303, %r65, 13;
	shl.b32 	%r304, %r3, 2;
	and.b32  	%r305, %r304, 28;
	and.b32  	%r306, %r2, 32;
	shl.b32 	%r307, %r4, 6;
	shl.b32 	%r308, %r1, 1;
	and.b32  	%r309, %r308, 4;
	or.b32  	%r25, %r309, %r59;
	or.b32  	%r310, %r305, %r306;
	or.b32  	%r311, %r310, %r307;
	or.b32  	%r26, %r311, %r303;
	and.b32  	%r312, %r210, 24;
	or.b32  	%r27, %r312, %r306;
	and.b32  	%r313, %r1, 1;
	neg.s32 	%r314, %r313;
	and.b32  	%r315, %r314, 640;
	and.b32  	%r28, %r228, 6;
	or.b32  	%r29, %r244, %r315;
	and.b32  	%r316, %r3, 7;
	or.b32  	%r317, %r61, 640;
	shl.b32 	%r319, %r72, %r63;
	setp.gt.u32 	%p17, %r63, 31;
	selp.b32 	%r30, 0, %r319, %p17;
	min.u32 	%r31, %r62, 31;
	and.b32  	%r32, %r3, 1;
	shl.b32 	%r320, %r4, 14;
	shl.b32 	%r321, %r1, 23;
	shl.b32 	%r322, %r3, 18;
	and.b32  	%r323, %r322, 6291456;
	or.b32  	%r324, %r323, %r321;
	shl.b32 	%r325, %r3, 5;
	and.b32  	%r33, %r325, 64;
	and.b32  	%r34, %r210, 32;
	or.b32  	%r35, %r324, %r320;
	mul.lo.s32 	%r326, %r25, 65;
	add.s32 	%r327, %r310, %r326;
	mul.wide.u32 	%rd39, %r327, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd9, %rd40, %rd39;
	cvt.u64.u32 	%rd41, %r326;
	cvt.u64.u32 	%rd10, %r310;
	add.s64 	%rd42, %rd10, %rd41;
	shl.b64 	%rd43, %rd42, 2;
	add.s64 	%rd11, %rd40, %rd43;
	mul.lo.s32 	%r328, %r316, 20;
	add.s32 	%r329, %r328, %r61;
	mul.wide.u32 	%rd44, %r329, 4;
	add.s64 	%rd45, %rd40, 8320;
	add.s64 	%rd12, %rd45, %rd44;
	add.s32 	%r330, %r328, %r317;
	mul.wide.u32 	%rd46, %r330, 4;
	add.s64 	%rd13, %rd45, %rd46;
	add.s32 	%r331, %r328, 160;
	add.s32 	%r332, %r331, %r61;
	mul.wide.u32 	%rd47, %r332, 4;
	add.s64 	%rd14, %rd45, %rd47;
	add.s32 	%r333, %r331, %r317;
	mul.wide.u32 	%rd48, %r333, 4;
	add.s64 	%rd15, %rd45, %rd48;
	add.s32 	%r334, %r328, 320;
	add.s32 	%r335, %r334, %r61;
	mul.wide.u32 	%rd49, %r335, 4;
	add.s64 	%rd16, %rd45, %rd49;
	add.s32 	%r336, %r334, %r317;
	mul.wide.u32 	%rd50, %r336, 4;
	add.s64 	%rd17, %rd45, %rd50;
	or.b32  	%r337, %r3, 24;
	mul.lo.s32 	%r338, %r337, 20;
	add.s32 	%r339, %r338, %r61;
	mul.wide.u32 	%rd51, %r339, 4;
	add.s64 	%rd18, %rd45, %rd51;
	add.s32 	%r340, %r338, %r317;
	mul.wide.u32 	%rd52, %r340, 4;
	add.s64 	%rd19, %rd45, %rd52;
	mov.pred 	%p59, 0;
$L__BB0_11:                             // %L1565
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r341, %r880, %r65;
	setp.ge.s32 	%p18, %r341, %r66;
	@%p18 bra 	$L__BB0_17;
// %bb.12:                              // %L1573.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r37, %r880, 8;
	or.b32  	%r38, %r880, 16;
	or.b32  	%r39, %r880, 24;
	mov.u32 	%r441, 0;
	mov.u32 	%r881, %r441;
	mov.u32 	%r882, %r441;
	mov.u32 	%r883, %r441;
	mov.u32 	%r884, %r441;
	mov.u32 	%r885, %r441;
	mov.u32 	%r886, %r441;
	mov.u32 	%r887, %r441;
$L__BB0_13:                             // %L1573
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	cvt.u32.u64 	%r344, %rd10;
	add.s32 	%r47, %r881, %r880;
	or.b32  	%r345, %r25, %r47;
	shl.b32 	%r346, %r345, 13;
	and.b32  	%r347, %r346, 536666112;
	add.s32 	%r348, %r26, %r347;
	shr.s32 	%r349, %r348, 31;
	shr.u32 	%r350, %r349, 3;
	add.s32 	%r351, %r348, %r350;
	shr.s32 	%r352, %r351, 29;
	setp.lt.s32 	%p19, %r348, 0;
	and.b32  	%r353, %r351, -536870912;
	setp.ne.s32 	%p20, %r353, %r348;
	and.pred  	%p21, %p19, %p20;
	selp.u32 	%r354, 1, 0, %p21;
	sub.s32 	%r355, %r354, %r352;
	shl.b32 	%r356, %r355, 29;
	or.b32  	%r357, %r348, 1;
	add.s32 	%r358, %r357, %r356;
	mul.wide.s32 	%rd53, %r358, 4;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.v4.u32 	{%r359, %r360, %r361, %r362}, [%rd54+-4];
	add.s32 	%r363, %r37, %r881;
	or.b32  	%r364, %r25, %r363;
	shl.b32 	%r365, %r364, 13;
	and.b32  	%r366, %r365, 536731648;
	add.s32 	%r367, %r26, %r366;
	shr.s32 	%r368, %r367, 31;
	shr.u32 	%r369, %r368, 3;
	add.s32 	%r370, %r367, %r369;
	shr.s32 	%r371, %r370, 29;
	setp.lt.s32 	%p22, %r367, 0;
	and.b32  	%r372, %r370, -536870912;
	setp.ne.s32 	%p23, %r372, %r367;
	and.pred  	%p24, %p22, %p23;
	selp.u32 	%r373, 1, 0, %p24;
	sub.s32 	%r374, %r373, %r371;
	shl.b32 	%r375, %r374, 29;
	or.b32  	%r376, %r367, 1;
	add.s32 	%r377, %r376, %r375;
	mul.wide.s32 	%rd55, %r377, 4;
	add.s64 	%rd56, %rd2, %rd55;
	ld.global.v4.u32 	{%r378, %r379, %r380, %r381}, [%rd56+-4];
	add.s32 	%r382, %r38, %r881;
	or.b32  	%r383, %r25, %r382;
	shl.b32 	%r384, %r383, 13;
	and.b32  	%r385, %r384, 536797184;
	add.s32 	%r386, %r26, %r385;
	shr.s32 	%r387, %r386, 31;
	shr.u32 	%r388, %r387, 3;
	add.s32 	%r389, %r386, %r388;
	shr.s32 	%r390, %r389, 29;
	setp.lt.s32 	%p25, %r386, 0;
	and.b32  	%r391, %r389, -536870912;
	setp.ne.s32 	%p26, %r391, %r386;
	and.pred  	%p27, %p25, %p26;
	selp.u32 	%r392, 1, 0, %p27;
	sub.s32 	%r393, %r392, %r390;
	shl.b32 	%r394, %r393, 29;
	or.b32  	%r395, %r386, 1;
	add.s32 	%r396, %r395, %r394;
	mul.wide.s32 	%rd57, %r396, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.v4.u32 	{%r397, %r398, %r399, %r400}, [%rd58+-4];
	add.s32 	%r401, %r39, %r881;
	or.b32  	%r402, %r25, %r401;
	shl.b32 	%r403, %r402, 13;
	and.b32  	%r404, %r403, 536862720;
	add.s32 	%r405, %r26, %r404;
	shr.s32 	%r406, %r405, 31;
	shr.u32 	%r407, %r406, 3;
	add.s32 	%r408, %r405, %r407;
	shr.s32 	%r409, %r408, 29;
	setp.lt.s32 	%p28, %r405, 0;
	and.b32  	%r410, %r408, -536870912;
	setp.ne.s32 	%p29, %r410, %r405;
	and.pred  	%p30, %p28, %p29;
	selp.u32 	%r411, 1, 0, %p30;
	sub.s32 	%r412, %r411, %r409;
	shl.b32 	%r413, %r412, 29;
	or.b32  	%r414, %r405, 1;
	add.s32 	%r415, %r414, %r413;
	mul.wide.s32 	%rd59, %r415, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.v4.u32 	{%r416, %r417, %r418, %r419}, [%rd60+-4];
	st.shared.u32 	[%rd9], %r359;
	st.shared.u32 	[%rd11+4], %r360;
	st.shared.u32 	[%rd11+8], %r361;
	st.shared.u32 	[%rd11+12], %r362;
	and.b32  	%r420, %r364, 15;
	mul.lo.s32 	%r421, %r420, 65;
	add.s32 	%r422, %r344, %r421;
	mul.wide.u32 	%rd61, %r422, 4;
	add.s64 	%rd63, %rd40, %rd61;
	st.shared.u32 	[%rd63], %r378;
	cvt.u64.u32 	%rd64, %r421;
	add.s64 	%rd65, %rd10, %rd64;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd67, %rd40, %rd66;
	st.shared.u32 	[%rd67+4], %r379;
	st.shared.u32 	[%rd67+8], %r380;
	st.shared.u32 	[%rd67+12], %r381;
	and.b32  	%r423, %r383, 23;
	mul.lo.s32 	%r424, %r423, 65;
	add.s32 	%r425, %r344, %r424;
	mul.wide.u32 	%rd68, %r425, 4;
	add.s64 	%rd69, %rd40, %rd68;
	st.shared.u32 	[%rd69], %r397;
	cvt.u64.u32 	%rd70, %r424;
	add.s64 	%rd71, %rd10, %rd70;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd73, %rd40, %rd72;
	st.shared.u32 	[%rd73+4], %r398;
	st.shared.u32 	[%rd73+8], %r399;
	st.shared.u32 	[%rd73+12], %r400;
	and.b32  	%r426, %r402, 31;
	mul.lo.s32 	%r427, %r426, 65;
	add.s32 	%r428, %r344, %r427;
	mul.wide.u32 	%rd74, %r428, 4;
	add.s64 	%rd75, %rd40, %rd74;
	st.shared.u32 	[%rd75], %r416;
	cvt.u64.u32 	%rd76, %r427;
	add.s64 	%rd77, %rd10, %rd76;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd40, %rd78;
	st.shared.u32 	[%rd79+4], %r417;
	st.shared.u32 	[%rd79+8], %r418;
	st.shared.u32 	[%rd79+12], %r419;
	bar.sync 	0;
	mov.u32 	%r888, %r441;
$L__BB0_14:                             // %L5008
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r691, %r888, %r5;
	add.s32 	%r692, %r47, %r691;
	shr.s32 	%r693, %r692, 31;
	shr.u32 	%r694, %r693, 27;
	add.s32 	%r695, %r692, %r694;
	and.b32  	%r696, %r695, -32;
	sub.s32 	%r697, %r692, %r696;
	mad.lo.s32 	%r698, %r697, 65, %r27;
	mul.wide.s32 	%rd80, %r698, 4;
	add.s64 	%rd82, %rd40, %rd80;
	ld.shared.u32 	%r430, [%rd82];
	mov.u32 	%r431, 134744072;
	mov.u32 	%r432, 252645135;
	// begin inline asm
	lop3.b32 %r429, %r430, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r699, %r429, 2021161080;
	xor.b32  	%r440, %r699, -2139062144;
	shr.u32 	%r434, %r430, 4;
	// begin inline asm
	lop3.b32 %r433, %r434, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r700, %r433, 2021161080;
	xor.b32  	%r446, %r700, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r437, %r438}, {%r439}, {%r440}, {%r441, %r441};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r443, %r444}, {%r445}, {%r446}, {%r441, %r441};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r449, %r450}, {%r439}, {%r446}, {%r441, %r441};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r455, %r456}, {%r445}, {%r440}, {%r449, %r450};
	// end inline asm
	ld.shared.u32 	%r462, [%rd82+4];
	// begin inline asm
	lop3.b32 %r461, %r462, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r701, %r461, 2021161080;
	xor.b32  	%r472, %r701, -2139062144;
	shr.u32 	%r466, %r462, 4;
	// begin inline asm
	lop3.b32 %r465, %r466, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r702, %r465, 2021161080;
	xor.b32  	%r478, %r702, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r469, %r470}, {%r471}, {%r472}, {%r437, %r438};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r475, %r476}, {%r477}, {%r478}, {%r443, %r444};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r481, %r482}, {%r471}, {%r478}, {%r455, %r456};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r487, %r488}, {%r477}, {%r472}, {%r481, %r482};
	// end inline asm
	ld.shared.u32 	%r494, [%rd82+8];
	// begin inline asm
	lop3.b32 %r493, %r494, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r703, %r493, 2021161080;
	xor.b32  	%r504, %r703, -2139062144;
	shr.u32 	%r498, %r494, 4;
	// begin inline asm
	lop3.b32 %r497, %r498, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r704, %r497, 2021161080;
	xor.b32  	%r510, %r704, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r501, %r502}, {%r503}, {%r504}, {%r469, %r470};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r507, %r508}, {%r509}, {%r510}, {%r475, %r476};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r513, %r514}, {%r503}, {%r510}, {%r487, %r488};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r519, %r520}, {%r509}, {%r504}, {%r513, %r514};
	// end inline asm
	ld.shared.u32 	%r526, [%rd82+12];
	// begin inline asm
	lop3.b32 %r525, %r526, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r705, %r525, 2021161080;
	xor.b32  	%r536, %r705, -2139062144;
	shr.u32 	%r530, %r526, 4;
	// begin inline asm
	lop3.b32 %r529, %r530, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r706, %r529, 2021161080;
	xor.b32  	%r542, %r706, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r533, %r534}, {%r535}, {%r536}, {%r501, %r502};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r539, %r540}, {%r541}, {%r542}, {%r507, %r508};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r545, %r546}, {%r535}, {%r542}, {%r519, %r520};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r551, %r552}, {%r541}, {%r536}, {%r545, %r546};
	// end inline asm
	ld.shared.u32 	%r558, [%rd82+16];
	// begin inline asm
	lop3.b32 %r557, %r558, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r707, %r557, 2021161080;
	xor.b32  	%r568, %r707, -2139062144;
	shr.u32 	%r562, %r558, 4;
	// begin inline asm
	lop3.b32 %r561, %r562, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r708, %r561, 2021161080;
	xor.b32  	%r574, %r708, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r565, %r566}, {%r567}, {%r568}, {%r533, %r534};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r571, %r572}, {%r573}, {%r574}, {%r539, %r540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r577, %r578}, {%r567}, {%r574}, {%r551, %r552};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r583, %r584}, {%r573}, {%r568}, {%r577, %r578};
	// end inline asm
	ld.shared.u32 	%r590, [%rd82+20];
	// begin inline asm
	lop3.b32 %r589, %r590, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r709, %r589, 2021161080;
	xor.b32  	%r600, %r709, -2139062144;
	shr.u32 	%r594, %r590, 4;
	// begin inline asm
	lop3.b32 %r593, %r594, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r710, %r593, 2021161080;
	xor.b32  	%r606, %r710, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r597, %r598}, {%r599}, {%r600}, {%r565, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r603, %r604}, {%r605}, {%r606}, {%r571, %r572};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r609, %r610}, {%r599}, {%r606}, {%r583, %r584};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r615, %r616}, {%r605}, {%r600}, {%r609, %r610};
	// end inline asm
	ld.shared.u32 	%r622, [%rd82+24];
	// begin inline asm
	lop3.b32 %r621, %r622, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r711, %r621, 2021161080;
	xor.b32  	%r632, %r711, -2139062144;
	shr.u32 	%r626, %r622, 4;
	// begin inline asm
	lop3.b32 %r625, %r626, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r712, %r625, 2021161080;
	xor.b32  	%r638, %r712, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r629, %r630}, {%r631}, {%r632}, {%r597, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r635, %r636}, {%r637}, {%r638}, {%r603, %r604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r641, %r642}, {%r631}, {%r638}, {%r615, %r616};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r647, %r648}, {%r637}, {%r632}, {%r641, %r642};
	// end inline asm
	ld.shared.u32 	%r654, [%rd82+28];
	// begin inline asm
	lop3.b32 %r653, %r654, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r713, %r653, 2021161080;
	xor.b32  	%r664, %r713, -2139062144;
	shr.u32 	%r658, %r654, 4;
	// begin inline asm
	lop3.b32 %r657, %r658, %r431, %r432, 40;
	// end inline asm
	add.s32 	%r714, %r657, 2021161080;
	xor.b32  	%r670, %r714, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r661, %r662}, {%r663}, {%r664}, {%r629, %r630};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r667, %r668}, {%r669}, {%r670}, {%r635, %r636};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r673, %r674}, {%r663}, {%r670}, {%r647, %r648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r679, %r680}, {%r669}, {%r664}, {%r673, %r674};
	// end inline asm
	sub.s32 	%r715, %r661, %r667;
	add.s32 	%r716, %r715, 4;
	shr.s32 	%r687, %r716, 3;
	add.s32 	%r717, %r679, 4;
	shr.s32 	%r686, %r717, 3;
	sub.s32 	%r718, %r662, %r668;
	add.s32 	%r719, %r718, 4;
	shr.s32 	%r690, %r719, 3;
	add.s32 	%r720, %r680, 4;
	shr.s32 	%r689, %r720, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r685, %r686, %r687;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r688, %r689, %r690;
	// end inline asm
	or.b32  	%r721, %r888, %r28;
	mad.lo.s32 	%r722, %r721, 20, %r29;
	mul.wide.u32 	%rd83, %r722, 4;
	add.s64 	%rd84, %rd40, %rd83;
	st.shared.u32 	[%rd84+8320], %r685;
	st.shared.u32 	[%rd84+8400], %r688;
	add.s32 	%r888, %r888, 8;
	setp.ne.s32 	%p31, %r888, 32;
	@%p31 bra 	$L__BB0_14;
// %bb.15:                              // %L6879
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r741, [%rd12];
	ld.shared.u32 	%r742, [%rd13];
	ld.shared.u32 	%r743, [%rd14];
	ld.shared.u32 	%r744, [%rd15];
	ld.shared.u32 	%r745, [%rd16];
	ld.shared.u32 	%r746, [%rd17];
	ld.shared.u32 	%r747, [%rd18];
	ld.shared.u32 	%r748, [%rd19];
	cvt.s32.s16 	%r749, %r741;
	shr.s32 	%r750, %r741, 16;
	cvt.s32.s16 	%r751, %r742;
	shr.s32 	%r752, %r742, 16;
	cvt.s32.s16 	%r753, %r743;
	shr.s32 	%r754, %r743, 16;
	cvt.s32.s16 	%r755, %r744;
	shr.s32 	%r756, %r744, 16;
	cvt.s32.s16 	%r757, %r745;
	shr.s32 	%r758, %r745, 16;
	cvt.s32.s16 	%r759, %r746;
	shr.s32 	%r760, %r746, 16;
	cvt.s32.s16 	%r761, %r747;
	shr.s32 	%r762, %r747, 16;
	cvt.s32.s16 	%r763, %r748;
	shr.s32 	%r764, %r748, 16;
	add.s32 	%r765, %r749, %r30;
	add.s32 	%r766, %r765, %r751;
	shr.s32 	%r767, %r766, %r31;
	add.s32 	%r768, %r750, %r30;
	add.s32 	%r769, %r768, %r752;
	shr.s32 	%r770, %r769, %r31;
	add.s32 	%r771, %r753, %r30;
	add.s32 	%r772, %r771, %r755;
	shr.s32 	%r773, %r772, %r31;
	add.s32 	%r774, %r754, %r30;
	add.s32 	%r775, %r774, %r756;
	shr.s32 	%r776, %r775, %r31;
	add.s32 	%r777, %r757, %r30;
	add.s32 	%r778, %r777, %r759;
	shr.s32 	%r779, %r778, %r31;
	add.s32 	%r780, %r758, %r30;
	add.s32 	%r781, %r780, %r760;
	shr.s32 	%r782, %r781, %r31;
	add.s32 	%r783, %r761, %r30;
	add.s32 	%r784, %r783, %r763;
	shr.s32 	%r785, %r784, %r31;
	add.s32 	%r786, %r762, %r30;
	add.s32 	%r787, %r786, %r764;
	shr.s32 	%r788, %r787, %r31;
	max.s32 	%r789, %r767, -7;
	min.s32 	%r728, %r789, 7;
	setp.ne.s32 	%p32, %r728, %r767;
	or.pred  	%p33, %p59, %p32;
	max.s32 	%r790, %r770, -7;
	min.s32 	%r735, %r790, 7;
	setp.ne.s32 	%p34, %r735, %r770;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r791, %r773, -7;
	min.s32 	%r727, %r791, 7;
	setp.ne.s32 	%p36, %r727, %r773;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r792, %r776, -7;
	min.s32 	%r734, %r792, 7;
	setp.ne.s32 	%p38, %r734, %r776;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r793, %r779, -7;
	min.s32 	%r725, %r793, 7;
	setp.ne.s32 	%p40, %r725, %r779;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r794, %r782, -7;
	min.s32 	%r732, %r794, 7;
	setp.ne.s32 	%p42, %r732, %r782;
	or.pred  	%p43, %p42, %p41;
	max.s32 	%r795, %r785, -7;
	min.s32 	%r724, %r795, 7;
	setp.ne.s32 	%p44, %r724, %r785;
	or.pred  	%p45, %p43, %p44;
	max.s32 	%r796, %r788, -7;
	min.s32 	%r731, %r796, 7;
	setp.ne.s32 	%p46, %r731, %r788;
	or.pred  	%p59, %p46, %p45;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r723, %r724, %r725, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r726, %r727, %r728, %r723;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r730, %r731, %r732, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r733, %r734, %r735, %r730;
	// end inline asm
	shl.b32 	%r740, %r733, 4;
	// begin inline asm
	lop3.b32 %r807, %r432, %r726, %r740, 202;
	// end inline asm
	setp.eq.s32 	%p47, %r881, 0;
	selp.b32 	%r886, %r807, %r886, %p47;
	selp.b32 	%r887, %r807, %r887, %p47;
	setp.eq.s32 	%p48, %r881, 32;
	selp.b32 	%r882, %r807, %r882, %p48;
	selp.b32 	%r883, %r807, %r883, %p48;
	setp.eq.s32 	%p49, %r881, 64;
	selp.b32 	%r884, %r807, %r884, %p49;
	selp.b32 	%r885, %r807, %r885, %p49;
	add.s32 	%r57, %r881, 32;
	setp.ne.s32 	%p50, %r881, 96;
	mov.u32 	%r881, %r57;
	@%p50 bra 	$L__BB0_13;
// %bb.16:                              // %L8157.L8163_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p51, %r32, 0;
	// begin inline asm
	prmt.b32 %r797, %r886, %r882, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r887, %r883, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r884, %r807, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r885, %r807, %r152;
	// end inline asm
	selp.b32 	%r845, %r801, %r797, %p51;
	shfl.sync.bfly.b32	%r846, %r845, 1, 31, -1;
	selp.b32 	%r814, %r797, %r846, %p51;
	selp.b32 	%r815, %r846, %r801, %p51;
	selp.b32 	%r847, %r809, %r805, %p51;
	shfl.sync.bfly.b32	%r848, %r847, 1, 31, -1;
	selp.b32 	%r822, %r805, %r848, %p51;
	selp.b32 	%r823, %r848, %r809, %p51;
	// begin inline asm
	prmt.b32 %r813, %r814, %r815, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r814, %r815, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r821, %r822, %r823, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r822, %r823, %r152;
	// end inline asm
	selp.b32 	%r849, %r821, %r813, %p15;
	shfl.sync.bfly.b32	%r850, %r849, 2, 31, -1;
	selp.b32 	%r830, %r813, %r850, %p15;
	selp.b32 	%r831, %r850, %r821, %p15;
	selp.b32 	%r851, %r825, %r817, %p15;
	shfl.sync.bfly.b32	%r852, %r851, 2, 31, -1;
	selp.b32 	%r838, %r817, %r852, %p15;
	selp.b32 	%r839, %r852, %r825, %p15;
	// begin inline asm
	prmt.b32 %r829, %r830, %r831, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r830, %r831, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r838, %r839, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r841, %r838, %r839, %r88;
	// end inline asm
	selp.b32 	%r853, %r837, %r829, %p16;
	shfl.sync.bfly.b32	%r854, %r853, 4, 31, -1;
	selp.b32 	%r855, %r829, %r854, %p16;
	selp.b32 	%r856, %r854, %r837, %p16;
	selp.b32 	%r857, %r841, %r833, %p16;
	shfl.sync.bfly.b32	%r858, %r857, 4, 31, -1;
	selp.b32 	%r859, %r833, %r858, %p16;
	selp.b32 	%r860, %r858, %r841, %p16;
	selp.b32 	%r861, %r859, %r855, %p51;
	shfl.sync.bfly.b32	%r862, %r861, 1, 31, -1;
	selp.b32 	%r863, %r855, %r862, %p51;
	selp.b32 	%r864, %r862, %r859, %p51;
	selp.b32 	%r865, %r860, %r856, %p51;
	shfl.sync.bfly.b32	%r866, %r865, 1, 31, -1;
	selp.b32 	%r867, %r856, %r866, %p51;
	selp.b32 	%r868, %r866, %r860, %p51;
	and.b32  	%r869, %r880, 16256;
	or.b32  	%r870, %r869, %r33;
	or.b32  	%r871, %r870, %r34;
	or.b32  	%r872, %r871, %r6;
	or.b32  	%r873, %r35, %r872;
	cvt.u64.u32 	%rd85, %r873;
	add.s64 	%rd86, %rd4, %rd85;
	st.global.v4.u32 	[%rd86], {%r863, %r867, %r864, %r868};
	add.s32 	%r58, %r880, 128;
	setp.ne.s32 	%p54, %r880, 65408;
	mov.u32 	%r880, %r58;
	@%p54 bra 	$L__BB0_11;
$L__BB0_17:                             // %L8544
	selp.u32 	%r874, 1, 0, %p59;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r874, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r875, 1, 0, %p2; 
	}
	setp.eq.s32 	%p55, %r875, 0;
	or.pred  	%p56, %p55, %p1;
	@%p56 bra 	$L__BB0_19;
// %bb.18:                              // %L8575
	st.global.u32 	[%rd8], %r72;
$L__BB0_19:                             // %L8621
	mov.u32 	%r877, 0;
	st.global.u32 	[%rd7], %r877;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r878, 2;
	st.global.u32 	[%rd7], %r878;
	mov.u64 	%rd87, exception716;
	cvta.global.u64 	%rd88, %rd87;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd88;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd21, exception1722;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd23, exception1722;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L370
	mov.u32 	%r78, 3;
	st.global.u32 	[%rd7], %r78;
	mov.u64 	%rd28, exception716;
	cvta.global.u64 	%rd29, %rd28;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd29;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
