// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception712[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<33>;
	.reg .b32 	%r<858>;
	.reg .b64 	%rd<84>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r61, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r64, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r64, 8319;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r65, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r65, 13439;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r62, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r66, %r2, 7;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r67, %r66, %r1;
	or.b32  	%r68, %r67, %r4;
	mul.wide.u32 	%rd20, %r68, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r69, 1;
	st.global.u32 	[%rd6], %r69;
	setp.lt.s32 	%p3, %r62, 0;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L128
	ld.param.u32 	%r63, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r63, %r62;
	setp.gt.s32 	%p5, %r63, 131072;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r70, %r63, %r62;
	and.b32  	%r71, %r70, 127;
	setp.eq.s32 	%p7, %r71, 0;
	@%p7 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_7;
$L__BB0_16:                             // %pass113
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r72, %r2, 4;
	shr.u32 	%r25, %r1, 3;
	shl.b32 	%r26, %r3, 2;
	or.b32  	%r27, %r25, %r26;
	or.b32  	%r73, %r27, %r72;
	mul.wide.u32 	%rd21, %r73, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r28, [%rd22];
	add.s32 	%r29, %r28, -4;
	setp.gt.u32 	%p8, %r29, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.17:                              // %pass179
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	add.s32 	%r204, %r28, -3;
	shl.b32 	%r205, %r2, 13;
	shr.u32 	%r30, %r1, 2;
	and.b32  	%r206, %r30, 6;
	and.b32  	%r207, %r26, 8;
	or.b32  	%r208, %r206, %r207;
	shl.b32 	%r209, %r208, 9;
	shl.b32 	%r210, %r1, 3;
	and.b32  	%r211, %r210, 48;
	shl.b32 	%r212, %r1, 6;
	and.b32  	%r213, %r212, 64;
	shl.b32 	%r214, %r3, 8;
	and.b32  	%r215, %r214, 256;
	or.b32  	%r216, %r213, %r211;
	or.b32  	%r217, %r216, %r215;
	or.b32  	%r218, %r217, %r205;
	or.b32  	%r219, %r218, %r209;
	cvt.u64.u32 	%rd25, %r219;
	add.s64 	%rd26, %rd25, %rd1;
	ld.global.v4.u32 	{%r76, %r77, %r84, %r85}, [%rd26];
	ld.global.v4.u32 	{%r92, %r93, %r100, %r101}, [%rd26+128];
	or.b32  	%r220, %r207, %r30;
	shl.b32 	%r221, %r1, 1;
	and.b32  	%r222, %r221, 12;
	shl.b32 	%r223, %r1, 4;
	and.b32  	%r224, %r223, 16;
	or.b32  	%r225, %r224, %r222;
	shl.b32 	%r226, %r220, 9;
	shl.b32 	%r227, %r225, 2;
	or.b32  	%r228, %r214, %r227;
	or.b32  	%r229, %r205, %r228;
	or.b32  	%r230, %r226, %r229;
	or.b32  	%r231, %r230, 512;
	cvt.u64.u32 	%rd27, %r231;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r108, %r109, %r116, %r117}, [%rd28];
	or.b32  	%r232, %r230, 640;
	cvt.u64.u32 	%rd29, %r232;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r124, %r125, %r132, %r133}, [%rd30];
	mov.u32 	%r134, 21520;
	// begin inline asm
	prmt.b32 %r140, %r76, %r77, %r134;
	// end inline asm
	mov.u32 	%r138, 30258;
	// begin inline asm
	prmt.b32 %r141, %r76, %r77, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r148, %r84, %r85, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r149, %r84, %r85, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r156, %r92, %r93, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r157, %r92, %r93, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r164, %r100, %r101, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r165, %r100, %r101, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r172, %r108, %r109, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r173, %r108, %r109, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r180, %r116, %r117, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r181, %r116, %r117, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r188, %r124, %r125, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r189, %r124, %r125, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r196, %r132, %r133, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r197, %r132, %r133, %r138;
	// end inline asm
	mov.u32 	%r198, 25152;
	// begin inline asm
	prmt.b32 %r139, %r140, %r141, %r198;
	// end inline asm
	mov.u32 	%r202, 29521;
	// begin inline asm
	prmt.b32 %r143, %r140, %r141, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r148, %r149, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r151, %r148, %r149, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r155, %r156, %r157, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r159, %r156, %r157, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r163, %r164, %r165, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r167, %r164, %r165, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r171, %r172, %r173, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r175, %r172, %r173, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r179, %r180, %r181, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r183, %r180, %r181, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r187, %r188, %r189, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r191, %r188, %r189, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r195, %r196, %r197, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r199, %r196, %r197, %r202;
	// end inline asm
	and.b32  	%r31, %r1, 2;
	setp.eq.s32 	%p9, %r31, 0;
	selp.b32 	%r233, %r155, %r139, %p9;
	shfl.sync.bfly.b32	%r234, %r233, 2, 31, -1;
	selp.b32 	%r235, %r139, %r234, %p9;
	selp.b32 	%r236, %r234, %r155, %p9;
	selp.b32 	%r237, %r159, %r143, %p9;
	shfl.sync.bfly.b32	%r238, %r237, 2, 31, -1;
	selp.b32 	%r239, %r143, %r238, %p9;
	selp.b32 	%r240, %r238, %r159, %p9;
	selp.b32 	%r241, %r163, %r147, %p9;
	shfl.sync.bfly.b32	%r242, %r241, 2, 31, -1;
	selp.b32 	%r243, %r147, %r242, %p9;
	selp.b32 	%r244, %r242, %r163, %p9;
	selp.b32 	%r245, %r167, %r151, %p9;
	shfl.sync.bfly.b32	%r246, %r245, 2, 31, -1;
	selp.b32 	%r247, %r151, %r246, %p9;
	selp.b32 	%r248, %r246, %r167, %p9;
	selp.b32 	%r249, %r187, %r171, %p9;
	shfl.sync.bfly.b32	%r250, %r249, 2, 31, -1;
	selp.b32 	%r251, %r171, %r250, %p9;
	selp.b32 	%r252, %r250, %r187, %p9;
	selp.b32 	%r253, %r191, %r175, %p9;
	shfl.sync.bfly.b32	%r254, %r253, 2, 31, -1;
	selp.b32 	%r255, %r175, %r254, %p9;
	selp.b32 	%r256, %r254, %r191, %p9;
	selp.b32 	%r257, %r195, %r179, %p9;
	shfl.sync.bfly.b32	%r258, %r257, 2, 31, -1;
	selp.b32 	%r259, %r179, %r258, %p9;
	selp.b32 	%r260, %r258, %r195, %p9;
	selp.b32 	%r261, %r199, %r183, %p9;
	shfl.sync.bfly.b32	%r262, %r261, 2, 31, -1;
	selp.b32 	%r263, %r183, %r262, %p9;
	selp.b32 	%r264, %r262, %r199, %p9;
	and.b32  	%r32, %r1, 4;
	setp.eq.s32 	%p10, %r32, 0;
	selp.b32 	%r265, %r251, %r235, %p10;
	shfl.sync.bfly.b32	%r266, %r265, 4, 31, -1;
	selp.b32 	%r33, %r235, %r266, %p10;
	selp.b32 	%r34, %r266, %r251, %p10;
	selp.b32 	%r267, %r255, %r239, %p10;
	shfl.sync.bfly.b32	%r268, %r267, 4, 31, -1;
	selp.b32 	%r35, %r239, %r268, %p10;
	selp.b32 	%r36, %r268, %r255, %p10;
	selp.b32 	%r269, %r259, %r243, %p10;
	shfl.sync.bfly.b32	%r270, %r269, 4, 31, -1;
	selp.b32 	%r37, %r243, %r270, %p10;
	selp.b32 	%r38, %r270, %r259, %p10;
	selp.b32 	%r271, %r263, %r247, %p10;
	shfl.sync.bfly.b32	%r272, %r271, 4, 31, -1;
	selp.b32 	%r39, %r247, %r272, %p10;
	selp.b32 	%r40, %r272, %r263, %p10;
	selp.b32 	%r273, %r252, %r236, %p10;
	shfl.sync.bfly.b32	%r274, %r273, 4, 31, -1;
	selp.b32 	%r41, %r236, %r274, %p10;
	selp.b32 	%r42, %r274, %r252, %p10;
	selp.b32 	%r275, %r256, %r240, %p10;
	shfl.sync.bfly.b32	%r276, %r275, 4, 31, -1;
	selp.b32 	%r43, %r240, %r276, %p10;
	selp.b32 	%r44, %r276, %r256, %p10;
	selp.b32 	%r277, %r260, %r244, %p10;
	shfl.sync.bfly.b32	%r278, %r277, 4, 31, -1;
	selp.b32 	%r45, %r244, %r278, %p10;
	selp.b32 	%r46, %r278, %r260, %p10;
	selp.b32 	%r279, %r264, %r248, %p10;
	shfl.sync.bfly.b32	%r280, %r279, 4, 31, -1;
	selp.b32 	%r47, %r248, %r280, %p10;
	selp.b32 	%r48, %r280, %r264, %p10;
	shl.b32 	%r281, %r62, 13;
	shl.b32 	%r282, %r2, 6;
	shl.b32 	%r283, %r3, 1;
	and.b32  	%r284, %r283, 4;
	or.b32  	%r49, %r284, %r25;
	shl.b32 	%r285, %r1, 2;
	and.b32  	%r286, %r285, 28;
	and.b32  	%r287, %r4, 32;
	or.b32  	%r50, %r286, %r287;
	or.b32  	%r288, %r50, %r282;
	or.b32  	%r51, %r288, %r281;
	and.b32  	%r289, %r210, 24;
	or.b32  	%r52, %r289, %r287;
	and.b32  	%r53, %r221, 6;
	and.b32  	%r290, %r3, 1;
	neg.s32 	%r291, %r290;
	and.b32  	%r292, %r291, 640;
	or.b32  	%r54, %r292, %r220;
	and.b32  	%r293, %r1, 7;
	or.b32  	%r294, %r27, 640;
	shl.b32 	%r55, %r69, %r29;
	min.u32 	%r56, %r204, 31;
	and.b32  	%r57, %r1, 1;
	shl.b32 	%r296, %r2, 14;
	and.b32  	%r297, %r210, 32;
	or.b32  	%r58, %r224, %r297;
	shl.b32 	%r298, %r1, 5;
	and.b32  	%r59, %r298, 64;
	shl.b32 	%r299, %r3, 23;
	shl.b32 	%r300, %r1, 18;
	and.b32  	%r301, %r300, 6291456;
	or.b32  	%r302, %r301, %r299;
	or.b32  	%r60, %r302, %r296;
	mul.lo.s32 	%r303, %r293, 20;
	add.s32 	%r304, %r303, %r27;
	mul.wide.u32 	%rd31, %r304, 4;
	mov.u64 	%rd32, shmem;
	add.s64 	%rd33, %rd32, 8320;
	add.s64 	%rd7, %rd33, %rd31;
	add.s32 	%r305, %r294, %r303;
	mul.wide.u32 	%rd34, %r305, 4;
	add.s64 	%rd8, %rd33, %rd34;
	add.s32 	%r306, %r303, 160;
	add.s32 	%r307, %r306, %r27;
	mul.wide.u32 	%rd35, %r307, 4;
	add.s64 	%rd9, %rd33, %rd35;
	add.s32 	%r308, %r294, %r306;
	mul.wide.u32 	%rd36, %r308, 4;
	add.s64 	%rd10, %rd33, %rd36;
	add.s32 	%r309, %r303, 320;
	add.s32 	%r310, %r309, %r27;
	mul.wide.u32 	%rd37, %r310, 4;
	add.s64 	%rd11, %rd33, %rd37;
	add.s32 	%r311, %r294, %r309;
	mul.wide.u32 	%rd38, %r311, 4;
	add.s64 	%rd12, %rd33, %rd38;
	or.b32  	%r312, %r1, 24;
	mul.lo.s32 	%r313, %r312, 20;
	add.s32 	%r314, %r313, %r27;
	mul.wide.u32 	%rd39, %r314, 4;
	add.s64 	%rd13, %rd33, %rd39;
	add.s32 	%r315, %r294, %r313;
	mul.wide.u32 	%rd40, %r315, 4;
	add.s64 	%rd14, %rd33, %rd40;
	mov.u32 	%r849, 0;
$L__BB0_9:                              // %L1477
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_12 Depth 3
	add.s32 	%r316, %r849, %r62;
	setp.ge.s32 	%p11, %r316, %r63;
	@%p11 bra 	$L__BB0_15;
// %bb.10:                              // %L1484.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	mov.u32 	%r416, 0;
	mov.u32 	%r850, %r416;
	mov.u32 	%r851, %r416;
	mov.u32 	%r852, %r416;
	mov.u32 	%r853, %r416;
	mov.u32 	%r854, %r416;
	mov.u32 	%r855, %r416;
	mov.u32 	%r856, %r416;
$L__BB0_11:                             // %L1484
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_12 Depth 3
	or.b32  	%r319, %r49, %r850;
	add.s32 	%r320, %r319, %r849;
	shl.b32 	%r321, %r320, 13;
	and.b32  	%r322, %r321, 536666112;
	add.s32 	%r323, %r51, %r322;
	shr.s32 	%r324, %r323, 31;
	shr.u32 	%r325, %r324, 3;
	add.s32 	%r326, %r323, %r325;
	shr.s32 	%r327, %r326, 29;
	setp.lt.s32 	%p12, %r323, 0;
	and.b32  	%r328, %r326, -536870912;
	setp.ne.s32 	%p13, %r328, %r323;
	and.pred  	%p14, %p12, %p13;
	selp.u32 	%r329, 1, 0, %p14;
	sub.s32 	%r330, %r329, %r327;
	shl.b32 	%r331, %r330, 29;
	add.s32 	%r332, %r331, %r323;
	mul.wide.s32 	%rd41, %r332, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.v4.u32 	{%r333, %r334, %r335, %r336}, [%rd42];
	or.b32  	%r337, %r319, 8;
	add.s32 	%r338, %r337, %r849;
	shl.b32 	%r339, %r338, 13;
	and.b32  	%r340, %r339, 536862720;
	add.s32 	%r341, %r51, %r340;
	shr.s32 	%r342, %r341, 31;
	shr.u32 	%r343, %r342, 3;
	add.s32 	%r344, %r341, %r343;
	shr.s32 	%r345, %r344, 29;
	setp.lt.s32 	%p15, %r341, 0;
	and.b32  	%r346, %r344, -536870912;
	setp.ne.s32 	%p16, %r346, %r341;
	and.pred  	%p17, %p15, %p16;
	selp.u32 	%r347, 1, 0, %p17;
	sub.s32 	%r348, %r347, %r345;
	shl.b32 	%r349, %r348, 29;
	add.s32 	%r350, %r349, %r341;
	mul.wide.s32 	%rd43, %r350, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.v4.u32 	{%r351, %r352, %r353, %r354}, [%rd44];
	or.b32  	%r355, %r319, 16;
	add.s32 	%r356, %r355, %r849;
	shl.b32 	%r357, %r356, 13;
	and.b32  	%r358, %r357, 536862720;
	add.s32 	%r359, %r51, %r358;
	shr.s32 	%r360, %r359, 31;
	shr.u32 	%r361, %r360, 3;
	add.s32 	%r362, %r359, %r361;
	shr.s32 	%r363, %r362, 29;
	setp.lt.s32 	%p18, %r359, 0;
	and.b32  	%r364, %r362, -536870912;
	setp.ne.s32 	%p19, %r364, %r359;
	and.pred  	%p20, %p18, %p19;
	selp.u32 	%r365, 1, 0, %p20;
	sub.s32 	%r366, %r365, %r363;
	shl.b32 	%r367, %r366, 29;
	add.s32 	%r368, %r367, %r359;
	mul.wide.s32 	%rd45, %r368, 4;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.v4.u32 	{%r369, %r370, %r371, %r372}, [%rd46];
	or.b32  	%r373, %r319, 24;
	add.s32 	%r374, %r373, %r849;
	shl.b32 	%r375, %r374, 13;
	and.b32  	%r376, %r375, 536862720;
	add.s32 	%r377, %r51, %r376;
	shr.s32 	%r378, %r377, 31;
	shr.u32 	%r379, %r378, 3;
	add.s32 	%r380, %r377, %r379;
	shr.s32 	%r381, %r380, 29;
	setp.lt.s32 	%p21, %r377, 0;
	and.b32  	%r382, %r380, -536870912;
	setp.ne.s32 	%p22, %r382, %r377;
	and.pred  	%p23, %p21, %p22;
	selp.u32 	%r383, 1, 0, %p23;
	sub.s32 	%r384, %r383, %r381;
	shl.b32 	%r385, %r384, 29;
	add.s32 	%r386, %r385, %r377;
	mul.wide.s32 	%rd47, %r386, 4;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.v4.u32 	{%r387, %r388, %r389, %r390}, [%rd48];
	and.b32  	%r391, %r320, 7;
	mul.lo.s32 	%r392, %r391, 65;
	add.s32 	%r393, %r50, %r392;
	mul.wide.u32 	%rd49, %r393, 4;
	add.s64 	%rd51, %rd32, %rd49;
	st.shared.u32 	[%rd51], %r333;
	cvt.u64.u32 	%rd52, %r392;
	cvt.u64.u32 	%rd53, %r50;
	add.s64 	%rd54, %rd53, %rd52;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd56, %rd32, %rd55;
	st.shared.u32 	[%rd56+4], %r334;
	st.shared.u32 	[%rd56+8], %r335;
	st.shared.u32 	[%rd56+12], %r336;
	and.b32  	%r394, %r338, 31;
	mul.lo.s32 	%r395, %r394, 65;
	add.s32 	%r396, %r50, %r395;
	mul.wide.u32 	%rd57, %r396, 4;
	add.s64 	%rd58, %rd32, %rd57;
	st.shared.u32 	[%rd58], %r351;
	cvt.u64.u32 	%rd59, %r395;
	add.s64 	%rd60, %rd53, %rd59;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd62, %rd32, %rd61;
	st.shared.u32 	[%rd62+4], %r352;
	st.shared.u32 	[%rd62+8], %r353;
	st.shared.u32 	[%rd62+12], %r354;
	and.b32  	%r397, %r356, 31;
	mul.lo.s32 	%r398, %r397, 65;
	add.s32 	%r399, %r50, %r398;
	mul.wide.u32 	%rd63, %r399, 4;
	add.s64 	%rd64, %rd32, %rd63;
	st.shared.u32 	[%rd64], %r369;
	cvt.u64.u32 	%rd65, %r398;
	add.s64 	%rd66, %rd53, %rd65;
	shl.b64 	%rd67, %rd66, 2;
	add.s64 	%rd68, %rd32, %rd67;
	st.shared.u32 	[%rd68+4], %r370;
	st.shared.u32 	[%rd68+8], %r371;
	st.shared.u32 	[%rd68+12], %r372;
	and.b32  	%r400, %r374, 31;
	mul.lo.s32 	%r401, %r400, 65;
	add.s32 	%r402, %r50, %r401;
	mul.wide.u32 	%rd69, %r402, 4;
	add.s64 	%rd70, %rd32, %rd69;
	st.shared.u32 	[%rd70], %r387;
	cvt.u64.u32 	%rd71, %r401;
	add.s64 	%rd72, %rd53, %rd71;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd32, %rd73;
	st.shared.u32 	[%rd74+4], %r388;
	st.shared.u32 	[%rd74+8], %r389;
	st.shared.u32 	[%rd74+12], %r390;
	bar.sync 	0;
	or.b32  	%r403, %r850, %r30;
	add.s32 	%r13, %r849, %r403;
	mov.u32 	%r857, %r416;
$L__BB0_12:                             // %L4905
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r666, %r13, %r857;
	shr.s32 	%r667, %r666, 31;
	shr.u32 	%r668, %r667, 27;
	add.s32 	%r669, %r666, %r668;
	and.b32  	%r670, %r669, -32;
	sub.s32 	%r671, %r666, %r670;
	mad.lo.s32 	%r672, %r671, 65, %r52;
	mul.wide.s32 	%rd75, %r672, 4;
	add.s64 	%rd77, %rd32, %rd75;
	ld.shared.u32 	%r405, [%rd77];
	mov.u32 	%r406, 134744072;
	mov.u32 	%r407, 252645135;
	// begin inline asm
	lop3.b32 %r404, %r405, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r673, %r404, 2021161080;
	xor.b32  	%r415, %r673, -2139062144;
	shr.u32 	%r409, %r405, 4;
	// begin inline asm
	lop3.b32 %r408, %r409, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r674, %r408, 2021161080;
	xor.b32  	%r421, %r674, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r412, %r413}, {%r33}, {%r415}, {%r416, %r416};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r418, %r419}, {%r35}, {%r421}, {%r416, %r416};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r424, %r425}, {%r33}, {%r421}, {%r416, %r416};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r430, %r431}, {%r35}, {%r415}, {%r424, %r425};
	// end inline asm
	ld.shared.u32 	%r437, [%rd77+4];
	// begin inline asm
	lop3.b32 %r436, %r437, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r675, %r436, 2021161080;
	xor.b32  	%r447, %r675, -2139062144;
	shr.u32 	%r441, %r437, 4;
	// begin inline asm
	lop3.b32 %r440, %r441, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r676, %r440, 2021161080;
	xor.b32  	%r453, %r676, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r444, %r445}, {%r37}, {%r447}, {%r412, %r413};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r450, %r451}, {%r39}, {%r453}, {%r418, %r419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r456, %r457}, {%r37}, {%r453}, {%r430, %r431};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r462, %r463}, {%r39}, {%r447}, {%r456, %r457};
	// end inline asm
	ld.shared.u32 	%r469, [%rd77+8];
	// begin inline asm
	lop3.b32 %r468, %r469, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r677, %r468, 2021161080;
	xor.b32  	%r479, %r677, -2139062144;
	shr.u32 	%r473, %r469, 4;
	// begin inline asm
	lop3.b32 %r472, %r473, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r678, %r472, 2021161080;
	xor.b32  	%r485, %r678, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r476, %r477}, {%r41}, {%r479}, {%r444, %r445};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r482, %r483}, {%r43}, {%r485}, {%r450, %r451};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r488, %r489}, {%r41}, {%r485}, {%r462, %r463};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r494, %r495}, {%r43}, {%r479}, {%r488, %r489};
	// end inline asm
	ld.shared.u32 	%r501, [%rd77+12];
	// begin inline asm
	lop3.b32 %r500, %r501, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r679, %r500, 2021161080;
	xor.b32  	%r511, %r679, -2139062144;
	shr.u32 	%r505, %r501, 4;
	// begin inline asm
	lop3.b32 %r504, %r505, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r680, %r504, 2021161080;
	xor.b32  	%r517, %r680, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r508, %r509}, {%r45}, {%r511}, {%r476, %r477};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r514, %r515}, {%r47}, {%r517}, {%r482, %r483};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r520, %r521}, {%r45}, {%r517}, {%r494, %r495};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r526, %r527}, {%r47}, {%r511}, {%r520, %r521};
	// end inline asm
	ld.shared.u32 	%r533, [%rd77+16];
	// begin inline asm
	lop3.b32 %r532, %r533, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r681, %r532, 2021161080;
	xor.b32  	%r543, %r681, -2139062144;
	shr.u32 	%r537, %r533, 4;
	// begin inline asm
	lop3.b32 %r536, %r537, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r682, %r536, 2021161080;
	xor.b32  	%r549, %r682, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r540, %r541}, {%r34}, {%r543}, {%r508, %r509};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r546, %r547}, {%r36}, {%r549}, {%r514, %r515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r552, %r553}, {%r34}, {%r549}, {%r526, %r527};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r558, %r559}, {%r36}, {%r543}, {%r552, %r553};
	// end inline asm
	ld.shared.u32 	%r565, [%rd77+20];
	// begin inline asm
	lop3.b32 %r564, %r565, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r683, %r564, 2021161080;
	xor.b32  	%r575, %r683, -2139062144;
	shr.u32 	%r569, %r565, 4;
	// begin inline asm
	lop3.b32 %r568, %r569, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r684, %r568, 2021161080;
	xor.b32  	%r581, %r684, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r38}, {%r575}, {%r540, %r541};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r40}, {%r581}, {%r546, %r547};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r38}, {%r581}, {%r558, %r559};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r40}, {%r575}, {%r584, %r585};
	// end inline asm
	ld.shared.u32 	%r597, [%rd77+24];
	// begin inline asm
	lop3.b32 %r596, %r597, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r685, %r596, 2021161080;
	xor.b32  	%r607, %r685, -2139062144;
	shr.u32 	%r601, %r597, 4;
	// begin inline asm
	lop3.b32 %r600, %r601, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r686, %r600, 2021161080;
	xor.b32  	%r613, %r686, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r42}, {%r607}, {%r572, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r44}, {%r613}, {%r578, %r579};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r42}, {%r613}, {%r590, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r44}, {%r607}, {%r616, %r617};
	// end inline asm
	ld.shared.u32 	%r629, [%rd77+28];
	// begin inline asm
	lop3.b32 %r628, %r629, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r687, %r628, 2021161080;
	xor.b32  	%r639, %r687, -2139062144;
	shr.u32 	%r633, %r629, 4;
	// begin inline asm
	lop3.b32 %r632, %r633, %r406, %r407, 40;
	// end inline asm
	add.s32 	%r688, %r632, 2021161080;
	xor.b32  	%r645, %r688, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r46}, {%r639}, {%r604, %r605};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r48}, {%r645}, {%r610, %r611};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r46}, {%r645}, {%r622, %r623};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r48}, {%r639}, {%r648, %r649};
	// end inline asm
	sub.s32 	%r689, %r636, %r642;
	add.s32 	%r690, %r689, 4;
	shr.s32 	%r662, %r690, 3;
	add.s32 	%r691, %r654, 4;
	shr.s32 	%r661, %r691, 3;
	sub.s32 	%r692, %r637, %r643;
	add.s32 	%r693, %r692, 4;
	shr.s32 	%r665, %r693, 3;
	add.s32 	%r694, %r655, 4;
	shr.s32 	%r664, %r694, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r660, %r661, %r662;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r663, %r664, %r665;
	// end inline asm
	or.b32  	%r695, %r53, %r857;
	mad.lo.s32 	%r696, %r695, 20, %r54;
	mul.wide.u32 	%rd78, %r696, 4;
	add.s64 	%rd79, %rd32, %rd78;
	st.shared.u32 	[%rd79+8320], %r660;
	st.shared.u32 	[%rd79+8400], %r663;
	add.s32 	%r857, %r857, 8;
	setp.ne.s32 	%p24, %r857, 32;
	@%p24 bra 	$L__BB0_12;
// %bb.13:                              // %L6775
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r715, [%rd7];
	ld.shared.u32 	%r716, [%rd8];
	ld.shared.u32 	%r717, [%rd9];
	ld.shared.u32 	%r718, [%rd10];
	ld.shared.u32 	%r719, [%rd11];
	ld.shared.u32 	%r720, [%rd12];
	ld.shared.u32 	%r721, [%rd13];
	ld.shared.u32 	%r722, [%rd14];
	cvt.s32.s16 	%r723, %r715;
	shr.s32 	%r724, %r715, 16;
	cvt.s32.s16 	%r725, %r716;
	shr.s32 	%r726, %r716, 16;
	cvt.s32.s16 	%r727, %r717;
	shr.s32 	%r728, %r717, 16;
	cvt.s32.s16 	%r729, %r718;
	shr.s32 	%r730, %r718, 16;
	cvt.s32.s16 	%r731, %r719;
	shr.s32 	%r732, %r719, 16;
	cvt.s32.s16 	%r733, %r720;
	shr.s32 	%r734, %r720, 16;
	cvt.s32.s16 	%r735, %r721;
	shr.s32 	%r736, %r721, 16;
	cvt.s32.s16 	%r737, %r722;
	shr.s32 	%r738, %r722, 16;
	add.s32 	%r739, %r723, %r55;
	add.s32 	%r740, %r739, %r725;
	shr.s32 	%r741, %r740, %r56;
	add.s32 	%r742, %r724, %r55;
	add.s32 	%r743, %r742, %r726;
	shr.s32 	%r744, %r743, %r56;
	add.s32 	%r745, %r727, %r55;
	add.s32 	%r746, %r745, %r729;
	shr.s32 	%r747, %r746, %r56;
	add.s32 	%r748, %r728, %r55;
	add.s32 	%r749, %r748, %r730;
	shr.s32 	%r750, %r749, %r56;
	add.s32 	%r751, %r731, %r55;
	add.s32 	%r752, %r751, %r733;
	shr.s32 	%r753, %r752, %r56;
	add.s32 	%r754, %r732, %r55;
	add.s32 	%r755, %r754, %r734;
	shr.s32 	%r756, %r755, %r56;
	add.s32 	%r757, %r735, %r55;
	add.s32 	%r758, %r757, %r737;
	shr.s32 	%r759, %r758, %r56;
	add.s32 	%r760, %r736, %r55;
	add.s32 	%r761, %r760, %r738;
	shr.s32 	%r762, %r761, %r56;
	max.s32 	%r763, %r741, -7;
	min.s32 	%r702, %r763, 7;
	max.s32 	%r764, %r744, -7;
	min.s32 	%r709, %r764, 7;
	max.s32 	%r765, %r747, -7;
	min.s32 	%r701, %r765, 7;
	max.s32 	%r766, %r750, -7;
	min.s32 	%r708, %r766, 7;
	max.s32 	%r767, %r753, -7;
	min.s32 	%r699, %r767, 7;
	max.s32 	%r768, %r756, -7;
	min.s32 	%r706, %r768, 7;
	max.s32 	%r769, %r759, -7;
	min.s32 	%r698, %r769, 7;
	max.s32 	%r770, %r762, -7;
	min.s32 	%r705, %r770, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r697, %r698, %r699, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r700, %r701, %r702, %r697;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r704, %r705, %r706, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r707, %r708, %r709, %r704;
	// end inline asm
	shl.b32 	%r714, %r707, 4;
	// begin inline asm
	lop3.b32 %r781, %r407, %r700, %r714, 202;
	// end inline asm
	setp.eq.s32 	%p25, %r850, 0;
	selp.b32 	%r855, %r781, %r855, %p25;
	selp.b32 	%r856, %r781, %r856, %p25;
	setp.eq.s32 	%p26, %r850, 32;
	selp.b32 	%r851, %r781, %r851, %p26;
	selp.b32 	%r852, %r781, %r852, %p26;
	setp.eq.s32 	%p27, %r850, 64;
	selp.b32 	%r853, %r781, %r853, %p27;
	selp.b32 	%r854, %r781, %r854, %p27;
	add.s32 	%r23, %r850, 32;
	setp.ne.s32 	%p28, %r850, 96;
	mov.u32 	%r850, %r23;
	@%p28 bra 	$L__BB0_11;
// %bb.14:                              // %L8033
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p29, %r57, 0;
	// begin inline asm
	prmt.b32 %r771, %r855, %r851, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r775, %r856, %r852, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r853, %r781, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r854, %r781, %r202;
	// end inline asm
	selp.b32 	%r819, %r775, %r771, %p29;
	shfl.sync.bfly.b32	%r820, %r819, 1, 31, -1;
	selp.b32 	%r788, %r771, %r820, %p29;
	selp.b32 	%r789, %r820, %r775, %p29;
	selp.b32 	%r821, %r783, %r779, %p29;
	shfl.sync.bfly.b32	%r822, %r821, 1, 31, -1;
	selp.b32 	%r796, %r779, %r822, %p29;
	selp.b32 	%r797, %r822, %r783, %p29;
	// begin inline asm
	prmt.b32 %r787, %r788, %r789, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r788, %r789, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r796, %r797, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r796, %r797, %r202;
	// end inline asm
	selp.b32 	%r823, %r795, %r787, %p9;
	shfl.sync.bfly.b32	%r824, %r823, 2, 31, -1;
	selp.b32 	%r804, %r787, %r824, %p9;
	selp.b32 	%r805, %r824, %r795, %p9;
	selp.b32 	%r825, %r799, %r791, %p9;
	shfl.sync.bfly.b32	%r826, %r825, 2, 31, -1;
	selp.b32 	%r812, %r791, %r826, %p9;
	selp.b32 	%r813, %r826, %r799, %p9;
	// begin inline asm
	prmt.b32 %r803, %r804, %r805, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r804, %r805, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r812, %r813, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r812, %r813, %r138;
	// end inline asm
	selp.b32 	%r827, %r811, %r803, %p10;
	shfl.sync.bfly.b32	%r828, %r827, 4, 31, -1;
	selp.b32 	%r829, %r803, %r828, %p10;
	selp.b32 	%r830, %r828, %r811, %p10;
	selp.b32 	%r831, %r815, %r807, %p10;
	shfl.sync.bfly.b32	%r832, %r831, 4, 31, -1;
	selp.b32 	%r833, %r807, %r832, %p10;
	selp.b32 	%r834, %r832, %r815, %p10;
	selp.b32 	%r835, %r833, %r829, %p29;
	shfl.sync.bfly.b32	%r836, %r835, 1, 31, -1;
	selp.b32 	%r837, %r829, %r836, %p29;
	selp.b32 	%r838, %r836, %r833, %p29;
	selp.b32 	%r839, %r834, %r830, %p29;
	shfl.sync.bfly.b32	%r840, %r839, 1, 31, -1;
	selp.b32 	%r841, %r830, %r840, %p29;
	selp.b32 	%r842, %r840, %r834, %p29;
	and.b32  	%r843, %r849, 16256;
	or.b32  	%r844, %r843, %r58;
	or.b32  	%r845, %r844, %r59;
	or.b32  	%r846, %r60, %r845;
	cvt.u64.u32 	%rd80, %r846;
	add.s64 	%rd81, %rd4, %rd80;
	st.global.v4.u32 	[%rd81], {%r837, %r841, %r838, %r842};
	add.s32 	%r24, %r849, 128;
	setp.ne.s32 	%p32, %r849, 65408;
	mov.u32 	%r849, %r24;
	@%p32 bra 	$L__BB0_9;
$L__BB0_15:                             // %L8412
	mov.u32 	%r847, 0;
	st.global.u32 	[%rd6], %r847;
	ret;
$L__BB0_7:                              // %L147
	mov.u32 	%r848, 2;
	st.global.u32 	[%rd6], %r848;
	mov.u64 	%rd82, exception712;
	cvta.global.u64 	%rd83, %rd82;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd83;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L365
	mov.u32 	%r74, 2;
	st.global.u32 	[%rd6], %r74;
	mov.u64 	%rd23, exception712;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
