// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception632[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1639[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<14>;
	.reg .b32 	%r<834>;
	.reg .b64 	%rd<87>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r61, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd14, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r62, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r62, 8319;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r63, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r63, 13439;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r4, %r3, 7;
	mov.u32 	%r5, %tid.x;
	or.b32  	%r64, %r4, %r5;
	or.b32  	%r65, %r64, %r2;
	mul.wide.u32 	%rd23, %r65, 4;
	add.s64 	%rd5, %rd4, %rd23;
	mov.u32 	%r66, 1;
	st.global.u32 	[%rd5], %r66;
	shl.b32 	%r6, %r1, 2;
	shr.u32 	%r7, %r5, 3;
	or.b32  	%r8, %r6, %r7;
	and.b32  	%r67, %r3, 2032;
	or.b32  	%r68, %r8, %r67;
	mul.wide.u32 	%rd24, %r68, 4;
	add.s64 	%rd25, %rd3, %rd24;
	ld.global.u32 	%r9, [%rd25];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:                              // %pass157
	ld.param.u64 	%rd15, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	add.s32 	%r199, %r9, -3;
	shl.b32 	%r200, %r5, 6;
	and.b32  	%r201, %r200, 64;
	shl.b32 	%r202, %r1, 8;
	shl.b32 	%r29, %r5, 3;
	and.b32  	%r203, %r29, 48;
	and.b32  	%r204, %r202, 256;
	or.b32  	%r205, %r201, %r204;
	or.b32  	%r206, %r203, %r205;
	shl.b32 	%r207, %r3, 9;
	and.b32  	%r208, %r207, 1032192;
	shr.u32 	%r30, %r5, 2;
	and.b32  	%r209, %r30, 6;
	and.b32  	%r210, %r6, 8;
	or.b32  	%r211, %r209, %r210;
	shl.b32 	%r212, %r211, 9;
	and.b32  	%r213, %r207, 8192;
	or.b32  	%r214, %r208, %r206;
	or.b32  	%r215, %r214, %r212;
	or.b32  	%r216, %r215, %r213;
	cvt.u64.u32 	%rd28, %r216;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r71, %r72, %r79, %r80}, [%rd29];
	shl.b32 	%r217, %r5, 4;
	and.b32  	%r218, %r217, 16;
	shl.b32 	%r219, %r1, 6;
	and.b32  	%r220, %r219, 64;
	or.b32  	%r221, %r218, %r220;
	shl.b32 	%r31, %r5, 1;
	and.b32  	%r222, %r31, 12;
	or.b32  	%r223, %r222, %r221;
	and.b32  	%r224, %r4, 258048;
	shl.b32 	%r225, %r211, 7;
	and.b32  	%r226, %r4, 2048;
	or.b32  	%r227, %r224, %r223;
	or.b32  	%r228, %r227, %r225;
	or.b32  	%r229, %r228, %r226;
	or.b32  	%r230, %r229, 32;
	mul.wide.u32 	%rd30, %r230, 4;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r87, %r88, %r95, %r96}, [%rd31];
	or.b32  	%r231, %r210, %r30;
	shl.b32 	%r232, %r231, 7;
	or.b32  	%r233, %r219, %r218;
	or.b32  	%r234, %r233, %r222;
	or.b32  	%r235, %r234, %r224;
	or.b32  	%r236, %r235, %r226;
	or.b32  	%r237, %r236, %r232;
	or.b32  	%r238, %r237, 128;
	mul.wide.u32 	%rd32, %r238, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r103, %r104, %r111, %r112}, [%rd33];
	or.b32  	%r239, %r237, 160;
	add.s32 	%r240, %r239, 1;
	mul.wide.u32 	%rd34, %r240, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r119, %r120, %r127, %r128}, [%rd35+-4];
	mov.u32 	%r129, 21520;
	// begin inline asm
	prmt.b32 %r135, %r71, %r72, %r129;
	// end inline asm
	mov.u32 	%r133, 30258;
	// begin inline asm
	prmt.b32 %r136, %r71, %r72, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r143, %r79, %r80, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r144, %r79, %r80, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r151, %r87, %r88, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r152, %r87, %r88, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r159, %r95, %r96, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r160, %r95, %r96, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r167, %r103, %r104, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r168, %r103, %r104, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r175, %r111, %r112, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r176, %r111, %r112, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r183, %r119, %r120, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r184, %r119, %r120, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r191, %r127, %r128, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r192, %r127, %r128, %r133;
	// end inline asm
	mov.u32 	%r193, 25152;
	// begin inline asm
	prmt.b32 %r134, %r135, %r136, %r193;
	// end inline asm
	mov.u32 	%r197, 29521;
	// begin inline asm
	prmt.b32 %r138, %r135, %r136, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r142, %r143, %r144, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r146, %r143, %r144, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r150, %r151, %r152, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r154, %r151, %r152, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r158, %r159, %r160, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r162, %r159, %r160, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r166, %r167, %r168, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r170, %r167, %r168, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r174, %r175, %r176, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r178, %r175, %r176, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r182, %r183, %r184, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r186, %r183, %r184, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r190, %r191, %r192, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r194, %r191, %r192, %r197;
	// end inline asm
	and.b32  	%r32, %r5, 2;
	setp.eq.s32 	%p4, %r32, 0;
	selp.b32 	%r241, %r150, %r134, %p4;
	shfl.sync.bfly.b32	%r242, %r241, 2, 31, -1;
	selp.b32 	%r243, %r134, %r242, %p4;
	selp.b32 	%r244, %r242, %r150, %p4;
	selp.b32 	%r245, %r154, %r138, %p4;
	shfl.sync.bfly.b32	%r246, %r245, 2, 31, -1;
	selp.b32 	%r247, %r138, %r246, %p4;
	selp.b32 	%r248, %r246, %r154, %p4;
	selp.b32 	%r249, %r158, %r142, %p4;
	shfl.sync.bfly.b32	%r250, %r249, 2, 31, -1;
	selp.b32 	%r251, %r142, %r250, %p4;
	selp.b32 	%r252, %r250, %r158, %p4;
	selp.b32 	%r253, %r162, %r146, %p4;
	shfl.sync.bfly.b32	%r254, %r253, 2, 31, -1;
	selp.b32 	%r255, %r146, %r254, %p4;
	selp.b32 	%r256, %r254, %r162, %p4;
	selp.b32 	%r257, %r182, %r166, %p4;
	shfl.sync.bfly.b32	%r258, %r257, 2, 31, -1;
	selp.b32 	%r259, %r166, %r258, %p4;
	selp.b32 	%r260, %r258, %r182, %p4;
	selp.b32 	%r261, %r186, %r170, %p4;
	shfl.sync.bfly.b32	%r262, %r261, 2, 31, -1;
	selp.b32 	%r263, %r170, %r262, %p4;
	selp.b32 	%r264, %r262, %r186, %p4;
	selp.b32 	%r265, %r190, %r174, %p4;
	shfl.sync.bfly.b32	%r266, %r265, 2, 31, -1;
	selp.b32 	%r267, %r174, %r266, %p4;
	selp.b32 	%r268, %r266, %r190, %p4;
	selp.b32 	%r269, %r194, %r178, %p4;
	shfl.sync.bfly.b32	%r270, %r269, 2, 31, -1;
	selp.b32 	%r271, %r178, %r270, %p4;
	selp.b32 	%r272, %r270, %r194, %p4;
	and.b32  	%r33, %r5, 4;
	setp.eq.s32 	%p5, %r33, 0;
	selp.b32 	%r273, %r259, %r243, %p5;
	shfl.sync.bfly.b32	%r274, %r273, 4, 31, -1;
	selp.b32 	%r34, %r243, %r274, %p5;
	selp.b32 	%r35, %r274, %r259, %p5;
	selp.b32 	%r275, %r263, %r247, %p5;
	shfl.sync.bfly.b32	%r276, %r275, 4, 31, -1;
	selp.b32 	%r36, %r247, %r276, %p5;
	selp.b32 	%r37, %r276, %r263, %p5;
	selp.b32 	%r277, %r267, %r251, %p5;
	shfl.sync.bfly.b32	%r278, %r277, 4, 31, -1;
	selp.b32 	%r38, %r251, %r278, %p5;
	selp.b32 	%r39, %r278, %r267, %p5;
	selp.b32 	%r279, %r271, %r255, %p5;
	shfl.sync.bfly.b32	%r280, %r279, 4, 31, -1;
	selp.b32 	%r40, %r255, %r280, %p5;
	selp.b32 	%r41, %r280, %r271, %p5;
	selp.b32 	%r281, %r260, %r244, %p5;
	shfl.sync.bfly.b32	%r282, %r281, 4, 31, -1;
	selp.b32 	%r42, %r244, %r282, %p5;
	selp.b32 	%r43, %r282, %r260, %p5;
	selp.b32 	%r283, %r264, %r248, %p5;
	shfl.sync.bfly.b32	%r284, %r283, 4, 31, -1;
	selp.b32 	%r44, %r248, %r284, %p5;
	selp.b32 	%r45, %r284, %r264, %p5;
	selp.b32 	%r285, %r268, %r252, %p5;
	shfl.sync.bfly.b32	%r286, %r285, 4, 31, -1;
	selp.b32 	%r46, %r252, %r286, %p5;
	selp.b32 	%r47, %r286, %r268, %p5;
	selp.b32 	%r287, %r272, %r256, %p5;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r48, %r256, %r288, %p5;
	selp.b32 	%r49, %r288, %r272, %p5;
	shl.b32 	%r50, %r5, 2;
	and.b32  	%r289, %r50, 28;
	and.b32  	%r290, %r2, 32;
	or.b32  	%r51, %r289, %r290;
	shl.b32 	%r291, %r3, 2;
	and.b32  	%r292, %r291, 8064;
	shl.b32 	%r293, %r1, 1;
	and.b32  	%r294, %r293, 4;
	or.b32  	%r52, %r294, %r7;
	and.b32  	%r53, %r4, 1920;
	and.b32  	%r54, %r291, 64;
	or.b32  	%r55, %r292, %r51;
	and.b32  	%r295, %r29, 24;
	or.b32  	%r56, %r295, %r290;
	and.b32  	%r296, %r1, 1;
	neg.s32 	%r297, %r296;
	and.b32  	%r298, %r297, 640;
	and.b32  	%r57, %r31, 6;
	or.b32  	%r58, %r231, %r298;
	and.b32  	%r299, %r5, 7;
	or.b32  	%r300, %r8, 640;
	shl.b32 	%r59, %r66, %r10;
	min.u32 	%r60, %r199, 31;
	mul.lo.s32 	%r302, %r299, 20;
	add.s32 	%r303, %r302, %r8;
	mul.wide.u32 	%rd36, %r303, 4;
	mov.u64 	%rd37, shmem;
	add.s64 	%rd38, %rd37, 8320;
	add.s64 	%rd6, %rd38, %rd36;
	add.s32 	%r304, %r302, %r300;
	mul.wide.u32 	%rd39, %r304, 4;
	add.s64 	%rd7, %rd38, %rd39;
	add.s32 	%r305, %r302, 160;
	add.s32 	%r306, %r305, %r8;
	mul.wide.u32 	%rd40, %r306, 4;
	add.s64 	%rd8, %rd38, %rd40;
	add.s32 	%r307, %r305, %r300;
	mul.wide.u32 	%rd41, %r307, 4;
	add.s64 	%rd9, %rd38, %rd41;
	add.s32 	%r308, %r302, 320;
	add.s32 	%r309, %r308, %r8;
	mul.wide.u32 	%rd42, %r309, 4;
	add.s64 	%rd10, %rd38, %rd42;
	add.s32 	%r310, %r308, %r300;
	mul.wide.u32 	%rd43, %r310, 4;
	add.s64 	%rd11, %rd38, %rd43;
	or.b32  	%r311, %r5, 24;
	mul.lo.s32 	%r312, %r311, 20;
	add.s32 	%r313, %r312, %r8;
	mul.wide.u32 	%rd44, %r313, 4;
	add.s64 	%rd12, %rd38, %rd44;
	add.s32 	%r314, %r312, %r300;
	mul.wide.u32 	%rd45, %r314, 4;
	add.s64 	%rd13, %rd38, %rd45;
	mov.u32 	%r198, 0;
	mov.u32 	%r826, %r198;
	mov.u32 	%r827, %r198;
	mov.u32 	%r828, %r198;
	mov.u32 	%r829, %r198;
	mov.u32 	%r830, %r198;
	mov.u32 	%r831, %r198;
	mov.u32 	%r832, %r198;
$L__BB0_7:                              // %L1379
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
	or.b32  	%r316, %r52, %r826;
	add.s32 	%r317, %r316, %r53;
	shl.b32 	%r318, %r317, 13;
	and.b32  	%r319, %r318, 16572416;
	or.b32  	%r320, %r319, %r55;
	or.b32  	%r321, %r320, %r54;
	shl.b32 	%r322, %r321, 2;
	cvt.u64.u32 	%rd46, %r322;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.v4.u32 	{%r323, %r324, %r325, %r326}, [%rd47];
	or.b32  	%r327, %r316, 8;
	add.s32 	%r328, %r327, %r53;
	shl.b32 	%r329, %r328, 13;
	and.b32  	%r330, %r329, 16769024;
	or.b32  	%r331, %r330, %r55;
	or.b32  	%r332, %r331, %r54;
	shl.b32 	%r333, %r332, 2;
	cvt.u64.u32 	%rd48, %r333;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.v4.u32 	{%r334, %r335, %r336, %r337}, [%rd49];
	or.b32  	%r338, %r316, 16;
	add.s32 	%r339, %r338, %r53;
	shl.b32 	%r340, %r339, 13;
	and.b32  	%r341, %r340, 16769024;
	or.b32  	%r342, %r341, %r55;
	or.b32  	%r343, %r342, %r54;
	shl.b32 	%r344, %r343, 2;
	cvt.u64.u32 	%rd50, %r344;
	add.s64 	%rd51, %rd2, %rd50;
	ld.global.v4.u32 	{%r345, %r346, %r347, %r348}, [%rd51];
	or.b32  	%r349, %r316, 24;
	add.s32 	%r350, %r349, %r53;
	shl.b32 	%r351, %r350, 13;
	and.b32  	%r352, %r351, 16769024;
	or.b32  	%r353, %r352, %r55;
	or.b32  	%r354, %r353, %r54;
	shl.b32 	%r355, %r354, 2;
	cvt.u64.u32 	%rd52, %r355;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.v4.u32 	{%r356, %r357, %r358, %r359}, [%rd53];
	and.b32  	%r360, %r317, 7;
	mul.lo.s32 	%r361, %r360, 65;
	add.s32 	%r362, %r51, %r361;
	mul.wide.u32 	%rd54, %r362, 4;
	add.s64 	%rd56, %rd37, %rd54;
	st.shared.u32 	[%rd56], %r323;
	cvt.u64.u32 	%rd57, %r361;
	cvt.u64.u32 	%rd58, %r51;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd61, %rd37, %rd60;
	st.shared.u32 	[%rd61+4], %r324;
	st.shared.u32 	[%rd61+8], %r325;
	st.shared.u32 	[%rd61+12], %r326;
	and.b32  	%r363, %r328, 31;
	mul.lo.s32 	%r364, %r363, 65;
	add.s32 	%r365, %r51, %r364;
	mul.wide.u32 	%rd62, %r365, 4;
	add.s64 	%rd63, %rd37, %rd62;
	st.shared.u32 	[%rd63], %r334;
	cvt.u64.u32 	%rd64, %r364;
	add.s64 	%rd65, %rd58, %rd64;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd67, %rd37, %rd66;
	st.shared.u32 	[%rd67+4], %r335;
	st.shared.u32 	[%rd67+8], %r336;
	st.shared.u32 	[%rd67+12], %r337;
	and.b32  	%r366, %r339, 31;
	mul.lo.s32 	%r367, %r366, 65;
	add.s32 	%r368, %r51, %r367;
	mul.wide.u32 	%rd68, %r368, 4;
	add.s64 	%rd69, %rd37, %rd68;
	st.shared.u32 	[%rd69], %r345;
	cvt.u64.u32 	%rd70, %r367;
	add.s64 	%rd71, %rd58, %rd70;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd73, %rd37, %rd72;
	st.shared.u32 	[%rd73+4], %r346;
	st.shared.u32 	[%rd73+8], %r347;
	st.shared.u32 	[%rd73+12], %r348;
	and.b32  	%r369, %r350, 31;
	mul.lo.s32 	%r370, %r369, 65;
	add.s32 	%r371, %r51, %r370;
	mul.wide.u32 	%rd74, %r371, 4;
	add.s64 	%rd75, %rd37, %rd74;
	st.shared.u32 	[%rd75], %r356;
	cvt.u64.u32 	%rd76, %r370;
	add.s64 	%rd77, %rd58, %rd76;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd37, %rd78;
	st.shared.u32 	[%rd79+4], %r357;
	st.shared.u32 	[%rd79+8], %r358;
	st.shared.u32 	[%rd79+12], %r359;
	bar.sync 	0;
	add.s32 	%r18, %r826, %r53;
	mov.u32 	%r833, %r198;
$L__BB0_8:                              // %L4752
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r634, %r833, %r30;
	add.s32 	%r635, %r18, %r634;
	shr.s32 	%r636, %r635, 31;
	shr.u32 	%r637, %r636, 27;
	add.s32 	%r638, %r635, %r637;
	and.b32  	%r639, %r638, -32;
	sub.s32 	%r640, %r635, %r639;
	mad.lo.s32 	%r641, %r640, 65, %r56;
	mul.wide.s32 	%rd80, %r641, 4;
	add.s64 	%rd82, %rd37, %rd80;
	ld.shared.u32 	%r373, [%rd82];
	mov.u32 	%r374, 134744072;
	mov.u32 	%r375, 252645135;
	// begin inline asm
	lop3.b32 %r372, %r373, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r642, %r372, 2021161080;
	xor.b32  	%r383, %r642, -2139062144;
	shr.u32 	%r377, %r373, 4;
	// begin inline asm
	lop3.b32 %r376, %r377, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r643, %r376, 2021161080;
	xor.b32  	%r389, %r643, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r380, %r381}, {%r34}, {%r383}, {%r198, %r198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r386, %r387}, {%r36}, {%r389}, {%r198, %r198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r392, %r393}, {%r34}, {%r389}, {%r198, %r198};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r398, %r399}, {%r36}, {%r383}, {%r392, %r393};
	// end inline asm
	ld.shared.u32 	%r405, [%rd82+4];
	// begin inline asm
	lop3.b32 %r404, %r405, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r644, %r404, 2021161080;
	xor.b32  	%r415, %r644, -2139062144;
	shr.u32 	%r409, %r405, 4;
	// begin inline asm
	lop3.b32 %r408, %r409, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r645, %r408, 2021161080;
	xor.b32  	%r421, %r645, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r412, %r413}, {%r38}, {%r415}, {%r380, %r381};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r418, %r419}, {%r40}, {%r421}, {%r386, %r387};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r424, %r425}, {%r38}, {%r421}, {%r398, %r399};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r430, %r431}, {%r40}, {%r415}, {%r424, %r425};
	// end inline asm
	ld.shared.u32 	%r437, [%rd82+8];
	// begin inline asm
	lop3.b32 %r436, %r437, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r646, %r436, 2021161080;
	xor.b32  	%r447, %r646, -2139062144;
	shr.u32 	%r441, %r437, 4;
	// begin inline asm
	lop3.b32 %r440, %r441, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r647, %r440, 2021161080;
	xor.b32  	%r453, %r647, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r444, %r445}, {%r42}, {%r447}, {%r412, %r413};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r450, %r451}, {%r44}, {%r453}, {%r418, %r419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r456, %r457}, {%r42}, {%r453}, {%r430, %r431};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r462, %r463}, {%r44}, {%r447}, {%r456, %r457};
	// end inline asm
	ld.shared.u32 	%r469, [%rd82+12];
	// begin inline asm
	lop3.b32 %r468, %r469, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r648, %r468, 2021161080;
	xor.b32  	%r479, %r648, -2139062144;
	shr.u32 	%r473, %r469, 4;
	// begin inline asm
	lop3.b32 %r472, %r473, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r649, %r472, 2021161080;
	xor.b32  	%r485, %r649, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r476, %r477}, {%r46}, {%r479}, {%r444, %r445};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r482, %r483}, {%r48}, {%r485}, {%r450, %r451};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r488, %r489}, {%r46}, {%r485}, {%r462, %r463};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r494, %r495}, {%r48}, {%r479}, {%r488, %r489};
	// end inline asm
	ld.shared.u32 	%r501, [%rd82+16];
	// begin inline asm
	lop3.b32 %r500, %r501, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r650, %r500, 2021161080;
	xor.b32  	%r511, %r650, -2139062144;
	shr.u32 	%r505, %r501, 4;
	// begin inline asm
	lop3.b32 %r504, %r505, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r651, %r504, 2021161080;
	xor.b32  	%r517, %r651, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r508, %r509}, {%r35}, {%r511}, {%r476, %r477};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r514, %r515}, {%r37}, {%r517}, {%r482, %r483};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r520, %r521}, {%r35}, {%r517}, {%r494, %r495};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r526, %r527}, {%r37}, {%r511}, {%r520, %r521};
	// end inline asm
	ld.shared.u32 	%r533, [%rd82+20];
	// begin inline asm
	lop3.b32 %r532, %r533, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r652, %r532, 2021161080;
	xor.b32  	%r543, %r652, -2139062144;
	shr.u32 	%r537, %r533, 4;
	// begin inline asm
	lop3.b32 %r536, %r537, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r653, %r536, 2021161080;
	xor.b32  	%r549, %r653, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r540, %r541}, {%r39}, {%r543}, {%r508, %r509};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r546, %r547}, {%r41}, {%r549}, {%r514, %r515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r552, %r553}, {%r39}, {%r549}, {%r526, %r527};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r558, %r559}, {%r41}, {%r543}, {%r552, %r553};
	// end inline asm
	ld.shared.u32 	%r565, [%rd82+24];
	// begin inline asm
	lop3.b32 %r564, %r565, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r654, %r564, 2021161080;
	xor.b32  	%r575, %r654, -2139062144;
	shr.u32 	%r569, %r565, 4;
	// begin inline asm
	lop3.b32 %r568, %r569, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r655, %r568, 2021161080;
	xor.b32  	%r581, %r655, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r43}, {%r575}, {%r540, %r541};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r45}, {%r581}, {%r546, %r547};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r43}, {%r581}, {%r558, %r559};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r45}, {%r575}, {%r584, %r585};
	// end inline asm
	ld.shared.u32 	%r597, [%rd82+28];
	// begin inline asm
	lop3.b32 %r596, %r597, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r656, %r596, 2021161080;
	xor.b32  	%r607, %r656, -2139062144;
	shr.u32 	%r601, %r597, 4;
	// begin inline asm
	lop3.b32 %r600, %r601, %r374, %r375, 40;
	// end inline asm
	add.s32 	%r657, %r600, 2021161080;
	xor.b32  	%r613, %r657, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r47}, {%r607}, {%r572, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r49}, {%r613}, {%r578, %r579};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r47}, {%r613}, {%r590, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r49}, {%r607}, {%r616, %r617};
	// end inline asm
	sub.s32 	%r658, %r604, %r610;
	add.s32 	%r659, %r658, 4;
	shr.s32 	%r630, %r659, 3;
	add.s32 	%r660, %r622, 4;
	shr.s32 	%r629, %r660, 3;
	sub.s32 	%r661, %r605, %r611;
	add.s32 	%r662, %r661, 4;
	shr.s32 	%r633, %r662, 3;
	add.s32 	%r663, %r623, 4;
	shr.s32 	%r632, %r663, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r628, %r629, %r630;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r631, %r632, %r633;
	// end inline asm
	or.b32  	%r664, %r57, %r833;
	mad.lo.s32 	%r665, %r664, 20, %r58;
	mul.wide.u32 	%rd83, %r665, 4;
	add.s64 	%rd84, %rd37, %rd83;
	st.shared.u32 	[%rd84+8320], %r628;
	st.shared.u32 	[%rd84+8400], %r631;
	add.s32 	%r833, %r833, 8;
	setp.ne.s32 	%p6, %r833, 32;
	@%p6 bra 	$L__BB0_8;
// %bb.9:                               // %L6622
                                        //   in Loop: Header=BB0_7 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r684, [%rd6];
	ld.shared.u32 	%r685, [%rd7];
	ld.shared.u32 	%r686, [%rd8];
	ld.shared.u32 	%r687, [%rd9];
	ld.shared.u32 	%r688, [%rd10];
	ld.shared.u32 	%r689, [%rd11];
	ld.shared.u32 	%r690, [%rd12];
	ld.shared.u32 	%r691, [%rd13];
	cvt.s32.s16 	%r692, %r684;
	shr.s32 	%r693, %r684, 16;
	cvt.s32.s16 	%r694, %r685;
	shr.s32 	%r695, %r685, 16;
	cvt.s32.s16 	%r696, %r686;
	shr.s32 	%r697, %r686, 16;
	cvt.s32.s16 	%r698, %r687;
	shr.s32 	%r699, %r687, 16;
	cvt.s32.s16 	%r700, %r688;
	shr.s32 	%r701, %r688, 16;
	cvt.s32.s16 	%r702, %r689;
	shr.s32 	%r703, %r689, 16;
	cvt.s32.s16 	%r704, %r690;
	shr.s32 	%r705, %r690, 16;
	cvt.s32.s16 	%r706, %r691;
	shr.s32 	%r707, %r691, 16;
	add.s32 	%r708, %r692, %r59;
	add.s32 	%r709, %r708, %r694;
	shr.s32 	%r710, %r709, %r60;
	add.s32 	%r711, %r693, %r59;
	add.s32 	%r712, %r711, %r695;
	shr.s32 	%r713, %r712, %r60;
	add.s32 	%r714, %r696, %r59;
	add.s32 	%r715, %r714, %r698;
	shr.s32 	%r716, %r715, %r60;
	add.s32 	%r717, %r697, %r59;
	add.s32 	%r718, %r717, %r699;
	shr.s32 	%r719, %r718, %r60;
	add.s32 	%r720, %r700, %r59;
	add.s32 	%r721, %r720, %r702;
	shr.s32 	%r722, %r721, %r60;
	add.s32 	%r723, %r701, %r59;
	add.s32 	%r724, %r723, %r703;
	shr.s32 	%r725, %r724, %r60;
	add.s32 	%r726, %r704, %r59;
	add.s32 	%r727, %r726, %r706;
	shr.s32 	%r728, %r727, %r60;
	add.s32 	%r729, %r705, %r59;
	add.s32 	%r730, %r729, %r707;
	shr.s32 	%r731, %r730, %r60;
	max.s32 	%r732, %r710, -7;
	min.s32 	%r671, %r732, 7;
	max.s32 	%r733, %r713, -7;
	min.s32 	%r678, %r733, 7;
	max.s32 	%r734, %r716, -7;
	min.s32 	%r670, %r734, 7;
	max.s32 	%r735, %r719, -7;
	min.s32 	%r677, %r735, 7;
	max.s32 	%r736, %r722, -7;
	min.s32 	%r668, %r736, 7;
	max.s32 	%r737, %r725, -7;
	min.s32 	%r675, %r737, 7;
	max.s32 	%r738, %r728, -7;
	min.s32 	%r667, %r738, 7;
	max.s32 	%r739, %r731, -7;
	min.s32 	%r674, %r739, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r666, %r667, %r668, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r669, %r670, %r671, %r666;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r673, %r674, %r675, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r676, %r677, %r678, %r673;
	// end inline asm
	shl.b32 	%r683, %r676, 4;
	// begin inline asm
	lop3.b32 %r750, %r375, %r669, %r683, 202;
	// end inline asm
	setp.eq.s32 	%p7, %r826, 0;
	selp.b32 	%r831, %r750, %r831, %p7;
	selp.b32 	%r832, %r750, %r832, %p7;
	setp.eq.s32 	%p8, %r826, 32;
	selp.b32 	%r827, %r750, %r827, %p8;
	selp.b32 	%r828, %r750, %r828, %p8;
	setp.eq.s32 	%p9, %r826, 64;
	selp.b32 	%r829, %r750, %r829, %p9;
	selp.b32 	%r830, %r750, %r830, %p9;
	add.s32 	%r28, %r826, 32;
	setp.ne.s32 	%p10, %r826, 96;
	mov.u32 	%r826, %r28;
	@%p10 bra 	$L__BB0_7;
// %bb.10:                              // %L7880
	// begin inline asm
	prmt.b32 %r740, %r831, %r827, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r744, %r832, %r828, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r748, %r829, %r750, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r752, %r830, %r750, %r197;
	// end inline asm
	and.b32  	%r788, %r5, 1;
	setp.eq.b32 	%p13, %r788, 1;
	selp.b32 	%r789, %r740, %r744, %p13;
	shfl.sync.bfly.b32	%r790, %r789, 1, 31, -1;
	selp.b32 	%r761, %r790, %r740, %p13;
	selp.b32 	%r762, %r744, %r790, %p13;
	selp.b32 	%r791, %r748, %r752, %p13;
	shfl.sync.bfly.b32	%r792, %r791, 1, 31, -1;
	selp.b32 	%r769, %r792, %r748, %p13;
	selp.b32 	%r770, %r752, %r792, %p13;
	// begin inline asm
	prmt.b32 %r756, %r761, %r762, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r761, %r762, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r769, %r770, %r193;
	// end inline asm
	// begin inline asm
	prmt.b32 %r768, %r769, %r770, %r197;
	// end inline asm
	selp.b32 	%r793, %r764, %r756, %p4;
	shfl.sync.bfly.b32	%r794, %r793, 2, 31, -1;
	selp.b32 	%r773, %r756, %r794, %p4;
	selp.b32 	%r774, %r794, %r764, %p4;
	selp.b32 	%r795, %r768, %r760, %p4;
	shfl.sync.bfly.b32	%r796, %r795, 2, 31, -1;
	selp.b32 	%r781, %r760, %r796, %p4;
	selp.b32 	%r782, %r796, %r768, %p4;
	// begin inline asm
	prmt.b32 %r772, %r773, %r774, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r773, %r774, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r781, %r782, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r781, %r782, %r133;
	// end inline asm
	selp.b32 	%r797, %r780, %r772, %p5;
	shfl.sync.bfly.b32	%r798, %r797, 4, 31, -1;
	selp.b32 	%r799, %r772, %r798, %p5;
	selp.b32 	%r800, %r798, %r780, %p5;
	selp.b32 	%r801, %r784, %r776, %p5;
	shfl.sync.bfly.b32	%r802, %r801, 4, 31, -1;
	selp.b32 	%r803, %r776, %r802, %p5;
	selp.b32 	%r804, %r802, %r784, %p5;
	selp.b32 	%r805, %r799, %r803, %p13;
	shfl.sync.bfly.b32	%r806, %r805, 1, 31, -1;
	selp.b32 	%r807, %r800, %r804, %p13;
	shfl.sync.bfly.b32	%r808, %r807, 1, 31, -1;
	shl.b32 	%r809, %r1, 18;
	shl.b32 	%r810, %r5, 13;
	and.b32  	%r811, %r810, 196608;
	shl.b32 	%r812, %r3, 5;
	and.b32  	%r813, %r31, 8;
	and.b32  	%r814, %r50, 4;
	and.b32  	%r815, %r29, 16;
	selp.b32 	%r816, %r804, %r808, %p13;
	selp.b32 	%r817, %r808, %r800, %p13;
	selp.b32 	%r818, %r803, %r806, %p13;
	selp.b32 	%r819, %r806, %r799, %p13;
	or.b32  	%r820, %r814, %r809;
	or.b32  	%r821, %r820, %r813;
	or.b32  	%r822, %r821, %r815;
	or.b32  	%r823, %r822, %r811;
	or.b32  	%r824, %r823, %r812;
	mul.wide.u32 	%rd85, %r824, 4;
	add.s64 	%rd86, %rd15, %rd85;
	st.global.v4.u32 	[%rd86], {%r819, %r817, %r818, %r816};
	mov.u32 	%r825, 0;
	st.global.u32 	[%rd5], %r825;
	ret;
$L__BB0_1:                              // %L8
	mov.u64 	%rd19, exception1639;
	cvta.global.u64 	%rd20, %rd19;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd20;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L25
	mov.u64 	%rd21, exception1639;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_5:                              // %L254
	mov.u32 	%r69, 2;
	st.global.u32 	[%rd5], %r69;
	mov.u64 	%rd26, exception632;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
