// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_11657
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11668
(
	.param .align 8 .b8 julia_power_by_squaring_11668_param_0[16],
	.param .b64 julia_power_by_squaring_11668_param_1,
	.param .b64 julia_power_by_squaring_11668_param_2
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3406[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<262>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8038>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<193>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r188, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r189, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r189, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd53, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd37, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r190, %r4, 9;
	or.b32  	%r191, %r3, %r1;
	or.b32  	%r192, %r191, %r190;
	mul.wide.u32 	%rd59, %r192, 4;
	add.s64 	%rd4, %rd53, %rd59;
	mov.u32 	%r193, 1;
	st.global.u32 	[%rd4], %r193;
	ld.global.u32 	%r5, [%rd37];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd41, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd41];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd45, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd45];
	sub.s32 	%r194, %r6, %r5;
	and.b32  	%r195, %r194, 255;
	setp.ne.s32 	%p6, %r195, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd49, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd49];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 256;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	not.b32 	%r196, %r7;
	add.s32 	%r197, %r196, %r8;
	and.b32  	%r198, %r197, 3;
	setp.eq.s32 	%p12, %r198, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass170
	bfe.u32 	%r122, %r1, 2, 1;
	shr.u32 	%r123, %r1, 4;
	shl.b32 	%r206, %r123, 1;
	shl.b32 	%r207, %r122, 2;
	shl.b32 	%r124, %r1, 3;
	and.b32  	%r208, %r124, 24;
	or.b32  	%r209, %r207, %r208;
	or.b32  	%r210, %r206, %r209;
	bfe.u32 	%r211, %r1, 3, 1;
	or.b32  	%r126, %r211, %r210;
	or.b32  	%r127, %r126, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r126;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L573
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L576
	cvt.rn.f32.s32 	%f217, %r127;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L593
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L596
	or.b32  	%r229, %r126, 64;
	or.b32  	%r10, %r126, 96;
	cvt.rn.f32.s32 	%f252, %r229;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L675
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L678
	shl.b32 	%r114, %r1, 2;
	cvt.rn.f32.s32 	%f286, %r10;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L695
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L698
	shl.b32 	%r199, %r4, 3;
	and.b32  	%r200, %r114, 4;
	and.b32  	%r201, %r1, 18;
	or.b32  	%r247, %r126, 128;
	or.b32  	%r12, %r126, 160;
	cvt.rn.f32.s32 	%f321, %r247;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L777
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L780
	and.b32  	%r113, %r199, 960;
	or.b32  	%r119, %r201, %r200;
	cvt.rn.f32.s32 	%f355, %r12;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L797
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L800
	and.b32  	%r115, %r114, 32;
	shl.b32 	%r116, %r1, 1;
	or.b32  	%r202, %r119, %r113;
	or.b32  	%r265, %r126, 192;
	or.b32  	%r14, %r126, 224;
	cvt.rn.f32.s32 	%f390, %r265;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L879
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L882
	and.b32  	%r117, %r116, 8;
	or.b32  	%r203, %r202, %r115;
	cvt.rn.f32.s32 	%f424, %r14;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L899
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L902
	or.b32  	%r204, %r203, %r117;
	mul.lo.s32 	%r16, %r126, 63;
	cvt.rn.f32.s32 	%f458, %r16;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f884;
	and.b32  	%r283, %r18, 8388607;
	or.b32  	%r7994, %r283, 1065353216;
	mov.b32 	%f883, %r7994;
	add.s32 	%r284, %r18, -1073741824;
	and.b32  	%r7995, %r284, -8388608;
	setp.eq.s32 	%p68, %r7995, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r285, %r7995, 192937984;
	add.s32 	%r286, %r7994, %r285;
	mov.b32 	%f470, %r286;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r7995, %r7995, %r285;
	mov.b32 	%r7994, %f883;
	setp.ne.s32 	%p69, %r7995, 0;
	setp.ne.s32 	%p70, %r7994, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r205, %r204, 1;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r287, %f35;
	and.b32  	%r288, %r287, -2147483648;
	mov.b32 	%r289, %f884;
	or.b32  	%r290, %r288, %r289;
	mov.b32 	%f884, %r290;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd60, %r205, 4;
	add.s32 	%r299, %r16, 2016;
	cvt.rn.f32.s32 	%f510, %r299;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f888;
	and.b32  	%r300, %r26, 8388607;
	or.b32  	%r7996, %r300, 1065353216;
	mov.b32 	%f887, %r7996;
	add.s32 	%r301, %r26, -1073741824;
	and.b32  	%r7997, %r301, -8388608;
	setp.eq.s32 	%p88, %r7997, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i897.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i897
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r302, %r7997, 192937984;
	add.s32 	%r303, %r7996, %r302;
	mov.b32 	%f522, %r303;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r7997, %r7997, %r302;
	mov.b32 	%r7996, %f887;
	setp.ne.s32 	%p89, %r7997, 0;
	setp.ne.s32 	%p90, %r7996, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i899
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i876
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i880
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i883
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i902
	add.s64 	%rd61, %rd1, %rd60;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r304, %f54;
	and.b32  	%r305, %r304, -2147483648;
	mov.b32 	%r306, %f888;
	or.b32  	%r307, %r305, %r306;
	mov.b32 	%f888, %r307;
$L__BB0_52:                             // %__nv_fmodf.exit903
	ld.global.u32 	%r120, [%rd61];
	mov.u64 	%rd62, 2;
	mov.u64 	%rd63, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11668, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd64, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd64, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass326
	shr.u32 	%r121, %r1, 1;
	shr.u32 	%r125, %r1, 3;
	and.b32  	%r322, %r1, 3;
	and.b32  	%r323, %r125, 2;
	or.b32  	%r324, %r122, %r323;
	and.b32  	%r325, %r121, 4;
	or.b32  	%r128, %r324, %r325;
	mul.lo.s32 	%r326, %r322, %r128;
	shl.b32 	%r327, %r326, 1;
	neg.s32 	%r328, %r327;
	cvt.rn.f32.s32 	%f156, %r328;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r36, %f904;
	and.b32  	%r329, %r36, 8388607;
	or.b32  	%r7998, %r329, 1065353216;
	mov.b32 	%f891, %r7998;
	add.s32 	%r330, %r36, -1073741824;
	and.b32  	%r7999, %r330, -8388608;
	setp.eq.s32 	%p109, %r7999, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i928.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i928
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r7999, 192937984;
	add.s32 	%r332, %r7998, %r331;
	mov.b32 	%f575, %r332;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r7999, %r7999, %r331;
	mov.b32 	%r7998, %f891;
	setp.ne.s32 	%p110, %r7999, 0;
	setp.ne.s32 	%p111, %r7998, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i930
	setp.gt.u32 	%p113, %r36, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i907
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r35, %f72;
	setp.lt.u32 	%p104, %r35, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r35, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i911
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i914
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i933
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r333, %f157;
	and.b32  	%r43, %r333, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r334, %f892;
	or.b32  	%r335, %r43, %r334;
	mov.b32 	%f892, %r335;
$L__BB0_68:                             // %__nv_fmodf.exit934
	and.b32  	%r344, %r116, 6;
	mov.u32 	%r345, -8;
	sub.s32 	%r346, %r345, %r344;
	mul.lo.s32 	%r347, %r128, %r346;
	cvt.rn.f32.s32 	%f88, %r347;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r45, %f908;
	and.b32  	%r348, %r45, 8388607;
	or.b32  	%r8000, %r348, 1065353216;
	mov.b32 	%f895, %r8000;
	add.s32 	%r349, %r45, -1073741824;
	and.b32  	%r8001, %r349, -8388608;
	setp.eq.s32 	%p129, %r8001, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i959.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i959
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r350, %r8001, 192937984;
	add.s32 	%r351, %r8000, %r350;
	mov.b32 	%f626, %r351;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r8001, %r8001, %r350;
	mov.b32 	%r8000, %f895;
	setp.ne.s32 	%p130, %r8001, 0;
	setp.ne.s32 	%p131, %r8000, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i961
	setp.gt.u32 	%p133, %r45, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i938
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r44, %f92;
	setp.lt.u32 	%p124, %r44, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r44, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i942
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i945
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i964
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r352, %f89;
	and.b32  	%r52, %r352, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r353, %f896;
	or.b32  	%r354, %r52, %r353;
	mov.b32 	%f896, %r354;
$L__BB0_82:                             // %__nv_fmodf.exit965
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11668, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd70, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd70, 64;
	@%p142 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_83;
$L__BB0_133:                            // %pass403
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11668, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd76, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd76;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_145;
// %bb.134:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_135;
$L__BB0_141:
	mov.b32 	%r130, %f912;
	and.b32  	%r375, %r130, 8388607;
	or.b32  	%r8021, %r375, 1065353216;
	mov.b32 	%f911, %r8021;
	add.s32 	%r376, %r130, -1073741824;
	and.b32  	%r8022, %r376, -8388608;
	setp.eq.s32 	%p150, %r8022, 0;
	@%p150 bra 	$L__BB0_144;
// %bb.142:                             // %__nv_fmaf_rn.exit4.i.i.i1083.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_143:                            // %__nv_fmaf_rn.exit4.i.i.i1083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r377, %r8022, 192937984;
	add.s32 	%r378, %r8021, %r377;
	mov.b32 	%f679, %r378;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8022, %r8022, %r377;
	mov.b32 	%r8021, %f911;
	setp.ne.s32 	%p151, %r8022, 0;
	setp.ne.s32 	%p152, %r8021, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_143;
$L__BB0_144:                            // %__internal_fmodf_slowpath_mod.exit.i.i1085
	setp.gt.u32 	%p154, %r130, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_145;
$L__BB0_135:                            // %__nv_fast_fdividef.exit.i.i.i1062
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r129, %f162;
	setp.lt.u32 	%p145, %r129, 1073741824;
	@%p145 bra 	$L__BB0_140;
// %bb.136:
	setp.lt.u32 	%p146, %r129, -2147483647;
	@%p146 bra 	$L__BB0_138;
// %bb.137:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_140;
$L__BB0_138:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_140;
// %bb.139:                             // %__nv_fmaf_rn.exit.i.i.i1066
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_140:                            // %__internal_fmodf_fastpath_quot.exit.i.i1069
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_145:                            // %__internal_fmodf_kernel.exit.i1088
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_147;
// %bb.146:
	mov.b32 	%r379, %f159;
	and.b32  	%r380, %r379, -2147483648;
	mov.b32 	%r381, %f912;
	or.b32  	%r382, %r380, %r381;
	mov.b32 	%f912, %r382;
$L__BB0_147:                            // %__nv_fmodf.exit1089
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11668, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd80, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd80;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r58, %f900;
	and.b32  	%r391, %r58, 8388607;
	or.b32  	%r8002, %r391, 1065353216;
	mov.b32 	%f899, %r8002;
	add.s32 	%r392, %r58, -1073741824;
	and.b32  	%r8003, %r392, -8388608;
	setp.eq.s32 	%p170, %r8003, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i990.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r393, %r8003, 192937984;
	add.s32 	%r394, %r8002, %r393;
	mov.b32 	%f730, %r394;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8003, %r8003, %r393;
	mov.b32 	%r8002, %f899;
	setp.ne.s32 	%p171, %r8003, 0;
	setp.ne.s32 	%p172, %r8002, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i992
	setp.gt.u32 	%p174, %r58, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i969
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p165, %r57, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r57, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i973
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i976
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i995
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r395, %f178;
	and.b32  	%r396, %r395, -2147483648;
	mov.b32 	%r397, %f900;
	or.b32  	%r398, %r396, %r397;
	mov.b32 	%f900, %r398;
$L__BB0_97:                             // %__nv_fmodf.exit996
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11668, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd84, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd84, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass468
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r68, %f904;
	and.b32  	%r413, %r68, 8388607;
	or.b32  	%r8004, %r413, 1065353216;
	mov.b32 	%f903, %r8004;
	add.s32 	%r414, %r68, -1073741824;
	and.b32  	%r8005, %r414, -8388608;
	setp.eq.s32 	%p191, %r8005, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i1021.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i1021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r415, %r8005, 192937984;
	add.s32 	%r416, %r8004, %r415;
	mov.b32 	%f782, %r416;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8005, %r8005, %r415;
	mov.b32 	%r8004, %f903;
	setp.ne.s32 	%p192, %r8005, 0;
	setp.ne.s32 	%p193, %r8004, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i1023
	setp.gt.u32 	%p195, %r68, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i1000
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r67, %f122;
	setp.lt.u32 	%p186, %r67, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r67, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i1004
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i1007
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i1026
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r417, %f904;
	or.b32  	%r418, %r43, %r417;
	mov.b32 	%f904, %r418;
$L__BB0_113:                            // %__nv_fmodf.exit1027
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r76, %f908;
	and.b32  	%r427, %r76, 8388607;
	or.b32  	%r8006, %r427, 1065353216;
	mov.b32 	%f907, %r8006;
	add.s32 	%r428, %r76, -1073741824;
	and.b32  	%r8007, %r428, -8388608;
	setp.eq.s32 	%p211, %r8007, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1052.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r429, %r8007, 192937984;
	add.s32 	%r430, %r8006, %r429;
	mov.b32 	%f832, %r430;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8007, %r8007, %r429;
	mov.b32 	%r8006, %f907;
	setp.ne.s32 	%p212, %r8007, 0;
	setp.ne.s32 	%p213, %r8006, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1054
	setp.gt.u32 	%p215, %r76, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1031
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r75, %f139;
	setp.lt.u32 	%p206, %r75, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r75, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1035
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1038
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1057
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r431, %f908;
	or.b32  	%r432, %r52, %r431;
	mov.b32 	%f908, %r432;
$L__BB0_127:                            // %__nv_fmodf.exit1058
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r7991, 0;
	@%p224 bra 	$L__BB0_153;
// %bb.128:                             // %L1562.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r212, %f190;
	mov.b32 	%r219, %f224;
	mov.b32 	%r230, %f259;
	mov.b32 	%r237, %f293;
	mov.b32 	%r248, %f328;
	mov.b32 	%r255, %f362;
	mov.b32 	%r266, %f397;
	mov.b32 	%r273, %f431;
	mov.b32 	%r291, %f480;
	mov.b32 	%r314, %f532;
	mov.b32 	%r336, %f585;
	mov.b32 	%r367, %f636;
	and.b32  	%r213, %r212, -2147483648;
	and.b32  	%r220, %r219, -2147483648;
	and.b32  	%r231, %r230, -2147483648;
	and.b32  	%r238, %r237, -2147483648;
	and.b32  	%r249, %r248, -2147483648;
	and.b32  	%r256, %r255, -2147483648;
	and.b32  	%r267, %r266, -2147483648;
	and.b32  	%r274, %r273, -2147483648;
	and.b32  	%r292, %r291, -2147483648;
	and.b32  	%r315, %r314, -2147483648;
	and.b32  	%r337, %r336, -2147483648;
	and.b32  	%r368, %r367, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r214, %r213, 1056964608;
	or.b32  	%r221, %r220, 1056964608;
	or.b32  	%r232, %r231, 1056964608;
	or.b32  	%r239, %r238, 1056964608;
	or.b32  	%r250, %r249, 1056964608;
	or.b32  	%r257, %r256, 1056964608;
	or.b32  	%r268, %r267, 1056964608;
	or.b32  	%r275, %r274, 1056964608;
	or.b32  	%r293, %r292, 1056964608;
	or.b32  	%r316, %r315, 1056964608;
	or.b32  	%r338, %r337, 1056964608;
	or.b32  	%r369, %r368, 1056964608;
	mov.b32 	%r383, %f689;
	mov.b32 	%r405, %f740;
	mov.b32 	%f191, %r214;
	mov.b32 	%f225, %r221;
	mov.b32 	%f260, %r232;
	mov.b32 	%f294, %r239;
	mov.b32 	%f329, %r250;
	mov.b32 	%f363, %r257;
	mov.b32 	%f398, %r268;
	mov.b32 	%f432, %r275;
	mov.b32 	%f481, %r293;
	mov.b32 	%f533, %r316;
	mov.b32 	%f586, %r338;
	mov.b32 	%f637, %r369;
	and.b32  	%r384, %r383, -2147483648;
	and.b32  	%r406, %r405, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r385, %r384, 1056964608;
	or.b32  	%r407, %r406, 1056964608;
	mov.b32 	%r419, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r385;
	mov.b32 	%f741, %r407;
	and.b32  	%r420, %r419, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r421, %r420, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r421;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r215, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r222, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r233, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r240, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r251, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r258, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r269, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r276, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r216, %r215, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r223, %r222, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r234, %r233, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r241, %r240, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r252, %r251, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r259, %r258, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r270, %r269, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r277, %r276, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r294, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r317, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r339, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r370, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r217, %r216, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r224, %r223, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r235, %r234, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r242, %r241, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r253, %r252, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r260, %r259, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r271, %r270, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r278, %r277, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r295, %r294, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r318, %r317, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r340, %r339, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r371, %r370, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r217, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r224, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r235, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r242, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r253, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r260, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r271, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r278, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r295, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r318, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r340, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r371, 1;
	cvt.rzi.s32.f32 	%r386, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r408, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r218, %r216, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r225, %r223, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r236, %r234, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r243, %r241, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r254, %r252, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r261, %r259, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r272, %r270, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r279, %r277, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r296, %r294, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r319, %r317, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r341, %r339, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r372, %r370, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r387, %r386, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r409, %r408, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r218, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r225, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r236, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r243, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r254, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r261, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r272, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r279, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r296, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r297, %r294, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r319, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r320, %r317, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r341, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r342, %r339, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r372, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r373, %r370, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r387, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r409, 1;
	cvt.rzi.s32.f32 	%r422, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r298, %r297, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r321, %r320, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r343, %r342, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r374, %r373, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r388, %r386, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r410, %r408, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r423, %r422, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r298, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r321, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r343, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r374, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r388, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r389, %r386, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r410, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r411, %r408, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r423, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r390, %r389, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r412, %r411, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r424, %r422, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r390, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r412, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r424, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r425, %r422, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	and.b32  	%r118, %r1, 16;
	mov.b32 	%r228, %f251;
	mov.b32 	%r227, %f3;
	mov.b32 	%r246, %f320;
	mov.b32 	%r245, %f12;
	mov.b32 	%r264, %f389;
	mov.b32 	%r263, %f21;
	mov.b32 	%r282, %f457;
	mov.b32 	%r281, %f30;
	mov.b32 	%r310, %f563;
	mov.b32 	%r309, %f53;
	mov.b32 	%r313, %f560;
	mov.b32 	%r312, %f52;
	mov.b32 	%r357, %f667;
	mov.b32 	%r356, %f87;
	mov.b32 	%r363, %f664;
	mov.b32 	%r362, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r426, %r425, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r226, %r228, %r227;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r244, %r246, %r245;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r262, %r264, %r263;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r280, %r282, %r281;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r308, %r310, %r309;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r311, %r313, %r312;
	// end inline asm
	xor.b32  	%r360, %r363, -2147483648;
	xor.b32  	%r359, %r362, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r426, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r360, %r359;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r361, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r357, %r356;
	// end inline asm
	mov.b32 	%r401, %f771;
	mov.b32 	%r400, %f177;
	mov.b32 	%r404, %f768;
	mov.b32 	%r403, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r399, %r401, %r400;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r445, %f842;
	and.b32  	%r446, %r445, -2147483648;
	or.b32  	%r447, %r446, 1056964608;
	mov.b32 	%f843, %r447;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r448, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r449, %r448, 1;
	setp.eq.b32 	%p219, %r449, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r450, %r448, 2;
	setp.eq.s32 	%p220, %r450, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r451, %r448, 1;
	and.b32  	%r452, %r451, 2;
	setp.eq.s32 	%p221, %r452, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r435, %f873;
	mov.b32 	%r434, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	mov.b32 	%r441, %f870;
	xor.b32  	%r438, %r441, -2147483648;
	mov.b32 	%r440, %f136;
	xor.b32  	%r437, %r440, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r439, %r441, %r440;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r442, %r435, %r434;
	// end inline asm
	shl.b32 	%r454, %r5, 12;
	and.b32  	%r455, %r114, 28;
	shl.b32 	%r456, %r4, 5;
	and.b32  	%r457, %r456, 224;
	or.b32  	%r458, %r455, %r457;
	or.b32  	%r459, %r118, %r2;
	or.b32  	%r87, %r459, %r115;
	or.b32  	%r88, %r454, %r458;
	and.b32  	%r89, %r1, 8;
	shl.b32 	%r460, %r1, 4;
	or.b32  	%r461, %r89, %r460;
	shr.u32 	%r462, %r461, 2;
	and.b32  	%r463, %r462, 30;
	and.b32  	%r90, %r3, 32;
	shr.u32 	%r92, %r2, 1;
	or.b32  	%r93, %r92, 8;
	or.b32  	%r464, %r92, %r90;
	or.b32  	%r94, %r464, 16;
	or.b32  	%r95, %r464, 24;
	or.b32  	%r465, %r119, %r115;
	or.b32  	%r466, %r465, %r117;
	shr.u32 	%r467, %r466, 1;
	mul.lo.s32 	%r468, %r467, 65;
	add.s32 	%r469, %r464, %r468;
	or.b32  	%r470, %r93, %r90;
	add.s32 	%r471, %r470, %r468;
	add.s32 	%r472, %r94, %r468;
	add.s32 	%r473, %r95, %r468;
	shl.b32 	%r474, %r2, 1;
	or.b32  	%r475, %r123, %r474;
	mul.lo.s32 	%r476, %r475, 65;
	add.s32 	%r477, %r463, %r476;
	mul.wide.u32 	%rd88, %r477, 4;
	mov.u64 	%rd89, shmem;
	add.s64 	%rd5, %rd89, %rd88;
	cvt.u64.u32 	%rd90, %r463;
	cvt.u64.u32 	%rd91, %r476;
	add.s64 	%rd92, %rd91, %rd90;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd6, %rd89, %rd93;
	shl.b32 	%r478, %r7, 18;
	add.s32 	%r479, %r478, -786432;
	shl.b32 	%r480, %r2, 2;
	or.b32  	%r481, %r125, %r480;
	or.b32  	%r482, %r481, %r113;
	shl.b32 	%r483, %r482, 8;
	or.b32  	%r96, %r458, %r483;
	cvt.s64.s32 	%rd7, %r479;
	and.b32  	%r484, %r2, 1;
	neg.s32 	%r485, %r484;
	setp.eq.b32 	%p225, %r484, 1;
	and.b32  	%r486, %r485, 1040;
	bfe.s32 	%r487, %r2, 1, 1;
	and.b32  	%r488, %r2, 2;
	setp.eq.s32 	%p226, %r488, 0;
	and.b32  	%r489, %r487, 520;
	mul.lo.s32 	%r490, %r123, 65;
	shr.u32 	%r491, %r2, 3;
	mul.lo.s32 	%r492, %r491, 130;
	bfe.s32 	%r493, %r2, 2, 1;
	and.b32  	%r494, %r2, 4;
	setp.eq.s32 	%p227, %r494, 0;
	and.b32  	%r495, %r493, 260;
	add.s32 	%r496, %r486, %r463;
	add.s32 	%r497, %r496, %r489;
	add.s32 	%r498, %r497, %r490;
	add.s32 	%r499, %r498, %r492;
	add.s32 	%r500, %r499, %r495;
	mul.wide.u32 	%rd94, %r500, 4;
	add.s64 	%rd8, %rd89, %rd94;
	selp.b64 	%rd95, 0, 260, %p227;
	cvt.u64.u32 	%rd96, %r492;
	cvt.u64.u32 	%rd97, %r490;
	selp.b64 	%rd98, 0, 520, %p226;
	selp.b64 	%rd99, 1040, 0, %p225;
	add.s64 	%rd100, %rd90, %rd99;
	add.s64 	%rd101, %rd100, %rd98;
	add.s64 	%rd102, %rd101, %rd97;
	add.s64 	%rd103, %rd102, %rd96;
	add.s64 	%rd104, %rd103, %rd95;
	shl.b64 	%rd105, %rd104, 2;
	add.s64 	%rd9, %rd89, %rd105;
	cvt.u64.u32 	%rd106, %r499;
	add.s64 	%rd107, %rd106, %rd95;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd10, %rd89, %rd108;
	add.s32 	%r501, %r500, 2113;
	mul.wide.u32 	%rd109, %r501, 4;
	add.s64 	%rd11, %rd89, %rd109;
	add.s32 	%r502, %r500, 2082;
	mul.wide.u32 	%rd110, %r502, 4;
	add.s64 	%rd12, %rd89, %rd110;
	add.s32 	%r503, %r500, 2114;
	mul.wide.u32 	%rd111, %r503, 4;
	add.s64 	%rd13, %rd89, %rd111;
	add.s32 	%r504, %r500, 4194;
	mul.wide.u32 	%rd112, %r504, 4;
	add.s64 	%rd14, %rd89, %rd112;
	add.s32 	%r505, %r500, 4163;
	mul.wide.u32 	%rd113, %r505, 4;
	add.s64 	%rd15, %rd89, %rd113;
	add.s32 	%r506, %r500, 4195;
	mul.wide.u32 	%rd114, %r506, 4;
	add.s64 	%rd16, %rd89, %rd114;
	add.s32 	%r507, %r500, 6275;
	mul.wide.u32 	%rd115, %r507, 4;
	add.s64 	%rd17, %rd89, %rd115;
	add.s32 	%r508, %r500, 6244;
	mul.wide.u32 	%rd116, %r508, 4;
	add.s64 	%rd18, %rd89, %rd116;
	add.s32 	%r509, %r500, 6276;
	mul.wide.u32 	%rd117, %r509, 4;
	add.s64 	%rd19, %rd89, %rd117;
	bfe.s32 	%r510, %r1, 2, 1;
	and.b32  	%r97, %r510, 260;
	mul.wide.u32 	%rd118, %r473, 4;
	add.s64 	%rd20, %rd89, %rd118;
	mul.wide.u32 	%rd119, %r472, 4;
	add.s64 	%rd21, %rd89, %rd119;
	mul.wide.u32 	%rd120, %r471, 4;
	add.s64 	%rd22, %rd89, %rd120;
	mul.wide.u32 	%rd121, %r469, 4;
	add.s64 	%rd23, %rd89, %rd121;
	setp.eq.s32 	%p228, %r89, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8036, %r7991;
	mov.u32 	%r8035, %r7991;
	mov.u32 	%r8034, %r7991;
	mov.u32 	%r8033, %r7991;
	mov.u32 	%r8032, %r7991;
	mov.u32 	%r8031, %r7991;
	mov.u32 	%r8030, %r7991;
	mov.u32 	%r8029, %r7991;
	mov.u32 	%r8028, %r7991;
	mov.u32 	%r8027, %r7991;
	mov.u32 	%r8026, %r7991;
	mov.u32 	%r8025, %r7991;
	mov.u32 	%r110, %r7991;
	bra.uni 	$L__BB0_129;
$L__BB0_152:                            // %pass16918
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7987, %r7993, 786432;
	cvt.s64.s32 	%rd175, %r7987;
	add.s64 	%rd176, %rd175, %rd7;
	shr.u64 	%rd177, %rd176, 39;
	add.s64 	%rd178, %rd176, %rd177;
	shr.s64 	%rd179, %rd178, 25;
	setp.lt.s64 	%p256, %rd176, 0;
	and.b64  	%rd180, %rd178, -33554432;
	setp.ne.s64 	%p257, %rd180, %rd176;
	and.pred  	%p258, %p256, %p257;
	selp.u64 	%rd181, 1, 0, %p258;
	sub.s64 	%rd182, %rd181, %rd179;
	shl.b64 	%rd183, %rd182, 25;
	add.s64 	%rd184, %rd183, %rd176;
	shl.b64 	%rd185, %rd184, 2;
	add.s64 	%rd186, %rd3, %rd185;
	st.global.v4.u32 	[%rd186], {%r183, %r185, %r184, %r186};
	setp.ne.s32 	%p259, %r110, 7936;
	add.s32 	%r110, %r110, 256;
	add.s32 	%r7988, %r110, %r5;
	setp.gt.s32 	%p260, %r6, %r7988;
	and.pred  	%p261, %p259, %p260;
	@%p261 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_153;
$L__BB0_129:                            // %L1562
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	and.b32  	%r576, %r110, 7936;
	or.b32  	%r577, %r87, %r576;
	shl.b32 	%r578, %r577, 12;
	add.s32 	%r579, %r88, %r578;
	shr.s32 	%r580, %r579, 31;
	shr.u32 	%r581, %r580, 7;
	add.s32 	%r582, %r579, %r581;
	shr.s32 	%r583, %r582, 25;
	setp.lt.s32 	%p229, %r579, 0;
	and.b32  	%r584, %r582, -33554432;
	setp.ne.s32 	%p230, %r584, %r579;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r585, 1, 0, %p231;
	sub.s32 	%r586, %r585, %r583;
	shl.b32 	%r587, %r586, 25;
	add.s32 	%r588, %r587, %r579;
	mul.wide.s32 	%rd122, %r588, 4;
	add.s64 	%rd123, %rd2, %rd122;
	ld.global.v4.u32 	{%r589, %r590, %r591, %r592}, [%rd123];
	or.b32  	%r593, %r578, 262144;
	add.s32 	%r594, %r88, %r593;
	shr.s32 	%r595, %r594, 31;
	shr.u32 	%r596, %r595, 7;
	add.s32 	%r597, %r594, %r596;
	shr.s32 	%r598, %r597, 25;
	setp.lt.s32 	%p232, %r594, 0;
	and.b32  	%r599, %r597, -33554432;
	setp.ne.s32 	%p233, %r599, %r594;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r600, 1, 0, %p234;
	sub.s32 	%r601, %r600, %r598;
	shl.b32 	%r602, %r601, 25;
	add.s32 	%r603, %r602, %r594;
	mul.wide.s32 	%rd124, %r603, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r604, %r605, %r606, %r607}, [%rd125];
	or.b32  	%r608, %r578, 524288;
	add.s32 	%r609, %r88, %r608;
	shr.s32 	%r610, %r609, 31;
	shr.u32 	%r611, %r610, 7;
	add.s32 	%r612, %r609, %r611;
	shr.s32 	%r613, %r612, 25;
	setp.lt.s32 	%p235, %r609, 0;
	and.b32  	%r614, %r612, -33554432;
	setp.ne.s32 	%p236, %r614, %r609;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r615, 1, 0, %p237;
	sub.s32 	%r616, %r615, %r613;
	shl.b32 	%r617, %r616, 25;
	add.s32 	%r618, %r617, %r609;
	mul.wide.s32 	%rd126, %r618, 4;
	add.s64 	%rd127, %rd2, %rd126;
	ld.global.v4.u32 	{%r619, %r620, %r621, %r622}, [%rd127];
	or.b32  	%r623, %r578, 786432;
	add.s32 	%r624, %r88, %r623;
	shr.s32 	%r625, %r624, 31;
	shr.u32 	%r626, %r625, 7;
	add.s32 	%r627, %r624, %r626;
	shr.s32 	%r628, %r627, 25;
	setp.lt.s32 	%p238, %r624, 0;
	and.b32  	%r629, %r627, -33554432;
	setp.ne.s32 	%p239, %r629, %r624;
	and.pred  	%p240, %p238, %p239;
	selp.u32 	%r630, 1, 0, %p240;
	sub.s32 	%r631, %r630, %r628;
	shl.b32 	%r632, %r631, 25;
	add.s32 	%r633, %r632, %r624;
	mul.wide.s32 	%rd128, %r633, 4;
	add.s64 	%rd129, %rd2, %rd128;
	ld.global.v4.u32 	{%r634, %r635, %r636, %r637}, [%rd129];
	selp.b32 	%r638, %r591, %r589, %p228;
	shfl.sync.bfly.b32	%r639, %r638, 8, 31, -1;
	selp.b32 	%r512, %r589, %r639, %p228;
	selp.b32 	%r513, %r639, %r591, %p228;
	selp.b32 	%r640, %r592, %r590, %p228;
	shfl.sync.bfly.b32	%r641, %r640, 8, 31, -1;
	selp.b32 	%r520, %r590, %r641, %p228;
	selp.b32 	%r521, %r641, %r592, %p228;
	selp.b32 	%r642, %r606, %r604, %p228;
	shfl.sync.bfly.b32	%r643, %r642, 8, 31, -1;
	selp.b32 	%r528, %r604, %r643, %p228;
	selp.b32 	%r529, %r643, %r606, %p228;
	selp.b32 	%r644, %r607, %r605, %p228;
	shfl.sync.bfly.b32	%r645, %r644, 8, 31, -1;
	selp.b32 	%r536, %r605, %r645, %p228;
	selp.b32 	%r537, %r645, %r607, %p228;
	selp.b32 	%r646, %r621, %r619, %p228;
	shfl.sync.bfly.b32	%r647, %r646, 8, 31, -1;
	selp.b32 	%r544, %r619, %r647, %p228;
	selp.b32 	%r545, %r647, %r621, %p228;
	selp.b32 	%r648, %r622, %r620, %p228;
	shfl.sync.bfly.b32	%r649, %r648, 8, 31, -1;
	selp.b32 	%r552, %r620, %r649, %p228;
	selp.b32 	%r553, %r649, %r622, %p228;
	selp.b32 	%r650, %r636, %r634, %p228;
	shfl.sync.bfly.b32	%r651, %r650, 8, 31, -1;
	selp.b32 	%r560, %r634, %r651, %p228;
	selp.b32 	%r561, %r651, %r636, %p228;
	selp.b32 	%r652, %r637, %r635, %p228;
	shfl.sync.bfly.b32	%r653, %r652, 8, 31, -1;
	selp.b32 	%r568, %r635, %r653, %p228;
	selp.b32 	%r569, %r653, %r637, %p228;
	mov.u32 	%r570, 21520;
	// begin inline asm
	prmt.b32 %r511, %r512, %r513, %r570;
	// end inline asm
	mov.u32 	%r574, 30258;
	// begin inline asm
	prmt.b32 %r515, %r512, %r513, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r520, %r521, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r520, %r521, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r528, %r529, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r528, %r529, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r536, %r537, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r536, %r537, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r544, %r545, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r544, %r545, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r552, %r553, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r552, %r553, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r560, %r561, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r560, %r561, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r567, %r568, %r569, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r568, %r569, %r574;
	// end inline asm
	st.shared.u32 	[%rd8], %r511;
	st.shared.u32 	[%rd9+128], %r515;
	st.shared.u32 	[%rd9+4], %r519;
	st.shared.u32 	[%rd9+132], %r523;
	st.shared.u32 	[%rd10+8324], %r527;
	st.shared.u32 	[%rd11], %r531;
	st.shared.u32 	[%rd12], %r535;
	st.shared.u32 	[%rd13], %r539;
	st.shared.u32 	[%rd10+16648], %r543;
	st.shared.u32 	[%rd14], %r547;
	st.shared.u32 	[%rd15], %r551;
	st.shared.u32 	[%rd16], %r555;
	st.shared.u32 	[%rd10+24972], %r559;
	st.shared.u32 	[%rd17], %r563;
	st.shared.u32 	[%rd18], %r567;
	st.shared.u32 	[%rd19], %r571;
	bar.sync 	0;
	or.b32  	%r654, %r110, %r208;
	or.b32  	%r111, %r654, %r125;
	shr.u32 	%r8023, %r111, 6;
	mov.u64 	%rd189, %rd23;
	mov.u64 	%rd190, %rd22;
	mov.u64 	%rd191, %rd21;
	mov.u64 	%rd192, %rd20;
	mov.u32 	%r8024, %r7991;
$L__BB0_130:                            // %pass5591
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7839, %r111, %r8024;
	and.b32  	%r7840, %r7839, 1;
	neg.s32 	%r7841, %r7840;
	and.b32  	%r7842, %r7841, 1040;
	bfe.s32 	%r7843, %r7839, 1, 1;
	and.b32  	%r7844, %r7843, 520;
	bfe.s32 	%r7845, %r7839, 4, 1;
	and.b32  	%r7846, %r7845, 65;
	bfe.s32 	%r7847, %r7839, 3, 1;
	and.b32  	%r7848, %r7847, 130;
	and.b32  	%r7849, %r8023, 3;
	mul.lo.s32 	%r7850, %r7849, 2081;
	or.b32  	%r7851, %r7842, %r90;
	or.b32  	%r7852, %r7851, %r92;
	or.b32  	%r7853, %r7852, %r7844;
	add.s32 	%r7854, %r7853, %r7846;
	add.s32 	%r7855, %r7854, %r7848;
	add.s32 	%r7856, %r7855, %r7850;
	add.s32 	%r7857, %r7856, %r97;
	mul.wide.u32 	%rd130, %r7857, 4;
	add.s64 	%rd132, %rd89, %rd130;
	ld.shared.u32 	%r7858, [%rd132];
	or.b32  	%r7859, %r93, %r7851;
	add.s32 	%r7860, %r7859, %r7844;
	add.s32 	%r7861, %r7860, %r7846;
	add.s32 	%r7862, %r7861, %r7848;
	add.s32 	%r7863, %r7862, %r7850;
	add.s32 	%r7864, %r7863, %r97;
	mul.wide.u32 	%rd133, %r7864, 4;
	add.s64 	%rd134, %rd89, %rd133;
	ld.shared.u32 	%r7865, [%rd134];
	add.s32 	%r7866, %r94, %r7842;
	or.b32  	%r7867, %r7866, %r7844;
	add.s32 	%r7868, %r7867, %r7846;
	add.s32 	%r7869, %r7868, %r7848;
	add.s32 	%r7870, %r7869, %r7850;
	add.s32 	%r7871, %r7870, %r97;
	mul.wide.u32 	%rd135, %r7871, 4;
	add.s64 	%rd136, %rd89, %rd135;
	ld.shared.u32 	%r7872, [%rd136];
	add.s32 	%r7873, %r95, %r7842;
	add.s32 	%r7874, %r7873, %r7844;
	add.s32 	%r7875, %r7874, %r7846;
	add.s32 	%r7876, %r7875, %r7848;
	add.s32 	%r7877, %r7876, %r7850;
	add.s32 	%r7878, %r7877, %r97;
	mul.wide.u32 	%rd137, %r7878, 4;
	add.s64 	%rd138, %rd89, %rd137;
	ld.shared.u32 	%r7879, [%rd138];
	// begin inline asm
	mov.b32 %r660, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r671, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r659, %r7858, -2004318072;
	mov.u32 	%r658, 983055;
	// begin inline asm
	lop3.b32 %r657, %r658, %r659, %r660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r661, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r662, %r660, %r661;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r665, %r657, %r662;
	// end inline asm
	mov.u32 	%r669, 15728880;
	// begin inline asm
	lop3.b32 %r668, %r669, %r659, %r671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r672, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r673, %r671, %r672;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r676, %r668, %r673;
	// end inline asm
	shr.u32 	%r681, %r659, 8;
	// begin inline asm
	lop3.b32 %r679, %r658, %r681, %r660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r683, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r684, %r660, %r683;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r687, %r679, %r684;
	// end inline asm
	// begin inline asm
	lop3.b32 %r690, %r669, %r681, %r671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r694, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r695, %r671, %r694;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r698, %r690, %r695;
	// end inline asm
	// begin inline asm
	mov.b32 %r706, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r717, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r705, %r7865, -2004318072;
	// begin inline asm
	lop3.b32 %r703, %r658, %r705, %r706, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r707, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r708, %r706, %r707;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r711, %r703, %r708;
	// end inline asm
	// begin inline asm
	lop3.b32 %r714, %r669, %r705, %r717, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r718, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r719, %r717, %r718;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r722, %r714, %r719;
	// end inline asm
	shr.u32 	%r727, %r705, 8;
	// begin inline asm
	lop3.b32 %r725, %r658, %r727, %r706, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r729, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r730, %r706, %r729;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r733, %r725, %r730;
	// end inline asm
	// begin inline asm
	lop3.b32 %r736, %r669, %r727, %r717, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r740, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r741, %r717, %r740;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r744, %r736, %r741;
	// end inline asm
	// begin inline asm
	mov.b32 %r752, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r763, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r751, %r7872, -2004318072;
	// begin inline asm
	lop3.b32 %r749, %r658, %r751, %r752, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r753, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r754, %r752, %r753;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r757, %r749, %r754;
	// end inline asm
	// begin inline asm
	lop3.b32 %r760, %r669, %r751, %r763, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r764, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r765, %r763, %r764;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r768, %r760, %r765;
	// end inline asm
	shr.u32 	%r773, %r751, 8;
	// begin inline asm
	lop3.b32 %r771, %r658, %r773, %r752, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r775, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r776, %r752, %r775;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r779, %r771, %r776;
	// end inline asm
	// begin inline asm
	lop3.b32 %r782, %r669, %r773, %r763, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r786, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r787, %r763, %r786;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r790, %r782, %r787;
	// end inline asm
	// begin inline asm
	mov.b32 %r798, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r809, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r797, %r7879, -2004318072;
	// begin inline asm
	lop3.b32 %r795, %r658, %r797, %r798, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r799, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r800, %r798, %r799;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r803, %r795, %r800;
	// end inline asm
	// begin inline asm
	lop3.b32 %r806, %r669, %r797, %r809, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r810, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r811, %r809, %r810;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r814, %r806, %r811;
	// end inline asm
	shr.u32 	%r819, %r797, 8;
	// begin inline asm
	lop3.b32 %r817, %r658, %r819, %r798, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r821, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r822, %r798, %r821;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r825, %r817, %r822;
	// end inline asm
	// begin inline asm
	lop3.b32 %r828, %r669, %r819, %r809, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r832, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r833, %r809, %r832;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r836, %r828, %r833;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r839, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r841, %r839, %r665;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r844, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r846, %r844, %r676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r849, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r851, %r849, %r687;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r854, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r856, %r854, %r698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r859, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r861, %r859, %r711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r864, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r866, %r864, %r722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r869, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r871, %r869, %r733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r874, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r876, %r874, %r744;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r879, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r881, %r879, %r757;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r884, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r886, %r884, %r768;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r889, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r891, %r889, %r779;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r894, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r896, %r894, %r790;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r899, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r901, %r899, %r803;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r904, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r906, %r904, %r814;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r909, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r911, %r909, %r825;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r914, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r916, %r914, %r836;
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r923, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r921, %r658, %r923, %r924, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r926, %r924, %r925;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r929, %r921, %r926;
	// end inline asm
	// begin inline asm
	lop3.b32 %r932, %r669, %r923, %r935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r937, %r935, %r936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r940, %r932, %r937;
	// end inline asm
	shr.u32 	%r945, %r923, 8;
	// begin inline asm
	lop3.b32 %r943, %r658, %r945, %r924, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r948, %r924, %r947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r951, %r943, %r948;
	// end inline asm
	// begin inline asm
	lop3.b32 %r954, %r669, %r945, %r935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r958, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r959, %r935, %r958;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r962, %r954, %r959;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r969, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r967, %r658, %r969, %r970, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r972, %r970, %r971;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r975, %r967, %r972;
	// end inline asm
	// begin inline asm
	lop3.b32 %r978, %r669, %r969, %r981, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r983, %r981, %r982;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r986, %r978, %r983;
	// end inline asm
	shr.u32 	%r991, %r969, 8;
	// begin inline asm
	lop3.b32 %r989, %r658, %r991, %r970, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r993, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r994, %r970, %r993;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r997, %r989, %r994;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1000, %r669, %r991, %r981, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1004, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1005, %r981, %r1004;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1008, %r1000, %r1005;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1027, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1015, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r1013, %r658, %r1015, %r1016, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1018, %r1016, %r1017;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1021, %r1013, %r1018;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1024, %r669, %r1015, %r1027, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1029, %r1027, %r1028;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1032, %r1024, %r1029;
	// end inline asm
	shr.u32 	%r1037, %r1015, 8;
	// begin inline asm
	lop3.b32 %r1035, %r658, %r1037, %r1016, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1039, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1040, %r1016, %r1039;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1043, %r1035, %r1040;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1046, %r669, %r1037, %r1027, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1050, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1051, %r1027, %r1050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1054, %r1046, %r1051;
	// end inline asm
	// begin inline asm
	mov.b32 %r1062, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1073, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1061, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r1059, %r658, %r1061, %r1062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1063, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1064, %r1062, %r1063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1067, %r1059, %r1064;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1070, %r669, %r1061, %r1073, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1074, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1075, %r1073, %r1074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1078, %r1070, %r1075;
	// end inline asm
	shr.u32 	%r1083, %r1061, 8;
	// begin inline asm
	lop3.b32 %r1081, %r658, %r1083, %r1062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1085, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1086, %r1062, %r1085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1089, %r1081, %r1086;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1092, %r669, %r1083, %r1073, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1096, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1097, %r1073, %r1096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1100, %r1092, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1103, %r226, %r929, %r841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r226, %r940, %r846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1111, %r226, %r951, %r851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r226, %r962, %r856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r226, %r975, %r861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r226, %r986, %r866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1127, %r226, %r997, %r871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r226, %r1008, %r876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r226, %r1021, %r881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r226, %r1032, %r886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r226, %r1043, %r891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r226, %r1054, %r896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r226, %r1067, %r901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1155, %r226, %r1078, %r906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r226, %r1089, %r911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r226, %r1100, %r916;
	// end inline asm
	// begin inline asm
	mov.b32 %r1172, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1183, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1171, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r1169, %r658, %r1171, %r1172, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1173, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1174, %r1172, %r1173;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1177, %r1169, %r1174;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1180, %r669, %r1171, %r1183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1184, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1185, %r1183, %r1184;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1188, %r1180, %r1185;
	// end inline asm
	shr.u32 	%r1193, %r1171, 8;
	// begin inline asm
	lop3.b32 %r1191, %r658, %r1193, %r1172, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1195, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1196, %r1172, %r1195;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1199, %r1191, %r1196;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1202, %r669, %r1193, %r1183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1206, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1207, %r1183, %r1206;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1210, %r1202, %r1207;
	// end inline asm
	// begin inline asm
	mov.b32 %r1218, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1229, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1217, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r1215, %r658, %r1217, %r1218, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1219, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1220, %r1218, %r1219;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1223, %r1215, %r1220;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1226, %r669, %r1217, %r1229, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1230, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1231, %r1229, %r1230;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1234, %r1226, %r1231;
	// end inline asm
	shr.u32 	%r1239, %r1217, 8;
	// begin inline asm
	lop3.b32 %r1237, %r658, %r1239, %r1218, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1241, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1242, %r1218, %r1241;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1245, %r1237, %r1242;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1248, %r669, %r1239, %r1229, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1252, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1253, %r1229, %r1252;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1256, %r1248, %r1253;
	// end inline asm
	// begin inline asm
	mov.b32 %r1264, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1275, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1263, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r1261, %r658, %r1263, %r1264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1265, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1266, %r1264, %r1265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1269, %r1261, %r1266;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1272, %r669, %r1263, %r1275, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1276, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1277, %r1275, %r1276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1280, %r1272, %r1277;
	// end inline asm
	shr.u32 	%r1285, %r1263, 8;
	// begin inline asm
	lop3.b32 %r1283, %r658, %r1285, %r1264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1287, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1288, %r1264, %r1287;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1291, %r1283, %r1288;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1294, %r669, %r1285, %r1275, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1298, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1299, %r1275, %r1298;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1302, %r1294, %r1299;
	// end inline asm
	// begin inline asm
	mov.b32 %r1310, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1321, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1309, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r1307, %r658, %r1309, %r1310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1311, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1312, %r1310, %r1311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1315, %r1307, %r1312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1318, %r669, %r1309, %r1321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1323, %r1321, %r1322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1326, %r1318, %r1323;
	// end inline asm
	shr.u32 	%r1331, %r1309, 8;
	// begin inline asm
	lop3.b32 %r1329, %r658, %r1331, %r1310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1333, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1334, %r1310, %r1333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1337, %r1329, %r1334;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1340, %r669, %r1331, %r1321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1344, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1345, %r1321, %r1344;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1348, %r1340, %r1345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1351, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1353, %r1351, %r1177, %r1103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1357, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r1357, %r1188, %r1107;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1365, %r1363, %r1199, %r1111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1369, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r1369, %r1210, %r1115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1375, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r1375, %r1223, %r1119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1381, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1383, %r1381, %r1234, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1387, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r1387, %r1245, %r1127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1393, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r1393, %r1256, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1399, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1401, %r1399, %r1269, %r1135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1405, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r1405, %r1280, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1411, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r1411, %r1291, %r1143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1419, %r1417, %r1302, %r1147;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1423, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r1423, %r1315, %r1151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1429, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1429, %r1326, %r1155;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1435, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r1435, %r1337, %r1159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1441, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r1441, %r1348, %r1163;
	// end inline asm
	// begin inline asm
	mov.b32 %r1452, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1463, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1451, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r1449, %r658, %r1451, %r1452, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1453, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1454, %r1452, %r1453;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1457, %r1449, %r1454;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1460, %r669, %r1451, %r1463, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1464, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1465, %r1463, %r1464;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1468, %r1460, %r1465;
	// end inline asm
	shr.u32 	%r1473, %r1451, 8;
	// begin inline asm
	lop3.b32 %r1471, %r658, %r1473, %r1452, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1475, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1476, %r1452, %r1475;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1479, %r1471, %r1476;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1482, %r669, %r1473, %r1463, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1486, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1487, %r1463, %r1486;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1490, %r1482, %r1487;
	// end inline asm
	// begin inline asm
	mov.b32 %r1498, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1509, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1497, %r8027, -2004318072;
	// begin inline asm
	lop3.b32 %r1495, %r658, %r1497, %r1498, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1499, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1500, %r1498, %r1499;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1503, %r1495, %r1500;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1506, %r669, %r1497, %r1509, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1510, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1511, %r1509, %r1510;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1514, %r1506, %r1511;
	// end inline asm
	shr.u32 	%r1519, %r1497, 8;
	// begin inline asm
	lop3.b32 %r1517, %r658, %r1519, %r1498, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1521, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1522, %r1498, %r1521;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1525, %r1517, %r1522;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1528, %r669, %r1519, %r1509, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1532, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1533, %r1509, %r1532;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1536, %r1528, %r1533;
	// end inline asm
	// begin inline asm
	mov.b32 %r1544, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1555, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1543, %r8026, -2004318072;
	// begin inline asm
	lop3.b32 %r1541, %r658, %r1543, %r1544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1545, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1546, %r1544, %r1545;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1549, %r1541, %r1546;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1552, %r669, %r1543, %r1555, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1556, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1557, %r1555, %r1556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1560, %r1552, %r1557;
	// end inline asm
	shr.u32 	%r1565, %r1543, 8;
	// begin inline asm
	lop3.b32 %r1563, %r658, %r1565, %r1544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1567, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1568, %r1544, %r1567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1571, %r1563, %r1568;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1574, %r669, %r1565, %r1555, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1578, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1579, %r1555, %r1578;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1582, %r1574, %r1579;
	// end inline asm
	// begin inline asm
	mov.b32 %r1590, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1601, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1589, %r8025, -2004318072;
	// begin inline asm
	lop3.b32 %r1587, %r658, %r1589, %r1590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1591, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1592, %r1590, %r1591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1595, %r1587, %r1592;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1598, %r669, %r1589, %r1601, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1602, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1603, %r1601, %r1602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1606, %r1598, %r1603;
	// end inline asm
	shr.u32 	%r1611, %r1589, 8;
	// begin inline asm
	lop3.b32 %r1609, %r658, %r1611, %r1590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1613, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1614, %r1590, %r1613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1617, %r1609, %r1614;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1620, %r669, %r1611, %r1601, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1624, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1625, %r1601, %r1624;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1628, %r1620, %r1625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r262, %r1457, %r1353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r262, %r1468, %r1359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r262, %r1479, %r1365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r262, %r1490, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r262, %r1503, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r262, %r1514, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r262, %r1525, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r262, %r1536, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r262, %r1549, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r262, %r1560, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r262, %r1571, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r262, %r1582, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r262, %r1595, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r262, %r1606, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r262, %r1617, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r262, %r1628, %r1443;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1695, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1697, %r1695, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r308, %r1702, %r1697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1704, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1706, %r1704, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r308, %r1711, %r1706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1713, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1713, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r308, %r1720, %r1715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1722, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r1722, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r308, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r308, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r1740, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r308, %r1747, %r1742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1749, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r1749, %r1753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r308, %r1756, %r1751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1758, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r1758, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r308, %r1765, %r1760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r311, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r308, %r1699, %r1767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r311, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r308, %r1708, %r1774;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1781, %r311, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r308, %r1717, %r1781;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r311, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r308, %r1726, %r1788;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1795, %r311, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r308, %r1735, %r1795;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1802, %r311, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r308, %r1744, %r1802;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1809, %r311, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r308, %r1753, %r1809;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1816, %r311, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r308, %r1762, %r1816;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1910, %r1907}, {%r355, %r361, %r358, %r364}, {%r1700, %r1770}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1919, %r1916}, {%r355, %r361, %r358, %r364}, {%r1709, %r1777}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1928, %r1925}, {%r355, %r361, %r358, %r364}, {%r1718, %r1784}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1937, %r1934}, {%r355, %r361, %r358, %r364}, {%r1727, %r1791}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1946, %r1943}, {%r355, %r361, %r358, %r364}, {%r1736, %r1798}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1955, %r1952}, {%r355, %r361, %r358, %r364}, {%r1745, %r1805}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1964, %r1961}, {%r355, %r361, %r358, %r364}, {%r1754, %r1812}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1973, %r1970}, {%r355, %r361, %r358, %r364}, {%r1763, %r1819}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1903, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r1903, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r399, %r1910, %r1905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1912, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1914, %r1912, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1917, %r399, %r1919, %r1914;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1921, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1923, %r1921, %r1925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1926, %r399, %r1928, %r1923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1930, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r1930, %r1934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r399, %r1937, %r1932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1939, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1941, %r1939, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r399, %r1946, %r1941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1948, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1950, %r1948, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r399, %r1955, %r1950;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1957, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1959, %r1957, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r399, %r1964, %r1959;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1966, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1968, %r1966, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r399, %r1973, %r1968;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1975, %r402, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1978, %r399, %r1907, %r1975;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1982, %r402, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r399, %r1916, %r1982;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1989, %r402, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r399, %r1925, %r1989;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1996, %r402, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r399, %r1934, %r1996;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2003, %r402, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r399, %r1943, %r2003;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2010, %r402, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2013, %r399, %r1952, %r2010;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2017, %r402, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2020, %r399, %r1961, %r2017;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2024, %r402, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2027, %r399, %r1970, %r2024;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2031, %r2032}, {%r433, %r439, %r436, %r442}, {%r1908, %r1978}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2041, %r2042}, {%r433, %r439, %r436, %r442}, {%r1917, %r1985}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2051, %r2052}, {%r433, %r439, %r436, %r442}, {%r1926, %r1992}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2061, %r2062}, {%r433, %r439, %r436, %r442}, {%r1935, %r1999}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2071, %r2072}, {%r433, %r439, %r436, %r442}, {%r1944, %r2006}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2081, %r2082}, {%r433, %r439, %r436, %r442}, {%r1953, %r2013}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2091, %r2092}, {%r433, %r439, %r436, %r442}, {%r1962, %r2020}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2101, %r2102}, {%r433, %r439, %r436, %r442}, {%r1971, %r2027}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2111, %r120, %r2031;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2114, %r120, %r2032;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r120, %r2041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r120, %r2042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r120, %r2051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r120, %r2052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r120, %r2061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r120, %r2062;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r120, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r120, %r2072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r120, %r2081;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r120, %r2082;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r120, %r2091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r120, %r2092;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r120, %r2101;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r120, %r2102;
	// end inline asm
	// begin inline asm
	mov.b32 %r2159, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2160, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2161, %r2111, %r2159;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2164, %r2161, %r2160;
	// end inline asm
	// begin inline asm
	mov.b32 %r2167, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2168, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2169, %r2114, %r2167;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2172, %r2169, %r2168;
	// end inline asm
	// begin inline asm
	mov.b32 %r2175, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2176, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2177, %r2117, %r2175;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2180, %r2177, %r2176;
	// end inline asm
	// begin inline asm
	mov.b32 %r2183, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2184, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2185, %r2120, %r2183;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2188, %r2185, %r2184;
	// end inline asm
	// begin inline asm
	mov.b32 %r2191, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2192, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2193, %r2123, %r2191;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2196, %r2193, %r2192;
	// end inline asm
	// begin inline asm
	mov.b32 %r2199, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2200, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2201, %r2126, %r2199;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2204, %r2201, %r2200;
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2208, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2209, %r2129, %r2207;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2212, %r2209, %r2208;
	// end inline asm
	// begin inline asm
	mov.b32 %r2215, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2216, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2217, %r2132, %r2215;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2220, %r2217, %r2216;
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2225, %r2135, %r2223;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2228, %r2225, %r2224;
	// end inline asm
	// begin inline asm
	mov.b32 %r2231, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2232, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2233, %r2138, %r2231;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2236, %r2233, %r2232;
	// end inline asm
	// begin inline asm
	mov.b32 %r2239, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2240, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2241, %r2141, %r2239;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2244, %r2241, %r2240;
	// end inline asm
	// begin inline asm
	mov.b32 %r2247, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2248, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2249, %r2144, %r2247;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2252, %r2249, %r2248;
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2257, %r2147, %r2255;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2260, %r2257, %r2256;
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2265, %r2150, %r2263;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2268, %r2265, %r2264;
	// end inline asm
	// begin inline asm
	mov.b32 %r2271, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2272, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2273, %r2153, %r2271;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2276, %r2273, %r2272;
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2281, %r2156, %r2279;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2284, %r2281, %r2280;
	// end inline asm
	// begin inline asm
	mov.b32 %r2290, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2288, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2289, %r2290, %r2288;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2292, %r2164, %r2289;
	// end inline asm
	// begin inline asm
	mov.b32 %r2295, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2296, %r2290, %r2295;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2299, %r2172, %r2296;
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2303, %r2290, %r2302;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2306, %r2180, %r2303;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2310, %r2290, %r2309;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2313, %r2188, %r2310;
	// end inline asm
	mov.u32 	%r2319, 25152;
	// begin inline asm
	prmt.b32 %r2316, %r2292, %r2306, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2320, %r2299, %r2313, %r2319;
	// end inline asm
	shl.b32 	%r2327, %r2320, 4;
	mov.u32 	%r2325, 252645135;
	// begin inline asm
	lop3.b32 %r2324, %r2325, %r2316, %r2327, 202;
	// end inline asm
	xor.b32  	%r7880, %r2324, -2004318072;
	// begin inline asm
	mov.b32 %r2331, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2330, %r2331, %r2329;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2333, %r2196, %r2330;
	// end inline asm
	// begin inline asm
	mov.b32 %r2336, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2337, %r2331, %r2336;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2340, %r2204, %r2337;
	// end inline asm
	// begin inline asm
	mov.b32 %r2343, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2344, %r2331, %r2343;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2347, %r2212, %r2344;
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2351, %r2331, %r2350;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2354, %r2220, %r2351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2357, %r2333, %r2347, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2361, %r2340, %r2354, %r2319;
	// end inline asm
	shl.b32 	%r2368, %r2361, 4;
	// begin inline asm
	lop3.b32 %r2365, %r2325, %r2357, %r2368, 202;
	// end inline asm
	xor.b32  	%r7881, %r2365, -2004318072;
	// begin inline asm
	mov.b32 %r2372, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2370, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2371, %r2372, %r2370;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2374, %r2228, %r2371;
	// end inline asm
	// begin inline asm
	mov.b32 %r2377, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2378, %r2372, %r2377;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2381, %r2236, %r2378;
	// end inline asm
	// begin inline asm
	mov.b32 %r2384, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2385, %r2372, %r2384;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2388, %r2244, %r2385;
	// end inline asm
	// begin inline asm
	mov.b32 %r2391, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2392, %r2372, %r2391;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2395, %r2252, %r2392;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2398, %r2374, %r2388, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2402, %r2381, %r2395, %r2319;
	// end inline asm
	shl.b32 	%r2409, %r2402, 4;
	// begin inline asm
	lop3.b32 %r2406, %r2325, %r2398, %r2409, 202;
	// end inline asm
	xor.b32  	%r7882, %r2406, -2004318072;
	// begin inline asm
	mov.b32 %r2413, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2411, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2412, %r2413, %r2411;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2415, %r2260, %r2412;
	// end inline asm
	// begin inline asm
	mov.b32 %r2418, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2419, %r2413, %r2418;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2422, %r2268, %r2419;
	// end inline asm
	// begin inline asm
	mov.b32 %r2425, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2426, %r2413, %r2425;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2429, %r2276, %r2426;
	// end inline asm
	// begin inline asm
	mov.b32 %r2432, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2433, %r2413, %r2432;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2436, %r2284, %r2433;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2439, %r2415, %r2429, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2443, %r2422, %r2436, %r2319;
	// end inline asm
	shl.b32 	%r2450, %r2443, 4;
	// begin inline asm
	lop3.b32 %r2447, %r2325, %r2439, %r2450, 202;
	// end inline asm
	xor.b32  	%r7883, %r2447, -2004318072;
	st.shared.u32 	[%rd189], %r7880;
	st.shared.u32 	[%rd190], %r7881;
	st.shared.u32 	[%rd191], %r7882;
	st.shared.u32 	[%rd192], %r7883;
	ld.shared.u32 	%r8036, [%rd132];
	ld.shared.u32 	%r8035, [%rd134];
	ld.shared.u32 	%r8034, [%rd136];
	ld.shared.u32 	%r8033, [%rd138];
	// begin inline asm
	mov.b32 %r2456, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2467, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2455, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r2453, %r658, %r2455, %r2456, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2457, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2458, %r2456, %r2457;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2461, %r2453, %r2458;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2464, %r669, %r2455, %r2467, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2468, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2469, %r2467, %r2468;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2472, %r2464, %r2469;
	// end inline asm
	shr.u32 	%r2477, %r2455, 8;
	// begin inline asm
	lop3.b32 %r2475, %r658, %r2477, %r2456, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2479, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2480, %r2456, %r2479;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2483, %r2475, %r2480;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2486, %r669, %r2477, %r2467, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2490, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2491, %r2467, %r2490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2494, %r2486, %r2491;
	// end inline asm
	// begin inline asm
	mov.b32 %r2502, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2513, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2501, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r2499, %r658, %r2501, %r2502, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2503, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2504, %r2502, %r2503;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2507, %r2499, %r2504;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2510, %r669, %r2501, %r2513, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2514, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2515, %r2513, %r2514;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2518, %r2510, %r2515;
	// end inline asm
	shr.u32 	%r2523, %r2501, 8;
	// begin inline asm
	lop3.b32 %r2521, %r658, %r2523, %r2502, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2525, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2526, %r2502, %r2525;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2529, %r2521, %r2526;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2532, %r669, %r2523, %r2513, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2536, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2537, %r2513, %r2536;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2540, %r2532, %r2537;
	// end inline asm
	// begin inline asm
	mov.b32 %r2548, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2559, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2547, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r2545, %r658, %r2547, %r2548, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2549, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2550, %r2548, %r2549;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2553, %r2545, %r2550;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2556, %r669, %r2547, %r2559, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2560, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2561, %r2559, %r2560;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2564, %r2556, %r2561;
	// end inline asm
	shr.u32 	%r2569, %r2547, 8;
	// begin inline asm
	lop3.b32 %r2567, %r658, %r2569, %r2548, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2571, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2572, %r2548, %r2571;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2575, %r2567, %r2572;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2578, %r669, %r2569, %r2559, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2582, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2583, %r2559, %r2582;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2586, %r2578, %r2583;
	// end inline asm
	// begin inline asm
	mov.b32 %r2594, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2605, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2593, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r2591, %r658, %r2593, %r2594, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2595, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2596, %r2594, %r2595;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2599, %r2591, %r2596;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2602, %r669, %r2593, %r2605, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2606, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2607, %r2605, %r2606;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2610, %r2602, %r2607;
	// end inline asm
	shr.u32 	%r2615, %r2593, 8;
	// begin inline asm
	lop3.b32 %r2613, %r658, %r2615, %r2594, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2617, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2618, %r2594, %r2617;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2621, %r2613, %r2618;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2624, %r669, %r2615, %r2605, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2628, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2629, %r2605, %r2628;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2632, %r2624, %r2629;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2635, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2635, %r2461;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2640, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r2640, %r2472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2645, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2647, %r2645, %r2483;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2650, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2652, %r2650, %r2494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2655, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2657, %r2655, %r2507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2660, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2662, %r2660, %r2518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2665, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2665, %r2529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2670, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2675, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2677, %r2675, %r2553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2564;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2685, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2687, %r2685, %r2575;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2690, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2692, %r2690, %r2586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2599;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2610;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2705, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2707, %r2705, %r2621;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2710, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2712, %r2710, %r2632;
	// end inline asm
	// begin inline asm
	mov.b32 %r2720, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2731, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2717, %r658, %r1171, %r2720, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2721, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2722, %r2720, %r2721;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2725, %r2717, %r2722;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2728, %r669, %r1171, %r2731, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2732, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2733, %r2731, %r2732;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2736, %r2728, %r2733;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2739, %r658, %r1193, %r2720, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2743, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2744, %r2720, %r2743;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2747, %r2739, %r2744;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2750, %r669, %r1193, %r2731, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2754, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2755, %r2731, %r2754;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2758, %r2750, %r2755;
	// end inline asm
	// begin inline asm
	mov.b32 %r2766, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2777, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2763, %r658, %r1217, %r2766, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2767, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2768, %r2766, %r2767;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2771, %r2763, %r2768;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2774, %r669, %r1217, %r2777, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2778, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2779, %r2777, %r2778;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2782, %r2774, %r2779;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2785, %r658, %r1239, %r2766, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2789, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2790, %r2766, %r2789;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2793, %r2785, %r2790;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2796, %r669, %r1239, %r2777, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2800, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2801, %r2777, %r2800;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2804, %r2796, %r2801;
	// end inline asm
	// begin inline asm
	mov.b32 %r2812, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2823, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2809, %r658, %r1263, %r2812, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2813, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2814, %r2812, %r2813;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2817, %r2809, %r2814;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2820, %r669, %r1263, %r2823, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2824, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2825, %r2823, %r2824;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2828, %r2820, %r2825;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2831, %r658, %r1285, %r2812, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2835, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2836, %r2812, %r2835;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2839, %r2831, %r2836;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2842, %r669, %r1285, %r2823, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2846, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2847, %r2823, %r2846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2850, %r2842, %r2847;
	// end inline asm
	// begin inline asm
	mov.b32 %r2858, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2869, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2855, %r658, %r1309, %r2858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2859, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2860, %r2858, %r2859;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2863, %r2855, %r2860;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2866, %r669, %r1309, %r2869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2870, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2871, %r2869, %r2870;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2874, %r2866, %r2871;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2877, %r658, %r1331, %r2858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2881, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2882, %r2858, %r2881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2885, %r2877, %r2882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2888, %r669, %r1331, %r2869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2892, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2893, %r2869, %r2892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2896, %r2888, %r2893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2899, %r226, %r2725, %r2637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2903, %r226, %r2736, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r226, %r2747, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r226, %r2758, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r226, %r2771, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r226, %r2782, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r226, %r2793, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r226, %r2804, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2931, %r226, %r2817, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2935, %r226, %r2828, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2939, %r226, %r2839, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2943, %r226, %r2850, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r226, %r2863, %r2697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r226, %r2874, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2955, %r226, %r2885, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2959, %r226, %r2896, %r2712;
	// end inline asm
	// begin inline asm
	mov.b32 %r2968, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2979, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2965, %r658, %r1451, %r2968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2969, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2970, %r2968, %r2969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2973, %r2965, %r2970;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2976, %r669, %r1451, %r2979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2980, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2981, %r2979, %r2980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2984, %r2976, %r2981;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2987, %r658, %r1473, %r2968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2991, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2992, %r2968, %r2991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2995, %r2987, %r2992;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2998, %r669, %r1473, %r2979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3002, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3003, %r2979, %r3002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3006, %r2998, %r3003;
	// end inline asm
	// begin inline asm
	mov.b32 %r3014, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3025, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3011, %r658, %r1497, %r3014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3015, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3016, %r3014, %r3015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3019, %r3011, %r3016;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3022, %r669, %r1497, %r3025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3026, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3027, %r3025, %r3026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3030, %r3022, %r3027;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3033, %r658, %r1519, %r3014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3037, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3038, %r3014, %r3037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3041, %r3033, %r3038;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3044, %r669, %r1519, %r3025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3048, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3049, %r3025, %r3048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3052, %r3044, %r3049;
	// end inline asm
	// begin inline asm
	mov.b32 %r3060, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3071, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3057, %r658, %r1543, %r3060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3061, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3062, %r3060, %r3061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3065, %r3057, %r3062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3068, %r669, %r1543, %r3071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3072, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3073, %r3071, %r3072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3076, %r3068, %r3073;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3079, %r658, %r1565, %r3060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3084, %r3060, %r3083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3087, %r3079, %r3084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3090, %r669, %r1565, %r3071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3094, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3095, %r3071, %r3094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3098, %r3090, %r3095;
	// end inline asm
	// begin inline asm
	mov.b32 %r3106, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3117, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3103, %r658, %r1589, %r3106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3107, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3108, %r3106, %r3107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3111, %r3103, %r3108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3114, %r669, %r1589, %r3117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3118, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3119, %r3117, %r3118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3122, %r3114, %r3119;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3125, %r658, %r1611, %r3106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3129, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3130, %r3106, %r3129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3133, %r3125, %r3130;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3136, %r669, %r1611, %r3117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3140, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3141, %r3117, %r3140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3144, %r3136, %r3141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3147, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r3147, %r2973, %r2899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3153, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r3153, %r2984, %r2903;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3159, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r3159, %r2995, %r2907;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3165, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3165, %r3006, %r2911;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3171, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3171, %r3019, %r2915;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3177, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3177, %r3030, %r2919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3183, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r3183, %r3041, %r2923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3189, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r3189, %r3052, %r2927;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3195, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r3195, %r3065, %r2931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3201, %r3076, %r2935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r3207, %r3087, %r2939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3213, %r3098, %r2943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3219, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r3219, %r3111, %r2947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3225, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r3225, %r3122, %r2951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3231, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3231, %r3133, %r2955;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3237, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r3237, %r3144, %r2959;
	// end inline asm
	// begin inline asm
	mov.b32 %r3248, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3259, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3245, %r658, %r659, %r3248, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3249, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3250, %r3248, %r3249;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3253, %r3245, %r3250;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3256, %r669, %r659, %r3259, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3260, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3261, %r3259, %r3260;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3264, %r3256, %r3261;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3267, %r658, %r681, %r3248, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3271, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3272, %r3248, %r3271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3275, %r3267, %r3272;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3278, %r669, %r681, %r3259, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3282, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3283, %r3259, %r3282;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3286, %r3278, %r3283;
	// end inline asm
	// begin inline asm
	mov.b32 %r3294, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3305, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3291, %r658, %r705, %r3294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3295, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3296, %r3294, %r3295;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3299, %r3291, %r3296;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3302, %r669, %r705, %r3305, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3306, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3307, %r3305, %r3306;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3310, %r3302, %r3307;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3313, %r658, %r727, %r3294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3317, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3318, %r3294, %r3317;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3321, %r3313, %r3318;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3324, %r669, %r727, %r3305, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3328, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3329, %r3305, %r3328;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3332, %r3324, %r3329;
	// end inline asm
	// begin inline asm
	mov.b32 %r3340, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3351, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3337, %r658, %r751, %r3340, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3341, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3342, %r3340, %r3341;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3345, %r3337, %r3342;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3348, %r669, %r751, %r3351, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3352, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3353, %r3351, %r3352;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3356, %r3348, %r3353;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3359, %r658, %r773, %r3340, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3363, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3364, %r3340, %r3363;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3367, %r3359, %r3364;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3370, %r669, %r773, %r3351, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3374, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3375, %r3351, %r3374;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3378, %r3370, %r3375;
	// end inline asm
	// begin inline asm
	mov.b32 %r3386, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3397, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3383, %r658, %r797, %r3386, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3387, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3388, %r3386, %r3387;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3391, %r3383, %r3388;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3394, %r669, %r797, %r3397, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3398, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3399, %r3397, %r3398;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3402, %r3394, %r3399;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3405, %r658, %r819, %r3386, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3409, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3410, %r3386, %r3409;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3413, %r3405, %r3410;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3416, %r669, %r819, %r3397, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3420, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3421, %r3397, %r3420;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3424, %r3416, %r3421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r262, %r3253, %r3149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r262, %r3264, %r3155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r262, %r3275, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r262, %r3286, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r262, %r3299, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r262, %r3310, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r262, %r3321, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r262, %r3332, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r262, %r3345, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r262, %r3356, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r262, %r3367, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3540, %r262, %r3378, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r262, %r3391, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r262, %r3402, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r262, %r3413, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3558, %r262, %r3424, %r3239;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3491, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3493, %r3491, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r308, %r3498, %r3493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3500, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3502, %r3500, %r3504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r308, %r3507, %r3502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3509, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3511, %r3509, %r3513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r308, %r3516, %r3511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3518, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3520, %r3518, %r3522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r308, %r3525, %r3520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3527, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3529, %r3527, %r3531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r308, %r3534, %r3529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3536, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3538, %r3536, %r3540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r308, %r3543, %r3538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3545, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3547, %r3545, %r3549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r308, %r3552, %r3547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3554, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3556, %r3554, %r3558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3559, %r308, %r3561, %r3556;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3563, %r311, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3566, %r308, %r3495, %r3563;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3570, %r311, %r3507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3573, %r308, %r3504, %r3570;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3577, %r311, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3580, %r308, %r3513, %r3577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3584, %r311, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3587, %r308, %r3522, %r3584;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3591, %r311, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3594, %r308, %r3531, %r3591;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3598, %r311, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3601, %r308, %r3540, %r3598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3605, %r311, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3608, %r308, %r3549, %r3605;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3612, %r311, %r3561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3615, %r308, %r3558, %r3612;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3706, %r3703}, {%r355, %r361, %r358, %r364}, {%r3496, %r3566}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3715, %r3712}, {%r355, %r361, %r358, %r364}, {%r3505, %r3573}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3724, %r3721}, {%r355, %r361, %r358, %r364}, {%r3514, %r3580}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3733, %r3730}, {%r355, %r361, %r358, %r364}, {%r3523, %r3587}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3742, %r3739}, {%r355, %r361, %r358, %r364}, {%r3532, %r3594}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3751, %r3748}, {%r355, %r361, %r358, %r364}, {%r3541, %r3601}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3760, %r3757}, {%r355, %r361, %r358, %r364}, {%r3550, %r3608}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3769, %r3766}, {%r355, %r361, %r358, %r364}, {%r3559, %r3615}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3699, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3701, %r3699, %r3703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3704, %r399, %r3706, %r3701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3708, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3710, %r3708, %r3712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3713, %r399, %r3715, %r3710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3717, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3719, %r3717, %r3721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3722, %r399, %r3724, %r3719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3726, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3728, %r3726, %r3730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3731, %r399, %r3733, %r3728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3735, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3737, %r3735, %r3739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3740, %r399, %r3742, %r3737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3744, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3746, %r3744, %r3748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3749, %r399, %r3751, %r3746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3753, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3755, %r3753, %r3757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3758, %r399, %r3760, %r3755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3762, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3764, %r3762, %r3766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3767, %r399, %r3769, %r3764;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3771, %r402, %r3706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3774, %r399, %r3703, %r3771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3778, %r402, %r3715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3781, %r399, %r3712, %r3778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3785, %r402, %r3724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3788, %r399, %r3721, %r3785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3792, %r402, %r3733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3795, %r399, %r3730, %r3792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3799, %r402, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3802, %r399, %r3739, %r3799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3806, %r402, %r3751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3809, %r399, %r3748, %r3806;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3813, %r402, %r3760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3816, %r399, %r3757, %r3813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3820, %r402, %r3769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3823, %r399, %r3766, %r3820;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3827, %r3828}, {%r433, %r439, %r436, %r442}, {%r3704, %r3774}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3837, %r3838}, {%r433, %r439, %r436, %r442}, {%r3713, %r3781}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3847, %r3848}, {%r433, %r439, %r436, %r442}, {%r3722, %r3788}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3857, %r3858}, {%r433, %r439, %r436, %r442}, {%r3731, %r3795}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3867, %r3868}, {%r433, %r439, %r436, %r442}, {%r3740, %r3802}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3877, %r3878}, {%r433, %r439, %r436, %r442}, {%r3749, %r3809}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3887, %r3888}, {%r433, %r439, %r436, %r442}, {%r3758, %r3816}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3897, %r3898}, {%r433, %r439, %r436, %r442}, {%r3767, %r3823}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3907, %r120, %r3827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3910, %r120, %r3828;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3913, %r120, %r3837;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3916, %r120, %r3838;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3919, %r120, %r3847;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3922, %r120, %r3848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r120, %r3857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3928, %r120, %r3858;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3931, %r120, %r3867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3934, %r120, %r3868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3937, %r120, %r3877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3940, %r120, %r3878;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3943, %r120, %r3887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3946, %r120, %r3888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3949, %r120, %r3897;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3952, %r120, %r3898;
	// end inline asm
	// begin inline asm
	mov.b32 %r3955, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3956, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3957, %r3907, %r3955;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3960, %r3957, %r3956;
	// end inline asm
	// begin inline asm
	mov.b32 %r3963, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3964, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3965, %r3910, %r3963;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3968, %r3965, %r3964;
	// end inline asm
	// begin inline asm
	mov.b32 %r3971, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3972, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3973, %r3913, %r3971;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3976, %r3973, %r3972;
	// end inline asm
	// begin inline asm
	mov.b32 %r3979, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3980, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3981, %r3916, %r3979;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3984, %r3981, %r3980;
	// end inline asm
	// begin inline asm
	mov.b32 %r3987, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3988, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3989, %r3919, %r3987;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3992, %r3989, %r3988;
	// end inline asm
	// begin inline asm
	mov.b32 %r3995, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3996, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3997, %r3922, %r3995;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4000, %r3997, %r3996;
	// end inline asm
	// begin inline asm
	mov.b32 %r4003, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4004, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4005, %r3925, %r4003;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4008, %r4005, %r4004;
	// end inline asm
	// begin inline asm
	mov.b32 %r4011, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4012, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4013, %r3928, %r4011;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4016, %r4013, %r4012;
	// end inline asm
	// begin inline asm
	mov.b32 %r4019, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4020, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4021, %r3931, %r4019;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4024, %r4021, %r4020;
	// end inline asm
	// begin inline asm
	mov.b32 %r4027, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4028, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4029, %r3934, %r4027;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4032, %r4029, %r4028;
	// end inline asm
	// begin inline asm
	mov.b32 %r4035, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4036, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4037, %r3937, %r4035;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4040, %r4037, %r4036;
	// end inline asm
	// begin inline asm
	mov.b32 %r4043, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4044, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4045, %r3940, %r4043;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4048, %r4045, %r4044;
	// end inline asm
	// begin inline asm
	mov.b32 %r4051, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4052, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4053, %r3943, %r4051;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4056, %r4053, %r4052;
	// end inline asm
	// begin inline asm
	mov.b32 %r4059, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4060, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4061, %r3946, %r4059;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4064, %r4061, %r4060;
	// end inline asm
	// begin inline asm
	mov.b32 %r4067, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4068, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4069, %r3949, %r4067;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4072, %r4069, %r4068;
	// end inline asm
	// begin inline asm
	mov.b32 %r4075, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4076, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4077, %r3952, %r4075;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4080, %r4077, %r4076;
	// end inline asm
	// begin inline asm
	mov.b32 %r4086, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4084, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4085, %r4086, %r4084;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4088, %r3960, %r4085;
	// end inline asm
	// begin inline asm
	mov.b32 %r4091, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4092, %r4086, %r4091;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4095, %r3968, %r4092;
	// end inline asm
	// begin inline asm
	mov.b32 %r4098, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4099, %r4086, %r4098;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4102, %r3976, %r4099;
	// end inline asm
	// begin inline asm
	mov.b32 %r4105, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4106, %r4086, %r4105;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4109, %r3984, %r4106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4112, %r4088, %r4102, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4116, %r4095, %r4109, %r2319;
	// end inline asm
	shl.b32 	%r4123, %r4116, 4;
	// begin inline asm
	lop3.b32 %r4120, %r2325, %r4112, %r4123, 202;
	// end inline asm
	xor.b32  	%r7884, %r4120, -2004318072;
	// begin inline asm
	mov.b32 %r4127, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4125, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4126, %r4127, %r4125;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4129, %r3992, %r4126;
	// end inline asm
	// begin inline asm
	mov.b32 %r4132, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4133, %r4127, %r4132;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4136, %r4000, %r4133;
	// end inline asm
	// begin inline asm
	mov.b32 %r4139, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4140, %r4127, %r4139;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4143, %r4008, %r4140;
	// end inline asm
	// begin inline asm
	mov.b32 %r4146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4147, %r4127, %r4146;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4150, %r4016, %r4147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4153, %r4129, %r4143, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4157, %r4136, %r4150, %r2319;
	// end inline asm
	shl.b32 	%r4164, %r4157, 4;
	// begin inline asm
	lop3.b32 %r4161, %r2325, %r4153, %r4164, 202;
	// end inline asm
	xor.b32  	%r7885, %r4161, -2004318072;
	// begin inline asm
	mov.b32 %r4168, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4166, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4167, %r4168, %r4166;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4170, %r4024, %r4167;
	// end inline asm
	// begin inline asm
	mov.b32 %r4173, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4174, %r4168, %r4173;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4177, %r4032, %r4174;
	// end inline asm
	// begin inline asm
	mov.b32 %r4180, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4181, %r4168, %r4180;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4184, %r4040, %r4181;
	// end inline asm
	// begin inline asm
	mov.b32 %r4187, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4188, %r4168, %r4187;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4191, %r4048, %r4188;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4194, %r4170, %r4184, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4198, %r4177, %r4191, %r2319;
	// end inline asm
	shl.b32 	%r4205, %r4198, 4;
	// begin inline asm
	lop3.b32 %r4202, %r2325, %r4194, %r4205, 202;
	// end inline asm
	xor.b32  	%r7886, %r4202, -2004318072;
	// begin inline asm
	mov.b32 %r4209, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4207, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4208, %r4209, %r4207;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4211, %r4056, %r4208;
	// end inline asm
	// begin inline asm
	mov.b32 %r4214, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4215, %r4209, %r4214;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4218, %r4064, %r4215;
	// end inline asm
	// begin inline asm
	mov.b32 %r4221, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4222, %r4209, %r4221;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4225, %r4072, %r4222;
	// end inline asm
	// begin inline asm
	mov.b32 %r4228, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4229, %r4209, %r4228;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4232, %r4080, %r4229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4235, %r4211, %r4225, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4239, %r4218, %r4232, %r2319;
	// end inline asm
	shl.b32 	%r4246, %r4239, 4;
	// begin inline asm
	lop3.b32 %r4243, %r2325, %r4235, %r4246, 202;
	// end inline asm
	xor.b32  	%r7887, %r4243, -2004318072;
	st.shared.u32 	[%rd189], %r7884;
	st.shared.u32 	[%rd190], %r7885;
	st.shared.u32 	[%rd191], %r7886;
	st.shared.u32 	[%rd192], %r7887;
	ld.shared.u32 	%r8032, [%rd132];
	ld.shared.u32 	%r8031, [%rd134];
	ld.shared.u32 	%r8030, [%rd136];
	ld.shared.u32 	%r8029, [%rd138];
	// begin inline asm
	mov.b32 %r4252, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4263, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4251, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r4249, %r658, %r4251, %r4252, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4253, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4254, %r4252, %r4253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4257, %r4249, %r4254;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4260, %r669, %r4251, %r4263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4264, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4265, %r4263, %r4264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4268, %r4260, %r4265;
	// end inline asm
	shr.u32 	%r4273, %r4251, 8;
	// begin inline asm
	lop3.b32 %r4271, %r658, %r4273, %r4252, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4275, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4276, %r4252, %r4275;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4279, %r4271, %r4276;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4282, %r669, %r4273, %r4263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4286, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4287, %r4263, %r4286;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4290, %r4282, %r4287;
	// end inline asm
	// begin inline asm
	mov.b32 %r4298, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4309, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4297, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r4295, %r658, %r4297, %r4298, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4299, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4300, %r4298, %r4299;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4303, %r4295, %r4300;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4306, %r669, %r4297, %r4309, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4310, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4311, %r4309, %r4310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4314, %r4306, %r4311;
	// end inline asm
	shr.u32 	%r4319, %r4297, 8;
	// begin inline asm
	lop3.b32 %r4317, %r658, %r4319, %r4298, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4321, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4322, %r4298, %r4321;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4325, %r4317, %r4322;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4328, %r669, %r4319, %r4309, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4332, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4333, %r4309, %r4332;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4336, %r4328, %r4333;
	// end inline asm
	// begin inline asm
	mov.b32 %r4344, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4355, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4343, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r4341, %r658, %r4343, %r4344, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4345, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4346, %r4344, %r4345;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4349, %r4341, %r4346;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4352, %r669, %r4343, %r4355, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4356, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4357, %r4355, %r4356;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4360, %r4352, %r4357;
	// end inline asm
	shr.u32 	%r4365, %r4343, 8;
	// begin inline asm
	lop3.b32 %r4363, %r658, %r4365, %r4344, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4367, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4368, %r4344, %r4367;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4371, %r4363, %r4368;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4374, %r669, %r4365, %r4355, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4378, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4379, %r4355, %r4378;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4382, %r4374, %r4379;
	// end inline asm
	// begin inline asm
	mov.b32 %r4390, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4401, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4389, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r4387, %r658, %r4389, %r4390, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4391, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4392, %r4390, %r4391;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4395, %r4387, %r4392;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4398, %r669, %r4389, %r4401, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4402, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4403, %r4401, %r4402;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4406, %r4398, %r4403;
	// end inline asm
	shr.u32 	%r4411, %r4389, 8;
	// begin inline asm
	lop3.b32 %r4409, %r658, %r4411, %r4390, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4413, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4414, %r4390, %r4413;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4417, %r4409, %r4414;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4420, %r669, %r4411, %r4401, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4424, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4425, %r4401, %r4424;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4428, %r4420, %r4425;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4431, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4433, %r4431, %r4257;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4436, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4438, %r4436, %r4268;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4441, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4443, %r4441, %r4279;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4446, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4448, %r4446, %r4290;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4451, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4453, %r4451, %r4303;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4456, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4458, %r4456, %r4314;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4461, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4463, %r4461, %r4325;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4466, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4468, %r4466, %r4336;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4471, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4473, %r4471, %r4349;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4476, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4478, %r4476, %r4360;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4481, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4483, %r4481, %r4371;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4486, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4488, %r4486, %r4382;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4491, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4493, %r4491, %r4395;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4496, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4498, %r4496, %r4406;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4501, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4503, %r4501, %r4417;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4506, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4508, %r4506, %r4428;
	// end inline asm
	// begin inline asm
	mov.b32 %r4516, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4527, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4513, %r658, %r1451, %r4516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4517, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4518, %r4516, %r4517;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4521, %r4513, %r4518;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4524, %r669, %r1451, %r4527, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4528, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4529, %r4527, %r4528;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4532, %r4524, %r4529;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4535, %r658, %r1473, %r4516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4539, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4540, %r4516, %r4539;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4543, %r4535, %r4540;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4546, %r669, %r1473, %r4527, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4550, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4551, %r4527, %r4550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4554, %r4546, %r4551;
	// end inline asm
	// begin inline asm
	mov.b32 %r4562, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4573, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4559, %r658, %r1497, %r4562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4563, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4564, %r4562, %r4563;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4567, %r4559, %r4564;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4570, %r669, %r1497, %r4573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4574, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4575, %r4573, %r4574;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4578, %r4570, %r4575;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4581, %r658, %r1519, %r4562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4585, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4586, %r4562, %r4585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4589, %r4581, %r4586;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4592, %r669, %r1519, %r4573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4596, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4597, %r4573, %r4596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4600, %r4592, %r4597;
	// end inline asm
	// begin inline asm
	mov.b32 %r4608, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4619, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4605, %r658, %r1543, %r4608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4609, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4610, %r4608, %r4609;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4613, %r4605, %r4610;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4616, %r669, %r1543, %r4619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4620, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4621, %r4619, %r4620;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4624, %r4616, %r4621;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4627, %r658, %r1565, %r4608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4631, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4632, %r4608, %r4631;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4635, %r4627, %r4632;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4638, %r669, %r1565, %r4619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4642, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4643, %r4619, %r4642;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4646, %r4638, %r4643;
	// end inline asm
	// begin inline asm
	mov.b32 %r4654, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4665, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4651, %r658, %r1589, %r4654, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4655, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4656, %r4654, %r4655;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4659, %r4651, %r4656;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4662, %r669, %r1589, %r4665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4666, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4667, %r4665, %r4666;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4670, %r4662, %r4667;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4673, %r658, %r1611, %r4654, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4677, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4678, %r4654, %r4677;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4681, %r4673, %r4678;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4684, %r669, %r1611, %r4665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4688, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4689, %r4665, %r4688;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4692, %r4684, %r4689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4695, %r226, %r4521, %r4433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4699, %r226, %r4532, %r4438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4703, %r226, %r4543, %r4443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4707, %r226, %r4554, %r4448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4711, %r226, %r4567, %r4453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4715, %r226, %r4578, %r4458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4719, %r226, %r4589, %r4463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4723, %r226, %r4600, %r4468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4727, %r226, %r4613, %r4473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4731, %r226, %r4624, %r4478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4735, %r226, %r4635, %r4483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4739, %r226, %r4646, %r4488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4743, %r226, %r4659, %r4493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4747, %r226, %r4670, %r4498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4751, %r226, %r4681, %r4503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4755, %r226, %r4692, %r4508;
	// end inline asm
	// begin inline asm
	mov.b32 %r4764, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4775, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4761, %r658, %r659, %r4764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4765, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4766, %r4764, %r4765;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4769, %r4761, %r4766;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4772, %r669, %r659, %r4775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4776, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4777, %r4775, %r4776;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4780, %r4772, %r4777;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4783, %r658, %r681, %r4764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4787, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4788, %r4764, %r4787;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4791, %r4783, %r4788;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4794, %r669, %r681, %r4775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4799, %r4775, %r4798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4802, %r4794, %r4799;
	// end inline asm
	// begin inline asm
	mov.b32 %r4810, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4821, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4807, %r658, %r705, %r4810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4811, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4812, %r4810, %r4811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4815, %r4807, %r4812;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4818, %r669, %r705, %r4821, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4822, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4823, %r4821, %r4822;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4826, %r4818, %r4823;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4829, %r658, %r727, %r4810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4833, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4834, %r4810, %r4833;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4837, %r4829, %r4834;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4840, %r669, %r727, %r4821, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4844, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4845, %r4821, %r4844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4848, %r4840, %r4845;
	// end inline asm
	// begin inline asm
	mov.b32 %r4856, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4867, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4853, %r658, %r751, %r4856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4857, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4858, %r4856, %r4857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4861, %r4853, %r4858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4864, %r669, %r751, %r4867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4868, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4869, %r4867, %r4868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4872, %r4864, %r4869;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4875, %r658, %r773, %r4856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4879, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4880, %r4856, %r4879;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4883, %r4875, %r4880;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4886, %r669, %r773, %r4867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4890, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4891, %r4867, %r4890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4894, %r4886, %r4891;
	// end inline asm
	// begin inline asm
	mov.b32 %r4902, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4913, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4899, %r658, %r797, %r4902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4903, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4904, %r4902, %r4903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4907, %r4899, %r4904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4910, %r669, %r797, %r4913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4914, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4915, %r4913, %r4914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4918, %r4910, %r4915;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4921, %r658, %r819, %r4902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4925, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4926, %r4902, %r4925;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4929, %r4921, %r4926;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4932, %r669, %r819, %r4913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4936, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4937, %r4913, %r4936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4940, %r4932, %r4937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4943, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4945, %r4943, %r4769, %r4695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4949, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4951, %r4949, %r4780, %r4699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4955, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4957, %r4955, %r4791, %r4703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4961, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4963, %r4961, %r4802, %r4707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4967, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4969, %r4967, %r4815, %r4711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4973, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4975, %r4973, %r4826, %r4715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4979, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4981, %r4979, %r4837, %r4719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4985, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4987, %r4985, %r4848, %r4723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4991, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4993, %r4991, %r4861, %r4727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4997, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4999, %r4997, %r4872, %r4731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5003, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5005, %r5003, %r4883, %r4735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5009, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5011, %r5009, %r4894, %r4739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5015, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5017, %r5015, %r4907, %r4743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5021, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5023, %r5021, %r4918, %r4747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5027, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5029, %r5027, %r4929, %r4751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5033, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5035, %r5033, %r4940, %r4755;
	// end inline asm
	// begin inline asm
	mov.b32 %r5044, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5055, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5041, %r658, %r2455, %r5044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5045, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5046, %r5044, %r5045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5049, %r5041, %r5046;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5052, %r669, %r2455, %r5055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5056, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5057, %r5055, %r5056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5060, %r5052, %r5057;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5063, %r658, %r2477, %r5044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5067, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5068, %r5044, %r5067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5071, %r5063, %r5068;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5074, %r669, %r2477, %r5055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5079, %r5055, %r5078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5082, %r5074, %r5079;
	// end inline asm
	// begin inline asm
	mov.b32 %r5090, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5101, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5087, %r658, %r2501, %r5090, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5091, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5092, %r5090, %r5091;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5095, %r5087, %r5092;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5098, %r669, %r2501, %r5101, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5102, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5103, %r5101, %r5102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5106, %r5098, %r5103;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5109, %r658, %r2523, %r5090, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5113, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5114, %r5090, %r5113;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5117, %r5109, %r5114;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5120, %r669, %r2523, %r5101, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5124, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5125, %r5101, %r5124;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5128, %r5120, %r5125;
	// end inline asm
	// begin inline asm
	mov.b32 %r5136, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5147, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5133, %r658, %r2547, %r5136, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5137, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5138, %r5136, %r5137;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5141, %r5133, %r5138;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5144, %r669, %r2547, %r5147, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5148, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5149, %r5147, %r5148;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5152, %r5144, %r5149;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5155, %r658, %r2569, %r5136, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5159, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5160, %r5136, %r5159;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5163, %r5155, %r5160;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5166, %r669, %r2569, %r5147, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5170, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5171, %r5147, %r5170;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5174, %r5166, %r5171;
	// end inline asm
	// begin inline asm
	mov.b32 %r5182, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5193, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5179, %r658, %r2593, %r5182, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5183, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5184, %r5182, %r5183;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5187, %r5179, %r5184;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5190, %r669, %r2593, %r5193, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5194, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5195, %r5193, %r5194;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5198, %r5190, %r5195;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5201, %r658, %r2615, %r5182, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5205, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5206, %r5182, %r5205;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5209, %r5201, %r5206;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5212, %r669, %r2615, %r5193, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5216, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5217, %r5193, %r5216;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5220, %r5212, %r5217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5294, %r262, %r5049, %r4945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5291, %r262, %r5060, %r4951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5303, %r262, %r5071, %r4957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5300, %r262, %r5082, %r4963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r262, %r5095, %r4969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5309, %r262, %r5106, %r4975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r262, %r5117, %r4981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5318, %r262, %r5128, %r4987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r262, %r5141, %r4993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5327, %r262, %r5152, %r4999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r262, %r5163, %r5005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5336, %r262, %r5174, %r5011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5348, %r262, %r5187, %r5017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5345, %r262, %r5198, %r5023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5357, %r262, %r5209, %r5029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5354, %r262, %r5220, %r5035;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5287, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5289, %r5287, %r5291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5292, %r308, %r5294, %r5289;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5296, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5298, %r5296, %r5300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5301, %r308, %r5303, %r5298;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5305, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5307, %r5305, %r5309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5310, %r308, %r5312, %r5307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5314, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5316, %r5314, %r5318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5319, %r308, %r5321, %r5316;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5323, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5325, %r5323, %r5327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5328, %r308, %r5330, %r5325;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5332, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5334, %r5332, %r5336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5337, %r308, %r5339, %r5334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5341, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5343, %r5341, %r5345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5346, %r308, %r5348, %r5343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5350, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5352, %r5350, %r5354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5355, %r308, %r5357, %r5352;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5359, %r311, %r5294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5362, %r308, %r5291, %r5359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5366, %r311, %r5303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5369, %r308, %r5300, %r5366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5373, %r311, %r5312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5376, %r308, %r5309, %r5373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5380, %r311, %r5321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5383, %r308, %r5318, %r5380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5387, %r311, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5390, %r308, %r5327, %r5387;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5394, %r311, %r5339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5397, %r308, %r5336, %r5394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5401, %r311, %r5348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5404, %r308, %r5345, %r5401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5408, %r311, %r5357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5411, %r308, %r5354, %r5408;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5502, %r5499}, {%r355, %r361, %r358, %r364}, {%r5292, %r5362}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5511, %r5508}, {%r355, %r361, %r358, %r364}, {%r5301, %r5369}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5520, %r5517}, {%r355, %r361, %r358, %r364}, {%r5310, %r5376}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5529, %r5526}, {%r355, %r361, %r358, %r364}, {%r5319, %r5383}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5538, %r5535}, {%r355, %r361, %r358, %r364}, {%r5328, %r5390}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5547, %r5544}, {%r355, %r361, %r358, %r364}, {%r5337, %r5397}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5556, %r5553}, {%r355, %r361, %r358, %r364}, {%r5346, %r5404}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5565, %r5562}, {%r355, %r361, %r358, %r364}, {%r5355, %r5411}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5495, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5497, %r5495, %r5499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5500, %r399, %r5502, %r5497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5504, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5506, %r5504, %r5508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5509, %r399, %r5511, %r5506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5513, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5515, %r5513, %r5517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5518, %r399, %r5520, %r5515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5522, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5524, %r5522, %r5526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5527, %r399, %r5529, %r5524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5531, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5533, %r5531, %r5535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5536, %r399, %r5538, %r5533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5540, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5542, %r5540, %r5544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5545, %r399, %r5547, %r5542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5549, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5551, %r5549, %r5553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5554, %r399, %r5556, %r5551;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5558, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5560, %r5558, %r5562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5563, %r399, %r5565, %r5560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5567, %r402, %r5502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5570, %r399, %r5499, %r5567;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5574, %r402, %r5511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5577, %r399, %r5508, %r5574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5581, %r402, %r5520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5584, %r399, %r5517, %r5581;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5588, %r402, %r5529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5591, %r399, %r5526, %r5588;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5595, %r402, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5598, %r399, %r5535, %r5595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5602, %r402, %r5547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5605, %r399, %r5544, %r5602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5609, %r402, %r5556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5612, %r399, %r5553, %r5609;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5616, %r402, %r5565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5619, %r399, %r5562, %r5616;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5623, %r5624}, {%r433, %r439, %r436, %r442}, {%r5500, %r5570}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5633, %r5634}, {%r433, %r439, %r436, %r442}, {%r5509, %r5577}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5643, %r5644}, {%r433, %r439, %r436, %r442}, {%r5518, %r5584}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5653, %r5654}, {%r433, %r439, %r436, %r442}, {%r5527, %r5591}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5663, %r5664}, {%r433, %r439, %r436, %r442}, {%r5536, %r5598}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5673, %r5674}, {%r433, %r439, %r436, %r442}, {%r5545, %r5605}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5683, %r5684}, {%r433, %r439, %r436, %r442}, {%r5554, %r5612}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5693, %r5694}, {%r433, %r439, %r436, %r442}, {%r5563, %r5619}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5703, %r120, %r5623;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5706, %r120, %r5624;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5709, %r120, %r5633;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5712, %r120, %r5634;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5715, %r120, %r5643;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5718, %r120, %r5644;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r120, %r5653;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5724, %r120, %r5654;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5727, %r120, %r5663;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5730, %r120, %r5664;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5733, %r120, %r5673;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5736, %r120, %r5674;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5739, %r120, %r5683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5742, %r120, %r5684;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5745, %r120, %r5693;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5748, %r120, %r5694;
	// end inline asm
	// begin inline asm
	mov.b32 %r5751, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5752, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5753, %r5703, %r5751;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5756, %r5753, %r5752;
	// end inline asm
	// begin inline asm
	mov.b32 %r5759, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5760, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5761, %r5706, %r5759;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5764, %r5761, %r5760;
	// end inline asm
	// begin inline asm
	mov.b32 %r5767, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5768, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5769, %r5709, %r5767;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5772, %r5769, %r5768;
	// end inline asm
	// begin inline asm
	mov.b32 %r5775, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5776, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5777, %r5712, %r5775;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5780, %r5777, %r5776;
	// end inline asm
	// begin inline asm
	mov.b32 %r5783, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5784, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5785, %r5715, %r5783;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5788, %r5785, %r5784;
	// end inline asm
	// begin inline asm
	mov.b32 %r5791, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5792, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5793, %r5718, %r5791;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5796, %r5793, %r5792;
	// end inline asm
	// begin inline asm
	mov.b32 %r5799, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5800, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5801, %r5721, %r5799;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5804, %r5801, %r5800;
	// end inline asm
	// begin inline asm
	mov.b32 %r5807, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5808, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5809, %r5724, %r5807;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5812, %r5809, %r5808;
	// end inline asm
	// begin inline asm
	mov.b32 %r5815, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5816, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5817, %r5727, %r5815;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5820, %r5817, %r5816;
	// end inline asm
	// begin inline asm
	mov.b32 %r5823, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5824, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5825, %r5730, %r5823;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5828, %r5825, %r5824;
	// end inline asm
	// begin inline asm
	mov.b32 %r5831, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5832, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5833, %r5733, %r5831;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5836, %r5833, %r5832;
	// end inline asm
	// begin inline asm
	mov.b32 %r5839, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5840, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5841, %r5736, %r5839;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5844, %r5841, %r5840;
	// end inline asm
	// begin inline asm
	mov.b32 %r5847, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5848, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5849, %r5739, %r5847;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5852, %r5849, %r5848;
	// end inline asm
	// begin inline asm
	mov.b32 %r5855, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5856, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5857, %r5742, %r5855;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5860, %r5857, %r5856;
	// end inline asm
	// begin inline asm
	mov.b32 %r5863, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5864, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5865, %r5745, %r5863;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5868, %r5865, %r5864;
	// end inline asm
	// begin inline asm
	mov.b32 %r5871, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5872, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5873, %r5748, %r5871;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5876, %r5873, %r5872;
	// end inline asm
	// begin inline asm
	mov.b32 %r5882, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5880, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5881, %r5882, %r5880;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5884, %r5756, %r5881;
	// end inline asm
	// begin inline asm
	mov.b32 %r5887, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5888, %r5882, %r5887;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5891, %r5764, %r5888;
	// end inline asm
	// begin inline asm
	mov.b32 %r5894, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5895, %r5882, %r5894;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5898, %r5772, %r5895;
	// end inline asm
	// begin inline asm
	mov.b32 %r5901, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5902, %r5882, %r5901;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5905, %r5780, %r5902;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5908, %r5884, %r5898, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5912, %r5891, %r5905, %r2319;
	// end inline asm
	shl.b32 	%r5919, %r5912, 4;
	// begin inline asm
	lop3.b32 %r5916, %r2325, %r5908, %r5919, 202;
	// end inline asm
	xor.b32  	%r7888, %r5916, -2004318072;
	// begin inline asm
	mov.b32 %r5923, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5921, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5922, %r5923, %r5921;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5925, %r5788, %r5922;
	// end inline asm
	// begin inline asm
	mov.b32 %r5928, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5929, %r5923, %r5928;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5932, %r5796, %r5929;
	// end inline asm
	// begin inline asm
	mov.b32 %r5935, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5936, %r5923, %r5935;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5939, %r5804, %r5936;
	// end inline asm
	// begin inline asm
	mov.b32 %r5942, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5943, %r5923, %r5942;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5946, %r5812, %r5943;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5949, %r5925, %r5939, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5953, %r5932, %r5946, %r2319;
	// end inline asm
	shl.b32 	%r5960, %r5953, 4;
	// begin inline asm
	lop3.b32 %r5957, %r2325, %r5949, %r5960, 202;
	// end inline asm
	xor.b32  	%r7889, %r5957, -2004318072;
	// begin inline asm
	mov.b32 %r5964, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5962, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5963, %r5964, %r5962;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5966, %r5820, %r5963;
	// end inline asm
	// begin inline asm
	mov.b32 %r5969, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5970, %r5964, %r5969;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5973, %r5828, %r5970;
	// end inline asm
	// begin inline asm
	mov.b32 %r5976, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5977, %r5964, %r5976;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5980, %r5836, %r5977;
	// end inline asm
	// begin inline asm
	mov.b32 %r5983, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5984, %r5964, %r5983;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5987, %r5844, %r5984;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5990, %r5966, %r5980, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5994, %r5973, %r5987, %r2319;
	// end inline asm
	shl.b32 	%r6001, %r5994, 4;
	// begin inline asm
	lop3.b32 %r5998, %r2325, %r5990, %r6001, 202;
	// end inline asm
	xor.b32  	%r7890, %r5998, -2004318072;
	// begin inline asm
	mov.b32 %r6005, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6003, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6004, %r6005, %r6003;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6007, %r5852, %r6004;
	// end inline asm
	// begin inline asm
	mov.b32 %r6010, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6011, %r6005, %r6010;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6014, %r5860, %r6011;
	// end inline asm
	// begin inline asm
	mov.b32 %r6017, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6018, %r6005, %r6017;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6021, %r5868, %r6018;
	// end inline asm
	// begin inline asm
	mov.b32 %r6024, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6025, %r6005, %r6024;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6028, %r5876, %r6025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6031, %r6007, %r6021, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6035, %r6014, %r6028, %r2319;
	// end inline asm
	shl.b32 	%r6042, %r6035, 4;
	// begin inline asm
	lop3.b32 %r6039, %r2325, %r6031, %r6042, 202;
	// end inline asm
	xor.b32  	%r7891, %r6039, -2004318072;
	st.shared.u32 	[%rd189], %r7888;
	st.shared.u32 	[%rd190], %r7889;
	st.shared.u32 	[%rd191], %r7890;
	st.shared.u32 	[%rd192], %r7891;
	ld.shared.u32 	%r8028, [%rd132];
	ld.shared.u32 	%r8027, [%rd134];
	ld.shared.u32 	%r8026, [%rd136];
	ld.shared.u32 	%r8025, [%rd138];
	// begin inline asm
	mov.b32 %r6048, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6059, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6047, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r6045, %r658, %r6047, %r6048, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6049, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6050, %r6048, %r6049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6053, %r6045, %r6050;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6056, %r669, %r6047, %r6059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6060, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6061, %r6059, %r6060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6064, %r6056, %r6061;
	// end inline asm
	shr.u32 	%r6069, %r6047, 8;
	// begin inline asm
	lop3.b32 %r6067, %r658, %r6069, %r6048, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6071, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6072, %r6048, %r6071;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6075, %r6067, %r6072;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6078, %r669, %r6069, %r6059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6082, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6083, %r6059, %r6082;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6086, %r6078, %r6083;
	// end inline asm
	// begin inline asm
	mov.b32 %r6094, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6105, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6093, %r8027, -2004318072;
	// begin inline asm
	lop3.b32 %r6091, %r658, %r6093, %r6094, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6095, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6096, %r6094, %r6095;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6099, %r6091, %r6096;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6102, %r669, %r6093, %r6105, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6106, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6107, %r6105, %r6106;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6110, %r6102, %r6107;
	// end inline asm
	shr.u32 	%r6115, %r6093, 8;
	// begin inline asm
	lop3.b32 %r6113, %r658, %r6115, %r6094, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6117, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6118, %r6094, %r6117;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6121, %r6113, %r6118;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6124, %r669, %r6115, %r6105, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6128, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6129, %r6105, %r6128;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6132, %r6124, %r6129;
	// end inline asm
	// begin inline asm
	mov.b32 %r6140, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6151, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6139, %r8026, -2004318072;
	// begin inline asm
	lop3.b32 %r6137, %r658, %r6139, %r6140, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6141, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6142, %r6140, %r6141;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6145, %r6137, %r6142;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6148, %r669, %r6139, %r6151, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6152, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6153, %r6151, %r6152;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6156, %r6148, %r6153;
	// end inline asm
	shr.u32 	%r6161, %r6139, 8;
	// begin inline asm
	lop3.b32 %r6159, %r658, %r6161, %r6140, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6163, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6164, %r6140, %r6163;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6167, %r6159, %r6164;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6170, %r669, %r6161, %r6151, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6174, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6175, %r6151, %r6174;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6178, %r6170, %r6175;
	// end inline asm
	// begin inline asm
	mov.b32 %r6186, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6197, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6185, %r8025, -2004318072;
	// begin inline asm
	lop3.b32 %r6183, %r658, %r6185, %r6186, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6187, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6188, %r6186, %r6187;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6191, %r6183, %r6188;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6194, %r669, %r6185, %r6197, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6198, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6199, %r6197, %r6198;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6202, %r6194, %r6199;
	// end inline asm
	shr.u32 	%r6207, %r6185, 8;
	// begin inline asm
	lop3.b32 %r6205, %r658, %r6207, %r6186, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6209, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6210, %r6186, %r6209;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6213, %r6205, %r6210;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6216, %r669, %r6207, %r6197, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6220, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6221, %r6197, %r6220;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6224, %r6216, %r6221;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6227, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6229, %r6227, %r6053;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6232, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6234, %r6232, %r6064;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6237, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6239, %r6237, %r6075;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6242, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6244, %r6242, %r6086;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6247, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6249, %r6247, %r6099;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6252, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6254, %r6252, %r6110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6257, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6259, %r6257, %r6121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6262, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6264, %r6262, %r6132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6267, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6269, %r6267, %r6145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6272, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6274, %r6272, %r6156;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6277, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6279, %r6277, %r6167;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6282, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6284, %r6282, %r6178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6287, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6289, %r6287, %r6191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6292, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6294, %r6292, %r6202;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6297, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6299, %r6297, %r6213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6302, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6304, %r6302, %r6224;
	// end inline asm
	// begin inline asm
	mov.b32 %r6312, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6323, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6309, %r658, %r659, %r6312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6313, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6314, %r6312, %r6313;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6317, %r6309, %r6314;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6320, %r669, %r659, %r6323, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6324, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6325, %r6323, %r6324;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6328, %r6320, %r6325;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6331, %r658, %r681, %r6312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6335, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6336, %r6312, %r6335;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6339, %r6331, %r6336;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6342, %r669, %r681, %r6323, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6346, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6347, %r6323, %r6346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6350, %r6342, %r6347;
	// end inline asm
	// begin inline asm
	mov.b32 %r6358, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6369, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6355, %r658, %r705, %r6358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6359, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6360, %r6358, %r6359;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6363, %r6355, %r6360;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6366, %r669, %r705, %r6369, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6370, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6371, %r6369, %r6370;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6374, %r6366, %r6371;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6377, %r658, %r727, %r6358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6381, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6382, %r6358, %r6381;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6385, %r6377, %r6382;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6388, %r669, %r727, %r6369, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6392, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6393, %r6369, %r6392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6396, %r6388, %r6393;
	// end inline asm
	// begin inline asm
	mov.b32 %r6404, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6415, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6401, %r658, %r751, %r6404, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6405, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6406, %r6404, %r6405;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6409, %r6401, %r6406;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6412, %r669, %r751, %r6415, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6416, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6417, %r6415, %r6416;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6420, %r6412, %r6417;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6423, %r658, %r773, %r6404, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6427, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6428, %r6404, %r6427;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6431, %r6423, %r6428;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6434, %r669, %r773, %r6415, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6438, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6439, %r6415, %r6438;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6442, %r6434, %r6439;
	// end inline asm
	// begin inline asm
	mov.b32 %r6450, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6461, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6447, %r658, %r797, %r6450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6451, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6452, %r6450, %r6451;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6455, %r6447, %r6452;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6458, %r669, %r797, %r6461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6462, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6463, %r6461, %r6462;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6466, %r6458, %r6463;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6469, %r658, %r819, %r6450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6473, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6474, %r6450, %r6473;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6477, %r6469, %r6474;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6480, %r669, %r819, %r6461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6484, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6485, %r6461, %r6484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6488, %r6480, %r6485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6491, %r226, %r6317, %r6229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6495, %r226, %r6328, %r6234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6499, %r226, %r6339, %r6239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6503, %r226, %r6350, %r6244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6507, %r226, %r6363, %r6249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6511, %r226, %r6374, %r6254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6515, %r226, %r6385, %r6259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6519, %r226, %r6396, %r6264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6523, %r226, %r6409, %r6269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6527, %r226, %r6420, %r6274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6531, %r226, %r6431, %r6279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6535, %r226, %r6442, %r6284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6539, %r226, %r6455, %r6289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6543, %r226, %r6466, %r6294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6547, %r226, %r6477, %r6299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6551, %r226, %r6488, %r6304;
	// end inline asm
	// begin inline asm
	mov.b32 %r6560, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6571, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6557, %r658, %r2455, %r6560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6561, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6562, %r6560, %r6561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6565, %r6557, %r6562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6568, %r669, %r2455, %r6571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6572, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6573, %r6571, %r6572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6576, %r6568, %r6573;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6579, %r658, %r2477, %r6560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6583, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6584, %r6560, %r6583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6587, %r6579, %r6584;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6590, %r669, %r2477, %r6571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6594, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6595, %r6571, %r6594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6598, %r6590, %r6595;
	// end inline asm
	// begin inline asm
	mov.b32 %r6606, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6617, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6603, %r658, %r2501, %r6606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6607, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6608, %r6606, %r6607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6611, %r6603, %r6608;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6614, %r669, %r2501, %r6617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6618, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6619, %r6617, %r6618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6622, %r6614, %r6619;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6625, %r658, %r2523, %r6606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6629, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6630, %r6606, %r6629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6633, %r6625, %r6630;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6636, %r669, %r2523, %r6617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6640, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6641, %r6617, %r6640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6644, %r6636, %r6641;
	// end inline asm
	// begin inline asm
	mov.b32 %r6652, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6663, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6649, %r658, %r2547, %r6652, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6653, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6654, %r6652, %r6653;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6657, %r6649, %r6654;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6660, %r669, %r2547, %r6663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6664, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6665, %r6663, %r6664;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6668, %r6660, %r6665;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6671, %r658, %r2569, %r6652, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6675, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6676, %r6652, %r6675;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6679, %r6671, %r6676;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6682, %r669, %r2569, %r6663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6686, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6687, %r6663, %r6686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6690, %r6682, %r6687;
	// end inline asm
	// begin inline asm
	mov.b32 %r6698, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6709, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6695, %r658, %r2593, %r6698, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6699, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6700, %r6698, %r6699;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6703, %r6695, %r6700;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6706, %r669, %r2593, %r6709, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6710, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6711, %r6709, %r6710;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6714, %r6706, %r6711;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6717, %r658, %r2615, %r6698, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6721, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6722, %r6698, %r6721;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6725, %r6717, %r6722;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6728, %r669, %r2615, %r6709, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6732, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6733, %r6709, %r6732;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6736, %r6728, %r6733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6739, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6741, %r6739, %r6565, %r6491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6745, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6747, %r6745, %r6576, %r6495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6751, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6753, %r6751, %r6587, %r6499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6757, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6759, %r6757, %r6598, %r6503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6763, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6765, %r6763, %r6611, %r6507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6769, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6771, %r6769, %r6622, %r6511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6775, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6777, %r6775, %r6633, %r6515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6781, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6783, %r6781, %r6644, %r6519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6787, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6789, %r6787, %r6657, %r6523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6793, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6795, %r6793, %r6668, %r6527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6799, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6801, %r6799, %r6679, %r6531;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6805, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6807, %r6805, %r6690, %r6535;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6811, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6813, %r6811, %r6703, %r6539;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6817, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6819, %r6817, %r6714, %r6543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6823, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6825, %r6823, %r6725, %r6547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6829, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6831, %r6829, %r6736, %r6551;
	// end inline asm
	// begin inline asm
	mov.b32 %r6840, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6851, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6837, %r658, %r4251, %r6840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6841, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6842, %r6840, %r6841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6845, %r6837, %r6842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6848, %r669, %r4251, %r6851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6852, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6853, %r6851, %r6852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6856, %r6848, %r6853;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6859, %r658, %r4273, %r6840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6863, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6864, %r6840, %r6863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6867, %r6859, %r6864;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6870, %r669, %r4273, %r6851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6874, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6875, %r6851, %r6874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6878, %r6870, %r6875;
	// end inline asm
	// begin inline asm
	mov.b32 %r6886, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6897, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6883, %r658, %r4297, %r6886, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6887, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6888, %r6886, %r6887;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6891, %r6883, %r6888;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6894, %r669, %r4297, %r6897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6898, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6899, %r6897, %r6898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6902, %r6894, %r6899;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6905, %r658, %r4319, %r6886, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6909, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6910, %r6886, %r6909;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6913, %r6905, %r6910;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6916, %r669, %r4319, %r6897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6920, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6921, %r6897, %r6920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6924, %r6916, %r6921;
	// end inline asm
	// begin inline asm
	mov.b32 %r6932, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6943, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6929, %r658, %r4343, %r6932, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6933, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6934, %r6932, %r6933;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6937, %r6929, %r6934;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6940, %r669, %r4343, %r6943, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6944, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6945, %r6943, %r6944;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6948, %r6940, %r6945;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6951, %r658, %r4365, %r6932, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6955, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6956, %r6932, %r6955;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6959, %r6951, %r6956;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6962, %r669, %r4365, %r6943, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6966, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6967, %r6943, %r6966;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6970, %r6962, %r6967;
	// end inline asm
	// begin inline asm
	mov.b32 %r6978, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6989, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6975, %r658, %r4389, %r6978, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6979, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6980, %r6978, %r6979;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6983, %r6975, %r6980;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6986, %r669, %r4389, %r6989, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6990, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6991, %r6989, %r6990;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6994, %r6986, %r6991;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6997, %r658, %r4411, %r6978, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7001, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7002, %r6978, %r7001;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7005, %r6997, %r7002;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7008, %r669, %r4411, %r6989, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7012, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7013, %r6989, %r7012;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7016, %r7008, %r7013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7090, %r262, %r6845, %r6741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7087, %r262, %r6856, %r6747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7099, %r262, %r6867, %r6753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7096, %r262, %r6878, %r6759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r262, %r6891, %r6765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7105, %r262, %r6902, %r6771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r262, %r6913, %r6777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7114, %r262, %r6924, %r6783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r262, %r6937, %r6789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7123, %r262, %r6948, %r6795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r262, %r6959, %r6801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7132, %r262, %r6970, %r6807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7144, %r262, %r6983, %r6813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7141, %r262, %r6994, %r6819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7153, %r262, %r7005, %r6825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7150, %r262, %r7016, %r6831;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7083, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7085, %r7083, %r7087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7088, %r308, %r7090, %r7085;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7092, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7094, %r7092, %r7096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7097, %r308, %r7099, %r7094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7101, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7103, %r7101, %r7105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7106, %r308, %r7108, %r7103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7110, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7112, %r7110, %r7114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7115, %r308, %r7117, %r7112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7119, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7121, %r7119, %r7123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7124, %r308, %r7126, %r7121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7128, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7130, %r7128, %r7132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7133, %r308, %r7135, %r7130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7137, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7139, %r7137, %r7141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7142, %r308, %r7144, %r7139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7146, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7148, %r7146, %r7150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7151, %r308, %r7153, %r7148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7155, %r311, %r7090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7158, %r308, %r7087, %r7155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7162, %r311, %r7099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7165, %r308, %r7096, %r7162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7169, %r311, %r7108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7172, %r308, %r7105, %r7169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7176, %r311, %r7117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7179, %r308, %r7114, %r7176;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7183, %r311, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7186, %r308, %r7123, %r7183;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7190, %r311, %r7135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7193, %r308, %r7132, %r7190;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7197, %r311, %r7144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7200, %r308, %r7141, %r7197;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7204, %r311, %r7153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7207, %r308, %r7150, %r7204;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7298, %r7295}, {%r355, %r361, %r358, %r364}, {%r7088, %r7158}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7307, %r7304}, {%r355, %r361, %r358, %r364}, {%r7097, %r7165}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7316, %r7313}, {%r355, %r361, %r358, %r364}, {%r7106, %r7172}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7325, %r7322}, {%r355, %r361, %r358, %r364}, {%r7115, %r7179}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7334, %r7331}, {%r355, %r361, %r358, %r364}, {%r7124, %r7186}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7343, %r7340}, {%r355, %r361, %r358, %r364}, {%r7133, %r7193}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7352, %r7349}, {%r355, %r361, %r358, %r364}, {%r7142, %r7200}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7361, %r7358}, {%r355, %r361, %r358, %r364}, {%r7151, %r7207}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7291, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7293, %r7291, %r7295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7296, %r399, %r7298, %r7293;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7300, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7302, %r7300, %r7304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7305, %r399, %r7307, %r7302;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7309, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7311, %r7309, %r7313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7314, %r399, %r7316, %r7311;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7318, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7320, %r7318, %r7322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7323, %r399, %r7325, %r7320;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7327, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7329, %r7327, %r7331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7332, %r399, %r7334, %r7329;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7336, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7338, %r7336, %r7340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7341, %r399, %r7343, %r7338;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7345, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7347, %r7345, %r7349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7350, %r399, %r7352, %r7347;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7354, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7356, %r7354, %r7358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7359, %r399, %r7361, %r7356;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7363, %r402, %r7298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7366, %r399, %r7295, %r7363;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7370, %r402, %r7307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7373, %r399, %r7304, %r7370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7377, %r402, %r7316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7380, %r399, %r7313, %r7377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7384, %r402, %r7325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7387, %r399, %r7322, %r7384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7391, %r402, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7394, %r399, %r7331, %r7391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7398, %r402, %r7343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7401, %r399, %r7340, %r7398;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7405, %r402, %r7352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7408, %r399, %r7349, %r7405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7412, %r402, %r7361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7415, %r399, %r7358, %r7412;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7419, %r7420}, {%r433, %r439, %r436, %r442}, {%r7296, %r7366}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7429, %r7430}, {%r433, %r439, %r436, %r442}, {%r7305, %r7373}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7439, %r7440}, {%r433, %r439, %r436, %r442}, {%r7314, %r7380}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7449, %r7450}, {%r433, %r439, %r436, %r442}, {%r7323, %r7387}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7459, %r7460}, {%r433, %r439, %r436, %r442}, {%r7332, %r7394}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7469, %r7470}, {%r433, %r439, %r436, %r442}, {%r7341, %r7401}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7479, %r7480}, {%r433, %r439, %r436, %r442}, {%r7350, %r7408}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7489, %r7490}, {%r433, %r439, %r436, %r442}, {%r7359, %r7415}, {%r7991, %r7991};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7499, %r120, %r7419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7502, %r120, %r7420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7505, %r120, %r7429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7508, %r120, %r7430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7511, %r120, %r7439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7514, %r120, %r7440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r120, %r7449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7520, %r120, %r7450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7523, %r120, %r7459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7526, %r120, %r7460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7529, %r120, %r7469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7532, %r120, %r7470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7535, %r120, %r7479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7538, %r120, %r7480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7541, %r120, %r7489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7544, %r120, %r7490;
	// end inline asm
	// begin inline asm
	mov.b32 %r7547, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7548, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7549, %r7499, %r7547;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7552, %r7549, %r7548;
	// end inline asm
	// begin inline asm
	mov.b32 %r7555, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7556, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7557, %r7502, %r7555;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7560, %r7557, %r7556;
	// end inline asm
	// begin inline asm
	mov.b32 %r7563, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7564, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7565, %r7505, %r7563;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7568, %r7565, %r7564;
	// end inline asm
	// begin inline asm
	mov.b32 %r7571, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7572, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7573, %r7508, %r7571;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7576, %r7573, %r7572;
	// end inline asm
	// begin inline asm
	mov.b32 %r7579, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7580, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7581, %r7511, %r7579;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7584, %r7581, %r7580;
	// end inline asm
	// begin inline asm
	mov.b32 %r7587, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7588, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7589, %r7514, %r7587;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7592, %r7589, %r7588;
	// end inline asm
	// begin inline asm
	mov.b32 %r7595, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7596, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7597, %r7517, %r7595;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7600, %r7597, %r7596;
	// end inline asm
	// begin inline asm
	mov.b32 %r7603, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7604, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7605, %r7520, %r7603;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7608, %r7605, %r7604;
	// end inline asm
	// begin inline asm
	mov.b32 %r7611, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7612, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7613, %r7523, %r7611;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7616, %r7613, %r7612;
	// end inline asm
	// begin inline asm
	mov.b32 %r7619, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7620, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7621, %r7526, %r7619;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7624, %r7621, %r7620;
	// end inline asm
	// begin inline asm
	mov.b32 %r7627, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7628, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7629, %r7529, %r7627;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7632, %r7629, %r7628;
	// end inline asm
	// begin inline asm
	mov.b32 %r7635, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7636, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7637, %r7532, %r7635;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7640, %r7637, %r7636;
	// end inline asm
	// begin inline asm
	mov.b32 %r7643, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7644, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7645, %r7535, %r7643;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7648, %r7645, %r7644;
	// end inline asm
	// begin inline asm
	mov.b32 %r7651, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7652, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7653, %r7538, %r7651;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7656, %r7653, %r7652;
	// end inline asm
	// begin inline asm
	mov.b32 %r7659, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7660, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7661, %r7541, %r7659;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7664, %r7661, %r7660;
	// end inline asm
	// begin inline asm
	mov.b32 %r7667, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7668, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7669, %r7544, %r7667;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7672, %r7669, %r7668;
	// end inline asm
	// begin inline asm
	mov.b32 %r7678, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7676, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7677, %r7678, %r7676;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7680, %r7552, %r7677;
	// end inline asm
	// begin inline asm
	mov.b32 %r7683, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7684, %r7678, %r7683;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7687, %r7560, %r7684;
	// end inline asm
	// begin inline asm
	mov.b32 %r7690, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7691, %r7678, %r7690;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7694, %r7568, %r7691;
	// end inline asm
	// begin inline asm
	mov.b32 %r7697, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7698, %r7678, %r7697;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7701, %r7576, %r7698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7704, %r7680, %r7694, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7708, %r7687, %r7701, %r2319;
	// end inline asm
	shl.b32 	%r7715, %r7708, 4;
	// begin inline asm
	lop3.b32 %r7712, %r2325, %r7704, %r7715, 202;
	// end inline asm
	xor.b32  	%r7892, %r7712, -2004318072;
	// begin inline asm
	mov.b32 %r7719, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7717, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7718, %r7719, %r7717;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7721, %r7584, %r7718;
	// end inline asm
	// begin inline asm
	mov.b32 %r7724, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7725, %r7719, %r7724;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7728, %r7592, %r7725;
	// end inline asm
	// begin inline asm
	mov.b32 %r7731, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7732, %r7719, %r7731;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7735, %r7600, %r7732;
	// end inline asm
	// begin inline asm
	mov.b32 %r7738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7739, %r7719, %r7738;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7742, %r7608, %r7739;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7745, %r7721, %r7735, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7749, %r7728, %r7742, %r2319;
	// end inline asm
	shl.b32 	%r7756, %r7749, 4;
	// begin inline asm
	lop3.b32 %r7753, %r2325, %r7745, %r7756, 202;
	// end inline asm
	xor.b32  	%r7893, %r7753, -2004318072;
	// begin inline asm
	mov.b32 %r7760, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7758, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7759, %r7760, %r7758;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7762, %r7616, %r7759;
	// end inline asm
	// begin inline asm
	mov.b32 %r7765, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7766, %r7760, %r7765;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7769, %r7624, %r7766;
	// end inline asm
	// begin inline asm
	mov.b32 %r7772, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7773, %r7760, %r7772;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7776, %r7632, %r7773;
	// end inline asm
	// begin inline asm
	mov.b32 %r7779, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7780, %r7760, %r7779;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7783, %r7640, %r7780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7786, %r7762, %r7776, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7790, %r7769, %r7783, %r2319;
	// end inline asm
	shl.b32 	%r7797, %r7790, 4;
	// begin inline asm
	lop3.b32 %r7794, %r2325, %r7786, %r7797, 202;
	// end inline asm
	xor.b32  	%r7894, %r7794, -2004318072;
	// begin inline asm
	mov.b32 %r7801, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7799, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7800, %r7801, %r7799;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7803, %r7648, %r7800;
	// end inline asm
	// begin inline asm
	mov.b32 %r7806, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7807, %r7801, %r7806;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7810, %r7656, %r7807;
	// end inline asm
	// begin inline asm
	mov.b32 %r7813, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7814, %r7801, %r7813;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7817, %r7664, %r7814;
	// end inline asm
	// begin inline asm
	mov.b32 %r7820, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7821, %r7801, %r7820;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7824, %r7672, %r7821;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7827, %r7803, %r7817, %r2319;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7831, %r7810, %r7824, %r2319;
	// end inline asm
	shl.b32 	%r7838, %r7831, 4;
	// begin inline asm
	lop3.b32 %r7835, %r2325, %r7827, %r7838, 202;
	// end inline asm
	xor.b32  	%r7895, %r7835, -2004318072;
	st.shared.u32 	[%rd189], %r7892;
	st.shared.u32 	[%rd190], %r7893;
	st.shared.u32 	[%rd191], %r7894;
	st.shared.u32 	[%rd192], %r7895;
	add.s32 	%r8024, %r8024, 64;
	add.s64 	%rd192, %rd192, 8324;
	add.s64 	%rd191, %rd191, 8324;
	add.s64 	%rd190, %rd190, 8324;
	add.s64 	%rd189, %rd189, 8324;
	add.s32 	%r8023, %r8023, 1;
	setp.eq.s32 	%p241, %r8024, 256;
	@%p241 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit17427
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7901, [%rd5];
	ld.shared.u32 	%r7902, [%rd6+128];
	ld.shared.u32 	%r7909, [%rd6+4];
	ld.shared.u32 	%r7910, [%rd6+132];
	ld.shared.u32 	%r7917, [%rd5+8324];
	ld.shared.u32 	%r7918, [%rd6+8452];
	ld.shared.u32 	%r7925, [%rd6+8328];
	ld.shared.u32 	%r7926, [%rd6+8456];
	ld.shared.u32 	%r7933, [%rd5+16648];
	ld.shared.u32 	%r7934, [%rd6+16776];
	ld.shared.u32 	%r7941, [%rd6+16652];
	ld.shared.u32 	%r7942, [%rd6+16780];
	ld.shared.u32 	%r7949, [%rd5+24972];
	ld.shared.u32 	%r7950, [%rd6+25100];
	ld.shared.u32 	%r7957, [%rd6+24976];
	ld.shared.u32 	%r7958, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7896, %r7901, %r7902, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7900, %r7901, %r7902, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7904, %r7909, %r7910, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7908, %r7909, %r7910, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7912, %r7917, %r7918, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7916, %r7917, %r7918, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7920, %r7925, %r7926, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7924, %r7925, %r7926, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7928, %r7933, %r7934, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7932, %r7933, %r7934, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7936, %r7941, %r7942, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7940, %r7941, %r7942, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7944, %r7949, %r7950, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7948, %r7949, %r7950, %r574;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7952, %r7957, %r7958, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7956, %r7957, %r7958, %r574;
	// end inline asm
	selp.b32 	%r7960, %r7900, %r7896, %p228;
	shfl.sync.bfly.b32	%r173, %r7960, 8, 31, -1;
	selp.b32 	%r7961, %r7908, %r7904, %p228;
	shfl.sync.bfly.b32	%r174, %r7961, 8, 31, -1;
	selp.b32 	%r7962, %r7916, %r7912, %p228;
	shfl.sync.bfly.b32	%r7963, %r7962, 8, 31, -1;
	selp.b32 	%r7964, %r7924, %r7920, %p228;
	shfl.sync.bfly.b32	%r7965, %r7964, 8, 31, -1;
	selp.b32 	%r7966, %r7932, %r7928, %p228;
	shfl.sync.bfly.b32	%r7967, %r7966, 8, 31, -1;
	selp.b32 	%r7968, %r7940, %r7936, %p228;
	shfl.sync.bfly.b32	%r7969, %r7968, 8, 31, -1;
	selp.b32 	%r7970, %r7948, %r7944, %p228;
	shfl.sync.bfly.b32	%r7971, %r7970, 8, 31, -1;
	selp.b32 	%r7972, %r7956, %r7952, %p228;
	shfl.sync.bfly.b32	%r7973, %r7972, 8, 31, -1;
	and.b32  	%r187, %r110, 256;
	setp.eq.s32 	%p243, %r187, 0;
	shl.b32 	%r8037, %r110, 12;
	@%p243 bra 	$L__BB0_148;
// %bb.132:                             // %pass16612
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7974, %r174, %r7908, %p228;
	selp.b32 	%r7975, %r7904, %r174, %p228;
	selp.b32 	%r7976, %r173, %r7900, %p228;
	selp.b32 	%r7977, %r7896, %r173, %p228;
	or.b32  	%r7979, %r96, %r8037;
	cvt.s64.s32 	%rd139, %r7979;
	add.s64 	%rd140, %rd139, %rd7;
	shr.u64 	%rd141, %rd140, 39;
	add.s64 	%rd142, %rd140, %rd141;
	shr.s64 	%rd143, %rd142, 25;
	setp.lt.s64 	%p245, %rd140, 0;
	and.b64  	%rd144, %rd142, -33554432;
	setp.ne.s64 	%p246, %rd144, %rd140;
	and.pred  	%p247, %p245, %p246;
	selp.u64 	%rd145, 1, 0, %p247;
	sub.s64 	%rd146, %rd145, %rd143;
	shl.b64 	%rd147, %rd146, 25;
	add.s64 	%rd148, %rd147, %rd140;
	shl.b64 	%rd149, %rd148, 2;
	add.s64 	%rd150, %rd3, %rd149;
	st.global.v4.u32 	[%rd150], {%r7977, %r7975, %r7976, %r7974};
$L__BB0_148:                            // %pass16620
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7980, %r187, 64;
	setp.gt.u32 	%p248, %r7980, 191;
	@%p248 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_150;
$L__BB0_149:                            // %pass16714
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r175, %r7912, %r7963, %p228;
	selp.b32 	%r176, %r7963, %r7916, %p228;
	selp.b32 	%r177, %r7920, %r7965, %p228;
	selp.b32 	%r178, %r7965, %r7924, %p228;
	or.b32  	%r7981, %r8037, %r96;
	or.b32  	%r7982, %r7981, 262144;
	cvt.s64.s32 	%rd151, %r7982;
	add.s64 	%rd152, %rd151, %rd7;
	shr.u64 	%rd153, %rd152, 39;
	add.s64 	%rd154, %rd152, %rd153;
	shr.s64 	%rd155, %rd154, 25;
	setp.lt.s64 	%p249, %rd152, 0;
	and.b64  	%rd156, %rd154, -33554432;
	setp.ne.s64 	%p250, %rd156, %rd152;
	and.pred  	%p251, %p249, %p250;
	selp.u64 	%rd157, 1, 0, %p251;
	sub.s64 	%rd158, %rd157, %rd155;
	shl.b64 	%rd159, %rd158, 25;
	add.s64 	%rd160, %rd159, %rd152;
	shl.b64 	%rd161, %rd160, 2;
	add.s64 	%rd162, %rd3, %rd161;
	st.global.v4.u32 	[%rd162], {%r175, %r177, %r176, %r178};
$L__BB0_150:                            // %pass16722
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r183, %r7944, %r7971, %p228;
	selp.b32 	%r184, %r7971, %r7948, %p228;
	selp.b32 	%r185, %r7952, %r7973, %p228;
	selp.b32 	%r186, %r7973, %r7956, %p228;
	or.b32  	%r7983, %r187, 128;
	setp.lt.u32 	%p252, %r7983, 192;
	or.b32  	%r7993, %r8037, %r96;
	@%p252 bra 	$L__BB0_152;
// %bb.151:                             // %pass16816
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r179, %r7928, %r7967, %p228;
	selp.b32 	%r180, %r7967, %r7932, %p228;
	selp.b32 	%r181, %r7936, %r7969, %p228;
	selp.b32 	%r182, %r7969, %r7940, %p228;
	or.b32  	%r7985, %r7993, 524288;
	cvt.s64.s32 	%rd163, %r7985;
	add.s64 	%rd164, %rd163, %rd7;
	shr.u64 	%rd165, %rd164, 39;
	add.s64 	%rd166, %rd164, %rd165;
	shr.s64 	%rd167, %rd166, 25;
	setp.lt.s64 	%p253, %rd164, 0;
	and.b64  	%rd168, %rd166, -33554432;
	setp.ne.s64 	%p254, %rd168, %rd164;
	and.pred  	%p255, %p253, %p254;
	selp.u64 	%rd169, 1, 0, %p255;
	sub.s64 	%rd170, %rd169, %rd167;
	shl.b64 	%rd171, %rd170, 25;
	add.s64 	%rd172, %rd171, %rd164;
	shl.b64 	%rd173, %rd172, 2;
	add.s64 	%rd174, %rd3, %rd173;
	st.global.v4.u32 	[%rd174], {%r179, %r181, %r180, %r182};
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L40513
	st.global.u32 	[%rd4], %r7991;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r7990, 2;
	st.global.u32 	[%rd4], %r7990;
	mov.u64 	%rd187, exception3406;
	cvta.global.u64 	%rd188, %rd187;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd188;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd57, exception1;
	cvta.global.u64 	%rd58, %rd57;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd58;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L40612
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11657, 
	(
	);
	} // callseq 3
	mov.u64 	%rd66, exception1;
	cvta.global.u64 	%rd67, %rd66;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd67;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L40609
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11657, 
	(
	);
	} // callseq 7
	mov.u64 	%rd72, exception1;
	cvta.global.u64 	%rd73, %rd72;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd73;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L40606
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11657, 
	(
	);
	} // callseq 13
	mov.u64 	%rd86, exception1;
	cvta.global.u64 	%rd87, %rd86;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd87;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r188;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
