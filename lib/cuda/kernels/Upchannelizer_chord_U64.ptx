// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan64(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2065[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<188>;
	.reg .b16 	%rs<272>;
	.reg .b32 	%r<2520>;
	.reg .f32 	%f<721>;
	.reg .b64 	%rd<135>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r93, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r100, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r100, 33407;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r101, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r101, 33407;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r94, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd4, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r102, %r4, 9;
	or.b32  	%r103, %r3, %r1;
	or.b32  	%r104, %r103, %r102;
	mul.wide.u32 	%rd35, %r104, 4;
	add.s64 	%rd5, %rd4, %rd35;
	mov.u32 	%r105, 1;
	st.global.u32 	[%rd5], %r105;
	setp.gt.u32 	%p3, %r94, 32767;
	@%p3 bra 	$L__BB0_9;
// %bb.5:                               // %L133
	ld.param.u32 	%r95, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r95, %r94;
	setp.gt.s32 	%p5, %r95, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_9;
// %bb.6:                               // %L140
	ld.param.u32 	%r96, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r106, %r95, %r94;
	and.b32  	%r107, %r106, 255;
	setp.ne.s32 	%p7, %r107, 0;
	setp.gt.u32 	%p8, %r96, 511;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_9;
// %bb.7:                               // %L151
	ld.param.u32 	%r97, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p10, %r97, %r96;
	setp.gt.s32 	%p11, %r97, 1023;
	or.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_9;
// %bb.8:                               // %L158
	not.b32 	%r108, %r96;
	add.s32 	%r109, %r108, %r97;
	and.b32  	%r110, %r109, 3;
	setp.eq.s32 	%p13, %r110, 0;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L273
	ld.param.u32 	%r98, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r98, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.11:                              // %L275
	ld.param.u32 	%r99, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p15, %r98, %r99;
	setp.lt.s32 	%p16, %r99, 49;
	and.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;
$L__BB0_13:                             // %pass191
	bfe.u32 	%r49, %r1, 2, 1;
	shr.u32 	%r50, %r1, 4;
	shl.b32 	%r119, %r50, 1;
	shl.b32 	%r120, %r49, 2;
	shl.b32 	%r121, %r1, 3;
	and.b32  	%r122, %r121, 24;
	or.b32  	%r123, %r120, %r122;
	or.b32  	%r124, %r119, %r123;
	bfe.u32 	%r125, %r1, 3, 1;
	or.b32  	%r52, %r125, %r124;
	shl.b32 	%r53, %r52, 1;
	or.b32  	%r126, %r53, -255;
	cvt.rn.f32.s32 	%f46, %r126;
	mov.f32 	%f47, 0f44008000;
	div.approx.f32 	%f42, %f46, %f47;
	mov.f32 	%f71, 0f00000000;
	mul.f32 	%f44, %f42, 0f40800000;
	setp.neu.f32 	%p23, %f44, 0f00000000;
	mov.f32 	%f720, 0f3F800000;
	mov.f32 	%f713, %f720;
	@%p23 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_15;
$L__BB0_14:                             // %L612
	add.f32 	%f74, %f44, %f44;
	mov.b32 	%r134, %f74;
	and.b32  	%r135, %r134, -2147483648;
	or.b32  	%r136, %r135, 1056964608;
	mov.b32 	%f75, %r136;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p24, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p24;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p25, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p25;
	cvt.rzi.s32.f32 	%r137, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f44;
	mul.f32 	%f83, %f82, %f82;
	fma.rn.f32 	%f84, %f83, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f85, %f83, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f86, %f84, %f83, 0fC0A55DF6;
	fma.rn.f32 	%f87, %f85, %f83, 0f4081E0CF;
	fma.rn.f32 	%f88, %f83, %f82, 0f00000000;
	fma.rn.f32 	%f89, %f87, %f83, 0fC09DE9E6;
	fma.rn.f32 	%f90, %f86, %f88, 0f00000000;
	fma.rn.f32 	%f91, %f89, %f83, 0f3F800000;
	fma.rn.f32 	%f92, %f82, 0f40490FDB, %f90;
	and.b32  	%r138, %r137, 1;
	setp.eq.b32 	%p26, %r138, 1;
	selp.f32 	%f93, %f91, %f92, %p26;
	and.b32  	%r139, %r137, 2;
	setp.eq.s32 	%p27, %r139, 0;
	sub.f32 	%f95, %f71, %f93;
	selp.f32 	%f96, %f93, %f95, %p27;
	cvt.rzi.f32.f32 	%f97, %f44;
	setp.eq.f32 	%p28, %f44, %f97;
	mul.f32 	%f98, %f44, 0f00000000;
	selp.f32 	%f99, %f98, %f96, %p28;
	mul.f32 	%f100, %f42, 0f41490FDB;
	div.approx.f32 	%f713, %f99, %f100;
$L__BB0_15:                             // %L616
	or.b32  	%r140, %r53, -191;
	cvt.rn.f32.s32 	%f104, %r140;
	div.approx.f32 	%f4, %f104, %f47;
	mul.f32 	%f6, %f4, 0f40800000;
	setp.eq.f32 	%p34, %f6, 0f00000000;
	mov.f32 	%f714, %f720;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L630
	add.f32 	%f132, %f6, %f6;
	mov.b32 	%r148, %f132;
	and.b32  	%r149, %r148, -2147483648;
	or.b32  	%r150, %r149, 1056964608;
	mov.b32 	%f133, %r150;
	add.f32 	%f134, %f132, %f133;
	cvt.rzi.f32.f32 	%f135, %f134;
	abs.f32 	%f136, %f132;
	setp.gt.f32 	%p35, %f136, 0f4B000000;
	selp.f32 	%f137, %f132, %f135, %p35;
	cvt.rzi.f32.f32 	%f138, %f132;
	setp.lt.f32 	%p36, %f136, 0f3F000000;
	selp.f32 	%f139, %f138, %f137, %p36;
	cvt.rzi.s32.f32 	%r151, %f139;
	fma.rn.f32 	%f140, %f139, 0fBF000000, %f6;
	mul.f32 	%f141, %f140, %f140;
	fma.rn.f32 	%f142, %f141, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f143, %f141, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f144, %f142, %f141, 0fC0A55DF6;
	fma.rn.f32 	%f145, %f143, %f141, 0f4081E0CF;
	fma.rn.f32 	%f146, %f141, %f140, 0f00000000;
	fma.rn.f32 	%f147, %f145, %f141, 0fC09DE9E6;
	fma.rn.f32 	%f148, %f144, %f146, 0f00000000;
	fma.rn.f32 	%f149, %f147, %f141, 0f3F800000;
	fma.rn.f32 	%f150, %f140, 0f40490FDB, %f148;
	and.b32  	%r152, %r151, 1;
	setp.eq.b32 	%p37, %r152, 1;
	selp.f32 	%f151, %f149, %f150, %p37;
	and.b32  	%r153, %r151, 2;
	setp.eq.s32 	%p38, %r153, 0;
	sub.f32 	%f153, %f71, %f151;
	selp.f32 	%f154, %f151, %f153, %p38;
	cvt.rzi.f32.f32 	%f155, %f6;
	setp.eq.f32 	%p39, %f6, %f155;
	mul.f32 	%f156, %f6, 0f00000000;
	selp.f32 	%f157, %f156, %f154, %p39;
	mul.f32 	%f158, %f4, 0f41490FDB;
	div.approx.f32 	%f714, %f157, %f158;
$L__BB0_17:                             // %L634
	or.b32  	%r157, %r53, -127;
	cvt.rn.f32.s32 	%f163, %r157;
	div.approx.f32 	%f9, %f163, %f47;
	mul.f32 	%f11, %f9, 0f40800000;
	setp.eq.f32 	%p45, %f11, 0f00000000;
	mov.f32 	%f715, %f720;
	@%p45 bra 	$L__BB0_19;
// %bb.18:                              // %L710
	add.f32 	%f191, %f11, %f11;
	mov.b32 	%r165, %f191;
	and.b32  	%r166, %r165, -2147483648;
	or.b32  	%r167, %r166, 1056964608;
	mov.b32 	%f192, %r167;
	add.f32 	%f193, %f191, %f192;
	cvt.rzi.f32.f32 	%f194, %f193;
	abs.f32 	%f195, %f191;
	setp.gt.f32 	%p46, %f195, 0f4B000000;
	selp.f32 	%f196, %f191, %f194, %p46;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p47, %f195, 0f3F000000;
	selp.f32 	%f198, %f197, %f196, %p47;
	cvt.rzi.s32.f32 	%r168, %f198;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f11;
	mul.f32 	%f200, %f199, %f199;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	and.b32  	%r169, %r168, 1;
	setp.eq.b32 	%p48, %r169, 1;
	selp.f32 	%f210, %f208, %f209, %p48;
	and.b32  	%r170, %r168, 2;
	setp.eq.s32 	%p49, %r170, 0;
	sub.f32 	%f212, %f71, %f210;
	selp.f32 	%f213, %f210, %f212, %p49;
	cvt.rzi.f32.f32 	%f214, %f11;
	setp.eq.f32 	%p50, %f11, %f214;
	mul.f32 	%f215, %f11, 0f00000000;
	selp.f32 	%f216, %f215, %f213, %p50;
	mul.f32 	%f217, %f9, 0f41490FDB;
	div.approx.f32 	%f715, %f216, %f217;
$L__BB0_19:                             // %L714
	or.b32  	%r171, %r53, -63;
	cvt.rn.f32.s32 	%f221, %r171;
	div.approx.f32 	%f15, %f221, %f47;
	mul.f32 	%f17, %f15, 0f40800000;
	setp.eq.f32 	%p56, %f17, 0f00000000;
	mov.f32 	%f716, %f720;
	@%p56 bra 	$L__BB0_21;
// %bb.20:                              // %L728
	add.f32 	%f249, %f17, %f17;
	mov.b32 	%r179, %f249;
	and.b32  	%r180, %r179, -2147483648;
	or.b32  	%r181, %r180, 1056964608;
	mov.b32 	%f250, %r181;
	add.f32 	%f251, %f249, %f250;
	cvt.rzi.f32.f32 	%f252, %f251;
	abs.f32 	%f253, %f249;
	setp.gt.f32 	%p57, %f253, 0f4B000000;
	selp.f32 	%f254, %f249, %f252, %p57;
	cvt.rzi.f32.f32 	%f255, %f249;
	setp.lt.f32 	%p58, %f253, 0f3F000000;
	selp.f32 	%f256, %f255, %f254, %p58;
	cvt.rzi.s32.f32 	%r182, %f256;
	fma.rn.f32 	%f257, %f256, 0fBF000000, %f17;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f260, %f258, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f261, %f259, %f258, 0fC0A55DF6;
	fma.rn.f32 	%f262, %f260, %f258, 0f4081E0CF;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f262, %f258, 0fC09DE9E6;
	fma.rn.f32 	%f265, %f261, %f263, 0f00000000;
	fma.rn.f32 	%f266, %f264, %f258, 0f3F800000;
	fma.rn.f32 	%f267, %f257, 0f40490FDB, %f265;
	and.b32  	%r183, %r182, 1;
	setp.eq.b32 	%p59, %r183, 1;
	selp.f32 	%f268, %f266, %f267, %p59;
	and.b32  	%r184, %r182, 2;
	setp.eq.s32 	%p60, %r184, 0;
	sub.f32 	%f270, %f71, %f268;
	selp.f32 	%f271, %f268, %f270, %p60;
	cvt.rzi.f32.f32 	%f272, %f17;
	setp.eq.f32 	%p61, %f17, %f272;
	mul.f32 	%f273, %f17, 0f00000000;
	selp.f32 	%f274, %f273, %f271, %p61;
	mul.f32 	%f275, %f15, 0f41490FDB;
	div.approx.f32 	%f716, %f274, %f275;
$L__BB0_21:                             // %L732
	or.b32  	%r188, %r53, 1;
	cvt.rn.f32.s32 	%f280, %r188;
	div.approx.f32 	%f20, %f280, %f47;
	mul.f32 	%f22, %f20, 0f40800000;
	setp.eq.f32 	%p67, %f22, 0f00000000;
	mov.f32 	%f717, %f720;
	@%p67 bra 	$L__BB0_23;
// %bb.22:                              // %L808
	add.f32 	%f308, %f22, %f22;
	mov.b32 	%r196, %f308;
	and.b32  	%r197, %r196, -2147483648;
	or.b32  	%r198, %r197, 1056964608;
	mov.b32 	%f309, %r198;
	add.f32 	%f310, %f308, %f309;
	cvt.rzi.f32.f32 	%f311, %f310;
	abs.f32 	%f312, %f308;
	setp.gt.f32 	%p68, %f312, 0f4B000000;
	selp.f32 	%f313, %f308, %f311, %p68;
	cvt.rzi.f32.f32 	%f314, %f308;
	setp.lt.f32 	%p69, %f312, 0f3F000000;
	selp.f32 	%f315, %f314, %f313, %p69;
	cvt.rzi.s32.f32 	%r199, %f315;
	fma.rn.f32 	%f316, %f315, 0fBF000000, %f22;
	mul.f32 	%f317, %f316, %f316;
	fma.rn.f32 	%f318, %f317, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f319, %f317, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f320, %f318, %f317, 0fC0A55DF6;
	fma.rn.f32 	%f321, %f319, %f317, 0f4081E0CF;
	fma.rn.f32 	%f322, %f317, %f316, 0f00000000;
	fma.rn.f32 	%f323, %f321, %f317, 0fC09DE9E6;
	fma.rn.f32 	%f324, %f320, %f322, 0f00000000;
	fma.rn.f32 	%f325, %f323, %f317, 0f3F800000;
	fma.rn.f32 	%f326, %f316, 0f40490FDB, %f324;
	and.b32  	%r200, %r199, 1;
	setp.eq.b32 	%p70, %r200, 1;
	selp.f32 	%f327, %f325, %f326, %p70;
	and.b32  	%r201, %r199, 2;
	setp.eq.s32 	%p71, %r201, 0;
	sub.f32 	%f329, %f71, %f327;
	selp.f32 	%f330, %f327, %f329, %p71;
	cvt.rzi.f32.f32 	%f331, %f22;
	setp.eq.f32 	%p72, %f22, %f331;
	mul.f32 	%f332, %f22, 0f00000000;
	selp.f32 	%f333, %f332, %f330, %p72;
	mul.f32 	%f334, %f20, 0f41490FDB;
	div.approx.f32 	%f717, %f333, %f334;
$L__BB0_23:                             // %L812
	or.b32  	%r202, %r53, 65;
	cvt.rn.f32.s32 	%f338, %r202;
	div.approx.f32 	%f26, %f338, %f47;
	mul.f32 	%f28, %f26, 0f40800000;
	setp.eq.f32 	%p78, %f28, 0f00000000;
	mov.f32 	%f718, %f720;
	@%p78 bra 	$L__BB0_25;
// %bb.24:                              // %L826
	add.f32 	%f366, %f28, %f28;
	mov.b32 	%r210, %f366;
	and.b32  	%r211, %r210, -2147483648;
	or.b32  	%r212, %r211, 1056964608;
	mov.b32 	%f367, %r212;
	add.f32 	%f368, %f366, %f367;
	cvt.rzi.f32.f32 	%f369, %f368;
	abs.f32 	%f370, %f366;
	setp.gt.f32 	%p79, %f370, 0f4B000000;
	selp.f32 	%f371, %f366, %f369, %p79;
	cvt.rzi.f32.f32 	%f372, %f366;
	setp.lt.f32 	%p80, %f370, 0f3F000000;
	selp.f32 	%f373, %f372, %f371, %p80;
	cvt.rzi.s32.f32 	%r213, %f373;
	fma.rn.f32 	%f374, %f373, 0fBF000000, %f28;
	mul.f32 	%f375, %f374, %f374;
	fma.rn.f32 	%f376, %f375, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f377, %f375, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f378, %f376, %f375, 0fC0A55DF6;
	fma.rn.f32 	%f379, %f377, %f375, 0f4081E0CF;
	fma.rn.f32 	%f380, %f375, %f374, 0f00000000;
	fma.rn.f32 	%f381, %f379, %f375, 0fC09DE9E6;
	fma.rn.f32 	%f382, %f378, %f380, 0f00000000;
	fma.rn.f32 	%f383, %f381, %f375, 0f3F800000;
	fma.rn.f32 	%f384, %f374, 0f40490FDB, %f382;
	and.b32  	%r214, %r213, 1;
	setp.eq.b32 	%p81, %r214, 1;
	selp.f32 	%f385, %f383, %f384, %p81;
	and.b32  	%r215, %r213, 2;
	setp.eq.s32 	%p82, %r215, 0;
	sub.f32 	%f387, %f71, %f385;
	selp.f32 	%f388, %f385, %f387, %p82;
	cvt.rzi.f32.f32 	%f389, %f28;
	setp.eq.f32 	%p83, %f28, %f389;
	mul.f32 	%f390, %f28, 0f00000000;
	selp.f32 	%f391, %f390, %f388, %p83;
	mul.f32 	%f392, %f26, 0f41490FDB;
	div.approx.f32 	%f718, %f391, %f392;
$L__BB0_25:                             // %L830
	or.b32  	%r219, %r53, 129;
	cvt.rn.f32.s32 	%f397, %r219;
	div.approx.f32 	%f31, %f397, %f47;
	mul.f32 	%f33, %f31, 0f40800000;
	setp.eq.f32 	%p89, %f33, 0f00000000;
	mov.f32 	%f719, %f720;
	@%p89 bra 	$L__BB0_27;
// %bb.26:                              // %L906
	add.f32 	%f425, %f33, %f33;
	mov.b32 	%r227, %f425;
	and.b32  	%r228, %r227, -2147483648;
	or.b32  	%r229, %r228, 1056964608;
	mov.b32 	%f426, %r229;
	add.f32 	%f427, %f425, %f426;
	cvt.rzi.f32.f32 	%f428, %f427;
	abs.f32 	%f429, %f425;
	setp.gt.f32 	%p90, %f429, 0f4B000000;
	selp.f32 	%f430, %f425, %f428, %p90;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p91, %f429, 0f3F000000;
	selp.f32 	%f432, %f431, %f430, %p91;
	cvt.rzi.s32.f32 	%r230, %f432;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f33;
	mul.f32 	%f434, %f433, %f433;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	and.b32  	%r231, %r230, 1;
	setp.eq.b32 	%p92, %r231, 1;
	selp.f32 	%f444, %f442, %f443, %p92;
	and.b32  	%r232, %r230, 2;
	setp.eq.s32 	%p93, %r232, 0;
	sub.f32 	%f446, %f71, %f444;
	selp.f32 	%f447, %f444, %f446, %p93;
	cvt.rzi.f32.f32 	%f448, %f33;
	setp.eq.f32 	%p94, %f33, %f448;
	mul.f32 	%f449, %f33, 0f00000000;
	selp.f32 	%f450, %f449, %f447, %p94;
	mul.f32 	%f451, %f31, 0f41490FDB;
	div.approx.f32 	%f719, %f450, %f451;
$L__BB0_27:                             // %L910
	or.b32  	%r233, %r53, 193;
	cvt.rn.f32.s32 	%f455, %r233;
	div.approx.f32 	%f37, %f455, %f47;
	mul.f32 	%f39, %f37, 0f40800000;
	setp.eq.f32 	%p100, %f39, 0f00000000;
	@%p100 bra 	$L__BB0_29;
// %bb.28:                              // %L924
	add.f32 	%f483, %f39, %f39;
	mov.b32 	%r241, %f483;
	and.b32  	%r242, %r241, -2147483648;
	or.b32  	%r243, %r242, 1056964608;
	mov.b32 	%f484, %r243;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p101, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p101;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p102, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p102;
	cvt.rzi.s32.f32 	%r244, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f39;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r245, %r244, 1;
	setp.eq.b32 	%p103, %r245, 1;
	selp.f32 	%f502, %f500, %f501, %p103;
	and.b32  	%r246, %r244, 2;
	setp.eq.s32 	%p104, %r246, 0;
	sub.f32 	%f504, %f71, %f502;
	selp.f32 	%f505, %f502, %f504, %p104;
	cvt.rzi.f32.f32 	%f506, %f39;
	setp.eq.f32 	%p105, %f39, %f506;
	mul.f32 	%f507, %f39, 0f00000000;
	selp.f32 	%f508, %f507, %f505, %p105;
	mul.f32 	%f509, %f37, 0f41490FDB;
	div.approx.f32 	%f720, %f508, %f509;
$L__BB0_29:                             // %L928
	setp.le.s32 	%p148, %r95, %r94;
	mov.u32 	%r2492, 0;
	@%p148 bra 	$L__BB0_40;
// %bb.30:                              // %L1523.lr.ph
	abs.f32 	%f48, %f42;
	abs.f32 	%f106, %f4;
	abs.f32 	%f165, %f9;
	abs.f32 	%f223, %f15;
	abs.f32 	%f282, %f20;
	abs.f32 	%f340, %f26;
	setp.gt.f32 	%p18, %f48, 0f4B800000;
	mul.f32 	%f49, %f42, 0f00000000;
	setp.gt.f32 	%p29, %f106, 0f4B800000;
	mul.f32 	%f107, %f4, 0f00000000;
	setp.gt.f32 	%p40, %f165, 0f4B800000;
	mul.f32 	%f166, %f9, 0f00000000;
	setp.gt.f32 	%p51, %f223, 0f4B800000;
	mul.f32 	%f224, %f15, 0f00000000;
	setp.gt.f32 	%p62, %f282, 0f4B800000;
	mul.f32 	%f283, %f20, 0f00000000;
	setp.gt.f32 	%p73, %f340, 0f4B800000;
	mul.f32 	%f341, %f26, 0f00000000;
	abs.f32 	%f399, %f31;
	selp.f32 	%f50, %f49, %f42, %p18;
	selp.f32 	%f108, %f107, %f4, %p29;
	selp.f32 	%f167, %f166, %f9, %p40;
	selp.f32 	%f225, %f224, %f15, %p51;
	selp.f32 	%f284, %f283, %f20, %p62;
	selp.f32 	%f342, %f341, %f26, %p73;
	setp.gt.f32 	%p84, %f399, 0f4B800000;
	mul.f32 	%f400, %f31, 0f00000000;
	add.f32 	%f51, %f50, %f50;
	add.f32 	%f109, %f108, %f108;
	add.f32 	%f168, %f167, %f167;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f285, %f284, %f284;
	add.f32 	%f343, %f342, %f342;
	selp.f32 	%f401, %f400, %f31, %p84;
	abs.f32 	%f457, %f37;
	mov.b32 	%r127, %f51;
	mov.b32 	%r141, %f109;
	mov.b32 	%r158, %f168;
	mov.b32 	%r172, %f226;
	mov.b32 	%r189, %f285;
	mov.b32 	%r203, %f343;
	add.f32 	%f402, %f401, %f401;
	setp.gt.f32 	%p95, %f457, 0f4B800000;
	mul.f32 	%f458, %f37, 0f00000000;
	and.b32  	%r128, %r127, -2147483648;
	and.b32  	%r142, %r141, -2147483648;
	and.b32  	%r159, %r158, -2147483648;
	and.b32  	%r173, %r172, -2147483648;
	and.b32  	%r190, %r189, -2147483648;
	and.b32  	%r204, %r203, -2147483648;
	mov.b32 	%r220, %f402;
	selp.f32 	%f459, %f458, %f37, %p95;
	or.b32  	%r129, %r128, 1056964608;
	or.b32  	%r143, %r142, 1056964608;
	or.b32  	%r160, %r159, 1056964608;
	or.b32  	%r174, %r173, 1056964608;
	or.b32  	%r191, %r190, 1056964608;
	or.b32  	%r205, %r204, 1056964608;
	and.b32  	%r221, %r220, -2147483648;
	add.f32 	%f460, %f459, %f459;
	mov.b32 	%f52, %r129;
	mov.b32 	%f110, %r143;
	mov.b32 	%f169, %r160;
	mov.b32 	%f227, %r174;
	mov.b32 	%f286, %r191;
	mov.b32 	%f344, %r205;
	or.b32  	%r222, %r221, 1056964608;
	mov.b32 	%r234, %f460;
	add.f32 	%f53, %f51, %f52;
	abs.f32 	%f55, %f51;
	add.f32 	%f111, %f109, %f110;
	abs.f32 	%f113, %f109;
	add.f32 	%f170, %f168, %f169;
	abs.f32 	%f172, %f168;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f287, %f285, %f286;
	abs.f32 	%f289, %f285;
	add.f32 	%f345, %f343, %f344;
	abs.f32 	%f347, %f343;
	mov.b32 	%f403, %r222;
	and.b32  	%r235, %r234, -2147483648;
	cvt.rzi.f32.f32 	%f54, %f53;
	setp.gt.f32 	%p19, %f55, 0f4B000000;
	cvt.rzi.f32.f32 	%f112, %f111;
	setp.gt.f32 	%p30, %f113, 0f4B000000;
	cvt.rzi.f32.f32 	%f171, %f170;
	setp.gt.f32 	%p41, %f172, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p52, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f288, %f287;
	setp.gt.f32 	%p63, %f289, 0f4B000000;
	cvt.rzi.f32.f32 	%f346, %f345;
	setp.gt.f32 	%p74, %f347, 0f4B000000;
	add.f32 	%f404, %f402, %f403;
	abs.f32 	%f406, %f402;
	or.b32  	%r236, %r235, 1056964608;
	selp.f32 	%f56, %f51, %f54, %p19;
	cvt.rzi.f32.f32 	%f57, %f51;
	setp.lt.f32 	%p20, %f55, 0f3F000000;
	selp.f32 	%f114, %f109, %f112, %p30;
	cvt.rzi.f32.f32 	%f115, %f109;
	setp.lt.f32 	%p31, %f113, 0f3F000000;
	selp.f32 	%f173, %f168, %f171, %p41;
	cvt.rzi.f32.f32 	%f174, %f168;
	setp.lt.f32 	%p42, %f172, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p52;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p53, %f230, 0f3F000000;
	selp.f32 	%f290, %f285, %f288, %p63;
	cvt.rzi.f32.f32 	%f291, %f285;
	setp.lt.f32 	%p64, %f289, 0f3F000000;
	selp.f32 	%f348, %f343, %f346, %p74;
	cvt.rzi.f32.f32 	%f349, %f343;
	setp.lt.f32 	%p75, %f347, 0f3F000000;
	cvt.rzi.f32.f32 	%f405, %f404;
	setp.gt.f32 	%p85, %f406, 0f4B000000;
	mov.b32 	%f461, %r236;
	shr.u32 	%r111, %r4, 3;
	selp.f32 	%f58, %f57, %f56, %p20;
	selp.f32 	%f116, %f115, %f114, %p31;
	selp.f32 	%f175, %f174, %f173, %p42;
	selp.f32 	%f233, %f232, %f231, %p53;
	selp.f32 	%f292, %f291, %f290, %p64;
	selp.f32 	%f350, %f349, %f348, %p75;
	selp.f32 	%f407, %f402, %f405, %p85;
	cvt.rzi.f32.f32 	%f408, %f402;
	setp.lt.f32 	%p86, %f406, 0f3F000000;
	add.f32 	%f462, %f460, %f461;
	abs.f32 	%f464, %f460;
	cvt.u16.u32 	%rs1, %r111;
	fma.rn.f32 	%f59, %f58, 0fBF000000, %f50;
	fma.rn.f32 	%f117, %f116, 0fBF000000, %f108;
	fma.rn.f32 	%f176, %f175, 0fBF000000, %f167;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f293, %f292, 0fBF000000, %f284;
	fma.rn.f32 	%f351, %f350, 0fBF000000, %f342;
	selp.f32 	%f409, %f408, %f407, %p86;
	cvt.rzi.f32.f32 	%f463, %f462;
	setp.gt.f32 	%p96, %f464, 0f4B000000;
	and.b16  	%rs2, %rs1, 255;
	mul.f32 	%f60, %f59, %f59;
	mul.f32 	%f118, %f117, %f117;
	mul.f32 	%f177, %f176, %f176;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f294, %f293, %f293;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f410, %f409, 0fBF000000, %f401;
	selp.f32 	%f465, %f460, %f463, %p96;
	cvt.rzi.f32.f32 	%f466, %f460;
	setp.lt.f32 	%p97, %f464, 0f3F000000;
	mul.lo.s16 	%rs3, %rs2, 171;
	cvt.rzi.s32.f32 	%r130, %f58;
	fma.rn.f32 	%f61, %f60, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f62, %f60, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r144, %f116;
	fma.rn.f32 	%f119, %f118, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f120, %f118, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r161, %f175;
	fma.rn.f32 	%f178, %f177, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f179, %f177, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r175, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r192, %f292;
	fma.rn.f32 	%f295, %f294, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f296, %f294, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r206, %f350;
	fma.rn.f32 	%f353, %f352, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f354, %f352, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f411, %f410, %f410;
	selp.f32 	%f467, %f466, %f465, %p97;
	shl.b32 	%r39, %r1, 2;
	shr.u16 	%rs4, %rs3, 13;
	add.s32 	%r131, %r130, 1;
	fma.rn.f32 	%f63, %f61, %f60, 0fC0A55DF6;
	fma.rn.f32 	%f64, %f62, %f60, 0f4081E0CF;
	fma.rn.f32 	%f65, %f60, %f59, 0f00000000;
	add.s32 	%r145, %r144, 1;
	fma.rn.f32 	%f121, %f119, %f118, 0fC0A55DF6;
	fma.rn.f32 	%f122, %f120, %f118, 0f4081E0CF;
	fma.rn.f32 	%f123, %f118, %f117, 0f00000000;
	add.s32 	%r162, %r161, 1;
	fma.rn.f32 	%f180, %f178, %f177, 0fC0A55DF6;
	fma.rn.f32 	%f181, %f179, %f177, 0f4081E0CF;
	fma.rn.f32 	%f182, %f177, %f176, 0f00000000;
	add.s32 	%r176, %r175, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r193, %r192, 1;
	fma.rn.f32 	%f297, %f295, %f294, 0fC0A55DF6;
	fma.rn.f32 	%f298, %f296, %f294, 0f4081E0CF;
	fma.rn.f32 	%f299, %f294, %f293, 0f00000000;
	add.s32 	%r207, %r206, 1;
	fma.rn.f32 	%f355, %f353, %f352, 0fC0A55DF6;
	fma.rn.f32 	%f356, %f354, %f352, 0f4081E0CF;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	cvt.rzi.s32.f32 	%r223, %f409;
	fma.rn.f32 	%f412, %f411, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f413, %f411, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f468, %f467, 0fBF000000, %f459;
	and.b32  	%r40, %r39, 4;
	mul.lo.s16 	%rs5, %rs4, 48;
	and.b32  	%r113, %r1, 18;
	fma.rn.f32 	%f66, %f64, %f60, 0fC09DE9E6;
	fma.rn.f32 	%f67, %f63, %f65, 0f00000000;
	and.b32  	%r132, %r131, 1;
	fma.rn.f32 	%f124, %f122, %f118, 0fC09DE9E6;
	fma.rn.f32 	%f125, %f121, %f123, 0f00000000;
	and.b32  	%r146, %r145, 1;
	fma.rn.f32 	%f183, %f181, %f177, 0fC09DE9E6;
	fma.rn.f32 	%f184, %f180, %f182, 0f00000000;
	and.b32  	%r163, %r162, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r177, %r176, 1;
	fma.rn.f32 	%f300, %f298, %f294, 0fC09DE9E6;
	fma.rn.f32 	%f301, %f297, %f299, 0f00000000;
	and.b32  	%r194, %r193, 1;
	fma.rn.f32 	%f358, %f356, %f352, 0fC09DE9E6;
	fma.rn.f32 	%f359, %f355, %f357, 0f00000000;
	and.b32  	%r208, %r207, 1;
	add.s32 	%r224, %r223, 1;
	fma.rn.f32 	%f414, %f412, %f411, 0fC0A55DF6;
	fma.rn.f32 	%f415, %f413, %f411, 0f4081E0CF;
	fma.rn.f32 	%f416, %f411, %f410, 0f00000000;
	mul.f32 	%f469, %f468, %f468;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b32  	%r44, %r39, 32;
	shl.b32 	%r45, %r1, 1;
	or.b32  	%r114, %r113, %r40;
	fma.rn.f32 	%f68, %f66, %f60, 0f3F800000;
	fma.rn.f32 	%f69, %f59, 0f40490FDB, %f67;
	setp.eq.b32 	%p21, %r132, 1;
	fma.rn.f32 	%f126, %f124, %f118, 0f3F800000;
	fma.rn.f32 	%f127, %f117, 0f40490FDB, %f125;
	setp.eq.b32 	%p32, %r146, 1;
	fma.rn.f32 	%f185, %f183, %f177, 0f3F800000;
	fma.rn.f32 	%f186, %f176, 0f40490FDB, %f184;
	setp.eq.b32 	%p43, %r163, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p54, %r177, 1;
	fma.rn.f32 	%f302, %f300, %f294, 0f3F800000;
	fma.rn.f32 	%f303, %f293, 0f40490FDB, %f301;
	setp.eq.b32 	%p65, %r194, 1;
	fma.rn.f32 	%f360, %f358, %f352, 0f3F800000;
	fma.rn.f32 	%f361, %f351, 0f40490FDB, %f359;
	setp.eq.b32 	%p76, %r208, 1;
	fma.rn.f32 	%f417, %f415, %f411, 0fC09DE9E6;
	fma.rn.f32 	%f418, %f414, %f416, 0f00000000;
	and.b32  	%r225, %r224, 1;
	cvt.rzi.s32.f32 	%r237, %f467;
	fma.rn.f32 	%f470, %f469, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f471, %f469, 0f3E684E12, 0fBFAAD2E0;
	and.b16  	%rs7, %rs6, 255;
	and.b32  	%r46, %r45, 8;
	or.b32  	%r115, %r114, %r44;
	selp.f32 	%f70, %f68, %f69, %p21;
	and.b32  	%r133, %r131, 2;
	selp.f32 	%f128, %f126, %f127, %p32;
	and.b32  	%r147, %r145, 2;
	selp.f32 	%f187, %f185, %f186, %p43;
	and.b32  	%r164, %r162, 2;
	selp.f32 	%f245, %f243, %f244, %p54;
	and.b32  	%r178, %r176, 2;
	selp.f32 	%f304, %f302, %f303, %p65;
	and.b32  	%r195, %r193, 2;
	selp.f32 	%f362, %f360, %f361, %p76;
	and.b32  	%r209, %r207, 2;
	fma.rn.f32 	%f419, %f417, %f411, 0f3F800000;
	fma.rn.f32 	%f420, %f410, 0f40490FDB, %f418;
	setp.eq.b32 	%p87, %r225, 1;
	add.s32 	%r238, %r237, 1;
	fma.rn.f32 	%f472, %f470, %f469, 0fC0A55DF6;
	fma.rn.f32 	%f473, %f471, %f469, 0f4081E0CF;
	fma.rn.f32 	%f474, %f469, %f468, 0f00000000;
	mul.wide.u16 	%r43, %rs7, 64;
	or.b32  	%r116, %r115, %r46;
	setp.eq.s32 	%p22, %r133, 0;
	sub.f32 	%f72, %f71, %f70;
	setp.eq.s32 	%p33, %r147, 0;
	sub.f32 	%f130, %f71, %f128;
	setp.eq.s32 	%p44, %r164, 0;
	sub.f32 	%f189, %f71, %f187;
	setp.eq.s32 	%p55, %r178, 0;
	sub.f32 	%f247, %f71, %f245;
	setp.eq.s32 	%p66, %r195, 0;
	sub.f32 	%f306, %f71, %f304;
	setp.eq.s32 	%p77, %r209, 0;
	sub.f32 	%f364, %f71, %f362;
	selp.f32 	%f421, %f419, %f420, %p87;
	and.b32  	%r226, %r224, 2;
	fma.rn.f32 	%f475, %f473, %f469, 0fC09DE9E6;
	fma.rn.f32 	%f476, %f472, %f474, 0f00000000;
	and.b32  	%r239, %r238, 1;
	or.b32  	%r117, %r116, %r43;
	selp.f32 	%f73, %f70, %f72, %p22;
	selp.f32 	%f131, %f128, %f130, %p33;
	selp.f32 	%f190, %f187, %f189, %p44;
	selp.f32 	%f248, %f245, %f247, %p55;
	selp.f32 	%f307, %f304, %f306, %p66;
	selp.f32 	%f365, %f362, %f364, %p77;
	setp.eq.s32 	%p88, %r226, 0;
	sub.f32 	%f423, %f71, %f421;
	fma.rn.f32 	%f477, %f475, %f469, 0f3F800000;
	fma.rn.f32 	%f478, %f468, 0f40490FDB, %f476;
	setp.eq.b32 	%p98, %r239, 1;
	bfe.u32 	%r118, %r117, 1, 7;
	mul.f32 	%f43, %f73, %f73;
	mul.f32 	%f5, %f131, %f131;
	mul.f32 	%f10, %f190, %f190;
	mul.f32 	%f16, %f248, %f248;
	mul.f32 	%f21, %f307, %f307;
	mul.f32 	%f27, %f365, %f365;
	selp.f32 	%f424, %f421, %f423, %p88;
	selp.f32 	%f479, %f477, %f478, %p98;
	and.b32  	%r240, %r238, 2;
	ld.param.u64 	%rd1, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd36, %r118, 4;
	mul.f32 	%f102, %f713, %f43;
	mov.f32 	%f103, 0f42800000;
	mul.f32 	%f160, %f714, %f5;
	mul.f32 	%f219, %f715, %f10;
	mul.f32 	%f277, %f716, %f16;
	mul.f32 	%f336, %f717, %f21;
	mul.f32 	%f394, %f718, %f27;
	mul.f32 	%f32, %f424, %f424;
	setp.eq.s32 	%p99, %r240, 0;
	sub.f32 	%f481, %f71, %f479;
	cvt.u32.u16 	%r112, %rs6;
	add.s64 	%rd37, %rd1, %rd36;
	div.approx.f32 	%f3, %f102, %f103;
	div.approx.f32 	%f162, %f160, %f103;
	div.approx.f32 	%f14, %f219, %f103;
	div.approx.f32 	%f279, %f277, %f103;
	div.approx.f32 	%f25, %f336, %f103;
	div.approx.f32 	%f396, %f394, %f103;
	mul.f32 	%f453, %f719, %f32;
	selp.f32 	%f482, %f479, %f481, %p99;
	ld.param.u64 	%rd2, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b32  	%r38, %r1, 16;
	and.b32  	%r41, %r1, 2;
	and.b32  	%r42, %r112, 255;
	ld.global.u32 	%r47, [%rd37];
	shr.u32 	%r48, %r1, 1;
	shr.u32 	%r51, %r1, 3;
	mov.b32 	%r156, %f162;
	mov.b32 	%r155, %f3;
	mov.b32 	%r187, %f279;
	mov.b32 	%r186, %f14;
	mov.b32 	%r218, %f396;
	mov.b32 	%r217, %f25;
	div.approx.f32 	%f36, %f453, %f103;
	mul.f32 	%f38, %f482, %f482;
	// begin inline asm
	cvt.rn.f16x2.f32 %r154, %r156, %r155;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r185, %r187, %r186;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r216, %r218, %r217;
	// end inline asm
	mul.f32 	%f510, %f720, %f38;
	div.approx.f32 	%f512, %f510, %f103;
	mov.b32 	%r249, %f512;
	mov.b32 	%r248, %f36;
	// begin inline asm
	cvt.rn.f16x2.f32 %r247, %r249, %r248;
	// end inline asm
	mul.lo.s32 	%r286, %r52, 63;
	and.b32  	%r287, %r286, 127;
	cvt.rn.f32.s32 	%f513, %r287;
	div.approx.f32 	%f514, %f513, %f103;
	add.f32 	%f515, %f514, %f514;
	mov.b32 	%r288, %f515;
	and.b32  	%r289, %r288, -2147483648;
	or.b32  	%r290, %r289, 1056964608;
	mov.b32 	%f516, %r290;
	add.f32 	%f517, %f515, %f516;
	cvt.rzi.f32.f32 	%f518, %f517;
	abs.f32 	%f519, %f515;
	setp.gt.f32 	%p106, %f519, 0f4B000000;
	selp.f32 	%f520, %f515, %f518, %p106;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p107, %f519, 0f3F000000;
	selp.f32 	%f522, %f521, %f520, %p107;
	cvt.rzi.s32.f32 	%r291, %f522;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f514;
	mul.f32 	%f524, %f523, %f523;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	and.b32  	%r292, %r291, 1;
	setp.eq.b32 	%p108, %r292, 1;
	selp.f32 	%f534, %f532, %f533, %p108;
	selp.f32 	%f535, %f533, %f532, %p108;
	and.b32  	%r293, %r291, 2;
	setp.eq.s32 	%p109, %r293, 0;
	neg.f32 	%f536, %f534;
	selp.f32 	%f537, %f534, %f536, %p109;
	add.s32 	%r294, %r291, 1;
	and.b32  	%r295, %r294, 2;
	setp.eq.s32 	%p110, %r295, 0;
	sub.f32 	%f539, %f71, %f535;
	selp.f32 	%f540, %f535, %f539, %p110;
	cvt.rzi.f32.f32 	%f541, %f514;
	setp.eq.f32 	%p111, %f541, %f514;
	mul.f32 	%f542, %f514, 0f00000000;
	selp.f32 	%f543, %f542, %f537, %p111;
	abs.f32 	%f544, %f514;
	setp.gt.f32 	%p112, %f544, 0f4B800000;
	add.f32 	%f545, %f543, 0f3F800000;
	selp.f32 	%f546, %f545, %f540, %p112;
	add.s32 	%r296, %r286, 96;
	and.b32  	%r297, %r296, 127;
	cvt.rn.f32.s32 	%f547, %r297;
	div.approx.f32 	%f548, %f547, %f103;
	add.f32 	%f549, %f548, %f548;
	mov.b32 	%r298, %f549;
	and.b32  	%r299, %r298, -2147483648;
	or.b32  	%r300, %r299, 1056964608;
	mov.b32 	%f550, %r300;
	add.f32 	%f551, %f549, %f550;
	cvt.rzi.f32.f32 	%f552, %f551;
	abs.f32 	%f553, %f549;
	setp.gt.f32 	%p113, %f553, 0f4B000000;
	selp.f32 	%f554, %f549, %f552, %p113;
	cvt.rzi.f32.f32 	%f555, %f549;
	setp.lt.f32 	%p114, %f553, 0f3F000000;
	selp.f32 	%f556, %f555, %f554, %p114;
	cvt.rzi.s32.f32 	%r301, %f556;
	fma.rn.f32 	%f557, %f556, 0fBF000000, %f548;
	mul.f32 	%f558, %f557, %f557;
	fma.rn.f32 	%f559, %f558, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f560, %f558, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f561, %f559, %f558, 0fC0A55DF6;
	fma.rn.f32 	%f562, %f560, %f558, 0f4081E0CF;
	fma.rn.f32 	%f563, %f558, %f557, 0f00000000;
	fma.rn.f32 	%f564, %f562, %f558, 0fC09DE9E6;
	fma.rn.f32 	%f565, %f561, %f563, 0f00000000;
	fma.rn.f32 	%f566, %f564, %f558, 0f3F800000;
	fma.rn.f32 	%f567, %f557, 0f40490FDB, %f565;
	and.b32  	%r302, %r301, 1;
	setp.eq.b32 	%p115, %r302, 1;
	selp.f32 	%f568, %f566, %f567, %p115;
	selp.f32 	%f569, %f567, %f566, %p115;
	and.b32  	%r303, %r301, 2;
	setp.eq.s32 	%p116, %r303, 0;
	neg.f32 	%f570, %f568;
	selp.f32 	%f571, %f568, %f570, %p116;
	add.s32 	%r304, %r301, 1;
	and.b32  	%r305, %r304, 2;
	setp.eq.s32 	%p117, %r305, 0;
	sub.f32 	%f572, %f71, %f569;
	selp.f32 	%f573, %f569, %f572, %p117;
	cvt.rzi.f32.f32 	%f574, %f548;
	setp.eq.f32 	%p118, %f574, %f548;
	mul.f32 	%f575, %f548, 0f00000000;
	selp.f32 	%f576, %f575, %f571, %p118;
	abs.f32 	%f577, %f548;
	setp.gt.f32 	%p119, %f577, 0f4B800000;
	add.f32 	%f578, %f576, 0f3F800000;
	selp.f32 	%f579, %f578, %f573, %p119;
	mov.b32 	%r251, %f546;
	mov.b32 	%r252, %f579;
	// begin inline asm
	cvt.rn.f16x2.f32 %r250, %r252, %r251;
	// end inline asm
	mov.b32 	%r254, %f543;
	mov.b32 	%r255, %f576;
	// begin inline asm
	cvt.rn.f16x2.f32 %r253, %r255, %r254;
	// end inline asm
	and.b32  	%r306, %r51, 2;
	and.b32  	%r307, %r48, 4;
	or.b32  	%r308, %r49, %r306;
	or.b32  	%r309, %r308, %r307;
	and.b32  	%r310, %r45, 6;
	mul.lo.s32 	%r311, %r309, %r310;
	and.b32  	%r312, %r311, 14;
	cvt.rn.f32.s32 	%f580, %r312;
	mov.f32 	%f581, 0f41000000;
	div.approx.f32 	%f582, %f580, %f581;
	add.f32 	%f583, %f582, %f582;
	mov.b32 	%r313, %f583;
	and.b32  	%r314, %r313, -2147483648;
	or.b32  	%r315, %r314, 1056964608;
	mov.b32 	%f584, %r315;
	add.f32 	%f585, %f583, %f584;
	cvt.rzi.f32.f32 	%f586, %f585;
	abs.f32 	%f587, %f583;
	setp.gt.f32 	%p120, %f587, 0f4B000000;
	selp.f32 	%f588, %f583, %f586, %p120;
	cvt.rzi.f32.f32 	%f589, %f583;
	setp.lt.f32 	%p121, %f587, 0f3F000000;
	selp.f32 	%f590, %f589, %f588, %p121;
	cvt.rzi.s32.f32 	%r316, %f590;
	fma.rn.f32 	%f591, %f590, 0fBF000000, %f582;
	mul.f32 	%f592, %f591, %f591;
	fma.rn.f32 	%f593, %f592, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f594, %f592, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f593, %f592, 0fC0A55DF6;
	fma.rn.f32 	%f596, %f594, %f592, 0f4081E0CF;
	fma.rn.f32 	%f597, %f592, %f591, 0f00000000;
	fma.rn.f32 	%f598, %f596, %f592, 0fC09DE9E6;
	fma.rn.f32 	%f599, %f595, %f597, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f592, 0f3F800000;
	fma.rn.f32 	%f601, %f591, 0f40490FDB, %f599;
	and.b32  	%r317, %r316, 1;
	setp.eq.b32 	%p122, %r317, 1;
	selp.f32 	%f602, %f600, %f601, %p122;
	selp.f32 	%f603, %f601, %f600, %p122;
	and.b32  	%r318, %r316, 2;
	setp.eq.s32 	%p123, %r318, 0;
	neg.f32 	%f604, %f602;
	selp.f32 	%f605, %f602, %f604, %p123;
	add.s32 	%r319, %r316, 1;
	and.b32  	%r320, %r319, 2;
	setp.eq.s32 	%p124, %r320, 0;
	sub.f32 	%f606, %f71, %f603;
	selp.f32 	%f607, %f603, %f606, %p124;
	cvt.rzi.f32.f32 	%f608, %f582;
	setp.eq.f32 	%p125, %f608, %f582;
	mul.f32 	%f609, %f582, 0f00000000;
	selp.f32 	%f610, %f609, %f605, %p125;
	abs.f32 	%f611, %f582;
	setp.gt.f32 	%p126, %f611, 0f4B800000;
	add.f32 	%f612, %f610, 0f3F800000;
	selp.f32 	%f613, %f612, %f607, %p126;
	or.b32  	%r321, %r45, 8;
	mul.lo.s32 	%r322, %r309, %r321;
	and.b32  	%r323, %r322, 14;
	cvt.rn.f32.s32 	%f614, %r323;
	div.approx.f32 	%f615, %f614, %f581;
	add.f32 	%f616, %f615, %f615;
	mov.b32 	%r324, %f616;
	and.b32  	%r325, %r324, -2147483648;
	or.b32  	%r326, %r325, 1056964608;
	mov.b32 	%f617, %r326;
	add.f32 	%f618, %f616, %f617;
	cvt.rzi.f32.f32 	%f619, %f618;
	abs.f32 	%f620, %f616;
	setp.gt.f32 	%p127, %f620, 0f4B000000;
	selp.f32 	%f621, %f616, %f619, %p127;
	cvt.rzi.f32.f32 	%f622, %f616;
	setp.lt.f32 	%p128, %f620, 0f3F000000;
	selp.f32 	%f623, %f622, %f621, %p128;
	cvt.rzi.s32.f32 	%r327, %f623;
	fma.rn.f32 	%f624, %f623, 0fBF000000, %f615;
	mul.f32 	%f625, %f624, %f624;
	fma.rn.f32 	%f626, %f625, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f627, %f625, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f628, %f626, %f625, 0fC0A55DF6;
	fma.rn.f32 	%f629, %f627, %f625, 0f4081E0CF;
	fma.rn.f32 	%f630, %f625, %f624, 0f00000000;
	fma.rn.f32 	%f631, %f629, %f625, 0fC09DE9E6;
	fma.rn.f32 	%f632, %f628, %f630, 0f00000000;
	fma.rn.f32 	%f633, %f631, %f625, 0f3F800000;
	fma.rn.f32 	%f634, %f624, 0f40490FDB, %f632;
	and.b32  	%r328, %r327, 1;
	setp.eq.b32 	%p129, %r328, 1;
	selp.f32 	%f635, %f633, %f634, %p129;
	selp.f32 	%f636, %f634, %f633, %p129;
	and.b32  	%r329, %r327, 2;
	setp.eq.s32 	%p130, %r329, 0;
	neg.f32 	%f637, %f635;
	selp.f32 	%f638, %f635, %f637, %p130;
	add.s32 	%r330, %r327, 1;
	and.b32  	%r331, %r330, 2;
	setp.eq.s32 	%p131, %r331, 0;
	sub.f32 	%f639, %f71, %f636;
	selp.f32 	%f640, %f636, %f639, %p131;
	cvt.rzi.f32.f32 	%f641, %f615;
	setp.eq.f32 	%p132, %f641, %f615;
	mul.f32 	%f642, %f615, 0f00000000;
	selp.f32 	%f643, %f642, %f638, %p132;
	abs.f32 	%f644, %f615;
	setp.gt.f32 	%p133, %f644, 0f4B800000;
	add.f32 	%f645, %f643, 0f3F800000;
	selp.f32 	%f646, %f645, %f640, %p133;
	mov.b32 	%r257, %f613;
	mov.b32 	%r258, %f646;
	// begin inline asm
	cvt.rn.f16x2.f32 %r256, %r258, %r257;
	// end inline asm
	mov.b32 	%r260, %f610;
	mov.b32 	%r261, %f643;
	// begin inline asm
	cvt.rn.f16x2.f32 %r259, %r261, %r260;
	// end inline asm
	xor.b32  	%r281, %r260, -2147483648;
	xor.b32  	%r282, %r261, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r262, %r282, %r281;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r265, %r258, %r257;
	// end inline asm
	cvt.rn.f32.s32 	%f647, %r311;
	div.approx.f32 	%f648, %f647, %f103;
	add.f32 	%f649, %f648, %f648;
	mov.b32 	%r332, %f649;
	and.b32  	%r333, %r332, -2147483648;
	or.b32  	%r334, %r333, 1056964608;
	mov.b32 	%f650, %r334;
	add.f32 	%f651, %f649, %f650;
	cvt.rzi.f32.f32 	%f652, %f651;
	abs.f32 	%f653, %f649;
	setp.gt.f32 	%p134, %f653, 0f4B000000;
	selp.f32 	%f654, %f649, %f652, %p134;
	cvt.rzi.f32.f32 	%f655, %f649;
	setp.lt.f32 	%p135, %f653, 0f3F000000;
	selp.f32 	%f656, %f655, %f654, %p135;
	cvt.rzi.s32.f32 	%r335, %f656;
	fma.rn.f32 	%f657, %f656, 0fBF000000, %f648;
	mul.f32 	%f658, %f657, %f657;
	fma.rn.f32 	%f659, %f658, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f660, %f658, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f661, %f659, %f658, 0fC0A55DF6;
	fma.rn.f32 	%f662, %f660, %f658, 0f4081E0CF;
	fma.rn.f32 	%f663, %f658, %f657, 0f00000000;
	fma.rn.f32 	%f664, %f662, %f658, 0fC09DE9E6;
	fma.rn.f32 	%f665, %f661, %f663, 0f00000000;
	fma.rn.f32 	%f666, %f664, %f658, 0f3F800000;
	fma.rn.f32 	%f667, %f657, 0f40490FDB, %f665;
	and.b32  	%r336, %r335, 1;
	setp.eq.b32 	%p136, %r336, 1;
	selp.f32 	%f668, %f666, %f667, %p136;
	selp.f32 	%f669, %f667, %f666, %p136;
	and.b32  	%r337, %r335, 2;
	setp.eq.s32 	%p137, %r337, 0;
	neg.f32 	%f670, %f668;
	selp.f32 	%f671, %f668, %f670, %p137;
	add.s32 	%r338, %r335, 1;
	and.b32  	%r339, %r338, 2;
	setp.eq.s32 	%p138, %r339, 0;
	sub.f32 	%f672, %f71, %f669;
	selp.f32 	%f673, %f669, %f672, %p138;
	cvt.rzi.f32.f32 	%f674, %f648;
	setp.eq.f32 	%p139, %f674, %f648;
	mul.f32 	%f675, %f648, 0f00000000;
	selp.f32 	%f676, %f675, %f671, %p139;
	mov.b32 	%r340, %f676;
	abs.f32 	%f677, %f648;
	setp.gt.f32 	%p140, %f677, 0f4B800000;
	add.f32 	%f678, %f676, 0f3F800000;
	selp.f32 	%f679, %f678, %f673, %p140;
	shl.b32 	%r341, %r309, 3;
	add.s32 	%r342, %r311, %r341;
	cvt.rn.f32.s32 	%f680, %r342;
	div.approx.f32 	%f681, %f680, %f103;
	add.f32 	%f682, %f681, %f681;
	mov.b32 	%r343, %f682;
	and.b32  	%r344, %r343, -2147483648;
	or.b32  	%r345, %r344, 1056964608;
	mov.b32 	%f683, %r345;
	add.f32 	%f684, %f682, %f683;
	cvt.rzi.f32.f32 	%f685, %f684;
	abs.f32 	%f686, %f682;
	setp.gt.f32 	%p141, %f686, 0f4B000000;
	selp.f32 	%f687, %f682, %f685, %p141;
	cvt.rzi.f32.f32 	%f688, %f682;
	setp.lt.f32 	%p142, %f686, 0f3F000000;
	selp.f32 	%f689, %f688, %f687, %p142;
	cvt.rzi.s32.f32 	%r346, %f689;
	fma.rn.f32 	%f690, %f689, 0fBF000000, %f681;
	mul.f32 	%f691, %f690, %f690;
	fma.rn.f32 	%f692, %f691, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f693, %f691, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f694, %f692, %f691, 0fC0A55DF6;
	fma.rn.f32 	%f695, %f693, %f691, 0f4081E0CF;
	fma.rn.f32 	%f696, %f691, %f690, 0f00000000;
	fma.rn.f32 	%f697, %f695, %f691, 0fC09DE9E6;
	fma.rn.f32 	%f698, %f694, %f696, 0f00000000;
	fma.rn.f32 	%f699, %f697, %f691, 0f3F800000;
	fma.rn.f32 	%f700, %f690, 0f40490FDB, %f698;
	and.b32  	%r347, %r346, 1;
	setp.eq.b32 	%p143, %r347, 1;
	selp.f32 	%f701, %f699, %f700, %p143;
	selp.f32 	%f702, %f700, %f699, %p143;
	and.b32  	%r348, %r346, 2;
	setp.eq.s32 	%p144, %r348, 0;
	neg.f32 	%f703, %f701;
	selp.f32 	%f704, %f701, %f703, %p144;
	add.s32 	%r349, %r346, 1;
	and.b32  	%r350, %r349, 2;
	setp.eq.s32 	%p145, %r350, 0;
	sub.f32 	%f705, %f71, %f702;
	selp.f32 	%f706, %f702, %f705, %p145;
	cvt.rzi.f32.f32 	%f707, %f681;
	setp.eq.f32 	%p146, %f707, %f681;
	mul.f32 	%f708, %f681, 0f00000000;
	selp.f32 	%f709, %f708, %f704, %p146;
	mov.b32 	%r351, %f709;
	abs.f32 	%f710, %f681;
	setp.gt.f32 	%p147, %f710, 0f4B800000;
	add.f32 	%f711, %f709, 0f3F800000;
	selp.f32 	%f712, %f711, %f706, %p147;
	mov.b32 	%r270, %f712;
	mov.b32 	%r269, %f679;
	// begin inline asm
	cvt.rn.f16x2.f32 %r268, %r270, %r269;
	// end inline asm
	xor.b32  	%r273, %r351, -2147483648;
	xor.b32  	%r272, %r340, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r271, %r273, %r272;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r274, %r258, %r257;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r277, %r261, %r260;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r280, %r282, %r281;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r283, %r258, %r257;
	// end inline asm
	shl.b32 	%r353, %r4, 5;
	and.b32  	%r354, %r39, 28;
	or.b32  	%r21, %r1, %r44;
	and.b32  	%r355, %r353, 224;
	or.b32  	%r356, %r355, %r354;
	add.s32 	%r357, %r42, %r98;
	shl.b32 	%r358, %r357, 8;
	or.b32  	%r22, %r356, %r358;
	bfe.s32 	%r359, %r1, 3, 1;
	and.b32  	%r23, %r1, 8;
	shl.b32 	%r360, %r1, 4;
	or.b32  	%r361, %r360, %r23;
	shr.u32 	%r362, %r361, 2;
	and.b32  	%r363, %r362, 30;
	shr.u32 	%r364, %r2, 1;
	and.b32  	%r365, %r3, 32;
	or.b32  	%r366, %r365, %r364;
	or.b32  	%r367, %r43, %r38;
	or.b32  	%r368, %r367, %r40;
	or.b32  	%r369, %r368, %r46;
	or.b32  	%r370, %r369, %r44;
	or.b32  	%r371, %r370, %r41;
	bfe.u32 	%r372, %r371, 1, 5;
	mul.lo.s32 	%r373, %r372, 65;
	add.s32 	%r374, %r373, %r366;
	or.b32  	%r375, %r366, 8;
	add.s32 	%r376, %r373, %r375;
	or.b32  	%r377, %r366, 16;
	add.s32 	%r378, %r373, %r377;
	or.b32  	%r379, %r366, 24;
	add.s32 	%r380, %r373, %r379;
	shl.b32 	%r381, %r2, 1;
	or.b32  	%r382, %r381, %r50;
	mul.lo.s32 	%r383, %r382, 65;
	add.s32 	%r384, %r363, %r383;
	mul.wide.u32 	%rd38, %r384, 4;
	mov.u64 	%rd39, shmem;
	add.s64 	%rd6, %rd39, %rd38;
	cvt.u64.u32 	%rd40, %r363;
	cvt.u64.u32 	%rd41, %r383;
	add.s64 	%rd42, %rd41, %rd40;
	shl.b64 	%rd43, %rd42, 2;
	add.s64 	%rd7, %rd39, %rd43;
	shl.b32 	%r385, %r96, 16;
	add.s32 	%r386, %r385, -196608;
	shl.b32 	%r387, %r2, 2;
	and.b32  	%r388, %r43, 192;
	or.b32  	%r389, %r51, %r387;
	or.b32  	%r390, %r389, %r388;
	shl.b32 	%r391, %r390, 8;
	or.b32  	%r24, %r391, %r356;
	cvt.s64.s32 	%rd8, %r386;
	setp.gt.u32 	%p149, %r1, 15;
	shr.u32 	%r392, %r2, 3;
	mul.lo.s32 	%r393, %r392, 130;
	shr.u32 	%r394, %r38, 4;
	mul.lo.s32 	%r395, %r394, 65;
	bfe.s32 	%r396, %r2, 2, 1;
	and.b32  	%r397, %r2, 4;
	setp.eq.s32 	%p150, %r397, 0;
	and.b32  	%r398, %r396, 260;
	bfe.s32 	%r399, %r2, 1, 1;
	and.b32  	%r400, %r2, 2;
	setp.eq.s32 	%p151, %r400, 0;
	and.b32  	%r401, %r399, 520;
	and.b32  	%r402, %r2, 1;
	neg.s32 	%r403, %r402;
	setp.eq.b32 	%p152, %r402, 1;
	and.b32  	%r404, %r403, 1040;
	add.s32 	%r405, %r404, %r363;
	add.s32 	%r406, %r405, %r393;
	add.s32 	%r407, %r406, %r395;
	add.s32 	%r408, %r407, %r398;
	add.s32 	%r409, %r408, %r401;
	mul.wide.u32 	%rd44, %r409, 4;
	add.s64 	%rd9, %rd39, %rd44;
	selp.b64 	%rd45, 0, 520, %p151;
	selp.b64 	%rd46, 0, 260, %p150;
	cvt.u64.u32 	%rd47, %r395;
	cvt.u64.u32 	%rd48, %r393;
	selp.b64 	%rd49, 1040, 0, %p152;
	add.s64 	%rd50, %rd40, %rd49;
	add.s64 	%rd51, %rd50, %rd48;
	add.s64 	%rd52, %rd51, %rd47;
	add.s64 	%rd53, %rd52, %rd46;
	add.s64 	%rd54, %rd53, %rd45;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd10, %rd39, %rd55;
	add.s32 	%r410, %r409, 2113;
	mul.wide.u32 	%rd56, %r410, 4;
	add.s64 	%rd11, %rd39, %rd56;
	add.s32 	%r411, %r409, 2082;
	mul.wide.u32 	%rd57, %r411, 4;
	add.s64 	%rd12, %rd39, %rd57;
	add.s32 	%r412, %r409, 2114;
	mul.wide.u32 	%rd58, %r412, 4;
	add.s64 	%rd13, %rd39, %rd58;
	add.s32 	%r413, %r409, 4194;
	mul.wide.u32 	%rd59, %r413, 4;
	add.s64 	%rd14, %rd39, %rd59;
	add.s32 	%r414, %r409, 4163;
	mul.wide.u32 	%rd60, %r414, 4;
	add.s64 	%rd15, %rd39, %rd60;
	add.s32 	%r415, %r409, 4195;
	mul.wide.u32 	%rd61, %r415, 4;
	add.s64 	%rd16, %rd39, %rd61;
	add.s32 	%r416, %r409, 6275;
	mul.wide.u32 	%rd62, %r416, 4;
	add.s64 	%rd17, %rd39, %rd62;
	add.s32 	%r417, %r409, 6244;
	mul.wide.u32 	%rd63, %r417, 4;
	add.s64 	%rd18, %rd39, %rd63;
	add.s32 	%r418, %r409, 6276;
	mul.wide.u32 	%rd64, %r418, 4;
	add.s64 	%rd19, %rd39, %rd64;
	and.b32  	%r419, %r1, 1;
	neg.s32 	%r420, %r419;
	and.b32  	%r421, %r420, 130;
	setp.eq.s32 	%p153, %r41, 0;
	selp.b32 	%r422, 0, 65, %p153;
	bfe.s32 	%r423, %r1, 2, 1;
	and.b32  	%r424, %r423, 260;
	selp.b32 	%r425, 520, 0, %p149;
	and.b32  	%r426, %r359, 1040;
	or.b32  	%r427, %r426, %r366;
	or.b32  	%r428, %r426, %r375;
	mul.wide.u32 	%rd20, %r380, 4;
	or.b32  	%r429, %r421, %r422;
	or.b32  	%r430, %r429, %r424;
	or.b32  	%r431, %r430, %r425;
	or.b32  	%r432, %r431, %r426;
	add.s32 	%r433, %r432, %r379;
	mul.wide.u32 	%rd21, %r433, 4;
	mul.wide.u32 	%rd22, %r378, 4;
	add.s32 	%r434, %r432, %r377;
	mul.wide.u32 	%rd23, %r434, 4;
	mul.wide.u32 	%rd24, %r376, 4;
	add.s32 	%r435, %r431, %r428;
	mul.wide.u32 	%rd25, %r435, 4;
	mul.wide.u32 	%rd26, %r374, 4;
	add.s32 	%r436, %r431, %r427;
	mul.wide.u32 	%rd27, %r436, 4;
	mov.u16 	%rs243, 25600;
	mov.u16 	%rs245, 21504;
	mov.u16 	%rs253, 18432;
	mov.u16 	%rs267, -14592;
	mov.u32 	%r2494, %r2492;
	mov.u32 	%r2495, %r2492;
	mov.u32 	%r2496, %r2492;
	mov.u32 	%r2497, %r2492;
	mov.u32 	%r2498, %r2492;
	mov.u32 	%r2499, %r2492;
	mov.u32 	%r2500, %r2492;
	mov.u32 	%r2501, %r2492;
	mov.u32 	%r2512, %r2492;
	mov.u32 	%r2513, %r2492;
	mov.u32 	%r2514, %r2492;
	mov.u32 	%r2515, %r2492;
	mov.u32 	%r37, %r2492;
	bra.uni 	$L__BB0_31;
$L__BB0_39:                             // %pass10421
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r2486, %r2493, %r24;
	or.b32  	%r2487, %r2486, 196608;
	cvt.s64.s32 	%rd118, %r2487;
	add.s64 	%rd119, %rd118, %rd8;
	shr.u64 	%rd120, %rd119, 39;
	add.s64 	%rd121, %rd119, %rd120;
	shr.s64 	%rd122, %rd121, 25;
	setp.lt.s64 	%p182, %rd119, 0;
	and.b64  	%rd123, %rd121, -33554432;
	setp.ne.s64 	%p183, %rd123, %rd119;
	and.pred  	%p184, %p182, %p183;
	selp.u64 	%rd124, 1, 0, %p184;
	sub.s64 	%rd125, %rd124, %rd122;
	shl.b64 	%rd126, %rd125, 25;
	add.s64 	%rd127, %rd126, %rd119;
	shl.b64 	%rd128, %rd127, 2;
	add.s64 	%rd129, %rd3, %rd128;
	st.global.v4.u32 	[%rd129], {%r89, %r91, %r90, %r92};
	setp.ne.s32 	%p185, %r37, 32512;
	add.s32 	%r37, %r37, 256;
	add.s32 	%r2488, %r37, %r94;
	setp.lt.s32 	%p186, %r2488, %r95;
	and.pred  	%p187, %p185, %p186;
	@%p187 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_40;
$L__BB0_31:                             // %L1523
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_32 Depth 2
	setp.eq.s32 	%p154, %r23, 0;
	or.b32  	%r502, %r37, %r21;
	and.b32  	%r503, %r502, 32560;
	or.b32  	%r504, %r503, %r2;
	add.s32 	%r505, %r504, %r94;
	mad.lo.s32 	%r506, %r505, 12288, %r22;
	mul.hi.s32 	%r507, %r506, 715827883;
	shr.u32 	%r508, %r507, 31;
	shr.s32 	%r509, %r507, 26;
	add.s32 	%r510, %r509, %r508;
	setp.lt.s32 	%p155, %r506, 0;
	mul.lo.s32 	%r511, %r510, 402653184;
	setp.ne.s32 	%p156, %r511, %r506;
	and.pred  	%p157, %p155, %p156;
	selp.s32 	%r512, -1, 0, %p157;
	add.s32 	%r513, %r510, %r512;
	or.b32  	%r514, %r506, 1;
	mad.lo.s32 	%r515, %r513, -402653184, %r514;
	mul.wide.s32 	%rd66, %r515, 4;
	add.s64 	%rd67, %rd2, %rd66;
	ld.global.v4.u32 	{%r516, %r517, %r518, %r519}, [%rd67+-4];
	or.b32  	%r520, %r504, 64;
	add.s32 	%r521, %r520, %r94;
	mad.lo.s32 	%r522, %r521, 12288, %r22;
	mul.hi.s32 	%r523, %r522, 715827883;
	shr.u32 	%r524, %r523, 31;
	shr.s32 	%r525, %r523, 26;
	add.s32 	%r526, %r525, %r524;
	setp.lt.s32 	%p158, %r522, 0;
	mul.lo.s32 	%r527, %r526, 402653184;
	setp.ne.s32 	%p159, %r527, %r522;
	and.pred  	%p160, %p158, %p159;
	selp.s32 	%r528, -1, 0, %p160;
	add.s32 	%r529, %r526, %r528;
	or.b32  	%r530, %r522, 1;
	mad.lo.s32 	%r531, %r529, -402653184, %r530;
	mul.wide.s32 	%rd68, %r531, 4;
	add.s64 	%rd69, %rd2, %rd68;
	ld.global.v4.u32 	{%r532, %r533, %r534, %r535}, [%rd69+-4];
	or.b32  	%r536, %r504, 128;
	add.s32 	%r537, %r536, %r94;
	mad.lo.s32 	%r538, %r537, 12288, %r22;
	mul.hi.s32 	%r539, %r538, 715827883;
	shr.u32 	%r540, %r539, 31;
	shr.s32 	%r541, %r539, 26;
	add.s32 	%r542, %r541, %r540;
	setp.lt.s32 	%p161, %r538, 0;
	mul.lo.s32 	%r543, %r542, 402653184;
	setp.ne.s32 	%p162, %r543, %r538;
	and.pred  	%p163, %p161, %p162;
	selp.s32 	%r544, -1, 0, %p163;
	add.s32 	%r545, %r542, %r544;
	or.b32  	%r546, %r538, 1;
	mad.lo.s32 	%r547, %r545, -402653184, %r546;
	mul.wide.s32 	%rd70, %r547, 4;
	add.s64 	%rd71, %rd2, %rd70;
	ld.global.v4.u32 	{%r548, %r549, %r550, %r551}, [%rd71+-4];
	or.b32  	%r552, %r504, 192;
	add.s32 	%r553, %r552, %r94;
	mad.lo.s32 	%r554, %r553, 12288, %r22;
	mul.hi.s32 	%r555, %r554, 715827883;
	shr.u32 	%r556, %r555, 31;
	shr.s32 	%r557, %r555, 26;
	add.s32 	%r558, %r557, %r556;
	setp.lt.s32 	%p164, %r554, 0;
	mul.lo.s32 	%r559, %r558, 402653184;
	setp.ne.s32 	%p165, %r559, %r554;
	and.pred  	%p166, %p164, %p165;
	selp.s32 	%r560, -1, 0, %p166;
	add.s32 	%r561, %r558, %r560;
	or.b32  	%r562, %r554, 1;
	mad.lo.s32 	%r563, %r561, -402653184, %r562;
	mul.wide.s32 	%rd72, %r563, 4;
	add.s64 	%rd73, %rd2, %rd72;
	ld.global.v4.u32 	{%r564, %r565, %r566, %r567}, [%rd73+-4];
	selp.b32 	%r568, %r518, %r516, %p154;
	shfl.sync.bfly.b32	%r569, %r568, 8, 31, -1;
	selp.b32 	%r438, %r516, %r569, %p154;
	selp.b32 	%r439, %r569, %r518, %p154;
	selp.b32 	%r570, %r519, %r517, %p154;
	shfl.sync.bfly.b32	%r571, %r570, 8, 31, -1;
	selp.b32 	%r446, %r517, %r571, %p154;
	selp.b32 	%r447, %r571, %r519, %p154;
	selp.b32 	%r572, %r534, %r532, %p154;
	shfl.sync.bfly.b32	%r573, %r572, 8, 31, -1;
	selp.b32 	%r454, %r532, %r573, %p154;
	selp.b32 	%r455, %r573, %r534, %p154;
	selp.b32 	%r574, %r535, %r533, %p154;
	shfl.sync.bfly.b32	%r575, %r574, 8, 31, -1;
	selp.b32 	%r462, %r533, %r575, %p154;
	selp.b32 	%r463, %r575, %r535, %p154;
	selp.b32 	%r576, %r550, %r548, %p154;
	shfl.sync.bfly.b32	%r577, %r576, 8, 31, -1;
	selp.b32 	%r470, %r548, %r577, %p154;
	selp.b32 	%r471, %r577, %r550, %p154;
	selp.b32 	%r578, %r551, %r549, %p154;
	shfl.sync.bfly.b32	%r579, %r578, 8, 31, -1;
	selp.b32 	%r478, %r549, %r579, %p154;
	selp.b32 	%r479, %r579, %r551, %p154;
	selp.b32 	%r580, %r566, %r564, %p154;
	shfl.sync.bfly.b32	%r581, %r580, 8, 31, -1;
	selp.b32 	%r486, %r564, %r581, %p154;
	selp.b32 	%r487, %r581, %r566, %p154;
	selp.b32 	%r582, %r567, %r565, %p154;
	shfl.sync.bfly.b32	%r583, %r582, 8, 31, -1;
	selp.b32 	%r494, %r565, %r583, %p154;
	selp.b32 	%r495, %r583, %r567, %p154;
	mov.u32 	%r496, 21520;
	// begin inline asm
	prmt.b32 %r437, %r438, %r439, %r496;
	// end inline asm
	mov.u32 	%r500, 30258;
	// begin inline asm
	prmt.b32 %r441, %r438, %r439, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r445, %r446, %r447, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r449, %r446, %r447, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r453, %r454, %r455, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r457, %r454, %r455, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r461, %r462, %r463, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r465, %r462, %r463, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r469, %r470, %r471, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r473, %r470, %r471, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r477, %r478, %r479, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r481, %r478, %r479, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r485, %r486, %r487, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r489, %r486, %r487, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r493, %r494, %r495, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r497, %r494, %r495, %r500;
	// end inline asm
	st.shared.u32 	[%rd9], %r437;
	st.shared.u32 	[%rd10+128], %r441;
	st.shared.u32 	[%rd10+4], %r445;
	st.shared.u32 	[%rd10+132], %r449;
	st.shared.u32 	[%rd9+8324], %r453;
	st.shared.u32 	[%rd11], %r457;
	st.shared.u32 	[%rd12], %r461;
	st.shared.u32 	[%rd13], %r465;
	st.shared.u32 	[%rd9+16648], %r469;
	st.shared.u32 	[%rd14], %r473;
	st.shared.u32 	[%rd15], %r477;
	st.shared.u32 	[%rd16], %r481;
	st.shared.u32 	[%rd9+24972], %r485;
	st.shared.u32 	[%rd17], %r489;
	st.shared.u32 	[%rd18], %r493;
	st.shared.u32 	[%rd19], %r497;
	bar.sync 	0;
	mov.u32 	%r2507, 256;
	mov.u64 	%rd134, %rd39;
	mov.u32 	%r2508, %r2501;
	mov.u32 	%r2509, %r2500;
	mov.u32 	%r2510, %r2499;
	mov.u32 	%r2511, %r2498;
	mov.u32 	%r2516, %r2497;
	mov.u32 	%r2517, %r2496;
	mov.u32 	%r2518, %r2495;
	mov.u32 	%r2519, %r2494;
$L__BB0_32:                             // %pass5640
                                        //   Parent Loop BB0_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2501, %r2515;
	mov.u32 	%r2500, %r2514;
	mov.u32 	%r2499, %r2513;
	mov.u32 	%r2498, %r2512;
	mov.u32 	%r2494, %r2511;
	mov.u32 	%r2495, %r2510;
	mov.u32 	%r2496, %r2509;
	mov.u32 	%r2497, %r2508;
	add.s64 	%rd74, %rd134, %rd27;
	ld.shared.u32 	%r2512, [%rd74];
	// begin inline asm
	mov.b32 %r589, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r600, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r588, %r2512, -2004318072;
	mov.u32 	%r587, 983055;
	// begin inline asm
	lop3.b32 %r586, %r587, %r588, %r589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r590, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r591, %r589, %r590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r594, %r586, %r591;
	// end inline asm
	mov.u32 	%r598, 15728880;
	// begin inline asm
	lop3.b32 %r597, %r598, %r588, %r600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r601, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r602, %r600, %r601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r605, %r597, %r602;
	// end inline asm
	shr.u32 	%r610, %r588, 8;
	// begin inline asm
	lop3.b32 %r608, %r587, %r610, %r589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r612, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r613, %r589, %r612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r616, %r608, %r613;
	// end inline asm
	// begin inline asm
	lop3.b32 %r619, %r598, %r610, %r600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r623, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r624, %r600, %r623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r627, %r619, %r624;
	// end inline asm
	// begin inline asm
	mov.b32 %r635, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r646, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r634, %r2519, -2004318072;
	// begin inline asm
	lop3.b32 %r632, %r587, %r634, %r635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r636, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r637, %r635, %r636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r640, %r632, %r637;
	// end inline asm
	// begin inline asm
	lop3.b32 %r643, %r598, %r634, %r646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r647, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r648, %r646, %r647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r651, %r643, %r648;
	// end inline asm
	shr.u32 	%r656, %r634, 8;
	// begin inline asm
	lop3.b32 %r654, %r587, %r656, %r635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r658, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r659, %r635, %r658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r662, %r654, %r659;
	// end inline asm
	// begin inline asm
	lop3.b32 %r665, %r598, %r656, %r646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r669, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r670, %r646, %r669;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r673, %r665, %r670;
	// end inline asm
	mov.u32 	%r681, 0;
	// begin inline asm
	fma.rn.f16x2 %r678, %r154, %r640, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r684, %r154, %r651, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r690, %r154, %r662, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r696, %r154, %r673, %r681;
	// end inline asm
	// begin inline asm
	mov.b32 %r705, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r716, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r704, %r2494, -2004318072;
	// begin inline asm
	lop3.b32 %r702, %r587, %r704, %r705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r706, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r707, %r705, %r706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r710, %r702, %r707;
	// end inline asm
	// begin inline asm
	lop3.b32 %r713, %r598, %r704, %r716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r717, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r718, %r716, %r717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r721, %r713, %r718;
	// end inline asm
	shr.u32 	%r726, %r704, 8;
	// begin inline asm
	lop3.b32 %r724, %r587, %r726, %r705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r728, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r729, %r705, %r728;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r732, %r724, %r729;
	// end inline asm
	// begin inline asm
	lop3.b32 %r735, %r598, %r726, %r716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r739, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r740, %r716, %r739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r743, %r735, %r740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r746, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r748, %r746, %r710, %r678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r752, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r754, %r752, %r721, %r684;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r758, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r760, %r758, %r732, %r690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r764, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r766, %r764, %r743, %r696;
	// end inline asm
	// begin inline asm
	mov.b32 %r775, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r786, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r774, %r2498, -2004318072;
	// begin inline asm
	lop3.b32 %r772, %r587, %r774, %r775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r776, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r777, %r775, %r776;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r780, %r772, %r777;
	// end inline asm
	// begin inline asm
	lop3.b32 %r783, %r598, %r774, %r786, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r787, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r788, %r786, %r787;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r791, %r783, %r788;
	// end inline asm
	shr.u32 	%r796, %r774, 8;
	// begin inline asm
	lop3.b32 %r794, %r587, %r796, %r775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r798, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r799, %r775, %r798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r802, %r794, %r799;
	// end inline asm
	// begin inline asm
	lop3.b32 %r805, %r598, %r796, %r786, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r809, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r810, %r786, %r809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r813, %r805, %r810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r818, %r216, %r780, %r748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r824, %r216, %r791, %r754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r830, %r216, %r802, %r760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r836, %r216, %r813, %r766;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r840, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r871, %r840, %r594, %r818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r846, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r868, %r846, %r605, %r824;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r852, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r880, %r852, %r616, %r830;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r858, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r877, %r858, %r627, %r836;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r864, %r253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r866, %r864, %r868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r869, %r250, %r871, %r866;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r873, %r253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r875, %r873, %r877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r878, %r250, %r880, %r875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r882, %r253, %r871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r885, %r250, %r868, %r882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r889, %r253, %r880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r892, %r250, %r877, %r889;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r923, %r920}, {%r256, %r262, %r259, %r265}, {%r869, %r885}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r932, %r929}, {%r256, %r262, %r259, %r265}, {%r878, %r892}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r916, %r271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r918, %r916, %r920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r921, %r268, %r923, %r918;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r925, %r271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r927, %r925, %r929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r930, %r268, %r932, %r927;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r934, %r271, %r923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r937, %r268, %r920, %r934;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r941, %r271, %r932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r944, %r268, %r929, %r941;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r948, %r949}, {%r274, %r280, %r277, %r283}, {%r921, %r937}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r958, %r959}, {%r274, %r280, %r277, %r283}, {%r930, %r944}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r968, %r47, %r948;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r971, %r47, %r949;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r974, %r47, %r958;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r977, %r47, %r959;
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs267, %rs267};
	// end inline asm
	mov.u16 	%rs58, 18176;
	// begin inline asm
	mov.b32 %r981, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r982, %r968, %r980;
	// end inline asm
	// begin inline asm
	min.f16x2 %r985, %r982, %r981;
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r990, %r971, %r988;
	// end inline asm
	// begin inline asm
	min.f16x2 %r993, %r990, %r989;
	// end inline asm
	// begin inline asm
	mov.b32 %r996, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r997, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r998, %r974, %r996;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1001, %r998, %r997;
	// end inline asm
	// begin inline asm
	mov.b32 %r1004, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1006, %r977, %r1004;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1009, %r1006, %r1005;
	// end inline asm
	mov.u16 	%rs72, 26112;
	// begin inline asm
	mov.b32 %r1015, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1013, %r985, %r1015;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1016, %r993, %r1015;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1019, %r1001, %r1015;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1022, %r1009, %r1015;
	// end inline asm
	mov.u32 	%r1028, 25152;
	// begin inline asm
	prmt.b32 %r1025, %r1013, %r1019, %r1028;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1029, %r1016, %r1022, %r1028;
	// end inline asm
	shl.b32 	%r1036, %r1029, 4;
	mov.u32 	%r1034, 252645135;
	// begin inline asm
	lop3.b32 %r1033, %r1034, %r1025, %r1036, 202;
	// end inline asm
	add.s64 	%rd75, %rd134, %rd26;
	st.shared.u32 	[%rd75], %r1033;
	add.s64 	%rd76, %rd134, %rd25;
	ld.shared.u32 	%r2513, [%rd76];
	// begin inline asm
	mov.b32 %r1042, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1053, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1041, %r2513, -2004318072;
	// begin inline asm
	lop3.b32 %r1039, %r587, %r1041, %r1042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1043, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1044, %r1042, %r1043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1047, %r1039, %r1044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1050, %r598, %r1041, %r1053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1054, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1055, %r1053, %r1054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1058, %r1050, %r1055;
	// end inline asm
	shr.u32 	%r1063, %r1041, 8;
	// begin inline asm
	lop3.b32 %r1061, %r587, %r1063, %r1042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1065, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1066, %r1042, %r1065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1069, %r1061, %r1066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1072, %r598, %r1063, %r1053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1076, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1077, %r1053, %r1076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1080, %r1072, %r1077;
	// end inline asm
	// begin inline asm
	mov.b32 %r1088, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1099, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1087, %r2518, -2004318072;
	// begin inline asm
	lop3.b32 %r1085, %r587, %r1087, %r1088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1089, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1090, %r1088, %r1089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1093, %r1085, %r1090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1096, %r598, %r1087, %r1099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1100, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1101, %r1099, %r1100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1104, %r1096, %r1101;
	// end inline asm
	shr.u32 	%r1109, %r1087, 8;
	// begin inline asm
	lop3.b32 %r1107, %r587, %r1109, %r1088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1111, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1112, %r1088, %r1111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1115, %r1107, %r1112;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1118, %r598, %r1109, %r1099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1122, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1123, %r1099, %r1122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1126, %r1118, %r1123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r154, %r1093, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r154, %r1104, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r154, %r1115, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r154, %r1126, %r681;
	// end inline asm
	// begin inline asm
	mov.b32 %r1158, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1169, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1157, %r2495, -2004318072;
	// begin inline asm
	lop3.b32 %r1155, %r587, %r1157, %r1158, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1159, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1160, %r1158, %r1159;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1163, %r1155, %r1160;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1166, %r598, %r1157, %r1169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1170, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1171, %r1169, %r1170;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1174, %r1166, %r1171;
	// end inline asm
	shr.u32 	%r1179, %r1157, 8;
	// begin inline asm
	lop3.b32 %r1177, %r587, %r1179, %r1158, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1181, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1182, %r1158, %r1181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1185, %r1177, %r1182;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1188, %r598, %r1179, %r1169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1192, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1193, %r1169, %r1192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1196, %r1188, %r1193;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1199, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r1199, %r1163, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1205, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1207, %r1205, %r1174, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1211, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r1211, %r1185, %r1143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1217, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1219, %r1217, %r1196, %r1149;
	// end inline asm
	// begin inline asm
	mov.b32 %r1228, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1227, %r2499, -2004318072;
	// begin inline asm
	lop3.b32 %r1225, %r587, %r1227, %r1228, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1229, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1230, %r1228, %r1229;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1233, %r1225, %r1230;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1236, %r598, %r1227, %r1239, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1240, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1241, %r1239, %r1240;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1244, %r1236, %r1241;
	// end inline asm
	shr.u32 	%r1249, %r1227, 8;
	// begin inline asm
	lop3.b32 %r1247, %r587, %r1249, %r1228, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1251, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1252, %r1228, %r1251;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1255, %r1247, %r1252;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1258, %r598, %r1249, %r1239, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1262, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1263, %r1239, %r1262;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1266, %r1258, %r1263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1271, %r216, %r1233, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r216, %r1244, %r1207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1283, %r216, %r1255, %r1213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1289, %r216, %r1266, %r1219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1293, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1324, %r1293, %r1047, %r1271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1299, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1321, %r1299, %r1058, %r1277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1305, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1333, %r1305, %r1069, %r1283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1311, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1330, %r1311, %r1080, %r1289;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1317, %r253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1319, %r1317, %r1321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1322, %r250, %r1324, %r1319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1326, %r253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1328, %r1326, %r1330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1331, %r250, %r1333, %r1328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1335, %r253, %r1324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1338, %r250, %r1321, %r1335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1342, %r253, %r1333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1345, %r250, %r1330, %r1342;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1376, %r1373}, {%r256, %r262, %r259, %r265}, {%r1322, %r1338}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1385, %r1382}, {%r256, %r262, %r259, %r265}, {%r1331, %r1345}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1369, %r271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1371, %r1369, %r1373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1374, %r268, %r1376, %r1371;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1378, %r271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1380, %r1378, %r1382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1383, %r268, %r1385, %r1380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1387, %r271, %r1376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r268, %r1373, %r1387;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1394, %r271, %r1385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r268, %r1382, %r1394;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1401, %r1402}, {%r274, %r280, %r277, %r283}, {%r1374, %r1390}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1411, %r1412}, {%r274, %r280, %r277, %r283}, {%r1383, %r1397}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r47, %r1401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r47, %r1402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1427, %r47, %r1411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r47, %r1412;
	// end inline asm
	// begin inline asm
	mov.b32 %r1433, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1434, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1435, %r1421, %r1433;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1438, %r1435, %r1434;
	// end inline asm
	// begin inline asm
	mov.b32 %r1441, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1442, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1443, %r1424, %r1441;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1446, %r1443, %r1442;
	// end inline asm
	// begin inline asm
	mov.b32 %r1449, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1450, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1451, %r1427, %r1449;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1454, %r1451, %r1450;
	// end inline asm
	// begin inline asm
	mov.b32 %r1457, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1458, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1459, %r1430, %r1457;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1462, %r1459, %r1458;
	// end inline asm
	// begin inline asm
	mov.b32 %r1468, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1466, %r1438, %r1468;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1469, %r1446, %r1468;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1472, %r1454, %r1468;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1475, %r1462, %r1468;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1478, %r1466, %r1472, %r1028;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1482, %r1469, %r1475, %r1028;
	// end inline asm
	shl.b32 	%r1489, %r1482, 4;
	// begin inline asm
	lop3.b32 %r1486, %r1034, %r1478, %r1489, 202;
	// end inline asm
	add.s64 	%rd77, %rd134, %rd24;
	st.shared.u32 	[%rd77], %r1486;
	add.s64 	%rd78, %rd134, %rd23;
	ld.shared.u32 	%r2514, [%rd78];
	// begin inline asm
	mov.b32 %r1495, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1506, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1494, %r2514, -2004318072;
	// begin inline asm
	lop3.b32 %r1492, %r587, %r1494, %r1495, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1496, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1497, %r1495, %r1496;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1500, %r1492, %r1497;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1503, %r598, %r1494, %r1506, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1507, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1508, %r1506, %r1507;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1511, %r1503, %r1508;
	// end inline asm
	shr.u32 	%r1516, %r1494, 8;
	// begin inline asm
	lop3.b32 %r1514, %r587, %r1516, %r1495, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1518, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1519, %r1495, %r1518;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1522, %r1514, %r1519;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1525, %r598, %r1516, %r1506, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1529, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1530, %r1506, %r1529;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1533, %r1525, %r1530;
	// end inline asm
	// begin inline asm
	mov.b32 %r1541, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1552, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1540, %r2517, -2004318072;
	// begin inline asm
	lop3.b32 %r1538, %r587, %r1540, %r1541, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1542, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1543, %r1541, %r1542;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1546, %r1538, %r1543;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1549, %r598, %r1540, %r1552, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1553, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1554, %r1552, %r1553;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1557, %r1549, %r1554;
	// end inline asm
	shr.u32 	%r1562, %r1540, 8;
	// begin inline asm
	lop3.b32 %r1560, %r587, %r1562, %r1541, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1564, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1565, %r1541, %r1564;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1568, %r1560, %r1565;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1571, %r598, %r1562, %r1552, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1575, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1576, %r1552, %r1575;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1579, %r1571, %r1576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r154, %r1546, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r154, %r1557, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r154, %r1568, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r154, %r1579, %r681;
	// end inline asm
	// begin inline asm
	mov.b32 %r1611, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1622, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1610, %r2496, -2004318072;
	// begin inline asm
	lop3.b32 %r1608, %r587, %r1610, %r1611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1612, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1613, %r1611, %r1612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1616, %r1608, %r1613;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1619, %r598, %r1610, %r1622, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1623, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1624, %r1622, %r1623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1627, %r1619, %r1624;
	// end inline asm
	shr.u32 	%r1632, %r1610, 8;
	// begin inline asm
	lop3.b32 %r1630, %r587, %r1632, %r1611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1634, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1635, %r1611, %r1634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1638, %r1630, %r1635;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1641, %r598, %r1632, %r1622, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1645, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1646, %r1622, %r1645;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1649, %r1641, %r1646;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1652, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1652, %r1616, %r1584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1658, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1660, %r1658, %r1627, %r1590;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1664, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1666, %r1664, %r1638, %r1596;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1670, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r1670, %r1649, %r1602;
	// end inline asm
	// begin inline asm
	mov.b32 %r1681, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1692, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1680, %r2500, -2004318072;
	// begin inline asm
	lop3.b32 %r1678, %r587, %r1680, %r1681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1682, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1683, %r1681, %r1682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1686, %r1678, %r1683;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1689, %r598, %r1680, %r1692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1693, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1694, %r1692, %r1693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1697, %r1689, %r1694;
	// end inline asm
	shr.u32 	%r1702, %r1680, 8;
	// begin inline asm
	lop3.b32 %r1700, %r587, %r1702, %r1681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1704, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1705, %r1681, %r1704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1708, %r1700, %r1705;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1711, %r598, %r1702, %r1692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1715, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1716, %r1692, %r1715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1719, %r1711, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r216, %r1686, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r216, %r1697, %r1660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r216, %r1708, %r1666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r216, %r1719, %r1672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1746, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r1746, %r1500, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r1752, %r1511, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1758, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1758, %r1522, %r1736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1764, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r1764, %r1533, %r1742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1770, %r253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1772, %r1770, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r250, %r1777, %r1772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1779, %r253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1781, %r1779, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r250, %r1786, %r1781;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r253, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r250, %r1774, %r1788;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1795, %r253, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r250, %r1783, %r1795;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1829, %r1826}, {%r256, %r262, %r259, %r265}, {%r1775, %r1791}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1838, %r1835}, {%r256, %r262, %r259, %r265}, {%r1784, %r1798}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1822, %r271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1824, %r1822, %r1826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r268, %r1829, %r1824;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1831, %r271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1833, %r1831, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r268, %r1838, %r1833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1840, %r271, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r268, %r1826, %r1840;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1847, %r271, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1850, %r268, %r1835, %r1847;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1854, %r1855}, {%r274, %r280, %r277, %r283}, {%r1827, %r1843}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1864, %r1865}, {%r274, %r280, %r277, %r283}, {%r1836, %r1850}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r47, %r1854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r47, %r1855;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1880, %r47, %r1864;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1883, %r47, %r1865;
	// end inline asm
	// begin inline asm
	mov.b32 %r1886, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1887, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1888, %r1874, %r1886;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1891, %r1888, %r1887;
	// end inline asm
	// begin inline asm
	mov.b32 %r1894, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1895, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1896, %r1877, %r1894;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1899, %r1896, %r1895;
	// end inline asm
	// begin inline asm
	mov.b32 %r1902, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1903, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1904, %r1880, %r1902;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1907, %r1904, %r1903;
	// end inline asm
	// begin inline asm
	mov.b32 %r1910, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1911, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1912, %r1883, %r1910;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1915, %r1912, %r1911;
	// end inline asm
	// begin inline asm
	mov.b32 %r1921, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1919, %r1891, %r1921;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1922, %r1899, %r1921;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1925, %r1907, %r1921;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1928, %r1915, %r1921;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1931, %r1919, %r1925, %r1028;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1935, %r1922, %r1928, %r1028;
	// end inline asm
	shl.b32 	%r1942, %r1935, 4;
	// begin inline asm
	lop3.b32 %r1939, %r1034, %r1931, %r1942, 202;
	// end inline asm
	add.s64 	%rd79, %rd134, %rd22;
	st.shared.u32 	[%rd79], %r1939;
	add.s64 	%rd80, %rd134, %rd21;
	ld.shared.u32 	%r2515, [%rd80];
	// begin inline asm
	mov.b32 %r1948, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1959, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1947, %r2515, -2004318072;
	// begin inline asm
	lop3.b32 %r1945, %r587, %r1947, %r1948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1949, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1950, %r1948, %r1949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1953, %r1945, %r1950;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1956, %r598, %r1947, %r1959, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1960, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1961, %r1959, %r1960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1964, %r1956, %r1961;
	// end inline asm
	shr.u32 	%r1969, %r1947, 8;
	// begin inline asm
	lop3.b32 %r1967, %r587, %r1969, %r1948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1971, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1972, %r1948, %r1971;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1975, %r1967, %r1972;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1978, %r598, %r1969, %r1959, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1982, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1983, %r1959, %r1982;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1986, %r1978, %r1983;
	// end inline asm
	// begin inline asm
	mov.b32 %r1994, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r2005, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1993, %r2516, -2004318072;
	// begin inline asm
	lop3.b32 %r1991, %r587, %r1993, %r1994, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1995, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1996, %r1994, %r1995;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1999, %r1991, %r1996;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2002, %r598, %r1993, %r2005, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2006, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2007, %r2005, %r2006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2010, %r2002, %r2007;
	// end inline asm
	shr.u32 	%r2015, %r1993, 8;
	// begin inline asm
	lop3.b32 %r2013, %r587, %r2015, %r1994, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2017, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2018, %r1994, %r2017;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2021, %r2013, %r2018;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2024, %r598, %r2015, %r2005, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2028, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2029, %r2005, %r2028;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2032, %r2024, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r154, %r1999, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2043, %r154, %r2010, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r154, %r2021, %r681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r154, %r2032, %r681;
	// end inline asm
	// begin inline asm
	mov.b32 %r2064, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r2075, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r2063, %r2497, -2004318072;
	// begin inline asm
	lop3.b32 %r2061, %r587, %r2063, %r2064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2065, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2066, %r2064, %r2065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2069, %r2061, %r2066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2072, %r598, %r2063, %r2075, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2076, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2077, %r2075, %r2076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2080, %r2072, %r2077;
	// end inline asm
	shr.u32 	%r2085, %r2063, 8;
	// begin inline asm
	lop3.b32 %r2083, %r587, %r2085, %r2064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2087, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2088, %r2064, %r2087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2091, %r2083, %r2088;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2094, %r598, %r2085, %r2075, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2098, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2099, %r2075, %r2098;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2102, %r2094, %r2099;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2105, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2107, %r2105, %r2069, %r2037;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2111, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r2111, %r2080, %r2043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2117, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2119, %r2117, %r2091, %r2049;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2123, %r185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2125, %r2123, %r2102, %r2055;
	// end inline asm
	// begin inline asm
	mov.b32 %r2134, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r2145, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r2133, %r2501, -2004318072;
	// begin inline asm
	lop3.b32 %r2131, %r587, %r2133, %r2134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2135, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2136, %r2134, %r2135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2139, %r2131, %r2136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2142, %r598, %r2133, %r2145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2146, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2147, %r2145, %r2146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2150, %r2142, %r2147;
	// end inline asm
	shr.u32 	%r2155, %r2133, 8;
	// begin inline asm
	lop3.b32 %r2153, %r587, %r2155, %r2134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2157, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2158, %r2134, %r2157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2161, %r2153, %r2158;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2164, %r598, %r2155, %r2145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2168, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2169, %r2145, %r2168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2172, %r2164, %r2169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r216, %r2139, %r2107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2183, %r216, %r2150, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r216, %r2161, %r2119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2195, %r216, %r2172, %r2125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r2199, %r1953, %r2177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2205, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r2205, %r1964, %r2183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2211, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r2211, %r1975, %r2189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r2217, %r1986, %r2195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2223, %r253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2225, %r2223, %r2227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2228, %r250, %r2230, %r2225;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2232, %r253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2234, %r2232, %r2236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2237, %r250, %r2239, %r2234;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2241, %r253, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2244, %r250, %r2227, %r2241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2248, %r253, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2251, %r250, %r2236, %r2248;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2282, %r2279}, {%r256, %r262, %r259, %r265}, {%r2228, %r2244}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2291, %r2288}, {%r256, %r262, %r259, %r265}, {%r2237, %r2251}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2275, %r271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2277, %r2275, %r2279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2280, %r268, %r2282, %r2277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2284, %r271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2286, %r2284, %r2288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2289, %r268, %r2291, %r2286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2293, %r271, %r2282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2296, %r268, %r2279, %r2293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2300, %r271, %r2291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2303, %r268, %r2288, %r2300;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2307, %r2308}, {%r274, %r280, %r277, %r283}, {%r2280, %r2296}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2317, %r2318}, {%r274, %r280, %r277, %r283}, {%r2289, %r2303}, {%r681, %r681};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2327, %r47, %r2307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2330, %r47, %r2308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2333, %r47, %r2317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2336, %r47, %r2318;
	// end inline asm
	// begin inline asm
	mov.b32 %r2339, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r2340, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2341, %r2327, %r2339;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2344, %r2341, %r2340;
	// end inline asm
	// begin inline asm
	mov.b32 %r2347, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r2348, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2349, %r2330, %r2347;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2352, %r2349, %r2348;
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r2356, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2357, %r2333, %r2355;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2360, %r2357, %r2356;
	// end inline asm
	// begin inline asm
	mov.b32 %r2363, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r2364, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2365, %r2336, %r2363;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2368, %r2365, %r2364;
	// end inline asm
	// begin inline asm
	mov.b32 %r2374, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2344, %r2374;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2352, %r2374;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2378, %r2360, %r2374;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2381, %r2368, %r2374;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2384, %r2372, %r2378, %r1028;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2388, %r2375, %r2381, %r1028;
	// end inline asm
	shl.b32 	%r2395, %r2388, 4;
	// begin inline asm
	lop3.b32 %r2392, %r1034, %r2384, %r2395, 202;
	// end inline asm
	add.s64 	%rd81, %rd134, %rd20;
	st.shared.u32 	[%rd81], %r2392;
	add.s32 	%r2507, %r2507, -64;
	add.s64 	%rd134, %rd134, 8324;
	setp.eq.s32 	%p167, %r2507, 0;
	mov.u32 	%r2508, %r2501;
	mov.u32 	%r2509, %r2500;
	mov.u32 	%r2510, %r2499;
	mov.u32 	%r2511, %r2498;
	mov.u32 	%r2516, %r2497;
	mov.u32 	%r2517, %r2496;
	mov.u32 	%r2518, %r2495;
	mov.u32 	%r2519, %r2494;
	@%p167 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;
$L__BB0_33:                             // %guard_exit10925
                                        //   in Loop: Header=BB0_31 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2401, [%rd6];
	ld.shared.u32 	%r2402, [%rd7+128];
	ld.shared.u32 	%r2409, [%rd7+4];
	ld.shared.u32 	%r2410, [%rd7+132];
	ld.shared.u32 	%r2417, [%rd6+8324];
	ld.shared.u32 	%r2418, [%rd7+8452];
	ld.shared.u32 	%r2425, [%rd7+8328];
	ld.shared.u32 	%r2426, [%rd7+8456];
	ld.shared.u32 	%r2433, [%rd6+16648];
	ld.shared.u32 	%r2434, [%rd7+16776];
	ld.shared.u32 	%r2441, [%rd7+16652];
	ld.shared.u32 	%r2442, [%rd7+16780];
	ld.shared.u32 	%r2449, [%rd6+24972];
	ld.shared.u32 	%r2450, [%rd7+25100];
	ld.shared.u32 	%r2457, [%rd7+24976];
	ld.shared.u32 	%r2458, [%rd7+25104];
	// begin inline asm
	prmt.b32 %r2396, %r2401, %r2402, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2400, %r2401, %r2402, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2404, %r2409, %r2410, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2408, %r2409, %r2410, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2412, %r2417, %r2418, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2416, %r2417, %r2418, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2420, %r2425, %r2426, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2424, %r2425, %r2426, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2428, %r2433, %r2434, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2432, %r2433, %r2434, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2436, %r2441, %r2442, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2440, %r2441, %r2442, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2444, %r2449, %r2450, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2448, %r2449, %r2450, %r500;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2452, %r2457, %r2458, %r496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2456, %r2457, %r2458, %r500;
	// end inline asm
	selp.b32 	%r2460, %r2400, %r2396, %p154;
	shfl.sync.bfly.b32	%r79, %r2460, 8, 31, -1;
	selp.b32 	%r2461, %r2408, %r2404, %p154;
	shfl.sync.bfly.b32	%r80, %r2461, 8, 31, -1;
	selp.b32 	%r2462, %r2416, %r2412, %p154;
	shfl.sync.bfly.b32	%r2463, %r2462, 8, 31, -1;
	selp.b32 	%r2464, %r2424, %r2420, %p154;
	shfl.sync.bfly.b32	%r2465, %r2464, 8, 31, -1;
	selp.b32 	%r2466, %r2432, %r2428, %p154;
	shfl.sync.bfly.b32	%r2467, %r2466, 8, 31, -1;
	selp.b32 	%r2468, %r2440, %r2436, %p154;
	shfl.sync.bfly.b32	%r2469, %r2468, 8, 31, -1;
	selp.b32 	%r2470, %r2448, %r2444, %p154;
	shfl.sync.bfly.b32	%r2471, %r2470, 8, 31, -1;
	selp.b32 	%r2472, %r2456, %r2452, %p154;
	shfl.sync.bfly.b32	%r2473, %r2472, 8, 31, -1;
	and.b32  	%r2474, %r37, 32512;
	setp.eq.s32 	%p169, %r2474, 0;
	shl.b32 	%r2493, %r37, 10;
	@%p169 bra 	$L__BB0_35;
// %bb.34:                              // %pass10100
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r2475, %r80, %r2408, %p154;
	selp.b32 	%r2476, %r2404, %r80, %p154;
	selp.b32 	%r2477, %r79, %r2400, %p154;
	selp.b32 	%r2478, %r2396, %r79, %p154;
	or.b32  	%r2480, %r2493, %r24;
	cvt.s64.s32 	%rd82, %r2480;
	add.s64 	%rd83, %rd82, %rd8;
	shr.u64 	%rd84, %rd83, 39;
	add.s64 	%rd85, %rd83, %rd84;
	shr.s64 	%rd86, %rd85, 25;
	setp.lt.s64 	%p171, %rd83, 0;
	and.b64  	%rd87, %rd85, -33554432;
	setp.ne.s64 	%p172, %rd87, %rd83;
	and.pred  	%p173, %p171, %p172;
	selp.u64 	%rd88, 1, 0, %p173;
	sub.s64 	%rd89, %rd88, %rd86;
	shl.b64 	%rd90, %rd89, 25;
	add.s64 	%rd91, %rd90, %rd83;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd93, %rd3, %rd92;
	st.global.v4.u32 	[%rd93], {%r2478, %r2476, %r2477, %r2475};
$L__BB0_35:                             // %pass10113
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r73, %r37, 64;
	setp.lt.u32 	%p174, %r73, 192;
	@%p174 bra 	$L__BB0_37;
// %bb.36:                              // %pass10207
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r81, %r2412, %r2463, %p154;
	selp.b32 	%r82, %r2463, %r2416, %p154;
	selp.b32 	%r83, %r2420, %r2465, %p154;
	selp.b32 	%r84, %r2465, %r2424, %p154;
	shl.b32 	%r2481, %r73, 10;
	or.b32  	%r2482, %r2481, %r24;
	cvt.s64.s32 	%rd94, %r2482;
	add.s64 	%rd95, %rd94, %rd8;
	shr.u64 	%rd96, %rd95, 39;
	add.s64 	%rd97, %rd95, %rd96;
	shr.s64 	%rd98, %rd97, 25;
	setp.lt.s64 	%p175, %rd95, 0;
	and.b64  	%rd99, %rd97, -33554432;
	setp.ne.s64 	%p176, %rd99, %rd95;
	and.pred  	%p177, %p175, %p176;
	selp.u64 	%rd100, 1, 0, %p177;
	sub.s64 	%rd101, %rd100, %rd98;
	shl.b64 	%rd102, %rd101, 25;
	add.s64 	%rd103, %rd102, %rd95;
	shl.b64 	%rd104, %rd103, 2;
	add.s64 	%rd105, %rd3, %rd104;
	st.global.v4.u32 	[%rd105], {%r81, %r83, %r82, %r84};
$L__BB0_37:                             // %pass10220
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r74, %r37, 128;
	selp.b32 	%r89, %r2444, %r2471, %p154;
	selp.b32 	%r90, %r2471, %r2448, %p154;
	selp.b32 	%r91, %r2452, %r2473, %p154;
	selp.b32 	%r92, %r2473, %r2456, %p154;
	setp.lt.u32 	%p178, %r74, 192;
	@%p178 bra 	$L__BB0_39;
// %bb.38:                              // %pass10314
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r85, %r2428, %r2467, %p154;
	selp.b32 	%r86, %r2467, %r2432, %p154;
	selp.b32 	%r87, %r2436, %r2469, %p154;
	selp.b32 	%r88, %r2469, %r2440, %p154;
	shl.b32 	%r2483, %r74, 10;
	or.b32  	%r2484, %r2483, %r24;
	cvt.s64.s32 	%rd106, %r2484;
	add.s64 	%rd107, %rd106, %rd8;
	shr.u64 	%rd108, %rd107, 39;
	add.s64 	%rd109, %rd107, %rd108;
	shr.s64 	%rd110, %rd109, 25;
	setp.lt.s64 	%p179, %rd107, 0;
	and.b64  	%rd111, %rd109, -33554432;
	setp.ne.s64 	%p180, %rd111, %rd107;
	and.pred  	%p181, %p179, %p180;
	selp.u64 	%rd112, 1, 0, %p181;
	sub.s64 	%rd113, %rd112, %rd110;
	shl.b64 	%rd114, %rd113, 25;
	add.s64 	%rd115, %rd114, %rd107;
	shl.b64 	%rd116, %rd115, 2;
	add.s64 	%rd117, %rd3, %rd116;
	st.global.v4.u32 	[%rd117], {%r85, %r87, %r86, %r88};
	bra.uni 	$L__BB0_39;
$L__BB0_40:                             // %L23132
	st.global.u32 	[%rd5], %r2492;
	ret;
$L__BB0_9:                              // %L180
	mov.u32 	%r2491, 2;
	st.global.u32 	[%rd5], %r2491;
	mov.u64 	%rd132, exception2065;
	cvta.global.u64 	%rd133, %rd132;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd133;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r93;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L288
	mov.u32 	%r2490, 3;
	st.global.u32 	[%rd5], %r2490;
	mov.u64 	%rd130, exception2065;
	cvta.global.u64 	%rd131, %rd130;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd131;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r93;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r93;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd33, exception1;
	cvta.global.u64 	%rd34, %rd33;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd34;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r93;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
