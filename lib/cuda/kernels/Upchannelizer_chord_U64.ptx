// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan64(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2065[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<186>;
	.reg .b16 	%rs<272>;
	.reg .b32 	%r<2544>;
	.reg .f32 	%f<721>;
	.reg .b64 	%rd<153>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r102, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd37, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r109, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r109, 33407;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r110, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r110, 33407;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r103, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd4, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r111, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r112, %r111, %r1;
	or.b32  	%r113, %r112, %r4;
	mul.wide.u32 	%rd42, %r113, 4;
	add.s64 	%rd5, %rd4, %rd42;
	mov.u32 	%r114, 1;
	st.global.u32 	[%rd5], %r114;
	setp.gt.u32 	%p3, %r103, 32767;
	@%p3 bra 	$L__BB0_9;
// %bb.5:                               // %L131
	ld.param.u32 	%r104, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r104, %r103;
	setp.gt.s32 	%p5, %r104, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_9;
// %bb.6:                               // %L138
	ld.param.u32 	%r105, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r115, %r104, %r103;
	and.b32  	%r116, %r115, 255;
	setp.ne.s32 	%p7, %r116, 0;
	setp.gt.u32 	%p8, %r105, 511;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_9;
// %bb.7:                               // %L149
	ld.param.u32 	%r106, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p10, %r106, %r105;
	setp.gt.s32 	%p11, %r106, 1023;
	or.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_9;
// %bb.8:                               // %L156
	not.b32 	%r117, %r105;
	add.s32 	%r118, %r117, %r106;
	and.b32  	%r119, %r118, 3;
	setp.eq.s32 	%p13, %r119, 0;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L269
	ld.param.u32 	%r107, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r107, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.11:                              // %L271
	ld.param.u32 	%r108, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p15, %r107, %r108;
	setp.lt.s32 	%p16, %r108, 49;
	and.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;
$L__BB0_13:                             // %pass141
	bfe.u32 	%r57, %r1, 2, 1;
	shr.u32 	%r58, %r1, 4;
	shl.b32 	%r127, %r58, 1;
	shl.b32 	%r128, %r57, 2;
	shl.b32 	%r59, %r1, 3;
	and.b32  	%r129, %r59, 24;
	or.b32  	%r130, %r128, %r129;
	or.b32  	%r131, %r127, %r130;
	bfe.u32 	%r132, %r1, 3, 1;
	or.b32  	%r61, %r132, %r131;
	shl.b32 	%r62, %r61, 1;
	or.b32  	%r133, %r62, -255;
	cvt.rn.f32.s32 	%f46, %r133;
	mov.f32 	%f47, 0f44008000;
	div.approx.f32 	%f42, %f46, %f47;
	mov.f32 	%f71, 0f00000000;
	mul.f32 	%f44, %f42, 0f40800000;
	setp.neu.f32 	%p23, %f44, 0f00000000;
	mov.f32 	%f720, 0f3F800000;
	mov.f32 	%f713, %f720;
	@%p23 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_15;
$L__BB0_14:                             // %L606
	add.f32 	%f74, %f44, %f44;
	mov.b32 	%r141, %f74;
	and.b32  	%r142, %r141, -2147483648;
	or.b32  	%r143, %r142, 1056964608;
	mov.b32 	%f75, %r143;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p24, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p24;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p25, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p25;
	cvt.rzi.s32.f32 	%r144, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f44;
	mul.f32 	%f83, %f82, %f82;
	fma.rn.f32 	%f84, %f83, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f85, %f83, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f86, %f84, %f83, 0fC0A55DF6;
	fma.rn.f32 	%f87, %f85, %f83, 0f4081E0CF;
	fma.rn.f32 	%f88, %f83, %f82, 0f00000000;
	fma.rn.f32 	%f89, %f87, %f83, 0fC09DE9E6;
	fma.rn.f32 	%f90, %f86, %f88, 0f00000000;
	fma.rn.f32 	%f91, %f89, %f83, 0f3F800000;
	fma.rn.f32 	%f92, %f82, 0f40490FDB, %f90;
	and.b32  	%r145, %r144, 1;
	setp.eq.b32 	%p26, %r145, 1;
	selp.f32 	%f93, %f91, %f92, %p26;
	and.b32  	%r146, %r144, 2;
	setp.eq.s32 	%p27, %r146, 0;
	sub.f32 	%f95, %f71, %f93;
	selp.f32 	%f96, %f93, %f95, %p27;
	cvt.rzi.f32.f32 	%f97, %f44;
	setp.eq.f32 	%p28, %f44, %f97;
	mul.f32 	%f98, %f44, 0f00000000;
	selp.f32 	%f99, %f98, %f96, %p28;
	mul.f32 	%f100, %f42, 0f41490FDB;
	div.approx.f32 	%f713, %f99, %f100;
$L__BB0_15:                             // %L610
	or.b32  	%r147, %r62, -191;
	cvt.rn.f32.s32 	%f104, %r147;
	div.approx.f32 	%f4, %f104, %f47;
	mul.f32 	%f6, %f4, 0f40800000;
	setp.eq.f32 	%p34, %f6, 0f00000000;
	mov.f32 	%f714, %f720;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L624
	add.f32 	%f132, %f6, %f6;
	mov.b32 	%r155, %f132;
	and.b32  	%r156, %r155, -2147483648;
	or.b32  	%r157, %r156, 1056964608;
	mov.b32 	%f133, %r157;
	add.f32 	%f134, %f132, %f133;
	cvt.rzi.f32.f32 	%f135, %f134;
	abs.f32 	%f136, %f132;
	setp.gt.f32 	%p35, %f136, 0f4B000000;
	selp.f32 	%f137, %f132, %f135, %p35;
	cvt.rzi.f32.f32 	%f138, %f132;
	setp.lt.f32 	%p36, %f136, 0f3F000000;
	selp.f32 	%f139, %f138, %f137, %p36;
	cvt.rzi.s32.f32 	%r158, %f139;
	fma.rn.f32 	%f140, %f139, 0fBF000000, %f6;
	mul.f32 	%f141, %f140, %f140;
	fma.rn.f32 	%f142, %f141, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f143, %f141, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f144, %f142, %f141, 0fC0A55DF6;
	fma.rn.f32 	%f145, %f143, %f141, 0f4081E0CF;
	fma.rn.f32 	%f146, %f141, %f140, 0f00000000;
	fma.rn.f32 	%f147, %f145, %f141, 0fC09DE9E6;
	fma.rn.f32 	%f148, %f144, %f146, 0f00000000;
	fma.rn.f32 	%f149, %f147, %f141, 0f3F800000;
	fma.rn.f32 	%f150, %f140, 0f40490FDB, %f148;
	and.b32  	%r159, %r158, 1;
	setp.eq.b32 	%p37, %r159, 1;
	selp.f32 	%f151, %f149, %f150, %p37;
	and.b32  	%r160, %r158, 2;
	setp.eq.s32 	%p38, %r160, 0;
	sub.f32 	%f153, %f71, %f151;
	selp.f32 	%f154, %f151, %f153, %p38;
	cvt.rzi.f32.f32 	%f155, %f6;
	setp.eq.f32 	%p39, %f6, %f155;
	mul.f32 	%f156, %f6, 0f00000000;
	selp.f32 	%f157, %f156, %f154, %p39;
	mul.f32 	%f158, %f4, 0f41490FDB;
	div.approx.f32 	%f714, %f157, %f158;
$L__BB0_17:                             // %L628
	or.b32  	%r164, %r62, -127;
	cvt.rn.f32.s32 	%f163, %r164;
	div.approx.f32 	%f9, %f163, %f47;
	mul.f32 	%f11, %f9, 0f40800000;
	setp.eq.f32 	%p45, %f11, 0f00000000;
	mov.f32 	%f715, %f720;
	@%p45 bra 	$L__BB0_19;
// %bb.18:                              // %L704
	add.f32 	%f191, %f11, %f11;
	mov.b32 	%r172, %f191;
	and.b32  	%r173, %r172, -2147483648;
	or.b32  	%r174, %r173, 1056964608;
	mov.b32 	%f192, %r174;
	add.f32 	%f193, %f191, %f192;
	cvt.rzi.f32.f32 	%f194, %f193;
	abs.f32 	%f195, %f191;
	setp.gt.f32 	%p46, %f195, 0f4B000000;
	selp.f32 	%f196, %f191, %f194, %p46;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p47, %f195, 0f3F000000;
	selp.f32 	%f198, %f197, %f196, %p47;
	cvt.rzi.s32.f32 	%r175, %f198;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f11;
	mul.f32 	%f200, %f199, %f199;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	and.b32  	%r176, %r175, 1;
	setp.eq.b32 	%p48, %r176, 1;
	selp.f32 	%f210, %f208, %f209, %p48;
	and.b32  	%r177, %r175, 2;
	setp.eq.s32 	%p49, %r177, 0;
	sub.f32 	%f212, %f71, %f210;
	selp.f32 	%f213, %f210, %f212, %p49;
	cvt.rzi.f32.f32 	%f214, %f11;
	setp.eq.f32 	%p50, %f11, %f214;
	mul.f32 	%f215, %f11, 0f00000000;
	selp.f32 	%f216, %f215, %f213, %p50;
	mul.f32 	%f217, %f9, 0f41490FDB;
	div.approx.f32 	%f715, %f216, %f217;
$L__BB0_19:                             // %L708
	or.b32  	%r178, %r62, -63;
	cvt.rn.f32.s32 	%f221, %r178;
	div.approx.f32 	%f15, %f221, %f47;
	mul.f32 	%f17, %f15, 0f40800000;
	setp.eq.f32 	%p56, %f17, 0f00000000;
	mov.f32 	%f716, %f720;
	@%p56 bra 	$L__BB0_21;
// %bb.20:                              // %L722
	add.f32 	%f249, %f17, %f17;
	mov.b32 	%r186, %f249;
	and.b32  	%r187, %r186, -2147483648;
	or.b32  	%r188, %r187, 1056964608;
	mov.b32 	%f250, %r188;
	add.f32 	%f251, %f249, %f250;
	cvt.rzi.f32.f32 	%f252, %f251;
	abs.f32 	%f253, %f249;
	setp.gt.f32 	%p57, %f253, 0f4B000000;
	selp.f32 	%f254, %f249, %f252, %p57;
	cvt.rzi.f32.f32 	%f255, %f249;
	setp.lt.f32 	%p58, %f253, 0f3F000000;
	selp.f32 	%f256, %f255, %f254, %p58;
	cvt.rzi.s32.f32 	%r189, %f256;
	fma.rn.f32 	%f257, %f256, 0fBF000000, %f17;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f260, %f258, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f261, %f259, %f258, 0fC0A55DF6;
	fma.rn.f32 	%f262, %f260, %f258, 0f4081E0CF;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f262, %f258, 0fC09DE9E6;
	fma.rn.f32 	%f265, %f261, %f263, 0f00000000;
	fma.rn.f32 	%f266, %f264, %f258, 0f3F800000;
	fma.rn.f32 	%f267, %f257, 0f40490FDB, %f265;
	and.b32  	%r190, %r189, 1;
	setp.eq.b32 	%p59, %r190, 1;
	selp.f32 	%f268, %f266, %f267, %p59;
	and.b32  	%r191, %r189, 2;
	setp.eq.s32 	%p60, %r191, 0;
	sub.f32 	%f270, %f71, %f268;
	selp.f32 	%f271, %f268, %f270, %p60;
	cvt.rzi.f32.f32 	%f272, %f17;
	setp.eq.f32 	%p61, %f17, %f272;
	mul.f32 	%f273, %f17, 0f00000000;
	selp.f32 	%f274, %f273, %f271, %p61;
	mul.f32 	%f275, %f15, 0f41490FDB;
	div.approx.f32 	%f716, %f274, %f275;
$L__BB0_21:                             // %L726
	or.b32  	%r195, %r62, 1;
	cvt.rn.f32.s32 	%f280, %r195;
	div.approx.f32 	%f20, %f280, %f47;
	mul.f32 	%f22, %f20, 0f40800000;
	setp.eq.f32 	%p67, %f22, 0f00000000;
	mov.f32 	%f717, %f720;
	@%p67 bra 	$L__BB0_23;
// %bb.22:                              // %L802
	add.f32 	%f308, %f22, %f22;
	mov.b32 	%r203, %f308;
	and.b32  	%r204, %r203, -2147483648;
	or.b32  	%r205, %r204, 1056964608;
	mov.b32 	%f309, %r205;
	add.f32 	%f310, %f308, %f309;
	cvt.rzi.f32.f32 	%f311, %f310;
	abs.f32 	%f312, %f308;
	setp.gt.f32 	%p68, %f312, 0f4B000000;
	selp.f32 	%f313, %f308, %f311, %p68;
	cvt.rzi.f32.f32 	%f314, %f308;
	setp.lt.f32 	%p69, %f312, 0f3F000000;
	selp.f32 	%f315, %f314, %f313, %p69;
	cvt.rzi.s32.f32 	%r206, %f315;
	fma.rn.f32 	%f316, %f315, 0fBF000000, %f22;
	mul.f32 	%f317, %f316, %f316;
	fma.rn.f32 	%f318, %f317, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f319, %f317, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f320, %f318, %f317, 0fC0A55DF6;
	fma.rn.f32 	%f321, %f319, %f317, 0f4081E0CF;
	fma.rn.f32 	%f322, %f317, %f316, 0f00000000;
	fma.rn.f32 	%f323, %f321, %f317, 0fC09DE9E6;
	fma.rn.f32 	%f324, %f320, %f322, 0f00000000;
	fma.rn.f32 	%f325, %f323, %f317, 0f3F800000;
	fma.rn.f32 	%f326, %f316, 0f40490FDB, %f324;
	and.b32  	%r207, %r206, 1;
	setp.eq.b32 	%p70, %r207, 1;
	selp.f32 	%f327, %f325, %f326, %p70;
	and.b32  	%r208, %r206, 2;
	setp.eq.s32 	%p71, %r208, 0;
	sub.f32 	%f329, %f71, %f327;
	selp.f32 	%f330, %f327, %f329, %p71;
	cvt.rzi.f32.f32 	%f331, %f22;
	setp.eq.f32 	%p72, %f22, %f331;
	mul.f32 	%f332, %f22, 0f00000000;
	selp.f32 	%f333, %f332, %f330, %p72;
	mul.f32 	%f334, %f20, 0f41490FDB;
	div.approx.f32 	%f717, %f333, %f334;
$L__BB0_23:                             // %L806
	or.b32  	%r209, %r62, 65;
	cvt.rn.f32.s32 	%f338, %r209;
	div.approx.f32 	%f26, %f338, %f47;
	mul.f32 	%f28, %f26, 0f40800000;
	setp.eq.f32 	%p78, %f28, 0f00000000;
	mov.f32 	%f718, %f720;
	@%p78 bra 	$L__BB0_25;
// %bb.24:                              // %L820
	add.f32 	%f366, %f28, %f28;
	mov.b32 	%r217, %f366;
	and.b32  	%r218, %r217, -2147483648;
	or.b32  	%r219, %r218, 1056964608;
	mov.b32 	%f367, %r219;
	add.f32 	%f368, %f366, %f367;
	cvt.rzi.f32.f32 	%f369, %f368;
	abs.f32 	%f370, %f366;
	setp.gt.f32 	%p79, %f370, 0f4B000000;
	selp.f32 	%f371, %f366, %f369, %p79;
	cvt.rzi.f32.f32 	%f372, %f366;
	setp.lt.f32 	%p80, %f370, 0f3F000000;
	selp.f32 	%f373, %f372, %f371, %p80;
	cvt.rzi.s32.f32 	%r220, %f373;
	fma.rn.f32 	%f374, %f373, 0fBF000000, %f28;
	mul.f32 	%f375, %f374, %f374;
	fma.rn.f32 	%f376, %f375, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f377, %f375, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f378, %f376, %f375, 0fC0A55DF6;
	fma.rn.f32 	%f379, %f377, %f375, 0f4081E0CF;
	fma.rn.f32 	%f380, %f375, %f374, 0f00000000;
	fma.rn.f32 	%f381, %f379, %f375, 0fC09DE9E6;
	fma.rn.f32 	%f382, %f378, %f380, 0f00000000;
	fma.rn.f32 	%f383, %f381, %f375, 0f3F800000;
	fma.rn.f32 	%f384, %f374, 0f40490FDB, %f382;
	and.b32  	%r221, %r220, 1;
	setp.eq.b32 	%p81, %r221, 1;
	selp.f32 	%f385, %f383, %f384, %p81;
	and.b32  	%r222, %r220, 2;
	setp.eq.s32 	%p82, %r222, 0;
	sub.f32 	%f387, %f71, %f385;
	selp.f32 	%f388, %f385, %f387, %p82;
	cvt.rzi.f32.f32 	%f389, %f28;
	setp.eq.f32 	%p83, %f28, %f389;
	mul.f32 	%f390, %f28, 0f00000000;
	selp.f32 	%f391, %f390, %f388, %p83;
	mul.f32 	%f392, %f26, 0f41490FDB;
	div.approx.f32 	%f718, %f391, %f392;
$L__BB0_25:                             // %L824
	or.b32  	%r226, %r62, 129;
	cvt.rn.f32.s32 	%f397, %r226;
	div.approx.f32 	%f31, %f397, %f47;
	mul.f32 	%f33, %f31, 0f40800000;
	setp.eq.f32 	%p89, %f33, 0f00000000;
	mov.f32 	%f719, %f720;
	@%p89 bra 	$L__BB0_27;
// %bb.26:                              // %L900
	add.f32 	%f425, %f33, %f33;
	mov.b32 	%r234, %f425;
	and.b32  	%r235, %r234, -2147483648;
	or.b32  	%r236, %r235, 1056964608;
	mov.b32 	%f426, %r236;
	add.f32 	%f427, %f425, %f426;
	cvt.rzi.f32.f32 	%f428, %f427;
	abs.f32 	%f429, %f425;
	setp.gt.f32 	%p90, %f429, 0f4B000000;
	selp.f32 	%f430, %f425, %f428, %p90;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p91, %f429, 0f3F000000;
	selp.f32 	%f432, %f431, %f430, %p91;
	cvt.rzi.s32.f32 	%r237, %f432;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f33;
	mul.f32 	%f434, %f433, %f433;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	and.b32  	%r238, %r237, 1;
	setp.eq.b32 	%p92, %r238, 1;
	selp.f32 	%f444, %f442, %f443, %p92;
	and.b32  	%r239, %r237, 2;
	setp.eq.s32 	%p93, %r239, 0;
	sub.f32 	%f446, %f71, %f444;
	selp.f32 	%f447, %f444, %f446, %p93;
	cvt.rzi.f32.f32 	%f448, %f33;
	setp.eq.f32 	%p94, %f33, %f448;
	mul.f32 	%f449, %f33, 0f00000000;
	selp.f32 	%f450, %f449, %f447, %p94;
	mul.f32 	%f451, %f31, 0f41490FDB;
	div.approx.f32 	%f719, %f450, %f451;
$L__BB0_27:                             // %L904
	or.b32  	%r240, %r62, 193;
	cvt.rn.f32.s32 	%f455, %r240;
	div.approx.f32 	%f37, %f455, %f47;
	mul.f32 	%f39, %f37, 0f40800000;
	setp.eq.f32 	%p100, %f39, 0f00000000;
	@%p100 bra 	$L__BB0_29;
// %bb.28:                              // %L918
	add.f32 	%f483, %f39, %f39;
	mov.b32 	%r248, %f483;
	and.b32  	%r249, %r248, -2147483648;
	or.b32  	%r250, %r249, 1056964608;
	mov.b32 	%f484, %r250;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p101, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p101;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p102, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p102;
	cvt.rzi.s32.f32 	%r251, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f39;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r252, %r251, 1;
	setp.eq.b32 	%p103, %r252, 1;
	selp.f32 	%f502, %f500, %f501, %p103;
	and.b32  	%r253, %r251, 2;
	setp.eq.s32 	%p104, %r253, 0;
	sub.f32 	%f504, %f71, %f502;
	selp.f32 	%f505, %f502, %f504, %p104;
	cvt.rzi.f32.f32 	%f506, %f39;
	setp.eq.f32 	%p105, %f39, %f506;
	mul.f32 	%f507, %f39, 0f00000000;
	selp.f32 	%f508, %f507, %f505, %p105;
	mul.f32 	%f509, %f37, 0f41490FDB;
	div.approx.f32 	%f720, %f508, %f509;
$L__BB0_29:                             // %L922
	setp.le.s32 	%p148, %r104, %r103;
	mov.u32 	%r2516, 0;
	@%p148 bra 	$L__BB0_40;
// %bb.30:                              // %L1517.lr.ph
	abs.f32 	%f48, %f42;
	abs.f32 	%f106, %f4;
	abs.f32 	%f165, %f9;
	abs.f32 	%f223, %f15;
	abs.f32 	%f282, %f20;
	abs.f32 	%f340, %f26;
	setp.gt.f32 	%p18, %f48, 0f4B800000;
	mul.f32 	%f49, %f42, 0f00000000;
	setp.gt.f32 	%p29, %f106, 0f4B800000;
	mul.f32 	%f107, %f4, 0f00000000;
	setp.gt.f32 	%p40, %f165, 0f4B800000;
	mul.f32 	%f166, %f9, 0f00000000;
	setp.gt.f32 	%p51, %f223, 0f4B800000;
	mul.f32 	%f224, %f15, 0f00000000;
	setp.gt.f32 	%p62, %f282, 0f4B800000;
	mul.f32 	%f283, %f20, 0f00000000;
	setp.gt.f32 	%p73, %f340, 0f4B800000;
	mul.f32 	%f341, %f26, 0f00000000;
	abs.f32 	%f399, %f31;
	selp.f32 	%f50, %f49, %f42, %p18;
	selp.f32 	%f108, %f107, %f4, %p29;
	selp.f32 	%f167, %f166, %f9, %p40;
	selp.f32 	%f225, %f224, %f15, %p51;
	selp.f32 	%f284, %f283, %f20, %p62;
	selp.f32 	%f342, %f341, %f26, %p73;
	setp.gt.f32 	%p84, %f399, 0f4B800000;
	mul.f32 	%f400, %f31, 0f00000000;
	add.f32 	%f51, %f50, %f50;
	add.f32 	%f109, %f108, %f108;
	add.f32 	%f168, %f167, %f167;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f285, %f284, %f284;
	add.f32 	%f343, %f342, %f342;
	selp.f32 	%f401, %f400, %f31, %p84;
	abs.f32 	%f457, %f37;
	mov.b32 	%r134, %f51;
	mov.b32 	%r148, %f109;
	mov.b32 	%r165, %f168;
	mov.b32 	%r179, %f226;
	mov.b32 	%r196, %f285;
	mov.b32 	%r210, %f343;
	add.f32 	%f402, %f401, %f401;
	setp.gt.f32 	%p95, %f457, 0f4B800000;
	mul.f32 	%f458, %f37, 0f00000000;
	and.b32  	%r135, %r134, -2147483648;
	and.b32  	%r149, %r148, -2147483648;
	and.b32  	%r166, %r165, -2147483648;
	and.b32  	%r180, %r179, -2147483648;
	and.b32  	%r197, %r196, -2147483648;
	and.b32  	%r211, %r210, -2147483648;
	mov.b32 	%r227, %f402;
	selp.f32 	%f459, %f458, %f37, %p95;
	or.b32  	%r136, %r135, 1056964608;
	or.b32  	%r150, %r149, 1056964608;
	or.b32  	%r167, %r166, 1056964608;
	or.b32  	%r181, %r180, 1056964608;
	or.b32  	%r198, %r197, 1056964608;
	or.b32  	%r212, %r211, 1056964608;
	and.b32  	%r228, %r227, -2147483648;
	add.f32 	%f460, %f459, %f459;
	mov.b32 	%f52, %r136;
	mov.b32 	%f110, %r150;
	mov.b32 	%f169, %r167;
	mov.b32 	%f227, %r181;
	mov.b32 	%f286, %r198;
	mov.b32 	%f344, %r212;
	or.b32  	%r229, %r228, 1056964608;
	mov.b32 	%r241, %f460;
	add.f32 	%f53, %f51, %f52;
	abs.f32 	%f55, %f51;
	add.f32 	%f111, %f109, %f110;
	abs.f32 	%f113, %f109;
	add.f32 	%f170, %f168, %f169;
	abs.f32 	%f172, %f168;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f287, %f285, %f286;
	abs.f32 	%f289, %f285;
	add.f32 	%f345, %f343, %f344;
	abs.f32 	%f347, %f343;
	mov.b32 	%f403, %r229;
	and.b32  	%r242, %r241, -2147483648;
	cvt.rzi.f32.f32 	%f54, %f53;
	setp.gt.f32 	%p19, %f55, 0f4B000000;
	cvt.rzi.f32.f32 	%f112, %f111;
	setp.gt.f32 	%p30, %f113, 0f4B000000;
	cvt.rzi.f32.f32 	%f171, %f170;
	setp.gt.f32 	%p41, %f172, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p52, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f288, %f287;
	setp.gt.f32 	%p63, %f289, 0f4B000000;
	cvt.rzi.f32.f32 	%f346, %f345;
	setp.gt.f32 	%p74, %f347, 0f4B000000;
	add.f32 	%f404, %f402, %f403;
	abs.f32 	%f406, %f402;
	or.b32  	%r243, %r242, 1056964608;
	selp.f32 	%f56, %f51, %f54, %p19;
	cvt.rzi.f32.f32 	%f57, %f51;
	setp.lt.f32 	%p20, %f55, 0f3F000000;
	selp.f32 	%f114, %f109, %f112, %p30;
	cvt.rzi.f32.f32 	%f115, %f109;
	setp.lt.f32 	%p31, %f113, 0f3F000000;
	selp.f32 	%f173, %f168, %f171, %p41;
	cvt.rzi.f32.f32 	%f174, %f168;
	setp.lt.f32 	%p42, %f172, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p52;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p53, %f230, 0f3F000000;
	selp.f32 	%f290, %f285, %f288, %p63;
	cvt.rzi.f32.f32 	%f291, %f285;
	setp.lt.f32 	%p64, %f289, 0f3F000000;
	selp.f32 	%f348, %f343, %f346, %p74;
	cvt.rzi.f32.f32 	%f349, %f343;
	setp.lt.f32 	%p75, %f347, 0f3F000000;
	cvt.rzi.f32.f32 	%f405, %f404;
	setp.gt.f32 	%p85, %f406, 0f4B000000;
	mov.b32 	%f461, %r243;
	shr.u32 	%r120, %r2, 3;
	selp.f32 	%f58, %f57, %f56, %p20;
	selp.f32 	%f116, %f115, %f114, %p31;
	selp.f32 	%f175, %f174, %f173, %p42;
	selp.f32 	%f233, %f232, %f231, %p53;
	selp.f32 	%f292, %f291, %f290, %p64;
	selp.f32 	%f350, %f349, %f348, %p75;
	selp.f32 	%f407, %f402, %f405, %p85;
	cvt.rzi.f32.f32 	%f408, %f402;
	setp.lt.f32 	%p86, %f406, 0f3F000000;
	add.f32 	%f462, %f460, %f461;
	abs.f32 	%f464, %f460;
	cvt.u16.u32 	%rs1, %r120;
	fma.rn.f32 	%f59, %f58, 0fBF000000, %f50;
	fma.rn.f32 	%f117, %f116, 0fBF000000, %f108;
	fma.rn.f32 	%f176, %f175, 0fBF000000, %f167;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f293, %f292, 0fBF000000, %f284;
	fma.rn.f32 	%f351, %f350, 0fBF000000, %f342;
	selp.f32 	%f409, %f408, %f407, %p86;
	cvt.rzi.f32.f32 	%f463, %f462;
	setp.gt.f32 	%p96, %f464, 0f4B000000;
	and.b16  	%rs2, %rs1, 255;
	mul.f32 	%f60, %f59, %f59;
	mul.f32 	%f118, %f117, %f117;
	mul.f32 	%f177, %f176, %f176;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f294, %f293, %f293;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f410, %f409, 0fBF000000, %f401;
	selp.f32 	%f465, %f460, %f463, %p96;
	cvt.rzi.f32.f32 	%f466, %f460;
	setp.lt.f32 	%p97, %f464, 0f3F000000;
	mul.lo.s16 	%rs3, %rs2, 171;
	cvt.rzi.s32.f32 	%r137, %f58;
	fma.rn.f32 	%f61, %f60, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f62, %f60, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r151, %f116;
	fma.rn.f32 	%f119, %f118, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f120, %f118, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r168, %f175;
	fma.rn.f32 	%f178, %f177, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f179, %f177, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r182, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r199, %f292;
	fma.rn.f32 	%f295, %f294, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f296, %f294, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r213, %f350;
	fma.rn.f32 	%f353, %f352, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f354, %f352, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f411, %f410, %f410;
	selp.f32 	%f467, %f466, %f465, %p97;
	shl.b32 	%r46, %r1, 1;
	shr.u16 	%rs4, %rs3, 13;
	add.s32 	%r138, %r137, 1;
	fma.rn.f32 	%f63, %f61, %f60, 0fC0A55DF6;
	fma.rn.f32 	%f64, %f62, %f60, 0f4081E0CF;
	fma.rn.f32 	%f65, %f60, %f59, 0f00000000;
	add.s32 	%r152, %r151, 1;
	fma.rn.f32 	%f121, %f119, %f118, 0fC0A55DF6;
	fma.rn.f32 	%f122, %f120, %f118, 0f4081E0CF;
	fma.rn.f32 	%f123, %f118, %f117, 0f00000000;
	add.s32 	%r169, %r168, 1;
	fma.rn.f32 	%f180, %f178, %f177, 0fC0A55DF6;
	fma.rn.f32 	%f181, %f179, %f177, 0f4081E0CF;
	fma.rn.f32 	%f182, %f177, %f176, 0f00000000;
	add.s32 	%r183, %r182, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r200, %r199, 1;
	fma.rn.f32 	%f297, %f295, %f294, 0fC0A55DF6;
	fma.rn.f32 	%f298, %f296, %f294, 0f4081E0CF;
	fma.rn.f32 	%f299, %f294, %f293, 0f00000000;
	add.s32 	%r214, %r213, 1;
	fma.rn.f32 	%f355, %f353, %f352, 0fC0A55DF6;
	fma.rn.f32 	%f356, %f354, %f352, 0f4081E0CF;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	cvt.rzi.s32.f32 	%r230, %f409;
	fma.rn.f32 	%f412, %f411, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f413, %f411, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f468, %f467, 0fBF000000, %f459;
	and.b32  	%r47, %r46, 8;
	shl.b32 	%r49, %r1, 2;
	mul.lo.s16 	%rs5, %rs4, 48;
	and.b32  	%r54, %r1, 18;
	fma.rn.f32 	%f66, %f64, %f60, 0fC09DE9E6;
	fma.rn.f32 	%f67, %f63, %f65, 0f00000000;
	and.b32  	%r139, %r138, 1;
	fma.rn.f32 	%f124, %f122, %f118, 0fC09DE9E6;
	fma.rn.f32 	%f125, %f121, %f123, 0f00000000;
	and.b32  	%r153, %r152, 1;
	fma.rn.f32 	%f183, %f181, %f177, 0fC09DE9E6;
	fma.rn.f32 	%f184, %f180, %f182, 0f00000000;
	and.b32  	%r170, %r169, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r184, %r183, 1;
	fma.rn.f32 	%f300, %f298, %f294, 0fC09DE9E6;
	fma.rn.f32 	%f301, %f297, %f299, 0f00000000;
	and.b32  	%r201, %r200, 1;
	fma.rn.f32 	%f358, %f356, %f352, 0fC09DE9E6;
	fma.rn.f32 	%f359, %f355, %f357, 0f00000000;
	and.b32  	%r215, %r214, 1;
	add.s32 	%r231, %r230, 1;
	fma.rn.f32 	%f414, %f412, %f411, 0fC0A55DF6;
	fma.rn.f32 	%f415, %f413, %f411, 0f4081E0CF;
	fma.rn.f32 	%f416, %f411, %f410, 0f00000000;
	mul.f32 	%f469, %f468, %f468;
	and.b32  	%r50, %r49, 4;
	sub.s16 	%rs6, %rs1, %rs5;
	or.b32  	%r122, %r54, %r47;
	fma.rn.f32 	%f68, %f66, %f60, 0f3F800000;
	fma.rn.f32 	%f69, %f59, 0f40490FDB, %f67;
	setp.eq.b32 	%p21, %r139, 1;
	fma.rn.f32 	%f126, %f124, %f118, 0f3F800000;
	fma.rn.f32 	%f127, %f117, 0f40490FDB, %f125;
	setp.eq.b32 	%p32, %r153, 1;
	fma.rn.f32 	%f185, %f183, %f177, 0f3F800000;
	fma.rn.f32 	%f186, %f176, 0f40490FDB, %f184;
	setp.eq.b32 	%p43, %r170, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p54, %r184, 1;
	fma.rn.f32 	%f302, %f300, %f294, 0f3F800000;
	fma.rn.f32 	%f303, %f293, 0f40490FDB, %f301;
	setp.eq.b32 	%p65, %r201, 1;
	fma.rn.f32 	%f360, %f358, %f352, 0f3F800000;
	fma.rn.f32 	%f361, %f351, 0f40490FDB, %f359;
	setp.eq.b32 	%p76, %r215, 1;
	fma.rn.f32 	%f417, %f415, %f411, 0fC09DE9E6;
	fma.rn.f32 	%f418, %f414, %f416, 0f00000000;
	and.b32  	%r232, %r231, 1;
	cvt.rzi.s32.f32 	%r244, %f467;
	fma.rn.f32 	%f470, %f469, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f471, %f469, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r51, %r49, 32;
	and.b16  	%rs7, %rs6, 255;
	or.b32  	%r123, %r122, %r50;
	selp.f32 	%f70, %f68, %f69, %p21;
	and.b32  	%r140, %r138, 2;
	selp.f32 	%f128, %f126, %f127, %p32;
	and.b32  	%r154, %r152, 2;
	selp.f32 	%f187, %f185, %f186, %p43;
	and.b32  	%r171, %r169, 2;
	selp.f32 	%f245, %f243, %f244, %p54;
	and.b32  	%r185, %r183, 2;
	selp.f32 	%f304, %f302, %f303, %p65;
	and.b32  	%r202, %r200, 2;
	selp.f32 	%f362, %f360, %f361, %p76;
	and.b32  	%r216, %r214, 2;
	fma.rn.f32 	%f419, %f417, %f411, 0f3F800000;
	fma.rn.f32 	%f420, %f410, 0f40490FDB, %f418;
	setp.eq.b32 	%p87, %r232, 1;
	add.s32 	%r245, %r244, 1;
	fma.rn.f32 	%f472, %f470, %f469, 0fC0A55DF6;
	fma.rn.f32 	%f473, %f471, %f469, 0f4081E0CF;
	fma.rn.f32 	%f474, %f469, %f468, 0f00000000;
	mul.wide.u16 	%r53, %rs7, 64;
	or.b32  	%r124, %r123, %r51;
	setp.eq.s32 	%p22, %r140, 0;
	sub.f32 	%f72, %f71, %f70;
	setp.eq.s32 	%p33, %r154, 0;
	sub.f32 	%f130, %f71, %f128;
	setp.eq.s32 	%p44, %r171, 0;
	sub.f32 	%f189, %f71, %f187;
	setp.eq.s32 	%p55, %r185, 0;
	sub.f32 	%f247, %f71, %f245;
	setp.eq.s32 	%p66, %r202, 0;
	sub.f32 	%f306, %f71, %f304;
	setp.eq.s32 	%p77, %r216, 0;
	sub.f32 	%f364, %f71, %f362;
	selp.f32 	%f421, %f419, %f420, %p87;
	and.b32  	%r233, %r231, 2;
	fma.rn.f32 	%f475, %f473, %f469, 0fC09DE9E6;
	fma.rn.f32 	%f476, %f472, %f474, 0f00000000;
	and.b32  	%r246, %r245, 1;
	or.b32  	%r125, %r124, %r53;
	selp.f32 	%f73, %f70, %f72, %p22;
	selp.f32 	%f131, %f128, %f130, %p33;
	selp.f32 	%f190, %f187, %f189, %p44;
	selp.f32 	%f248, %f245, %f247, %p55;
	selp.f32 	%f307, %f304, %f306, %p66;
	selp.f32 	%f365, %f362, %f364, %p77;
	setp.eq.s32 	%p88, %r233, 0;
	sub.f32 	%f423, %f71, %f421;
	fma.rn.f32 	%f477, %f475, %f469, 0f3F800000;
	fma.rn.f32 	%f478, %f468, 0f40490FDB, %f476;
	setp.eq.b32 	%p98, %r246, 1;
	bfe.u32 	%r126, %r125, 1, 7;
	mul.f32 	%f43, %f73, %f73;
	mul.f32 	%f5, %f131, %f131;
	mul.f32 	%f10, %f190, %f190;
	mul.f32 	%f16, %f248, %f248;
	mul.f32 	%f21, %f307, %f307;
	mul.f32 	%f27, %f365, %f365;
	selp.f32 	%f424, %f421, %f423, %p88;
	selp.f32 	%f479, %f477, %f478, %p98;
	and.b32  	%r247, %r245, 2;
	ld.param.u64 	%rd1, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd43, %r126, 4;
	mul.f32 	%f102, %f713, %f43;
	mov.f32 	%f103, 0f42800000;
	mul.f32 	%f160, %f714, %f5;
	mul.f32 	%f219, %f715, %f10;
	mul.f32 	%f277, %f716, %f16;
	mul.f32 	%f336, %f717, %f21;
	mul.f32 	%f394, %f718, %f27;
	mul.f32 	%f32, %f424, %f424;
	setp.eq.s32 	%p99, %r247, 0;
	sub.f32 	%f481, %f71, %f479;
	cvt.u32.u16 	%r121, %rs6;
	add.s64 	%rd44, %rd1, %rd43;
	div.approx.f32 	%f3, %f102, %f103;
	div.approx.f32 	%f162, %f160, %f103;
	div.approx.f32 	%f14, %f219, %f103;
	div.approx.f32 	%f279, %f277, %f103;
	div.approx.f32 	%f25, %f336, %f103;
	div.approx.f32 	%f396, %f394, %f103;
	mul.f32 	%f453, %f719, %f32;
	selp.f32 	%f482, %f479, %f481, %p99;
	ld.param.u64 	%rd2, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b32  	%r48, %r1, 16;
	and.b32  	%r52, %r121, 255;
	ld.global.u32 	%r55, [%rd44];
	shr.u32 	%r56, %r1, 1;
	shr.u32 	%r60, %r1, 3;
	mov.b32 	%r163, %f162;
	mov.b32 	%r162, %f3;
	mov.b32 	%r194, %f279;
	mov.b32 	%r193, %f14;
	mov.b32 	%r225, %f396;
	mov.b32 	%r224, %f25;
	div.approx.f32 	%f36, %f453, %f103;
	mul.f32 	%f38, %f482, %f482;
	// begin inline asm
	cvt.rn.f16x2.f32 %r161, %r163, %r162;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r192, %r194, %r193;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r223, %r225, %r224;
	// end inline asm
	mul.f32 	%f510, %f720, %f38;
	div.approx.f32 	%f512, %f510, %f103;
	mov.b32 	%r256, %f512;
	mov.b32 	%r255, %f36;
	// begin inline asm
	cvt.rn.f16x2.f32 %r254, %r256, %r255;
	// end inline asm
	mul.lo.s32 	%r293, %r61, 63;
	and.b32  	%r294, %r293, 127;
	cvt.rn.f32.s32 	%f513, %r294;
	div.approx.f32 	%f514, %f513, %f103;
	add.f32 	%f515, %f514, %f514;
	mov.b32 	%r295, %f515;
	and.b32  	%r296, %r295, -2147483648;
	or.b32  	%r297, %r296, 1056964608;
	mov.b32 	%f516, %r297;
	add.f32 	%f517, %f515, %f516;
	cvt.rzi.f32.f32 	%f518, %f517;
	abs.f32 	%f519, %f515;
	setp.gt.f32 	%p106, %f519, 0f4B000000;
	selp.f32 	%f520, %f515, %f518, %p106;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p107, %f519, 0f3F000000;
	selp.f32 	%f522, %f521, %f520, %p107;
	cvt.rzi.s32.f32 	%r298, %f522;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f514;
	mul.f32 	%f524, %f523, %f523;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	and.b32  	%r299, %r298, 1;
	setp.eq.b32 	%p108, %r299, 1;
	selp.f32 	%f534, %f532, %f533, %p108;
	selp.f32 	%f535, %f533, %f532, %p108;
	and.b32  	%r300, %r298, 2;
	setp.eq.s32 	%p109, %r300, 0;
	neg.f32 	%f536, %f534;
	selp.f32 	%f537, %f534, %f536, %p109;
	add.s32 	%r301, %r298, 1;
	and.b32  	%r302, %r301, 2;
	setp.eq.s32 	%p110, %r302, 0;
	sub.f32 	%f539, %f71, %f535;
	selp.f32 	%f540, %f535, %f539, %p110;
	cvt.rzi.f32.f32 	%f541, %f514;
	setp.eq.f32 	%p111, %f541, %f514;
	mul.f32 	%f542, %f514, 0f00000000;
	selp.f32 	%f543, %f542, %f537, %p111;
	abs.f32 	%f544, %f514;
	setp.gt.f32 	%p112, %f544, 0f4B800000;
	add.f32 	%f545, %f543, 0f3F800000;
	selp.f32 	%f546, %f545, %f540, %p112;
	add.s32 	%r303, %r293, 96;
	and.b32  	%r304, %r303, 127;
	cvt.rn.f32.s32 	%f547, %r304;
	div.approx.f32 	%f548, %f547, %f103;
	add.f32 	%f549, %f548, %f548;
	mov.b32 	%r305, %f549;
	and.b32  	%r306, %r305, -2147483648;
	or.b32  	%r307, %r306, 1056964608;
	mov.b32 	%f550, %r307;
	add.f32 	%f551, %f549, %f550;
	cvt.rzi.f32.f32 	%f552, %f551;
	abs.f32 	%f553, %f549;
	setp.gt.f32 	%p113, %f553, 0f4B000000;
	selp.f32 	%f554, %f549, %f552, %p113;
	cvt.rzi.f32.f32 	%f555, %f549;
	setp.lt.f32 	%p114, %f553, 0f3F000000;
	selp.f32 	%f556, %f555, %f554, %p114;
	cvt.rzi.s32.f32 	%r308, %f556;
	fma.rn.f32 	%f557, %f556, 0fBF000000, %f548;
	mul.f32 	%f558, %f557, %f557;
	fma.rn.f32 	%f559, %f558, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f560, %f558, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f561, %f559, %f558, 0fC0A55DF6;
	fma.rn.f32 	%f562, %f560, %f558, 0f4081E0CF;
	fma.rn.f32 	%f563, %f558, %f557, 0f00000000;
	fma.rn.f32 	%f564, %f562, %f558, 0fC09DE9E6;
	fma.rn.f32 	%f565, %f561, %f563, 0f00000000;
	fma.rn.f32 	%f566, %f564, %f558, 0f3F800000;
	fma.rn.f32 	%f567, %f557, 0f40490FDB, %f565;
	and.b32  	%r309, %r308, 1;
	setp.eq.b32 	%p115, %r309, 1;
	selp.f32 	%f568, %f566, %f567, %p115;
	selp.f32 	%f569, %f567, %f566, %p115;
	and.b32  	%r310, %r308, 2;
	setp.eq.s32 	%p116, %r310, 0;
	neg.f32 	%f570, %f568;
	selp.f32 	%f571, %f568, %f570, %p116;
	add.s32 	%r311, %r308, 1;
	and.b32  	%r312, %r311, 2;
	setp.eq.s32 	%p117, %r312, 0;
	sub.f32 	%f572, %f71, %f569;
	selp.f32 	%f573, %f569, %f572, %p117;
	cvt.rzi.f32.f32 	%f574, %f548;
	setp.eq.f32 	%p118, %f574, %f548;
	mul.f32 	%f575, %f548, 0f00000000;
	selp.f32 	%f576, %f575, %f571, %p118;
	abs.f32 	%f577, %f548;
	setp.gt.f32 	%p119, %f577, 0f4B800000;
	add.f32 	%f578, %f576, 0f3F800000;
	selp.f32 	%f579, %f578, %f573, %p119;
	mov.b32 	%r258, %f546;
	mov.b32 	%r259, %f579;
	// begin inline asm
	cvt.rn.f16x2.f32 %r257, %r259, %r258;
	// end inline asm
	mov.b32 	%r261, %f543;
	mov.b32 	%r262, %f576;
	// begin inline asm
	cvt.rn.f16x2.f32 %r260, %r262, %r261;
	// end inline asm
	and.b32  	%r313, %r60, 2;
	and.b32  	%r314, %r56, 4;
	or.b32  	%r315, %r57, %r313;
	or.b32  	%r316, %r315, %r314;
	and.b32  	%r317, %r46, 6;
	mul.lo.s32 	%r318, %r316, %r317;
	and.b32  	%r319, %r318, 14;
	cvt.rn.f32.s32 	%f580, %r319;
	mov.f32 	%f581, 0f41000000;
	div.approx.f32 	%f582, %f580, %f581;
	add.f32 	%f583, %f582, %f582;
	mov.b32 	%r320, %f583;
	and.b32  	%r321, %r320, -2147483648;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%f584, %r322;
	add.f32 	%f585, %f583, %f584;
	cvt.rzi.f32.f32 	%f586, %f585;
	abs.f32 	%f587, %f583;
	setp.gt.f32 	%p120, %f587, 0f4B000000;
	selp.f32 	%f588, %f583, %f586, %p120;
	cvt.rzi.f32.f32 	%f589, %f583;
	setp.lt.f32 	%p121, %f587, 0f3F000000;
	selp.f32 	%f590, %f589, %f588, %p121;
	cvt.rzi.s32.f32 	%r323, %f590;
	fma.rn.f32 	%f591, %f590, 0fBF000000, %f582;
	mul.f32 	%f592, %f591, %f591;
	fma.rn.f32 	%f593, %f592, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f594, %f592, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f593, %f592, 0fC0A55DF6;
	fma.rn.f32 	%f596, %f594, %f592, 0f4081E0CF;
	fma.rn.f32 	%f597, %f592, %f591, 0f00000000;
	fma.rn.f32 	%f598, %f596, %f592, 0fC09DE9E6;
	fma.rn.f32 	%f599, %f595, %f597, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f592, 0f3F800000;
	fma.rn.f32 	%f601, %f591, 0f40490FDB, %f599;
	and.b32  	%r324, %r323, 1;
	setp.eq.b32 	%p122, %r324, 1;
	selp.f32 	%f602, %f600, %f601, %p122;
	selp.f32 	%f603, %f601, %f600, %p122;
	and.b32  	%r325, %r323, 2;
	setp.eq.s32 	%p123, %r325, 0;
	neg.f32 	%f604, %f602;
	selp.f32 	%f605, %f602, %f604, %p123;
	add.s32 	%r326, %r323, 1;
	and.b32  	%r327, %r326, 2;
	setp.eq.s32 	%p124, %r327, 0;
	sub.f32 	%f606, %f71, %f603;
	selp.f32 	%f607, %f603, %f606, %p124;
	cvt.rzi.f32.f32 	%f608, %f582;
	setp.eq.f32 	%p125, %f608, %f582;
	mul.f32 	%f609, %f582, 0f00000000;
	selp.f32 	%f610, %f609, %f605, %p125;
	abs.f32 	%f611, %f582;
	setp.gt.f32 	%p126, %f611, 0f4B800000;
	add.f32 	%f612, %f610, 0f3F800000;
	selp.f32 	%f613, %f612, %f607, %p126;
	or.b32  	%r328, %r46, 8;
	mul.lo.s32 	%r329, %r316, %r328;
	and.b32  	%r330, %r329, 14;
	cvt.rn.f32.s32 	%f614, %r330;
	div.approx.f32 	%f615, %f614, %f581;
	add.f32 	%f616, %f615, %f615;
	mov.b32 	%r331, %f616;
	and.b32  	%r332, %r331, -2147483648;
	or.b32  	%r333, %r332, 1056964608;
	mov.b32 	%f617, %r333;
	add.f32 	%f618, %f616, %f617;
	cvt.rzi.f32.f32 	%f619, %f618;
	abs.f32 	%f620, %f616;
	setp.gt.f32 	%p127, %f620, 0f4B000000;
	selp.f32 	%f621, %f616, %f619, %p127;
	cvt.rzi.f32.f32 	%f622, %f616;
	setp.lt.f32 	%p128, %f620, 0f3F000000;
	selp.f32 	%f623, %f622, %f621, %p128;
	cvt.rzi.s32.f32 	%r334, %f623;
	fma.rn.f32 	%f624, %f623, 0fBF000000, %f615;
	mul.f32 	%f625, %f624, %f624;
	fma.rn.f32 	%f626, %f625, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f627, %f625, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f628, %f626, %f625, 0fC0A55DF6;
	fma.rn.f32 	%f629, %f627, %f625, 0f4081E0CF;
	fma.rn.f32 	%f630, %f625, %f624, 0f00000000;
	fma.rn.f32 	%f631, %f629, %f625, 0fC09DE9E6;
	fma.rn.f32 	%f632, %f628, %f630, 0f00000000;
	fma.rn.f32 	%f633, %f631, %f625, 0f3F800000;
	fma.rn.f32 	%f634, %f624, 0f40490FDB, %f632;
	and.b32  	%r335, %r334, 1;
	setp.eq.b32 	%p129, %r335, 1;
	selp.f32 	%f635, %f633, %f634, %p129;
	selp.f32 	%f636, %f634, %f633, %p129;
	and.b32  	%r336, %r334, 2;
	setp.eq.s32 	%p130, %r336, 0;
	neg.f32 	%f637, %f635;
	selp.f32 	%f638, %f635, %f637, %p130;
	add.s32 	%r337, %r334, 1;
	and.b32  	%r338, %r337, 2;
	setp.eq.s32 	%p131, %r338, 0;
	sub.f32 	%f639, %f71, %f636;
	selp.f32 	%f640, %f636, %f639, %p131;
	cvt.rzi.f32.f32 	%f641, %f615;
	setp.eq.f32 	%p132, %f641, %f615;
	mul.f32 	%f642, %f615, 0f00000000;
	selp.f32 	%f643, %f642, %f638, %p132;
	abs.f32 	%f644, %f615;
	setp.gt.f32 	%p133, %f644, 0f4B800000;
	add.f32 	%f645, %f643, 0f3F800000;
	selp.f32 	%f646, %f645, %f640, %p133;
	mov.b32 	%r264, %f613;
	mov.b32 	%r265, %f646;
	// begin inline asm
	cvt.rn.f16x2.f32 %r263, %r265, %r264;
	// end inline asm
	mov.b32 	%r267, %f610;
	mov.b32 	%r268, %f643;
	// begin inline asm
	cvt.rn.f16x2.f32 %r266, %r268, %r267;
	// end inline asm
	xor.b32  	%r288, %r267, -2147483648;
	xor.b32  	%r289, %r268, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r269, %r289, %r288;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r272, %r265, %r264;
	// end inline asm
	cvt.rn.f32.s32 	%f647, %r318;
	div.approx.f32 	%f648, %f647, %f103;
	add.f32 	%f649, %f648, %f648;
	mov.b32 	%r339, %f649;
	and.b32  	%r340, %r339, -2147483648;
	or.b32  	%r341, %r340, 1056964608;
	mov.b32 	%f650, %r341;
	add.f32 	%f651, %f649, %f650;
	cvt.rzi.f32.f32 	%f652, %f651;
	abs.f32 	%f653, %f649;
	setp.gt.f32 	%p134, %f653, 0f4B000000;
	selp.f32 	%f654, %f649, %f652, %p134;
	cvt.rzi.f32.f32 	%f655, %f649;
	setp.lt.f32 	%p135, %f653, 0f3F000000;
	selp.f32 	%f656, %f655, %f654, %p135;
	cvt.rzi.s32.f32 	%r342, %f656;
	fma.rn.f32 	%f657, %f656, 0fBF000000, %f648;
	mul.f32 	%f658, %f657, %f657;
	fma.rn.f32 	%f659, %f658, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f660, %f658, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f661, %f659, %f658, 0fC0A55DF6;
	fma.rn.f32 	%f662, %f660, %f658, 0f4081E0CF;
	fma.rn.f32 	%f663, %f658, %f657, 0f00000000;
	fma.rn.f32 	%f664, %f662, %f658, 0fC09DE9E6;
	fma.rn.f32 	%f665, %f661, %f663, 0f00000000;
	fma.rn.f32 	%f666, %f664, %f658, 0f3F800000;
	fma.rn.f32 	%f667, %f657, 0f40490FDB, %f665;
	and.b32  	%r343, %r342, 1;
	setp.eq.b32 	%p136, %r343, 1;
	selp.f32 	%f668, %f666, %f667, %p136;
	selp.f32 	%f669, %f667, %f666, %p136;
	and.b32  	%r344, %r342, 2;
	setp.eq.s32 	%p137, %r344, 0;
	neg.f32 	%f670, %f668;
	selp.f32 	%f671, %f668, %f670, %p137;
	add.s32 	%r345, %r342, 1;
	and.b32  	%r346, %r345, 2;
	setp.eq.s32 	%p138, %r346, 0;
	sub.f32 	%f672, %f71, %f669;
	selp.f32 	%f673, %f669, %f672, %p138;
	cvt.rzi.f32.f32 	%f674, %f648;
	setp.eq.f32 	%p139, %f674, %f648;
	mul.f32 	%f675, %f648, 0f00000000;
	selp.f32 	%f676, %f675, %f671, %p139;
	mov.b32 	%r347, %f676;
	abs.f32 	%f677, %f648;
	setp.gt.f32 	%p140, %f677, 0f4B800000;
	add.f32 	%f678, %f676, 0f3F800000;
	selp.f32 	%f679, %f678, %f673, %p140;
	shl.b32 	%r348, %r316, 3;
	add.s32 	%r349, %r318, %r348;
	cvt.rn.f32.s32 	%f680, %r349;
	div.approx.f32 	%f681, %f680, %f103;
	add.f32 	%f682, %f681, %f681;
	mov.b32 	%r350, %f682;
	and.b32  	%r351, %r350, -2147483648;
	or.b32  	%r352, %r351, 1056964608;
	mov.b32 	%f683, %r352;
	add.f32 	%f684, %f682, %f683;
	cvt.rzi.f32.f32 	%f685, %f684;
	abs.f32 	%f686, %f682;
	setp.gt.f32 	%p141, %f686, 0f4B000000;
	selp.f32 	%f687, %f682, %f685, %p141;
	cvt.rzi.f32.f32 	%f688, %f682;
	setp.lt.f32 	%p142, %f686, 0f3F000000;
	selp.f32 	%f689, %f688, %f687, %p142;
	cvt.rzi.s32.f32 	%r353, %f689;
	fma.rn.f32 	%f690, %f689, 0fBF000000, %f681;
	mul.f32 	%f691, %f690, %f690;
	fma.rn.f32 	%f692, %f691, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f693, %f691, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f694, %f692, %f691, 0fC0A55DF6;
	fma.rn.f32 	%f695, %f693, %f691, 0f4081E0CF;
	fma.rn.f32 	%f696, %f691, %f690, 0f00000000;
	fma.rn.f32 	%f697, %f695, %f691, 0fC09DE9E6;
	fma.rn.f32 	%f698, %f694, %f696, 0f00000000;
	fma.rn.f32 	%f699, %f697, %f691, 0f3F800000;
	fma.rn.f32 	%f700, %f690, 0f40490FDB, %f698;
	and.b32  	%r354, %r353, 1;
	setp.eq.b32 	%p143, %r354, 1;
	selp.f32 	%f701, %f699, %f700, %p143;
	selp.f32 	%f702, %f700, %f699, %p143;
	and.b32  	%r355, %r353, 2;
	setp.eq.s32 	%p144, %r355, 0;
	neg.f32 	%f703, %f701;
	selp.f32 	%f704, %f701, %f703, %p144;
	add.s32 	%r356, %r353, 1;
	and.b32  	%r357, %r356, 2;
	setp.eq.s32 	%p145, %r357, 0;
	sub.f32 	%f705, %f71, %f702;
	selp.f32 	%f706, %f702, %f705, %p145;
	cvt.rzi.f32.f32 	%f707, %f681;
	setp.eq.f32 	%p146, %f707, %f681;
	mul.f32 	%f708, %f681, 0f00000000;
	selp.f32 	%f709, %f708, %f704, %p146;
	mov.b32 	%r358, %f709;
	abs.f32 	%f710, %f681;
	setp.gt.f32 	%p147, %f710, 0f4B800000;
	add.f32 	%f711, %f709, 0f3F800000;
	selp.f32 	%f712, %f711, %f706, %p147;
	mov.b32 	%r277, %f712;
	mov.b32 	%r276, %f679;
	// begin inline asm
	cvt.rn.f16x2.f32 %r275, %r277, %r276;
	// end inline asm
	xor.b32  	%r280, %r358, -2147483648;
	xor.b32  	%r279, %r347, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r278, %r280, %r279;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r281, %r265, %r264;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r284, %r268, %r267;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r287, %r289, %r288;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r290, %r265, %r264;
	// end inline asm
	shl.b32 	%r360, %r2, 5;
	and.b32  	%r361, %r49, 28;
	or.b32  	%r362, %r48, %r3;
	or.b32  	%r21, %r362, %r51;
	and.b32  	%r363, %r360, 224;
	or.b32  	%r22, %r363, %r361;
	add.s32 	%r364, %r52, %r107;
	shl.b32 	%r365, %r364, 8;
	or.b32  	%r23, %r22, %r365;
	and.b32  	%r24, %r1, 8;
	shl.b32 	%r366, %r1, 4;
	or.b32  	%r367, %r366, %r24;
	shr.u32 	%r368, %r367, 2;
	and.b32  	%r369, %r368, 30;
	and.b32  	%r370, %r1, 4;
	or.b32  	%r372, %r60, %r370;
	or.b32  	%r25, %r372, %r129;
	shr.u32 	%r26, %r3, 1;
	and.b32  	%r27, %r4, 32;
	or.b32  	%r373, %r54, %r51;
	or.b32  	%r374, %r373, %r47;
	or.b32  	%r375, %r374, %r50;
	shr.u32 	%r376, %r375, 1;
	mul.lo.s32 	%r377, %r376, 65;
	or.b32  	%r378, %r27, %r26;
	add.s32 	%r379, %r378, %r377;
	or.b32  	%r28, %r26, 8;
	or.b32  	%r380, %r27, %r28;
	add.s32 	%r381, %r380, %r377;
	or.b32  	%r29, %r378, 16;
	add.s32 	%r382, %r29, %r377;
	or.b32  	%r30, %r378, 24;
	add.s32 	%r383, %r30, %r377;
	shl.b32 	%r384, %r3, 1;
	or.b32  	%r385, %r384, %r58;
	mul.lo.s32 	%r386, %r385, 65;
	add.s32 	%r387, %r369, %r386;
	mul.wide.u32 	%rd45, %r387, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd6, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r369;
	cvt.u64.u32 	%rd48, %r386;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd7, %rd46, %rd50;
	shl.b32 	%r388, %r105, 16;
	add.s32 	%r389, %r388, -196608;
	shl.b32 	%r390, %r3, 2;
	or.b32  	%r391, %r60, %r390;
	and.b32  	%r392, %r53, 192;
	or.b32  	%r393, %r391, %r392;
	shl.b32 	%r31, %r393, 8;
	cvt.s64.s32 	%rd8, %r389;
	and.b32  	%r394, %r3, 1;
	neg.s32 	%r395, %r394;
	setp.eq.b32 	%p149, %r394, 1;
	and.b32  	%r396, %r395, 1040;
	bfe.s32 	%r397, %r3, 1, 1;
	and.b32  	%r398, %r3, 2;
	setp.eq.s32 	%p150, %r398, 0;
	and.b32  	%r399, %r397, 520;
	bfe.s32 	%r400, %r3, 2, 1;
	and.b32  	%r401, %r3, 4;
	setp.eq.s32 	%p151, %r401, 0;
	and.b32  	%r402, %r400, 260;
	mul.lo.s32 	%r403, %r58, 65;
	shr.u32 	%r404, %r3, 3;
	mul.lo.s32 	%r405, %r404, 130;
	add.s32 	%r406, %r396, %r369;
	add.s32 	%r407, %r406, %r399;
	add.s32 	%r408, %r407, %r402;
	add.s32 	%r409, %r408, %r403;
	add.s32 	%r410, %r409, %r405;
	mul.wide.u32 	%rd51, %r410, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r405;
	cvt.u64.u32 	%rd53, %r403;
	selp.b64 	%rd54, 0, 260, %p151;
	selp.b64 	%rd55, 0, 520, %p150;
	selp.b64 	%rd56, 1040, 0, %p149;
	add.s64 	%rd57, %rd47, %rd56;
	add.s64 	%rd58, %rd57, %rd55;
	add.s64 	%rd59, %rd58, %rd54;
	add.s64 	%rd60, %rd59, %rd53;
	add.s64 	%rd61, %rd60, %rd52;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd10, %rd46, %rd62;
	cvt.u64.u32 	%rd63, %r408;
	add.s64 	%rd64, %rd63, %rd53;
	add.s64 	%rd65, %rd64, %rd52;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd11, %rd46, %rd66;
	add.s32 	%r411, %r410, 2113;
	mul.wide.u32 	%rd67, %r411, 4;
	add.s64 	%rd12, %rd46, %rd67;
	add.s32 	%r412, %r410, 2082;
	mul.wide.u32 	%rd68, %r412, 4;
	add.s64 	%rd13, %rd46, %rd68;
	add.s32 	%r413, %r410, 2114;
	mul.wide.u32 	%rd69, %r413, 4;
	add.s64 	%rd14, %rd46, %rd69;
	add.s32 	%r414, %r410, 4194;
	mul.wide.u32 	%rd70, %r414, 4;
	add.s64 	%rd15, %rd46, %rd70;
	add.s32 	%r415, %r410, 4163;
	mul.wide.u32 	%rd71, %r415, 4;
	add.s64 	%rd16, %rd46, %rd71;
	add.s32 	%r416, %r410, 4195;
	mul.wide.u32 	%rd72, %r416, 4;
	add.s64 	%rd17, %rd46, %rd72;
	add.s32 	%r417, %r410, 6275;
	mul.wide.u32 	%rd73, %r417, 4;
	add.s64 	%rd18, %rd46, %rd73;
	add.s32 	%r418, %r410, 6244;
	mul.wide.u32 	%rd74, %r418, 4;
	add.s64 	%rd19, %rd46, %rd74;
	add.s32 	%r419, %r410, 6276;
	mul.wide.u32 	%rd75, %r419, 4;
	add.s64 	%rd20, %rd46, %rd75;
	mul.wide.u32 	%rd76, %r383, 4;
	add.s64 	%rd21, %rd46, %rd76;
	mul.wide.u32 	%rd77, %r382, 4;
	add.s64 	%rd22, %rd46, %rd77;
	mul.wide.u32 	%rd78, %r381, 4;
	add.s64 	%rd23, %rd46, %rd78;
	mul.wide.u32 	%rd79, %r379, 4;
	add.s64 	%rd24, %rd46, %rd79;
	mov.u16 	%rs243, 25600;
	mov.u16 	%rs245, 21504;
	mov.u16 	%rs253, 18432;
	mov.u16 	%rs267, -14592;
	mov.u32 	%r2518, %r2516;
	mov.u32 	%r2519, %r2516;
	mov.u32 	%r2520, %r2516;
	mov.u32 	%r2521, %r2516;
	mov.u32 	%r2522, %r2516;
	mov.u32 	%r2523, %r2516;
	mov.u32 	%r2524, %r2516;
	mov.u32 	%r2525, %r2516;
	mov.u32 	%r2535, %r2516;
	mov.u32 	%r2536, %r2516;
	mov.u32 	%r2537, %r2516;
	mov.u32 	%r2538, %r2516;
	mov.u32 	%r44, %r2516;
	bra.uni 	$L__BB0_31;
$L__BB0_39:                             // %pass10384
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r2509, %r2517, %r22;
	or.b32  	%r2510, %r2509, %r31;
	or.b32  	%r2511, %r2510, 196608;
	cvt.s64.s32 	%rd133, %r2511;
	add.s64 	%rd134, %rd133, %rd8;
	shr.u64 	%rd135, %rd134, 39;
	add.s64 	%rd136, %rd134, %rd135;
	shr.s64 	%rd137, %rd136, 25;
	setp.lt.s64 	%p180, %rd134, 0;
	and.b64  	%rd138, %rd136, -33554432;
	setp.ne.s64 	%p181, %rd138, %rd134;
	and.pred  	%p182, %p180, %p181;
	selp.u64 	%rd139, 1, 0, %p182;
	sub.s64 	%rd140, %rd139, %rd137;
	shl.b64 	%rd141, %rd140, 25;
	add.s64 	%rd142, %rd141, %rd134;
	shl.b64 	%rd143, %rd142, 2;
	add.s64 	%rd144, %rd3, %rd143;
	st.global.v4.u32 	[%rd144], {%r98, %r100, %r99, %r101};
	setp.ne.s32 	%p183, %r44, 32512;
	add.s32 	%r44, %r44, 256;
	add.s32 	%r2512, %r44, %r103;
	setp.lt.s32 	%p184, %r2512, %r104;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_40;
$L__BB0_31:                             // %L1517
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_32 Depth 2
	setp.eq.s32 	%p152, %r24, 0;
	and.b32  	%r45, %r44, 32512;
	or.b32  	%r485, %r21, %r45;
	add.s32 	%r486, %r485, %r103;
	mad.lo.s32 	%r487, %r486, 12288, %r23;
	mul.hi.s32 	%r488, %r487, 715827883;
	shr.u32 	%r489, %r488, 31;
	shr.s32 	%r490, %r488, 26;
	add.s32 	%r491, %r490, %r489;
	setp.lt.s32 	%p153, %r487, 0;
	mul.lo.s32 	%r492, %r491, 402653184;
	setp.ne.s32 	%p154, %r492, %r487;
	and.pred  	%p155, %p153, %p154;
	selp.s32 	%r493, -1, 0, %p155;
	add.s32 	%r494, %r491, %r493;
	or.b32  	%r495, %r487, 1;
	mad.lo.s32 	%r496, %r494, -402653184, %r495;
	mul.wide.s32 	%rd80, %r496, 4;
	add.s64 	%rd81, %rd2, %rd80;
	ld.global.v4.u32 	{%r497, %r498, %r499, %r500}, [%rd81+-4];
	or.b32  	%r501, %r485, 64;
	add.s32 	%r502, %r501, %r103;
	mad.lo.s32 	%r503, %r502, 12288, %r23;
	mul.hi.s32 	%r504, %r503, 715827883;
	shr.u32 	%r505, %r504, 31;
	shr.s32 	%r506, %r504, 26;
	add.s32 	%r507, %r506, %r505;
	setp.lt.s32 	%p156, %r503, 0;
	mul.lo.s32 	%r508, %r507, 402653184;
	setp.ne.s32 	%p157, %r508, %r503;
	and.pred  	%p158, %p156, %p157;
	selp.s32 	%r509, -1, 0, %p158;
	add.s32 	%r510, %r507, %r509;
	or.b32  	%r511, %r503, 1;
	mad.lo.s32 	%r512, %r510, -402653184, %r511;
	mul.wide.s32 	%rd82, %r512, 4;
	add.s64 	%rd83, %rd2, %rd82;
	ld.global.v4.u32 	{%r513, %r514, %r515, %r516}, [%rd83+-4];
	or.b32  	%r517, %r485, 128;
	add.s32 	%r518, %r517, %r103;
	mad.lo.s32 	%r519, %r518, 12288, %r23;
	mul.hi.s32 	%r520, %r519, 715827883;
	shr.u32 	%r521, %r520, 31;
	shr.s32 	%r522, %r520, 26;
	add.s32 	%r523, %r522, %r521;
	setp.lt.s32 	%p159, %r519, 0;
	mul.lo.s32 	%r524, %r523, 402653184;
	setp.ne.s32 	%p160, %r524, %r519;
	and.pred  	%p161, %p159, %p160;
	selp.s32 	%r525, -1, 0, %p161;
	add.s32 	%r526, %r523, %r525;
	or.b32  	%r527, %r519, 1;
	mad.lo.s32 	%r528, %r526, -402653184, %r527;
	mul.wide.s32 	%rd84, %r528, 4;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.v4.u32 	{%r529, %r530, %r531, %r532}, [%rd85+-4];
	or.b32  	%r533, %r485, 192;
	add.s32 	%r534, %r533, %r103;
	mad.lo.s32 	%r535, %r534, 12288, %r23;
	mul.hi.s32 	%r536, %r535, 715827883;
	shr.u32 	%r537, %r536, 31;
	shr.s32 	%r538, %r536, 26;
	add.s32 	%r539, %r538, %r537;
	setp.lt.s32 	%p162, %r535, 0;
	mul.lo.s32 	%r540, %r539, 402653184;
	setp.ne.s32 	%p163, %r540, %r535;
	and.pred  	%p164, %p162, %p163;
	selp.s32 	%r541, -1, 0, %p164;
	add.s32 	%r542, %r539, %r541;
	or.b32  	%r543, %r535, 1;
	mad.lo.s32 	%r544, %r542, -402653184, %r543;
	mul.wide.s32 	%rd86, %r544, 4;
	add.s64 	%rd87, %rd2, %rd86;
	ld.global.v4.u32 	{%r545, %r546, %r547, %r548}, [%rd87+-4];
	selp.b32 	%r549, %r499, %r497, %p152;
	shfl.sync.bfly.b32	%r550, %r549, 8, 31, -1;
	selp.b32 	%r421, %r497, %r550, %p152;
	selp.b32 	%r422, %r550, %r499, %p152;
	selp.b32 	%r551, %r500, %r498, %p152;
	shfl.sync.bfly.b32	%r552, %r551, 8, 31, -1;
	selp.b32 	%r429, %r498, %r552, %p152;
	selp.b32 	%r430, %r552, %r500, %p152;
	selp.b32 	%r553, %r515, %r513, %p152;
	shfl.sync.bfly.b32	%r554, %r553, 8, 31, -1;
	selp.b32 	%r437, %r513, %r554, %p152;
	selp.b32 	%r438, %r554, %r515, %p152;
	selp.b32 	%r555, %r516, %r514, %p152;
	shfl.sync.bfly.b32	%r556, %r555, 8, 31, -1;
	selp.b32 	%r445, %r514, %r556, %p152;
	selp.b32 	%r446, %r556, %r516, %p152;
	selp.b32 	%r557, %r531, %r529, %p152;
	shfl.sync.bfly.b32	%r558, %r557, 8, 31, -1;
	selp.b32 	%r453, %r529, %r558, %p152;
	selp.b32 	%r454, %r558, %r531, %p152;
	selp.b32 	%r559, %r532, %r530, %p152;
	shfl.sync.bfly.b32	%r560, %r559, 8, 31, -1;
	selp.b32 	%r461, %r530, %r560, %p152;
	selp.b32 	%r462, %r560, %r532, %p152;
	selp.b32 	%r561, %r547, %r545, %p152;
	shfl.sync.bfly.b32	%r562, %r561, 8, 31, -1;
	selp.b32 	%r469, %r545, %r562, %p152;
	selp.b32 	%r470, %r562, %r547, %p152;
	selp.b32 	%r563, %r548, %r546, %p152;
	shfl.sync.bfly.b32	%r564, %r563, 8, 31, -1;
	selp.b32 	%r477, %r546, %r564, %p152;
	selp.b32 	%r478, %r564, %r548, %p152;
	mov.u32 	%r479, 21520;
	// begin inline asm
	prmt.b32 %r420, %r421, %r422, %r479;
	// end inline asm
	mov.u32 	%r483, 30258;
	// begin inline asm
	prmt.b32 %r424, %r421, %r422, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r428, %r429, %r430, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r432, %r429, %r430, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r436, %r437, %r438, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r440, %r437, %r438, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r444, %r445, %r446, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r448, %r445, %r446, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r452, %r453, %r454, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r456, %r453, %r454, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r460, %r461, %r462, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r464, %r461, %r462, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r468, %r469, %r470, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r472, %r469, %r470, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r476, %r477, %r478, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r480, %r477, %r478, %r483;
	// end inline asm
	st.shared.u32 	[%rd9], %r420;
	st.shared.u32 	[%rd10+128], %r424;
	st.shared.u32 	[%rd10+4], %r428;
	st.shared.u32 	[%rd10+132], %r432;
	st.shared.u32 	[%rd11+8324], %r436;
	st.shared.u32 	[%rd12], %r440;
	st.shared.u32 	[%rd13], %r444;
	st.shared.u32 	[%rd14], %r448;
	st.shared.u32 	[%rd11+16648], %r452;
	st.shared.u32 	[%rd15], %r456;
	st.shared.u32 	[%rd16], %r460;
	st.shared.u32 	[%rd17], %r464;
	st.shared.u32 	[%rd11+24972], %r468;
	st.shared.u32 	[%rd18], %r472;
	st.shared.u32 	[%rd19], %r476;
	st.shared.u32 	[%rd20], %r480;
	bar.sync 	0;
	mov.u64 	%rd149, %rd24;
	mov.u64 	%rd150, %rd23;
	mov.u64 	%rd151, %rd22;
	mov.u64 	%rd152, %rd21;
	mov.u32 	%r2531, %r2525;
	mov.u32 	%r2532, %r2524;
	mov.u32 	%r2533, %r2523;
	mov.u32 	%r2534, %r2522;
	mov.u32 	%r2539, %r2516;
	mov.u32 	%r2540, %r2521;
	mov.u32 	%r2541, %r2520;
	mov.u32 	%r2542, %r2519;
	mov.u32 	%r2543, %r2518;
$L__BB0_32:                             // %pass5629
                                        //   Parent Loop BB0_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2525, %r2538;
	mov.u32 	%r2524, %r2537;
	mov.u32 	%r2523, %r2536;
	mov.u32 	%r2522, %r2535;
	mov.u32 	%r2518, %r2534;
	mov.u32 	%r2519, %r2533;
	mov.u32 	%r2520, %r2532;
	mov.u32 	%r2521, %r2531;
	or.b32  	%r2377, %r25, %r2539;
	add.s32 	%r2378, %r2377, %r44;
	and.b32  	%r2379, %r2378, 1;
	neg.s32 	%r2380, %r2379;
	and.b32  	%r2381, %r2380, 1040;
	bfe.s32 	%r2382, %r2378, 1, 1;
	and.b32  	%r2383, %r2382, 520;
	bfe.s32 	%r2384, %r2378, 2, 1;
	and.b32  	%r2385, %r2384, 260;
	bfe.u32 	%r2386, %r2378, 6, 2;
	mul.lo.s32 	%r2387, %r2386, 2081;
	bfe.s32 	%r2388, %r2378, 4, 1;
	and.b32  	%r2389, %r2388, 65;
	bfe.s32 	%r2390, %r2378, 3, 1;
	and.b32  	%r2391, %r2390, 130;
	or.b32  	%r2392, %r2381, %r26;
	or.b32  	%r2393, %r2383, %r27;
	or.b32  	%r2394, %r2393, %r2392;
	add.s32 	%r2395, %r2394, %r2385;
	add.s32 	%r2396, %r2395, %r2387;
	add.s32 	%r2397, %r2396, %r2389;
	add.s32 	%r2398, %r2397, %r2391;
	mul.wide.u32 	%rd88, %r2398, 4;
	add.s64 	%rd90, %rd46, %rd88;
	ld.shared.u32 	%r2535, [%rd90];
	// begin inline asm
	mov.b32 %r570, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r581, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r569, %r2535, -2004318072;
	mov.u32 	%r568, 983055;
	// begin inline asm
	lop3.b32 %r567, %r568, %r569, %r570, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r571, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r572, %r570, %r571;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r575, %r567, %r572;
	// end inline asm
	mov.u32 	%r579, 15728880;
	// begin inline asm
	lop3.b32 %r578, %r579, %r569, %r581, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r582, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r583, %r581, %r582;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r586, %r578, %r583;
	// end inline asm
	shr.u32 	%r591, %r569, 8;
	// begin inline asm
	lop3.b32 %r589, %r568, %r591, %r570, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r593, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r594, %r570, %r593;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r597, %r589, %r594;
	// end inline asm
	// begin inline asm
	lop3.b32 %r600, %r579, %r591, %r581, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r604, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r605, %r581, %r604;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r608, %r600, %r605;
	// end inline asm
	// begin inline asm
	mov.b32 %r616, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r627, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r615, %r2543, -2004318072;
	// begin inline asm
	lop3.b32 %r613, %r568, %r615, %r616, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r617, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r618, %r616, %r617;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r621, %r613, %r618;
	// end inline asm
	// begin inline asm
	lop3.b32 %r624, %r579, %r615, %r627, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r628, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r629, %r627, %r628;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r632, %r624, %r629;
	// end inline asm
	shr.u32 	%r637, %r615, 8;
	// begin inline asm
	lop3.b32 %r635, %r568, %r637, %r616, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r639, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r640, %r616, %r639;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r643, %r635, %r640;
	// end inline asm
	// begin inline asm
	lop3.b32 %r646, %r579, %r637, %r627, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r650, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r651, %r627, %r650;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r654, %r646, %r651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r659, %r161, %r621, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r665, %r161, %r632, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r671, %r161, %r643, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r677, %r161, %r654, %r2516;
	// end inline asm
	// begin inline asm
	mov.b32 %r686, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r697, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r685, %r2518, -2004318072;
	// begin inline asm
	lop3.b32 %r683, %r568, %r685, %r686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r687, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r688, %r686, %r687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r691, %r683, %r688;
	// end inline asm
	// begin inline asm
	lop3.b32 %r694, %r579, %r685, %r697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r698, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r699, %r697, %r698;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r702, %r694, %r699;
	// end inline asm
	shr.u32 	%r707, %r685, 8;
	// begin inline asm
	lop3.b32 %r705, %r568, %r707, %r686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r709, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r710, %r686, %r709;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r713, %r705, %r710;
	// end inline asm
	// begin inline asm
	lop3.b32 %r716, %r579, %r707, %r697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r720, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r721, %r697, %r720;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r724, %r716, %r721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r727, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r729, %r727, %r691, %r659;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r733, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r735, %r733, %r702, %r665;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r739, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r741, %r739, %r713, %r671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r745, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r747, %r745, %r724, %r677;
	// end inline asm
	// begin inline asm
	mov.b32 %r756, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r767, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r755, %r2522, -2004318072;
	// begin inline asm
	lop3.b32 %r753, %r568, %r755, %r756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r758, %r756, %r757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r761, %r753, %r758;
	// end inline asm
	// begin inline asm
	lop3.b32 %r764, %r579, %r755, %r767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r769, %r767, %r768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r772, %r764, %r769;
	// end inline asm
	shr.u32 	%r777, %r755, 8;
	// begin inline asm
	lop3.b32 %r775, %r568, %r777, %r756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r779, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r780, %r756, %r779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r783, %r775, %r780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r786, %r579, %r777, %r767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r790, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r791, %r767, %r790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r794, %r786, %r791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r799, %r223, %r761, %r729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r805, %r223, %r772, %r735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r811, %r223, %r783, %r741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r817, %r223, %r794, %r747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r821, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r852, %r821, %r575, %r799;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r827, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r849, %r827, %r586, %r805;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r833, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r861, %r833, %r597, %r811;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r839, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r858, %r839, %r608, %r817;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r845, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r847, %r845, %r849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r850, %r257, %r852, %r847;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r854, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r856, %r854, %r858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r859, %r257, %r861, %r856;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r863, %r260, %r852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r866, %r257, %r849, %r863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r870, %r260, %r861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r873, %r257, %r858, %r870;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r904, %r901}, {%r263, %r269, %r266, %r272}, {%r850, %r866}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r913, %r910}, {%r263, %r269, %r266, %r272}, {%r859, %r873}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r897, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r899, %r897, %r901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r902, %r275, %r904, %r899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r906, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r908, %r906, %r910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r911, %r275, %r913, %r908;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r915, %r278, %r904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r918, %r275, %r901, %r915;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r922, %r278, %r913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r925, %r275, %r910, %r922;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r929, %r930}, {%r281, %r287, %r284, %r290}, {%r902, %r918}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r939, %r940}, {%r281, %r287, %r284, %r290}, {%r911, %r925}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r949, %r55, %r929;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r952, %r55, %r930;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r955, %r55, %r939;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r958, %r55, %r940;
	// end inline asm
	// begin inline asm
	mov.b32 %r961, {%rs267, %rs267};
	// end inline asm
	mov.u16 	%rs58, 18176;
	// begin inline asm
	mov.b32 %r962, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r963, %r949, %r961;
	// end inline asm
	// begin inline asm
	min.f16x2 %r966, %r963, %r962;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r971, %r952, %r969;
	// end inline asm
	// begin inline asm
	min.f16x2 %r974, %r971, %r970;
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r979, %r955, %r977;
	// end inline asm
	// begin inline asm
	min.f16x2 %r982, %r979, %r978;
	// end inline asm
	// begin inline asm
	mov.b32 %r985, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r987, %r958, %r985;
	// end inline asm
	// begin inline asm
	min.f16x2 %r990, %r987, %r986;
	// end inline asm
	mov.u16 	%rs72, 26112;
	// begin inline asm
	mov.b32 %r996, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r994, %r966, %r996;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r997, %r974, %r996;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1000, %r982, %r996;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1003, %r990, %r996;
	// end inline asm
	mov.u32 	%r1009, 25152;
	// begin inline asm
	prmt.b32 %r1006, %r994, %r1000, %r1009;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1010, %r997, %r1003, %r1009;
	// end inline asm
	shl.b32 	%r1017, %r1010, 4;
	mov.u32 	%r1015, 252645135;
	// begin inline asm
	lop3.b32 %r1014, %r1015, %r1006, %r1017, 202;
	// end inline asm
	st.shared.u32 	[%rd149], %r1014;
	or.b32  	%r2399, %r28, %r2381;
	add.s32 	%r2400, %r2393, %r2399;
	add.s32 	%r2401, %r2400, %r2385;
	add.s32 	%r2402, %r2401, %r2387;
	add.s32 	%r2403, %r2402, %r2389;
	add.s32 	%r2404, %r2403, %r2391;
	mul.wide.u32 	%rd91, %r2404, 4;
	add.s64 	%rd92, %rd46, %rd91;
	ld.shared.u32 	%r2536, [%rd92];
	// begin inline asm
	mov.b32 %r1023, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1022, %r2536, -2004318072;
	// begin inline asm
	lop3.b32 %r1020, %r568, %r1022, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1025, %r1023, %r1024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1028, %r1020, %r1025;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1031, %r579, %r1022, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1036, %r1034, %r1035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1039, %r1031, %r1036;
	// end inline asm
	shr.u32 	%r1044, %r1022, 8;
	// begin inline asm
	lop3.b32 %r1042, %r568, %r1044, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1046, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1047, %r1023, %r1046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1050, %r1042, %r1047;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1053, %r579, %r1044, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1057, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1058, %r1034, %r1057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1061, %r1053, %r1058;
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1080, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1068, %r2542, -2004318072;
	// begin inline asm
	lop3.b32 %r1066, %r568, %r1068, %r1069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1069, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1077, %r579, %r1068, %r1080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1081, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1082, %r1080, %r1081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1085, %r1077, %r1082;
	// end inline asm
	shr.u32 	%r1090, %r1068, 8;
	// begin inline asm
	lop3.b32 %r1088, %r568, %r1090, %r1069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1092, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1093, %r1069, %r1092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1096, %r1088, %r1093;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1099, %r579, %r1090, %r1080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1103, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1104, %r1080, %r1103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1107, %r1099, %r1104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r161, %r1074, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1118, %r161, %r1085, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r161, %r1096, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r161, %r1107, %r2516;
	// end inline asm
	// begin inline asm
	mov.b32 %r1139, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1150, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1138, %r2519, -2004318072;
	// begin inline asm
	lop3.b32 %r1136, %r568, %r1138, %r1139, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1140, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1141, %r1139, %r1140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1144, %r1136, %r1141;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1147, %r579, %r1138, %r1150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1151, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1152, %r1150, %r1151;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1155, %r1147, %r1152;
	// end inline asm
	shr.u32 	%r1160, %r1138, 8;
	// begin inline asm
	lop3.b32 %r1158, %r568, %r1160, %r1139, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1162, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1163, %r1139, %r1162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1166, %r1158, %r1163;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1169, %r579, %r1160, %r1150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1173, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1174, %r1150, %r1173;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1177, %r1169, %r1174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1180, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1182, %r1180, %r1144, %r1112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1186, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r1186, %r1155, %r1118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1192, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r1192, %r1166, %r1124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1198, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1200, %r1198, %r1177, %r1130;
	// end inline asm
	// begin inline asm
	mov.b32 %r1209, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1220, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1208, %r2523, -2004318072;
	// begin inline asm
	lop3.b32 %r1206, %r568, %r1208, %r1209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1210, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1211, %r1209, %r1210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1214, %r1206, %r1211;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1217, %r579, %r1208, %r1220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1221, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1222, %r1220, %r1221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1225, %r1217, %r1222;
	// end inline asm
	shr.u32 	%r1230, %r1208, 8;
	// begin inline asm
	lop3.b32 %r1228, %r568, %r1230, %r1209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1232, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1233, %r1209, %r1232;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1236, %r1228, %r1233;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1239, %r579, %r1230, %r1220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1243, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1244, %r1220, %r1243;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1247, %r1239, %r1244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r223, %r1214, %r1182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1258, %r223, %r1225, %r1188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1264, %r223, %r1236, %r1194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r223, %r1247, %r1200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1274, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1305, %r1274, %r1028, %r1252;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1280, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1302, %r1280, %r1039, %r1258;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1286, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r1286, %r1050, %r1264;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1292, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1311, %r1292, %r1061, %r1270;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1298, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1300, %r1298, %r1302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1303, %r257, %r1305, %r1300;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1307, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1309, %r1307, %r1311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1312, %r257, %r1314, %r1309;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1316, %r260, %r1305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1319, %r257, %r1302, %r1316;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1323, %r260, %r1314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1326, %r257, %r1311, %r1323;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1357, %r1354}, {%r263, %r269, %r266, %r272}, {%r1303, %r1319}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1366, %r1363}, {%r263, %r269, %r266, %r272}, {%r1312, %r1326}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1350, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1352, %r1350, %r1354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r275, %r1357, %r1352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1359, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1361, %r1359, %r1363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r275, %r1366, %r1361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1368, %r278, %r1357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r275, %r1354, %r1368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1375, %r278, %r1366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1378, %r275, %r1363, %r1375;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1382, %r1383}, {%r281, %r287, %r284, %r290}, {%r1355, %r1371}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1392, %r1393}, {%r281, %r287, %r284, %r290}, {%r1364, %r1378}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1402, %r55, %r1382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1405, %r55, %r1383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1408, %r55, %r1392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1411, %r55, %r1393;
	// end inline asm
	// begin inline asm
	mov.b32 %r1414, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1415, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1416, %r1402, %r1414;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1419, %r1416, %r1415;
	// end inline asm
	// begin inline asm
	mov.b32 %r1422, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1423, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1424, %r1405, %r1422;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1427, %r1424, %r1423;
	// end inline asm
	// begin inline asm
	mov.b32 %r1430, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1431, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1432, %r1408, %r1430;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1435, %r1432, %r1431;
	// end inline asm
	// begin inline asm
	mov.b32 %r1438, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1439, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1440, %r1411, %r1438;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1443, %r1440, %r1439;
	// end inline asm
	// begin inline asm
	mov.b32 %r1449, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1447, %r1419, %r1449;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1450, %r1427, %r1449;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1453, %r1435, %r1449;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1456, %r1443, %r1449;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1459, %r1447, %r1453, %r1009;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1463, %r1450, %r1456, %r1009;
	// end inline asm
	shl.b32 	%r1470, %r1463, 4;
	// begin inline asm
	lop3.b32 %r1467, %r1015, %r1459, %r1470, 202;
	// end inline asm
	st.shared.u32 	[%rd150], %r1467;
	add.s32 	%r2405, %r29, %r2381;
	or.b32  	%r2406, %r2405, %r2383;
	add.s32 	%r2407, %r2406, %r2385;
	add.s32 	%r2408, %r2407, %r2387;
	add.s32 	%r2409, %r2408, %r2389;
	add.s32 	%r2410, %r2409, %r2391;
	mul.wide.u32 	%rd93, %r2410, 4;
	add.s64 	%rd94, %rd46, %rd93;
	ld.shared.u32 	%r2537, [%rd94];
	// begin inline asm
	mov.b32 %r1476, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1487, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1475, %r2537, -2004318072;
	// begin inline asm
	lop3.b32 %r1473, %r568, %r1475, %r1476, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1477, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1478, %r1476, %r1477;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1481, %r1473, %r1478;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1484, %r579, %r1475, %r1487, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1488, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1489, %r1487, %r1488;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1492, %r1484, %r1489;
	// end inline asm
	shr.u32 	%r1497, %r1475, 8;
	// begin inline asm
	lop3.b32 %r1495, %r568, %r1497, %r1476, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1499, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1500, %r1476, %r1499;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1503, %r1495, %r1500;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1506, %r579, %r1497, %r1487, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1510, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1511, %r1487, %r1510;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1514, %r1506, %r1511;
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1533, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1521, %r2541, -2004318072;
	// begin inline asm
	lop3.b32 %r1519, %r568, %r1521, %r1522, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1523, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1524, %r1522, %r1523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1527, %r1519, %r1524;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1530, %r579, %r1521, %r1533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1534, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1535, %r1533, %r1534;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1538, %r1530, %r1535;
	// end inline asm
	shr.u32 	%r1543, %r1521, 8;
	// begin inline asm
	lop3.b32 %r1541, %r568, %r1543, %r1522, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1545, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1546, %r1522, %r1545;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1549, %r1541, %r1546;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1552, %r579, %r1543, %r1533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1556, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1557, %r1533, %r1556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1560, %r1552, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1565, %r161, %r1527, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1571, %r161, %r1538, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1577, %r161, %r1549, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1583, %r161, %r1560, %r2516;
	// end inline asm
	// begin inline asm
	mov.b32 %r1592, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1603, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1591, %r2520, -2004318072;
	// begin inline asm
	lop3.b32 %r1589, %r568, %r1591, %r1592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1593, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1594, %r1592, %r1593;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1597, %r1589, %r1594;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1600, %r579, %r1591, %r1603, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1604, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1605, %r1603, %r1604;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1608, %r1600, %r1605;
	// end inline asm
	shr.u32 	%r1613, %r1591, 8;
	// begin inline asm
	lop3.b32 %r1611, %r568, %r1613, %r1592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1615, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1616, %r1592, %r1615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1619, %r1611, %r1616;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1622, %r579, %r1613, %r1603, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1626, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1627, %r1603, %r1626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1630, %r1622, %r1627;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1633, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r1633, %r1597, %r1565;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1639, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r1639, %r1608, %r1571;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1645, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1647, %r1645, %r1619, %r1577;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1651, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r1651, %r1630, %r1583;
	// end inline asm
	// begin inline asm
	mov.b32 %r1662, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1673, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1661, %r2524, -2004318072;
	// begin inline asm
	lop3.b32 %r1659, %r568, %r1661, %r1662, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1663, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1664, %r1662, %r1663;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1667, %r1659, %r1664;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1670, %r579, %r1661, %r1673, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1674, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1675, %r1673, %r1674;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1678, %r1670, %r1675;
	// end inline asm
	shr.u32 	%r1683, %r1661, 8;
	// begin inline asm
	lop3.b32 %r1681, %r568, %r1683, %r1662, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1685, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1686, %r1662, %r1685;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1689, %r1681, %r1686;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1692, %r579, %r1683, %r1673, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1696, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1697, %r1673, %r1696;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1700, %r1692, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r223, %r1667, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r223, %r1678, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r223, %r1689, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r223, %r1700, %r1653;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1727, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1758, %r1727, %r1481, %r1705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1733, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r1733, %r1492, %r1711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1739, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r1739, %r1503, %r1717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1745, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r1745, %r1514, %r1723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1751, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r1751, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r257, %r1758, %r1753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1760, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1762, %r1760, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r257, %r1767, %r1762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r260, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r257, %r1755, %r1769;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r260, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r257, %r1764, %r1776;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1810, %r1807}, {%r263, %r269, %r266, %r272}, {%r1756, %r1772}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1819, %r1816}, {%r263, %r269, %r266, %r272}, {%r1765, %r1779}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1803, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1805, %r1803, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r275, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1812, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1814, %r1812, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r275, %r1819, %r1814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r278, %r1810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r275, %r1807, %r1821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1828, %r278, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r275, %r1816, %r1828;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1835, %r1836}, {%r281, %r287, %r284, %r290}, {%r1808, %r1824}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1845, %r1846}, {%r281, %r287, %r284, %r290}, {%r1817, %r1831}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1855, %r55, %r1835;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1858, %r55, %r1836;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r55, %r1845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1864, %r55, %r1846;
	// end inline asm
	// begin inline asm
	mov.b32 %r1867, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1868, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1869, %r1855, %r1867;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1872, %r1869, %r1868;
	// end inline asm
	// begin inline asm
	mov.b32 %r1875, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1876, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1877, %r1858, %r1875;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1880, %r1877, %r1876;
	// end inline asm
	// begin inline asm
	mov.b32 %r1883, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1884, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1885, %r1861, %r1883;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1888, %r1885, %r1884;
	// end inline asm
	// begin inline asm
	mov.b32 %r1891, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r1892, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1893, %r1864, %r1891;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1896, %r1893, %r1892;
	// end inline asm
	// begin inline asm
	mov.b32 %r1902, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1900, %r1872, %r1902;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1903, %r1880, %r1902;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1906, %r1888, %r1902;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1909, %r1896, %r1902;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1912, %r1900, %r1906, %r1009;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1916, %r1903, %r1909, %r1009;
	// end inline asm
	shl.b32 	%r1923, %r1916, 4;
	// begin inline asm
	lop3.b32 %r1920, %r1015, %r1912, %r1923, 202;
	// end inline asm
	st.shared.u32 	[%rd151], %r1920;
	add.s32 	%r2411, %r30, %r2381;
	add.s32 	%r2412, %r2411, %r2383;
	add.s32 	%r2413, %r2412, %r2385;
	add.s32 	%r2414, %r2413, %r2387;
	add.s32 	%r2415, %r2414, %r2389;
	add.s32 	%r2416, %r2415, %r2391;
	mul.wide.u32 	%rd95, %r2416, 4;
	add.s64 	%rd96, %rd46, %rd95;
	ld.shared.u32 	%r2538, [%rd96];
	// begin inline asm
	mov.b32 %r1929, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1940, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1928, %r2538, -2004318072;
	// begin inline asm
	lop3.b32 %r1926, %r568, %r1928, %r1929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1930, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1931, %r1929, %r1930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1934, %r1926, %r1931;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1937, %r579, %r1928, %r1940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1941, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1942, %r1940, %r1941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1945, %r1937, %r1942;
	// end inline asm
	shr.u32 	%r1950, %r1928, 8;
	// begin inline asm
	lop3.b32 %r1948, %r568, %r1950, %r1929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1952, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1953, %r1929, %r1952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1956, %r1948, %r1953;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1959, %r579, %r1950, %r1940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1963, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1964, %r1940, %r1963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1967, %r1959, %r1964;
	// end inline asm
	// begin inline asm
	mov.b32 %r1975, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r1986, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r1974, %r2540, -2004318072;
	// begin inline asm
	lop3.b32 %r1972, %r568, %r1974, %r1975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1976, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1977, %r1975, %r1976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1980, %r1972, %r1977;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1983, %r579, %r1974, %r1986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1987, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1988, %r1986, %r1987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1991, %r1983, %r1988;
	// end inline asm
	shr.u32 	%r1996, %r1974, 8;
	// begin inline asm
	lop3.b32 %r1994, %r568, %r1996, %r1975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1998, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1999, %r1975, %r1998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2002, %r1994, %r1999;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2005, %r579, %r1996, %r1986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2009, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2010, %r1986, %r2009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2013, %r2005, %r2010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r161, %r1980, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r161, %r1991, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r161, %r2002, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2036, %r161, %r2013, %r2516;
	// end inline asm
	// begin inline asm
	mov.b32 %r2045, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r2056, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r2044, %r2521, -2004318072;
	// begin inline asm
	lop3.b32 %r2042, %r568, %r2044, %r2045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2046, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2047, %r2045, %r2046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2050, %r2042, %r2047;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2053, %r579, %r2044, %r2056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2057, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2058, %r2056, %r2057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2061, %r2053, %r2058;
	// end inline asm
	shr.u32 	%r2066, %r2044, 8;
	// begin inline asm
	lop3.b32 %r2064, %r568, %r2066, %r2045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2068, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2069, %r2045, %r2068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2072, %r2064, %r2069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2075, %r579, %r2066, %r2056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2079, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2080, %r2056, %r2079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2083, %r2075, %r2080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2086, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2088, %r2086, %r2050, %r2018;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2092, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r2092, %r2061, %r2024;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2098, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r2098, %r2072, %r2030;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2104, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2106, %r2104, %r2083, %r2036;
	// end inline asm
	// begin inline asm
	mov.b32 %r2115, {%rs243, %rs243};
	// end inline asm
	// begin inline asm
	mov.b32 %r2126, {%rs245, %rs245};
	// end inline asm
	xor.b32  	%r2114, %r2525, -2004318072;
	// begin inline asm
	lop3.b32 %r2112, %r568, %r2114, %r2115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2116, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2117, %r2115, %r2116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2120, %r2112, %r2117;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2123, %r579, %r2114, %r2126, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2127, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2128, %r2126, %r2127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2131, %r2123, %r2128;
	// end inline asm
	shr.u32 	%r2136, %r2114, 8;
	// begin inline asm
	lop3.b32 %r2134, %r568, %r2136, %r2115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2138, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2139, %r2115, %r2138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2142, %r2134, %r2139;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2145, %r579, %r2136, %r2126, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2149, {%rs253, %rs253};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2150, %r2126, %r2149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2153, %r2145, %r2150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r223, %r2120, %r2088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r223, %r2131, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r223, %r2142, %r2100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2176, %r223, %r2153, %r2106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2180, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2211, %r2180, %r1934, %r2158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2186, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2208, %r2186, %r1945, %r2164;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2192, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r2192, %r1956, %r2170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2198, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2217, %r2198, %r1967, %r2176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2204, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2206, %r2204, %r2208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r257, %r2211, %r2206;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2213, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2215, %r2213, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r257, %r2220, %r2215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r260, %r2211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r257, %r2208, %r2222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r260, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r257, %r2217, %r2229;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2263, %r2260}, {%r263, %r269, %r266, %r272}, {%r2209, %r2225}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2272, %r2269}, {%r263, %r269, %r266, %r272}, {%r2218, %r2232}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2256, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2258, %r2256, %r2260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2261, %r275, %r2263, %r2258;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2265, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2267, %r2265, %r2269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2270, %r275, %r2272, %r2267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2274, %r278, %r2263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2277, %r275, %r2260, %r2274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2281, %r278, %r2272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2284, %r275, %r2269, %r2281;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2288, %r2289}, {%r281, %r287, %r284, %r290}, {%r2261, %r2277}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2298, %r2299}, {%r281, %r287, %r284, %r290}, {%r2270, %r2284}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2308, %r55, %r2288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2311, %r55, %r2289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2314, %r55, %r2298;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2317, %r55, %r2299;
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2322, %r2308, %r2320;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2325, %r2322, %r2321;
	// end inline asm
	// begin inline asm
	mov.b32 %r2328, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2330, %r2311, %r2328;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2333, %r2330, %r2329;
	// end inline asm
	// begin inline asm
	mov.b32 %r2336, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2338, %r2314, %r2336;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2341, %r2338, %r2337;
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs267, %rs267};
	// end inline asm
	// begin inline asm
	mov.b32 %r2345, {%rs58, %rs58};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2346, %r2317, %r2344;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2349, %r2346, %r2345;
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs72, %rs72};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2353, %r2325, %r2355;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2356, %r2333, %r2355;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2359, %r2341, %r2355;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2362, %r2349, %r2355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2365, %r2353, %r2359, %r1009;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2369, %r2356, %r2362, %r1009;
	// end inline asm
	shl.b32 	%r2376, %r2369, 4;
	// begin inline asm
	lop3.b32 %r2373, %r1015, %r2365, %r2376, 202;
	// end inline asm
	st.shared.u32 	[%rd152], %r2373;
	add.s32 	%r2539, %r2539, 64;
	add.s64 	%rd152, %rd152, 8324;
	add.s64 	%rd151, %rd151, 8324;
	add.s64 	%rd150, %rd150, 8324;
	add.s64 	%rd149, %rd149, 8324;
	setp.eq.s32 	%p165, %r2539, 256;
	mov.u32 	%r2531, %r2525;
	mov.u32 	%r2532, %r2524;
	mov.u32 	%r2533, %r2523;
	mov.u32 	%r2534, %r2522;
	mov.u32 	%r2540, %r2521;
	mov.u32 	%r2541, %r2520;
	mov.u32 	%r2542, %r2519;
	mov.u32 	%r2543, %r2518;
	@%p165 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;
$L__BB0_33:                             // %guard_exit10925
                                        //   in Loop: Header=BB0_31 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2422, [%rd6];
	ld.shared.u32 	%r2423, [%rd7+128];
	ld.shared.u32 	%r2430, [%rd7+4];
	ld.shared.u32 	%r2431, [%rd7+132];
	ld.shared.u32 	%r2438, [%rd6+8324];
	ld.shared.u32 	%r2439, [%rd7+8452];
	ld.shared.u32 	%r2446, [%rd7+8328];
	ld.shared.u32 	%r2447, [%rd7+8456];
	ld.shared.u32 	%r2454, [%rd6+16648];
	ld.shared.u32 	%r2455, [%rd7+16776];
	ld.shared.u32 	%r2462, [%rd7+16652];
	ld.shared.u32 	%r2463, [%rd7+16780];
	ld.shared.u32 	%r2470, [%rd6+24972];
	ld.shared.u32 	%r2471, [%rd7+25100];
	ld.shared.u32 	%r2478, [%rd7+24976];
	ld.shared.u32 	%r2479, [%rd7+25104];
	// begin inline asm
	prmt.b32 %r2417, %r2422, %r2423, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2421, %r2422, %r2423, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2425, %r2430, %r2431, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2429, %r2430, %r2431, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2433, %r2438, %r2439, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2437, %r2438, %r2439, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2441, %r2446, %r2447, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2445, %r2446, %r2447, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2449, %r2454, %r2455, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2453, %r2454, %r2455, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2457, %r2462, %r2463, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2461, %r2462, %r2463, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2465, %r2470, %r2471, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2469, %r2470, %r2471, %r483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2473, %r2478, %r2479, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2477, %r2478, %r2479, %r483;
	// end inline asm
	selp.b32 	%r2481, %r2421, %r2417, %p152;
	shfl.sync.bfly.b32	%r88, %r2481, 8, 31, -1;
	selp.b32 	%r2482, %r2429, %r2425, %p152;
	shfl.sync.bfly.b32	%r89, %r2482, 8, 31, -1;
	selp.b32 	%r2483, %r2437, %r2433, %p152;
	shfl.sync.bfly.b32	%r2484, %r2483, 8, 31, -1;
	selp.b32 	%r2485, %r2445, %r2441, %p152;
	shfl.sync.bfly.b32	%r2486, %r2485, 8, 31, -1;
	selp.b32 	%r2487, %r2453, %r2449, %p152;
	shfl.sync.bfly.b32	%r2488, %r2487, 8, 31, -1;
	selp.b32 	%r2489, %r2461, %r2457, %p152;
	shfl.sync.bfly.b32	%r2490, %r2489, 8, 31, -1;
	selp.b32 	%r2491, %r2469, %r2465, %p152;
	shfl.sync.bfly.b32	%r2492, %r2491, 8, 31, -1;
	selp.b32 	%r2493, %r2477, %r2473, %p152;
	shfl.sync.bfly.b32	%r2494, %r2493, 8, 31, -1;
	setp.eq.s32 	%p167, %r45, 0;
	shl.b32 	%r2517, %r44, 10;
	@%p167 bra 	$L__BB0_35;
// %bb.34:                              // %pass10063
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r2495, %r89, %r2429, %p152;
	selp.b32 	%r2496, %r2425, %r89, %p152;
	selp.b32 	%r2497, %r88, %r2421, %p152;
	selp.b32 	%r2498, %r2417, %r88, %p152;
	or.b32  	%r2500, %r2517, %r22;
	or.b32  	%r2501, %r2500, %r31;
	cvt.u64.u32 	%rd97, %r2501;
	add.s64 	%rd98, %rd97, %rd8;
	shr.u64 	%rd99, %rd98, 39;
	add.s64 	%rd100, %rd98, %rd99;
	shr.s64 	%rd101, %rd100, 25;
	setp.lt.s64 	%p169, %rd98, 0;
	and.b64  	%rd102, %rd100, -33554432;
	setp.ne.s64 	%p170, %rd102, %rd98;
	and.pred  	%p171, %p169, %p170;
	selp.u64 	%rd103, 1, 0, %p171;
	sub.s64 	%rd104, %rd103, %rd101;
	shl.b64 	%rd105, %rd104, 25;
	add.s64 	%rd106, %rd105, %rd98;
	shl.b64 	%rd107, %rd106, 2;
	add.s64 	%rd108, %rd3, %rd107;
	st.global.v4.u32 	[%rd108], {%r2498, %r2496, %r2497, %r2495};
$L__BB0_35:                             // %pass10113
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r82, %r44, 64;
	setp.lt.u32 	%p172, %r82, 192;
	@%p172 bra 	$L__BB0_37;
// %bb.36:                              // %pass10170
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r90, %r2433, %r2484, %p152;
	selp.b32 	%r91, %r2484, %r2437, %p152;
	selp.b32 	%r92, %r2441, %r2486, %p152;
	selp.b32 	%r93, %r2486, %r2445, %p152;
	shl.b32 	%r2502, %r82, 10;
	or.b32  	%r2503, %r2502, %r22;
	or.b32  	%r2504, %r2503, %r31;
	cvt.u64.u32 	%rd109, %r2504;
	add.s64 	%rd110, %rd109, %rd8;
	shr.u64 	%rd111, %rd110, 39;
	add.s64 	%rd112, %rd110, %rd111;
	shr.s64 	%rd113, %rd112, 25;
	setp.lt.s64 	%p173, %rd110, 0;
	and.b64  	%rd114, %rd112, -33554432;
	setp.ne.s64 	%p174, %rd114, %rd110;
	and.pred  	%p175, %p173, %p174;
	selp.u64 	%rd115, 1, 0, %p175;
	sub.s64 	%rd116, %rd115, %rd113;
	shl.b64 	%rd117, %rd116, 25;
	add.s64 	%rd118, %rd117, %rd110;
	shl.b64 	%rd119, %rd118, 2;
	add.s64 	%rd120, %rd3, %rd119;
	st.global.v4.u32 	[%rd120], {%r90, %r92, %r91, %r93};
$L__BB0_37:                             // %pass10220
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r83, %r44, 128;
	selp.b32 	%r98, %r2465, %r2492, %p152;
	selp.b32 	%r99, %r2492, %r2469, %p152;
	selp.b32 	%r100, %r2473, %r2494, %p152;
	selp.b32 	%r101, %r2494, %r2477, %p152;
	setp.lt.u32 	%p176, %r83, 192;
	@%p176 bra 	$L__BB0_39;
// %bb.38:                              // %pass10277
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r94, %r2449, %r2488, %p152;
	selp.b32 	%r95, %r2488, %r2453, %p152;
	selp.b32 	%r96, %r2457, %r2490, %p152;
	selp.b32 	%r97, %r2490, %r2461, %p152;
	shl.b32 	%r2505, %r83, 10;
	or.b32  	%r2506, %r2505, %r22;
	or.b32  	%r2507, %r2506, %r31;
	cvt.u64.u32 	%rd121, %r2507;
	add.s64 	%rd122, %rd121, %rd8;
	shr.u64 	%rd123, %rd122, 39;
	add.s64 	%rd124, %rd122, %rd123;
	shr.s64 	%rd125, %rd124, 25;
	setp.lt.s64 	%p177, %rd122, 0;
	and.b64  	%rd126, %rd124, -33554432;
	setp.ne.s64 	%p178, %rd126, %rd122;
	and.pred  	%p179, %p177, %p178;
	selp.u64 	%rd127, 1, 0, %p179;
	sub.s64 	%rd128, %rd127, %rd125;
	shl.b64 	%rd129, %rd128, 25;
	add.s64 	%rd130, %rd129, %rd122;
	shl.b64 	%rd131, %rd130, 2;
	add.s64 	%rd132, %rd3, %rd131;
	st.global.v4.u32 	[%rd132], {%r94, %r96, %r95, %r97};
	bra.uni 	$L__BB0_39;
$L__BB0_40:                             // %L23086
	st.global.u32 	[%rd5], %r2516;
	ret;
$L__BB0_9:                              // %L177
	mov.u32 	%r2515, 2;
	st.global.u32 	[%rd5], %r2515;
	mov.u64 	%rd147, exception2065;
	cvta.global.u64 	%rd148, %rd147;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd148;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r102;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L283
	mov.u32 	%r2514, 3;
	st.global.u32 	[%rd5], %r2514;
	mov.u64 	%rd145, exception2065;
	cvta.global.u64 	%rd146, %rd145;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd146;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r102;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd38, exception1;
	cvta.global.u64 	%rd39, %rd38;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd39;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r102;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd40, exception1;
	cvta.global.u64 	%rd41, %rd40;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd41;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r102;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
