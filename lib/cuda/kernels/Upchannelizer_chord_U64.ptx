// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11733
(
	.param .align 8 .b8 julia_power_by_squaring_11733_param_0[16],
	.param .b64 julia_power_by_squaring_11733_param_1,
	.param .b64 julia_power_by_squaring_11733_param_2
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3408[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13429[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<233>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8001>;
	.reg .f32 	%f<832>;
	.reg .b64 	%rd<159>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r162, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r167, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r167, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd37, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r163, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r168, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r169, %r168, %r1;
	or.b32  	%r170, %r169, %r4;
	mul.wide.u32 	%rd43, %r170, 4;
	add.s64 	%rd4, %rd37, %rd43;
	mov.u32 	%r171, 1;
	st.global.u32 	[%rd4], %r171;
	setp.lt.s32 	%p2, %r163, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L115
	ld.param.u32 	%r164, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r164, %r163;
	setp.gt.s32 	%p4, %r164, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L125
	ld.param.u32 	%r165, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r172, %r164, %r163;
	and.b32  	%r173, %r172, 255;
	setp.ne.s32 	%p6, %r173, 0;
	setp.lt.s32 	%p7, %r165, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r166, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r166, %r165;
	setp.gt.s32 	%p10, %r166, 4096;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L141
	not.b32 	%r174, %r165;
	add.s32 	%r175, %r174, %r166;
	and.b32  	%r176, %r175, 3;
	setp.eq.s32 	%p12, %r176, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass145
	bfe.u32 	%r85, %r1, 2, 1;
	shr.u32 	%r86, %r1, 4;
	shl.b32 	%r185, %r86, 1;
	shl.b32 	%r186, %r85, 2;
	shl.b32 	%r187, %r1, 3;
	and.b32  	%r188, %r187, 24;
	or.b32  	%r189, %r186, %r188;
	or.b32  	%r190, %r185, %r189;
	bfe.u32 	%r191, %r1, 3, 1;
	or.b32  	%r88, %r191, %r190;
	or.b32  	%r89, %r88, 32;
	mov.f32 	%f145, 0f40000000;
	mov.f32 	%f146, 0f437F0000;
	div.approx.f32 	%f85, %f146, %f145;
	cvt.rn.f32.s32 	%f147, %r88;
	sub.f32 	%f148, %f147, %f85;
	mov.f32 	%f177, 0f42800000;
	div.approx.f32 	%f87, %f148, %f177;
	setp.ne.f32 	%p18, %f87, 0f00000000;
	mov.f32 	%f807, 0f3F800000;
	mov.f32 	%f800, %f807;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L484
	sin.approx.f32 	%f178, %f87;
	div.approx.f32 	%f800, %f178, %f87;
$L__BB0_10:                             // %L487
	cvt.rn.f32.s32 	%f181, %r89;
	sub.f32 	%f182, %f181, %f85;
	div.approx.f32 	%f5, %f182, %f177;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f801, %f807;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L504
	sin.approx.f32 	%f212, %f5;
	div.approx.f32 	%f801, %f212, %f5;
$L__BB0_12:                             // %L507
	or.b32  	%r209, %r88, 64;
	or.b32  	%r6, %r88, 96;
	cvt.rn.f32.s32 	%f216, %r209;
	sub.f32 	%f217, %f216, %f85;
	div.approx.f32 	%f9, %f217, %f177;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f802, %f807;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L586
	sin.approx.f32 	%f247, %f9;
	div.approx.f32 	%f802, %f247, %f9;
$L__BB0_14:                             // %L589
	shl.b32 	%r77, %r1, 2;
	cvt.rn.f32.s32 	%f250, %r6;
	sub.f32 	%f251, %f250, %f85;
	div.approx.f32 	%f14, %f251, %f177;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f803, %f807;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L606
	sin.approx.f32 	%f281, %f14;
	div.approx.f32 	%f803, %f281, %f14;
$L__BB0_16:                             // %L609
	and.b32  	%r177, %r77, 4;
	and.b32  	%r180, %r1, 18;
	or.b32  	%r227, %r88, 128;
	or.b32  	%r8, %r88, 160;
	cvt.rn.f32.s32 	%f285, %r227;
	sub.f32 	%f286, %f285, %f85;
	div.approx.f32 	%f18, %f286, %f177;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f804, %f807;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L688
	sin.approx.f32 	%f316, %f18;
	div.approx.f32 	%f804, %f316, %f18;
$L__BB0_18:                             // %L691
	and.b32  	%r78, %r77, 32;
	shl.b32 	%r79, %r1, 1;
	or.b32  	%r181, %r180, %r177;
	cvt.rn.f32.s32 	%f319, %r8;
	sub.f32 	%f320, %f319, %f85;
	div.approx.f32 	%f23, %f320, %f177;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f805, %f807;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L708
	sin.approx.f32 	%f350, %f23;
	div.approx.f32 	%f805, %f350, %f23;
$L__BB0_20:                             // %L711
	and.b32  	%r178, %r79, 8;
	shl.b32 	%r179, %r2, 3;
	or.b32  	%r182, %r181, %r78;
	or.b32  	%r245, %r88, 192;
	or.b32  	%r10, %r88, 224;
	cvt.rn.f32.s32 	%f354, %r245;
	sub.f32 	%f355, %f354, %f85;
	div.approx.f32 	%f27, %f355, %f177;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f806, %f807;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L790
	sin.approx.f32 	%f385, %f27;
	div.approx.f32 	%f806, %f385, %f27;
$L__BB0_22:                             // %L793
	and.b32  	%r81, %r179, 960;
	or.b32  	%r82, %r182, %r178;
	shr.u32 	%r84, %r1, 1;
	shr.u32 	%r87, %r1, 3;
	cvt.rn.f32.s32 	%f388, %r10;
	sub.f32 	%f389, %f388, %f85;
	div.approx.f32 	%f32, %f389, %f177;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L810
	sin.approx.f32 	%f419, %f32;
	div.approx.f32 	%f807, %f419, %f32;
$L__BB0_24:                             // %L813
	or.b32  	%r183, %r82, %r81;
	and.b32  	%r289, %r1, 3;
	and.b32  	%r290, %r87, 2;
	and.b32  	%r291, %r84, 4;
	or.b32  	%r292, %r85, %r290;
	or.b32  	%r14, %r292, %r291;
	mul.lo.s32 	%r293, %r289, %r14;
	shl.b32 	%r294, %r293, 1;
	neg.s32 	%r295, %r294;
	cvt.rn.f32.s32 	%f35, %r295;
	mov.f32 	%f490, 0f41000000;
	div.approx.f32 	%f36, %f35, %f490;
	abs.f32 	%f830, %f36;
	setp.lt.f32 	%p75, %f830, 0f40000000;
	setp.gtu.f32 	%p231, %f830, 0f4B800000;
	mov.f32 	%f822, %f830;
	@%p75 bra 	$L__BB0_94;
// %bb.25:
	@%p231 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_26;
$L__BB0_90:
	mov.b32 	%r91, %f830;
	and.b32  	%r296, %r91, 8388607;
	or.b32  	%r7981, %r296, 1065353216;
	mov.b32 	%f821, %r7981;
	add.s32 	%r297, %r91, -1073741824;
	and.b32  	%r7982, %r297, -8388608;
	setp.eq.s32 	%p82, %r7982, 0;
	@%p82 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f500, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f499,%f500;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r298, %r7982, 192937984;
	add.s32 	%r299, %r7981, %r298;
	mov.b32 	%f501, %r299;
	mul.f32 	%f502, %f499, %f501;
	sub.f32 	%f503, %f501, %f502;
	fma.rn.f32 	%f504, %f503, %f499, %f502;
	sub.f32 	%f505, %f501, %f504;
	fma.rz.f32 	%f506, %f505, %f499, %f504;
	cvt.rzi.f32.f32 	%f507, %f506;
	sub.f32 	%f821, %f501, %f507;
	sub.s32 	%r7982, %r7982, %r298;
	mov.b32 	%r7981, %f821;
	setp.ne.s32 	%p83, %r7982, 0;
	setp.ne.s32 	%p84, %r7981, 0;
	and.pred  	%p85, %p83, %p84;
	@%p85 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p86, %r91, 2139095039;
	selp.f32 	%f508, 0f7FFFFFFF, 0f4B800000, %p86;
	mul.f32 	%f509, %f821, 0f34000000;
	mul.f32 	%f822, %f508, %f509;
	bra.uni 	$L__BB0_94;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f492, %f830, %f145;
	cvt.rzi.f32.f32 	%f820, %f492;
	fma.rn.f32 	%f89, %f820, 0fC0000000, %f830;
	mov.b32 	%r90, %f89;
	setp.lt.u32 	%p77, %r90, 1073741824;
	@%p77 bra 	$L__BB0_89;
// %bb.27:
	setp.lt.u32 	%p78, %r90, -2147483647;
	@%p78 bra 	$L__BB0_87;
// %bb.28:
	add.f32 	%f497, %f820, 0fBF800000;
	setp.lt.f32 	%p81, %f89, 0fC0000000;
	add.f32 	%f498, %f497, 0fBF800000;
	selp.f32 	%f820, %f498, %f497, %p81;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f820, %f820, 0f3F800000;
	setp.ltu.f32 	%p79, %f89, 0f40800000;
	@%p79 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f493, %f820, 0f3F800000;
	fma.rn.f32 	%f495, %f145, 0fC0400000, %f89;
	setp.ge.f32 	%p80, %f495, 0f00000000;
	add.f32 	%f496, %f493, 0f3F800000;
	selp.f32 	%f820, %f496, %f493, %p80;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f822, %f820, 0fC0000000, %f830;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i928
	shr.u32 	%r184, %r183, 1;
	abs.f32 	%f510, %f822;
	setp.gtu.f32 	%p87, %f510, 0f7F800000;
	mov.b32 	%r300, %f36;
	and.b32  	%r98, %r300, -2147483648;
	@%p87 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r301, %f822;
	or.b32  	%r302, %r98, %r301;
	mov.b32 	%f822, %r302;
$L__BB0_96:                             // %__nv_fmodf.exit929
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd44, %r184, 4;
	and.b32  	%r311, %r79, 6;
	mov.u32 	%r312, -8;
	sub.s32 	%r313, %r312, %r311;
	mul.lo.s32 	%r314, %r14, %r313;
	cvt.rn.f32.s32 	%f105, %r314;
	div.approx.f32 	%f106, %f105, %f490;
	abs.f32 	%f818, %f106;
	setp.lt.f32 	%p95, %f818, 0f40000000;
	setp.gtu.f32 	%p232, %f818, 0f4B800000;
	mov.f32 	%f810, %f818;
	@%p95 bra 	$L__BB0_40;
// %bb.29:
	@%p232 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r16, %f818;
	and.b32  	%r315, %r16, 8388607;
	or.b32  	%r7961, %r315, 1065353216;
	mov.b32 	%f809, %r7961;
	add.s32 	%r316, %r16, -1073741824;
	and.b32  	%r7962, %r316, -8388608;
	setp.eq.s32 	%p102, %r7962, 0;
	@%p102 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f551, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f550,%f551;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r317, %r7962, 192937984;
	add.s32 	%r318, %r7961, %r317;
	mov.b32 	%f552, %r318;
	mul.f32 	%f553, %f550, %f552;
	sub.f32 	%f554, %f552, %f553;
	fma.rn.f32 	%f555, %f554, %f550, %f553;
	sub.f32 	%f556, %f552, %f555;
	fma.rz.f32 	%f557, %f556, %f550, %f555;
	cvt.rzi.f32.f32 	%f558, %f557;
	sub.f32 	%f809, %f552, %f558;
	sub.s32 	%r7962, %r7962, %r317;
	mov.b32 	%r7961, %f809;
	setp.ne.s32 	%p103, %r7962, 0;
	setp.ne.s32 	%p104, %r7961, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p106, %r16, 2139095039;
	selp.f32 	%f559, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f560, %f809, 0f34000000;
	mul.f32 	%f810, %f559, %f560;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f543, %f818, %f145;
	cvt.rzi.f32.f32 	%f808, %f543;
	fma.rn.f32 	%f39, %f808, 0fC0000000, %f818;
	mov.b32 	%r15, %f39;
	setp.lt.u32 	%p97, %r15, 1073741824;
	@%p97 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p98, %r15, -2147483647;
	@%p98 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f548, %f808, 0fBF800000;
	setp.lt.f32 	%p101, %f39, 0fC0000000;
	add.f32 	%f549, %f548, 0fBF800000;
	selp.f32 	%f808, %f549, %f548, %p101;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f808, %f808, 0f3F800000;
	setp.ltu.f32 	%p99, %f39, 0f40800000;
	@%p99 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f544, %f808, 0f3F800000;
	fma.rn.f32 	%f546, %f145, 0fC0400000, %f39;
	setp.ge.f32 	%p100, %f546, 0f00000000;
	add.f32 	%f547, %f544, 0f3F800000;
	selp.f32 	%f808, %f547, %f544, %p100;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f810, %f808, 0fC0000000, %f818;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i
	add.s64 	%rd45, %rd1, %rd44;
	abs.f32 	%f561, %f810;
	setp.gtu.f32 	%p107, %f561, 0f7F800000;
	mov.b32 	%r319, %f106;
	and.b32  	%r23, %r319, -2147483648;
	@%p107 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r320, %f810;
	or.b32  	%r321, %r23, %r320;
	mov.b32 	%f810, %r321;
$L__BB0_42:                             // %__nv_fmodf.exit
	ld.global.u32 	%r83, [%rd45];
	mov.u64 	%rd46, 2;
	mov.u64 	%rd47, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r162;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11733, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd48, [retval0+0];
	} // callseq 2
	cvt.rn.f32.s64 	%f594, %rd48;
	div.approx.f32 	%f53, %f35, %f594;
	abs.f32 	%f826, %f53;
	setp.lt.f32 	%p115, %f826, 0f40000000;
	@%p115 bra 	$L__BB0_104;
// %bb.43:
	setp.gtu.f32 	%p116, %f826, 0f4B800000;
	@%p116 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_44;
$L__BB0_100:
	mov.b32 	%r100, %f826;
	and.b32  	%r342, %r100, 8388607;
	or.b32  	%r7983, %r342, 1065353216;
	mov.b32 	%f825, %r7983;
	add.s32 	%r343, %r100, -1073741824;
	and.b32  	%r7984, %r343, -8388608;
	setp.eq.s32 	%p122, %r7984, 0;
	@%p122 bra 	$L__BB0_103;
// %bb.101:                             // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f604, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f603,%f604;
	// end inline asm
$L__BB0_102:                            // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r7984, 192937984;
	add.s32 	%r345, %r7983, %r344;
	mov.b32 	%f605, %r345;
	mul.f32 	%f606, %f603, %f605;
	sub.f32 	%f607, %f605, %f606;
	fma.rn.f32 	%f608, %f607, %f603, %f606;
	sub.f32 	%f609, %f605, %f608;
	fma.rz.f32 	%f610, %f609, %f603, %f608;
	cvt.rzi.f32.f32 	%f611, %f610;
	sub.f32 	%f825, %f605, %f611;
	sub.s32 	%r7984, %r7984, %r344;
	mov.b32 	%r7983, %f825;
	setp.ne.s32 	%p123, %r7984, 0;
	setp.ne.s32 	%p124, %r7983, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_102;
$L__BB0_103:                            // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p126, %r100, 2139095039;
	selp.f32 	%f612, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f613, %f825, 0f34000000;
	mul.f32 	%f826, %f612, %f613;
	bra.uni 	$L__BB0_104;
$L__BB0_44:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f596, %f826, %f145;
	cvt.rzi.f32.f32 	%f824, %f596;
	fma.rn.f32 	%f109, %f824, 0fC0000000, %f826;
	mov.b32 	%r99, %f109;
	setp.lt.u32 	%p117, %r99, 1073741824;
	@%p117 bra 	$L__BB0_99;
// %bb.45:
	setp.lt.u32 	%p118, %r99, -2147483647;
	@%p118 bra 	$L__BB0_97;
// %bb.46:
	add.f32 	%f601, %f824, 0fBF800000;
	setp.lt.f32 	%p121, %f109, 0fC0000000;
	add.f32 	%f602, %f601, 0fBF800000;
	selp.f32 	%f824, %f602, %f601, %p121;
	bra.uni 	$L__BB0_99;
$L__BB0_97:
	add.f32 	%f824, %f824, 0f3F800000;
	setp.ltu.f32 	%p119, %f109, 0f40800000;
	@%p119 bra 	$L__BB0_99;
// %bb.98:                              // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f597, %f824, 0f3F800000;
	fma.rn.f32 	%f599, %f145, 0fC0400000, %f109;
	setp.ge.f32 	%p120, %f599, 0f00000000;
	add.f32 	%f600, %f597, 0f3F800000;
	selp.f32 	%f824, %f600, %f597, %p120;
$L__BB0_99:                             // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f826, %f824, 0fC0000000, %f826;
$L__BB0_104:                            // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f614, %f826;
	setp.gtu.f32 	%p127, %f614, 0f7F800000;
	@%p127 bra 	$L__BB0_106;
// %bb.105:
	mov.b32 	%r346, %f53;
	and.b32  	%r347, %r346, -2147483648;
	mov.b32 	%r348, %f826;
	or.b32  	%r349, %r347, %r348;
	mov.b32 	%f826, %r349;
$L__BB0_106:                            // %__nv_fmodf.exit960
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r162;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11733, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd52, [retval0+0];
	} // callseq 3
	cvt.rn.f32.s64 	%f645, %rd52;
	div.approx.f32 	%f125, %f105, %f645;
	abs.f32 	%f814, %f125;
	setp.lt.f32 	%p135, %f814, 0f40000000;
	@%p135 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p136, %f814, 0f4B800000;
	@%p136 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r29, %f814;
	and.b32  	%r358, %r29, 8388607;
	or.b32  	%r7963, %r358, 1065353216;
	mov.b32 	%f813, %r7963;
	add.s32 	%r359, %r29, -1073741824;
	and.b32  	%r7964, %r359, -8388608;
	setp.eq.s32 	%p142, %r7964, 0;
	@%p142 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f655, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f654,%f655;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r360, %r7964, 192937984;
	add.s32 	%r361, %r7963, %r360;
	mov.b32 	%f656, %r361;
	mul.f32 	%f657, %f654, %f656;
	sub.f32 	%f658, %f656, %f657;
	fma.rn.f32 	%f659, %f658, %f654, %f657;
	sub.f32 	%f660, %f656, %f659;
	fma.rz.f32 	%f661, %f660, %f654, %f659;
	cvt.rzi.f32.f32 	%f662, %f661;
	sub.f32 	%f813, %f656, %f662;
	sub.s32 	%r7964, %r7964, %r360;
	mov.b32 	%r7963, %f813;
	setp.ne.s32 	%p143, %r7964, 0;
	setp.ne.s32 	%p144, %r7963, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p146, %r29, 2139095039;
	selp.f32 	%f663, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f664, %f813, 0f34000000;
	mul.f32 	%f814, %f663, %f664;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f647, %f814, %f145;
	cvt.rzi.f32.f32 	%f812, %f647;
	fma.rn.f32 	%f56, %f812, 0fC0000000, %f814;
	mov.b32 	%r28, %f56;
	setp.lt.u32 	%p137, %r28, 1073741824;
	@%p137 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p138, %r28, -2147483647;
	@%p138 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f652, %f812, 0fBF800000;
	setp.lt.f32 	%p141, %f56, 0fC0000000;
	add.f32 	%f653, %f652, 0fBF800000;
	selp.f32 	%f812, %f653, %f652, %p141;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f812, %f812, 0f3F800000;
	setp.ltu.f32 	%p139, %f56, 0f40800000;
	@%p139 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f648, %f812, 0f3F800000;
	fma.rn.f32 	%f650, %f145, 0fC0400000, %f56;
	setp.ge.f32 	%p140, %f650, 0f00000000;
	add.f32 	%f651, %f648, 0f3F800000;
	selp.f32 	%f812, %f651, %f648, %p140;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f814, %f812, 0fC0000000, %f814;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i866
	abs.f32 	%f665, %f814;
	setp.gtu.f32 	%p147, %f665, 0f7F800000;
	@%p147 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r362, %f125;
	and.b32  	%r363, %r362, -2147483648;
	mov.b32 	%r364, %f814;
	or.b32  	%r365, %r363, %r364;
	mov.b32 	%f814, %r365;
$L__BB0_60:                             // %__nv_fmodf.exit867
	@%p75 bra 	$L__BB0_114;
// %bb.61:
	@%p231 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_62;
$L__BB0_110:
	mov.b32 	%r108, %f830;
	and.b32  	%r380, %r108, 8388607;
	or.b32  	%r7985, %r380, 1065353216;
	mov.b32 	%f829, %r7985;
	add.s32 	%r381, %r108, -1073741824;
	and.b32  	%r7986, %r381, -8388608;
	setp.eq.s32 	%p162, %r7986, 0;
	@%p162 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f707, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f706,%f707;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r382, %r7986, 192937984;
	add.s32 	%r383, %r7985, %r382;
	mov.b32 	%f708, %r383;
	mul.f32 	%f709, %f706, %f708;
	sub.f32 	%f710, %f708, %f709;
	fma.rn.f32 	%f711, %f710, %f706, %f709;
	sub.f32 	%f712, %f708, %f711;
	fma.rz.f32 	%f713, %f712, %f706, %f711;
	cvt.rzi.f32.f32 	%f714, %f713;
	sub.f32 	%f829, %f708, %f714;
	sub.s32 	%r7986, %r7986, %r382;
	mov.b32 	%r7985, %f829;
	setp.ne.s32 	%p163, %r7986, 0;
	setp.ne.s32 	%p164, %r7985, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p166, %r108, 2139095039;
	selp.f32 	%f715, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f716, %f829, 0f34000000;
	mul.f32 	%f830, %f715, %f716;
	bra.uni 	$L__BB0_114;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f699, %f830, %f145;
	cvt.rzi.f32.f32 	%f828, %f699;
	fma.rn.f32 	%f128, %f828, 0fC0000000, %f830;
	mov.b32 	%r107, %f128;
	setp.lt.u32 	%p157, %r107, 1073741824;
	@%p157 bra 	$L__BB0_109;
// %bb.63:
	setp.lt.u32 	%p158, %r107, -2147483647;
	@%p158 bra 	$L__BB0_107;
// %bb.64:
	add.f32 	%f704, %f828, 0fBF800000;
	setp.lt.f32 	%p161, %f128, 0fC0000000;
	add.f32 	%f705, %f704, 0fBF800000;
	selp.f32 	%f828, %f705, %f704, %p161;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f828, %f828, 0f3F800000;
	setp.ltu.f32 	%p159, %f128, 0f40800000;
	@%p159 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f700, %f828, 0f3F800000;
	fma.rn.f32 	%f702, %f145, 0fC0400000, %f128;
	setp.ge.f32 	%p160, %f702, 0f00000000;
	add.f32 	%f703, %f700, 0f3F800000;
	selp.f32 	%f828, %f703, %f700, %p160;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f830, %f828, 0fC0000000, %f830;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f717, %f830;
	setp.gtu.f32 	%p167, %f717, 0f7F800000;
	@%p167 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r384, %f830;
	or.b32  	%r385, %r98, %r384;
	mov.b32 	%f830, %r385;
$L__BB0_116:                            // %__nv_fmodf.exit991
	@%p95 bra 	$L__BB0_76;
// %bb.65:
	@%p232 bra 	$L__BB0_72;
	bra.uni 	$L__BB0_66;
$L__BB0_72:
	mov.b32 	%r39, %f818;
	and.b32  	%r394, %r39, 8388607;
	or.b32  	%r7965, %r394, 1065353216;
	mov.b32 	%f817, %r7965;
	add.s32 	%r395, %r39, -1073741824;
	and.b32  	%r7966, %r395, -8388608;
	setp.eq.s32 	%p182, %r7966, 0;
	@%p182 bra 	$L__BB0_75;
// %bb.73:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f757, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f756,%f757;
	// end inline asm
$L__BB0_74:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r7966, 192937984;
	add.s32 	%r397, %r7965, %r396;
	mov.b32 	%f758, %r397;
	mul.f32 	%f759, %f756, %f758;
	sub.f32 	%f760, %f758, %f759;
	fma.rn.f32 	%f761, %f760, %f756, %f759;
	sub.f32 	%f762, %f758, %f761;
	fma.rz.f32 	%f763, %f762, %f756, %f761;
	cvt.rzi.f32.f32 	%f764, %f763;
	sub.f32 	%f817, %f758, %f764;
	sub.s32 	%r7966, %r7966, %r396;
	mov.b32 	%r7965, %f817;
	setp.ne.s32 	%p183, %r7966, 0;
	setp.ne.s32 	%p184, %r7965, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_74;
$L__BB0_75:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p186, %r39, 2139095039;
	selp.f32 	%f765, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f766, %f817, 0f34000000;
	mul.f32 	%f818, %f765, %f766;
	bra.uni 	$L__BB0_76;
$L__BB0_66:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f749, %f818, %f145;
	cvt.rzi.f32.f32 	%f816, %f749;
	fma.rn.f32 	%f71, %f816, 0fC0000000, %f818;
	mov.b32 	%r38, %f71;
	setp.lt.u32 	%p177, %r38, 1073741824;
	@%p177 bra 	$L__BB0_71;
// %bb.67:
	setp.lt.u32 	%p178, %r38, -2147483647;
	@%p178 bra 	$L__BB0_69;
// %bb.68:
	add.f32 	%f754, %f816, 0fBF800000;
	setp.lt.f32 	%p181, %f71, 0fC0000000;
	add.f32 	%f755, %f754, 0fBF800000;
	selp.f32 	%f816, %f755, %f754, %p181;
	bra.uni 	$L__BB0_71;
$L__BB0_69:
	add.f32 	%f816, %f816, 0f3F800000;
	setp.ltu.f32 	%p179, %f71, 0f40800000;
	@%p179 bra 	$L__BB0_71;
// %bb.70:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f750, %f816, 0f3F800000;
	fma.rn.f32 	%f752, %f145, 0fC0400000, %f71;
	setp.ge.f32 	%p180, %f752, 0f00000000;
	add.f32 	%f753, %f750, 0f3F800000;
	selp.f32 	%f816, %f753, %f750, %p180;
$L__BB0_71:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f818, %f816, 0fC0000000, %f818;
$L__BB0_76:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f767, %f818;
	setp.gtu.f32 	%p187, %f767, 0f7F800000;
	@%p187 bra 	$L__BB0_78;
// %bb.77:
	mov.b32 	%r398, %f818;
	or.b32  	%r399, %r23, %r398;
	mov.b32 	%f818, %r399;
$L__BB0_78:                             // %__nv_fmodf.exit898
	setp.le.s32 	%p195, %r164, %r163;
	mov.u32 	%r7958, 0;
	@%p195 bra 	$L__BB0_86;
// %bb.79:                              // %L1334.lr.ph
	mov.f32 	%f149, 0f43808000;
	mul.lo.s32 	%r269, %r88, 63;
	div.approx.f32 	%f150, %f148, %f149;
	div.approx.f32 	%f184, %f182, %f149;
	div.approx.f32 	%f219, %f217, %f149;
	div.approx.f32 	%f253, %f251, %f149;
	div.approx.f32 	%f288, %f286, %f149;
	div.approx.f32 	%f322, %f320, %f149;
	div.approx.f32 	%f357, %f355, %f149;
	div.approx.f32 	%f391, %f389, %f149;
	add.s32 	%r279, %r269, 96;
	abs.f32 	%f151, %f150;
	abs.f32 	%f185, %f184;
	abs.f32 	%f220, %f219;
	abs.f32 	%f254, %f253;
	abs.f32 	%f289, %f288;
	abs.f32 	%f323, %f322;
	abs.f32 	%f358, %f357;
	abs.f32 	%f392, %f391;
	and.b32  	%r270, %r269, 127;
	and.b32  	%r280, %r279, 127;
	setp.gt.f32 	%p13, %f151, 0f4B800000;
	mul.f32 	%f152, %f150, 0f00000000;
	setp.gt.f32 	%p19, %f185, 0f4B800000;
	mul.f32 	%f186, %f184, 0f00000000;
	setp.gt.f32 	%p25, %f220, 0f4B800000;
	mul.f32 	%f221, %f219, 0f00000000;
	setp.gt.f32 	%p31, %f254, 0f4B800000;
	mul.f32 	%f255, %f253, 0f00000000;
	setp.gt.f32 	%p37, %f289, 0f4B800000;
	mul.f32 	%f290, %f288, 0f00000000;
	setp.gt.f32 	%p43, %f323, 0f4B800000;
	mul.f32 	%f324, %f322, 0f00000000;
	setp.gt.f32 	%p49, %f358, 0f4B800000;
	mul.f32 	%f359, %f357, 0f00000000;
	setp.gt.f32 	%p55, %f392, 0f4B800000;
	mul.f32 	%f393, %f391, 0f00000000;
	cvt.rn.f32.s32 	%f422, %r270;
	cvt.rn.f32.s32 	%f457, %r280;
	selp.f32 	%f153, %f152, %f150, %p13;
	selp.f32 	%f187, %f186, %f184, %p19;
	selp.f32 	%f222, %f221, %f219, %p25;
	selp.f32 	%f256, %f255, %f253, %p31;
	selp.f32 	%f291, %f290, %f288, %p37;
	selp.f32 	%f325, %f324, %f322, %p43;
	selp.f32 	%f360, %f359, %f357, %p49;
	selp.f32 	%f394, %f393, %f391, %p55;
	div.approx.f32 	%f424, %f422, %f177;
	div.approx.f32 	%f458, %f457, %f177;
	add.f32 	%f154, %f153, %f153;
	add.f32 	%f188, %f187, %f187;
	add.f32 	%f223, %f222, %f222;
	add.f32 	%f257, %f256, %f256;
	add.f32 	%f292, %f291, %f291;
	add.f32 	%f326, %f325, %f325;
	add.f32 	%f361, %f360, %f360;
	add.f32 	%f395, %f394, %f394;
	add.f32 	%f425, %f424, %f424;
	add.f32 	%f459, %f458, %f458;
	add.f32 	%f511, %f822, %f822;
	add.f32 	%f562, %f810, %f810;
	mov.b32 	%r192, %f154;
	mov.b32 	%r199, %f188;
	mov.b32 	%r210, %f223;
	mov.b32 	%r217, %f257;
	mov.b32 	%r228, %f292;
	mov.b32 	%r235, %f326;
	mov.b32 	%r246, %f361;
	mov.b32 	%r253, %f395;
	mov.b32 	%r271, %f425;
	mov.b32 	%r281, %f459;
	mov.b32 	%r303, %f511;
	mov.b32 	%r334, %f562;
	and.b32  	%r193, %r192, -2147483648;
	and.b32  	%r200, %r199, -2147483648;
	and.b32  	%r211, %r210, -2147483648;
	and.b32  	%r218, %r217, -2147483648;
	and.b32  	%r229, %r228, -2147483648;
	and.b32  	%r236, %r235, -2147483648;
	and.b32  	%r247, %r246, -2147483648;
	and.b32  	%r254, %r253, -2147483648;
	and.b32  	%r272, %r271, -2147483648;
	and.b32  	%r282, %r281, -2147483648;
	and.b32  	%r304, %r303, -2147483648;
	and.b32  	%r335, %r334, -2147483648;
	add.f32 	%f615, %f826, %f826;
	add.f32 	%f666, %f814, %f814;
	or.b32  	%r194, %r193, 1056964608;
	or.b32  	%r201, %r200, 1056964608;
	or.b32  	%r212, %r211, 1056964608;
	or.b32  	%r219, %r218, 1056964608;
	or.b32  	%r230, %r229, 1056964608;
	or.b32  	%r237, %r236, 1056964608;
	or.b32  	%r248, %r247, 1056964608;
	or.b32  	%r255, %r254, 1056964608;
	or.b32  	%r273, %r272, 1056964608;
	or.b32  	%r283, %r282, 1056964608;
	or.b32  	%r305, %r304, 1056964608;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%r350, %f615;
	mov.b32 	%r372, %f666;
	mov.b32 	%f155, %r194;
	mov.b32 	%f189, %r201;
	mov.b32 	%f224, %r212;
	mov.b32 	%f258, %r219;
	mov.b32 	%f293, %r230;
	mov.b32 	%f327, %r237;
	mov.b32 	%f362, %r248;
	mov.b32 	%f396, %r255;
	mov.b32 	%f426, %r273;
	mov.b32 	%f460, %r283;
	mov.b32 	%f512, %r305;
	mov.b32 	%f563, %r336;
	and.b32  	%r351, %r350, -2147483648;
	and.b32  	%r373, %r372, -2147483648;
	add.f32 	%f718, %f830, %f830;
	add.f32 	%f156, %f154, %f155;
	abs.f32 	%f158, %f154;
	add.f32 	%f190, %f188, %f189;
	abs.f32 	%f192, %f188;
	add.f32 	%f225, %f223, %f224;
	abs.f32 	%f227, %f223;
	add.f32 	%f259, %f257, %f258;
	abs.f32 	%f261, %f257;
	add.f32 	%f294, %f292, %f293;
	abs.f32 	%f296, %f292;
	add.f32 	%f328, %f326, %f327;
	abs.f32 	%f330, %f326;
	add.f32 	%f363, %f361, %f362;
	abs.f32 	%f365, %f361;
	add.f32 	%f397, %f395, %f396;
	abs.f32 	%f399, %f395;
	add.f32 	%f427, %f425, %f426;
	abs.f32 	%f429, %f425;
	add.f32 	%f461, %f459, %f460;
	abs.f32 	%f463, %f459;
	add.f32 	%f513, %f511, %f512;
	abs.f32 	%f515, %f511;
	add.f32 	%f564, %f562, %f563;
	abs.f32 	%f566, %f562;
	or.b32  	%r352, %r351, 1056964608;
	or.b32  	%r374, %r373, 1056964608;
	mov.b32 	%r386, %f718;
	cvt.rzi.f32.f32 	%f157, %f156;
	setp.gt.f32 	%p14, %f158, 0f4B000000;
	cvt.rzi.f32.f32 	%f191, %f190;
	setp.gt.f32 	%p20, %f192, 0f4B000000;
	cvt.rzi.f32.f32 	%f226, %f225;
	setp.gt.f32 	%p26, %f227, 0f4B000000;
	cvt.rzi.f32.f32 	%f260, %f259;
	setp.gt.f32 	%p32, %f261, 0f4B000000;
	cvt.rzi.f32.f32 	%f295, %f294;
	setp.gt.f32 	%p38, %f296, 0f4B000000;
	cvt.rzi.f32.f32 	%f329, %f328;
	setp.gt.f32 	%p44, %f330, 0f4B000000;
	cvt.rzi.f32.f32 	%f364, %f363;
	setp.gt.f32 	%p50, %f365, 0f4B000000;
	cvt.rzi.f32.f32 	%f398, %f397;
	setp.gt.f32 	%p56, %f399, 0f4B000000;
	cvt.rzi.f32.f32 	%f428, %f427;
	setp.gt.f32 	%p61, %f429, 0f4B000000;
	cvt.rzi.f32.f32 	%f462, %f461;
	setp.gt.f32 	%p68, %f463, 0f4B000000;
	cvt.rzi.f32.f32 	%f514, %f513;
	setp.gt.f32 	%p88, %f515, 0f4B000000;
	cvt.rzi.f32.f32 	%f565, %f564;
	setp.gt.f32 	%p108, %f566, 0f4B000000;
	mov.b32 	%f616, %r352;
	mov.b32 	%f667, %r374;
	and.b32  	%r387, %r386, -2147483648;
	selp.f32 	%f159, %f154, %f157, %p14;
	cvt.rzi.f32.f32 	%f160, %f154;
	setp.lt.f32 	%p15, %f158, 0f3F000000;
	selp.f32 	%f193, %f188, %f191, %p20;
	cvt.rzi.f32.f32 	%f194, %f188;
	setp.lt.f32 	%p21, %f192, 0f3F000000;
	selp.f32 	%f228, %f223, %f226, %p26;
	cvt.rzi.f32.f32 	%f229, %f223;
	setp.lt.f32 	%p27, %f227, 0f3F000000;
	selp.f32 	%f262, %f257, %f260, %p32;
	cvt.rzi.f32.f32 	%f263, %f257;
	setp.lt.f32 	%p33, %f261, 0f3F000000;
	selp.f32 	%f297, %f292, %f295, %p38;
	cvt.rzi.f32.f32 	%f298, %f292;
	setp.lt.f32 	%p39, %f296, 0f3F000000;
	selp.f32 	%f331, %f326, %f329, %p44;
	cvt.rzi.f32.f32 	%f332, %f326;
	setp.lt.f32 	%p45, %f330, 0f3F000000;
	selp.f32 	%f366, %f361, %f364, %p50;
	cvt.rzi.f32.f32 	%f367, %f361;
	setp.lt.f32 	%p51, %f365, 0f3F000000;
	selp.f32 	%f400, %f395, %f398, %p56;
	cvt.rzi.f32.f32 	%f401, %f395;
	setp.lt.f32 	%p57, %f399, 0f3F000000;
	selp.f32 	%f430, %f425, %f428, %p61;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p62, %f429, 0f3F000000;
	selp.f32 	%f464, %f459, %f462, %p68;
	cvt.rzi.f32.f32 	%f465, %f459;
	setp.lt.f32 	%p69, %f463, 0f3F000000;
	selp.f32 	%f516, %f511, %f514, %p88;
	cvt.rzi.f32.f32 	%f517, %f511;
	setp.lt.f32 	%p89, %f515, 0f3F000000;
	selp.f32 	%f567, %f562, %f565, %p108;
	cvt.rzi.f32.f32 	%f568, %f562;
	setp.lt.f32 	%p109, %f566, 0f3F000000;
	add.f32 	%f617, %f615, %f616;
	abs.f32 	%f619, %f615;
	add.f32 	%f668, %f666, %f667;
	abs.f32 	%f670, %f666;
	or.b32  	%r388, %r387, 1056964608;
	selp.f32 	%f161, %f160, %f159, %p15;
	selp.f32 	%f195, %f194, %f193, %p21;
	selp.f32 	%f230, %f229, %f228, %p27;
	selp.f32 	%f264, %f263, %f262, %p33;
	selp.f32 	%f299, %f298, %f297, %p39;
	selp.f32 	%f333, %f332, %f331, %p45;
	selp.f32 	%f368, %f367, %f366, %p51;
	selp.f32 	%f402, %f401, %f400, %p57;
	selp.f32 	%f432, %f431, %f430, %p62;
	selp.f32 	%f466, %f465, %f464, %p69;
	selp.f32 	%f518, %f517, %f516, %p89;
	selp.f32 	%f569, %f568, %f567, %p109;
	cvt.rzi.f32.f32 	%f618, %f617;
	setp.gt.f32 	%p128, %f619, 0f4B000000;
	cvt.rzi.f32.f32 	%f669, %f668;
	setp.gt.f32 	%p149, %f670, 0f4B000000;
	mov.b32 	%f719, %r388;
	fma.rn.f32 	%f162, %f161, 0fBF000000, %f153;
	fma.rn.f32 	%f196, %f195, 0fBF000000, %f187;
	fma.rn.f32 	%f231, %f230, 0fBF000000, %f222;
	fma.rn.f32 	%f265, %f264, 0fBF000000, %f256;
	fma.rn.f32 	%f300, %f299, 0fBF000000, %f291;
	fma.rn.f32 	%f334, %f333, 0fBF000000, %f325;
	fma.rn.f32 	%f369, %f368, 0fBF000000, %f360;
	fma.rn.f32 	%f403, %f402, 0fBF000000, %f394;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f424;
	fma.rn.f32 	%f467, %f466, 0fBF000000, %f458;
	fma.rn.f32 	%f519, %f518, 0fBF000000, %f822;
	fma.rn.f32 	%f570, %f569, 0fBF000000, %f810;
	selp.f32 	%f620, %f615, %f618, %p128;
	cvt.rzi.f32.f32 	%f621, %f615;
	setp.lt.f32 	%p129, %f619, 0f3F000000;
	selp.f32 	%f671, %f666, %f669, %p149;
	cvt.rzi.f32.f32 	%f672, %f666;
	setp.lt.f32 	%p150, %f670, 0f3F000000;
	add.f32 	%f720, %f718, %f719;
	abs.f32 	%f722, %f718;
	mul.f32 	%f163, %f162, %f162;
	mul.f32 	%f197, %f196, %f196;
	mul.f32 	%f232, %f231, %f231;
	mul.f32 	%f266, %f265, %f265;
	mul.f32 	%f301, %f300, %f300;
	mul.f32 	%f335, %f334, %f334;
	mul.f32 	%f370, %f369, %f369;
	mul.f32 	%f404, %f403, %f403;
	mul.f32 	%f434, %f433, %f433;
	mul.f32 	%f468, %f467, %f467;
	mul.f32 	%f520, %f519, %f519;
	mul.f32 	%f571, %f570, %f570;
	selp.f32 	%f622, %f621, %f620, %p129;
	selp.f32 	%f673, %f672, %f671, %p150;
	cvt.rzi.f32.f32 	%f721, %f720;
	setp.gt.f32 	%p169, %f722, 0f4B000000;
	cvt.rzi.s32.f32 	%r195, %f161;
	fma.rn.f32 	%f164, %f163, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f165, %f163, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r202, %f195;
	fma.rn.f32 	%f198, %f197, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f199, %f197, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r213, %f230;
	fma.rn.f32 	%f233, %f232, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f234, %f232, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r220, %f264;
	fma.rn.f32 	%f267, %f266, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f268, %f266, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r231, %f299;
	fma.rn.f32 	%f302, %f301, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f303, %f301, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r238, %f333;
	fma.rn.f32 	%f336, %f335, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f337, %f335, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r249, %f368;
	fma.rn.f32 	%f371, %f370, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f372, %f370, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r256, %f402;
	fma.rn.f32 	%f405, %f404, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f406, %f404, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f469, %f468, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f470, %f468, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f521, %f520, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f522, %f520, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f572, %f571, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f573, %f571, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f623, %f622, 0fBF000000, %f826;
	fma.rn.f32 	%f674, %f673, 0fBF000000, %f814;
	selp.f32 	%f723, %f718, %f721, %p169;
	cvt.rzi.f32.f32 	%f724, %f718;
	setp.lt.f32 	%p170, %f722, 0f3F000000;
	add.s32 	%r196, %r195, 1;
	fma.rn.f32 	%f166, %f164, %f163, 0fC0A55DF6;
	fma.rn.f32 	%f167, %f165, %f163, 0f4081E0CF;
	fma.rn.f32 	%f168, %f163, %f162, 0f00000000;
	add.s32 	%r203, %r202, 1;
	fma.rn.f32 	%f200, %f198, %f197, 0fC0A55DF6;
	fma.rn.f32 	%f201, %f199, %f197, 0f4081E0CF;
	fma.rn.f32 	%f202, %f197, %f196, 0f00000000;
	add.s32 	%r214, %r213, 1;
	fma.rn.f32 	%f235, %f233, %f232, 0fC0A55DF6;
	fma.rn.f32 	%f236, %f234, %f232, 0f4081E0CF;
	fma.rn.f32 	%f237, %f232, %f231, 0f00000000;
	add.s32 	%r221, %r220, 1;
	fma.rn.f32 	%f269, %f267, %f266, 0fC0A55DF6;
	fma.rn.f32 	%f270, %f268, %f266, 0f4081E0CF;
	fma.rn.f32 	%f271, %f266, %f265, 0f00000000;
	add.s32 	%r232, %r231, 1;
	fma.rn.f32 	%f304, %f302, %f301, 0fC0A55DF6;
	fma.rn.f32 	%f305, %f303, %f301, 0f4081E0CF;
	fma.rn.f32 	%f306, %f301, %f300, 0f00000000;
	add.s32 	%r239, %r238, 1;
	fma.rn.f32 	%f338, %f336, %f335, 0fC0A55DF6;
	fma.rn.f32 	%f339, %f337, %f335, 0f4081E0CF;
	fma.rn.f32 	%f340, %f335, %f334, 0f00000000;
	add.s32 	%r250, %r249, 1;
	fma.rn.f32 	%f373, %f371, %f370, 0fC0A55DF6;
	fma.rn.f32 	%f374, %f372, %f370, 0f4081E0CF;
	fma.rn.f32 	%f375, %f370, %f369, 0f00000000;
	add.s32 	%r257, %r256, 1;
	fma.rn.f32 	%f407, %f405, %f404, 0fC0A55DF6;
	fma.rn.f32 	%f408, %f406, %f404, 0f4081E0CF;
	fma.rn.f32 	%f409, %f404, %f403, 0f00000000;
	cvt.rzi.s32.f32 	%r274, %f432;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	cvt.rzi.s32.f32 	%r284, %f466;
	fma.rn.f32 	%f471, %f469, %f468, 0fC0A55DF6;
	fma.rn.f32 	%f472, %f470, %f468, 0f4081E0CF;
	fma.rn.f32 	%f473, %f468, %f467, 0f00000000;
	cvt.rzi.s32.f32 	%r306, %f518;
	fma.rn.f32 	%f523, %f521, %f520, 0fC0A55DF6;
	fma.rn.f32 	%f524, %f522, %f520, 0f4081E0CF;
	fma.rn.f32 	%f525, %f520, %f519, 0f00000000;
	cvt.rzi.s32.f32 	%r337, %f569;
	fma.rn.f32 	%f574, %f572, %f571, 0fC0A55DF6;
	fma.rn.f32 	%f575, %f573, %f571, 0f4081E0CF;
	fma.rn.f32 	%f576, %f571, %f570, 0f00000000;
	mul.f32 	%f624, %f623, %f623;
	mul.f32 	%f675, %f674, %f674;
	selp.f32 	%f725, %f724, %f723, %p170;
	fma.rn.f32 	%f169, %f167, %f163, 0fC09DE9E6;
	fma.rn.f32 	%f170, %f166, %f168, 0f00000000;
	and.b32  	%r197, %r196, 1;
	fma.rn.f32 	%f203, %f201, %f197, 0fC09DE9E6;
	fma.rn.f32 	%f204, %f200, %f202, 0f00000000;
	and.b32  	%r204, %r203, 1;
	fma.rn.f32 	%f238, %f236, %f232, 0fC09DE9E6;
	fma.rn.f32 	%f239, %f235, %f237, 0f00000000;
	and.b32  	%r215, %r214, 1;
	fma.rn.f32 	%f272, %f270, %f266, 0fC09DE9E6;
	fma.rn.f32 	%f273, %f269, %f271, 0f00000000;
	and.b32  	%r222, %r221, 1;
	fma.rn.f32 	%f307, %f305, %f301, 0fC09DE9E6;
	fma.rn.f32 	%f308, %f304, %f306, 0f00000000;
	and.b32  	%r233, %r232, 1;
	fma.rn.f32 	%f341, %f339, %f335, 0fC09DE9E6;
	fma.rn.f32 	%f342, %f338, %f340, 0f00000000;
	and.b32  	%r240, %r239, 1;
	fma.rn.f32 	%f376, %f374, %f370, 0fC09DE9E6;
	fma.rn.f32 	%f377, %f373, %f375, 0f00000000;
	and.b32  	%r251, %r250, 1;
	fma.rn.f32 	%f410, %f408, %f404, 0fC09DE9E6;
	fma.rn.f32 	%f411, %f407, %f409, 0f00000000;
	and.b32  	%r258, %r257, 1;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	and.b32  	%r275, %r274, 1;
	fma.rn.f32 	%f474, %f472, %f468, 0fC09DE9E6;
	fma.rn.f32 	%f475, %f471, %f473, 0f00000000;
	and.b32  	%r285, %r284, 1;
	fma.rn.f32 	%f526, %f524, %f520, 0fC09DE9E6;
	fma.rn.f32 	%f527, %f523, %f525, 0f00000000;
	and.b32  	%r307, %r306, 1;
	fma.rn.f32 	%f577, %f575, %f571, 0fC09DE9E6;
	fma.rn.f32 	%f578, %f574, %f576, 0f00000000;
	and.b32  	%r338, %r337, 1;
	fma.rn.f32 	%f625, %f624, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f626, %f624, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f676, %f675, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f677, %f675, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f726, %f725, 0fBF000000, %f830;
	fma.rn.f32 	%f171, %f169, %f163, 0f3F800000;
	fma.rn.f32 	%f172, %f162, 0f40490FDB, %f170;
	setp.eq.b32 	%p16, %r197, 1;
	fma.rn.f32 	%f205, %f203, %f197, 0f3F800000;
	fma.rn.f32 	%f206, %f196, 0f40490FDB, %f204;
	setp.eq.b32 	%p22, %r204, 1;
	fma.rn.f32 	%f240, %f238, %f232, 0f3F800000;
	fma.rn.f32 	%f241, %f231, 0f40490FDB, %f239;
	setp.eq.b32 	%p28, %r215, 1;
	fma.rn.f32 	%f274, %f272, %f266, 0f3F800000;
	fma.rn.f32 	%f275, %f265, 0f40490FDB, %f273;
	setp.eq.b32 	%p34, %r222, 1;
	fma.rn.f32 	%f309, %f307, %f301, 0f3F800000;
	fma.rn.f32 	%f310, %f300, 0f40490FDB, %f308;
	setp.eq.b32 	%p40, %r233, 1;
	fma.rn.f32 	%f343, %f341, %f335, 0f3F800000;
	fma.rn.f32 	%f344, %f334, 0f40490FDB, %f342;
	setp.eq.b32 	%p46, %r240, 1;
	fma.rn.f32 	%f378, %f376, %f370, 0f3F800000;
	fma.rn.f32 	%f379, %f369, 0f40490FDB, %f377;
	setp.eq.b32 	%p52, %r251, 1;
	fma.rn.f32 	%f412, %f410, %f404, 0f3F800000;
	fma.rn.f32 	%f413, %f403, 0f40490FDB, %f411;
	setp.eq.b32 	%p58, %r258, 1;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	setp.eq.b32 	%p63, %r275, 1;
	fma.rn.f32 	%f476, %f474, %f468, 0f3F800000;
	fma.rn.f32 	%f477, %f467, 0f40490FDB, %f475;
	setp.eq.b32 	%p70, %r285, 1;
	fma.rn.f32 	%f528, %f526, %f520, 0f3F800000;
	fma.rn.f32 	%f529, %f519, 0f40490FDB, %f527;
	setp.eq.b32 	%p90, %r307, 1;
	fma.rn.f32 	%f579, %f577, %f571, 0f3F800000;
	fma.rn.f32 	%f580, %f570, 0f40490FDB, %f578;
	setp.eq.b32 	%p110, %r338, 1;
	cvt.rzi.s32.f32 	%r353, %f622;
	fma.rn.f32 	%f627, %f625, %f624, 0fC0A55DF6;
	fma.rn.f32 	%f628, %f626, %f624, 0f4081E0CF;
	fma.rn.f32 	%f629, %f624, %f623, 0f00000000;
	cvt.rzi.s32.f32 	%r375, %f673;
	fma.rn.f32 	%f678, %f676, %f675, 0fC0A55DF6;
	fma.rn.f32 	%f679, %f677, %f675, 0f4081E0CF;
	fma.rn.f32 	%f680, %f675, %f674, 0f00000000;
	mul.f32 	%f727, %f726, %f726;
	selp.f32 	%f173, %f171, %f172, %p16;
	and.b32  	%r198, %r196, 2;
	mov.f32 	%f174, 0f00000000;
	selp.f32 	%f207, %f205, %f206, %p22;
	and.b32  	%r205, %r203, 2;
	selp.f32 	%f242, %f240, %f241, %p28;
	and.b32  	%r216, %r214, 2;
	selp.f32 	%f276, %f274, %f275, %p34;
	and.b32  	%r223, %r221, 2;
	selp.f32 	%f311, %f309, %f310, %p40;
	and.b32  	%r234, %r232, 2;
	selp.f32 	%f345, %f343, %f344, %p46;
	and.b32  	%r241, %r239, 2;
	selp.f32 	%f380, %f378, %f379, %p52;
	and.b32  	%r252, %r250, 2;
	selp.f32 	%f414, %f412, %f413, %p58;
	and.b32  	%r259, %r257, 2;
	selp.f32 	%f444, %f442, %f443, %p63;
	and.b32  	%r276, %r274, 2;
	selp.f32 	%f478, %f476, %f477, %p70;
	and.b32  	%r286, %r284, 2;
	selp.f32 	%f530, %f528, %f529, %p90;
	and.b32  	%r308, %r306, 2;
	selp.f32 	%f581, %f579, %f580, %p110;
	and.b32  	%r339, %r337, 2;
	fma.rn.f32 	%f630, %f628, %f624, 0fC09DE9E6;
	fma.rn.f32 	%f631, %f627, %f629, 0f00000000;
	and.b32  	%r354, %r353, 1;
	fma.rn.f32 	%f681, %f679, %f675, 0fC09DE9E6;
	fma.rn.f32 	%f682, %f678, %f680, 0f00000000;
	and.b32  	%r376, %r375, 1;
	fma.rn.f32 	%f728, %f727, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f729, %f727, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r198, 0;
	sub.f32 	%f175, %f174, %f173;
	setp.eq.s32 	%p23, %r205, 0;
	sub.f32 	%f209, %f174, %f207;
	setp.eq.s32 	%p29, %r216, 0;
	sub.f32 	%f244, %f174, %f242;
	setp.eq.s32 	%p35, %r223, 0;
	sub.f32 	%f278, %f174, %f276;
	setp.eq.s32 	%p41, %r234, 0;
	sub.f32 	%f313, %f174, %f311;
	setp.eq.s32 	%p47, %r241, 0;
	sub.f32 	%f347, %f174, %f345;
	setp.eq.s32 	%p53, %r252, 0;
	sub.f32 	%f382, %f174, %f380;
	setp.eq.s32 	%p59, %r259, 0;
	sub.f32 	%f416, %f174, %f414;
	setp.eq.s32 	%p64, %r276, 0;
	neg.f32 	%f446, %f444;
	add.s32 	%r277, %r274, 1;
	cvt.rzi.f32.f32 	%f451, %f424;
	setp.eq.s32 	%p71, %r286, 0;
	neg.f32 	%f480, %f478;
	add.s32 	%r287, %r284, 1;
	cvt.rzi.f32.f32 	%f484, %f458;
	setp.eq.s32 	%p91, %r308, 0;
	neg.f32 	%f532, %f530;
	add.s32 	%r309, %r306, 1;
	cvt.rzi.f32.f32 	%f537, %f822;
	setp.eq.s32 	%p111, %r339, 0;
	neg.f32 	%f583, %f581;
	add.s32 	%r340, %r337, 1;
	cvt.rzi.f32.f32 	%f588, %f810;
	fma.rn.f32 	%f632, %f630, %f624, 0f3F800000;
	fma.rn.f32 	%f633, %f623, 0f40490FDB, %f631;
	setp.eq.b32 	%p130, %r354, 1;
	fma.rn.f32 	%f683, %f681, %f675, 0f3F800000;
	fma.rn.f32 	%f684, %f674, 0f40490FDB, %f682;
	setp.eq.b32 	%p151, %r376, 1;
	cvt.rzi.s32.f32 	%r389, %f725;
	fma.rn.f32 	%f730, %f728, %f727, 0fC0A55DF6;
	fma.rn.f32 	%f731, %f729, %f727, 0f4081E0CF;
	fma.rn.f32 	%f732, %f727, %f726, 0f00000000;
	selp.f32 	%f176, %f173, %f175, %p17;
	selp.f32 	%f210, %f207, %f209, %p23;
	selp.f32 	%f245, %f242, %f244, %p29;
	selp.f32 	%f279, %f276, %f278, %p35;
	selp.f32 	%f314, %f311, %f313, %p41;
	selp.f32 	%f348, %f345, %f347, %p47;
	selp.f32 	%f383, %f380, %f382, %p53;
	selp.f32 	%f417, %f414, %f416, %p59;
	selp.f32 	%f445, %f443, %f442, %p63;
	selp.f32 	%f447, %f444, %f446, %p64;
	and.b32  	%r278, %r277, 2;
	setp.eq.f32 	%p66, %f451, %f424;
	mul.f32 	%f452, %f424, 0f00000000;
	selp.f32 	%f479, %f477, %f476, %p70;
	selp.f32 	%f481, %f478, %f480, %p71;
	and.b32  	%r288, %r287, 2;
	setp.eq.f32 	%p73, %f484, %f458;
	mul.f32 	%f485, %f458, 0f00000000;
	selp.f32 	%f531, %f529, %f528, %p90;
	selp.f32 	%f533, %f530, %f532, %p91;
	and.b32  	%r310, %r309, 2;
	setp.eq.f32 	%p93, %f537, %f822;
	mul.f32 	%f538, %f822, 0f00000000;
	selp.f32 	%f582, %f580, %f579, %p110;
	selp.f32 	%f584, %f581, %f583, %p111;
	and.b32  	%r341, %r340, 2;
	setp.eq.f32 	%p113, %f588, %f810;
	mul.f32 	%f589, %f810, 0f00000000;
	selp.f32 	%f634, %f632, %f633, %p130;
	and.b32  	%r355, %r353, 2;
	selp.f32 	%f685, %f683, %f684, %p151;
	and.b32  	%r377, %r375, 2;
	fma.rn.f32 	%f733, %f731, %f727, 0fC09DE9E6;
	fma.rn.f32 	%f734, %f730, %f732, 0f00000000;
	and.b32  	%r390, %r389, 1;
	mul.f32 	%f86, %f176, %f176;
	mul.f32 	%f4, %f210, %f210;
	mul.f32 	%f8, %f245, %f245;
	mul.f32 	%f13, %f279, %f279;
	mul.f32 	%f17, %f314, %f314;
	mul.f32 	%f22, %f348, %f348;
	mul.f32 	%f26, %f383, %f383;
	mul.f32 	%f31, %f417, %f417;
	setp.eq.s32 	%p65, %r278, 0;
	sub.f32 	%f449, %f174, %f445;
	selp.f32 	%f453, %f452, %f447, %p66;
	abs.f32 	%f454, %f424;
	setp.eq.s32 	%p72, %r288, 0;
	sub.f32 	%f482, %f174, %f479;
	selp.f32 	%f486, %f485, %f481, %p73;
	abs.f32 	%f487, %f458;
	setp.eq.s32 	%p92, %r310, 0;
	sub.f32 	%f535, %f174, %f531;
	selp.f32 	%f103, %f538, %f533, %p93;
	abs.f32 	%f539, %f822;
	setp.eq.s32 	%p112, %r341, 0;
	sub.f32 	%f586, %f174, %f582;
	selp.f32 	%f590, %f589, %f584, %p113;
	abs.f32 	%f591, %f810;
	setp.eq.s32 	%p131, %r355, 0;
	neg.f32 	%f636, %f634;
	add.s32 	%r356, %r353, 1;
	cvt.rzi.f32.f32 	%f641, %f826;
	setp.eq.s32 	%p152, %r377, 0;
	neg.f32 	%f687, %f685;
	add.s32 	%r378, %r375, 1;
	cvt.rzi.f32.f32 	%f692, %f814;
	fma.rn.f32 	%f735, %f733, %f727, 0f3F800000;
	fma.rn.f32 	%f736, %f726, 0f40490FDB, %f734;
	setp.eq.b32 	%p171, %r390, 1;
	mul.f32 	%f180, %f86, 0f3C0AF64E;
	mul.f32 	%f214, %f4, 0f3C0AF64E;
	mul.f32 	%f249, %f8, 0f3C0AF64E;
	mul.f32 	%f283, %f13, 0f3C0AF64E;
	mul.f32 	%f318, %f17, 0f3C0AF64E;
	mul.f32 	%f352, %f22, 0f3C0AF64E;
	mul.f32 	%f387, %f26, 0f3C0AF64E;
	mul.f32 	%f420, %f31, 0f3C0AF64E;
	selp.f32 	%f450, %f445, %f449, %p65;
	setp.gt.f32 	%p67, %f454, 0f4B800000;
	add.f32 	%f455, %f453, 0f3F800000;
	selp.f32 	%f483, %f479, %f482, %p72;
	setp.gt.f32 	%p74, %f487, 0f4B800000;
	add.f32 	%f488, %f486, 0f3F800000;
	selp.f32 	%f536, %f531, %f535, %p92;
	setp.gt.f32 	%p94, %f539, 0f4B800000;
	add.f32 	%f540, %f103, 0f3F800000;
	selp.f32 	%f587, %f582, %f586, %p112;
	setp.gt.f32 	%p114, %f591, 0f4B800000;
	add.f32 	%f592, %f590, 0f3F800000;
	selp.f32 	%f635, %f633, %f632, %p130;
	selp.f32 	%f637, %f634, %f636, %p131;
	and.b32  	%r357, %r356, 2;
	setp.eq.f32 	%p133, %f641, %f826;
	mul.f32 	%f642, %f826, 0f00000000;
	selp.f32 	%f686, %f684, %f683, %p151;
	selp.f32 	%f688, %f685, %f687, %p152;
	and.b32  	%r379, %r378, 2;
	setp.eq.f32 	%p154, %f692, %f814;
	mul.f32 	%f693, %f814, 0f00000000;
	selp.f32 	%f737, %f735, %f736, %p171;
	and.b32  	%r391, %r389, 2;
	mul.f32 	%f3, %f180, %f800;
	mul.f32 	%f215, %f214, %f801;
	mul.f32 	%f12, %f249, %f802;
	mul.f32 	%f284, %f283, %f803;
	mul.f32 	%f21, %f318, %f804;
	mul.f32 	%f353, %f352, %f805;
	mul.f32 	%f30, %f387, %f806;
	mul.f32 	%f421, %f420, %f807;
	selp.f32 	%f456, %f455, %f450, %p67;
	selp.f32 	%f489, %f488, %f483, %p74;
	selp.f32 	%f104, %f540, %f536, %p94;
	selp.f32 	%f593, %f592, %f587, %p114;
	setp.eq.s32 	%p132, %r357, 0;
	sub.f32 	%f639, %f174, %f635;
	selp.f32 	%f123, %f642, %f637, %p133;
	abs.f32 	%f643, %f826;
	setp.eq.s32 	%p153, %r379, 0;
	sub.f32 	%f690, %f174, %f686;
	selp.f32 	%f694, %f693, %f688, %p154;
	abs.f32 	%f695, %f814;
	setp.eq.s32 	%p172, %r391, 0;
	neg.f32 	%f739, %f737;
	add.s32 	%r392, %r389, 1;
	cvt.rzi.f32.f32 	%f744, %f830;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	and.b32  	%r80, %r1, 16;
	mov.b32 	%r208, %f215;
	mov.b32 	%r207, %f3;
	mov.b32 	%r226, %f284;
	mov.b32 	%r225, %f12;
	mov.b32 	%r244, %f353;
	mov.b32 	%r243, %f21;
	mov.b32 	%r262, %f421;
	mov.b32 	%r261, %f30;
	mov.b32 	%r264, %f456;
	mov.b32 	%r265, %f489;
	mov.b32 	%r267, %f453;
	mov.b32 	%r268, %f486;
	mov.b32 	%r324, %f593;
	mov.b32 	%r323, %f104;
	mov.b32 	%r330, %f590;
	mov.b32 	%r329, %f103;
	selp.f32 	%f640, %f635, %f639, %p132;
	setp.gt.f32 	%p134, %f643, 0f4B800000;
	add.f32 	%f644, %f123, 0f3F800000;
	selp.f32 	%f691, %f686, %f690, %p153;
	setp.gt.f32 	%p155, %f695, 0f4B800000;
	add.f32 	%f696, %f694, 0f3F800000;
	selp.f32 	%f738, %f736, %f735, %p171;
	selp.f32 	%f740, %f737, %f739, %p172;
	and.b32  	%r393, %r392, 2;
	setp.eq.f32 	%p174, %f744, %f830;
	mul.f32 	%f745, %f830, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r206, %r208, %r207;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r224, %r226, %r225;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r242, %r244, %r243;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r260, %r262, %r261;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r263, %r265, %r264;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r266, %r268, %r267;
	// end inline asm
	xor.b32  	%r327, %r330, -2147483648;
	xor.b32  	%r326, %r329, -2147483648;
	selp.f32 	%f124, %f644, %f640, %p134;
	selp.f32 	%f697, %f696, %f691, %p155;
	setp.eq.s32 	%p173, %r393, 0;
	sub.f32 	%f742, %f174, %f738;
	selp.f32 	%f142, %f745, %f740, %p174;
	abs.f32 	%f746, %f830;
	// begin inline asm
	cvt.rn.f16x2.f32 %r322, %r324, %r323;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r325, %r327, %r326;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r330, %r329;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r324, %r323;
	// end inline asm
	mov.b32 	%r368, %f697;
	mov.b32 	%r367, %f124;
	mov.b32 	%r371, %f694;
	mov.b32 	%r370, %f123;
	selp.f32 	%f743, %f738, %f742, %p173;
	setp.gt.f32 	%p175, %f746, 0f4B800000;
	add.f32 	%f747, %f142, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	selp.f32 	%f143, %f747, %f743, %p175;
	add.f32 	%f768, %f818, %f818;
	mov.b32 	%r412, %f768;
	and.b32  	%r413, %r412, -2147483648;
	or.b32  	%r414, %r413, 1056964608;
	mov.b32 	%f769, %r414;
	add.f32 	%f770, %f768, %f769;
	cvt.rzi.f32.f32 	%f771, %f770;
	abs.f32 	%f772, %f768;
	setp.gt.f32 	%p188, %f772, 0f4B000000;
	selp.f32 	%f773, %f768, %f771, %p188;
	cvt.rzi.f32.f32 	%f774, %f768;
	setp.lt.f32 	%p189, %f772, 0f3F000000;
	selp.f32 	%f775, %f774, %f773, %p189;
	cvt.rzi.s32.f32 	%r415, %f775;
	fma.rn.f32 	%f776, %f775, 0fBF000000, %f818;
	mul.f32 	%f777, %f776, %f776;
	fma.rn.f32 	%f778, %f777, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f779, %f777, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f780, %f778, %f777, 0fC0A55DF6;
	fma.rn.f32 	%f781, %f779, %f777, 0f4081E0CF;
	fma.rn.f32 	%f782, %f777, %f776, 0f00000000;
	fma.rn.f32 	%f783, %f781, %f777, 0fC09DE9E6;
	fma.rn.f32 	%f784, %f780, %f782, 0f00000000;
	fma.rn.f32 	%f785, %f783, %f777, 0f3F800000;
	fma.rn.f32 	%f786, %f776, 0f40490FDB, %f784;
	and.b32  	%r416, %r415, 1;
	setp.eq.b32 	%p190, %r416, 1;
	selp.f32 	%f787, %f785, %f786, %p190;
	selp.f32 	%f788, %f786, %f785, %p190;
	and.b32  	%r417, %r415, 2;
	setp.eq.s32 	%p191, %r417, 0;
	neg.f32 	%f789, %f787;
	selp.f32 	%f790, %f787, %f789, %p191;
	add.s32 	%r418, %r415, 1;
	and.b32  	%r419, %r418, 2;
	setp.eq.s32 	%p192, %r419, 0;
	sub.f32 	%f792, %f174, %f788;
	selp.f32 	%f793, %f788, %f792, %p192;
	cvt.rzi.f32.f32 	%f794, %f818;
	setp.eq.f32 	%p193, %f794, %f818;
	mul.f32 	%f795, %f818, 0f00000000;
	selp.f32 	%f796, %f795, %f790, %p193;
	abs.f32 	%f797, %f818;
	setp.gt.f32 	%p194, %f797, 0f4B800000;
	add.f32 	%f798, %f796, 0f3F800000;
	selp.f32 	%f799, %f798, %f793, %p194;
	mov.b32 	%r402, %f799;
	mov.b32 	%r401, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	mov.b32 	%r408, %f796;
	xor.b32  	%r405, %r408, -2147483648;
	mov.b32 	%r407, %f142;
	xor.b32  	%r404, %r407, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r403, %r405, %r404;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r406, %r408, %r407;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r409, %r402, %r401;
	// end inline asm
	shl.b32 	%r421, %r163, 12;
	or.b32  	%r422, %r80, %r3;
	or.b32  	%r50, %r422, %r78;
	and.b32  	%r423, %r77, 28;
	shl.b32 	%r424, %r2, 5;
	and.b32  	%r425, %r424, 224;
	or.b32  	%r426, %r423, %r425;
	or.b32  	%r51, %r426, %r421;
	bfe.s32 	%r427, %r1, 3, 1;
	and.b32  	%r52, %r1, 8;
	shl.b32 	%r428, %r1, 4;
	or.b32  	%r429, %r428, %r52;
	shr.u32 	%r430, %r429, 2;
	and.b32  	%r431, %r430, 30;
	and.b32  	%r432, %r4, 32;
	shr.u32 	%r433, %r3, 1;
	or.b32  	%r434, %r432, %r433;
	or.b32  	%r435, %r434, 8;
	or.b32  	%r436, %r434, 16;
	or.b32  	%r437, %r434, 24;
	shr.u32 	%r438, %r82, 1;
	mul.lo.s32 	%r439, %r438, 65;
	add.s32 	%r440, %r434, %r439;
	add.s32 	%r441, %r435, %r439;
	add.s32 	%r442, %r436, %r439;
	add.s32 	%r443, %r437, %r439;
	shl.b32 	%r444, %r3, 1;
	or.b32  	%r445, %r444, %r86;
	mul.lo.s32 	%r446, %r445, 65;
	add.s32 	%r447, %r431, %r446;
	mul.wide.u32 	%rd54, %r447, 4;
	mov.u64 	%rd55, shmem;
	add.s64 	%rd5, %rd55, %rd54;
	cvt.u64.u32 	%rd56, %r431;
	cvt.u64.u32 	%rd57, %r446;
	add.s64 	%rd58, %rd57, %rd56;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd6, %rd55, %rd59;
	shl.b32 	%r448, %r165, 18;
	add.s32 	%r449, %r448, -786432;
	shl.b32 	%r450, %r3, 2;
	or.b32  	%r451, %r87, %r450;
	or.b32  	%r452, %r451, %r81;
	shl.b32 	%r453, %r452, 8;
	or.b32  	%r53, %r426, %r453;
	cvt.s64.s32 	%rd7, %r449;
	shr.u32 	%r454, %r3, 3;
	mul.lo.s32 	%r455, %r454, 130;
	mul.lo.s32 	%r456, %r86, 65;
	bfe.s32 	%r457, %r3, 1, 1;
	and.b32  	%r458, %r3, 2;
	setp.eq.s32 	%p196, %r458, 0;
	and.b32  	%r459, %r457, 520;
	and.b32  	%r460, %r3, 1;
	neg.s32 	%r461, %r460;
	setp.eq.b32 	%p197, %r460, 1;
	and.b32  	%r462, %r461, 1040;
	bfe.s32 	%r463, %r3, 2, 1;
	and.b32  	%r464, %r3, 4;
	setp.eq.s32 	%p198, %r464, 0;
	and.b32  	%r465, %r463, 260;
	add.s32 	%r466, %r462, %r431;
	add.s32 	%r467, %r466, %r456;
	add.s32 	%r468, %r467, %r455;
	add.s32 	%r469, %r468, %r459;
	add.s32 	%r470, %r469, %r465;
	mul.wide.u32 	%rd60, %r470, 4;
	add.s64 	%rd8, %rd55, %rd60;
	selp.b64 	%rd61, 0, 260, %p198;
	selp.b64 	%rd62, 0, 520, %p196;
	cvt.u64.u32 	%rd63, %r456;
	cvt.u64.u32 	%rd64, %r455;
	selp.b64 	%rd65, 1040, 0, %p197;
	add.s64 	%rd66, %rd56, %rd65;
	add.s64 	%rd67, %rd66, %rd64;
	add.s64 	%rd68, %rd67, %rd63;
	add.s64 	%rd69, %rd68, %rd62;
	add.s64 	%rd70, %rd69, %rd61;
	shl.b64 	%rd71, %rd70, 2;
	add.s64 	%rd9, %rd55, %rd71;
	add.s32 	%r471, %r466, %r455;
	add.s32 	%r472, %r471, %r456;
	add.s32 	%r473, %r472, %r459;
	add.s32 	%r474, %r473, %r465;
	cvt.u64.u32 	%rd72, %r469;
	add.s64 	%rd73, %rd72, %rd61;
	shl.b64 	%rd74, %rd73, 2;
	add.s64 	%rd10, %rd55, %rd74;
	add.s32 	%r475, %r474, 2113;
	mul.wide.u32 	%rd75, %r475, 4;
	add.s64 	%rd11, %rd55, %rd75;
	add.s32 	%r476, %r470, 2082;
	mul.wide.u32 	%rd76, %r476, 4;
	add.s64 	%rd12, %rd55, %rd76;
	add.s32 	%r477, %r474, 2114;
	mul.wide.u32 	%rd77, %r477, 4;
	add.s64 	%rd13, %rd55, %rd77;
	add.s32 	%r478, %r474, 4194;
	mul.wide.u32 	%rd78, %r478, 4;
	add.s64 	%rd14, %rd55, %rd78;
	add.s32 	%r479, %r470, 4163;
	mul.wide.u32 	%rd79, %r479, 4;
	add.s64 	%rd15, %rd55, %rd79;
	add.s32 	%r480, %r474, 4195;
	mul.wide.u32 	%rd80, %r480, 4;
	add.s64 	%rd16, %rd55, %rd80;
	add.s32 	%r481, %r474, 6275;
	mul.wide.u32 	%rd81, %r481, 4;
	add.s64 	%rd17, %rd55, %rd81;
	add.s32 	%r482, %r470, 6244;
	mul.wide.u32 	%rd82, %r482, 4;
	add.s64 	%rd18, %rd55, %rd82;
	add.s32 	%r483, %r474, 6276;
	mul.wide.u32 	%rd83, %r483, 4;
	add.s64 	%rd19, %rd55, %rd83;
	and.b32  	%r484, %r1, 1;
	neg.s32 	%r485, %r484;
	and.b32  	%r486, %r485, 130;
	bfe.s32 	%r487, %r1, 1, 1;
	and.b32  	%r488, %r487, 65;
	and.b32  	%r489, %r427, 1040;
	bfe.s32 	%r490, %r1, 2, 1;
	and.b32  	%r54, %r490, 260;
	or.b32  	%r491, %r434, %r489;
	add.s32 	%r492, %r491, %r486;
	add.s32 	%r55, %r492, %r488;
	or.b32  	%r493, %r435, %r489;
	add.s32 	%r494, %r493, %r486;
	add.s32 	%r56, %r494, %r488;
	add.s32 	%r495, %r436, %r489;
	add.s32 	%r496, %r495, %r486;
	add.s32 	%r57, %r496, %r488;
	add.s32 	%r497, %r437, %r489;
	add.s32 	%r498, %r497, %r486;
	add.s32 	%r58, %r498, %r488;
	mul.wide.u32 	%rd84, %r443, 4;
	add.s64 	%rd20, %rd55, %rd84;
	mul.wide.u32 	%rd85, %r442, 4;
	add.s64 	%rd21, %rd55, %rd85;
	mul.wide.u32 	%rd86, %r441, 4;
	add.s64 	%rd22, %rd55, %rd86;
	mul.wide.u32 	%rd87, %r440, 4;
	add.s64 	%rd23, %rd55, %rd87;
	setp.eq.s32 	%p199, %r52, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8000, %r7958;
	mov.u32 	%r7999, %r7958;
	mov.u32 	%r7998, %r7958;
	mov.u32 	%r7997, %r7958;
	mov.u32 	%r7996, %r7958;
	mov.u32 	%r7995, %r7958;
	mov.u32 	%r7994, %r7958;
	mov.u32 	%r7993, %r7958;
	mov.u32 	%r7992, %r7958;
	mov.u32 	%r7991, %r7958;
	mov.u32 	%r7990, %r7958;
	mov.u32 	%r7989, %r7958;
	mov.u32 	%r7979, %r7958;
	bra.uni 	$L__BB0_80;
$L__BB0_85:                             // %L40108
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r7954, %r7960, 786432;
	cvt.s64.s32 	%rd141, %r7954;
	add.s64 	%rd142, %rd141, %rd7;
	shr.u64 	%rd143, %rd142, 35;
	add.s64 	%rd144, %rd142, %rd143;
	shr.s64 	%rd145, %rd144, 29;
	setp.lt.s64 	%p227, %rd142, 0;
	and.b64  	%rd146, %rd144, -536870912;
	setp.ne.s64 	%p228, %rd146, %rd142;
	and.pred  	%p229, %p227, %p228;
	selp.u64 	%rd147, 1, 0, %p229;
	sub.s64 	%rd148, %rd147, %rd145;
	shl.b64 	%rd149, %rd148, 29;
	add.s64 	%rd150, %rd149, %rd142;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd152, %rd3, %rd151;
	st.global.v4.u32 	[%rd152], {%r158, %r160, %r159, %r161};
	add.s32 	%r7979, %r7979, 256;
	add.s32 	%r7955, %r7979, %r163;
	setp.lt.s32 	%p230, %r7955, %r164;
	@%p230 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_86;
$L__BB0_80:                             // %L1334
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_81 Depth 2
	and.b32  	%r564, %r7979, 130816;
	or.b32  	%r565, %r50, %r564;
	shl.b32 	%r566, %r565, 12;
	add.s32 	%r567, %r51, %r566;
	shr.s32 	%r568, %r567, 31;
	shr.u32 	%r569, %r568, 3;
	add.s32 	%r570, %r567, %r569;
	shr.s32 	%r571, %r570, 29;
	setp.lt.s32 	%p200, %r567, 0;
	and.b32  	%r572, %r570, -536870912;
	setp.ne.s32 	%p201, %r572, %r567;
	and.pred  	%p202, %p200, %p201;
	selp.u32 	%r573, 1, 0, %p202;
	sub.s32 	%r574, %r573, %r571;
	shl.b32 	%r575, %r574, 29;
	add.s32 	%r576, %r575, %r567;
	mul.wide.s32 	%rd88, %r576, 4;
	add.s64 	%rd89, %rd2, %rd88;
	ld.global.v4.u32 	{%r577, %r578, %r579, %r580}, [%rd89];
	or.b32  	%r581, %r566, 262144;
	add.s32 	%r582, %r51, %r581;
	shr.s32 	%r583, %r582, 31;
	shr.u32 	%r584, %r583, 3;
	add.s32 	%r585, %r582, %r584;
	shr.s32 	%r586, %r585, 29;
	setp.lt.s32 	%p203, %r582, 0;
	and.b32  	%r587, %r585, -536870912;
	setp.ne.s32 	%p204, %r587, %r582;
	and.pred  	%p205, %p203, %p204;
	selp.u32 	%r588, 1, 0, %p205;
	sub.s32 	%r589, %r588, %r586;
	shl.b32 	%r590, %r589, 29;
	add.s32 	%r591, %r590, %r582;
	mul.wide.s32 	%rd90, %r591, 4;
	add.s64 	%rd91, %rd2, %rd90;
	ld.global.v4.u32 	{%r592, %r593, %r594, %r595}, [%rd91];
	or.b32  	%r596, %r566, 524288;
	add.s32 	%r597, %r51, %r596;
	shr.s32 	%r598, %r597, 31;
	shr.u32 	%r599, %r598, 3;
	add.s32 	%r600, %r597, %r599;
	shr.s32 	%r601, %r600, 29;
	setp.lt.s32 	%p206, %r597, 0;
	and.b32  	%r602, %r600, -536870912;
	setp.ne.s32 	%p207, %r602, %r597;
	and.pred  	%p208, %p206, %p207;
	selp.u32 	%r603, 1, 0, %p208;
	sub.s32 	%r604, %r603, %r601;
	shl.b32 	%r605, %r604, 29;
	add.s32 	%r606, %r605, %r597;
	mul.wide.s32 	%rd92, %r606, 4;
	add.s64 	%rd93, %rd2, %rd92;
	ld.global.v4.u32 	{%r607, %r608, %r609, %r610}, [%rd93];
	or.b32  	%r611, %r566, 786432;
	add.s32 	%r612, %r51, %r611;
	shr.s32 	%r613, %r612, 31;
	shr.u32 	%r614, %r613, 3;
	add.s32 	%r615, %r612, %r614;
	shr.s32 	%r616, %r615, 29;
	setp.lt.s32 	%p209, %r612, 0;
	and.b32  	%r617, %r615, -536870912;
	setp.ne.s32 	%p210, %r617, %r612;
	and.pred  	%p211, %p209, %p210;
	selp.u32 	%r618, 1, 0, %p211;
	sub.s32 	%r619, %r618, %r616;
	shl.b32 	%r620, %r619, 29;
	add.s32 	%r621, %r620, %r612;
	mul.wide.s32 	%rd94, %r621, 4;
	add.s64 	%rd95, %rd2, %rd94;
	ld.global.v4.u32 	{%r622, %r623, %r624, %r625}, [%rd95];
	selp.b32 	%r626, %r579, %r577, %p199;
	shfl.sync.bfly.b32	%r627, %r626, 8, 31, -1;
	selp.b32 	%r500, %r577, %r627, %p199;
	selp.b32 	%r501, %r627, %r579, %p199;
	selp.b32 	%r628, %r580, %r578, %p199;
	shfl.sync.bfly.b32	%r629, %r628, 8, 31, -1;
	selp.b32 	%r508, %r578, %r629, %p199;
	selp.b32 	%r509, %r629, %r580, %p199;
	selp.b32 	%r630, %r594, %r592, %p199;
	shfl.sync.bfly.b32	%r631, %r630, 8, 31, -1;
	selp.b32 	%r516, %r592, %r631, %p199;
	selp.b32 	%r517, %r631, %r594, %p199;
	selp.b32 	%r632, %r595, %r593, %p199;
	shfl.sync.bfly.b32	%r633, %r632, 8, 31, -1;
	selp.b32 	%r524, %r593, %r633, %p199;
	selp.b32 	%r525, %r633, %r595, %p199;
	selp.b32 	%r634, %r609, %r607, %p199;
	shfl.sync.bfly.b32	%r635, %r634, 8, 31, -1;
	selp.b32 	%r532, %r607, %r635, %p199;
	selp.b32 	%r533, %r635, %r609, %p199;
	selp.b32 	%r636, %r610, %r608, %p199;
	shfl.sync.bfly.b32	%r637, %r636, 8, 31, -1;
	selp.b32 	%r540, %r608, %r637, %p199;
	selp.b32 	%r541, %r637, %r610, %p199;
	selp.b32 	%r638, %r624, %r622, %p199;
	shfl.sync.bfly.b32	%r639, %r638, 8, 31, -1;
	selp.b32 	%r548, %r622, %r639, %p199;
	selp.b32 	%r549, %r639, %r624, %p199;
	selp.b32 	%r640, %r625, %r623, %p199;
	shfl.sync.bfly.b32	%r641, %r640, 8, 31, -1;
	selp.b32 	%r556, %r623, %r641, %p199;
	selp.b32 	%r557, %r641, %r625, %p199;
	mov.u32 	%r558, 21520;
	// begin inline asm
	prmt.b32 %r499, %r500, %r501, %r558;
	// end inline asm
	mov.u32 	%r562, 30258;
	// begin inline asm
	prmt.b32 %r503, %r500, %r501, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r507, %r508, %r509, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r511, %r508, %r509, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r516, %r517, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r516, %r517, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r524, %r525, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r524, %r525, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r532, %r533, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r532, %r533, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r540, %r541, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r540, %r541, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r548, %r549, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r548, %r549, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r556, %r557, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r556, %r557, %r562;
	// end inline asm
	st.shared.u32 	[%rd8], %r499;
	st.shared.u32 	[%rd9+128], %r503;
	st.shared.u32 	[%rd9+4], %r507;
	st.shared.u32 	[%rd9+132], %r511;
	st.shared.u32 	[%rd10+8324], %r515;
	st.shared.u32 	[%rd11], %r519;
	st.shared.u32 	[%rd12], %r523;
	st.shared.u32 	[%rd13], %r527;
	st.shared.u32 	[%rd10+16648], %r531;
	st.shared.u32 	[%rd14], %r535;
	st.shared.u32 	[%rd15], %r539;
	st.shared.u32 	[%rd16], %r543;
	st.shared.u32 	[%rd10+24972], %r547;
	st.shared.u32 	[%rd17], %r551;
	st.shared.u32 	[%rd18], %r555;
	st.shared.u32 	[%rd19], %r559;
	bar.sync 	0;
	or.b32  	%r72, %r7979, %r87;
	shr.u32 	%r7987, %r72, 6;
	mov.u64 	%rd155, %rd23;
	mov.u64 	%rd156, %rd22;
	mov.u64 	%rd157, %rd21;
	mov.u64 	%rd158, %rd20;
	mov.u32 	%r7988, %r7958;
$L__BB0_81:                             // %pass5532
                                        //   Parent Loop BB0_80 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7826, %r72, %r7988;
	bfe.s32 	%r7827, %r7826, 1, 1;
	and.b32  	%r7828, %r7827, 520;
	and.b32  	%r7829, %r7987, 3;
	mul.lo.s32 	%r7830, %r7829, 2081;
	add.s32 	%r7831, %r55, %r7828;
	add.s32 	%r7832, %r7831, %r7830;
	add.s32 	%r7833, %r7832, %r54;
	mul.wide.u32 	%rd96, %r7833, 4;
	add.s64 	%rd98, %rd55, %rd96;
	ld.shared.u32 	%r7834, [%rd98];
	add.s32 	%r7835, %r56, %r7828;
	add.s32 	%r7836, %r7835, %r7830;
	add.s32 	%r7837, %r7836, %r54;
	mul.wide.u32 	%rd99, %r7837, 4;
	add.s64 	%rd100, %rd55, %rd99;
	ld.shared.u32 	%r7838, [%rd100];
	add.s32 	%r7839, %r57, %r7828;
	add.s32 	%r7840, %r7839, %r7830;
	add.s32 	%r7841, %r7840, %r54;
	mul.wide.u32 	%rd101, %r7841, 4;
	add.s64 	%rd102, %rd55, %rd101;
	ld.shared.u32 	%r7842, [%rd102];
	add.s32 	%r7843, %r58, %r7828;
	add.s32 	%r7844, %r7843, %r7830;
	add.s32 	%r7845, %r7844, %r54;
	mul.wide.u32 	%rd103, %r7845, 4;
	add.s64 	%rd104, %rd55, %rd103;
	ld.shared.u32 	%r7846, [%rd104];
	// begin inline asm
	mov.b32 %r647, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r658, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r646, %r7834, -2004318072;
	mov.u32 	%r645, 983055;
	// begin inline asm
	lop3.b32 %r644, %r645, %r646, %r647, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r648, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r649, %r647, %r648;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r652, %r644, %r649;
	// end inline asm
	mov.u32 	%r656, 15728880;
	// begin inline asm
	lop3.b32 %r655, %r656, %r646, %r658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r659, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r660, %r658, %r659;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r663, %r655, %r660;
	// end inline asm
	shr.u32 	%r668, %r646, 8;
	// begin inline asm
	lop3.b32 %r666, %r645, %r668, %r647, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r670, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r671, %r647, %r670;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r674, %r666, %r671;
	// end inline asm
	// begin inline asm
	lop3.b32 %r677, %r656, %r668, %r658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r681, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r682, %r658, %r681;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r685, %r677, %r682;
	// end inline asm
	// begin inline asm
	mov.b32 %r693, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r704, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r692, %r7838, -2004318072;
	// begin inline asm
	lop3.b32 %r690, %r645, %r692, %r693, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r694, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r695, %r693, %r694;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r698, %r690, %r695;
	// end inline asm
	// begin inline asm
	lop3.b32 %r701, %r656, %r692, %r704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r705, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r706, %r704, %r705;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r709, %r701, %r706;
	// end inline asm
	shr.u32 	%r714, %r692, 8;
	// begin inline asm
	lop3.b32 %r712, %r645, %r714, %r693, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r716, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r717, %r693, %r716;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r720, %r712, %r717;
	// end inline asm
	// begin inline asm
	lop3.b32 %r723, %r656, %r714, %r704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r727, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r728, %r704, %r727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r731, %r723, %r728;
	// end inline asm
	// begin inline asm
	mov.b32 %r739, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r750, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r738, %r7842, -2004318072;
	// begin inline asm
	lop3.b32 %r736, %r645, %r738, %r739, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r740, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r741, %r739, %r740;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r744, %r736, %r741;
	// end inline asm
	// begin inline asm
	lop3.b32 %r747, %r656, %r738, %r750, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r751, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r752, %r750, %r751;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r755, %r747, %r752;
	// end inline asm
	shr.u32 	%r760, %r738, 8;
	// begin inline asm
	lop3.b32 %r758, %r645, %r760, %r739, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r762, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r763, %r739, %r762;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r766, %r758, %r763;
	// end inline asm
	// begin inline asm
	lop3.b32 %r769, %r656, %r760, %r750, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r773, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r774, %r750, %r773;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r777, %r769, %r774;
	// end inline asm
	// begin inline asm
	mov.b32 %r785, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r796, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r784, %r7846, -2004318072;
	// begin inline asm
	lop3.b32 %r782, %r645, %r784, %r785, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r786, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r787, %r785, %r786;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r790, %r782, %r787;
	// end inline asm
	// begin inline asm
	lop3.b32 %r793, %r656, %r784, %r796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r797, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r798, %r796, %r797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r801, %r793, %r798;
	// end inline asm
	shr.u32 	%r806, %r784, 8;
	// begin inline asm
	lop3.b32 %r804, %r645, %r806, %r785, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r808, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r809, %r785, %r808;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r812, %r804, %r809;
	// end inline asm
	// begin inline asm
	lop3.b32 %r815, %r656, %r806, %r796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r819, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r820, %r796, %r819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r823, %r815, %r820;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r826, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r828, %r826, %r652;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r831, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r833, %r831, %r663;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r836, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r838, %r836, %r674;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r841, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r843, %r841, %r685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r846, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r848, %r846, %r698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r851, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r853, %r851, %r709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r856, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r858, %r856, %r720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r861, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r863, %r861, %r731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r866, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r868, %r866, %r744;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r871, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r873, %r871, %r755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r876, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r878, %r876, %r766;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r881, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r883, %r881, %r777;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r886, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r888, %r886, %r790;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r891, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r893, %r891, %r801;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r896, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r898, %r896, %r812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r901, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r903, %r901, %r823;
	// end inline asm
	// begin inline asm
	mov.b32 %r911, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r922, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r910, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r908, %r645, %r910, %r911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r912, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r913, %r911, %r912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r916, %r908, %r913;
	// end inline asm
	// begin inline asm
	lop3.b32 %r919, %r656, %r910, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r924, %r922, %r923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r927, %r919, %r924;
	// end inline asm
	shr.u32 	%r932, %r910, 8;
	// begin inline asm
	lop3.b32 %r930, %r645, %r932, %r911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r935, %r911, %r934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r938, %r930, %r935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r941, %r656, %r932, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r945, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r946, %r922, %r945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r949, %r941, %r946;
	// end inline asm
	// begin inline asm
	mov.b32 %r957, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r956, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r954, %r645, %r956, %r957, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r958, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r959, %r957, %r958;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r962, %r954, %r959;
	// end inline asm
	// begin inline asm
	lop3.b32 %r965, %r656, %r956, %r968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r970, %r968, %r969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r973, %r965, %r970;
	// end inline asm
	shr.u32 	%r978, %r956, 8;
	// begin inline asm
	lop3.b32 %r976, %r645, %r978, %r957, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r981, %r957, %r980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r984, %r976, %r981;
	// end inline asm
	// begin inline asm
	lop3.b32 %r987, %r656, %r978, %r968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r991, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r992, %r968, %r991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r995, %r987, %r992;
	// end inline asm
	// begin inline asm
	mov.b32 %r1003, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1014, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1002, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r1000, %r645, %r1002, %r1003, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1004, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1005, %r1003, %r1004;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1008, %r1000, %r1005;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1011, %r656, %r1002, %r1014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1016, %r1014, %r1015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1019, %r1011, %r1016;
	// end inline asm
	shr.u32 	%r1024, %r1002, 8;
	// begin inline asm
	lop3.b32 %r1022, %r645, %r1024, %r1003, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1027, %r1003, %r1026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1030, %r1022, %r1027;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1033, %r656, %r1024, %r1014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1037, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1038, %r1014, %r1037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1041, %r1033, %r1038;
	// end inline asm
	// begin inline asm
	mov.b32 %r1049, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1048, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r1046, %r645, %r1048, %r1049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1050, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1051, %r1049, %r1050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1054, %r1046, %r1051;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1057, %r656, %r1048, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1061, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1062, %r1060, %r1061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1065, %r1057, %r1062;
	// end inline asm
	shr.u32 	%r1070, %r1048, 8;
	// begin inline asm
	lop3.b32 %r1068, %r645, %r1070, %r1049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1072, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1073, %r1049, %r1072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1076, %r1068, %r1073;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1079, %r656, %r1070, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1084, %r1060, %r1083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1087, %r1079, %r1084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1090, %r206, %r916, %r828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1094, %r206, %r927, %r833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1098, %r206, %r938, %r838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1102, %r206, %r949, %r843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r206, %r962, %r848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1110, %r206, %r973, %r853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1114, %r206, %r984, %r858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1118, %r206, %r995, %r863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1122, %r206, %r1008, %r868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r206, %r1019, %r873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r206, %r1030, %r878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1134, %r206, %r1041, %r883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1138, %r206, %r1054, %r888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r206, %r1065, %r893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r206, %r1076, %r898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1150, %r206, %r1087, %r903;
	// end inline asm
	// begin inline asm
	mov.b32 %r1159, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1170, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1158, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r1156, %r645, %r1158, %r1159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1160, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1161, %r1159, %r1160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1164, %r1156, %r1161;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1167, %r656, %r1158, %r1170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1171, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1172, %r1170, %r1171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1175, %r1167, %r1172;
	// end inline asm
	shr.u32 	%r1180, %r1158, 8;
	// begin inline asm
	lop3.b32 %r1178, %r645, %r1180, %r1159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1182, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1183, %r1159, %r1182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1186, %r1178, %r1183;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1189, %r656, %r1180, %r1170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1193, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1194, %r1170, %r1193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1197, %r1189, %r1194;
	// end inline asm
	// begin inline asm
	mov.b32 %r1205, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1216, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1204, %r7995, -2004318072;
	// begin inline asm
	lop3.b32 %r1202, %r645, %r1204, %r1205, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1206, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1207, %r1205, %r1206;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1210, %r1202, %r1207;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1213, %r656, %r1204, %r1216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1217, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1218, %r1216, %r1217;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1221, %r1213, %r1218;
	// end inline asm
	shr.u32 	%r1226, %r1204, 8;
	// begin inline asm
	lop3.b32 %r1224, %r645, %r1226, %r1205, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1228, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1229, %r1205, %r1228;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1232, %r1224, %r1229;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1235, %r656, %r1226, %r1216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1240, %r1216, %r1239;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1243, %r1235, %r1240;
	// end inline asm
	// begin inline asm
	mov.b32 %r1251, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1262, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1250, %r7994, -2004318072;
	// begin inline asm
	lop3.b32 %r1248, %r645, %r1250, %r1251, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1252, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1253, %r1251, %r1252;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1256, %r1248, %r1253;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1259, %r656, %r1250, %r1262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1263, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1264, %r1262, %r1263;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1267, %r1259, %r1264;
	// end inline asm
	shr.u32 	%r1272, %r1250, 8;
	// begin inline asm
	lop3.b32 %r1270, %r645, %r1272, %r1251, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1274, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1275, %r1251, %r1274;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1278, %r1270, %r1275;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1281, %r656, %r1272, %r1262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1285, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1286, %r1262, %r1285;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1289, %r1281, %r1286;
	// end inline asm
	// begin inline asm
	mov.b32 %r1297, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1308, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1296, %r7993, -2004318072;
	// begin inline asm
	lop3.b32 %r1294, %r645, %r1296, %r1297, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1298, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1299, %r1297, %r1298;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1302, %r1294, %r1299;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1305, %r656, %r1296, %r1308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1309, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1310, %r1308, %r1309;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1313, %r1305, %r1310;
	// end inline asm
	shr.u32 	%r1318, %r1296, 8;
	// begin inline asm
	lop3.b32 %r1316, %r645, %r1318, %r1297, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1320, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1321, %r1297, %r1320;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1324, %r1316, %r1321;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1327, %r656, %r1318, %r1308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1331, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1332, %r1308, %r1331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1335, %r1327, %r1332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1338, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1340, %r1338, %r1164, %r1090;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1344, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1346, %r1344, %r1175, %r1094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1350, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1352, %r1350, %r1186, %r1098;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1356, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1358, %r1356, %r1197, %r1102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1362, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r1362, %r1210, %r1106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1368, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1370, %r1368, %r1221, %r1110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1374, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1376, %r1374, %r1232, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1380, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r1380, %r1243, %r1118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1386, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1388, %r1386, %r1256, %r1122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1392, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1394, %r1392, %r1267, %r1126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1398, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1400, %r1398, %r1278, %r1130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1404, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r1404, %r1289, %r1134;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1410, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1412, %r1410, %r1302, %r1138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1416, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r1416, %r1313, %r1142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1422, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r1422, %r1324, %r1146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r1428, %r1335, %r1150;
	// end inline asm
	// begin inline asm
	mov.b32 %r1439, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1450, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1438, %r7992, -2004318072;
	// begin inline asm
	lop3.b32 %r1436, %r645, %r1438, %r1439, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1440, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1441, %r1439, %r1440;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1444, %r1436, %r1441;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1447, %r656, %r1438, %r1450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1451, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1452, %r1450, %r1451;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1455, %r1447, %r1452;
	// end inline asm
	shr.u32 	%r1460, %r1438, 8;
	// begin inline asm
	lop3.b32 %r1458, %r645, %r1460, %r1439, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1462, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1463, %r1439, %r1462;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1466, %r1458, %r1463;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1469, %r656, %r1460, %r1450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1473, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1474, %r1450, %r1473;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1477, %r1469, %r1474;
	// end inline asm
	// begin inline asm
	mov.b32 %r1485, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1496, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1484, %r7991, -2004318072;
	// begin inline asm
	lop3.b32 %r1482, %r645, %r1484, %r1485, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1486, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1487, %r1485, %r1486;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1490, %r1482, %r1487;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1493, %r656, %r1484, %r1496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1497, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1498, %r1496, %r1497;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1501, %r1493, %r1498;
	// end inline asm
	shr.u32 	%r1506, %r1484, 8;
	// begin inline asm
	lop3.b32 %r1504, %r645, %r1506, %r1485, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1508, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1509, %r1485, %r1508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1512, %r1504, %r1509;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1515, %r656, %r1506, %r1496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1519, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1520, %r1496, %r1519;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1523, %r1515, %r1520;
	// end inline asm
	// begin inline asm
	mov.b32 %r1531, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1542, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1530, %r7990, -2004318072;
	// begin inline asm
	lop3.b32 %r1528, %r645, %r1530, %r1531, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1532, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1533, %r1531, %r1532;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1536, %r1528, %r1533;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1539, %r656, %r1530, %r1542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1543, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1544, %r1542, %r1543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1547, %r1539, %r1544;
	// end inline asm
	shr.u32 	%r1552, %r1530, 8;
	// begin inline asm
	lop3.b32 %r1550, %r645, %r1552, %r1531, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1554, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1555, %r1531, %r1554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1558, %r1550, %r1555;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1561, %r656, %r1552, %r1542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1565, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1566, %r1542, %r1565;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1569, %r1561, %r1566;
	// end inline asm
	// begin inline asm
	mov.b32 %r1577, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1588, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1576, %r7989, -2004318072;
	// begin inline asm
	lop3.b32 %r1574, %r645, %r1576, %r1577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1578, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1579, %r1577, %r1578;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1582, %r1574, %r1579;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1585, %r656, %r1576, %r1588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1589, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1590, %r1588, %r1589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1593, %r1585, %r1590;
	// end inline asm
	shr.u32 	%r1598, %r1576, 8;
	// begin inline asm
	lop3.b32 %r1596, %r645, %r1598, %r1577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1600, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1601, %r1577, %r1600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1604, %r1596, %r1601;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1607, %r656, %r1598, %r1588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1611, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1612, %r1588, %r1611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1615, %r1607, %r1612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r242, %r1444, %r1340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r242, %r1455, %r1346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r242, %r1466, %r1352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r242, %r1477, %r1358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r242, %r1490, %r1364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r242, %r1501, %r1370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r242, %r1512, %r1376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1713, %r242, %r1523, %r1382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r242, %r1536, %r1388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r242, %r1547, %r1394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r242, %r1558, %r1400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r242, %r1569, %r1406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r242, %r1582, %r1412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r242, %r1593, %r1418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r242, %r1604, %r1424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r242, %r1615, %r1430;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1682, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1684, %r1682, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r263, %r1689, %r1684;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1691, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1693, %r1691, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r263, %r1698, %r1693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1700, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1702, %r1700, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r263, %r1707, %r1702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1709, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1711, %r1709, %r1713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r263, %r1716, %r1711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1718, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1720, %r1718, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r263, %r1725, %r1720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1727, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1729, %r1727, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r263, %r1734, %r1729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1736, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r1736, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r263, %r1743, %r1738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1745, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1747, %r1745, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r263, %r1752, %r1747;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r266, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r263, %r1686, %r1754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r266, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r263, %r1695, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r266, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r263, %r1704, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r266, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r263, %r1713, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r266, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r263, %r1722, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r266, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r263, %r1731, %r1789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r266, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r263, %r1740, %r1796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r266, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r263, %r1749, %r1803;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1897, %r1894}, {%r322, %r328, %r325, %r331}, {%r1687, %r1757}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1906, %r1903}, {%r322, %r328, %r325, %r331}, {%r1696, %r1764}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1915, %r1912}, {%r322, %r328, %r325, %r331}, {%r1705, %r1771}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1924, %r1921}, {%r322, %r328, %r325, %r331}, {%r1714, %r1778}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1933, %r1930}, {%r322, %r328, %r325, %r331}, {%r1723, %r1785}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1942, %r1939}, {%r322, %r328, %r325, %r331}, {%r1732, %r1792}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1951, %r1948}, {%r322, %r328, %r325, %r331}, {%r1741, %r1799}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1960, %r1957}, {%r322, %r328, %r325, %r331}, {%r1750, %r1806}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1890, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1892, %r1890, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1895, %r366, %r1897, %r1892;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1899, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1901, %r1899, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1904, %r366, %r1906, %r1901;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1908, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1910, %r1908, %r1912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r366, %r1915, %r1910;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1917, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1919, %r1917, %r1921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r366, %r1924, %r1919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1926, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1928, %r1926, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1931, %r366, %r1933, %r1928;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1935, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1937, %r1935, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1940, %r366, %r1942, %r1937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1944, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1946, %r1944, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1949, %r366, %r1951, %r1946;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1953, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1955, %r1953, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r366, %r1960, %r1955;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1962, %r369, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r366, %r1894, %r1962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r369, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r366, %r1903, %r1969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r369, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r366, %r1912, %r1976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1983, %r369, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r366, %r1921, %r1983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r369, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r366, %r1930, %r1990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1997, %r369, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r366, %r1939, %r1997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r369, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r366, %r1948, %r2004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r369, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r366, %r1957, %r2011;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2018, %r2019}, {%r400, %r406, %r403, %r409}, {%r1895, %r1965}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2028, %r2029}, {%r400, %r406, %r403, %r409}, {%r1904, %r1972}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2038, %r2039}, {%r400, %r406, %r403, %r409}, {%r1913, %r1979}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2048, %r2049}, {%r400, %r406, %r403, %r409}, {%r1922, %r1986}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2058, %r2059}, {%r400, %r406, %r403, %r409}, {%r1931, %r1993}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2068, %r2069}, {%r400, %r406, %r403, %r409}, {%r1940, %r2000}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2078, %r2079}, {%r400, %r406, %r403, %r409}, {%r1949, %r2007}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2088, %r2089}, {%r400, %r406, %r403, %r409}, {%r1958, %r2014}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r83, %r2018;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2101, %r83, %r2019;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2104, %r83, %r2028;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2107, %r83, %r2029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r83, %r2038;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2113, %r83, %r2039;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r83, %r2048;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r83, %r2049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r83, %r2058;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r83, %r2059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2128, %r83, %r2068;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r83, %r2069;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r83, %r2078;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2137, %r83, %r2079;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r83, %r2088;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2143, %r83, %r2089;
	// end inline asm
	// begin inline asm
	mov.b32 %r2146, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2147, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2148, %r2098, %r2146;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2151, %r2148, %r2147;
	// end inline asm
	// begin inline asm
	mov.b32 %r2154, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2155, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2156, %r2101, %r2154;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2159, %r2156, %r2155;
	// end inline asm
	// begin inline asm
	mov.b32 %r2162, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2163, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2164, %r2104, %r2162;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2167, %r2164, %r2163;
	// end inline asm
	// begin inline asm
	mov.b32 %r2170, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2171, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2172, %r2107, %r2170;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2175, %r2172, %r2171;
	// end inline asm
	// begin inline asm
	mov.b32 %r2178, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2179, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2180, %r2110, %r2178;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2183, %r2180, %r2179;
	// end inline asm
	// begin inline asm
	mov.b32 %r2186, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2187, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2188, %r2113, %r2186;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2191, %r2188, %r2187;
	// end inline asm
	// begin inline asm
	mov.b32 %r2194, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2195, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2196, %r2116, %r2194;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2199, %r2196, %r2195;
	// end inline asm
	// begin inline asm
	mov.b32 %r2202, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2203, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2204, %r2119, %r2202;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2207, %r2204, %r2203;
	// end inline asm
	// begin inline asm
	mov.b32 %r2210, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2211, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2212, %r2122, %r2210;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2215, %r2212, %r2211;
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2219, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2220, %r2125, %r2218;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2223, %r2220, %r2219;
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2228, %r2128, %r2226;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2231, %r2228, %r2227;
	// end inline asm
	// begin inline asm
	mov.b32 %r2234, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2235, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2236, %r2131, %r2234;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2239, %r2236, %r2235;
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2244, %r2134, %r2242;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2247, %r2244, %r2243;
	// end inline asm
	// begin inline asm
	mov.b32 %r2250, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2252, %r2137, %r2250;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2255, %r2252, %r2251;
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2260, %r2140, %r2258;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2263, %r2260, %r2259;
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2268, %r2143, %r2266;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2271, %r2268, %r2267;
	// end inline asm
	// begin inline asm
	mov.b32 %r2277, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2276, %r2277, %r2275;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2279, %r2151, %r2276;
	// end inline asm
	// begin inline asm
	mov.b32 %r2282, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2283, %r2277, %r2282;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2286, %r2159, %r2283;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2277, %r2289;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2293, %r2167, %r2290;
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2277, %r2296;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2175, %r2297;
	// end inline asm
	mov.u32 	%r2306, 25152;
	// begin inline asm
	prmt.b32 %r2303, %r2279, %r2293, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2307, %r2286, %r2300, %r2306;
	// end inline asm
	shl.b32 	%r2314, %r2307, 4;
	mov.u32 	%r2312, 252645135;
	// begin inline asm
	lop3.b32 %r2311, %r2312, %r2303, %r2314, 202;
	// end inline asm
	xor.b32  	%r7847, %r2311, -2004318072;
	// begin inline asm
	mov.b32 %r2318, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2316, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2317, %r2318, %r2316;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2320, %r2183, %r2317;
	// end inline asm
	// begin inline asm
	mov.b32 %r2323, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2324, %r2318, %r2323;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2327, %r2191, %r2324;
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2318, %r2330;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2334, %r2199, %r2331;
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2318, %r2337;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2341, %r2207, %r2338;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2344, %r2320, %r2334, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2348, %r2327, %r2341, %r2306;
	// end inline asm
	shl.b32 	%r2355, %r2348, 4;
	// begin inline asm
	lop3.b32 %r2352, %r2312, %r2344, %r2355, 202;
	// end inline asm
	xor.b32  	%r7848, %r2352, -2004318072;
	// begin inline asm
	mov.b32 %r2359, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2358, %r2359, %r2357;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2361, %r2215, %r2358;
	// end inline asm
	// begin inline asm
	mov.b32 %r2364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2365, %r2359, %r2364;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2368, %r2223, %r2365;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2359, %r2371;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2231, %r2372;
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2359, %r2378;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2239, %r2379;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2385, %r2361, %r2375, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2389, %r2368, %r2382, %r2306;
	// end inline asm
	shl.b32 	%r2396, %r2389, 4;
	// begin inline asm
	lop3.b32 %r2393, %r2312, %r2385, %r2396, 202;
	// end inline asm
	xor.b32  	%r7849, %r2393, -2004318072;
	// begin inline asm
	mov.b32 %r2400, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2398, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2399, %r2400, %r2398;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2402, %r2247, %r2399;
	// end inline asm
	// begin inline asm
	mov.b32 %r2405, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2406, %r2400, %r2405;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2409, %r2255, %r2406;
	// end inline asm
	// begin inline asm
	mov.b32 %r2412, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2413, %r2400, %r2412;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2416, %r2263, %r2413;
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2400, %r2419;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2423, %r2271, %r2420;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2426, %r2402, %r2416, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2430, %r2409, %r2423, %r2306;
	// end inline asm
	shl.b32 	%r2437, %r2430, 4;
	// begin inline asm
	lop3.b32 %r2434, %r2312, %r2426, %r2437, 202;
	// end inline asm
	xor.b32  	%r7850, %r2434, -2004318072;
	st.shared.u32 	[%rd155], %r7847;
	st.shared.u32 	[%rd156], %r7848;
	st.shared.u32 	[%rd157], %r7849;
	st.shared.u32 	[%rd158], %r7850;
	ld.shared.u32 	%r8000, [%rd98];
	ld.shared.u32 	%r7999, [%rd100];
	ld.shared.u32 	%r7998, [%rd102];
	ld.shared.u32 	%r7997, [%rd104];
	// begin inline asm
	mov.b32 %r2443, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2454, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2442, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r2440, %r645, %r2442, %r2443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2444, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2445, %r2443, %r2444;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2448, %r2440, %r2445;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2451, %r656, %r2442, %r2454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2455, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2456, %r2454, %r2455;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2459, %r2451, %r2456;
	// end inline asm
	shr.u32 	%r2464, %r2442, 8;
	// begin inline asm
	lop3.b32 %r2462, %r645, %r2464, %r2443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2466, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2467, %r2443, %r2466;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2470, %r2462, %r2467;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2473, %r656, %r2464, %r2454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2477, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2478, %r2454, %r2477;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2481, %r2473, %r2478;
	// end inline asm
	// begin inline asm
	mov.b32 %r2489, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2500, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2488, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r2486, %r645, %r2488, %r2489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2490, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2491, %r2489, %r2490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2494, %r2486, %r2491;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2497, %r656, %r2488, %r2500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2501, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2502, %r2500, %r2501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2505, %r2497, %r2502;
	// end inline asm
	shr.u32 	%r2510, %r2488, 8;
	// begin inline asm
	lop3.b32 %r2508, %r645, %r2510, %r2489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2512, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2513, %r2489, %r2512;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2516, %r2508, %r2513;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2519, %r656, %r2510, %r2500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2523, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2524, %r2500, %r2523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2527, %r2519, %r2524;
	// end inline asm
	// begin inline asm
	mov.b32 %r2535, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2546, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2534, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r2532, %r645, %r2534, %r2535, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2536, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2537, %r2535, %r2536;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2540, %r2532, %r2537;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2543, %r656, %r2534, %r2546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2547, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2548, %r2546, %r2547;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2551, %r2543, %r2548;
	// end inline asm
	shr.u32 	%r2556, %r2534, 8;
	// begin inline asm
	lop3.b32 %r2554, %r645, %r2556, %r2535, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2558, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2559, %r2535, %r2558;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2562, %r2554, %r2559;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2565, %r656, %r2556, %r2546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2569, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2570, %r2546, %r2569;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2573, %r2565, %r2570;
	// end inline asm
	// begin inline asm
	mov.b32 %r2581, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2592, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2580, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r2578, %r645, %r2580, %r2581, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2582, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2583, %r2581, %r2582;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2586, %r2578, %r2583;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2589, %r656, %r2580, %r2592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2593, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2594, %r2592, %r2593;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2597, %r2589, %r2594;
	// end inline asm
	shr.u32 	%r2602, %r2580, 8;
	// begin inline asm
	lop3.b32 %r2600, %r645, %r2602, %r2581, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2604, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2605, %r2581, %r2604;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2608, %r2600, %r2605;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2611, %r656, %r2602, %r2592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2615, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2616, %r2592, %r2615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2619, %r2611, %r2616;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2622, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2624, %r2622, %r2448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2627, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2629, %r2627, %r2459;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2632, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2634, %r2632, %r2470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2637, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2639, %r2637, %r2481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2642, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2644, %r2642, %r2494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2647, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2649, %r2647, %r2505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2652, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2654, %r2652, %r2516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2657, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2659, %r2657, %r2527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2662, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2664, %r2662, %r2540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2667, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r2667, %r2551;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2672, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2674, %r2672, %r2562;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2677, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r2677, %r2573;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2682, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2684, %r2682, %r2586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2687, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2689, %r2687, %r2597;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2692, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r2692, %r2608;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2697, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2699, %r2697, %r2619;
	// end inline asm
	// begin inline asm
	mov.b32 %r2707, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2718, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2704, %r645, %r1158, %r2707, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2708, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2709, %r2707, %r2708;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2712, %r2704, %r2709;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2715, %r656, %r1158, %r2718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2719, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2720, %r2718, %r2719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2723, %r2715, %r2720;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2726, %r645, %r1180, %r2707, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2731, %r2707, %r2730;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2734, %r2726, %r2731;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2737, %r656, %r1180, %r2718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2741, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2742, %r2718, %r2741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2745, %r2737, %r2742;
	// end inline asm
	// begin inline asm
	mov.b32 %r2753, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2764, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2750, %r645, %r1204, %r2753, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2754, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2755, %r2753, %r2754;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2758, %r2750, %r2755;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2761, %r656, %r1204, %r2764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2765, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2766, %r2764, %r2765;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2769, %r2761, %r2766;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2772, %r645, %r1226, %r2753, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2776, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2777, %r2753, %r2776;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2780, %r2772, %r2777;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2783, %r656, %r1226, %r2764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2787, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2788, %r2764, %r2787;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2791, %r2783, %r2788;
	// end inline asm
	// begin inline asm
	mov.b32 %r2799, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2810, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2796, %r645, %r1250, %r2799, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2800, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2801, %r2799, %r2800;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2804, %r2796, %r2801;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2807, %r656, %r1250, %r2810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2811, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2812, %r2810, %r2811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2815, %r2807, %r2812;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2818, %r645, %r1272, %r2799, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2822, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2823, %r2799, %r2822;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2826, %r2818, %r2823;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2829, %r656, %r1272, %r2810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2833, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2834, %r2810, %r2833;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2837, %r2829, %r2834;
	// end inline asm
	// begin inline asm
	mov.b32 %r2845, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2856, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2842, %r645, %r1296, %r2845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2846, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2847, %r2845, %r2846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2850, %r2842, %r2847;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2853, %r656, %r1296, %r2856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2857, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2858, %r2856, %r2857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2861, %r2853, %r2858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2864, %r645, %r1318, %r2845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2868, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2869, %r2845, %r2868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2872, %r2864, %r2869;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2875, %r656, %r1318, %r2856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2879, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2880, %r2856, %r2879;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2883, %r2875, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2886, %r206, %r2712, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r206, %r2723, %r2629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2894, %r206, %r2734, %r2634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r206, %r2745, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r206, %r2758, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r206, %r2769, %r2649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r206, %r2780, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r206, %r2791, %r2659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r206, %r2804, %r2664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2922, %r206, %r2815, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2926, %r206, %r2826, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r206, %r2837, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r206, %r2850, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r206, %r2861, %r2689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r206, %r2872, %r2694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r206, %r2883, %r2699;
	// end inline asm
	// begin inline asm
	mov.b32 %r2955, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2966, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2952, %r645, %r1438, %r2955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2957, %r2955, %r2956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2960, %r2952, %r2957;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2963, %r656, %r1438, %r2966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2968, %r2966, %r2967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2971, %r2963, %r2968;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2974, %r645, %r1460, %r2955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2978, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2979, %r2955, %r2978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2982, %r2974, %r2979;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2985, %r656, %r1460, %r2966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2990, %r2966, %r2989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2993, %r2985, %r2990;
	// end inline asm
	// begin inline asm
	mov.b32 %r3001, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3012, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2998, %r645, %r1484, %r3001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3002, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3003, %r3001, %r3002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3006, %r2998, %r3003;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3009, %r656, %r1484, %r3012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3013, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3014, %r3012, %r3013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3017, %r3009, %r3014;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3020, %r645, %r1506, %r3001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3024, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3025, %r3001, %r3024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3028, %r3020, %r3025;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3031, %r656, %r1506, %r3012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3035, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3036, %r3012, %r3035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3039, %r3031, %r3036;
	// end inline asm
	// begin inline asm
	mov.b32 %r3047, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3058, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3044, %r645, %r1530, %r3047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3048, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3049, %r3047, %r3048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3052, %r3044, %r3049;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3055, %r656, %r1530, %r3058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3059, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3060, %r3058, %r3059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3063, %r3055, %r3060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3066, %r645, %r1552, %r3047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3070, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3071, %r3047, %r3070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3074, %r3066, %r3071;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3077, %r656, %r1552, %r3058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3081, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3082, %r3058, %r3081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3085, %r3077, %r3082;
	// end inline asm
	// begin inline asm
	mov.b32 %r3093, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3104, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3090, %r645, %r1576, %r3093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3094, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3095, %r3093, %r3094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3098, %r3090, %r3095;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3101, %r656, %r1576, %r3104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3105, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3106, %r3104, %r3105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3109, %r3101, %r3106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3112, %r645, %r1598, %r3093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3116, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3117, %r3093, %r3116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3120, %r3112, %r3117;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3123, %r656, %r1598, %r3104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3127, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3128, %r3104, %r3127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3131, %r3123, %r3128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3134, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3136, %r3134, %r2960, %r2886;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3140, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r3140, %r2971, %r2890;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3146, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3148, %r3146, %r2982, %r2894;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3152, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r3152, %r2993, %r2898;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3158, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3160, %r3158, %r3006, %r2902;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3164, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3166, %r3164, %r3017, %r2906;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3170, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r3170, %r3028, %r2910;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3176, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3178, %r3176, %r3039, %r2914;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3182, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3184, %r3182, %r3052, %r2918;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3188, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3190, %r3188, %r3063, %r2922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3194, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3196, %r3194, %r3074, %r2926;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3200, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r3200, %r3085, %r2930;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3206, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r3206, %r3098, %r2934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3212, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r3212, %r3109, %r2938;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3218, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r3218, %r3120, %r2942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3224, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r3224, %r3131, %r2946;
	// end inline asm
	// begin inline asm
	mov.b32 %r3235, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3246, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3232, %r645, %r646, %r3235, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3236, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3237, %r3235, %r3236;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3240, %r3232, %r3237;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3243, %r656, %r646, %r3246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3247, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3248, %r3246, %r3247;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3251, %r3243, %r3248;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3254, %r645, %r668, %r3235, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3258, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3259, %r3235, %r3258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3262, %r3254, %r3259;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3265, %r656, %r668, %r3246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3269, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3270, %r3246, %r3269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3273, %r3265, %r3270;
	// end inline asm
	// begin inline asm
	mov.b32 %r3281, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3292, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3278, %r645, %r692, %r3281, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3282, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3283, %r3281, %r3282;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3286, %r3278, %r3283;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3289, %r656, %r692, %r3292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3293, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3294, %r3292, %r3293;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3297, %r3289, %r3294;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3300, %r645, %r714, %r3281, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3304, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3305, %r3281, %r3304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3308, %r3300, %r3305;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3311, %r656, %r714, %r3292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3316, %r3292, %r3315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3319, %r3311, %r3316;
	// end inline asm
	// begin inline asm
	mov.b32 %r3327, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3338, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3324, %r645, %r738, %r3327, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3328, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3329, %r3327, %r3328;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3332, %r3324, %r3329;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3335, %r656, %r738, %r3338, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3339, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3340, %r3338, %r3339;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3343, %r3335, %r3340;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3346, %r645, %r760, %r3327, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3351, %r3327, %r3350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3354, %r3346, %r3351;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3357, %r656, %r760, %r3338, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3361, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3362, %r3338, %r3361;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3365, %r3357, %r3362;
	// end inline asm
	// begin inline asm
	mov.b32 %r3373, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3384, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3370, %r645, %r784, %r3373, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3374, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3375, %r3373, %r3374;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3378, %r3370, %r3375;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3381, %r656, %r784, %r3384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3385, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3386, %r3384, %r3385;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3389, %r3381, %r3386;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3392, %r645, %r806, %r3373, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3396, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3397, %r3373, %r3396;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3400, %r3392, %r3397;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3403, %r656, %r806, %r3384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3407, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3408, %r3384, %r3407;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3411, %r3403, %r3408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3485, %r242, %r3240, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3482, %r242, %r3251, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r242, %r3262, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3491, %r242, %r3273, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r242, %r3286, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r242, %r3297, %r3166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r242, %r3308, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3509, %r242, %r3319, %r3178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r242, %r3332, %r3184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3518, %r242, %r3343, %r3190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r242, %r3354, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3527, %r242, %r3365, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r242, %r3378, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3536, %r242, %r3389, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3548, %r242, %r3400, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3545, %r242, %r3411, %r3226;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3478, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3480, %r3478, %r3482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3483, %r263, %r3485, %r3480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3487, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3489, %r3487, %r3491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3492, %r263, %r3494, %r3489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3496, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3498, %r3496, %r3500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r263, %r3503, %r3498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3505, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3507, %r3505, %r3509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r263, %r3512, %r3507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3514, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3516, %r3514, %r3518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r263, %r3521, %r3516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3523, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3525, %r3523, %r3527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r263, %r3530, %r3525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3532, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3534, %r3532, %r3536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r263, %r3539, %r3534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3541, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3543, %r3541, %r3545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r263, %r3548, %r3543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r266, %r3485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r263, %r3482, %r3550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3557, %r266, %r3494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r263, %r3491, %r3557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r266, %r3503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r263, %r3500, %r3564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3571, %r266, %r3512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r263, %r3509, %r3571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3578, %r266, %r3521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r263, %r3518, %r3578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3585, %r266, %r3530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3588, %r263, %r3527, %r3585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3592, %r266, %r3539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3595, %r263, %r3536, %r3592;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3599, %r266, %r3548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3602, %r263, %r3545, %r3599;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3693, %r3690}, {%r322, %r328, %r325, %r331}, {%r3483, %r3553}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3702, %r3699}, {%r322, %r328, %r325, %r331}, {%r3492, %r3560}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3711, %r3708}, {%r322, %r328, %r325, %r331}, {%r3501, %r3567}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3720, %r3717}, {%r322, %r328, %r325, %r331}, {%r3510, %r3574}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3729, %r3726}, {%r322, %r328, %r325, %r331}, {%r3519, %r3581}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3738, %r3735}, {%r322, %r328, %r325, %r331}, {%r3528, %r3588}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3747, %r3744}, {%r322, %r328, %r325, %r331}, {%r3537, %r3595}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3756, %r3753}, {%r322, %r328, %r325, %r331}, {%r3546, %r3602}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3686, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3688, %r3686, %r3690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3691, %r366, %r3693, %r3688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3695, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3697, %r3695, %r3699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3700, %r366, %r3702, %r3697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3704, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3706, %r3704, %r3708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3709, %r366, %r3711, %r3706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3713, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3715, %r3713, %r3717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3718, %r366, %r3720, %r3715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3722, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3724, %r3722, %r3726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3727, %r366, %r3729, %r3724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3731, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3733, %r3731, %r3735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3736, %r366, %r3738, %r3733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3740, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3742, %r3740, %r3744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3745, %r366, %r3747, %r3742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3749, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3751, %r3749, %r3753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3754, %r366, %r3756, %r3751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3758, %r369, %r3693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r366, %r3690, %r3758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3765, %r369, %r3702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3768, %r366, %r3699, %r3765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3772, %r369, %r3711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3775, %r366, %r3708, %r3772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3779, %r369, %r3720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3782, %r366, %r3717, %r3779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3786, %r369, %r3729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3789, %r366, %r3726, %r3786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3793, %r369, %r3738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3796, %r366, %r3735, %r3793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3800, %r369, %r3747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3803, %r366, %r3744, %r3800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3807, %r369, %r3756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3810, %r366, %r3753, %r3807;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3814, %r3815}, {%r400, %r406, %r403, %r409}, {%r3691, %r3761}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3824, %r3825}, {%r400, %r406, %r403, %r409}, {%r3700, %r3768}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3834, %r3835}, {%r400, %r406, %r403, %r409}, {%r3709, %r3775}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3844, %r3845}, {%r400, %r406, %r403, %r409}, {%r3718, %r3782}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3854, %r3855}, {%r400, %r406, %r403, %r409}, {%r3727, %r3789}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3864, %r3865}, {%r400, %r406, %r403, %r409}, {%r3736, %r3796}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3874, %r3875}, {%r400, %r406, %r403, %r409}, {%r3745, %r3803}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3884, %r3885}, {%r400, %r406, %r403, %r409}, {%r3754, %r3810}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3894, %r83, %r3814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3897, %r83, %r3815;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3900, %r83, %r3824;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3903, %r83, %r3825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3906, %r83, %r3834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3909, %r83, %r3835;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3912, %r83, %r3844;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3915, %r83, %r3845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3918, %r83, %r3854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3921, %r83, %r3855;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3924, %r83, %r3864;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3927, %r83, %r3865;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3930, %r83, %r3874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3933, %r83, %r3875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3936, %r83, %r3884;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3939, %r83, %r3885;
	// end inline asm
	// begin inline asm
	mov.b32 %r3942, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3943, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3944, %r3894, %r3942;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3947, %r3944, %r3943;
	// end inline asm
	// begin inline asm
	mov.b32 %r3950, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3951, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3952, %r3897, %r3950;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3955, %r3952, %r3951;
	// end inline asm
	// begin inline asm
	mov.b32 %r3958, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3959, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3960, %r3900, %r3958;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3963, %r3960, %r3959;
	// end inline asm
	// begin inline asm
	mov.b32 %r3966, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3967, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3968, %r3903, %r3966;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3971, %r3968, %r3967;
	// end inline asm
	// begin inline asm
	mov.b32 %r3974, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3975, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3976, %r3906, %r3974;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3979, %r3976, %r3975;
	// end inline asm
	// begin inline asm
	mov.b32 %r3982, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3983, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3984, %r3909, %r3982;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3987, %r3984, %r3983;
	// end inline asm
	// begin inline asm
	mov.b32 %r3990, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3991, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3992, %r3912, %r3990;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3995, %r3992, %r3991;
	// end inline asm
	// begin inline asm
	mov.b32 %r3998, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3999, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4000, %r3915, %r3998;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4003, %r4000, %r3999;
	// end inline asm
	// begin inline asm
	mov.b32 %r4006, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4007, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4008, %r3918, %r4006;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4011, %r4008, %r4007;
	// end inline asm
	// begin inline asm
	mov.b32 %r4014, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4015, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4016, %r3921, %r4014;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4019, %r4016, %r4015;
	// end inline asm
	// begin inline asm
	mov.b32 %r4022, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4023, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4024, %r3924, %r4022;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4027, %r4024, %r4023;
	// end inline asm
	// begin inline asm
	mov.b32 %r4030, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4031, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4032, %r3927, %r4030;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4035, %r4032, %r4031;
	// end inline asm
	// begin inline asm
	mov.b32 %r4038, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4039, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4040, %r3930, %r4038;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4043, %r4040, %r4039;
	// end inline asm
	// begin inline asm
	mov.b32 %r4046, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4047, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4048, %r3933, %r4046;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4051, %r4048, %r4047;
	// end inline asm
	// begin inline asm
	mov.b32 %r4054, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4055, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4056, %r3936, %r4054;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4059, %r4056, %r4055;
	// end inline asm
	// begin inline asm
	mov.b32 %r4062, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4063, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4064, %r3939, %r4062;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4067, %r4064, %r4063;
	// end inline asm
	// begin inline asm
	mov.b32 %r4073, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4071, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4072, %r4073, %r4071;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4075, %r3947, %r4072;
	// end inline asm
	// begin inline asm
	mov.b32 %r4078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4079, %r4073, %r4078;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4082, %r3955, %r4079;
	// end inline asm
	// begin inline asm
	mov.b32 %r4085, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4086, %r4073, %r4085;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4089, %r3963, %r4086;
	// end inline asm
	// begin inline asm
	mov.b32 %r4092, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4093, %r4073, %r4092;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4096, %r3971, %r4093;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4099, %r4075, %r4089, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4103, %r4082, %r4096, %r2306;
	// end inline asm
	shl.b32 	%r4110, %r4103, 4;
	// begin inline asm
	lop3.b32 %r4107, %r2312, %r4099, %r4110, 202;
	// end inline asm
	xor.b32  	%r7851, %r4107, -2004318072;
	// begin inline asm
	mov.b32 %r4114, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4112, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4113, %r4114, %r4112;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4116, %r3979, %r4113;
	// end inline asm
	// begin inline asm
	mov.b32 %r4119, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4120, %r4114, %r4119;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4123, %r3987, %r4120;
	// end inline asm
	// begin inline asm
	mov.b32 %r4126, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4127, %r4114, %r4126;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4130, %r3995, %r4127;
	// end inline asm
	// begin inline asm
	mov.b32 %r4133, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4134, %r4114, %r4133;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4137, %r4003, %r4134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4140, %r4116, %r4130, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4144, %r4123, %r4137, %r2306;
	// end inline asm
	shl.b32 	%r4151, %r4144, 4;
	// begin inline asm
	lop3.b32 %r4148, %r2312, %r4140, %r4151, 202;
	// end inline asm
	xor.b32  	%r7852, %r4148, -2004318072;
	// begin inline asm
	mov.b32 %r4155, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4153, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4154, %r4155, %r4153;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4157, %r4011, %r4154;
	// end inline asm
	// begin inline asm
	mov.b32 %r4160, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4161, %r4155, %r4160;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4164, %r4019, %r4161;
	// end inline asm
	// begin inline asm
	mov.b32 %r4167, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4168, %r4155, %r4167;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4171, %r4027, %r4168;
	// end inline asm
	// begin inline asm
	mov.b32 %r4174, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4175, %r4155, %r4174;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4178, %r4035, %r4175;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4181, %r4157, %r4171, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4185, %r4164, %r4178, %r2306;
	// end inline asm
	shl.b32 	%r4192, %r4185, 4;
	// begin inline asm
	lop3.b32 %r4189, %r2312, %r4181, %r4192, 202;
	// end inline asm
	xor.b32  	%r7853, %r4189, -2004318072;
	// begin inline asm
	mov.b32 %r4196, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4194, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4195, %r4196, %r4194;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4198, %r4043, %r4195;
	// end inline asm
	// begin inline asm
	mov.b32 %r4201, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4202, %r4196, %r4201;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4205, %r4051, %r4202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4208, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4209, %r4196, %r4208;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4212, %r4059, %r4209;
	// end inline asm
	// begin inline asm
	mov.b32 %r4215, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4216, %r4196, %r4215;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4219, %r4067, %r4216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4222, %r4198, %r4212, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4226, %r4205, %r4219, %r2306;
	// end inline asm
	shl.b32 	%r4233, %r4226, 4;
	// begin inline asm
	lop3.b32 %r4230, %r2312, %r4222, %r4233, 202;
	// end inline asm
	xor.b32  	%r7854, %r4230, -2004318072;
	st.shared.u32 	[%rd155], %r7851;
	st.shared.u32 	[%rd156], %r7852;
	st.shared.u32 	[%rd157], %r7853;
	st.shared.u32 	[%rd158], %r7854;
	ld.shared.u32 	%r7996, [%rd98];
	ld.shared.u32 	%r7995, [%rd100];
	ld.shared.u32 	%r7994, [%rd102];
	ld.shared.u32 	%r7993, [%rd104];
	// begin inline asm
	mov.b32 %r4239, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4250, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4238, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r4236, %r645, %r4238, %r4239, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4240, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4241, %r4239, %r4240;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4244, %r4236, %r4241;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4247, %r656, %r4238, %r4250, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4251, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4252, %r4250, %r4251;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4255, %r4247, %r4252;
	// end inline asm
	shr.u32 	%r4260, %r4238, 8;
	// begin inline asm
	lop3.b32 %r4258, %r645, %r4260, %r4239, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4262, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4263, %r4239, %r4262;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4266, %r4258, %r4263;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4269, %r656, %r4260, %r4250, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4273, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4274, %r4250, %r4273;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4277, %r4269, %r4274;
	// end inline asm
	// begin inline asm
	mov.b32 %r4285, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4296, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4284, %r7995, -2004318072;
	// begin inline asm
	lop3.b32 %r4282, %r645, %r4284, %r4285, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4286, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4287, %r4285, %r4286;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4290, %r4282, %r4287;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4293, %r656, %r4284, %r4296, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4297, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4298, %r4296, %r4297;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4301, %r4293, %r4298;
	// end inline asm
	shr.u32 	%r4306, %r4284, 8;
	// begin inline asm
	lop3.b32 %r4304, %r645, %r4306, %r4285, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4308, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4309, %r4285, %r4308;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4312, %r4304, %r4309;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4315, %r656, %r4306, %r4296, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4319, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4320, %r4296, %r4319;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4323, %r4315, %r4320;
	// end inline asm
	// begin inline asm
	mov.b32 %r4331, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4342, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4330, %r7994, -2004318072;
	// begin inline asm
	lop3.b32 %r4328, %r645, %r4330, %r4331, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4332, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4333, %r4331, %r4332;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4336, %r4328, %r4333;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4339, %r656, %r4330, %r4342, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4343, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4344, %r4342, %r4343;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4347, %r4339, %r4344;
	// end inline asm
	shr.u32 	%r4352, %r4330, 8;
	// begin inline asm
	lop3.b32 %r4350, %r645, %r4352, %r4331, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4354, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4355, %r4331, %r4354;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4358, %r4350, %r4355;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4361, %r656, %r4352, %r4342, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4365, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4366, %r4342, %r4365;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4369, %r4361, %r4366;
	// end inline asm
	// begin inline asm
	mov.b32 %r4377, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4388, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4376, %r7993, -2004318072;
	// begin inline asm
	lop3.b32 %r4374, %r645, %r4376, %r4377, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4378, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4379, %r4377, %r4378;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4382, %r4374, %r4379;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4385, %r656, %r4376, %r4388, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4389, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4390, %r4388, %r4389;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4393, %r4385, %r4390;
	// end inline asm
	shr.u32 	%r4398, %r4376, 8;
	// begin inline asm
	lop3.b32 %r4396, %r645, %r4398, %r4377, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4400, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4401, %r4377, %r4400;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4404, %r4396, %r4401;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4407, %r656, %r4398, %r4388, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4411, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4412, %r4388, %r4411;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4415, %r4407, %r4412;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4418, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4420, %r4418, %r4244;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4423, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4425, %r4423, %r4255;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4428, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4430, %r4428, %r4266;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4433, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4435, %r4433, %r4277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4438, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4440, %r4438, %r4290;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4443, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4445, %r4443, %r4301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4448, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4450, %r4448, %r4312;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4453, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4455, %r4453, %r4323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4458, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4460, %r4458, %r4336;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4463, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4465, %r4463, %r4347;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4468, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4470, %r4468, %r4358;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4473, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4475, %r4473, %r4369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4478, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4480, %r4478, %r4382;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4483, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4485, %r4483, %r4393;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4488, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4490, %r4488, %r4404;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4493, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4495, %r4493, %r4415;
	// end inline asm
	// begin inline asm
	mov.b32 %r4503, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4514, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4500, %r645, %r1438, %r4503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4504, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4505, %r4503, %r4504;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4508, %r4500, %r4505;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4511, %r656, %r1438, %r4514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4515, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4516, %r4514, %r4515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4519, %r4511, %r4516;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4522, %r645, %r1460, %r4503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4526, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4527, %r4503, %r4526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4530, %r4522, %r4527;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4533, %r656, %r1460, %r4514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4537, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4538, %r4514, %r4537;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4541, %r4533, %r4538;
	// end inline asm
	// begin inline asm
	mov.b32 %r4549, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4560, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4546, %r645, %r1484, %r4549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4550, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4551, %r4549, %r4550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4554, %r4546, %r4551;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4557, %r656, %r1484, %r4560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4561, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4562, %r4560, %r4561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4565, %r4557, %r4562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4568, %r645, %r1506, %r4549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4572, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4573, %r4549, %r4572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4576, %r4568, %r4573;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4579, %r656, %r1506, %r4560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4583, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4584, %r4560, %r4583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4587, %r4579, %r4584;
	// end inline asm
	// begin inline asm
	mov.b32 %r4595, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4606, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4592, %r645, %r1530, %r4595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4596, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4597, %r4595, %r4596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4600, %r4592, %r4597;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4603, %r656, %r1530, %r4606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4607, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4608, %r4606, %r4607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4611, %r4603, %r4608;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4614, %r645, %r1552, %r4595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4618, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4619, %r4595, %r4618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4622, %r4614, %r4619;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4625, %r656, %r1552, %r4606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4629, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4630, %r4606, %r4629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4633, %r4625, %r4630;
	// end inline asm
	// begin inline asm
	mov.b32 %r4641, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4652, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4638, %r645, %r1576, %r4641, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4642, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4643, %r4641, %r4642;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4646, %r4638, %r4643;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4649, %r656, %r1576, %r4652, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4653, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4654, %r4652, %r4653;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4657, %r4649, %r4654;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4660, %r645, %r1598, %r4641, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4664, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4665, %r4641, %r4664;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4668, %r4660, %r4665;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4671, %r656, %r1598, %r4652, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4675, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4676, %r4652, %r4675;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4679, %r4671, %r4676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4682, %r206, %r4508, %r4420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4686, %r206, %r4519, %r4425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4690, %r206, %r4530, %r4430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4694, %r206, %r4541, %r4435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4698, %r206, %r4554, %r4440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4702, %r206, %r4565, %r4445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4706, %r206, %r4576, %r4450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4710, %r206, %r4587, %r4455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4714, %r206, %r4600, %r4460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4718, %r206, %r4611, %r4465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4722, %r206, %r4622, %r4470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4726, %r206, %r4633, %r4475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4730, %r206, %r4646, %r4480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4734, %r206, %r4657, %r4485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4738, %r206, %r4668, %r4490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4742, %r206, %r4679, %r4495;
	// end inline asm
	// begin inline asm
	mov.b32 %r4751, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4762, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4748, %r645, %r646, %r4751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4753, %r4751, %r4752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4756, %r4748, %r4753;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4759, %r656, %r646, %r4762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4763, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4764, %r4762, %r4763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4767, %r4759, %r4764;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4770, %r645, %r668, %r4751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4774, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4775, %r4751, %r4774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4778, %r4770, %r4775;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4781, %r656, %r668, %r4762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4786, %r4762, %r4785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4789, %r4781, %r4786;
	// end inline asm
	// begin inline asm
	mov.b32 %r4797, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4808, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4794, %r645, %r692, %r4797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4799, %r4797, %r4798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4802, %r4794, %r4799;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4805, %r656, %r692, %r4808, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4809, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4810, %r4808, %r4809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4813, %r4805, %r4810;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4816, %r645, %r714, %r4797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4820, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4821, %r4797, %r4820;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4824, %r4816, %r4821;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4827, %r656, %r714, %r4808, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4831, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4832, %r4808, %r4831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4835, %r4827, %r4832;
	// end inline asm
	// begin inline asm
	mov.b32 %r4843, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4854, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4840, %r645, %r738, %r4843, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4844, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4845, %r4843, %r4844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4848, %r4840, %r4845;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4851, %r656, %r738, %r4854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4855, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4856, %r4854, %r4855;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4859, %r4851, %r4856;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4862, %r645, %r760, %r4843, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4866, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4867, %r4843, %r4866;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4870, %r4862, %r4867;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4873, %r656, %r760, %r4854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4877, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4878, %r4854, %r4877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4881, %r4873, %r4878;
	// end inline asm
	// begin inline asm
	mov.b32 %r4889, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4900, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4886, %r645, %r784, %r4889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4890, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4891, %r4889, %r4890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4894, %r4886, %r4891;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4897, %r656, %r784, %r4900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4901, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4902, %r4900, %r4901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4905, %r4897, %r4902;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4908, %r645, %r806, %r4889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4912, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4913, %r4889, %r4912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4916, %r4908, %r4913;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4919, %r656, %r806, %r4900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4923, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4924, %r4900, %r4923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4927, %r4919, %r4924;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4930, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4932, %r4930, %r4756, %r4682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4936, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4938, %r4936, %r4767, %r4686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4942, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4944, %r4942, %r4778, %r4690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4948, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4950, %r4948, %r4789, %r4694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4954, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4956, %r4954, %r4802, %r4698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4960, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4962, %r4960, %r4813, %r4702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4966, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4968, %r4966, %r4824, %r4706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4972, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4974, %r4972, %r4835, %r4710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4978, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4980, %r4978, %r4848, %r4714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4984, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4986, %r4984, %r4859, %r4718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4990, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4992, %r4990, %r4870, %r4722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4996, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4998, %r4996, %r4881, %r4726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5002, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5004, %r5002, %r4894, %r4730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5008, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5010, %r5008, %r4905, %r4734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5014, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5016, %r5014, %r4916, %r4738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5020, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5022, %r5020, %r4927, %r4742;
	// end inline asm
	// begin inline asm
	mov.b32 %r5031, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5042, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5028, %r645, %r2442, %r5031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5032, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5033, %r5031, %r5032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5036, %r5028, %r5033;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5039, %r656, %r2442, %r5042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5043, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5044, %r5042, %r5043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5047, %r5039, %r5044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5050, %r645, %r2464, %r5031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5054, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5055, %r5031, %r5054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5058, %r5050, %r5055;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5061, %r656, %r2464, %r5042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5065, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5066, %r5042, %r5065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5069, %r5061, %r5066;
	// end inline asm
	// begin inline asm
	mov.b32 %r5077, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5088, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5074, %r645, %r2488, %r5077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5079, %r5077, %r5078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5082, %r5074, %r5079;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5085, %r656, %r2488, %r5088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5090, %r5088, %r5089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5093, %r5085, %r5090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5096, %r645, %r2510, %r5077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5100, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5101, %r5077, %r5100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5104, %r5096, %r5101;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5107, %r656, %r2510, %r5088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5112, %r5088, %r5111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5115, %r5107, %r5112;
	// end inline asm
	// begin inline asm
	mov.b32 %r5123, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5134, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5120, %r645, %r2534, %r5123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5124, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5125, %r5123, %r5124;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5128, %r5120, %r5125;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5131, %r656, %r2534, %r5134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5135, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5136, %r5134, %r5135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5139, %r5131, %r5136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5142, %r645, %r2556, %r5123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5147, %r5123, %r5146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5150, %r5142, %r5147;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5153, %r656, %r2556, %r5134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5157, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5158, %r5134, %r5157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5161, %r5153, %r5158;
	// end inline asm
	// begin inline asm
	mov.b32 %r5169, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5180, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5166, %r645, %r2580, %r5169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5170, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5171, %r5169, %r5170;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5174, %r5166, %r5171;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5177, %r656, %r2580, %r5180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5181, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5182, %r5180, %r5181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5185, %r5177, %r5182;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5188, %r645, %r2602, %r5169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5193, %r5169, %r5192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5196, %r5188, %r5193;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5199, %r656, %r2602, %r5180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5203, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5204, %r5180, %r5203;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5207, %r5199, %r5204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5281, %r242, %r5036, %r4932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5278, %r242, %r5047, %r4938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5290, %r242, %r5058, %r4944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5287, %r242, %r5069, %r4950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5299, %r242, %r5082, %r4956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5296, %r242, %r5093, %r4962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5308, %r242, %r5104, %r4968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5305, %r242, %r5115, %r4974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5317, %r242, %r5128, %r4980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5314, %r242, %r5139, %r4986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5326, %r242, %r5150, %r4992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5323, %r242, %r5161, %r4998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5335, %r242, %r5174, %r5004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5332, %r242, %r5185, %r5010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5344, %r242, %r5196, %r5016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5341, %r242, %r5207, %r5022;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5274, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5276, %r5274, %r5278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5279, %r263, %r5281, %r5276;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5283, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5285, %r5283, %r5287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5288, %r263, %r5290, %r5285;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5292, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5294, %r5292, %r5296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5297, %r263, %r5299, %r5294;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5301, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5303, %r5301, %r5305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5306, %r263, %r5308, %r5303;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5310, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5312, %r5310, %r5314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5315, %r263, %r5317, %r5312;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5319, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5321, %r5319, %r5323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5324, %r263, %r5326, %r5321;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5328, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5330, %r5328, %r5332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5333, %r263, %r5335, %r5330;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5337, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5339, %r5337, %r5341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r263, %r5344, %r5339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5346, %r266, %r5281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5349, %r263, %r5278, %r5346;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5353, %r266, %r5290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5356, %r263, %r5287, %r5353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5360, %r266, %r5299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5363, %r263, %r5296, %r5360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5367, %r266, %r5308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5370, %r263, %r5305, %r5367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5374, %r266, %r5317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5377, %r263, %r5314, %r5374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5381, %r266, %r5326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5384, %r263, %r5323, %r5381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5388, %r266, %r5335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5391, %r263, %r5332, %r5388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5395, %r266, %r5344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5398, %r263, %r5341, %r5395;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5489, %r5486}, {%r322, %r328, %r325, %r331}, {%r5279, %r5349}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5498, %r5495}, {%r322, %r328, %r325, %r331}, {%r5288, %r5356}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5507, %r5504}, {%r322, %r328, %r325, %r331}, {%r5297, %r5363}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5516, %r5513}, {%r322, %r328, %r325, %r331}, {%r5306, %r5370}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5525, %r5522}, {%r322, %r328, %r325, %r331}, {%r5315, %r5377}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5534, %r5531}, {%r322, %r328, %r325, %r331}, {%r5324, %r5384}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5543, %r5540}, {%r322, %r328, %r325, %r331}, {%r5333, %r5391}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5552, %r5549}, {%r322, %r328, %r325, %r331}, {%r5342, %r5398}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5482, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5484, %r5482, %r5486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5487, %r366, %r5489, %r5484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5491, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5493, %r5491, %r5495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5496, %r366, %r5498, %r5493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5500, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5502, %r5500, %r5504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5505, %r366, %r5507, %r5502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5509, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5511, %r5509, %r5513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5514, %r366, %r5516, %r5511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5518, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5520, %r5518, %r5522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5523, %r366, %r5525, %r5520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5527, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5529, %r5527, %r5531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5532, %r366, %r5534, %r5529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5536, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5538, %r5536, %r5540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5541, %r366, %r5543, %r5538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5545, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5547, %r5545, %r5549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5550, %r366, %r5552, %r5547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5554, %r369, %r5489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5557, %r366, %r5486, %r5554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5561, %r369, %r5498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5564, %r366, %r5495, %r5561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5568, %r369, %r5507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5571, %r366, %r5504, %r5568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5575, %r369, %r5516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5578, %r366, %r5513, %r5575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5582, %r369, %r5525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5585, %r366, %r5522, %r5582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5589, %r369, %r5534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5592, %r366, %r5531, %r5589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5596, %r369, %r5543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5599, %r366, %r5540, %r5596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5603, %r369, %r5552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5606, %r366, %r5549, %r5603;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5610, %r5611}, {%r400, %r406, %r403, %r409}, {%r5487, %r5557}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5620, %r5621}, {%r400, %r406, %r403, %r409}, {%r5496, %r5564}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5630, %r5631}, {%r400, %r406, %r403, %r409}, {%r5505, %r5571}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5640, %r5641}, {%r400, %r406, %r403, %r409}, {%r5514, %r5578}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5650, %r5651}, {%r400, %r406, %r403, %r409}, {%r5523, %r5585}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5660, %r5661}, {%r400, %r406, %r403, %r409}, {%r5532, %r5592}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5670, %r5671}, {%r400, %r406, %r403, %r409}, {%r5541, %r5599}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5680, %r5681}, {%r400, %r406, %r403, %r409}, {%r5550, %r5606}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5690, %r83, %r5610;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5693, %r83, %r5611;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5696, %r83, %r5620;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5699, %r83, %r5621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5702, %r83, %r5630;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5705, %r83, %r5631;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5708, %r83, %r5640;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5711, %r83, %r5641;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5714, %r83, %r5650;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5717, %r83, %r5651;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5720, %r83, %r5660;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5723, %r83, %r5661;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5726, %r83, %r5670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5729, %r83, %r5671;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5732, %r83, %r5680;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5735, %r83, %r5681;
	// end inline asm
	// begin inline asm
	mov.b32 %r5738, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5739, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5740, %r5690, %r5738;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5743, %r5740, %r5739;
	// end inline asm
	// begin inline asm
	mov.b32 %r5746, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5747, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5748, %r5693, %r5746;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5751, %r5748, %r5747;
	// end inline asm
	// begin inline asm
	mov.b32 %r5754, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5755, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5756, %r5696, %r5754;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5759, %r5756, %r5755;
	// end inline asm
	// begin inline asm
	mov.b32 %r5762, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5763, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5764, %r5699, %r5762;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5767, %r5764, %r5763;
	// end inline asm
	// begin inline asm
	mov.b32 %r5770, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5771, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5772, %r5702, %r5770;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5775, %r5772, %r5771;
	// end inline asm
	// begin inline asm
	mov.b32 %r5778, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5779, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5780, %r5705, %r5778;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5783, %r5780, %r5779;
	// end inline asm
	// begin inline asm
	mov.b32 %r5786, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5787, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5788, %r5708, %r5786;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5791, %r5788, %r5787;
	// end inline asm
	// begin inline asm
	mov.b32 %r5794, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5795, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5796, %r5711, %r5794;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5799, %r5796, %r5795;
	// end inline asm
	// begin inline asm
	mov.b32 %r5802, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5803, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5804, %r5714, %r5802;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5807, %r5804, %r5803;
	// end inline asm
	// begin inline asm
	mov.b32 %r5810, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5811, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5812, %r5717, %r5810;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5815, %r5812, %r5811;
	// end inline asm
	// begin inline asm
	mov.b32 %r5818, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5819, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5820, %r5720, %r5818;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5823, %r5820, %r5819;
	// end inline asm
	// begin inline asm
	mov.b32 %r5826, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5827, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5828, %r5723, %r5826;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5831, %r5828, %r5827;
	// end inline asm
	// begin inline asm
	mov.b32 %r5834, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5835, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5836, %r5726, %r5834;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5839, %r5836, %r5835;
	// end inline asm
	// begin inline asm
	mov.b32 %r5842, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5843, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5844, %r5729, %r5842;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5847, %r5844, %r5843;
	// end inline asm
	// begin inline asm
	mov.b32 %r5850, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5851, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5852, %r5732, %r5850;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5855, %r5852, %r5851;
	// end inline asm
	// begin inline asm
	mov.b32 %r5858, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5859, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5860, %r5735, %r5858;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5863, %r5860, %r5859;
	// end inline asm
	// begin inline asm
	mov.b32 %r5869, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5867, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5868, %r5869, %r5867;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5871, %r5743, %r5868;
	// end inline asm
	// begin inline asm
	mov.b32 %r5874, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5875, %r5869, %r5874;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5878, %r5751, %r5875;
	// end inline asm
	// begin inline asm
	mov.b32 %r5881, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5882, %r5869, %r5881;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5885, %r5759, %r5882;
	// end inline asm
	// begin inline asm
	mov.b32 %r5888, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5889, %r5869, %r5888;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5892, %r5767, %r5889;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5895, %r5871, %r5885, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5899, %r5878, %r5892, %r2306;
	// end inline asm
	shl.b32 	%r5906, %r5899, 4;
	// begin inline asm
	lop3.b32 %r5903, %r2312, %r5895, %r5906, 202;
	// end inline asm
	xor.b32  	%r7855, %r5903, -2004318072;
	// begin inline asm
	mov.b32 %r5910, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5908, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5909, %r5910, %r5908;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5912, %r5775, %r5909;
	// end inline asm
	// begin inline asm
	mov.b32 %r5915, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5916, %r5910, %r5915;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5919, %r5783, %r5916;
	// end inline asm
	// begin inline asm
	mov.b32 %r5922, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5923, %r5910, %r5922;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5926, %r5791, %r5923;
	// end inline asm
	// begin inline asm
	mov.b32 %r5929, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5930, %r5910, %r5929;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5933, %r5799, %r5930;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5936, %r5912, %r5926, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5940, %r5919, %r5933, %r2306;
	// end inline asm
	shl.b32 	%r5947, %r5940, 4;
	// begin inline asm
	lop3.b32 %r5944, %r2312, %r5936, %r5947, 202;
	// end inline asm
	xor.b32  	%r7856, %r5944, -2004318072;
	// begin inline asm
	mov.b32 %r5951, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5949, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5950, %r5951, %r5949;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5953, %r5807, %r5950;
	// end inline asm
	// begin inline asm
	mov.b32 %r5956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5957, %r5951, %r5956;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5960, %r5815, %r5957;
	// end inline asm
	// begin inline asm
	mov.b32 %r5963, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5964, %r5951, %r5963;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5967, %r5823, %r5964;
	// end inline asm
	// begin inline asm
	mov.b32 %r5970, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5971, %r5951, %r5970;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5974, %r5831, %r5971;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5977, %r5953, %r5967, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5981, %r5960, %r5974, %r2306;
	// end inline asm
	shl.b32 	%r5988, %r5981, 4;
	// begin inline asm
	lop3.b32 %r5985, %r2312, %r5977, %r5988, 202;
	// end inline asm
	xor.b32  	%r7857, %r5985, -2004318072;
	// begin inline asm
	mov.b32 %r5992, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5990, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5991, %r5992, %r5990;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5994, %r5839, %r5991;
	// end inline asm
	// begin inline asm
	mov.b32 %r5997, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5998, %r5992, %r5997;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6001, %r5847, %r5998;
	// end inline asm
	// begin inline asm
	mov.b32 %r6004, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6005, %r5992, %r6004;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6008, %r5855, %r6005;
	// end inline asm
	// begin inline asm
	mov.b32 %r6011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6012, %r5992, %r6011;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6015, %r5863, %r6012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6018, %r5994, %r6008, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6022, %r6001, %r6015, %r2306;
	// end inline asm
	shl.b32 	%r6029, %r6022, 4;
	// begin inline asm
	lop3.b32 %r6026, %r2312, %r6018, %r6029, 202;
	// end inline asm
	xor.b32  	%r7858, %r6026, -2004318072;
	st.shared.u32 	[%rd155], %r7855;
	st.shared.u32 	[%rd156], %r7856;
	st.shared.u32 	[%rd157], %r7857;
	st.shared.u32 	[%rd158], %r7858;
	ld.shared.u32 	%r7992, [%rd98];
	ld.shared.u32 	%r7991, [%rd100];
	ld.shared.u32 	%r7990, [%rd102];
	ld.shared.u32 	%r7989, [%rd104];
	// begin inline asm
	mov.b32 %r6035, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6046, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6034, %r7992, -2004318072;
	// begin inline asm
	lop3.b32 %r6032, %r645, %r6034, %r6035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6036, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6037, %r6035, %r6036;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6040, %r6032, %r6037;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6043, %r656, %r6034, %r6046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6047, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6048, %r6046, %r6047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6051, %r6043, %r6048;
	// end inline asm
	shr.u32 	%r6056, %r6034, 8;
	// begin inline asm
	lop3.b32 %r6054, %r645, %r6056, %r6035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6058, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6059, %r6035, %r6058;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6062, %r6054, %r6059;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6065, %r656, %r6056, %r6046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6069, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6070, %r6046, %r6069;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6073, %r6065, %r6070;
	// end inline asm
	// begin inline asm
	mov.b32 %r6081, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6092, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6080, %r7991, -2004318072;
	// begin inline asm
	lop3.b32 %r6078, %r645, %r6080, %r6081, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6082, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6083, %r6081, %r6082;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6086, %r6078, %r6083;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6089, %r656, %r6080, %r6092, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6093, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6094, %r6092, %r6093;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6097, %r6089, %r6094;
	// end inline asm
	shr.u32 	%r6102, %r6080, 8;
	// begin inline asm
	lop3.b32 %r6100, %r645, %r6102, %r6081, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6104, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6105, %r6081, %r6104;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6108, %r6100, %r6105;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6111, %r656, %r6102, %r6092, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6115, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6116, %r6092, %r6115;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6119, %r6111, %r6116;
	// end inline asm
	// begin inline asm
	mov.b32 %r6127, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6138, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6126, %r7990, -2004318072;
	// begin inline asm
	lop3.b32 %r6124, %r645, %r6126, %r6127, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6128, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6129, %r6127, %r6128;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6132, %r6124, %r6129;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6135, %r656, %r6126, %r6138, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6139, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6140, %r6138, %r6139;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6143, %r6135, %r6140;
	// end inline asm
	shr.u32 	%r6148, %r6126, 8;
	// begin inline asm
	lop3.b32 %r6146, %r645, %r6148, %r6127, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6150, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6151, %r6127, %r6150;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6154, %r6146, %r6151;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6157, %r656, %r6148, %r6138, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6161, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6162, %r6138, %r6161;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6165, %r6157, %r6162;
	// end inline asm
	// begin inline asm
	mov.b32 %r6173, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6184, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6172, %r7989, -2004318072;
	// begin inline asm
	lop3.b32 %r6170, %r645, %r6172, %r6173, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6174, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6175, %r6173, %r6174;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6178, %r6170, %r6175;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6181, %r656, %r6172, %r6184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6185, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6186, %r6184, %r6185;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6189, %r6181, %r6186;
	// end inline asm
	shr.u32 	%r6194, %r6172, 8;
	// begin inline asm
	lop3.b32 %r6192, %r645, %r6194, %r6173, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6196, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6197, %r6173, %r6196;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6200, %r6192, %r6197;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6203, %r656, %r6194, %r6184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6207, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6208, %r6184, %r6207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6211, %r6203, %r6208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6214, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6216, %r6214, %r6040;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6219, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6221, %r6219, %r6051;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6224, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6226, %r6224, %r6062;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6229, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6231, %r6229, %r6073;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6234, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6236, %r6234, %r6086;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6239, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6241, %r6239, %r6097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6244, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6246, %r6244, %r6108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6249, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6251, %r6249, %r6119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6254, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6256, %r6254, %r6132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6259, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6261, %r6259, %r6143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6264, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6266, %r6264, %r6154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6269, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6271, %r6269, %r6165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6274, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6276, %r6274, %r6178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6279, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6281, %r6279, %r6189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6284, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6286, %r6284, %r6200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6289, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6291, %r6289, %r6211;
	// end inline asm
	// begin inline asm
	mov.b32 %r6299, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6310, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6296, %r645, %r646, %r6299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6300, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6301, %r6299, %r6300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6304, %r6296, %r6301;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6307, %r656, %r646, %r6310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6311, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6312, %r6310, %r6311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6315, %r6307, %r6312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6318, %r645, %r668, %r6299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6323, %r6299, %r6322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6326, %r6318, %r6323;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6329, %r656, %r668, %r6310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6333, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6334, %r6310, %r6333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6337, %r6329, %r6334;
	// end inline asm
	// begin inline asm
	mov.b32 %r6345, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6356, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6342, %r645, %r692, %r6345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6346, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6347, %r6345, %r6346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6350, %r6342, %r6347;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6353, %r656, %r692, %r6356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6358, %r6356, %r6357;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6361, %r6353, %r6358;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6364, %r645, %r714, %r6345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6369, %r6345, %r6368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6372, %r6364, %r6369;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6375, %r656, %r714, %r6356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6379, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6380, %r6356, %r6379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6383, %r6375, %r6380;
	// end inline asm
	// begin inline asm
	mov.b32 %r6391, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6402, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6388, %r645, %r738, %r6391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6392, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6393, %r6391, %r6392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6396, %r6388, %r6393;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6399, %r656, %r738, %r6402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6403, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6404, %r6402, %r6403;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6407, %r6399, %r6404;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6410, %r645, %r760, %r6391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6414, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6415, %r6391, %r6414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6418, %r6410, %r6415;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6421, %r656, %r760, %r6402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6425, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6426, %r6402, %r6425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6429, %r6421, %r6426;
	// end inline asm
	// begin inline asm
	mov.b32 %r6437, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6448, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6434, %r645, %r784, %r6437, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6438, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6439, %r6437, %r6438;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6442, %r6434, %r6439;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6445, %r656, %r784, %r6448, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6449, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6450, %r6448, %r6449;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6453, %r6445, %r6450;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6456, %r645, %r806, %r6437, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6460, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6461, %r6437, %r6460;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6464, %r6456, %r6461;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6467, %r656, %r806, %r6448, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6471, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6472, %r6448, %r6471;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6475, %r6467, %r6472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6478, %r206, %r6304, %r6216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6482, %r206, %r6315, %r6221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6486, %r206, %r6326, %r6226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6490, %r206, %r6337, %r6231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6494, %r206, %r6350, %r6236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6498, %r206, %r6361, %r6241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6502, %r206, %r6372, %r6246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6506, %r206, %r6383, %r6251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6510, %r206, %r6396, %r6256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6514, %r206, %r6407, %r6261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6518, %r206, %r6418, %r6266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6522, %r206, %r6429, %r6271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6526, %r206, %r6442, %r6276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6530, %r206, %r6453, %r6281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6534, %r206, %r6464, %r6286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6538, %r206, %r6475, %r6291;
	// end inline asm
	// begin inline asm
	mov.b32 %r6547, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6558, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6544, %r645, %r2442, %r6547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6548, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6549, %r6547, %r6548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6552, %r6544, %r6549;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6555, %r656, %r2442, %r6558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6559, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6560, %r6558, %r6559;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6563, %r6555, %r6560;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6566, %r645, %r2464, %r6547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6570, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6571, %r6547, %r6570;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6574, %r6566, %r6571;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6577, %r656, %r2464, %r6558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6581, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6582, %r6558, %r6581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6585, %r6577, %r6582;
	// end inline asm
	// begin inline asm
	mov.b32 %r6593, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6604, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6590, %r645, %r2488, %r6593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6594, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6595, %r6593, %r6594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6598, %r6590, %r6595;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6601, %r656, %r2488, %r6604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6605, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6606, %r6604, %r6605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6609, %r6601, %r6606;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6612, %r645, %r2510, %r6593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6616, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6617, %r6593, %r6616;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6620, %r6612, %r6617;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6623, %r656, %r2510, %r6604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6627, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6628, %r6604, %r6627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6631, %r6623, %r6628;
	// end inline asm
	// begin inline asm
	mov.b32 %r6639, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6650, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6636, %r645, %r2534, %r6639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6640, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6641, %r6639, %r6640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6644, %r6636, %r6641;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6647, %r656, %r2534, %r6650, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6651, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6652, %r6650, %r6651;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6655, %r6647, %r6652;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6658, %r645, %r2556, %r6639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6662, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6663, %r6639, %r6662;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6666, %r6658, %r6663;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6669, %r656, %r2556, %r6650, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6673, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6674, %r6650, %r6673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6677, %r6669, %r6674;
	// end inline asm
	// begin inline asm
	mov.b32 %r6685, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6696, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6682, %r645, %r2580, %r6685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6686, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6687, %r6685, %r6686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6690, %r6682, %r6687;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6693, %r656, %r2580, %r6696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6697, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6698, %r6696, %r6697;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6701, %r6693, %r6698;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6704, %r645, %r2602, %r6685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6708, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6709, %r6685, %r6708;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6712, %r6704, %r6709;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6715, %r656, %r2602, %r6696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6719, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6720, %r6696, %r6719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6723, %r6715, %r6720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6726, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6728, %r6726, %r6552, %r6478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6732, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6734, %r6732, %r6563, %r6482;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6738, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6740, %r6738, %r6574, %r6486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6744, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6746, %r6744, %r6585, %r6490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6750, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6752, %r6750, %r6598, %r6494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6756, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6758, %r6756, %r6609, %r6498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6762, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6764, %r6762, %r6620, %r6502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6768, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6770, %r6768, %r6631, %r6506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6774, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6776, %r6774, %r6644, %r6510;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6780, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6782, %r6780, %r6655, %r6514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6786, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6788, %r6786, %r6666, %r6518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6792, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6794, %r6792, %r6677, %r6522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6798, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6800, %r6798, %r6690, %r6526;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6804, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6806, %r6804, %r6701, %r6530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6810, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6812, %r6810, %r6712, %r6534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6816, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6818, %r6816, %r6723, %r6538;
	// end inline asm
	// begin inline asm
	mov.b32 %r6827, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6838, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6824, %r645, %r4238, %r6827, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6828, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6829, %r6827, %r6828;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6832, %r6824, %r6829;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6835, %r656, %r4238, %r6838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6839, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6840, %r6838, %r6839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6843, %r6835, %r6840;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6846, %r645, %r4260, %r6827, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6850, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6851, %r6827, %r6850;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6854, %r6846, %r6851;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6857, %r656, %r4260, %r6838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6861, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6862, %r6838, %r6861;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6865, %r6857, %r6862;
	// end inline asm
	// begin inline asm
	mov.b32 %r6873, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6884, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6870, %r645, %r4284, %r6873, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6874, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6875, %r6873, %r6874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6878, %r6870, %r6875;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6881, %r656, %r4284, %r6884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6885, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6886, %r6884, %r6885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6889, %r6881, %r6886;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6892, %r645, %r4306, %r6873, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6896, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6897, %r6873, %r6896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6900, %r6892, %r6897;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6903, %r656, %r4306, %r6884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6907, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6908, %r6884, %r6907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6911, %r6903, %r6908;
	// end inline asm
	// begin inline asm
	mov.b32 %r6919, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6930, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6916, %r645, %r4330, %r6919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6920, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6921, %r6919, %r6920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6924, %r6916, %r6921;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6927, %r656, %r4330, %r6930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6931, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6932, %r6930, %r6931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6935, %r6927, %r6932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6938, %r645, %r4352, %r6919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6942, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6943, %r6919, %r6942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6946, %r6938, %r6943;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6949, %r656, %r4352, %r6930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6953, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6954, %r6930, %r6953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6957, %r6949, %r6954;
	// end inline asm
	// begin inline asm
	mov.b32 %r6965, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6976, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6962, %r645, %r4376, %r6965, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6966, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6967, %r6965, %r6966;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6970, %r6962, %r6967;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6973, %r656, %r4376, %r6976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6977, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6978, %r6976, %r6977;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6981, %r6973, %r6978;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6984, %r645, %r4398, %r6965, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6988, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6989, %r6965, %r6988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6992, %r6984, %r6989;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6995, %r656, %r4398, %r6976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6999, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7000, %r6976, %r6999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7003, %r6995, %r7000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7077, %r242, %r6832, %r6728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7074, %r242, %r6843, %r6734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7086, %r242, %r6854, %r6740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7083, %r242, %r6865, %r6746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7095, %r242, %r6878, %r6752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7092, %r242, %r6889, %r6758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7104, %r242, %r6900, %r6764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7101, %r242, %r6911, %r6770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7113, %r242, %r6924, %r6776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7110, %r242, %r6935, %r6782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7122, %r242, %r6946, %r6788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7119, %r242, %r6957, %r6794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7131, %r242, %r6970, %r6800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7128, %r242, %r6981, %r6806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7140, %r242, %r6992, %r6812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7137, %r242, %r7003, %r6818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7070, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7072, %r7070, %r7074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7075, %r263, %r7077, %r7072;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7079, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7081, %r7079, %r7083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7084, %r263, %r7086, %r7081;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7088, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7090, %r7088, %r7092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7093, %r263, %r7095, %r7090;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7097, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7099, %r7097, %r7101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7102, %r263, %r7104, %r7099;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7106, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7108, %r7106, %r7110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7111, %r263, %r7113, %r7108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7115, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7117, %r7115, %r7119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7120, %r263, %r7122, %r7117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7124, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7126, %r7124, %r7128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7129, %r263, %r7131, %r7126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7133, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7135, %r7133, %r7137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r263, %r7140, %r7135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7142, %r266, %r7077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7145, %r263, %r7074, %r7142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7149, %r266, %r7086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7152, %r263, %r7083, %r7149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7156, %r266, %r7095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7159, %r263, %r7092, %r7156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7163, %r266, %r7104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7166, %r263, %r7101, %r7163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7170, %r266, %r7113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7173, %r263, %r7110, %r7170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7177, %r266, %r7122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7180, %r263, %r7119, %r7177;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7184, %r266, %r7131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7187, %r263, %r7128, %r7184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7191, %r266, %r7140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7194, %r263, %r7137, %r7191;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7285, %r7282}, {%r322, %r328, %r325, %r331}, {%r7075, %r7145}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7294, %r7291}, {%r322, %r328, %r325, %r331}, {%r7084, %r7152}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7303, %r7300}, {%r322, %r328, %r325, %r331}, {%r7093, %r7159}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7312, %r7309}, {%r322, %r328, %r325, %r331}, {%r7102, %r7166}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7321, %r7318}, {%r322, %r328, %r325, %r331}, {%r7111, %r7173}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7330, %r7327}, {%r322, %r328, %r325, %r331}, {%r7120, %r7180}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7339, %r7336}, {%r322, %r328, %r325, %r331}, {%r7129, %r7187}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7348, %r7345}, {%r322, %r328, %r325, %r331}, {%r7138, %r7194}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7278, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7280, %r7278, %r7282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7283, %r366, %r7285, %r7280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7287, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7289, %r7287, %r7291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7292, %r366, %r7294, %r7289;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7296, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7298, %r7296, %r7300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7301, %r366, %r7303, %r7298;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7305, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7307, %r7305, %r7309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7310, %r366, %r7312, %r7307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7314, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7316, %r7314, %r7318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7319, %r366, %r7321, %r7316;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7323, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7325, %r7323, %r7327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7328, %r366, %r7330, %r7325;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7332, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7334, %r7332, %r7336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7337, %r366, %r7339, %r7334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7341, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7343, %r7341, %r7345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7346, %r366, %r7348, %r7343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7350, %r369, %r7285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7353, %r366, %r7282, %r7350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7357, %r369, %r7294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7360, %r366, %r7291, %r7357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7364, %r369, %r7303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7367, %r366, %r7300, %r7364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7371, %r369, %r7312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7374, %r366, %r7309, %r7371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7378, %r369, %r7321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7381, %r366, %r7318, %r7378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7385, %r369, %r7330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7388, %r366, %r7327, %r7385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7392, %r369, %r7339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7395, %r366, %r7336, %r7392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7399, %r369, %r7348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7402, %r366, %r7345, %r7399;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7406, %r7407}, {%r400, %r406, %r403, %r409}, {%r7283, %r7353}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7416, %r7417}, {%r400, %r406, %r403, %r409}, {%r7292, %r7360}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7426, %r7427}, {%r400, %r406, %r403, %r409}, {%r7301, %r7367}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7436, %r7437}, {%r400, %r406, %r403, %r409}, {%r7310, %r7374}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7446, %r7447}, {%r400, %r406, %r403, %r409}, {%r7319, %r7381}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7456, %r7457}, {%r400, %r406, %r403, %r409}, {%r7328, %r7388}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7466, %r7467}, {%r400, %r406, %r403, %r409}, {%r7337, %r7395}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7476, %r7477}, {%r400, %r406, %r403, %r409}, {%r7346, %r7402}, {%r7958, %r7958};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7486, %r83, %r7406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7489, %r83, %r7407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7492, %r83, %r7416;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7495, %r83, %r7417;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7498, %r83, %r7426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7501, %r83, %r7427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7504, %r83, %r7436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7507, %r83, %r7437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7510, %r83, %r7446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7513, %r83, %r7447;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7516, %r83, %r7456;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7519, %r83, %r7457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7522, %r83, %r7466;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7525, %r83, %r7467;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7528, %r83, %r7476;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7531, %r83, %r7477;
	// end inline asm
	// begin inline asm
	mov.b32 %r7534, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7535, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7536, %r7486, %r7534;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7539, %r7536, %r7535;
	// end inline asm
	// begin inline asm
	mov.b32 %r7542, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7543, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7544, %r7489, %r7542;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7547, %r7544, %r7543;
	// end inline asm
	// begin inline asm
	mov.b32 %r7550, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7551, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7552, %r7492, %r7550;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7555, %r7552, %r7551;
	// end inline asm
	// begin inline asm
	mov.b32 %r7558, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7559, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7560, %r7495, %r7558;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7563, %r7560, %r7559;
	// end inline asm
	// begin inline asm
	mov.b32 %r7566, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7567, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7568, %r7498, %r7566;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7571, %r7568, %r7567;
	// end inline asm
	// begin inline asm
	mov.b32 %r7574, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7575, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7576, %r7501, %r7574;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7579, %r7576, %r7575;
	// end inline asm
	// begin inline asm
	mov.b32 %r7582, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7583, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7584, %r7504, %r7582;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7587, %r7584, %r7583;
	// end inline asm
	// begin inline asm
	mov.b32 %r7590, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7591, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7592, %r7507, %r7590;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7595, %r7592, %r7591;
	// end inline asm
	// begin inline asm
	mov.b32 %r7598, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7599, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7600, %r7510, %r7598;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7603, %r7600, %r7599;
	// end inline asm
	// begin inline asm
	mov.b32 %r7606, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7607, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7608, %r7513, %r7606;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7611, %r7608, %r7607;
	// end inline asm
	// begin inline asm
	mov.b32 %r7614, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7615, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7616, %r7516, %r7614;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7619, %r7616, %r7615;
	// end inline asm
	// begin inline asm
	mov.b32 %r7622, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7623, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7624, %r7519, %r7622;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7627, %r7624, %r7623;
	// end inline asm
	// begin inline asm
	mov.b32 %r7630, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7631, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7632, %r7522, %r7630;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7635, %r7632, %r7631;
	// end inline asm
	// begin inline asm
	mov.b32 %r7638, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7639, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7640, %r7525, %r7638;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7643, %r7640, %r7639;
	// end inline asm
	// begin inline asm
	mov.b32 %r7646, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7647, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7648, %r7528, %r7646;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7651, %r7648, %r7647;
	// end inline asm
	// begin inline asm
	mov.b32 %r7654, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7655, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7656, %r7531, %r7654;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7659, %r7656, %r7655;
	// end inline asm
	// begin inline asm
	mov.b32 %r7665, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7663, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7664, %r7665, %r7663;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7667, %r7539, %r7664;
	// end inline asm
	// begin inline asm
	mov.b32 %r7670, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7671, %r7665, %r7670;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7674, %r7547, %r7671;
	// end inline asm
	// begin inline asm
	mov.b32 %r7677, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7678, %r7665, %r7677;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7681, %r7555, %r7678;
	// end inline asm
	// begin inline asm
	mov.b32 %r7684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7685, %r7665, %r7684;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7688, %r7563, %r7685;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7691, %r7667, %r7681, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7695, %r7674, %r7688, %r2306;
	// end inline asm
	shl.b32 	%r7702, %r7695, 4;
	// begin inline asm
	lop3.b32 %r7699, %r2312, %r7691, %r7702, 202;
	// end inline asm
	xor.b32  	%r7859, %r7699, -2004318072;
	// begin inline asm
	mov.b32 %r7706, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7704, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7705, %r7706, %r7704;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7708, %r7571, %r7705;
	// end inline asm
	// begin inline asm
	mov.b32 %r7711, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7712, %r7706, %r7711;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7715, %r7579, %r7712;
	// end inline asm
	// begin inline asm
	mov.b32 %r7718, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7719, %r7706, %r7718;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7722, %r7587, %r7719;
	// end inline asm
	// begin inline asm
	mov.b32 %r7725, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7726, %r7706, %r7725;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7729, %r7595, %r7726;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7732, %r7708, %r7722, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7736, %r7715, %r7729, %r2306;
	// end inline asm
	shl.b32 	%r7743, %r7736, 4;
	// begin inline asm
	lop3.b32 %r7740, %r2312, %r7732, %r7743, 202;
	// end inline asm
	xor.b32  	%r7860, %r7740, -2004318072;
	// begin inline asm
	mov.b32 %r7747, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7745, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7746, %r7747, %r7745;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7749, %r7603, %r7746;
	// end inline asm
	// begin inline asm
	mov.b32 %r7752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7753, %r7747, %r7752;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7756, %r7611, %r7753;
	// end inline asm
	// begin inline asm
	mov.b32 %r7759, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7760, %r7747, %r7759;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7763, %r7619, %r7760;
	// end inline asm
	// begin inline asm
	mov.b32 %r7766, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7767, %r7747, %r7766;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7770, %r7627, %r7767;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7773, %r7749, %r7763, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7777, %r7756, %r7770, %r2306;
	// end inline asm
	shl.b32 	%r7784, %r7777, 4;
	// begin inline asm
	lop3.b32 %r7781, %r2312, %r7773, %r7784, 202;
	// end inline asm
	xor.b32  	%r7861, %r7781, -2004318072;
	// begin inline asm
	mov.b32 %r7788, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7786, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7787, %r7788, %r7786;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7790, %r7635, %r7787;
	// end inline asm
	// begin inline asm
	mov.b32 %r7793, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7794, %r7788, %r7793;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7797, %r7643, %r7794;
	// end inline asm
	// begin inline asm
	mov.b32 %r7800, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7801, %r7788, %r7800;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7804, %r7651, %r7801;
	// end inline asm
	// begin inline asm
	mov.b32 %r7807, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7808, %r7788, %r7807;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7811, %r7659, %r7808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7814, %r7790, %r7804, %r2306;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7818, %r7797, %r7811, %r2306;
	// end inline asm
	shl.b32 	%r7825, %r7818, 4;
	// begin inline asm
	lop3.b32 %r7822, %r2312, %r7814, %r7825, 202;
	// end inline asm
	xor.b32  	%r7862, %r7822, -2004318072;
	st.shared.u32 	[%rd155], %r7859;
	st.shared.u32 	[%rd156], %r7860;
	st.shared.u32 	[%rd157], %r7861;
	st.shared.u32 	[%rd158], %r7862;
	add.s32 	%r7988, %r7988, 64;
	add.s64 	%rd158, %rd158, 8324;
	add.s64 	%rd157, %rd157, 8324;
	add.s64 	%rd156, %rd156, 8324;
	add.s64 	%rd155, %rd155, 8324;
	add.s32 	%r7987, %r7987, 1;
	setp.eq.s32 	%p212, %r7988, 256;
	@%p212 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_81;
$L__BB0_82:                             // %guard_exit17384
                                        //   in Loop: Header=BB0_80 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7868, [%rd5];
	ld.shared.u32 	%r7869, [%rd6+128];
	ld.shared.u32 	%r7876, [%rd6+4];
	ld.shared.u32 	%r7877, [%rd6+132];
	ld.shared.u32 	%r7884, [%rd5+8324];
	ld.shared.u32 	%r7885, [%rd6+8452];
	ld.shared.u32 	%r7892, [%rd6+8328];
	ld.shared.u32 	%r7893, [%rd6+8456];
	ld.shared.u32 	%r7900, [%rd5+16648];
	ld.shared.u32 	%r7901, [%rd6+16776];
	ld.shared.u32 	%r7908, [%rd6+16652];
	ld.shared.u32 	%r7909, [%rd6+16780];
	ld.shared.u32 	%r7916, [%rd5+24972];
	ld.shared.u32 	%r7917, [%rd6+25100];
	ld.shared.u32 	%r7924, [%rd6+24976];
	ld.shared.u32 	%r7925, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7863, %r7868, %r7869, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7867, %r7868, %r7869, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7871, %r7876, %r7877, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7875, %r7876, %r7877, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7879, %r7884, %r7885, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7883, %r7884, %r7885, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7887, %r7892, %r7893, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7891, %r7892, %r7893, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7895, %r7900, %r7901, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7899, %r7900, %r7901, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7903, %r7908, %r7909, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7907, %r7908, %r7909, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7911, %r7916, %r7917, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7915, %r7916, %r7917, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7919, %r7924, %r7925, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7923, %r7924, %r7925, %r562;
	// end inline asm
	selp.b32 	%r7927, %r7867, %r7863, %p199;
	shfl.sync.bfly.b32	%r148, %r7927, 8, 31, -1;
	selp.b32 	%r7928, %r7875, %r7871, %p199;
	shfl.sync.bfly.b32	%r149, %r7928, 8, 31, -1;
	selp.b32 	%r7929, %r7883, %r7879, %p199;
	shfl.sync.bfly.b32	%r7930, %r7929, 8, 31, -1;
	selp.b32 	%r7931, %r7891, %r7887, %p199;
	shfl.sync.bfly.b32	%r7932, %r7931, 8, 31, -1;
	selp.b32 	%r7933, %r7899, %r7895, %p199;
	shfl.sync.bfly.b32	%r7934, %r7933, 8, 31, -1;
	selp.b32 	%r7935, %r7907, %r7903, %p199;
	shfl.sync.bfly.b32	%r7936, %r7935, 8, 31, -1;
	selp.b32 	%r7937, %r7915, %r7911, %p199;
	shfl.sync.bfly.b32	%r7938, %r7937, 8, 31, -1;
	selp.b32 	%r7939, %r7923, %r7919, %p199;
	shfl.sync.bfly.b32	%r7940, %r7939, 8, 31, -1;
	setp.eq.s32 	%p214, %r7979, 0;
	shl.b32 	%r7980, %r7979, 12;
	@%p214 bra 	$L__BB0_83;
// %bb.119:                             // %pass16571
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r7941, %r149, %r7875, %p199;
	selp.b32 	%r7942, %r7871, %r149, %p199;
	selp.b32 	%r7943, %r148, %r7867, %p199;
	selp.b32 	%r7944, %r7863, %r148, %p199;
	or.b32  	%r7946, %r53, %r7980;
	cvt.s64.s32 	%rd105, %r7946;
	add.s64 	%rd106, %rd105, %rd7;
	shr.u64 	%rd107, %rd106, 35;
	add.s64 	%rd108, %rd106, %rd107;
	shr.s64 	%rd109, %rd108, 29;
	setp.lt.s64 	%p216, %rd106, 0;
	and.b64  	%rd110, %rd108, -536870912;
	setp.ne.s64 	%p217, %rd110, %rd106;
	and.pred  	%p218, %p216, %p217;
	selp.u64 	%rd111, 1, 0, %p218;
	sub.s64 	%rd112, %rd111, %rd109;
	shl.b64 	%rd113, %rd112, 29;
	add.s64 	%rd114, %rd113, %rd106;
	shl.b64 	%rd115, %rd114, 2;
	add.s64 	%rd116, %rd3, %rd115;
	st.global.v4.u32 	[%rd116], {%r7944, %r7942, %r7943, %r7941};
$L__BB0_83:                             // %L39672
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r7947, %r7979, 64;
	setp.gt.u32 	%p219, %r7947, 191;
	@%p219 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_84;
$L__BB0_117:                            // %pass16678
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r150, %r7879, %r7930, %p199;
	selp.b32 	%r151, %r7930, %r7883, %p199;
	selp.b32 	%r152, %r7887, %r7932, %p199;
	selp.b32 	%r153, %r7932, %r7891, %p199;
	or.b32  	%r7948, %r7980, %r53;
	or.b32  	%r7949, %r7948, 262144;
	cvt.s64.s32 	%rd117, %r7949;
	add.s64 	%rd118, %rd117, %rd7;
	shr.u64 	%rd119, %rd118, 35;
	add.s64 	%rd120, %rd118, %rd119;
	shr.s64 	%rd121, %rd120, 29;
	setp.lt.s64 	%p220, %rd118, 0;
	and.b64  	%rd122, %rd120, -536870912;
	setp.ne.s64 	%p221, %rd122, %rd118;
	and.pred  	%p222, %p220, %p221;
	selp.u64 	%rd123, 1, 0, %p222;
	sub.s64 	%rd124, %rd123, %rd121;
	shl.b64 	%rd125, %rd124, 29;
	add.s64 	%rd126, %rd125, %rd118;
	shl.b64 	%rd127, %rd126, 2;
	add.s64 	%rd128, %rd3, %rd127;
	st.global.v4.u32 	[%rd128], {%r150, %r152, %r151, %r153};
$L__BB0_84:                             // %L39890
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r158, %r7911, %r7938, %p199;
	selp.b32 	%r159, %r7938, %r7915, %p199;
	selp.b32 	%r160, %r7919, %r7940, %p199;
	selp.b32 	%r161, %r7940, %r7923, %p199;
	or.b32  	%r7950, %r7979, 128;
	setp.gt.u32 	%p223, %r7950, 191;
	or.b32  	%r7960, %r7980, %r53;
	@%p223 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_85;
$L__BB0_118:                            // %pass16785
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r154, %r7895, %r7934, %p199;
	selp.b32 	%r155, %r7934, %r7899, %p199;
	selp.b32 	%r156, %r7903, %r7936, %p199;
	selp.b32 	%r157, %r7936, %r7907, %p199;
	or.b32  	%r7952, %r7960, 524288;
	cvt.s64.s32 	%rd129, %r7952;
	add.s64 	%rd130, %rd129, %rd7;
	shr.u64 	%rd131, %rd130, 35;
	add.s64 	%rd132, %rd130, %rd131;
	shr.s64 	%rd133, %rd132, 29;
	setp.lt.s64 	%p224, %rd130, 0;
	and.b64  	%rd134, %rd132, -536870912;
	setp.ne.s64 	%p225, %rd134, %rd130;
	and.pred  	%p226, %p224, %p225;
	selp.u64 	%rd135, 1, 0, %p226;
	sub.s64 	%rd136, %rd135, %rd133;
	shl.b64 	%rd137, %rd136, 29;
	add.s64 	%rd138, %rd137, %rd130;
	shl.b64 	%rd139, %rd138, 2;
	add.s64 	%rd140, %rd3, %rd139;
	st.global.v4.u32 	[%rd140], {%r154, %r156, %r155, %r157};
	bra.uni 	$L__BB0_85;
$L__BB0_86:                             // %L40337
	st.global.u32 	[%rd4], %r7958;
	ret;
$L__BB0_7:                              // %L157
	mov.u32 	%r7957, 2;
	st.global.u32 	[%rd4], %r7957;
	mov.u64 	%rd153, exception3408;
	cvta.global.u64 	%rd154, %rd153;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd154;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r162;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd41, exception13429;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r162;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
