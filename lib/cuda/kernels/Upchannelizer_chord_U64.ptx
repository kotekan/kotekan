// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11711
(
	.param .align 8 .b8 julia_power_by_squaring_11711_param_0[16],
	.param .b64 julia_power_by_squaring_11711_param_1,
	.param .b64 julia_power_by_squaring_11711_param_2
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3405[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13425[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<234>;
	.reg .b16 	%rs<1208>;
	.reg .b32 	%r<7981>;
	.reg .f32 	%f<832>;
	.reg .b64 	%rd<152>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r157, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r162, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r162, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L19
	ld.param.u64 	%rd31, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r158, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r163, %r1, 9;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r164, %r3, %r4;
	or.b32  	%r165, %r164, %r163;
	mul.wide.u32 	%rd37, %r165, 4;
	add.s64 	%rd4, %rd31, %rd37;
	mov.u32 	%r166, 1;
	st.global.u32 	[%rd4], %r166;
	setp.lt.s32 	%p2, %r158, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L114
	ld.param.u32 	%r159, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r159, %r158;
	setp.gt.s32 	%p4, %r159, 65536;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L124
	ld.param.u32 	%r160, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r167, %r159, %r158;
	and.b32  	%r168, %r167, 255;
	setp.ne.s32 	%p6, %r168, 0;
	setp.lt.s32 	%p7, %r160, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L130
	ld.param.u32 	%r161, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r161, %r160;
	setp.gt.s32 	%p10, %r161, 1024;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	not.b32 	%r169, %r160;
	add.s32 	%r170, %r169, %r161;
	and.b32  	%r171, %r170, 3;
	setp.eq.s32 	%p12, %r171, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass137
	shl.b32 	%r96, %r4, 2;
	and.b32  	%r97, %r96, 32;
	shl.b32 	%r98, %r4, 1;
	and.b32  	%r99, %r98, 8;
	or.b32  	%r172, %r97, %r99;
	shr.u32 	%r173, %r1, 3;
	cvt.u16.u32 	%rs1, %r173;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	mul.wide.u16 	%r100, %rs7, 64;
	or.b32  	%r174, %r100, %r172;
	and.b32  	%r101, %r4, 16;
	or.b32  	%r175, %r174, %r101;
	and.b32  	%r102, %r96, 4;
	bfe.u32 	%r106, %r4, 2, 1;
	shr.u32 	%r107, %r4, 4;
	shl.b32 	%r180, %r107, 1;
	shl.b32 	%r181, %r106, 2;
	shl.b32 	%r182, %r4, 3;
	and.b32  	%r183, %r182, 24;
	or.b32  	%r184, %r181, %r183;
	or.b32  	%r185, %r180, %r184;
	bfe.u32 	%r186, %r4, 3, 1;
	or.b32  	%r109, %r186, %r185;
	or.b32  	%r110, %r109, 32;
	mov.f32 	%f145, 0f40000000;
	mov.f32 	%f146, 0f437F0000;
	div.approx.f32 	%f85, %f146, %f145;
	cvt.rn.f32.s32 	%f147, %r109;
	sub.f32 	%f148, %f147, %f85;
	mov.f32 	%f177, 0f42800000;
	div.approx.f32 	%f87, %f148, %f177;
	setp.ne.f32 	%p18, %f87, 0f00000000;
	mov.f32 	%f807, 0f3F800000;
	mov.f32 	%f800, %f807;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L485
	sin.approx.f32 	%f178, %f87;
	div.approx.f32 	%f800, %f178, %f87;
$L__BB0_10:                             // %L488
	or.b32  	%r176, %r175, %r102;
	and.b32  	%r103, %r4, 2;
	cvt.rn.f32.s32 	%f181, %r110;
	sub.f32 	%f182, %f181, %f85;
	div.approx.f32 	%f5, %f182, %f177;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f801, %f807;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L505
	sin.approx.f32 	%f212, %f5;
	div.approx.f32 	%f801, %f212, %f5;
$L__BB0_12:                             // %L508
	or.b32  	%r177, %r176, %r103;
	or.b32  	%r204, %r109, 64;
	or.b32  	%r6, %r109, 96;
	cvt.rn.f32.s32 	%f216, %r204;
	sub.f32 	%f217, %f216, %f85;
	div.approx.f32 	%f9, %f217, %f177;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f802, %f807;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L587
	sin.approx.f32 	%f247, %f9;
	div.approx.f32 	%f802, %f247, %f9;
$L__BB0_14:                             // %L590
	shr.u32 	%r178, %r177, 1;
	cvt.rn.f32.s32 	%f250, %r6;
	sub.f32 	%f251, %f250, %f85;
	div.approx.f32 	%f14, %f251, %f177;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f803, %f807;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L607
	sin.approx.f32 	%f281, %f14;
	div.approx.f32 	%f803, %f281, %f14;
$L__BB0_16:                             // %L610
	cvt.u16.u32 	%rs8, %r178;
	or.b32  	%r222, %r109, 128;
	or.b32  	%r8, %r109, 160;
	cvt.rn.f32.s32 	%f285, %r222;
	sub.f32 	%f286, %f285, %f85;
	div.approx.f32 	%f18, %f286, %f177;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f804, %f807;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L689
	sin.approx.f32 	%f316, %f18;
	div.approx.f32 	%f804, %f316, %f18;
$L__BB0_18:                             // %L692
	mul.hi.u16 	%rs9, %rs8, -21845;
	cvt.rn.f32.s32 	%f319, %r8;
	sub.f32 	%f320, %f319, %f85;
	div.approx.f32 	%f23, %f320, %f177;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f805, %f807;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L709
	sin.approx.f32 	%f350, %f23;
	div.approx.f32 	%f805, %f350, %f23;
$L__BB0_20:                             // %L712
	shr.u16 	%rs10, %rs9, 10;
	or.b32  	%r240, %r109, 192;
	or.b32  	%r10, %r109, 224;
	cvt.rn.f32.s32 	%f354, %r240;
	sub.f32 	%f355, %f354, %f85;
	div.approx.f32 	%f27, %f355, %f177;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f806, %f807;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L791
	sin.approx.f32 	%f385, %f27;
	div.approx.f32 	%f806, %f385, %f27;
$L__BB0_22:                             // %L794
	mul.lo.s16 	%rs11, %rs10, 1536;
	shr.u32 	%r105, %r4, 1;
	shr.u32 	%r108, %r4, 3;
	cvt.rn.f32.s32 	%f388, %r10;
	sub.f32 	%f389, %f388, %f85;
	div.approx.f32 	%f32, %f389, %f177;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L811
	sin.approx.f32 	%f419, %f32;
	div.approx.f32 	%f807, %f419, %f32;
$L__BB0_24:                             // %L814
	sub.s16 	%rs12, %rs8, %rs11;
	and.b32  	%r284, %r4, 3;
	and.b32  	%r285, %r108, 2;
	and.b32  	%r286, %r105, 4;
	or.b32  	%r287, %r106, %r285;
	or.b32  	%r14, %r287, %r286;
	mul.lo.s32 	%r288, %r284, %r14;
	shl.b32 	%r289, %r288, 1;
	neg.s32 	%r290, %r289;
	cvt.rn.f32.s32 	%f35, %r290;
	mov.f32 	%f490, 0f41000000;
	div.approx.f32 	%f36, %f35, %f490;
	abs.f32 	%f830, %f36;
	setp.lt.f32 	%p75, %f830, 0f40000000;
	setp.gtu.f32 	%p232, %f830, 0f4B800000;
	mov.f32 	%f822, %f830;
	@%p75 bra 	$L__BB0_94;
// %bb.25:
	@%p232 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_26;
$L__BB0_90:
	mov.b32 	%r112, %f830;
	and.b32  	%r291, %r112, 8388607;
	or.b32  	%r7975, %r291, 1065353216;
	mov.b32 	%f821, %r7975;
	add.s32 	%r292, %r112, -1073741824;
	and.b32  	%r7976, %r292, -8388608;
	setp.eq.s32 	%p82, %r7976, 0;
	@%p82 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f500, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f499,%f500;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r293, %r7976, 192937984;
	add.s32 	%r294, %r7975, %r293;
	mov.b32 	%f501, %r294;
	mul.f32 	%f502, %f499, %f501;
	sub.f32 	%f503, %f501, %f502;
	fma.rn.f32 	%f504, %f503, %f499, %f502;
	sub.f32 	%f505, %f501, %f504;
	fma.rz.f32 	%f506, %f505, %f499, %f504;
	cvt.rzi.f32.f32 	%f507, %f506;
	sub.f32 	%f821, %f501, %f507;
	sub.s32 	%r7976, %r7976, %r293;
	mov.b32 	%r7975, %f821;
	setp.ne.s32 	%p83, %r7976, 0;
	setp.ne.s32 	%p84, %r7975, 0;
	and.pred  	%p85, %p83, %p84;
	@%p85 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p86, %r112, 2139095039;
	selp.f32 	%f508, 0f7FFFFFFF, 0f4B800000, %p86;
	mul.f32 	%f509, %f821, 0f34000000;
	mul.f32 	%f822, %f508, %f509;
	bra.uni 	$L__BB0_94;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f492, %f830, %f145;
	cvt.rzi.f32.f32 	%f820, %f492;
	fma.rn.f32 	%f89, %f820, 0fC0000000, %f830;
	mov.b32 	%r111, %f89;
	setp.lt.u32 	%p77, %r111, 1073741824;
	@%p77 bra 	$L__BB0_89;
// %bb.27:
	setp.lt.u32 	%p78, %r111, -2147483647;
	@%p78 bra 	$L__BB0_87;
// %bb.28:
	add.f32 	%f497, %f820, 0fBF800000;
	setp.lt.f32 	%p81, %f89, 0fC0000000;
	add.f32 	%f498, %f497, 0fBF800000;
	selp.f32 	%f820, %f498, %f497, %p81;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f820, %f820, 0f3F800000;
	setp.ltu.f32 	%p79, %f89, 0f40800000;
	@%p79 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f493, %f820, 0f3F800000;
	fma.rn.f32 	%f495, %f145, 0fC0400000, %f89;
	setp.ge.f32 	%p80, %f495, 0f00000000;
	add.f32 	%f496, %f493, 0f3F800000;
	selp.f32 	%f820, %f496, %f493, %p80;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f822, %f820, 0fC0000000, %f830;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i928
	cvt.u32.u16 	%r179, %rs12;
	abs.f32 	%f510, %f822;
	setp.gtu.f32 	%p87, %f510, 0f7F800000;
	mov.b32 	%r295, %f36;
	and.b32  	%r119, %r295, -2147483648;
	@%p87 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r296, %f822;
	or.b32  	%r297, %r119, %r296;
	mov.b32 	%f822, %r297;
$L__BB0_96:                             // %__nv_fmodf.exit929
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd38, %r179, 4;
	and.b32  	%r306, %r98, 6;
	mov.u32 	%r307, -8;
	sub.s32 	%r308, %r307, %r306;
	mul.lo.s32 	%r309, %r14, %r308;
	cvt.rn.f32.s32 	%f105, %r309;
	div.approx.f32 	%f106, %f105, %f490;
	abs.f32 	%f818, %f106;
	setp.lt.f32 	%p95, %f818, 0f40000000;
	setp.gtu.f32 	%p233, %f818, 0f4B800000;
	mov.f32 	%f810, %f818;
	@%p95 bra 	$L__BB0_40;
// %bb.29:
	@%p233 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r16, %f818;
	and.b32  	%r310, %r16, 8388607;
	or.b32  	%r7943, %r310, 1065353216;
	mov.b32 	%f809, %r7943;
	add.s32 	%r311, %r16, -1073741824;
	and.b32  	%r7944, %r311, -8388608;
	setp.eq.s32 	%p102, %r7944, 0;
	@%p102 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f551, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f550,%f551;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r312, %r7944, 192937984;
	add.s32 	%r313, %r7943, %r312;
	mov.b32 	%f552, %r313;
	mul.f32 	%f553, %f550, %f552;
	sub.f32 	%f554, %f552, %f553;
	fma.rn.f32 	%f555, %f554, %f550, %f553;
	sub.f32 	%f556, %f552, %f555;
	fma.rz.f32 	%f557, %f556, %f550, %f555;
	cvt.rzi.f32.f32 	%f558, %f557;
	sub.f32 	%f809, %f552, %f558;
	sub.s32 	%r7944, %r7944, %r312;
	mov.b32 	%r7943, %f809;
	setp.ne.s32 	%p103, %r7944, 0;
	setp.ne.s32 	%p104, %r7943, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p106, %r16, 2139095039;
	selp.f32 	%f559, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f560, %f809, 0f34000000;
	mul.f32 	%f810, %f559, %f560;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f543, %f818, %f145;
	cvt.rzi.f32.f32 	%f808, %f543;
	fma.rn.f32 	%f39, %f808, 0fC0000000, %f818;
	mov.b32 	%r15, %f39;
	setp.lt.u32 	%p97, %r15, 1073741824;
	@%p97 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p98, %r15, -2147483647;
	@%p98 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f548, %f808, 0fBF800000;
	setp.lt.f32 	%p101, %f39, 0fC0000000;
	add.f32 	%f549, %f548, 0fBF800000;
	selp.f32 	%f808, %f549, %f548, %p101;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f808, %f808, 0f3F800000;
	setp.ltu.f32 	%p99, %f39, 0f40800000;
	@%p99 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f544, %f808, 0f3F800000;
	fma.rn.f32 	%f546, %f145, 0fC0400000, %f39;
	setp.ge.f32 	%p100, %f546, 0f00000000;
	add.f32 	%f547, %f544, 0f3F800000;
	selp.f32 	%f808, %f547, %f544, %p100;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f810, %f808, 0fC0000000, %f818;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i
	add.s64 	%rd39, %rd1, %rd38;
	abs.f32 	%f561, %f810;
	setp.gtu.f32 	%p107, %f561, 0f7F800000;
	mov.b32 	%r314, %f106;
	and.b32  	%r23, %r314, -2147483648;
	@%p107 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r315, %f810;
	or.b32  	%r316, %r23, %r315;
	mov.b32 	%f810, %r316;
$L__BB0_42:                             // %__nv_fmodf.exit
	ld.global.u32 	%r104, [%rd39];
	mov.u64 	%rd40, 2;
	mov.u64 	%rd41, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r157;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd40;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd41;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11711, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd42, [retval0+0];
	} // callseq 2
	cvt.rn.f32.s64 	%f594, %rd42;
	div.approx.f32 	%f53, %f35, %f594;
	abs.f32 	%f826, %f53;
	setp.lt.f32 	%p115, %f826, 0f40000000;
	@%p115 bra 	$L__BB0_104;
// %bb.43:
	setp.gtu.f32 	%p116, %f826, 0f4B800000;
	@%p116 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_44;
$L__BB0_100:
	mov.b32 	%r121, %f826;
	and.b32  	%r337, %r121, 8388607;
	or.b32  	%r7977, %r337, 1065353216;
	mov.b32 	%f825, %r7977;
	add.s32 	%r338, %r121, -1073741824;
	and.b32  	%r7978, %r338, -8388608;
	setp.eq.s32 	%p122, %r7978, 0;
	@%p122 bra 	$L__BB0_103;
// %bb.101:                             // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f604, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f603,%f604;
	// end inline asm
$L__BB0_102:                            // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r339, %r7978, 192937984;
	add.s32 	%r340, %r7977, %r339;
	mov.b32 	%f605, %r340;
	mul.f32 	%f606, %f603, %f605;
	sub.f32 	%f607, %f605, %f606;
	fma.rn.f32 	%f608, %f607, %f603, %f606;
	sub.f32 	%f609, %f605, %f608;
	fma.rz.f32 	%f610, %f609, %f603, %f608;
	cvt.rzi.f32.f32 	%f611, %f610;
	sub.f32 	%f825, %f605, %f611;
	sub.s32 	%r7978, %r7978, %r339;
	mov.b32 	%r7977, %f825;
	setp.ne.s32 	%p123, %r7978, 0;
	setp.ne.s32 	%p124, %r7977, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_102;
$L__BB0_103:                            // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p126, %r121, 2139095039;
	selp.f32 	%f612, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f613, %f825, 0f34000000;
	mul.f32 	%f826, %f612, %f613;
	bra.uni 	$L__BB0_104;
$L__BB0_44:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f596, %f826, %f145;
	cvt.rzi.f32.f32 	%f824, %f596;
	fma.rn.f32 	%f109, %f824, 0fC0000000, %f826;
	mov.b32 	%r120, %f109;
	setp.lt.u32 	%p117, %r120, 1073741824;
	@%p117 bra 	$L__BB0_99;
// %bb.45:
	setp.lt.u32 	%p118, %r120, -2147483647;
	@%p118 bra 	$L__BB0_97;
// %bb.46:
	add.f32 	%f601, %f824, 0fBF800000;
	setp.lt.f32 	%p121, %f109, 0fC0000000;
	add.f32 	%f602, %f601, 0fBF800000;
	selp.f32 	%f824, %f602, %f601, %p121;
	bra.uni 	$L__BB0_99;
$L__BB0_97:
	add.f32 	%f824, %f824, 0f3F800000;
	setp.ltu.f32 	%p119, %f109, 0f40800000;
	@%p119 bra 	$L__BB0_99;
// %bb.98:                              // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f597, %f824, 0f3F800000;
	fma.rn.f32 	%f599, %f145, 0fC0400000, %f109;
	setp.ge.f32 	%p120, %f599, 0f00000000;
	add.f32 	%f600, %f597, 0f3F800000;
	selp.f32 	%f824, %f600, %f597, %p120;
$L__BB0_99:                             // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f826, %f824, 0fC0000000, %f826;
$L__BB0_104:                            // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f614, %f826;
	setp.gtu.f32 	%p127, %f614, 0f7F800000;
	@%p127 bra 	$L__BB0_106;
// %bb.105:
	mov.b32 	%r341, %f53;
	and.b32  	%r342, %r341, -2147483648;
	mov.b32 	%r343, %f826;
	or.b32  	%r344, %r342, %r343;
	mov.b32 	%f826, %r344;
$L__BB0_106:                            // %__nv_fmodf.exit960
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r157;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd40;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd41;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11711, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd46, [retval0+0];
	} // callseq 3
	cvt.rn.f32.s64 	%f645, %rd46;
	div.approx.f32 	%f125, %f105, %f645;
	abs.f32 	%f814, %f125;
	setp.lt.f32 	%p135, %f814, 0f40000000;
	@%p135 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p136, %f814, 0f4B800000;
	@%p136 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r29, %f814;
	and.b32  	%r353, %r29, 8388607;
	or.b32  	%r7945, %r353, 1065353216;
	mov.b32 	%f813, %r7945;
	add.s32 	%r354, %r29, -1073741824;
	and.b32  	%r7946, %r354, -8388608;
	setp.eq.s32 	%p142, %r7946, 0;
	@%p142 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f655, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f654,%f655;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r355, %r7946, 192937984;
	add.s32 	%r356, %r7945, %r355;
	mov.b32 	%f656, %r356;
	mul.f32 	%f657, %f654, %f656;
	sub.f32 	%f658, %f656, %f657;
	fma.rn.f32 	%f659, %f658, %f654, %f657;
	sub.f32 	%f660, %f656, %f659;
	fma.rz.f32 	%f661, %f660, %f654, %f659;
	cvt.rzi.f32.f32 	%f662, %f661;
	sub.f32 	%f813, %f656, %f662;
	sub.s32 	%r7946, %r7946, %r355;
	mov.b32 	%r7945, %f813;
	setp.ne.s32 	%p143, %r7946, 0;
	setp.ne.s32 	%p144, %r7945, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p146, %r29, 2139095039;
	selp.f32 	%f663, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f664, %f813, 0f34000000;
	mul.f32 	%f814, %f663, %f664;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f647, %f814, %f145;
	cvt.rzi.f32.f32 	%f812, %f647;
	fma.rn.f32 	%f56, %f812, 0fC0000000, %f814;
	mov.b32 	%r28, %f56;
	setp.lt.u32 	%p137, %r28, 1073741824;
	@%p137 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p138, %r28, -2147483647;
	@%p138 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f652, %f812, 0fBF800000;
	setp.lt.f32 	%p141, %f56, 0fC0000000;
	add.f32 	%f653, %f652, 0fBF800000;
	selp.f32 	%f812, %f653, %f652, %p141;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f812, %f812, 0f3F800000;
	setp.ltu.f32 	%p139, %f56, 0f40800000;
	@%p139 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f648, %f812, 0f3F800000;
	fma.rn.f32 	%f650, %f145, 0fC0400000, %f56;
	setp.ge.f32 	%p140, %f650, 0f00000000;
	add.f32 	%f651, %f648, 0f3F800000;
	selp.f32 	%f812, %f651, %f648, %p140;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f814, %f812, 0fC0000000, %f814;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i866
	abs.f32 	%f665, %f814;
	setp.gtu.f32 	%p147, %f665, 0f7F800000;
	@%p147 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r357, %f125;
	and.b32  	%r358, %r357, -2147483648;
	mov.b32 	%r359, %f814;
	or.b32  	%r360, %r358, %r359;
	mov.b32 	%f814, %r360;
$L__BB0_60:                             // %__nv_fmodf.exit867
	@%p75 bra 	$L__BB0_114;
// %bb.61:
	@%p232 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_62;
$L__BB0_110:
	mov.b32 	%r129, %f830;
	and.b32  	%r375, %r129, 8388607;
	or.b32  	%r7979, %r375, 1065353216;
	mov.b32 	%f829, %r7979;
	add.s32 	%r376, %r129, -1073741824;
	and.b32  	%r7980, %r376, -8388608;
	setp.eq.s32 	%p162, %r7980, 0;
	@%p162 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f707, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f706,%f707;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r377, %r7980, 192937984;
	add.s32 	%r378, %r7979, %r377;
	mov.b32 	%f708, %r378;
	mul.f32 	%f709, %f706, %f708;
	sub.f32 	%f710, %f708, %f709;
	fma.rn.f32 	%f711, %f710, %f706, %f709;
	sub.f32 	%f712, %f708, %f711;
	fma.rz.f32 	%f713, %f712, %f706, %f711;
	cvt.rzi.f32.f32 	%f714, %f713;
	sub.f32 	%f829, %f708, %f714;
	sub.s32 	%r7980, %r7980, %r377;
	mov.b32 	%r7979, %f829;
	setp.ne.s32 	%p163, %r7980, 0;
	setp.ne.s32 	%p164, %r7979, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p166, %r129, 2139095039;
	selp.f32 	%f715, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f716, %f829, 0f34000000;
	mul.f32 	%f830, %f715, %f716;
	bra.uni 	$L__BB0_114;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f699, %f830, %f145;
	cvt.rzi.f32.f32 	%f828, %f699;
	fma.rn.f32 	%f128, %f828, 0fC0000000, %f830;
	mov.b32 	%r128, %f128;
	setp.lt.u32 	%p157, %r128, 1073741824;
	@%p157 bra 	$L__BB0_109;
// %bb.63:
	setp.lt.u32 	%p158, %r128, -2147483647;
	@%p158 bra 	$L__BB0_107;
// %bb.64:
	add.f32 	%f704, %f828, 0fBF800000;
	setp.lt.f32 	%p161, %f128, 0fC0000000;
	add.f32 	%f705, %f704, 0fBF800000;
	selp.f32 	%f828, %f705, %f704, %p161;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f828, %f828, 0f3F800000;
	setp.ltu.f32 	%p159, %f128, 0f40800000;
	@%p159 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f700, %f828, 0f3F800000;
	fma.rn.f32 	%f702, %f145, 0fC0400000, %f128;
	setp.ge.f32 	%p160, %f702, 0f00000000;
	add.f32 	%f703, %f700, 0f3F800000;
	selp.f32 	%f828, %f703, %f700, %p160;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f830, %f828, 0fC0000000, %f830;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f717, %f830;
	setp.gtu.f32 	%p167, %f717, 0f7F800000;
	@%p167 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r379, %f830;
	or.b32  	%r380, %r119, %r379;
	mov.b32 	%f830, %r380;
$L__BB0_116:                            // %__nv_fmodf.exit991
	@%p95 bra 	$L__BB0_76;
// %bb.65:
	@%p233 bra 	$L__BB0_72;
	bra.uni 	$L__BB0_66;
$L__BB0_72:
	mov.b32 	%r39, %f818;
	and.b32  	%r389, %r39, 8388607;
	or.b32  	%r7947, %r389, 1065353216;
	mov.b32 	%f817, %r7947;
	add.s32 	%r390, %r39, -1073741824;
	and.b32  	%r7948, %r390, -8388608;
	setp.eq.s32 	%p182, %r7948, 0;
	@%p182 bra 	$L__BB0_75;
// %bb.73:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f757, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f756,%f757;
	// end inline asm
$L__BB0_74:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r391, %r7948, 192937984;
	add.s32 	%r392, %r7947, %r391;
	mov.b32 	%f758, %r392;
	mul.f32 	%f759, %f756, %f758;
	sub.f32 	%f760, %f758, %f759;
	fma.rn.f32 	%f761, %f760, %f756, %f759;
	sub.f32 	%f762, %f758, %f761;
	fma.rz.f32 	%f763, %f762, %f756, %f761;
	cvt.rzi.f32.f32 	%f764, %f763;
	sub.f32 	%f817, %f758, %f764;
	sub.s32 	%r7948, %r7948, %r391;
	mov.b32 	%r7947, %f817;
	setp.ne.s32 	%p183, %r7948, 0;
	setp.ne.s32 	%p184, %r7947, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_74;
$L__BB0_75:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p186, %r39, 2139095039;
	selp.f32 	%f765, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f766, %f817, 0f34000000;
	mul.f32 	%f818, %f765, %f766;
	bra.uni 	$L__BB0_76;
$L__BB0_66:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f749, %f818, %f145;
	cvt.rzi.f32.f32 	%f816, %f749;
	fma.rn.f32 	%f71, %f816, 0fC0000000, %f818;
	mov.b32 	%r38, %f71;
	setp.lt.u32 	%p177, %r38, 1073741824;
	@%p177 bra 	$L__BB0_71;
// %bb.67:
	setp.lt.u32 	%p178, %r38, -2147483647;
	@%p178 bra 	$L__BB0_69;
// %bb.68:
	add.f32 	%f754, %f816, 0fBF800000;
	setp.lt.f32 	%p181, %f71, 0fC0000000;
	add.f32 	%f755, %f754, 0fBF800000;
	selp.f32 	%f816, %f755, %f754, %p181;
	bra.uni 	$L__BB0_71;
$L__BB0_69:
	add.f32 	%f816, %f816, 0f3F800000;
	setp.ltu.f32 	%p179, %f71, 0f40800000;
	@%p179 bra 	$L__BB0_71;
// %bb.70:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f750, %f816, 0f3F800000;
	fma.rn.f32 	%f752, %f145, 0fC0400000, %f71;
	setp.ge.f32 	%p180, %f752, 0f00000000;
	add.f32 	%f753, %f750, 0f3F800000;
	selp.f32 	%f816, %f753, %f750, %p180;
$L__BB0_71:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f818, %f816, 0fC0000000, %f818;
$L__BB0_76:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f767, %f818;
	setp.gtu.f32 	%p187, %f767, 0f7F800000;
	@%p187 bra 	$L__BB0_78;
// %bb.77:
	mov.b32 	%r393, %f818;
	or.b32  	%r394, %r23, %r393;
	mov.b32 	%f818, %r394;
$L__BB0_78:                             // %__nv_fmodf.exit898
	setp.le.s32 	%p195, %r159, %r158;
	mov.u32 	%r7942, 0;
	@%p195 bra 	$L__BB0_86;
// %bb.79:                              // %L1335.lr.ph
	mov.f32 	%f149, 0f43808000;
	mul.lo.s32 	%r264, %r109, 63;
	div.approx.f32 	%f150, %f148, %f149;
	div.approx.f32 	%f184, %f182, %f149;
	div.approx.f32 	%f219, %f217, %f149;
	div.approx.f32 	%f253, %f251, %f149;
	div.approx.f32 	%f288, %f286, %f149;
	div.approx.f32 	%f322, %f320, %f149;
	div.approx.f32 	%f357, %f355, %f149;
	div.approx.f32 	%f391, %f389, %f149;
	add.s32 	%r274, %r264, 96;
	abs.f32 	%f151, %f150;
	abs.f32 	%f185, %f184;
	abs.f32 	%f220, %f219;
	abs.f32 	%f254, %f253;
	abs.f32 	%f289, %f288;
	abs.f32 	%f323, %f322;
	abs.f32 	%f358, %f357;
	abs.f32 	%f392, %f391;
	and.b32  	%r265, %r264, 127;
	and.b32  	%r275, %r274, 127;
	setp.gt.f32 	%p13, %f151, 0f4B800000;
	mul.f32 	%f152, %f150, 0f00000000;
	setp.gt.f32 	%p19, %f185, 0f4B800000;
	mul.f32 	%f186, %f184, 0f00000000;
	setp.gt.f32 	%p25, %f220, 0f4B800000;
	mul.f32 	%f221, %f219, 0f00000000;
	setp.gt.f32 	%p31, %f254, 0f4B800000;
	mul.f32 	%f255, %f253, 0f00000000;
	setp.gt.f32 	%p37, %f289, 0f4B800000;
	mul.f32 	%f290, %f288, 0f00000000;
	setp.gt.f32 	%p43, %f323, 0f4B800000;
	mul.f32 	%f324, %f322, 0f00000000;
	setp.gt.f32 	%p49, %f358, 0f4B800000;
	mul.f32 	%f359, %f357, 0f00000000;
	setp.gt.f32 	%p55, %f392, 0f4B800000;
	mul.f32 	%f393, %f391, 0f00000000;
	cvt.rn.f32.s32 	%f422, %r265;
	cvt.rn.f32.s32 	%f457, %r275;
	selp.f32 	%f153, %f152, %f150, %p13;
	selp.f32 	%f187, %f186, %f184, %p19;
	selp.f32 	%f222, %f221, %f219, %p25;
	selp.f32 	%f256, %f255, %f253, %p31;
	selp.f32 	%f291, %f290, %f288, %p37;
	selp.f32 	%f325, %f324, %f322, %p43;
	selp.f32 	%f360, %f359, %f357, %p49;
	selp.f32 	%f394, %f393, %f391, %p55;
	div.approx.f32 	%f424, %f422, %f177;
	div.approx.f32 	%f458, %f457, %f177;
	add.f32 	%f154, %f153, %f153;
	add.f32 	%f188, %f187, %f187;
	add.f32 	%f223, %f222, %f222;
	add.f32 	%f257, %f256, %f256;
	add.f32 	%f292, %f291, %f291;
	add.f32 	%f326, %f325, %f325;
	add.f32 	%f361, %f360, %f360;
	add.f32 	%f395, %f394, %f394;
	add.f32 	%f425, %f424, %f424;
	add.f32 	%f459, %f458, %f458;
	add.f32 	%f511, %f822, %f822;
	add.f32 	%f562, %f810, %f810;
	mov.b32 	%r187, %f154;
	mov.b32 	%r194, %f188;
	mov.b32 	%r205, %f223;
	mov.b32 	%r212, %f257;
	mov.b32 	%r223, %f292;
	mov.b32 	%r230, %f326;
	mov.b32 	%r241, %f361;
	mov.b32 	%r248, %f395;
	mov.b32 	%r266, %f425;
	mov.b32 	%r276, %f459;
	mov.b32 	%r298, %f511;
	mov.b32 	%r329, %f562;
	and.b32  	%r188, %r187, -2147483648;
	and.b32  	%r195, %r194, -2147483648;
	and.b32  	%r206, %r205, -2147483648;
	and.b32  	%r213, %r212, -2147483648;
	and.b32  	%r224, %r223, -2147483648;
	and.b32  	%r231, %r230, -2147483648;
	and.b32  	%r242, %r241, -2147483648;
	and.b32  	%r249, %r248, -2147483648;
	and.b32  	%r267, %r266, -2147483648;
	and.b32  	%r277, %r276, -2147483648;
	and.b32  	%r299, %r298, -2147483648;
	and.b32  	%r330, %r329, -2147483648;
	add.f32 	%f615, %f826, %f826;
	add.f32 	%f666, %f814, %f814;
	or.b32  	%r189, %r188, 1056964608;
	or.b32  	%r196, %r195, 1056964608;
	or.b32  	%r207, %r206, 1056964608;
	or.b32  	%r214, %r213, 1056964608;
	or.b32  	%r225, %r224, 1056964608;
	or.b32  	%r232, %r231, 1056964608;
	or.b32  	%r243, %r242, 1056964608;
	or.b32  	%r250, %r249, 1056964608;
	or.b32  	%r268, %r267, 1056964608;
	or.b32  	%r278, %r277, 1056964608;
	or.b32  	%r300, %r299, 1056964608;
	or.b32  	%r331, %r330, 1056964608;
	mov.b32 	%r345, %f615;
	mov.b32 	%r367, %f666;
	mov.b32 	%f155, %r189;
	mov.b32 	%f189, %r196;
	mov.b32 	%f224, %r207;
	mov.b32 	%f258, %r214;
	mov.b32 	%f293, %r225;
	mov.b32 	%f327, %r232;
	mov.b32 	%f362, %r243;
	mov.b32 	%f396, %r250;
	mov.b32 	%f426, %r268;
	mov.b32 	%f460, %r278;
	mov.b32 	%f512, %r300;
	mov.b32 	%f563, %r331;
	and.b32  	%r346, %r345, -2147483648;
	and.b32  	%r368, %r367, -2147483648;
	add.f32 	%f718, %f830, %f830;
	add.f32 	%f156, %f154, %f155;
	abs.f32 	%f158, %f154;
	add.f32 	%f190, %f188, %f189;
	abs.f32 	%f192, %f188;
	add.f32 	%f225, %f223, %f224;
	abs.f32 	%f227, %f223;
	add.f32 	%f259, %f257, %f258;
	abs.f32 	%f261, %f257;
	add.f32 	%f294, %f292, %f293;
	abs.f32 	%f296, %f292;
	add.f32 	%f328, %f326, %f327;
	abs.f32 	%f330, %f326;
	add.f32 	%f363, %f361, %f362;
	abs.f32 	%f365, %f361;
	add.f32 	%f397, %f395, %f396;
	abs.f32 	%f399, %f395;
	add.f32 	%f427, %f425, %f426;
	abs.f32 	%f429, %f425;
	add.f32 	%f461, %f459, %f460;
	abs.f32 	%f463, %f459;
	add.f32 	%f513, %f511, %f512;
	abs.f32 	%f515, %f511;
	add.f32 	%f564, %f562, %f563;
	abs.f32 	%f566, %f562;
	or.b32  	%r347, %r346, 1056964608;
	or.b32  	%r369, %r368, 1056964608;
	mov.b32 	%r381, %f718;
	cvt.rzi.f32.f32 	%f157, %f156;
	setp.gt.f32 	%p14, %f158, 0f4B000000;
	cvt.rzi.f32.f32 	%f191, %f190;
	setp.gt.f32 	%p20, %f192, 0f4B000000;
	cvt.rzi.f32.f32 	%f226, %f225;
	setp.gt.f32 	%p26, %f227, 0f4B000000;
	cvt.rzi.f32.f32 	%f260, %f259;
	setp.gt.f32 	%p32, %f261, 0f4B000000;
	cvt.rzi.f32.f32 	%f295, %f294;
	setp.gt.f32 	%p38, %f296, 0f4B000000;
	cvt.rzi.f32.f32 	%f329, %f328;
	setp.gt.f32 	%p44, %f330, 0f4B000000;
	cvt.rzi.f32.f32 	%f364, %f363;
	setp.gt.f32 	%p50, %f365, 0f4B000000;
	cvt.rzi.f32.f32 	%f398, %f397;
	setp.gt.f32 	%p56, %f399, 0f4B000000;
	cvt.rzi.f32.f32 	%f428, %f427;
	setp.gt.f32 	%p61, %f429, 0f4B000000;
	cvt.rzi.f32.f32 	%f462, %f461;
	setp.gt.f32 	%p68, %f463, 0f4B000000;
	cvt.rzi.f32.f32 	%f514, %f513;
	setp.gt.f32 	%p88, %f515, 0f4B000000;
	cvt.rzi.f32.f32 	%f565, %f564;
	setp.gt.f32 	%p108, %f566, 0f4B000000;
	mov.b32 	%f616, %r347;
	mov.b32 	%f667, %r369;
	and.b32  	%r382, %r381, -2147483648;
	selp.f32 	%f159, %f154, %f157, %p14;
	cvt.rzi.f32.f32 	%f160, %f154;
	setp.lt.f32 	%p15, %f158, 0f3F000000;
	selp.f32 	%f193, %f188, %f191, %p20;
	cvt.rzi.f32.f32 	%f194, %f188;
	setp.lt.f32 	%p21, %f192, 0f3F000000;
	selp.f32 	%f228, %f223, %f226, %p26;
	cvt.rzi.f32.f32 	%f229, %f223;
	setp.lt.f32 	%p27, %f227, 0f3F000000;
	selp.f32 	%f262, %f257, %f260, %p32;
	cvt.rzi.f32.f32 	%f263, %f257;
	setp.lt.f32 	%p33, %f261, 0f3F000000;
	selp.f32 	%f297, %f292, %f295, %p38;
	cvt.rzi.f32.f32 	%f298, %f292;
	setp.lt.f32 	%p39, %f296, 0f3F000000;
	selp.f32 	%f331, %f326, %f329, %p44;
	cvt.rzi.f32.f32 	%f332, %f326;
	setp.lt.f32 	%p45, %f330, 0f3F000000;
	selp.f32 	%f366, %f361, %f364, %p50;
	cvt.rzi.f32.f32 	%f367, %f361;
	setp.lt.f32 	%p51, %f365, 0f3F000000;
	selp.f32 	%f400, %f395, %f398, %p56;
	cvt.rzi.f32.f32 	%f401, %f395;
	setp.lt.f32 	%p57, %f399, 0f3F000000;
	selp.f32 	%f430, %f425, %f428, %p61;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p62, %f429, 0f3F000000;
	selp.f32 	%f464, %f459, %f462, %p68;
	cvt.rzi.f32.f32 	%f465, %f459;
	setp.lt.f32 	%p69, %f463, 0f3F000000;
	selp.f32 	%f516, %f511, %f514, %p88;
	cvt.rzi.f32.f32 	%f517, %f511;
	setp.lt.f32 	%p89, %f515, 0f3F000000;
	selp.f32 	%f567, %f562, %f565, %p108;
	cvt.rzi.f32.f32 	%f568, %f562;
	setp.lt.f32 	%p109, %f566, 0f3F000000;
	add.f32 	%f617, %f615, %f616;
	abs.f32 	%f619, %f615;
	add.f32 	%f668, %f666, %f667;
	abs.f32 	%f670, %f666;
	or.b32  	%r383, %r382, 1056964608;
	selp.f32 	%f161, %f160, %f159, %p15;
	selp.f32 	%f195, %f194, %f193, %p21;
	selp.f32 	%f230, %f229, %f228, %p27;
	selp.f32 	%f264, %f263, %f262, %p33;
	selp.f32 	%f299, %f298, %f297, %p39;
	selp.f32 	%f333, %f332, %f331, %p45;
	selp.f32 	%f368, %f367, %f366, %p51;
	selp.f32 	%f402, %f401, %f400, %p57;
	selp.f32 	%f432, %f431, %f430, %p62;
	selp.f32 	%f466, %f465, %f464, %p69;
	selp.f32 	%f518, %f517, %f516, %p89;
	selp.f32 	%f569, %f568, %f567, %p109;
	cvt.rzi.f32.f32 	%f618, %f617;
	setp.gt.f32 	%p128, %f619, 0f4B000000;
	cvt.rzi.f32.f32 	%f669, %f668;
	setp.gt.f32 	%p149, %f670, 0f4B000000;
	mov.b32 	%f719, %r383;
	fma.rn.f32 	%f162, %f161, 0fBF000000, %f153;
	fma.rn.f32 	%f196, %f195, 0fBF000000, %f187;
	fma.rn.f32 	%f231, %f230, 0fBF000000, %f222;
	fma.rn.f32 	%f265, %f264, 0fBF000000, %f256;
	fma.rn.f32 	%f300, %f299, 0fBF000000, %f291;
	fma.rn.f32 	%f334, %f333, 0fBF000000, %f325;
	fma.rn.f32 	%f369, %f368, 0fBF000000, %f360;
	fma.rn.f32 	%f403, %f402, 0fBF000000, %f394;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f424;
	fma.rn.f32 	%f467, %f466, 0fBF000000, %f458;
	fma.rn.f32 	%f519, %f518, 0fBF000000, %f822;
	fma.rn.f32 	%f570, %f569, 0fBF000000, %f810;
	selp.f32 	%f620, %f615, %f618, %p128;
	cvt.rzi.f32.f32 	%f621, %f615;
	setp.lt.f32 	%p129, %f619, 0f3F000000;
	selp.f32 	%f671, %f666, %f669, %p149;
	cvt.rzi.f32.f32 	%f672, %f666;
	setp.lt.f32 	%p150, %f670, 0f3F000000;
	add.f32 	%f720, %f718, %f719;
	abs.f32 	%f722, %f718;
	mul.f32 	%f163, %f162, %f162;
	mul.f32 	%f197, %f196, %f196;
	mul.f32 	%f232, %f231, %f231;
	mul.f32 	%f266, %f265, %f265;
	mul.f32 	%f301, %f300, %f300;
	mul.f32 	%f335, %f334, %f334;
	mul.f32 	%f370, %f369, %f369;
	mul.f32 	%f404, %f403, %f403;
	mul.f32 	%f434, %f433, %f433;
	mul.f32 	%f468, %f467, %f467;
	mul.f32 	%f520, %f519, %f519;
	mul.f32 	%f571, %f570, %f570;
	selp.f32 	%f622, %f621, %f620, %p129;
	selp.f32 	%f673, %f672, %f671, %p150;
	cvt.rzi.f32.f32 	%f721, %f720;
	setp.gt.f32 	%p169, %f722, 0f4B000000;
	cvt.rzi.s32.f32 	%r190, %f161;
	fma.rn.f32 	%f164, %f163, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f165, %f163, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r197, %f195;
	fma.rn.f32 	%f198, %f197, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f199, %f197, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r208, %f230;
	fma.rn.f32 	%f233, %f232, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f234, %f232, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r215, %f264;
	fma.rn.f32 	%f267, %f266, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f268, %f266, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r226, %f299;
	fma.rn.f32 	%f302, %f301, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f303, %f301, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r233, %f333;
	fma.rn.f32 	%f336, %f335, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f337, %f335, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r244, %f368;
	fma.rn.f32 	%f371, %f370, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f372, %f370, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r251, %f402;
	fma.rn.f32 	%f405, %f404, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f406, %f404, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f469, %f468, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f470, %f468, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f521, %f520, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f522, %f520, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f572, %f571, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f573, %f571, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f623, %f622, 0fBF000000, %f826;
	fma.rn.f32 	%f674, %f673, 0fBF000000, %f814;
	selp.f32 	%f723, %f718, %f721, %p169;
	cvt.rzi.f32.f32 	%f724, %f718;
	setp.lt.f32 	%p170, %f722, 0f3F000000;
	add.s32 	%r191, %r190, 1;
	fma.rn.f32 	%f166, %f164, %f163, 0fC0A55DF6;
	fma.rn.f32 	%f167, %f165, %f163, 0f4081E0CF;
	fma.rn.f32 	%f168, %f163, %f162, 0f00000000;
	add.s32 	%r198, %r197, 1;
	fma.rn.f32 	%f200, %f198, %f197, 0fC0A55DF6;
	fma.rn.f32 	%f201, %f199, %f197, 0f4081E0CF;
	fma.rn.f32 	%f202, %f197, %f196, 0f00000000;
	add.s32 	%r209, %r208, 1;
	fma.rn.f32 	%f235, %f233, %f232, 0fC0A55DF6;
	fma.rn.f32 	%f236, %f234, %f232, 0f4081E0CF;
	fma.rn.f32 	%f237, %f232, %f231, 0f00000000;
	add.s32 	%r216, %r215, 1;
	fma.rn.f32 	%f269, %f267, %f266, 0fC0A55DF6;
	fma.rn.f32 	%f270, %f268, %f266, 0f4081E0CF;
	fma.rn.f32 	%f271, %f266, %f265, 0f00000000;
	add.s32 	%r227, %r226, 1;
	fma.rn.f32 	%f304, %f302, %f301, 0fC0A55DF6;
	fma.rn.f32 	%f305, %f303, %f301, 0f4081E0CF;
	fma.rn.f32 	%f306, %f301, %f300, 0f00000000;
	add.s32 	%r234, %r233, 1;
	fma.rn.f32 	%f338, %f336, %f335, 0fC0A55DF6;
	fma.rn.f32 	%f339, %f337, %f335, 0f4081E0CF;
	fma.rn.f32 	%f340, %f335, %f334, 0f00000000;
	add.s32 	%r245, %r244, 1;
	fma.rn.f32 	%f373, %f371, %f370, 0fC0A55DF6;
	fma.rn.f32 	%f374, %f372, %f370, 0f4081E0CF;
	fma.rn.f32 	%f375, %f370, %f369, 0f00000000;
	add.s32 	%r252, %r251, 1;
	fma.rn.f32 	%f407, %f405, %f404, 0fC0A55DF6;
	fma.rn.f32 	%f408, %f406, %f404, 0f4081E0CF;
	fma.rn.f32 	%f409, %f404, %f403, 0f00000000;
	cvt.rzi.s32.f32 	%r269, %f432;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	cvt.rzi.s32.f32 	%r279, %f466;
	fma.rn.f32 	%f471, %f469, %f468, 0fC0A55DF6;
	fma.rn.f32 	%f472, %f470, %f468, 0f4081E0CF;
	fma.rn.f32 	%f473, %f468, %f467, 0f00000000;
	cvt.rzi.s32.f32 	%r301, %f518;
	fma.rn.f32 	%f523, %f521, %f520, 0fC0A55DF6;
	fma.rn.f32 	%f524, %f522, %f520, 0f4081E0CF;
	fma.rn.f32 	%f525, %f520, %f519, 0f00000000;
	cvt.rzi.s32.f32 	%r332, %f569;
	fma.rn.f32 	%f574, %f572, %f571, 0fC0A55DF6;
	fma.rn.f32 	%f575, %f573, %f571, 0f4081E0CF;
	fma.rn.f32 	%f576, %f571, %f570, 0f00000000;
	mul.f32 	%f624, %f623, %f623;
	mul.f32 	%f675, %f674, %f674;
	selp.f32 	%f725, %f724, %f723, %p170;
	fma.rn.f32 	%f169, %f167, %f163, 0fC09DE9E6;
	fma.rn.f32 	%f170, %f166, %f168, 0f00000000;
	and.b32  	%r192, %r191, 1;
	fma.rn.f32 	%f203, %f201, %f197, 0fC09DE9E6;
	fma.rn.f32 	%f204, %f200, %f202, 0f00000000;
	and.b32  	%r199, %r198, 1;
	fma.rn.f32 	%f238, %f236, %f232, 0fC09DE9E6;
	fma.rn.f32 	%f239, %f235, %f237, 0f00000000;
	and.b32  	%r210, %r209, 1;
	fma.rn.f32 	%f272, %f270, %f266, 0fC09DE9E6;
	fma.rn.f32 	%f273, %f269, %f271, 0f00000000;
	and.b32  	%r217, %r216, 1;
	fma.rn.f32 	%f307, %f305, %f301, 0fC09DE9E6;
	fma.rn.f32 	%f308, %f304, %f306, 0f00000000;
	and.b32  	%r228, %r227, 1;
	fma.rn.f32 	%f341, %f339, %f335, 0fC09DE9E6;
	fma.rn.f32 	%f342, %f338, %f340, 0f00000000;
	and.b32  	%r235, %r234, 1;
	fma.rn.f32 	%f376, %f374, %f370, 0fC09DE9E6;
	fma.rn.f32 	%f377, %f373, %f375, 0f00000000;
	and.b32  	%r246, %r245, 1;
	fma.rn.f32 	%f410, %f408, %f404, 0fC09DE9E6;
	fma.rn.f32 	%f411, %f407, %f409, 0f00000000;
	and.b32  	%r253, %r252, 1;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	and.b32  	%r270, %r269, 1;
	fma.rn.f32 	%f474, %f472, %f468, 0fC09DE9E6;
	fma.rn.f32 	%f475, %f471, %f473, 0f00000000;
	and.b32  	%r280, %r279, 1;
	fma.rn.f32 	%f526, %f524, %f520, 0fC09DE9E6;
	fma.rn.f32 	%f527, %f523, %f525, 0f00000000;
	and.b32  	%r302, %r301, 1;
	fma.rn.f32 	%f577, %f575, %f571, 0fC09DE9E6;
	fma.rn.f32 	%f578, %f574, %f576, 0f00000000;
	and.b32  	%r333, %r332, 1;
	fma.rn.f32 	%f625, %f624, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f626, %f624, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f676, %f675, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f677, %f675, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f726, %f725, 0fBF000000, %f830;
	fma.rn.f32 	%f171, %f169, %f163, 0f3F800000;
	fma.rn.f32 	%f172, %f162, 0f40490FDB, %f170;
	setp.eq.b32 	%p16, %r192, 1;
	fma.rn.f32 	%f205, %f203, %f197, 0f3F800000;
	fma.rn.f32 	%f206, %f196, 0f40490FDB, %f204;
	setp.eq.b32 	%p22, %r199, 1;
	fma.rn.f32 	%f240, %f238, %f232, 0f3F800000;
	fma.rn.f32 	%f241, %f231, 0f40490FDB, %f239;
	setp.eq.b32 	%p28, %r210, 1;
	fma.rn.f32 	%f274, %f272, %f266, 0f3F800000;
	fma.rn.f32 	%f275, %f265, 0f40490FDB, %f273;
	setp.eq.b32 	%p34, %r217, 1;
	fma.rn.f32 	%f309, %f307, %f301, 0f3F800000;
	fma.rn.f32 	%f310, %f300, 0f40490FDB, %f308;
	setp.eq.b32 	%p40, %r228, 1;
	fma.rn.f32 	%f343, %f341, %f335, 0f3F800000;
	fma.rn.f32 	%f344, %f334, 0f40490FDB, %f342;
	setp.eq.b32 	%p46, %r235, 1;
	fma.rn.f32 	%f378, %f376, %f370, 0f3F800000;
	fma.rn.f32 	%f379, %f369, 0f40490FDB, %f377;
	setp.eq.b32 	%p52, %r246, 1;
	fma.rn.f32 	%f412, %f410, %f404, 0f3F800000;
	fma.rn.f32 	%f413, %f403, 0f40490FDB, %f411;
	setp.eq.b32 	%p58, %r253, 1;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	setp.eq.b32 	%p63, %r270, 1;
	fma.rn.f32 	%f476, %f474, %f468, 0f3F800000;
	fma.rn.f32 	%f477, %f467, 0f40490FDB, %f475;
	setp.eq.b32 	%p70, %r280, 1;
	fma.rn.f32 	%f528, %f526, %f520, 0f3F800000;
	fma.rn.f32 	%f529, %f519, 0f40490FDB, %f527;
	setp.eq.b32 	%p90, %r302, 1;
	fma.rn.f32 	%f579, %f577, %f571, 0f3F800000;
	fma.rn.f32 	%f580, %f570, 0f40490FDB, %f578;
	setp.eq.b32 	%p110, %r333, 1;
	cvt.rzi.s32.f32 	%r348, %f622;
	fma.rn.f32 	%f627, %f625, %f624, 0fC0A55DF6;
	fma.rn.f32 	%f628, %f626, %f624, 0f4081E0CF;
	fma.rn.f32 	%f629, %f624, %f623, 0f00000000;
	cvt.rzi.s32.f32 	%r370, %f673;
	fma.rn.f32 	%f678, %f676, %f675, 0fC0A55DF6;
	fma.rn.f32 	%f679, %f677, %f675, 0f4081E0CF;
	fma.rn.f32 	%f680, %f675, %f674, 0f00000000;
	mul.f32 	%f727, %f726, %f726;
	selp.f32 	%f173, %f171, %f172, %p16;
	and.b32  	%r193, %r191, 2;
	mov.f32 	%f174, 0f00000000;
	selp.f32 	%f207, %f205, %f206, %p22;
	and.b32  	%r200, %r198, 2;
	selp.f32 	%f242, %f240, %f241, %p28;
	and.b32  	%r211, %r209, 2;
	selp.f32 	%f276, %f274, %f275, %p34;
	and.b32  	%r218, %r216, 2;
	selp.f32 	%f311, %f309, %f310, %p40;
	and.b32  	%r229, %r227, 2;
	selp.f32 	%f345, %f343, %f344, %p46;
	and.b32  	%r236, %r234, 2;
	selp.f32 	%f380, %f378, %f379, %p52;
	and.b32  	%r247, %r245, 2;
	selp.f32 	%f414, %f412, %f413, %p58;
	and.b32  	%r254, %r252, 2;
	selp.f32 	%f444, %f442, %f443, %p63;
	and.b32  	%r271, %r269, 2;
	selp.f32 	%f478, %f476, %f477, %p70;
	and.b32  	%r281, %r279, 2;
	selp.f32 	%f530, %f528, %f529, %p90;
	and.b32  	%r303, %r301, 2;
	selp.f32 	%f581, %f579, %f580, %p110;
	and.b32  	%r334, %r332, 2;
	fma.rn.f32 	%f630, %f628, %f624, 0fC09DE9E6;
	fma.rn.f32 	%f631, %f627, %f629, 0f00000000;
	and.b32  	%r349, %r348, 1;
	fma.rn.f32 	%f681, %f679, %f675, 0fC09DE9E6;
	fma.rn.f32 	%f682, %f678, %f680, 0f00000000;
	and.b32  	%r371, %r370, 1;
	fma.rn.f32 	%f728, %f727, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f729, %f727, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r193, 0;
	sub.f32 	%f175, %f174, %f173;
	setp.eq.s32 	%p23, %r200, 0;
	sub.f32 	%f209, %f174, %f207;
	setp.eq.s32 	%p29, %r211, 0;
	sub.f32 	%f244, %f174, %f242;
	setp.eq.s32 	%p35, %r218, 0;
	sub.f32 	%f278, %f174, %f276;
	setp.eq.s32 	%p41, %r229, 0;
	sub.f32 	%f313, %f174, %f311;
	setp.eq.s32 	%p47, %r236, 0;
	sub.f32 	%f347, %f174, %f345;
	setp.eq.s32 	%p53, %r247, 0;
	sub.f32 	%f382, %f174, %f380;
	setp.eq.s32 	%p59, %r254, 0;
	sub.f32 	%f416, %f174, %f414;
	setp.eq.s32 	%p64, %r271, 0;
	neg.f32 	%f446, %f444;
	add.s32 	%r272, %r269, 1;
	cvt.rzi.f32.f32 	%f451, %f424;
	setp.eq.s32 	%p71, %r281, 0;
	neg.f32 	%f480, %f478;
	add.s32 	%r282, %r279, 1;
	cvt.rzi.f32.f32 	%f484, %f458;
	setp.eq.s32 	%p91, %r303, 0;
	neg.f32 	%f532, %f530;
	add.s32 	%r304, %r301, 1;
	cvt.rzi.f32.f32 	%f537, %f822;
	setp.eq.s32 	%p111, %r334, 0;
	neg.f32 	%f583, %f581;
	add.s32 	%r335, %r332, 1;
	cvt.rzi.f32.f32 	%f588, %f810;
	fma.rn.f32 	%f632, %f630, %f624, 0f3F800000;
	fma.rn.f32 	%f633, %f623, 0f40490FDB, %f631;
	setp.eq.b32 	%p130, %r349, 1;
	fma.rn.f32 	%f683, %f681, %f675, 0f3F800000;
	fma.rn.f32 	%f684, %f674, 0f40490FDB, %f682;
	setp.eq.b32 	%p151, %r371, 1;
	cvt.rzi.s32.f32 	%r384, %f725;
	fma.rn.f32 	%f730, %f728, %f727, 0fC0A55DF6;
	fma.rn.f32 	%f731, %f729, %f727, 0f4081E0CF;
	fma.rn.f32 	%f732, %f727, %f726, 0f00000000;
	selp.f32 	%f176, %f173, %f175, %p17;
	selp.f32 	%f210, %f207, %f209, %p23;
	selp.f32 	%f245, %f242, %f244, %p29;
	selp.f32 	%f279, %f276, %f278, %p35;
	selp.f32 	%f314, %f311, %f313, %p41;
	selp.f32 	%f348, %f345, %f347, %p47;
	selp.f32 	%f383, %f380, %f382, %p53;
	selp.f32 	%f417, %f414, %f416, %p59;
	selp.f32 	%f445, %f443, %f442, %p63;
	selp.f32 	%f447, %f444, %f446, %p64;
	and.b32  	%r273, %r272, 2;
	setp.eq.f32 	%p66, %f451, %f424;
	mul.f32 	%f452, %f424, 0f00000000;
	selp.f32 	%f479, %f477, %f476, %p70;
	selp.f32 	%f481, %f478, %f480, %p71;
	and.b32  	%r283, %r282, 2;
	setp.eq.f32 	%p73, %f484, %f458;
	mul.f32 	%f485, %f458, 0f00000000;
	selp.f32 	%f531, %f529, %f528, %p90;
	selp.f32 	%f533, %f530, %f532, %p91;
	and.b32  	%r305, %r304, 2;
	setp.eq.f32 	%p93, %f537, %f822;
	mul.f32 	%f538, %f822, 0f00000000;
	selp.f32 	%f582, %f580, %f579, %p110;
	selp.f32 	%f584, %f581, %f583, %p111;
	and.b32  	%r336, %r335, 2;
	setp.eq.f32 	%p113, %f588, %f810;
	mul.f32 	%f589, %f810, 0f00000000;
	selp.f32 	%f634, %f632, %f633, %p130;
	and.b32  	%r350, %r348, 2;
	selp.f32 	%f685, %f683, %f684, %p151;
	and.b32  	%r372, %r370, 2;
	fma.rn.f32 	%f733, %f731, %f727, 0fC09DE9E6;
	fma.rn.f32 	%f734, %f730, %f732, 0f00000000;
	and.b32  	%r385, %r384, 1;
	mul.f32 	%f86, %f176, %f176;
	mul.f32 	%f4, %f210, %f210;
	mul.f32 	%f8, %f245, %f245;
	mul.f32 	%f13, %f279, %f279;
	mul.f32 	%f17, %f314, %f314;
	mul.f32 	%f22, %f348, %f348;
	mul.f32 	%f26, %f383, %f383;
	mul.f32 	%f31, %f417, %f417;
	setp.eq.s32 	%p65, %r273, 0;
	sub.f32 	%f449, %f174, %f445;
	selp.f32 	%f453, %f452, %f447, %p66;
	abs.f32 	%f454, %f424;
	setp.eq.s32 	%p72, %r283, 0;
	sub.f32 	%f482, %f174, %f479;
	selp.f32 	%f486, %f485, %f481, %p73;
	abs.f32 	%f487, %f458;
	setp.eq.s32 	%p92, %r305, 0;
	sub.f32 	%f535, %f174, %f531;
	selp.f32 	%f103, %f538, %f533, %p93;
	abs.f32 	%f539, %f822;
	setp.eq.s32 	%p112, %r336, 0;
	sub.f32 	%f586, %f174, %f582;
	selp.f32 	%f590, %f589, %f584, %p113;
	abs.f32 	%f591, %f810;
	setp.eq.s32 	%p131, %r350, 0;
	neg.f32 	%f636, %f634;
	add.s32 	%r351, %r348, 1;
	cvt.rzi.f32.f32 	%f641, %f826;
	setp.eq.s32 	%p152, %r372, 0;
	neg.f32 	%f687, %f685;
	add.s32 	%r373, %r370, 1;
	cvt.rzi.f32.f32 	%f692, %f814;
	fma.rn.f32 	%f735, %f733, %f727, 0f3F800000;
	fma.rn.f32 	%f736, %f726, 0f40490FDB, %f734;
	setp.eq.b32 	%p171, %r385, 1;
	mul.f32 	%f180, %f86, 0f3C0AF64E;
	mul.f32 	%f214, %f4, 0f3C0AF64E;
	mul.f32 	%f249, %f8, 0f3C0AF64E;
	mul.f32 	%f283, %f13, 0f3C0AF64E;
	mul.f32 	%f318, %f17, 0f3C0AF64E;
	mul.f32 	%f352, %f22, 0f3C0AF64E;
	mul.f32 	%f387, %f26, 0f3C0AF64E;
	mul.f32 	%f420, %f31, 0f3C0AF64E;
	selp.f32 	%f450, %f445, %f449, %p65;
	setp.gt.f32 	%p67, %f454, 0f4B800000;
	add.f32 	%f455, %f453, 0f3F800000;
	selp.f32 	%f483, %f479, %f482, %p72;
	setp.gt.f32 	%p74, %f487, 0f4B800000;
	add.f32 	%f488, %f486, 0f3F800000;
	selp.f32 	%f536, %f531, %f535, %p92;
	setp.gt.f32 	%p94, %f539, 0f4B800000;
	add.f32 	%f540, %f103, 0f3F800000;
	selp.f32 	%f587, %f582, %f586, %p112;
	setp.gt.f32 	%p114, %f591, 0f4B800000;
	add.f32 	%f592, %f590, 0f3F800000;
	selp.f32 	%f635, %f633, %f632, %p130;
	selp.f32 	%f637, %f634, %f636, %p131;
	and.b32  	%r352, %r351, 2;
	setp.eq.f32 	%p133, %f641, %f826;
	mul.f32 	%f642, %f826, 0f00000000;
	selp.f32 	%f686, %f684, %f683, %p151;
	selp.f32 	%f688, %f685, %f687, %p152;
	and.b32  	%r374, %r373, 2;
	setp.eq.f32 	%p154, %f692, %f814;
	mul.f32 	%f693, %f814, 0f00000000;
	selp.f32 	%f737, %f735, %f736, %p171;
	and.b32  	%r386, %r384, 2;
	mul.f32 	%f3, %f180, %f800;
	mul.f32 	%f215, %f214, %f801;
	mul.f32 	%f12, %f249, %f802;
	mul.f32 	%f284, %f283, %f803;
	mul.f32 	%f21, %f318, %f804;
	mul.f32 	%f353, %f352, %f805;
	mul.f32 	%f30, %f387, %f806;
	mul.f32 	%f421, %f420, %f807;
	selp.f32 	%f456, %f455, %f450, %p67;
	selp.f32 	%f489, %f488, %f483, %p74;
	selp.f32 	%f104, %f540, %f536, %p94;
	selp.f32 	%f593, %f592, %f587, %p114;
	setp.eq.s32 	%p132, %r352, 0;
	sub.f32 	%f639, %f174, %f635;
	selp.f32 	%f123, %f642, %f637, %p133;
	abs.f32 	%f643, %f826;
	setp.eq.s32 	%p153, %r374, 0;
	sub.f32 	%f690, %f174, %f686;
	selp.f32 	%f694, %f693, %f688, %p154;
	abs.f32 	%f695, %f814;
	setp.eq.s32 	%p172, %r386, 0;
	neg.f32 	%f739, %f737;
	add.s32 	%r387, %r384, 1;
	cvt.rzi.f32.f32 	%f744, %f830;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.b32 	%r203, %f215;
	mov.b32 	%r202, %f3;
	mov.b32 	%r221, %f284;
	mov.b32 	%r220, %f12;
	mov.b32 	%r239, %f353;
	mov.b32 	%r238, %f21;
	mov.b32 	%r257, %f421;
	mov.b32 	%r256, %f30;
	mov.b32 	%r259, %f456;
	mov.b32 	%r260, %f489;
	mov.b32 	%r262, %f453;
	mov.b32 	%r263, %f486;
	mov.b32 	%r319, %f593;
	mov.b32 	%r318, %f104;
	mov.b32 	%r325, %f590;
	mov.b32 	%r324, %f103;
	selp.f32 	%f640, %f635, %f639, %p132;
	setp.gt.f32 	%p134, %f643, 0f4B800000;
	add.f32 	%f644, %f123, 0f3F800000;
	selp.f32 	%f691, %f686, %f690, %p153;
	setp.gt.f32 	%p155, %f695, 0f4B800000;
	add.f32 	%f696, %f694, 0f3F800000;
	selp.f32 	%f738, %f736, %f735, %p171;
	selp.f32 	%f740, %f737, %f739, %p172;
	and.b32  	%r388, %r387, 2;
	setp.eq.f32 	%p174, %f744, %f830;
	mul.f32 	%f745, %f830, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r201, %r203, %r202;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r219, %r221, %r220;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r237, %r239, %r238;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r255, %r257, %r256;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r258, %r260, %r259;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r261, %r263, %r262;
	// end inline asm
	xor.b32  	%r322, %r325, -2147483648;
	xor.b32  	%r321, %r324, -2147483648;
	selp.f32 	%f124, %f644, %f640, %p134;
	selp.f32 	%f697, %f696, %f691, %p155;
	setp.eq.s32 	%p173, %r388, 0;
	sub.f32 	%f742, %f174, %f738;
	selp.f32 	%f142, %f745, %f740, %p174;
	abs.f32 	%f746, %f830;
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r318;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r320, %r322, %r321;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r323, %r325, %r324;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r326, %r319, %r318;
	// end inline asm
	mov.b32 	%r363, %f697;
	mov.b32 	%r362, %f124;
	mov.b32 	%r366, %f694;
	mov.b32 	%r365, %f123;
	selp.f32 	%f743, %f738, %f742, %p173;
	setp.gt.f32 	%p175, %f746, 0f4B800000;
	add.f32 	%f747, %f142, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r361, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	selp.f32 	%f143, %f747, %f743, %p175;
	add.f32 	%f768, %f818, %f818;
	mov.b32 	%r407, %f768;
	and.b32  	%r408, %r407, -2147483648;
	or.b32  	%r409, %r408, 1056964608;
	mov.b32 	%f769, %r409;
	add.f32 	%f770, %f768, %f769;
	cvt.rzi.f32.f32 	%f771, %f770;
	abs.f32 	%f772, %f768;
	setp.gt.f32 	%p188, %f772, 0f4B000000;
	selp.f32 	%f773, %f768, %f771, %p188;
	cvt.rzi.f32.f32 	%f774, %f768;
	setp.lt.f32 	%p189, %f772, 0f3F000000;
	selp.f32 	%f775, %f774, %f773, %p189;
	cvt.rzi.s32.f32 	%r410, %f775;
	fma.rn.f32 	%f776, %f775, 0fBF000000, %f818;
	mul.f32 	%f777, %f776, %f776;
	fma.rn.f32 	%f778, %f777, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f779, %f777, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f780, %f778, %f777, 0fC0A55DF6;
	fma.rn.f32 	%f781, %f779, %f777, 0f4081E0CF;
	fma.rn.f32 	%f782, %f777, %f776, 0f00000000;
	fma.rn.f32 	%f783, %f781, %f777, 0fC09DE9E6;
	fma.rn.f32 	%f784, %f780, %f782, 0f00000000;
	fma.rn.f32 	%f785, %f783, %f777, 0f3F800000;
	fma.rn.f32 	%f786, %f776, 0f40490FDB, %f784;
	and.b32  	%r411, %r410, 1;
	setp.eq.b32 	%p190, %r411, 1;
	selp.f32 	%f787, %f785, %f786, %p190;
	selp.f32 	%f788, %f786, %f785, %p190;
	and.b32  	%r412, %r410, 2;
	setp.eq.s32 	%p191, %r412, 0;
	neg.f32 	%f789, %f787;
	selp.f32 	%f790, %f787, %f789, %p191;
	add.s32 	%r413, %r410, 1;
	and.b32  	%r414, %r413, 2;
	setp.eq.s32 	%p192, %r414, 0;
	sub.f32 	%f792, %f174, %f788;
	selp.f32 	%f793, %f788, %f792, %p192;
	cvt.rzi.f32.f32 	%f794, %f818;
	setp.eq.f32 	%p193, %f794, %f818;
	mul.f32 	%f795, %f818, 0f00000000;
	selp.f32 	%f796, %f795, %f790, %p193;
	abs.f32 	%f797, %f818;
	setp.gt.f32 	%p194, %f797, 0f4B800000;
	add.f32 	%f798, %f796, 0f3F800000;
	selp.f32 	%f799, %f798, %f793, %p194;
	mov.b32 	%r397, %f799;
	mov.b32 	%r396, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r395, %r397, %r396;
	// end inline asm
	mov.b32 	%r403, %f796;
	xor.b32  	%r400, %r403, -2147483648;
	mov.b32 	%r402, %f142;
	xor.b32  	%r399, %r402, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r398, %r400, %r399;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r401, %r403, %r402;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r404, %r397, %r396;
	// end inline asm
	shl.b32 	%r416, %r1, 5;
	and.b32  	%r417, %r96, 28;
	cvt.u16.u32 	%rs13, %r100;
	mul.hi.u16 	%rs14, %rs13, -21845;
	shr.u16 	%rs15, %rs14, 5;
	mul.lo.s16 	%rs16, %rs15, 48;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 8;
	cvt.u32.u16 	%r418, %rs18;
	and.b32  	%r419, %r416, 224;
	or.b32  	%r50, %r419, %r417;
	or.b32  	%r51, %r50, %r418;
	bfe.s32 	%r420, %r4, 3, 1;
	and.b32  	%r52, %r4, 8;
	shl.b32 	%r421, %r4, 4;
	or.b32  	%r422, %r52, %r421;
	shr.u32 	%r423, %r422, 2;
	and.b32  	%r424, %r423, 30;
	shr.u32 	%r425, %r2, 1;
	and.b32  	%r426, %r3, 32;
	or.b32  	%r427, %r426, %r425;
	or.b32  	%r428, %r427, 8;
	or.b32  	%r429, %r427, 16;
	or.b32  	%r430, %r427, 24;
	and.b32  	%r431, %r4, 18;
	or.b32  	%r432, %r431, %r99;
	or.b32  	%r433, %r432, %r97;
	or.b32  	%r434, %r433, %r102;
	shr.u32 	%r435, %r434, 1;
	mul.lo.s32 	%r436, %r435, 65;
	add.s32 	%r437, %r427, %r436;
	add.s32 	%r438, %r428, %r436;
	add.s32 	%r439, %r429, %r436;
	add.s32 	%r440, %r430, %r436;
	shl.b32 	%r441, %r2, 1;
	or.b32  	%r442, %r107, %r441;
	mul.lo.s32 	%r443, %r442, 65;
	add.s32 	%r444, %r424, %r443;
	mul.wide.u32 	%rd48, %r444, 4;
	mov.u64 	%rd49, shmem;
	add.s64 	%rd5, %rd49, %rd48;
	cvt.u64.u32 	%rd50, %r424;
	cvt.u64.u32 	%rd51, %r443;
	add.s64 	%rd52, %rd51, %rd50;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd6, %rd49, %rd53;
	mad.lo.s32 	%r445, %r160, 786432, -2359296;
	shl.b32 	%r446, %r2, 2;
	or.b32  	%r447, %r108, %r446;
	or.b32  	%r448, %r447, %r100;
	cvt.u16.u32 	%rs19, %r448;
	mul.hi.u16 	%rs20, %rs19, -21845;
	shr.u16 	%rs21, %rs20, 11;
	mul.lo.s16 	%rs22, %rs21, 3072;
	sub.s16 	%rs23, %rs19, %rs22;
	mul.wide.u16 	%r53, %rs23, 256;
	cvt.s64.s32 	%rd7, %r445;
	or.b32  	%r54, %r53, %r50;
	shr.u32 	%r449, %r2, 3;
	mul.lo.s32 	%r450, %r449, 130;
	bfe.s32 	%r451, %r2, 1, 1;
	and.b32  	%r452, %r2, 2;
	setp.eq.s32 	%p196, %r452, 0;
	and.b32  	%r453, %r451, 520;
	shr.u32 	%r454, %r101, 4;
	mul.lo.s32 	%r455, %r454, 65;
	bfe.s32 	%r456, %r2, 2, 1;
	and.b32  	%r457, %r2, 4;
	setp.eq.s32 	%p197, %r457, 0;
	and.b32  	%r458, %r456, 260;
	and.b32  	%r459, %r2, 1;
	neg.s32 	%r460, %r459;
	setp.eq.b32 	%p198, %r459, 1;
	and.b32  	%r461, %r460, 1040;
	add.s32 	%r462, %r461, %r424;
	add.s32 	%r463, %r462, %r450;
	add.s32 	%r464, %r463, %r453;
	add.s32 	%r465, %r464, %r455;
	add.s32 	%r466, %r465, %r458;
	mul.wide.u32 	%rd54, %r466, 4;
	add.s64 	%rd8, %rd49, %rd54;
	selp.b64 	%rd55, 0, 260, %p197;
	cvt.u64.u32 	%rd56, %r455;
	selp.b64 	%rd57, 0, 520, %p196;
	cvt.u64.u32 	%rd58, %r450;
	selp.b64 	%rd59, 1040, 0, %p198;
	add.s64 	%rd60, %rd50, %rd59;
	add.s64 	%rd61, %rd60, %rd58;
	add.s64 	%rd62, %rd61, %rd57;
	add.s64 	%rd63, %rd62, %rd56;
	add.s64 	%rd64, %rd63, %rd55;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd9, %rd49, %rd65;
	cvt.u64.u32 	%rd66, %r463;
	add.s64 	%rd67, %rd66, %rd57;
	add.s64 	%rd68, %rd67, %rd56;
	add.s64 	%rd69, %rd68, %rd55;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd10, %rd49, %rd70;
	add.s32 	%r467, %r466, 2113;
	mul.wide.u32 	%rd71, %r467, 4;
	add.s64 	%rd11, %rd49, %rd71;
	add.s32 	%r468, %r466, 2082;
	mul.wide.u32 	%rd72, %r468, 4;
	add.s64 	%rd12, %rd49, %rd72;
	add.s32 	%r469, %r466, 2114;
	mul.wide.u32 	%rd73, %r469, 4;
	add.s64 	%rd13, %rd49, %rd73;
	add.s32 	%r470, %r466, 4194;
	mul.wide.u32 	%rd74, %r470, 4;
	add.s64 	%rd14, %rd49, %rd74;
	add.s32 	%r471, %r466, 4163;
	mul.wide.u32 	%rd75, %r471, 4;
	add.s64 	%rd15, %rd49, %rd75;
	add.s32 	%r472, %r466, 4195;
	mul.wide.u32 	%rd76, %r472, 4;
	add.s64 	%rd16, %rd49, %rd76;
	add.s32 	%r473, %r466, 6275;
	mul.wide.u32 	%rd77, %r473, 4;
	add.s64 	%rd17, %rd49, %rd77;
	add.s32 	%r474, %r466, 6244;
	mul.wide.u32 	%rd78, %r474, 4;
	add.s64 	%rd18, %rd49, %rd78;
	add.s32 	%r475, %r466, 6276;
	mul.wide.u32 	%rd79, %r475, 4;
	add.s64 	%rd19, %rd49, %rd79;
	and.b32  	%r476, %r4, 1;
	neg.s32 	%r477, %r476;
	and.b32  	%r478, %r477, 130;
	mul.lo.s32 	%r479, %r107, 520;
	setp.eq.s32 	%p199, %r103, 0;
	selp.b32 	%r480, 0, 65, %p199;
	bfe.s32 	%r481, %r4, 2, 1;
	and.b32  	%r482, %r481, 260;
	and.b32  	%r483, %r420, 1040;
	or.b32  	%r484, %r427, %r483;
	or.b32  	%r485, %r428, %r483;
	mul.wide.u32 	%rd20, %r440, 4;
	mul.wide.u32 	%rd21, %r439, 4;
	mul.wide.u32 	%rd22, %r438, 4;
	mul.wide.u32 	%rd23, %r437, 4;
	or.b32  	%r486, %r478, %r480;
	or.b32  	%r487, %r486, %r482;
	or.b32  	%r488, %r487, %r483;
	add.s32 	%r489, %r488, %r430;
	add.s32 	%r490, %r489, %r479;
	mul.wide.u32 	%rd24, %r490, 4;
	add.s32 	%r491, %r488, %r429;
	add.s32 	%r492, %r491, %r479;
	mul.wide.u32 	%rd25, %r492, 4;
	add.s32 	%r493, %r487, %r485;
	add.s32 	%r494, %r493, %r479;
	mul.wide.u32 	%rd26, %r494, 4;
	add.s32 	%r495, %r487, %r484;
	add.s32 	%r496, %r495, %r479;
	mul.wide.u32 	%rd27, %r496, 4;
	setp.eq.s32 	%p200, %r52, 0;
	mov.u16 	%rs1199, 25600;
	mov.u16 	%rs1095, 21504;
	mov.u32 	%r7963, %r7942;
	mov.u32 	%r7964, %r7942;
	mov.u32 	%r7965, %r7942;
	mov.u32 	%r7966, %r7942;
	mov.u32 	%r7967, %r7942;
	mov.u32 	%r7968, %r7942;
	mov.u32 	%r7969, %r7942;
	mov.u32 	%r7970, %r7942;
	mov.u32 	%r7971, %r7942;
	mov.u32 	%r7972, %r7942;
	mov.u32 	%r7973, %r7942;
	mov.u32 	%r7974, %r7942;
	mov.u32 	%r7961, %r7942;
	bra.uni 	$L__BB0_80;
$L__BB0_85:                             // %L40173
                                        //   in Loop: Header=BB0_80 Depth=1
	mad.lo.s32 	%r7938, %r138, 786432, %r54;
	cvt.u64.u32 	%rd136, %r7938;
	add.s64 	%rd137, %rd136, %rd7;
	mul.hi.s64 	%rd138, %rd137, 3074457345618258603;
	shr.u64 	%rd139, %rd138, 63;
	shr.s64 	%rd140, %rd138, 26;
	add.s64 	%rd141, %rd140, %rd139;
	setp.lt.s64 	%p228, %rd137, 0;
	mul.lo.s64 	%rd142, %rd141, 402653184;
	setp.ne.s64 	%p229, %rd142, %rd137;
	and.pred  	%p230, %p228, %p229;
	selp.s64 	%rd143, -1, 0, %p230;
	add.s64 	%rd144, %rd141, %rd143;
	mul.lo.s64 	%rd145, %rd144, 4611686018024734720;
	add.s64 	%rd146, %rd145, %rd137;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd148, %rd3, %rd147;
	st.global.v4.u32 	[%rd148], {%r153, %r155, %r154, %r156};
	add.s32 	%r7961, %r7961, 256;
	add.s32 	%r7939, %r7961, %r158;
	setp.lt.s32 	%p231, %r7939, %r159;
	@%p231 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_86;
$L__BB0_80:                             // %L1335
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_81 Depth 2
	shr.u32 	%r68, %r7961, 6;
	or.b32  	%r562, %r7961, %r4;
	and.b32  	%r563, %r562, 32528;
	or.b32  	%r564, %r563, %r97;
	or.b32  	%r565, %r564, %r2;
	add.s32 	%r566, %r565, %r158;
	mad.lo.s32 	%r567, %r566, 12288, %r51;
	mul.hi.s32 	%r568, %r567, 715827883;
	shr.u32 	%r569, %r568, 31;
	shr.s32 	%r570, %r568, 26;
	add.s32 	%r571, %r570, %r569;
	setp.lt.s32 	%p201, %r567, 0;
	mul.lo.s32 	%r572, %r571, 402653184;
	setp.ne.s32 	%p202, %r572, %r567;
	and.pred  	%p203, %p201, %p202;
	selp.s32 	%r573, -1, 0, %p203;
	add.s32 	%r574, %r571, %r573;
	or.b32  	%r575, %r567, 1;
	mad.lo.s32 	%r576, %r574, -402653184, %r575;
	mul.wide.s32 	%rd81, %r576, 4;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.v4.u32 	{%r577, %r578, %r579, %r580}, [%rd82+-4];
	or.b32  	%r581, %r565, 64;
	add.s32 	%r582, %r581, %r158;
	mad.lo.s32 	%r583, %r582, 12288, %r51;
	mul.hi.s32 	%r584, %r583, 715827883;
	shr.u32 	%r585, %r584, 31;
	shr.s32 	%r586, %r584, 26;
	add.s32 	%r587, %r586, %r585;
	setp.lt.s32 	%p204, %r583, 0;
	mul.lo.s32 	%r588, %r587, 402653184;
	setp.ne.s32 	%p205, %r588, %r583;
	and.pred  	%p206, %p204, %p205;
	selp.s32 	%r589, -1, 0, %p206;
	add.s32 	%r590, %r587, %r589;
	or.b32  	%r591, %r583, 1;
	mad.lo.s32 	%r592, %r590, -402653184, %r591;
	mul.wide.s32 	%rd83, %r592, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.v4.u32 	{%r593, %r594, %r595, %r596}, [%rd84+-4];
	or.b32  	%r597, %r565, 128;
	add.s32 	%r598, %r597, %r158;
	mad.lo.s32 	%r599, %r598, 12288, %r51;
	mul.hi.s32 	%r600, %r599, 715827883;
	shr.u32 	%r601, %r600, 31;
	shr.s32 	%r602, %r600, 26;
	add.s32 	%r603, %r602, %r601;
	setp.lt.s32 	%p207, %r599, 0;
	mul.lo.s32 	%r604, %r603, 402653184;
	setp.ne.s32 	%p208, %r604, %r599;
	and.pred  	%p209, %p207, %p208;
	selp.s32 	%r605, -1, 0, %p209;
	add.s32 	%r606, %r603, %r605;
	or.b32  	%r607, %r599, 1;
	mad.lo.s32 	%r608, %r606, -402653184, %r607;
	mul.wide.s32 	%rd85, %r608, 4;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.v4.u32 	{%r609, %r610, %r611, %r612}, [%rd86+-4];
	or.b32  	%r613, %r565, 192;
	add.s32 	%r614, %r613, %r158;
	mad.lo.s32 	%r615, %r614, 12288, %r51;
	mul.hi.s32 	%r616, %r615, 715827883;
	shr.u32 	%r617, %r616, 31;
	shr.s32 	%r618, %r616, 26;
	add.s32 	%r619, %r618, %r617;
	setp.lt.s32 	%p210, %r615, 0;
	mul.lo.s32 	%r620, %r619, 402653184;
	setp.ne.s32 	%p211, %r620, %r615;
	and.pred  	%p212, %p210, %p211;
	selp.s32 	%r621, -1, 0, %p212;
	add.s32 	%r622, %r619, %r621;
	or.b32  	%r623, %r615, 1;
	mad.lo.s32 	%r624, %r622, -402653184, %r623;
	mul.wide.s32 	%rd87, %r624, 4;
	add.s64 	%rd88, %rd2, %rd87;
	ld.global.v4.u32 	{%r625, %r626, %r627, %r628}, [%rd88+-4];
	selp.b32 	%r629, %r579, %r577, %p200;
	shfl.sync.bfly.b32	%r630, %r629, 8, 31, -1;
	selp.b32 	%r498, %r577, %r630, %p200;
	selp.b32 	%r499, %r630, %r579, %p200;
	selp.b32 	%r631, %r580, %r578, %p200;
	shfl.sync.bfly.b32	%r632, %r631, 8, 31, -1;
	selp.b32 	%r506, %r578, %r632, %p200;
	selp.b32 	%r507, %r632, %r580, %p200;
	selp.b32 	%r633, %r595, %r593, %p200;
	shfl.sync.bfly.b32	%r634, %r633, 8, 31, -1;
	selp.b32 	%r514, %r593, %r634, %p200;
	selp.b32 	%r515, %r634, %r595, %p200;
	selp.b32 	%r635, %r596, %r594, %p200;
	shfl.sync.bfly.b32	%r636, %r635, 8, 31, -1;
	selp.b32 	%r522, %r594, %r636, %p200;
	selp.b32 	%r523, %r636, %r596, %p200;
	selp.b32 	%r637, %r611, %r609, %p200;
	shfl.sync.bfly.b32	%r638, %r637, 8, 31, -1;
	selp.b32 	%r530, %r609, %r638, %p200;
	selp.b32 	%r531, %r638, %r611, %p200;
	selp.b32 	%r639, %r612, %r610, %p200;
	shfl.sync.bfly.b32	%r640, %r639, 8, 31, -1;
	selp.b32 	%r538, %r610, %r640, %p200;
	selp.b32 	%r539, %r640, %r612, %p200;
	selp.b32 	%r641, %r627, %r625, %p200;
	shfl.sync.bfly.b32	%r642, %r641, 8, 31, -1;
	selp.b32 	%r546, %r625, %r642, %p200;
	selp.b32 	%r547, %r642, %r627, %p200;
	selp.b32 	%r643, %r628, %r626, %p200;
	shfl.sync.bfly.b32	%r644, %r643, 8, 31, -1;
	selp.b32 	%r554, %r626, %r644, %p200;
	selp.b32 	%r555, %r644, %r628, %p200;
	mov.u32 	%r556, 21520;
	// begin inline asm
	prmt.b32 %r497, %r498, %r499, %r556;
	// end inline asm
	mov.u32 	%r560, 30258;
	// begin inline asm
	prmt.b32 %r501, %r498, %r499, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r505, %r506, %r507, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r509, %r506, %r507, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r513, %r514, %r515, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r517, %r514, %r515, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r521, %r522, %r523, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r522, %r523, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r529, %r530, %r531, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r530, %r531, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r537, %r538, %r539, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r538, %r539, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r545, %r546, %r547, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r549, %r546, %r547, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r553, %r554, %r555, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r557, %r554, %r555, %r560;
	// end inline asm
	st.shared.u32 	[%rd8], %r497;
	st.shared.u32 	[%rd9+128], %r501;
	st.shared.u32 	[%rd9+4], %r505;
	st.shared.u32 	[%rd9+132], %r509;
	st.shared.u32 	[%rd10+8324], %r513;
	st.shared.u32 	[%rd11], %r517;
	st.shared.u32 	[%rd12], %r521;
	st.shared.u32 	[%rd13], %r525;
	st.shared.u32 	[%rd10+16648], %r529;
	st.shared.u32 	[%rd14], %r533;
	st.shared.u32 	[%rd15], %r537;
	st.shared.u32 	[%rd16], %r541;
	st.shared.u32 	[%rd10+24972], %r545;
	st.shared.u32 	[%rd17], %r549;
	st.shared.u32 	[%rd18], %r553;
	st.shared.u32 	[%rd19], %r557;
	bar.sync 	0;
	mov.u32 	%r7962, 256;
	mov.u64 	%rd151, %rd49;
$L__BB0_81:                             // %L11611
                                        //   Parent Loop BB0_80 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd89, %rd151, %rd27;
	ld.shared.u32 	%r7829, [%rd89];
	add.s64 	%rd90, %rd151, %rd26;
	ld.shared.u32 	%r7830, [%rd90];
	add.s64 	%rd91, %rd151, %rd25;
	ld.shared.u32 	%r7831, [%rd91];
	add.s64 	%rd92, %rd151, %rd24;
	ld.shared.u32 	%r7832, [%rd92];
	// begin inline asm
	mov.b32 %r650, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r661, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r649, %r7829, -2004318072;
	mov.u32 	%r648, 983055;
	// begin inline asm
	lop3.b32 %r647, %r648, %r649, %r650, 202;
	// end inline asm
	mov.u16 	%rs28, 18432;
	// begin inline asm
	mov.b32 %r651, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r652, %r650, %r651;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r655, %r647, %r652;
	// end inline asm
	mov.u32 	%r659, 15728880;
	// begin inline asm
	lop3.b32 %r658, %r659, %r649, %r661, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r662, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r663, %r661, %r662;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r666, %r658, %r663;
	// end inline asm
	shr.u32 	%r671, %r649, 8;
	// begin inline asm
	lop3.b32 %r669, %r648, %r671, %r650, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r673, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r674, %r650, %r673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r677, %r669, %r674;
	// end inline asm
	// begin inline asm
	lop3.b32 %r680, %r659, %r671, %r661, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r684, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r685, %r661, %r684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r688, %r680, %r685;
	// end inline asm
	// begin inline asm
	mov.b32 %r696, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r707, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r695, %r7830, -2004318072;
	// begin inline asm
	lop3.b32 %r693, %r648, %r695, %r696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r697, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r698, %r696, %r697;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r701, %r693, %r698;
	// end inline asm
	// begin inline asm
	lop3.b32 %r704, %r659, %r695, %r707, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r708, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r709, %r707, %r708;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r712, %r704, %r709;
	// end inline asm
	shr.u32 	%r717, %r695, 8;
	// begin inline asm
	lop3.b32 %r715, %r648, %r717, %r696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r719, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r720, %r696, %r719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r723, %r715, %r720;
	// end inline asm
	// begin inline asm
	lop3.b32 %r726, %r659, %r717, %r707, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r730, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r731, %r707, %r730;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r734, %r726, %r731;
	// end inline asm
	// begin inline asm
	mov.b32 %r742, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r753, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r741, %r7831, -2004318072;
	// begin inline asm
	lop3.b32 %r739, %r648, %r741, %r742, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r743, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r744, %r742, %r743;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r747, %r739, %r744;
	// end inline asm
	// begin inline asm
	lop3.b32 %r750, %r659, %r741, %r753, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r754, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r755, %r753, %r754;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r758, %r750, %r755;
	// end inline asm
	shr.u32 	%r763, %r741, 8;
	// begin inline asm
	lop3.b32 %r761, %r648, %r763, %r742, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r765, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r766, %r742, %r765;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r769, %r761, %r766;
	// end inline asm
	// begin inline asm
	lop3.b32 %r772, %r659, %r763, %r753, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r776, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r777, %r753, %r776;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r780, %r772, %r777;
	// end inline asm
	// begin inline asm
	mov.b32 %r788, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r799, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r787, %r7832, -2004318072;
	// begin inline asm
	lop3.b32 %r785, %r648, %r787, %r788, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r789, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r790, %r788, %r789;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r793, %r785, %r790;
	// end inline asm
	// begin inline asm
	lop3.b32 %r796, %r659, %r787, %r799, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r800, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r801, %r799, %r800;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r804, %r796, %r801;
	// end inline asm
	shr.u32 	%r809, %r787, 8;
	// begin inline asm
	lop3.b32 %r807, %r648, %r809, %r788, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r811, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r812, %r788, %r811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r815, %r807, %r812;
	// end inline asm
	// begin inline asm
	lop3.b32 %r818, %r659, %r809, %r799, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r822, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r823, %r799, %r822;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r826, %r818, %r823;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r829, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r831, %r829, %r655;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r834, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r836, %r834, %r666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r839, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r841, %r839, %r677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r844, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r846, %r844, %r688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r849, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r851, %r849, %r701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r854, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r856, %r854, %r712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r859, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r861, %r859, %r723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r864, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r866, %r864, %r734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r869, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r871, %r869, %r747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r874, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r876, %r874, %r758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r879, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r881, %r879, %r769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r884, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r886, %r884, %r780;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r889, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r891, %r889, %r793;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r894, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r896, %r894, %r804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r899, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r901, %r899, %r815;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r904, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r906, %r904, %r826;
	// end inline asm
	// begin inline asm
	mov.b32 %r914, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r913, %r7963, -2004318072;
	// begin inline asm
	lop3.b32 %r911, %r648, %r913, %r914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r915, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r916, %r914, %r915;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r919, %r911, %r916;
	// end inline asm
	// begin inline asm
	lop3.b32 %r922, %r659, %r913, %r925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r927, %r925, %r926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r930, %r922, %r927;
	// end inline asm
	shr.u32 	%r935, %r913, 8;
	// begin inline asm
	lop3.b32 %r933, %r648, %r935, %r914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r914, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	// begin inline asm
	lop3.b32 %r944, %r659, %r935, %r925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r949, %r925, %r948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r952, %r944, %r949;
	// end inline asm
	// begin inline asm
	mov.b32 %r960, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r959, %r7964, -2004318072;
	// begin inline asm
	lop3.b32 %r957, %r648, %r959, %r960, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r961, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r962, %r960, %r961;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r965, %r957, %r962;
	// end inline asm
	// begin inline asm
	lop3.b32 %r968, %r659, %r959, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r973, %r971, %r972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r976, %r968, %r973;
	// end inline asm
	shr.u32 	%r981, %r959, 8;
	// begin inline asm
	lop3.b32 %r979, %r648, %r981, %r960, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r960, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r990, %r659, %r981, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r995, %r971, %r994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r998, %r990, %r995;
	// end inline asm
	// begin inline asm
	mov.b32 %r1006, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1005, %r7965, -2004318072;
	// begin inline asm
	lop3.b32 %r1003, %r648, %r1005, %r1006, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1007, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1008, %r1006, %r1007;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1011, %r1003, %r1008;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1014, %r659, %r1005, %r1017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1019, %r1017, %r1018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1022, %r1014, %r1019;
	// end inline asm
	shr.u32 	%r1027, %r1005, 8;
	// begin inline asm
	lop3.b32 %r1025, %r648, %r1027, %r1006, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1030, %r1006, %r1029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1033, %r1025, %r1030;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1036, %r659, %r1027, %r1017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1040, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1041, %r1017, %r1040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1044, %r1036, %r1041;
	// end inline asm
	// begin inline asm
	mov.b32 %r1052, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1063, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1051, %r7966, -2004318072;
	// begin inline asm
	lop3.b32 %r1049, %r648, %r1051, %r1052, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1053, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1054, %r1052, %r1053;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1057, %r1049, %r1054;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1060, %r659, %r1051, %r1063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1064, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1065, %r1063, %r1064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1068, %r1060, %r1065;
	// end inline asm
	shr.u32 	%r1073, %r1051, 8;
	// begin inline asm
	lop3.b32 %r1071, %r648, %r1073, %r1052, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1075, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1076, %r1052, %r1075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1079, %r1071, %r1076;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1082, %r659, %r1073, %r1063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1086, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1087, %r1063, %r1086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1090, %r1082, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1093, %r201, %r919, %r831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r201, %r930, %r836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r201, %r941, %r841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r201, %r952, %r846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r201, %r965, %r851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r201, %r976, %r856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r201, %r987, %r861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r201, %r998, %r866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r201, %r1011, %r871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r201, %r1022, %r876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r201, %r1033, %r881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r201, %r1044, %r886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r201, %r1057, %r891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r201, %r1068, %r896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r201, %r1079, %r901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r201, %r1090, %r906;
	// end inline asm
	// begin inline asm
	mov.b32 %r1162, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1173, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1161, %r7967, -2004318072;
	// begin inline asm
	lop3.b32 %r1159, %r648, %r1161, %r1162, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1163, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1164, %r1162, %r1163;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1167, %r1159, %r1164;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1170, %r659, %r1161, %r1173, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1174, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1175, %r1173, %r1174;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1178, %r1170, %r1175;
	// end inline asm
	shr.u32 	%r1183, %r1161, 8;
	// begin inline asm
	lop3.b32 %r1181, %r648, %r1183, %r1162, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1185, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1186, %r1162, %r1185;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1189, %r1181, %r1186;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1192, %r659, %r1183, %r1173, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1196, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1197, %r1173, %r1196;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1200, %r1192, %r1197;
	// end inline asm
	// begin inline asm
	mov.b32 %r1208, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1219, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1207, %r7968, -2004318072;
	// begin inline asm
	lop3.b32 %r1205, %r648, %r1207, %r1208, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1209, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1210, %r1208, %r1209;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1213, %r1205, %r1210;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1216, %r659, %r1207, %r1219, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1220, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1221, %r1219, %r1220;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1224, %r1216, %r1221;
	// end inline asm
	shr.u32 	%r1229, %r1207, 8;
	// begin inline asm
	lop3.b32 %r1227, %r648, %r1229, %r1208, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1231, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1232, %r1208, %r1231;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1235, %r1227, %r1232;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1238, %r659, %r1229, %r1219, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1242, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1243, %r1219, %r1242;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1246, %r1238, %r1243;
	// end inline asm
	// begin inline asm
	mov.b32 %r1254, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1265, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1253, %r7969, -2004318072;
	// begin inline asm
	lop3.b32 %r1251, %r648, %r1253, %r1254, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1255, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1256, %r1254, %r1255;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1259, %r1251, %r1256;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1262, %r659, %r1253, %r1265, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1266, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1267, %r1265, %r1266;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1270, %r1262, %r1267;
	// end inline asm
	shr.u32 	%r1275, %r1253, 8;
	// begin inline asm
	lop3.b32 %r1273, %r648, %r1275, %r1254, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1277, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1278, %r1254, %r1277;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1281, %r1273, %r1278;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1284, %r659, %r1275, %r1265, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1288, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1289, %r1265, %r1288;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1292, %r1284, %r1289;
	// end inline asm
	// begin inline asm
	mov.b32 %r1300, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1311, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1299, %r7970, -2004318072;
	// begin inline asm
	lop3.b32 %r1297, %r648, %r1299, %r1300, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1301, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1302, %r1300, %r1301;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1305, %r1297, %r1302;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1308, %r659, %r1299, %r1311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1312, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1313, %r1311, %r1312;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1316, %r1308, %r1313;
	// end inline asm
	shr.u32 	%r1321, %r1299, 8;
	// begin inline asm
	lop3.b32 %r1319, %r648, %r1321, %r1300, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1323, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1324, %r1300, %r1323;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1327, %r1319, %r1324;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1330, %r659, %r1321, %r1311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1334, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1335, %r1311, %r1334;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1338, %r1330, %r1335;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1341, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1343, %r1341, %r1167, %r1093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1347, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1349, %r1347, %r1178, %r1097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1353, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r1353, %r1189, %r1101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1359, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1361, %r1359, %r1200, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1365, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1367, %r1365, %r1213, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1371, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r1371, %r1224, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1377, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1379, %r1377, %r1235, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1383, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1385, %r1383, %r1246, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1389, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r1389, %r1259, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r1395, %r1270, %r1129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1403, %r1401, %r1281, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1407, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r1407, %r1292, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1413, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1415, %r1413, %r1305, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1419, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1421, %r1419, %r1316, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1425, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r1425, %r1327, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1431, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r1431, %r1338, %r1153;
	// end inline asm
	// begin inline asm
	mov.b32 %r1442, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1453, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1441, %r7971, -2004318072;
	// begin inline asm
	lop3.b32 %r1439, %r648, %r1441, %r1442, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1443, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1444, %r1442, %r1443;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1447, %r1439, %r1444;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1450, %r659, %r1441, %r1453, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1454, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1455, %r1453, %r1454;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1458, %r1450, %r1455;
	// end inline asm
	shr.u32 	%r1463, %r1441, 8;
	// begin inline asm
	lop3.b32 %r1461, %r648, %r1463, %r1442, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1465, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1466, %r1442, %r1465;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1469, %r1461, %r1466;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1472, %r659, %r1463, %r1453, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1476, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1477, %r1453, %r1476;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1480, %r1472, %r1477;
	// end inline asm
	// begin inline asm
	mov.b32 %r1488, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1499, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1487, %r7972, -2004318072;
	// begin inline asm
	lop3.b32 %r1485, %r648, %r1487, %r1488, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1489, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1490, %r1488, %r1489;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1493, %r1485, %r1490;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1496, %r659, %r1487, %r1499, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1500, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1501, %r1499, %r1500;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1504, %r1496, %r1501;
	// end inline asm
	shr.u32 	%r1509, %r1487, 8;
	// begin inline asm
	lop3.b32 %r1507, %r648, %r1509, %r1488, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1511, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1512, %r1488, %r1511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1515, %r1507, %r1512;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1518, %r659, %r1509, %r1499, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1523, %r1499, %r1522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1526, %r1518, %r1523;
	// end inline asm
	// begin inline asm
	mov.b32 %r1534, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1545, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1533, %r7973, -2004318072;
	// begin inline asm
	lop3.b32 %r1531, %r648, %r1533, %r1534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1535, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1536, %r1534, %r1535;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1539, %r1531, %r1536;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1542, %r659, %r1533, %r1545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1546, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1547, %r1545, %r1546;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1550, %r1542, %r1547;
	// end inline asm
	shr.u32 	%r1555, %r1533, 8;
	// begin inline asm
	lop3.b32 %r1553, %r648, %r1555, %r1534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1557, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1558, %r1534, %r1557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1561, %r1553, %r1558;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1564, %r659, %r1555, %r1545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1568, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1569, %r1545, %r1568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1572, %r1564, %r1569;
	// end inline asm
	// begin inline asm
	mov.b32 %r1580, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1591, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1579, %r7974, -2004318072;
	// begin inline asm
	lop3.b32 %r1577, %r648, %r1579, %r1580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1581, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1582, %r1580, %r1581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1585, %r1577, %r1582;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1588, %r659, %r1579, %r1591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1592, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1593, %r1591, %r1592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1596, %r1588, %r1593;
	// end inline asm
	shr.u32 	%r1601, %r1579, 8;
	// begin inline asm
	lop3.b32 %r1599, %r648, %r1601, %r1580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1603, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1604, %r1580, %r1603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1607, %r1599, %r1604;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1610, %r659, %r1601, %r1591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1614, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1615, %r1591, %r1614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1618, %r1610, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1692, %r237, %r1447, %r1343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r237, %r1458, %r1349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r237, %r1469, %r1355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r237, %r1480, %r1361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r237, %r1493, %r1367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r237, %r1504, %r1373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r237, %r1515, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r237, %r1526, %r1385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r237, %r1539, %r1391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r237, %r1550, %r1397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r237, %r1561, %r1403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r237, %r1572, %r1409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r237, %r1585, %r1415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r237, %r1596, %r1421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r237, %r1607, %r1427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r237, %r1618, %r1433;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1685, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r1685, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r258, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1694, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1696, %r1694, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r258, %r1701, %r1696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1703, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r1703, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r258, %r1710, %r1705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1712, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r1712, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r258, %r1719, %r1714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1721, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1723, %r1721, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r258, %r1728, %r1723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1730, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1732, %r1730, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r258, %r1737, %r1732;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1739, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r1739, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r258, %r1746, %r1741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1748, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r1748, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r258, %r1755, %r1750;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1757, %r261, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r258, %r1689, %r1757;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1764, %r261, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r258, %r1698, %r1764;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1771, %r261, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r258, %r1707, %r1771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r261, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r258, %r1716, %r1778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1785, %r261, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r258, %r1725, %r1785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1792, %r261, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r258, %r1734, %r1792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1799, %r261, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r258, %r1743, %r1799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1806, %r261, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r258, %r1752, %r1806;
	// end inline asm
	mov.u32 	%r1821, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1900, %r1897}, {%r317, %r323, %r320, %r326}, {%r1690, %r1760}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1909, %r1906}, {%r317, %r323, %r320, %r326}, {%r1699, %r1767}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1918, %r1915}, {%r317, %r323, %r320, %r326}, {%r1708, %r1774}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1927, %r1924}, {%r317, %r323, %r320, %r326}, {%r1717, %r1781}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1936, %r1933}, {%r317, %r323, %r320, %r326}, {%r1726, %r1788}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1945, %r1942}, {%r317, %r323, %r320, %r326}, {%r1735, %r1795}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1954, %r1951}, {%r317, %r323, %r320, %r326}, {%r1744, %r1802}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1963, %r1960}, {%r317, %r323, %r320, %r326}, {%r1753, %r1809}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1893, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1895, %r1893, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r361, %r1900, %r1895;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1902, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1904, %r1902, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r361, %r1909, %r1904;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1911, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1913, %r1911, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r361, %r1918, %r1913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1920, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r1920, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r361, %r1927, %r1922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1929, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1931, %r1929, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1934, %r361, %r1936, %r1931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1938, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1940, %r1938, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r361, %r1945, %r1940;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1947, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r1947, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r361, %r1954, %r1949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1956, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1958, %r1956, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r361, %r1963, %r1958;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1965, %r364, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1968, %r361, %r1897, %r1965;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1972, %r364, %r1909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r361, %r1906, %r1972;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1979, %r364, %r1918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1982, %r361, %r1915, %r1979;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1986, %r364, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r361, %r1924, %r1986;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1993, %r364, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r361, %r1933, %r1993;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2000, %r364, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r361, %r1942, %r2000;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2007, %r364, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r361, %r1951, %r2007;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2014, %r364, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2017, %r361, %r1960, %r2014;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2021, %r2022}, {%r395, %r401, %r398, %r404}, {%r1898, %r1968}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2031, %r2032}, {%r395, %r401, %r398, %r404}, {%r1907, %r1975}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2041, %r2042}, {%r395, %r401, %r398, %r404}, {%r1916, %r1982}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2051, %r2052}, {%r395, %r401, %r398, %r404}, {%r1925, %r1989}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2061, %r2062}, {%r395, %r401, %r398, %r404}, {%r1934, %r1996}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2071, %r2072}, {%r395, %r401, %r398, %r404}, {%r1943, %r2003}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2081, %r2082}, {%r395, %r401, %r398, %r404}, {%r1952, %r2010}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2091, %r2092}, {%r395, %r401, %r398, %r404}, {%r1961, %r2017}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2101, %r104, %r2021;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2104, %r104, %r2022;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2107, %r104, %r2031;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r104, %r2032;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2113, %r104, %r2041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r104, %r2042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r104, %r2051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r104, %r2052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r104, %r2061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2128, %r104, %r2062;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r104, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r104, %r2072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2137, %r104, %r2081;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r104, %r2082;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2143, %r104, %r2091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r104, %r2092;
	// end inline asm
	mov.u16 	%rs216, -14592;
	// begin inline asm
	mov.b32 %r2149, {%rs216, %rs216};
	// end inline asm
	mov.u16 	%rs218, 18176;
	// begin inline asm
	mov.b32 %r2150, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2151, %r2101, %r2149;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2154, %r2151, %r2150;
	// end inline asm
	// begin inline asm
	mov.b32 %r2157, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2158, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2159, %r2104, %r2157;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2162, %r2159, %r2158;
	// end inline asm
	// begin inline asm
	mov.b32 %r2165, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2166, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2167, %r2107, %r2165;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2170, %r2167, %r2166;
	// end inline asm
	// begin inline asm
	mov.b32 %r2173, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2174, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2175, %r2110, %r2173;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2178, %r2175, %r2174;
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2183, %r2113, %r2181;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2186, %r2183, %r2182;
	// end inline asm
	// begin inline asm
	mov.b32 %r2189, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2190, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2191, %r2116, %r2189;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2194, %r2191, %r2190;
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2199, %r2119, %r2197;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2202, %r2199, %r2198;
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2207, %r2122, %r2205;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2210, %r2207, %r2206;
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2215, %r2125, %r2213;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2218, %r2215, %r2214;
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2223, %r2128, %r2221;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2226, %r2223, %r2222;
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2231, %r2131, %r2229;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2234, %r2231, %r2230;
	// end inline asm
	// begin inline asm
	mov.b32 %r2237, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2239, %r2134, %r2237;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2242, %r2239, %r2238;
	// end inline asm
	// begin inline asm
	mov.b32 %r2245, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2247, %r2137, %r2245;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2250, %r2247, %r2246;
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2255, %r2140, %r2253;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2258, %r2255, %r2254;
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2263, %r2143, %r2261;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2266, %r2263, %r2262;
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2271, %r2146, %r2269;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2274, %r2271, %r2270;
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2279, %r2280, %r2278;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2282, %r2154, %r2279;
	// end inline asm
	// begin inline asm
	mov.b32 %r2285, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2286, %r2280, %r2285;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2289, %r2162, %r2286;
	// end inline asm
	// begin inline asm
	mov.b32 %r2292, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2293, %r2280, %r2292;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2296, %r2170, %r2293;
	// end inline asm
	// begin inline asm
	mov.b32 %r2299, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2280, %r2299;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2303, %r2178, %r2300;
	// end inline asm
	mov.u32 	%r2309, 25152;
	// begin inline asm
	prmt.b32 %r2306, %r2282, %r2296, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2310, %r2289, %r2303, %r2309;
	// end inline asm
	shl.b32 	%r2317, %r2310, 4;
	mov.u32 	%r2315, 252645135;
	// begin inline asm
	lop3.b32 %r2314, %r2315, %r2306, %r2317, 202;
	// end inline asm
	xor.b32  	%r7833, %r2314, -2004318072;
	// begin inline asm
	mov.b32 %r2321, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2319, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2320, %r2321, %r2319;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2323, %r2186, %r2320;
	// end inline asm
	// begin inline asm
	mov.b32 %r2326, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2327, %r2321, %r2326;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2330, %r2194, %r2327;
	// end inline asm
	// begin inline asm
	mov.b32 %r2333, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2334, %r2321, %r2333;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2337, %r2202, %r2334;
	// end inline asm
	// begin inline asm
	mov.b32 %r2340, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2341, %r2321, %r2340;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2344, %r2210, %r2341;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2347, %r2323, %r2337, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2351, %r2330, %r2344, %r2309;
	// end inline asm
	shl.b32 	%r2358, %r2351, 4;
	// begin inline asm
	lop3.b32 %r2355, %r2315, %r2347, %r2358, 202;
	// end inline asm
	xor.b32  	%r7834, %r2355, -2004318072;
	// begin inline asm
	mov.b32 %r2362, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2360, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2361, %r2362, %r2360;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2364, %r2218, %r2361;
	// end inline asm
	// begin inline asm
	mov.b32 %r2367, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2368, %r2362, %r2367;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2371, %r2226, %r2368;
	// end inline asm
	// begin inline asm
	mov.b32 %r2374, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2362, %r2374;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2378, %r2234, %r2375;
	// end inline asm
	// begin inline asm
	mov.b32 %r2381, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2362, %r2381;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2385, %r2242, %r2382;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2388, %r2364, %r2378, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2392, %r2371, %r2385, %r2309;
	// end inline asm
	shl.b32 	%r2399, %r2392, 4;
	// begin inline asm
	lop3.b32 %r2396, %r2315, %r2388, %r2399, 202;
	// end inline asm
	xor.b32  	%r7835, %r2396, -2004318072;
	// begin inline asm
	mov.b32 %r2403, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2401, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2402, %r2403, %r2401;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2405, %r2250, %r2402;
	// end inline asm
	// begin inline asm
	mov.b32 %r2408, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2409, %r2403, %r2408;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2412, %r2258, %r2409;
	// end inline asm
	// begin inline asm
	mov.b32 %r2415, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2416, %r2403, %r2415;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2419, %r2266, %r2416;
	// end inline asm
	// begin inline asm
	mov.b32 %r2422, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2423, %r2403, %r2422;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2426, %r2274, %r2423;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2429, %r2405, %r2419, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2433, %r2412, %r2426, %r2309;
	// end inline asm
	shl.b32 	%r2440, %r2433, 4;
	// begin inline asm
	lop3.b32 %r2437, %r2315, %r2429, %r2440, 202;
	// end inline asm
	xor.b32  	%r7836, %r2437, -2004318072;
	add.s64 	%rd93, %rd151, %rd23;
	st.shared.u32 	[%rd93], %r7833;
	add.s64 	%rd94, %rd151, %rd22;
	st.shared.u32 	[%rd94], %r7834;
	add.s64 	%rd95, %rd151, %rd21;
	st.shared.u32 	[%rd95], %r7835;
	add.s64 	%rd96, %rd151, %rd20;
	st.shared.u32 	[%rd96], %r7836;
	ld.shared.u32 	%r7963, [%rd89];
	ld.shared.u32 	%r7964, [%rd90];
	ld.shared.u32 	%r7965, [%rd91];
	ld.shared.u32 	%r7966, [%rd92];
	// begin inline asm
	mov.b32 %r2446, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2457, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r2445, %r7963, -2004318072;
	// begin inline asm
	lop3.b32 %r2443, %r648, %r2445, %r2446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2447, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2448, %r2446, %r2447;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2451, %r2443, %r2448;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2454, %r659, %r2445, %r2457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2458, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2459, %r2457, %r2458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2462, %r2454, %r2459;
	// end inline asm
	shr.u32 	%r2467, %r2445, 8;
	// begin inline asm
	lop3.b32 %r2465, %r648, %r2467, %r2446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2469, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2470, %r2446, %r2469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2473, %r2465, %r2470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2476, %r659, %r2467, %r2457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2480, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2481, %r2457, %r2480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2484, %r2476, %r2481;
	// end inline asm
	// begin inline asm
	mov.b32 %r2492, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2503, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r2491, %r7964, -2004318072;
	// begin inline asm
	lop3.b32 %r2489, %r648, %r2491, %r2492, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2493, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2494, %r2492, %r2493;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2497, %r2489, %r2494;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2500, %r659, %r2491, %r2503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2504, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2505, %r2503, %r2504;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2508, %r2500, %r2505;
	// end inline asm
	shr.u32 	%r2513, %r2491, 8;
	// begin inline asm
	lop3.b32 %r2511, %r648, %r2513, %r2492, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2515, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2516, %r2492, %r2515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2519, %r2511, %r2516;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2522, %r659, %r2513, %r2503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2526, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2527, %r2503, %r2526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2530, %r2522, %r2527;
	// end inline asm
	// begin inline asm
	mov.b32 %r2538, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2549, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r2537, %r7965, -2004318072;
	// begin inline asm
	lop3.b32 %r2535, %r648, %r2537, %r2538, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2539, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2540, %r2538, %r2539;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2543, %r2535, %r2540;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2546, %r659, %r2537, %r2549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2550, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2551, %r2549, %r2550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2554, %r2546, %r2551;
	// end inline asm
	shr.u32 	%r2559, %r2537, 8;
	// begin inline asm
	lop3.b32 %r2557, %r648, %r2559, %r2538, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2561, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2562, %r2538, %r2561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2565, %r2557, %r2562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2568, %r659, %r2559, %r2549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2572, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2573, %r2549, %r2572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2576, %r2568, %r2573;
	// end inline asm
	// begin inline asm
	mov.b32 %r2584, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2595, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r2583, %r7966, -2004318072;
	// begin inline asm
	lop3.b32 %r2581, %r648, %r2583, %r2584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2585, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2586, %r2584, %r2585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2589, %r2581, %r2586;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2592, %r659, %r2583, %r2595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2596, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2597, %r2595, %r2596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2600, %r2592, %r2597;
	// end inline asm
	shr.u32 	%r2605, %r2583, 8;
	// begin inline asm
	lop3.b32 %r2603, %r648, %r2605, %r2584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2607, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2608, %r2584, %r2607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2611, %r2603, %r2608;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2614, %r659, %r2605, %r2595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2618, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2619, %r2595, %r2618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2622, %r2614, %r2619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2625, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2627, %r2625, %r2451;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2630, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2632, %r2630, %r2462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2635, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2635, %r2473;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2640, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r2640, %r2484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2645, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2647, %r2645, %r2497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2650, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2652, %r2650, %r2508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2655, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2657, %r2655, %r2519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2660, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2662, %r2660, %r2530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2665, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2665, %r2543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2670, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2554;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2675, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2677, %r2675, %r2565;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2576;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2685, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2687, %r2685, %r2589;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2690, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2692, %r2690, %r2600;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2611;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2622;
	// end inline asm
	// begin inline asm
	mov.b32 %r2710, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2721, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2707, %r648, %r1161, %r2710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2711, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2712, %r2710, %r2711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2715, %r2707, %r2712;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2718, %r659, %r1161, %r2721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2722, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2723, %r2721, %r2722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2726, %r2718, %r2723;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2729, %r648, %r1183, %r2710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2733, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2734, %r2710, %r2733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2737, %r2729, %r2734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2740, %r659, %r1183, %r2721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2744, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2745, %r2721, %r2744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2748, %r2740, %r2745;
	// end inline asm
	// begin inline asm
	mov.b32 %r2756, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2767, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2753, %r648, %r1207, %r2756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2757, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2758, %r2756, %r2757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2761, %r2753, %r2758;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2764, %r659, %r1207, %r2767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2768, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2769, %r2767, %r2768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2772, %r2764, %r2769;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2775, %r648, %r1229, %r2756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2779, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2780, %r2756, %r2779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2783, %r2775, %r2780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2786, %r659, %r1229, %r2767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2790, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2791, %r2767, %r2790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2794, %r2786, %r2791;
	// end inline asm
	// begin inline asm
	mov.b32 %r2802, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2813, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2799, %r648, %r1253, %r2802, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2803, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2804, %r2802, %r2803;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2807, %r2799, %r2804;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2810, %r659, %r1253, %r2813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2814, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2815, %r2813, %r2814;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2818, %r2810, %r2815;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2821, %r648, %r1275, %r2802, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2825, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2826, %r2802, %r2825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2829, %r2821, %r2826;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2832, %r659, %r1275, %r2813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2836, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2837, %r2813, %r2836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2840, %r2832, %r2837;
	// end inline asm
	// begin inline asm
	mov.b32 %r2848, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2859, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2845, %r648, %r1299, %r2848, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2849, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2850, %r2848, %r2849;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2853, %r2845, %r2850;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2856, %r659, %r1299, %r2859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2860, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2861, %r2859, %r2860;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2864, %r2856, %r2861;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2867, %r648, %r1321, %r2848, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2871, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2872, %r2848, %r2871;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2875, %r2867, %r2872;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2878, %r659, %r1321, %r2859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2882, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2883, %r2859, %r2882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2886, %r2878, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r201, %r2715, %r2627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r201, %r2726, %r2632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r201, %r2737, %r2637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r201, %r2748, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r201, %r2761, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r201, %r2772, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r201, %r2783, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r201, %r2794, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r201, %r2807, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r201, %r2818, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r201, %r2829, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r201, %r2840, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r201, %r2853, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r201, %r2864, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r201, %r2875, %r2697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r201, %r2886, %r2702;
	// end inline asm
	// begin inline asm
	mov.b32 %r2958, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2969, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2955, %r648, %r1441, %r2958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2959, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2960, %r2958, %r2959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2963, %r2955, %r2960;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2966, %r659, %r1441, %r2969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2970, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2971, %r2969, %r2970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2974, %r2966, %r2971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2977, %r648, %r1463, %r2958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2981, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2982, %r2958, %r2981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2985, %r2977, %r2982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2988, %r659, %r1463, %r2969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2992, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2993, %r2969, %r2992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2996, %r2988, %r2993;
	// end inline asm
	// begin inline asm
	mov.b32 %r3004, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3015, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3001, %r648, %r1487, %r3004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3005, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3006, %r3004, %r3005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3009, %r3001, %r3006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3012, %r659, %r1487, %r3015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3016, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3017, %r3015, %r3016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3020, %r3012, %r3017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3023, %r648, %r1509, %r3004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3027, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3028, %r3004, %r3027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3031, %r3023, %r3028;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3034, %r659, %r1509, %r3015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3038, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3039, %r3015, %r3038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3042, %r3034, %r3039;
	// end inline asm
	// begin inline asm
	mov.b32 %r3050, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3061, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3047, %r648, %r1533, %r3050, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3051, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3052, %r3050, %r3051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3055, %r3047, %r3052;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3058, %r659, %r1533, %r3061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3062, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3063, %r3061, %r3062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3066, %r3058, %r3063;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3069, %r648, %r1555, %r3050, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3073, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3074, %r3050, %r3073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3077, %r3069, %r3074;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3080, %r659, %r1555, %r3061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3084, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3085, %r3061, %r3084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3088, %r3080, %r3085;
	// end inline asm
	// begin inline asm
	mov.b32 %r3096, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3107, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3093, %r648, %r1579, %r3096, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3097, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3098, %r3096, %r3097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3101, %r3093, %r3098;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3104, %r659, %r1579, %r3107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3108, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3109, %r3107, %r3108;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3112, %r3104, %r3109;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3115, %r648, %r1601, %r3096, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3119, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3120, %r3096, %r3119;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3123, %r3115, %r3120;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3126, %r659, %r1601, %r3107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3130, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3131, %r3107, %r3130;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3134, %r3126, %r3131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3137, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3137, %r2963, %r2889;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3143, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r3143, %r2974, %r2893;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3149, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r3149, %r2985, %r2897;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3155, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3157, %r3155, %r2996, %r2901;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3161, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r3161, %r3009, %r2905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3167, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3169, %r3167, %r3020, %r2909;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3173, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r3173, %r3031, %r2913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3179, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r3179, %r3042, %r2917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3185, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3187, %r3185, %r3055, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3191, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3193, %r3191, %r3066, %r2925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3197, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r3197, %r3077, %r2929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3203, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3205, %r3203, %r3088, %r2933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3209, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r3209, %r3101, %r2937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3215, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3217, %r3215, %r3112, %r2941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3221, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r3221, %r3123, %r2945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3227, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r3227, %r3134, %r2949;
	// end inline asm
	// begin inline asm
	mov.b32 %r3238, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3249, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3235, %r648, %r649, %r3238, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3239, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3240, %r3238, %r3239;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3243, %r3235, %r3240;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3246, %r659, %r649, %r3249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3250, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3251, %r3249, %r3250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3254, %r3246, %r3251;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3257, %r648, %r671, %r3238, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3261, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3262, %r3238, %r3261;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3265, %r3257, %r3262;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3268, %r659, %r671, %r3249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3272, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3273, %r3249, %r3272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3276, %r3268, %r3273;
	// end inline asm
	// begin inline asm
	mov.b32 %r3284, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3295, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3281, %r648, %r695, %r3284, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3285, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3286, %r3284, %r3285;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3289, %r3281, %r3286;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3292, %r659, %r695, %r3295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3296, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3297, %r3295, %r3296;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3300, %r3292, %r3297;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3303, %r648, %r717, %r3284, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3307, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3308, %r3284, %r3307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3311, %r3303, %r3308;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3314, %r659, %r717, %r3295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3318, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3319, %r3295, %r3318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3322, %r3314, %r3319;
	// end inline asm
	// begin inline asm
	mov.b32 %r3330, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3341, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3327, %r648, %r741, %r3330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3331, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3332, %r3330, %r3331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3335, %r3327, %r3332;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3338, %r659, %r741, %r3341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3342, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3343, %r3341, %r3342;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3346, %r3338, %r3343;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3349, %r648, %r763, %r3330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3353, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3354, %r3330, %r3353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3357, %r3349, %r3354;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3360, %r659, %r763, %r3341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3364, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3365, %r3341, %r3364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3368, %r3360, %r3365;
	// end inline asm
	// begin inline asm
	mov.b32 %r3376, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3387, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3373, %r648, %r787, %r3376, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3377, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3378, %r3376, %r3377;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3381, %r3373, %r3378;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3384, %r659, %r787, %r3387, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3388, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3389, %r3387, %r3388;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3392, %r3384, %r3389;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3395, %r648, %r809, %r3376, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3399, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3400, %r3376, %r3399;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3403, %r3395, %r3400;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3406, %r659, %r809, %r3387, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3410, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3411, %r3387, %r3410;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3414, %r3406, %r3411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r237, %r3243, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3485, %r237, %r3254, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r237, %r3265, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r237, %r3276, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r237, %r3289, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r237, %r3300, %r3169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r237, %r3311, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r237, %r3322, %r3181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r237, %r3335, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r237, %r3346, %r3193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3533, %r237, %r3357, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r237, %r3368, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3542, %r237, %r3381, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r237, %r3392, %r3217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3551, %r237, %r3403, %r3223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3548, %r237, %r3414, %r3229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3481, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3483, %r3481, %r3485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3486, %r258, %r3488, %r3483;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3490, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3492, %r3490, %r3494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r258, %r3497, %r3492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3499, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3501, %r3499, %r3503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r258, %r3506, %r3501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3508, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3510, %r3508, %r3512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r258, %r3515, %r3510;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3517, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3519, %r3517, %r3521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r258, %r3524, %r3519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3526, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3528, %r3526, %r3530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r258, %r3533, %r3528;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3535, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3537, %r3535, %r3539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3540, %r258, %r3542, %r3537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3544, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3546, %r3544, %r3548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r258, %r3551, %r3546;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3553, %r261, %r3488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3556, %r258, %r3485, %r3553;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3560, %r261, %r3497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3563, %r258, %r3494, %r3560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3567, %r261, %r3506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3570, %r258, %r3503, %r3567;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3574, %r261, %r3515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3577, %r258, %r3512, %r3574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3581, %r261, %r3524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3584, %r258, %r3521, %r3581;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3588, %r261, %r3533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3591, %r258, %r3530, %r3588;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3595, %r261, %r3542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3598, %r258, %r3539, %r3595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3602, %r261, %r3551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3605, %r258, %r3548, %r3602;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3696, %r3693}, {%r317, %r323, %r320, %r326}, {%r3486, %r3556}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3705, %r3702}, {%r317, %r323, %r320, %r326}, {%r3495, %r3563}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3714, %r3711}, {%r317, %r323, %r320, %r326}, {%r3504, %r3570}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3723, %r3720}, {%r317, %r323, %r320, %r326}, {%r3513, %r3577}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3732, %r3729}, {%r317, %r323, %r320, %r326}, {%r3522, %r3584}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3741, %r3738}, {%r317, %r323, %r320, %r326}, {%r3531, %r3591}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3750, %r3747}, {%r317, %r323, %r320, %r326}, {%r3540, %r3598}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3759, %r3756}, {%r317, %r323, %r320, %r326}, {%r3549, %r3605}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3689, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3691, %r3689, %r3693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3694, %r361, %r3696, %r3691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3698, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3700, %r3698, %r3702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3703, %r361, %r3705, %r3700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3707, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3709, %r3707, %r3711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3712, %r361, %r3714, %r3709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3716, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3718, %r3716, %r3720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3721, %r361, %r3723, %r3718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3725, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3727, %r3725, %r3729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3730, %r361, %r3732, %r3727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3734, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3736, %r3734, %r3738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3739, %r361, %r3741, %r3736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3743, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3745, %r3743, %r3747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3748, %r361, %r3750, %r3745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3752, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3754, %r3752, %r3756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3757, %r361, %r3759, %r3754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3761, %r364, %r3696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3764, %r361, %r3693, %r3761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3768, %r364, %r3705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3771, %r361, %r3702, %r3768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3775, %r364, %r3714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3778, %r361, %r3711, %r3775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3782, %r364, %r3723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3785, %r361, %r3720, %r3782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3789, %r364, %r3732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3792, %r361, %r3729, %r3789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3796, %r364, %r3741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3799, %r361, %r3738, %r3796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3803, %r364, %r3750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3806, %r361, %r3747, %r3803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3810, %r364, %r3759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3813, %r361, %r3756, %r3810;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3817, %r3818}, {%r395, %r401, %r398, %r404}, {%r3694, %r3764}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3827, %r3828}, {%r395, %r401, %r398, %r404}, {%r3703, %r3771}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3837, %r3838}, {%r395, %r401, %r398, %r404}, {%r3712, %r3778}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3847, %r3848}, {%r395, %r401, %r398, %r404}, {%r3721, %r3785}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3857, %r3858}, {%r395, %r401, %r398, %r404}, {%r3730, %r3792}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3867, %r3868}, {%r395, %r401, %r398, %r404}, {%r3739, %r3799}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3877, %r3878}, {%r395, %r401, %r398, %r404}, {%r3748, %r3806}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3887, %r3888}, {%r395, %r401, %r398, %r404}, {%r3757, %r3813}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3897, %r104, %r3817;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3900, %r104, %r3818;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3903, %r104, %r3827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3906, %r104, %r3828;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3909, %r104, %r3837;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3912, %r104, %r3838;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3915, %r104, %r3847;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3918, %r104, %r3848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3921, %r104, %r3857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3924, %r104, %r3858;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3927, %r104, %r3867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3930, %r104, %r3868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3933, %r104, %r3877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3936, %r104, %r3878;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3939, %r104, %r3887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3942, %r104, %r3888;
	// end inline asm
	// begin inline asm
	mov.b32 %r3945, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3946, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3947, %r3897, %r3945;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3950, %r3947, %r3946;
	// end inline asm
	// begin inline asm
	mov.b32 %r3953, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3954, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3955, %r3900, %r3953;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3958, %r3955, %r3954;
	// end inline asm
	// begin inline asm
	mov.b32 %r3961, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3962, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3963, %r3903, %r3961;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3966, %r3963, %r3962;
	// end inline asm
	// begin inline asm
	mov.b32 %r3969, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3970, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3971, %r3906, %r3969;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3974, %r3971, %r3970;
	// end inline asm
	// begin inline asm
	mov.b32 %r3977, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3978, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3979, %r3909, %r3977;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3982, %r3979, %r3978;
	// end inline asm
	// begin inline asm
	mov.b32 %r3985, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3986, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3987, %r3912, %r3985;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3990, %r3987, %r3986;
	// end inline asm
	// begin inline asm
	mov.b32 %r3993, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3994, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3995, %r3915, %r3993;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3998, %r3995, %r3994;
	// end inline asm
	// begin inline asm
	mov.b32 %r4001, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4002, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4003, %r3918, %r4001;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4006, %r4003, %r4002;
	// end inline asm
	// begin inline asm
	mov.b32 %r4009, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4010, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4011, %r3921, %r4009;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4014, %r4011, %r4010;
	// end inline asm
	// begin inline asm
	mov.b32 %r4017, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4018, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4019, %r3924, %r4017;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4022, %r4019, %r4018;
	// end inline asm
	// begin inline asm
	mov.b32 %r4025, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4026, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4027, %r3927, %r4025;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4030, %r4027, %r4026;
	// end inline asm
	// begin inline asm
	mov.b32 %r4033, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4034, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4035, %r3930, %r4033;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4038, %r4035, %r4034;
	// end inline asm
	// begin inline asm
	mov.b32 %r4041, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4042, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4043, %r3933, %r4041;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4046, %r4043, %r4042;
	// end inline asm
	// begin inline asm
	mov.b32 %r4049, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4050, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4051, %r3936, %r4049;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4054, %r4051, %r4050;
	// end inline asm
	// begin inline asm
	mov.b32 %r4057, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4058, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4059, %r3939, %r4057;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4062, %r4059, %r4058;
	// end inline asm
	// begin inline asm
	mov.b32 %r4065, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4066, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4067, %r3942, %r4065;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4070, %r4067, %r4066;
	// end inline asm
	// begin inline asm
	mov.b32 %r4076, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4074, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4075, %r4076, %r4074;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4078, %r3950, %r4075;
	// end inline asm
	// begin inline asm
	mov.b32 %r4081, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4082, %r4076, %r4081;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4085, %r3958, %r4082;
	// end inline asm
	// begin inline asm
	mov.b32 %r4088, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4089, %r4076, %r4088;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4092, %r3966, %r4089;
	// end inline asm
	// begin inline asm
	mov.b32 %r4095, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4096, %r4076, %r4095;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4099, %r3974, %r4096;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4102, %r4078, %r4092, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4106, %r4085, %r4099, %r2309;
	// end inline asm
	shl.b32 	%r4113, %r4106, 4;
	// begin inline asm
	lop3.b32 %r4110, %r2315, %r4102, %r4113, 202;
	// end inline asm
	xor.b32  	%r7837, %r4110, -2004318072;
	// begin inline asm
	mov.b32 %r4117, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4115, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4116, %r4117, %r4115;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4119, %r3982, %r4116;
	// end inline asm
	// begin inline asm
	mov.b32 %r4122, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4123, %r4117, %r4122;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4126, %r3990, %r4123;
	// end inline asm
	// begin inline asm
	mov.b32 %r4129, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4130, %r4117, %r4129;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4133, %r3998, %r4130;
	// end inline asm
	// begin inline asm
	mov.b32 %r4136, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4137, %r4117, %r4136;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4140, %r4006, %r4137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4143, %r4119, %r4133, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4147, %r4126, %r4140, %r2309;
	// end inline asm
	shl.b32 	%r4154, %r4147, 4;
	// begin inline asm
	lop3.b32 %r4151, %r2315, %r4143, %r4154, 202;
	// end inline asm
	xor.b32  	%r7838, %r4151, -2004318072;
	// begin inline asm
	mov.b32 %r4158, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4156, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4157, %r4158, %r4156;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4160, %r4014, %r4157;
	// end inline asm
	// begin inline asm
	mov.b32 %r4163, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4164, %r4158, %r4163;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4167, %r4022, %r4164;
	// end inline asm
	// begin inline asm
	mov.b32 %r4170, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4171, %r4158, %r4170;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4174, %r4030, %r4171;
	// end inline asm
	// begin inline asm
	mov.b32 %r4177, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4178, %r4158, %r4177;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4181, %r4038, %r4178;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4184, %r4160, %r4174, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4188, %r4167, %r4181, %r2309;
	// end inline asm
	shl.b32 	%r4195, %r4188, 4;
	// begin inline asm
	lop3.b32 %r4192, %r2315, %r4184, %r4195, 202;
	// end inline asm
	xor.b32  	%r7839, %r4192, -2004318072;
	// begin inline asm
	mov.b32 %r4199, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4197, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4198, %r4199, %r4197;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4201, %r4046, %r4198;
	// end inline asm
	// begin inline asm
	mov.b32 %r4204, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4205, %r4199, %r4204;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4208, %r4054, %r4205;
	// end inline asm
	// begin inline asm
	mov.b32 %r4211, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4212, %r4199, %r4211;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4215, %r4062, %r4212;
	// end inline asm
	// begin inline asm
	mov.b32 %r4218, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4219, %r4199, %r4218;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4222, %r4070, %r4219;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4225, %r4201, %r4215, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4229, %r4208, %r4222, %r2309;
	// end inline asm
	shl.b32 	%r4236, %r4229, 4;
	// begin inline asm
	lop3.b32 %r4233, %r2315, %r4225, %r4236, 202;
	// end inline asm
	xor.b32  	%r7840, %r4233, -2004318072;
	st.shared.u32 	[%rd93], %r7837;
	st.shared.u32 	[%rd94], %r7838;
	st.shared.u32 	[%rd95], %r7839;
	st.shared.u32 	[%rd96], %r7840;
	ld.shared.u32 	%r7967, [%rd89];
	ld.shared.u32 	%r7968, [%rd90];
	ld.shared.u32 	%r7969, [%rd91];
	ld.shared.u32 	%r7970, [%rd92];
	// begin inline asm
	mov.b32 %r4242, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4253, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r4241, %r7967, -2004318072;
	// begin inline asm
	lop3.b32 %r4239, %r648, %r4241, %r4242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4243, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4244, %r4242, %r4243;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4247, %r4239, %r4244;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4250, %r659, %r4241, %r4253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4254, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4255, %r4253, %r4254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4258, %r4250, %r4255;
	// end inline asm
	shr.u32 	%r4263, %r4241, 8;
	// begin inline asm
	lop3.b32 %r4261, %r648, %r4263, %r4242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4265, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4266, %r4242, %r4265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4269, %r4261, %r4266;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4272, %r659, %r4263, %r4253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4276, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4277, %r4253, %r4276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4280, %r4272, %r4277;
	// end inline asm
	// begin inline asm
	mov.b32 %r4288, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4299, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r4287, %r7968, -2004318072;
	// begin inline asm
	lop3.b32 %r4285, %r648, %r4287, %r4288, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4289, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4290, %r4288, %r4289;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4293, %r4285, %r4290;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4296, %r659, %r4287, %r4299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4300, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4301, %r4299, %r4300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4304, %r4296, %r4301;
	// end inline asm
	shr.u32 	%r4309, %r4287, 8;
	// begin inline asm
	lop3.b32 %r4307, %r648, %r4309, %r4288, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4311, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4312, %r4288, %r4311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4315, %r4307, %r4312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4318, %r659, %r4309, %r4299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4322, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4323, %r4299, %r4322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4326, %r4318, %r4323;
	// end inline asm
	// begin inline asm
	mov.b32 %r4334, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4345, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r4333, %r7969, -2004318072;
	// begin inline asm
	lop3.b32 %r4331, %r648, %r4333, %r4334, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4335, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4336, %r4334, %r4335;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4339, %r4331, %r4336;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4342, %r659, %r4333, %r4345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4346, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4347, %r4345, %r4346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4350, %r4342, %r4347;
	// end inline asm
	shr.u32 	%r4355, %r4333, 8;
	// begin inline asm
	lop3.b32 %r4353, %r648, %r4355, %r4334, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4357, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4358, %r4334, %r4357;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4361, %r4353, %r4358;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4364, %r659, %r4355, %r4345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4368, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4369, %r4345, %r4368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4372, %r4364, %r4369;
	// end inline asm
	// begin inline asm
	mov.b32 %r4380, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4391, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r4379, %r7970, -2004318072;
	// begin inline asm
	lop3.b32 %r4377, %r648, %r4379, %r4380, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4381, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4382, %r4380, %r4381;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4385, %r4377, %r4382;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4388, %r659, %r4379, %r4391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4392, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4393, %r4391, %r4392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4396, %r4388, %r4393;
	// end inline asm
	shr.u32 	%r4401, %r4379, 8;
	// begin inline asm
	lop3.b32 %r4399, %r648, %r4401, %r4380, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4403, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4404, %r4380, %r4403;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4407, %r4399, %r4404;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4410, %r659, %r4401, %r4391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4414, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4415, %r4391, %r4414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4418, %r4410, %r4415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4421, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4423, %r4421, %r4247;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4426, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4428, %r4426, %r4258;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4431, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4433, %r4431, %r4269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4436, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4438, %r4436, %r4280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4441, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4443, %r4441, %r4293;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4446, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4448, %r4446, %r4304;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4451, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4453, %r4451, %r4315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4456, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4458, %r4456, %r4326;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4461, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4463, %r4461, %r4339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4466, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4468, %r4466, %r4350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4471, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4473, %r4471, %r4361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4476, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4478, %r4476, %r4372;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4481, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4483, %r4481, %r4385;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4486, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4488, %r4486, %r4396;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4491, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4493, %r4491, %r4407;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4496, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4498, %r4496, %r4418;
	// end inline asm
	// begin inline asm
	mov.b32 %r4506, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4517, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4503, %r648, %r1441, %r4506, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4507, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4508, %r4506, %r4507;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4511, %r4503, %r4508;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4514, %r659, %r1441, %r4517, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4518, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4519, %r4517, %r4518;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4522, %r4514, %r4519;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4525, %r648, %r1463, %r4506, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4529, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4530, %r4506, %r4529;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4533, %r4525, %r4530;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4536, %r659, %r1463, %r4517, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4540, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4541, %r4517, %r4540;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4544, %r4536, %r4541;
	// end inline asm
	// begin inline asm
	mov.b32 %r4552, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4563, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4549, %r648, %r1487, %r4552, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4553, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4554, %r4552, %r4553;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4557, %r4549, %r4554;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4560, %r659, %r1487, %r4563, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4564, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4565, %r4563, %r4564;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4568, %r4560, %r4565;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4571, %r648, %r1509, %r4552, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4575, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4576, %r4552, %r4575;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4579, %r4571, %r4576;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4582, %r659, %r1509, %r4563, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4586, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4587, %r4563, %r4586;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4590, %r4582, %r4587;
	// end inline asm
	// begin inline asm
	mov.b32 %r4598, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4609, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4595, %r648, %r1533, %r4598, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4599, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4600, %r4598, %r4599;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4603, %r4595, %r4600;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4606, %r659, %r1533, %r4609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4610, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4611, %r4609, %r4610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4614, %r4606, %r4611;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4617, %r648, %r1555, %r4598, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4621, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4622, %r4598, %r4621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4625, %r4617, %r4622;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4628, %r659, %r1555, %r4609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4632, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4633, %r4609, %r4632;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4636, %r4628, %r4633;
	// end inline asm
	// begin inline asm
	mov.b32 %r4644, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4655, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4641, %r648, %r1579, %r4644, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4645, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4646, %r4644, %r4645;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4649, %r4641, %r4646;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4652, %r659, %r1579, %r4655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4656, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4657, %r4655, %r4656;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4660, %r4652, %r4657;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4663, %r648, %r1601, %r4644, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4667, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4668, %r4644, %r4667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4671, %r4663, %r4668;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4674, %r659, %r1601, %r4655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4678, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4679, %r4655, %r4678;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4682, %r4674, %r4679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4685, %r201, %r4511, %r4423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4689, %r201, %r4522, %r4428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4693, %r201, %r4533, %r4433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4697, %r201, %r4544, %r4438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4701, %r201, %r4557, %r4443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4705, %r201, %r4568, %r4448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4709, %r201, %r4579, %r4453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4713, %r201, %r4590, %r4458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4717, %r201, %r4603, %r4463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4721, %r201, %r4614, %r4468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4725, %r201, %r4625, %r4473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4729, %r201, %r4636, %r4478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4733, %r201, %r4649, %r4483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4737, %r201, %r4660, %r4488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4741, %r201, %r4671, %r4493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4745, %r201, %r4682, %r4498;
	// end inline asm
	// begin inline asm
	mov.b32 %r4754, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4765, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4751, %r648, %r649, %r4754, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4755, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4756, %r4754, %r4755;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4759, %r4751, %r4756;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4762, %r659, %r649, %r4765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4766, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4767, %r4765, %r4766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4770, %r4762, %r4767;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4773, %r648, %r671, %r4754, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4777, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4778, %r4754, %r4777;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4781, %r4773, %r4778;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4784, %r659, %r671, %r4765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4788, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4789, %r4765, %r4788;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4792, %r4784, %r4789;
	// end inline asm
	// begin inline asm
	mov.b32 %r4800, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4811, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4797, %r648, %r695, %r4800, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4801, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4802, %r4800, %r4801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4805, %r4797, %r4802;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4808, %r659, %r695, %r4811, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4812, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4813, %r4811, %r4812;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4816, %r4808, %r4813;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4819, %r648, %r717, %r4800, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4823, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4824, %r4800, %r4823;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4827, %r4819, %r4824;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4830, %r659, %r717, %r4811, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4834, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4835, %r4811, %r4834;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4838, %r4830, %r4835;
	// end inline asm
	// begin inline asm
	mov.b32 %r4846, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4857, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4843, %r648, %r741, %r4846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4847, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4848, %r4846, %r4847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4851, %r4843, %r4848;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4854, %r659, %r741, %r4857, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4858, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4859, %r4857, %r4858;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4862, %r4854, %r4859;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4865, %r648, %r763, %r4846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4869, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4870, %r4846, %r4869;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4873, %r4865, %r4870;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4876, %r659, %r763, %r4857, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4880, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4881, %r4857, %r4880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4884, %r4876, %r4881;
	// end inline asm
	// begin inline asm
	mov.b32 %r4892, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4903, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4889, %r648, %r787, %r4892, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4893, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4894, %r4892, %r4893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4897, %r4889, %r4894;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4900, %r659, %r787, %r4903, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4904, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4905, %r4903, %r4904;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4908, %r4900, %r4905;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4911, %r648, %r809, %r4892, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4915, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4916, %r4892, %r4915;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4919, %r4911, %r4916;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4922, %r659, %r809, %r4903, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4926, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4927, %r4903, %r4926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4930, %r4922, %r4927;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4933, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4935, %r4933, %r4759, %r4685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4939, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4941, %r4939, %r4770, %r4689;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4945, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4947, %r4945, %r4781, %r4693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4951, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4953, %r4951, %r4792, %r4697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4957, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4959, %r4957, %r4805, %r4701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4963, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4965, %r4963, %r4816, %r4705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4969, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4971, %r4969, %r4827, %r4709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4975, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4977, %r4975, %r4838, %r4713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4981, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4983, %r4981, %r4851, %r4717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4987, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4989, %r4987, %r4862, %r4721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4993, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4995, %r4993, %r4873, %r4725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4999, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5001, %r4999, %r4884, %r4729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5005, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5007, %r5005, %r4897, %r4733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5011, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5013, %r5011, %r4908, %r4737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5017, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5019, %r5017, %r4919, %r4741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5023, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5025, %r5023, %r4930, %r4745;
	// end inline asm
	// begin inline asm
	mov.b32 %r5034, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5045, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5031, %r648, %r2445, %r5034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5035, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5036, %r5034, %r5035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5039, %r5031, %r5036;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5042, %r659, %r2445, %r5045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5046, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5047, %r5045, %r5046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5050, %r5042, %r5047;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5053, %r648, %r2467, %r5034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5057, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5058, %r5034, %r5057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5061, %r5053, %r5058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5064, %r659, %r2467, %r5045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5068, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5069, %r5045, %r5068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5072, %r5064, %r5069;
	// end inline asm
	// begin inline asm
	mov.b32 %r5080, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5091, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5077, %r648, %r2491, %r5080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5081, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5082, %r5080, %r5081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5085, %r5077, %r5082;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5088, %r659, %r2491, %r5091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5092, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5093, %r5091, %r5092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5096, %r5088, %r5093;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5099, %r648, %r2513, %r5080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5103, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5104, %r5080, %r5103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5107, %r5099, %r5104;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5110, %r659, %r2513, %r5091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5114, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5115, %r5091, %r5114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5118, %r5110, %r5115;
	// end inline asm
	// begin inline asm
	mov.b32 %r5126, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5137, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5123, %r648, %r2537, %r5126, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5127, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5128, %r5126, %r5127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5131, %r5123, %r5128;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5134, %r659, %r2537, %r5137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5138, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5139, %r5137, %r5138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5142, %r5134, %r5139;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5145, %r648, %r2559, %r5126, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5149, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5150, %r5126, %r5149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5153, %r5145, %r5150;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5156, %r659, %r2559, %r5137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5160, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5161, %r5137, %r5160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5164, %r5156, %r5161;
	// end inline asm
	// begin inline asm
	mov.b32 %r5172, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5183, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5169, %r648, %r2583, %r5172, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5173, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5174, %r5172, %r5173;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5177, %r5169, %r5174;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5180, %r659, %r2583, %r5183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5184, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5185, %r5183, %r5184;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5188, %r5180, %r5185;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5191, %r648, %r2605, %r5172, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5195, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5196, %r5172, %r5195;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5199, %r5191, %r5196;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5202, %r659, %r2605, %r5183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5206, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5207, %r5183, %r5206;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5210, %r5202, %r5207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5284, %r237, %r5039, %r4935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5281, %r237, %r5050, %r4941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5293, %r237, %r5061, %r4947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5290, %r237, %r5072, %r4953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5302, %r237, %r5085, %r4959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5299, %r237, %r5096, %r4965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5311, %r237, %r5107, %r4971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5308, %r237, %r5118, %r4977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5320, %r237, %r5131, %r4983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5317, %r237, %r5142, %r4989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5329, %r237, %r5153, %r4995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5326, %r237, %r5164, %r5001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5338, %r237, %r5177, %r5007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5335, %r237, %r5188, %r5013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5347, %r237, %r5199, %r5019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5344, %r237, %r5210, %r5025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5277, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5279, %r5277, %r5281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5282, %r258, %r5284, %r5279;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5286, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5288, %r5286, %r5290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5291, %r258, %r5293, %r5288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5295, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5297, %r5295, %r5299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5300, %r258, %r5302, %r5297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5304, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5306, %r5304, %r5308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5309, %r258, %r5311, %r5306;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5313, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5315, %r5313, %r5317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5318, %r258, %r5320, %r5315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5322, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5324, %r5322, %r5326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5327, %r258, %r5329, %r5324;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5331, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5333, %r5331, %r5335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5336, %r258, %r5338, %r5333;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5340, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5342, %r5340, %r5344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5345, %r258, %r5347, %r5342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5349, %r261, %r5284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5352, %r258, %r5281, %r5349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5356, %r261, %r5293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5359, %r258, %r5290, %r5356;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5363, %r261, %r5302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5366, %r258, %r5299, %r5363;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5370, %r261, %r5311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5373, %r258, %r5308, %r5370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5377, %r261, %r5320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5380, %r258, %r5317, %r5377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5384, %r261, %r5329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5387, %r258, %r5326, %r5384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5391, %r261, %r5338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5394, %r258, %r5335, %r5391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5398, %r261, %r5347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5401, %r258, %r5344, %r5398;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5492, %r5489}, {%r317, %r323, %r320, %r326}, {%r5282, %r5352}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5501, %r5498}, {%r317, %r323, %r320, %r326}, {%r5291, %r5359}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5510, %r5507}, {%r317, %r323, %r320, %r326}, {%r5300, %r5366}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5519, %r5516}, {%r317, %r323, %r320, %r326}, {%r5309, %r5373}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5528, %r5525}, {%r317, %r323, %r320, %r326}, {%r5318, %r5380}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5537, %r5534}, {%r317, %r323, %r320, %r326}, {%r5327, %r5387}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5546, %r5543}, {%r317, %r323, %r320, %r326}, {%r5336, %r5394}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5555, %r5552}, {%r317, %r323, %r320, %r326}, {%r5345, %r5401}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5485, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5487, %r5485, %r5489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5490, %r361, %r5492, %r5487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5494, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5496, %r5494, %r5498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5499, %r361, %r5501, %r5496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5503, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5505, %r5503, %r5507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5508, %r361, %r5510, %r5505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5512, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5514, %r5512, %r5516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5517, %r361, %r5519, %r5514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5521, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5523, %r5521, %r5525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5526, %r361, %r5528, %r5523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5530, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5532, %r5530, %r5534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5535, %r361, %r5537, %r5532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5539, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5541, %r5539, %r5543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5544, %r361, %r5546, %r5541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5548, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5550, %r5548, %r5552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5553, %r361, %r5555, %r5550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5557, %r364, %r5492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5560, %r361, %r5489, %r5557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5564, %r364, %r5501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5567, %r361, %r5498, %r5564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5571, %r364, %r5510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5574, %r361, %r5507, %r5571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5578, %r364, %r5519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5581, %r361, %r5516, %r5578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5585, %r364, %r5528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5588, %r361, %r5525, %r5585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5592, %r364, %r5537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5595, %r361, %r5534, %r5592;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5599, %r364, %r5546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5602, %r361, %r5543, %r5599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5606, %r364, %r5555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5609, %r361, %r5552, %r5606;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5613, %r5614}, {%r395, %r401, %r398, %r404}, {%r5490, %r5560}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5623, %r5624}, {%r395, %r401, %r398, %r404}, {%r5499, %r5567}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5633, %r5634}, {%r395, %r401, %r398, %r404}, {%r5508, %r5574}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5643, %r5644}, {%r395, %r401, %r398, %r404}, {%r5517, %r5581}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5653, %r5654}, {%r395, %r401, %r398, %r404}, {%r5526, %r5588}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5663, %r5664}, {%r395, %r401, %r398, %r404}, {%r5535, %r5595}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5673, %r5674}, {%r395, %r401, %r398, %r404}, {%r5544, %r5602}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5683, %r5684}, {%r395, %r401, %r398, %r404}, {%r5553, %r5609}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5693, %r104, %r5613;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5696, %r104, %r5614;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5699, %r104, %r5623;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5702, %r104, %r5624;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5705, %r104, %r5633;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5708, %r104, %r5634;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5711, %r104, %r5643;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5714, %r104, %r5644;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5717, %r104, %r5653;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5720, %r104, %r5654;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5723, %r104, %r5663;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5726, %r104, %r5664;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5729, %r104, %r5673;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5732, %r104, %r5674;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5735, %r104, %r5683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5738, %r104, %r5684;
	// end inline asm
	// begin inline asm
	mov.b32 %r5741, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5742, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5743, %r5693, %r5741;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5746, %r5743, %r5742;
	// end inline asm
	// begin inline asm
	mov.b32 %r5749, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5750, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5751, %r5696, %r5749;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5754, %r5751, %r5750;
	// end inline asm
	// begin inline asm
	mov.b32 %r5757, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5758, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5759, %r5699, %r5757;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5762, %r5759, %r5758;
	// end inline asm
	// begin inline asm
	mov.b32 %r5765, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5766, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5767, %r5702, %r5765;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5770, %r5767, %r5766;
	// end inline asm
	// begin inline asm
	mov.b32 %r5773, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5774, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5775, %r5705, %r5773;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5778, %r5775, %r5774;
	// end inline asm
	// begin inline asm
	mov.b32 %r5781, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5782, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5783, %r5708, %r5781;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5786, %r5783, %r5782;
	// end inline asm
	// begin inline asm
	mov.b32 %r5789, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5790, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5791, %r5711, %r5789;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5794, %r5791, %r5790;
	// end inline asm
	// begin inline asm
	mov.b32 %r5797, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5798, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5799, %r5714, %r5797;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5802, %r5799, %r5798;
	// end inline asm
	// begin inline asm
	mov.b32 %r5805, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5806, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5807, %r5717, %r5805;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5810, %r5807, %r5806;
	// end inline asm
	// begin inline asm
	mov.b32 %r5813, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5814, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5815, %r5720, %r5813;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5818, %r5815, %r5814;
	// end inline asm
	// begin inline asm
	mov.b32 %r5821, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5822, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5823, %r5723, %r5821;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5826, %r5823, %r5822;
	// end inline asm
	// begin inline asm
	mov.b32 %r5829, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5830, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5831, %r5726, %r5829;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5834, %r5831, %r5830;
	// end inline asm
	// begin inline asm
	mov.b32 %r5837, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5838, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5839, %r5729, %r5837;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5842, %r5839, %r5838;
	// end inline asm
	// begin inline asm
	mov.b32 %r5845, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5846, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5847, %r5732, %r5845;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5850, %r5847, %r5846;
	// end inline asm
	// begin inline asm
	mov.b32 %r5853, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5854, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5855, %r5735, %r5853;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5858, %r5855, %r5854;
	// end inline asm
	// begin inline asm
	mov.b32 %r5861, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5862, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5863, %r5738, %r5861;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5866, %r5863, %r5862;
	// end inline asm
	// begin inline asm
	mov.b32 %r5872, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5870, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5871, %r5872, %r5870;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5874, %r5746, %r5871;
	// end inline asm
	// begin inline asm
	mov.b32 %r5877, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5878, %r5872, %r5877;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5881, %r5754, %r5878;
	// end inline asm
	// begin inline asm
	mov.b32 %r5884, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5885, %r5872, %r5884;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5888, %r5762, %r5885;
	// end inline asm
	// begin inline asm
	mov.b32 %r5891, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5892, %r5872, %r5891;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5895, %r5770, %r5892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5898, %r5874, %r5888, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5902, %r5881, %r5895, %r2309;
	// end inline asm
	shl.b32 	%r5909, %r5902, 4;
	// begin inline asm
	lop3.b32 %r5906, %r2315, %r5898, %r5909, 202;
	// end inline asm
	xor.b32  	%r7841, %r5906, -2004318072;
	// begin inline asm
	mov.b32 %r5913, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5911, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5912, %r5913, %r5911;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5915, %r5778, %r5912;
	// end inline asm
	// begin inline asm
	mov.b32 %r5918, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5919, %r5913, %r5918;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5922, %r5786, %r5919;
	// end inline asm
	// begin inline asm
	mov.b32 %r5925, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5926, %r5913, %r5925;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5929, %r5794, %r5926;
	// end inline asm
	// begin inline asm
	mov.b32 %r5932, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5933, %r5913, %r5932;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5936, %r5802, %r5933;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5939, %r5915, %r5929, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5943, %r5922, %r5936, %r2309;
	// end inline asm
	shl.b32 	%r5950, %r5943, 4;
	// begin inline asm
	lop3.b32 %r5947, %r2315, %r5939, %r5950, 202;
	// end inline asm
	xor.b32  	%r7842, %r5947, -2004318072;
	// begin inline asm
	mov.b32 %r5954, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5952, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5953, %r5954, %r5952;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5956, %r5810, %r5953;
	// end inline asm
	// begin inline asm
	mov.b32 %r5959, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5960, %r5954, %r5959;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5963, %r5818, %r5960;
	// end inline asm
	// begin inline asm
	mov.b32 %r5966, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5967, %r5954, %r5966;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5970, %r5826, %r5967;
	// end inline asm
	// begin inline asm
	mov.b32 %r5973, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5974, %r5954, %r5973;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5977, %r5834, %r5974;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5980, %r5956, %r5970, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5984, %r5963, %r5977, %r2309;
	// end inline asm
	shl.b32 	%r5991, %r5984, 4;
	// begin inline asm
	lop3.b32 %r5988, %r2315, %r5980, %r5991, 202;
	// end inline asm
	xor.b32  	%r7843, %r5988, -2004318072;
	// begin inline asm
	mov.b32 %r5995, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5993, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5994, %r5995, %r5993;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5997, %r5842, %r5994;
	// end inline asm
	// begin inline asm
	mov.b32 %r6000, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6001, %r5995, %r6000;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6004, %r5850, %r6001;
	// end inline asm
	// begin inline asm
	mov.b32 %r6007, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6008, %r5995, %r6007;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6011, %r5858, %r6008;
	// end inline asm
	// begin inline asm
	mov.b32 %r6014, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6015, %r5995, %r6014;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6018, %r5866, %r6015;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6021, %r5997, %r6011, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6025, %r6004, %r6018, %r2309;
	// end inline asm
	shl.b32 	%r6032, %r6025, 4;
	// begin inline asm
	lop3.b32 %r6029, %r2315, %r6021, %r6032, 202;
	// end inline asm
	xor.b32  	%r7844, %r6029, -2004318072;
	st.shared.u32 	[%rd93], %r7841;
	st.shared.u32 	[%rd94], %r7842;
	st.shared.u32 	[%rd95], %r7843;
	st.shared.u32 	[%rd96], %r7844;
	ld.shared.u32 	%r7971, [%rd89];
	ld.shared.u32 	%r7972, [%rd90];
	ld.shared.u32 	%r7973, [%rd91];
	ld.shared.u32 	%r7974, [%rd92];
	// begin inline asm
	mov.b32 %r6038, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6049, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r6037, %r7971, -2004318072;
	// begin inline asm
	lop3.b32 %r6035, %r648, %r6037, %r6038, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6039, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6040, %r6038, %r6039;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6043, %r6035, %r6040;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6046, %r659, %r6037, %r6049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6050, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6051, %r6049, %r6050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6054, %r6046, %r6051;
	// end inline asm
	shr.u32 	%r6059, %r6037, 8;
	// begin inline asm
	lop3.b32 %r6057, %r648, %r6059, %r6038, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6061, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6062, %r6038, %r6061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6065, %r6057, %r6062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6068, %r659, %r6059, %r6049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6072, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6073, %r6049, %r6072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6076, %r6068, %r6073;
	// end inline asm
	// begin inline asm
	mov.b32 %r6084, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6095, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r6083, %r7972, -2004318072;
	// begin inline asm
	lop3.b32 %r6081, %r648, %r6083, %r6084, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6085, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6086, %r6084, %r6085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6089, %r6081, %r6086;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6092, %r659, %r6083, %r6095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6096, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6097, %r6095, %r6096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6100, %r6092, %r6097;
	// end inline asm
	shr.u32 	%r6105, %r6083, 8;
	// begin inline asm
	lop3.b32 %r6103, %r648, %r6105, %r6084, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6107, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6108, %r6084, %r6107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6111, %r6103, %r6108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6114, %r659, %r6105, %r6095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6118, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6119, %r6095, %r6118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6122, %r6114, %r6119;
	// end inline asm
	// begin inline asm
	mov.b32 %r6130, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6141, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r6129, %r7973, -2004318072;
	// begin inline asm
	lop3.b32 %r6127, %r648, %r6129, %r6130, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6131, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6132, %r6130, %r6131;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6135, %r6127, %r6132;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6138, %r659, %r6129, %r6141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6142, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6143, %r6141, %r6142;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6146, %r6138, %r6143;
	// end inline asm
	shr.u32 	%r6151, %r6129, 8;
	// begin inline asm
	lop3.b32 %r6149, %r648, %r6151, %r6130, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6153, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6154, %r6130, %r6153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6157, %r6149, %r6154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6160, %r659, %r6151, %r6141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6164, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6165, %r6141, %r6164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6168, %r6160, %r6165;
	// end inline asm
	// begin inline asm
	mov.b32 %r6176, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6187, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r6175, %r7974, -2004318072;
	// begin inline asm
	lop3.b32 %r6173, %r648, %r6175, %r6176, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6177, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6178, %r6176, %r6177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6181, %r6173, %r6178;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6184, %r659, %r6175, %r6187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6188, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6189, %r6187, %r6188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6192, %r6184, %r6189;
	// end inline asm
	shr.u32 	%r6197, %r6175, 8;
	// begin inline asm
	lop3.b32 %r6195, %r648, %r6197, %r6176, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6199, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6200, %r6176, %r6199;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6203, %r6195, %r6200;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6206, %r659, %r6197, %r6187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6210, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6211, %r6187, %r6210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6214, %r6206, %r6211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6217, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6219, %r6217, %r6043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6222, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6224, %r6222, %r6054;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6227, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6229, %r6227, %r6065;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6232, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6234, %r6232, %r6076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6237, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6239, %r6237, %r6089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6242, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6244, %r6242, %r6100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6247, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6249, %r6247, %r6111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6252, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6254, %r6252, %r6122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6257, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6259, %r6257, %r6135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6262, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6264, %r6262, %r6146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6267, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6269, %r6267, %r6157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6272, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6274, %r6272, %r6168;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6277, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6279, %r6277, %r6181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6282, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6284, %r6282, %r6192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6287, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6289, %r6287, %r6203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6292, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6294, %r6292, %r6214;
	// end inline asm
	// begin inline asm
	mov.b32 %r6302, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6313, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6299, %r648, %r649, %r6302, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6303, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6304, %r6302, %r6303;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6307, %r6299, %r6304;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6310, %r659, %r649, %r6313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6314, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6315, %r6313, %r6314;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6318, %r6310, %r6315;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6321, %r648, %r671, %r6302, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6325, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6326, %r6302, %r6325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6329, %r6321, %r6326;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6332, %r659, %r671, %r6313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6336, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6337, %r6313, %r6336;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6340, %r6332, %r6337;
	// end inline asm
	// begin inline asm
	mov.b32 %r6348, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6359, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6345, %r648, %r695, %r6348, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6349, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6350, %r6348, %r6349;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6353, %r6345, %r6350;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6356, %r659, %r695, %r6359, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6360, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6361, %r6359, %r6360;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6364, %r6356, %r6361;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6367, %r648, %r717, %r6348, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6371, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6372, %r6348, %r6371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6375, %r6367, %r6372;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6378, %r659, %r717, %r6359, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6382, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6383, %r6359, %r6382;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6386, %r6378, %r6383;
	// end inline asm
	// begin inline asm
	mov.b32 %r6394, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6405, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6391, %r648, %r741, %r6394, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6395, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6396, %r6394, %r6395;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6399, %r6391, %r6396;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6402, %r659, %r741, %r6405, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6406, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6407, %r6405, %r6406;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6410, %r6402, %r6407;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6413, %r648, %r763, %r6394, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6417, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6418, %r6394, %r6417;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6421, %r6413, %r6418;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6424, %r659, %r763, %r6405, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6428, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6429, %r6405, %r6428;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6432, %r6424, %r6429;
	// end inline asm
	// begin inline asm
	mov.b32 %r6440, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6451, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6437, %r648, %r787, %r6440, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6441, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6442, %r6440, %r6441;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6445, %r6437, %r6442;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6448, %r659, %r787, %r6451, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6452, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6453, %r6451, %r6452;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6456, %r6448, %r6453;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6459, %r648, %r809, %r6440, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6463, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6464, %r6440, %r6463;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6467, %r6459, %r6464;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6470, %r659, %r809, %r6451, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6474, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6475, %r6451, %r6474;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6478, %r6470, %r6475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6481, %r201, %r6307, %r6219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6485, %r201, %r6318, %r6224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6489, %r201, %r6329, %r6229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6493, %r201, %r6340, %r6234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6497, %r201, %r6353, %r6239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6501, %r201, %r6364, %r6244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6505, %r201, %r6375, %r6249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6509, %r201, %r6386, %r6254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6513, %r201, %r6399, %r6259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6517, %r201, %r6410, %r6264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6521, %r201, %r6421, %r6269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6525, %r201, %r6432, %r6274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6529, %r201, %r6445, %r6279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6533, %r201, %r6456, %r6284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6537, %r201, %r6467, %r6289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6541, %r201, %r6478, %r6294;
	// end inline asm
	// begin inline asm
	mov.b32 %r6550, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6561, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6547, %r648, %r2445, %r6550, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6551, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6552, %r6550, %r6551;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6555, %r6547, %r6552;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6558, %r659, %r2445, %r6561, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6562, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6563, %r6561, %r6562;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6566, %r6558, %r6563;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6569, %r648, %r2467, %r6550, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6573, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6574, %r6550, %r6573;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6577, %r6569, %r6574;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6580, %r659, %r2467, %r6561, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6584, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6585, %r6561, %r6584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6588, %r6580, %r6585;
	// end inline asm
	// begin inline asm
	mov.b32 %r6596, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6607, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6593, %r648, %r2491, %r6596, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6597, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6598, %r6596, %r6597;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6601, %r6593, %r6598;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6604, %r659, %r2491, %r6607, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6608, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6609, %r6607, %r6608;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6612, %r6604, %r6609;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6615, %r648, %r2513, %r6596, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6619, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6620, %r6596, %r6619;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6623, %r6615, %r6620;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6626, %r659, %r2513, %r6607, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6630, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6631, %r6607, %r6630;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6634, %r6626, %r6631;
	// end inline asm
	// begin inline asm
	mov.b32 %r6642, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6653, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6639, %r648, %r2537, %r6642, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6643, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6644, %r6642, %r6643;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6647, %r6639, %r6644;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6650, %r659, %r2537, %r6653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6654, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6655, %r6653, %r6654;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6658, %r6650, %r6655;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6661, %r648, %r2559, %r6642, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6665, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6666, %r6642, %r6665;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6669, %r6661, %r6666;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6672, %r659, %r2559, %r6653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6676, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6677, %r6653, %r6676;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6680, %r6672, %r6677;
	// end inline asm
	// begin inline asm
	mov.b32 %r6688, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6699, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6685, %r648, %r2583, %r6688, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6689, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6690, %r6688, %r6689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6693, %r6685, %r6690;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6696, %r659, %r2583, %r6699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6700, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6701, %r6699, %r6700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6704, %r6696, %r6701;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6707, %r648, %r2605, %r6688, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6711, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6712, %r6688, %r6711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6715, %r6707, %r6712;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6718, %r659, %r2605, %r6699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6722, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6723, %r6699, %r6722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6726, %r6718, %r6723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6729, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6731, %r6729, %r6555, %r6481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6735, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6737, %r6735, %r6566, %r6485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6741, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6743, %r6741, %r6577, %r6489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6747, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6749, %r6747, %r6588, %r6493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6753, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6755, %r6753, %r6601, %r6497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6759, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6761, %r6759, %r6612, %r6501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6765, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6767, %r6765, %r6623, %r6505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6771, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6773, %r6771, %r6634, %r6509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6777, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6779, %r6777, %r6647, %r6513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6783, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6785, %r6783, %r6658, %r6517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6789, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6791, %r6789, %r6669, %r6521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6795, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6797, %r6795, %r6680, %r6525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6801, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6803, %r6801, %r6693, %r6529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6807, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6809, %r6807, %r6704, %r6533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6813, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6815, %r6813, %r6715, %r6537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6819, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6821, %r6819, %r6726, %r6541;
	// end inline asm
	// begin inline asm
	mov.b32 %r6830, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6841, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6827, %r648, %r4241, %r6830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6831, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6832, %r6830, %r6831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6835, %r6827, %r6832;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6838, %r659, %r4241, %r6841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6842, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6843, %r6841, %r6842;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6846, %r6838, %r6843;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6849, %r648, %r4263, %r6830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6853, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6854, %r6830, %r6853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6857, %r6849, %r6854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6860, %r659, %r4263, %r6841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6864, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6865, %r6841, %r6864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6868, %r6860, %r6865;
	// end inline asm
	// begin inline asm
	mov.b32 %r6876, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6887, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6873, %r648, %r4287, %r6876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6877, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6878, %r6876, %r6877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6881, %r6873, %r6878;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6884, %r659, %r4287, %r6887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6888, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6889, %r6887, %r6888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6892, %r6884, %r6889;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6895, %r648, %r4309, %r6876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6899, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6900, %r6876, %r6899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6903, %r6895, %r6900;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6906, %r659, %r4309, %r6887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6910, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6911, %r6887, %r6910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6914, %r6906, %r6911;
	// end inline asm
	// begin inline asm
	mov.b32 %r6922, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6933, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6919, %r648, %r4333, %r6922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6923, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6924, %r6922, %r6923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6927, %r6919, %r6924;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6930, %r659, %r4333, %r6933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6934, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6935, %r6933, %r6934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6938, %r6930, %r6935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6941, %r648, %r4355, %r6922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6945, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6946, %r6922, %r6945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6949, %r6941, %r6946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6952, %r659, %r4355, %r6933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6956, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6957, %r6933, %r6956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6960, %r6952, %r6957;
	// end inline asm
	// begin inline asm
	mov.b32 %r6968, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6979, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6965, %r648, %r4379, %r6968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6969, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6970, %r6968, %r6969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6973, %r6965, %r6970;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6976, %r659, %r4379, %r6979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6980, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6981, %r6979, %r6980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6984, %r6976, %r6981;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6987, %r648, %r4401, %r6968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6991, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6992, %r6968, %r6991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6995, %r6987, %r6992;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6998, %r659, %r4401, %r6979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7002, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7003, %r6979, %r7002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7006, %r6998, %r7003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7080, %r237, %r6835, %r6731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7077, %r237, %r6846, %r6737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7089, %r237, %r6857, %r6743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7086, %r237, %r6868, %r6749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7098, %r237, %r6881, %r6755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7095, %r237, %r6892, %r6761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7107, %r237, %r6903, %r6767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7104, %r237, %r6914, %r6773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7116, %r237, %r6927, %r6779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7113, %r237, %r6938, %r6785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7125, %r237, %r6949, %r6791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7122, %r237, %r6960, %r6797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7134, %r237, %r6973, %r6803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7131, %r237, %r6984, %r6809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7143, %r237, %r6995, %r6815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7140, %r237, %r7006, %r6821;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7073, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7075, %r7073, %r7077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7078, %r258, %r7080, %r7075;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7082, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7084, %r7082, %r7086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7087, %r258, %r7089, %r7084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7091, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7093, %r7091, %r7095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7096, %r258, %r7098, %r7093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7100, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7102, %r7100, %r7104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7105, %r258, %r7107, %r7102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7109, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7111, %r7109, %r7113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7114, %r258, %r7116, %r7111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7118, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7120, %r7118, %r7122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7123, %r258, %r7125, %r7120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7127, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7129, %r7127, %r7131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7132, %r258, %r7134, %r7129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7136, %r261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7138, %r7136, %r7140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7141, %r258, %r7143, %r7138;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7145, %r261, %r7080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7148, %r258, %r7077, %r7145;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7152, %r261, %r7089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7155, %r258, %r7086, %r7152;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7159, %r261, %r7098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7162, %r258, %r7095, %r7159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7166, %r261, %r7107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7169, %r258, %r7104, %r7166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7173, %r261, %r7116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7176, %r258, %r7113, %r7173;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7180, %r261, %r7125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7183, %r258, %r7122, %r7180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7187, %r261, %r7134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7190, %r258, %r7131, %r7187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7194, %r261, %r7143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7197, %r258, %r7140, %r7194;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7288, %r7285}, {%r317, %r323, %r320, %r326}, {%r7078, %r7148}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7297, %r7294}, {%r317, %r323, %r320, %r326}, {%r7087, %r7155}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7306, %r7303}, {%r317, %r323, %r320, %r326}, {%r7096, %r7162}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7315, %r7312}, {%r317, %r323, %r320, %r326}, {%r7105, %r7169}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7324, %r7321}, {%r317, %r323, %r320, %r326}, {%r7114, %r7176}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7333, %r7330}, {%r317, %r323, %r320, %r326}, {%r7123, %r7183}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7342, %r7339}, {%r317, %r323, %r320, %r326}, {%r7132, %r7190}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7351, %r7348}, {%r317, %r323, %r320, %r326}, {%r7141, %r7197}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7281, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7283, %r7281, %r7285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7286, %r361, %r7288, %r7283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7290, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7292, %r7290, %r7294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7295, %r361, %r7297, %r7292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7299, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7301, %r7299, %r7303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7304, %r361, %r7306, %r7301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7308, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7310, %r7308, %r7312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7313, %r361, %r7315, %r7310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7317, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7319, %r7317, %r7321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7322, %r361, %r7324, %r7319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7326, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7328, %r7326, %r7330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7331, %r361, %r7333, %r7328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7335, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7337, %r7335, %r7339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7340, %r361, %r7342, %r7337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7344, %r364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7346, %r7344, %r7348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7349, %r361, %r7351, %r7346;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7353, %r364, %r7288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7356, %r361, %r7285, %r7353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7360, %r364, %r7297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7363, %r361, %r7294, %r7360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7367, %r364, %r7306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7370, %r361, %r7303, %r7367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7374, %r364, %r7315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7377, %r361, %r7312, %r7374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7381, %r364, %r7324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7384, %r361, %r7321, %r7381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7388, %r364, %r7333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7391, %r361, %r7330, %r7388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7395, %r364, %r7342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7398, %r361, %r7339, %r7395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7402, %r364, %r7351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7405, %r361, %r7348, %r7402;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7409, %r7410}, {%r395, %r401, %r398, %r404}, {%r7286, %r7356}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7419, %r7420}, {%r395, %r401, %r398, %r404}, {%r7295, %r7363}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7429, %r7430}, {%r395, %r401, %r398, %r404}, {%r7304, %r7370}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7439, %r7440}, {%r395, %r401, %r398, %r404}, {%r7313, %r7377}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7449, %r7450}, {%r395, %r401, %r398, %r404}, {%r7322, %r7384}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7459, %r7460}, {%r395, %r401, %r398, %r404}, {%r7331, %r7391}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7469, %r7470}, {%r395, %r401, %r398, %r404}, {%r7340, %r7398}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7479, %r7480}, {%r395, %r401, %r398, %r404}, {%r7349, %r7405}, {%r1821, %r1821};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7489, %r104, %r7409;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7492, %r104, %r7410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7495, %r104, %r7419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7498, %r104, %r7420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7501, %r104, %r7429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7504, %r104, %r7430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7507, %r104, %r7439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7510, %r104, %r7440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7513, %r104, %r7449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7516, %r104, %r7450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7519, %r104, %r7459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7522, %r104, %r7460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7525, %r104, %r7469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7528, %r104, %r7470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7531, %r104, %r7479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7534, %r104, %r7480;
	// end inline asm
	// begin inline asm
	mov.b32 %r7537, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7538, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7539, %r7489, %r7537;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7542, %r7539, %r7538;
	// end inline asm
	// begin inline asm
	mov.b32 %r7545, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7546, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7547, %r7492, %r7545;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7550, %r7547, %r7546;
	// end inline asm
	// begin inline asm
	mov.b32 %r7553, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7554, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7555, %r7495, %r7553;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7558, %r7555, %r7554;
	// end inline asm
	// begin inline asm
	mov.b32 %r7561, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7562, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7563, %r7498, %r7561;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7566, %r7563, %r7562;
	// end inline asm
	// begin inline asm
	mov.b32 %r7569, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7570, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7571, %r7501, %r7569;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7574, %r7571, %r7570;
	// end inline asm
	// begin inline asm
	mov.b32 %r7577, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7578, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7579, %r7504, %r7577;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7582, %r7579, %r7578;
	// end inline asm
	// begin inline asm
	mov.b32 %r7585, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7586, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7587, %r7507, %r7585;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7590, %r7587, %r7586;
	// end inline asm
	// begin inline asm
	mov.b32 %r7593, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7594, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7595, %r7510, %r7593;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7598, %r7595, %r7594;
	// end inline asm
	// begin inline asm
	mov.b32 %r7601, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7602, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7603, %r7513, %r7601;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7606, %r7603, %r7602;
	// end inline asm
	// begin inline asm
	mov.b32 %r7609, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7610, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7611, %r7516, %r7609;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7614, %r7611, %r7610;
	// end inline asm
	// begin inline asm
	mov.b32 %r7617, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7618, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7619, %r7519, %r7617;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7622, %r7619, %r7618;
	// end inline asm
	// begin inline asm
	mov.b32 %r7625, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7626, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7627, %r7522, %r7625;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7630, %r7627, %r7626;
	// end inline asm
	// begin inline asm
	mov.b32 %r7633, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7634, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7635, %r7525, %r7633;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7638, %r7635, %r7634;
	// end inline asm
	// begin inline asm
	mov.b32 %r7641, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7642, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7643, %r7528, %r7641;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7646, %r7643, %r7642;
	// end inline asm
	// begin inline asm
	mov.b32 %r7649, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7650, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7651, %r7531, %r7649;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7654, %r7651, %r7650;
	// end inline asm
	// begin inline asm
	mov.b32 %r7657, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7658, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7659, %r7534, %r7657;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7662, %r7659, %r7658;
	// end inline asm
	// begin inline asm
	mov.b32 %r7668, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r7666, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7667, %r7668, %r7666;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7670, %r7542, %r7667;
	// end inline asm
	// begin inline asm
	mov.b32 %r7673, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7674, %r7668, %r7673;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7677, %r7550, %r7674;
	// end inline asm
	// begin inline asm
	mov.b32 %r7680, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7681, %r7668, %r7680;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7684, %r7558, %r7681;
	// end inline asm
	// begin inline asm
	mov.b32 %r7687, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7688, %r7668, %r7687;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7691, %r7566, %r7688;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7694, %r7670, %r7684, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7698, %r7677, %r7691, %r2309;
	// end inline asm
	shl.b32 	%r7705, %r7698, 4;
	// begin inline asm
	lop3.b32 %r7702, %r2315, %r7694, %r7705, 202;
	// end inline asm
	xor.b32  	%r7845, %r7702, -2004318072;
	// begin inline asm
	mov.b32 %r7709, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r7707, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7708, %r7709, %r7707;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7711, %r7574, %r7708;
	// end inline asm
	// begin inline asm
	mov.b32 %r7714, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7715, %r7709, %r7714;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7718, %r7582, %r7715;
	// end inline asm
	// begin inline asm
	mov.b32 %r7721, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7722, %r7709, %r7721;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7725, %r7590, %r7722;
	// end inline asm
	// begin inline asm
	mov.b32 %r7728, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7729, %r7709, %r7728;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7732, %r7598, %r7729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7735, %r7711, %r7725, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7739, %r7718, %r7732, %r2309;
	// end inline asm
	shl.b32 	%r7746, %r7739, 4;
	// begin inline asm
	lop3.b32 %r7743, %r2315, %r7735, %r7746, 202;
	// end inline asm
	xor.b32  	%r7846, %r7743, -2004318072;
	// begin inline asm
	mov.b32 %r7750, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r7748, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7749, %r7750, %r7748;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7752, %r7606, %r7749;
	// end inline asm
	// begin inline asm
	mov.b32 %r7755, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7756, %r7750, %r7755;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7759, %r7614, %r7756;
	// end inline asm
	// begin inline asm
	mov.b32 %r7762, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7763, %r7750, %r7762;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7766, %r7622, %r7763;
	// end inline asm
	// begin inline asm
	mov.b32 %r7769, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7770, %r7750, %r7769;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7773, %r7630, %r7770;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7776, %r7752, %r7766, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7780, %r7759, %r7773, %r2309;
	// end inline asm
	shl.b32 	%r7787, %r7780, 4;
	// begin inline asm
	lop3.b32 %r7784, %r2315, %r7776, %r7787, 202;
	// end inline asm
	xor.b32  	%r7847, %r7784, -2004318072;
	// begin inline asm
	mov.b32 %r7791, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r7789, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7790, %r7791, %r7789;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7793, %r7638, %r7790;
	// end inline asm
	// begin inline asm
	mov.b32 %r7796, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7797, %r7791, %r7796;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7800, %r7646, %r7797;
	// end inline asm
	// begin inline asm
	mov.b32 %r7803, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7804, %r7791, %r7803;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7807, %r7654, %r7804;
	// end inline asm
	// begin inline asm
	mov.b32 %r7810, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7811, %r7791, %r7810;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7814, %r7662, %r7811;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7817, %r7793, %r7807, %r2309;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7821, %r7800, %r7814, %r2309;
	// end inline asm
	shl.b32 	%r7828, %r7821, 4;
	// begin inline asm
	lop3.b32 %r7825, %r2315, %r7817, %r7828, 202;
	// end inline asm
	xor.b32  	%r7848, %r7825, -2004318072;
	st.shared.u32 	[%rd93], %r7845;
	st.shared.u32 	[%rd94], %r7846;
	st.shared.u32 	[%rd95], %r7847;
	st.shared.u32 	[%rd96], %r7848;
	add.s32 	%r7962, %r7962, -64;
	add.s64 	%rd151, %rd151, 8324;
	setp.eq.s32 	%p213, %r7962, 0;
	@%p213 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_81;
$L__BB0_82:                             // %guard_exit17308
                                        //   in Loop: Header=BB0_80 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7854, [%rd5];
	ld.shared.u32 	%r7855, [%rd6+128];
	ld.shared.u32 	%r7862, [%rd6+4];
	ld.shared.u32 	%r7863, [%rd6+132];
	ld.shared.u32 	%r7870, [%rd5+8324];
	ld.shared.u32 	%r7871, [%rd6+8452];
	ld.shared.u32 	%r7878, [%rd6+8328];
	ld.shared.u32 	%r7879, [%rd6+8456];
	ld.shared.u32 	%r7886, [%rd5+16648];
	ld.shared.u32 	%r7887, [%rd6+16776];
	ld.shared.u32 	%r7894, [%rd6+16652];
	ld.shared.u32 	%r7895, [%rd6+16780];
	ld.shared.u32 	%r7902, [%rd5+24972];
	ld.shared.u32 	%r7903, [%rd6+25100];
	ld.shared.u32 	%r7910, [%rd6+24976];
	ld.shared.u32 	%r7911, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7849, %r7854, %r7855, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7853, %r7854, %r7855, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7857, %r7862, %r7863, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7861, %r7862, %r7863, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7865, %r7870, %r7871, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7869, %r7870, %r7871, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7873, %r7878, %r7879, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7877, %r7878, %r7879, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7881, %r7886, %r7887, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7885, %r7886, %r7887, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7889, %r7894, %r7895, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7893, %r7894, %r7895, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7897, %r7902, %r7903, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7901, %r7902, %r7903, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7905, %r7910, %r7911, %r556;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7909, %r7910, %r7911, %r560;
	// end inline asm
	selp.b32 	%r7913, %r7853, %r7849, %p200;
	shfl.sync.bfly.b32	%r143, %r7913, 8, 31, -1;
	selp.b32 	%r7914, %r7861, %r7857, %p200;
	shfl.sync.bfly.b32	%r144, %r7914, 8, 31, -1;
	selp.b32 	%r7915, %r7869, %r7865, %p200;
	shfl.sync.bfly.b32	%r7916, %r7915, 8, 31, -1;
	selp.b32 	%r7917, %r7877, %r7873, %p200;
	shfl.sync.bfly.b32	%r7918, %r7917, 8, 31, -1;
	selp.b32 	%r7919, %r7885, %r7881, %p200;
	shfl.sync.bfly.b32	%r7920, %r7919, 8, 31, -1;
	selp.b32 	%r7921, %r7893, %r7889, %p200;
	shfl.sync.bfly.b32	%r7922, %r7921, 8, 31, -1;
	selp.b32 	%r7923, %r7901, %r7897, %p200;
	shfl.sync.bfly.b32	%r7924, %r7923, 8, 31, -1;
	selp.b32 	%r7925, %r7909, %r7905, %p200;
	shfl.sync.bfly.b32	%r7926, %r7925, 8, 31, -1;
	setp.eq.s32 	%p215, %r7961, 0;
	@%p215 bra 	$L__BB0_83;
// %bb.119:                             // %pass16459
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r7927, %r144, %r7861, %p200;
	selp.b32 	%r7928, %r7857, %r144, %p200;
	selp.b32 	%r7929, %r143, %r7853, %p200;
	selp.b32 	%r7930, %r7849, %r143, %p200;
	mul.lo.s32 	%r7931, %r68, 786432;
	or.b32  	%r7932, %r7931, %r50;
	or.b32  	%r7933, %r7932, %r53;
	cvt.u64.u32 	%rd97, %r7933;
	add.s64 	%rd98, %rd97, %rd7;
	mul.hi.s64 	%rd99, %rd98, 3074457345618258603;
	shr.u64 	%rd100, %rd99, 63;
	shr.s64 	%rd101, %rd99, 26;
	add.s64 	%rd102, %rd101, %rd100;
	setp.lt.s64 	%p217, %rd98, 0;
	mul.lo.s64 	%rd103, %rd102, 402653184;
	setp.ne.s64 	%p218, %rd103, %rd98;
	and.pred  	%p219, %p217, %p218;
	selp.s64 	%rd104, -1, 0, %p219;
	add.s64 	%rd105, %rd102, %rd104;
	mul.lo.s64 	%rd106, %rd105, 4611686018024734720;
	add.s64 	%rd107, %rd106, %rd98;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd109, %rd3, %rd108;
	st.global.v4.u32 	[%rd109], {%r7930, %r7928, %r7929, %r7927};
$L__BB0_83:                             // %L39737
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r7934, %r7961, 64;
	setp.gt.u32 	%p220, %r7934, 191;
	@%p220 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_84;
$L__BB0_117:                            // %pass16566
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r136, %r68, 1;
	selp.b32 	%r145, %r7865, %r7916, %p200;
	selp.b32 	%r146, %r7916, %r7869, %p200;
	selp.b32 	%r147, %r7873, %r7918, %p200;
	selp.b32 	%r148, %r7918, %r7877, %p200;
	mad.lo.s32 	%r7935, %r136, 786432, %r54;
	cvt.u64.u32 	%rd110, %r7935;
	add.s64 	%rd111, %rd110, %rd7;
	mul.hi.s64 	%rd112, %rd111, 3074457345618258603;
	shr.u64 	%rd113, %rd112, 63;
	shr.s64 	%rd114, %rd112, 26;
	add.s64 	%rd115, %rd114, %rd113;
	setp.lt.s64 	%p221, %rd111, 0;
	mul.lo.s64 	%rd116, %rd115, 402653184;
	setp.ne.s64 	%p222, %rd116, %rd111;
	and.pred  	%p223, %p221, %p222;
	selp.s64 	%rd117, -1, 0, %p223;
	add.s64 	%rd118, %rd115, %rd117;
	mul.lo.s64 	%rd119, %rd118, 4611686018024734720;
	add.s64 	%rd120, %rd119, %rd111;
	shl.b64 	%rd121, %rd120, 2;
	add.s64 	%rd122, %rd3, %rd121;
	st.global.v4.u32 	[%rd122], {%r145, %r147, %r146, %r148};
$L__BB0_84:                             // %L39955
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r138, %r68, 3;
	selp.b32 	%r153, %r7897, %r7924, %p200;
	selp.b32 	%r154, %r7924, %r7901, %p200;
	selp.b32 	%r155, %r7905, %r7926, %p200;
	selp.b32 	%r156, %r7926, %r7909, %p200;
	or.b32  	%r7936, %r7961, 128;
	setp.gt.u32 	%p224, %r7936, 191;
	@%p224 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_85;
$L__BB0_118:                            // %pass16673
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r137, %r68, 2;
	selp.b32 	%r149, %r7881, %r7920, %p200;
	selp.b32 	%r150, %r7920, %r7885, %p200;
	selp.b32 	%r151, %r7889, %r7922, %p200;
	selp.b32 	%r152, %r7922, %r7893, %p200;
	mad.lo.s32 	%r7937, %r137, 786432, %r54;
	cvt.u64.u32 	%rd123, %r7937;
	add.s64 	%rd124, %rd123, %rd7;
	mul.hi.s64 	%rd125, %rd124, 3074457345618258603;
	shr.u64 	%rd126, %rd125, 63;
	shr.s64 	%rd127, %rd125, 26;
	add.s64 	%rd128, %rd127, %rd126;
	setp.lt.s64 	%p225, %rd124, 0;
	mul.lo.s64 	%rd129, %rd128, 402653184;
	setp.ne.s64 	%p226, %rd129, %rd124;
	and.pred  	%p227, %p225, %p226;
	selp.s64 	%rd130, -1, 0, %p227;
	add.s64 	%rd131, %rd128, %rd130;
	mul.lo.s64 	%rd132, %rd131, 4611686018024734720;
	add.s64 	%rd133, %rd132, %rd124;
	shl.b64 	%rd134, %rd133, 2;
	add.s64 	%rd135, %rd3, %rd134;
	st.global.v4.u32 	[%rd135], {%r149, %r151, %r150, %r152};
	bra.uni 	$L__BB0_85;
$L__BB0_86:                             // %L40402
	st.global.u32 	[%rd4], %r7942;
	ret;
$L__BB0_7:                              // %L156
	mov.u32 	%r7941, 2;
	st.global.u32 	[%rd4], %r7941;
	mov.u64 	%rd149, exception3405;
	cvta.global.u64 	%rd150, %rd149;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd150;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r157;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd35, exception13425;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r157;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
