// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan64(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2065[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<186>;
	.reg .b16 	%rs<265>;
	.reg .b32 	%r<2545>;
	.reg .f32 	%f<721>;
	.reg .b64 	%rd<148>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r99, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r106, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r106, 33407;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r107, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r107, 33407;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r100, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd4, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r108, %r4, 9;
	or.b32  	%r109, %r3, %r1;
	or.b32  	%r110, %r109, %r108;
	mul.wide.u32 	%rd41, %r110, 4;
	add.s64 	%rd5, %rd4, %rd41;
	mov.u32 	%r111, 1;
	st.global.u32 	[%rd5], %r111;
	setp.gt.u32 	%p3, %r100, 65535;
	@%p3 bra 	$L__BB0_9;
// %bb.5:                               // %L133
	ld.param.u32 	%r101, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r101, %r100;
	setp.gt.s32 	%p5, %r101, 131071;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_9;
// %bb.6:                               // %L140
	ld.param.u32 	%r102, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r112, %r101, %r100;
	and.b32  	%r113, %r112, 255;
	setp.ne.s32 	%p7, %r113, 0;
	setp.gt.u32 	%p8, %r102, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_9;
// %bb.7:                               // %L151
	ld.param.u32 	%r103, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p10, %r103, %r102;
	setp.gt.s32 	%p11, %r103, 2047;
	or.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_9;
// %bb.8:                               // %L158
	not.b32 	%r114, %r102;
	add.s32 	%r115, %r114, %r103;
	and.b32  	%r116, %r115, 3;
	setp.eq.s32 	%p13, %r116, 0;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L273
	ld.param.u32 	%r104, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r104, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.11:                              // %L275
	ld.param.u32 	%r105, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p15, %r104, %r105;
	setp.lt.s32 	%p16, %r105, 17;
	and.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;
$L__BB0_13:                             // %pass191
	bfe.u32 	%r52, %r1, 2, 1;
	shr.u32 	%r53, %r1, 4;
	shl.b32 	%r122, %r53, 1;
	shl.b32 	%r123, %r52, 2;
	shl.b32 	%r54, %r1, 3;
	and.b32  	%r124, %r54, 24;
	or.b32  	%r125, %r123, %r124;
	or.b32  	%r126, %r122, %r125;
	bfe.u32 	%r127, %r1, 3, 1;
	or.b32  	%r56, %r127, %r126;
	shl.b32 	%r57, %r56, 1;
	or.b32  	%r128, %r57, -255;
	cvt.rn.f32.s32 	%f46, %r128;
	mov.f32 	%f47, 0f44008000;
	div.approx.f32 	%f42, %f46, %f47;
	mov.f32 	%f71, 0f00000000;
	mul.f32 	%f44, %f42, 0f40800000;
	setp.neu.f32 	%p23, %f44, 0f00000000;
	mov.f32 	%f720, 0f3F800000;
	mov.f32 	%f713, %f720;
	@%p23 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_15;
$L__BB0_14:                             // %L612
	add.f32 	%f74, %f44, %f44;
	mov.b32 	%r136, %f74;
	and.b32  	%r137, %r136, -2147483648;
	or.b32  	%r138, %r137, 1056964608;
	mov.b32 	%f75, %r138;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p24, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p24;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p25, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p25;
	cvt.rzi.s32.f32 	%r139, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f44;
	mul.f32 	%f83, %f82, %f82;
	fma.rn.f32 	%f84, %f83, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f85, %f83, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f86, %f84, %f83, 0fC0A55DF6;
	fma.rn.f32 	%f87, %f85, %f83, 0f4081E0CF;
	fma.rn.f32 	%f88, %f83, %f82, 0f00000000;
	fma.rn.f32 	%f89, %f87, %f83, 0fC09DE9E6;
	fma.rn.f32 	%f90, %f86, %f88, 0f00000000;
	fma.rn.f32 	%f91, %f89, %f83, 0f3F800000;
	fma.rn.f32 	%f92, %f82, 0f40490FDB, %f90;
	and.b32  	%r140, %r139, 1;
	setp.eq.b32 	%p26, %r140, 1;
	selp.f32 	%f93, %f91, %f92, %p26;
	and.b32  	%r141, %r139, 2;
	setp.eq.s32 	%p27, %r141, 0;
	sub.f32 	%f95, %f71, %f93;
	selp.f32 	%f96, %f93, %f95, %p27;
	cvt.rzi.f32.f32 	%f97, %f44;
	setp.eq.f32 	%p28, %f44, %f97;
	mul.f32 	%f98, %f44, 0f00000000;
	selp.f32 	%f99, %f98, %f96, %p28;
	mul.f32 	%f100, %f42, 0f41490FDB;
	div.approx.f32 	%f713, %f99, %f100;
$L__BB0_15:                             // %L616
	or.b32  	%r142, %r57, -191;
	cvt.rn.f32.s32 	%f104, %r142;
	div.approx.f32 	%f4, %f104, %f47;
	mul.f32 	%f6, %f4, 0f40800000;
	setp.eq.f32 	%p34, %f6, 0f00000000;
	mov.f32 	%f714, %f720;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L630
	add.f32 	%f132, %f6, %f6;
	mov.b32 	%r150, %f132;
	and.b32  	%r151, %r150, -2147483648;
	or.b32  	%r152, %r151, 1056964608;
	mov.b32 	%f133, %r152;
	add.f32 	%f134, %f132, %f133;
	cvt.rzi.f32.f32 	%f135, %f134;
	abs.f32 	%f136, %f132;
	setp.gt.f32 	%p35, %f136, 0f4B000000;
	selp.f32 	%f137, %f132, %f135, %p35;
	cvt.rzi.f32.f32 	%f138, %f132;
	setp.lt.f32 	%p36, %f136, 0f3F000000;
	selp.f32 	%f139, %f138, %f137, %p36;
	cvt.rzi.s32.f32 	%r153, %f139;
	fma.rn.f32 	%f140, %f139, 0fBF000000, %f6;
	mul.f32 	%f141, %f140, %f140;
	fma.rn.f32 	%f142, %f141, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f143, %f141, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f144, %f142, %f141, 0fC0A55DF6;
	fma.rn.f32 	%f145, %f143, %f141, 0f4081E0CF;
	fma.rn.f32 	%f146, %f141, %f140, 0f00000000;
	fma.rn.f32 	%f147, %f145, %f141, 0fC09DE9E6;
	fma.rn.f32 	%f148, %f144, %f146, 0f00000000;
	fma.rn.f32 	%f149, %f147, %f141, 0f3F800000;
	fma.rn.f32 	%f150, %f140, 0f40490FDB, %f148;
	and.b32  	%r154, %r153, 1;
	setp.eq.b32 	%p37, %r154, 1;
	selp.f32 	%f151, %f149, %f150, %p37;
	and.b32  	%r155, %r153, 2;
	setp.eq.s32 	%p38, %r155, 0;
	sub.f32 	%f153, %f71, %f151;
	selp.f32 	%f154, %f151, %f153, %p38;
	cvt.rzi.f32.f32 	%f155, %f6;
	setp.eq.f32 	%p39, %f6, %f155;
	mul.f32 	%f156, %f6, 0f00000000;
	selp.f32 	%f157, %f156, %f154, %p39;
	mul.f32 	%f158, %f4, 0f41490FDB;
	div.approx.f32 	%f714, %f157, %f158;
$L__BB0_17:                             // %L634
	or.b32  	%r159, %r57, -127;
	cvt.rn.f32.s32 	%f163, %r159;
	div.approx.f32 	%f9, %f163, %f47;
	mul.f32 	%f11, %f9, 0f40800000;
	setp.eq.f32 	%p45, %f11, 0f00000000;
	mov.f32 	%f715, %f720;
	@%p45 bra 	$L__BB0_19;
// %bb.18:                              // %L710
	add.f32 	%f191, %f11, %f11;
	mov.b32 	%r167, %f191;
	and.b32  	%r168, %r167, -2147483648;
	or.b32  	%r169, %r168, 1056964608;
	mov.b32 	%f192, %r169;
	add.f32 	%f193, %f191, %f192;
	cvt.rzi.f32.f32 	%f194, %f193;
	abs.f32 	%f195, %f191;
	setp.gt.f32 	%p46, %f195, 0f4B000000;
	selp.f32 	%f196, %f191, %f194, %p46;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p47, %f195, 0f3F000000;
	selp.f32 	%f198, %f197, %f196, %p47;
	cvt.rzi.s32.f32 	%r170, %f198;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f11;
	mul.f32 	%f200, %f199, %f199;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	and.b32  	%r171, %r170, 1;
	setp.eq.b32 	%p48, %r171, 1;
	selp.f32 	%f210, %f208, %f209, %p48;
	and.b32  	%r172, %r170, 2;
	setp.eq.s32 	%p49, %r172, 0;
	sub.f32 	%f212, %f71, %f210;
	selp.f32 	%f213, %f210, %f212, %p49;
	cvt.rzi.f32.f32 	%f214, %f11;
	setp.eq.f32 	%p50, %f11, %f214;
	mul.f32 	%f215, %f11, 0f00000000;
	selp.f32 	%f216, %f215, %f213, %p50;
	mul.f32 	%f217, %f9, 0f41490FDB;
	div.approx.f32 	%f715, %f216, %f217;
$L__BB0_19:                             // %L714
	or.b32  	%r173, %r57, -63;
	cvt.rn.f32.s32 	%f221, %r173;
	div.approx.f32 	%f15, %f221, %f47;
	mul.f32 	%f17, %f15, 0f40800000;
	setp.eq.f32 	%p56, %f17, 0f00000000;
	mov.f32 	%f716, %f720;
	@%p56 bra 	$L__BB0_21;
// %bb.20:                              // %L728
	add.f32 	%f249, %f17, %f17;
	mov.b32 	%r181, %f249;
	and.b32  	%r182, %r181, -2147483648;
	or.b32  	%r183, %r182, 1056964608;
	mov.b32 	%f250, %r183;
	add.f32 	%f251, %f249, %f250;
	cvt.rzi.f32.f32 	%f252, %f251;
	abs.f32 	%f253, %f249;
	setp.gt.f32 	%p57, %f253, 0f4B000000;
	selp.f32 	%f254, %f249, %f252, %p57;
	cvt.rzi.f32.f32 	%f255, %f249;
	setp.lt.f32 	%p58, %f253, 0f3F000000;
	selp.f32 	%f256, %f255, %f254, %p58;
	cvt.rzi.s32.f32 	%r184, %f256;
	fma.rn.f32 	%f257, %f256, 0fBF000000, %f17;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f260, %f258, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f261, %f259, %f258, 0fC0A55DF6;
	fma.rn.f32 	%f262, %f260, %f258, 0f4081E0CF;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f262, %f258, 0fC09DE9E6;
	fma.rn.f32 	%f265, %f261, %f263, 0f00000000;
	fma.rn.f32 	%f266, %f264, %f258, 0f3F800000;
	fma.rn.f32 	%f267, %f257, 0f40490FDB, %f265;
	and.b32  	%r185, %r184, 1;
	setp.eq.b32 	%p59, %r185, 1;
	selp.f32 	%f268, %f266, %f267, %p59;
	and.b32  	%r186, %r184, 2;
	setp.eq.s32 	%p60, %r186, 0;
	sub.f32 	%f270, %f71, %f268;
	selp.f32 	%f271, %f268, %f270, %p60;
	cvt.rzi.f32.f32 	%f272, %f17;
	setp.eq.f32 	%p61, %f17, %f272;
	mul.f32 	%f273, %f17, 0f00000000;
	selp.f32 	%f274, %f273, %f271, %p61;
	mul.f32 	%f275, %f15, 0f41490FDB;
	div.approx.f32 	%f716, %f274, %f275;
$L__BB0_21:                             // %L732
	or.b32  	%r190, %r57, 1;
	cvt.rn.f32.s32 	%f280, %r190;
	div.approx.f32 	%f20, %f280, %f47;
	mul.f32 	%f22, %f20, 0f40800000;
	setp.eq.f32 	%p67, %f22, 0f00000000;
	mov.f32 	%f717, %f720;
	@%p67 bra 	$L__BB0_23;
// %bb.22:                              // %L808
	add.f32 	%f308, %f22, %f22;
	mov.b32 	%r198, %f308;
	and.b32  	%r199, %r198, -2147483648;
	or.b32  	%r200, %r199, 1056964608;
	mov.b32 	%f309, %r200;
	add.f32 	%f310, %f308, %f309;
	cvt.rzi.f32.f32 	%f311, %f310;
	abs.f32 	%f312, %f308;
	setp.gt.f32 	%p68, %f312, 0f4B000000;
	selp.f32 	%f313, %f308, %f311, %p68;
	cvt.rzi.f32.f32 	%f314, %f308;
	setp.lt.f32 	%p69, %f312, 0f3F000000;
	selp.f32 	%f315, %f314, %f313, %p69;
	cvt.rzi.s32.f32 	%r201, %f315;
	fma.rn.f32 	%f316, %f315, 0fBF000000, %f22;
	mul.f32 	%f317, %f316, %f316;
	fma.rn.f32 	%f318, %f317, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f319, %f317, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f320, %f318, %f317, 0fC0A55DF6;
	fma.rn.f32 	%f321, %f319, %f317, 0f4081E0CF;
	fma.rn.f32 	%f322, %f317, %f316, 0f00000000;
	fma.rn.f32 	%f323, %f321, %f317, 0fC09DE9E6;
	fma.rn.f32 	%f324, %f320, %f322, 0f00000000;
	fma.rn.f32 	%f325, %f323, %f317, 0f3F800000;
	fma.rn.f32 	%f326, %f316, 0f40490FDB, %f324;
	and.b32  	%r202, %r201, 1;
	setp.eq.b32 	%p70, %r202, 1;
	selp.f32 	%f327, %f325, %f326, %p70;
	and.b32  	%r203, %r201, 2;
	setp.eq.s32 	%p71, %r203, 0;
	sub.f32 	%f329, %f71, %f327;
	selp.f32 	%f330, %f327, %f329, %p71;
	cvt.rzi.f32.f32 	%f331, %f22;
	setp.eq.f32 	%p72, %f22, %f331;
	mul.f32 	%f332, %f22, 0f00000000;
	selp.f32 	%f333, %f332, %f330, %p72;
	mul.f32 	%f334, %f20, 0f41490FDB;
	div.approx.f32 	%f717, %f333, %f334;
$L__BB0_23:                             // %L812
	or.b32  	%r204, %r57, 65;
	cvt.rn.f32.s32 	%f338, %r204;
	div.approx.f32 	%f26, %f338, %f47;
	mul.f32 	%f28, %f26, 0f40800000;
	setp.eq.f32 	%p78, %f28, 0f00000000;
	mov.f32 	%f718, %f720;
	@%p78 bra 	$L__BB0_25;
// %bb.24:                              // %L826
	add.f32 	%f366, %f28, %f28;
	mov.b32 	%r212, %f366;
	and.b32  	%r213, %r212, -2147483648;
	or.b32  	%r214, %r213, 1056964608;
	mov.b32 	%f367, %r214;
	add.f32 	%f368, %f366, %f367;
	cvt.rzi.f32.f32 	%f369, %f368;
	abs.f32 	%f370, %f366;
	setp.gt.f32 	%p79, %f370, 0f4B000000;
	selp.f32 	%f371, %f366, %f369, %p79;
	cvt.rzi.f32.f32 	%f372, %f366;
	setp.lt.f32 	%p80, %f370, 0f3F000000;
	selp.f32 	%f373, %f372, %f371, %p80;
	cvt.rzi.s32.f32 	%r215, %f373;
	fma.rn.f32 	%f374, %f373, 0fBF000000, %f28;
	mul.f32 	%f375, %f374, %f374;
	fma.rn.f32 	%f376, %f375, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f377, %f375, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f378, %f376, %f375, 0fC0A55DF6;
	fma.rn.f32 	%f379, %f377, %f375, 0f4081E0CF;
	fma.rn.f32 	%f380, %f375, %f374, 0f00000000;
	fma.rn.f32 	%f381, %f379, %f375, 0fC09DE9E6;
	fma.rn.f32 	%f382, %f378, %f380, 0f00000000;
	fma.rn.f32 	%f383, %f381, %f375, 0f3F800000;
	fma.rn.f32 	%f384, %f374, 0f40490FDB, %f382;
	and.b32  	%r216, %r215, 1;
	setp.eq.b32 	%p81, %r216, 1;
	selp.f32 	%f385, %f383, %f384, %p81;
	and.b32  	%r217, %r215, 2;
	setp.eq.s32 	%p82, %r217, 0;
	sub.f32 	%f387, %f71, %f385;
	selp.f32 	%f388, %f385, %f387, %p82;
	cvt.rzi.f32.f32 	%f389, %f28;
	setp.eq.f32 	%p83, %f28, %f389;
	mul.f32 	%f390, %f28, 0f00000000;
	selp.f32 	%f391, %f390, %f388, %p83;
	mul.f32 	%f392, %f26, 0f41490FDB;
	div.approx.f32 	%f718, %f391, %f392;
$L__BB0_25:                             // %L830
	or.b32  	%r221, %r57, 129;
	cvt.rn.f32.s32 	%f397, %r221;
	div.approx.f32 	%f31, %f397, %f47;
	mul.f32 	%f33, %f31, 0f40800000;
	setp.eq.f32 	%p89, %f33, 0f00000000;
	mov.f32 	%f719, %f720;
	@%p89 bra 	$L__BB0_27;
// %bb.26:                              // %L906
	add.f32 	%f425, %f33, %f33;
	mov.b32 	%r229, %f425;
	and.b32  	%r230, %r229, -2147483648;
	or.b32  	%r231, %r230, 1056964608;
	mov.b32 	%f426, %r231;
	add.f32 	%f427, %f425, %f426;
	cvt.rzi.f32.f32 	%f428, %f427;
	abs.f32 	%f429, %f425;
	setp.gt.f32 	%p90, %f429, 0f4B000000;
	selp.f32 	%f430, %f425, %f428, %p90;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p91, %f429, 0f3F000000;
	selp.f32 	%f432, %f431, %f430, %p91;
	cvt.rzi.s32.f32 	%r232, %f432;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f33;
	mul.f32 	%f434, %f433, %f433;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	and.b32  	%r233, %r232, 1;
	setp.eq.b32 	%p92, %r233, 1;
	selp.f32 	%f444, %f442, %f443, %p92;
	and.b32  	%r234, %r232, 2;
	setp.eq.s32 	%p93, %r234, 0;
	sub.f32 	%f446, %f71, %f444;
	selp.f32 	%f447, %f444, %f446, %p93;
	cvt.rzi.f32.f32 	%f448, %f33;
	setp.eq.f32 	%p94, %f33, %f448;
	mul.f32 	%f449, %f33, 0f00000000;
	selp.f32 	%f450, %f449, %f447, %p94;
	mul.f32 	%f451, %f31, 0f41490FDB;
	div.approx.f32 	%f719, %f450, %f451;
$L__BB0_27:                             // %L910
	or.b32  	%r235, %r57, 193;
	cvt.rn.f32.s32 	%f455, %r235;
	div.approx.f32 	%f37, %f455, %f47;
	mul.f32 	%f39, %f37, 0f40800000;
	setp.eq.f32 	%p100, %f39, 0f00000000;
	@%p100 bra 	$L__BB0_29;
// %bb.28:                              // %L924
	add.f32 	%f483, %f39, %f39;
	mov.b32 	%r243, %f483;
	and.b32  	%r244, %r243, -2147483648;
	or.b32  	%r245, %r244, 1056964608;
	mov.b32 	%f484, %r245;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p101, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p101;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p102, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p102;
	cvt.rzi.s32.f32 	%r246, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f39;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r247, %r246, 1;
	setp.eq.b32 	%p103, %r247, 1;
	selp.f32 	%f502, %f500, %f501, %p103;
	and.b32  	%r248, %r246, 2;
	setp.eq.s32 	%p104, %r248, 0;
	sub.f32 	%f504, %f71, %f502;
	selp.f32 	%f505, %f502, %f504, %p104;
	cvt.rzi.f32.f32 	%f506, %f39;
	setp.eq.f32 	%p105, %f39, %f506;
	mul.f32 	%f507, %f39, 0f00000000;
	selp.f32 	%f508, %f507, %f505, %p105;
	mul.f32 	%f509, %f37, 0f41490FDB;
	div.approx.f32 	%f720, %f508, %f509;
$L__BB0_29:                             // %L928
	setp.le.s32 	%p148, %r101, %r100;
	mov.u32 	%r2516, 0;
	@%p148 bra 	$L__BB0_40;
// %bb.30:                              // %L1523.lr.ph
	abs.f32 	%f48, %f42;
	abs.f32 	%f106, %f4;
	abs.f32 	%f165, %f9;
	abs.f32 	%f223, %f15;
	abs.f32 	%f282, %f20;
	abs.f32 	%f340, %f26;
	setp.gt.f32 	%p18, %f48, 0f4B800000;
	mul.f32 	%f49, %f42, 0f00000000;
	setp.gt.f32 	%p29, %f106, 0f4B800000;
	mul.f32 	%f107, %f4, 0f00000000;
	setp.gt.f32 	%p40, %f165, 0f4B800000;
	mul.f32 	%f166, %f9, 0f00000000;
	setp.gt.f32 	%p51, %f223, 0f4B800000;
	mul.f32 	%f224, %f15, 0f00000000;
	setp.gt.f32 	%p62, %f282, 0f4B800000;
	mul.f32 	%f283, %f20, 0f00000000;
	setp.gt.f32 	%p73, %f340, 0f4B800000;
	mul.f32 	%f341, %f26, 0f00000000;
	abs.f32 	%f399, %f31;
	selp.f32 	%f50, %f49, %f42, %p18;
	selp.f32 	%f108, %f107, %f4, %p29;
	selp.f32 	%f167, %f166, %f9, %p40;
	selp.f32 	%f225, %f224, %f15, %p51;
	selp.f32 	%f284, %f283, %f20, %p62;
	selp.f32 	%f342, %f341, %f26, %p73;
	setp.gt.f32 	%p84, %f399, 0f4B800000;
	mul.f32 	%f400, %f31, 0f00000000;
	add.f32 	%f51, %f50, %f50;
	add.f32 	%f109, %f108, %f108;
	add.f32 	%f168, %f167, %f167;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f285, %f284, %f284;
	add.f32 	%f343, %f342, %f342;
	selp.f32 	%f401, %f400, %f31, %p84;
	abs.f32 	%f457, %f37;
	mov.b32 	%r129, %f51;
	mov.b32 	%r143, %f109;
	mov.b32 	%r160, %f168;
	mov.b32 	%r174, %f226;
	mov.b32 	%r191, %f285;
	mov.b32 	%r205, %f343;
	add.f32 	%f402, %f401, %f401;
	setp.gt.f32 	%p95, %f457, 0f4B800000;
	mul.f32 	%f458, %f37, 0f00000000;
	and.b32  	%r130, %r129, -2147483648;
	and.b32  	%r144, %r143, -2147483648;
	and.b32  	%r161, %r160, -2147483648;
	and.b32  	%r175, %r174, -2147483648;
	and.b32  	%r192, %r191, -2147483648;
	and.b32  	%r206, %r205, -2147483648;
	mov.b32 	%r222, %f402;
	selp.f32 	%f459, %f458, %f37, %p95;
	or.b32  	%r131, %r130, 1056964608;
	or.b32  	%r145, %r144, 1056964608;
	or.b32  	%r162, %r161, 1056964608;
	or.b32  	%r176, %r175, 1056964608;
	or.b32  	%r193, %r192, 1056964608;
	or.b32  	%r207, %r206, 1056964608;
	and.b32  	%r223, %r222, -2147483648;
	add.f32 	%f460, %f459, %f459;
	mov.b32 	%f52, %r131;
	mov.b32 	%f110, %r145;
	mov.b32 	%f169, %r162;
	mov.b32 	%f227, %r176;
	mov.b32 	%f286, %r193;
	mov.b32 	%f344, %r207;
	or.b32  	%r224, %r223, 1056964608;
	mov.b32 	%r236, %f460;
	add.f32 	%f53, %f51, %f52;
	abs.f32 	%f55, %f51;
	add.f32 	%f111, %f109, %f110;
	abs.f32 	%f113, %f109;
	add.f32 	%f170, %f168, %f169;
	abs.f32 	%f172, %f168;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f287, %f285, %f286;
	abs.f32 	%f289, %f285;
	add.f32 	%f345, %f343, %f344;
	abs.f32 	%f347, %f343;
	mov.b32 	%f403, %r224;
	and.b32  	%r237, %r236, -2147483648;
	cvt.rzi.f32.f32 	%f54, %f53;
	setp.gt.f32 	%p19, %f55, 0f4B000000;
	cvt.rzi.f32.f32 	%f112, %f111;
	setp.gt.f32 	%p30, %f113, 0f4B000000;
	cvt.rzi.f32.f32 	%f171, %f170;
	setp.gt.f32 	%p41, %f172, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p52, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f288, %f287;
	setp.gt.f32 	%p63, %f289, 0f4B000000;
	cvt.rzi.f32.f32 	%f346, %f345;
	setp.gt.f32 	%p74, %f347, 0f4B000000;
	add.f32 	%f404, %f402, %f403;
	abs.f32 	%f406, %f402;
	or.b32  	%r238, %r237, 1056964608;
	selp.f32 	%f56, %f51, %f54, %p19;
	cvt.rzi.f32.f32 	%f57, %f51;
	setp.lt.f32 	%p20, %f55, 0f3F000000;
	selp.f32 	%f114, %f109, %f112, %p30;
	cvt.rzi.f32.f32 	%f115, %f109;
	setp.lt.f32 	%p31, %f113, 0f3F000000;
	selp.f32 	%f173, %f168, %f171, %p41;
	cvt.rzi.f32.f32 	%f174, %f168;
	setp.lt.f32 	%p42, %f172, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p52;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p53, %f230, 0f3F000000;
	selp.f32 	%f290, %f285, %f288, %p63;
	cvt.rzi.f32.f32 	%f291, %f285;
	setp.lt.f32 	%p64, %f289, 0f3F000000;
	selp.f32 	%f348, %f343, %f346, %p74;
	cvt.rzi.f32.f32 	%f349, %f343;
	setp.lt.f32 	%p75, %f347, 0f3F000000;
	cvt.rzi.f32.f32 	%f405, %f404;
	setp.gt.f32 	%p85, %f406, 0f4B000000;
	mov.b32 	%f461, %r238;
	selp.f32 	%f58, %f57, %f56, %p20;
	selp.f32 	%f116, %f115, %f114, %p31;
	selp.f32 	%f175, %f174, %f173, %p42;
	selp.f32 	%f233, %f232, %f231, %p53;
	selp.f32 	%f292, %f291, %f290, %p64;
	selp.f32 	%f350, %f349, %f348, %p75;
	selp.f32 	%f407, %f402, %f405, %p85;
	cvt.rzi.f32.f32 	%f408, %f402;
	setp.lt.f32 	%p86, %f406, 0f3F000000;
	add.f32 	%f462, %f460, %f461;
	abs.f32 	%f464, %f460;
	fma.rn.f32 	%f59, %f58, 0fBF000000, %f50;
	fma.rn.f32 	%f117, %f116, 0fBF000000, %f108;
	fma.rn.f32 	%f176, %f175, 0fBF000000, %f167;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f293, %f292, 0fBF000000, %f284;
	fma.rn.f32 	%f351, %f350, 0fBF000000, %f342;
	selp.f32 	%f409, %f408, %f407, %p86;
	cvt.rzi.f32.f32 	%f463, %f462;
	setp.gt.f32 	%p96, %f464, 0f4B000000;
	mul.f32 	%f60, %f59, %f59;
	mul.f32 	%f118, %f117, %f117;
	mul.f32 	%f177, %f176, %f176;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f294, %f293, %f293;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f410, %f409, 0fBF000000, %f401;
	selp.f32 	%f465, %f460, %f463, %p96;
	cvt.rzi.f32.f32 	%f466, %f460;
	setp.lt.f32 	%p97, %f464, 0f3F000000;
	cvt.rzi.s32.f32 	%r132, %f58;
	fma.rn.f32 	%f61, %f60, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f62, %f60, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r146, %f116;
	fma.rn.f32 	%f119, %f118, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f120, %f118, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r163, %f175;
	fma.rn.f32 	%f178, %f177, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f179, %f177, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r177, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r194, %f292;
	fma.rn.f32 	%f295, %f294, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f296, %f294, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r208, %f350;
	fma.rn.f32 	%f353, %f352, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f354, %f352, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f411, %f410, %f410;
	selp.f32 	%f467, %f466, %f465, %p97;
	add.s32 	%r133, %r132, 1;
	fma.rn.f32 	%f63, %f61, %f60, 0fC0A55DF6;
	fma.rn.f32 	%f64, %f62, %f60, 0f4081E0CF;
	fma.rn.f32 	%f65, %f60, %f59, 0f00000000;
	add.s32 	%r147, %r146, 1;
	fma.rn.f32 	%f121, %f119, %f118, 0fC0A55DF6;
	fma.rn.f32 	%f122, %f120, %f118, 0f4081E0CF;
	fma.rn.f32 	%f123, %f118, %f117, 0f00000000;
	add.s32 	%r164, %r163, 1;
	fma.rn.f32 	%f180, %f178, %f177, 0fC0A55DF6;
	fma.rn.f32 	%f181, %f179, %f177, 0f4081E0CF;
	fma.rn.f32 	%f182, %f177, %f176, 0f00000000;
	add.s32 	%r178, %r177, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r195, %r194, 1;
	fma.rn.f32 	%f297, %f295, %f294, 0fC0A55DF6;
	fma.rn.f32 	%f298, %f296, %f294, 0f4081E0CF;
	fma.rn.f32 	%f299, %f294, %f293, 0f00000000;
	add.s32 	%r209, %r208, 1;
	fma.rn.f32 	%f355, %f353, %f352, 0fC0A55DF6;
	fma.rn.f32 	%f356, %f354, %f352, 0f4081E0CF;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	cvt.rzi.s32.f32 	%r225, %f409;
	fma.rn.f32 	%f412, %f411, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f413, %f411, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f468, %f467, 0fBF000000, %f459;
	shl.b32 	%r45, %r1, 2;
	fma.rn.f32 	%f66, %f64, %f60, 0fC09DE9E6;
	fma.rn.f32 	%f67, %f63, %f65, 0f00000000;
	and.b32  	%r134, %r133, 1;
	fma.rn.f32 	%f124, %f122, %f118, 0fC09DE9E6;
	fma.rn.f32 	%f125, %f121, %f123, 0f00000000;
	and.b32  	%r148, %r147, 1;
	fma.rn.f32 	%f183, %f181, %f177, 0fC09DE9E6;
	fma.rn.f32 	%f184, %f180, %f182, 0f00000000;
	and.b32  	%r165, %r164, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r179, %r178, 1;
	fma.rn.f32 	%f300, %f298, %f294, 0fC09DE9E6;
	fma.rn.f32 	%f301, %f297, %f299, 0f00000000;
	and.b32  	%r196, %r195, 1;
	fma.rn.f32 	%f358, %f356, %f352, 0fC09DE9E6;
	fma.rn.f32 	%f359, %f355, %f357, 0f00000000;
	and.b32  	%r210, %r209, 1;
	add.s32 	%r226, %r225, 1;
	fma.rn.f32 	%f414, %f412, %f411, 0fC0A55DF6;
	fma.rn.f32 	%f415, %f413, %f411, 0f4081E0CF;
	fma.rn.f32 	%f416, %f411, %f410, 0f00000000;
	mul.f32 	%f469, %f468, %f468;
	and.b32  	%r117, %r45, 4;
	and.b32  	%r118, %r1, 18;
	fma.rn.f32 	%f68, %f66, %f60, 0f3F800000;
	fma.rn.f32 	%f69, %f59, 0f40490FDB, %f67;
	setp.eq.b32 	%p21, %r134, 1;
	fma.rn.f32 	%f126, %f124, %f118, 0f3F800000;
	fma.rn.f32 	%f127, %f117, 0f40490FDB, %f125;
	setp.eq.b32 	%p32, %r148, 1;
	fma.rn.f32 	%f185, %f183, %f177, 0f3F800000;
	fma.rn.f32 	%f186, %f176, 0f40490FDB, %f184;
	setp.eq.b32 	%p43, %r165, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p54, %r179, 1;
	fma.rn.f32 	%f302, %f300, %f294, 0f3F800000;
	fma.rn.f32 	%f303, %f293, 0f40490FDB, %f301;
	setp.eq.b32 	%p65, %r196, 1;
	fma.rn.f32 	%f360, %f358, %f352, 0f3F800000;
	fma.rn.f32 	%f361, %f351, 0f40490FDB, %f359;
	setp.eq.b32 	%p76, %r210, 1;
	fma.rn.f32 	%f417, %f415, %f411, 0fC09DE9E6;
	fma.rn.f32 	%f418, %f414, %f416, 0f00000000;
	and.b32  	%r227, %r226, 1;
	cvt.rzi.s32.f32 	%r239, %f467;
	fma.rn.f32 	%f470, %f469, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f471, %f469, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r46, %r45, 32;
	shl.b32 	%r47, %r1, 1;
	or.b32  	%r49, %r118, %r117;
	selp.f32 	%f70, %f68, %f69, %p21;
	and.b32  	%r135, %r133, 2;
	selp.f32 	%f128, %f126, %f127, %p32;
	and.b32  	%r149, %r147, 2;
	selp.f32 	%f187, %f185, %f186, %p43;
	and.b32  	%r166, %r164, 2;
	selp.f32 	%f245, %f243, %f244, %p54;
	and.b32  	%r180, %r178, 2;
	selp.f32 	%f304, %f302, %f303, %p65;
	and.b32  	%r197, %r195, 2;
	selp.f32 	%f362, %f360, %f361, %p76;
	and.b32  	%r211, %r209, 2;
	fma.rn.f32 	%f419, %f417, %f411, 0f3F800000;
	fma.rn.f32 	%f420, %f410, 0f40490FDB, %f418;
	setp.eq.b32 	%p87, %r227, 1;
	add.s32 	%r240, %r239, 1;
	fma.rn.f32 	%f472, %f470, %f469, 0fC0A55DF6;
	fma.rn.f32 	%f473, %f471, %f469, 0f4081E0CF;
	fma.rn.f32 	%f474, %f469, %f468, 0f00000000;
	and.b32  	%r48, %r47, 8;
	or.b32  	%r119, %r49, %r46;
	setp.eq.s32 	%p22, %r135, 0;
	sub.f32 	%f72, %f71, %f70;
	setp.eq.s32 	%p33, %r149, 0;
	sub.f32 	%f130, %f71, %f128;
	setp.eq.s32 	%p44, %r166, 0;
	sub.f32 	%f189, %f71, %f187;
	setp.eq.s32 	%p55, %r180, 0;
	sub.f32 	%f247, %f71, %f245;
	setp.eq.s32 	%p66, %r197, 0;
	sub.f32 	%f306, %f71, %f304;
	setp.eq.s32 	%p77, %r211, 0;
	sub.f32 	%f364, %f71, %f362;
	selp.f32 	%f421, %f419, %f420, %p87;
	and.b32  	%r228, %r226, 2;
	fma.rn.f32 	%f475, %f473, %f469, 0fC09DE9E6;
	fma.rn.f32 	%f476, %f472, %f474, 0f00000000;
	and.b32  	%r241, %r240, 1;
	or.b32  	%r120, %r119, %r48;
	selp.f32 	%f73, %f70, %f72, %p22;
	selp.f32 	%f131, %f128, %f130, %p33;
	selp.f32 	%f190, %f187, %f189, %p44;
	selp.f32 	%f248, %f245, %f247, %p55;
	selp.f32 	%f307, %f304, %f306, %p66;
	selp.f32 	%f365, %f362, %f364, %p77;
	setp.eq.s32 	%p88, %r228, 0;
	sub.f32 	%f423, %f71, %f421;
	fma.rn.f32 	%f477, %f475, %f469, 0f3F800000;
	fma.rn.f32 	%f478, %f468, 0f40490FDB, %f476;
	setp.eq.b32 	%p98, %r241, 1;
	shr.u32 	%r121, %r120, 1;
	mul.f32 	%f43, %f73, %f73;
	mul.f32 	%f5, %f131, %f131;
	mul.f32 	%f10, %f190, %f190;
	mul.f32 	%f16, %f248, %f248;
	mul.f32 	%f21, %f307, %f307;
	mul.f32 	%f27, %f365, %f365;
	selp.f32 	%f424, %f421, %f423, %p88;
	selp.f32 	%f479, %f477, %f478, %p98;
	and.b32  	%r242, %r240, 2;
	ld.param.u64 	%rd1, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd42, %r121, 4;
	mul.f32 	%f102, %f713, %f43;
	mov.f32 	%f103, 0f42800000;
	mul.f32 	%f160, %f714, %f5;
	mul.f32 	%f219, %f715, %f10;
	mul.f32 	%f277, %f716, %f16;
	mul.f32 	%f336, %f717, %f21;
	mul.f32 	%f394, %f718, %f27;
	mul.f32 	%f32, %f424, %f424;
	setp.eq.s32 	%p99, %r242, 0;
	sub.f32 	%f481, %f71, %f479;
	add.s64 	%rd43, %rd1, %rd42;
	div.approx.f32 	%f3, %f102, %f103;
	div.approx.f32 	%f162, %f160, %f103;
	div.approx.f32 	%f14, %f219, %f103;
	div.approx.f32 	%f279, %f277, %f103;
	div.approx.f32 	%f25, %f336, %f103;
	div.approx.f32 	%f396, %f394, %f103;
	mul.f32 	%f453, %f719, %f32;
	selp.f32 	%f482, %f479, %f481, %p99;
	ld.param.u64 	%rd2, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.global.u32 	%r50, [%rd43];
	shr.u32 	%r51, %r1, 1;
	shr.u32 	%r55, %r1, 3;
	mov.b32 	%r158, %f162;
	mov.b32 	%r157, %f3;
	mov.b32 	%r189, %f279;
	mov.b32 	%r188, %f14;
	mov.b32 	%r220, %f396;
	mov.b32 	%r219, %f25;
	div.approx.f32 	%f36, %f453, %f103;
	mul.f32 	%f38, %f482, %f482;
	// begin inline asm
	cvt.rn.f16x2.f32 %r156, %r158, %r157;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r187, %r189, %r188;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r218, %r220, %r219;
	// end inline asm
	mul.f32 	%f510, %f720, %f38;
	div.approx.f32 	%f512, %f510, %f103;
	mov.b32 	%r251, %f512;
	mov.b32 	%r250, %f36;
	// begin inline asm
	cvt.rn.f16x2.f32 %r249, %r251, %r250;
	// end inline asm
	mul.lo.s32 	%r288, %r56, 63;
	and.b32  	%r289, %r288, 127;
	cvt.rn.f32.s32 	%f513, %r289;
	div.approx.f32 	%f514, %f513, %f103;
	add.f32 	%f515, %f514, %f514;
	mov.b32 	%r290, %f515;
	and.b32  	%r291, %r290, -2147483648;
	or.b32  	%r292, %r291, 1056964608;
	mov.b32 	%f516, %r292;
	add.f32 	%f517, %f515, %f516;
	cvt.rzi.f32.f32 	%f518, %f517;
	abs.f32 	%f519, %f515;
	setp.gt.f32 	%p106, %f519, 0f4B000000;
	selp.f32 	%f520, %f515, %f518, %p106;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p107, %f519, 0f3F000000;
	selp.f32 	%f522, %f521, %f520, %p107;
	cvt.rzi.s32.f32 	%r293, %f522;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f514;
	mul.f32 	%f524, %f523, %f523;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	and.b32  	%r294, %r293, 1;
	setp.eq.b32 	%p108, %r294, 1;
	selp.f32 	%f534, %f532, %f533, %p108;
	selp.f32 	%f535, %f533, %f532, %p108;
	and.b32  	%r295, %r293, 2;
	setp.eq.s32 	%p109, %r295, 0;
	neg.f32 	%f536, %f534;
	selp.f32 	%f537, %f534, %f536, %p109;
	add.s32 	%r296, %r293, 1;
	and.b32  	%r297, %r296, 2;
	setp.eq.s32 	%p110, %r297, 0;
	sub.f32 	%f539, %f71, %f535;
	selp.f32 	%f540, %f535, %f539, %p110;
	cvt.rzi.f32.f32 	%f541, %f514;
	setp.eq.f32 	%p111, %f541, %f514;
	mul.f32 	%f542, %f514, 0f00000000;
	selp.f32 	%f543, %f542, %f537, %p111;
	abs.f32 	%f544, %f514;
	setp.gt.f32 	%p112, %f544, 0f4B800000;
	add.f32 	%f545, %f543, 0f3F800000;
	selp.f32 	%f546, %f545, %f540, %p112;
	add.s32 	%r298, %r288, 96;
	and.b32  	%r299, %r298, 127;
	cvt.rn.f32.s32 	%f547, %r299;
	div.approx.f32 	%f548, %f547, %f103;
	add.f32 	%f549, %f548, %f548;
	mov.b32 	%r300, %f549;
	and.b32  	%r301, %r300, -2147483648;
	or.b32  	%r302, %r301, 1056964608;
	mov.b32 	%f550, %r302;
	add.f32 	%f551, %f549, %f550;
	cvt.rzi.f32.f32 	%f552, %f551;
	abs.f32 	%f553, %f549;
	setp.gt.f32 	%p113, %f553, 0f4B000000;
	selp.f32 	%f554, %f549, %f552, %p113;
	cvt.rzi.f32.f32 	%f555, %f549;
	setp.lt.f32 	%p114, %f553, 0f3F000000;
	selp.f32 	%f556, %f555, %f554, %p114;
	cvt.rzi.s32.f32 	%r303, %f556;
	fma.rn.f32 	%f557, %f556, 0fBF000000, %f548;
	mul.f32 	%f558, %f557, %f557;
	fma.rn.f32 	%f559, %f558, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f560, %f558, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f561, %f559, %f558, 0fC0A55DF6;
	fma.rn.f32 	%f562, %f560, %f558, 0f4081E0CF;
	fma.rn.f32 	%f563, %f558, %f557, 0f00000000;
	fma.rn.f32 	%f564, %f562, %f558, 0fC09DE9E6;
	fma.rn.f32 	%f565, %f561, %f563, 0f00000000;
	fma.rn.f32 	%f566, %f564, %f558, 0f3F800000;
	fma.rn.f32 	%f567, %f557, 0f40490FDB, %f565;
	and.b32  	%r304, %r303, 1;
	setp.eq.b32 	%p115, %r304, 1;
	selp.f32 	%f568, %f566, %f567, %p115;
	selp.f32 	%f569, %f567, %f566, %p115;
	and.b32  	%r305, %r303, 2;
	setp.eq.s32 	%p116, %r305, 0;
	neg.f32 	%f570, %f568;
	selp.f32 	%f571, %f568, %f570, %p116;
	add.s32 	%r306, %r303, 1;
	and.b32  	%r307, %r306, 2;
	setp.eq.s32 	%p117, %r307, 0;
	sub.f32 	%f572, %f71, %f569;
	selp.f32 	%f573, %f569, %f572, %p117;
	cvt.rzi.f32.f32 	%f574, %f548;
	setp.eq.f32 	%p118, %f574, %f548;
	mul.f32 	%f575, %f548, 0f00000000;
	selp.f32 	%f576, %f575, %f571, %p118;
	abs.f32 	%f577, %f548;
	setp.gt.f32 	%p119, %f577, 0f4B800000;
	add.f32 	%f578, %f576, 0f3F800000;
	selp.f32 	%f579, %f578, %f573, %p119;
	mov.b32 	%r253, %f546;
	mov.b32 	%r254, %f579;
	// begin inline asm
	cvt.rn.f16x2.f32 %r252, %r254, %r253;
	// end inline asm
	mov.b32 	%r256, %f543;
	mov.b32 	%r257, %f576;
	// begin inline asm
	cvt.rn.f16x2.f32 %r255, %r257, %r256;
	// end inline asm
	and.b32  	%r308, %r55, 2;
	and.b32  	%r309, %r51, 4;
	or.b32  	%r310, %r52, %r308;
	or.b32  	%r311, %r310, %r309;
	and.b32  	%r312, %r47, 6;
	mul.lo.s32 	%r313, %r311, %r312;
	and.b32  	%r314, %r313, 14;
	cvt.rn.f32.s32 	%f580, %r314;
	mov.f32 	%f581, 0f41000000;
	div.approx.f32 	%f582, %f580, %f581;
	add.f32 	%f583, %f582, %f582;
	mov.b32 	%r315, %f583;
	and.b32  	%r316, %r315, -2147483648;
	or.b32  	%r317, %r316, 1056964608;
	mov.b32 	%f584, %r317;
	add.f32 	%f585, %f583, %f584;
	cvt.rzi.f32.f32 	%f586, %f585;
	abs.f32 	%f587, %f583;
	setp.gt.f32 	%p120, %f587, 0f4B000000;
	selp.f32 	%f588, %f583, %f586, %p120;
	cvt.rzi.f32.f32 	%f589, %f583;
	setp.lt.f32 	%p121, %f587, 0f3F000000;
	selp.f32 	%f590, %f589, %f588, %p121;
	cvt.rzi.s32.f32 	%r318, %f590;
	fma.rn.f32 	%f591, %f590, 0fBF000000, %f582;
	mul.f32 	%f592, %f591, %f591;
	fma.rn.f32 	%f593, %f592, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f594, %f592, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f593, %f592, 0fC0A55DF6;
	fma.rn.f32 	%f596, %f594, %f592, 0f4081E0CF;
	fma.rn.f32 	%f597, %f592, %f591, 0f00000000;
	fma.rn.f32 	%f598, %f596, %f592, 0fC09DE9E6;
	fma.rn.f32 	%f599, %f595, %f597, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f592, 0f3F800000;
	fma.rn.f32 	%f601, %f591, 0f40490FDB, %f599;
	and.b32  	%r319, %r318, 1;
	setp.eq.b32 	%p122, %r319, 1;
	selp.f32 	%f602, %f600, %f601, %p122;
	selp.f32 	%f603, %f601, %f600, %p122;
	and.b32  	%r320, %r318, 2;
	setp.eq.s32 	%p123, %r320, 0;
	neg.f32 	%f604, %f602;
	selp.f32 	%f605, %f602, %f604, %p123;
	add.s32 	%r321, %r318, 1;
	and.b32  	%r322, %r321, 2;
	setp.eq.s32 	%p124, %r322, 0;
	sub.f32 	%f606, %f71, %f603;
	selp.f32 	%f607, %f603, %f606, %p124;
	cvt.rzi.f32.f32 	%f608, %f582;
	setp.eq.f32 	%p125, %f608, %f582;
	mul.f32 	%f609, %f582, 0f00000000;
	selp.f32 	%f610, %f609, %f605, %p125;
	abs.f32 	%f611, %f582;
	setp.gt.f32 	%p126, %f611, 0f4B800000;
	add.f32 	%f612, %f610, 0f3F800000;
	selp.f32 	%f613, %f612, %f607, %p126;
	or.b32  	%r323, %r47, 8;
	mul.lo.s32 	%r324, %r311, %r323;
	and.b32  	%r325, %r324, 14;
	cvt.rn.f32.s32 	%f614, %r325;
	div.approx.f32 	%f615, %f614, %f581;
	add.f32 	%f616, %f615, %f615;
	mov.b32 	%r326, %f616;
	and.b32  	%r327, %r326, -2147483648;
	or.b32  	%r328, %r327, 1056964608;
	mov.b32 	%f617, %r328;
	add.f32 	%f618, %f616, %f617;
	cvt.rzi.f32.f32 	%f619, %f618;
	abs.f32 	%f620, %f616;
	setp.gt.f32 	%p127, %f620, 0f4B000000;
	selp.f32 	%f621, %f616, %f619, %p127;
	cvt.rzi.f32.f32 	%f622, %f616;
	setp.lt.f32 	%p128, %f620, 0f3F000000;
	selp.f32 	%f623, %f622, %f621, %p128;
	cvt.rzi.s32.f32 	%r329, %f623;
	fma.rn.f32 	%f624, %f623, 0fBF000000, %f615;
	mul.f32 	%f625, %f624, %f624;
	fma.rn.f32 	%f626, %f625, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f627, %f625, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f628, %f626, %f625, 0fC0A55DF6;
	fma.rn.f32 	%f629, %f627, %f625, 0f4081E0CF;
	fma.rn.f32 	%f630, %f625, %f624, 0f00000000;
	fma.rn.f32 	%f631, %f629, %f625, 0fC09DE9E6;
	fma.rn.f32 	%f632, %f628, %f630, 0f00000000;
	fma.rn.f32 	%f633, %f631, %f625, 0f3F800000;
	fma.rn.f32 	%f634, %f624, 0f40490FDB, %f632;
	and.b32  	%r330, %r329, 1;
	setp.eq.b32 	%p129, %r330, 1;
	selp.f32 	%f635, %f633, %f634, %p129;
	selp.f32 	%f636, %f634, %f633, %p129;
	and.b32  	%r331, %r329, 2;
	setp.eq.s32 	%p130, %r331, 0;
	neg.f32 	%f637, %f635;
	selp.f32 	%f638, %f635, %f637, %p130;
	add.s32 	%r332, %r329, 1;
	and.b32  	%r333, %r332, 2;
	setp.eq.s32 	%p131, %r333, 0;
	sub.f32 	%f639, %f71, %f636;
	selp.f32 	%f640, %f636, %f639, %p131;
	cvt.rzi.f32.f32 	%f641, %f615;
	setp.eq.f32 	%p132, %f641, %f615;
	mul.f32 	%f642, %f615, 0f00000000;
	selp.f32 	%f643, %f642, %f638, %p132;
	abs.f32 	%f644, %f615;
	setp.gt.f32 	%p133, %f644, 0f4B800000;
	add.f32 	%f645, %f643, 0f3F800000;
	selp.f32 	%f646, %f645, %f640, %p133;
	mov.b32 	%r259, %f613;
	mov.b32 	%r260, %f646;
	// begin inline asm
	cvt.rn.f16x2.f32 %r258, %r260, %r259;
	// end inline asm
	mov.b32 	%r262, %f610;
	mov.b32 	%r263, %f643;
	// begin inline asm
	cvt.rn.f16x2.f32 %r261, %r263, %r262;
	// end inline asm
	xor.b32  	%r283, %r262, -2147483648;
	xor.b32  	%r284, %r263, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r264, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r267, %r260, %r259;
	// end inline asm
	cvt.rn.f32.s32 	%f647, %r313;
	div.approx.f32 	%f648, %f647, %f103;
	add.f32 	%f649, %f648, %f648;
	mov.b32 	%r334, %f649;
	and.b32  	%r335, %r334, -2147483648;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%f650, %r336;
	add.f32 	%f651, %f649, %f650;
	cvt.rzi.f32.f32 	%f652, %f651;
	abs.f32 	%f653, %f649;
	setp.gt.f32 	%p134, %f653, 0f4B000000;
	selp.f32 	%f654, %f649, %f652, %p134;
	cvt.rzi.f32.f32 	%f655, %f649;
	setp.lt.f32 	%p135, %f653, 0f3F000000;
	selp.f32 	%f656, %f655, %f654, %p135;
	cvt.rzi.s32.f32 	%r337, %f656;
	fma.rn.f32 	%f657, %f656, 0fBF000000, %f648;
	mul.f32 	%f658, %f657, %f657;
	fma.rn.f32 	%f659, %f658, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f660, %f658, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f661, %f659, %f658, 0fC0A55DF6;
	fma.rn.f32 	%f662, %f660, %f658, 0f4081E0CF;
	fma.rn.f32 	%f663, %f658, %f657, 0f00000000;
	fma.rn.f32 	%f664, %f662, %f658, 0fC09DE9E6;
	fma.rn.f32 	%f665, %f661, %f663, 0f00000000;
	fma.rn.f32 	%f666, %f664, %f658, 0f3F800000;
	fma.rn.f32 	%f667, %f657, 0f40490FDB, %f665;
	and.b32  	%r338, %r337, 1;
	setp.eq.b32 	%p136, %r338, 1;
	selp.f32 	%f668, %f666, %f667, %p136;
	selp.f32 	%f669, %f667, %f666, %p136;
	and.b32  	%r339, %r337, 2;
	setp.eq.s32 	%p137, %r339, 0;
	neg.f32 	%f670, %f668;
	selp.f32 	%f671, %f668, %f670, %p137;
	add.s32 	%r340, %r337, 1;
	and.b32  	%r341, %r340, 2;
	setp.eq.s32 	%p138, %r341, 0;
	sub.f32 	%f672, %f71, %f669;
	selp.f32 	%f673, %f669, %f672, %p138;
	cvt.rzi.f32.f32 	%f674, %f648;
	setp.eq.f32 	%p139, %f674, %f648;
	mul.f32 	%f675, %f648, 0f00000000;
	selp.f32 	%f676, %f675, %f671, %p139;
	mov.b32 	%r342, %f676;
	abs.f32 	%f677, %f648;
	setp.gt.f32 	%p140, %f677, 0f4B800000;
	add.f32 	%f678, %f676, 0f3F800000;
	selp.f32 	%f679, %f678, %f673, %p140;
	shl.b32 	%r343, %r311, 3;
	add.s32 	%r344, %r313, %r343;
	cvt.rn.f32.s32 	%f680, %r344;
	div.approx.f32 	%f681, %f680, %f103;
	add.f32 	%f682, %f681, %f681;
	mov.b32 	%r345, %f682;
	and.b32  	%r346, %r345, -2147483648;
	or.b32  	%r347, %r346, 1056964608;
	mov.b32 	%f683, %r347;
	add.f32 	%f684, %f682, %f683;
	cvt.rzi.f32.f32 	%f685, %f684;
	abs.f32 	%f686, %f682;
	setp.gt.f32 	%p141, %f686, 0f4B000000;
	selp.f32 	%f687, %f682, %f685, %p141;
	cvt.rzi.f32.f32 	%f688, %f682;
	setp.lt.f32 	%p142, %f686, 0f3F000000;
	selp.f32 	%f689, %f688, %f687, %p142;
	cvt.rzi.s32.f32 	%r348, %f689;
	fma.rn.f32 	%f690, %f689, 0fBF000000, %f681;
	mul.f32 	%f691, %f690, %f690;
	fma.rn.f32 	%f692, %f691, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f693, %f691, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f694, %f692, %f691, 0fC0A55DF6;
	fma.rn.f32 	%f695, %f693, %f691, 0f4081E0CF;
	fma.rn.f32 	%f696, %f691, %f690, 0f00000000;
	fma.rn.f32 	%f697, %f695, %f691, 0fC09DE9E6;
	fma.rn.f32 	%f698, %f694, %f696, 0f00000000;
	fma.rn.f32 	%f699, %f697, %f691, 0f3F800000;
	fma.rn.f32 	%f700, %f690, 0f40490FDB, %f698;
	and.b32  	%r349, %r348, 1;
	setp.eq.b32 	%p143, %r349, 1;
	selp.f32 	%f701, %f699, %f700, %p143;
	selp.f32 	%f702, %f700, %f699, %p143;
	and.b32  	%r350, %r348, 2;
	setp.eq.s32 	%p144, %r350, 0;
	neg.f32 	%f703, %f701;
	selp.f32 	%f704, %f701, %f703, %p144;
	add.s32 	%r351, %r348, 1;
	and.b32  	%r352, %r351, 2;
	setp.eq.s32 	%p145, %r352, 0;
	sub.f32 	%f705, %f71, %f702;
	selp.f32 	%f706, %f702, %f705, %p145;
	cvt.rzi.f32.f32 	%f707, %f681;
	setp.eq.f32 	%p146, %f707, %f681;
	mul.f32 	%f708, %f681, 0f00000000;
	selp.f32 	%f709, %f708, %f704, %p146;
	mov.b32 	%r353, %f709;
	abs.f32 	%f710, %f681;
	setp.gt.f32 	%p147, %f710, 0f4B800000;
	add.f32 	%f711, %f709, 0f3F800000;
	selp.f32 	%f712, %f711, %f706, %p147;
	mov.b32 	%r272, %f712;
	mov.b32 	%r271, %f679;
	// begin inline asm
	cvt.rn.f16x2.f32 %r270, %r272, %r271;
	// end inline asm
	xor.b32  	%r275, %r353, -2147483648;
	xor.b32  	%r274, %r342, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r273, %r275, %r274;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r276, %r260, %r259;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r263, %r262;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r260, %r259;
	// end inline asm
	shl.b32 	%r355, %r100, 13;
	shl.b32 	%r356, %r104, 9;
	and.b32  	%r357, %r45, 28;
	shl.b32 	%r358, %r4, 5;
	and.b32  	%r359, %r358, 224;
	or.b32  	%r360, %r357, %r359;
	and.b32  	%r361, %r358, 256;
	and.b32  	%r362, %r358, 7936;
	or.b32  	%r363, %r362, %r355;
	or.b32  	%r364, %r363, %r360;
	add.s32 	%r21, %r364, %r356;
	and.b32  	%r22, %r1, 8;
	shl.b32 	%r365, %r1, 4;
	or.b32  	%r366, %r365, %r22;
	shr.u32 	%r367, %r366, 2;
	and.b32  	%r368, %r367, 30;
	shr.u32 	%r369, %r2, 1;
	and.b32  	%r370, %r3, 32;
	and.b32  	%r372, %r1, 4;
	or.b32  	%r23, %r124, %r372;
	or.b32  	%r24, %r370, %r369;
	or.b32  	%r373, %r49, %r48;
	or.b32  	%r374, %r373, %r46;
	shr.u32 	%r375, %r374, 1;
	mul.lo.s32 	%r376, %r375, 65;
	add.s32 	%r377, %r376, %r24;
	or.b32  	%r25, %r24, 8;
	add.s32 	%r378, %r376, %r25;
	or.b32  	%r26, %r24, 16;
	add.s32 	%r379, %r376, %r26;
	or.b32  	%r27, %r24, 24;
	add.s32 	%r380, %r376, %r27;
	shl.b32 	%r381, %r2, 1;
	or.b32  	%r382, %r381, %r53;
	mul.lo.s32 	%r383, %r382, 65;
	add.s32 	%r384, %r368, %r383;
	mul.wide.u32 	%rd44, %r384, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd6, %rd45, %rd44;
	cvt.u64.u32 	%rd46, %r368;
	cvt.u64.u32 	%rd47, %r383;
	add.s64 	%rd48, %rd47, %rd46;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd7, %rd45, %rd49;
	shl.b32 	%r385, %r102, 15;
	add.s32 	%r386, %r385, -98304;
	or.b32  	%r28, %r361, %r360;
	shl.b32 	%r387, %r2, 11;
	shl.b32 	%r388, %r1, 6;
	and.b32  	%r389, %r388, 1536;
	or.b32  	%r29, %r389, %r387;
	cvt.s64.s32 	%rd8, %r386;
	shr.u32 	%r390, %r2, 3;
	mul.lo.s32 	%r391, %r390, 130;
	mul.lo.s32 	%r392, %r53, 65;
	bfe.s32 	%r393, %r2, 2, 1;
	and.b32  	%r394, %r2, 4;
	setp.eq.s32 	%p149, %r394, 0;
	and.b32  	%r395, %r393, 260;
	bfe.s32 	%r396, %r2, 1, 1;
	and.b32  	%r397, %r2, 2;
	setp.eq.s32 	%p150, %r397, 0;
	and.b32  	%r398, %r396, 520;
	and.b32  	%r399, %r2, 1;
	neg.s32 	%r400, %r399;
	setp.eq.b32 	%p151, %r399, 1;
	and.b32  	%r401, %r400, 1040;
	add.s32 	%r402, %r401, %r368;
	add.s32 	%r403, %r402, %r391;
	add.s32 	%r404, %r403, %r392;
	add.s32 	%r405, %r404, %r395;
	add.s32 	%r406, %r405, %r398;
	mul.wide.u32 	%rd50, %r406, 4;
	add.s64 	%rd9, %rd45, %rd50;
	selp.b64 	%rd51, 0, 520, %p150;
	selp.b64 	%rd52, 0, 260, %p149;
	cvt.u64.u32 	%rd53, %r392;
	cvt.u64.u32 	%rd54, %r391;
	selp.b64 	%rd55, 1040, 0, %p151;
	add.s64 	%rd56, %rd46, %rd55;
	add.s64 	%rd57, %rd56, %rd54;
	add.s64 	%rd58, %rd57, %rd53;
	add.s64 	%rd59, %rd58, %rd52;
	add.s64 	%rd60, %rd59, %rd51;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd10, %rd45, %rd61;
	add.s32 	%r407, %r406, 2113;
	mul.wide.u32 	%rd62, %r407, 4;
	add.s64 	%rd11, %rd45, %rd62;
	add.s32 	%r408, %r406, 2082;
	mul.wide.u32 	%rd63, %r408, 4;
	add.s64 	%rd12, %rd45, %rd63;
	add.s32 	%r409, %r406, 2114;
	mul.wide.u32 	%rd64, %r409, 4;
	add.s64 	%rd13, %rd45, %rd64;
	add.s32 	%r410, %r406, 4194;
	mul.wide.u32 	%rd65, %r410, 4;
	add.s64 	%rd14, %rd45, %rd65;
	add.s32 	%r411, %r406, 4163;
	mul.wide.u32 	%rd66, %r411, 4;
	add.s64 	%rd15, %rd45, %rd66;
	add.s32 	%r412, %r406, 4195;
	mul.wide.u32 	%rd67, %r412, 4;
	add.s64 	%rd16, %rd45, %rd67;
	add.s32 	%r413, %r406, 6275;
	mul.wide.u32 	%rd68, %r413, 4;
	add.s64 	%rd17, %rd45, %rd68;
	add.s32 	%r414, %r406, 6244;
	mul.wide.u32 	%rd69, %r414, 4;
	add.s64 	%rd18, %rd45, %rd69;
	add.s32 	%r415, %r406, 6276;
	mul.wide.u32 	%rd70, %r415, 4;
	add.s64 	%rd19, %rd45, %rd70;
	mul.wide.u32 	%rd71, %r380, 4;
	add.s64 	%rd20, %rd45, %rd71;
	mul.wide.u32 	%rd72, %r379, 4;
	add.s64 	%rd21, %rd45, %rd72;
	mul.wide.u32 	%rd73, %r378, 4;
	add.s64 	%rd22, %rd45, %rd73;
	mul.wide.u32 	%rd74, %r377, 4;
	add.s64 	%rd23, %rd45, %rd74;
	mov.u16 	%rs236, 25600;
	mov.u16 	%rs238, 21504;
	mov.u16 	%rs246, 18432;
	mov.u16 	%rs260, -14592;
	mov.u32 	%r2518, %r2516;
	mov.u32 	%r2519, %r2516;
	mov.u32 	%r2520, %r2516;
	mov.u32 	%r2521, %r2516;
	mov.u32 	%r2522, %r2516;
	mov.u32 	%r2523, %r2516;
	mov.u32 	%r2524, %r2516;
	mov.u32 	%r2525, %r2516;
	mov.u32 	%r2536, %r2516;
	mov.u32 	%r2537, %r2516;
	mov.u32 	%r2538, %r2516;
	mov.u32 	%r2539, %r2516;
	mov.u32 	%r42, %r2516;
	bra.uni 	$L__BB0_31;
$L__BB0_39:                             // %pass10384
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r2509, %r2517, %r28;
	or.b32  	%r2510, %r2509, %r29;
	or.b32  	%r2511, %r2510, 98304;
	cvt.s64.s32 	%rd128, %r2511;
	add.s64 	%rd129, %rd128, %rd8;
	shr.u64 	%rd130, %rd129, 39;
	add.s64 	%rd131, %rd129, %rd130;
	shr.s64 	%rd132, %rd131, 25;
	setp.lt.s64 	%p180, %rd129, 0;
	and.b64  	%rd133, %rd131, -33554432;
	setp.ne.s64 	%p181, %rd133, %rd129;
	and.pred  	%p182, %p180, %p181;
	selp.u64 	%rd134, 1, 0, %p182;
	sub.s64 	%rd135, %rd134, %rd132;
	shl.b64 	%rd136, %rd135, 25;
	add.s64 	%rd137, %rd136, %rd129;
	shl.b64 	%rd138, %rd137, 2;
	add.s64 	%rd139, %rd3, %rd138;
	st.global.v4.u32 	[%rd139], {%r95, %r97, %r96, %r98};
	setp.ne.s32 	%p183, %r42, 65280;
	add.s32 	%r42, %r42, 256;
	add.s32 	%r2512, %r42, %r100;
	setp.lt.s32 	%p184, %r2512, %r101;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_40;
$L__BB0_31:                             // %L1523
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_32 Depth 2
	setp.eq.s32 	%p152, %r22, 0;
	or.b32  	%r481, %r42, %r46;
	or.b32  	%r482, %r481, %r1;
	and.b32  	%r483, %r482, 65328;
	or.b32  	%r484, %r483, %r2;
	shl.b32 	%r485, %r484, 13;
	add.s32 	%r486, %r21, %r485;
	shr.s32 	%r487, %r486, 31;
	shr.u32 	%r488, %r487, 3;
	add.s32 	%r489, %r486, %r488;
	shr.s32 	%r490, %r489, 29;
	setp.lt.s32 	%p153, %r486, 0;
	and.b32  	%r491, %r489, -536870912;
	setp.ne.s32 	%p154, %r491, %r486;
	and.pred  	%p155, %p153, %p154;
	selp.u32 	%r492, 1, 0, %p155;
	sub.s32 	%r493, %r492, %r490;
	shl.b32 	%r494, %r493, 29;
	or.b32  	%r495, %r486, 1;
	add.s32 	%r496, %r495, %r494;
	mul.wide.s32 	%rd75, %r496, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.v4.u32 	{%r497, %r498, %r499, %r500}, [%rd76+-4];
	or.b32  	%r501, %r485, 524288;
	add.s32 	%r502, %r21, %r501;
	shr.s32 	%r503, %r502, 31;
	shr.u32 	%r504, %r503, 3;
	add.s32 	%r505, %r502, %r504;
	shr.s32 	%r506, %r505, 29;
	setp.lt.s32 	%p156, %r502, 0;
	and.b32  	%r507, %r505, -536870912;
	setp.ne.s32 	%p157, %r507, %r502;
	and.pred  	%p158, %p156, %p157;
	selp.u32 	%r508, 1, 0, %p158;
	sub.s32 	%r509, %r508, %r506;
	shl.b32 	%r510, %r509, 29;
	or.b32  	%r511, %r502, 1;
	add.s32 	%r512, %r511, %r510;
	mul.wide.s32 	%rd77, %r512, 4;
	add.s64 	%rd78, %rd2, %rd77;
	ld.global.v4.u32 	{%r513, %r514, %r515, %r516}, [%rd78+-4];
	or.b32  	%r517, %r485, 1048576;
	add.s32 	%r518, %r21, %r517;
	shr.s32 	%r519, %r518, 31;
	shr.u32 	%r520, %r519, 3;
	add.s32 	%r521, %r518, %r520;
	shr.s32 	%r522, %r521, 29;
	setp.lt.s32 	%p159, %r518, 0;
	and.b32  	%r523, %r521, -536870912;
	setp.ne.s32 	%p160, %r523, %r518;
	and.pred  	%p161, %p159, %p160;
	selp.u32 	%r524, 1, 0, %p161;
	sub.s32 	%r525, %r524, %r522;
	shl.b32 	%r526, %r525, 29;
	or.b32  	%r527, %r518, 1;
	add.s32 	%r528, %r527, %r526;
	mul.wide.s32 	%rd79, %r528, 4;
	add.s64 	%rd80, %rd2, %rd79;
	ld.global.v4.u32 	{%r529, %r530, %r531, %r532}, [%rd80+-4];
	or.b32  	%r533, %r485, 1572864;
	add.s32 	%r534, %r21, %r533;
	shr.s32 	%r535, %r534, 31;
	shr.u32 	%r536, %r535, 3;
	add.s32 	%r537, %r534, %r536;
	shr.s32 	%r538, %r537, 29;
	setp.lt.s32 	%p162, %r534, 0;
	and.b32  	%r539, %r537, -536870912;
	setp.ne.s32 	%p163, %r539, %r534;
	and.pred  	%p164, %p162, %p163;
	selp.u32 	%r540, 1, 0, %p164;
	sub.s32 	%r541, %r540, %r538;
	shl.b32 	%r542, %r541, 29;
	or.b32  	%r543, %r534, 1;
	add.s32 	%r544, %r543, %r542;
	mul.wide.s32 	%rd81, %r544, 4;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.v4.u32 	{%r545, %r546, %r547, %r548}, [%rd82+-4];
	selp.b32 	%r549, %r499, %r497, %p152;
	shfl.sync.bfly.b32	%r550, %r549, 8, 31, -1;
	selp.b32 	%r417, %r497, %r550, %p152;
	selp.b32 	%r418, %r550, %r499, %p152;
	selp.b32 	%r551, %r500, %r498, %p152;
	shfl.sync.bfly.b32	%r552, %r551, 8, 31, -1;
	selp.b32 	%r425, %r498, %r552, %p152;
	selp.b32 	%r426, %r552, %r500, %p152;
	selp.b32 	%r553, %r515, %r513, %p152;
	shfl.sync.bfly.b32	%r554, %r553, 8, 31, -1;
	selp.b32 	%r433, %r513, %r554, %p152;
	selp.b32 	%r434, %r554, %r515, %p152;
	selp.b32 	%r555, %r516, %r514, %p152;
	shfl.sync.bfly.b32	%r556, %r555, 8, 31, -1;
	selp.b32 	%r441, %r514, %r556, %p152;
	selp.b32 	%r442, %r556, %r516, %p152;
	selp.b32 	%r557, %r531, %r529, %p152;
	shfl.sync.bfly.b32	%r558, %r557, 8, 31, -1;
	selp.b32 	%r449, %r529, %r558, %p152;
	selp.b32 	%r450, %r558, %r531, %p152;
	selp.b32 	%r559, %r532, %r530, %p152;
	shfl.sync.bfly.b32	%r560, %r559, 8, 31, -1;
	selp.b32 	%r457, %r530, %r560, %p152;
	selp.b32 	%r458, %r560, %r532, %p152;
	selp.b32 	%r561, %r547, %r545, %p152;
	shfl.sync.bfly.b32	%r562, %r561, 8, 31, -1;
	selp.b32 	%r465, %r545, %r562, %p152;
	selp.b32 	%r466, %r562, %r547, %p152;
	selp.b32 	%r563, %r548, %r546, %p152;
	shfl.sync.bfly.b32	%r564, %r563, 8, 31, -1;
	selp.b32 	%r473, %r546, %r564, %p152;
	selp.b32 	%r474, %r564, %r548, %p152;
	mov.u32 	%r475, 21520;
	// begin inline asm
	prmt.b32 %r416, %r417, %r418, %r475;
	// end inline asm
	mov.u32 	%r479, 30258;
	// begin inline asm
	prmt.b32 %r420, %r417, %r418, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r424, %r425, %r426, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r428, %r425, %r426, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r432, %r433, %r434, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r436, %r433, %r434, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r440, %r441, %r442, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r444, %r441, %r442, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r448, %r449, %r450, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r452, %r449, %r450, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r456, %r457, %r458, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r460, %r457, %r458, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r464, %r465, %r466, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r468, %r465, %r466, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r472, %r473, %r474, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r476, %r473, %r474, %r479;
	// end inline asm
	st.shared.u32 	[%rd9], %r416;
	st.shared.u32 	[%rd10+128], %r420;
	st.shared.u32 	[%rd10+4], %r424;
	st.shared.u32 	[%rd10+132], %r428;
	st.shared.u32 	[%rd9+8324], %r432;
	st.shared.u32 	[%rd11], %r436;
	st.shared.u32 	[%rd12], %r440;
	st.shared.u32 	[%rd13], %r444;
	st.shared.u32 	[%rd9+16648], %r448;
	st.shared.u32 	[%rd14], %r452;
	st.shared.u32 	[%rd15], %r456;
	st.shared.u32 	[%rd16], %r460;
	st.shared.u32 	[%rd9+24972], %r464;
	st.shared.u32 	[%rd17], %r468;
	st.shared.u32 	[%rd18], %r472;
	st.shared.u32 	[%rd19], %r476;
	bar.sync 	0;
	or.b32  	%r565, %r42, %r55;
	or.b32  	%r43, %r23, %r565;
	shr.u32 	%r2531, %r43, 6;
	mov.u64 	%rd144, %rd23;
	mov.u64 	%rd145, %rd22;
	mov.u64 	%rd146, %rd21;
	mov.u64 	%rd147, %rd20;
	mov.u32 	%r2532, %r2525;
	mov.u32 	%r2533, %r2524;
	mov.u32 	%r2534, %r2523;
	mov.u32 	%r2535, %r2522;
	mov.u32 	%r2540, %r2516;
	mov.u32 	%r2541, %r2521;
	mov.u32 	%r2542, %r2520;
	mov.u32 	%r2543, %r2519;
	mov.u32 	%r2544, %r2518;
$L__BB0_32:                             // %pass5640
                                        //   Parent Loop BB0_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2525, %r2539;
	mov.u32 	%r2524, %r2538;
	mov.u32 	%r2523, %r2537;
	mov.u32 	%r2522, %r2536;
	mov.u32 	%r2518, %r2535;
	mov.u32 	%r2519, %r2534;
	mov.u32 	%r2520, %r2533;
	mov.u32 	%r2521, %r2532;
	add.s32 	%r2378, %r43, %r2540;
	bfe.s32 	%r2379, %r2378, 3, 1;
	and.b32  	%r2380, %r2379, 130;
	bfe.s32 	%r2381, %r2378, 4, 1;
	and.b32  	%r2382, %r2381, 65;
	bfe.s32 	%r2383, %r2378, 2, 1;
	and.b32  	%r2384, %r2383, 260;
	bfe.s32 	%r2385, %r2378, 1, 1;
	and.b32  	%r2386, %r2385, 520;
	and.b32  	%r2387, %r2378, 1;
	neg.s32 	%r2388, %r2387;
	and.b32  	%r2389, %r2388, 1040;
	and.b32  	%r2390, %r2531, 3;
	mul.lo.s32 	%r2391, %r2390, 2081;
	or.b32  	%r2392, %r2389, %r24;
	add.s32 	%r2393, %r2392, %r2380;
	add.s32 	%r2394, %r2393, %r2382;
	add.s32 	%r2395, %r2394, %r2384;
	add.s32 	%r2396, %r2395, %r2386;
	add.s32 	%r2397, %r2396, %r2391;
	mul.wide.u32 	%rd83, %r2397, 4;
	add.s64 	%rd85, %rd45, %rd83;
	ld.shared.u32 	%r2536, [%rd85];
	// begin inline asm
	mov.b32 %r571, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r582, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r570, %r2536, -2004318072;
	mov.u32 	%r569, 983055;
	// begin inline asm
	lop3.b32 %r568, %r569, %r570, %r571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r572, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r573, %r571, %r572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r576, %r568, %r573;
	// end inline asm
	mov.u32 	%r580, 15728880;
	// begin inline asm
	lop3.b32 %r579, %r580, %r570, %r582, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r583, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r584, %r582, %r583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r587, %r579, %r584;
	// end inline asm
	shr.u32 	%r592, %r570, 8;
	// begin inline asm
	lop3.b32 %r590, %r569, %r592, %r571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r594, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r595, %r571, %r594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r598, %r590, %r595;
	// end inline asm
	// begin inline asm
	lop3.b32 %r601, %r580, %r592, %r582, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r605, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r606, %r582, %r605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r609, %r601, %r606;
	// end inline asm
	// begin inline asm
	mov.b32 %r617, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r628, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r616, %r2544, -2004318072;
	// begin inline asm
	lop3.b32 %r614, %r569, %r616, %r617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r618, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r619, %r617, %r618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r622, %r614, %r619;
	// end inline asm
	// begin inline asm
	lop3.b32 %r625, %r580, %r616, %r628, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r629, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r630, %r628, %r629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r633, %r625, %r630;
	// end inline asm
	shr.u32 	%r638, %r616, 8;
	// begin inline asm
	lop3.b32 %r636, %r569, %r638, %r617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r640, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r641, %r617, %r640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r644, %r636, %r641;
	// end inline asm
	// begin inline asm
	lop3.b32 %r647, %r580, %r638, %r628, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r651, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r652, %r628, %r651;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r655, %r647, %r652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r660, %r156, %r622, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r666, %r156, %r633, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r672, %r156, %r644, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r678, %r156, %r655, %r2516;
	// end inline asm
	// begin inline asm
	mov.b32 %r687, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r698, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r686, %r2518, -2004318072;
	// begin inline asm
	lop3.b32 %r684, %r569, %r686, %r687, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r688, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r689, %r687, %r688;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r692, %r684, %r689;
	// end inline asm
	// begin inline asm
	lop3.b32 %r695, %r580, %r686, %r698, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r699, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r700, %r698, %r699;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r703, %r695, %r700;
	// end inline asm
	shr.u32 	%r708, %r686, 8;
	// begin inline asm
	lop3.b32 %r706, %r569, %r708, %r687, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r710, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r711, %r687, %r710;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r714, %r706, %r711;
	// end inline asm
	// begin inline asm
	lop3.b32 %r717, %r580, %r708, %r698, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r721, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r722, %r698, %r721;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r725, %r717, %r722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r728, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r730, %r728, %r692, %r660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r734, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r736, %r734, %r703, %r666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r740, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r742, %r740, %r714, %r672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r746, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r748, %r746, %r725, %r678;
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r756, %r2522, -2004318072;
	// begin inline asm
	lop3.b32 %r754, %r569, %r756, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r758, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r759, %r757, %r758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r762, %r754, %r759;
	// end inline asm
	// begin inline asm
	lop3.b32 %r765, %r580, %r756, %r768, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r769, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r770, %r768, %r769;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r773, %r765, %r770;
	// end inline asm
	shr.u32 	%r778, %r756, 8;
	// begin inline asm
	lop3.b32 %r776, %r569, %r778, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r780, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r781, %r757, %r780;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r784, %r776, %r781;
	// end inline asm
	// begin inline asm
	lop3.b32 %r787, %r580, %r778, %r768, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r791, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r792, %r768, %r791;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r795, %r787, %r792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r800, %r218, %r762, %r730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r806, %r218, %r773, %r736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r812, %r218, %r784, %r742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r818, %r218, %r795, %r748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r822, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r853, %r822, %r576, %r800;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r828, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r850, %r828, %r587, %r806;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r834, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r862, %r834, %r598, %r812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r840, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r859, %r840, %r609, %r818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r846, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r848, %r846, %r850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r851, %r252, %r853, %r848;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r855, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r857, %r855, %r859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r860, %r252, %r862, %r857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r864, %r255, %r853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r867, %r252, %r850, %r864;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r871, %r255, %r862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r874, %r252, %r859, %r871;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r905, %r902}, {%r258, %r264, %r261, %r267}, {%r851, %r867}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r914, %r911}, {%r258, %r264, %r261, %r267}, {%r860, %r874}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r898, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r900, %r898, %r902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r903, %r270, %r905, %r900;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r907, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r909, %r907, %r911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r912, %r270, %r914, %r909;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r916, %r273, %r905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r919, %r270, %r902, %r916;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r923, %r273, %r914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r926, %r270, %r911, %r923;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r930, %r931}, {%r276, %r282, %r279, %r285}, {%r903, %r919}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r940, %r941}, {%r276, %r282, %r279, %r285}, {%r912, %r926}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r950, %r50, %r930;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r953, %r50, %r931;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r956, %r50, %r940;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r959, %r50, %r941;
	// end inline asm
	// begin inline asm
	mov.b32 %r962, {%rs260, %rs260};
	// end inline asm
	mov.u16 	%rs51, 18176;
	// begin inline asm
	mov.b32 %r963, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r964, %r950, %r962;
	// end inline asm
	// begin inline asm
	min.f16x2 %r967, %r964, %r963;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r972, %r953, %r970;
	// end inline asm
	// begin inline asm
	min.f16x2 %r975, %r972, %r971;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r979, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r980, %r956, %r978;
	// end inline asm
	// begin inline asm
	min.f16x2 %r983, %r980, %r979;
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r988, %r959, %r986;
	// end inline asm
	// begin inline asm
	min.f16x2 %r991, %r988, %r987;
	// end inline asm
	mov.u16 	%rs65, 26112;
	// begin inline asm
	mov.b32 %r997, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r995, %r967, %r997;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r998, %r975, %r997;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r983, %r997;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1004, %r991, %r997;
	// end inline asm
	mov.u32 	%r1010, 25152;
	// begin inline asm
	prmt.b32 %r1007, %r995, %r1001, %r1010;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1011, %r998, %r1004, %r1010;
	// end inline asm
	shl.b32 	%r1018, %r1011, 4;
	mov.u32 	%r1016, 252645135;
	// begin inline asm
	lop3.b32 %r1015, %r1016, %r1007, %r1018, 202;
	// end inline asm
	st.shared.u32 	[%rd144], %r1015;
	or.b32  	%r2398, %r2389, %r25;
	add.s32 	%r2399, %r2398, %r2380;
	add.s32 	%r2400, %r2399, %r2382;
	add.s32 	%r2401, %r2400, %r2384;
	add.s32 	%r2402, %r2401, %r2386;
	add.s32 	%r2403, %r2402, %r2391;
	mul.wide.u32 	%rd86, %r2403, 4;
	add.s64 	%rd87, %rd45, %rd86;
	ld.shared.u32 	%r2537, [%rd87];
	// begin inline asm
	mov.b32 %r1024, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1023, %r2537, -2004318072;
	// begin inline asm
	lop3.b32 %r1021, %r569, %r1023, %r1024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1025, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1026, %r1024, %r1025;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1029, %r1021, %r1026;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1032, %r580, %r1023, %r1035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1036, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1037, %r1035, %r1036;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1040, %r1032, %r1037;
	// end inline asm
	shr.u32 	%r1045, %r1023, 8;
	// begin inline asm
	lop3.b32 %r1043, %r569, %r1045, %r1024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1047, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1048, %r1024, %r1047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1051, %r1043, %r1048;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1054, %r580, %r1045, %r1035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1058, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1059, %r1035, %r1058;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1062, %r1054, %r1059;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1081, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1069, %r2543, -2004318072;
	// begin inline asm
	lop3.b32 %r1067, %r569, %r1069, %r1070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1071, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1072, %r1070, %r1071;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1075, %r1067, %r1072;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1078, %r580, %r1069, %r1081, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1082, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1083, %r1081, %r1082;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1086, %r1078, %r1083;
	// end inline asm
	shr.u32 	%r1091, %r1069, 8;
	// begin inline asm
	lop3.b32 %r1089, %r569, %r1091, %r1070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1093, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1094, %r1070, %r1093;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1097, %r1089, %r1094;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1100, %r580, %r1091, %r1081, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1104, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1105, %r1081, %r1104;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1108, %r1100, %r1105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r156, %r1075, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r156, %r1086, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r156, %r1097, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r156, %r1108, %r2516;
	// end inline asm
	// begin inline asm
	mov.b32 %r1140, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1151, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1139, %r2519, -2004318072;
	// begin inline asm
	lop3.b32 %r1137, %r569, %r1139, %r1140, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1141, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1142, %r1140, %r1141;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1145, %r1137, %r1142;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1148, %r580, %r1139, %r1151, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1152, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1153, %r1151, %r1152;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1156, %r1148, %r1153;
	// end inline asm
	shr.u32 	%r1161, %r1139, 8;
	// begin inline asm
	lop3.b32 %r1159, %r569, %r1161, %r1140, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1163, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1164, %r1140, %r1163;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1167, %r1159, %r1164;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1170, %r580, %r1161, %r1151, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1174, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1175, %r1151, %r1174;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1178, %r1170, %r1175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1181, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r1181, %r1145, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1187, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1189, %r1187, %r1156, %r1119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1193, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r1193, %r1167, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1199, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r1199, %r1178, %r1131;
	// end inline asm
	// begin inline asm
	mov.b32 %r1210, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1221, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1209, %r2523, -2004318072;
	// begin inline asm
	lop3.b32 %r1207, %r569, %r1209, %r1210, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1211, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1212, %r1210, %r1211;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1215, %r1207, %r1212;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1218, %r580, %r1209, %r1221, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1222, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1223, %r1221, %r1222;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1226, %r1218, %r1223;
	// end inline asm
	shr.u32 	%r1231, %r1209, 8;
	// begin inline asm
	lop3.b32 %r1229, %r569, %r1231, %r1210, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1233, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1234, %r1210, %r1233;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1237, %r1229, %r1234;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1240, %r580, %r1231, %r1221, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1244, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1245, %r1221, %r1244;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1248, %r1240, %r1245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1253, %r218, %r1215, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1259, %r218, %r1226, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1265, %r218, %r1237, %r1195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1271, %r218, %r1248, %r1201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1275, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1306, %r1275, %r1029, %r1253;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1281, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1303, %r1281, %r1040, %r1259;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1287, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1315, %r1287, %r1051, %r1265;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1293, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1312, %r1293, %r1062, %r1271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1299, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1301, %r1299, %r1303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1304, %r252, %r1306, %r1301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1308, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1310, %r1308, %r1312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1313, %r252, %r1315, %r1310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1317, %r255, %r1306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1320, %r252, %r1303, %r1317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1324, %r255, %r1315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1327, %r252, %r1312, %r1324;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1358, %r1355}, {%r258, %r264, %r261, %r267}, {%r1304, %r1320}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1367, %r1364}, {%r258, %r264, %r261, %r267}, {%r1313, %r1327}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1351, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1353, %r1351, %r1355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1356, %r270, %r1358, %r1353;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1360, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1362, %r1360, %r1364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1365, %r270, %r1367, %r1362;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1369, %r273, %r1358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1372, %r270, %r1355, %r1369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1376, %r273, %r1367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1379, %r270, %r1364, %r1376;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1383, %r1384}, {%r276, %r282, %r279, %r285}, {%r1356, %r1372}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1393, %r1394}, {%r276, %r282, %r279, %r285}, {%r1365, %r1379}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1403, %r50, %r1383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1406, %r50, %r1384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1409, %r50, %r1393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1412, %r50, %r1394;
	// end inline asm
	// begin inline asm
	mov.b32 %r1415, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1416, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1417, %r1403, %r1415;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1420, %r1417, %r1416;
	// end inline asm
	// begin inline asm
	mov.b32 %r1423, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1424, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1425, %r1406, %r1423;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1428, %r1425, %r1424;
	// end inline asm
	// begin inline asm
	mov.b32 %r1431, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1432, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1433, %r1409, %r1431;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1436, %r1433, %r1432;
	// end inline asm
	// begin inline asm
	mov.b32 %r1439, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1440, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1441, %r1412, %r1439;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1444, %r1441, %r1440;
	// end inline asm
	// begin inline asm
	mov.b32 %r1450, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1448, %r1420, %r1450;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1451, %r1428, %r1450;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1454, %r1436, %r1450;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1457, %r1444, %r1450;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1460, %r1448, %r1454, %r1010;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1464, %r1451, %r1457, %r1010;
	// end inline asm
	shl.b32 	%r1471, %r1464, 4;
	// begin inline asm
	lop3.b32 %r1468, %r1016, %r1460, %r1471, 202;
	// end inline asm
	st.shared.u32 	[%rd145], %r1468;
	add.s32 	%r2404, %r2389, %r26;
	add.s32 	%r2405, %r2404, %r2380;
	add.s32 	%r2406, %r2405, %r2382;
	add.s32 	%r2407, %r2406, %r2384;
	add.s32 	%r2408, %r2407, %r2386;
	add.s32 	%r2409, %r2408, %r2391;
	mul.wide.u32 	%rd88, %r2409, 4;
	add.s64 	%rd89, %rd45, %rd88;
	ld.shared.u32 	%r2538, [%rd89];
	// begin inline asm
	mov.b32 %r1477, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1488, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1476, %r2538, -2004318072;
	// begin inline asm
	lop3.b32 %r1474, %r569, %r1476, %r1477, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1478, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1479, %r1477, %r1478;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1482, %r1474, %r1479;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1485, %r580, %r1476, %r1488, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1489, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1490, %r1488, %r1489;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1493, %r1485, %r1490;
	// end inline asm
	shr.u32 	%r1498, %r1476, 8;
	// begin inline asm
	lop3.b32 %r1496, %r569, %r1498, %r1477, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1500, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1501, %r1477, %r1500;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1504, %r1496, %r1501;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1507, %r580, %r1498, %r1488, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1511, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1512, %r1488, %r1511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1515, %r1507, %r1512;
	// end inline asm
	// begin inline asm
	mov.b32 %r1523, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1534, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1522, %r2542, -2004318072;
	// begin inline asm
	lop3.b32 %r1520, %r569, %r1522, %r1523, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1524, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1525, %r1523, %r1524;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1528, %r1520, %r1525;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1531, %r580, %r1522, %r1534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1535, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1536, %r1534, %r1535;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1539, %r1531, %r1536;
	// end inline asm
	shr.u32 	%r1544, %r1522, 8;
	// begin inline asm
	lop3.b32 %r1542, %r569, %r1544, %r1523, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1546, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1547, %r1523, %r1546;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1550, %r1542, %r1547;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1553, %r580, %r1544, %r1534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1557, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1558, %r1534, %r1557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1561, %r1553, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r156, %r1528, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r156, %r1539, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1578, %r156, %r1550, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r156, %r1561, %r2516;
	// end inline asm
	// begin inline asm
	mov.b32 %r1593, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1604, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1592, %r2520, -2004318072;
	// begin inline asm
	lop3.b32 %r1590, %r569, %r1592, %r1593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1594, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1595, %r1593, %r1594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1598, %r1590, %r1595;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1601, %r580, %r1592, %r1604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1605, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1606, %r1604, %r1605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1609, %r1601, %r1606;
	// end inline asm
	shr.u32 	%r1614, %r1592, 8;
	// begin inline asm
	lop3.b32 %r1612, %r569, %r1614, %r1593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1616, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1617, %r1593, %r1616;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1620, %r1612, %r1617;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1623, %r580, %r1614, %r1604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1627, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1628, %r1604, %r1627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1631, %r1623, %r1628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1634, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1636, %r1634, %r1598, %r1566;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1640, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1642, %r1640, %r1609, %r1572;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1646, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r1646, %r1620, %r1578;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1652, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1652, %r1631, %r1584;
	// end inline asm
	// begin inline asm
	mov.b32 %r1663, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1674, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1662, %r2524, -2004318072;
	// begin inline asm
	lop3.b32 %r1660, %r569, %r1662, %r1663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1664, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1665, %r1663, %r1664;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1668, %r1660, %r1665;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1671, %r580, %r1662, %r1674, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1675, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1676, %r1674, %r1675;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1679, %r1671, %r1676;
	// end inline asm
	shr.u32 	%r1684, %r1662, 8;
	// begin inline asm
	lop3.b32 %r1682, %r569, %r1684, %r1663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1686, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1687, %r1663, %r1686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1690, %r1682, %r1687;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1693, %r580, %r1684, %r1674, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1697, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1698, %r1674, %r1697;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1701, %r1693, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r218, %r1668, %r1636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r218, %r1679, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r218, %r1690, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r218, %r1701, %r1654;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r1728, %r1482, %r1706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1734, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r1734, %r1493, %r1712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r1740, %r1504, %r1718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1746, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r1746, %r1515, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r252, %r1759, %r1754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1761, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r1761, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r252, %r1768, %r1763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r255, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r252, %r1756, %r1770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r255, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r252, %r1765, %r1777;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1811, %r1808}, {%r258, %r264, %r261, %r267}, {%r1757, %r1773}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1820, %r1817}, {%r258, %r264, %r261, %r267}, {%r1766, %r1780}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1804, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1806, %r1804, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r270, %r1811, %r1806;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1813, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1815, %r1813, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r270, %r1820, %r1815;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r273, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r270, %r1808, %r1822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1829, %r273, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r270, %r1817, %r1829;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1836, %r1837}, {%r276, %r282, %r279, %r285}, {%r1809, %r1825}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1846, %r1847}, {%r276, %r282, %r279, %r285}, {%r1818, %r1832}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1856, %r50, %r1836;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1859, %r50, %r1837;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r50, %r1846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1865, %r50, %r1847;
	// end inline asm
	// begin inline asm
	mov.b32 %r1868, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1869, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1870, %r1856, %r1868;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1873, %r1870, %r1869;
	// end inline asm
	// begin inline asm
	mov.b32 %r1876, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1877, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1878, %r1859, %r1876;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1881, %r1878, %r1877;
	// end inline asm
	// begin inline asm
	mov.b32 %r1884, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1885, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1886, %r1862, %r1884;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1889, %r1886, %r1885;
	// end inline asm
	// begin inline asm
	mov.b32 %r1892, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1893, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1894, %r1865, %r1892;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1897, %r1894, %r1893;
	// end inline asm
	// begin inline asm
	mov.b32 %r1903, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1901, %r1873, %r1903;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1904, %r1881, %r1903;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1907, %r1889, %r1903;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1910, %r1897, %r1903;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1913, %r1901, %r1907, %r1010;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1917, %r1904, %r1910, %r1010;
	// end inline asm
	shl.b32 	%r1924, %r1917, 4;
	// begin inline asm
	lop3.b32 %r1921, %r1016, %r1913, %r1924, 202;
	// end inline asm
	st.shared.u32 	[%rd146], %r1921;
	add.s32 	%r2410, %r2389, %r27;
	add.s32 	%r2411, %r2410, %r2380;
	add.s32 	%r2412, %r2411, %r2382;
	add.s32 	%r2413, %r2412, %r2384;
	add.s32 	%r2414, %r2413, %r2386;
	add.s32 	%r2415, %r2414, %r2391;
	mul.wide.u32 	%rd90, %r2415, 4;
	add.s64 	%rd91, %rd45, %rd90;
	ld.shared.u32 	%r2539, [%rd91];
	// begin inline asm
	mov.b32 %r1930, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1941, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1929, %r2539, -2004318072;
	// begin inline asm
	lop3.b32 %r1927, %r569, %r1929, %r1930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1931, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1932, %r1930, %r1931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1935, %r1927, %r1932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1938, %r580, %r1929, %r1941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1942, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1943, %r1941, %r1942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1946, %r1938, %r1943;
	// end inline asm
	shr.u32 	%r1951, %r1929, 8;
	// begin inline asm
	lop3.b32 %r1949, %r569, %r1951, %r1930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1953, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1954, %r1930, %r1953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1957, %r1949, %r1954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1960, %r580, %r1951, %r1941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1964, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1965, %r1941, %r1964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1968, %r1960, %r1965;
	// end inline asm
	// begin inline asm
	mov.b32 %r1976, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1987, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1975, %r2541, -2004318072;
	// begin inline asm
	lop3.b32 %r1973, %r569, %r1975, %r1976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1977, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1978, %r1976, %r1977;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1981, %r1973, %r1978;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1984, %r580, %r1975, %r1987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1988, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1989, %r1987, %r1988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1992, %r1984, %r1989;
	// end inline asm
	shr.u32 	%r1997, %r1975, 8;
	// begin inline asm
	lop3.b32 %r1995, %r569, %r1997, %r1976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1999, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2000, %r1976, %r1999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2003, %r1995, %r2000;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2006, %r580, %r1997, %r1987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2010, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2011, %r1987, %r2010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2014, %r2006, %r2011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2019, %r156, %r1981, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r156, %r1992, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r156, %r2003, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r156, %r2014, %r2516;
	// end inline asm
	// begin inline asm
	mov.b32 %r2046, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2057, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2045, %r2521, -2004318072;
	// begin inline asm
	lop3.b32 %r2043, %r569, %r2045, %r2046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2047, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2048, %r2046, %r2047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2051, %r2043, %r2048;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2054, %r580, %r2045, %r2057, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2058, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2059, %r2057, %r2058;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2062, %r2054, %r2059;
	// end inline asm
	shr.u32 	%r2067, %r2045, 8;
	// begin inline asm
	lop3.b32 %r2065, %r569, %r2067, %r2046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2069, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2070, %r2046, %r2069;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2073, %r2065, %r2070;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2076, %r580, %r2067, %r2057, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2080, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2081, %r2057, %r2080;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2084, %r2076, %r2081;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2087, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2089, %r2087, %r2051, %r2019;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2093, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2095, %r2093, %r2062, %r2025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2099, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r2099, %r2073, %r2031;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2105, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2107, %r2105, %r2084, %r2037;
	// end inline asm
	// begin inline asm
	mov.b32 %r2116, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2127, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2115, %r2525, -2004318072;
	// begin inline asm
	lop3.b32 %r2113, %r569, %r2115, %r2116, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2117, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2118, %r2116, %r2117;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2121, %r2113, %r2118;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2124, %r580, %r2115, %r2127, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2128, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2129, %r2127, %r2128;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2132, %r2124, %r2129;
	// end inline asm
	shr.u32 	%r2137, %r2115, 8;
	// begin inline asm
	lop3.b32 %r2135, %r569, %r2137, %r2116, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2139, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2140, %r2116, %r2139;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2143, %r2135, %r2140;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2146, %r580, %r2137, %r2127, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2150, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2151, %r2127, %r2150;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2154, %r2146, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2159, %r218, %r2121, %r2089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2165, %r218, %r2132, %r2095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r218, %r2143, %r2101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r218, %r2154, %r2107;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2181, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r2181, %r1935, %r2159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2187, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r2187, %r1946, %r2165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2193, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2221, %r2193, %r1957, %r2171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r2199, %r1968, %r2177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2205, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2207, %r2205, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2210, %r252, %r2212, %r2207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2214, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2216, %r2214, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2219, %r252, %r2221, %r2216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2223, %r255, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r252, %r2209, %r2223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r255, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r252, %r2218, %r2230;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2264, %r2261}, {%r258, %r264, %r261, %r267}, {%r2210, %r2226}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2273, %r2270}, {%r258, %r264, %r261, %r267}, {%r2219, %r2233}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2257, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2259, %r2257, %r2261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2262, %r270, %r2264, %r2259;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2266, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2268, %r2266, %r2270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2271, %r270, %r2273, %r2268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2275, %r273, %r2264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2278, %r270, %r2261, %r2275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r273, %r2273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r270, %r2270, %r2282;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2289, %r2290}, {%r276, %r282, %r279, %r285}, {%r2262, %r2278}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2299, %r2300}, {%r276, %r282, %r279, %r285}, {%r2271, %r2285}, {%r2516, %r2516};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2309, %r50, %r2289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2312, %r50, %r2290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2315, %r50, %r2299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2318, %r50, %r2300;
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2322, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2323, %r2309, %r2321;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2326, %r2323, %r2322;
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2331, %r2312, %r2329;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2334, %r2331, %r2330;
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2338, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2339, %r2315, %r2337;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2342, %r2339, %r2338;
	// end inline asm
	// begin inline asm
	mov.b32 %r2345, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2346, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2347, %r2318, %r2345;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2350, %r2347, %r2346;
	// end inline asm
	// begin inline asm
	mov.b32 %r2356, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2354, %r2326, %r2356;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2357, %r2334, %r2356;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2342, %r2356;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2350, %r2356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2366, %r2354, %r2360, %r1010;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2370, %r2357, %r2363, %r1010;
	// end inline asm
	shl.b32 	%r2377, %r2370, 4;
	// begin inline asm
	lop3.b32 %r2374, %r1016, %r2366, %r2377, 202;
	// end inline asm
	st.shared.u32 	[%rd147], %r2374;
	add.s32 	%r2540, %r2540, 64;
	add.s64 	%rd147, %rd147, 8324;
	add.s64 	%rd146, %rd146, 8324;
	add.s64 	%rd145, %rd145, 8324;
	add.s64 	%rd144, %rd144, 8324;
	add.s32 	%r2531, %r2531, 1;
	setp.eq.s32 	%p165, %r2540, 256;
	mov.u32 	%r2532, %r2525;
	mov.u32 	%r2533, %r2524;
	mov.u32 	%r2534, %r2523;
	mov.u32 	%r2535, %r2522;
	mov.u32 	%r2541, %r2521;
	mov.u32 	%r2542, %r2520;
	mov.u32 	%r2543, %r2519;
	mov.u32 	%r2544, %r2518;
	@%p165 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;
$L__BB0_33:                             // %guard_exit10925
                                        //   in Loop: Header=BB0_31 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2421, [%rd6];
	ld.shared.u32 	%r2422, [%rd7+128];
	ld.shared.u32 	%r2429, [%rd7+4];
	ld.shared.u32 	%r2430, [%rd7+132];
	ld.shared.u32 	%r2437, [%rd6+8324];
	ld.shared.u32 	%r2438, [%rd7+8452];
	ld.shared.u32 	%r2445, [%rd7+8328];
	ld.shared.u32 	%r2446, [%rd7+8456];
	ld.shared.u32 	%r2453, [%rd6+16648];
	ld.shared.u32 	%r2454, [%rd7+16776];
	ld.shared.u32 	%r2461, [%rd7+16652];
	ld.shared.u32 	%r2462, [%rd7+16780];
	ld.shared.u32 	%r2469, [%rd6+24972];
	ld.shared.u32 	%r2470, [%rd7+25100];
	ld.shared.u32 	%r2477, [%rd7+24976];
	ld.shared.u32 	%r2478, [%rd7+25104];
	// begin inline asm
	prmt.b32 %r2416, %r2421, %r2422, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2420, %r2421, %r2422, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2424, %r2429, %r2430, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2428, %r2429, %r2430, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2432, %r2437, %r2438, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2436, %r2437, %r2438, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2440, %r2445, %r2446, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2444, %r2445, %r2446, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2448, %r2453, %r2454, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2452, %r2453, %r2454, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2456, %r2461, %r2462, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2460, %r2461, %r2462, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2464, %r2469, %r2470, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2468, %r2469, %r2470, %r479;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2472, %r2477, %r2478, %r475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2476, %r2477, %r2478, %r479;
	// end inline asm
	selp.b32 	%r2480, %r2420, %r2416, %p152;
	shfl.sync.bfly.b32	%r85, %r2480, 8, 31, -1;
	selp.b32 	%r2481, %r2428, %r2424, %p152;
	shfl.sync.bfly.b32	%r86, %r2481, 8, 31, -1;
	selp.b32 	%r2482, %r2436, %r2432, %p152;
	shfl.sync.bfly.b32	%r2483, %r2482, 8, 31, -1;
	selp.b32 	%r2484, %r2444, %r2440, %p152;
	shfl.sync.bfly.b32	%r2485, %r2484, 8, 31, -1;
	selp.b32 	%r2486, %r2452, %r2448, %p152;
	shfl.sync.bfly.b32	%r2487, %r2486, 8, 31, -1;
	selp.b32 	%r2488, %r2460, %r2456, %p152;
	shfl.sync.bfly.b32	%r2489, %r2488, 8, 31, -1;
	selp.b32 	%r2490, %r2468, %r2464, %p152;
	shfl.sync.bfly.b32	%r2491, %r2490, 8, 31, -1;
	selp.b32 	%r2492, %r2476, %r2472, %p152;
	shfl.sync.bfly.b32	%r2493, %r2492, 8, 31, -1;
	and.b32  	%r2494, %r42, 65280;
	setp.eq.s32 	%p167, %r2494, 0;
	shl.b32 	%r2517, %r42, 9;
	@%p167 bra 	$L__BB0_35;
// %bb.34:                              // %pass10063
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r2495, %r86, %r2428, %p152;
	selp.b32 	%r2496, %r2424, %r86, %p152;
	selp.b32 	%r2497, %r85, %r2420, %p152;
	selp.b32 	%r2498, %r2416, %r85, %p152;
	or.b32  	%r2500, %r2517, %r28;
	or.b32  	%r2501, %r2500, %r29;
	cvt.u64.u32 	%rd92, %r2501;
	add.s64 	%rd93, %rd92, %rd8;
	shr.u64 	%rd94, %rd93, 39;
	add.s64 	%rd95, %rd93, %rd94;
	shr.s64 	%rd96, %rd95, 25;
	setp.lt.s64 	%p169, %rd93, 0;
	and.b64  	%rd97, %rd95, -33554432;
	setp.ne.s64 	%p170, %rd97, %rd93;
	and.pred  	%p171, %p169, %p170;
	selp.u64 	%rd98, 1, 0, %p171;
	sub.s64 	%rd99, %rd98, %rd96;
	shl.b64 	%rd100, %rd99, 25;
	add.s64 	%rd101, %rd100, %rd93;
	shl.b64 	%rd102, %rd101, 2;
	add.s64 	%rd103, %rd3, %rd102;
	st.global.v4.u32 	[%rd103], {%r2498, %r2496, %r2497, %r2495};
$L__BB0_35:                             // %pass10113
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r79, %r42, 64;
	setp.lt.u32 	%p172, %r79, 192;
	@%p172 bra 	$L__BB0_37;
// %bb.36:                              // %pass10170
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r87, %r2432, %r2483, %p152;
	selp.b32 	%r88, %r2483, %r2436, %p152;
	selp.b32 	%r89, %r2440, %r2485, %p152;
	selp.b32 	%r90, %r2485, %r2444, %p152;
	shl.b32 	%r2502, %r79, 9;
	or.b32  	%r2503, %r2502, %r28;
	or.b32  	%r2504, %r2503, %r29;
	cvt.u64.u32 	%rd104, %r2504;
	add.s64 	%rd105, %rd104, %rd8;
	shr.u64 	%rd106, %rd105, 39;
	add.s64 	%rd107, %rd105, %rd106;
	shr.s64 	%rd108, %rd107, 25;
	setp.lt.s64 	%p173, %rd105, 0;
	and.b64  	%rd109, %rd107, -33554432;
	setp.ne.s64 	%p174, %rd109, %rd105;
	and.pred  	%p175, %p173, %p174;
	selp.u64 	%rd110, 1, 0, %p175;
	sub.s64 	%rd111, %rd110, %rd108;
	shl.b64 	%rd112, %rd111, 25;
	add.s64 	%rd113, %rd112, %rd105;
	shl.b64 	%rd114, %rd113, 2;
	add.s64 	%rd115, %rd3, %rd114;
	st.global.v4.u32 	[%rd115], {%r87, %r89, %r88, %r90};
$L__BB0_37:                             // %pass10220
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r80, %r42, 128;
	selp.b32 	%r95, %r2464, %r2491, %p152;
	selp.b32 	%r96, %r2491, %r2468, %p152;
	selp.b32 	%r97, %r2472, %r2493, %p152;
	selp.b32 	%r98, %r2493, %r2476, %p152;
	setp.lt.u32 	%p176, %r80, 192;
	@%p176 bra 	$L__BB0_39;
// %bb.38:                              // %pass10277
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r91, %r2448, %r2487, %p152;
	selp.b32 	%r92, %r2487, %r2452, %p152;
	selp.b32 	%r93, %r2456, %r2489, %p152;
	selp.b32 	%r94, %r2489, %r2460, %p152;
	shl.b32 	%r2505, %r80, 9;
	or.b32  	%r2506, %r2505, %r28;
	or.b32  	%r2507, %r2506, %r29;
	cvt.u64.u32 	%rd116, %r2507;
	add.s64 	%rd117, %rd116, %rd8;
	shr.u64 	%rd118, %rd117, 39;
	add.s64 	%rd119, %rd117, %rd118;
	shr.s64 	%rd120, %rd119, 25;
	setp.lt.s64 	%p177, %rd117, 0;
	and.b64  	%rd121, %rd119, -33554432;
	setp.ne.s64 	%p178, %rd121, %rd117;
	and.pred  	%p179, %p177, %p178;
	selp.u64 	%rd122, 1, 0, %p179;
	sub.s64 	%rd123, %rd122, %rd120;
	shl.b64 	%rd124, %rd123, 25;
	add.s64 	%rd125, %rd124, %rd117;
	shl.b64 	%rd126, %rd125, 2;
	add.s64 	%rd127, %rd3, %rd126;
	st.global.v4.u32 	[%rd127], {%r91, %r93, %r92, %r94};
	bra.uni 	$L__BB0_39;
$L__BB0_40:                             // %L23132
	st.global.u32 	[%rd5], %r2516;
	ret;
$L__BB0_9:                              // %L180
	mov.u32 	%r2515, 2;
	st.global.u32 	[%rd5], %r2515;
	mov.u64 	%rd142, exception2065;
	cvta.global.u64 	%rd143, %rd142;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd143;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r99;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L288
	mov.u32 	%r2514, 3;
	st.global.u32 	[%rd5], %r2514;
	mov.u64 	%rd140, exception2065;
	cvta.global.u64 	%rd141, %rd140;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd141;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r99;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd37, exception1;
	cvta.global.u64 	%rd38, %rd37;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd38;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r99;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd39, exception1;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r99;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
