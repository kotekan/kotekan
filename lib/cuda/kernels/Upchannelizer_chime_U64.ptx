// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2065[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<186>;
	.reg .b16 	%rs<265>;
	.reg .b32 	%r<2547>;
	.reg .f32 	%f<721>;
	.reg .b64 	%rd<154>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r101, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd37, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r108, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r108, 33407;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r109, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r109, 66815;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r102, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd4, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r110, %r1, 9;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r111, %r110, %r2;
	or.b32  	%r112, %r111, %r4;
	mul.wide.u32 	%rd42, %r112, 4;
	add.s64 	%rd5, %rd4, %rd42;
	mov.u32 	%r113, 1;
	st.global.u32 	[%rd5], %r113;
	setp.gt.u32 	%p3, %r102, 65535;
	@%p3 bra 	$L__BB0_9;
// %bb.5:                               // %L133
	ld.param.u32 	%r103, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r103, %r102;
	setp.gt.s32 	%p5, %r103, 131071;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_9;
// %bb.6:                               // %L140
	ld.param.u32 	%r104, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r114, %r103, %r102;
	and.b32  	%r115, %r114, 255;
	setp.ne.s32 	%p7, %r115, 0;
	setp.gt.u32 	%p8, %r104, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_9;
// %bb.7:                               // %L151
	ld.param.u32 	%r105, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p10, %r105, %r104;
	setp.gt.s32 	%p11, %r105, 2047;
	or.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_9;
// %bb.8:                               // %L158
	not.b32 	%r116, %r104;
	add.s32 	%r117, %r116, %r105;
	and.b32  	%r118, %r117, 3;
	setp.eq.s32 	%p13, %r118, 0;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L273
	ld.param.u32 	%r106, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r106, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.11:                              // %L275
	ld.param.u32 	%r107, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p15, %r106, %r107;
	setp.lt.s32 	%p16, %r107, 17;
	and.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;
$L__BB0_13:                             // %pass191
	bfe.u32 	%r55, %r2, 2, 1;
	shr.u32 	%r56, %r2, 4;
	shl.b32 	%r126, %r56, 1;
	shl.b32 	%r127, %r55, 2;
	shl.b32 	%r128, %r2, 3;
	and.b32  	%r129, %r128, 24;
	or.b32  	%r130, %r127, %r129;
	or.b32  	%r131, %r126, %r130;
	bfe.u32 	%r132, %r2, 3, 1;
	or.b32  	%r58, %r132, %r131;
	shl.b32 	%r59, %r58, 1;
	or.b32  	%r133, %r59, -255;
	cvt.rn.f32.s32 	%f46, %r133;
	mov.f32 	%f47, 0f44008000;
	div.approx.f32 	%f42, %f46, %f47;
	mov.f32 	%f71, 0f00000000;
	mul.f32 	%f44, %f42, 0f40800000;
	setp.neu.f32 	%p23, %f44, 0f00000000;
	mov.f32 	%f720, 0f3F800000;
	mov.f32 	%f713, %f720;
	@%p23 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_15;
$L__BB0_14:                             // %L612
	add.f32 	%f74, %f44, %f44;
	mov.b32 	%r141, %f74;
	and.b32  	%r142, %r141, -2147483648;
	or.b32  	%r143, %r142, 1056964608;
	mov.b32 	%f75, %r143;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p24, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p24;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p25, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p25;
	cvt.rzi.s32.f32 	%r144, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f44;
	mul.f32 	%f83, %f82, %f82;
	fma.rn.f32 	%f84, %f83, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f85, %f83, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f86, %f84, %f83, 0fC0A55DF6;
	fma.rn.f32 	%f87, %f85, %f83, 0f4081E0CF;
	fma.rn.f32 	%f88, %f83, %f82, 0f00000000;
	fma.rn.f32 	%f89, %f87, %f83, 0fC09DE9E6;
	fma.rn.f32 	%f90, %f86, %f88, 0f00000000;
	fma.rn.f32 	%f91, %f89, %f83, 0f3F800000;
	fma.rn.f32 	%f92, %f82, 0f40490FDB, %f90;
	and.b32  	%r145, %r144, 1;
	setp.eq.b32 	%p26, %r145, 1;
	selp.f32 	%f93, %f91, %f92, %p26;
	and.b32  	%r146, %r144, 2;
	setp.eq.s32 	%p27, %r146, 0;
	sub.f32 	%f95, %f71, %f93;
	selp.f32 	%f96, %f93, %f95, %p27;
	cvt.rzi.f32.f32 	%f97, %f44;
	setp.eq.f32 	%p28, %f44, %f97;
	mul.f32 	%f98, %f44, 0f00000000;
	selp.f32 	%f99, %f98, %f96, %p28;
	mul.f32 	%f100, %f42, 0f41490FDB;
	div.approx.f32 	%f713, %f99, %f100;
$L__BB0_15:                             // %L616
	or.b32  	%r147, %r59, -191;
	cvt.rn.f32.s32 	%f104, %r147;
	div.approx.f32 	%f4, %f104, %f47;
	mul.f32 	%f6, %f4, 0f40800000;
	setp.eq.f32 	%p34, %f6, 0f00000000;
	mov.f32 	%f714, %f720;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L630
	add.f32 	%f132, %f6, %f6;
	mov.b32 	%r155, %f132;
	and.b32  	%r156, %r155, -2147483648;
	or.b32  	%r157, %r156, 1056964608;
	mov.b32 	%f133, %r157;
	add.f32 	%f134, %f132, %f133;
	cvt.rzi.f32.f32 	%f135, %f134;
	abs.f32 	%f136, %f132;
	setp.gt.f32 	%p35, %f136, 0f4B000000;
	selp.f32 	%f137, %f132, %f135, %p35;
	cvt.rzi.f32.f32 	%f138, %f132;
	setp.lt.f32 	%p36, %f136, 0f3F000000;
	selp.f32 	%f139, %f138, %f137, %p36;
	cvt.rzi.s32.f32 	%r158, %f139;
	fma.rn.f32 	%f140, %f139, 0fBF000000, %f6;
	mul.f32 	%f141, %f140, %f140;
	fma.rn.f32 	%f142, %f141, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f143, %f141, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f144, %f142, %f141, 0fC0A55DF6;
	fma.rn.f32 	%f145, %f143, %f141, 0f4081E0CF;
	fma.rn.f32 	%f146, %f141, %f140, 0f00000000;
	fma.rn.f32 	%f147, %f145, %f141, 0fC09DE9E6;
	fma.rn.f32 	%f148, %f144, %f146, 0f00000000;
	fma.rn.f32 	%f149, %f147, %f141, 0f3F800000;
	fma.rn.f32 	%f150, %f140, 0f40490FDB, %f148;
	and.b32  	%r159, %r158, 1;
	setp.eq.b32 	%p37, %r159, 1;
	selp.f32 	%f151, %f149, %f150, %p37;
	and.b32  	%r160, %r158, 2;
	setp.eq.s32 	%p38, %r160, 0;
	sub.f32 	%f153, %f71, %f151;
	selp.f32 	%f154, %f151, %f153, %p38;
	cvt.rzi.f32.f32 	%f155, %f6;
	setp.eq.f32 	%p39, %f6, %f155;
	mul.f32 	%f156, %f6, 0f00000000;
	selp.f32 	%f157, %f156, %f154, %p39;
	mul.f32 	%f158, %f4, 0f41490FDB;
	div.approx.f32 	%f714, %f157, %f158;
$L__BB0_17:                             // %L634
	or.b32  	%r164, %r59, -127;
	cvt.rn.f32.s32 	%f163, %r164;
	div.approx.f32 	%f9, %f163, %f47;
	mul.f32 	%f11, %f9, 0f40800000;
	setp.eq.f32 	%p45, %f11, 0f00000000;
	mov.f32 	%f715, %f720;
	@%p45 bra 	$L__BB0_19;
// %bb.18:                              // %L710
	add.f32 	%f191, %f11, %f11;
	mov.b32 	%r172, %f191;
	and.b32  	%r173, %r172, -2147483648;
	or.b32  	%r174, %r173, 1056964608;
	mov.b32 	%f192, %r174;
	add.f32 	%f193, %f191, %f192;
	cvt.rzi.f32.f32 	%f194, %f193;
	abs.f32 	%f195, %f191;
	setp.gt.f32 	%p46, %f195, 0f4B000000;
	selp.f32 	%f196, %f191, %f194, %p46;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p47, %f195, 0f3F000000;
	selp.f32 	%f198, %f197, %f196, %p47;
	cvt.rzi.s32.f32 	%r175, %f198;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f11;
	mul.f32 	%f200, %f199, %f199;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	and.b32  	%r176, %r175, 1;
	setp.eq.b32 	%p48, %r176, 1;
	selp.f32 	%f210, %f208, %f209, %p48;
	and.b32  	%r177, %r175, 2;
	setp.eq.s32 	%p49, %r177, 0;
	sub.f32 	%f212, %f71, %f210;
	selp.f32 	%f213, %f210, %f212, %p49;
	cvt.rzi.f32.f32 	%f214, %f11;
	setp.eq.f32 	%p50, %f11, %f214;
	mul.f32 	%f215, %f11, 0f00000000;
	selp.f32 	%f216, %f215, %f213, %p50;
	mul.f32 	%f217, %f9, 0f41490FDB;
	div.approx.f32 	%f715, %f216, %f217;
$L__BB0_19:                             // %L714
	or.b32  	%r178, %r59, -63;
	cvt.rn.f32.s32 	%f221, %r178;
	div.approx.f32 	%f15, %f221, %f47;
	mul.f32 	%f17, %f15, 0f40800000;
	setp.eq.f32 	%p56, %f17, 0f00000000;
	mov.f32 	%f716, %f720;
	@%p56 bra 	$L__BB0_21;
// %bb.20:                              // %L728
	add.f32 	%f249, %f17, %f17;
	mov.b32 	%r186, %f249;
	and.b32  	%r187, %r186, -2147483648;
	or.b32  	%r188, %r187, 1056964608;
	mov.b32 	%f250, %r188;
	add.f32 	%f251, %f249, %f250;
	cvt.rzi.f32.f32 	%f252, %f251;
	abs.f32 	%f253, %f249;
	setp.gt.f32 	%p57, %f253, 0f4B000000;
	selp.f32 	%f254, %f249, %f252, %p57;
	cvt.rzi.f32.f32 	%f255, %f249;
	setp.lt.f32 	%p58, %f253, 0f3F000000;
	selp.f32 	%f256, %f255, %f254, %p58;
	cvt.rzi.s32.f32 	%r189, %f256;
	fma.rn.f32 	%f257, %f256, 0fBF000000, %f17;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f260, %f258, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f261, %f259, %f258, 0fC0A55DF6;
	fma.rn.f32 	%f262, %f260, %f258, 0f4081E0CF;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f262, %f258, 0fC09DE9E6;
	fma.rn.f32 	%f265, %f261, %f263, 0f00000000;
	fma.rn.f32 	%f266, %f264, %f258, 0f3F800000;
	fma.rn.f32 	%f267, %f257, 0f40490FDB, %f265;
	and.b32  	%r190, %r189, 1;
	setp.eq.b32 	%p59, %r190, 1;
	selp.f32 	%f268, %f266, %f267, %p59;
	and.b32  	%r191, %r189, 2;
	setp.eq.s32 	%p60, %r191, 0;
	sub.f32 	%f270, %f71, %f268;
	selp.f32 	%f271, %f268, %f270, %p60;
	cvt.rzi.f32.f32 	%f272, %f17;
	setp.eq.f32 	%p61, %f17, %f272;
	mul.f32 	%f273, %f17, 0f00000000;
	selp.f32 	%f274, %f273, %f271, %p61;
	mul.f32 	%f275, %f15, 0f41490FDB;
	div.approx.f32 	%f716, %f274, %f275;
$L__BB0_21:                             // %L732
	or.b32  	%r195, %r59, 1;
	cvt.rn.f32.s32 	%f280, %r195;
	div.approx.f32 	%f20, %f280, %f47;
	mul.f32 	%f22, %f20, 0f40800000;
	setp.eq.f32 	%p67, %f22, 0f00000000;
	mov.f32 	%f717, %f720;
	@%p67 bra 	$L__BB0_23;
// %bb.22:                              // %L808
	add.f32 	%f308, %f22, %f22;
	mov.b32 	%r203, %f308;
	and.b32  	%r204, %r203, -2147483648;
	or.b32  	%r205, %r204, 1056964608;
	mov.b32 	%f309, %r205;
	add.f32 	%f310, %f308, %f309;
	cvt.rzi.f32.f32 	%f311, %f310;
	abs.f32 	%f312, %f308;
	setp.gt.f32 	%p68, %f312, 0f4B000000;
	selp.f32 	%f313, %f308, %f311, %p68;
	cvt.rzi.f32.f32 	%f314, %f308;
	setp.lt.f32 	%p69, %f312, 0f3F000000;
	selp.f32 	%f315, %f314, %f313, %p69;
	cvt.rzi.s32.f32 	%r206, %f315;
	fma.rn.f32 	%f316, %f315, 0fBF000000, %f22;
	mul.f32 	%f317, %f316, %f316;
	fma.rn.f32 	%f318, %f317, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f319, %f317, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f320, %f318, %f317, 0fC0A55DF6;
	fma.rn.f32 	%f321, %f319, %f317, 0f4081E0CF;
	fma.rn.f32 	%f322, %f317, %f316, 0f00000000;
	fma.rn.f32 	%f323, %f321, %f317, 0fC09DE9E6;
	fma.rn.f32 	%f324, %f320, %f322, 0f00000000;
	fma.rn.f32 	%f325, %f323, %f317, 0f3F800000;
	fma.rn.f32 	%f326, %f316, 0f40490FDB, %f324;
	and.b32  	%r207, %r206, 1;
	setp.eq.b32 	%p70, %r207, 1;
	selp.f32 	%f327, %f325, %f326, %p70;
	and.b32  	%r208, %r206, 2;
	setp.eq.s32 	%p71, %r208, 0;
	sub.f32 	%f329, %f71, %f327;
	selp.f32 	%f330, %f327, %f329, %p71;
	cvt.rzi.f32.f32 	%f331, %f22;
	setp.eq.f32 	%p72, %f22, %f331;
	mul.f32 	%f332, %f22, 0f00000000;
	selp.f32 	%f333, %f332, %f330, %p72;
	mul.f32 	%f334, %f20, 0f41490FDB;
	div.approx.f32 	%f717, %f333, %f334;
$L__BB0_23:                             // %L812
	or.b32  	%r209, %r59, 65;
	cvt.rn.f32.s32 	%f338, %r209;
	div.approx.f32 	%f26, %f338, %f47;
	mul.f32 	%f28, %f26, 0f40800000;
	setp.eq.f32 	%p78, %f28, 0f00000000;
	mov.f32 	%f718, %f720;
	@%p78 bra 	$L__BB0_25;
// %bb.24:                              // %L826
	add.f32 	%f366, %f28, %f28;
	mov.b32 	%r217, %f366;
	and.b32  	%r218, %r217, -2147483648;
	or.b32  	%r219, %r218, 1056964608;
	mov.b32 	%f367, %r219;
	add.f32 	%f368, %f366, %f367;
	cvt.rzi.f32.f32 	%f369, %f368;
	abs.f32 	%f370, %f366;
	setp.gt.f32 	%p79, %f370, 0f4B000000;
	selp.f32 	%f371, %f366, %f369, %p79;
	cvt.rzi.f32.f32 	%f372, %f366;
	setp.lt.f32 	%p80, %f370, 0f3F000000;
	selp.f32 	%f373, %f372, %f371, %p80;
	cvt.rzi.s32.f32 	%r220, %f373;
	fma.rn.f32 	%f374, %f373, 0fBF000000, %f28;
	mul.f32 	%f375, %f374, %f374;
	fma.rn.f32 	%f376, %f375, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f377, %f375, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f378, %f376, %f375, 0fC0A55DF6;
	fma.rn.f32 	%f379, %f377, %f375, 0f4081E0CF;
	fma.rn.f32 	%f380, %f375, %f374, 0f00000000;
	fma.rn.f32 	%f381, %f379, %f375, 0fC09DE9E6;
	fma.rn.f32 	%f382, %f378, %f380, 0f00000000;
	fma.rn.f32 	%f383, %f381, %f375, 0f3F800000;
	fma.rn.f32 	%f384, %f374, 0f40490FDB, %f382;
	and.b32  	%r221, %r220, 1;
	setp.eq.b32 	%p81, %r221, 1;
	selp.f32 	%f385, %f383, %f384, %p81;
	and.b32  	%r222, %r220, 2;
	setp.eq.s32 	%p82, %r222, 0;
	sub.f32 	%f387, %f71, %f385;
	selp.f32 	%f388, %f385, %f387, %p82;
	cvt.rzi.f32.f32 	%f389, %f28;
	setp.eq.f32 	%p83, %f28, %f389;
	mul.f32 	%f390, %f28, 0f00000000;
	selp.f32 	%f391, %f390, %f388, %p83;
	mul.f32 	%f392, %f26, 0f41490FDB;
	div.approx.f32 	%f718, %f391, %f392;
$L__BB0_25:                             // %L830
	or.b32  	%r226, %r59, 129;
	cvt.rn.f32.s32 	%f397, %r226;
	div.approx.f32 	%f31, %f397, %f47;
	mul.f32 	%f33, %f31, 0f40800000;
	setp.eq.f32 	%p89, %f33, 0f00000000;
	mov.f32 	%f719, %f720;
	@%p89 bra 	$L__BB0_27;
// %bb.26:                              // %L906
	add.f32 	%f425, %f33, %f33;
	mov.b32 	%r234, %f425;
	and.b32  	%r235, %r234, -2147483648;
	or.b32  	%r236, %r235, 1056964608;
	mov.b32 	%f426, %r236;
	add.f32 	%f427, %f425, %f426;
	cvt.rzi.f32.f32 	%f428, %f427;
	abs.f32 	%f429, %f425;
	setp.gt.f32 	%p90, %f429, 0f4B000000;
	selp.f32 	%f430, %f425, %f428, %p90;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p91, %f429, 0f3F000000;
	selp.f32 	%f432, %f431, %f430, %p91;
	cvt.rzi.s32.f32 	%r237, %f432;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f33;
	mul.f32 	%f434, %f433, %f433;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	and.b32  	%r238, %r237, 1;
	setp.eq.b32 	%p92, %r238, 1;
	selp.f32 	%f444, %f442, %f443, %p92;
	and.b32  	%r239, %r237, 2;
	setp.eq.s32 	%p93, %r239, 0;
	sub.f32 	%f446, %f71, %f444;
	selp.f32 	%f447, %f444, %f446, %p93;
	cvt.rzi.f32.f32 	%f448, %f33;
	setp.eq.f32 	%p94, %f33, %f448;
	mul.f32 	%f449, %f33, 0f00000000;
	selp.f32 	%f450, %f449, %f447, %p94;
	mul.f32 	%f451, %f31, 0f41490FDB;
	div.approx.f32 	%f719, %f450, %f451;
$L__BB0_27:                             // %L910
	or.b32  	%r240, %r59, 193;
	cvt.rn.f32.s32 	%f455, %r240;
	div.approx.f32 	%f37, %f455, %f47;
	mul.f32 	%f39, %f37, 0f40800000;
	setp.eq.f32 	%p100, %f39, 0f00000000;
	@%p100 bra 	$L__BB0_29;
// %bb.28:                              // %L924
	add.f32 	%f483, %f39, %f39;
	mov.b32 	%r248, %f483;
	and.b32  	%r249, %r248, -2147483648;
	or.b32  	%r250, %r249, 1056964608;
	mov.b32 	%f484, %r250;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p101, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p101;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p102, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p102;
	cvt.rzi.s32.f32 	%r251, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f39;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r252, %r251, 1;
	setp.eq.b32 	%p103, %r252, 1;
	selp.f32 	%f502, %f500, %f501, %p103;
	and.b32  	%r253, %r251, 2;
	setp.eq.s32 	%p104, %r253, 0;
	sub.f32 	%f504, %f71, %f502;
	selp.f32 	%f505, %f502, %f504, %p104;
	cvt.rzi.f32.f32 	%f506, %f39;
	setp.eq.f32 	%p105, %f39, %f506;
	mul.f32 	%f507, %f39, 0f00000000;
	selp.f32 	%f508, %f507, %f505, %p105;
	mul.f32 	%f509, %f37, 0f41490FDB;
	div.approx.f32 	%f720, %f508, %f509;
$L__BB0_29:                             // %L928
	setp.le.s32 	%p148, %r103, %r102;
	mov.u32 	%r2518, 0;
	@%p148 bra 	$L__BB0_40;
// %bb.30:                              // %L1523.lr.ph
	abs.f32 	%f48, %f42;
	abs.f32 	%f106, %f4;
	abs.f32 	%f165, %f9;
	abs.f32 	%f223, %f15;
	abs.f32 	%f282, %f20;
	abs.f32 	%f340, %f26;
	setp.gt.f32 	%p18, %f48, 0f4B800000;
	mul.f32 	%f49, %f42, 0f00000000;
	setp.gt.f32 	%p29, %f106, 0f4B800000;
	mul.f32 	%f107, %f4, 0f00000000;
	setp.gt.f32 	%p40, %f165, 0f4B800000;
	mul.f32 	%f166, %f9, 0f00000000;
	setp.gt.f32 	%p51, %f223, 0f4B800000;
	mul.f32 	%f224, %f15, 0f00000000;
	setp.gt.f32 	%p62, %f282, 0f4B800000;
	mul.f32 	%f283, %f20, 0f00000000;
	setp.gt.f32 	%p73, %f340, 0f4B800000;
	mul.f32 	%f341, %f26, 0f00000000;
	abs.f32 	%f399, %f31;
	selp.f32 	%f50, %f49, %f42, %p18;
	selp.f32 	%f108, %f107, %f4, %p29;
	selp.f32 	%f167, %f166, %f9, %p40;
	selp.f32 	%f225, %f224, %f15, %p51;
	selp.f32 	%f284, %f283, %f20, %p62;
	selp.f32 	%f342, %f341, %f26, %p73;
	setp.gt.f32 	%p84, %f399, 0f4B800000;
	mul.f32 	%f400, %f31, 0f00000000;
	add.f32 	%f51, %f50, %f50;
	add.f32 	%f109, %f108, %f108;
	add.f32 	%f168, %f167, %f167;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f285, %f284, %f284;
	add.f32 	%f343, %f342, %f342;
	selp.f32 	%f401, %f400, %f31, %p84;
	abs.f32 	%f457, %f37;
	mov.b32 	%r134, %f51;
	mov.b32 	%r148, %f109;
	mov.b32 	%r165, %f168;
	mov.b32 	%r179, %f226;
	mov.b32 	%r196, %f285;
	mov.b32 	%r210, %f343;
	add.f32 	%f402, %f401, %f401;
	setp.gt.f32 	%p95, %f457, 0f4B800000;
	mul.f32 	%f458, %f37, 0f00000000;
	and.b32  	%r135, %r134, -2147483648;
	and.b32  	%r149, %r148, -2147483648;
	and.b32  	%r166, %r165, -2147483648;
	and.b32  	%r180, %r179, -2147483648;
	and.b32  	%r197, %r196, -2147483648;
	and.b32  	%r211, %r210, -2147483648;
	mov.b32 	%r227, %f402;
	selp.f32 	%f459, %f458, %f37, %p95;
	or.b32  	%r136, %r135, 1056964608;
	or.b32  	%r150, %r149, 1056964608;
	or.b32  	%r167, %r166, 1056964608;
	or.b32  	%r181, %r180, 1056964608;
	or.b32  	%r198, %r197, 1056964608;
	or.b32  	%r212, %r211, 1056964608;
	and.b32  	%r228, %r227, -2147483648;
	add.f32 	%f460, %f459, %f459;
	mov.b32 	%f52, %r136;
	mov.b32 	%f110, %r150;
	mov.b32 	%f169, %r167;
	mov.b32 	%f227, %r181;
	mov.b32 	%f286, %r198;
	mov.b32 	%f344, %r212;
	or.b32  	%r229, %r228, 1056964608;
	mov.b32 	%r241, %f460;
	add.f32 	%f53, %f51, %f52;
	abs.f32 	%f55, %f51;
	add.f32 	%f111, %f109, %f110;
	abs.f32 	%f113, %f109;
	add.f32 	%f170, %f168, %f169;
	abs.f32 	%f172, %f168;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f287, %f285, %f286;
	abs.f32 	%f289, %f285;
	add.f32 	%f345, %f343, %f344;
	abs.f32 	%f347, %f343;
	mov.b32 	%f403, %r229;
	and.b32  	%r242, %r241, -2147483648;
	cvt.rzi.f32.f32 	%f54, %f53;
	setp.gt.f32 	%p19, %f55, 0f4B000000;
	cvt.rzi.f32.f32 	%f112, %f111;
	setp.gt.f32 	%p30, %f113, 0f4B000000;
	cvt.rzi.f32.f32 	%f171, %f170;
	setp.gt.f32 	%p41, %f172, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p52, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f288, %f287;
	setp.gt.f32 	%p63, %f289, 0f4B000000;
	cvt.rzi.f32.f32 	%f346, %f345;
	setp.gt.f32 	%p74, %f347, 0f4B000000;
	add.f32 	%f404, %f402, %f403;
	abs.f32 	%f406, %f402;
	or.b32  	%r243, %r242, 1056964608;
	selp.f32 	%f56, %f51, %f54, %p19;
	cvt.rzi.f32.f32 	%f57, %f51;
	setp.lt.f32 	%p20, %f55, 0f3F000000;
	selp.f32 	%f114, %f109, %f112, %p30;
	cvt.rzi.f32.f32 	%f115, %f109;
	setp.lt.f32 	%p31, %f113, 0f3F000000;
	selp.f32 	%f173, %f168, %f171, %p41;
	cvt.rzi.f32.f32 	%f174, %f168;
	setp.lt.f32 	%p42, %f172, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p52;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p53, %f230, 0f3F000000;
	selp.f32 	%f290, %f285, %f288, %p63;
	cvt.rzi.f32.f32 	%f291, %f285;
	setp.lt.f32 	%p64, %f289, 0f3F000000;
	selp.f32 	%f348, %f343, %f346, %p74;
	cvt.rzi.f32.f32 	%f349, %f343;
	setp.lt.f32 	%p75, %f347, 0f3F000000;
	cvt.rzi.f32.f32 	%f405, %f404;
	setp.gt.f32 	%p85, %f406, 0f4B000000;
	mov.b32 	%f461, %r243;
	selp.f32 	%f58, %f57, %f56, %p20;
	selp.f32 	%f116, %f115, %f114, %p31;
	selp.f32 	%f175, %f174, %f173, %p42;
	selp.f32 	%f233, %f232, %f231, %p53;
	selp.f32 	%f292, %f291, %f290, %p64;
	selp.f32 	%f350, %f349, %f348, %p75;
	selp.f32 	%f407, %f402, %f405, %p85;
	cvt.rzi.f32.f32 	%f408, %f402;
	setp.lt.f32 	%p86, %f406, 0f3F000000;
	add.f32 	%f462, %f460, %f461;
	abs.f32 	%f464, %f460;
	fma.rn.f32 	%f59, %f58, 0fBF000000, %f50;
	fma.rn.f32 	%f117, %f116, 0fBF000000, %f108;
	fma.rn.f32 	%f176, %f175, 0fBF000000, %f167;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f293, %f292, 0fBF000000, %f284;
	fma.rn.f32 	%f351, %f350, 0fBF000000, %f342;
	selp.f32 	%f409, %f408, %f407, %p86;
	cvt.rzi.f32.f32 	%f463, %f462;
	setp.gt.f32 	%p96, %f464, 0f4B000000;
	mul.f32 	%f60, %f59, %f59;
	mul.f32 	%f118, %f117, %f117;
	mul.f32 	%f177, %f176, %f176;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f294, %f293, %f293;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f410, %f409, 0fBF000000, %f401;
	selp.f32 	%f465, %f460, %f463, %p96;
	cvt.rzi.f32.f32 	%f466, %f460;
	setp.lt.f32 	%p97, %f464, 0f3F000000;
	cvt.rzi.s32.f32 	%r137, %f58;
	fma.rn.f32 	%f61, %f60, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f62, %f60, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r151, %f116;
	fma.rn.f32 	%f119, %f118, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f120, %f118, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r168, %f175;
	fma.rn.f32 	%f178, %f177, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f179, %f177, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r182, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r199, %f292;
	fma.rn.f32 	%f295, %f294, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f296, %f294, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r213, %f350;
	fma.rn.f32 	%f353, %f352, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f354, %f352, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f411, %f410, %f410;
	selp.f32 	%f467, %f466, %f465, %p97;
	shl.b32 	%r119, %r1, 2;
	add.s32 	%r138, %r137, 1;
	fma.rn.f32 	%f63, %f61, %f60, 0fC0A55DF6;
	fma.rn.f32 	%f64, %f62, %f60, 0f4081E0CF;
	fma.rn.f32 	%f65, %f60, %f59, 0f00000000;
	add.s32 	%r152, %r151, 1;
	fma.rn.f32 	%f121, %f119, %f118, 0fC0A55DF6;
	fma.rn.f32 	%f122, %f120, %f118, 0f4081E0CF;
	fma.rn.f32 	%f123, %f118, %f117, 0f00000000;
	add.s32 	%r169, %r168, 1;
	fma.rn.f32 	%f180, %f178, %f177, 0fC0A55DF6;
	fma.rn.f32 	%f181, %f179, %f177, 0f4081E0CF;
	fma.rn.f32 	%f182, %f177, %f176, 0f00000000;
	add.s32 	%r183, %r182, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r200, %r199, 1;
	fma.rn.f32 	%f297, %f295, %f294, 0fC0A55DF6;
	fma.rn.f32 	%f298, %f296, %f294, 0f4081E0CF;
	fma.rn.f32 	%f299, %f294, %f293, 0f00000000;
	add.s32 	%r214, %r213, 1;
	fma.rn.f32 	%f355, %f353, %f352, 0fC0A55DF6;
	fma.rn.f32 	%f356, %f354, %f352, 0f4081E0CF;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	cvt.rzi.s32.f32 	%r230, %f409;
	fma.rn.f32 	%f412, %f411, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f413, %f411, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f468, %f467, 0fBF000000, %f459;
	shl.b32 	%r47, %r2, 2;
	and.b32  	%r120, %r119, 960;
	and.b32  	%r52, %r2, 18;
	fma.rn.f32 	%f66, %f64, %f60, 0fC09DE9E6;
	fma.rn.f32 	%f67, %f63, %f65, 0f00000000;
	and.b32  	%r139, %r138, 1;
	fma.rn.f32 	%f124, %f122, %f118, 0fC09DE9E6;
	fma.rn.f32 	%f125, %f121, %f123, 0f00000000;
	and.b32  	%r153, %r152, 1;
	fma.rn.f32 	%f183, %f181, %f177, 0fC09DE9E6;
	fma.rn.f32 	%f184, %f180, %f182, 0f00000000;
	and.b32  	%r170, %r169, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r184, %r183, 1;
	fma.rn.f32 	%f300, %f298, %f294, 0fC09DE9E6;
	fma.rn.f32 	%f301, %f297, %f299, 0f00000000;
	and.b32  	%r201, %r200, 1;
	fma.rn.f32 	%f358, %f356, %f352, 0fC09DE9E6;
	fma.rn.f32 	%f359, %f355, %f357, 0f00000000;
	and.b32  	%r215, %r214, 1;
	add.s32 	%r231, %r230, 1;
	fma.rn.f32 	%f414, %f412, %f411, 0fC0A55DF6;
	fma.rn.f32 	%f415, %f413, %f411, 0f4081E0CF;
	fma.rn.f32 	%f416, %f411, %f410, 0f00000000;
	mul.f32 	%f469, %f468, %f468;
	and.b32  	%r48, %r47, 4;
	shl.b32 	%r49, %r2, 1;
	or.b32  	%r121, %r52, %r120;
	fma.rn.f32 	%f68, %f66, %f60, 0f3F800000;
	fma.rn.f32 	%f69, %f59, 0f40490FDB, %f67;
	setp.eq.b32 	%p21, %r139, 1;
	fma.rn.f32 	%f126, %f124, %f118, 0f3F800000;
	fma.rn.f32 	%f127, %f117, 0f40490FDB, %f125;
	setp.eq.b32 	%p32, %r153, 1;
	fma.rn.f32 	%f185, %f183, %f177, 0f3F800000;
	fma.rn.f32 	%f186, %f176, 0f40490FDB, %f184;
	setp.eq.b32 	%p43, %r170, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p54, %r184, 1;
	fma.rn.f32 	%f302, %f300, %f294, 0f3F800000;
	fma.rn.f32 	%f303, %f293, 0f40490FDB, %f301;
	setp.eq.b32 	%p65, %r201, 1;
	fma.rn.f32 	%f360, %f358, %f352, 0f3F800000;
	fma.rn.f32 	%f361, %f351, 0f40490FDB, %f359;
	setp.eq.b32 	%p76, %r215, 1;
	fma.rn.f32 	%f417, %f415, %f411, 0fC09DE9E6;
	fma.rn.f32 	%f418, %f414, %f416, 0f00000000;
	and.b32  	%r232, %r231, 1;
	cvt.rzi.s32.f32 	%r244, %f467;
	fma.rn.f32 	%f470, %f469, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f471, %f469, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r50, %r49, 8;
	or.b32  	%r122, %r121, %r48;
	selp.f32 	%f70, %f68, %f69, %p21;
	and.b32  	%r140, %r138, 2;
	selp.f32 	%f128, %f126, %f127, %p32;
	and.b32  	%r154, %r152, 2;
	selp.f32 	%f187, %f185, %f186, %p43;
	and.b32  	%r171, %r169, 2;
	selp.f32 	%f245, %f243, %f244, %p54;
	and.b32  	%r185, %r183, 2;
	selp.f32 	%f304, %f302, %f303, %p65;
	and.b32  	%r202, %r200, 2;
	selp.f32 	%f362, %f360, %f361, %p76;
	and.b32  	%r216, %r214, 2;
	fma.rn.f32 	%f419, %f417, %f411, 0f3F800000;
	fma.rn.f32 	%f420, %f410, 0f40490FDB, %f418;
	setp.eq.b32 	%p87, %r232, 1;
	add.s32 	%r245, %r244, 1;
	fma.rn.f32 	%f472, %f470, %f469, 0fC0A55DF6;
	fma.rn.f32 	%f473, %f471, %f469, 0f4081E0CF;
	fma.rn.f32 	%f474, %f469, %f468, 0f00000000;
	and.b32  	%r51, %r47, 32;
	or.b32  	%r123, %r122, %r50;
	setp.eq.s32 	%p22, %r140, 0;
	sub.f32 	%f72, %f71, %f70;
	setp.eq.s32 	%p33, %r154, 0;
	sub.f32 	%f130, %f71, %f128;
	setp.eq.s32 	%p44, %r171, 0;
	sub.f32 	%f189, %f71, %f187;
	setp.eq.s32 	%p55, %r185, 0;
	sub.f32 	%f247, %f71, %f245;
	setp.eq.s32 	%p66, %r202, 0;
	sub.f32 	%f306, %f71, %f304;
	setp.eq.s32 	%p77, %r216, 0;
	sub.f32 	%f364, %f71, %f362;
	selp.f32 	%f421, %f419, %f420, %p87;
	and.b32  	%r233, %r231, 2;
	fma.rn.f32 	%f475, %f473, %f469, 0fC09DE9E6;
	fma.rn.f32 	%f476, %f472, %f474, 0f00000000;
	and.b32  	%r246, %r245, 1;
	or.b32  	%r124, %r123, %r51;
	selp.f32 	%f73, %f70, %f72, %p22;
	selp.f32 	%f131, %f128, %f130, %p33;
	selp.f32 	%f190, %f187, %f189, %p44;
	selp.f32 	%f248, %f245, %f247, %p55;
	selp.f32 	%f307, %f304, %f306, %p66;
	selp.f32 	%f365, %f362, %f364, %p77;
	setp.eq.s32 	%p88, %r233, 0;
	sub.f32 	%f423, %f71, %f421;
	fma.rn.f32 	%f477, %f475, %f469, 0f3F800000;
	fma.rn.f32 	%f478, %f468, 0f40490FDB, %f476;
	setp.eq.b32 	%p98, %r246, 1;
	bfe.u32 	%r125, %r124, 1, 5;
	mul.f32 	%f43, %f73, %f73;
	mul.f32 	%f5, %f131, %f131;
	mul.f32 	%f10, %f190, %f190;
	mul.f32 	%f16, %f248, %f248;
	mul.f32 	%f21, %f307, %f307;
	mul.f32 	%f27, %f365, %f365;
	selp.f32 	%f424, %f421, %f423, %p88;
	selp.f32 	%f479, %f477, %f478, %p98;
	and.b32  	%r247, %r245, 2;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd43, %r125, 4;
	mul.f32 	%f102, %f713, %f43;
	mov.f32 	%f103, 0f42800000;
	mul.f32 	%f160, %f714, %f5;
	mul.f32 	%f219, %f715, %f10;
	mul.f32 	%f277, %f716, %f16;
	mul.f32 	%f336, %f717, %f21;
	mul.f32 	%f394, %f718, %f27;
	mul.f32 	%f32, %f424, %f424;
	setp.eq.s32 	%p99, %r247, 0;
	sub.f32 	%f481, %f71, %f479;
	add.s64 	%rd44, %rd1, %rd43;
	div.approx.f32 	%f3, %f102, %f103;
	div.approx.f32 	%f162, %f160, %f103;
	div.approx.f32 	%f14, %f219, %f103;
	div.approx.f32 	%f279, %f277, %f103;
	div.approx.f32 	%f25, %f336, %f103;
	div.approx.f32 	%f396, %f394, %f103;
	mul.f32 	%f453, %f719, %f32;
	selp.f32 	%f482, %f479, %f481, %p99;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.global.u32 	%r53, [%rd44];
	shr.u32 	%r54, %r2, 1;
	shr.u32 	%r57, %r2, 3;
	mov.b32 	%r163, %f162;
	mov.b32 	%r162, %f3;
	mov.b32 	%r194, %f279;
	mov.b32 	%r193, %f14;
	mov.b32 	%r225, %f396;
	mov.b32 	%r224, %f25;
	div.approx.f32 	%f36, %f453, %f103;
	mul.f32 	%f38, %f482, %f482;
	// begin inline asm
	cvt.rn.f16x2.f32 %r161, %r163, %r162;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r192, %r194, %r193;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r223, %r225, %r224;
	// end inline asm
	mul.f32 	%f510, %f720, %f38;
	div.approx.f32 	%f512, %f510, %f103;
	mov.b32 	%r256, %f512;
	mov.b32 	%r255, %f36;
	// begin inline asm
	cvt.rn.f16x2.f32 %r254, %r256, %r255;
	// end inline asm
	mul.lo.s32 	%r293, %r58, 63;
	and.b32  	%r294, %r293, 127;
	cvt.rn.f32.s32 	%f513, %r294;
	div.approx.f32 	%f514, %f513, %f103;
	add.f32 	%f515, %f514, %f514;
	mov.b32 	%r295, %f515;
	and.b32  	%r296, %r295, -2147483648;
	or.b32  	%r297, %r296, 1056964608;
	mov.b32 	%f516, %r297;
	add.f32 	%f517, %f515, %f516;
	cvt.rzi.f32.f32 	%f518, %f517;
	abs.f32 	%f519, %f515;
	setp.gt.f32 	%p106, %f519, 0f4B000000;
	selp.f32 	%f520, %f515, %f518, %p106;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p107, %f519, 0f3F000000;
	selp.f32 	%f522, %f521, %f520, %p107;
	cvt.rzi.s32.f32 	%r298, %f522;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f514;
	mul.f32 	%f524, %f523, %f523;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	and.b32  	%r299, %r298, 1;
	setp.eq.b32 	%p108, %r299, 1;
	selp.f32 	%f534, %f532, %f533, %p108;
	selp.f32 	%f535, %f533, %f532, %p108;
	and.b32  	%r300, %r298, 2;
	setp.eq.s32 	%p109, %r300, 0;
	neg.f32 	%f536, %f534;
	selp.f32 	%f537, %f534, %f536, %p109;
	add.s32 	%r301, %r298, 1;
	and.b32  	%r302, %r301, 2;
	setp.eq.s32 	%p110, %r302, 0;
	sub.f32 	%f539, %f71, %f535;
	selp.f32 	%f540, %f535, %f539, %p110;
	cvt.rzi.f32.f32 	%f541, %f514;
	setp.eq.f32 	%p111, %f541, %f514;
	mul.f32 	%f542, %f514, 0f00000000;
	selp.f32 	%f543, %f542, %f537, %p111;
	abs.f32 	%f544, %f514;
	setp.gt.f32 	%p112, %f544, 0f4B800000;
	add.f32 	%f545, %f543, 0f3F800000;
	selp.f32 	%f546, %f545, %f540, %p112;
	add.s32 	%r303, %r293, 96;
	and.b32  	%r304, %r303, 127;
	cvt.rn.f32.s32 	%f547, %r304;
	div.approx.f32 	%f548, %f547, %f103;
	add.f32 	%f549, %f548, %f548;
	mov.b32 	%r305, %f549;
	and.b32  	%r306, %r305, -2147483648;
	or.b32  	%r307, %r306, 1056964608;
	mov.b32 	%f550, %r307;
	add.f32 	%f551, %f549, %f550;
	cvt.rzi.f32.f32 	%f552, %f551;
	abs.f32 	%f553, %f549;
	setp.gt.f32 	%p113, %f553, 0f4B000000;
	selp.f32 	%f554, %f549, %f552, %p113;
	cvt.rzi.f32.f32 	%f555, %f549;
	setp.lt.f32 	%p114, %f553, 0f3F000000;
	selp.f32 	%f556, %f555, %f554, %p114;
	cvt.rzi.s32.f32 	%r308, %f556;
	fma.rn.f32 	%f557, %f556, 0fBF000000, %f548;
	mul.f32 	%f558, %f557, %f557;
	fma.rn.f32 	%f559, %f558, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f560, %f558, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f561, %f559, %f558, 0fC0A55DF6;
	fma.rn.f32 	%f562, %f560, %f558, 0f4081E0CF;
	fma.rn.f32 	%f563, %f558, %f557, 0f00000000;
	fma.rn.f32 	%f564, %f562, %f558, 0fC09DE9E6;
	fma.rn.f32 	%f565, %f561, %f563, 0f00000000;
	fma.rn.f32 	%f566, %f564, %f558, 0f3F800000;
	fma.rn.f32 	%f567, %f557, 0f40490FDB, %f565;
	and.b32  	%r309, %r308, 1;
	setp.eq.b32 	%p115, %r309, 1;
	selp.f32 	%f568, %f566, %f567, %p115;
	selp.f32 	%f569, %f567, %f566, %p115;
	and.b32  	%r310, %r308, 2;
	setp.eq.s32 	%p116, %r310, 0;
	neg.f32 	%f570, %f568;
	selp.f32 	%f571, %f568, %f570, %p116;
	add.s32 	%r311, %r308, 1;
	and.b32  	%r312, %r311, 2;
	setp.eq.s32 	%p117, %r312, 0;
	sub.f32 	%f572, %f71, %f569;
	selp.f32 	%f573, %f569, %f572, %p117;
	cvt.rzi.f32.f32 	%f574, %f548;
	setp.eq.f32 	%p118, %f574, %f548;
	mul.f32 	%f575, %f548, 0f00000000;
	selp.f32 	%f576, %f575, %f571, %p118;
	abs.f32 	%f577, %f548;
	setp.gt.f32 	%p119, %f577, 0f4B800000;
	add.f32 	%f578, %f576, 0f3F800000;
	selp.f32 	%f579, %f578, %f573, %p119;
	mov.b32 	%r258, %f546;
	mov.b32 	%r259, %f579;
	// begin inline asm
	cvt.rn.f16x2.f32 %r257, %r259, %r258;
	// end inline asm
	mov.b32 	%r261, %f543;
	mov.b32 	%r262, %f576;
	// begin inline asm
	cvt.rn.f16x2.f32 %r260, %r262, %r261;
	// end inline asm
	and.b32  	%r313, %r57, 2;
	and.b32  	%r314, %r54, 4;
	or.b32  	%r315, %r55, %r313;
	or.b32  	%r316, %r315, %r314;
	and.b32  	%r317, %r49, 6;
	mul.lo.s32 	%r318, %r316, %r317;
	and.b32  	%r319, %r318, 14;
	cvt.rn.f32.s32 	%f580, %r319;
	mov.f32 	%f581, 0f41000000;
	div.approx.f32 	%f582, %f580, %f581;
	add.f32 	%f583, %f582, %f582;
	mov.b32 	%r320, %f583;
	and.b32  	%r321, %r320, -2147483648;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%f584, %r322;
	add.f32 	%f585, %f583, %f584;
	cvt.rzi.f32.f32 	%f586, %f585;
	abs.f32 	%f587, %f583;
	setp.gt.f32 	%p120, %f587, 0f4B000000;
	selp.f32 	%f588, %f583, %f586, %p120;
	cvt.rzi.f32.f32 	%f589, %f583;
	setp.lt.f32 	%p121, %f587, 0f3F000000;
	selp.f32 	%f590, %f589, %f588, %p121;
	cvt.rzi.s32.f32 	%r323, %f590;
	fma.rn.f32 	%f591, %f590, 0fBF000000, %f582;
	mul.f32 	%f592, %f591, %f591;
	fma.rn.f32 	%f593, %f592, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f594, %f592, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f593, %f592, 0fC0A55DF6;
	fma.rn.f32 	%f596, %f594, %f592, 0f4081E0CF;
	fma.rn.f32 	%f597, %f592, %f591, 0f00000000;
	fma.rn.f32 	%f598, %f596, %f592, 0fC09DE9E6;
	fma.rn.f32 	%f599, %f595, %f597, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f592, 0f3F800000;
	fma.rn.f32 	%f601, %f591, 0f40490FDB, %f599;
	and.b32  	%r324, %r323, 1;
	setp.eq.b32 	%p122, %r324, 1;
	selp.f32 	%f602, %f600, %f601, %p122;
	selp.f32 	%f603, %f601, %f600, %p122;
	and.b32  	%r325, %r323, 2;
	setp.eq.s32 	%p123, %r325, 0;
	neg.f32 	%f604, %f602;
	selp.f32 	%f605, %f602, %f604, %p123;
	add.s32 	%r326, %r323, 1;
	and.b32  	%r327, %r326, 2;
	setp.eq.s32 	%p124, %r327, 0;
	sub.f32 	%f606, %f71, %f603;
	selp.f32 	%f607, %f603, %f606, %p124;
	cvt.rzi.f32.f32 	%f608, %f582;
	setp.eq.f32 	%p125, %f608, %f582;
	mul.f32 	%f609, %f582, 0f00000000;
	selp.f32 	%f610, %f609, %f605, %p125;
	abs.f32 	%f611, %f582;
	setp.gt.f32 	%p126, %f611, 0f4B800000;
	add.f32 	%f612, %f610, 0f3F800000;
	selp.f32 	%f613, %f612, %f607, %p126;
	or.b32  	%r328, %r49, 8;
	mul.lo.s32 	%r329, %r316, %r328;
	and.b32  	%r330, %r329, 14;
	cvt.rn.f32.s32 	%f614, %r330;
	div.approx.f32 	%f615, %f614, %f581;
	add.f32 	%f616, %f615, %f615;
	mov.b32 	%r331, %f616;
	and.b32  	%r332, %r331, -2147483648;
	or.b32  	%r333, %r332, 1056964608;
	mov.b32 	%f617, %r333;
	add.f32 	%f618, %f616, %f617;
	cvt.rzi.f32.f32 	%f619, %f618;
	abs.f32 	%f620, %f616;
	setp.gt.f32 	%p127, %f620, 0f4B000000;
	selp.f32 	%f621, %f616, %f619, %p127;
	cvt.rzi.f32.f32 	%f622, %f616;
	setp.lt.f32 	%p128, %f620, 0f3F000000;
	selp.f32 	%f623, %f622, %f621, %p128;
	cvt.rzi.s32.f32 	%r334, %f623;
	fma.rn.f32 	%f624, %f623, 0fBF000000, %f615;
	mul.f32 	%f625, %f624, %f624;
	fma.rn.f32 	%f626, %f625, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f627, %f625, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f628, %f626, %f625, 0fC0A55DF6;
	fma.rn.f32 	%f629, %f627, %f625, 0f4081E0CF;
	fma.rn.f32 	%f630, %f625, %f624, 0f00000000;
	fma.rn.f32 	%f631, %f629, %f625, 0fC09DE9E6;
	fma.rn.f32 	%f632, %f628, %f630, 0f00000000;
	fma.rn.f32 	%f633, %f631, %f625, 0f3F800000;
	fma.rn.f32 	%f634, %f624, 0f40490FDB, %f632;
	and.b32  	%r335, %r334, 1;
	setp.eq.b32 	%p129, %r335, 1;
	selp.f32 	%f635, %f633, %f634, %p129;
	selp.f32 	%f636, %f634, %f633, %p129;
	and.b32  	%r336, %r334, 2;
	setp.eq.s32 	%p130, %r336, 0;
	neg.f32 	%f637, %f635;
	selp.f32 	%f638, %f635, %f637, %p130;
	add.s32 	%r337, %r334, 1;
	and.b32  	%r338, %r337, 2;
	setp.eq.s32 	%p131, %r338, 0;
	sub.f32 	%f639, %f71, %f636;
	selp.f32 	%f640, %f636, %f639, %p131;
	cvt.rzi.f32.f32 	%f641, %f615;
	setp.eq.f32 	%p132, %f641, %f615;
	mul.f32 	%f642, %f615, 0f00000000;
	selp.f32 	%f643, %f642, %f638, %p132;
	abs.f32 	%f644, %f615;
	setp.gt.f32 	%p133, %f644, 0f4B800000;
	add.f32 	%f645, %f643, 0f3F800000;
	selp.f32 	%f646, %f645, %f640, %p133;
	mov.b32 	%r264, %f613;
	mov.b32 	%r265, %f646;
	// begin inline asm
	cvt.rn.f16x2.f32 %r263, %r265, %r264;
	// end inline asm
	mov.b32 	%r267, %f610;
	mov.b32 	%r268, %f643;
	// begin inline asm
	cvt.rn.f16x2.f32 %r266, %r268, %r267;
	// end inline asm
	xor.b32  	%r288, %r267, -2147483648;
	xor.b32  	%r289, %r268, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r269, %r289, %r288;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r272, %r265, %r264;
	// end inline asm
	cvt.rn.f32.s32 	%f647, %r318;
	div.approx.f32 	%f648, %f647, %f103;
	add.f32 	%f649, %f648, %f648;
	mov.b32 	%r339, %f649;
	and.b32  	%r340, %r339, -2147483648;
	or.b32  	%r341, %r340, 1056964608;
	mov.b32 	%f650, %r341;
	add.f32 	%f651, %f649, %f650;
	cvt.rzi.f32.f32 	%f652, %f651;
	abs.f32 	%f653, %f649;
	setp.gt.f32 	%p134, %f653, 0f4B000000;
	selp.f32 	%f654, %f649, %f652, %p134;
	cvt.rzi.f32.f32 	%f655, %f649;
	setp.lt.f32 	%p135, %f653, 0f3F000000;
	selp.f32 	%f656, %f655, %f654, %p135;
	cvt.rzi.s32.f32 	%r342, %f656;
	fma.rn.f32 	%f657, %f656, 0fBF000000, %f648;
	mul.f32 	%f658, %f657, %f657;
	fma.rn.f32 	%f659, %f658, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f660, %f658, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f661, %f659, %f658, 0fC0A55DF6;
	fma.rn.f32 	%f662, %f660, %f658, 0f4081E0CF;
	fma.rn.f32 	%f663, %f658, %f657, 0f00000000;
	fma.rn.f32 	%f664, %f662, %f658, 0fC09DE9E6;
	fma.rn.f32 	%f665, %f661, %f663, 0f00000000;
	fma.rn.f32 	%f666, %f664, %f658, 0f3F800000;
	fma.rn.f32 	%f667, %f657, 0f40490FDB, %f665;
	and.b32  	%r343, %r342, 1;
	setp.eq.b32 	%p136, %r343, 1;
	selp.f32 	%f668, %f666, %f667, %p136;
	selp.f32 	%f669, %f667, %f666, %p136;
	and.b32  	%r344, %r342, 2;
	setp.eq.s32 	%p137, %r344, 0;
	neg.f32 	%f670, %f668;
	selp.f32 	%f671, %f668, %f670, %p137;
	add.s32 	%r345, %r342, 1;
	and.b32  	%r346, %r345, 2;
	setp.eq.s32 	%p138, %r346, 0;
	sub.f32 	%f672, %f71, %f669;
	selp.f32 	%f673, %f669, %f672, %p138;
	cvt.rzi.f32.f32 	%f674, %f648;
	setp.eq.f32 	%p139, %f674, %f648;
	mul.f32 	%f675, %f648, 0f00000000;
	selp.f32 	%f676, %f675, %f671, %p139;
	mov.b32 	%r347, %f676;
	abs.f32 	%f677, %f648;
	setp.gt.f32 	%p140, %f677, 0f4B800000;
	add.f32 	%f678, %f676, 0f3F800000;
	selp.f32 	%f679, %f678, %f673, %p140;
	shl.b32 	%r348, %r316, 3;
	add.s32 	%r349, %r318, %r348;
	cvt.rn.f32.s32 	%f680, %r349;
	div.approx.f32 	%f681, %f680, %f103;
	add.f32 	%f682, %f681, %f681;
	mov.b32 	%r350, %f682;
	and.b32  	%r351, %r350, -2147483648;
	or.b32  	%r352, %r351, 1056964608;
	mov.b32 	%f683, %r352;
	add.f32 	%f684, %f682, %f683;
	cvt.rzi.f32.f32 	%f685, %f684;
	abs.f32 	%f686, %f682;
	setp.gt.f32 	%p141, %f686, 0f4B000000;
	selp.f32 	%f687, %f682, %f685, %p141;
	cvt.rzi.f32.f32 	%f688, %f682;
	setp.lt.f32 	%p142, %f686, 0f3F000000;
	selp.f32 	%f689, %f688, %f687, %p142;
	cvt.rzi.s32.f32 	%r353, %f689;
	fma.rn.f32 	%f690, %f689, 0fBF000000, %f681;
	mul.f32 	%f691, %f690, %f690;
	fma.rn.f32 	%f692, %f691, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f693, %f691, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f694, %f692, %f691, 0fC0A55DF6;
	fma.rn.f32 	%f695, %f693, %f691, 0f4081E0CF;
	fma.rn.f32 	%f696, %f691, %f690, 0f00000000;
	fma.rn.f32 	%f697, %f695, %f691, 0fC09DE9E6;
	fma.rn.f32 	%f698, %f694, %f696, 0f00000000;
	fma.rn.f32 	%f699, %f697, %f691, 0f3F800000;
	fma.rn.f32 	%f700, %f690, 0f40490FDB, %f698;
	and.b32  	%r354, %r353, 1;
	setp.eq.b32 	%p143, %r354, 1;
	selp.f32 	%f701, %f699, %f700, %p143;
	selp.f32 	%f702, %f700, %f699, %p143;
	and.b32  	%r355, %r353, 2;
	setp.eq.s32 	%p144, %r355, 0;
	neg.f32 	%f703, %f701;
	selp.f32 	%f704, %f701, %f703, %p144;
	add.s32 	%r356, %r353, 1;
	and.b32  	%r357, %r356, 2;
	setp.eq.s32 	%p145, %r357, 0;
	sub.f32 	%f705, %f71, %f702;
	selp.f32 	%f706, %f702, %f705, %p145;
	cvt.rzi.f32.f32 	%f707, %f681;
	setp.eq.f32 	%p146, %f707, %f681;
	mul.f32 	%f708, %f681, 0f00000000;
	selp.f32 	%f709, %f708, %f704, %p146;
	mov.b32 	%r358, %f709;
	abs.f32 	%f710, %f681;
	setp.gt.f32 	%p147, %f710, 0f4B800000;
	add.f32 	%f711, %f709, 0f3F800000;
	selp.f32 	%f712, %f711, %f706, %p147;
	mov.b32 	%r277, %f712;
	mov.b32 	%r276, %f679;
	// begin inline asm
	cvt.rn.f16x2.f32 %r275, %r277, %r276;
	// end inline asm
	xor.b32  	%r280, %r358, -2147483648;
	xor.b32  	%r279, %r347, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r278, %r280, %r279;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r281, %r265, %r264;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r284, %r268, %r267;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r287, %r289, %r288;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r290, %r265, %r264;
	// end inline asm
	shl.b32 	%r360, %r102, 13;
	shl.b32 	%r361, %r106, 9;
	shl.b32 	%r362, %r1, 5;
	and.b32  	%r363, %r47, 28;
	and.b32  	%r364, %r362, 224;
	and.b32  	%r365, %r362, 256;
	or.b32  	%r366, %r362, %r363;
	or.b32  	%r367, %r366, %r360;
	add.s32 	%r21, %r367, %r361;
	and.b32  	%r22, %r2, 8;
	shl.b32 	%r368, %r2, 4;
	or.b32  	%r369, %r368, %r22;
	shr.u32 	%r370, %r369, 2;
	and.b32  	%r371, %r370, 30;
	shr.u32 	%r372, %r3, 1;
	and.b32  	%r23, %r2, 4;
	and.b32  	%r373, %r4, 32;
	or.b32  	%r24, %r373, %r372;
	or.b32  	%r374, %r52, %r50;
	or.b32  	%r375, %r374, %r48;
	or.b32  	%r376, %r375, %r51;
	shr.u32 	%r377, %r376, 1;
	mul.lo.s32 	%r378, %r377, 65;
	add.s32 	%r379, %r378, %r24;
	or.b32  	%r25, %r24, 8;
	add.s32 	%r380, %r378, %r25;
	or.b32  	%r26, %r24, 16;
	add.s32 	%r381, %r378, %r26;
	or.b32  	%r27, %r24, 24;
	add.s32 	%r382, %r378, %r27;
	shl.b32 	%r383, %r3, 1;
	or.b32  	%r384, %r383, %r56;
	mul.lo.s32 	%r385, %r384, 65;
	add.s32 	%r386, %r371, %r385;
	mul.wide.u32 	%rd45, %r386, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd47, %rd46, 33408;
	add.s64 	%rd6, %rd47, %rd45;
	cvt.u64.u32 	%rd48, %r371;
	cvt.u64.u32 	%rd49, %r385;
	add.s64 	%rd50, %rd49, %rd48;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd7, %rd47, %rd51;
	shl.b32 	%r387, %r104, 15;
	add.s32 	%r388, %r387, -98304;
	or.b32  	%r28, %r363, %r364;
	shl.b32 	%r389, %r3, 11;
	shl.b32 	%r390, %r2, 6;
	and.b32  	%r391, %r390, 1536;
	or.b32  	%r392, %r391, %r389;
	or.b32  	%r29, %r392, %r365;
	cvt.s64.s32 	%rd8, %r388;
	bfe.s32 	%r393, %r3, 2, 1;
	and.b32  	%r394, %r3, 4;
	setp.eq.s32 	%p149, %r394, 0;
	and.b32  	%r395, %r393, 260;
	mul.lo.s32 	%r396, %r56, 65;
	shr.u32 	%r397, %r3, 3;
	mul.lo.s32 	%r398, %r397, 130;
	and.b32  	%r399, %r3, 1;
	neg.s32 	%r400, %r399;
	setp.eq.b32 	%p150, %r399, 1;
	and.b32  	%r401, %r400, 1040;
	bfe.s32 	%r402, %r3, 1, 1;
	and.b32  	%r403, %r3, 2;
	setp.eq.s32 	%p151, %r403, 0;
	and.b32  	%r404, %r402, 520;
	add.s32 	%r405, %r401, %r371;
	add.s32 	%r406, %r405, %r395;
	add.s32 	%r407, %r406, %r396;
	add.s32 	%r408, %r407, %r398;
	add.s32 	%r409, %r408, %r404;
	mul.wide.u32 	%rd52, %r409, 4;
	add.s64 	%rd9, %rd46, %rd52;
	selp.b64 	%rd53, 0, 520, %p151;
	cvt.u64.u32 	%rd54, %r398;
	cvt.u64.u32 	%rd55, %r396;
	selp.b64 	%rd56, 0, 260, %p149;
	selp.b64 	%rd57, 1040, 0, %p150;
	add.s64 	%rd58, %rd48, %rd57;
	add.s64 	%rd59, %rd58, %rd56;
	add.s64 	%rd60, %rd59, %rd55;
	add.s64 	%rd61, %rd60, %rd54;
	add.s64 	%rd62, %rd61, %rd53;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd10, %rd46, %rd63;
	cvt.u64.u32 	%rd64, %r407;
	add.s64 	%rd65, %rd64, %rd54;
	add.s64 	%rd66, %rd65, %rd53;
	shl.b64 	%rd67, %rd66, 2;
	add.s64 	%rd11, %rd46, %rd67;
	add.s32 	%r410, %r409, 2113;
	mul.wide.u32 	%rd68, %r410, 4;
	add.s64 	%rd12, %rd46, %rd68;
	add.s32 	%r411, %r409, 2082;
	mul.wide.u32 	%rd69, %r411, 4;
	add.s64 	%rd13, %rd46, %rd69;
	add.s32 	%r412, %r409, 2114;
	mul.wide.u32 	%rd70, %r412, 4;
	add.s64 	%rd14, %rd46, %rd70;
	add.s32 	%r413, %r409, 4194;
	mul.wide.u32 	%rd71, %r413, 4;
	add.s64 	%rd15, %rd46, %rd71;
	add.s32 	%r414, %r409, 4163;
	mul.wide.u32 	%rd72, %r414, 4;
	add.s64 	%rd16, %rd46, %rd72;
	add.s32 	%r415, %r409, 4195;
	mul.wide.u32 	%rd73, %r415, 4;
	add.s64 	%rd17, %rd46, %rd73;
	add.s32 	%r416, %r409, 6275;
	mul.wide.u32 	%rd74, %r416, 4;
	add.s64 	%rd18, %rd46, %rd74;
	add.s32 	%r417, %r409, 6244;
	mul.wide.u32 	%rd75, %r417, 4;
	add.s64 	%rd19, %rd46, %rd75;
	add.s32 	%r418, %r409, 6276;
	mul.wide.u32 	%rd76, %r418, 4;
	add.s64 	%rd20, %rd46, %rd76;
	bfe.s32 	%r419, %r2, 1, 1;
	and.b32  	%r30, %r419, 65;
	and.b32  	%r420, %r2, 1;
	neg.s32 	%r421, %r420;
	and.b32  	%r31, %r421, 130;
	mul.wide.u32 	%rd77, %r382, 4;
	add.s64 	%rd21, %rd47, %rd77;
	mul.wide.u32 	%rd78, %r381, 4;
	add.s64 	%rd22, %rd47, %rd78;
	mul.wide.u32 	%rd79, %r380, 4;
	add.s64 	%rd23, %rd47, %rd79;
	mul.wide.u32 	%rd80, %r379, 4;
	add.s64 	%rd24, %rd47, %rd80;
	mov.u16 	%rs236, 25600;
	mov.u16 	%rs238, 21504;
	mov.u16 	%rs246, 18432;
	mov.u16 	%rs260, -14592;
	mov.u32 	%r2520, %r2518;
	mov.u32 	%r2521, %r2518;
	mov.u32 	%r2522, %r2518;
	mov.u32 	%r2523, %r2518;
	mov.u32 	%r2524, %r2518;
	mov.u32 	%r2525, %r2518;
	mov.u32 	%r2526, %r2518;
	mov.u32 	%r2527, %r2518;
	mov.u32 	%r2538, %r2518;
	mov.u32 	%r2539, %r2518;
	mov.u32 	%r2540, %r2518;
	mov.u32 	%r2541, %r2518;
	mov.u32 	%r44, %r2518;
	bra.uni 	$L__BB0_31;
$L__BB0_39:                             // %pass10370
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r2511, %r2519, %r28;
	or.b32  	%r2512, %r2511, %r29;
	or.b32  	%r2513, %r2512, 98304;
	cvt.s64.s32 	%rd134, %r2513;
	add.s64 	%rd135, %rd134, %rd8;
	shr.u64 	%rd136, %rd135, 39;
	add.s64 	%rd137, %rd135, %rd136;
	shr.s64 	%rd138, %rd137, 25;
	setp.lt.s64 	%p180, %rd135, 0;
	and.b64  	%rd139, %rd137, -33554432;
	setp.ne.s64 	%p181, %rd139, %rd135;
	and.pred  	%p182, %p180, %p181;
	selp.u64 	%rd140, 1, 0, %p182;
	sub.s64 	%rd141, %rd140, %rd138;
	shl.b64 	%rd142, %rd141, 25;
	add.s64 	%rd143, %rd142, %rd135;
	shl.b64 	%rd144, %rd143, 2;
	add.s64 	%rd145, %rd3, %rd144;
	st.global.v4.u32 	[%rd145], {%r97, %r99, %r98, %r100};
	setp.ne.s32 	%p183, %r44, 65280;
	add.s32 	%r44, %r44, 256;
	add.s32 	%r2514, %r44, %r102;
	setp.lt.s32 	%p184, %r2514, %r103;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_40;
$L__BB0_31:                             // %L1523
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_32 Depth 2
	setp.eq.s32 	%p152, %r22, 0;
	or.b32  	%r487, %r44, %r51;
	or.b32  	%r488, %r487, %r2;
	and.b32  	%r489, %r488, 65328;
	or.b32  	%r490, %r489, %r3;
	shl.b32 	%r491, %r490, 13;
	add.s32 	%r492, %r21, %r491;
	shr.s32 	%r493, %r492, 31;
	shr.u32 	%r494, %r493, 3;
	add.s32 	%r495, %r492, %r494;
	shr.s32 	%r496, %r495, 29;
	setp.lt.s32 	%p153, %r492, 0;
	and.b32  	%r497, %r495, -536870912;
	setp.ne.s32 	%p154, %r497, %r492;
	and.pred  	%p155, %p153, %p154;
	selp.u32 	%r498, 1, 0, %p155;
	sub.s32 	%r499, %r498, %r496;
	shl.b32 	%r500, %r499, 29;
	or.b32  	%r501, %r492, 1;
	add.s32 	%r502, %r501, %r500;
	mul.wide.s32 	%rd81, %r502, 4;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.v4.u32 	{%r503, %r504, %r505, %r506}, [%rd82+-4];
	or.b32  	%r507, %r491, 524288;
	add.s32 	%r508, %r21, %r507;
	shr.s32 	%r509, %r508, 31;
	shr.u32 	%r510, %r509, 3;
	add.s32 	%r511, %r508, %r510;
	shr.s32 	%r512, %r511, 29;
	setp.lt.s32 	%p156, %r508, 0;
	and.b32  	%r513, %r511, -536870912;
	setp.ne.s32 	%p157, %r513, %r508;
	and.pred  	%p158, %p156, %p157;
	selp.u32 	%r514, 1, 0, %p158;
	sub.s32 	%r515, %r514, %r512;
	shl.b32 	%r516, %r515, 29;
	or.b32  	%r517, %r508, 1;
	add.s32 	%r518, %r517, %r516;
	mul.wide.s32 	%rd83, %r518, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.v4.u32 	{%r519, %r520, %r521, %r522}, [%rd84+-4];
	or.b32  	%r523, %r491, 1048576;
	add.s32 	%r524, %r21, %r523;
	shr.s32 	%r525, %r524, 31;
	shr.u32 	%r526, %r525, 3;
	add.s32 	%r527, %r524, %r526;
	shr.s32 	%r528, %r527, 29;
	setp.lt.s32 	%p159, %r524, 0;
	and.b32  	%r529, %r527, -536870912;
	setp.ne.s32 	%p160, %r529, %r524;
	and.pred  	%p161, %p159, %p160;
	selp.u32 	%r530, 1, 0, %p161;
	sub.s32 	%r531, %r530, %r528;
	shl.b32 	%r532, %r531, 29;
	or.b32  	%r533, %r524, 1;
	add.s32 	%r534, %r533, %r532;
	mul.wide.s32 	%rd85, %r534, 4;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.v4.u32 	{%r535, %r536, %r537, %r538}, [%rd86+-4];
	or.b32  	%r539, %r491, 1572864;
	add.s32 	%r540, %r21, %r539;
	shr.s32 	%r541, %r540, 31;
	shr.u32 	%r542, %r541, 3;
	add.s32 	%r543, %r540, %r542;
	shr.s32 	%r544, %r543, 29;
	setp.lt.s32 	%p162, %r540, 0;
	and.b32  	%r545, %r543, -536870912;
	setp.ne.s32 	%p163, %r545, %r540;
	and.pred  	%p164, %p162, %p163;
	selp.u32 	%r546, 1, 0, %p164;
	sub.s32 	%r547, %r546, %r544;
	shl.b32 	%r548, %r547, 29;
	or.b32  	%r549, %r540, 1;
	add.s32 	%r550, %r549, %r548;
	mul.wide.s32 	%rd87, %r550, 4;
	add.s64 	%rd88, %rd2, %rd87;
	ld.global.v4.u32 	{%r551, %r552, %r553, %r554}, [%rd88+-4];
	selp.b32 	%r555, %r505, %r503, %p152;
	shfl.sync.bfly.b32	%r556, %r555, 8, 31, -1;
	selp.b32 	%r423, %r503, %r556, %p152;
	selp.b32 	%r424, %r556, %r505, %p152;
	selp.b32 	%r557, %r506, %r504, %p152;
	shfl.sync.bfly.b32	%r558, %r557, 8, 31, -1;
	selp.b32 	%r431, %r504, %r558, %p152;
	selp.b32 	%r432, %r558, %r506, %p152;
	selp.b32 	%r559, %r521, %r519, %p152;
	shfl.sync.bfly.b32	%r560, %r559, 8, 31, -1;
	selp.b32 	%r439, %r519, %r560, %p152;
	selp.b32 	%r440, %r560, %r521, %p152;
	selp.b32 	%r561, %r522, %r520, %p152;
	shfl.sync.bfly.b32	%r562, %r561, 8, 31, -1;
	selp.b32 	%r447, %r520, %r562, %p152;
	selp.b32 	%r448, %r562, %r522, %p152;
	selp.b32 	%r563, %r537, %r535, %p152;
	shfl.sync.bfly.b32	%r564, %r563, 8, 31, -1;
	selp.b32 	%r455, %r535, %r564, %p152;
	selp.b32 	%r456, %r564, %r537, %p152;
	selp.b32 	%r565, %r538, %r536, %p152;
	shfl.sync.bfly.b32	%r566, %r565, 8, 31, -1;
	selp.b32 	%r463, %r536, %r566, %p152;
	selp.b32 	%r464, %r566, %r538, %p152;
	selp.b32 	%r567, %r553, %r551, %p152;
	shfl.sync.bfly.b32	%r568, %r567, 8, 31, -1;
	selp.b32 	%r471, %r551, %r568, %p152;
	selp.b32 	%r472, %r568, %r553, %p152;
	selp.b32 	%r569, %r554, %r552, %p152;
	shfl.sync.bfly.b32	%r570, %r569, 8, 31, -1;
	selp.b32 	%r479, %r552, %r570, %p152;
	selp.b32 	%r480, %r570, %r554, %p152;
	mov.u32 	%r481, 21520;
	// begin inline asm
	prmt.b32 %r422, %r423, %r424, %r481;
	// end inline asm
	mov.u32 	%r485, 30258;
	// begin inline asm
	prmt.b32 %r426, %r423, %r424, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r430, %r431, %r432, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r434, %r431, %r432, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r438, %r439, %r440, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r442, %r439, %r440, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r446, %r447, %r448, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r450, %r447, %r448, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r454, %r455, %r456, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r458, %r455, %r456, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r462, %r463, %r464, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r466, %r463, %r464, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r470, %r471, %r472, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r474, %r471, %r472, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r478, %r479, %r480, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r482, %r479, %r480, %r485;
	// end inline asm
	st.shared.u32 	[%rd9], %r422;
	st.shared.u32 	[%rd10+128], %r426;
	st.shared.u32 	[%rd10+4], %r430;
	st.shared.u32 	[%rd10+132], %r434;
	st.shared.u32 	[%rd11+8324], %r438;
	st.shared.u32 	[%rd12], %r442;
	st.shared.u32 	[%rd13], %r446;
	st.shared.u32 	[%rd14], %r450;
	st.shared.u32 	[%rd11+16648], %r454;
	st.shared.u32 	[%rd15], %r458;
	st.shared.u32 	[%rd16], %r462;
	st.shared.u32 	[%rd17], %r466;
	st.shared.u32 	[%rd11+24972], %r470;
	st.shared.u32 	[%rd18], %r474;
	st.shared.u32 	[%rd19], %r478;
	st.shared.u32 	[%rd20], %r482;
	bar.sync 	0;
	or.b32  	%r571, %r44, %r23;
	or.b32  	%r45, %r571, %r57;
	shr.u32 	%r2533, %r45, 6;
	mov.u64 	%rd150, %rd24;
	mov.u64 	%rd151, %rd23;
	mov.u64 	%rd152, %rd22;
	mov.u64 	%rd153, %rd21;
	mov.u32 	%r2534, %r2527;
	mov.u32 	%r2535, %r2526;
	mov.u32 	%r2536, %r2525;
	mov.u32 	%r2537, %r2524;
	mov.u32 	%r2542, %r2518;
	mov.u32 	%r2543, %r2523;
	mov.u32 	%r2544, %r2522;
	mov.u32 	%r2545, %r2521;
	mov.u32 	%r2546, %r2520;
$L__BB0_32:                             // %pass5640
                                        //   Parent Loop BB0_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2527, %r2541;
	mov.u32 	%r2526, %r2540;
	mov.u32 	%r2525, %r2539;
	mov.u32 	%r2524, %r2538;
	mov.u32 	%r2520, %r2537;
	mov.u32 	%r2521, %r2536;
	mov.u32 	%r2522, %r2535;
	mov.u32 	%r2523, %r2534;
	add.s32 	%r2384, %r45, %r2542;
	bfe.s32 	%r2385, %r2384, 2, 1;
	and.b32  	%r2386, %r2385, 260;
	and.b32  	%r2387, %r2533, 3;
	mul.lo.s32 	%r2388, %r2387, 2081;
	and.b32  	%r2389, %r2384, 1;
	neg.s32 	%r2390, %r2389;
	and.b32  	%r2391, %r2390, 1040;
	bfe.s32 	%r2392, %r2384, 1, 1;
	and.b32  	%r2393, %r2392, 520;
	or.b32  	%r2394, %r24, %r2391;
	add.s32 	%r2395, %r2394, %r2386;
	add.s32 	%r2396, %r2395, %r30;
	add.s32 	%r2397, %r2396, %r2388;
	add.s32 	%r2398, %r2397, %r31;
	add.s32 	%r2399, %r2398, %r2393;
	mul.wide.u32 	%rd89, %r2399, 4;
	add.s64 	%rd91, %rd46, %rd89;
	ld.shared.u32 	%r2538, [%rd91];
	// begin inline asm
	mov.b32 %r577, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r588, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r576, %r2538, -2004318072;
	mov.u32 	%r575, 983055;
	// begin inline asm
	lop3.b32 %r574, %r575, %r576, %r577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r578, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r579, %r577, %r578;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r582, %r574, %r579;
	// end inline asm
	mov.u32 	%r586, 15728880;
	// begin inline asm
	lop3.b32 %r585, %r586, %r576, %r588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r589, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r590, %r588, %r589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r593, %r585, %r590;
	// end inline asm
	shr.u32 	%r598, %r576, 8;
	// begin inline asm
	lop3.b32 %r596, %r575, %r598, %r577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r600, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r601, %r577, %r600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r604, %r596, %r601;
	// end inline asm
	// begin inline asm
	lop3.b32 %r607, %r586, %r598, %r588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r611, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r612, %r588, %r611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r615, %r607, %r612;
	// end inline asm
	// begin inline asm
	mov.b32 %r623, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r634, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r622, %r2546, -2004318072;
	// begin inline asm
	lop3.b32 %r620, %r575, %r622, %r623, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r624, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r625, %r623, %r624;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r628, %r620, %r625;
	// end inline asm
	// begin inline asm
	lop3.b32 %r631, %r586, %r622, %r634, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r635, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r636, %r634, %r635;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r639, %r631, %r636;
	// end inline asm
	shr.u32 	%r644, %r622, 8;
	// begin inline asm
	lop3.b32 %r642, %r575, %r644, %r623, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r646, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r647, %r623, %r646;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r650, %r642, %r647;
	// end inline asm
	// begin inline asm
	lop3.b32 %r653, %r586, %r644, %r634, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r657, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r658, %r634, %r657;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r661, %r653, %r658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r666, %r161, %r628, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r672, %r161, %r639, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r678, %r161, %r650, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r684, %r161, %r661, %r2518;
	// end inline asm
	// begin inline asm
	mov.b32 %r693, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r704, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r692, %r2520, -2004318072;
	// begin inline asm
	lop3.b32 %r690, %r575, %r692, %r693, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r694, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r695, %r693, %r694;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r698, %r690, %r695;
	// end inline asm
	// begin inline asm
	lop3.b32 %r701, %r586, %r692, %r704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r705, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r706, %r704, %r705;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r709, %r701, %r706;
	// end inline asm
	shr.u32 	%r714, %r692, 8;
	// begin inline asm
	lop3.b32 %r712, %r575, %r714, %r693, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r716, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r717, %r693, %r716;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r720, %r712, %r717;
	// end inline asm
	// begin inline asm
	lop3.b32 %r723, %r586, %r714, %r704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r727, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r728, %r704, %r727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r731, %r723, %r728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r734, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r736, %r734, %r698, %r666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r740, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r742, %r740, %r709, %r672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r746, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r748, %r746, %r720, %r678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r752, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r754, %r752, %r731, %r684;
	// end inline asm
	// begin inline asm
	mov.b32 %r763, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r774, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r762, %r2524, -2004318072;
	// begin inline asm
	lop3.b32 %r760, %r575, %r762, %r763, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r764, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r765, %r763, %r764;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r768, %r760, %r765;
	// end inline asm
	// begin inline asm
	lop3.b32 %r771, %r586, %r762, %r774, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r775, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r776, %r774, %r775;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r779, %r771, %r776;
	// end inline asm
	shr.u32 	%r784, %r762, 8;
	// begin inline asm
	lop3.b32 %r782, %r575, %r784, %r763, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r786, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r787, %r763, %r786;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r790, %r782, %r787;
	// end inline asm
	// begin inline asm
	lop3.b32 %r793, %r586, %r784, %r774, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r797, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r798, %r774, %r797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r801, %r793, %r798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r806, %r223, %r768, %r736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r812, %r223, %r779, %r742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r818, %r223, %r790, %r748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r824, %r223, %r801, %r754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r828, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r859, %r828, %r582, %r806;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r834, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r856, %r834, %r593, %r812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r840, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r868, %r840, %r604, %r818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r846, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r865, %r846, %r615, %r824;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r852, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r854, %r852, %r856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r857, %r257, %r859, %r854;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r861, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r863, %r861, %r865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r866, %r257, %r868, %r863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r870, %r260, %r859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r873, %r257, %r856, %r870;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r877, %r260, %r868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r880, %r257, %r865, %r877;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r911, %r908}, {%r263, %r269, %r266, %r272}, {%r857, %r873}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r920, %r917}, {%r263, %r269, %r266, %r272}, {%r866, %r880}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r904, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r906, %r904, %r908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r909, %r275, %r911, %r906;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r913, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r915, %r913, %r917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r918, %r275, %r920, %r915;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r922, %r278, %r911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r925, %r275, %r908, %r922;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r929, %r278, %r920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r932, %r275, %r917, %r929;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r936, %r937}, {%r281, %r287, %r284, %r290}, {%r909, %r925}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r946, %r947}, {%r281, %r287, %r284, %r290}, {%r918, %r932}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r956, %r53, %r936;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r959, %r53, %r937;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r962, %r53, %r946;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r965, %r53, %r947;
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs260, %rs260};
	// end inline asm
	mov.u16 	%rs51, 18176;
	// begin inline asm
	mov.b32 %r969, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r970, %r956, %r968;
	// end inline asm
	// begin inline asm
	min.f16x2 %r973, %r970, %r969;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r978, %r959, %r976;
	// end inline asm
	// begin inline asm
	min.f16x2 %r981, %r978, %r977;
	// end inline asm
	// begin inline asm
	mov.b32 %r984, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r985, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r986, %r962, %r984;
	// end inline asm
	// begin inline asm
	min.f16x2 %r989, %r986, %r985;
	// end inline asm
	// begin inline asm
	mov.b32 %r992, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r993, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r994, %r965, %r992;
	// end inline asm
	// begin inline asm
	min.f16x2 %r997, %r994, %r993;
	// end inline asm
	mov.u16 	%rs65, 26112;
	// begin inline asm
	mov.b32 %r1003, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r973, %r1003;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1004, %r981, %r1003;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1007, %r989, %r1003;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1010, %r997, %r1003;
	// end inline asm
	mov.u32 	%r1016, 25152;
	// begin inline asm
	prmt.b32 %r1013, %r1001, %r1007, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1017, %r1004, %r1010, %r1016;
	// end inline asm
	shl.b32 	%r1024, %r1017, 4;
	mov.u32 	%r1022, 252645135;
	// begin inline asm
	lop3.b32 %r1021, %r1022, %r1013, %r1024, 202;
	// end inline asm
	st.shared.u32 	[%rd150], %r1021;
	or.b32  	%r2400, %r25, %r2391;
	add.s32 	%r2401, %r2400, %r2386;
	add.s32 	%r2402, %r2401, %r30;
	add.s32 	%r2403, %r2402, %r2388;
	add.s32 	%r2404, %r2403, %r31;
	add.s32 	%r2405, %r2404, %r2393;
	mul.wide.u32 	%rd92, %r2405, 4;
	add.s64 	%rd93, %rd46, %rd92;
	ld.shared.u32 	%r2539, [%rd93];
	// begin inline asm
	mov.b32 %r1030, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1041, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1029, %r2539, -2004318072;
	// begin inline asm
	lop3.b32 %r1027, %r575, %r1029, %r1030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1031, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1032, %r1030, %r1031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1035, %r1027, %r1032;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1038, %r586, %r1029, %r1041, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1042, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1043, %r1041, %r1042;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1046, %r1038, %r1043;
	// end inline asm
	shr.u32 	%r1051, %r1029, 8;
	// begin inline asm
	lop3.b32 %r1049, %r575, %r1051, %r1030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1053, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1054, %r1030, %r1053;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1057, %r1049, %r1054;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1060, %r586, %r1051, %r1041, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1064, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1065, %r1041, %r1064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1068, %r1060, %r1065;
	// end inline asm
	// begin inline asm
	mov.b32 %r1076, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1087, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1075, %r2545, -2004318072;
	// begin inline asm
	lop3.b32 %r1073, %r575, %r1075, %r1076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1077, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1078, %r1076, %r1077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1081, %r1073, %r1078;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1084, %r586, %r1075, %r1087, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1088, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1089, %r1087, %r1088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1092, %r1084, %r1089;
	// end inline asm
	shr.u32 	%r1097, %r1075, 8;
	// begin inline asm
	lop3.b32 %r1095, %r575, %r1097, %r1076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1099, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1100, %r1076, %r1099;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1103, %r1095, %r1100;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1106, %r586, %r1097, %r1087, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1110, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1111, %r1087, %r1110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1114, %r1106, %r1111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r161, %r1081, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r161, %r1092, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r161, %r1103, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r161, %r1114, %r2518;
	// end inline asm
	// begin inline asm
	mov.b32 %r1146, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1157, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1145, %r2521, -2004318072;
	// begin inline asm
	lop3.b32 %r1143, %r575, %r1145, %r1146, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1147, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1148, %r1146, %r1147;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1151, %r1143, %r1148;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1154, %r586, %r1145, %r1157, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1158, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1159, %r1157, %r1158;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1162, %r1154, %r1159;
	// end inline asm
	shr.u32 	%r1167, %r1145, 8;
	// begin inline asm
	lop3.b32 %r1165, %r575, %r1167, %r1146, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1169, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1170, %r1146, %r1169;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1173, %r1165, %r1170;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1176, %r586, %r1167, %r1157, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1180, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1181, %r1157, %r1180;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1184, %r1176, %r1181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1187, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1189, %r1187, %r1151, %r1119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1193, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r1193, %r1162, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1199, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r1199, %r1173, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1205, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1207, %r1205, %r1184, %r1137;
	// end inline asm
	// begin inline asm
	mov.b32 %r1216, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1227, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1215, %r2525, -2004318072;
	// begin inline asm
	lop3.b32 %r1213, %r575, %r1215, %r1216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1217, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1218, %r1216, %r1217;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1221, %r1213, %r1218;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1224, %r586, %r1215, %r1227, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1228, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1229, %r1227, %r1228;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1232, %r1224, %r1229;
	// end inline asm
	shr.u32 	%r1237, %r1215, 8;
	// begin inline asm
	lop3.b32 %r1235, %r575, %r1237, %r1216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1240, %r1216, %r1239;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1243, %r1235, %r1240;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1246, %r586, %r1237, %r1227, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1250, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1251, %r1227, %r1250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1254, %r1246, %r1251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1259, %r223, %r1221, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1265, %r223, %r1232, %r1195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1271, %r223, %r1243, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r223, %r1254, %r1207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1281, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1312, %r1281, %r1035, %r1259;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1287, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1309, %r1287, %r1046, %r1265;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1293, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1321, %r1293, %r1057, %r1271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1299, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1318, %r1299, %r1068, %r1277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1305, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1307, %r1305, %r1309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1310, %r257, %r1312, %r1307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1314, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1316, %r1314, %r1318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1319, %r257, %r1321, %r1316;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1323, %r260, %r1312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1326, %r257, %r1309, %r1323;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1330, %r260, %r1321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1333, %r257, %r1318, %r1330;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1364, %r1361}, {%r263, %r269, %r266, %r272}, {%r1310, %r1326}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1373, %r1370}, {%r263, %r269, %r266, %r272}, {%r1319, %r1333}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1357, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1359, %r1357, %r1361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r275, %r1364, %r1359;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1366, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1368, %r1366, %r1370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r275, %r1373, %r1368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1375, %r278, %r1364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1378, %r275, %r1361, %r1375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1382, %r278, %r1373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1385, %r275, %r1370, %r1382;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1389, %r1390}, {%r281, %r287, %r284, %r290}, {%r1362, %r1378}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1399, %r1400}, {%r281, %r287, %r284, %r290}, {%r1371, %r1385}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1409, %r53, %r1389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1412, %r53, %r1390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1415, %r53, %r1399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1418, %r53, %r1400;
	// end inline asm
	// begin inline asm
	mov.b32 %r1421, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1422, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1423, %r1409, %r1421;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1426, %r1423, %r1422;
	// end inline asm
	// begin inline asm
	mov.b32 %r1429, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1430, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1431, %r1412, %r1429;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1434, %r1431, %r1430;
	// end inline asm
	// begin inline asm
	mov.b32 %r1437, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1438, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1439, %r1415, %r1437;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1442, %r1439, %r1438;
	// end inline asm
	// begin inline asm
	mov.b32 %r1445, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1446, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1447, %r1418, %r1445;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1450, %r1447, %r1446;
	// end inline asm
	// begin inline asm
	mov.b32 %r1456, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1454, %r1426, %r1456;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1457, %r1434, %r1456;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1460, %r1442, %r1456;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1463, %r1450, %r1456;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1466, %r1454, %r1460, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1470, %r1457, %r1463, %r1016;
	// end inline asm
	shl.b32 	%r1477, %r1470, 4;
	// begin inline asm
	lop3.b32 %r1474, %r1022, %r1466, %r1477, 202;
	// end inline asm
	st.shared.u32 	[%rd151], %r1474;
	add.s32 	%r2406, %r26, %r2391;
	add.s32 	%r2407, %r2406, %r2386;
	add.s32 	%r2408, %r2407, %r30;
	add.s32 	%r2409, %r2408, %r2388;
	add.s32 	%r2410, %r2409, %r31;
	add.s32 	%r2411, %r2410, %r2393;
	mul.wide.u32 	%rd94, %r2411, 4;
	add.s64 	%rd95, %rd46, %rd94;
	ld.shared.u32 	%r2540, [%rd95];
	// begin inline asm
	mov.b32 %r1483, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1494, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1482, %r2540, -2004318072;
	// begin inline asm
	lop3.b32 %r1480, %r575, %r1482, %r1483, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1484, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1485, %r1483, %r1484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1488, %r1480, %r1485;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1491, %r586, %r1482, %r1494, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1495, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1496, %r1494, %r1495;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1499, %r1491, %r1496;
	// end inline asm
	shr.u32 	%r1504, %r1482, 8;
	// begin inline asm
	lop3.b32 %r1502, %r575, %r1504, %r1483, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1506, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1507, %r1483, %r1506;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1510, %r1502, %r1507;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1513, %r586, %r1504, %r1494, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1517, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1518, %r1494, %r1517;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1521, %r1513, %r1518;
	// end inline asm
	// begin inline asm
	mov.b32 %r1529, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1540, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1528, %r2544, -2004318072;
	// begin inline asm
	lop3.b32 %r1526, %r575, %r1528, %r1529, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1530, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1531, %r1529, %r1530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1534, %r1526, %r1531;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1537, %r586, %r1528, %r1540, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1541, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1542, %r1540, %r1541;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1545, %r1537, %r1542;
	// end inline asm
	shr.u32 	%r1550, %r1528, 8;
	// begin inline asm
	lop3.b32 %r1548, %r575, %r1550, %r1529, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1552, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1553, %r1529, %r1552;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1556, %r1548, %r1553;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1559, %r586, %r1550, %r1540, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1563, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1564, %r1540, %r1563;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1567, %r1559, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r161, %r1534, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1578, %r161, %r1545, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r161, %r1556, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r161, %r1567, %r2518;
	// end inline asm
	// begin inline asm
	mov.b32 %r1599, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1610, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1598, %r2522, -2004318072;
	// begin inline asm
	lop3.b32 %r1596, %r575, %r1598, %r1599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1600, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1601, %r1599, %r1600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1604, %r1596, %r1601;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1607, %r586, %r1598, %r1610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1611, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1612, %r1610, %r1611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1615, %r1607, %r1612;
	// end inline asm
	shr.u32 	%r1620, %r1598, 8;
	// begin inline asm
	lop3.b32 %r1618, %r575, %r1620, %r1599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1622, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1623, %r1599, %r1622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1626, %r1618, %r1623;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1629, %r586, %r1620, %r1610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1633, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1634, %r1610, %r1633;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1637, %r1629, %r1634;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1640, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1642, %r1640, %r1604, %r1572;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1646, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r1646, %r1615, %r1578;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1652, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1652, %r1626, %r1584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1658, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1660, %r1658, %r1637, %r1590;
	// end inline asm
	// begin inline asm
	mov.b32 %r1669, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1680, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1668, %r2526, -2004318072;
	// begin inline asm
	lop3.b32 %r1666, %r575, %r1668, %r1669, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1670, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1671, %r1669, %r1670;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1674, %r1666, %r1671;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1677, %r586, %r1668, %r1680, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1681, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1682, %r1680, %r1681;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1685, %r1677, %r1682;
	// end inline asm
	shr.u32 	%r1690, %r1668, 8;
	// begin inline asm
	lop3.b32 %r1688, %r575, %r1690, %r1669, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1692, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1693, %r1669, %r1692;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1696, %r1688, %r1693;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1699, %r586, %r1690, %r1680, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1703, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1704, %r1680, %r1703;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1707, %r1699, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r223, %r1674, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r223, %r1685, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r223, %r1696, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r223, %r1707, %r1660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1734, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r1734, %r1488, %r1712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r1740, %r1499, %r1718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1746, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r1746, %r1510, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r1752, %r1521, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1758, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r1758, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r257, %r1765, %r1760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1767, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r1767, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r257, %r1774, %r1769;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r260, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r257, %r1762, %r1776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1783, %r260, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r257, %r1771, %r1783;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1817, %r1814}, {%r263, %r269, %r266, %r272}, {%r1763, %r1779}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1826, %r1823}, {%r263, %r269, %r266, %r272}, {%r1772, %r1786}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1810, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1812, %r1810, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r275, %r1817, %r1812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1819, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r1819, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r275, %r1826, %r1821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1828, %r278, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r275, %r1814, %r1828;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1835, %r278, %r1826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1838, %r275, %r1823, %r1835;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1842, %r1843}, {%r281, %r287, %r284, %r290}, {%r1815, %r1831}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1852, %r1853}, {%r281, %r287, %r284, %r290}, {%r1824, %r1838}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r53, %r1842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1865, %r53, %r1843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r53, %r1852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r53, %r1853;
	// end inline asm
	// begin inline asm
	mov.b32 %r1874, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1875, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1876, %r1862, %r1874;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1879, %r1876, %r1875;
	// end inline asm
	// begin inline asm
	mov.b32 %r1882, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1883, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1884, %r1865, %r1882;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1887, %r1884, %r1883;
	// end inline asm
	// begin inline asm
	mov.b32 %r1890, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1891, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1892, %r1868, %r1890;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1895, %r1892, %r1891;
	// end inline asm
	// begin inline asm
	mov.b32 %r1898, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1899, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1900, %r1871, %r1898;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1903, %r1900, %r1899;
	// end inline asm
	// begin inline asm
	mov.b32 %r1909, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1907, %r1879, %r1909;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1910, %r1887, %r1909;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1913, %r1895, %r1909;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1916, %r1903, %r1909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1919, %r1907, %r1913, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1923, %r1910, %r1916, %r1016;
	// end inline asm
	shl.b32 	%r1930, %r1923, 4;
	// begin inline asm
	lop3.b32 %r1927, %r1022, %r1919, %r1930, 202;
	// end inline asm
	st.shared.u32 	[%rd152], %r1927;
	add.s32 	%r2412, %r27, %r2391;
	add.s32 	%r2413, %r2412, %r2386;
	add.s32 	%r2414, %r2413, %r30;
	add.s32 	%r2415, %r2414, %r2388;
	add.s32 	%r2416, %r2415, %r31;
	add.s32 	%r2417, %r2416, %r2393;
	mul.wide.u32 	%rd96, %r2417, 4;
	add.s64 	%rd97, %rd46, %rd96;
	ld.shared.u32 	%r2541, [%rd97];
	// begin inline asm
	mov.b32 %r1936, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1947, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1935, %r2541, -2004318072;
	// begin inline asm
	lop3.b32 %r1933, %r575, %r1935, %r1936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1937, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1938, %r1936, %r1937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1941, %r1933, %r1938;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1944, %r586, %r1935, %r1947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1948, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1949, %r1947, %r1948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1952, %r1944, %r1949;
	// end inline asm
	shr.u32 	%r1957, %r1935, 8;
	// begin inline asm
	lop3.b32 %r1955, %r575, %r1957, %r1936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1959, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1960, %r1936, %r1959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1963, %r1955, %r1960;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1966, %r586, %r1957, %r1947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1970, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1971, %r1947, %r1970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1974, %r1966, %r1971;
	// end inline asm
	// begin inline asm
	mov.b32 %r1982, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1993, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1981, %r2543, -2004318072;
	// begin inline asm
	lop3.b32 %r1979, %r575, %r1981, %r1982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1983, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1984, %r1982, %r1983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1987, %r1979, %r1984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1990, %r586, %r1981, %r1993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1994, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1995, %r1993, %r1994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1998, %r1990, %r1995;
	// end inline asm
	shr.u32 	%r2003, %r1981, 8;
	// begin inline asm
	lop3.b32 %r2001, %r575, %r2003, %r1982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2005, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2006, %r1982, %r2005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2009, %r2001, %r2006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2012, %r586, %r2003, %r1993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2016, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2017, %r1993, %r2016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2020, %r2012, %r2017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r161, %r1987, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r161, %r1998, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r161, %r2009, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2043, %r161, %r2020, %r2518;
	// end inline asm
	// begin inline asm
	mov.b32 %r2052, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2063, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2051, %r2523, -2004318072;
	// begin inline asm
	lop3.b32 %r2049, %r575, %r2051, %r2052, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2053, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2054, %r2052, %r2053;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2057, %r2049, %r2054;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2060, %r586, %r2051, %r2063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2064, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2065, %r2063, %r2064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2068, %r2060, %r2065;
	// end inline asm
	shr.u32 	%r2073, %r2051, 8;
	// begin inline asm
	lop3.b32 %r2071, %r575, %r2073, %r2052, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2075, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2076, %r2052, %r2075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2079, %r2071, %r2076;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2082, %r586, %r2073, %r2063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2086, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2087, %r2063, %r2086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2090, %r2082, %r2087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2093, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2095, %r2093, %r2057, %r2025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2099, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r2099, %r2068, %r2031;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2105, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2107, %r2105, %r2079, %r2037;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2111, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r2111, %r2090, %r2043;
	// end inline asm
	// begin inline asm
	mov.b32 %r2122, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2133, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2121, %r2527, -2004318072;
	// begin inline asm
	lop3.b32 %r2119, %r575, %r2121, %r2122, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2123, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2124, %r2122, %r2123;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2127, %r2119, %r2124;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2130, %r586, %r2121, %r2133, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2134, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2135, %r2133, %r2134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2138, %r2130, %r2135;
	// end inline asm
	shr.u32 	%r2143, %r2121, 8;
	// begin inline asm
	lop3.b32 %r2141, %r575, %r2143, %r2122, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2145, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2146, %r2122, %r2145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2149, %r2141, %r2146;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2152, %r586, %r2143, %r2133, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2156, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2157, %r2133, %r2156;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2160, %r2152, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2165, %r223, %r2127, %r2095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r223, %r2138, %r2101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r223, %r2149, %r2107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2183, %r223, %r2160, %r2113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2187, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r2187, %r1941, %r2165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2193, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2215, %r2193, %r1952, %r2171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r2199, %r1963, %r2177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2205, %r254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r2205, %r1974, %r2183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2211, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r2211, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r257, %r2218, %r2213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2220, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r2220, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r257, %r2227, %r2222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r260, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r257, %r2215, %r2229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2236, %r260, %r2227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r257, %r2224, %r2236;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2270, %r2267}, {%r263, %r269, %r266, %r272}, {%r2216, %r2232}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2279, %r2276}, {%r263, %r269, %r266, %r272}, {%r2225, %r2239}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2263, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2265, %r2263, %r2267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2268, %r275, %r2270, %r2265;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2272, %r278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2274, %r2272, %r2276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2277, %r275, %r2279, %r2274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2281, %r278, %r2270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2284, %r275, %r2267, %r2281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2288, %r278, %r2279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2291, %r275, %r2276, %r2288;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2295, %r2296}, {%r281, %r287, %r284, %r290}, {%r2268, %r2284}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2305, %r2306}, {%r281, %r287, %r284, %r290}, {%r2277, %r2291}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2315, %r53, %r2295;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2318, %r53, %r2296;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2321, %r53, %r2305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2324, %r53, %r2306;
	// end inline asm
	// begin inline asm
	mov.b32 %r2327, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2328, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2329, %r2315, %r2327;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2332, %r2329, %r2328;
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2336, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2337, %r2318, %r2335;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2340, %r2337, %r2336;
	// end inline asm
	// begin inline asm
	mov.b32 %r2343, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2345, %r2321, %r2343;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2348, %r2345, %r2344;
	// end inline asm
	// begin inline asm
	mov.b32 %r2351, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2352, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2353, %r2324, %r2351;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2356, %r2353, %r2352;
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2332, %r2362;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2340, %r2362;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2366, %r2348, %r2362;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2369, %r2356, %r2362;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2372, %r2360, %r2366, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2376, %r2363, %r2369, %r1016;
	// end inline asm
	shl.b32 	%r2383, %r2376, 4;
	// begin inline asm
	lop3.b32 %r2380, %r1022, %r2372, %r2383, 202;
	// end inline asm
	st.shared.u32 	[%rd153], %r2380;
	add.s32 	%r2542, %r2542, 64;
	add.s64 	%rd153, %rd153, 8324;
	add.s64 	%rd152, %rd152, 8324;
	add.s64 	%rd151, %rd151, 8324;
	add.s64 	%rd150, %rd150, 8324;
	add.s32 	%r2533, %r2533, 1;
	setp.eq.s32 	%p165, %r2542, 256;
	mov.u32 	%r2534, %r2527;
	mov.u32 	%r2535, %r2526;
	mov.u32 	%r2536, %r2525;
	mov.u32 	%r2537, %r2524;
	mov.u32 	%r2543, %r2523;
	mov.u32 	%r2544, %r2522;
	mov.u32 	%r2545, %r2521;
	mov.u32 	%r2546, %r2520;
	@%p165 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;
$L__BB0_33:                             // %guard_exit10925
                                        //   in Loop: Header=BB0_31 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2423, [%rd6];
	ld.shared.u32 	%r2424, [%rd7+128];
	ld.shared.u32 	%r2431, [%rd7+4];
	ld.shared.u32 	%r2432, [%rd7+132];
	ld.shared.u32 	%r2439, [%rd6+8324];
	ld.shared.u32 	%r2440, [%rd7+8452];
	ld.shared.u32 	%r2447, [%rd7+8328];
	ld.shared.u32 	%r2448, [%rd7+8456];
	ld.shared.u32 	%r2455, [%rd6+16648];
	ld.shared.u32 	%r2456, [%rd7+16776];
	ld.shared.u32 	%r2463, [%rd7+16652];
	ld.shared.u32 	%r2464, [%rd7+16780];
	ld.shared.u32 	%r2471, [%rd6+24972];
	ld.shared.u32 	%r2472, [%rd7+25100];
	ld.shared.u32 	%r2479, [%rd7+24976];
	ld.shared.u32 	%r2480, [%rd7+25104];
	// begin inline asm
	prmt.b32 %r2418, %r2423, %r2424, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2422, %r2423, %r2424, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2426, %r2431, %r2432, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2430, %r2431, %r2432, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2434, %r2439, %r2440, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2438, %r2439, %r2440, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2442, %r2447, %r2448, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2446, %r2447, %r2448, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2450, %r2455, %r2456, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2454, %r2455, %r2456, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2458, %r2463, %r2464, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2462, %r2463, %r2464, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2466, %r2471, %r2472, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2470, %r2471, %r2472, %r485;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2474, %r2479, %r2480, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2478, %r2479, %r2480, %r485;
	// end inline asm
	selp.b32 	%r2482, %r2422, %r2418, %p152;
	shfl.sync.bfly.b32	%r87, %r2482, 8, 31, -1;
	selp.b32 	%r2483, %r2430, %r2426, %p152;
	shfl.sync.bfly.b32	%r88, %r2483, 8, 31, -1;
	selp.b32 	%r2484, %r2438, %r2434, %p152;
	shfl.sync.bfly.b32	%r2485, %r2484, 8, 31, -1;
	selp.b32 	%r2486, %r2446, %r2442, %p152;
	shfl.sync.bfly.b32	%r2487, %r2486, 8, 31, -1;
	selp.b32 	%r2488, %r2454, %r2450, %p152;
	shfl.sync.bfly.b32	%r2489, %r2488, 8, 31, -1;
	selp.b32 	%r2490, %r2462, %r2458, %p152;
	shfl.sync.bfly.b32	%r2491, %r2490, 8, 31, -1;
	selp.b32 	%r2492, %r2470, %r2466, %p152;
	shfl.sync.bfly.b32	%r2493, %r2492, 8, 31, -1;
	selp.b32 	%r2494, %r2478, %r2474, %p152;
	shfl.sync.bfly.b32	%r2495, %r2494, 8, 31, -1;
	and.b32  	%r2496, %r44, 65280;
	setp.eq.s32 	%p167, %r2496, 0;
	shl.b32 	%r2519, %r44, 9;
	@%p167 bra 	$L__BB0_35;
// %bb.34:                              // %pass10049
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r2497, %r88, %r2430, %p152;
	selp.b32 	%r2498, %r2426, %r88, %p152;
	selp.b32 	%r2499, %r87, %r2422, %p152;
	selp.b32 	%r2500, %r2418, %r87, %p152;
	or.b32  	%r2502, %r2519, %r28;
	or.b32  	%r2503, %r29, %r2502;
	cvt.u64.u32 	%rd98, %r2503;
	add.s64 	%rd99, %rd98, %rd8;
	shr.u64 	%rd100, %rd99, 39;
	add.s64 	%rd101, %rd99, %rd100;
	shr.s64 	%rd102, %rd101, 25;
	setp.lt.s64 	%p169, %rd99, 0;
	and.b64  	%rd103, %rd101, -33554432;
	setp.ne.s64 	%p170, %rd103, %rd99;
	and.pred  	%p171, %p169, %p170;
	selp.u64 	%rd104, 1, 0, %p171;
	sub.s64 	%rd105, %rd104, %rd102;
	shl.b64 	%rd106, %rd105, 25;
	add.s64 	%rd107, %rd106, %rd99;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd109, %rd3, %rd108;
	st.global.v4.u32 	[%rd109], {%r2500, %r2498, %r2499, %r2497};
$L__BB0_35:                             // %pass10113
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r81, %r44, 64;
	setp.lt.u32 	%p172, %r81, 192;
	@%p172 bra 	$L__BB0_37;
// %bb.36:                              // %pass10156
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r89, %r2434, %r2485, %p152;
	selp.b32 	%r90, %r2485, %r2438, %p152;
	selp.b32 	%r91, %r2442, %r2487, %p152;
	selp.b32 	%r92, %r2487, %r2446, %p152;
	shl.b32 	%r2504, %r81, 9;
	or.b32  	%r2505, %r2504, %r28;
	or.b32  	%r2506, %r29, %r2505;
	cvt.u64.u32 	%rd110, %r2506;
	add.s64 	%rd111, %rd110, %rd8;
	shr.u64 	%rd112, %rd111, 39;
	add.s64 	%rd113, %rd111, %rd112;
	shr.s64 	%rd114, %rd113, 25;
	setp.lt.s64 	%p173, %rd111, 0;
	and.b64  	%rd115, %rd113, -33554432;
	setp.ne.s64 	%p174, %rd115, %rd111;
	and.pred  	%p175, %p173, %p174;
	selp.u64 	%rd116, 1, 0, %p175;
	sub.s64 	%rd117, %rd116, %rd114;
	shl.b64 	%rd118, %rd117, 25;
	add.s64 	%rd119, %rd118, %rd111;
	shl.b64 	%rd120, %rd119, 2;
	add.s64 	%rd121, %rd3, %rd120;
	st.global.v4.u32 	[%rd121], {%r89, %r91, %r90, %r92};
$L__BB0_37:                             // %pass10220
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r82, %r44, 128;
	selp.b32 	%r97, %r2466, %r2493, %p152;
	selp.b32 	%r98, %r2493, %r2470, %p152;
	selp.b32 	%r99, %r2474, %r2495, %p152;
	selp.b32 	%r100, %r2495, %r2478, %p152;
	setp.lt.u32 	%p176, %r82, 192;
	@%p176 bra 	$L__BB0_39;
// %bb.38:                              // %pass10263
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r93, %r2450, %r2489, %p152;
	selp.b32 	%r94, %r2489, %r2454, %p152;
	selp.b32 	%r95, %r2458, %r2491, %p152;
	selp.b32 	%r96, %r2491, %r2462, %p152;
	shl.b32 	%r2507, %r82, 9;
	or.b32  	%r2508, %r2507, %r28;
	or.b32  	%r2509, %r29, %r2508;
	cvt.u64.u32 	%rd122, %r2509;
	add.s64 	%rd123, %rd122, %rd8;
	shr.u64 	%rd124, %rd123, 39;
	add.s64 	%rd125, %rd123, %rd124;
	shr.s64 	%rd126, %rd125, 25;
	setp.lt.s64 	%p177, %rd123, 0;
	and.b64  	%rd127, %rd125, -33554432;
	setp.ne.s64 	%p178, %rd127, %rd123;
	and.pred  	%p179, %p177, %p178;
	selp.u64 	%rd128, 1, 0, %p179;
	sub.s64 	%rd129, %rd128, %rd126;
	shl.b64 	%rd130, %rd129, 25;
	add.s64 	%rd131, %rd130, %rd123;
	shl.b64 	%rd132, %rd131, 2;
	add.s64 	%rd133, %rd3, %rd132;
	st.global.v4.u32 	[%rd133], {%r93, %r95, %r94, %r96};
	bra.uni 	$L__BB0_39;
$L__BB0_40:                             // %L23132
	st.global.u32 	[%rd5], %r2518;
	ret;
$L__BB0_9:                              // %L180
	mov.u32 	%r2517, 2;
	st.global.u32 	[%rd5], %r2517;
	mov.u64 	%rd148, exception2065;
	cvta.global.u64 	%rd149, %rd148;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd149;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r101;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L288
	mov.u32 	%r2516, 3;
	st.global.u32 	[%rd5], %r2516;
	mov.u64 	%rd146, exception2065;
	cvta.global.u64 	%rd147, %rd146;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd147;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r101;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd38, exception1;
	cvta.global.u64 	%rd39, %rd38;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd39;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r101;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd40, exception1;
	cvta.global.u64 	%rd41, %rd40;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd41;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r101;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
