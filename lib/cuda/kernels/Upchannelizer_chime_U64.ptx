// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan64(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2065[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12085[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<186>;
	.reg .b16 	%rs<265>;
	.reg .b32 	%r<2541>;
	.reg .f32 	%f<721>;
	.reg .b64 	%rd<153>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r100, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd37, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r107, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r107, 33407;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r108, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r108, 33407;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r101, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd4, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r109, %r1, 9;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r110, %r109, %r2;
	or.b32  	%r111, %r110, %r4;
	mul.wide.u32 	%rd42, %r111, 4;
	add.s64 	%rd5, %rd4, %rd42;
	mov.u32 	%r112, 1;
	st.global.u32 	[%rd5], %r112;
	setp.gt.u32 	%p3, %r101, 65535;
	@%p3 bra 	$L__BB0_9;
// %bb.5:                               // %L131
	ld.param.u32 	%r102, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r102, %r101;
	setp.gt.s32 	%p5, %r102, 131071;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_9;
// %bb.6:                               // %L138
	ld.param.u32 	%r103, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r113, %r102, %r101;
	and.b32  	%r114, %r113, 255;
	setp.ne.s32 	%p7, %r114, 0;
	setp.gt.u32 	%p8, %r103, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_9;
// %bb.7:                               // %L149
	ld.param.u32 	%r104, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p10, %r104, %r103;
	setp.gt.s32 	%p11, %r104, 2047;
	or.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_9;
// %bb.8:                               // %L156
	not.b32 	%r115, %r103;
	add.s32 	%r116, %r115, %r104;
	and.b32  	%r117, %r116, 3;
	setp.eq.s32 	%p13, %r117, 0;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L269
	ld.param.u32 	%r105, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r105, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.11:                              // %L271
	ld.param.u32 	%r106, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p15, %r105, %r106;
	setp.lt.s32 	%p16, %r106, 17;
	and.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;
$L__BB0_13:                             // %pass141
	bfe.u32 	%r55, %r2, 2, 1;
	shr.u32 	%r56, %r2, 4;
	shl.b32 	%r122, %r56, 1;
	shl.b32 	%r123, %r55, 2;
	shl.b32 	%r57, %r2, 3;
	and.b32  	%r124, %r57, 24;
	or.b32  	%r125, %r123, %r124;
	or.b32  	%r126, %r122, %r125;
	bfe.u32 	%r127, %r2, 3, 1;
	or.b32  	%r59, %r127, %r126;
	shl.b32 	%r60, %r59, 1;
	or.b32  	%r128, %r60, -255;
	cvt.rn.f32.s32 	%f46, %r128;
	mov.f32 	%f47, 0f44008000;
	div.approx.f32 	%f42, %f46, %f47;
	mov.f32 	%f71, 0f00000000;
	mul.f32 	%f44, %f42, 0f40800000;
	setp.neu.f32 	%p23, %f44, 0f00000000;
	mov.f32 	%f720, 0f3F800000;
	mov.f32 	%f713, %f720;
	@%p23 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_15;
$L__BB0_14:                             // %L606
	add.f32 	%f74, %f44, %f44;
	mov.b32 	%r136, %f74;
	and.b32  	%r137, %r136, -2147483648;
	or.b32  	%r138, %r137, 1056964608;
	mov.b32 	%f75, %r138;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p24, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p24;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p25, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p25;
	cvt.rzi.s32.f32 	%r139, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f44;
	mul.f32 	%f83, %f82, %f82;
	fma.rn.f32 	%f84, %f83, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f85, %f83, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f86, %f84, %f83, 0fC0A55DF6;
	fma.rn.f32 	%f87, %f85, %f83, 0f4081E0CF;
	fma.rn.f32 	%f88, %f83, %f82, 0f00000000;
	fma.rn.f32 	%f89, %f87, %f83, 0fC09DE9E6;
	fma.rn.f32 	%f90, %f86, %f88, 0f00000000;
	fma.rn.f32 	%f91, %f89, %f83, 0f3F800000;
	fma.rn.f32 	%f92, %f82, 0f40490FDB, %f90;
	and.b32  	%r140, %r139, 1;
	setp.eq.b32 	%p26, %r140, 1;
	selp.f32 	%f93, %f91, %f92, %p26;
	and.b32  	%r141, %r139, 2;
	setp.eq.s32 	%p27, %r141, 0;
	sub.f32 	%f95, %f71, %f93;
	selp.f32 	%f96, %f93, %f95, %p27;
	cvt.rzi.f32.f32 	%f97, %f44;
	setp.eq.f32 	%p28, %f44, %f97;
	mul.f32 	%f98, %f44, 0f00000000;
	selp.f32 	%f99, %f98, %f96, %p28;
	mul.f32 	%f100, %f42, 0f41490FDB;
	div.approx.f32 	%f713, %f99, %f100;
$L__BB0_15:                             // %L610
	or.b32  	%r142, %r60, -191;
	cvt.rn.f32.s32 	%f104, %r142;
	div.approx.f32 	%f4, %f104, %f47;
	mul.f32 	%f6, %f4, 0f40800000;
	setp.eq.f32 	%p34, %f6, 0f00000000;
	mov.f32 	%f714, %f720;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L624
	add.f32 	%f132, %f6, %f6;
	mov.b32 	%r150, %f132;
	and.b32  	%r151, %r150, -2147483648;
	or.b32  	%r152, %r151, 1056964608;
	mov.b32 	%f133, %r152;
	add.f32 	%f134, %f132, %f133;
	cvt.rzi.f32.f32 	%f135, %f134;
	abs.f32 	%f136, %f132;
	setp.gt.f32 	%p35, %f136, 0f4B000000;
	selp.f32 	%f137, %f132, %f135, %p35;
	cvt.rzi.f32.f32 	%f138, %f132;
	setp.lt.f32 	%p36, %f136, 0f3F000000;
	selp.f32 	%f139, %f138, %f137, %p36;
	cvt.rzi.s32.f32 	%r153, %f139;
	fma.rn.f32 	%f140, %f139, 0fBF000000, %f6;
	mul.f32 	%f141, %f140, %f140;
	fma.rn.f32 	%f142, %f141, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f143, %f141, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f144, %f142, %f141, 0fC0A55DF6;
	fma.rn.f32 	%f145, %f143, %f141, 0f4081E0CF;
	fma.rn.f32 	%f146, %f141, %f140, 0f00000000;
	fma.rn.f32 	%f147, %f145, %f141, 0fC09DE9E6;
	fma.rn.f32 	%f148, %f144, %f146, 0f00000000;
	fma.rn.f32 	%f149, %f147, %f141, 0f3F800000;
	fma.rn.f32 	%f150, %f140, 0f40490FDB, %f148;
	and.b32  	%r154, %r153, 1;
	setp.eq.b32 	%p37, %r154, 1;
	selp.f32 	%f151, %f149, %f150, %p37;
	and.b32  	%r155, %r153, 2;
	setp.eq.s32 	%p38, %r155, 0;
	sub.f32 	%f153, %f71, %f151;
	selp.f32 	%f154, %f151, %f153, %p38;
	cvt.rzi.f32.f32 	%f155, %f6;
	setp.eq.f32 	%p39, %f6, %f155;
	mul.f32 	%f156, %f6, 0f00000000;
	selp.f32 	%f157, %f156, %f154, %p39;
	mul.f32 	%f158, %f4, 0f41490FDB;
	div.approx.f32 	%f714, %f157, %f158;
$L__BB0_17:                             // %L628
	or.b32  	%r159, %r60, -127;
	cvt.rn.f32.s32 	%f163, %r159;
	div.approx.f32 	%f9, %f163, %f47;
	mul.f32 	%f11, %f9, 0f40800000;
	setp.eq.f32 	%p45, %f11, 0f00000000;
	mov.f32 	%f715, %f720;
	@%p45 bra 	$L__BB0_19;
// %bb.18:                              // %L704
	add.f32 	%f191, %f11, %f11;
	mov.b32 	%r167, %f191;
	and.b32  	%r168, %r167, -2147483648;
	or.b32  	%r169, %r168, 1056964608;
	mov.b32 	%f192, %r169;
	add.f32 	%f193, %f191, %f192;
	cvt.rzi.f32.f32 	%f194, %f193;
	abs.f32 	%f195, %f191;
	setp.gt.f32 	%p46, %f195, 0f4B000000;
	selp.f32 	%f196, %f191, %f194, %p46;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p47, %f195, 0f3F000000;
	selp.f32 	%f198, %f197, %f196, %p47;
	cvt.rzi.s32.f32 	%r170, %f198;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f11;
	mul.f32 	%f200, %f199, %f199;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	and.b32  	%r171, %r170, 1;
	setp.eq.b32 	%p48, %r171, 1;
	selp.f32 	%f210, %f208, %f209, %p48;
	and.b32  	%r172, %r170, 2;
	setp.eq.s32 	%p49, %r172, 0;
	sub.f32 	%f212, %f71, %f210;
	selp.f32 	%f213, %f210, %f212, %p49;
	cvt.rzi.f32.f32 	%f214, %f11;
	setp.eq.f32 	%p50, %f11, %f214;
	mul.f32 	%f215, %f11, 0f00000000;
	selp.f32 	%f216, %f215, %f213, %p50;
	mul.f32 	%f217, %f9, 0f41490FDB;
	div.approx.f32 	%f715, %f216, %f217;
$L__BB0_19:                             // %L708
	or.b32  	%r173, %r60, -63;
	cvt.rn.f32.s32 	%f221, %r173;
	div.approx.f32 	%f15, %f221, %f47;
	mul.f32 	%f17, %f15, 0f40800000;
	setp.eq.f32 	%p56, %f17, 0f00000000;
	mov.f32 	%f716, %f720;
	@%p56 bra 	$L__BB0_21;
// %bb.20:                              // %L722
	add.f32 	%f249, %f17, %f17;
	mov.b32 	%r181, %f249;
	and.b32  	%r182, %r181, -2147483648;
	or.b32  	%r183, %r182, 1056964608;
	mov.b32 	%f250, %r183;
	add.f32 	%f251, %f249, %f250;
	cvt.rzi.f32.f32 	%f252, %f251;
	abs.f32 	%f253, %f249;
	setp.gt.f32 	%p57, %f253, 0f4B000000;
	selp.f32 	%f254, %f249, %f252, %p57;
	cvt.rzi.f32.f32 	%f255, %f249;
	setp.lt.f32 	%p58, %f253, 0f3F000000;
	selp.f32 	%f256, %f255, %f254, %p58;
	cvt.rzi.s32.f32 	%r184, %f256;
	fma.rn.f32 	%f257, %f256, 0fBF000000, %f17;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f260, %f258, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f261, %f259, %f258, 0fC0A55DF6;
	fma.rn.f32 	%f262, %f260, %f258, 0f4081E0CF;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f262, %f258, 0fC09DE9E6;
	fma.rn.f32 	%f265, %f261, %f263, 0f00000000;
	fma.rn.f32 	%f266, %f264, %f258, 0f3F800000;
	fma.rn.f32 	%f267, %f257, 0f40490FDB, %f265;
	and.b32  	%r185, %r184, 1;
	setp.eq.b32 	%p59, %r185, 1;
	selp.f32 	%f268, %f266, %f267, %p59;
	and.b32  	%r186, %r184, 2;
	setp.eq.s32 	%p60, %r186, 0;
	sub.f32 	%f270, %f71, %f268;
	selp.f32 	%f271, %f268, %f270, %p60;
	cvt.rzi.f32.f32 	%f272, %f17;
	setp.eq.f32 	%p61, %f17, %f272;
	mul.f32 	%f273, %f17, 0f00000000;
	selp.f32 	%f274, %f273, %f271, %p61;
	mul.f32 	%f275, %f15, 0f41490FDB;
	div.approx.f32 	%f716, %f274, %f275;
$L__BB0_21:                             // %L726
	or.b32  	%r190, %r60, 1;
	cvt.rn.f32.s32 	%f280, %r190;
	div.approx.f32 	%f20, %f280, %f47;
	mul.f32 	%f22, %f20, 0f40800000;
	setp.eq.f32 	%p67, %f22, 0f00000000;
	mov.f32 	%f717, %f720;
	@%p67 bra 	$L__BB0_23;
// %bb.22:                              // %L802
	add.f32 	%f308, %f22, %f22;
	mov.b32 	%r198, %f308;
	and.b32  	%r199, %r198, -2147483648;
	or.b32  	%r200, %r199, 1056964608;
	mov.b32 	%f309, %r200;
	add.f32 	%f310, %f308, %f309;
	cvt.rzi.f32.f32 	%f311, %f310;
	abs.f32 	%f312, %f308;
	setp.gt.f32 	%p68, %f312, 0f4B000000;
	selp.f32 	%f313, %f308, %f311, %p68;
	cvt.rzi.f32.f32 	%f314, %f308;
	setp.lt.f32 	%p69, %f312, 0f3F000000;
	selp.f32 	%f315, %f314, %f313, %p69;
	cvt.rzi.s32.f32 	%r201, %f315;
	fma.rn.f32 	%f316, %f315, 0fBF000000, %f22;
	mul.f32 	%f317, %f316, %f316;
	fma.rn.f32 	%f318, %f317, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f319, %f317, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f320, %f318, %f317, 0fC0A55DF6;
	fma.rn.f32 	%f321, %f319, %f317, 0f4081E0CF;
	fma.rn.f32 	%f322, %f317, %f316, 0f00000000;
	fma.rn.f32 	%f323, %f321, %f317, 0fC09DE9E6;
	fma.rn.f32 	%f324, %f320, %f322, 0f00000000;
	fma.rn.f32 	%f325, %f323, %f317, 0f3F800000;
	fma.rn.f32 	%f326, %f316, 0f40490FDB, %f324;
	and.b32  	%r202, %r201, 1;
	setp.eq.b32 	%p70, %r202, 1;
	selp.f32 	%f327, %f325, %f326, %p70;
	and.b32  	%r203, %r201, 2;
	setp.eq.s32 	%p71, %r203, 0;
	sub.f32 	%f329, %f71, %f327;
	selp.f32 	%f330, %f327, %f329, %p71;
	cvt.rzi.f32.f32 	%f331, %f22;
	setp.eq.f32 	%p72, %f22, %f331;
	mul.f32 	%f332, %f22, 0f00000000;
	selp.f32 	%f333, %f332, %f330, %p72;
	mul.f32 	%f334, %f20, 0f41490FDB;
	div.approx.f32 	%f717, %f333, %f334;
$L__BB0_23:                             // %L806
	or.b32  	%r204, %r60, 65;
	cvt.rn.f32.s32 	%f338, %r204;
	div.approx.f32 	%f26, %f338, %f47;
	mul.f32 	%f28, %f26, 0f40800000;
	setp.eq.f32 	%p78, %f28, 0f00000000;
	mov.f32 	%f718, %f720;
	@%p78 bra 	$L__BB0_25;
// %bb.24:                              // %L820
	add.f32 	%f366, %f28, %f28;
	mov.b32 	%r212, %f366;
	and.b32  	%r213, %r212, -2147483648;
	or.b32  	%r214, %r213, 1056964608;
	mov.b32 	%f367, %r214;
	add.f32 	%f368, %f366, %f367;
	cvt.rzi.f32.f32 	%f369, %f368;
	abs.f32 	%f370, %f366;
	setp.gt.f32 	%p79, %f370, 0f4B000000;
	selp.f32 	%f371, %f366, %f369, %p79;
	cvt.rzi.f32.f32 	%f372, %f366;
	setp.lt.f32 	%p80, %f370, 0f3F000000;
	selp.f32 	%f373, %f372, %f371, %p80;
	cvt.rzi.s32.f32 	%r215, %f373;
	fma.rn.f32 	%f374, %f373, 0fBF000000, %f28;
	mul.f32 	%f375, %f374, %f374;
	fma.rn.f32 	%f376, %f375, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f377, %f375, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f378, %f376, %f375, 0fC0A55DF6;
	fma.rn.f32 	%f379, %f377, %f375, 0f4081E0CF;
	fma.rn.f32 	%f380, %f375, %f374, 0f00000000;
	fma.rn.f32 	%f381, %f379, %f375, 0fC09DE9E6;
	fma.rn.f32 	%f382, %f378, %f380, 0f00000000;
	fma.rn.f32 	%f383, %f381, %f375, 0f3F800000;
	fma.rn.f32 	%f384, %f374, 0f40490FDB, %f382;
	and.b32  	%r216, %r215, 1;
	setp.eq.b32 	%p81, %r216, 1;
	selp.f32 	%f385, %f383, %f384, %p81;
	and.b32  	%r217, %r215, 2;
	setp.eq.s32 	%p82, %r217, 0;
	sub.f32 	%f387, %f71, %f385;
	selp.f32 	%f388, %f385, %f387, %p82;
	cvt.rzi.f32.f32 	%f389, %f28;
	setp.eq.f32 	%p83, %f28, %f389;
	mul.f32 	%f390, %f28, 0f00000000;
	selp.f32 	%f391, %f390, %f388, %p83;
	mul.f32 	%f392, %f26, 0f41490FDB;
	div.approx.f32 	%f718, %f391, %f392;
$L__BB0_25:                             // %L824
	or.b32  	%r221, %r60, 129;
	cvt.rn.f32.s32 	%f397, %r221;
	div.approx.f32 	%f31, %f397, %f47;
	mul.f32 	%f33, %f31, 0f40800000;
	setp.eq.f32 	%p89, %f33, 0f00000000;
	mov.f32 	%f719, %f720;
	@%p89 bra 	$L__BB0_27;
// %bb.26:                              // %L900
	add.f32 	%f425, %f33, %f33;
	mov.b32 	%r229, %f425;
	and.b32  	%r230, %r229, -2147483648;
	or.b32  	%r231, %r230, 1056964608;
	mov.b32 	%f426, %r231;
	add.f32 	%f427, %f425, %f426;
	cvt.rzi.f32.f32 	%f428, %f427;
	abs.f32 	%f429, %f425;
	setp.gt.f32 	%p90, %f429, 0f4B000000;
	selp.f32 	%f430, %f425, %f428, %p90;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p91, %f429, 0f3F000000;
	selp.f32 	%f432, %f431, %f430, %p91;
	cvt.rzi.s32.f32 	%r232, %f432;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f33;
	mul.f32 	%f434, %f433, %f433;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	and.b32  	%r233, %r232, 1;
	setp.eq.b32 	%p92, %r233, 1;
	selp.f32 	%f444, %f442, %f443, %p92;
	and.b32  	%r234, %r232, 2;
	setp.eq.s32 	%p93, %r234, 0;
	sub.f32 	%f446, %f71, %f444;
	selp.f32 	%f447, %f444, %f446, %p93;
	cvt.rzi.f32.f32 	%f448, %f33;
	setp.eq.f32 	%p94, %f33, %f448;
	mul.f32 	%f449, %f33, 0f00000000;
	selp.f32 	%f450, %f449, %f447, %p94;
	mul.f32 	%f451, %f31, 0f41490FDB;
	div.approx.f32 	%f719, %f450, %f451;
$L__BB0_27:                             // %L904
	or.b32  	%r235, %r60, 193;
	cvt.rn.f32.s32 	%f455, %r235;
	div.approx.f32 	%f37, %f455, %f47;
	mul.f32 	%f39, %f37, 0f40800000;
	setp.eq.f32 	%p100, %f39, 0f00000000;
	@%p100 bra 	$L__BB0_29;
// %bb.28:                              // %L918
	add.f32 	%f483, %f39, %f39;
	mov.b32 	%r243, %f483;
	and.b32  	%r244, %r243, -2147483648;
	or.b32  	%r245, %r244, 1056964608;
	mov.b32 	%f484, %r245;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p101, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p101;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p102, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p102;
	cvt.rzi.s32.f32 	%r246, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f39;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r247, %r246, 1;
	setp.eq.b32 	%p103, %r247, 1;
	selp.f32 	%f502, %f500, %f501, %p103;
	and.b32  	%r248, %r246, 2;
	setp.eq.s32 	%p104, %r248, 0;
	sub.f32 	%f504, %f71, %f502;
	selp.f32 	%f505, %f502, %f504, %p104;
	cvt.rzi.f32.f32 	%f506, %f39;
	setp.eq.f32 	%p105, %f39, %f506;
	mul.f32 	%f507, %f39, 0f00000000;
	selp.f32 	%f508, %f507, %f505, %p105;
	mul.f32 	%f509, %f37, 0f41490FDB;
	div.approx.f32 	%f720, %f508, %f509;
$L__BB0_29:                             // %L922
	setp.le.s32 	%p148, %r102, %r101;
	mov.u32 	%r2513, 0;
	@%p148 bra 	$L__BB0_40;
// %bb.30:                              // %L1517.lr.ph
	abs.f32 	%f48, %f42;
	abs.f32 	%f106, %f4;
	abs.f32 	%f165, %f9;
	abs.f32 	%f223, %f15;
	abs.f32 	%f282, %f20;
	abs.f32 	%f340, %f26;
	setp.gt.f32 	%p18, %f48, 0f4B800000;
	mul.f32 	%f49, %f42, 0f00000000;
	setp.gt.f32 	%p29, %f106, 0f4B800000;
	mul.f32 	%f107, %f4, 0f00000000;
	setp.gt.f32 	%p40, %f165, 0f4B800000;
	mul.f32 	%f166, %f9, 0f00000000;
	setp.gt.f32 	%p51, %f223, 0f4B800000;
	mul.f32 	%f224, %f15, 0f00000000;
	setp.gt.f32 	%p62, %f282, 0f4B800000;
	mul.f32 	%f283, %f20, 0f00000000;
	setp.gt.f32 	%p73, %f340, 0f4B800000;
	mul.f32 	%f341, %f26, 0f00000000;
	abs.f32 	%f399, %f31;
	selp.f32 	%f50, %f49, %f42, %p18;
	selp.f32 	%f108, %f107, %f4, %p29;
	selp.f32 	%f167, %f166, %f9, %p40;
	selp.f32 	%f225, %f224, %f15, %p51;
	selp.f32 	%f284, %f283, %f20, %p62;
	selp.f32 	%f342, %f341, %f26, %p73;
	setp.gt.f32 	%p84, %f399, 0f4B800000;
	mul.f32 	%f400, %f31, 0f00000000;
	add.f32 	%f51, %f50, %f50;
	add.f32 	%f109, %f108, %f108;
	add.f32 	%f168, %f167, %f167;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f285, %f284, %f284;
	add.f32 	%f343, %f342, %f342;
	selp.f32 	%f401, %f400, %f31, %p84;
	abs.f32 	%f457, %f37;
	mov.b32 	%r129, %f51;
	mov.b32 	%r143, %f109;
	mov.b32 	%r160, %f168;
	mov.b32 	%r174, %f226;
	mov.b32 	%r191, %f285;
	mov.b32 	%r205, %f343;
	add.f32 	%f402, %f401, %f401;
	setp.gt.f32 	%p95, %f457, 0f4B800000;
	mul.f32 	%f458, %f37, 0f00000000;
	and.b32  	%r130, %r129, -2147483648;
	and.b32  	%r144, %r143, -2147483648;
	and.b32  	%r161, %r160, -2147483648;
	and.b32  	%r175, %r174, -2147483648;
	and.b32  	%r192, %r191, -2147483648;
	and.b32  	%r206, %r205, -2147483648;
	mov.b32 	%r222, %f402;
	selp.f32 	%f459, %f458, %f37, %p95;
	or.b32  	%r131, %r130, 1056964608;
	or.b32  	%r145, %r144, 1056964608;
	or.b32  	%r162, %r161, 1056964608;
	or.b32  	%r176, %r175, 1056964608;
	or.b32  	%r193, %r192, 1056964608;
	or.b32  	%r207, %r206, 1056964608;
	and.b32  	%r223, %r222, -2147483648;
	add.f32 	%f460, %f459, %f459;
	mov.b32 	%f52, %r131;
	mov.b32 	%f110, %r145;
	mov.b32 	%f169, %r162;
	mov.b32 	%f227, %r176;
	mov.b32 	%f286, %r193;
	mov.b32 	%f344, %r207;
	or.b32  	%r224, %r223, 1056964608;
	mov.b32 	%r236, %f460;
	add.f32 	%f53, %f51, %f52;
	abs.f32 	%f55, %f51;
	add.f32 	%f111, %f109, %f110;
	abs.f32 	%f113, %f109;
	add.f32 	%f170, %f168, %f169;
	abs.f32 	%f172, %f168;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f287, %f285, %f286;
	abs.f32 	%f289, %f285;
	add.f32 	%f345, %f343, %f344;
	abs.f32 	%f347, %f343;
	mov.b32 	%f403, %r224;
	and.b32  	%r237, %r236, -2147483648;
	cvt.rzi.f32.f32 	%f54, %f53;
	setp.gt.f32 	%p19, %f55, 0f4B000000;
	cvt.rzi.f32.f32 	%f112, %f111;
	setp.gt.f32 	%p30, %f113, 0f4B000000;
	cvt.rzi.f32.f32 	%f171, %f170;
	setp.gt.f32 	%p41, %f172, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p52, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f288, %f287;
	setp.gt.f32 	%p63, %f289, 0f4B000000;
	cvt.rzi.f32.f32 	%f346, %f345;
	setp.gt.f32 	%p74, %f347, 0f4B000000;
	add.f32 	%f404, %f402, %f403;
	abs.f32 	%f406, %f402;
	or.b32  	%r238, %r237, 1056964608;
	selp.f32 	%f56, %f51, %f54, %p19;
	cvt.rzi.f32.f32 	%f57, %f51;
	setp.lt.f32 	%p20, %f55, 0f3F000000;
	selp.f32 	%f114, %f109, %f112, %p30;
	cvt.rzi.f32.f32 	%f115, %f109;
	setp.lt.f32 	%p31, %f113, 0f3F000000;
	selp.f32 	%f173, %f168, %f171, %p41;
	cvt.rzi.f32.f32 	%f174, %f168;
	setp.lt.f32 	%p42, %f172, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p52;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p53, %f230, 0f3F000000;
	selp.f32 	%f290, %f285, %f288, %p63;
	cvt.rzi.f32.f32 	%f291, %f285;
	setp.lt.f32 	%p64, %f289, 0f3F000000;
	selp.f32 	%f348, %f343, %f346, %p74;
	cvt.rzi.f32.f32 	%f349, %f343;
	setp.lt.f32 	%p75, %f347, 0f3F000000;
	cvt.rzi.f32.f32 	%f405, %f404;
	setp.gt.f32 	%p85, %f406, 0f4B000000;
	mov.b32 	%f461, %r238;
	selp.f32 	%f58, %f57, %f56, %p20;
	selp.f32 	%f116, %f115, %f114, %p31;
	selp.f32 	%f175, %f174, %f173, %p42;
	selp.f32 	%f233, %f232, %f231, %p53;
	selp.f32 	%f292, %f291, %f290, %p64;
	selp.f32 	%f350, %f349, %f348, %p75;
	selp.f32 	%f407, %f402, %f405, %p85;
	cvt.rzi.f32.f32 	%f408, %f402;
	setp.lt.f32 	%p86, %f406, 0f3F000000;
	add.f32 	%f462, %f460, %f461;
	abs.f32 	%f464, %f460;
	fma.rn.f32 	%f59, %f58, 0fBF000000, %f50;
	fma.rn.f32 	%f117, %f116, 0fBF000000, %f108;
	fma.rn.f32 	%f176, %f175, 0fBF000000, %f167;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f293, %f292, 0fBF000000, %f284;
	fma.rn.f32 	%f351, %f350, 0fBF000000, %f342;
	selp.f32 	%f409, %f408, %f407, %p86;
	cvt.rzi.f32.f32 	%f463, %f462;
	setp.gt.f32 	%p96, %f464, 0f4B000000;
	mul.f32 	%f60, %f59, %f59;
	mul.f32 	%f118, %f117, %f117;
	mul.f32 	%f177, %f176, %f176;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f294, %f293, %f293;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f410, %f409, 0fBF000000, %f401;
	selp.f32 	%f465, %f460, %f463, %p96;
	cvt.rzi.f32.f32 	%f466, %f460;
	setp.lt.f32 	%p97, %f464, 0f3F000000;
	cvt.rzi.s32.f32 	%r132, %f58;
	fma.rn.f32 	%f61, %f60, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f62, %f60, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r146, %f116;
	fma.rn.f32 	%f119, %f118, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f120, %f118, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r163, %f175;
	fma.rn.f32 	%f178, %f177, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f179, %f177, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r177, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r194, %f292;
	fma.rn.f32 	%f295, %f294, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f296, %f294, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r208, %f350;
	fma.rn.f32 	%f353, %f352, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f354, %f352, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f411, %f410, %f410;
	selp.f32 	%f467, %f466, %f465, %p97;
	add.s32 	%r133, %r132, 1;
	fma.rn.f32 	%f63, %f61, %f60, 0fC0A55DF6;
	fma.rn.f32 	%f64, %f62, %f60, 0f4081E0CF;
	fma.rn.f32 	%f65, %f60, %f59, 0f00000000;
	add.s32 	%r147, %r146, 1;
	fma.rn.f32 	%f121, %f119, %f118, 0fC0A55DF6;
	fma.rn.f32 	%f122, %f120, %f118, 0f4081E0CF;
	fma.rn.f32 	%f123, %f118, %f117, 0f00000000;
	add.s32 	%r164, %r163, 1;
	fma.rn.f32 	%f180, %f178, %f177, 0fC0A55DF6;
	fma.rn.f32 	%f181, %f179, %f177, 0f4081E0CF;
	fma.rn.f32 	%f182, %f177, %f176, 0f00000000;
	add.s32 	%r178, %r177, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r195, %r194, 1;
	fma.rn.f32 	%f297, %f295, %f294, 0fC0A55DF6;
	fma.rn.f32 	%f298, %f296, %f294, 0f4081E0CF;
	fma.rn.f32 	%f299, %f294, %f293, 0f00000000;
	add.s32 	%r209, %r208, 1;
	fma.rn.f32 	%f355, %f353, %f352, 0fC0A55DF6;
	fma.rn.f32 	%f356, %f354, %f352, 0f4081E0CF;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	cvt.rzi.s32.f32 	%r225, %f409;
	fma.rn.f32 	%f412, %f411, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f413, %f411, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f468, %f467, 0fBF000000, %f459;
	shl.b32 	%r46, %r2, 1;
	fma.rn.f32 	%f66, %f64, %f60, 0fC09DE9E6;
	fma.rn.f32 	%f67, %f63, %f65, 0f00000000;
	and.b32  	%r134, %r133, 1;
	fma.rn.f32 	%f124, %f122, %f118, 0fC09DE9E6;
	fma.rn.f32 	%f125, %f121, %f123, 0f00000000;
	and.b32  	%r148, %r147, 1;
	fma.rn.f32 	%f183, %f181, %f177, 0fC09DE9E6;
	fma.rn.f32 	%f184, %f180, %f182, 0f00000000;
	and.b32  	%r165, %r164, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r179, %r178, 1;
	fma.rn.f32 	%f300, %f298, %f294, 0fC09DE9E6;
	fma.rn.f32 	%f301, %f297, %f299, 0f00000000;
	and.b32  	%r196, %r195, 1;
	fma.rn.f32 	%f358, %f356, %f352, 0fC09DE9E6;
	fma.rn.f32 	%f359, %f355, %f357, 0f00000000;
	and.b32  	%r210, %r209, 1;
	add.s32 	%r226, %r225, 1;
	fma.rn.f32 	%f414, %f412, %f411, 0fC0A55DF6;
	fma.rn.f32 	%f415, %f413, %f411, 0f4081E0CF;
	fma.rn.f32 	%f416, %f411, %f410, 0f00000000;
	mul.f32 	%f469, %f468, %f468;
	and.b32  	%r47, %r46, 8;
	shl.b32 	%r49, %r2, 2;
	and.b32  	%r52, %r2, 18;
	fma.rn.f32 	%f68, %f66, %f60, 0f3F800000;
	fma.rn.f32 	%f69, %f59, 0f40490FDB, %f67;
	setp.eq.b32 	%p21, %r134, 1;
	fma.rn.f32 	%f126, %f124, %f118, 0f3F800000;
	fma.rn.f32 	%f127, %f117, 0f40490FDB, %f125;
	setp.eq.b32 	%p32, %r148, 1;
	fma.rn.f32 	%f185, %f183, %f177, 0f3F800000;
	fma.rn.f32 	%f186, %f176, 0f40490FDB, %f184;
	setp.eq.b32 	%p43, %r165, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p54, %r179, 1;
	fma.rn.f32 	%f302, %f300, %f294, 0f3F800000;
	fma.rn.f32 	%f303, %f293, 0f40490FDB, %f301;
	setp.eq.b32 	%p65, %r196, 1;
	fma.rn.f32 	%f360, %f358, %f352, 0f3F800000;
	fma.rn.f32 	%f361, %f351, 0f40490FDB, %f359;
	setp.eq.b32 	%p76, %r210, 1;
	fma.rn.f32 	%f417, %f415, %f411, 0fC09DE9E6;
	fma.rn.f32 	%f418, %f414, %f416, 0f00000000;
	and.b32  	%r227, %r226, 1;
	cvt.rzi.s32.f32 	%r239, %f467;
	fma.rn.f32 	%f470, %f469, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f471, %f469, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r50, %r49, 4;
	or.b32  	%r118, %r52, %r47;
	selp.f32 	%f70, %f68, %f69, %p21;
	and.b32  	%r135, %r133, 2;
	selp.f32 	%f128, %f126, %f127, %p32;
	and.b32  	%r149, %r147, 2;
	selp.f32 	%f187, %f185, %f186, %p43;
	and.b32  	%r166, %r164, 2;
	selp.f32 	%f245, %f243, %f244, %p54;
	and.b32  	%r180, %r178, 2;
	selp.f32 	%f304, %f302, %f303, %p65;
	and.b32  	%r197, %r195, 2;
	selp.f32 	%f362, %f360, %f361, %p76;
	and.b32  	%r211, %r209, 2;
	fma.rn.f32 	%f419, %f417, %f411, 0f3F800000;
	fma.rn.f32 	%f420, %f410, 0f40490FDB, %f418;
	setp.eq.b32 	%p87, %r227, 1;
	add.s32 	%r240, %r239, 1;
	fma.rn.f32 	%f472, %f470, %f469, 0fC0A55DF6;
	fma.rn.f32 	%f473, %f471, %f469, 0f4081E0CF;
	fma.rn.f32 	%f474, %f469, %f468, 0f00000000;
	and.b32  	%r51, %r49, 32;
	or.b32  	%r119, %r118, %r50;
	setp.eq.s32 	%p22, %r135, 0;
	sub.f32 	%f72, %f71, %f70;
	setp.eq.s32 	%p33, %r149, 0;
	sub.f32 	%f130, %f71, %f128;
	setp.eq.s32 	%p44, %r166, 0;
	sub.f32 	%f189, %f71, %f187;
	setp.eq.s32 	%p55, %r180, 0;
	sub.f32 	%f247, %f71, %f245;
	setp.eq.s32 	%p66, %r197, 0;
	sub.f32 	%f306, %f71, %f304;
	setp.eq.s32 	%p77, %r211, 0;
	sub.f32 	%f364, %f71, %f362;
	selp.f32 	%f421, %f419, %f420, %p87;
	and.b32  	%r228, %r226, 2;
	fma.rn.f32 	%f475, %f473, %f469, 0fC09DE9E6;
	fma.rn.f32 	%f476, %f472, %f474, 0f00000000;
	and.b32  	%r241, %r240, 1;
	or.b32  	%r120, %r119, %r51;
	selp.f32 	%f73, %f70, %f72, %p22;
	selp.f32 	%f131, %f128, %f130, %p33;
	selp.f32 	%f190, %f187, %f189, %p44;
	selp.f32 	%f248, %f245, %f247, %p55;
	selp.f32 	%f307, %f304, %f306, %p66;
	selp.f32 	%f365, %f362, %f364, %p77;
	setp.eq.s32 	%p88, %r228, 0;
	sub.f32 	%f423, %f71, %f421;
	fma.rn.f32 	%f477, %f475, %f469, 0f3F800000;
	fma.rn.f32 	%f478, %f468, 0f40490FDB, %f476;
	setp.eq.b32 	%p98, %r241, 1;
	shr.u32 	%r121, %r120, 1;
	mul.f32 	%f43, %f73, %f73;
	mul.f32 	%f5, %f131, %f131;
	mul.f32 	%f10, %f190, %f190;
	mul.f32 	%f16, %f248, %f248;
	mul.f32 	%f21, %f307, %f307;
	mul.f32 	%f27, %f365, %f365;
	selp.f32 	%f424, %f421, %f423, %p88;
	selp.f32 	%f479, %f477, %f478, %p98;
	and.b32  	%r242, %r240, 2;
	ld.param.u64 	%rd1, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd43, %r121, 4;
	mul.f32 	%f102, %f713, %f43;
	mov.f32 	%f103, 0f42800000;
	mul.f32 	%f160, %f714, %f5;
	mul.f32 	%f219, %f715, %f10;
	mul.f32 	%f277, %f716, %f16;
	mul.f32 	%f336, %f717, %f21;
	mul.f32 	%f394, %f718, %f27;
	mul.f32 	%f32, %f424, %f424;
	setp.eq.s32 	%p99, %r242, 0;
	sub.f32 	%f481, %f71, %f479;
	add.s64 	%rd44, %rd1, %rd43;
	div.approx.f32 	%f3, %f102, %f103;
	div.approx.f32 	%f162, %f160, %f103;
	div.approx.f32 	%f14, %f219, %f103;
	div.approx.f32 	%f279, %f277, %f103;
	div.approx.f32 	%f25, %f336, %f103;
	div.approx.f32 	%f396, %f394, %f103;
	mul.f32 	%f453, %f719, %f32;
	selp.f32 	%f482, %f479, %f481, %p99;
	ld.param.u64 	%rd2, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b32  	%r48, %r2, 16;
	ld.global.u32 	%r53, [%rd44];
	shr.u32 	%r54, %r2, 1;
	shr.u32 	%r58, %r2, 3;
	mov.b32 	%r158, %f162;
	mov.b32 	%r157, %f3;
	mov.b32 	%r189, %f279;
	mov.b32 	%r188, %f14;
	mov.b32 	%r220, %f396;
	mov.b32 	%r219, %f25;
	div.approx.f32 	%f36, %f453, %f103;
	mul.f32 	%f38, %f482, %f482;
	// begin inline asm
	cvt.rn.f16x2.f32 %r156, %r158, %r157;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r187, %r189, %r188;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r218, %r220, %r219;
	// end inline asm
	mul.f32 	%f510, %f720, %f38;
	div.approx.f32 	%f512, %f510, %f103;
	mov.b32 	%r251, %f512;
	mov.b32 	%r250, %f36;
	// begin inline asm
	cvt.rn.f16x2.f32 %r249, %r251, %r250;
	// end inline asm
	mul.lo.s32 	%r288, %r59, 63;
	and.b32  	%r289, %r288, 127;
	cvt.rn.f32.s32 	%f513, %r289;
	div.approx.f32 	%f514, %f513, %f103;
	add.f32 	%f515, %f514, %f514;
	mov.b32 	%r290, %f515;
	and.b32  	%r291, %r290, -2147483648;
	or.b32  	%r292, %r291, 1056964608;
	mov.b32 	%f516, %r292;
	add.f32 	%f517, %f515, %f516;
	cvt.rzi.f32.f32 	%f518, %f517;
	abs.f32 	%f519, %f515;
	setp.gt.f32 	%p106, %f519, 0f4B000000;
	selp.f32 	%f520, %f515, %f518, %p106;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p107, %f519, 0f3F000000;
	selp.f32 	%f522, %f521, %f520, %p107;
	cvt.rzi.s32.f32 	%r293, %f522;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f514;
	mul.f32 	%f524, %f523, %f523;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	and.b32  	%r294, %r293, 1;
	setp.eq.b32 	%p108, %r294, 1;
	selp.f32 	%f534, %f532, %f533, %p108;
	selp.f32 	%f535, %f533, %f532, %p108;
	and.b32  	%r295, %r293, 2;
	setp.eq.s32 	%p109, %r295, 0;
	neg.f32 	%f536, %f534;
	selp.f32 	%f537, %f534, %f536, %p109;
	add.s32 	%r296, %r293, 1;
	and.b32  	%r297, %r296, 2;
	setp.eq.s32 	%p110, %r297, 0;
	sub.f32 	%f539, %f71, %f535;
	selp.f32 	%f540, %f535, %f539, %p110;
	cvt.rzi.f32.f32 	%f541, %f514;
	setp.eq.f32 	%p111, %f541, %f514;
	mul.f32 	%f542, %f514, 0f00000000;
	selp.f32 	%f543, %f542, %f537, %p111;
	abs.f32 	%f544, %f514;
	setp.gt.f32 	%p112, %f544, 0f4B800000;
	add.f32 	%f545, %f543, 0f3F800000;
	selp.f32 	%f546, %f545, %f540, %p112;
	add.s32 	%r298, %r288, 96;
	and.b32  	%r299, %r298, 127;
	cvt.rn.f32.s32 	%f547, %r299;
	div.approx.f32 	%f548, %f547, %f103;
	add.f32 	%f549, %f548, %f548;
	mov.b32 	%r300, %f549;
	and.b32  	%r301, %r300, -2147483648;
	or.b32  	%r302, %r301, 1056964608;
	mov.b32 	%f550, %r302;
	add.f32 	%f551, %f549, %f550;
	cvt.rzi.f32.f32 	%f552, %f551;
	abs.f32 	%f553, %f549;
	setp.gt.f32 	%p113, %f553, 0f4B000000;
	selp.f32 	%f554, %f549, %f552, %p113;
	cvt.rzi.f32.f32 	%f555, %f549;
	setp.lt.f32 	%p114, %f553, 0f3F000000;
	selp.f32 	%f556, %f555, %f554, %p114;
	cvt.rzi.s32.f32 	%r303, %f556;
	fma.rn.f32 	%f557, %f556, 0fBF000000, %f548;
	mul.f32 	%f558, %f557, %f557;
	fma.rn.f32 	%f559, %f558, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f560, %f558, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f561, %f559, %f558, 0fC0A55DF6;
	fma.rn.f32 	%f562, %f560, %f558, 0f4081E0CF;
	fma.rn.f32 	%f563, %f558, %f557, 0f00000000;
	fma.rn.f32 	%f564, %f562, %f558, 0fC09DE9E6;
	fma.rn.f32 	%f565, %f561, %f563, 0f00000000;
	fma.rn.f32 	%f566, %f564, %f558, 0f3F800000;
	fma.rn.f32 	%f567, %f557, 0f40490FDB, %f565;
	and.b32  	%r304, %r303, 1;
	setp.eq.b32 	%p115, %r304, 1;
	selp.f32 	%f568, %f566, %f567, %p115;
	selp.f32 	%f569, %f567, %f566, %p115;
	and.b32  	%r305, %r303, 2;
	setp.eq.s32 	%p116, %r305, 0;
	neg.f32 	%f570, %f568;
	selp.f32 	%f571, %f568, %f570, %p116;
	add.s32 	%r306, %r303, 1;
	and.b32  	%r307, %r306, 2;
	setp.eq.s32 	%p117, %r307, 0;
	sub.f32 	%f572, %f71, %f569;
	selp.f32 	%f573, %f569, %f572, %p117;
	cvt.rzi.f32.f32 	%f574, %f548;
	setp.eq.f32 	%p118, %f574, %f548;
	mul.f32 	%f575, %f548, 0f00000000;
	selp.f32 	%f576, %f575, %f571, %p118;
	abs.f32 	%f577, %f548;
	setp.gt.f32 	%p119, %f577, 0f4B800000;
	add.f32 	%f578, %f576, 0f3F800000;
	selp.f32 	%f579, %f578, %f573, %p119;
	mov.b32 	%r253, %f546;
	mov.b32 	%r254, %f579;
	// begin inline asm
	cvt.rn.f16x2.f32 %r252, %r254, %r253;
	// end inline asm
	mov.b32 	%r256, %f543;
	mov.b32 	%r257, %f576;
	// begin inline asm
	cvt.rn.f16x2.f32 %r255, %r257, %r256;
	// end inline asm
	and.b32  	%r308, %r58, 2;
	and.b32  	%r309, %r54, 4;
	or.b32  	%r310, %r55, %r308;
	or.b32  	%r311, %r310, %r309;
	and.b32  	%r312, %r46, 6;
	mul.lo.s32 	%r313, %r311, %r312;
	and.b32  	%r314, %r313, 14;
	cvt.rn.f32.s32 	%f580, %r314;
	mov.f32 	%f581, 0f41000000;
	div.approx.f32 	%f582, %f580, %f581;
	add.f32 	%f583, %f582, %f582;
	mov.b32 	%r315, %f583;
	and.b32  	%r316, %r315, -2147483648;
	or.b32  	%r317, %r316, 1056964608;
	mov.b32 	%f584, %r317;
	add.f32 	%f585, %f583, %f584;
	cvt.rzi.f32.f32 	%f586, %f585;
	abs.f32 	%f587, %f583;
	setp.gt.f32 	%p120, %f587, 0f4B000000;
	selp.f32 	%f588, %f583, %f586, %p120;
	cvt.rzi.f32.f32 	%f589, %f583;
	setp.lt.f32 	%p121, %f587, 0f3F000000;
	selp.f32 	%f590, %f589, %f588, %p121;
	cvt.rzi.s32.f32 	%r318, %f590;
	fma.rn.f32 	%f591, %f590, 0fBF000000, %f582;
	mul.f32 	%f592, %f591, %f591;
	fma.rn.f32 	%f593, %f592, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f594, %f592, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f593, %f592, 0fC0A55DF6;
	fma.rn.f32 	%f596, %f594, %f592, 0f4081E0CF;
	fma.rn.f32 	%f597, %f592, %f591, 0f00000000;
	fma.rn.f32 	%f598, %f596, %f592, 0fC09DE9E6;
	fma.rn.f32 	%f599, %f595, %f597, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f592, 0f3F800000;
	fma.rn.f32 	%f601, %f591, 0f40490FDB, %f599;
	and.b32  	%r319, %r318, 1;
	setp.eq.b32 	%p122, %r319, 1;
	selp.f32 	%f602, %f600, %f601, %p122;
	selp.f32 	%f603, %f601, %f600, %p122;
	and.b32  	%r320, %r318, 2;
	setp.eq.s32 	%p123, %r320, 0;
	neg.f32 	%f604, %f602;
	selp.f32 	%f605, %f602, %f604, %p123;
	add.s32 	%r321, %r318, 1;
	and.b32  	%r322, %r321, 2;
	setp.eq.s32 	%p124, %r322, 0;
	sub.f32 	%f606, %f71, %f603;
	selp.f32 	%f607, %f603, %f606, %p124;
	cvt.rzi.f32.f32 	%f608, %f582;
	setp.eq.f32 	%p125, %f608, %f582;
	mul.f32 	%f609, %f582, 0f00000000;
	selp.f32 	%f610, %f609, %f605, %p125;
	abs.f32 	%f611, %f582;
	setp.gt.f32 	%p126, %f611, 0f4B800000;
	add.f32 	%f612, %f610, 0f3F800000;
	selp.f32 	%f613, %f612, %f607, %p126;
	or.b32  	%r323, %r46, 8;
	mul.lo.s32 	%r324, %r311, %r323;
	and.b32  	%r325, %r324, 14;
	cvt.rn.f32.s32 	%f614, %r325;
	div.approx.f32 	%f615, %f614, %f581;
	add.f32 	%f616, %f615, %f615;
	mov.b32 	%r326, %f616;
	and.b32  	%r327, %r326, -2147483648;
	or.b32  	%r328, %r327, 1056964608;
	mov.b32 	%f617, %r328;
	add.f32 	%f618, %f616, %f617;
	cvt.rzi.f32.f32 	%f619, %f618;
	abs.f32 	%f620, %f616;
	setp.gt.f32 	%p127, %f620, 0f4B000000;
	selp.f32 	%f621, %f616, %f619, %p127;
	cvt.rzi.f32.f32 	%f622, %f616;
	setp.lt.f32 	%p128, %f620, 0f3F000000;
	selp.f32 	%f623, %f622, %f621, %p128;
	cvt.rzi.s32.f32 	%r329, %f623;
	fma.rn.f32 	%f624, %f623, 0fBF000000, %f615;
	mul.f32 	%f625, %f624, %f624;
	fma.rn.f32 	%f626, %f625, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f627, %f625, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f628, %f626, %f625, 0fC0A55DF6;
	fma.rn.f32 	%f629, %f627, %f625, 0f4081E0CF;
	fma.rn.f32 	%f630, %f625, %f624, 0f00000000;
	fma.rn.f32 	%f631, %f629, %f625, 0fC09DE9E6;
	fma.rn.f32 	%f632, %f628, %f630, 0f00000000;
	fma.rn.f32 	%f633, %f631, %f625, 0f3F800000;
	fma.rn.f32 	%f634, %f624, 0f40490FDB, %f632;
	and.b32  	%r330, %r329, 1;
	setp.eq.b32 	%p129, %r330, 1;
	selp.f32 	%f635, %f633, %f634, %p129;
	selp.f32 	%f636, %f634, %f633, %p129;
	and.b32  	%r331, %r329, 2;
	setp.eq.s32 	%p130, %r331, 0;
	neg.f32 	%f637, %f635;
	selp.f32 	%f638, %f635, %f637, %p130;
	add.s32 	%r332, %r329, 1;
	and.b32  	%r333, %r332, 2;
	setp.eq.s32 	%p131, %r333, 0;
	sub.f32 	%f639, %f71, %f636;
	selp.f32 	%f640, %f636, %f639, %p131;
	cvt.rzi.f32.f32 	%f641, %f615;
	setp.eq.f32 	%p132, %f641, %f615;
	mul.f32 	%f642, %f615, 0f00000000;
	selp.f32 	%f643, %f642, %f638, %p132;
	abs.f32 	%f644, %f615;
	setp.gt.f32 	%p133, %f644, 0f4B800000;
	add.f32 	%f645, %f643, 0f3F800000;
	selp.f32 	%f646, %f645, %f640, %p133;
	mov.b32 	%r259, %f613;
	mov.b32 	%r260, %f646;
	// begin inline asm
	cvt.rn.f16x2.f32 %r258, %r260, %r259;
	// end inline asm
	mov.b32 	%r262, %f610;
	mov.b32 	%r263, %f643;
	// begin inline asm
	cvt.rn.f16x2.f32 %r261, %r263, %r262;
	// end inline asm
	xor.b32  	%r283, %r262, -2147483648;
	xor.b32  	%r284, %r263, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r264, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r267, %r260, %r259;
	// end inline asm
	cvt.rn.f32.s32 	%f647, %r313;
	div.approx.f32 	%f648, %f647, %f103;
	add.f32 	%f649, %f648, %f648;
	mov.b32 	%r334, %f649;
	and.b32  	%r335, %r334, -2147483648;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%f650, %r336;
	add.f32 	%f651, %f649, %f650;
	cvt.rzi.f32.f32 	%f652, %f651;
	abs.f32 	%f653, %f649;
	setp.gt.f32 	%p134, %f653, 0f4B000000;
	selp.f32 	%f654, %f649, %f652, %p134;
	cvt.rzi.f32.f32 	%f655, %f649;
	setp.lt.f32 	%p135, %f653, 0f3F000000;
	selp.f32 	%f656, %f655, %f654, %p135;
	cvt.rzi.s32.f32 	%r337, %f656;
	fma.rn.f32 	%f657, %f656, 0fBF000000, %f648;
	mul.f32 	%f658, %f657, %f657;
	fma.rn.f32 	%f659, %f658, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f660, %f658, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f661, %f659, %f658, 0fC0A55DF6;
	fma.rn.f32 	%f662, %f660, %f658, 0f4081E0CF;
	fma.rn.f32 	%f663, %f658, %f657, 0f00000000;
	fma.rn.f32 	%f664, %f662, %f658, 0fC09DE9E6;
	fma.rn.f32 	%f665, %f661, %f663, 0f00000000;
	fma.rn.f32 	%f666, %f664, %f658, 0f3F800000;
	fma.rn.f32 	%f667, %f657, 0f40490FDB, %f665;
	and.b32  	%r338, %r337, 1;
	setp.eq.b32 	%p136, %r338, 1;
	selp.f32 	%f668, %f666, %f667, %p136;
	selp.f32 	%f669, %f667, %f666, %p136;
	and.b32  	%r339, %r337, 2;
	setp.eq.s32 	%p137, %r339, 0;
	neg.f32 	%f670, %f668;
	selp.f32 	%f671, %f668, %f670, %p137;
	add.s32 	%r340, %r337, 1;
	and.b32  	%r341, %r340, 2;
	setp.eq.s32 	%p138, %r341, 0;
	sub.f32 	%f672, %f71, %f669;
	selp.f32 	%f673, %f669, %f672, %p138;
	cvt.rzi.f32.f32 	%f674, %f648;
	setp.eq.f32 	%p139, %f674, %f648;
	mul.f32 	%f675, %f648, 0f00000000;
	selp.f32 	%f676, %f675, %f671, %p139;
	mov.b32 	%r342, %f676;
	abs.f32 	%f677, %f648;
	setp.gt.f32 	%p140, %f677, 0f4B800000;
	add.f32 	%f678, %f676, 0f3F800000;
	selp.f32 	%f679, %f678, %f673, %p140;
	shl.b32 	%r343, %r311, 3;
	add.s32 	%r344, %r313, %r343;
	cvt.rn.f32.s32 	%f680, %r344;
	div.approx.f32 	%f681, %f680, %f103;
	add.f32 	%f682, %f681, %f681;
	mov.b32 	%r345, %f682;
	and.b32  	%r346, %r345, -2147483648;
	or.b32  	%r347, %r346, 1056964608;
	mov.b32 	%f683, %r347;
	add.f32 	%f684, %f682, %f683;
	cvt.rzi.f32.f32 	%f685, %f684;
	abs.f32 	%f686, %f682;
	setp.gt.f32 	%p141, %f686, 0f4B000000;
	selp.f32 	%f687, %f682, %f685, %p141;
	cvt.rzi.f32.f32 	%f688, %f682;
	setp.lt.f32 	%p142, %f686, 0f3F000000;
	selp.f32 	%f689, %f688, %f687, %p142;
	cvt.rzi.s32.f32 	%r348, %f689;
	fma.rn.f32 	%f690, %f689, 0fBF000000, %f681;
	mul.f32 	%f691, %f690, %f690;
	fma.rn.f32 	%f692, %f691, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f693, %f691, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f694, %f692, %f691, 0fC0A55DF6;
	fma.rn.f32 	%f695, %f693, %f691, 0f4081E0CF;
	fma.rn.f32 	%f696, %f691, %f690, 0f00000000;
	fma.rn.f32 	%f697, %f695, %f691, 0fC09DE9E6;
	fma.rn.f32 	%f698, %f694, %f696, 0f00000000;
	fma.rn.f32 	%f699, %f697, %f691, 0f3F800000;
	fma.rn.f32 	%f700, %f690, 0f40490FDB, %f698;
	and.b32  	%r349, %r348, 1;
	setp.eq.b32 	%p143, %r349, 1;
	selp.f32 	%f701, %f699, %f700, %p143;
	selp.f32 	%f702, %f700, %f699, %p143;
	and.b32  	%r350, %r348, 2;
	setp.eq.s32 	%p144, %r350, 0;
	neg.f32 	%f703, %f701;
	selp.f32 	%f704, %f701, %f703, %p144;
	add.s32 	%r351, %r348, 1;
	and.b32  	%r352, %r351, 2;
	setp.eq.s32 	%p145, %r352, 0;
	sub.f32 	%f705, %f71, %f702;
	selp.f32 	%f706, %f702, %f705, %p145;
	cvt.rzi.f32.f32 	%f707, %f681;
	setp.eq.f32 	%p146, %f707, %f681;
	mul.f32 	%f708, %f681, 0f00000000;
	selp.f32 	%f709, %f708, %f704, %p146;
	mov.b32 	%r353, %f709;
	abs.f32 	%f710, %f681;
	setp.gt.f32 	%p147, %f710, 0f4B800000;
	add.f32 	%f711, %f709, 0f3F800000;
	selp.f32 	%f712, %f711, %f706, %p147;
	mov.b32 	%r272, %f712;
	mov.b32 	%r271, %f679;
	// begin inline asm
	cvt.rn.f16x2.f32 %r270, %r272, %r271;
	// end inline asm
	xor.b32  	%r275, %r353, -2147483648;
	xor.b32  	%r274, %r342, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r273, %r275, %r274;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r276, %r260, %r259;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r263, %r262;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r260, %r259;
	// end inline asm
	shl.b32 	%r355, %r101, 13;
	shl.b32 	%r356, %r105, 9;
	shl.b32 	%r357, %r1, 5;
	and.b32  	%r358, %r357, 256;
	and.b32  	%r359, %r49, 28;
	and.b32  	%r360, %r357, 224;
	or.b32  	%r361, %r48, %r3;
	or.b32  	%r21, %r361, %r51;
	or.b32  	%r362, %r357, %r359;
	or.b32  	%r363, %r362, %r355;
	add.s32 	%r22, %r363, %r356;
	and.b32  	%r23, %r2, 8;
	shl.b32 	%r364, %r2, 4;
	or.b32  	%r365, %r364, %r23;
	shr.u32 	%r366, %r365, 2;
	and.b32  	%r367, %r366, 30;
	and.b32  	%r368, %r2, 4;
	or.b32  	%r24, %r58, %r368;
	shr.u32 	%r25, %r3, 1;
	and.b32  	%r27, %r4, 32;
	or.b32  	%r369, %r52, %r51;
	or.b32  	%r370, %r369, %r47;
	or.b32  	%r371, %r370, %r50;
	shr.u32 	%r372, %r371, 1;
	mul.lo.s32 	%r373, %r372, 65;
	or.b32  	%r374, %r27, %r25;
	add.s32 	%r375, %r374, %r373;
	or.b32  	%r28, %r25, 8;
	or.b32  	%r376, %r27, %r28;
	add.s32 	%r377, %r376, %r373;
	or.b32  	%r29, %r374, 16;
	add.s32 	%r378, %r29, %r373;
	or.b32  	%r30, %r374, 24;
	add.s32 	%r379, %r30, %r373;
	shl.b32 	%r380, %r3, 1;
	or.b32  	%r381, %r380, %r56;
	mul.lo.s32 	%r382, %r381, 65;
	add.s32 	%r383, %r367, %r382;
	mul.wide.u32 	%rd45, %r383, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd6, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r367;
	cvt.u64.u32 	%rd48, %r382;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd7, %rd46, %rd50;
	shl.b32 	%r384, %r103, 15;
	add.s32 	%r385, %r384, -98304;
	shl.b32 	%r386, %r3, 11;
	shl.b32 	%r387, %r2, 6;
	and.b32  	%r388, %r387, 1536;
	or.b32  	%r389, %r388, %r386;
	or.b32  	%r390, %r359, %r360;
	or.b32  	%r391, %r389, %r358;
	or.b32  	%r31, %r391, %r390;
	cvt.s64.s32 	%rd8, %r385;
	and.b32  	%r392, %r3, 1;
	neg.s32 	%r393, %r392;
	setp.eq.b32 	%p149, %r392, 1;
	and.b32  	%r394, %r393, 1040;
	bfe.s32 	%r395, %r3, 1, 1;
	and.b32  	%r396, %r3, 2;
	setp.eq.s32 	%p150, %r396, 0;
	and.b32  	%r397, %r395, 520;
	bfe.s32 	%r398, %r3, 2, 1;
	and.b32  	%r399, %r3, 4;
	setp.eq.s32 	%p151, %r399, 0;
	and.b32  	%r400, %r398, 260;
	mul.lo.s32 	%r401, %r56, 65;
	shr.u32 	%r402, %r3, 3;
	mul.lo.s32 	%r403, %r402, 130;
	add.s32 	%r404, %r394, %r367;
	add.s32 	%r405, %r404, %r397;
	add.s32 	%r406, %r405, %r400;
	add.s32 	%r407, %r406, %r401;
	add.s32 	%r408, %r407, %r403;
	mul.wide.u32 	%rd51, %r408, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r403;
	cvt.u64.u32 	%rd53, %r401;
	selp.b64 	%rd54, 0, 260, %p151;
	selp.b64 	%rd55, 0, 520, %p150;
	selp.b64 	%rd56, 1040, 0, %p149;
	add.s64 	%rd57, %rd47, %rd56;
	add.s64 	%rd58, %rd57, %rd55;
	add.s64 	%rd59, %rd58, %rd54;
	add.s64 	%rd60, %rd59, %rd53;
	add.s64 	%rd61, %rd60, %rd52;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd10, %rd46, %rd62;
	cvt.u64.u32 	%rd63, %r406;
	add.s64 	%rd64, %rd63, %rd53;
	add.s64 	%rd65, %rd64, %rd52;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd11, %rd46, %rd66;
	add.s32 	%r409, %r408, 2113;
	mul.wide.u32 	%rd67, %r409, 4;
	add.s64 	%rd12, %rd46, %rd67;
	add.s32 	%r410, %r408, 2082;
	mul.wide.u32 	%rd68, %r410, 4;
	add.s64 	%rd13, %rd46, %rd68;
	add.s32 	%r411, %r408, 2114;
	mul.wide.u32 	%rd69, %r411, 4;
	add.s64 	%rd14, %rd46, %rd69;
	add.s32 	%r412, %r408, 4194;
	mul.wide.u32 	%rd70, %r412, 4;
	add.s64 	%rd15, %rd46, %rd70;
	add.s32 	%r413, %r408, 4163;
	mul.wide.u32 	%rd71, %r413, 4;
	add.s64 	%rd16, %rd46, %rd71;
	add.s32 	%r414, %r408, 4195;
	mul.wide.u32 	%rd72, %r414, 4;
	add.s64 	%rd17, %rd46, %rd72;
	add.s32 	%r415, %r408, 6275;
	mul.wide.u32 	%rd73, %r415, 4;
	add.s64 	%rd18, %rd46, %rd73;
	add.s32 	%r416, %r408, 6244;
	mul.wide.u32 	%rd74, %r416, 4;
	add.s64 	%rd19, %rd46, %rd74;
	add.s32 	%r417, %r408, 6276;
	mul.wide.u32 	%rd75, %r417, 4;
	add.s64 	%rd20, %rd46, %rd75;
	mul.wide.u32 	%rd76, %r379, 4;
	add.s64 	%rd21, %rd46, %rd76;
	mul.wide.u32 	%rd77, %r378, 4;
	add.s64 	%rd22, %rd46, %rd77;
	mul.wide.u32 	%rd78, %r377, 4;
	add.s64 	%rd23, %rd46, %rd78;
	mul.wide.u32 	%rd79, %r375, 4;
	add.s64 	%rd24, %rd46, %rd79;
	mov.u16 	%rs236, 25600;
	mov.u16 	%rs238, 21504;
	mov.u16 	%rs246, 18432;
	mov.u16 	%rs260, -14592;
	mov.u32 	%r2515, %r2513;
	mov.u32 	%r2516, %r2513;
	mov.u32 	%r2517, %r2513;
	mov.u32 	%r2518, %r2513;
	mov.u32 	%r2519, %r2513;
	mov.u32 	%r2520, %r2513;
	mov.u32 	%r2521, %r2513;
	mov.u32 	%r2522, %r2513;
	mov.u32 	%r2532, %r2513;
	mov.u32 	%r2533, %r2513;
	mov.u32 	%r2534, %r2513;
	mov.u32 	%r2535, %r2513;
	mov.u32 	%r44, %r2513;
	bra.uni 	$L__BB0_31;
$L__BB0_39:                             // %pass10421
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r2507, %r2514, %r31;
	or.b32  	%r2508, %r2507, 98304;
	cvt.s64.s32 	%rd133, %r2508;
	add.s64 	%rd134, %rd133, %rd8;
	shr.u64 	%rd135, %rd134, 39;
	add.s64 	%rd136, %rd134, %rd135;
	shr.s64 	%rd137, %rd136, 25;
	setp.lt.s64 	%p180, %rd134, 0;
	and.b64  	%rd138, %rd136, -33554432;
	setp.ne.s64 	%p181, %rd138, %rd134;
	and.pred  	%p182, %p180, %p181;
	selp.u64 	%rd139, 1, 0, %p182;
	sub.s64 	%rd140, %rd139, %rd137;
	shl.b64 	%rd141, %rd140, 25;
	add.s64 	%rd142, %rd141, %rd134;
	shl.b64 	%rd143, %rd142, 2;
	add.s64 	%rd144, %rd3, %rd143;
	st.global.v4.u32 	[%rd144], {%r96, %r98, %r97, %r99};
	setp.ne.s32 	%p183, %r44, 65280;
	add.s32 	%r44, %r44, 256;
	add.s32 	%r2509, %r44, %r101;
	setp.lt.s32 	%p184, %r2509, %r102;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_40;
$L__BB0_31:                             // %L1517
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_32 Depth 2
	setp.eq.s32 	%p152, %r23, 0;
	and.b32  	%r45, %r44, 65280;
	or.b32  	%r483, %r21, %r45;
	shl.b32 	%r484, %r483, 13;
	add.s32 	%r485, %r22, %r484;
	shr.s32 	%r486, %r485, 31;
	shr.u32 	%r487, %r486, 3;
	add.s32 	%r488, %r485, %r487;
	shr.s32 	%r489, %r488, 29;
	setp.lt.s32 	%p153, %r485, 0;
	and.b32  	%r490, %r488, -536870912;
	setp.ne.s32 	%p154, %r490, %r485;
	and.pred  	%p155, %p153, %p154;
	selp.u32 	%r491, 1, 0, %p155;
	sub.s32 	%r492, %r491, %r489;
	shl.b32 	%r493, %r492, 29;
	or.b32  	%r494, %r485, 1;
	add.s32 	%r495, %r494, %r493;
	mul.wide.s32 	%rd80, %r495, 4;
	add.s64 	%rd81, %rd2, %rd80;
	ld.global.v4.u32 	{%r496, %r497, %r498, %r499}, [%rd81+-4];
	or.b32  	%r500, %r484, 524288;
	add.s32 	%r501, %r22, %r500;
	shr.s32 	%r502, %r501, 31;
	shr.u32 	%r503, %r502, 3;
	add.s32 	%r504, %r501, %r503;
	shr.s32 	%r505, %r504, 29;
	setp.lt.s32 	%p156, %r501, 0;
	and.b32  	%r506, %r504, -536870912;
	setp.ne.s32 	%p157, %r506, %r501;
	and.pred  	%p158, %p156, %p157;
	selp.u32 	%r507, 1, 0, %p158;
	sub.s32 	%r508, %r507, %r505;
	shl.b32 	%r509, %r508, 29;
	or.b32  	%r510, %r501, 1;
	add.s32 	%r511, %r510, %r509;
	mul.wide.s32 	%rd82, %r511, 4;
	add.s64 	%rd83, %rd2, %rd82;
	ld.global.v4.u32 	{%r512, %r513, %r514, %r515}, [%rd83+-4];
	or.b32  	%r516, %r484, 1048576;
	add.s32 	%r517, %r22, %r516;
	shr.s32 	%r518, %r517, 31;
	shr.u32 	%r519, %r518, 3;
	add.s32 	%r520, %r517, %r519;
	shr.s32 	%r521, %r520, 29;
	setp.lt.s32 	%p159, %r517, 0;
	and.b32  	%r522, %r520, -536870912;
	setp.ne.s32 	%p160, %r522, %r517;
	and.pred  	%p161, %p159, %p160;
	selp.u32 	%r523, 1, 0, %p161;
	sub.s32 	%r524, %r523, %r521;
	shl.b32 	%r525, %r524, 29;
	or.b32  	%r526, %r517, 1;
	add.s32 	%r527, %r526, %r525;
	mul.wide.s32 	%rd84, %r527, 4;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.v4.u32 	{%r528, %r529, %r530, %r531}, [%rd85+-4];
	or.b32  	%r532, %r484, 1572864;
	add.s32 	%r533, %r22, %r532;
	shr.s32 	%r534, %r533, 31;
	shr.u32 	%r535, %r534, 3;
	add.s32 	%r536, %r533, %r535;
	shr.s32 	%r537, %r536, 29;
	setp.lt.s32 	%p162, %r533, 0;
	and.b32  	%r538, %r536, -536870912;
	setp.ne.s32 	%p163, %r538, %r533;
	and.pred  	%p164, %p162, %p163;
	selp.u32 	%r539, 1, 0, %p164;
	sub.s32 	%r540, %r539, %r537;
	shl.b32 	%r541, %r540, 29;
	or.b32  	%r542, %r533, 1;
	add.s32 	%r543, %r542, %r541;
	mul.wide.s32 	%rd86, %r543, 4;
	add.s64 	%rd87, %rd2, %rd86;
	ld.global.v4.u32 	{%r544, %r545, %r546, %r547}, [%rd87+-4];
	selp.b32 	%r548, %r498, %r496, %p152;
	shfl.sync.bfly.b32	%r549, %r548, 8, 31, -1;
	selp.b32 	%r419, %r496, %r549, %p152;
	selp.b32 	%r420, %r549, %r498, %p152;
	selp.b32 	%r550, %r499, %r497, %p152;
	shfl.sync.bfly.b32	%r551, %r550, 8, 31, -1;
	selp.b32 	%r427, %r497, %r551, %p152;
	selp.b32 	%r428, %r551, %r499, %p152;
	selp.b32 	%r552, %r514, %r512, %p152;
	shfl.sync.bfly.b32	%r553, %r552, 8, 31, -1;
	selp.b32 	%r435, %r512, %r553, %p152;
	selp.b32 	%r436, %r553, %r514, %p152;
	selp.b32 	%r554, %r515, %r513, %p152;
	shfl.sync.bfly.b32	%r555, %r554, 8, 31, -1;
	selp.b32 	%r443, %r513, %r555, %p152;
	selp.b32 	%r444, %r555, %r515, %p152;
	selp.b32 	%r556, %r530, %r528, %p152;
	shfl.sync.bfly.b32	%r557, %r556, 8, 31, -1;
	selp.b32 	%r451, %r528, %r557, %p152;
	selp.b32 	%r452, %r557, %r530, %p152;
	selp.b32 	%r558, %r531, %r529, %p152;
	shfl.sync.bfly.b32	%r559, %r558, 8, 31, -1;
	selp.b32 	%r459, %r529, %r559, %p152;
	selp.b32 	%r460, %r559, %r531, %p152;
	selp.b32 	%r560, %r546, %r544, %p152;
	shfl.sync.bfly.b32	%r561, %r560, 8, 31, -1;
	selp.b32 	%r467, %r544, %r561, %p152;
	selp.b32 	%r468, %r561, %r546, %p152;
	selp.b32 	%r562, %r547, %r545, %p152;
	shfl.sync.bfly.b32	%r563, %r562, 8, 31, -1;
	selp.b32 	%r475, %r545, %r563, %p152;
	selp.b32 	%r476, %r563, %r547, %p152;
	mov.u32 	%r477, 21520;
	// begin inline asm
	prmt.b32 %r418, %r419, %r420, %r477;
	// end inline asm
	mov.u32 	%r481, 30258;
	// begin inline asm
	prmt.b32 %r422, %r419, %r420, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r426, %r427, %r428, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r430, %r427, %r428, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r434, %r435, %r436, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r438, %r435, %r436, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r442, %r443, %r444, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r446, %r443, %r444, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r450, %r451, %r452, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r454, %r451, %r452, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r458, %r459, %r460, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r462, %r459, %r460, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r466, %r467, %r468, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r470, %r467, %r468, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r474, %r475, %r476, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r478, %r475, %r476, %r481;
	// end inline asm
	st.shared.u32 	[%rd9], %r418;
	st.shared.u32 	[%rd10+128], %r422;
	st.shared.u32 	[%rd10+4], %r426;
	st.shared.u32 	[%rd10+132], %r430;
	st.shared.u32 	[%rd11+8324], %r434;
	st.shared.u32 	[%rd12], %r438;
	st.shared.u32 	[%rd13], %r442;
	st.shared.u32 	[%rd14], %r446;
	st.shared.u32 	[%rd11+16648], %r450;
	st.shared.u32 	[%rd15], %r454;
	st.shared.u32 	[%rd16], %r458;
	st.shared.u32 	[%rd17], %r462;
	st.shared.u32 	[%rd11+24972], %r466;
	st.shared.u32 	[%rd18], %r470;
	st.shared.u32 	[%rd19], %r474;
	st.shared.u32 	[%rd20], %r478;
	bar.sync 	0;
	mov.u64 	%rd149, %rd24;
	mov.u64 	%rd150, %rd23;
	mov.u64 	%rd151, %rd22;
	mov.u64 	%rd152, %rd21;
	mov.u32 	%r2528, %r2522;
	mov.u32 	%r2529, %r2521;
	mov.u32 	%r2530, %r2520;
	mov.u32 	%r2531, %r2519;
	mov.u32 	%r2536, %r2513;
	mov.u32 	%r2537, %r2518;
	mov.u32 	%r2538, %r2517;
	mov.u32 	%r2539, %r2516;
	mov.u32 	%r2540, %r2515;
$L__BB0_32:                             // %pass5629
                                        //   Parent Loop BB0_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2522, %r2535;
	mov.u32 	%r2521, %r2534;
	mov.u32 	%r2520, %r2533;
	mov.u32 	%r2519, %r2532;
	mov.u32 	%r2515, %r2531;
	mov.u32 	%r2516, %r2530;
	mov.u32 	%r2517, %r2529;
	mov.u32 	%r2518, %r2528;
	or.b32  	%r2376, %r24, %r2536;
	add.s32 	%r2377, %r2376, %r44;
	and.b32  	%r2378, %r2377, 1;
	neg.s32 	%r2379, %r2378;
	and.b32  	%r2380, %r2379, 1040;
	or.b32  	%r2381, %r2377, %r124;
	bfe.s32 	%r2382, %r2377, 1, 1;
	and.b32  	%r2383, %r2382, 520;
	bfe.s32 	%r2384, %r2377, 2, 1;
	and.b32  	%r2385, %r2384, 260;
	bfe.u32 	%r2386, %r2377, 6, 2;
	mul.lo.s32 	%r2387, %r2386, 2081;
	bfe.s32 	%r2388, %r2381, 4, 1;
	and.b32  	%r2389, %r2388, 65;
	bfe.s32 	%r2390, %r2381, 3, 1;
	and.b32  	%r2391, %r2390, 130;
	or.b32  	%r2392, %r2380, %r25;
	or.b32  	%r2393, %r2392, %r27;
	or.b32  	%r2394, %r2393, %r2383;
	add.s32 	%r2395, %r2394, %r2385;
	add.s32 	%r2396, %r2395, %r2387;
	add.s32 	%r2397, %r2396, %r2389;
	add.s32 	%r2398, %r2397, %r2391;
	mul.wide.u32 	%rd88, %r2398, 4;
	add.s64 	%rd90, %rd46, %rd88;
	ld.shared.u32 	%r2532, [%rd90];
	// begin inline asm
	mov.b32 %r569, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r580, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r568, %r2532, -2004318072;
	mov.u32 	%r567, 983055;
	// begin inline asm
	lop3.b32 %r566, %r567, %r568, %r569, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r570, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r571, %r569, %r570;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r574, %r566, %r571;
	// end inline asm
	mov.u32 	%r578, 15728880;
	// begin inline asm
	lop3.b32 %r577, %r578, %r568, %r580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r581, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r582, %r580, %r581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r585, %r577, %r582;
	// end inline asm
	shr.u32 	%r590, %r568, 8;
	// begin inline asm
	lop3.b32 %r588, %r567, %r590, %r569, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r592, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r593, %r569, %r592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r596, %r588, %r593;
	// end inline asm
	// begin inline asm
	lop3.b32 %r599, %r578, %r590, %r580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r603, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r604, %r580, %r603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r607, %r599, %r604;
	// end inline asm
	// begin inline asm
	mov.b32 %r615, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r626, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r614, %r2540, -2004318072;
	// begin inline asm
	lop3.b32 %r612, %r567, %r614, %r615, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r616, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r617, %r615, %r616;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r620, %r612, %r617;
	// end inline asm
	// begin inline asm
	lop3.b32 %r623, %r578, %r614, %r626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r627, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r628, %r626, %r627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r631, %r623, %r628;
	// end inline asm
	shr.u32 	%r636, %r614, 8;
	// begin inline asm
	lop3.b32 %r634, %r567, %r636, %r615, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r638, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r639, %r615, %r638;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r642, %r634, %r639;
	// end inline asm
	// begin inline asm
	lop3.b32 %r645, %r578, %r636, %r626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r649, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r650, %r626, %r649;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r653, %r645, %r650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r658, %r156, %r620, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r664, %r156, %r631, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r670, %r156, %r642, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r676, %r156, %r653, %r2513;
	// end inline asm
	// begin inline asm
	mov.b32 %r685, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r696, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r684, %r2515, -2004318072;
	// begin inline asm
	lop3.b32 %r682, %r567, %r684, %r685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r686, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r687, %r685, %r686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r690, %r682, %r687;
	// end inline asm
	// begin inline asm
	lop3.b32 %r693, %r578, %r684, %r696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r697, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r698, %r696, %r697;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r701, %r693, %r698;
	// end inline asm
	shr.u32 	%r706, %r684, 8;
	// begin inline asm
	lop3.b32 %r704, %r567, %r706, %r685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r708, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r709, %r685, %r708;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r712, %r704, %r709;
	// end inline asm
	// begin inline asm
	lop3.b32 %r715, %r578, %r706, %r696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r719, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r720, %r696, %r719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r723, %r715, %r720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r726, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r728, %r726, %r690, %r658;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r732, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r734, %r732, %r701, %r664;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r738, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r740, %r738, %r712, %r670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r744, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r746, %r744, %r723, %r676;
	// end inline asm
	// begin inline asm
	mov.b32 %r755, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r766, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r754, %r2519, -2004318072;
	// begin inline asm
	lop3.b32 %r752, %r567, %r754, %r755, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r756, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r757, %r755, %r756;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r760, %r752, %r757;
	// end inline asm
	// begin inline asm
	lop3.b32 %r763, %r578, %r754, %r766, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r767, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r768, %r766, %r767;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r771, %r763, %r768;
	// end inline asm
	shr.u32 	%r776, %r754, 8;
	// begin inline asm
	lop3.b32 %r774, %r567, %r776, %r755, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r778, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r779, %r755, %r778;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r782, %r774, %r779;
	// end inline asm
	// begin inline asm
	lop3.b32 %r785, %r578, %r776, %r766, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r789, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r790, %r766, %r789;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r793, %r785, %r790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r798, %r218, %r760, %r728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r804, %r218, %r771, %r734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r810, %r218, %r782, %r740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r816, %r218, %r793, %r746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r820, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r851, %r820, %r574, %r798;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r826, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r848, %r826, %r585, %r804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r832, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r860, %r832, %r596, %r810;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r838, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r857, %r838, %r607, %r816;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r844, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r846, %r844, %r848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r849, %r252, %r851, %r846;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r853, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r855, %r853, %r857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r858, %r252, %r860, %r855;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r862, %r255, %r851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r865, %r252, %r848, %r862;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r869, %r255, %r860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r872, %r252, %r857, %r869;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r903, %r900}, {%r258, %r264, %r261, %r267}, {%r849, %r865}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r912, %r909}, {%r258, %r264, %r261, %r267}, {%r858, %r872}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r896, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r898, %r896, %r900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r901, %r270, %r903, %r898;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r905, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r907, %r905, %r909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r910, %r270, %r912, %r907;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r914, %r273, %r903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r917, %r270, %r900, %r914;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r921, %r273, %r912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r924, %r270, %r909, %r921;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r928, %r929}, {%r276, %r282, %r279, %r285}, {%r901, %r917}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r938, %r939}, {%r276, %r282, %r279, %r285}, {%r910, %r924}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r948, %r53, %r928;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r951, %r53, %r929;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r954, %r53, %r938;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r957, %r53, %r939;
	// end inline asm
	// begin inline asm
	mov.b32 %r960, {%rs260, %rs260};
	// end inline asm
	mov.u16 	%rs51, 18176;
	// begin inline asm
	mov.b32 %r961, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r962, %r948, %r960;
	// end inline asm
	// begin inline asm
	min.f16x2 %r965, %r962, %r961;
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r970, %r951, %r968;
	// end inline asm
	// begin inline asm
	min.f16x2 %r973, %r970, %r969;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r978, %r954, %r976;
	// end inline asm
	// begin inline asm
	min.f16x2 %r981, %r978, %r977;
	// end inline asm
	// begin inline asm
	mov.b32 %r984, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r985, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r986, %r957, %r984;
	// end inline asm
	// begin inline asm
	min.f16x2 %r989, %r986, %r985;
	// end inline asm
	mov.u16 	%rs65, 26112;
	// begin inline asm
	mov.b32 %r995, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r993, %r965, %r995;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r996, %r973, %r995;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r999, %r981, %r995;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1002, %r989, %r995;
	// end inline asm
	mov.u32 	%r1008, 25152;
	// begin inline asm
	prmt.b32 %r1005, %r993, %r999, %r1008;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1009, %r996, %r1002, %r1008;
	// end inline asm
	shl.b32 	%r1016, %r1009, 4;
	mov.u32 	%r1014, 252645135;
	// begin inline asm
	lop3.b32 %r1013, %r1014, %r1005, %r1016, 202;
	// end inline asm
	st.shared.u32 	[%rd149], %r1013;
	or.b32  	%r2399, %r28, %r2380;
	or.b32  	%r2400, %r2399, %r27;
	add.s32 	%r2401, %r2400, %r2383;
	add.s32 	%r2402, %r2401, %r2385;
	add.s32 	%r2403, %r2402, %r2387;
	add.s32 	%r2404, %r2403, %r2389;
	add.s32 	%r2405, %r2404, %r2391;
	mul.wide.u32 	%rd91, %r2405, 4;
	add.s64 	%rd92, %rd46, %rd91;
	ld.shared.u32 	%r2533, [%rd92];
	// begin inline asm
	mov.b32 %r1022, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1021, %r2533, -2004318072;
	// begin inline asm
	lop3.b32 %r1019, %r567, %r1021, %r1022, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1024, %r1022, %r1023;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1027, %r1019, %r1024;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1030, %r578, %r1021, %r1033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1035, %r1033, %r1034;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1038, %r1030, %r1035;
	// end inline asm
	shr.u32 	%r1043, %r1021, 8;
	// begin inline asm
	lop3.b32 %r1041, %r567, %r1043, %r1022, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1046, %r1022, %r1045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1049, %r1041, %r1046;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1052, %r578, %r1043, %r1033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1056, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1057, %r1033, %r1056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1060, %r1052, %r1057;
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1079, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1067, %r2539, -2004318072;
	// begin inline asm
	lop3.b32 %r1065, %r567, %r1067, %r1068, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1070, %r1068, %r1069;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1073, %r1065, %r1070;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1076, %r578, %r1067, %r1079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1080, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1081, %r1079, %r1080;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1084, %r1076, %r1081;
	// end inline asm
	shr.u32 	%r1089, %r1067, 8;
	// begin inline asm
	lop3.b32 %r1087, %r567, %r1089, %r1068, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1091, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1092, %r1068, %r1091;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1095, %r1087, %r1092;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1098, %r578, %r1089, %r1079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1102, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1103, %r1079, %r1102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1106, %r1098, %r1103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1111, %r156, %r1073, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r156, %r1084, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r156, %r1095, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r156, %r1106, %r2513;
	// end inline asm
	// begin inline asm
	mov.b32 %r1138, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1149, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1137, %r2516, -2004318072;
	// begin inline asm
	lop3.b32 %r1135, %r567, %r1137, %r1138, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1139, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1140, %r1138, %r1139;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1143, %r1135, %r1140;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1146, %r578, %r1137, %r1149, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1150, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1151, %r1149, %r1150;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1154, %r1146, %r1151;
	// end inline asm
	shr.u32 	%r1159, %r1137, 8;
	// begin inline asm
	lop3.b32 %r1157, %r567, %r1159, %r1138, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1161, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1162, %r1138, %r1161;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1165, %r1157, %r1162;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1168, %r578, %r1159, %r1149, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1172, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1173, %r1149, %r1172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1176, %r1168, %r1173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1179, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r1179, %r1143, %r1111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1185, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r1185, %r1154, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1191, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r1191, %r1165, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1197, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1199, %r1197, %r1176, %r1129;
	// end inline asm
	// begin inline asm
	mov.b32 %r1208, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1219, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1207, %r2520, -2004318072;
	// begin inline asm
	lop3.b32 %r1205, %r567, %r1207, %r1208, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1209, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1210, %r1208, %r1209;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1213, %r1205, %r1210;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1216, %r578, %r1207, %r1219, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1220, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1221, %r1219, %r1220;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1224, %r1216, %r1221;
	// end inline asm
	shr.u32 	%r1229, %r1207, 8;
	// begin inline asm
	lop3.b32 %r1227, %r567, %r1229, %r1208, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1231, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1232, %r1208, %r1231;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1235, %r1227, %r1232;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1238, %r578, %r1229, %r1219, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1242, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1243, %r1219, %r1242;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1246, %r1238, %r1243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r218, %r1213, %r1181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r218, %r1224, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1263, %r218, %r1235, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r218, %r1246, %r1199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1273, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1304, %r1273, %r1027, %r1251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1279, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1301, %r1279, %r1038, %r1257;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1285, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1313, %r1285, %r1049, %r1263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1291, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1310, %r1291, %r1060, %r1269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1297, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1299, %r1297, %r1301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1302, %r252, %r1304, %r1299;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1306, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1308, %r1306, %r1310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1311, %r252, %r1313, %r1308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1315, %r255, %r1304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1318, %r252, %r1301, %r1315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1322, %r255, %r1313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1325, %r252, %r1310, %r1322;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1356, %r1353}, {%r258, %r264, %r261, %r267}, {%r1302, %r1318}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1365, %r1362}, {%r258, %r264, %r261, %r267}, {%r1311, %r1325}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1349, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1351, %r1349, %r1353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1354, %r270, %r1356, %r1351;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1358, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1360, %r1358, %r1362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1363, %r270, %r1365, %r1360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1367, %r273, %r1356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1370, %r270, %r1353, %r1367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1374, %r273, %r1365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r270, %r1362, %r1374;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1381, %r1382}, {%r276, %r282, %r279, %r285}, {%r1354, %r1370}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1391, %r1392}, {%r276, %r282, %r279, %r285}, {%r1363, %r1377}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1401, %r53, %r1381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1404, %r53, %r1382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1407, %r53, %r1391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1410, %r53, %r1392;
	// end inline asm
	// begin inline asm
	mov.b32 %r1413, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1414, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1415, %r1401, %r1413;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1418, %r1415, %r1414;
	// end inline asm
	// begin inline asm
	mov.b32 %r1421, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1422, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1423, %r1404, %r1421;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1426, %r1423, %r1422;
	// end inline asm
	// begin inline asm
	mov.b32 %r1429, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1430, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1431, %r1407, %r1429;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1434, %r1431, %r1430;
	// end inline asm
	// begin inline asm
	mov.b32 %r1437, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1438, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1439, %r1410, %r1437;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1442, %r1439, %r1438;
	// end inline asm
	// begin inline asm
	mov.b32 %r1448, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1446, %r1418, %r1448;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1449, %r1426, %r1448;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1452, %r1434, %r1448;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1455, %r1442, %r1448;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1458, %r1446, %r1452, %r1008;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1462, %r1449, %r1455, %r1008;
	// end inline asm
	shl.b32 	%r1469, %r1462, 4;
	// begin inline asm
	lop3.b32 %r1466, %r1014, %r1458, %r1469, 202;
	// end inline asm
	st.shared.u32 	[%rd150], %r1466;
	add.s32 	%r2406, %r29, %r2380;
	or.b32  	%r2407, %r2406, %r2383;
	add.s32 	%r2408, %r2407, %r2385;
	add.s32 	%r2409, %r2408, %r2387;
	add.s32 	%r2410, %r2409, %r2389;
	add.s32 	%r2411, %r2410, %r2391;
	mul.wide.u32 	%rd93, %r2411, 4;
	add.s64 	%rd94, %rd46, %rd93;
	ld.shared.u32 	%r2534, [%rd94];
	// begin inline asm
	mov.b32 %r1475, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1486, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1474, %r2534, -2004318072;
	// begin inline asm
	lop3.b32 %r1472, %r567, %r1474, %r1475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1476, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1477, %r1475, %r1476;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1480, %r1472, %r1477;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1483, %r578, %r1474, %r1486, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1487, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1488, %r1486, %r1487;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1491, %r1483, %r1488;
	// end inline asm
	shr.u32 	%r1496, %r1474, 8;
	// begin inline asm
	lop3.b32 %r1494, %r567, %r1496, %r1475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1498, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1499, %r1475, %r1498;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1502, %r1494, %r1499;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1505, %r578, %r1496, %r1486, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1509, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1510, %r1486, %r1509;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1513, %r1505, %r1510;
	// end inline asm
	// begin inline asm
	mov.b32 %r1521, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1532, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1520, %r2538, -2004318072;
	// begin inline asm
	lop3.b32 %r1518, %r567, %r1520, %r1521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1523, %r1521, %r1522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1526, %r1518, %r1523;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1529, %r578, %r1520, %r1532, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1533, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1534, %r1532, %r1533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1537, %r1529, %r1534;
	// end inline asm
	shr.u32 	%r1542, %r1520, 8;
	// begin inline asm
	lop3.b32 %r1540, %r567, %r1542, %r1521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1544, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1545, %r1521, %r1544;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1548, %r1540, %r1545;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1551, %r578, %r1542, %r1532, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1555, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1556, %r1532, %r1555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1559, %r1551, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1564, %r156, %r1526, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r156, %r1537, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1576, %r156, %r1548, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1582, %r156, %r1559, %r2513;
	// end inline asm
	// begin inline asm
	mov.b32 %r1591, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1602, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1590, %r2517, -2004318072;
	// begin inline asm
	lop3.b32 %r1588, %r567, %r1590, %r1591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1592, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1593, %r1591, %r1592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1596, %r1588, %r1593;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1599, %r578, %r1590, %r1602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1603, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1604, %r1602, %r1603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1607, %r1599, %r1604;
	// end inline asm
	shr.u32 	%r1612, %r1590, 8;
	// begin inline asm
	lop3.b32 %r1610, %r567, %r1612, %r1591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1614, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1615, %r1591, %r1614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1618, %r1610, %r1615;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1621, %r578, %r1612, %r1602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1625, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1626, %r1602, %r1625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1629, %r1621, %r1626;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1632, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1634, %r1632, %r1596, %r1564;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1638, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1640, %r1638, %r1607, %r1570;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1644, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1646, %r1644, %r1618, %r1576;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1650, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1652, %r1650, %r1629, %r1582;
	// end inline asm
	// begin inline asm
	mov.b32 %r1661, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1672, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1660, %r2521, -2004318072;
	// begin inline asm
	lop3.b32 %r1658, %r567, %r1660, %r1661, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1662, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1663, %r1661, %r1662;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1666, %r1658, %r1663;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1669, %r578, %r1660, %r1672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1673, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1674, %r1672, %r1673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1677, %r1669, %r1674;
	// end inline asm
	shr.u32 	%r1682, %r1660, 8;
	// begin inline asm
	lop3.b32 %r1680, %r567, %r1682, %r1661, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1684, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1685, %r1661, %r1684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1688, %r1680, %r1685;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1691, %r578, %r1682, %r1672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1695, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1696, %r1672, %r1695;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1699, %r1691, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r218, %r1666, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r218, %r1677, %r1640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r218, %r1688, %r1646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r218, %r1699, %r1652;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1726, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r1726, %r1480, %r1704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1732, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r1732, %r1491, %r1710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1738, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r1738, %r1502, %r1716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1744, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r1744, %r1513, %r1722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1750, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1752, %r1750, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r252, %r1757, %r1752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1759, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r1759, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r252, %r1766, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r255, %r1757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r252, %r1754, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r255, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r252, %r1763, %r1775;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1809, %r1806}, {%r258, %r264, %r261, %r267}, {%r1755, %r1771}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1818, %r1815}, {%r258, %r264, %r261, %r267}, {%r1764, %r1778}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1802, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1804, %r1802, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r270, %r1809, %r1804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1811, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r1811, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r270, %r1818, %r1813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1820, %r273, %r1809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1823, %r270, %r1806, %r1820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r273, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r270, %r1815, %r1827;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1834, %r1835}, {%r276, %r282, %r279, %r285}, {%r1807, %r1823}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1844, %r1845}, {%r276, %r282, %r279, %r285}, {%r1816, %r1830}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1854, %r53, %r1834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r53, %r1835;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1860, %r53, %r1844;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1863, %r53, %r1845;
	// end inline asm
	// begin inline asm
	mov.b32 %r1866, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1867, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1868, %r1854, %r1866;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1871, %r1868, %r1867;
	// end inline asm
	// begin inline asm
	mov.b32 %r1874, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1875, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1876, %r1857, %r1874;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1879, %r1876, %r1875;
	// end inline asm
	// begin inline asm
	mov.b32 %r1882, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1883, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1884, %r1860, %r1882;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1887, %r1884, %r1883;
	// end inline asm
	// begin inline asm
	mov.b32 %r1890, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1891, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1892, %r1863, %r1890;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1895, %r1892, %r1891;
	// end inline asm
	// begin inline asm
	mov.b32 %r1901, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1899, %r1871, %r1901;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1902, %r1879, %r1901;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1905, %r1887, %r1901;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1908, %r1895, %r1901;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1911, %r1899, %r1905, %r1008;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1915, %r1902, %r1908, %r1008;
	// end inline asm
	shl.b32 	%r1922, %r1915, 4;
	// begin inline asm
	lop3.b32 %r1919, %r1014, %r1911, %r1922, 202;
	// end inline asm
	st.shared.u32 	[%rd151], %r1919;
	add.s32 	%r2412, %r30, %r2380;
	add.s32 	%r2413, %r2412, %r2383;
	add.s32 	%r2414, %r2413, %r2385;
	add.s32 	%r2415, %r2414, %r2387;
	add.s32 	%r2416, %r2415, %r2389;
	add.s32 	%r2417, %r2416, %r2391;
	mul.wide.u32 	%rd95, %r2417, 4;
	add.s64 	%rd96, %rd46, %rd95;
	ld.shared.u32 	%r2535, [%rd96];
	// begin inline asm
	mov.b32 %r1928, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1939, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1927, %r2535, -2004318072;
	// begin inline asm
	lop3.b32 %r1925, %r567, %r1927, %r1928, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1929, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1930, %r1928, %r1929;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1933, %r1925, %r1930;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1936, %r578, %r1927, %r1939, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1940, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1941, %r1939, %r1940;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1944, %r1936, %r1941;
	// end inline asm
	shr.u32 	%r1949, %r1927, 8;
	// begin inline asm
	lop3.b32 %r1947, %r567, %r1949, %r1928, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1951, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1952, %r1928, %r1951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1955, %r1947, %r1952;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1958, %r578, %r1949, %r1939, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1962, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1963, %r1939, %r1962;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1966, %r1958, %r1963;
	// end inline asm
	// begin inline asm
	mov.b32 %r1974, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1985, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1973, %r2537, -2004318072;
	// begin inline asm
	lop3.b32 %r1971, %r567, %r1973, %r1974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1975, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1976, %r1974, %r1975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1979, %r1971, %r1976;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1982, %r578, %r1973, %r1985, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1986, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1987, %r1985, %r1986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1990, %r1982, %r1987;
	// end inline asm
	shr.u32 	%r1995, %r1973, 8;
	// begin inline asm
	lop3.b32 %r1993, %r567, %r1995, %r1974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1997, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1998, %r1974, %r1997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2001, %r1993, %r1998;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2004, %r578, %r1995, %r1985, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2008, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2009, %r1985, %r2008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2012, %r2004, %r2009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2017, %r156, %r1979, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r156, %r1990, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2029, %r156, %r2001, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r156, %r2012, %r2513;
	// end inline asm
	// begin inline asm
	mov.b32 %r2044, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2055, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2043, %r2518, -2004318072;
	// begin inline asm
	lop3.b32 %r2041, %r567, %r2043, %r2044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2045, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2046, %r2044, %r2045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2049, %r2041, %r2046;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2052, %r578, %r2043, %r2055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2056, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2057, %r2055, %r2056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2060, %r2052, %r2057;
	// end inline asm
	shr.u32 	%r2065, %r2043, 8;
	// begin inline asm
	lop3.b32 %r2063, %r567, %r2065, %r2044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2067, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2068, %r2044, %r2067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2071, %r2063, %r2068;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2074, %r578, %r2065, %r2055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2078, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2079, %r2055, %r2078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2082, %r2074, %r2079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2085, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2087, %r2085, %r2049, %r2017;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2091, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2093, %r2091, %r2060, %r2023;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2097, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2099, %r2097, %r2071, %r2029;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2103, %r187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2105, %r2103, %r2082, %r2035;
	// end inline asm
	// begin inline asm
	mov.b32 %r2114, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2125, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2113, %r2522, -2004318072;
	// begin inline asm
	lop3.b32 %r2111, %r567, %r2113, %r2114, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2115, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2116, %r2114, %r2115;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2119, %r2111, %r2116;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2122, %r578, %r2113, %r2125, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2126, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2127, %r2125, %r2126;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2130, %r2122, %r2127;
	// end inline asm
	shr.u32 	%r2135, %r2113, 8;
	// begin inline asm
	lop3.b32 %r2133, %r567, %r2135, %r2114, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2137, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2138, %r2114, %r2137;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2141, %r2133, %r2138;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2144, %r578, %r2135, %r2125, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2148, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2149, %r2125, %r2148;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2152, %r2144, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r218, %r2119, %r2087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2163, %r218, %r2130, %r2093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2169, %r218, %r2141, %r2099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r218, %r2152, %r2105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2179, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2210, %r2179, %r1933, %r2157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2185, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2207, %r2185, %r1944, %r2163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2191, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2219, %r2191, %r1955, %r2169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r2197, %r1966, %r2175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2203, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2205, %r2203, %r2207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2208, %r252, %r2210, %r2205;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2212, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2214, %r2212, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2217, %r252, %r2219, %r2214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2221, %r255, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r252, %r2207, %r2221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r255, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r252, %r2216, %r2228;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2262, %r2259}, {%r258, %r264, %r261, %r267}, {%r2208, %r2224}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2271, %r2268}, {%r258, %r264, %r261, %r267}, {%r2217, %r2231}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2255, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2257, %r2255, %r2259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2260, %r270, %r2262, %r2257;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2264, %r273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2266, %r2264, %r2268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2269, %r270, %r2271, %r2266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r273, %r2262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2276, %r270, %r2259, %r2273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r273, %r2271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2283, %r270, %r2268, %r2280;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2287, %r2288}, {%r276, %r282, %r279, %r285}, {%r2260, %r2276}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2297, %r2298}, {%r276, %r282, %r279, %r285}, {%r2269, %r2283}, {%r2513, %r2513};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2307, %r53, %r2287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2310, %r53, %r2288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2313, %r53, %r2297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2316, %r53, %r2298;
	// end inline asm
	// begin inline asm
	mov.b32 %r2319, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2321, %r2307, %r2319;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2324, %r2321, %r2320;
	// end inline asm
	// begin inline asm
	mov.b32 %r2327, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2328, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2329, %r2310, %r2327;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2332, %r2329, %r2328;
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2336, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2337, %r2313, %r2335;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2340, %r2337, %r2336;
	// end inline asm
	// begin inline asm
	mov.b32 %r2343, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2345, %r2316, %r2343;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2348, %r2345, %r2344;
	// end inline asm
	// begin inline asm
	mov.b32 %r2354, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2324, %r2354;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2355, %r2332, %r2354;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2358, %r2340, %r2354;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2361, %r2348, %r2354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2364, %r2352, %r2358, %r1008;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2368, %r2355, %r2361, %r1008;
	// end inline asm
	shl.b32 	%r2375, %r2368, 4;
	// begin inline asm
	lop3.b32 %r2372, %r1014, %r2364, %r2375, 202;
	// end inline asm
	st.shared.u32 	[%rd152], %r2372;
	add.s32 	%r2536, %r2536, 64;
	add.s64 	%rd152, %rd152, 8324;
	add.s64 	%rd151, %rd151, 8324;
	add.s64 	%rd150, %rd150, 8324;
	add.s64 	%rd149, %rd149, 8324;
	setp.eq.s32 	%p165, %r2536, 256;
	mov.u32 	%r2528, %r2522;
	mov.u32 	%r2529, %r2521;
	mov.u32 	%r2530, %r2520;
	mov.u32 	%r2531, %r2519;
	mov.u32 	%r2537, %r2518;
	mov.u32 	%r2538, %r2517;
	mov.u32 	%r2539, %r2516;
	mov.u32 	%r2540, %r2515;
	@%p165 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;
$L__BB0_33:                             // %guard_exit10925
                                        //   in Loop: Header=BB0_31 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2423, [%rd6];
	ld.shared.u32 	%r2424, [%rd7+128];
	ld.shared.u32 	%r2431, [%rd7+4];
	ld.shared.u32 	%r2432, [%rd7+132];
	ld.shared.u32 	%r2439, [%rd6+8324];
	ld.shared.u32 	%r2440, [%rd7+8452];
	ld.shared.u32 	%r2447, [%rd7+8328];
	ld.shared.u32 	%r2448, [%rd7+8456];
	ld.shared.u32 	%r2455, [%rd6+16648];
	ld.shared.u32 	%r2456, [%rd7+16776];
	ld.shared.u32 	%r2463, [%rd7+16652];
	ld.shared.u32 	%r2464, [%rd7+16780];
	ld.shared.u32 	%r2471, [%rd6+24972];
	ld.shared.u32 	%r2472, [%rd7+25100];
	ld.shared.u32 	%r2479, [%rd7+24976];
	ld.shared.u32 	%r2480, [%rd7+25104];
	// begin inline asm
	prmt.b32 %r2418, %r2423, %r2424, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2422, %r2423, %r2424, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2426, %r2431, %r2432, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2430, %r2431, %r2432, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2434, %r2439, %r2440, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2438, %r2439, %r2440, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2442, %r2447, %r2448, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2446, %r2447, %r2448, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2450, %r2455, %r2456, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2454, %r2455, %r2456, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2458, %r2463, %r2464, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2462, %r2463, %r2464, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2466, %r2471, %r2472, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2470, %r2471, %r2472, %r481;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2474, %r2479, %r2480, %r477;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2478, %r2479, %r2480, %r481;
	// end inline asm
	selp.b32 	%r2482, %r2422, %r2418, %p152;
	shfl.sync.bfly.b32	%r86, %r2482, 8, 31, -1;
	selp.b32 	%r2483, %r2430, %r2426, %p152;
	shfl.sync.bfly.b32	%r87, %r2483, 8, 31, -1;
	selp.b32 	%r2484, %r2438, %r2434, %p152;
	shfl.sync.bfly.b32	%r2485, %r2484, 8, 31, -1;
	selp.b32 	%r2486, %r2446, %r2442, %p152;
	shfl.sync.bfly.b32	%r2487, %r2486, 8, 31, -1;
	selp.b32 	%r2488, %r2454, %r2450, %p152;
	shfl.sync.bfly.b32	%r2489, %r2488, 8, 31, -1;
	selp.b32 	%r2490, %r2462, %r2458, %p152;
	shfl.sync.bfly.b32	%r2491, %r2490, 8, 31, -1;
	selp.b32 	%r2492, %r2470, %r2466, %p152;
	shfl.sync.bfly.b32	%r2493, %r2492, 8, 31, -1;
	selp.b32 	%r2494, %r2478, %r2474, %p152;
	shfl.sync.bfly.b32	%r2495, %r2494, 8, 31, -1;
	setp.eq.s32 	%p167, %r45, 0;
	shl.b32 	%r2514, %r44, 9;
	@%p167 bra 	$L__BB0_35;
// %bb.34:                              // %pass10100
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r2496, %r87, %r2430, %p152;
	selp.b32 	%r2497, %r2426, %r87, %p152;
	selp.b32 	%r2498, %r86, %r2422, %p152;
	selp.b32 	%r2499, %r2418, %r86, %p152;
	or.b32  	%r2501, %r2514, %r31;
	cvt.u64.u32 	%rd97, %r2501;
	add.s64 	%rd98, %rd97, %rd8;
	shr.u64 	%rd99, %rd98, 39;
	add.s64 	%rd100, %rd98, %rd99;
	shr.s64 	%rd101, %rd100, 25;
	setp.lt.s64 	%p169, %rd98, 0;
	and.b64  	%rd102, %rd100, -33554432;
	setp.ne.s64 	%p170, %rd102, %rd98;
	and.pred  	%p171, %p169, %p170;
	selp.u64 	%rd103, 1, 0, %p171;
	sub.s64 	%rd104, %rd103, %rd101;
	shl.b64 	%rd105, %rd104, 25;
	add.s64 	%rd106, %rd105, %rd98;
	shl.b64 	%rd107, %rd106, 2;
	add.s64 	%rd108, %rd3, %rd107;
	st.global.v4.u32 	[%rd108], {%r2499, %r2497, %r2498, %r2496};
$L__BB0_35:                             // %pass10113
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r80, %r44, 64;
	setp.lt.u32 	%p172, %r80, 192;
	@%p172 bra 	$L__BB0_37;
// %bb.36:                              // %pass10207
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r88, %r2434, %r2485, %p152;
	selp.b32 	%r89, %r2485, %r2438, %p152;
	selp.b32 	%r90, %r2442, %r2487, %p152;
	selp.b32 	%r91, %r2487, %r2446, %p152;
	shl.b32 	%r2502, %r80, 9;
	or.b32  	%r2503, %r2502, %r31;
	cvt.u64.u32 	%rd109, %r2503;
	add.s64 	%rd110, %rd109, %rd8;
	shr.u64 	%rd111, %rd110, 39;
	add.s64 	%rd112, %rd110, %rd111;
	shr.s64 	%rd113, %rd112, 25;
	setp.lt.s64 	%p173, %rd110, 0;
	and.b64  	%rd114, %rd112, -33554432;
	setp.ne.s64 	%p174, %rd114, %rd110;
	and.pred  	%p175, %p173, %p174;
	selp.u64 	%rd115, 1, 0, %p175;
	sub.s64 	%rd116, %rd115, %rd113;
	shl.b64 	%rd117, %rd116, 25;
	add.s64 	%rd118, %rd117, %rd110;
	shl.b64 	%rd119, %rd118, 2;
	add.s64 	%rd120, %rd3, %rd119;
	st.global.v4.u32 	[%rd120], {%r88, %r90, %r89, %r91};
$L__BB0_37:                             // %pass10220
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r81, %r44, 128;
	selp.b32 	%r96, %r2466, %r2493, %p152;
	selp.b32 	%r97, %r2493, %r2470, %p152;
	selp.b32 	%r98, %r2474, %r2495, %p152;
	selp.b32 	%r99, %r2495, %r2478, %p152;
	setp.lt.u32 	%p176, %r81, 192;
	@%p176 bra 	$L__BB0_39;
// %bb.38:                              // %pass10314
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r92, %r2450, %r2489, %p152;
	selp.b32 	%r93, %r2489, %r2454, %p152;
	selp.b32 	%r94, %r2458, %r2491, %p152;
	selp.b32 	%r95, %r2491, %r2462, %p152;
	shl.b32 	%r2504, %r81, 9;
	or.b32  	%r2505, %r2504, %r31;
	cvt.u64.u32 	%rd121, %r2505;
	add.s64 	%rd122, %rd121, %rd8;
	shr.u64 	%rd123, %rd122, 39;
	add.s64 	%rd124, %rd122, %rd123;
	shr.s64 	%rd125, %rd124, 25;
	setp.lt.s64 	%p177, %rd122, 0;
	and.b64  	%rd126, %rd124, -33554432;
	setp.ne.s64 	%p178, %rd126, %rd122;
	and.pred  	%p179, %p177, %p178;
	selp.u64 	%rd127, 1, 0, %p179;
	sub.s64 	%rd128, %rd127, %rd125;
	shl.b64 	%rd129, %rd128, 25;
	add.s64 	%rd130, %rd129, %rd122;
	shl.b64 	%rd131, %rd130, 2;
	add.s64 	%rd132, %rd3, %rd131;
	st.global.v4.u32 	[%rd132], {%r92, %r94, %r93, %r95};
	bra.uni 	$L__BB0_39;
$L__BB0_40:                             // %L23086
	st.global.u32 	[%rd5], %r2513;
	ret;
$L__BB0_9:                              // %L177
	mov.u32 	%r2512, 2;
	st.global.u32 	[%rd5], %r2512;
	mov.u64 	%rd147, exception2065;
	cvta.global.u64 	%rd148, %rd147;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd148;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r100;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L283
	mov.u32 	%r2511, 3;
	st.global.u32 	[%rd5], %r2511;
	mov.u64 	%rd145, exception2065;
	cvta.global.u64 	%rd146, %rd145;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd146;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r100;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd38, exception12085;
	cvta.global.u64 	%rd39, %rd38;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd39;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r100;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd40, exception12085;
	cvta.global.u64 	%rd41, %rd40;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd41;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r100;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
