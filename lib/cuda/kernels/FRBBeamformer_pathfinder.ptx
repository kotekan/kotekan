// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2614[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<472>;
	.reg .b16 	%rs<743>;
	.reg .f32 	%f<790>;
	.reg .b32 	%r<3718>;
	.reg .b64 	%rd<350>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r465, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd16, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r466, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r466, 13919;
	@%p1 bra 	LBB0_557;
	bra.uni 	LBB0_1;
LBB0_557:                               // %L11
	ld.param.u64 	%rd17, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mul.lo.s32 	%r4, %r3, 192;
	mov.u32 	%r5, %tid.x;
	add.s32 	%r467, %r4, %r2;
	or.b32  	%r468, %r467, %r5;
	mul.wide.u32 	%rd23, %r468, 4;
	add.s64 	%rd5, %rd17, %rd23;
	mov.u32 	%r469, 1;
	st.global.u32 	[%rd5], %r469;
	and.b32  	%r6, %r5, 3;
	shr.u32 	%r7, %r5, 2;
	mul.lo.s32 	%r470, %r6, %r7;
	and.b32  	%r471, %r470, 7;
	cvt.rn.f32.s32 	%f205, %r471;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f1, %f205, %f206;
	abs.f32 	%f788, %f1;
	setp.lt.f32 	%p2, %f788, 0f40000000;
	setp.gtu.f32 	%p471, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p2 bra 	LBB0_569;
// %bb.558:
	@%p471 bra 	LBB0_565;
	bra.uni 	LBB0_559;
LBB0_565:
	mov.b32 	%r295, %f788;
	and.b32  	%r472, %r295, 8388607;
	or.b32  	%r3702, %r472, 1065353216;
	mov.b32 	%f783, %r3702;
	add.s32 	%r473, %r295, -1073741824;
	and.b32  	%r3703, %r473, -8388608;
	setp.eq.s32 	%p9, %r3703, 0;
	@%p9 bra 	LBB0_568;
// %bb.566:                             // %.lr.ph4937.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
LBB0_567:                               // %.lr.ph4937
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r474, %r3703, 192937984;
	add.s32 	%r475, %r474, %r3702;
	mov.b32 	%f217, %r475;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3703, %r3703, %r474;
	mov.b32 	%r3702, %f783;
	setp.ne.s32 	%p10, %r3703, 0;
	setp.ne.s32 	%p11, %r3702, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_567;
LBB0_568:                               // %__internal_fmodf_slowpath_mod.exit.i.i3110
	setp.gt.u32 	%p13, %r295, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	LBB0_569;
LBB0_559:                               // %__nv_fast_fdividef.exit.i.i.i3076
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f171, %f208;
	fma.rn.f32 	%f172, %f171, 0fC0000000, %f788;
	mov.b32 	%r294, %f172;
	setp.lt.u32 	%p4, %r294, 1073741824;
	mov.f32 	%f782, %f171;
	@%p4 bra 	LBB0_564;
// %bb.560:
	setp.lt.u32 	%p5, %r294, -2147483647;
	@%p5 bra 	LBB0_562;
// %bb.561:
	add.f32 	%f213, %f171, 0fBF800000;
	setp.lt.f32 	%p8, %f172, 0fC0000000;
	selp.f32 	%f214, %f213, %f171, %p8;
	add.f32 	%f782, %f214, 0fBF800000;
	bra.uni 	LBB0_564;
LBB0_562:
	add.f32 	%f782, %f171, 0f3F800000;
	setp.ltu.f32 	%p6, %f172, 0f40800000;
	@%p6 bra 	LBB0_564;
// %bb.563:                             // %__nv_fmaf_rn.exit.i.i.i3081
	fma.rn.f32 	%f210, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p7, %f210, 0f00000000;
	selp.f32 	%f211, %f782, %f171, %p7;
	add.f32 	%f212, %f211, 0f3F800000;
	add.f32 	%f782, %f212, 0f3F800000;
LBB0_564:                               // %__internal_fmodf_fastpath_quot.exit.i.i3084
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
LBB0_569:                               // %__internal_fmodf_kernel.exit.i3113
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p14, %f226, 0f7F800000;
	mov.b32 	%r476, %f1;
	and.b32  	%r302, %r476, -2147483648;
	@%p14 bra 	LBB0_571;
// %bb.570:
	mov.b32 	%r477, %f784;
	or.b32  	%r478, %r302, %r477;
	mov.b32 	%f784, %r478;
LBB0_571:                               // %__nv_fmodf.exit3116
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r485, %f227;
	and.b32  	%r486, %r485, -2147483648;
	or.b32  	%r487, %r486, 1056964608;
	mov.b32 	%f228, %r487;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p15, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p15;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p16, %f231, 0f3F000000;
	shl.b32 	%r305, %r5, 1;
	and.b32  	%r306, %r305, 2;
	mul.lo.s32 	%r493, %r306, %r7;
	cvt.u16.u32 	%rs140, %r493;
	and.b16  	%rs141, %rs140, 254;
	mul.lo.s16 	%rs142, %rs141, 171;
	shr.u16 	%rs143, %rs142, 12;
	mul.lo.s16 	%rs144, %rs143, 24;
	sub.s16 	%rs145, %rs140, %rs144;
	and.b16  	%rs146, %rs145, 254;
	cvt.rn.f32.u16 	%f259, %rs146;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p22, %f734, 0f40000000;
	@%p22 bra 	LBB0_13;
// %bb.2:
	setp.gtu.f32 	%p23, %f734, 0f4B800000;
	@%p23 bra 	LBB0_9;
	bra.uni 	LBB0_3;
LBB0_9:
	mov.b32 	%r9, %f734;
	and.b32  	%r494, %r9, 8388607;
	or.b32  	%r3563, %r494, 1065353216;
	mov.b32 	%f733, %r3563;
	add.s32 	%r495, %r9, -1073741824;
	and.b32  	%r3564, %r495, -8388608;
	setp.eq.s32 	%p29, %r3564, 0;
	@%p29 bra 	LBB0_12;
// %bb.10:                              // %.lr.ph4932.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
LBB0_11:                                // %.lr.ph4932
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r496, %r3564, 192937984;
	add.s32 	%r497, %r496, %r3563;
	mov.b32 	%f271, %r497;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3564, %r3564, %r496;
	mov.b32 	%r3563, %f733;
	setp.ne.s32 	%p30, %r3564, 0;
	setp.ne.s32 	%p31, %r3563, 0;
	and.pred  	%p32, %p30, %p31;
	@%p32 bra 	LBB0_11;
LBB0_12:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p33, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p33;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	LBB0_13;
LBB0_3:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f3, %f262;
	fma.rn.f32 	%f4, %f3, 0fC0000000, %f734;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p24, %r8, 1073741824;
	mov.f32 	%f732, %f3;
	@%p24 bra 	LBB0_8;
// %bb.4:
	setp.lt.u32 	%p25, %r8, -2147483647;
	@%p25 bra 	LBB0_6;
// %bb.5:
	add.f32 	%f267, %f3, 0fBF800000;
	setp.lt.f32 	%p28, %f4, 0fC0000000;
	selp.f32 	%f268, %f267, %f3, %p28;
	add.f32 	%f732, %f268, 0fBF800000;
	bra.uni 	LBB0_8;
LBB0_6:
	add.f32 	%f732, %f3, 0f3F800000;
	setp.ltu.f32 	%p26, %f4, 0f40800000;
	@%p26 bra 	LBB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f264, %f261, 0fC0400000, %f4;
	setp.ge.f32 	%p27, %f264, 0f00000000;
	selp.f32 	%f265, %f732, %f3, %p27;
	add.f32 	%f266, %f265, 0f3F800000;
	add.f32 	%f732, %f266, 0f3F800000;
LBB0_8:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
LBB0_13:                                // %__internal_fmodf_kernel.exit.i
	selp.f32 	%f234, %f233, %f232, %p16;
	or.b32  	%r307, %r306, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p34, %f280, 0f7F800000;
	@%p34 bra 	LBB0_15;
// %bb.14:
	mov.b32 	%r498, %f186;
	and.b32  	%r499, %r498, -2147483648;
	mov.b32 	%r500, %f734;
	or.b32  	%r501, %r499, %r500;
	mov.b32 	%f734, %r501;
LBB0_15:                                // %__nv_fmodf.exit
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r502, %f282;
	and.b32  	%r503, %r502, -2147483648;
	or.b32  	%r504, %r503, 1056964608;
	mov.b32 	%f283, %r504;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p35, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p35;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p36, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p36;
	setp.eq.s32 	%p42, %r307, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p42 bra 	LBB0_31;
// %bb.16:                              // %L229
	mul.lo.s32 	%r510, %r307, %r7;
	mul.hi.u32 	%r511, %r510, -1431655765;
	shr.u32 	%r512, %r511, 4;
	mul.lo.s32 	%r513, %r512, 24;
	sub.s32 	%r514, %r510, %r513;
	cvt.rn.f32.s32 	%f311, %r514;
	div.approx.f32 	%f20, %f311, %f260;
	abs.f32 	%f738, %f20;
	setp.lt.f32 	%p43, %f738, 0f40000000;
	@%p43 bra 	LBB0_28;
// %bb.17:
	setp.gtu.f32 	%p44, %f738, 0f4B800000;
	@%p44 bra 	LBB0_24;
	bra.uni 	LBB0_18;
LBB0_24:
	mov.b32 	%r17, %f738;
	and.b32  	%r515, %r17, 8388607;
	or.b32  	%r3565, %r515, 1065353216;
	mov.b32 	%f737, %r3565;
	add.s32 	%r516, %r17, -1073741824;
	and.b32  	%r3566, %r516, -8388608;
	setp.eq.s32 	%p50, %r3566, 0;
	@%p50 bra 	LBB0_27;
// %bb.25:                              // %.lr.ph4927.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
LBB0_26:                                // %.lr.ph4927
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r517, %r3566, 192937984;
	add.s32 	%r518, %r517, %r3565;
	mov.b32 	%f323, %r518;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3566, %r3566, %r517;
	mov.b32 	%r3565, %f737;
	setp.ne.s32 	%p51, %r3566, 0;
	setp.ne.s32 	%p52, %r3565, 0;
	and.pred  	%p53, %p51, %p52;
	@%p53 bra 	LBB0_26;
LBB0_27:                                // %__internal_fmodf_slowpath_mod.exit.i.i2739
	setp.gt.u32 	%p54, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p54;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	LBB0_28;
LBB0_18:                                // %__nv_fast_fdividef.exit.i.i.i2705
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f22, %f314;
	fma.rn.f32 	%f23, %f22, 0fC0000000, %f738;
	mov.b32 	%r16, %f23;
	setp.lt.u32 	%p45, %r16, 1073741824;
	mov.f32 	%f736, %f22;
	@%p45 bra 	LBB0_23;
// %bb.19:
	setp.lt.u32 	%p46, %r16, -2147483647;
	@%p46 bra 	LBB0_21;
// %bb.20:
	add.f32 	%f319, %f22, 0fBF800000;
	setp.lt.f32 	%p49, %f23, 0fC0000000;
	selp.f32 	%f320, %f319, %f22, %p49;
	add.f32 	%f736, %f320, 0fBF800000;
	bra.uni 	LBB0_23;
LBB0_21:
	add.f32 	%f736, %f22, 0f3F800000;
	setp.ltu.f32 	%p47, %f23, 0f40800000;
	@%p47 bra 	LBB0_23;
// %bb.22:                              // %__nv_fmaf_rn.exit.i.i.i2710
	fma.rn.f32 	%f316, %f313, 0fC0400000, %f23;
	setp.ge.f32 	%p48, %f316, 0f00000000;
	selp.f32 	%f317, %f736, %f22, %p48;
	add.f32 	%f318, %f317, 0f3F800000;
	add.f32 	%f736, %f318, 0f3F800000;
LBB0_23:                                // %__internal_fmodf_fastpath_quot.exit.i.i2713
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
LBB0_28:                                // %__internal_fmodf_kernel.exit.i2742
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p55, %f332, 0f7F800000;
	@%p55 bra 	LBB0_30;
// %bb.29:
	mov.b32 	%r519, %f20;
	and.b32  	%r520, %r519, -2147483648;
	mov.b32 	%r521, %f738;
	or.b32  	%r522, %r520, %r521;
	mov.b32 	%f738, %r522;
LBB0_30:                                // %__nv_fmodf.exit2745
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r523, %f333;
	and.b32  	%r524, %r523, -2147483648;
	or.b32  	%r525, %r524, 1056964608;
	mov.b32 	%f334, %r525;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p56, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p56;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p57, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p57;
	cvt.rzi.s32.f32 	%r526, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r527, %r526, 1;
	setp.eq.b32 	%p58, %r527, 1;
	selp.f32 	%f352, %f350, %f351, %p58;
	selp.f32 	%f353, %f351, %f350, %p58;
	and.b32  	%r528, %r526, 2;
	setp.eq.s32 	%p59, %r528, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p59;
	add.s32 	%r529, %r526, 1;
	and.b32  	%r530, %r529, 2;
	setp.eq.s32 	%p60, %r530, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p60;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p61, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p61;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p62, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p62;
LBB0_31:                                // %L245
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r26, %r7, 3;
	setp.eq.s32 	%p63, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p63 bra 	LBB0_47;
// %bb.32:                              // %L288
	mul.lo.s32 	%r537, %r306, %r26;
	cvt.u16.u32 	%rs147, %r537;
	mul.lo.s16 	%rs148, %rs147, 171;
	shr.u16 	%rs149, %rs148, 9;
	mul.lo.s16 	%rs150, %rs149, 3;
	sub.s16 	%rs151, %rs147, %rs150;
	and.b16  	%rs152, %rs151, 255;
	cvt.rn.f32.u16 	%f364, %rs152;
	div.approx.f32 	%f41, %f364, %f731;
	abs.f32 	%f744, %f41;
	setp.lt.f32 	%p64, %f744, 0f40000000;
	@%p64 bra 	LBB0_44;
// %bb.33:
	setp.gtu.f32 	%p65, %f744, 0f4B800000;
	@%p65 bra 	LBB0_40;
	bra.uni 	LBB0_34;
LBB0_40:
	mov.b32 	%r28, %f744;
	and.b32  	%r538, %r28, 8388607;
	or.b32  	%r3567, %r538, 1065353216;
	mov.b32 	%f743, %r3567;
	add.s32 	%r539, %r28, -1073741824;
	and.b32  	%r3568, %r539, -8388608;
	setp.eq.s32 	%p71, %r3568, 0;
	@%p71 bra 	LBB0_43;
// %bb.41:                              // %.lr.ph4922.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
LBB0_42:                                // %.lr.ph4922
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r540, %r3568, 192937984;
	add.s32 	%r541, %r540, %r3567;
	mov.b32 	%f376, %r541;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3568, %r3568, %r540;
	mov.b32 	%r3567, %f743;
	setp.ne.s32 	%p72, %r3568, 0;
	setp.ne.s32 	%p73, %r3567, 0;
	and.pred  	%p74, %p72, %p73;
	@%p74 bra 	LBB0_42;
LBB0_43:                                // %__internal_fmodf_slowpath_mod.exit.i.i2792
	setp.gt.u32 	%p75, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p75;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	LBB0_44;
LBB0_34:                                // %__nv_fast_fdividef.exit.i.i.i2758
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f43, %f367;
	fma.rn.f32 	%f44, %f43, 0fC0000000, %f744;
	mov.b32 	%r27, %f44;
	setp.lt.u32 	%p66, %r27, 1073741824;
	mov.f32 	%f742, %f43;
	@%p66 bra 	LBB0_39;
// %bb.35:
	setp.lt.u32 	%p67, %r27, -2147483647;
	@%p67 bra 	LBB0_37;
// %bb.36:
	add.f32 	%f372, %f43, 0fBF800000;
	setp.lt.f32 	%p70, %f44, 0fC0000000;
	selp.f32 	%f373, %f372, %f43, %p70;
	add.f32 	%f742, %f373, 0fBF800000;
	bra.uni 	LBB0_39;
LBB0_37:
	add.f32 	%f742, %f43, 0f3F800000;
	setp.ltu.f32 	%p68, %f44, 0f40800000;
	@%p68 bra 	LBB0_39;
// %bb.38:                              // %__nv_fmaf_rn.exit.i.i.i2763
	fma.rn.f32 	%f369, %f366, 0fC0400000, %f44;
	setp.ge.f32 	%p69, %f369, 0f00000000;
	selp.f32 	%f370, %f742, %f43, %p69;
	add.f32 	%f371, %f370, 0f3F800000;
	add.f32 	%f742, %f371, 0f3F800000;
LBB0_39:                                // %__internal_fmodf_fastpath_quot.exit.i.i2766
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
LBB0_44:                                // %__internal_fmodf_kernel.exit.i2795
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p76, %f385, 0f7F800000;
	@%p76 bra 	LBB0_46;
// %bb.45:
	mov.b32 	%r542, %f41;
	and.b32  	%r543, %r542, -2147483648;
	mov.b32 	%r544, %f744;
	or.b32  	%r545, %r543, %r544;
	mov.b32 	%f744, %r545;
LBB0_46:                                // %__nv_fmodf.exit2798
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r546, %f386;
	and.b32  	%r547, %r546, -2147483648;
	or.b32  	%r548, %r547, 1056964608;
	mov.b32 	%f387, %r548;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p77, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p77;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p78, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p78;
	cvt.rzi.s32.f32 	%r549, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r550, %r549, 1;
	setp.eq.b32 	%p79, %r550, 1;
	selp.f32 	%f405, %f403, %f404, %p79;
	selp.f32 	%f406, %f404, %f403, %p79;
	and.b32  	%r551, %r549, 2;
	setp.eq.s32 	%p80, %r551, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p80;
	add.s32 	%r552, %r549, 1;
	and.b32  	%r553, %r552, 2;
	setp.eq.s32 	%p81, %r553, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p81;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p82, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p82;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p83, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p83;
LBB0_47:                                // %L304
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p86, %p42, %p63;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p86 bra 	LBB0_63;
// %bb.48:                              // %L312
	mul.lo.s32 	%r554, %r307, %r26;
	mul.hi.u32 	%r555, %r554, -1431655765;
	shr.u32 	%r556, %r555, 1;
	mul.lo.s32 	%r557, %r556, 3;
	sub.s32 	%r558, %r554, %r557;
	cvt.rn.f32.s32 	%f417, %r558;
	div.approx.f32 	%f62, %f417, %f731;
	abs.f32 	%f750, %f62;
	setp.lt.f32 	%p87, %f750, 0f40000000;
	@%p87 bra 	LBB0_60;
// %bb.49:
	setp.gtu.f32 	%p88, %f750, 0f4B800000;
	@%p88 bra 	LBB0_56;
	bra.uni 	LBB0_50;
LBB0_56:
	mov.b32 	%r36, %f750;
	and.b32  	%r559, %r36, 8388607;
	or.b32  	%r3569, %r559, 1065353216;
	mov.b32 	%f749, %r3569;
	add.s32 	%r560, %r36, -1073741824;
	and.b32  	%r3570, %r560, -8388608;
	setp.eq.s32 	%p94, %r3570, 0;
	@%p94 bra 	LBB0_59;
// %bb.57:                              // %.lr.ph4917.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
LBB0_58:                                // %.lr.ph4917
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r561, %r3570, 192937984;
	add.s32 	%r562, %r561, %r3569;
	mov.b32 	%f429, %r562;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3570, %r3570, %r561;
	mov.b32 	%r3569, %f749;
	setp.ne.s32 	%p95, %r3570, 0;
	setp.ne.s32 	%p96, %r3569, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	LBB0_58;
LBB0_59:                                // %__internal_fmodf_slowpath_mod.exit.i.i2845
	setp.gt.u32 	%p98, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	LBB0_60;
LBB0_50:                                // %__nv_fast_fdividef.exit.i.i.i2811
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f64, %f420;
	fma.rn.f32 	%f65, %f64, 0fC0000000, %f750;
	mov.b32 	%r35, %f65;
	setp.lt.u32 	%p89, %r35, 1073741824;
	mov.f32 	%f748, %f64;
	@%p89 bra 	LBB0_55;
// %bb.51:
	setp.lt.u32 	%p90, %r35, -2147483647;
	@%p90 bra 	LBB0_53;
// %bb.52:
	add.f32 	%f425, %f64, 0fBF800000;
	setp.lt.f32 	%p93, %f65, 0fC0000000;
	selp.f32 	%f426, %f425, %f64, %p93;
	add.f32 	%f748, %f426, 0fBF800000;
	bra.uni 	LBB0_55;
LBB0_53:
	add.f32 	%f748, %f64, 0f3F800000;
	setp.ltu.f32 	%p91, %f65, 0f40800000;
	@%p91 bra 	LBB0_55;
// %bb.54:                              // %__nv_fmaf_rn.exit.i.i.i2816
	fma.rn.f32 	%f422, %f419, 0fC0400000, %f65;
	setp.ge.f32 	%p92, %f422, 0f00000000;
	selp.f32 	%f423, %f748, %f64, %p92;
	add.f32 	%f424, %f423, 0f3F800000;
	add.f32 	%f748, %f424, 0f3F800000;
LBB0_55:                                // %__internal_fmodf_fastpath_quot.exit.i.i2819
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
LBB0_60:                                // %__internal_fmodf_kernel.exit.i2848
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p99, %f438, 0f7F800000;
	@%p99 bra 	LBB0_62;
// %bb.61:
	mov.b32 	%r563, %f62;
	and.b32  	%r564, %r563, -2147483648;
	mov.b32 	%r565, %f750;
	or.b32  	%r566, %r564, %r565;
	mov.b32 	%f750, %r566;
LBB0_62:                                // %__nv_fmodf.exit2851
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r567, %f439;
	and.b32  	%r568, %r567, -2147483648;
	or.b32  	%r569, %r568, 1056964608;
	mov.b32 	%f440, %r569;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p100, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p100;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p101, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p101;
	cvt.rzi.s32.f32 	%r570, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r571, %r570, 1;
	setp.eq.b32 	%p102, %r571, 1;
	selp.f32 	%f458, %f456, %f457, %p102;
	selp.f32 	%f459, %f457, %f456, %p102;
	and.b32  	%r572, %r570, 2;
	setp.eq.s32 	%p103, %r572, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p103;
	add.s32 	%r573, %r570, 1;
	and.b32  	%r574, %r573, 2;
	setp.eq.s32 	%p104, %r574, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p104;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p105, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p105;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p106, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p106;
LBB0_63:                                // %L328
	cvt.rzi.s32.f32 	%r488, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r43, %r5, 2;
	setp.eq.s32 	%p107, %r43, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p107 bra 	LBB0_65;
// %bb.64:                              // %L337
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
LBB0_65:                                // %L339
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r489, %r488, 1;
	cvt.rzi.s32.f32 	%r505, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p2 bra 	LBB0_579;
// %bb.66:
	@%p471 bra 	LBB0_575;
	bra.uni 	LBB0_67;
LBB0_575:
	mov.b32 	%r309, %f788;
	and.b32  	%r581, %r309, 8388607;
	or.b32  	%r3704, %r581, 1065353216;
	mov.b32 	%f787, %r3704;
	add.s32 	%r582, %r309, -1073741824;
	and.b32  	%r3705, %r582, -8388608;
	setp.eq.s32 	%p115, %r3705, 0;
	@%p115 bra 	LBB0_578;
// %bb.576:                             // %.lr.ph4912.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
LBB0_577:                               // %.lr.ph4912
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r583, %r3705, 192937984;
	add.s32 	%r584, %r583, %r3704;
	mov.b32 	%f479, %r584;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3705, %r3705, %r583;
	mov.b32 	%r3704, %f787;
	setp.ne.s32 	%p116, %r3705, 0;
	setp.ne.s32 	%p117, %r3704, 0;
	and.pred  	%p118, %p116, %p117;
	@%p118 bra 	LBB0_577;
LBB0_578:                               // %__internal_fmodf_slowpath_mod.exit.i.i3163
	setp.gt.u32 	%p119, %r309, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p119;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	LBB0_579;
LBB0_67:                                // %__nv_fast_fdividef.exit.i.i.i3129
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f188, %f470;
	fma.rn.f32 	%f189, %f188, 0fC0000000, %f788;
	mov.b32 	%r308, %f189;
	setp.lt.u32 	%p110, %r308, 1073741824;
	mov.f32 	%f786, %f188;
	@%p110 bra 	LBB0_574;
// %bb.68:
	setp.lt.u32 	%p111, %r308, -2147483647;
	@%p111 bra 	LBB0_572;
// %bb.69:
	add.f32 	%f475, %f188, 0fBF800000;
	setp.lt.f32 	%p114, %f189, 0fC0000000;
	selp.f32 	%f476, %f475, %f188, %p114;
	add.f32 	%f786, %f476, 0fBF800000;
	bra.uni 	LBB0_574;
LBB0_572:
	add.f32 	%f786, %f188, 0f3F800000;
	setp.ltu.f32 	%p112, %f189, 0f40800000;
	@%p112 bra 	LBB0_574;
// %bb.573:                             // %__nv_fmaf_rn.exit.i.i.i3134
	fma.rn.f32 	%f472, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p113, %f472, 0f00000000;
	selp.f32 	%f473, %f786, %f188, %p113;
	add.f32 	%f474, %f473, 0f3F800000;
	add.f32 	%f786, %f474, 0f3F800000;
LBB0_574:                               // %__internal_fmodf_fastpath_quot.exit.i.i3137
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
LBB0_579:                               // %__internal_fmodf_kernel.exit.i3166
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p17, %r489, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r506, %r505, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p120, %f488, 0f7F800000;
	@%p120 bra 	LBB0_581;
// %bb.580:
	mov.b32 	%r585, %f788;
	or.b32  	%r586, %r302, %r585;
	mov.b32 	%f788, %r586;
LBB0_581:                               // %__nv_fmodf.exit3169
	selp.f32 	%f246, %f244, %f245, %p17;
	and.b32  	%r490, %r488, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p37, %r506, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r593, %f489;
	and.b32  	%r594, %r593, -2147483648;
	or.b32  	%r595, %r594, 1056964608;
	mov.b32 	%f490, %r595;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p121, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p121;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p122, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p122;
	cvt.rzi.s32.f32 	%r596, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r597, %r596, 1;
	setp.eq.b32 	%p123, %r597, 1;
	selp.f32 	%f508, %f506, %f507, %p123;
	and.b32  	%r598, %r596, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p128, %f760, 0f40000000;
	@%p128 bra 	LBB0_81;
// %bb.70:
	setp.gtu.f32 	%p129, %f760, 0f4B800000;
	@%p129 bra 	LBB0_77;
	bra.uni 	LBB0_71;
LBB0_77:
	mov.b32 	%r47, %f760;
	and.b32  	%r601, %r47, 8388607;
	or.b32  	%r3571, %r601, 1065353216;
	mov.b32 	%f759, %r3571;
	add.s32 	%r602, %r47, -1073741824;
	and.b32  	%r3572, %r602, -8388608;
	setp.eq.s32 	%p135, %r3572, 0;
	@%p135 bra 	LBB0_80;
// %bb.78:                              // %.lr.ph4907.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
LBB0_79:                                // %.lr.ph4907
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r603, %r3572, 192937984;
	add.s32 	%r604, %r603, %r3571;
	mov.b32 	%f532, %r604;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3572, %r3572, %r603;
	mov.b32 	%r3571, %f759;
	setp.ne.s32 	%p136, %r3572, 0;
	setp.ne.s32 	%p137, %r3571, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	LBB0_79;
LBB0_80:                                // %__internal_fmodf_slowpath_mod.exit.i.i2898
	setp.gt.u32 	%p139, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	LBB0_81;
LBB0_71:                                // %__nv_fast_fdividef.exit.i.i.i2864
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f89, %f523;
	fma.rn.f32 	%f90, %f89, 0fC0000000, %f760;
	mov.b32 	%r46, %f90;
	setp.lt.u32 	%p130, %r46, 1073741824;
	mov.f32 	%f758, %f89;
	@%p130 bra 	LBB0_76;
// %bb.72:
	setp.lt.u32 	%p131, %r46, -2147483647;
	@%p131 bra 	LBB0_74;
// %bb.73:
	add.f32 	%f528, %f89, 0fBF800000;
	setp.lt.f32 	%p134, %f90, 0fC0000000;
	selp.f32 	%f529, %f528, %f89, %p134;
	add.f32 	%f758, %f529, 0fBF800000;
	bra.uni 	LBB0_76;
LBB0_74:
	add.f32 	%f758, %f89, 0f3F800000;
	setp.ltu.f32 	%p132, %f90, 0f40800000;
	@%p132 bra 	LBB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i2869
	fma.rn.f32 	%f525, %f522, 0fC0400000, %f90;
	setp.ge.f32 	%p133, %f525, 0f00000000;
	selp.f32 	%f526, %f758, %f89, %p133;
	add.f32 	%f527, %f526, 0f3F800000;
	add.f32 	%f758, %f527, 0f3F800000;
LBB0_76:                                // %__internal_fmodf_fastpath_quot.exit.i.i2872
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
LBB0_81:                                // %__internal_fmodf_kernel.exit.i2901
	setp.eq.s32 	%p18, %r490, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r491, %r488, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p37;
	and.b32  	%r507, %r505, 2;
	setp.eq.s32 	%p124, %r598, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r599, %r596, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p140, %f541, 0f7F800000;
	@%p140 bra 	LBB0_83;
// %bb.82:
	mov.b32 	%r605, %f203;
	and.b32  	%r606, %r605, -2147483648;
	mov.b32 	%r607, %f760;
	or.b32  	%r608, %r606, %r607;
	mov.b32 	%f760, %r608;
LBB0_83:                                // %__nv_fmodf.exit2904
	selp.f32 	%f247, %f245, %f244, %p17;
	selp.f32 	%f249, %f246, %f248, %p18;
	and.b32  	%r492, %r491, 2;
	setp.eq.f32 	%p20, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p38, %r507, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r508, %r505, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p123;
	selp.f32 	%f511, %f508, %f510, %p124;
	and.b32  	%r600, %r599, 2;
	setp.eq.f32 	%p126, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r609, %f542;
	and.b32  	%r610, %r609, -2147483648;
	or.b32  	%r611, %r610, 1056964608;
	mov.b32 	%f543, %r611;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p141, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p141;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p142, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p142;
	cvt.rzi.s32.f32 	%r612, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r613, %r612, 1;
	setp.eq.b32 	%p143, %r613, 1;
	selp.f32 	%f561, %f559, %f560, %p143;
	and.b32  	%r614, %r612, 2;
	setp.eq.s32 	%p144, %r614, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r615, %r612, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r7;
	div.approx.f32 	%f106, %f572, %f521;
	abs.f32 	%f764, %f106;
	setp.lt.f32 	%p148, %f764, 0f40000000;
	@%p148 bra 	LBB0_95;
// %bb.84:
	setp.gtu.f32 	%p149, %f764, 0f4B800000;
	@%p149 bra 	LBB0_91;
	bra.uni 	LBB0_85;
LBB0_91:
	mov.b32 	%r55, %f764;
	and.b32  	%r617, %r55, 8388607;
	or.b32  	%r3573, %r617, 1065353216;
	mov.b32 	%f763, %r3573;
	add.s32 	%r618, %r55, -1073741824;
	and.b32  	%r3574, %r618, -8388608;
	setp.eq.s32 	%p155, %r3574, 0;
	@%p155 bra 	LBB0_94;
// %bb.92:                              // %.lr.ph4902.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
LBB0_93:                                // %.lr.ph4902
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r619, %r3574, 192937984;
	add.s32 	%r620, %r619, %r3573;
	mov.b32 	%f584, %r620;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3574, %r3574, %r619;
	mov.b32 	%r3573, %f763;
	setp.ne.s32 	%p156, %r3574, 0;
	setp.ne.s32 	%p157, %r3573, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	LBB0_93;
LBB0_94:                                // %__internal_fmodf_slowpath_mod.exit.i.i2951
	setp.gt.u32 	%p159, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	LBB0_95;
LBB0_85:                                // %__nv_fast_fdividef.exit.i.i.i2917
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f108, %f575;
	fma.rn.f32 	%f109, %f108, 0fC0000000, %f764;
	mov.b32 	%r54, %f109;
	setp.lt.u32 	%p150, %r54, 1073741824;
	mov.f32 	%f762, %f108;
	@%p150 bra 	LBB0_90;
// %bb.86:
	setp.lt.u32 	%p151, %r54, -2147483647;
	@%p151 bra 	LBB0_88;
// %bb.87:
	add.f32 	%f580, %f108, 0fBF800000;
	setp.lt.f32 	%p154, %f109, 0fC0000000;
	selp.f32 	%f581, %f580, %f108, %p154;
	add.f32 	%f762, %f581, 0fBF800000;
	bra.uni 	LBB0_90;
LBB0_88:
	add.f32 	%f762, %f108, 0f3F800000;
	setp.ltu.f32 	%p152, %f109, 0f40800000;
	@%p152 bra 	LBB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i2922
	fma.rn.f32 	%f577, %f574, 0fC0400000, %f109;
	setp.ge.f32 	%p153, %f577, 0f00000000;
	selp.f32 	%f578, %f762, %f108, %p153;
	add.f32 	%f579, %f578, 0f3F800000;
	add.f32 	%f762, %f579, 0f3F800000;
LBB0_90:                                // %__internal_fmodf_fastpath_quot.exit.i.i2925
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
LBB0_95:                                // %__internal_fmodf_kernel.exit.i2954
	setp.eq.s32 	%p19, %r492, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p20;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p37;
	selp.f32 	%f304, %f301, %f303, %p38;
	and.b32  	%r509, %r508, 2;
	setp.eq.f32 	%p40, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p125, %r600, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p126;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p143;
	selp.f32 	%f564, %f561, %f563, %p144;
	and.b32  	%r616, %r615, 2;
	setp.eq.f32 	%p146, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p160, %f593, 0f7F800000;
	@%p160 bra 	LBB0_97;
// %bb.96:
	mov.b32 	%r621, %f106;
	and.b32  	%r622, %r621, -2147483648;
	mov.b32 	%r623, %f764;
	or.b32  	%r624, %r622, %r623;
	mov.b32 	%f764, %r624;
LBB0_97:                                // %__nv_fmodf.exit2957
	selp.f32 	%f252, %f247, %f251, %p19;
	setp.gt.f32 	%p21, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p39, %r509, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f18, %f308, %f304, %p40;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p125;
	setp.gt.f32 	%p127, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p145, %r616, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f104, %f569, %f564, %p146;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r631, %f595;
	and.b32  	%r632, %r631, -2147483648;
	or.b32  	%r633, %r632, 1056964608;
	mov.b32 	%f596, %r633;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p161, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p161;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p162, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p162;
	cvt.rzi.s32.f32 	%r634, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r635, %r634, 1;
	setp.eq.b32 	%p163, %r635, 1;
	selp.f32 	%f614, %f612, %f613, %p163;
	selp.f32 	%f615, %f613, %f612, %p163;
	and.b32  	%r636, %r634, 2;
	setp.eq.s32 	%p164, %r636, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p164;
	add.s32 	%r637, %r634, 1;
	and.b32  	%r638, %r637, 2;
	setp.eq.s32 	%p165, %r638, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p166, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p166;
	abs.f32 	%f623, %f764;
	and.b32  	%r65, %r5, 1;
	shr.u32 	%r66, %r5, 4;
	setp.ne.s32 	%p168, %r65, %r66;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p168 bra 	LBB0_113;
// %bb.98:                              // %L505
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f123, %f627, %f626;
	abs.f32 	%f768, %f123;
	setp.lt.f32 	%p169, %f768, 0f40000000;
	@%p169 bra 	LBB0_110;
// %bb.99:
	setp.gtu.f32 	%p170, %f768, 0f4B800000;
	@%p170 bra 	LBB0_106;
	bra.uni 	LBB0_100;
LBB0_106:
	mov.b32 	%r68, %f768;
	and.b32  	%r639, %r68, 8388607;
	or.b32  	%r3575, %r639, 1065353216;
	mov.b32 	%f767, %r3575;
	add.s32 	%r640, %r68, -1073741824;
	and.b32  	%r3576, %r640, -8388608;
	setp.eq.s32 	%p176, %r3576, 0;
	@%p176 bra 	LBB0_109;
// %bb.107:                             // %.lr.ph4897.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
LBB0_108:                               // %.lr.ph4897
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r641, %r3576, 192937984;
	add.s32 	%r642, %r641, %r3575;
	mov.b32 	%f638, %r642;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3576, %r3576, %r641;
	mov.b32 	%r3575, %f767;
	setp.ne.s32 	%p177, %r3576, 0;
	setp.ne.s32 	%p178, %r3575, 0;
	and.pred  	%p179, %p177, %p178;
	@%p179 bra 	LBB0_108;
LBB0_109:                               // %__internal_fmodf_slowpath_mod.exit.i.i3004
	setp.gt.u32 	%p180, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p180;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	LBB0_110;
LBB0_100:                               // %__nv_fast_fdividef.exit.i.i.i2970
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f125, %f629;
	fma.rn.f32 	%f126, %f125, 0fC0000000, %f768;
	mov.b32 	%r67, %f126;
	setp.lt.u32 	%p171, %r67, 1073741824;
	mov.f32 	%f766, %f125;
	@%p171 bra 	LBB0_105;
// %bb.101:
	setp.lt.u32 	%p172, %r67, -2147483647;
	@%p172 bra 	LBB0_103;
// %bb.102:
	add.f32 	%f634, %f125, 0fBF800000;
	setp.lt.f32 	%p175, %f126, 0fC0000000;
	selp.f32 	%f635, %f634, %f125, %p175;
	add.f32 	%f766, %f635, 0fBF800000;
	bra.uni 	LBB0_105;
LBB0_103:
	add.f32 	%f766, %f125, 0f3F800000;
	setp.ltu.f32 	%p173, %f126, 0f40800000;
	@%p173 bra 	LBB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i2975
	fma.rn.f32 	%f631, %f628, 0fC0400000, %f126;
	setp.ge.f32 	%p174, %f631, 0f00000000;
	selp.f32 	%f632, %f766, %f125, %p174;
	add.f32 	%f633, %f632, 0f3F800000;
	add.f32 	%f766, %f633, 0f3F800000;
LBB0_105:                               // %__internal_fmodf_fastpath_quot.exit.i.i2978
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
LBB0_110:                               // %__internal_fmodf_kernel.exit.i3007
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p181, %f647, 0f7F800000;
	@%p181 bra 	LBB0_112;
// %bb.111:
	mov.b32 	%r643, %f123;
	and.b32  	%r644, %r643, -2147483648;
	mov.b32 	%r645, %f768;
	or.b32  	%r646, %r644, %r645;
	mov.b32 	%f768, %r646;
LBB0_112:                               // %__nv_fmodf.exit3010
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r647, %f648;
	and.b32  	%r648, %r647, -2147483648;
	or.b32  	%r649, %r648, 1056964608;
	mov.b32 	%f649, %r649;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p182, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p182;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p183, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p183;
	cvt.rzi.s32.f32 	%r650, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r651, %r650, 1;
	setp.eq.b32 	%p184, %r651, 1;
	selp.f32 	%f667, %f665, %f666, %p184;
	selp.f32 	%f668, %f666, %f665, %p184;
	and.b32  	%r652, %r650, 2;
	setp.eq.s32 	%p185, %r652, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p185;
	add.s32 	%r653, %r650, 1;
	and.b32  	%r654, %r653, 2;
	setp.eq.s32 	%p186, %r654, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p186;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p187, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p187;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p188, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p188;
LBB0_113:                               // %L526
	selp.f32 	%f258, %f257, %f252, %p21;
	selp.f32 	%f306, %f302, %f305, %p39;
	setp.gt.f32 	%p41, %f309, 0f4B800000;
	add.f32 	%f310, %f18, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p127;
	selp.f32 	%f567, %f562, %f566, %p145;
	setp.gt.f32 	%p147, %f570, 0f4B800000;
	add.f32 	%f571, %f104, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p165;
	setp.gt.f32 	%p167, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r64, %r7, 1;
	mov.f32 	%f781, %f776;
	@%p168 bra 	LBB0_129;
// %bb.114:                             // %L529
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f144, %f679, %f680;
	abs.f32 	%f774, %f144;
	setp.lt.f32 	%p190, %f774, 0f40000000;
	@%p190 bra 	LBB0_126;
// %bb.115:
	setp.gtu.f32 	%p191, %f774, 0f4B800000;
	@%p191 bra 	LBB0_122;
	bra.uni 	LBB0_116;
LBB0_122:
	mov.b32 	%r76, %f774;
	and.b32  	%r655, %r76, 8388607;
	or.b32  	%r3577, %r655, 1065353216;
	mov.b32 	%f773, %r3577;
	add.s32 	%r656, %r76, -1073741824;
	and.b32  	%r3578, %r656, -8388608;
	setp.eq.s32 	%p197, %r3578, 0;
	@%p197 bra 	LBB0_125;
// %bb.123:                             // %.lr.ph.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
LBB0_124:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r657, %r3578, 192937984;
	add.s32 	%r658, %r657, %r3577;
	mov.b32 	%f691, %r658;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3578, %r3578, %r657;
	mov.b32 	%r3577, %f773;
	setp.ne.s32 	%p198, %r3578, 0;
	setp.ne.s32 	%p199, %r3577, 0;
	and.pred  	%p200, %p198, %p199;
	@%p200 bra 	LBB0_124;
LBB0_125:                               // %__internal_fmodf_slowpath_mod.exit.i.i3057
	setp.gt.u32 	%p201, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p201;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	LBB0_126;
LBB0_116:                               // %__nv_fast_fdividef.exit.i.i.i3023
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f146, %f682;
	fma.rn.f32 	%f147, %f146, 0fC0000000, %f774;
	mov.b32 	%r75, %f147;
	setp.lt.u32 	%p192, %r75, 1073741824;
	mov.f32 	%f772, %f146;
	@%p192 bra 	LBB0_121;
// %bb.117:
	setp.lt.u32 	%p193, %r75, -2147483647;
	@%p193 bra 	LBB0_119;
// %bb.118:
	add.f32 	%f687, %f146, 0fBF800000;
	setp.lt.f32 	%p196, %f147, 0fC0000000;
	selp.f32 	%f688, %f687, %f146, %p196;
	add.f32 	%f772, %f688, 0fBF800000;
	bra.uni 	LBB0_121;
LBB0_119:
	add.f32 	%f772, %f146, 0f3F800000;
	setp.ltu.f32 	%p194, %f147, 0f40800000;
	@%p194 bra 	LBB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i3028
	fma.rn.f32 	%f684, %f681, 0fC0400000, %f147;
	setp.ge.f32 	%p195, %f684, 0f00000000;
	selp.f32 	%f685, %f772, %f146, %p195;
	add.f32 	%f686, %f685, 0f3F800000;
	add.f32 	%f772, %f686, 0f3F800000;
LBB0_121:                               // %__internal_fmodf_fastpath_quot.exit.i.i3031
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
LBB0_126:                               // %__internal_fmodf_kernel.exit.i3060
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p202, %f700, 0f7F800000;
	@%p202 bra 	LBB0_128;
// %bb.127:
	mov.b32 	%r659, %f144;
	and.b32  	%r660, %r659, -2147483648;
	mov.b32 	%r661, %f774;
	or.b32  	%r662, %r660, %r661;
	mov.b32 	%f774, %r662;
LBB0_128:                               // %__nv_fmodf.exit3063
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r663, %f701;
	and.b32  	%r664, %r663, -2147483648;
	or.b32  	%r665, %r664, 1056964608;
	mov.b32 	%f702, %r665;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p203, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p203;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p204, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p204;
	cvt.rzi.s32.f32 	%r666, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r667, %r666, 1;
	setp.eq.b32 	%p205, %r667, 1;
	selp.f32 	%f720, %f718, %f719, %p205;
	selp.f32 	%f721, %f719, %f718, %p205;
	and.b32  	%r668, %r666, 2;
	setp.eq.s32 	%p206, %r668, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p206;
	add.s32 	%r669, %r666, 1;
	and.b32  	%r670, %r669, 2;
	setp.eq.s32 	%p207, %r670, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p207;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p208, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p208;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p209, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p209;
LBB0_129:                               // %L545
	mov.b32 	%r481, %f258;
	mov.b32 	%r484, %f255;
	selp.f32 	%f19, %f310, %f306, %p41;
	mov.b32 	%r589, %f520;
	mov.b32 	%r592, %f517;
	selp.f32 	%f105, %f571, %f567, %p147;
	selp.f32 	%f625, %f624, %f619, %p167;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p107 bra 	LBB0_131;
// %bb.130:                             // %L554
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
LBB0_131:                               // %L556
	xor.b32  	%r480, %r484, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r532, %f19;
	mov.b32 	%r533, %f740;
	mov.b32 	%r535, %f18;
	mov.b32 	%r536, %f741;
	mov.b32 	%r576, %f754;
	mov.b32 	%r577, %f756;
	mov.b32 	%r579, %f755;
	mov.b32 	%r580, %f757;
	xor.b32  	%r588, %r592, -2147483648;
	mov.b32 	%r627, %f625;
	mov.b32 	%r626, %f105;
	mov.b32 	%r630, %f622;
	mov.b32 	%r629, %f104;
	mov.b32 	%r672, %f778;
	mov.b32 	%r673, %f780;
	mov.b32 	%r675, %f779;
	mov.b32 	%r676, %f781;
	setp.gt.u32 	%p211, %r5, 15;
	mov.u32 	%r86, 999999999;
	@%p211 bra 	LBB0_133;
// %bb.132:                             // %L591
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	mad.lo.s32 	%r678, %r5, 6, %r1;
	cvt.u16.u32 	%rs153, %r678;
	and.b16  	%rs154, %rs153, 255;
	mul.lo.s16 	%rs155, %rs154, 171;
	shr.u16 	%rs156, %rs155, 14;
	mul.lo.s16 	%rs157, %rs156, 96;
	sub.s16 	%rs158, %rs153, %rs157;
	cvt.u32.u16 	%r679, %rs158;
	and.b32  	%r680, %r679, 255;
	mul.wide.u32 	%rd24, %r680, 4;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.u32 	%r681, [%rd25];
	cvt.s32.s16 	%r682, %r681;
	shr.s32 	%r683, %r681, 16;
	mul.lo.s32 	%r684, %r683, 290;
	mad.lo.s32 	%r86, %r682, 33, %r684;
LBB0_133:                               // %L677
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r479, %r481, %r480;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r482, %r484, %r481;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r531, %r533, %r532;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r534, %r536, %r535;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r575, %r577, %r576;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r578, %r580, %r579;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r587, %r589, %r588;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r590, %r592, %r589;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r625, %r627, %r626;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r628, %r630, %r629;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r671, %r673, %r672;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r674, %r676, %r675;
	// end inline asm
	mul.lo.s32 	%r686, %r6, 24;
	shl.b32 	%r687, %r1, 1;
	and.b32  	%r87, %r687, 2;
	shr.u32 	%r688, %r5, 3;
	and.b32  	%r689, %r688, 2;
	or.b32  	%r88, %r689, %r64;
	mul.hi.u32 	%r690, %r88, -1431655765;
	shr.u32 	%r691, %r690, 1;
	mul.lo.s32 	%r692, %r691, 3;
	sub.s32 	%r693, %r88, %r692;
	shl.b32 	%r694, %r693, 3;
	bfe.u32 	%r695, %r5, 3, 1;
	or.b32  	%r696, %r87, %r695;
	add.s32 	%r697, %r686, %r4;
	add.s32 	%r698, %r697, %r694;
	or.b32  	%r699, %r698, %r696;
	mul.wide.u32 	%rd26, %r699, 4;
	add.s64 	%rd27, %rd2, %rd26;
	ld.global.u32 	%r89, [%rd27];
	cvt.u64.u32 	%rd28, %r695;
	cvt.u64.u32 	%rd29, %r694;
	cvt.u64.u32 	%rd30, %r87;
	cvt.u64.u32 	%rd31, %r686;
	cvt.u64.u32 	%rd32, %r4;
	add.s64 	%rd33, %rd32, %rd31;
	add.s64 	%rd34, %rd33, %rd30;
	add.s64 	%rd35, %rd34, %rd29;
	add.s64 	%rd36, %rd35, %rd28;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r90, [%rd38+16];
	cvt.u64.u32 	%rd39, %r696;
	add.s64 	%rd40, %rd33, %rd29;
	add.s64 	%rd41, %rd40, %rd39;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.u32 	%r91, [%rd43+384];
	ld.global.u32 	%r92, [%rd38+400];
	shl.b32 	%r700, %r1, 2;
	or.b32  	%r93, %r688, %r700;
	shl.b32 	%r701, %r5, 2;
	and.b32  	%r94, %r701, 12;
	shl.b32 	%r95, %r3, 5;
	and.b32  	%r96, %r701, 16;
	add.s32 	%r702, %r700, 24;
	or.b32  	%r97, %r688, %r702;
	and.b32  	%r98, %r5, 4;
	shl.b32 	%r703, %r5, 4;
	and.b32  	%r704, %r305, 8;
	or.b32  	%r705, %r704, %r703;
	bfe.u32 	%r706, %r705, 3, 3;
	mul.lo.s32 	%r707, %r706, 260;
	cvt.u16.u32 	%rs160, %r5;
	and.b16  	%rs161, %rs160, 255;
	mul.lo.s16 	%rs162, %rs161, 171;
	shr.u16 	%rs163, %rs162, 12;
	mul.lo.s16 	%rs164, %rs163, 24;
	sub.s16 	%rs1, %rs160, %rs164;
	add.s32 	%r708, %r1, 6;
	shr.u32 	%r709, %r708, 3;
	add.s32 	%r710, %r2, 192;
	and.b32  	%r711, %r710, 224;
	mad.lo.s32 	%r99, %r709, 260, %r711;
	add.s32 	%r712, %r1, 12;
	shr.u32 	%r713, %r712, 3;
	add.s32 	%r714, %r2, 128;
	and.b32  	%r715, %r714, 224;
	mad.lo.s32 	%r100, %r713, 260, %r715;
	add.s32 	%r716, %r1, 18;
	shr.u32 	%r717, %r716, 3;
	add.s32 	%r718, %r2, 64;
	and.b32  	%r719, %r718, 224;
	mad.lo.s32 	%r101, %r717, 260, %r719;
	or.b32  	%r102, %r2, 780;
	add.s32 	%r720, %r1, 30;
	shr.u32 	%r721, %r720, 3;
	mad.lo.s32 	%r103, %r721, 260, %r711;
	add.s32 	%r722, %r1, 36;
	shr.u32 	%r723, %r722, 3;
	mad.lo.s32 	%r104, %r723, 260, %r715;
	add.s32 	%r724, %r1, 42;
	shr.u32 	%r725, %r724, 3;
	mad.lo.s32 	%r105, %r725, 260, %r719;
	or.b32  	%r106, %r2, 1560;
	add.s32 	%r726, %r1, 54;
	shr.u32 	%r727, %r726, 3;
	mad.lo.s32 	%r107, %r727, 260, %r711;
	add.s32 	%r728, %r1, 60;
	bfe.u32 	%r729, %r728, 3, 3;
	mad.lo.s32 	%r108, %r729, 260, %r715;
	mul.lo.s32 	%r730, %r6, 870;
	shr.u32 	%r731, %r1, 1;
	cvt.u16.u32 	%rs165, %r731;
	and.b16  	%rs166, %rs165, 255;
	mul.lo.s16 	%rs167, %rs166, 171;
	shr.u16 	%rs168, %rs167, 9;
	mul.lo.s16 	%rs169, %rs168, 3;
	sub.s16 	%rs2, %rs165, %rs169;
	cvt.u32.u16 	%r732, %rs2;
	and.b32  	%r109, %r732, 255;
	mul.lo.s32 	%r110, %r696, 33;
	mad.lo.s32 	%r111, %r693, 290, %r730;
	add.s32 	%r112, %r110, 132;
	setp.eq.s32 	%p212, %r7, 7;
	selp.b16 	%rs3, 2, 1, %p212;
	bfe.u32 	%r733, %r5, 1, 1;
	mul.lo.s32 	%r113, %r733, 392;
	mul.lo.s32 	%r114, %r65, 784;
	mul.lo.s32 	%r115, %r64, 196;
	mul.lo.s32 	%r116, %r695, 98;
	add.s32 	%r117, %r113, 1576;
	or.b32  	%r734, %r87, %r66;
	or.b32  	%r118, %r734, 4;
	add.s32 	%r119, %r113, 8;
	add.s32 	%r120, %r113, 1584;
	and.b32  	%r735, %r1, 1;
	mul.lo.s32 	%r121, %r735, 392;
	mul.lo.s32 	%r122, %r66, 784;
	and.b32  	%r123, %r305, 6;
	mul.lo.s32 	%r124, %r695, 1576;
	bfe.u32 	%r736, %r1, 1, 1;
	mul.lo.s32 	%r125, %r736, 196;
	shr.u32 	%r737, %r1, 2;
	mul.lo.s32 	%r126, %r737, 98;
	and.b32  	%r127, %r5, 7;
	mul.hi.u32 	%r738, %r93, -1431655765;
	shr.u32 	%r739, %r738, 4;
	mul.lo.s32 	%r740, %r739, 24;
	sub.s32 	%r741, %r93, %r740;
	shl.b32 	%r128, %r741, 3;
	mul.lo.s32 	%r129, %r3, 576;
	add.s32 	%r742, %r93, %r707;
	mul.wide.u32 	%rd44, %r742, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd6, %rd45, %rd44;
	cvt.u64.u32 	%rd46, %r93;
	cvt.u64.u32 	%rd47, %r707;
	add.s64 	%rd48, %rd47, %rd46;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd7, %rd45, %rd49;
	add.s32 	%r743, %r111, %r109;
	add.s32 	%r744, %r743, %r110;
	mul.wide.u32 	%rd50, %r744, 4;
	add.s64 	%rd8, %rd45, %rd50;
	add.s32 	%r745, %r743, %r112;
	mul.wide.u32 	%rd51, %r745, 4;
	add.s64 	%rd9, %rd45, %rd51;
	cvt.u16.u32 	%rs4, %r7;
	and.b16  	%rs5, %rs2, 255;
	mov.u32 	%r685, 0;
	mov.u16 	%rs6, 29;
	setp.ne.s32 	%p213, %r88, 3;
	setp.gt.u32 	%p214, %r1, 3;
	setp.eq.s32 	%p215, %r98, 0;
	setp.lt.u32 	%p216, %r5, 4;
	mov.u32 	%r130, %r685;
	mov.u32 	%r151, %r685;
	mov.u32 	%r152, %r685;
	mov.u32 	%r153, %r685;
	bra.uni 	LBB0_134;
LBB0_555:                               // %L34429
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r293, %r130, 48;
	add.s16 	%rs6, %rs6, 48;
	setp.ne.s32 	%p470, %r130, 96;
	mov.u32 	%r130, %r293;
	@%p470 bra 	LBB0_134;
	bra.uni 	LBB0_556;
LBB0_134:                               // %L1442
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_136 Depth 2
                                        //     Child Loop BB0_346 Depth 2
	mul.hi.u32 	%r843, %r130, -1431655765;
	shr.u32 	%r844, %r843, 5;
	mul.lo.s32 	%r134, %r844, 48;
	add.s32 	%r845, %r93, %r134;
	shl.b32 	%r846, %r845, 16;
	or.b32  	%r847, %r96, %r846;
	or.b32  	%r848, %r847, %r95;
	or.b32  	%r849, %r848, %r94;
	mul.wide.s32 	%rd52, %r849, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r850, %r851, %r852, %r853}, [%rd53];
	add.s32 	%r854, %r97, %r134;
	mul.hi.u32 	%r855, %r854, 954437177;
	shr.u32 	%r856, %r855, 5;
	mul.lo.s32 	%r857, %r856, 144;
	sub.s32 	%r858, %r854, %r857;
	shl.b32 	%r859, %r858, 16;
	or.b32  	%r860, %r96, %r859;
	or.b32  	%r861, %r860, %r95;
	or.b32  	%r862, %r861, %r94;
	shl.b32 	%r863, %r862, 2;
	cvt.u64.u32 	%rd54, %r863;
	add.s64 	%rd55, %rd3, %rd54;
	ld.global.v4.u32 	{%r864, %r865, %r866, %r867}, [%rd55];
	selp.b32 	%r868, %r852, %r850, %p215;
	shfl.sync.bfly.b32	%r869, %r868, 4, 31, -1;
	selp.b32 	%r748, %r850, %r869, %p215;
	selp.b32 	%r753, %r869, %r852, %p215;
	selp.b32 	%r870, %r853, %r851, %p215;
	shfl.sync.bfly.b32	%r871, %r870, 4, 31, -1;
	selp.b32 	%r756, %r851, %r871, %p215;
	selp.b32 	%r761, %r871, %r853, %p215;
	selp.b32 	%r872, %r866, %r864, %p215;
	shfl.sync.bfly.b32	%r873, %r872, 4, 31, -1;
	selp.b32 	%r764, %r864, %r873, %p215;
	selp.b32 	%r769, %r873, %r866, %p215;
	selp.b32 	%r874, %r867, %r865, %p215;
	shfl.sync.bfly.b32	%r875, %r874, 4, 31, -1;
	selp.b32 	%r772, %r865, %r875, %p215;
	selp.b32 	%r777, %r875, %r867, %p215;
	shl.b32 	%r749, %r753, 4;
	mov.u32 	%r747, 252645135;
	// begin inline asm
	lop3.b32 %r779, %r747, %r748, %r749, 202;
	// end inline asm
	shr.u32 	%r752, %r748, 4;
	// begin inline asm
	lop3.b32 %r795, %r747, %r752, %r753, 202;
	// end inline asm
	shl.b32 	%r757, %r761, 4;
	// begin inline asm
	lop3.b32 %r787, %r747, %r756, %r757, 202;
	// end inline asm
	shr.u32 	%r760, %r756, 4;
	// begin inline asm
	lop3.b32 %r803, %r747, %r760, %r761, 202;
	// end inline asm
	shl.b32 	%r765, %r769, 4;
	// begin inline asm
	lop3.b32 %r780, %r747, %r764, %r765, 202;
	// end inline asm
	shr.u32 	%r768, %r764, 4;
	// begin inline asm
	lop3.b32 %r796, %r747, %r768, %r769, 202;
	// end inline asm
	shl.b32 	%r773, %r777, 4;
	// begin inline asm
	lop3.b32 %r788, %r747, %r772, %r773, 202;
	// end inline asm
	shr.u32 	%r776, %r772, 4;
	// begin inline asm
	lop3.b32 %r804, %r747, %r776, %r777, 202;
	// end inline asm
	mov.u32 	%r781, 25152;
	// begin inline asm
	prmt.b32 %r811, %r779, %r780, %r781;
	// end inline asm
	mov.u32 	%r785, 29521;
	// begin inline asm
	prmt.b32 %r827, %r779, %r780, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r787, %r788, %r781;
	// end inline asm
	// begin inline asm
	prmt.b32 %r835, %r787, %r788, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r795, %r796, %r781;
	// end inline asm
	// begin inline asm
	prmt.b32 %r828, %r795, %r796, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r820, %r803, %r804, %r781;
	// end inline asm
	// begin inline asm
	prmt.b32 %r836, %r803, %r804, %r785;
	// end inline asm
	mov.u32 	%r837, 21520;
	// begin inline asm
	prmt.b32 %r810, %r811, %r812, %r837;
	// end inline asm
	mov.u32 	%r841, 30258;
	// begin inline asm
	prmt.b32 %r814, %r811, %r812, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r818, %r819, %r820, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r819, %r820, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r826, %r827, %r828, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r830, %r827, %r828, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r834, %r835, %r836, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r838, %r835, %r836, %r841;
	// end inline asm
	st.shared.u32 	[%rd6], %r810;
	st.shared.u32 	[%rd7+512], %r818;
	st.shared.u32 	[%rd7+256], %r814;
	st.shared.u32 	[%rd7+768], %r822;
	st.shared.u32 	[%rd7+128], %r826;
	st.shared.u32 	[%rd7+640], %r834;
	st.shared.u32 	[%rd7+384], %r830;
	st.shared.u32 	[%rd7+896], %r838;
	bar.sync 	0;
	cvt.u16.u32 	%rs7, %r134;
	add.s16 	%rs170, %rs1, %rs7;
	cvt.s16.s8 	%rs171, %rs170;
	mul.lo.s16 	%rs172, %rs171, 43;
	shr.u16 	%rs173, %rs172, 15;
	shr.s16 	%rs174, %rs172, 8;
	shr.u16 	%rs175, %rs174, 2;
	add.s16 	%rs176, %rs175, %rs173;
	mul.lo.s16 	%rs177, %rs176, 24;
	sub.s16 	%rs178, %rs170, %rs177;
	cvt.u32.u16 	%r876, %rs178;
	cvt.s32.s8 	%r877, %r876;
	add.s32 	%r878, %r2, %r877;
	mul.wide.s32 	%rd56, %r878, 4;
	add.s64 	%rd58, %rd45, %rd56;
	ld.shared.u32 	%r879, [%rd58];
	add.s32 	%r880, %r99, %r877;
	mul.wide.s32 	%rd59, %r880, 4;
	add.s64 	%rd60, %rd45, %rd59;
	ld.shared.u32 	%r881, [%rd60];
	add.s32 	%r882, %r100, %r877;
	mul.wide.u32 	%rd61, %r882, 4;
	add.s64 	%rd62, %rd45, %rd61;
	ld.shared.u32 	%r883, [%rd62];
	add.s32 	%r884, %r101, %r877;
	mul.wide.u32 	%rd63, %r884, 4;
	add.s64 	%rd64, %rd45, %rd63;
	ld.shared.u32 	%r885, [%rd64];
	add.s32 	%r886, %r102, %r877;
	mul.wide.s32 	%rd65, %r886, 4;
	add.s64 	%rd66, %rd45, %rd65;
	ld.shared.u32 	%r887, [%rd66];
	add.s32 	%r888, %r103, %r877;
	mul.wide.u32 	%rd67, %r888, 4;
	add.s64 	%rd68, %rd45, %rd67;
	ld.shared.u32 	%r889, [%rd68];
	add.s32 	%r890, %r104, %r877;
	mul.wide.u32 	%rd69, %r890, 4;
	add.s64 	%rd70, %rd45, %rd69;
	ld.shared.u32 	%r891, [%rd70];
	add.s32 	%r892, %r105, %r877;
	mul.wide.u32 	%rd71, %r892, 4;
	add.s64 	%rd72, %rd45, %rd71;
	ld.shared.u32 	%r893, [%rd72];
	add.s32 	%r894, %r106, %r877;
	mul.wide.s32 	%rd73, %r894, 4;
	add.s64 	%rd74, %rd45, %rd73;
	ld.shared.u32 	%r895, [%rd74];
	add.s32 	%r896, %r107, %r877;
	mul.wide.u32 	%rd75, %r896, 4;
	add.s64 	%rd76, %rd45, %rd75;
	ld.shared.u32 	%r897, [%rd76];
	add.s32 	%r898, %r108, %r877;
	mul.wide.s32 	%rd77, %r898, 4;
	add.s64 	%rd78, %rd45, %rd77;
	ld.shared.u32 	%r899, [%rd78];
	bar.sync 	0;
	shfl.sync.idx.b32	%r900, %r86, 0, 31, -1;
	shfl.sync.idx.b32	%r901, %r86, 1, 31, -1;
	shfl.sync.idx.b32	%r902, %r86, 2, 31, -1;
	shfl.sync.idx.b32	%r903, %r86, 3, 31, -1;
	shfl.sync.idx.b32	%r904, %r86, 4, 31, -1;
	shfl.sync.idx.b32	%r905, %r86, 5, 31, -1;
	shfl.sync.idx.b32	%r906, %r86, 6, 31, -1;
	shfl.sync.idx.b32	%r907, %r86, 7, 31, -1;
	shfl.sync.idx.b32	%r908, %r86, 8, 31, -1;
	shfl.sync.idx.b32	%r909, %r86, 9, 31, -1;
	shfl.sync.idx.b32	%r910, %r86, 10, 31, -1;
	shfl.sync.idx.b32	%r911, %r86, 11, 31, -1;
	shfl.sync.idx.b32	%r912, %r86, 12, 31, -1;
	shfl.sync.idx.b32	%r913, %r86, 13, 31, -1;
	shfl.sync.idx.b32	%r914, %r86, 14, 31, -1;
	shfl.sync.idx.b32	%r915, %r86, 15, 31, -1;
	add.s32 	%r916, %r900, %r877;
	mul.wide.s32 	%rd79, %r916, 4;
	add.s64 	%rd80, %rd45, %rd79;
	st.shared.u32 	[%rd80], %r879;
	add.s32 	%r917, %r901, %r877;
	mul.wide.s32 	%rd81, %r917, 4;
	add.s64 	%rd82, %rd45, %rd81;
	st.shared.u32 	[%rd82], %r881;
	add.s32 	%r918, %r902, %r877;
	mul.wide.s32 	%rd83, %r918, 4;
	add.s64 	%rd84, %rd45, %rd83;
	st.shared.u32 	[%rd84], %r883;
	add.s32 	%r919, %r903, %r877;
	mul.wide.s32 	%rd85, %r919, 4;
	add.s64 	%rd86, %rd45, %rd85;
	st.shared.u32 	[%rd86], %r885;
	add.s32 	%r920, %r904, %r877;
	mul.wide.s32 	%rd87, %r920, 4;
	add.s64 	%rd88, %rd45, %rd87;
	st.shared.u32 	[%rd88], %r887;
	add.s32 	%r921, %r905, %r877;
	mul.wide.s32 	%rd89, %r921, 4;
	add.s64 	%rd90, %rd45, %rd89;
	st.shared.u32 	[%rd90], %r889;
	add.s32 	%r922, %r906, %r877;
	mul.wide.s32 	%rd91, %r922, 4;
	add.s64 	%rd92, %rd45, %rd91;
	st.shared.u32 	[%rd92], %r891;
	add.s32 	%r923, %r907, %r877;
	mul.wide.s32 	%rd93, %r923, 4;
	add.s64 	%rd94, %rd45, %rd93;
	st.shared.u32 	[%rd94], %r893;
	add.s32 	%r924, %r908, %r877;
	mul.wide.s32 	%rd95, %r924, 4;
	add.s64 	%rd96, %rd45, %rd95;
	st.shared.u32 	[%rd96], %r895;
	add.s32 	%r925, %r909, %r877;
	mul.wide.s32 	%rd97, %r925, 4;
	add.s64 	%rd98, %rd45, %rd97;
	st.shared.u32 	[%rd98], %r897;
	selp.b32 	%r926, 0, %r899, %p214;
	add.s32 	%r927, %r910, %r877;
	mul.wide.s32 	%rd99, %r927, 4;
	add.s64 	%rd100, %rd45, %rd99;
	st.shared.u32 	[%rd100], %r926;
	add.s32 	%r928, %r911, %r877;
	mul.wide.s32 	%rd101, %r928, 4;
	add.s64 	%rd102, %rd45, %rd101;
	st.shared.u32 	[%rd102], %r685;
	add.s32 	%r929, %r912, %r877;
	mul.wide.s32 	%rd103, %r929, 4;
	add.s64 	%rd104, %rd45, %rd103;
	st.shared.u32 	[%rd104], %r685;
	add.s32 	%r930, %r913, %r877;
	mul.wide.s32 	%rd105, %r930, 4;
	add.s64 	%rd106, %rd45, %rd105;
	st.shared.u32 	[%rd106], %r685;
	add.s32 	%r931, %r914, %r877;
	mul.wide.s32 	%rd107, %r931, 4;
	add.s64 	%rd108, %rd45, %rd107;
	st.shared.u32 	[%rd108], %r685;
	add.s32 	%r932, %r915, %r877;
	mul.wide.s32 	%rd109, %r932, 4;
	add.s64 	%rd110, %rd45, %rd109;
	st.shared.u32 	[%rd110], %r685;
	bar.sync 	0;
	mov.u32 	%r135, %r685;
	mov.u32 	%r136, %r685;
	mov.u32 	%r137, %r685;
	mov.u32 	%r138, %r685;
	mov.u32 	%r139, %r685;
	mov.u32 	%r140, %r685;
	mov.u32 	%r141, %r685;
	mov.u32 	%r142, %r685;
	mov.u32 	%r143, %r685;
	mov.u32 	%r144, %r685;
	mov.u32 	%r145, %r685;
	mov.u32 	%r146, %r685;
	mov.u32 	%r147, %r685;
	mov.u32 	%r148, %r685;
	mov.u32 	%r149, %r685;
	mov.u32 	%r150, %r685;
	@%p213 bra 	LBB0_582;
	bra.uni 	LBB0_135;
LBB0_582:                               // %oksrem2245
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r933, %r134, %r109;
	ld.shared.u32 	%r135, [%rd8];
	ld.shared.u32 	%r136, [%rd9];
	add.s32 	%r934, %r933, 3;
	mul.hi.u32 	%r935, %r934, -1431655765;
	shr.u32 	%r936, %r935, 4;
	mul.lo.s32 	%r937, %r936, 24;
	sub.s32 	%r938, %r934, %r937;
	add.s32 	%r939, %r111, %r938;
	add.s32 	%r940, %r939, %r110;
	mul.wide.u32 	%rd111, %r940, 4;
	add.s64 	%rd113, %rd45, %rd111;
	ld.shared.u32 	%r137, [%rd113];
	add.s32 	%r941, %r939, %r112;
	mul.wide.u32 	%rd114, %r941, 4;
	add.s64 	%rd115, %rd45, %rd114;
	ld.shared.u32 	%r138, [%rd115];
	add.s32 	%r942, %r933, 6;
	mul.hi.u32 	%r943, %r942, -1431655765;
	shr.u32 	%r944, %r943, 4;
	mul.lo.s32 	%r945, %r944, 24;
	sub.s32 	%r946, %r942, %r945;
	add.s32 	%r947, %r111, %r946;
	add.s32 	%r948, %r947, %r110;
	mul.wide.u32 	%rd116, %r948, 4;
	add.s64 	%rd117, %rd45, %rd116;
	ld.shared.u32 	%r139, [%rd117];
	add.s32 	%r949, %r947, %r112;
	mul.wide.u32 	%rd118, %r949, 4;
	add.s64 	%rd119, %rd45, %rd118;
	ld.shared.u32 	%r140, [%rd119];
	add.s32 	%r950, %r933, 9;
	mul.hi.u32 	%r951, %r950, -1431655765;
	shr.u32 	%r952, %r951, 4;
	mul.lo.s32 	%r953, %r952, 24;
	sub.s32 	%r954, %r950, %r953;
	add.s32 	%r955, %r111, %r954;
	add.s32 	%r956, %r955, %r110;
	mul.wide.u32 	%rd120, %r956, 4;
	add.s64 	%rd121, %rd45, %rd120;
	ld.shared.u32 	%r141, [%rd121];
	add.s32 	%r957, %r955, %r112;
	mul.wide.u32 	%rd122, %r957, 4;
	add.s64 	%rd123, %rd45, %rd122;
	ld.shared.u32 	%r142, [%rd123];
	add.s32 	%r958, %r933, 12;
	mul.hi.u32 	%r959, %r958, -1431655765;
	shr.u32 	%r960, %r959, 4;
	mul.lo.s32 	%r961, %r960, 24;
	sub.s32 	%r962, %r958, %r961;
	add.s32 	%r963, %r111, %r962;
	add.s32 	%r964, %r963, %r110;
	mul.wide.u32 	%rd124, %r964, 4;
	add.s64 	%rd125, %rd45, %rd124;
	ld.shared.u32 	%r143, [%rd125];
	add.s32 	%r965, %r963, %r112;
	mul.wide.u32 	%rd126, %r965, 4;
	add.s64 	%rd127, %rd45, %rd126;
	ld.shared.u32 	%r144, [%rd127];
	add.s16 	%rs179, %rs7, %rs2;
	add.s16 	%rs180, %rs179, 15;
	cvt.s16.s8 	%rs181, %rs180;
	mul.lo.s16 	%rs182, %rs181, 43;
	shr.u16 	%rs183, %rs182, 15;
	shr.s16 	%rs184, %rs182, 10;
	add.s16 	%rs185, %rs184, %rs183;
	mul.lo.s16 	%rs186, %rs185, 24;
	sub.s16 	%rs187, %rs180, %rs186;
	cvt.u32.u16 	%r966, %rs187;
	cvt.s32.s8 	%r967, %r966;
	add.s32 	%r968, %r111, %r967;
	add.s32 	%r969, %r968, %r110;
	mul.wide.s32 	%rd128, %r969, 4;
	add.s64 	%rd129, %rd45, %rd128;
	ld.shared.u32 	%r145, [%rd129];
	add.s32 	%r970, %r968, %r112;
	mul.wide.s32 	%rd130, %r970, 4;
	add.s64 	%rd131, %rd45, %rd130;
	ld.shared.u32 	%r146, [%rd131];
	add.s16 	%rs188, %rs179, 18;
	cvt.s16.s8 	%rs189, %rs188;
	mul.lo.s16 	%rs190, %rs189, 43;
	shr.u16 	%rs191, %rs190, 15;
	shr.s16 	%rs192, %rs190, 10;
	add.s16 	%rs193, %rs192, %rs191;
	mul.lo.s16 	%rs194, %rs193, 24;
	sub.s16 	%rs195, %rs188, %rs194;
	cvt.u32.u16 	%r971, %rs195;
	cvt.s32.s8 	%r972, %r971;
	add.s32 	%r973, %r111, %r972;
	add.s32 	%r974, %r973, %r110;
	mul.wide.s32 	%rd132, %r974, 4;
	add.s64 	%rd133, %rd45, %rd132;
	ld.shared.u32 	%r147, [%rd133];
	add.s32 	%r975, %r973, %r112;
	mul.wide.s32 	%rd134, %r975, 4;
	add.s64 	%rd135, %rd45, %rd134;
	ld.shared.u32 	%r148, [%rd135];
	add.s16 	%rs196, %rs179, 21;
	cvt.s16.s8 	%rs197, %rs196;
	mul.lo.s16 	%rs198, %rs197, 43;
	shr.u16 	%rs199, %rs198, 15;
	shr.s16 	%rs200, %rs198, 10;
	add.s16 	%rs201, %rs200, %rs199;
	mul.lo.s16 	%rs202, %rs201, 24;
	sub.s16 	%rs203, %rs196, %rs202;
	cvt.u32.u16 	%r976, %rs203;
	cvt.s32.s8 	%r977, %r976;
	add.s32 	%r978, %r111, %r977;
	add.s32 	%r979, %r978, %r110;
	mul.wide.s32 	%rd136, %r979, 4;
	add.s64 	%rd137, %rd45, %rd136;
	ld.shared.u32 	%r149, [%rd137];
	add.s32 	%r980, %r978, %r112;
	mul.wide.s32 	%rd138, %r980, 4;
	add.s64 	%rd139, %rd45, %rd138;
	ld.shared.u32 	%r150, [%rd139];
LBB0_135:                               // %L9434
                                        //   in Loop: Header=BB0_134 Depth=1
	bar.sync 	0;
	mov.u32 	%r154, %r685;
	bra.uni 	LBB0_136;
LBB0_343:                               // %L21919
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r152, %r152, 1;
	mov.u32 	%r151, 0;
	mov.u32 	%r153, %r151;
LBB0_344:                               // %L21920
                                        //   in Loop: Header=BB0_136 Depth=2
	bar.sync 	0;
	add.s32 	%r154, %r154, 6;
	setp.ne.s32 	%p342, %r154, 24;
	@%p342 bra 	LBB0_136;
	bra.uni 	LBB0_345;
LBB0_136:                               // %L9452
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p217, %r154, 0;
	selp.b32 	%r1375, %r135, 0, %p217;
	setp.eq.s32 	%p218, %r154, 6;
	selp.b32 	%r1376, %r139, %r1375, %p218;
	setp.eq.s32 	%p219, %r154, 12;
	selp.b32 	%r1377, %r143, %r1376, %p219;
	setp.eq.s32 	%p220, %r154, 18;
	selp.b32 	%r1378, %r147, %r1377, %p220;
	selp.b32 	%r1379, %r136, 0, %p217;
	selp.b32 	%r1380, %r140, %r1379, %p218;
	selp.b32 	%r1381, %r144, %r1380, %p219;
	selp.b32 	%r1382, %r148, %r1381, %p220;
	selp.b32 	%r1383, %r137, 0, %p217;
	selp.b32 	%r1384, %r141, %r1383, %p218;
	selp.b32 	%r1385, %r145, %r1384, %p219;
	selp.b32 	%r1386, %r149, %r1385, %p220;
	selp.b32 	%r1387, %r138, 0, %p217;
	selp.b32 	%r1388, %r142, %r1387, %p218;
	selp.b32 	%r1389, %r146, %r1388, %p219;
	selp.b32 	%r1390, %r150, %r1389, %p220;
	mov.u16 	%rs241, 25600;
	// begin inline asm
	mov.b32 %r987, {%rs241, %rs241};
	// end inline asm
	mov.u16 	%rs243, 21504;
	// begin inline asm
	mov.b32 %r998, {%rs243, %rs243};
	// end inline asm
	xor.b32  	%r986, %r1378, -2004318072;
	mov.u32 	%r1123, 983055;
	// begin inline asm
	lop3.b32 %r984, %r1123, %r986, %r987, 202;
	// end inline asm
	mov.u16 	%rs247, 18432;
	// begin inline asm
	mov.b32 %r988, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r989, %r987, %r988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r992, %r984, %r989;
	// end inline asm
	mov.u32 	%r1134, 15728880;
	// begin inline asm
	lop3.b32 %r995, %r1134, %r986, %r998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1000, %r998, %r999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1003, %r995, %r1000;
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs241, %rs241};
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs243, %rs243};
	// end inline asm
	xor.b32  	%r1032, %r1382, -2004318072;
	// begin inline asm
	lop3.b32 %r1030, %r1123, %r1032, %r1033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1035, %r1033, %r1034;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1038, %r1030, %r1035;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1041, %r1134, %r1032, %r1044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1046, %r1044, %r1045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1049, %r1041, %r1046;
	// end inline asm
	// begin inline asm
	mov.b32 %r1079, {%rs241, %rs241};
	// end inline asm
	// begin inline asm
	mov.b32 %r1090, {%rs243, %rs243};
	// end inline asm
	xor.b32  	%r1078, %r1386, -2004318072;
	// begin inline asm
	lop3.b32 %r1076, %r1123, %r1078, %r1079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1080, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1081, %r1079, %r1080;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1084, %r1076, %r1081;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1087, %r1134, %r1078, %r1090, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1091, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1092, %r1090, %r1091;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1095, %r1087, %r1092;
	// end inline asm
	// begin inline asm
	mov.b32 %r1125, {%rs241, %rs241};
	// end inline asm
	// begin inline asm
	mov.b32 %r1136, {%rs243, %rs243};
	// end inline asm
	xor.b32  	%r1124, %r1390, -2004318072;
	// begin inline asm
	lop3.b32 %r1122, %r1123, %r1124, %r1125, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1126, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1127, %r1125, %r1126;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1130, %r1122, %r1127;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1133, %r1134, %r1124, %r1136, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1137, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1138, %r1136, %r1137;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1141, %r1133, %r1138;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r992;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1166, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r90;
    mov.b32 {%r2re, %r2im}, %r1038;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1169, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r1003;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1172, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r1049;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1175, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1084;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1178, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r90;
    mov.b32 {%r2re, %r2im}, %r1130;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1181, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r1095;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1184, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r1141;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1187, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1190, %r1191}, {%r479, %r482}, {%r1166}, {%r685, %r685};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1197, %r1198}, {%r479, %r482}, {%r1169}, {%r685, %r685};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1204, %r1205}, {%r479, %r482}, {%r1172}, {%r685, %r685};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1211, %r1212}, {%r479, %r482}, {%r1175}, {%r685, %r685};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1218, %r1219}, {%r479, %r482}, {%r1178}, {%r685, %r685};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1225, %r1226}, {%r479, %r482}, {%r1181}, {%r685, %r685};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1232, %r1233}, {%r479, %r482}, {%r1184}, {%r685, %r685};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1239, %r1240}, {%r479, %r482}, {%r1187}, {%r685, %r685};
	// end inline asm
	mov.u16 	%rs615, 2;
	mov.u32 	%r3604, 1145324612;
	@%p216 bra 	LBB0_141;
// %bb.137:                             // %L10002
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs254, %rs4, 7;
	mov.u16 	%rs615, 2;
	add.s16 	%rs255, %rs254, -1;
	setp.lt.u16 	%p221, %rs255, 3;
	@%p221 bra 	LBB0_141;
// %bb.138:                             // %L10002
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs256, %rs254, -4;
	setp.lt.u16 	%p222, %rs256, 3;
	@%p222 bra 	LBB0_140;
// %bb.139:                             // %L10026
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs615, %rs3;
LBB0_140:                               // %L10037
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3604, -286331154;
LBB0_141:                               // %L10045
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p223, %rs615, 2;
	@%p223 bra 	LBB0_143;
	bra.uni 	LBB0_142;
LBB0_143:                               // %pass3460
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1246, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1248, %r1246, %r1191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1318, %r534, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r531, %r1190, %r1248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1321, %r531, %r1191, %r1318;
	// end inline asm
	setp.gt.u32 	%p224, %r5, 3;
	mov.u32 	%r1400, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1393, %r1394}, {%r575, %r578}, {%r1251, %r1321}, {%r1400, %r1400}, %r3604, 0;
	// end inline asm
	mov.u16 	%rs617, 2;
	mov.u32 	%r3605, 1145324612;
	@%p224 bra 	LBB0_144;
	bra.uni 	LBB0_148;
LBB0_144:                               // %L10076
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs259, %rs4, 7;
	mov.u16 	%rs617, 2;
	add.s16 	%rs260, %rs259, -1;
	setp.lt.u16 	%p225, %rs260, 3;
	@%p225 bra 	LBB0_148;
// %bb.145:                             // %L10076
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs261, %rs259, -4;
	setp.lt.u16 	%p226, %rs261, 3;
	@%p226 bra 	LBB0_147;
// %bb.146:                             // %L10100
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs617, %rs3;
LBB0_147:                               // %L10111
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3605, -286331154;
LBB0_148:                               // %L10119
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p227, %rs617, 2;
	@%p227 bra 	LBB0_150;
	bra.uni 	LBB0_149;
LBB0_150:                               // %pass3472
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1255, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r1255, %r1198;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1325, %r534, %r1197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r531, %r1197, %r1257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1328, %r531, %r1198, %r1325;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1405, %r1406}, {%r575, %r578}, {%r1260, %r1328}, {%r1400, %r1400}, %r3605, 0;
	// end inline asm
	mov.u16 	%rs619, 2;
	mov.u32 	%r3606, 1145324612;
	@%p224 bra 	LBB0_151;
	bra.uni 	LBB0_155;
LBB0_151:                               // %L10150
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs264, %rs4, 7;
	mov.u16 	%rs619, 2;
	add.s16 	%rs265, %rs264, -1;
	setp.lt.u16 	%p229, %rs265, 3;
	@%p229 bra 	LBB0_155;
// %bb.152:                             // %L10150
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs266, %rs264, -4;
	setp.lt.u16 	%p230, %rs266, 3;
	@%p230 bra 	LBB0_154;
// %bb.153:                             // %L10174
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs619, %rs3;
LBB0_154:                               // %L10185
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3606, -286331154;
LBB0_155:                               // %L10193
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p231, %rs619, 2;
	@%p231 bra 	LBB0_157;
	bra.uni 	LBB0_156;
LBB0_157:                               // %pass3484
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1264, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1266, %r1264, %r1205;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1332, %r534, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r531, %r1204, %r1266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1335, %r531, %r1205, %r1332;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1417, %r1418}, {%r575, %r578}, {%r1269, %r1335}, {%r1400, %r1400}, %r3606, 0;
	// end inline asm
	mov.u16 	%rs621, 2;
	mov.u32 	%r3607, 1145324612;
	@%p224 bra 	LBB0_158;
	bra.uni 	LBB0_162;
LBB0_158:                               // %L10224
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs269, %rs4, 7;
	mov.u16 	%rs621, 2;
	add.s16 	%rs270, %rs269, -1;
	setp.lt.u16 	%p233, %rs270, 3;
	@%p233 bra 	LBB0_162;
// %bb.159:                             // %L10224
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs271, %rs269, -4;
	setp.lt.u16 	%p234, %rs271, 3;
	@%p234 bra 	LBB0_161;
// %bb.160:                             // %L10248
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs621, %rs3;
LBB0_161:                               // %L10259
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3607, -286331154;
LBB0_162:                               // %L10267
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p235, %rs621, 2;
	@%p235 bra 	LBB0_164;
	bra.uni 	LBB0_163;
LBB0_164:                               // %pass3496
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1273, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1275, %r1273, %r1212;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1339, %r534, %r1211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1278, %r531, %r1211, %r1275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1342, %r531, %r1212, %r1339;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1429, %r1430}, {%r575, %r578}, {%r1278, %r1342}, {%r1400, %r1400}, %r3607, 0;
	// end inline asm
	mov.u16 	%rs623, 2;
	mov.u32 	%r3608, 1145324612;
	@%p224 bra 	LBB0_165;
	bra.uni 	LBB0_169;
LBB0_165:                               // %L10298
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs274, %rs4, 7;
	mov.u16 	%rs623, 2;
	add.s16 	%rs275, %rs274, -1;
	setp.lt.u16 	%p237, %rs275, 3;
	@%p237 bra 	LBB0_169;
// %bb.166:                             // %L10298
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs276, %rs274, -4;
	setp.lt.u16 	%p238, %rs276, 3;
	@%p238 bra 	LBB0_168;
// %bb.167:                             // %L10322
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs623, %rs3;
LBB0_168:                               // %L10333
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3608, -286331154;
LBB0_169:                               // %L10341
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p239, %rs623, 2;
	@%p239 bra 	LBB0_171;
	bra.uni 	LBB0_170;
LBB0_171:                               // %pass3508
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1282, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1284, %r1282, %r1219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1346, %r534, %r1218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1287, %r531, %r1218, %r1284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1349, %r531, %r1219, %r1346;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1441, %r1442}, {%r575, %r578}, {%r1287, %r1349}, {%r1400, %r1400}, %r3608, 0;
	// end inline asm
	mov.u16 	%rs625, 2;
	mov.u32 	%r3609, 1145324612;
	@%p224 bra 	LBB0_172;
	bra.uni 	LBB0_176;
LBB0_172:                               // %L10372
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs279, %rs4, 7;
	mov.u16 	%rs625, 2;
	add.s16 	%rs280, %rs279, -1;
	setp.lt.u16 	%p241, %rs280, 3;
	@%p241 bra 	LBB0_176;
// %bb.173:                             // %L10372
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs281, %rs279, -4;
	setp.lt.u16 	%p242, %rs281, 3;
	@%p242 bra 	LBB0_175;
// %bb.174:                             // %L10396
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs625, %rs3;
LBB0_175:                               // %L10407
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3609, -286331154;
LBB0_176:                               // %L10415
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p243, %rs625, 2;
	@%p243 bra 	LBB0_178;
	bra.uni 	LBB0_177;
LBB0_178:                               // %pass3520
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1291, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1293, %r1291, %r1226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1353, %r534, %r1225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1296, %r531, %r1225, %r1293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1356, %r531, %r1226, %r1353;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1453, %r1454}, {%r575, %r578}, {%r1296, %r1356}, {%r1400, %r1400}, %r3609, 0;
	// end inline asm
	mov.u16 	%rs627, 2;
	mov.u32 	%r3610, 1145324612;
	@%p224 bra 	LBB0_179;
	bra.uni 	LBB0_183;
LBB0_179:                               // %L10446
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs284, %rs4, 7;
	mov.u16 	%rs627, 2;
	add.s16 	%rs285, %rs284, -1;
	setp.lt.u16 	%p245, %rs285, 3;
	@%p245 bra 	LBB0_183;
// %bb.180:                             // %L10446
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs286, %rs284, -4;
	setp.lt.u16 	%p246, %rs286, 3;
	@%p246 bra 	LBB0_182;
// %bb.181:                             // %L10470
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs627, %rs3;
LBB0_182:                               // %L10481
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3610, -286331154;
LBB0_183:                               // %L10489
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p247, %rs627, 2;
	@%p247 bra 	LBB0_185;
	bra.uni 	LBB0_184;
LBB0_185:                               // %pass3532
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1300, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1302, %r1300, %r1233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1360, %r534, %r1232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1305, %r531, %r1232, %r1302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1363, %r531, %r1233, %r1360;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1465, %r1466}, {%r575, %r578}, {%r1305, %r1363}, {%r1400, %r1400}, %r3610, 0;
	// end inline asm
	mov.u16 	%rs629, 2;
	mov.u32 	%r3611, 1145324612;
	@%p224 bra 	LBB0_186;
	bra.uni 	LBB0_190;
LBB0_186:                               // %L10520
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs289, %rs4, 7;
	mov.u16 	%rs629, 2;
	add.s16 	%rs290, %rs289, -1;
	setp.lt.u16 	%p249, %rs290, 3;
	@%p249 bra 	LBB0_190;
// %bb.187:                             // %L10520
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs291, %rs289, -4;
	setp.lt.u16 	%p250, %rs291, 3;
	@%p250 bra 	LBB0_189;
// %bb.188:                             // %L10544
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs629, %rs3;
LBB0_189:                               // %L10555
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3611, -286331154;
LBB0_190:                               // %L10563
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p251, %rs629, 2;
	@%p251 bra 	LBB0_192;
	bra.uni 	LBB0_191;
LBB0_192:                               // %pass3544
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1309, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r1309, %r1240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1367, %r534, %r1239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r531, %r1239, %r1311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1370, %r531, %r1240, %r1367;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1543, %r1544}, {%r575, %r578}, {%r1314, %r1370}, {%r1400, %r1400}, %r3611, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1486, %r1393, %r1394, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1490, %r1393, %r1394, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1494, %r1405, %r1406, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1498, %r1405, %r1406, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1502, %r1417, %r1418, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1506, %r1417, %r1418, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1510, %r1429, %r1430, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1514, %r1429, %r1430, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1518, %r1441, %r1442, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1522, %r1441, %r1442, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1526, %r1453, %r1454, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1530, %r1453, %r1454, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1534, %r1465, %r1466, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1538, %r1465, %r1466, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1542, %r1543, %r1544, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1546, %r1543, %r1544, %r841;
	// end inline asm
	add.s32 	%r348, %r130, %r154;
	cvt.u16.u32 	%rs293, %r348;
	add.s16 	%rs294, %rs2, %rs293;
	cvt.s16.s8 	%rs295, %rs294;
	mul.lo.s16 	%rs296, %rs295, 43;
	shr.u16 	%rs297, %rs296, 15;
	shr.u16 	%rs298, %rs296, 8;
	add.s16 	%rs299, %rs298, %rs297;
	mul.lo.s16 	%rs300, %rs299, 6;
	sub.s16 	%rs301, %rs294, %rs300;
	cvt.s16.s8 	%rs302, %rs301;
	mul.wide.s16 	%r1597, %rs302, 16;
	add.s32 	%r1598, %r1597, %r113;
	add.s32 	%r1599, %r1598, %r114;
	add.s32 	%r1600, %r1599, %r115;
	or.b32  	%r1601, %r1600, %r87;
	or.b32  	%r1602, %r1601, %r66;
	add.s32 	%r1603, %r116, %r1602;
	mul.wide.s32 	%rd156, %r1603, 4;
	add.s64 	%rd158, %rd45, %rd156;
	st.shared.u32 	[%rd158], %r1486;
	add.s32 	%r1604, %r117, %r1597;
	add.s32 	%r1605, %r1604, %r114;
	add.s32 	%r1606, %r1605, %r115;
	or.b32  	%r1607, %r1606, %r87;
	or.b32  	%r1608, %r1607, %r66;
	add.s32 	%r1609, %r116, %r1608;
	mul.wide.s32 	%rd159, %r1609, 4;
	add.s64 	%rd160, %rd45, %rd159;
	st.shared.u32 	[%rd160], %r1490;
	add.s32 	%r1610, %r1600, %r118;
	add.s32 	%r1611, %r1610, %r116;
	mul.wide.s32 	%rd161, %r1611, 4;
	add.s64 	%rd162, %rd45, %rd161;
	st.shared.u32 	[%rd162], %r1494;
	add.s32 	%r1612, %r1606, %r118;
	add.s32 	%r1613, %r1612, %r116;
	mul.wide.s32 	%rd163, %r1613, 4;
	add.s64 	%rd164, %rd45, %rd163;
	st.shared.u32 	[%rd164], %r1498;
	add.s32 	%r1614, %r119, %r1597;
	add.s32 	%r1615, %r1614, %r114;
	add.s32 	%r1616, %r1615, %r115;
	or.b32  	%r1617, %r1616, %r87;
	or.b32  	%r1618, %r1617, %r66;
	add.s32 	%r1619, %r116, %r1618;
	mul.wide.s32 	%rd165, %r1619, 4;
	add.s64 	%rd166, %rd45, %rd165;
	st.shared.u32 	[%rd166], %r1502;
	add.s32 	%r1620, %r120, %r1597;
	add.s32 	%r1621, %r1620, %r114;
	add.s32 	%r1622, %r1621, %r115;
	or.b32  	%r1623, %r1622, %r87;
	or.b32  	%r1624, %r1623, %r66;
	add.s32 	%r1625, %r116, %r1624;
	mul.wide.s32 	%rd167, %r1625, 4;
	add.s64 	%rd168, %rd45, %rd167;
	st.shared.u32 	[%rd168], %r1506;
	add.s32 	%r1626, %r1616, %r118;
	add.s32 	%r1627, %r1626, %r116;
	mul.wide.s32 	%rd169, %r1627, 4;
	add.s64 	%rd170, %rd45, %rd169;
	st.shared.u32 	[%rd170], %r1510;
	add.s32 	%r1628, %r1622, %r118;
	add.s32 	%r1629, %r1628, %r116;
	mul.wide.s32 	%rd171, %r1629, 4;
	add.s64 	%rd172, %rd45, %rd171;
	st.shared.u32 	[%rd172], %r1514;
	add.s16 	%rs139, %rs293, 3;
	add.s16 	%rs303, %rs2, %rs139;
	cvt.s16.s8 	%rs304, %rs303;
	mul.lo.s16 	%rs305, %rs304, 43;
	shr.u16 	%rs306, %rs305, 15;
	shr.u16 	%rs307, %rs305, 8;
	add.s16 	%rs308, %rs307, %rs306;
	mul.lo.s16 	%rs309, %rs308, 6;
	sub.s16 	%rs310, %rs303, %rs309;
	cvt.s16.s8 	%rs311, %rs310;
	mul.wide.s16 	%r1630, %rs311, 16;
	add.s32 	%r1631, %r1630, %r113;
	add.s32 	%r1632, %r1631, %r114;
	add.s32 	%r1633, %r1632, %r115;
	or.b32  	%r1634, %r1633, %r87;
	or.b32  	%r1635, %r1634, %r66;
	add.s32 	%r1636, %r116, %r1635;
	mul.wide.s32 	%rd173, %r1636, 4;
	add.s64 	%rd174, %rd45, %rd173;
	st.shared.u32 	[%rd174], %r1518;
	add.s32 	%r1637, %r117, %r1630;
	add.s32 	%r1638, %r1637, %r114;
	add.s32 	%r1639, %r1638, %r115;
	or.b32  	%r1640, %r1639, %r87;
	or.b32  	%r1641, %r1640, %r66;
	add.s32 	%r1642, %r116, %r1641;
	mul.wide.s32 	%rd175, %r1642, 4;
	add.s64 	%rd176, %rd45, %rd175;
	st.shared.u32 	[%rd176], %r1522;
	add.s32 	%r1643, %r1633, %r118;
	add.s32 	%r1644, %r1643, %r116;
	mul.wide.s32 	%rd177, %r1644, 4;
	add.s64 	%rd178, %rd45, %rd177;
	st.shared.u32 	[%rd178], %r1526;
	add.s32 	%r1645, %r1639, %r118;
	add.s32 	%r1646, %r1645, %r116;
	mul.wide.s32 	%rd179, %r1646, 4;
	add.s64 	%rd180, %rd45, %rd179;
	st.shared.u32 	[%rd180], %r1530;
	add.s32 	%r1647, %r119, %r1630;
	add.s32 	%r1648, %r1647, %r114;
	add.s32 	%r1649, %r1648, %r115;
	or.b32  	%r1650, %r1649, %r87;
	or.b32  	%r1651, %r1650, %r66;
	add.s32 	%r1652, %r116, %r1651;
	mul.wide.s32 	%rd181, %r1652, 4;
	add.s64 	%rd182, %rd45, %rd181;
	st.shared.u32 	[%rd182], %r1534;
	add.s32 	%r1653, %r120, %r1630;
	add.s32 	%r1654, %r1653, %r114;
	add.s32 	%r1655, %r1654, %r115;
	or.b32  	%r1656, %r1655, %r87;
	or.b32  	%r1657, %r1656, %r66;
	add.s32 	%r1658, %r116, %r1657;
	mul.wide.s32 	%rd183, %r1658, 4;
	add.s64 	%rd184, %rd45, %rd183;
	st.shared.u32 	[%rd184], %r1538;
	add.s32 	%r1659, %r1649, %r118;
	add.s32 	%r1660, %r1659, %r116;
	mul.wide.s32 	%rd185, %r1660, 4;
	add.s64 	%rd186, %rd45, %rd185;
	st.shared.u32 	[%rd186], %r1542;
	add.s32 	%r1661, %r1655, %r118;
	add.s32 	%r1662, %r1661, %r116;
	mul.wide.s32 	%rd187, %r1662, 4;
	add.s64 	%rd188, %rd45, %rd187;
	st.shared.u32 	[%rd188], %r1546;
	bar.sync 	0;
	cvt.s16.s8 	%rs312, %rs293;
	mul.lo.s16 	%rs313, %rs312, 43;
	shr.u16 	%rs314, %rs313, 15;
	shr.u16 	%rs315, %rs313, 8;
	add.s16 	%rs316, %rs315, %rs314;
	mul.lo.s16 	%rs317, %rs316, 6;
	sub.s16 	%rs318, %rs293, %rs317;
	cvt.s16.s8 	%rs319, %rs318;
	mul.wide.s16 	%r1663, %rs319, 16;
	add.s32 	%r1664, %r121, %r1663;
	or.b32  	%r1665, %r1664, %r64;
	add.s32 	%r1666, %r1665, %r122;
	or.b32  	%r1667, %r1666, %r123;
	add.s32 	%r1668, %r1667, %r124;
	add.s32 	%r1669, %r1668, %r125;
	add.s32 	%r1670, %r1669, %r126;
	mul.wide.s32 	%rd189, %r1670, 4;
	add.s64 	%rd190, %rd45, %rd189;
	ld.shared.u32 	%r1554, [%rd190];
	add.s32 	%r1671, %r1664, 8;
	or.b32  	%r1672, %r1671, %r64;
	add.s32 	%r1673, %r1672, %r122;
	or.b32  	%r1674, %r1673, %r123;
	add.s32 	%r1675, %r1674, %r124;
	add.s32 	%r1676, %r1675, %r125;
	add.s32 	%r1677, %r1676, %r126;
	mul.wide.s32 	%rd191, %r1677, 4;
	add.s64 	%rd192, %rd45, %rd191;
	ld.shared.u32 	%r1561, [%rd192];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1550, %r1551}, {%r587, %r590}, {%r1554}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1557, %r1558}, {%r587, %r590}, {%r1561}, {%r1400, %r1400};
	// end inline asm
	mov.u16 	%rs633, 2;
	mov.u32 	%r3614, 1145324612;
	@%p224 bra 	LBB0_193;
	bra.uni 	LBB0_202;
LBB0_193:                               // %L16135
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs321, %rs4, 7;
	mov.u16 	%rs633, 2;
	mov.u32 	%r3614, 1145324612;
	setp.gt.s16 	%p253, %rs321, 3;
	@%p253 bra 	LBB0_196;
// %bb.194:                             // %L16135
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3613, -286331154;
	add.s16 	%rs323, %rs321, -2;
	setp.lt.u16 	%p256, %rs323, 2;
	@%p256 bra 	LBB0_201;
// %bb.195:                             // %L16135
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p257, %rs321, 1;
	@%p257 bra 	LBB0_202;
	bra.uni 	LBB0_198;
LBB0_196:                               // %L16135
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs322, %rs321, -4;
	setp.lt.u16 	%p254, %rs322, 2;
	@%p254 bra 	LBB0_200;
// %bb.197:                             // %L16135
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p255, %rs321, 6;
	@%p255 bra 	LBB0_199;
LBB0_198:                               // %L16159
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs633, %rs3;
LBB0_199:                               // %L16166
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3614, -286331154;
LBB0_200:                               // %L16170
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3613, %r3614;
LBB0_201:                               // %L16174
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3614, %r3613;
LBB0_202:                               // %L16178
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p258, %rs633, 2;
	@%p258 bra 	LBB0_204;
	bra.uni 	LBB0_203;
LBB0_204:                               // %pass5844
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1564, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1566, %r1564, %r1551;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1582, %r628, %r1550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1569, %r625, %r1550, %r1566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1585, %r625, %r1551, %r1582;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1681, %r1682}, {%r671, %r674}, {%r1569, %r1585}, {%r1400, %r1400}, %r3614, 0;
	// end inline asm
	mov.u16 	%rs637, 2;
	mov.u32 	%r3617, 1145324612;
	@%p224 bra 	LBB0_205;
	bra.uni 	LBB0_214;
LBB0_205:                               // %L16209
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs326, %rs4, 7;
	mov.u16 	%rs637, 2;
	mov.u32 	%r3617, 1145324612;
	setp.gt.s16 	%p260, %rs326, 3;
	@%p260 bra 	LBB0_208;
// %bb.206:                             // %L16209
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3616, -286331154;
	add.s16 	%rs328, %rs326, -2;
	setp.lt.u16 	%p263, %rs328, 2;
	@%p263 bra 	LBB0_213;
// %bb.207:                             // %L16209
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p264, %rs326, 1;
	@%p264 bra 	LBB0_214;
	bra.uni 	LBB0_210;
LBB0_208:                               // %L16209
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs327, %rs326, -4;
	setp.lt.u16 	%p261, %rs327, 2;
	@%p261 bra 	LBB0_212;
// %bb.209:                             // %L16209
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p262, %rs326, 6;
	@%p262 bra 	LBB0_211;
LBB0_210:                               // %L16233
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs637, %rs3;
LBB0_211:                               // %L16240
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3617, -286331154;
LBB0_212:                               // %L16244
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3616, %r3617;
LBB0_213:                               // %L16248
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3617, %r3616;
LBB0_214:                               // %L16252
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p265, %rs637, 2;
	@%p265 bra 	LBB0_216;
	bra.uni 	LBB0_215;
LBB0_216:                               // %pass5856
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1573, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1575, %r1573, %r1558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1589, %r628, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1578, %r625, %r1557, %r1575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1592, %r625, %r1558, %r1589;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1694, %r1695}, {%r671, %r674}, {%r1578, %r1592}, {%r1400, %r1400}, %r3617, 0;
	// end inline asm
	add.s32 	%r1769, %r348, 1;
	mul.hi.u32 	%r1770, %r1769, -1431655765;
	shr.u32 	%r1771, %r1770, 2;
	mul.lo.s32 	%r1772, %r1771, 6;
	sub.s32 	%r1773, %r1769, %r1772;
	shl.b32 	%r1774, %r1773, 4;
	add.s32 	%r1775, %r121, %r1774;
	or.b32  	%r1776, %r1775, %r64;
	add.s32 	%r1777, %r1776, %r122;
	or.b32  	%r1778, %r1777, %r123;
	add.s32 	%r1779, %r1778, %r124;
	add.s32 	%r1780, %r1779, %r125;
	add.s32 	%r1781, %r1780, %r126;
	mul.wide.u32 	%rd197, %r1781, 4;
	add.s64 	%rd199, %rd45, %rd197;
	ld.shared.u32 	%r1726, [%rd199];
	add.s32 	%r1782, %r1775, 8;
	or.b32  	%r1783, %r1782, %r64;
	add.s32 	%r1784, %r1783, %r122;
	or.b32  	%r1785, %r1784, %r123;
	add.s32 	%r1786, %r1785, %r124;
	add.s32 	%r1787, %r1786, %r125;
	add.s32 	%r1788, %r1787, %r126;
	mul.wide.u32 	%rd200, %r1788, 4;
	add.s64 	%rd201, %rd45, %rd200;
	ld.shared.u32 	%r1733, [%rd201];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1722, %r1723}, {%r587, %r590}, {%r1726}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1729, %r1730}, {%r587, %r590}, {%r1733}, {%r1400, %r1400};
	// end inline asm
	mov.u16 	%rs641, 2;
	mov.u32 	%r3620, 1145324612;
	@%p224 bra 	LBB0_217;
	bra.uni 	LBB0_226;
LBB0_217:                               // %L17127
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs331, %rs4, 7;
	mov.u16 	%rs641, 2;
	mov.u32 	%r3620, 1145324612;
	setp.gt.s16 	%p267, %rs331, 3;
	@%p267 bra 	LBB0_220;
// %bb.218:                             // %L17127
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3619, -286331154;
	add.s16 	%rs333, %rs331, -2;
	setp.lt.u16 	%p270, %rs333, 2;
	@%p270 bra 	LBB0_225;
// %bb.219:                             // %L17127
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p271, %rs331, 1;
	@%p271 bra 	LBB0_226;
	bra.uni 	LBB0_222;
LBB0_220:                               // %L17127
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs332, %rs331, -4;
	setp.lt.u16 	%p268, %rs332, 2;
	@%p268 bra 	LBB0_224;
// %bb.221:                             // %L17127
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p269, %rs331, 6;
	@%p269 bra 	LBB0_223;
LBB0_222:                               // %L17151
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs641, %rs3;
LBB0_223:                               // %L17158
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3620, -286331154;
LBB0_224:                               // %L17162
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3619, %r3620;
LBB0_225:                               // %L17166
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3620, %r3619;
LBB0_226:                               // %L17170
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p272, %rs641, 2;
	@%p272 bra 	LBB0_228;
	bra.uni 	LBB0_227;
LBB0_228:                               // %pass6188
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1736, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r1736, %r1723;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r628, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r625, %r1722, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r625, %r1723, %r1754;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1792, %r1793}, {%r671, %r674}, {%r1741, %r1757}, {%r1400, %r1400}, %r3620, 0;
	// end inline asm
	mov.u16 	%rs645, 2;
	mov.u32 	%r3623, 1145324612;
	@%p224 bra 	LBB0_229;
	bra.uni 	LBB0_238;
LBB0_229:                               // %L17201
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs336, %rs4, 7;
	mov.u16 	%rs645, 2;
	mov.u32 	%r3623, 1145324612;
	setp.gt.s16 	%p274, %rs336, 3;
	@%p274 bra 	LBB0_232;
// %bb.230:                             // %L17201
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3622, -286331154;
	add.s16 	%rs338, %rs336, -2;
	setp.lt.u16 	%p277, %rs338, 2;
	@%p277 bra 	LBB0_237;
// %bb.231:                             // %L17201
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p278, %rs336, 1;
	@%p278 bra 	LBB0_238;
	bra.uni 	LBB0_234;
LBB0_232:                               // %L17201
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs337, %rs336, -4;
	setp.lt.u16 	%p275, %rs337, 2;
	@%p275 bra 	LBB0_236;
// %bb.233:                             // %L17201
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p276, %rs336, 6;
	@%p276 bra 	LBB0_235;
LBB0_234:                               // %L17225
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs645, %rs3;
LBB0_235:                               // %L17232
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3623, -286331154;
LBB0_236:                               // %L17236
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3622, %r3623;
LBB0_237:                               // %L17240
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3623, %r3622;
LBB0_238:                               // %L17244
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p279, %rs645, 2;
	@%p279 bra 	LBB0_583;
	bra.uni 	LBB0_239;
LBB0_583:                               // %pass6200
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r1703, %r1681, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r1682, %r1682, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r1694, %r1694, %r1706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1745, %r628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r1695, %r1695, %r1710;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1747, %r1745, %r1730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r628, %r1729;
	// end inline asm
	mov.u32 	%r1719, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1718, %r1719, %r1714, %r153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r625, %r1729, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r625, %r1730, %r1761;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1822, %r1826}, {%r671, %r674}, {%r1750, %r1764}, {%r1400, %r1400}, %r3623, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1814, %r1792, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r1793, %r1793, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r1822, %r1822, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r1826, %r1826, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r366, %r1719, %r1825, %r1718;
	// end inline asm
	add.s32 	%r364, %r151, 2;
	setp.eq.s32 	%p280, %r364, 40;
	@%p280 bra 	LBB0_240;
	bra.uni 	LBB0_584;
LBB0_240:                               // %L17278
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.gt.u32 	%p281, %r5, 7;
	@%p281 bra 	LBB0_242;
// %bb.241:                             // %L17344
                                        //   in Loop: Header=BB0_136 Depth=2
	mul.lo.s32 	%r1833, %r152, 192;
	or.b32  	%r1834, %r127, %r1833;
	add.s32 	%r1835, %r1834, %r129;
	add.s32 	%r1836, %r1835, %r128;
	mul.wide.u32 	%rd206, %r1836, 4;
	add.s64 	%rd10, %rd4, %rd206;
	st.global.u32 	[%rd10], %r366;
LBB0_242:                               // %L17497
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r152, %r152, 1;
	mov.u32 	%r364, 0;
	mov.u32 	%r366, %r364;
LBB0_584:                               // %oksrem6294
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs341, %rs293, 2;
	cvt.s16.s8 	%rs342, %rs341;
	mul.lo.s16 	%rs343, %rs342, 43;
	shr.u16 	%rs344, %rs343, 15;
	shr.u16 	%rs345, %rs343, 8;
	add.s16 	%rs346, %rs345, %rs344;
	mul.lo.s16 	%rs347, %rs346, 6;
	sub.s16 	%rs348, %rs341, %rs347;
	cvt.s16.s8 	%rs349, %rs348;
	mul.wide.s16 	%r1885, %rs349, 16;
	add.s32 	%r1886, %r121, %r1885;
	or.b32  	%r1887, %r1886, %r64;
	add.s32 	%r1888, %r1887, %r122;
	or.b32  	%r1889, %r1888, %r123;
	add.s32 	%r1890, %r1889, %r124;
	add.s32 	%r1891, %r1890, %r125;
	add.s32 	%r1892, %r1891, %r126;
	mul.wide.s32 	%rd207, %r1892, 4;
	add.s64 	%rd209, %rd45, %rd207;
	ld.shared.u32 	%r1842, [%rd209];
	add.s32 	%r1893, %r1886, 8;
	or.b32  	%r1894, %r1893, %r64;
	add.s32 	%r1895, %r1894, %r122;
	or.b32  	%r1896, %r1895, %r123;
	add.s32 	%r1897, %r1896, %r124;
	add.s32 	%r1898, %r1897, %r125;
	add.s32 	%r1899, %r1898, %r126;
	mul.wide.s32 	%rd210, %r1899, 4;
	add.s64 	%rd211, %rd45, %rd210;
	ld.shared.u32 	%r1849, [%rd211];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1838, %r1839}, {%r587, %r590}, {%r1842}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1845, %r1846}, {%r587, %r590}, {%r1849}, {%r1400, %r1400};
	// end inline asm
	mov.u16 	%rs649, 2;
	mov.u32 	%r3626, 1145324612;
	@%p224 bra 	LBB0_243;
	bra.uni 	LBB0_252;
LBB0_243:                               // %L18346
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs351, %rs4, 7;
	mov.u16 	%rs649, 2;
	mov.u32 	%r3626, 1145324612;
	setp.gt.s16 	%p283, %rs351, 3;
	@%p283 bra 	LBB0_246;
// %bb.244:                             // %L18346
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3625, -286331154;
	add.s16 	%rs353, %rs351, -2;
	setp.lt.u16 	%p286, %rs353, 2;
	@%p286 bra 	LBB0_251;
// %bb.245:                             // %L18346
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p287, %rs351, 1;
	@%p287 bra 	LBB0_252;
	bra.uni 	LBB0_248;
LBB0_246:                               // %L18346
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs352, %rs351, -4;
	setp.lt.u16 	%p284, %rs352, 2;
	@%p284 bra 	LBB0_250;
// %bb.247:                             // %L18346
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p285, %rs351, 6;
	@%p285 bra 	LBB0_249;
LBB0_248:                               // %L18370
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs649, %rs3;
LBB0_249:                               // %L18377
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3626, -286331154;
LBB0_250:                               // %L18381
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3625, %r3626;
LBB0_251:                               // %L18385
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3626, %r3625;
LBB0_252:                               // %L18389
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p288, %rs649, 2;
	@%p288 bra 	LBB0_254;
	bra.uni 	LBB0_253;
LBB0_254:                               // %pass6600
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1852, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1854, %r1852, %r1839;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1870, %r628, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r625, %r1838, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r625, %r1839, %r1870;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1903, %r1904}, {%r671, %r674}, {%r1857, %r1873}, {%r1400, %r1400}, %r3626, 0;
	// end inline asm
	mov.u16 	%rs653, 2;
	mov.u32 	%r3629, 1145324612;
	@%p224 bra 	LBB0_255;
	bra.uni 	LBB0_264;
LBB0_255:                               // %L18420
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs356, %rs4, 7;
	mov.u16 	%rs653, 2;
	mov.u32 	%r3629, 1145324612;
	setp.gt.s16 	%p290, %rs356, 3;
	@%p290 bra 	LBB0_258;
// %bb.256:                             // %L18420
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3628, -286331154;
	add.s16 	%rs358, %rs356, -2;
	setp.lt.u16 	%p293, %rs358, 2;
	@%p293 bra 	LBB0_263;
// %bb.257:                             // %L18420
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p294, %rs356, 1;
	@%p294 bra 	LBB0_264;
	bra.uni 	LBB0_260;
LBB0_258:                               // %L18420
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs357, %rs356, -4;
	setp.lt.u16 	%p291, %rs357, 2;
	@%p291 bra 	LBB0_262;
// %bb.259:                             // %L18420
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p292, %rs356, 6;
	@%p292 bra 	LBB0_261;
LBB0_260:                               // %L18444
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs653, %rs3;
LBB0_261:                               // %L18451
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3629, -286331154;
LBB0_262:                               // %L18455
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3628, %r3629;
LBB0_263:                               // %L18459
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3629, %r3628;
LBB0_264:                               // %L18463
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p295, %rs653, 2;
	@%p295 bra 	LBB0_266;
	bra.uni 	LBB0_265;
LBB0_266:                               // %pass6612
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1861, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1863, %r1861, %r1846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r628, %r1845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1866, %r625, %r1845, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r625, %r1846, %r1877;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1916, %r1917}, {%r671, %r674}, {%r1866, %r1880}, {%r1400, %r1400}, %r3629, 0;
	// end inline asm
	cvt.s16.s8 	%rs360, %rs139;
	mul.lo.s16 	%rs361, %rs360, 43;
	shr.u16 	%rs362, %rs361, 15;
	shr.u16 	%rs363, %rs361, 8;
	add.s16 	%rs364, %rs363, %rs362;
	mul.lo.s16 	%rs365, %rs364, 6;
	sub.s16 	%rs366, %rs139, %rs365;
	cvt.s16.s8 	%rs367, %rs366;
	mul.wide.s16 	%r1991, %rs367, 16;
	add.s32 	%r1992, %r121, %r1991;
	or.b32  	%r1993, %r1992, %r64;
	add.s32 	%r1994, %r1993, %r122;
	or.b32  	%r1995, %r1994, %r123;
	add.s32 	%r1996, %r1995, %r124;
	add.s32 	%r1997, %r1996, %r125;
	add.s32 	%r1998, %r1997, %r126;
	mul.wide.s32 	%rd216, %r1998, 4;
	add.s64 	%rd218, %rd45, %rd216;
	ld.shared.u32 	%r1948, [%rd218];
	add.s32 	%r1999, %r1992, 8;
	or.b32  	%r2000, %r1999, %r64;
	add.s32 	%r2001, %r2000, %r122;
	or.b32  	%r2002, %r2001, %r123;
	add.s32 	%r2003, %r2002, %r124;
	add.s32 	%r2004, %r2003, %r125;
	add.s32 	%r2005, %r2004, %r126;
	mul.wide.s32 	%rd219, %r2005, 4;
	add.s64 	%rd220, %rd45, %rd219;
	ld.shared.u32 	%r1955, [%rd220];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1944, %r1945}, {%r587, %r590}, {%r1948}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1951, %r1952}, {%r587, %r590}, {%r1955}, {%r1400, %r1400};
	// end inline asm
	mov.u16 	%rs657, 2;
	mov.u32 	%r3632, 1145324612;
	@%p224 bra 	LBB0_267;
	bra.uni 	LBB0_276;
LBB0_267:                               // %L19338
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs369, %rs4, 7;
	mov.u16 	%rs657, 2;
	mov.u32 	%r3632, 1145324612;
	setp.gt.s16 	%p297, %rs369, 3;
	@%p297 bra 	LBB0_270;
// %bb.268:                             // %L19338
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3631, -286331154;
	add.s16 	%rs371, %rs369, -2;
	setp.lt.u16 	%p300, %rs371, 2;
	@%p300 bra 	LBB0_275;
// %bb.269:                             // %L19338
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p301, %rs369, 1;
	@%p301 bra 	LBB0_276;
	bra.uni 	LBB0_272;
LBB0_270:                               // %L19338
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs370, %rs369, -4;
	setp.lt.u16 	%p298, %rs370, 2;
	@%p298 bra 	LBB0_274;
// %bb.271:                             // %L19338
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p299, %rs369, 6;
	@%p299 bra 	LBB0_273;
LBB0_272:                               // %L19362
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs657, %rs3;
LBB0_273:                               // %L19369
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3632, -286331154;
LBB0_274:                               // %L19373
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3631, %r3632;
LBB0_275:                               // %L19377
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3632, %r3631;
LBB0_276:                               // %L19381
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p302, %rs657, 2;
	@%p302 bra 	LBB0_278;
	bra.uni 	LBB0_277;
LBB0_278:                               // %pass6944
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1958, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1960, %r1958, %r1945;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r628, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r625, %r1944, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r625, %r1945, %r1976;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2009, %r2010}, {%r671, %r674}, {%r1963, %r1979}, {%r1400, %r1400}, %r3632, 0;
	// end inline asm
	mov.u16 	%rs661, 2;
	mov.u32 	%r3635, 1145324612;
	@%p224 bra 	LBB0_279;
	bra.uni 	LBB0_288;
LBB0_279:                               // %L19412
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs374, %rs4, 7;
	mov.u16 	%rs661, 2;
	mov.u32 	%r3635, 1145324612;
	setp.gt.s16 	%p304, %rs374, 3;
	@%p304 bra 	LBB0_282;
// %bb.280:                             // %L19412
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3634, -286331154;
	add.s16 	%rs376, %rs374, -2;
	setp.lt.u16 	%p307, %rs376, 2;
	@%p307 bra 	LBB0_287;
// %bb.281:                             // %L19412
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p308, %rs374, 1;
	@%p308 bra 	LBB0_288;
	bra.uni 	LBB0_284;
LBB0_282:                               // %L19412
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs375, %rs374, -4;
	setp.lt.u16 	%p305, %rs375, 2;
	@%p305 bra 	LBB0_286;
// %bb.283:                             // %L19412
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p306, %rs374, 6;
	@%p306 bra 	LBB0_285;
LBB0_284:                               // %L19436
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs661, %rs3;
LBB0_285:                               // %L19443
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3635, -286331154;
LBB0_286:                               // %L19447
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3634, %r3635;
LBB0_287:                               // %L19451
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3635, %r3634;
LBB0_288:                               // %L19455
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p309, %rs661, 2;
	@%p309 bra 	LBB0_585;
	bra.uni 	LBB0_289;
LBB0_585:                               // %pass6956
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r1925, %r1903, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1928, %r1904, %r1904, %r1925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1932, %r1916, %r1916, %r1928;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1967, %r628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1936, %r1917, %r1917, %r1932;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r1967, %r1952;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1983, %r628, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1940, %r1719, %r1936, %r366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r625, %r1951, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r625, %r1952, %r1983;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2039, %r2043}, {%r671, %r674}, {%r1972, %r1986}, {%r1400, %r1400}, %r3635, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2031, %r2009, %r2009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r2010, %r2010, %r2031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r2039, %r2039, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r2043, %r2043, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r384, %r1719, %r2042, %r1940;
	// end inline asm
	add.s32 	%r382, %r364, 2;
	setp.eq.s32 	%p310, %r382, 40;
	@%p310 bra 	LBB0_290;
	bra.uni 	LBB0_586;
LBB0_290:                               // %L19489
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.gt.u32 	%p311, %r5, 7;
	@%p311 bra 	LBB0_292;
// %bb.291:                             // %L19555
                                        //   in Loop: Header=BB0_136 Depth=2
	mul.lo.s32 	%r2050, %r152, 192;
	or.b32  	%r2051, %r127, %r2050;
	add.s32 	%r2052, %r2051, %r129;
	add.s32 	%r2053, %r2052, %r128;
	mul.wide.u32 	%rd225, %r2053, 4;
	add.s64 	%rd11, %rd4, %rd225;
	st.global.u32 	[%rd11], %r384;
LBB0_292:                               // %L19708
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r152, %r152, 1;
	mov.u32 	%r382, 0;
	mov.u32 	%r384, %r382;
LBB0_586:                               // %oksrem7050
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs379, %rs293, 4;
	cvt.s16.s8 	%rs380, %rs379;
	mul.lo.s16 	%rs381, %rs380, 43;
	shr.u16 	%rs382, %rs381, 15;
	shr.u16 	%rs383, %rs381, 8;
	add.s16 	%rs384, %rs383, %rs382;
	mul.lo.s16 	%rs385, %rs384, 6;
	sub.s16 	%rs386, %rs379, %rs385;
	cvt.s16.s8 	%rs387, %rs386;
	mul.wide.s16 	%r2102, %rs387, 16;
	add.s32 	%r2103, %r121, %r2102;
	or.b32  	%r2104, %r2103, %r64;
	add.s32 	%r2105, %r2104, %r122;
	or.b32  	%r2106, %r2105, %r123;
	add.s32 	%r2107, %r2106, %r124;
	add.s32 	%r2108, %r2107, %r125;
	add.s32 	%r2109, %r2108, %r126;
	mul.wide.s32 	%rd226, %r2109, 4;
	add.s64 	%rd228, %rd45, %rd226;
	ld.shared.u32 	%r2059, [%rd228];
	add.s32 	%r2110, %r2103, 8;
	or.b32  	%r2111, %r2110, %r64;
	add.s32 	%r2112, %r2111, %r122;
	or.b32  	%r2113, %r2112, %r123;
	add.s32 	%r2114, %r2113, %r124;
	add.s32 	%r2115, %r2114, %r125;
	add.s32 	%r2116, %r2115, %r126;
	mul.wide.s32 	%rd229, %r2116, 4;
	add.s64 	%rd230, %rd45, %rd229;
	ld.shared.u32 	%r2066, [%rd230];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2055, %r2056}, {%r587, %r590}, {%r2059}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2062, %r2063}, {%r587, %r590}, {%r2066}, {%r1400, %r1400};
	// end inline asm
	mov.u16 	%rs665, 2;
	mov.u32 	%r3638, 1145324612;
	@%p224 bra 	LBB0_293;
	bra.uni 	LBB0_302;
LBB0_293:                               // %L20557
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs389, %rs4, 7;
	mov.u16 	%rs665, 2;
	mov.u32 	%r3638, 1145324612;
	setp.gt.s16 	%p313, %rs389, 3;
	@%p313 bra 	LBB0_296;
// %bb.294:                             // %L20557
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3637, -286331154;
	add.s16 	%rs391, %rs389, -2;
	setp.lt.u16 	%p316, %rs391, 2;
	@%p316 bra 	LBB0_301;
// %bb.295:                             // %L20557
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p317, %rs389, 1;
	@%p317 bra 	LBB0_302;
	bra.uni 	LBB0_298;
LBB0_296:                               // %L20557
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs390, %rs389, -4;
	setp.lt.u16 	%p314, %rs390, 2;
	@%p314 bra 	LBB0_300;
// %bb.297:                             // %L20557
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p315, %rs389, 6;
	@%p315 bra 	LBB0_299;
LBB0_298:                               // %L20581
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs665, %rs3;
LBB0_299:                               // %L20588
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3638, -286331154;
LBB0_300:                               // %L20592
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3637, %r3638;
LBB0_301:                               // %L20596
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3638, %r3637;
LBB0_302:                               // %L20600
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p318, %rs665, 2;
	@%p318 bra 	LBB0_304;
	bra.uni 	LBB0_303;
LBB0_304:                               // %pass7356
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r2069, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2071, %r2069, %r2056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2087, %r628, %r2055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r625, %r2055, %r2071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2090, %r625, %r2056, %r2087;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2120, %r2121}, {%r671, %r674}, {%r2074, %r2090}, {%r1400, %r1400}, %r3638, 0;
	// end inline asm
	mov.u16 	%rs669, 2;
	mov.u32 	%r3641, 1145324612;
	@%p224 bra 	LBB0_305;
	bra.uni 	LBB0_314;
LBB0_305:                               // %L20631
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs394, %rs4, 7;
	mov.u16 	%rs669, 2;
	mov.u32 	%r3641, 1145324612;
	setp.gt.s16 	%p320, %rs394, 3;
	@%p320 bra 	LBB0_308;
// %bb.306:                             // %L20631
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3640, -286331154;
	add.s16 	%rs396, %rs394, -2;
	setp.lt.u16 	%p323, %rs396, 2;
	@%p323 bra 	LBB0_313;
// %bb.307:                             // %L20631
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p324, %rs394, 1;
	@%p324 bra 	LBB0_314;
	bra.uni 	LBB0_310;
LBB0_308:                               // %L20631
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs395, %rs394, -4;
	setp.lt.u16 	%p321, %rs395, 2;
	@%p321 bra 	LBB0_312;
// %bb.309:                             // %L20631
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p322, %rs394, 6;
	@%p322 bra 	LBB0_311;
LBB0_310:                               // %L20655
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs669, %rs3;
LBB0_311:                               // %L20662
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3641, -286331154;
LBB0_312:                               // %L20666
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3640, %r3641;
LBB0_313:                               // %L20670
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3641, %r3640;
LBB0_314:                               // %L20674
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p325, %rs669, 2;
	@%p325 bra 	LBB0_316;
	bra.uni 	LBB0_315;
LBB0_316:                               // %pass7368
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r2078, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2080, %r2078, %r2063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2094, %r628, %r2062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2083, %r625, %r2062, %r2080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2097, %r625, %r2063, %r2094;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2133, %r2134}, {%r671, %r674}, {%r2083, %r2097}, {%r1400, %r1400}, %r3641, 0;
	// end inline asm
	add.s16 	%rs399, %rs293, 5;
	cvt.s16.s8 	%rs400, %rs399;
	mul.lo.s16 	%rs401, %rs400, 43;
	shr.u16 	%rs402, %rs401, 15;
	shr.u16 	%rs403, %rs401, 8;
	add.s16 	%rs404, %rs403, %rs402;
	mul.lo.s16 	%rs405, %rs404, 6;
	sub.s16 	%rs406, %rs399, %rs405;
	cvt.s16.s8 	%rs407, %rs406;
	mul.wide.s16 	%r2208, %rs407, 16;
	add.s32 	%r2209, %r121, %r2208;
	or.b32  	%r2210, %r2209, %r64;
	add.s32 	%r2211, %r2210, %r122;
	or.b32  	%r2212, %r2211, %r123;
	add.s32 	%r2213, %r2212, %r124;
	add.s32 	%r2214, %r2213, %r125;
	add.s32 	%r2215, %r2214, %r126;
	mul.wide.s32 	%rd235, %r2215, 4;
	add.s64 	%rd237, %rd45, %rd235;
	ld.shared.u32 	%r2165, [%rd237];
	add.s32 	%r2216, %r2209, 8;
	or.b32  	%r2217, %r2216, %r64;
	add.s32 	%r2218, %r2217, %r122;
	or.b32  	%r2219, %r2218, %r123;
	add.s32 	%r2220, %r2219, %r124;
	add.s32 	%r2221, %r2220, %r125;
	add.s32 	%r2222, %r2221, %r126;
	mul.wide.s32 	%rd238, %r2222, 4;
	add.s64 	%rd239, %rd45, %rd238;
	ld.shared.u32 	%r2172, [%rd239];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2161, %r2162}, {%r587, %r590}, {%r2165}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2168, %r2169}, {%r587, %r590}, {%r2172}, {%r1400, %r1400};
	// end inline asm
	mov.u16 	%rs673, 2;
	mov.u32 	%r3644, 1145324612;
	@%p224 bra 	LBB0_317;
	bra.uni 	LBB0_326;
LBB0_317:                               // %L21549
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs409, %rs4, 7;
	mov.u16 	%rs673, 2;
	mov.u32 	%r3644, 1145324612;
	setp.gt.s16 	%p327, %rs409, 3;
	@%p327 bra 	LBB0_320;
// %bb.318:                             // %L21549
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3643, -286331154;
	add.s16 	%rs411, %rs409, -2;
	setp.lt.u16 	%p330, %rs411, 2;
	@%p330 bra 	LBB0_325;
// %bb.319:                             // %L21549
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p331, %rs409, 1;
	@%p331 bra 	LBB0_326;
	bra.uni 	LBB0_322;
LBB0_320:                               // %L21549
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs410, %rs409, -4;
	setp.lt.u16 	%p328, %rs410, 2;
	@%p328 bra 	LBB0_324;
// %bb.321:                             // %L21549
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p329, %rs409, 6;
	@%p329 bra 	LBB0_323;
LBB0_322:                               // %L21573
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs673, %rs3;
LBB0_323:                               // %L21580
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3644, -286331154;
LBB0_324:                               // %L21584
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3643, %r3644;
LBB0_325:                               // %L21588
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3644, %r3643;
LBB0_326:                               // %L21592
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p332, %rs673, 2;
	@%p332 bra 	LBB0_328;
	bra.uni 	LBB0_327;
LBB0_328:                               // %pass7700
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r2175, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2177, %r2175, %r2162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2193, %r628, %r2161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2180, %r625, %r2161, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2196, %r625, %r2162, %r2193;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2226, %r2227}, {%r671, %r674}, {%r2180, %r2196}, {%r1400, %r1400}, %r3644, 0;
	// end inline asm
	mov.u16 	%rs677, 2;
	mov.u32 	%r3647, 1145324612;
	@%p224 bra 	LBB0_329;
	bra.uni 	LBB0_338;
LBB0_329:                               // %L21623
                                        //   in Loop: Header=BB0_136 Depth=2
	and.b16  	%rs414, %rs4, 7;
	mov.u16 	%rs677, 2;
	mov.u32 	%r3647, 1145324612;
	setp.gt.s16 	%p334, %rs414, 3;
	@%p334 bra 	LBB0_332;
// %bb.330:                             // %L21623
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3646, -286331154;
	add.s16 	%rs416, %rs414, -2;
	setp.lt.u16 	%p337, %rs416, 2;
	@%p337 bra 	LBB0_337;
// %bb.331:                             // %L21623
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p338, %rs414, 1;
	@%p338 bra 	LBB0_338;
	bra.uni 	LBB0_334;
LBB0_332:                               // %L21623
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs415, %rs414, -4;
	setp.lt.u16 	%p335, %rs415, 2;
	@%p335 bra 	LBB0_336;
// %bb.333:                             // %L21623
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p336, %rs414, 6;
	@%p336 bra 	LBB0_335;
LBB0_334:                               // %L21647
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u16 	%rs677, %rs3;
LBB0_335:                               // %L21654
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3647, -286331154;
LBB0_336:                               // %L21658
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3646, %r3647;
LBB0_337:                               // %L21662
                                        //   in Loop: Header=BB0_136 Depth=2
	mov.u32 	%r3647, %r3646;
LBB0_338:                               // %L21666
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.eq.s16 	%p339, %rs677, 2;
	@%p339 bra 	LBB0_340;
	bra.uni 	LBB0_339;
LBB0_340:                               // %pass7712
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2142, %r2120, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r2121, %r2121, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r2133, %r2133, %r2145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2184, %r628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2153, %r2134, %r2134, %r2149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2186, %r2184, %r2169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2200, %r628, %r2168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r1719, %r2153, %r384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r625, %r2168, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2203, %r625, %r2169, %r2200;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2256, %r2260}, {%r671, %r674}, {%r2189, %r2203}, {%r1400, %r1400}, %r3647, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2248, %r2226, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2251, %r2227, %r2227, %r2248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2255, %r2256, %r2256, %r2251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2259, %r2260, %r2260, %r2255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r153, %r1719, %r2259, %r2157;
	// end inline asm
	add.s32 	%r151, %r382, 2;
	setp.eq.s32 	%p340, %r151, 40;
	@%p340 bra 	LBB0_341;
	bra.uni 	LBB0_344;
LBB0_341:                               // %L21700
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.gt.u32 	%p341, %r5, 7;
	@%p341 bra 	LBB0_343;
// %bb.342:                             // %L21766
                                        //   in Loop: Header=BB0_136 Depth=2
	mul.lo.s32 	%r2267, %r152, 192;
	or.b32  	%r2268, %r127, %r2267;
	add.s32 	%r2269, %r2268, %r129;
	add.s32 	%r2270, %r2269, %r128;
	mul.wide.u32 	%rd244, %r2270, 4;
	add.s64 	%rd12, %rd4, %rd244;
	st.global.u32 	[%rd12], %r153;
	bra.uni 	LBB0_343;
LBB0_345:                               // %L21943.preheader
                                        //   in Loop: Header=BB0_134 Depth=1
	mov.u16 	%rs72, %rs6;
	mov.u32 	%r225, %r1400;
	bra.uni 	LBB0_346;
LBB0_553:                               // %L34410
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s32 	%r152, %r152, 1;
	mov.u32 	%r151, %r2695;
	mov.u32 	%r153, %r2695;
LBB0_554:                               // %L34411
                                        //   in Loop: Header=BB0_346 Depth=2
	bar.sync 	0;
	add.s32 	%r225, %r225, 6;
	add.s16 	%rs72, %rs72, 6;
	setp.ne.s32 	%p469, %r225, 24;
	@%p469 bra 	LBB0_346;
	bra.uni 	LBB0_555;
LBB0_346:                               // %L21943
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p344, %r225, 0;
	selp.b32 	%r2666, %r135, 0, %p344;
	setp.eq.s32 	%p345, %r225, 6;
	selp.b32 	%r2667, %r139, %r2666, %p345;
	setp.eq.s32 	%p346, %r225, 12;
	selp.b32 	%r2668, %r143, %r2667, %p346;
	setp.eq.s32 	%p347, %r225, 18;
	selp.b32 	%r2669, %r147, %r2668, %p347;
	selp.b32 	%r2670, %r136, 0, %p344;
	selp.b32 	%r2671, %r140, %r2670, %p345;
	selp.b32 	%r2672, %r144, %r2671, %p346;
	selp.b32 	%r2673, %r148, %r2672, %p347;
	selp.b32 	%r2674, %r137, 0, %p344;
	selp.b32 	%r2675, %r141, %r2674, %p345;
	selp.b32 	%r2676, %r145, %r2675, %p346;
	selp.b32 	%r2677, %r149, %r2676, %p347;
	selp.b32 	%r2678, %r138, 0, %p344;
	selp.b32 	%r2679, %r142, %r2678, %p345;
	selp.b32 	%r2680, %r146, %r2679, %p346;
	selp.b32 	%r2681, %r150, %r2680, %p347;
	// begin inline asm
	mov.b32 %r2300, {%rs241, %rs241};
	// end inline asm
	// begin inline asm
	mov.b32 %r2311, {%rs243, %rs243};
	// end inline asm
	shr.u32 	%r2682, %r2669, 8;
	xor.b32  	%r2310, %r2682, 8947848;
	// begin inline asm
	lop3.b32 %r2297, %r1123, %r2310, %r2300, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2302, %r2300, %r2301;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2305, %r2297, %r2302;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2308, %r1134, %r2310, %r2311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2312, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2313, %r2311, %r2312;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2316, %r2308, %r2313;
	// end inline asm
	// begin inline asm
	mov.b32 %r2346, {%rs241, %rs241};
	// end inline asm
	// begin inline asm
	mov.b32 %r2357, {%rs243, %rs243};
	// end inline asm
	shr.u32 	%r2683, %r2673, 8;
	xor.b32  	%r2356, %r2683, 8947848;
	// begin inline asm
	lop3.b32 %r2343, %r1123, %r2356, %r2346, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2347, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2348, %r2346, %r2347;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2351, %r2343, %r2348;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2354, %r1134, %r2356, %r2357, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2358, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2359, %r2357, %r2358;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2362, %r2354, %r2359;
	// end inline asm
	// begin inline asm
	mov.b32 %r2392, {%rs241, %rs241};
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs243, %rs243};
	// end inline asm
	shr.u32 	%r2684, %r2677, 8;
	xor.b32  	%r2402, %r2684, 8947848;
	// begin inline asm
	lop3.b32 %r2389, %r1123, %r2402, %r2392, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2393, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2392, %r2393;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2397, %r2389, %r2394;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2400, %r1134, %r2402, %r2403, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2404, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2405, %r2403, %r2404;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2408, %r2400, %r2405;
	// end inline asm
	// begin inline asm
	mov.b32 %r2438, {%rs241, %rs241};
	// end inline asm
	// begin inline asm
	mov.b32 %r2449, {%rs243, %rs243};
	// end inline asm
	shr.u32 	%r2685, %r2681, 8;
	xor.b32  	%r2448, %r2685, 8947848;
	// begin inline asm
	lop3.b32 %r2435, %r1123, %r2448, %r2438, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2439, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2440, %r2438, %r2439;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2443, %r2435, %r2440;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2446, %r1134, %r2448, %r2449, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2450, {%rs247, %rs247};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2451, %r2449, %r2450;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2454, %r2446, %r2451;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2305;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2457, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r90;
    mov.b32 {%r2re, %r2im}, %r2351;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2460, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r2316;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2463, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r2362;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2466, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2397;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2469, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r90;
    mov.b32 {%r2re, %r2im}, %r2443;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2472, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r2408;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2475, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r2454;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2478, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2481, %r2482}, {%r479, %r482}, {%r2457}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2488, %r2489}, {%r479, %r482}, {%r2460}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2495, %r2496}, {%r479, %r482}, {%r2463}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2502, %r2503}, {%r479, %r482}, {%r2466}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2509, %r2510}, {%r479, %r482}, {%r2469}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2516, %r2517}, {%r479, %r482}, {%r2472}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2523, %r2524}, {%r479, %r482}, {%r2475}, {%r1400, %r1400};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2530, %r2531}, {%r479, %r482}, {%r2478}, {%r1400, %r1400};
	// end inline asm
	mov.u16 	%rs680, 2;
	mov.u32 	%r3655, 1145324612;
	@%p216 bra 	LBB0_351;
// %bb.347:                             // %L22493
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs467, %rs4, 7;
	mov.u16 	%rs680, 2;
	add.s16 	%rs468, %rs467, -1;
	setp.lt.u16 	%p348, %rs468, 3;
	@%p348 bra 	LBB0_351;
// %bb.348:                             // %L22493
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs469, %rs467, -4;
	setp.lt.u16 	%p349, %rs469, 3;
	@%p349 bra 	LBB0_350;
// %bb.349:                             // %L22517
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs680, %rs3;
LBB0_350:                               // %L22528
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3655, -286331154;
LBB0_351:                               // %L22536
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p350, %rs680, 2;
	@%p350 bra 	LBB0_353;
	bra.uni 	LBB0_352;
LBB0_353:                               // %pass7805
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2537, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2539, %r2537, %r2482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2609, %r534, %r2481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r531, %r2481, %r2539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2612, %r531, %r2482, %r2609;
	// end inline asm
	mov.u32 	%r2695, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2688, %r2689}, {%r575, %r578}, {%r2542, %r2612}, {%r2695, %r2695}, %r3655, 0;
	// end inline asm
	mov.u16 	%rs682, 2;
	mov.u32 	%r3656, 1145324612;
	@%p224 bra 	LBB0_354;
	bra.uni 	LBB0_358;
LBB0_354:                               // %L22567
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs472, %rs4, 7;
	mov.u16 	%rs682, 2;
	add.s16 	%rs473, %rs472, -1;
	setp.lt.u16 	%p352, %rs473, 3;
	@%p352 bra 	LBB0_358;
// %bb.355:                             // %L22567
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs474, %rs472, -4;
	setp.lt.u16 	%p353, %rs474, 3;
	@%p353 bra 	LBB0_357;
// %bb.356:                             // %L22591
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs682, %rs3;
LBB0_357:                               // %L22602
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3656, -286331154;
LBB0_358:                               // %L22610
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p354, %rs682, 2;
	@%p354 bra 	LBB0_360;
	bra.uni 	LBB0_359;
LBB0_360:                               // %pass7817
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2546, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2548, %r2546, %r2489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2616, %r534, %r2488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2551, %r531, %r2488, %r2548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2619, %r531, %r2489, %r2616;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2700, %r2701}, {%r575, %r578}, {%r2551, %r2619}, {%r2695, %r2695}, %r3656, 0;
	// end inline asm
	mov.u16 	%rs684, 2;
	mov.u32 	%r3657, 1145324612;
	@%p224 bra 	LBB0_361;
	bra.uni 	LBB0_365;
LBB0_361:                               // %L22641
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs477, %rs4, 7;
	mov.u16 	%rs684, 2;
	add.s16 	%rs478, %rs477, -1;
	setp.lt.u16 	%p356, %rs478, 3;
	@%p356 bra 	LBB0_365;
// %bb.362:                             // %L22641
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs479, %rs477, -4;
	setp.lt.u16 	%p357, %rs479, 3;
	@%p357 bra 	LBB0_364;
// %bb.363:                             // %L22665
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs684, %rs3;
LBB0_364:                               // %L22676
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3657, -286331154;
LBB0_365:                               // %L22684
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p358, %rs684, 2;
	@%p358 bra 	LBB0_367;
	bra.uni 	LBB0_366;
LBB0_367:                               // %pass7829
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2555, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2557, %r2555, %r2496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2623, %r534, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2560, %r531, %r2495, %r2557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2626, %r531, %r2496, %r2623;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2712, %r2713}, {%r575, %r578}, {%r2560, %r2626}, {%r2695, %r2695}, %r3657, 0;
	// end inline asm
	mov.u16 	%rs686, 2;
	mov.u32 	%r3658, 1145324612;
	@%p224 bra 	LBB0_368;
	bra.uni 	LBB0_372;
LBB0_368:                               // %L22715
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs482, %rs4, 7;
	mov.u16 	%rs686, 2;
	add.s16 	%rs483, %rs482, -1;
	setp.lt.u16 	%p360, %rs483, 3;
	@%p360 bra 	LBB0_372;
// %bb.369:                             // %L22715
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs484, %rs482, -4;
	setp.lt.u16 	%p361, %rs484, 3;
	@%p361 bra 	LBB0_371;
// %bb.370:                             // %L22739
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs686, %rs3;
LBB0_371:                               // %L22750
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3658, -286331154;
LBB0_372:                               // %L22758
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p362, %rs686, 2;
	@%p362 bra 	LBB0_374;
	bra.uni 	LBB0_373;
LBB0_374:                               // %pass7841
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2564, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2566, %r2564, %r2503;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2630, %r534, %r2502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2569, %r531, %r2502, %r2566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2633, %r531, %r2503, %r2630;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2724, %r2725}, {%r575, %r578}, {%r2569, %r2633}, {%r2695, %r2695}, %r3658, 0;
	// end inline asm
	mov.u16 	%rs688, 2;
	mov.u32 	%r3659, 1145324612;
	@%p224 bra 	LBB0_375;
	bra.uni 	LBB0_379;
LBB0_375:                               // %L22789
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs487, %rs4, 7;
	mov.u16 	%rs688, 2;
	add.s16 	%rs488, %rs487, -1;
	setp.lt.u16 	%p364, %rs488, 3;
	@%p364 bra 	LBB0_379;
// %bb.376:                             // %L22789
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs489, %rs487, -4;
	setp.lt.u16 	%p365, %rs489, 3;
	@%p365 bra 	LBB0_378;
// %bb.377:                             // %L22813
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs688, %rs3;
LBB0_378:                               // %L22824
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3659, -286331154;
LBB0_379:                               // %L22832
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p366, %rs688, 2;
	@%p366 bra 	LBB0_381;
	bra.uni 	LBB0_380;
LBB0_381:                               // %pass7853
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2573, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2575, %r2573, %r2510;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r534, %r2509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2578, %r531, %r2509, %r2575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r531, %r2510, %r2637;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2736, %r2737}, {%r575, %r578}, {%r2578, %r2640}, {%r2695, %r2695}, %r3659, 0;
	// end inline asm
	mov.u16 	%rs690, 2;
	mov.u32 	%r3660, 1145324612;
	@%p224 bra 	LBB0_382;
	bra.uni 	LBB0_386;
LBB0_382:                               // %L22863
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs492, %rs4, 7;
	mov.u16 	%rs690, 2;
	add.s16 	%rs493, %rs492, -1;
	setp.lt.u16 	%p368, %rs493, 3;
	@%p368 bra 	LBB0_386;
// %bb.383:                             // %L22863
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs494, %rs492, -4;
	setp.lt.u16 	%p369, %rs494, 3;
	@%p369 bra 	LBB0_385;
// %bb.384:                             // %L22887
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs690, %rs3;
LBB0_385:                               // %L22898
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3660, -286331154;
LBB0_386:                               // %L22906
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p370, %rs690, 2;
	@%p370 bra 	LBB0_388;
	bra.uni 	LBB0_387;
LBB0_388:                               // %pass7865
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2582, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2584, %r2582, %r2517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2644, %r534, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2587, %r531, %r2516, %r2584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2647, %r531, %r2517, %r2644;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2748, %r2749}, {%r575, %r578}, {%r2587, %r2647}, {%r2695, %r2695}, %r3660, 0;
	// end inline asm
	mov.u16 	%rs692, 2;
	mov.u32 	%r3661, 1145324612;
	@%p224 bra 	LBB0_389;
	bra.uni 	LBB0_393;
LBB0_389:                               // %L22937
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs497, %rs4, 7;
	mov.u16 	%rs692, 2;
	add.s16 	%rs498, %rs497, -1;
	setp.lt.u16 	%p372, %rs498, 3;
	@%p372 bra 	LBB0_393;
// %bb.390:                             // %L22937
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs499, %rs497, -4;
	setp.lt.u16 	%p373, %rs499, 3;
	@%p373 bra 	LBB0_392;
// %bb.391:                             // %L22961
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs692, %rs3;
LBB0_392:                               // %L22972
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3661, -286331154;
LBB0_393:                               // %L22980
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p374, %rs692, 2;
	@%p374 bra 	LBB0_395;
	bra.uni 	LBB0_394;
LBB0_395:                               // %pass7877
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2591, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2593, %r2591, %r2524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r534, %r2523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2596, %r531, %r2523, %r2593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2654, %r531, %r2524, %r2651;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2760, %r2761}, {%r575, %r578}, {%r2596, %r2654}, {%r2695, %r2695}, %r3661, 0;
	// end inline asm
	mov.u16 	%rs694, 2;
	mov.u32 	%r3662, 1145324612;
	@%p224 bra 	LBB0_396;
	bra.uni 	LBB0_400;
LBB0_396:                               // %L23011
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs502, %rs4, 7;
	mov.u16 	%rs694, 2;
	add.s16 	%rs503, %rs502, -1;
	setp.lt.u16 	%p376, %rs503, 3;
	@%p376 bra 	LBB0_400;
// %bb.397:                             // %L23011
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs504, %rs502, -4;
	setp.lt.u16 	%p377, %rs504, 3;
	@%p377 bra 	LBB0_399;
// %bb.398:                             // %L23035
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs694, %rs3;
LBB0_399:                               // %L23046
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3662, -286331154;
LBB0_400:                               // %L23054
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p378, %rs694, 2;
	@%p378 bra 	LBB0_402;
	bra.uni 	LBB0_401;
LBB0_402:                               // %pass7889
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2600, %r534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2602, %r2600, %r2531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2658, %r534, %r2530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2605, %r531, %r2530, %r2602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2661, %r531, %r2531, %r2658;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2838, %r2839}, {%r575, %r578}, {%r2605, %r2661}, {%r2695, %r2695}, %r3662, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2781, %r2688, %r2689, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2785, %r2688, %r2689, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2789, %r2700, %r2701, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2793, %r2700, %r2701, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2797, %r2712, %r2713, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2801, %r2712, %r2713, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2805, %r2724, %r2725, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2809, %r2724, %r2725, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2813, %r2736, %r2737, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2817, %r2736, %r2737, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2821, %r2748, %r2749, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2825, %r2748, %r2749, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2829, %r2760, %r2761, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2833, %r2760, %r2761, %r841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2837, %r2838, %r2839, %r837;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2841, %r2838, %r2839, %r841;
	// end inline asm
	add.s16 	%rs506, %rs5, %rs72;
	add.s16 	%rs507, %rs506, -5;
	mul.hi.s16 	%rs508, %rs507, 10923;
	shr.u16 	%rs509, %rs508, 15;
	add.s16 	%rs510, %rs508, %rs509;
	mul.lo.s16 	%rs511, %rs510, 6;
	sub.s16 	%rs512, %rs507, %rs511;
	mul.wide.s16 	%r2892, %rs512, 16;
	add.s32 	%r2893, %r2892, %r113;
	add.s32 	%r2894, %r2893, %r114;
	add.s32 	%r2895, %r2894, %r115;
	or.b32  	%r2896, %r2895, %r87;
	or.b32  	%r2897, %r2896, %r66;
	add.s32 	%r2898, %r116, %r2897;
	mul.wide.s32 	%rd261, %r2898, 4;
	add.s64 	%rd263, %rd45, %rd261;
	st.shared.u32 	[%rd263], %r2781;
	add.s32 	%r2899, %r117, %r2892;
	add.s32 	%r2900, %r2899, %r114;
	add.s32 	%r2901, %r2900, %r115;
	or.b32  	%r2902, %r2901, %r87;
	or.b32  	%r2903, %r2902, %r66;
	add.s32 	%r2904, %r116, %r2903;
	mul.wide.s32 	%rd264, %r2904, 4;
	add.s64 	%rd265, %rd45, %rd264;
	st.shared.u32 	[%rd265], %r2785;
	add.s32 	%r2905, %r2895, %r118;
	add.s32 	%r2906, %r2905, %r116;
	mul.wide.s32 	%rd266, %r2906, 4;
	add.s64 	%rd267, %rd45, %rd266;
	st.shared.u32 	[%rd267], %r2789;
	add.s32 	%r2907, %r2901, %r118;
	add.s32 	%r2908, %r2907, %r116;
	mul.wide.s32 	%rd268, %r2908, 4;
	add.s64 	%rd269, %rd45, %rd268;
	st.shared.u32 	[%rd269], %r2793;
	add.s32 	%r2909, %r119, %r2892;
	add.s32 	%r2910, %r2909, %r114;
	add.s32 	%r2911, %r2910, %r115;
	or.b32  	%r2912, %r2911, %r87;
	or.b32  	%r2913, %r2912, %r66;
	add.s32 	%r2914, %r116, %r2913;
	mul.wide.s32 	%rd270, %r2914, 4;
	add.s64 	%rd271, %rd45, %rd270;
	st.shared.u32 	[%rd271], %r2797;
	add.s32 	%r2915, %r120, %r2892;
	add.s32 	%r2916, %r2915, %r114;
	add.s32 	%r2917, %r2916, %r115;
	or.b32  	%r2918, %r2917, %r87;
	or.b32  	%r2919, %r2918, %r66;
	add.s32 	%r2920, %r116, %r2919;
	mul.wide.s32 	%rd272, %r2920, 4;
	add.s64 	%rd273, %rd45, %rd272;
	st.shared.u32 	[%rd273], %r2801;
	add.s32 	%r2921, %r2911, %r118;
	add.s32 	%r2922, %r2921, %r116;
	mul.wide.s32 	%rd274, %r2922, 4;
	add.s64 	%rd275, %rd45, %rd274;
	st.shared.u32 	[%rd275], %r2805;
	add.s32 	%r2923, %r2917, %r118;
	add.s32 	%r2924, %r2923, %r116;
	mul.wide.s32 	%rd276, %r2924, 4;
	add.s64 	%rd277, %rd45, %rd276;
	st.shared.u32 	[%rd277], %r2809;
	add.s16 	%rs513, %rs506, -2;
	mul.hi.s16 	%rs514, %rs513, 10923;
	shr.u16 	%rs515, %rs514, 15;
	add.s16 	%rs516, %rs514, %rs515;
	mul.lo.s16 	%rs517, %rs516, 6;
	sub.s16 	%rs518, %rs513, %rs517;
	mul.wide.s16 	%r2925, %rs518, 16;
	add.s32 	%r2926, %r2925, %r113;
	add.s32 	%r2927, %r2926, %r114;
	add.s32 	%r2928, %r2927, %r115;
	or.b32  	%r2929, %r2928, %r87;
	or.b32  	%r2930, %r2929, %r66;
	add.s32 	%r2931, %r116, %r2930;
	mul.wide.s32 	%rd278, %r2931, 4;
	add.s64 	%rd279, %rd45, %rd278;
	st.shared.u32 	[%rd279], %r2813;
	add.s32 	%r2932, %r117, %r2925;
	add.s32 	%r2933, %r2932, %r114;
	add.s32 	%r2934, %r2933, %r115;
	or.b32  	%r2935, %r2934, %r87;
	or.b32  	%r2936, %r2935, %r66;
	add.s32 	%r2937, %r116, %r2936;
	mul.wide.s32 	%rd280, %r2937, 4;
	add.s64 	%rd281, %rd45, %rd280;
	st.shared.u32 	[%rd281], %r2817;
	add.s32 	%r2938, %r2928, %r118;
	add.s32 	%r2939, %r2938, %r116;
	mul.wide.s32 	%rd282, %r2939, 4;
	add.s64 	%rd283, %rd45, %rd282;
	st.shared.u32 	[%rd283], %r2821;
	add.s32 	%r2940, %r2934, %r118;
	add.s32 	%r2941, %r2940, %r116;
	mul.wide.s32 	%rd284, %r2941, 4;
	add.s64 	%rd285, %rd45, %rd284;
	st.shared.u32 	[%rd285], %r2825;
	add.s32 	%r2942, %r119, %r2925;
	add.s32 	%r2943, %r2942, %r114;
	add.s32 	%r2944, %r2943, %r115;
	or.b32  	%r2945, %r2944, %r87;
	or.b32  	%r2946, %r2945, %r66;
	add.s32 	%r2947, %r116, %r2946;
	mul.wide.s32 	%rd286, %r2947, 4;
	add.s64 	%rd287, %rd45, %rd286;
	st.shared.u32 	[%rd287], %r2829;
	add.s32 	%r2948, %r120, %r2925;
	add.s32 	%r2949, %r2948, %r114;
	add.s32 	%r2950, %r2949, %r115;
	or.b32  	%r2951, %r2950, %r87;
	or.b32  	%r2952, %r2951, %r66;
	add.s32 	%r2953, %r116, %r2952;
	mul.wide.s32 	%rd288, %r2953, 4;
	add.s64 	%rd289, %rd45, %rd288;
	st.shared.u32 	[%rd289], %r2833;
	add.s32 	%r2954, %r2944, %r118;
	add.s32 	%r2955, %r2954, %r116;
	mul.wide.s32 	%rd290, %r2955, 4;
	add.s64 	%rd291, %rd45, %rd290;
	st.shared.u32 	[%rd291], %r2837;
	add.s32 	%r2956, %r2950, %r118;
	add.s32 	%r2957, %r2956, %r116;
	mul.wide.s32 	%rd292, %r2957, 4;
	add.s64 	%rd293, %rd45, %rd292;
	st.shared.u32 	[%rd293], %r2841;
	bar.sync 	0;
	add.s16 	%rs519, %rs72, -5;
	mul.hi.s16 	%rs520, %rs519, 10923;
	shr.u16 	%rs521, %rs520, 15;
	add.s16 	%rs522, %rs520, %rs521;
	mul.lo.s16 	%rs523, %rs522, 6;
	sub.s16 	%rs524, %rs519, %rs523;
	mul.wide.s16 	%r2958, %rs524, 16;
	add.s32 	%r2959, %r121, %r2958;
	or.b32  	%r2960, %r2959, %r64;
	add.s32 	%r2961, %r2960, %r122;
	or.b32  	%r2962, %r2961, %r123;
	add.s32 	%r2963, %r2962, %r124;
	add.s32 	%r2964, %r2963, %r125;
	add.s32 	%r2965, %r2964, %r126;
	mul.wide.s32 	%rd294, %r2965, 4;
	add.s64 	%rd295, %rd45, %rd294;
	ld.shared.u32 	%r2849, [%rd295];
	add.s32 	%r2966, %r2959, 8;
	or.b32  	%r2967, %r2966, %r64;
	add.s32 	%r2968, %r2967, %r122;
	or.b32  	%r2969, %r2968, %r123;
	add.s32 	%r2970, %r2969, %r124;
	add.s32 	%r2971, %r2970, %r125;
	add.s32 	%r2972, %r2971, %r126;
	mul.wide.s32 	%rd296, %r2972, 4;
	add.s64 	%rd297, %rd45, %rd296;
	ld.shared.u32 	%r2856, [%rd297];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2845, %r2846}, {%r587, %r590}, {%r2849}, {%r2695, %r2695};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2852, %r2853}, {%r587, %r590}, {%r2856}, {%r2695, %r2695};
	// end inline asm
	mov.u16 	%rs698, 2;
	mov.u32 	%r3665, 1145324612;
	@%p224 bra 	LBB0_403;
	bra.uni 	LBB0_412;
LBB0_403:                               // %L28626
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs526, %rs4, 7;
	mov.u16 	%rs698, 2;
	mov.u32 	%r3665, 1145324612;
	setp.gt.s16 	%p380, %rs526, 3;
	@%p380 bra 	LBB0_406;
// %bb.404:                             // %L28626
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3664, -286331154;
	add.s16 	%rs528, %rs526, -2;
	setp.lt.u16 	%p383, %rs528, 2;
	@%p383 bra 	LBB0_411;
// %bb.405:                             // %L28626
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p384, %rs526, 1;
	@%p384 bra 	LBB0_412;
	bra.uni 	LBB0_408;
LBB0_406:                               // %L28626
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs527, %rs526, -4;
	setp.lt.u16 	%p381, %rs527, 2;
	@%p381 bra 	LBB0_410;
// %bb.407:                             // %L28626
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p382, %rs526, 6;
	@%p382 bra 	LBB0_409;
LBB0_408:                               // %L28650
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs698, %rs3;
LBB0_409:                               // %L28657
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3665, -286331154;
LBB0_410:                               // %L28661
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3664, %r3665;
LBB0_411:                               // %L28665
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3665, %r3664;
LBB0_412:                               // %L28669
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p385, %rs698, 2;
	@%p385 bra 	LBB0_414;
	bra.uni 	LBB0_413;
LBB0_414:                               // %pass10189
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2859, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2861, %r2859, %r2846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2877, %r628, %r2845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2864, %r625, %r2845, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r625, %r2846, %r2877;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2976, %r2977}, {%r671, %r674}, {%r2864, %r2880}, {%r2695, %r2695}, %r3665, 0;
	// end inline asm
	mov.u16 	%rs702, 2;
	mov.u32 	%r3668, 1145324612;
	@%p224 bra 	LBB0_415;
	bra.uni 	LBB0_424;
LBB0_415:                               // %L28700
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs531, %rs4, 7;
	mov.u16 	%rs702, 2;
	mov.u32 	%r3668, 1145324612;
	setp.gt.s16 	%p387, %rs531, 3;
	@%p387 bra 	LBB0_418;
// %bb.416:                             // %L28700
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3667, -286331154;
	add.s16 	%rs533, %rs531, -2;
	setp.lt.u16 	%p390, %rs533, 2;
	@%p390 bra 	LBB0_423;
// %bb.417:                             // %L28700
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p391, %rs531, 1;
	@%p391 bra 	LBB0_424;
	bra.uni 	LBB0_420;
LBB0_418:                               // %L28700
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs532, %rs531, -4;
	setp.lt.u16 	%p388, %rs532, 2;
	@%p388 bra 	LBB0_422;
// %bb.419:                             // %L28700
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p389, %rs531, 6;
	@%p389 bra 	LBB0_421;
LBB0_420:                               // %L28724
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs702, %rs3;
LBB0_421:                               // %L28731
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3668, -286331154;
LBB0_422:                               // %L28735
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3667, %r3668;
LBB0_423:                               // %L28739
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3668, %r3667;
LBB0_424:                               // %L28743
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p392, %rs702, 2;
	@%p392 bra 	LBB0_426;
	bra.uni 	LBB0_425;
LBB0_426:                               // %pass10201
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r2868, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2870, %r2868, %r2853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2884, %r628, %r2852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r625, %r2852, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r625, %r2853, %r2884;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2989, %r2990}, {%r671, %r674}, {%r2873, %r2887}, {%r2695, %r2695}, %r3668, 0;
	// end inline asm
	add.s16 	%rs535, %rs72, -4;
	mul.hi.s16 	%rs536, %rs535, 10923;
	shr.u16 	%rs537, %rs536, 15;
	add.s16 	%rs538, %rs536, %rs537;
	mul.lo.s16 	%rs539, %rs538, 6;
	sub.s16 	%rs540, %rs535, %rs539;
	mul.wide.s16 	%r3064, %rs540, 16;
	add.s32 	%r3065, %r121, %r3064;
	or.b32  	%r3066, %r3065, %r64;
	add.s32 	%r3067, %r3066, %r122;
	or.b32  	%r3068, %r3067, %r123;
	add.s32 	%r3069, %r3068, %r124;
	add.s32 	%r3070, %r3069, %r125;
	add.s32 	%r3071, %r3070, %r126;
	mul.wide.s32 	%rd302, %r3071, 4;
	add.s64 	%rd304, %rd45, %rd302;
	ld.shared.u32 	%r3021, [%rd304];
	add.s32 	%r3072, %r3065, 8;
	or.b32  	%r3073, %r3072, %r64;
	add.s32 	%r3074, %r3073, %r122;
	or.b32  	%r3075, %r3074, %r123;
	add.s32 	%r3076, %r3075, %r124;
	add.s32 	%r3077, %r3076, %r125;
	add.s32 	%r3078, %r3077, %r126;
	mul.wide.s32 	%rd305, %r3078, 4;
	add.s64 	%rd306, %rd45, %rd305;
	ld.shared.u32 	%r3028, [%rd306];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3017, %r3018}, {%r587, %r590}, {%r3021}, {%r2695, %r2695};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3024, %r3025}, {%r587, %r590}, {%r3028}, {%r2695, %r2695};
	// end inline asm
	mov.u16 	%rs706, 2;
	mov.u32 	%r3671, 1145324612;
	@%p224 bra 	LBB0_427;
	bra.uni 	LBB0_436;
LBB0_427:                               // %L29618
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs542, %rs4, 7;
	mov.u16 	%rs706, 2;
	mov.u32 	%r3671, 1145324612;
	setp.gt.s16 	%p394, %rs542, 3;
	@%p394 bra 	LBB0_430;
// %bb.428:                             // %L29618
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3670, -286331154;
	add.s16 	%rs544, %rs542, -2;
	setp.lt.u16 	%p397, %rs544, 2;
	@%p397 bra 	LBB0_435;
// %bb.429:                             // %L29618
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p398, %rs542, 1;
	@%p398 bra 	LBB0_436;
	bra.uni 	LBB0_432;
LBB0_430:                               // %L29618
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs543, %rs542, -4;
	setp.lt.u16 	%p395, %rs543, 2;
	@%p395 bra 	LBB0_434;
// %bb.431:                             // %L29618
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p396, %rs542, 6;
	@%p396 bra 	LBB0_433;
LBB0_432:                               // %L29642
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs706, %rs3;
LBB0_433:                               // %L29649
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3671, -286331154;
LBB0_434:                               // %L29653
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3670, %r3671;
LBB0_435:                               // %L29657
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3671, %r3670;
LBB0_436:                               // %L29661
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p399, %rs706, 2;
	@%p399 bra 	LBB0_438;
	bra.uni 	LBB0_437;
LBB0_438:                               // %pass10533
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r3031, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3033, %r3031, %r3018;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3049, %r628, %r3017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3036, %r625, %r3017, %r3033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r625, %r3018, %r3049;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3082, %r3083}, {%r671, %r674}, {%r3036, %r3052}, {%r2695, %r2695}, %r3671, 0;
	// end inline asm
	mov.u16 	%rs710, 2;
	mov.u32 	%r3674, 1145324612;
	@%p224 bra 	LBB0_439;
	bra.uni 	LBB0_448;
LBB0_439:                               // %L29692
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs547, %rs4, 7;
	mov.u16 	%rs710, 2;
	mov.u32 	%r3674, 1145324612;
	setp.gt.s16 	%p401, %rs547, 3;
	@%p401 bra 	LBB0_442;
// %bb.440:                             // %L29692
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3673, -286331154;
	add.s16 	%rs549, %rs547, -2;
	setp.lt.u16 	%p404, %rs549, 2;
	@%p404 bra 	LBB0_447;
// %bb.441:                             // %L29692
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p405, %rs547, 1;
	@%p405 bra 	LBB0_448;
	bra.uni 	LBB0_444;
LBB0_442:                               // %L29692
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs548, %rs547, -4;
	setp.lt.u16 	%p402, %rs548, 2;
	@%p402 bra 	LBB0_446;
// %bb.443:                             // %L29692
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p403, %rs547, 6;
	@%p403 bra 	LBB0_445;
LBB0_444:                               // %L29716
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs710, %rs3;
LBB0_445:                               // %L29723
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3674, -286331154;
LBB0_446:                               // %L29727
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3673, %r3674;
LBB0_447:                               // %L29731
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3674, %r3673;
LBB0_448:                               // %L29735
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p406, %rs710, 2;
	@%p406 bra 	LBB0_587;
	bra.uni 	LBB0_449;
LBB0_587:                               // %pass10545
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2998, %r2976, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3001, %r2977, %r2977, %r2998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r2989, %r2989, %r3001;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3040, %r628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3009, %r2990, %r2990, %r3005;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3042, %r3040, %r3025;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r628, %r3024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3013, %r1719, %r3009, %r153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3045, %r625, %r3024, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r625, %r3025, %r3056;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3112, %r3116}, {%r671, %r674}, {%r3045, %r3059}, {%r2695, %r2695}, %r3674, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3104, %r3082, %r3082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3107, %r3083, %r3083, %r3104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3111, %r3112, %r3112, %r3107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3115, %r3116, %r3116, %r3111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r431, %r1719, %r3115, %r3013;
	// end inline asm
	add.s32 	%r429, %r151, 2;
	setp.eq.s32 	%p407, %r429, 40;
	@%p407 bra 	LBB0_450;
	bra.uni 	LBB0_588;
LBB0_450:                               // %L29769
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.gt.u32 	%p408, %r5, 7;
	@%p408 bra 	LBB0_452;
// %bb.451:                             // %L29835
                                        //   in Loop: Header=BB0_346 Depth=2
	mul.lo.s32 	%r3123, %r152, 192;
	or.b32  	%r3124, %r127, %r3123;
	add.s32 	%r3125, %r3124, %r129;
	add.s32 	%r3126, %r3125, %r128;
	mul.wide.u32 	%rd311, %r3126, 4;
	add.s64 	%rd13, %rd4, %rd311;
	st.global.u32 	[%rd13], %r431;
LBB0_452:                               // %L29988
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s32 	%r152, %r152, 1;
	mov.u32 	%r429, 0;
	mov.u32 	%r431, %r429;
LBB0_588:                               // %oksrem10639
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs551, %rs72, -3;
	mul.hi.s16 	%rs552, %rs551, 10923;
	shr.u16 	%rs553, %rs552, 15;
	add.s16 	%rs554, %rs552, %rs553;
	mul.lo.s16 	%rs555, %rs554, 6;
	sub.s16 	%rs556, %rs551, %rs555;
	mul.wide.s16 	%r3175, %rs556, 16;
	add.s32 	%r3176, %r121, %r3175;
	or.b32  	%r3177, %r3176, %r64;
	add.s32 	%r3178, %r3177, %r122;
	or.b32  	%r3179, %r3178, %r123;
	add.s32 	%r3180, %r3179, %r124;
	add.s32 	%r3181, %r3180, %r125;
	add.s32 	%r3182, %r3181, %r126;
	mul.wide.s32 	%rd312, %r3182, 4;
	add.s64 	%rd314, %rd45, %rd312;
	ld.shared.u32 	%r3132, [%rd314];
	add.s32 	%r3183, %r3176, 8;
	or.b32  	%r3184, %r3183, %r64;
	add.s32 	%r3185, %r3184, %r122;
	or.b32  	%r3186, %r3185, %r123;
	add.s32 	%r3187, %r3186, %r124;
	add.s32 	%r3188, %r3187, %r125;
	add.s32 	%r3189, %r3188, %r126;
	mul.wide.s32 	%rd315, %r3189, 4;
	add.s64 	%rd316, %rd45, %rd315;
	ld.shared.u32 	%r3139, [%rd316];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3128, %r3129}, {%r587, %r590}, {%r3132}, {%r2695, %r2695};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3135, %r3136}, {%r587, %r590}, {%r3139}, {%r2695, %r2695};
	// end inline asm
	mov.u16 	%rs714, 2;
	mov.u32 	%r3677, 1145324612;
	@%p224 bra 	LBB0_453;
	bra.uni 	LBB0_462;
LBB0_453:                               // %L30837
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs558, %rs4, 7;
	mov.u16 	%rs714, 2;
	mov.u32 	%r3677, 1145324612;
	setp.gt.s16 	%p410, %rs558, 3;
	@%p410 bra 	LBB0_456;
// %bb.454:                             // %L30837
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3676, -286331154;
	add.s16 	%rs560, %rs558, -2;
	setp.lt.u16 	%p413, %rs560, 2;
	@%p413 bra 	LBB0_461;
// %bb.455:                             // %L30837
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p414, %rs558, 1;
	@%p414 bra 	LBB0_462;
	bra.uni 	LBB0_458;
LBB0_456:                               // %L30837
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs559, %rs558, -4;
	setp.lt.u16 	%p411, %rs559, 2;
	@%p411 bra 	LBB0_460;
// %bb.457:                             // %L30837
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p412, %rs558, 6;
	@%p412 bra 	LBB0_459;
LBB0_458:                               // %L30861
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs714, %rs3;
LBB0_459:                               // %L30868
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3677, -286331154;
LBB0_460:                               // %L30872
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3676, %r3677;
LBB0_461:                               // %L30876
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3677, %r3676;
LBB0_462:                               // %L30880
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p415, %rs714, 2;
	@%p415 bra 	LBB0_464;
	bra.uni 	LBB0_463;
LBB0_464:                               // %pass10945
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r3142, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3144, %r3142, %r3129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3160, %r628, %r3128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r625, %r3128, %r3144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r625, %r3129, %r3160;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3193, %r3194}, {%r671, %r674}, {%r3147, %r3163}, {%r2695, %r2695}, %r3677, 0;
	// end inline asm
	mov.u16 	%rs718, 2;
	mov.u32 	%r3680, 1145324612;
	@%p224 bra 	LBB0_465;
	bra.uni 	LBB0_474;
LBB0_465:                               // %L30911
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs563, %rs4, 7;
	mov.u16 	%rs718, 2;
	mov.u32 	%r3680, 1145324612;
	setp.gt.s16 	%p417, %rs563, 3;
	@%p417 bra 	LBB0_468;
// %bb.466:                             // %L30911
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3679, -286331154;
	add.s16 	%rs565, %rs563, -2;
	setp.lt.u16 	%p420, %rs565, 2;
	@%p420 bra 	LBB0_473;
// %bb.467:                             // %L30911
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p421, %rs563, 1;
	@%p421 bra 	LBB0_474;
	bra.uni 	LBB0_470;
LBB0_468:                               // %L30911
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs564, %rs563, -4;
	setp.lt.u16 	%p418, %rs564, 2;
	@%p418 bra 	LBB0_472;
// %bb.469:                             // %L30911
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p419, %rs563, 6;
	@%p419 bra 	LBB0_471;
LBB0_470:                               // %L30935
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs718, %rs3;
LBB0_471:                               // %L30942
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3680, -286331154;
LBB0_472:                               // %L30946
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3679, %r3680;
LBB0_473:                               // %L30950
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3680, %r3679;
LBB0_474:                               // %L30954
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p422, %rs718, 2;
	@%p422 bra 	LBB0_476;
	bra.uni 	LBB0_475;
LBB0_476:                               // %pass10957
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r3151, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3153, %r3151, %r3136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3167, %r628, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3156, %r625, %r3135, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3170, %r625, %r3136, %r3167;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3206, %r3207}, {%r671, %r674}, {%r3156, %r3170}, {%r2695, %r2695}, %r3680, 0;
	// end inline asm
	add.s16 	%rs567, %rs72, -2;
	mul.hi.s16 	%rs568, %rs567, 10923;
	shr.u16 	%rs569, %rs568, 15;
	add.s16 	%rs570, %rs568, %rs569;
	mul.lo.s16 	%rs571, %rs570, 6;
	sub.s16 	%rs572, %rs567, %rs571;
	mul.wide.s16 	%r3281, %rs572, 16;
	add.s32 	%r3282, %r121, %r3281;
	or.b32  	%r3283, %r3282, %r64;
	add.s32 	%r3284, %r3283, %r122;
	or.b32  	%r3285, %r3284, %r123;
	add.s32 	%r3286, %r3285, %r124;
	add.s32 	%r3287, %r3286, %r125;
	add.s32 	%r3288, %r3287, %r126;
	mul.wide.s32 	%rd321, %r3288, 4;
	add.s64 	%rd323, %rd45, %rd321;
	ld.shared.u32 	%r3238, [%rd323];
	add.s32 	%r3289, %r3282, 8;
	or.b32  	%r3290, %r3289, %r64;
	add.s32 	%r3291, %r3290, %r122;
	or.b32  	%r3292, %r3291, %r123;
	add.s32 	%r3293, %r3292, %r124;
	add.s32 	%r3294, %r3293, %r125;
	add.s32 	%r3295, %r3294, %r126;
	mul.wide.s32 	%rd324, %r3295, 4;
	add.s64 	%rd325, %rd45, %rd324;
	ld.shared.u32 	%r3245, [%rd325];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3234, %r3235}, {%r587, %r590}, {%r3238}, {%r2695, %r2695};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3241, %r3242}, {%r587, %r590}, {%r3245}, {%r2695, %r2695};
	// end inline asm
	mov.u16 	%rs722, 2;
	mov.u32 	%r3683, 1145324612;
	@%p224 bra 	LBB0_477;
	bra.uni 	LBB0_486;
LBB0_477:                               // %L31829
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs574, %rs4, 7;
	mov.u16 	%rs722, 2;
	mov.u32 	%r3683, 1145324612;
	setp.gt.s16 	%p424, %rs574, 3;
	@%p424 bra 	LBB0_480;
// %bb.478:                             // %L31829
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3682, -286331154;
	add.s16 	%rs576, %rs574, -2;
	setp.lt.u16 	%p427, %rs576, 2;
	@%p427 bra 	LBB0_485;
// %bb.479:                             // %L31829
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p428, %rs574, 1;
	@%p428 bra 	LBB0_486;
	bra.uni 	LBB0_482;
LBB0_480:                               // %L31829
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs575, %rs574, -4;
	setp.lt.u16 	%p425, %rs575, 2;
	@%p425 bra 	LBB0_484;
// %bb.481:                             // %L31829
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p426, %rs574, 6;
	@%p426 bra 	LBB0_483;
LBB0_482:                               // %L31853
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs722, %rs3;
LBB0_483:                               // %L31860
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3683, -286331154;
LBB0_484:                               // %L31864
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3682, %r3683;
LBB0_485:                               // %L31868
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3683, %r3682;
LBB0_486:                               // %L31872
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p429, %rs722, 2;
	@%p429 bra 	LBB0_488;
	bra.uni 	LBB0_487;
LBB0_488:                               // %pass11289
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r3248, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3250, %r3248, %r3235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3266, %r628, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3253, %r625, %r3234, %r3250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3269, %r625, %r3235, %r3266;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3299, %r3300}, {%r671, %r674}, {%r3253, %r3269}, {%r2695, %r2695}, %r3683, 0;
	// end inline asm
	mov.u16 	%rs726, 2;
	mov.u32 	%r3686, 1145324612;
	@%p224 bra 	LBB0_489;
	bra.uni 	LBB0_498;
LBB0_489:                               // %L31903
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs579, %rs4, 7;
	mov.u16 	%rs726, 2;
	mov.u32 	%r3686, 1145324612;
	setp.gt.s16 	%p431, %rs579, 3;
	@%p431 bra 	LBB0_492;
// %bb.490:                             // %L31903
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3685, -286331154;
	add.s16 	%rs581, %rs579, -2;
	setp.lt.u16 	%p434, %rs581, 2;
	@%p434 bra 	LBB0_497;
// %bb.491:                             // %L31903
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p435, %rs579, 1;
	@%p435 bra 	LBB0_498;
	bra.uni 	LBB0_494;
LBB0_492:                               // %L31903
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs580, %rs579, -4;
	setp.lt.u16 	%p432, %rs580, 2;
	@%p432 bra 	LBB0_496;
// %bb.493:                             // %L31903
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p433, %rs579, 6;
	@%p433 bra 	LBB0_495;
LBB0_494:                               // %L31927
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs726, %rs3;
LBB0_495:                               // %L31934
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3686, -286331154;
LBB0_496:                               // %L31938
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3685, %r3686;
LBB0_497:                               // %L31942
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3686, %r3685;
LBB0_498:                               // %L31946
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p436, %rs726, 2;
	@%p436 bra 	LBB0_589;
	bra.uni 	LBB0_499;
LBB0_589:                               // %pass11301
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3215, %r3193, %r3193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r3194, %r3194, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r3206, %r3206, %r3218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3257, %r628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r3207, %r3207, %r3222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3259, %r3257, %r3242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3273, %r628, %r3241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r1719, %r3226, %r431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3262, %r625, %r3241, %r3259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3276, %r625, %r3242, %r3273;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3329, %r3333}, {%r671, %r674}, {%r3262, %r3276}, {%r2695, %r2695}, %r3686, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3321, %r3299, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3324, %r3300, %r3300, %r3321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3328, %r3329, %r3329, %r3324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3332, %r3333, %r3333, %r3328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r449, %r1719, %r3332, %r3230;
	// end inline asm
	add.s32 	%r447, %r429, 2;
	setp.eq.s32 	%p437, %r447, 40;
	@%p437 bra 	LBB0_500;
	bra.uni 	LBB0_590;
LBB0_500:                               // %L31980
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.gt.u32 	%p438, %r5, 7;
	@%p438 bra 	LBB0_502;
// %bb.501:                             // %L32046
                                        //   in Loop: Header=BB0_346 Depth=2
	mul.lo.s32 	%r3340, %r152, 192;
	or.b32  	%r3341, %r127, %r3340;
	add.s32 	%r3342, %r3341, %r129;
	add.s32 	%r3343, %r3342, %r128;
	mul.wide.u32 	%rd330, %r3343, 4;
	add.s64 	%rd14, %rd4, %rd330;
	st.global.u32 	[%rd14], %r449;
LBB0_502:                               // %L32199
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s32 	%r152, %r152, 1;
	mov.u32 	%r447, 0;
	mov.u32 	%r449, %r447;
LBB0_590:                               // %oksrem11395
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs583, %rs72, -1;
	mul.hi.s16 	%rs584, %rs583, 10923;
	shr.u16 	%rs585, %rs584, 15;
	add.s16 	%rs586, %rs584, %rs585;
	mul.lo.s16 	%rs587, %rs586, 6;
	sub.s16 	%rs588, %rs583, %rs587;
	mul.wide.s16 	%r3392, %rs588, 16;
	add.s32 	%r3393, %r121, %r3392;
	or.b32  	%r3394, %r3393, %r64;
	add.s32 	%r3395, %r3394, %r122;
	or.b32  	%r3396, %r3395, %r123;
	add.s32 	%r3397, %r3396, %r124;
	add.s32 	%r3398, %r3397, %r125;
	add.s32 	%r3399, %r3398, %r126;
	mul.wide.s32 	%rd331, %r3399, 4;
	add.s64 	%rd333, %rd45, %rd331;
	ld.shared.u32 	%r3349, [%rd333];
	add.s32 	%r3400, %r3393, 8;
	or.b32  	%r3401, %r3400, %r64;
	add.s32 	%r3402, %r3401, %r122;
	or.b32  	%r3403, %r3402, %r123;
	add.s32 	%r3404, %r3403, %r124;
	add.s32 	%r3405, %r3404, %r125;
	add.s32 	%r3406, %r3405, %r126;
	mul.wide.s32 	%rd334, %r3406, 4;
	add.s64 	%rd335, %rd45, %rd334;
	ld.shared.u32 	%r3356, [%rd335];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3345, %r3346}, {%r587, %r590}, {%r3349}, {%r2695, %r2695};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3352, %r3353}, {%r587, %r590}, {%r3356}, {%r2695, %r2695};
	// end inline asm
	mov.u16 	%rs730, 2;
	mov.u32 	%r3689, 1145324612;
	@%p224 bra 	LBB0_503;
	bra.uni 	LBB0_512;
LBB0_503:                               // %L33048
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs590, %rs4, 7;
	mov.u16 	%rs730, 2;
	mov.u32 	%r3689, 1145324612;
	setp.gt.s16 	%p440, %rs590, 3;
	@%p440 bra 	LBB0_506;
// %bb.504:                             // %L33048
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3688, -286331154;
	add.s16 	%rs592, %rs590, -2;
	setp.lt.u16 	%p443, %rs592, 2;
	@%p443 bra 	LBB0_511;
// %bb.505:                             // %L33048
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p444, %rs590, 1;
	@%p444 bra 	LBB0_512;
	bra.uni 	LBB0_508;
LBB0_506:                               // %L33048
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs591, %rs590, -4;
	setp.lt.u16 	%p441, %rs591, 2;
	@%p441 bra 	LBB0_510;
// %bb.507:                             // %L33048
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p442, %rs590, 6;
	@%p442 bra 	LBB0_509;
LBB0_508:                               // %L33072
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs730, %rs3;
LBB0_509:                               // %L33079
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3689, -286331154;
LBB0_510:                               // %L33083
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3688, %r3689;
LBB0_511:                               // %L33087
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3689, %r3688;
LBB0_512:                               // %L33091
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p445, %rs730, 2;
	@%p445 bra 	LBB0_514;
	bra.uni 	LBB0_513;
LBB0_514:                               // %pass11701
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r3359, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3361, %r3359, %r3346;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3377, %r628, %r3345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r625, %r3345, %r3361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3380, %r625, %r3346, %r3377;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3410, %r3411}, {%r671, %r674}, {%r3364, %r3380}, {%r2695, %r2695}, %r3689, 0;
	// end inline asm
	mov.u16 	%rs734, 2;
	mov.u32 	%r3692, 1145324612;
	@%p224 bra 	LBB0_515;
	bra.uni 	LBB0_524;
LBB0_515:                               // %L33122
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs595, %rs4, 7;
	mov.u16 	%rs734, 2;
	mov.u32 	%r3692, 1145324612;
	setp.gt.s16 	%p447, %rs595, 3;
	@%p447 bra 	LBB0_518;
// %bb.516:                             // %L33122
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3691, -286331154;
	add.s16 	%rs597, %rs595, -2;
	setp.lt.u16 	%p450, %rs597, 2;
	@%p450 bra 	LBB0_523;
// %bb.517:                             // %L33122
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p451, %rs595, 1;
	@%p451 bra 	LBB0_524;
	bra.uni 	LBB0_520;
LBB0_518:                               // %L33122
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs596, %rs595, -4;
	setp.lt.u16 	%p448, %rs596, 2;
	@%p448 bra 	LBB0_522;
// %bb.519:                             // %L33122
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p449, %rs595, 6;
	@%p449 bra 	LBB0_521;
LBB0_520:                               // %L33146
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs734, %rs3;
LBB0_521:                               // %L33153
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3692, -286331154;
LBB0_522:                               // %L33157
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3691, %r3692;
LBB0_523:                               // %L33161
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3692, %r3691;
LBB0_524:                               // %L33165
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p452, %rs734, 2;
	@%p452 bra 	LBB0_526;
	bra.uni 	LBB0_525;
LBB0_526:                               // %pass11713
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r3368, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3370, %r3368, %r3353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3384, %r628, %r3352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3373, %r625, %r3352, %r3370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3387, %r625, %r3353, %r3384;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3423, %r3424}, {%r671, %r674}, {%r3373, %r3387}, {%r2695, %r2695}, %r3692, 0;
	// end inline asm
	mul.hi.s16 	%rs599, %rs72, 10923;
	shr.u16 	%rs600, %rs599, 15;
	add.s16 	%rs601, %rs599, %rs600;
	mul.lo.s16 	%rs602, %rs601, 6;
	sub.s16 	%rs603, %rs72, %rs602;
	mul.wide.s16 	%r3498, %rs603, 16;
	add.s32 	%r3499, %r121, %r3498;
	or.b32  	%r3500, %r3499, %r64;
	add.s32 	%r3501, %r3500, %r122;
	or.b32  	%r3502, %r3501, %r123;
	add.s32 	%r3503, %r3502, %r124;
	add.s32 	%r3504, %r3503, %r125;
	add.s32 	%r3505, %r3504, %r126;
	mul.wide.s32 	%rd340, %r3505, 4;
	add.s64 	%rd342, %rd45, %rd340;
	ld.shared.u32 	%r3455, [%rd342];
	add.s32 	%r3506, %r3499, 8;
	or.b32  	%r3507, %r3506, %r64;
	add.s32 	%r3508, %r3507, %r122;
	or.b32  	%r3509, %r3508, %r123;
	add.s32 	%r3510, %r3509, %r124;
	add.s32 	%r3511, %r3510, %r125;
	add.s32 	%r3512, %r3511, %r126;
	mul.wide.s32 	%rd343, %r3512, 4;
	add.s64 	%rd344, %rd45, %rd343;
	ld.shared.u32 	%r3462, [%rd344];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3451, %r3452}, {%r587, %r590}, {%r3455}, {%r2695, %r2695};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3458, %r3459}, {%r587, %r590}, {%r3462}, {%r2695, %r2695};
	// end inline asm
	mov.u16 	%rs738, 2;
	mov.u32 	%r3695, 1145324612;
	@%p224 bra 	LBB0_527;
	bra.uni 	LBB0_536;
LBB0_527:                               // %L34040
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs605, %rs4, 7;
	mov.u16 	%rs738, 2;
	mov.u32 	%r3695, 1145324612;
	setp.gt.s16 	%p454, %rs605, 3;
	@%p454 bra 	LBB0_530;
// %bb.528:                             // %L34040
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3694, -286331154;
	add.s16 	%rs607, %rs605, -2;
	setp.lt.u16 	%p457, %rs607, 2;
	@%p457 bra 	LBB0_535;
// %bb.529:                             // %L34040
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p458, %rs605, 1;
	@%p458 bra 	LBB0_536;
	bra.uni 	LBB0_532;
LBB0_530:                               // %L34040
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs606, %rs605, -4;
	setp.lt.u16 	%p455, %rs606, 2;
	@%p455 bra 	LBB0_534;
// %bb.531:                             // %L34040
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p456, %rs605, 6;
	@%p456 bra 	LBB0_533;
LBB0_532:                               // %L34064
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs738, %rs3;
LBB0_533:                               // %L34071
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3695, -286331154;
LBB0_534:                               // %L34075
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3694, %r3695;
LBB0_535:                               // %L34079
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3695, %r3694;
LBB0_536:                               // %L34083
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p459, %rs738, 2;
	@%p459 bra 	LBB0_538;
	bra.uni 	LBB0_537;
LBB0_538:                               // %pass12045
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	neg.f16x2 %r3465, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3467, %r3465, %r3452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3483, %r628, %r3451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3470, %r625, %r3451, %r3467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3486, %r625, %r3452, %r3483;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3516, %r3517}, {%r671, %r674}, {%r3470, %r3486}, {%r2695, %r2695}, %r3695, 0;
	// end inline asm
	mov.u16 	%rs742, 2;
	mov.u32 	%r3698, 1145324612;
	@%p224 bra 	LBB0_539;
	bra.uni 	LBB0_548;
LBB0_539:                               // %L34114
                                        //   in Loop: Header=BB0_346 Depth=2
	and.b16  	%rs610, %rs4, 7;
	mov.u16 	%rs742, 2;
	mov.u32 	%r3698, 1145324612;
	setp.gt.s16 	%p461, %rs610, 3;
	@%p461 bra 	LBB0_542;
// %bb.540:                             // %L34114
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3697, -286331154;
	add.s16 	%rs612, %rs610, -2;
	setp.lt.u16 	%p464, %rs612, 2;
	@%p464 bra 	LBB0_547;
// %bb.541:                             // %L34114
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p465, %rs610, 1;
	@%p465 bra 	LBB0_548;
	bra.uni 	LBB0_544;
LBB0_542:                               // %L34114
                                        //   in Loop: Header=BB0_346 Depth=2
	add.s16 	%rs611, %rs610, -4;
	setp.lt.u16 	%p462, %rs611, 2;
	@%p462 bra 	LBB0_546;
// %bb.543:                             // %L34114
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p463, %rs610, 6;
	@%p463 bra 	LBB0_545;
LBB0_544:                               // %L34138
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u16 	%rs742, %rs3;
LBB0_545:                               // %L34145
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3698, -286331154;
LBB0_546:                               // %L34149
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3697, %r3698;
LBB0_547:                               // %L34153
                                        //   in Loop: Header=BB0_346 Depth=2
	mov.u32 	%r3698, %r3697;
LBB0_548:                               // %L34157
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.eq.s16 	%p466, %rs742, 2;
	@%p466 bra 	LBB0_550;
	bra.uni 	LBB0_549;
LBB0_550:                               // %pass12057
                                        //   in Loop: Header=BB0_346 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3432, %r3410, %r3410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3435, %r3411, %r3411, %r3432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3439, %r3423, %r3423, %r3435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3474, %r628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3443, %r3424, %r3424, %r3439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3476, %r3474, %r3459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3490, %r628, %r3458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3447, %r1719, %r3443, %r449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3479, %r625, %r3458, %r3476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3493, %r625, %r3459, %r3490;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3546, %r3550}, {%r671, %r674}, {%r3479, %r3493}, {%r2695, %r2695}, %r3698, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3538, %r3516, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r3517, %r3517, %r3538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3545, %r3546, %r3546, %r3541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r3550, %r3550, %r3545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r153, %r1719, %r3549, %r3447;
	// end inline asm
	add.s32 	%r151, %r447, 2;
	setp.eq.s32 	%p467, %r151, 40;
	@%p467 bra 	LBB0_551;
	bra.uni 	LBB0_554;
LBB0_551:                               // %L34191
                                        //   in Loop: Header=BB0_346 Depth=2
	setp.gt.u32 	%p468, %r5, 7;
	@%p468 bra 	LBB0_553;
// %bb.552:                             // %L34257
                                        //   in Loop: Header=BB0_346 Depth=2
	mul.lo.s32 	%r3557, %r152, 192;
	or.b32  	%r3558, %r127, %r3557;
	add.s32 	%r3559, %r3558, %r129;
	add.s32 	%r3560, %r3559, %r128;
	mul.wide.u32 	%rd349, %r3560, 4;
	add.s64 	%rd15, %rd4, %rd349;
	st.global.u32 	[%rd15], %r153;
	bra.uni 	LBB0_553;
LBB0_556:                               // %L34446
	st.global.u32 	[%rd5], %r2695;
	ret;
LBB0_142:                               // %post_box_union
	mov.u64 	%rd140, exception2614;
	cvta.global.u64 	%rd141, %rd140;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd141;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_149:                               // %post_box_union3468
	mov.u64 	%rd142, exception2614;
	cvta.global.u64 	%rd143, %rd142;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd143;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_156:                               // %post_box_union3480
	mov.u64 	%rd144, exception2614;
	cvta.global.u64 	%rd145, %rd144;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd145;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_163:                               // %post_box_union3492
	mov.u64 	%rd146, exception2614;
	cvta.global.u64 	%rd147, %rd146;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd147;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_170:                               // %post_box_union3504
	mov.u64 	%rd148, exception2614;
	cvta.global.u64 	%rd149, %rd148;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd149;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_177:                               // %post_box_union3516
	mov.u64 	%rd150, exception2614;
	cvta.global.u64 	%rd151, %rd150;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd151;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_184:                               // %post_box_union3528
	mov.u64 	%rd152, exception2614;
	cvta.global.u64 	%rd153, %rd152;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd153;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_191:                               // %post_box_union3540
	mov.u64 	%rd154, exception2614;
	cvta.global.u64 	%rd155, %rd154;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd155;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_203:                               // %post_box_union5840
	mov.u64 	%rd193, exception2614;
	cvta.global.u64 	%rd194, %rd193;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd194;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_215:                               // %post_box_union5852
	mov.u64 	%rd195, exception2614;
	cvta.global.u64 	%rd196, %rd195;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd196;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_227:                               // %post_box_union6184
	mov.u64 	%rd202, exception2614;
	cvta.global.u64 	%rd203, %rd202;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd203;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_239:                               // %post_box_union6196
	mov.u64 	%rd204, exception2614;
	cvta.global.u64 	%rd205, %rd204;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd205;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_253:                               // %post_box_union6596
	mov.u64 	%rd212, exception2614;
	cvta.global.u64 	%rd213, %rd212;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd213;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_265:                               // %post_box_union6608
	mov.u64 	%rd214, exception2614;
	cvta.global.u64 	%rd215, %rd214;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd215;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_277:                               // %post_box_union6940
	mov.u64 	%rd221, exception2614;
	cvta.global.u64 	%rd222, %rd221;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd222;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_289:                               // %post_box_union6952
	mov.u64 	%rd223, exception2614;
	cvta.global.u64 	%rd224, %rd223;
	{ // callseq 116, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd224;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 116
	{ // callseq 117, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 117
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_303:                               // %post_box_union7352
	mov.u64 	%rd231, exception2614;
	cvta.global.u64 	%rd232, %rd231;
	{ // callseq 118, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd232;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 118
	{ // callseq 119, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 119
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_315:                               // %post_box_union7364
	mov.u64 	%rd233, exception2614;
	cvta.global.u64 	%rd234, %rd233;
	{ // callseq 120, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd234;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 120
	{ // callseq 121, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 121
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_327:                               // %post_box_union7696
	mov.u64 	%rd240, exception2614;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 122, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 122
	{ // callseq 123, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 123
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_339:                               // %post_box_union7708
	mov.u64 	%rd242, exception2614;
	cvta.global.u64 	%rd243, %rd242;
	{ // callseq 124, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd243;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 124
	{ // callseq 125, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 125
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_352:                               // %post_box_union7801
	mov.u64 	%rd245, exception2614;
	cvta.global.u64 	%rd246, %rd245;
	{ // callseq 126, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd246;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 126
	{ // callseq 127, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 127
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_359:                               // %post_box_union7813
	mov.u64 	%rd247, exception2614;
	cvta.global.u64 	%rd248, %rd247;
	{ // callseq 128, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd248;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 128
	{ // callseq 129, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 129
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_366:                               // %post_box_union7825
	mov.u64 	%rd249, exception2614;
	cvta.global.u64 	%rd250, %rd249;
	{ // callseq 130, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd250;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 130
	{ // callseq 131, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 131
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_373:                               // %post_box_union7837
	mov.u64 	%rd251, exception2614;
	cvta.global.u64 	%rd252, %rd251;
	{ // callseq 132, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd252;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 132
	{ // callseq 133, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 133
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_380:                               // %post_box_union7849
	mov.u64 	%rd253, exception2614;
	cvta.global.u64 	%rd254, %rd253;
	{ // callseq 134, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd254;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 134
	{ // callseq 135, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 135
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_387:                               // %post_box_union7861
	mov.u64 	%rd255, exception2614;
	cvta.global.u64 	%rd256, %rd255;
	{ // callseq 136, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd256;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 136
	{ // callseq 137, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 137
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_394:                               // %post_box_union7873
	mov.u64 	%rd257, exception2614;
	cvta.global.u64 	%rd258, %rd257;
	{ // callseq 138, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd258;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 138
	{ // callseq 139, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 139
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_401:                               // %post_box_union7885
	mov.u64 	%rd259, exception2614;
	cvta.global.u64 	%rd260, %rd259;
	{ // callseq 140, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd260;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 140
	{ // callseq 141, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 141
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_413:                               // %post_box_union10185
	mov.u64 	%rd298, exception2614;
	cvta.global.u64 	%rd299, %rd298;
	{ // callseq 142, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd299;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 142
	{ // callseq 143, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 143
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_425:                               // %post_box_union10197
	mov.u64 	%rd300, exception2614;
	cvta.global.u64 	%rd301, %rd300;
	{ // callseq 144, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd301;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 144
	{ // callseq 145, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 145
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_437:                               // %post_box_union10529
	mov.u64 	%rd307, exception2614;
	cvta.global.u64 	%rd308, %rd307;
	{ // callseq 146, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd308;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 146
	{ // callseq 147, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 147
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_449:                               // %post_box_union10541
	mov.u64 	%rd309, exception2614;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 148, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 148
	{ // callseq 149, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 149
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_463:                               // %post_box_union10941
	mov.u64 	%rd317, exception2614;
	cvta.global.u64 	%rd318, %rd317;
	{ // callseq 150, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd318;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 150
	{ // callseq 151, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 151
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_475:                               // %post_box_union10953
	mov.u64 	%rd319, exception2614;
	cvta.global.u64 	%rd320, %rd319;
	{ // callseq 152, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd320;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 152
	{ // callseq 153, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 153
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_487:                               // %post_box_union11285
	mov.u64 	%rd326, exception2614;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 154, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 154
	{ // callseq 155, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 155
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_499:                               // %post_box_union11297
	mov.u64 	%rd328, exception2614;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 156, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 156
	{ // callseq 157, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 157
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_513:                               // %post_box_union11697
	mov.u64 	%rd336, exception2614;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 158, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 158
	{ // callseq 159, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 159
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_525:                               // %post_box_union11709
	mov.u64 	%rd338, exception2614;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 160, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 160
	{ // callseq 161, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 161
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_537:                               // %post_box_union12041
	mov.u64 	%rd345, exception2614;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 162, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 162
	{ // callseq 163, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 163
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_549:                               // %post_box_union12053
	mov.u64 	%rd347, exception2614;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 164, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 164
	{ // callseq 165, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 165
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L9
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r465;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
