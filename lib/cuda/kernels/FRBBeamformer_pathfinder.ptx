// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2634[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<257>;
	.reg .b16 	%rs<233>;
	.reg .b32 	%r<3069>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<286>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r263, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd16, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r264, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r264, 13919;
	@%p4 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_1;
$L__BB0_158:                            // %L10
	ld.param.u64 	%rd17, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r265, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	mul.lo.s32 	%r5, %r4, 192;
	or.b32  	%r266, %r3, %r265;
	add.s32 	%r267, %r266, %r5;
	mul.wide.u32 	%rd23, %r267, 4;
	add.s64 	%rd5, %rd17, %rd23;
	mov.u32 	%r268, 1;
	st.global.u32 	[%rd5], %r268;
	and.b32  	%r6, %r265, 3;
	shr.u32 	%r7, %r265, 2;
	mul.lo.s32 	%r269, %r6, %r7;
	and.b32  	%r270, %r269, 7;
	cvt.rn.f32.s32 	%f205, %r270;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f1, %f205, %f206;
	abs.f32 	%f788, %f1;
	setp.lt.f32 	%p5, %f788, 0f40000000;
	setp.gtu.f32 	%p256, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p5 bra 	$L__BB0_170;
// %bb.159:
	@%p256 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_160;
$L__BB0_166:
	mov.b32 	%r151, %f788;
	and.b32  	%r271, %r151, 8388607;
	or.b32  	%r3052, %r271, 1065353216;
	mov.b32 	%f783, %r3052;
	add.s32 	%r272, %r151, -1073741824;
	and.b32  	%r3053, %r272, -8388608;
	setp.eq.s32 	%p12, %r3053, 0;
	@%p12 bra 	$L__BB0_169;
// %bb.167:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_168:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r273, %r3053, 192937984;
	add.s32 	%r274, %r3052, %r273;
	mov.b32 	%f217, %r274;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3053, %r3053, %r273;
	mov.b32 	%r3052, %f783;
	setp.ne.s32 	%p13, %r3053, 0;
	setp.ne.s32 	%p14, %r3052, 0;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_168;
$L__BB0_169:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p16, %r151, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p16;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_170;
$L__BB0_160:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r150, %f172;
	setp.lt.u32 	%p7, %r150, 1073741824;
	@%p7 bra 	$L__BB0_165;
// %bb.161:
	setp.lt.u32 	%p8, %r150, -2147483647;
	@%p8 bra 	$L__BB0_163;
// %bb.162:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p11, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p11;
	bra.uni 	$L__BB0_165;
$L__BB0_163:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p9, %f172, 0f40800000;
	@%p9 bra 	$L__BB0_165;
// %bb.164:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p10, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p10;
$L__BB0_165:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_170:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p17, %f226, 0f7F800000;
	mov.b32 	%r275, %f1;
	and.b32  	%r158, %r275, -2147483648;
	@%p17 bra 	$L__BB0_172;
// %bb.171:
	mov.b32 	%r276, %f784;
	or.b32  	%r277, %r158, %r276;
	mov.b32 	%f784, %r277;
$L__BB0_172:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r284, %f227;
	and.b32  	%r285, %r284, -2147483648;
	or.b32  	%r286, %r285, 1056964608;
	mov.b32 	%f228, %r286;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p18, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p18;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p19, %f231, 0f3F000000;
	shl.b32 	%r161, %r265, 1;
	and.b32  	%r162, %r161, 2;
	mul.lo.s32 	%r292, %r162, %r7;
	cvt.rn.f32.s32 	%f259, %r292;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p25, %f734, 0f40000000;
	@%p25 bra 	$L__BB0_13;
// %bb.2:
	setp.gtu.f32 	%p26, %f734, 0f4B800000;
	@%p26 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_3;
$L__BB0_9:
	mov.b32 	%r9, %f734;
	and.b32  	%r293, %r9, 8388607;
	or.b32  	%r3001, %r293, 1065353216;
	mov.b32 	%f733, %r3001;
	add.s32 	%r294, %r9, -1073741824;
	and.b32  	%r3002, %r294, -8388608;
	setp.eq.s32 	%p32, %r3002, 0;
	@%p32 bra 	$L__BB0_12;
// %bb.10:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_11:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r295, %r3002, 192937984;
	add.s32 	%r296, %r3001, %r295;
	mov.b32 	%f271, %r296;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3002, %r3002, %r295;
	mov.b32 	%r3001, %f733;
	setp.ne.s32 	%p33, %r3002, 0;
	setp.ne.s32 	%p34, %r3001, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_11;
$L__BB0_12:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p36, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_13;
$L__BB0_3:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f4, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p27, %r8, 1073741824;
	@%p27 bra 	$L__BB0_8;
// %bb.4:
	setp.lt.u32 	%p28, %r8, -2147483647;
	@%p28 bra 	$L__BB0_6;
// %bb.5:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p31, %f4, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p31;
	bra.uni 	$L__BB0_8;
$L__BB0_6:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p29, %f4, 0f40800000;
	@%p29 bra 	$L__BB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f4;
	setp.ge.f32 	%p30, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p30;
$L__BB0_8:                              // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_13:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p19;
	or.b32  	%r163, %r162, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p37, %f280, 0f7F800000;
	@%p37 bra 	$L__BB0_15;
// %bb.14:
	mov.b32 	%r297, %f186;
	and.b32  	%r298, %r297, -2147483648;
	mov.b32 	%r299, %f734;
	or.b32  	%r300, %r298, %r299;
	mov.b32 	%f734, %r300;
$L__BB0_15:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r301, %f282;
	and.b32  	%r302, %r301, -2147483648;
	or.b32  	%r303, %r302, 1056964608;
	mov.b32 	%f283, %r303;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p38, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p38;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p39, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p39;
	setp.eq.s32 	%p45, %r163, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p45 bra 	$L__BB0_31;
// %bb.16:                              // %L242
	mul.lo.s32 	%r309, %r163, %r7;
	mul.hi.u32 	%r310, %r309, -1431655765;
	shr.u32 	%r311, %r310, 4;
	mul.lo.s32 	%r312, %r311, 24;
	sub.s32 	%r313, %r309, %r312;
	cvt.rn.f32.s32 	%f311, %r313;
	div.approx.f32 	%f20, %f311, %f260;
	abs.f32 	%f738, %f20;
	setp.lt.f32 	%p46, %f738, 0f40000000;
	@%p46 bra 	$L__BB0_28;
// %bb.17:
	setp.gtu.f32 	%p47, %f738, 0f4B800000;
	@%p47 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_18;
$L__BB0_24:
	mov.b32 	%r17, %f738;
	and.b32  	%r314, %r17, 8388607;
	or.b32  	%r3003, %r314, 1065353216;
	mov.b32 	%f737, %r3003;
	add.s32 	%r315, %r17, -1073741824;
	and.b32  	%r3004, %r315, -8388608;
	setp.eq.s32 	%p53, %r3004, 0;
	@%p53 bra 	$L__BB0_27;
// %bb.25:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_26:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r316, %r3004, 192937984;
	add.s32 	%r317, %r3003, %r316;
	mov.b32 	%f323, %r317;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3004, %r3004, %r316;
	mov.b32 	%r3003, %f737;
	setp.ne.s32 	%p54, %r3004, 0;
	setp.ne.s32 	%p55, %r3003, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_26;
$L__BB0_27:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p57, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_28;
$L__BB0_18:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f23, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f23;
	setp.lt.u32 	%p48, %r16, 1073741824;
	@%p48 bra 	$L__BB0_23;
// %bb.19:
	setp.lt.u32 	%p49, %r16, -2147483647;
	@%p49 bra 	$L__BB0_21;
// %bb.20:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p52, %f23, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p52;
	bra.uni 	$L__BB0_23;
$L__BB0_21:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p50, %f23, 0f40800000;
	@%p50 bra 	$L__BB0_23;
// %bb.22:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f23;
	setp.ge.f32 	%p51, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p51;
$L__BB0_23:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_28:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p58, %f332, 0f7F800000;
	@%p58 bra 	$L__BB0_30;
// %bb.29:
	mov.b32 	%r318, %f20;
	and.b32  	%r319, %r318, -2147483648;
	mov.b32 	%r320, %f738;
	or.b32  	%r321, %r319, %r320;
	mov.b32 	%f738, %r321;
$L__BB0_30:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r322, %f333;
	and.b32  	%r323, %r322, -2147483648;
	or.b32  	%r324, %r323, 1056964608;
	mov.b32 	%f334, %r324;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p59, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p59;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p60, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p60;
	cvt.rzi.s32.f32 	%r325, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r326, %r325, 1;
	setp.eq.b32 	%p61, %r326, 1;
	selp.f32 	%f352, %f350, %f351, %p61;
	selp.f32 	%f353, %f351, %f350, %p61;
	and.b32  	%r327, %r325, 2;
	setp.eq.s32 	%p62, %r327, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p62;
	add.s32 	%r328, %r325, 1;
	and.b32  	%r329, %r328, 2;
	setp.eq.s32 	%p63, %r329, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p63;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p64, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p64;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p65, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p65;
$L__BB0_31:                             // %L276
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r26, %r7, 3;
	setp.eq.s32 	%p66, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p66 bra 	$L__BB0_47;
// %bb.32:                              // %L314
	mul.lo.s32 	%r336, %r162, %r26;
	cvt.u16.u32 	%rs11, %r336;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f41, %f364, %f731;
	abs.f32 	%f744, %f41;
	setp.lt.f32 	%p67, %f744, 0f40000000;
	@%p67 bra 	$L__BB0_44;
// %bb.33:
	setp.gtu.f32 	%p68, %f744, 0f4B800000;
	@%p68 bra 	$L__BB0_40;
	bra.uni 	$L__BB0_34;
$L__BB0_40:
	mov.b32 	%r28, %f744;
	and.b32  	%r337, %r28, 8388607;
	or.b32  	%r3005, %r337, 1065353216;
	mov.b32 	%f743, %r3005;
	add.s32 	%r338, %r28, -1073741824;
	and.b32  	%r3006, %r338, -8388608;
	setp.eq.s32 	%p74, %r3006, 0;
	@%p74 bra 	$L__BB0_43;
// %bb.41:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_42:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r339, %r3006, 192937984;
	add.s32 	%r340, %r3005, %r339;
	mov.b32 	%f376, %r340;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3006, %r3006, %r339;
	mov.b32 	%r3005, %f743;
	setp.ne.s32 	%p75, %r3006, 0;
	setp.ne.s32 	%p76, %r3005, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_42;
$L__BB0_43:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p78, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_44;
$L__BB0_34:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f44, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f44;
	setp.lt.u32 	%p69, %r27, 1073741824;
	@%p69 bra 	$L__BB0_39;
// %bb.35:
	setp.lt.u32 	%p70, %r27, -2147483647;
	@%p70 bra 	$L__BB0_37;
// %bb.36:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p73, %f44, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p73;
	bra.uni 	$L__BB0_39;
$L__BB0_37:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p71, %f44, 0f40800000;
	@%p71 bra 	$L__BB0_39;
// %bb.38:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f44;
	setp.ge.f32 	%p72, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p72;
$L__BB0_39:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_44:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p79, %f385, 0f7F800000;
	@%p79 bra 	$L__BB0_46;
// %bb.45:
	mov.b32 	%r341, %f41;
	and.b32  	%r342, %r341, -2147483648;
	mov.b32 	%r343, %f744;
	or.b32  	%r344, %r342, %r343;
	mov.b32 	%f744, %r344;
$L__BB0_46:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r345, %f386;
	and.b32  	%r346, %r345, -2147483648;
	or.b32  	%r347, %r346, 1056964608;
	mov.b32 	%f387, %r347;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p80, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p80;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p81, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p81;
	cvt.rzi.s32.f32 	%r348, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r349, %r348, 1;
	setp.eq.b32 	%p82, %r349, 1;
	selp.f32 	%f405, %f403, %f404, %p82;
	selp.f32 	%f406, %f404, %f403, %p82;
	and.b32  	%r350, %r348, 2;
	setp.eq.s32 	%p83, %r350, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p83;
	add.s32 	%r351, %r348, 1;
	and.b32  	%r352, %r351, 2;
	setp.eq.s32 	%p84, %r352, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p84;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p85, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p85;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p86, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p86;
$L__BB0_47:                             // %L348
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p89, %p45, %p66;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p89 bra 	$L__BB0_63;
// %bb.48:                              // %L356
	mul.lo.s32 	%r353, %r163, %r26;
	mul.hi.u32 	%r354, %r353, -1431655765;
	shr.u32 	%r355, %r354, 1;
	mul.lo.s32 	%r356, %r355, 3;
	sub.s32 	%r357, %r353, %r356;
	cvt.rn.f32.s32 	%f417, %r357;
	div.approx.f32 	%f62, %f417, %f731;
	abs.f32 	%f750, %f62;
	setp.lt.f32 	%p90, %f750, 0f40000000;
	@%p90 bra 	$L__BB0_60;
// %bb.49:
	setp.gtu.f32 	%p91, %f750, 0f4B800000;
	@%p91 bra 	$L__BB0_56;
	bra.uni 	$L__BB0_50;
$L__BB0_56:
	mov.b32 	%r36, %f750;
	and.b32  	%r358, %r36, 8388607;
	or.b32  	%r3007, %r358, 1065353216;
	mov.b32 	%f749, %r3007;
	add.s32 	%r359, %r36, -1073741824;
	and.b32  	%r3008, %r359, -8388608;
	setp.eq.s32 	%p97, %r3008, 0;
	@%p97 bra 	$L__BB0_59;
// %bb.57:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_58:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r360, %r3008, 192937984;
	add.s32 	%r361, %r3007, %r360;
	mov.b32 	%f429, %r361;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3008, %r3008, %r360;
	mov.b32 	%r3007, %f749;
	setp.ne.s32 	%p98, %r3008, 0;
	setp.ne.s32 	%p99, %r3007, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	$L__BB0_58;
$L__BB0_59:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p101, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_60;
$L__BB0_50:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f65, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f65;
	setp.lt.u32 	%p92, %r35, 1073741824;
	@%p92 bra 	$L__BB0_55;
// %bb.51:
	setp.lt.u32 	%p93, %r35, -2147483647;
	@%p93 bra 	$L__BB0_53;
// %bb.52:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p96, %f65, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p96;
	bra.uni 	$L__BB0_55;
$L__BB0_53:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p94, %f65, 0f40800000;
	@%p94 bra 	$L__BB0_55;
// %bb.54:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f65;
	setp.ge.f32 	%p95, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p95;
$L__BB0_55:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_60:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p102, %f438, 0f7F800000;
	@%p102 bra 	$L__BB0_62;
// %bb.61:
	mov.b32 	%r362, %f62;
	and.b32  	%r363, %r362, -2147483648;
	mov.b32 	%r364, %f750;
	or.b32  	%r365, %r363, %r364;
	mov.b32 	%f750, %r365;
$L__BB0_62:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r366, %f439;
	and.b32  	%r367, %r366, -2147483648;
	or.b32  	%r368, %r367, 1056964608;
	mov.b32 	%f440, %r368;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p103, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p103;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p104, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p104;
	cvt.rzi.s32.f32 	%r369, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r370, %r369, 1;
	setp.eq.b32 	%p105, %r370, 1;
	selp.f32 	%f458, %f456, %f457, %p105;
	selp.f32 	%f459, %f457, %f456, %p105;
	and.b32  	%r371, %r369, 2;
	setp.eq.s32 	%p106, %r371, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p106;
	add.s32 	%r372, %r369, 1;
	and.b32  	%r373, %r372, 2;
	setp.eq.s32 	%p107, %r373, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p107;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p108, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p108;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p109, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p109;
$L__BB0_63:                             // %L390
	cvt.rzi.s32.f32 	%r287, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r43, %r265, 2;
	setp.eq.s32 	%p110, %r43, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p110 bra 	$L__BB0_65;
// %bb.64:                              // %L399
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_65:                             // %L401
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r288, %r287, 1;
	cvt.rzi.s32.f32 	%r304, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p5 bra 	$L__BB0_180;
// %bb.66:
	@%p256 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_67;
$L__BB0_176:
	mov.b32 	%r165, %f788;
	and.b32  	%r380, %r165, 8388607;
	or.b32  	%r3054, %r380, 1065353216;
	mov.b32 	%f787, %r3054;
	add.s32 	%r381, %r165, -1073741824;
	and.b32  	%r3055, %r381, -8388608;
	setp.eq.s32 	%p118, %r3055, 0;
	@%p118 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r382, %r3055, 192937984;
	add.s32 	%r383, %r3054, %r382;
	mov.b32 	%f479, %r383;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3055, %r3055, %r382;
	mov.b32 	%r3054, %f787;
	setp.ne.s32 	%p119, %r3055, 0;
	setp.ne.s32 	%p120, %r3054, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p122, %r165, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_180;
$L__BB0_67:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r164, %f189;
	setp.lt.u32 	%p113, %r164, 1073741824;
	@%p113 bra 	$L__BB0_175;
// %bb.68:
	setp.lt.u32 	%p114, %r164, -2147483647;
	@%p114 bra 	$L__BB0_173;
// %bb.69:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p117, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p117;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p115, %f189, 0f40800000;
	@%p115 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p116, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p116;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p20, %r288, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r305, %r304, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p123, %f488, 0f7F800000;
	@%p123 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r384, %f788;
	or.b32  	%r385, %r158, %r384;
	mov.b32 	%f788, %r385;
$L__BB0_182:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p20;
	and.b32  	%r289, %r287, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p40, %r305, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r392, %f489;
	and.b32  	%r393, %r392, -2147483648;
	or.b32  	%r394, %r393, 1056964608;
	mov.b32 	%f490, %r394;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p124, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p124;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p125, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p125;
	cvt.rzi.s32.f32 	%r395, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r396, %r395, 1;
	setp.eq.b32 	%p126, %r396, 1;
	selp.f32 	%f508, %f506, %f507, %p126;
	and.b32  	%r397, %r395, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p131, %f760, 0f40000000;
	@%p131 bra 	$L__BB0_81;
// %bb.70:
	setp.gtu.f32 	%p132, %f760, 0f4B800000;
	@%p132 bra 	$L__BB0_77;
	bra.uni 	$L__BB0_71;
$L__BB0_77:
	mov.b32 	%r47, %f760;
	and.b32  	%r400, %r47, 8388607;
	or.b32  	%r3009, %r400, 1065353216;
	mov.b32 	%f759, %r3009;
	add.s32 	%r401, %r47, -1073741824;
	and.b32  	%r3010, %r401, -8388608;
	setp.eq.s32 	%p138, %r3010, 0;
	@%p138 bra 	$L__BB0_80;
// %bb.78:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_79:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r402, %r3010, 192937984;
	add.s32 	%r403, %r3009, %r402;
	mov.b32 	%f532, %r403;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3010, %r3010, %r402;
	mov.b32 	%r3009, %f759;
	setp.ne.s32 	%p139, %r3010, 0;
	setp.ne.s32 	%p140, %r3009, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_79;
$L__BB0_80:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p142, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_81;
$L__BB0_71:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f90, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f90;
	setp.lt.u32 	%p133, %r46, 1073741824;
	@%p133 bra 	$L__BB0_76;
// %bb.72:
	setp.lt.u32 	%p134, %r46, -2147483647;
	@%p134 bra 	$L__BB0_74;
// %bb.73:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p137, %f90, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p137;
	bra.uni 	$L__BB0_76;
$L__BB0_74:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p135, %f90, 0f40800000;
	@%p135 bra 	$L__BB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f90;
	setp.ge.f32 	%p136, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p136;
$L__BB0_76:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_81:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p21, %r289, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r290, %r287, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p40;
	and.b32  	%r306, %r304, 2;
	setp.eq.s32 	%p127, %r397, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r398, %r395, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p143, %f541, 0f7F800000;
	@%p143 bra 	$L__BB0_83;
// %bb.82:
	mov.b32 	%r404, %f203;
	and.b32  	%r405, %r404, -2147483648;
	mov.b32 	%r406, %f760;
	or.b32  	%r407, %r405, %r406;
	mov.b32 	%f760, %r407;
$L__BB0_83:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p20;
	selp.f32 	%f249, %f246, %f248, %p21;
	and.b32  	%r291, %r290, 2;
	setp.eq.f32 	%p23, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p41, %r306, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r307, %r304, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p126;
	selp.f32 	%f511, %f508, %f510, %p127;
	and.b32  	%r399, %r398, 2;
	setp.eq.f32 	%p129, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r408, %f542;
	and.b32  	%r409, %r408, -2147483648;
	or.b32  	%r410, %r409, 1056964608;
	mov.b32 	%f543, %r410;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p144, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p144;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p145, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p145;
	cvt.rzi.s32.f32 	%r411, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r412, %r411, 1;
	setp.eq.b32 	%p146, %r412, 1;
	selp.f32 	%f561, %f559, %f560, %p146;
	and.b32  	%r413, %r411, 2;
	setp.eq.s32 	%p147, %r413, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r414, %r411, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r7;
	div.approx.f32 	%f106, %f572, %f521;
	abs.f32 	%f764, %f106;
	setp.lt.f32 	%p151, %f764, 0f40000000;
	@%p151 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p152, %f764, 0f4B800000;
	@%p152 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r55, %f764;
	and.b32  	%r416, %r55, 8388607;
	or.b32  	%r3011, %r416, 1065353216;
	mov.b32 	%f763, %r3011;
	add.s32 	%r417, %r55, -1073741824;
	and.b32  	%r3012, %r417, -8388608;
	setp.eq.s32 	%p158, %r3012, 0;
	@%p158 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r418, %r3012, 192937984;
	add.s32 	%r419, %r3011, %r418;
	mov.b32 	%f584, %r419;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3012, %r3012, %r418;
	mov.b32 	%r3011, %f763;
	setp.ne.s32 	%p159, %r3012, 0;
	setp.ne.s32 	%p160, %r3011, 0;
	and.pred  	%p161, %p159, %p160;
	@%p161 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p162, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p162;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f109, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f109;
	setp.lt.u32 	%p153, %r54, 1073741824;
	@%p153 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p154, %r54, -2147483647;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p157, %f109, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p157;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p155, %f109, 0f40800000;
	@%p155 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f109;
	setp.ge.f32 	%p156, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p156;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p22, %r291, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p23;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p40;
	selp.f32 	%f304, %f301, %f303, %p41;
	and.b32  	%r308, %r307, 2;
	setp.eq.f32 	%p43, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p128, %r399, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p129;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p146;
	selp.f32 	%f564, %f561, %f563, %p147;
	and.b32  	%r415, %r414, 2;
	setp.eq.f32 	%p149, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p163, %f593, 0f7F800000;
	@%p163 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r420, %f106;
	and.b32  	%r421, %r420, -2147483648;
	mov.b32 	%r422, %f764;
	or.b32  	%r423, %r421, %r422;
	mov.b32 	%f764, %r423;
$L__BB0_97:                             // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p22;
	setp.gt.f32 	%p24, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p42, %r308, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f18, %f308, %f304, %p43;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p128;
	setp.gt.f32 	%p130, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p148, %r415, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f104, %f569, %f564, %p149;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r430, %f595;
	and.b32  	%r431, %r430, -2147483648;
	or.b32  	%r432, %r431, 1056964608;
	mov.b32 	%f596, %r432;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p164, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p164;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p165, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p165;
	cvt.rzi.s32.f32 	%r433, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r434, %r433, 1;
	setp.eq.b32 	%p166, %r434, 1;
	selp.f32 	%f614, %f612, %f613, %p166;
	selp.f32 	%f615, %f613, %f612, %p166;
	and.b32  	%r435, %r433, 2;
	setp.eq.s32 	%p167, %r435, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p167;
	add.s32 	%r436, %r433, 1;
	and.b32  	%r437, %r436, 2;
	setp.eq.s32 	%p168, %r437, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p169, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p169;
	abs.f32 	%f623, %f764;
	and.b32  	%r65, %r265, 1;
	shr.u32 	%r66, %r265, 4;
	setp.ne.s32 	%p171, %r65, %r66;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p171 bra 	$L__BB0_113;
// %bb.98:                              // %L606
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f123, %f627, %f626;
	abs.f32 	%f768, %f123;
	setp.lt.f32 	%p172, %f768, 0f40000000;
	@%p172 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p173, %f768, 0f4B800000;
	@%p173 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r68, %f768;
	and.b32  	%r438, %r68, 8388607;
	or.b32  	%r3013, %r438, 1065353216;
	mov.b32 	%f767, %r3013;
	add.s32 	%r439, %r68, -1073741824;
	and.b32  	%r3014, %r439, -8388608;
	setp.eq.s32 	%p179, %r3014, 0;
	@%p179 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r440, %r3014, 192937984;
	add.s32 	%r441, %r3013, %r440;
	mov.b32 	%f638, %r441;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3014, %r3014, %r440;
	mov.b32 	%r3013, %f767;
	setp.ne.s32 	%p180, %r3014, 0;
	setp.ne.s32 	%p181, %r3013, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p183, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f126, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f126;
	setp.lt.u32 	%p174, %r67, 1073741824;
	@%p174 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p175, %r67, -2147483647;
	@%p175 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p178, %f126, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p178;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p176, %f126, 0f40800000;
	@%p176 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f126;
	setp.ge.f32 	%p177, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p177;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p184, %f647, 0f7F800000;
	@%p184 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r442, %f123;
	and.b32  	%r443, %r442, -2147483648;
	mov.b32 	%r444, %f768;
	or.b32  	%r445, %r443, %r444;
	mov.b32 	%f768, %r445;
$L__BB0_112:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r446, %f648;
	and.b32  	%r447, %r446, -2147483648;
	or.b32  	%r448, %r447, 1056964608;
	mov.b32 	%f649, %r448;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p185, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p185;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p186, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p186;
	cvt.rzi.s32.f32 	%r449, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r450, %r449, 1;
	setp.eq.b32 	%p187, %r450, 1;
	selp.f32 	%f667, %f665, %f666, %p187;
	selp.f32 	%f668, %f666, %f665, %p187;
	and.b32  	%r451, %r449, 2;
	setp.eq.s32 	%p188, %r451, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p188;
	add.s32 	%r452, %r449, 1;
	and.b32  	%r453, %r452, 2;
	setp.eq.s32 	%p189, %r453, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p189;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p190, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p190;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p191, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p191;
$L__BB0_113:                            // %L645
	selp.f32 	%f258, %f257, %f252, %p24;
	selp.f32 	%f306, %f302, %f305, %p42;
	setp.gt.f32 	%p44, %f309, 0f4B800000;
	add.f32 	%f310, %f18, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p130;
	selp.f32 	%f567, %f562, %f566, %p148;
	setp.gt.f32 	%p150, %f570, 0f4B800000;
	add.f32 	%f571, %f104, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p168;
	setp.gt.f32 	%p170, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r64, %r7, 1;
	mov.f32 	%f781, %f776;
	@%p171 bra 	$L__BB0_129;
// %bb.114:                             // %L648
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f144, %f679, %f680;
	abs.f32 	%f774, %f144;
	setp.lt.f32 	%p193, %f774, 0f40000000;
	@%p193 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p194, %f774, 0f4B800000;
	@%p194 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r76, %f774;
	and.b32  	%r454, %r76, 8388607;
	or.b32  	%r3015, %r454, 1065353216;
	mov.b32 	%f773, %r3015;
	add.s32 	%r455, %r76, -1073741824;
	and.b32  	%r3016, %r455, -8388608;
	setp.eq.s32 	%p200, %r3016, 0;
	@%p200 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r456, %r3016, 192937984;
	add.s32 	%r457, %r3015, %r456;
	mov.b32 	%f691, %r457;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3016, %r3016, %r456;
	mov.b32 	%r3015, %f773;
	setp.ne.s32 	%p201, %r3016, 0;
	setp.ne.s32 	%p202, %r3015, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p204, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f147, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f147;
	setp.lt.u32 	%p195, %r75, 1073741824;
	@%p195 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p196, %r75, -2147483647;
	@%p196 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p199, %f147, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p199;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p197, %f147, 0f40800000;
	@%p197 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f147;
	setp.ge.f32 	%p198, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p198;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p205, %f700, 0f7F800000;
	@%p205 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r458, %f144;
	and.b32  	%r459, %r458, -2147483648;
	mov.b32 	%r460, %f774;
	or.b32  	%r461, %r459, %r460;
	mov.b32 	%f774, %r461;
$L__BB0_128:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r462, %f701;
	and.b32  	%r463, %r462, -2147483648;
	or.b32  	%r464, %r463, 1056964608;
	mov.b32 	%f702, %r464;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p206, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p206;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p207, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p207;
	cvt.rzi.s32.f32 	%r465, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r466, %r465, 1;
	setp.eq.b32 	%p208, %r466, 1;
	selp.f32 	%f720, %f718, %f719, %p208;
	selp.f32 	%f721, %f719, %f718, %p208;
	and.b32  	%r467, %r465, 2;
	setp.eq.s32 	%p209, %r467, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p209;
	add.s32 	%r468, %r465, 1;
	and.b32  	%r469, %r468, 2;
	setp.eq.s32 	%p210, %r469, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p210;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p211, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p211;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p212, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p212;
$L__BB0_129:                            // %L682
	mov.b32 	%r280, %f258;
	mov.b32 	%r283, %f255;
	selp.f32 	%f19, %f310, %f306, %p44;
	mov.b32 	%r388, %f520;
	mov.b32 	%r391, %f517;
	selp.f32 	%f105, %f571, %f567, %p150;
	selp.f32 	%f625, %f624, %f619, %p170;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p110 bra 	$L__BB0_131;
// %bb.130:                             // %L691
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_131:                            // %L693
	xor.b32  	%r279, %r283, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r331, %f19;
	mov.b32 	%r332, %f740;
	mov.b32 	%r334, %f18;
	mov.b32 	%r335, %f741;
	mov.b32 	%r375, %f754;
	mov.b32 	%r376, %f756;
	mov.b32 	%r378, %f755;
	mov.b32 	%r379, %f757;
	xor.b32  	%r387, %r391, -2147483648;
	mov.b32 	%r426, %f625;
	mov.b32 	%r425, %f105;
	mov.b32 	%r429, %f622;
	mov.b32 	%r428, %f104;
	mov.b32 	%r471, %f778;
	mov.b32 	%r472, %f780;
	mov.b32 	%r474, %f779;
	mov.b32 	%r475, %f781;
	setp.gt.u32 	%p214, %r265, 15;
	mov.u32 	%r174, 999999999;
	@%p214 bra 	$L__BB0_133;
// %bb.132:                             // %L723
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	mad.lo.s32 	%r477, %r265, 6, %r2;
	cvt.u16.u32 	%rs17, %r477;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r478, %rs22;
	and.b32  	%r479, %r478, 255;
	mul.wide.u32 	%rd24, %r479, 4;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.u32 	%r480, [%rd25];
	cvt.s32.s16 	%r481, %r480;
	shr.s32 	%r482, %r480, 16;
	mul.lo.s32 	%r483, %r482, 290;
	mad.lo.s32 	%r174, %r481, 33, %r483;
$L__BB0_133:                            // %pass378
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r278, %r280, %r279;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r281, %r283, %r280;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r330, %r332, %r331;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r333, %r335, %r334;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r374, %r376, %r375;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r377, %r379, %r378;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r386, %r388, %r387;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r388;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r424, %r426, %r425;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r427, %r429, %r428;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r470, %r472, %r471;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r473, %r475, %r474;
	// end inline asm
	mul.lo.s32 	%r485, %r6, 24;
	shl.b32 	%r486, %r2, 1;
	and.b32  	%r487, %r486, 2;
	shr.u32 	%r175, %r265, 3;
	bfe.u32 	%r488, %r265, 3, 1;
	or.b32  	%r489, %r487, %r488;
	and.b32  	%r490, %r175, 2;
	or.b32  	%r176, %r64, %r490;
	cvt.u16.u32 	%rs25, %r176;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r491, %rs29;
	and.b32  	%r492, %r491, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r493, %rs30, 8;
	add.s32 	%r494, %r485, %r5;
	or.b32  	%r495, %r494, %r489;
	add.s32 	%r496, %r495, %r493;
	mul.wide.u32 	%rd26, %r496, 4;
	add.s64 	%rd27, %rd2, %rd26;
	ld.global.u32 	%r177, [%rd27];
	or.b32  	%r497, %r489, 4;
	cvt.u64.u32 	%rd28, %r493;
	cvt.u64.u32 	%rd29, %r494;
	cvt.u64.u32 	%rd30, %r489;
	add.s64 	%rd31, %rd29, %rd30;
	add.s64 	%rd32, %rd31, %rd28;
	shl.b64 	%rd33, %rd32, 2;
	add.s64 	%rd34, %rd2, %rd33;
	ld.global.u32 	%r178, [%rd34+16];
	cvt.u64.u32 	%rd35, %r485;
	cvt.u64.u32 	%rd36, %r5;
	add.s64 	%rd37, %rd36, %rd35;
	add.s64 	%rd38, %rd37, %rd30;
	add.s64 	%rd39, %rd38, %rd28;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd41, %rd2, %rd40;
	ld.global.u32 	%r179, [%rd41+384];
	cvt.u64.u32 	%rd42, %r497;
	add.s64 	%rd43, %rd37, %rd42;
	add.s64 	%rd44, %rd43, %rd28;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.u32 	%r180, [%rd46+384];
	shl.b32 	%r498, %r265, 2;
	and.b32  	%r181, %r498, 12;
	shl.b32 	%r182, %r2, 2;
	and.b32  	%r183, %r498, 16;
	shl.b32 	%r184, %r4, 5;
	and.b32  	%r185, %r265, 4;
	bfe.s32 	%r499, %r265, 2, 1;
	shl.b32 	%r500, %r265, 4;
	and.b32  	%r501, %r161, 8;
	or.b32  	%r502, %r501, %r500;
	bfe.u32 	%r503, %r502, 3, 3;
	mul.lo.s32 	%r186, %r503, 260;
	cvt.u16.u32 	%rs31, %r265;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r504, %rs36;
	and.b32  	%r187, %r504, 255;
	add.s32 	%r505, %r2, 6;
	add.s32 	%r506, %r3, 192;
	and.b32  	%r507, %r506, 224;
	shr.u32 	%r508, %r505, 3;
	mad.lo.s32 	%r188, %r508, 260, %r507;
	add.s32 	%r509, %r2, 12;
	add.s32 	%r510, %r3, 128;
	and.b32  	%r511, %r510, 224;
	shr.u32 	%r512, %r509, 3;
	mad.lo.s32 	%r189, %r512, 260, %r511;
	add.s32 	%r513, %r2, 18;
	add.s32 	%r514, %r3, 64;
	and.b32  	%r515, %r514, 224;
	shr.u32 	%r516, %r513, 3;
	mad.lo.s32 	%r190, %r516, 260, %r515;
	or.b32  	%r191, %r3, 780;
	add.s32 	%r517, %r2, 30;
	shr.u32 	%r518, %r517, 3;
	mad.lo.s32 	%r192, %r518, 260, %r507;
	add.s32 	%r519, %r2, 36;
	shr.u32 	%r520, %r519, 3;
	mad.lo.s32 	%r193, %r520, 260, %r511;
	add.s32 	%r521, %r2, 42;
	shr.u32 	%r522, %r521, 3;
	mad.lo.s32 	%r194, %r522, 260, %r515;
	or.b32  	%r195, %r3, 1560;
	add.s32 	%r523, %r2, 54;
	shr.u32 	%r524, %r523, 3;
	mad.lo.s32 	%r196, %r524, 260, %r507;
	add.s32 	%r525, %r2, 60;
	bfe.u32 	%r526, %r525, 3, 3;
	mad.lo.s32 	%r197, %r526, 260, %r511;
	mul.lo.s32 	%r527, %r6, 870;
	shr.u32 	%r528, %r2, 1;
	cvt.u16.u32 	%rs37, %r528;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r529, %rs42;
	and.b32  	%r198, %r529, 255;
	mad.lo.s32 	%r530, %r489, 33, %r527;
	mad.lo.s32 	%r199, %r492, 290, %r530;
	add.s32 	%r200, %r199, 132;
	setp.lt.u32 	%p216, %r265, 4;
	setp.eq.s32 	%p217, %r7, 1;
	setp.eq.s32 	%p218, %r7, 4;
	setp.eq.s32 	%p219, %r7, 5;
	or.b32  	%r531, %r487, %r66;
	selp.b32 	%r532, 0, 392, %p110;
	bfe.s32 	%r533, %r265, 3, 1;
	and.b32  	%r201, %r533, 98;
	and.b32  	%r202, %r499, 196;
	setp.eq.s32 	%p220, %r65, 0;
	selp.b32 	%r203, 0, 784, %p220;
	or.b32  	%r204, %r531, %r532;
	add.s32 	%r534, %r202, %r201;
	add.s32 	%r535, %r534, %r203;
	add.s32 	%r205, %r535, %r204;
	add.s32 	%r206, %r205, 1576;
	or.b32  	%r536, %r204, 4;
	add.s32 	%r207, %r535, %r536;
	add.s32 	%r208, %r205, 1580;
	or.b32  	%r537, %r531, 8;
	add.s32 	%r538, %r537, %r532;
	add.s32 	%r209, %r535, %r538;
	add.s32 	%r539, %r532, 1576;
	add.s32 	%r540, %r539, %r537;
	add.s32 	%r210, %r535, %r540;
	or.b32  	%r541, %r486, %r66;
	or.b32  	%r542, %r541, 12;
	add.s32 	%r543, %r542, %r532;
	add.s32 	%r211, %r535, %r543;
	add.s32 	%r544, %r539, %r542;
	add.s32 	%r212, %r535, %r544;
	and.b32  	%r545, %r161, 6;
	and.b32  	%r546, %r2, 1;
	neg.s32 	%r547, %r546;
	and.b32  	%r548, %r547, 392;
	and.b32  	%r549, %r533, 1576;
	shr.u32 	%r550, %r2, 2;
	bfe.s32 	%r551, %r2, 1, 1;
	and.b32  	%r552, %r551, 196;
	mad.lo.s32 	%r553, %r550, 98, %r545;
	mad.lo.s32 	%r554, %r66, 784, %r553;
	or.b32  	%r555, %r554, %r64;
	add.s32 	%r556, %r555, %r548;
	add.s32 	%r557, %r556, %r549;
	add.s32 	%r213, %r557, %r552;
	add.s32 	%r214, %r213, 8;
	and.b32  	%r558, %r265, 7;
	mul.lo.s32 	%r559, %r4, 9792;
	or.b32  	%r560, %r175, %r182;
	cvt.u16.u32 	%rs43, %r560;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r561, %rs49;
	and.b32  	%r562, %r561, 248;
	or.b32  	%r563, %r559, %r558;
	add.s32 	%r215, %r563, %r562;
	add.s32 	%r564, %r199, %r198;
	mul.wide.u32 	%rd47, %r564, 4;
	mov.u64 	%rd48, shmem;
	add.s64 	%rd12, %rd48, %rd47;
	add.s32 	%r565, %r200, %r198;
	mul.wide.u32 	%rd49, %r565, 4;
	add.s64 	%rd13, %rd48, %rd49;
	cvt.u64.u32 	%rd50, %r199;
	cvt.u64.u16 	%rd51, %rs42;
	and.b64  	%rd52, %rd51, 255;
	add.s64 	%rd53, %rd50, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd14, %rd48, %rd54;
	cvt.u64.u32 	%rd55, %r200;
	add.s64 	%rd56, %rd55, %rd52;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd15, %rd48, %rd57;
	or.pred  	%p221, %p216, %p217;
	and.b32  	%r566, %r265, 24;
	setp.eq.s32 	%p222, %r566, 8;
	or.pred  	%p223, %p221, %p222;
	or.pred  	%p224, %p223, %p218;
	setp.eq.s32 	%p225, %r566, 24;
	or.pred  	%p226, %p219, %p225;
	selp.b32 	%r216, 1145324612, -286331154, %p223;
	or.pred  	%p1, %p224, %p226;
	selp.b32 	%r217, 1145324612, -286331154, %p221;
	add.s32 	%r567, %r7, -1;
	setp.lt.u32 	%p227, %r567, 3;
	or.pred  	%p2, %p216, %p227;
	setp.eq.s32 	%p228, %r566, 16;
	or.pred  	%p3, %p228, %p225;
	selp.b32 	%r218, 1145324612, -286331154, %p228;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r484, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r239, %r217, %r218, %p2;
	or.pred  	%p236, %p2, %p3;
	mov.u32 	%r86, %r198;
	mov.u32 	%r87, %r484;
	mov.u32 	%r108, %r484;
	mov.u32 	%r109, %r484;
	mov.u32 	%r110, %r484;
	bra.uni 	$L__BB0_134;
$L__BB0_156:                            // %L30566
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r148, %r87, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s32 	%r86, %r86, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p255, %r87, 2016;
	mov.u32 	%r87, %r148;
	@%p255 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_157;
$L__BB0_134:                            // %L1478
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_136 Depth 2
                                        //     Child Loop BB0_146 Depth 2
	setp.ne.s32 	%p229, %r176, 3;
	setp.gt.u32 	%p230, %r2, 3;
	setp.eq.s32 	%p231, %r185, 0;
	mul.hi.u32 	%r665, %r87, -1431655765;
	shr.u32 	%r666, %r665, 5;
	mul.lo.s32 	%r667, %r666, 48;
	add.s32 	%r668, %r667, %r182;
	or.b32  	%r669, %r668, %r175;
	mul.hi.s32 	%r670, %r669, 266354561;
	shr.u32 	%r671, %r670, 31;
	shr.u32 	%r672, %r670, 7;
	add.s32 	%r673, %r672, %r671;
	mul.lo.s32 	%r674, %r673, 2064;
	sub.s32 	%r675, %r669, %r674;
	shl.b32 	%r676, %r675, 16;
	or.b32  	%r677, %r676, %r181;
	or.b32  	%r678, %r677, %r183;
	or.b32  	%r679, %r678, %r184;
	mul.wide.s32 	%rd58, %r679, 4;
	add.s64 	%rd59, %rd3, %rd58;
	ld.global.v4.u32 	{%r680, %r681, %r682, %r683}, [%rd59];
	add.s32 	%r684, %r668, 24;
	or.b32  	%r685, %r684, %r175;
	mul.hi.s32 	%r686, %r685, 266354561;
	shr.u32 	%r687, %r686, 31;
	shr.u32 	%r688, %r686, 7;
	add.s32 	%r689, %r688, %r687;
	mul.lo.s32 	%r690, %r689, 2064;
	sub.s32 	%r691, %r685, %r690;
	shl.b32 	%r692, %r691, 16;
	or.b32  	%r693, %r692, %r181;
	or.b32  	%r694, %r693, %r183;
	or.b32  	%r695, %r694, %r184;
	mul.wide.s32 	%rd60, %r695, 4;
	add.s64 	%rd61, %rd3, %rd60;
	ld.global.v4.u32 	{%r696, %r697, %r698, %r699}, [%rd61];
	selp.b32 	%r700, %r682, %r680, %p231;
	shfl.sync.bfly.b32	%r701, %r700, 4, 31, -1;
	selp.b32 	%r570, %r680, %r701, %p231;
	selp.b32 	%r575, %r701, %r682, %p231;
	selp.b32 	%r702, %r683, %r681, %p231;
	shfl.sync.bfly.b32	%r703, %r702, 4, 31, -1;
	selp.b32 	%r578, %r681, %r703, %p231;
	selp.b32 	%r583, %r703, %r683, %p231;
	selp.b32 	%r704, %r698, %r696, %p231;
	shfl.sync.bfly.b32	%r705, %r704, 4, 31, -1;
	selp.b32 	%r586, %r696, %r705, %p231;
	selp.b32 	%r591, %r705, %r698, %p231;
	selp.b32 	%r706, %r699, %r697, %p231;
	shfl.sync.bfly.b32	%r707, %r706, 4, 31, -1;
	selp.b32 	%r594, %r697, %r707, %p231;
	selp.b32 	%r599, %r707, %r699, %p231;
	shl.b32 	%r571, %r575, 4;
	mov.u32 	%r569, 252645135;
	// begin inline asm
	lop3.b32 %r601, %r569, %r570, %r571, 202;
	// end inline asm
	shr.u32 	%r574, %r570, 4;
	// begin inline asm
	lop3.b32 %r617, %r569, %r574, %r575, 202;
	// end inline asm
	shl.b32 	%r579, %r583, 4;
	// begin inline asm
	lop3.b32 %r609, %r569, %r578, %r579, 202;
	// end inline asm
	shr.u32 	%r582, %r578, 4;
	// begin inline asm
	lop3.b32 %r625, %r569, %r582, %r583, 202;
	// end inline asm
	shl.b32 	%r587, %r591, 4;
	// begin inline asm
	lop3.b32 %r602, %r569, %r586, %r587, 202;
	// end inline asm
	shr.u32 	%r590, %r586, 4;
	// begin inline asm
	lop3.b32 %r618, %r569, %r590, %r591, 202;
	// end inline asm
	shl.b32 	%r595, %r599, 4;
	// begin inline asm
	lop3.b32 %r610, %r569, %r594, %r595, 202;
	// end inline asm
	shr.u32 	%r598, %r594, 4;
	// begin inline asm
	lop3.b32 %r626, %r569, %r598, %r599, 202;
	// end inline asm
	mov.u32 	%r603, 25152;
	// begin inline asm
	prmt.b32 %r633, %r601, %r602, %r603;
	// end inline asm
	mov.u32 	%r607, 29521;
	// begin inline asm
	prmt.b32 %r649, %r601, %r602, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r641, %r609, %r610, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r609, %r610, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r634, %r617, %r618, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r650, %r617, %r618, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r642, %r625, %r626, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r625, %r626, %r607;
	// end inline asm
	mov.u32 	%r659, 21520;
	// begin inline asm
	prmt.b32 %r632, %r633, %r634, %r659;
	// end inline asm
	mov.u32 	%r663, 30258;
	// begin inline asm
	prmt.b32 %r636, %r633, %r634, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r640, %r641, %r642, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r644, %r641, %r642, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r648, %r649, %r650, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r652, %r649, %r650, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r657, %r658, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r657, %r658, %r663;
	// end inline asm
	mul.hi.s32 	%r708, %r669, 715827883;
	shr.u32 	%r709, %r708, 31;
	shr.s32 	%r710, %r708, 2;
	add.s32 	%r711, %r710, %r709;
	mul.lo.s32 	%r712, %r711, 24;
	sub.s32 	%r713, %r669, %r712;
	add.s32 	%r714, %r713, %r186;
	mul.wide.s32 	%rd62, %r714, 4;
	add.s64 	%rd64, %rd48, %rd62;
	st.shared.u32 	[%rd64], %r632;
	add.s32 	%r715, %r714, 128;
	mul.wide.u32 	%rd65, %r715, 4;
	add.s64 	%rd66, %rd48, %rd65;
	st.shared.u32 	[%rd66], %r640;
	add.s32 	%r716, %r714, 64;
	mul.wide.u32 	%rd67, %r716, 4;
	add.s64 	%rd68, %rd48, %rd67;
	st.shared.u32 	[%rd68], %r636;
	add.s32 	%r717, %r714, 192;
	mul.wide.u32 	%rd69, %r717, 4;
	add.s64 	%rd70, %rd48, %rd69;
	st.shared.u32 	[%rd70], %r644;
	add.s32 	%r718, %r714, 32;
	mul.wide.u32 	%rd71, %r718, 4;
	add.s64 	%rd72, %rd48, %rd71;
	st.shared.u32 	[%rd72], %r648;
	add.s32 	%r719, %r714, 160;
	mul.wide.u32 	%rd73, %r719, 4;
	add.s64 	%rd74, %rd48, %rd73;
	st.shared.u32 	[%rd74], %r656;
	add.s32 	%r720, %r714, 96;
	mul.wide.u32 	%rd75, %r720, 4;
	add.s64 	%rd76, %rd48, %rd75;
	st.shared.u32 	[%rd76], %r652;
	add.s32 	%r721, %r714, 224;
	mul.wide.u32 	%rd77, %r721, 4;
	add.s64 	%rd78, %rd48, %rd77;
	st.shared.u32 	[%rd78], %r660;
	bar.sync 	0;
	add.s32 	%r722, %r667, %r187;
	cvt.u16.u32 	%rs50, %r722;
	mul.hi.s16 	%rs51, %rs50, 10923;
	shr.u16 	%rs52, %rs51, 15;
	shr.s16 	%rs53, %rs51, 2;
	add.s16 	%rs54, %rs53, %rs52;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs50, %rs55;
	cvt.s32.s16 	%r723, %rs56;
	add.s32 	%r724, %r3, %r723;
	mul.wide.s32 	%rd79, %r724, 4;
	add.s64 	%rd80, %rd48, %rd79;
	ld.shared.u32 	%r725, [%rd80];
	add.s32 	%r726, %r188, %r723;
	mul.wide.s32 	%rd81, %r726, 4;
	add.s64 	%rd82, %rd48, %rd81;
	ld.shared.u32 	%r727, [%rd82];
	add.s32 	%r728, %r189, %r723;
	mul.wide.u32 	%rd83, %r728, 4;
	add.s64 	%rd84, %rd48, %rd83;
	ld.shared.u32 	%r729, [%rd84];
	add.s32 	%r730, %r190, %r723;
	mul.wide.u32 	%rd85, %r730, 4;
	add.s64 	%rd86, %rd48, %rd85;
	ld.shared.u32 	%r731, [%rd86];
	add.s32 	%r732, %r191, %r723;
	mul.wide.u32 	%rd87, %r732, 4;
	add.s64 	%rd88, %rd48, %rd87;
	ld.shared.u32 	%r733, [%rd88];
	add.s32 	%r734, %r192, %r723;
	mul.wide.u32 	%rd89, %r734, 4;
	add.s64 	%rd90, %rd48, %rd89;
	ld.shared.u32 	%r735, [%rd90];
	add.s32 	%r736, %r193, %r723;
	mul.wide.u32 	%rd91, %r736, 4;
	add.s64 	%rd92, %rd48, %rd91;
	ld.shared.u32 	%r737, [%rd92];
	add.s32 	%r738, %r194, %r723;
	mul.wide.u32 	%rd93, %r738, 4;
	add.s64 	%rd94, %rd48, %rd93;
	ld.shared.u32 	%r739, [%rd94];
	add.s32 	%r740, %r195, %r723;
	mul.wide.u32 	%rd95, %r740, 4;
	add.s64 	%rd96, %rd48, %rd95;
	ld.shared.u32 	%r741, [%rd96];
	add.s32 	%r742, %r196, %r723;
	mul.wide.u32 	%rd97, %r742, 4;
	add.s64 	%rd98, %rd48, %rd97;
	ld.shared.u32 	%r743, [%rd98];
	add.s32 	%r744, %r197, %r723;
	mul.wide.s32 	%rd99, %r744, 4;
	add.s64 	%rd100, %rd48, %rd99;
	ld.shared.u32 	%r745, [%rd100];
	bar.sync 	0;
	shfl.sync.idx.b32	%r746, %r174, 0, 31, -1;
	shfl.sync.idx.b32	%r747, %r174, 1, 31, -1;
	shfl.sync.idx.b32	%r748, %r174, 2, 31, -1;
	shfl.sync.idx.b32	%r749, %r174, 3, 31, -1;
	shfl.sync.idx.b32	%r750, %r174, 4, 31, -1;
	shfl.sync.idx.b32	%r751, %r174, 5, 31, -1;
	shfl.sync.idx.b32	%r752, %r174, 6, 31, -1;
	shfl.sync.idx.b32	%r753, %r174, 7, 31, -1;
	shfl.sync.idx.b32	%r754, %r174, 8, 31, -1;
	shfl.sync.idx.b32	%r755, %r174, 9, 31, -1;
	shfl.sync.idx.b32	%r756, %r174, 10, 31, -1;
	shfl.sync.idx.b32	%r757, %r174, 11, 31, -1;
	shfl.sync.idx.b32	%r758, %r174, 12, 31, -1;
	shfl.sync.idx.b32	%r759, %r174, 13, 31, -1;
	shfl.sync.idx.b32	%r760, %r174, 14, 31, -1;
	shfl.sync.idx.b32	%r761, %r174, 15, 31, -1;
	add.s32 	%r762, %r746, %r723;
	mul.wide.s32 	%rd101, %r762, 4;
	add.s64 	%rd102, %rd48, %rd101;
	st.shared.u32 	[%rd102], %r725;
	add.s32 	%r763, %r747, %r723;
	mul.wide.s32 	%rd103, %r763, 4;
	add.s64 	%rd104, %rd48, %rd103;
	st.shared.u32 	[%rd104], %r727;
	add.s32 	%r764, %r748, %r723;
	mul.wide.s32 	%rd105, %r764, 4;
	add.s64 	%rd106, %rd48, %rd105;
	st.shared.u32 	[%rd106], %r729;
	add.s32 	%r765, %r749, %r723;
	mul.wide.s32 	%rd107, %r765, 4;
	add.s64 	%rd108, %rd48, %rd107;
	st.shared.u32 	[%rd108], %r731;
	add.s32 	%r766, %r750, %r723;
	mul.wide.s32 	%rd109, %r766, 4;
	add.s64 	%rd110, %rd48, %rd109;
	st.shared.u32 	[%rd110], %r733;
	add.s32 	%r767, %r751, %r723;
	mul.wide.s32 	%rd111, %r767, 4;
	add.s64 	%rd112, %rd48, %rd111;
	st.shared.u32 	[%rd112], %r735;
	add.s32 	%r768, %r752, %r723;
	mul.wide.s32 	%rd113, %r768, 4;
	add.s64 	%rd114, %rd48, %rd113;
	st.shared.u32 	[%rd114], %r737;
	add.s32 	%r769, %r753, %r723;
	mul.wide.s32 	%rd115, %r769, 4;
	add.s64 	%rd116, %rd48, %rd115;
	st.shared.u32 	[%rd116], %r739;
	add.s32 	%r770, %r754, %r723;
	mul.wide.s32 	%rd117, %r770, 4;
	add.s64 	%rd118, %rd48, %rd117;
	st.shared.u32 	[%rd118], %r741;
	add.s32 	%r771, %r755, %r723;
	mul.wide.s32 	%rd119, %r771, 4;
	add.s64 	%rd120, %rd48, %rd119;
	st.shared.u32 	[%rd120], %r743;
	selp.b32 	%r772, 0, %r745, %p230;
	add.s32 	%r773, %r756, %r723;
	mul.wide.s32 	%rd121, %r773, 4;
	add.s64 	%rd122, %rd48, %rd121;
	st.shared.u32 	[%rd122], %r772;
	add.s32 	%r774, %r757, %r723;
	mul.wide.s32 	%rd123, %r774, 4;
	add.s64 	%rd124, %rd48, %rd123;
	st.shared.u32 	[%rd124], %r484;
	add.s32 	%r775, %r758, %r723;
	mul.wide.s32 	%rd125, %r775, 4;
	add.s64 	%rd126, %rd48, %rd125;
	st.shared.u32 	[%rd126], %r484;
	add.s32 	%r776, %r759, %r723;
	mul.wide.s32 	%rd127, %r776, 4;
	add.s64 	%rd128, %rd48, %rd127;
	st.shared.u32 	[%rd128], %r484;
	add.s32 	%r777, %r760, %r723;
	mul.wide.s32 	%rd129, %r777, 4;
	add.s64 	%rd130, %rd48, %rd129;
	st.shared.u32 	[%rd130], %r484;
	add.s32 	%r778, %r761, %r723;
	mul.wide.s32 	%rd131, %r778, 4;
	add.s64 	%rd132, %rd48, %rd131;
	st.shared.u32 	[%rd132], %r484;
	bar.sync 	0;
	mov.u32 	%r92, %r484;
	mov.u32 	%r93, %r484;
	mov.u32 	%r94, %r484;
	mov.u32 	%r95, %r484;
	mov.u32 	%r96, %r484;
	mov.u32 	%r97, %r484;
	mov.u32 	%r98, %r484;
	mov.u32 	%r99, %r484;
	mov.u32 	%r100, %r484;
	mov.u32 	%r101, %r484;
	mov.u32 	%r102, %r484;
	mov.u32 	%r103, %r484;
	mov.u32 	%r104, %r484;
	mov.u32 	%r105, %r484;
	mov.u32 	%r106, %r484;
	mov.u32 	%r107, %r484;
	@%p229 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_135;
$L__BB0_183:                            // %oksrem2571
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r91, %r667, %r198;
	ld.shared.u32 	%r92, [%rd12];
	ld.shared.u32 	%r93, [%rd13];
	ld.shared.u32 	%r94, [%rd14+12];
	ld.shared.u32 	%r95, [%rd15+12];
	ld.shared.u32 	%r96, [%rd14+24];
	ld.shared.u32 	%r97, [%rd15+24];
	ld.shared.u32 	%r98, [%rd14+36];
	ld.shared.u32 	%r99, [%rd15+36];
	add.s32 	%r779, %r91, 12;
	mul.hi.u32 	%r780, %r779, -1431655765;
	shr.u32 	%r781, %r780, 4;
	mul.lo.s32 	%r782, %r781, 24;
	sub.s32 	%r783, %r779, %r782;
	add.s32 	%r784, %r199, %r783;
	mul.wide.u32 	%rd133, %r784, 4;
	add.s64 	%rd135, %rd48, %rd133;
	ld.shared.u32 	%r100, [%rd135];
	add.s32 	%r785, %r200, %r783;
	mul.wide.u32 	%rd136, %r785, 4;
	add.s64 	%rd137, %rd48, %rd136;
	ld.shared.u32 	%r101, [%rd137];
	cvt.u16.u32 	%rs57, %r91;
	add.s16 	%rs58, %rs57, 15;
	mul.hi.s16 	%rs59, %rs58, 10923;
	shr.u16 	%rs60, %rs59, 15;
	shr.s16 	%rs61, %rs59, 2;
	add.s16 	%rs62, %rs61, %rs60;
	mul.lo.s16 	%rs63, %rs62, 24;
	sub.s16 	%rs64, %rs58, %rs63;
	cvt.s32.s16 	%r786, %rs64;
	add.s32 	%r787, %r199, %r786;
	mul.wide.s32 	%rd138, %r787, 4;
	add.s64 	%rd139, %rd48, %rd138;
	ld.shared.u32 	%r102, [%rd139];
	add.s32 	%r788, %r200, %r786;
	mul.wide.u32 	%rd140, %r788, 4;
	add.s64 	%rd141, %rd48, %rd140;
	ld.shared.u32 	%r103, [%rd141];
	add.s16 	%rs65, %rs57, 18;
	mul.hi.s16 	%rs66, %rs65, 10923;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 2;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 24;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.s32.s16 	%r789, %rs71;
	add.s32 	%r790, %r199, %r789;
	mul.wide.s32 	%rd142, %r790, 4;
	add.s64 	%rd143, %rd48, %rd142;
	ld.shared.u32 	%r104, [%rd143];
	add.s32 	%r791, %r200, %r789;
	mul.wide.u32 	%rd144, %r791, 4;
	add.s64 	%rd145, %rd48, %rd144;
	ld.shared.u32 	%r105, [%rd145];
	add.s16 	%rs72, %rs57, 21;
	mul.hi.s16 	%rs73, %rs72, 10923;
	shr.u16 	%rs74, %rs73, 15;
	shr.s16 	%rs75, %rs73, 2;
	add.s16 	%rs76, %rs75, %rs74;
	mul.lo.s16 	%rs77, %rs76, 24;
	sub.s16 	%rs78, %rs72, %rs77;
	cvt.s32.s16 	%r792, %rs78;
	add.s32 	%r793, %r199, %r792;
	mul.wide.s32 	%rd146, %r793, 4;
	add.s64 	%rd147, %rd48, %rd146;
	ld.shared.u32 	%r106, [%rd147];
	add.s32 	%r794, %r200, %r792;
	mul.wide.u32 	%rd148, %r794, 4;
	add.s64 	%rd149, %rd48, %rd148;
	ld.shared.u32 	%r107, [%rd149];
$L__BB0_135:                            // %L8579
                                        //   in Loop: Header=BB0_134 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r484;
	bra.uni 	$L__BB0_136;
$L__BB0_143:                            // %L19562
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
$L__BB0_144:                            // %L19563
                                        //   in Loop: Header=BB0_136 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p243, %r111, 24;
	@%p243 bra 	$L__BB0_136;
	bra.uni 	$L__BB0_145;
$L__BB0_136:                            // %L8597
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p232, %r111, 0;
	selp.b32 	%r1188, %r92, 0, %p232;
	setp.eq.s32 	%p233, %r111, 6;
	selp.b32 	%r1189, %r96, %r1188, %p233;
	setp.eq.s32 	%p234, %r111, 12;
	selp.b32 	%r1190, %r100, %r1189, %p234;
	setp.eq.s32 	%p235, %r111, 18;
	selp.b32 	%r1191, %r104, %r1190, %p235;
	selp.b32 	%r1192, %r93, 0, %p232;
	selp.b32 	%r1193, %r97, %r1192, %p233;
	selp.b32 	%r1194, %r101, %r1193, %p234;
	selp.b32 	%r1195, %r105, %r1194, %p235;
	selp.b32 	%r1196, %r94, 0, %p232;
	selp.b32 	%r1197, %r98, %r1196, %p233;
	selp.b32 	%r1198, %r102, %r1197, %p234;
	selp.b32 	%r1199, %r106, %r1198, %p235;
	selp.b32 	%r1200, %r95, 0, %p232;
	selp.b32 	%r1201, %r99, %r1200, %p233;
	selp.b32 	%r1202, %r103, %r1201, %p234;
	selp.b32 	%r1203, %r107, %r1202, %p235;
	mov.u16 	%rs116, 25600;
	// begin inline asm
	mov.b32 %r801, {%rs116, %rs116};
	// end inline asm
	mov.u16 	%rs118, 21504;
	// begin inline asm
	mov.b32 %r812, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r800, %r1191, -2004318072;
	mov.u32 	%r937, 983055;
	// begin inline asm
	lop3.b32 %r798, %r937, %r800, %r801, 202;
	// end inline asm
	mov.u16 	%rs122, 18432;
	// begin inline asm
	mov.b32 %r802, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r803, %r801, %r802;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r806, %r798, %r803;
	// end inline asm
	mov.u32 	%r948, 15728880;
	// begin inline asm
	lop3.b32 %r809, %r948, %r800, %r812, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r813, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r814, %r812, %r813;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r817, %r809, %r814;
	// end inline asm
	// begin inline asm
	mov.b32 %r847, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r858, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r846, %r1195, -2004318072;
	// begin inline asm
	lop3.b32 %r844, %r937, %r846, %r847, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r848, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r849, %r847, %r848;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r852, %r844, %r849;
	// end inline asm
	// begin inline asm
	lop3.b32 %r855, %r948, %r846, %r858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r859, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r860, %r858, %r859;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r863, %r855, %r860;
	// end inline asm
	// begin inline asm
	mov.b32 %r893, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r904, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r892, %r1199, -2004318072;
	// begin inline asm
	lop3.b32 %r890, %r937, %r892, %r893, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r894, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r895, %r893, %r894;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r898, %r890, %r895;
	// end inline asm
	// begin inline asm
	lop3.b32 %r901, %r948, %r892, %r904, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r905, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r906, %r904, %r905;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r909, %r901, %r906;
	// end inline asm
	// begin inline asm
	mov.b32 %r939, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r950, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r938, %r1203, -2004318072;
	// begin inline asm
	lop3.b32 %r936, %r937, %r938, %r939, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r940, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r941, %r939, %r940;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r944, %r936, %r941;
	// end inline asm
	// begin inline asm
	lop3.b32 %r947, %r948, %r938, %r950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r951, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r952, %r950, %r951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r955, %r947, %r952;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r806;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r980, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r852;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r983, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r817;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r986, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r863;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r989, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r898;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r992, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r944;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r995, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r909;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r998, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r955;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1001, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1004, %r1005}, {%r278, %r281}, {%r980}, {%r484, %r484};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1011, %r1012}, {%r278, %r281}, {%r983}, {%r484, %r484};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1018, %r1019}, {%r278, %r281}, {%r986}, {%r484, %r484};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1025, %r1026}, {%r278, %r281}, {%r989}, {%r484, %r484};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1032, %r1033}, {%r278, %r281}, {%r992}, {%r484, %r484};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1039, %r1040}, {%r278, %r281}, {%r995}, {%r484, %r484};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1046, %r1047}, {%r278, %r281}, {%r998}, {%r484, %r484};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1053, %r1054}, {%r278, %r281}, {%r1001}, {%r484, %r484};
	// end inline asm
	@%p1 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_137;
$L__BB0_184:                            // %pass3911
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1060, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1062, %r1060, %r1005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1065, %r330, %r1004, %r1062;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1069, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1071, %r1069, %r1012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1074, %r330, %r1011, %r1071;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1078, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1080, %r1078, %r1019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1083, %r330, %r1018, %r1080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1087, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1089, %r1087, %r1026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1092, %r330, %r1025, %r1089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1096, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1098, %r1096, %r1033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r330, %r1032, %r1098;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1105, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1107, %r1105, %r1040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1110, %r330, %r1039, %r1107;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1114, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1116, %r1114, %r1047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r330, %r1046, %r1116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1123, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1125, %r1123, %r1054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r330, %r1053, %r1125;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r333, %r1004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r330, %r1005, %r1132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r333, %r1011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r330, %r1012, %r1139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1146, %r333, %r1018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r330, %r1019, %r1146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r333, %r1025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r330, %r1026, %r1153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1160, %r333, %r1032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r330, %r1033, %r1160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r333, %r1039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r330, %r1040, %r1167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1174, %r333, %r1046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r330, %r1047, %r1174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1181, %r333, %r1053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r330, %r1054, %r1181;
	// end inline asm
	mov.u32 	%r1353, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1277, %r1278}, {%r374, %r377}, {%r1065, %r1135}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1285, %r1286}, {%r374, %r377}, {%r1074, %r1142}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1293, %r1294}, {%r374, %r377}, {%r1083, %r1149}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1301, %r1302}, {%r374, %r377}, {%r1092, %r1156}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1309, %r1310}, {%r374, %r377}, {%r1101, %r1163}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1317, %r1318}, {%r374, %r377}, {%r1110, %r1170}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1325, %r1326}, {%r374, %r377}, {%r1119, %r1177}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1333, %r1334}, {%r374, %r377}, {%r1128, %r1184}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1276, %r1277, %r1278, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1280, %r1277, %r1278, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1285, %r1286, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1285, %r1286, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1293, %r1294, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1296, %r1293, %r1294, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1300, %r1301, %r1302, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1304, %r1301, %r1302, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r1309, %r1310, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1312, %r1309, %r1310, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1316, %r1317, %r1318, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1320, %r1317, %r1318, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1324, %r1325, %r1326, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1328, %r1325, %r1326, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1332, %r1333, %r1334, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1336, %r1333, %r1334, %r663;
	// end inline asm
	add.s32 	%r1386, %r86, %r111;
	mul.hi.u32 	%r1387, %r1386, -1431655765;
	shr.u32 	%r1388, %r1387, 2;
	mul.lo.s32 	%r1389, %r1388, 6;
	sub.s32 	%r1390, %r1386, %r1389;
	shl.b32 	%r1391, %r1390, 4;
	add.s32 	%r1392, %r205, %r1391;
	mul.wide.u32 	%rd152, %r1392, 4;
	add.s64 	%rd154, %rd48, %rd152;
	st.shared.u32 	[%rd154], %r1276;
	cvt.u64.u32 	%rd155, %r1391;
	cvt.u64.u32 	%rd156, %r204;
	cvt.u64.u32 	%rd157, %r203;
	cvt.u64.u32 	%rd158, %r202;
	cvt.u64.u32 	%rd159, %r201;
	add.s64 	%rd160, %rd159, %rd158;
	add.s64 	%rd161, %rd160, %rd157;
	add.s64 	%rd162, %rd161, %rd156;
	add.s64 	%rd163, %rd162, %rd155;
	shl.b64 	%rd164, %rd163, 2;
	add.s64 	%rd165, %rd48, %rd164;
	st.shared.u32 	[%rd165+6304], %r1280;
	add.s32 	%r1393, %r207, %r1391;
	mul.wide.u32 	%rd166, %r1393, 4;
	add.s64 	%rd167, %rd48, %rd166;
	st.shared.u32 	[%rd167], %r1284;
	st.shared.u32 	[%rd165+6320], %r1288;
	add.s32 	%r1394, %r209, %r1391;
	mul.wide.u32 	%rd168, %r1394, 4;
	add.s64 	%rd169, %rd48, %rd168;
	st.shared.u32 	[%rd169], %r1292;
	add.s32 	%r1395, %r210, %r1391;
	mul.wide.u32 	%rd170, %r1395, 4;
	add.s64 	%rd171, %rd48, %rd170;
	st.shared.u32 	[%rd171], %r1296;
	add.s32 	%r1396, %r211, %r1391;
	mul.wide.u32 	%rd172, %r1396, 4;
	add.s64 	%rd173, %rd48, %rd172;
	st.shared.u32 	[%rd173], %r1300;
	add.s32 	%r1397, %r212, %r1391;
	mul.wide.u32 	%rd174, %r1397, 4;
	add.s64 	%rd175, %rd48, %rd174;
	st.shared.u32 	[%rd175], %r1304;
	add.s32 	%r1398, %r1386, 3;
	mul.hi.u32 	%r1399, %r1398, -1431655765;
	shr.u32 	%r1400, %r1399, 2;
	mul.lo.s32 	%r1401, %r1400, 6;
	sub.s32 	%r1402, %r1398, %r1401;
	shl.b32 	%r1403, %r1402, 4;
	add.s32 	%r1404, %r205, %r1403;
	mul.wide.u32 	%rd176, %r1404, 4;
	add.s64 	%rd177, %rd48, %rd176;
	st.shared.u32 	[%rd177], %r1308;
	cvt.u64.u32 	%rd178, %r1403;
	add.s64 	%rd179, %rd162, %rd178;
	shl.b64 	%rd180, %rd179, 2;
	add.s64 	%rd181, %rd48, %rd180;
	st.shared.u32 	[%rd181+6304], %r1312;
	add.s32 	%r1405, %r207, %r1403;
	mul.wide.u32 	%rd182, %r1405, 4;
	add.s64 	%rd183, %rd48, %rd182;
	st.shared.u32 	[%rd183], %r1316;
	st.shared.u32 	[%rd181+6320], %r1320;
	add.s32 	%r1406, %r209, %r1403;
	mul.wide.u32 	%rd184, %r1406, 4;
	add.s64 	%rd185, %rd48, %rd184;
	st.shared.u32 	[%rd185], %r1324;
	add.s32 	%r1407, %r210, %r1403;
	mul.wide.u32 	%rd186, %r1407, 4;
	add.s64 	%rd187, %rd48, %rd186;
	st.shared.u32 	[%rd187], %r1328;
	add.s32 	%r1408, %r211, %r1403;
	mul.wide.u32 	%rd188, %r1408, 4;
	add.s64 	%rd189, %rd48, %rd188;
	st.shared.u32 	[%rd189], %r1332;
	add.s32 	%r1409, %r212, %r1403;
	mul.wide.u32 	%rd190, %r1409, 4;
	add.s64 	%rd191, %rd48, %rd190;
	st.shared.u32 	[%rd191], %r1336;
	bar.sync 	0;
	mul.hi.s16 	%rs127, %rs3, 10923;
	shr.u16 	%rs128, %rs127, 15;
	add.s16 	%rs129, %rs127, %rs128;
	mul.lo.s16 	%rs130, %rs129, 6;
	sub.s16 	%rs131, %rs3, %rs130;
	mul.wide.s16 	%r1410, %rs131, 16;
	add.s32 	%r1411, %r213, %r1410;
	mul.wide.s32 	%rd192, %r1411, 4;
	add.s64 	%rd193, %rd48, %rd192;
	ld.shared.u32 	%r1344, [%rd193];
	add.s32 	%r1412, %r214, %r1410;
	mul.wide.s32 	%rd194, %r1412, 4;
	add.s64 	%rd195, %rd48, %rd194;
	ld.shared.u32 	%r1351, [%rd195];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1340, %r1341}, {%r386, %r389}, {%r1344}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1347, %r1348}, {%r386, %r389}, {%r1351}, {%r1353, %r1353};
	// end inline asm
	@%p236 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_185;
$L__BB0_187:                            // %pass6551
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1354, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1356, %r1354, %r1341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r424, %r1340, %r1356;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1365, %r1363, %r1348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r424, %r1347, %r1365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1372, %r427, %r1340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1375, %r424, %r1341, %r1372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r427, %r1347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r424, %r1348, %r1379;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1432, %r1435}, {%r470, %r473}, {%r1359, %r1375}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1439, %r1443}, {%r470, %r473}, {%r1368, %r1382}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1431, %r1432, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1434, %r1435, %r1435, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r1439, %r1439, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r1443, %r1443, %r1438;
	// end inline asm
	mov.u32 	%r1530, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1446, %r1530, %r1442, %r110;
	// end inline asm
	add.s32 	%r240, %r87, %r111;
	add.s32 	%r1533, %r240, 1;
	mul.hi.u32 	%r1534, %r1533, -1431655765;
	shr.u32 	%r1535, %r1534, 2;
	mul.lo.s32 	%r1536, %r1535, 6;
	sub.s32 	%r1537, %r1533, %r1536;
	shl.b32 	%r1538, %r1537, 4;
	add.s32 	%r1539, %r213, %r1538;
	mul.wide.u32 	%rd198, %r1539, 4;
	add.s64 	%rd200, %rd48, %rd198;
	ld.shared.u32 	%r1454, [%rd200];
	add.s32 	%r1540, %r214, %r1538;
	mul.wide.u32 	%rd201, %r1540, 4;
	add.s64 	%rd202, %rd48, %rd201;
	ld.shared.u32 	%r1461, [%rd202];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1471, %r1468}, {%r386, %r389}, {%r1454}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1480, %r1477}, {%r386, %r389}, {%r1461}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1464, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1466, %r1464, %r1468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1469, %r424, %r1471, %r1466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1473, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1475, %r1473, %r1477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1478, %r424, %r1480, %r1475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1482, %r427, %r1471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1485, %r424, %r1468, %r1482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1489, %r427, %r1480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r424, %r1477, %r1489;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1515, %r1518}, {%r470, %r473}, {%r1469, %r1485}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1522, %r1526}, {%r470, %r473}, {%r1478, %r1492}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1514, %r1515, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r1518, %r1518, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r1522, %r1522, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r1526, %r1526, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r1530, %r1525, %r1446;
	// end inline asm
	add.s32 	%r3057, %r108, 2;
	setp.eq.s32 	%p237, %r3057, 40;
	@%p237 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_188;
$L__BB0_138:                            // %L15473
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.lt.u32 	%p238, %r265, 8;
	@%p238 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_139;
$L__BB0_186:                            // %pass6974
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1541, %r109, 192, %r215;
	mul.wide.u32 	%rd203, %r1541, 4;
	add.s64 	%rd6, %rd4, %rd203;
	st.global.u32 	[%rd6], %r3059;
$L__BB0_139:                            // %L15672
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3057, 0;
	mov.u32 	%r3059, %r3057;
$L__BB0_188:                            // %oksrem7110
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r1709, %r240, 2;
	mul.hi.u32 	%r1710, %r1709, -1431655765;
	shr.u32 	%r1711, %r1710, 2;
	mul.lo.s32 	%r1712, %r1711, 6;
	sub.s32 	%r1713, %r1709, %r1712;
	shl.b32 	%r1714, %r1713, 4;
	add.s32 	%r1715, %r213, %r1714;
	mul.wide.u32 	%rd204, %r1715, 4;
	add.s64 	%rd206, %rd48, %rd204;
	ld.shared.u32 	%r1547, [%rd206];
	add.s32 	%r1716, %r214, %r1714;
	mul.wide.u32 	%rd207, %r1716, 4;
	add.s64 	%rd208, %rd48, %rd207;
	ld.shared.u32 	%r1554, [%rd208];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1564, %r1561}, {%r386, %r389}, {%r1547}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1573, %r1570}, {%r386, %r389}, {%r1554}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1557, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1559, %r1557, %r1561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r424, %r1564, %r1559;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1566, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1568, %r1566, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1571, %r424, %r1573, %r1568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1575, %r427, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1578, %r424, %r1561, %r1575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1582, %r427, %r1573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1585, %r424, %r1570, %r1582;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1608, %r1611}, {%r470, %r473}, {%r1562, %r1578}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1615, %r1619}, {%r470, %r473}, {%r1571, %r1585}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1607, %r1608, %r1608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r1611, %r1611, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r1615, %r1615, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r1619, %r1619, %r1614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r1530, %r1618, %r3059;
	// end inline asm
	add.s32 	%r1717, %r240, 3;
	mul.hi.u32 	%r1718, %r1717, -1431655765;
	shr.u32 	%r1719, %r1718, 2;
	mul.lo.s32 	%r1720, %r1719, 6;
	sub.s32 	%r1721, %r1717, %r1720;
	shl.b32 	%r1722, %r1721, 4;
	add.s32 	%r1723, %r213, %r1722;
	mul.wide.u32 	%rd209, %r1723, 4;
	add.s64 	%rd210, %rd48, %rd209;
	ld.shared.u32 	%r1630, [%rd210];
	add.s32 	%r1724, %r214, %r1722;
	mul.wide.u32 	%rd211, %r1724, 4;
	add.s64 	%rd212, %rd48, %rd211;
	ld.shared.u32 	%r1637, [%rd212];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1647, %r1644}, {%r386, %r389}, {%r1630}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1656, %r1653}, {%r386, %r389}, {%r1637}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1640, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1642, %r1640, %r1644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1645, %r424, %r1647, %r1642;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1649, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1651, %r1649, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r424, %r1656, %r1651;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1658, %r427, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1661, %r424, %r1644, %r1658;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1665, %r427, %r1656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1668, %r424, %r1653, %r1665;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1691, %r1694}, {%r470, %r473}, {%r1645, %r1661}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1698, %r1702}, {%r470, %r473}, {%r1654, %r1668}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r1691, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r1694, %r1694, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r1698, %r1698, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r1702, %r1702, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r1530, %r1701, %r1622;
	// end inline asm
	add.s32 	%r3060, %r3057, 2;
	setp.eq.s32 	%p239, %r3060, 40;
	@%p239 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_189;
$L__BB0_140:                            // %L17418
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.lt.u32 	%p240, %r265, 8;
	@%p240 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_141;
$L__BB0_194:                            // %pass7827
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1725, %r109, 192, %r215;
	mul.wide.u32 	%rd213, %r1725, 4;
	add.s64 	%rd7, %rd4, %rd213;
	st.global.u32 	[%rd7], %r3062;
$L__BB0_141:                            // %L17617
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3060, 0;
	mov.u32 	%r3062, %r3060;
$L__BB0_189:                            // %oksrem7963
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r1893, %r240, 4;
	mul.hi.u32 	%r1894, %r1893, -1431655765;
	shr.u32 	%r1895, %r1894, 2;
	mul.lo.s32 	%r1896, %r1895, 6;
	sub.s32 	%r1897, %r1893, %r1896;
	shl.b32 	%r1898, %r1897, 4;
	add.s32 	%r1899, %r213, %r1898;
	mul.wide.u32 	%rd214, %r1899, 4;
	add.s64 	%rd216, %rd48, %rd214;
	ld.shared.u32 	%r1731, [%rd216];
	add.s32 	%r1900, %r214, %r1898;
	mul.wide.u32 	%rd217, %r1900, 4;
	add.s64 	%rd218, %rd48, %rd217;
	ld.shared.u32 	%r1738, [%rd218];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1748, %r1745}, {%r386, %r389}, {%r1731}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1757, %r1754}, {%r386, %r389}, {%r1738}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1741, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1743, %r1741, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r424, %r1748, %r1743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1750, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1752, %r1750, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r424, %r1757, %r1752;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r427, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r424, %r1745, %r1759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1766, %r427, %r1757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r424, %r1754, %r1766;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1792, %r1795}, {%r470, %r473}, {%r1746, %r1762}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1799, %r1803}, {%r470, %r473}, {%r1755, %r1769}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1791, %r1792, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1795, %r1795, %r1791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r1799, %r1799, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r1803, %r1803, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r1530, %r1802, %r3062;
	// end inline asm
	add.s32 	%r1901, %r240, 5;
	mul.hi.u32 	%r1902, %r1901, -1431655765;
	shr.u32 	%r1903, %r1902, 2;
	mul.lo.s32 	%r1904, %r1903, 6;
	sub.s32 	%r1905, %r1901, %r1904;
	shl.b32 	%r1906, %r1905, 4;
	add.s32 	%r1907, %r213, %r1906;
	mul.wide.u32 	%rd219, %r1907, 4;
	add.s64 	%rd220, %rd48, %rd219;
	ld.shared.u32 	%r1814, [%rd220];
	add.s32 	%r1908, %r214, %r1906;
	mul.wide.u32 	%rd221, %r1908, 4;
	add.s64 	%rd222, %rd48, %rd221;
	ld.shared.u32 	%r1821, [%rd222];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1831, %r1828}, {%r386, %r389}, {%r1814}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1840, %r1837}, {%r386, %r389}, {%r1821}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1824, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1826, %r1824, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r424, %r1831, %r1826;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1833, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1835, %r1833, %r1837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1838, %r424, %r1840, %r1835;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1842, %r427, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r424, %r1828, %r1842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1849, %r427, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r424, %r1837, %r1849;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1875, %r1878}, {%r470, %r473}, {%r1829, %r1845}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1882, %r1886}, {%r470, %r473}, {%r1838, %r1852}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r1875, %r1875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r1878, %r1878, %r1874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r1882, %r1882, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r1886, %r1886, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1530, %r1885, %r1806;
	// end inline asm
	add.s32 	%r108, %r3060, 2;
	setp.eq.s32 	%p241, %r108, 40;
	@%p241 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_144;
$L__BB0_142:                            // %L19363
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.lt.u32 	%p242, %r265, 8;
	@%p242 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_143;
$L__BB0_190:                            // %pass8680
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1909, %r109, 192, %r215;
	mul.wide.u32 	%rd223, %r1909, 4;
	add.s64 	%rd8, %rd4, %rd223;
	st.global.u32 	[%rd8], %r110;
	bra.uni 	$L__BB0_143;
$L__BB0_145:                            // %L19584.preheader
                                        //   in Loop: Header=BB0_134 Depth=1
	mov.u16 	%rs232, %rs1;
	mov.u32 	%r3048, %r1353;
	bra.uni 	$L__BB0_146;
$L__BB0_154:                            // %L30549
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2797;
	mov.u32 	%r110, %r2797;
$L__BB0_155:                            // %L30550
                                        //   in Loop: Header=BB0_146 Depth=2
	bar.sync 	0;
	add.s32 	%r3048, %r3048, 6;
	add.s16 	%rs232, %rs232, 6;
	setp.ne.s32 	%p254, %r3048, 24;
	@%p254 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_156;
$L__BB0_146:                            // %L19584
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p244, %r3048, 0;
	selp.b32 	%r2606, %r92, 0, %p244;
	setp.eq.s32 	%p245, %r3048, 6;
	selp.b32 	%r2607, %r96, %r2606, %p245;
	setp.eq.s32 	%p246, %r3048, 12;
	selp.b32 	%r2608, %r100, %r2607, %p246;
	setp.eq.s32 	%p247, %r3048, 18;
	selp.b32 	%r2609, %r104, %r2608, %p247;
	selp.b32 	%r2610, %r93, 0, %p244;
	selp.b32 	%r2611, %r97, %r2610, %p245;
	selp.b32 	%r2612, %r101, %r2611, %p246;
	selp.b32 	%r2613, %r105, %r2612, %p247;
	selp.b32 	%r2614, %r94, 0, %p244;
	selp.b32 	%r2615, %r98, %r2614, %p245;
	selp.b32 	%r2616, %r102, %r2615, %p246;
	selp.b32 	%r2617, %r106, %r2616, %p247;
	selp.b32 	%r2618, %r95, 0, %p244;
	selp.b32 	%r2619, %r99, %r2618, %p245;
	selp.b32 	%r2620, %r103, %r2619, %p246;
	selp.b32 	%r2621, %r107, %r2620, %p247;
	// begin inline asm
	mov.b32 %r1939, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r1950, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2622, %r2609, 8;
	xor.b32  	%r1949, %r2622, 8947848;
	// begin inline asm
	lop3.b32 %r1936, %r937, %r1949, %r1939, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1940, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1941, %r1939, %r1940;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1944, %r1936, %r1941;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1947, %r948, %r1949, %r1950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1951, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1952, %r1950, %r1951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1955, %r1947, %r1952;
	// end inline asm
	// begin inline asm
	mov.b32 %r1985, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r1996, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2623, %r2613, 8;
	xor.b32  	%r1995, %r2623, 8947848;
	// begin inline asm
	lop3.b32 %r1982, %r937, %r1995, %r1985, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1986, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1987, %r1985, %r1986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1990, %r1982, %r1987;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1993, %r948, %r1995, %r1996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1997, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1998, %r1996, %r1997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2001, %r1993, %r1998;
	// end inline asm
	// begin inline asm
	mov.b32 %r2031, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2042, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2624, %r2617, 8;
	xor.b32  	%r2041, %r2624, 8947848;
	// begin inline asm
	lop3.b32 %r2028, %r937, %r2041, %r2031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2032, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2033, %r2031, %r2032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2036, %r2028, %r2033;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2039, %r948, %r2041, %r2042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2043, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2044, %r2042, %r2043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2047, %r2039, %r2044;
	// end inline asm
	// begin inline asm
	mov.b32 %r2077, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2088, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2625, %r2621, 8;
	xor.b32  	%r2087, %r2625, 8947848;
	// begin inline asm
	lop3.b32 %r2074, %r937, %r2087, %r2077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2078, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2079, %r2077, %r2078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2082, %r2074, %r2079;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2085, %r948, %r2087, %r2088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2089, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2090, %r2088, %r2089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2093, %r2085, %r2090;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1944;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2096, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1990;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2099, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r1955;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2102, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2001;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2105, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2036;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2108, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2082;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2111, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2047;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2114, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2093;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2117, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2183, %r2180}, {%r278, %r281}, {%r2096}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2192, %r2189}, {%r278, %r281}, {%r2099}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2201, %r2198}, {%r278, %r281}, {%r2102}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2210, %r2207}, {%r278, %r281}, {%r2105}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2219, %r2216}, {%r278, %r281}, {%r2108}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2228, %r2225}, {%r278, %r281}, {%r2111}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2237, %r2234}, {%r278, %r281}, {%r2114}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2246, %r2243}, {%r278, %r281}, {%r2117}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2176, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2178, %r2176, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2181, %r330, %r2183, %r2178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2185, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2187, %r2185, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2190, %r330, %r2192, %r2187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2194, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2196, %r2194, %r2198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2199, %r330, %r2201, %r2196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2203, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2205, %r2203, %r2207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2208, %r330, %r2210, %r2205;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2212, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2214, %r2212, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2217, %r330, %r2219, %r2214;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2221, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2223, %r2221, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r330, %r2228, %r2223;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2230, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2232, %r2230, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2235, %r330, %r2237, %r2232;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2239, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2241, %r2239, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2244, %r330, %r2246, %r2241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2248, %r333, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2251, %r330, %r2180, %r2248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r333, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2258, %r330, %r2189, %r2255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2262, %r333, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2265, %r330, %r2198, %r2262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2269, %r333, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2272, %r330, %r2207, %r2269;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2276, %r333, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2279, %r330, %r2216, %r2276;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2283, %r333, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2286, %r330, %r2225, %r2283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2290, %r333, %r2237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2293, %r330, %r2234, %r2290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2297, %r333, %r2246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2300, %r330, %r2243, %r2297;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2377, %r2378}, {%r374, %r377}, {%r2181, %r2251}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2385, %r2386}, {%r374, %r377}, {%r2190, %r2258}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2393, %r2394}, {%r374, %r377}, {%r2199, %r2265}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2401, %r2402}, {%r374, %r377}, {%r2208, %r2272}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2409, %r2410}, {%r374, %r377}, {%r2217, %r2279}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2417, %r2418}, {%r374, %r377}, {%r2226, %r2286}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2425, %r2426}, {%r374, %r377}, {%r2235, %r2293}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2433, %r2434}, {%r374, %r377}, {%r2244, %r2300}, {%r1353, %r1353}, %r216, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2376, %r2377, %r2378, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2380, %r2377, %r2378, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2384, %r2385, %r2386, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2388, %r2385, %r2386, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2392, %r2393, %r2394, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2396, %r2393, %r2394, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2400, %r2401, %r2402, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2404, %r2401, %r2402, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2408, %r2409, %r2410, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2412, %r2409, %r2410, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2416, %r2417, %r2418, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2420, %r2417, %r2418, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2424, %r2425, %r2426, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2428, %r2425, %r2426, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2432, %r2433, %r2434, %r659;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2436, %r2433, %r2434, %r663;
	// end inline asm
	add.s16 	%rs180, %rs10, %rs232;
	add.s16 	%rs181, %rs180, -29;
	mul.hi.s16 	%rs182, %rs181, 10923;
	shr.u16 	%rs183, %rs182, 15;
	add.s16 	%rs184, %rs182, %rs183;
	mul.lo.s16 	%rs185, %rs184, 6;
	sub.s16 	%rs186, %rs181, %rs185;
	mul.wide.s16 	%r2626, %rs186, 16;
	add.s32 	%r2627, %r205, %r2626;
	mul.wide.s32 	%rd224, %r2627, 4;
	add.s64 	%rd226, %rd48, %rd224;
	st.shared.u32 	[%rd226], %r2376;
	add.s32 	%r2628, %r206, %r2626;
	mul.wide.u32 	%rd227, %r2628, 4;
	add.s64 	%rd228, %rd48, %rd227;
	st.shared.u32 	[%rd228], %r2380;
	add.s32 	%r2629, %r207, %r2626;
	mul.wide.s32 	%rd229, %r2629, 4;
	add.s64 	%rd230, %rd48, %rd229;
	st.shared.u32 	[%rd230], %r2384;
	add.s32 	%r2630, %r208, %r2626;
	mul.wide.u32 	%rd231, %r2630, 4;
	add.s64 	%rd232, %rd48, %rd231;
	st.shared.u32 	[%rd232], %r2388;
	add.s32 	%r2631, %r209, %r2626;
	mul.wide.s32 	%rd233, %r2631, 4;
	add.s64 	%rd234, %rd48, %rd233;
	st.shared.u32 	[%rd234], %r2392;
	add.s32 	%r2632, %r210, %r2626;
	mul.wide.u32 	%rd235, %r2632, 4;
	add.s64 	%rd236, %rd48, %rd235;
	st.shared.u32 	[%rd236], %r2396;
	add.s32 	%r2633, %r211, %r2626;
	mul.wide.s32 	%rd237, %r2633, 4;
	add.s64 	%rd238, %rd48, %rd237;
	st.shared.u32 	[%rd238], %r2400;
	add.s32 	%r2634, %r212, %r2626;
	mul.wide.u32 	%rd239, %r2634, 4;
	add.s64 	%rd240, %rd48, %rd239;
	st.shared.u32 	[%rd240], %r2404;
	add.s16 	%rs187, %rs9, %rs232;
	add.s16 	%rs188, %rs187, -2;
	mul.hi.s16 	%rs189, %rs188, 10923;
	shr.u16 	%rs190, %rs189, 15;
	add.s16 	%rs191, %rs189, %rs190;
	mul.lo.s16 	%rs192, %rs191, 6;
	sub.s16 	%rs193, %rs188, %rs192;
	mul.wide.s16 	%r2635, %rs193, 16;
	add.s32 	%r2636, %r205, %r2635;
	mul.wide.s32 	%rd241, %r2636, 4;
	add.s64 	%rd242, %rd48, %rd241;
	st.shared.u32 	[%rd242], %r2408;
	add.s32 	%r2637, %r206, %r2635;
	mul.wide.u32 	%rd243, %r2637, 4;
	add.s64 	%rd244, %rd48, %rd243;
	st.shared.u32 	[%rd244], %r2412;
	add.s32 	%r2638, %r207, %r2635;
	mul.wide.s32 	%rd245, %r2638, 4;
	add.s64 	%rd246, %rd48, %rd245;
	st.shared.u32 	[%rd246], %r2416;
	add.s32 	%r2639, %r208, %r2635;
	mul.wide.u32 	%rd247, %r2639, 4;
	add.s64 	%rd248, %rd48, %rd247;
	st.shared.u32 	[%rd248], %r2420;
	add.s32 	%r2640, %r209, %r2635;
	mul.wide.s32 	%rd249, %r2640, 4;
	add.s64 	%rd250, %rd48, %rd249;
	st.shared.u32 	[%rd250], %r2424;
	add.s32 	%r2641, %r210, %r2635;
	mul.wide.u32 	%rd251, %r2641, 4;
	add.s64 	%rd252, %rd48, %rd251;
	st.shared.u32 	[%rd252], %r2428;
	add.s32 	%r2642, %r211, %r2635;
	mul.wide.s32 	%rd253, %r2642, 4;
	add.s64 	%rd254, %rd48, %rd253;
	st.shared.u32 	[%rd254], %r2432;
	add.s32 	%r2643, %r212, %r2635;
	mul.wide.u32 	%rd255, %r2643, 4;
	add.s64 	%rd256, %rd48, %rd255;
	st.shared.u32 	[%rd256], %r2436;
	bar.sync 	0;
	add.s16 	%rs194, %rs232, -5;
	mul.hi.s16 	%rs195, %rs194, 10923;
	shr.u16 	%rs196, %rs195, 15;
	add.s16 	%rs197, %rs195, %rs196;
	mul.lo.s16 	%rs198, %rs197, 6;
	sub.s16 	%rs199, %rs194, %rs198;
	mul.wide.s16 	%r2644, %rs199, 16;
	add.s32 	%r2645, %r213, %r2644;
	mul.wide.s32 	%rd257, %r2645, 4;
	add.s64 	%rd258, %rd48, %rd257;
	ld.shared.u32 	%r2444, [%rd258];
	add.s32 	%r2646, %r214, %r2644;
	mul.wide.s32 	%rd259, %r2646, 4;
	add.s64 	%rd260, %rd48, %rd259;
	ld.shared.u32 	%r2451, [%rd260];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2461, %r2458}, {%r386, %r389}, {%r2444}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2470, %r2467}, {%r386, %r389}, {%r2451}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2454, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2456, %r2454, %r2458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2459, %r424, %r2461, %r2456;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2463, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2465, %r2463, %r2467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2468, %r424, %r2470, %r2465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2472, %r427, %r2461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2475, %r424, %r2458, %r2472;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2479, %r427, %r2470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r424, %r2467, %r2479;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2505, %r2508}, {%r470, %r473}, {%r2459, %r2475}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2512, %r2516}, {%r470, %r473}, {%r2468, %r2482}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2504, %r2505, %r2505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2507, %r2508, %r2508, %r2504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r2512, %r2512, %r2507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2515, %r2516, %r2516, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r1530, %r2515, %r110;
	// end inline asm
	add.s16 	%rs200, %rs232, -4;
	mul.hi.s16 	%rs201, %rs200, 10923;
	shr.u16 	%rs202, %rs201, 15;
	add.s16 	%rs203, %rs201, %rs202;
	mul.lo.s16 	%rs204, %rs203, 6;
	sub.s16 	%rs205, %rs200, %rs204;
	mul.wide.s16 	%r2647, %rs205, 16;
	add.s32 	%r2648, %r213, %r2647;
	mul.wide.s32 	%rd261, %r2648, 4;
	add.s64 	%rd262, %rd48, %rd261;
	ld.shared.u32 	%r2527, [%rd262];
	add.s32 	%r2649, %r214, %r2647;
	mul.wide.s32 	%rd263, %r2649, 4;
	add.s64 	%rd264, %rd48, %rd263;
	ld.shared.u32 	%r2534, [%rd264];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2544, %r2541}, {%r386, %r389}, {%r2527}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2553, %r2550}, {%r386, %r389}, {%r2534}, {%r1353, %r1353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2537, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2539, %r2537, %r2541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r424, %r2544, %r2539;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2546, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2548, %r2546, %r2550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2551, %r424, %r2553, %r2548;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2555, %r427, %r2544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2558, %r424, %r2541, %r2555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2562, %r427, %r2553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2565, %r424, %r2550, %r2562;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2588, %r2591}, {%r470, %r473}, {%r2542, %r2558}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2595, %r2599}, {%r470, %r473}, {%r2551, %r2565}, {%r1353, %r1353}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2587, %r2588, %r2588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2590, %r2591, %r2591, %r2587;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2594, %r2595, %r2595, %r2590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2598, %r2599, %r2599, %r2594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r1530, %r2598, %r2519;
	// end inline asm
	add.s32 	%r3063, %r108, 2;
	setp.ne.s32 	%p248, %r3063, 40;
	@%p248 bra 	$L__BB0_149;
// %bb.147:                             // %L26460
                                        //   in Loop: Header=BB0_146 Depth=2
	setp.lt.u32 	%p249, %r265, 8;
	@%p249 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_148;
$L__BB0_191:                            // %pass11862
                                        //   in Loop: Header=BB0_146 Depth=2
	mad.lo.s32 	%r2650, %r109, 192, %r215;
	mul.wide.u32 	%rd265, %r2650, 4;
	add.s64 	%rd9, %rd4, %rd265;
	st.global.u32 	[%rd9], %r3065;
$L__BB0_148:                            // %L26659
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3063, 0;
	mov.u32 	%r3065, %r3063;
$L__BB0_149:                            // %oksrem11998
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s16 	%rs206, %rs232, -3;
	mul.hi.s16 	%rs207, %rs206, 10923;
	shr.u16 	%rs208, %rs207, 15;
	add.s16 	%rs209, %rs207, %rs208;
	mul.lo.s16 	%rs210, %rs209, 6;
	sub.s16 	%rs211, %rs206, %rs210;
	mul.wide.s16 	%r2818, %rs211, 16;
	add.s32 	%r2819, %r213, %r2818;
	mul.wide.s32 	%rd266, %r2819, 4;
	add.s64 	%rd268, %rd48, %rd266;
	ld.shared.u32 	%r2656, [%rd268];
	add.s32 	%r2820, %r214, %r2818;
	mul.wide.s32 	%rd269, %r2820, 4;
	add.s64 	%rd270, %rd48, %rd269;
	ld.shared.u32 	%r2663, [%rd270];
	mov.u32 	%r2797, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2673, %r2670}, {%r386, %r389}, {%r2656}, {%r2797, %r2797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2682, %r2679}, {%r386, %r389}, {%r2663}, {%r2797, %r2797};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2666, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2668, %r2666, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2671, %r424, %r2673, %r2668;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2675, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2677, %r2675, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2680, %r424, %r2682, %r2677;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2684, %r427, %r2673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2687, %r424, %r2670, %r2684;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r427, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r424, %r2679, %r2691;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2717, %r2720}, {%r470, %r473}, {%r2671, %r2687}, {%r2797, %r2797}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2724, %r2728}, {%r470, %r473}, {%r2680, %r2694}, {%r2797, %r2797}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r2717, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r2720, %r2720, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r2724, %r2724, %r2719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2727, %r2728, %r2728, %r2723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2731, %r1530, %r2727, %r3065;
	// end inline asm
	add.s16 	%rs212, %rs232, -2;
	mul.hi.s16 	%rs213, %rs212, 10923;
	shr.u16 	%rs214, %rs213, 15;
	add.s16 	%rs215, %rs213, %rs214;
	mul.lo.s16 	%rs216, %rs215, 6;
	sub.s16 	%rs217, %rs212, %rs216;
	mul.wide.s16 	%r2821, %rs217, 16;
	add.s32 	%r2822, %r213, %r2821;
	mul.wide.s32 	%rd271, %r2822, 4;
	add.s64 	%rd272, %rd48, %rd271;
	ld.shared.u32 	%r2739, [%rd272];
	add.s32 	%r2823, %r214, %r2821;
	mul.wide.s32 	%rd273, %r2823, 4;
	add.s64 	%rd274, %rd48, %rd273;
	ld.shared.u32 	%r2746, [%rd274];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2756, %r2753}, {%r386, %r389}, {%r2739}, {%r2797, %r2797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2765, %r2762}, {%r386, %r389}, {%r2746}, {%r2797, %r2797};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2749, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2751, %r2749, %r2753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2754, %r424, %r2756, %r2751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2758, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2760, %r2758, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2763, %r424, %r2765, %r2760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2767, %r427, %r2756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2770, %r424, %r2753, %r2767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2774, %r427, %r2765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r424, %r2762, %r2774;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2800, %r2803}, {%r470, %r473}, {%r2754, %r2770}, {%r2797, %r2797}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2807, %r2811}, {%r470, %r473}, {%r2763, %r2777}, {%r2797, %r2797}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2799, %r2800, %r2800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2802, %r2803, %r2803, %r2799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2806, %r2807, %r2807, %r2802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2810, %r2811, %r2811, %r2806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r1530, %r2810, %r2731;
	// end inline asm
	add.s32 	%r3066, %r3063, 2;
	setp.eq.s32 	%p250, %r3066, 40;
	@%p250 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_152;
$L__BB0_150:                            // %L28405
                                        //   in Loop: Header=BB0_146 Depth=2
	setp.lt.u32 	%p251, %r265, 8;
	@%p251 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_151;
$L__BB0_192:                            // %pass12715
                                        //   in Loop: Header=BB0_146 Depth=2
	mad.lo.s32 	%r2824, %r109, 192, %r215;
	mul.wide.u32 	%rd275, %r2824, 4;
	add.s64 	%rd10, %rd4, %rd275;
	st.global.u32 	[%rd10], %r3068;
$L__BB0_151:                            // %L28604
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3066, 0;
	mov.u32 	%r3068, %r3066;
$L__BB0_152:                            // %oksrem12851
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s16 	%rs218, %rs232, -1;
	mul.hi.s16 	%rs219, %rs218, 10923;
	shr.u16 	%rs220, %rs219, 15;
	add.s16 	%rs221, %rs219, %rs220;
	mul.lo.s16 	%rs222, %rs221, 6;
	sub.s16 	%rs223, %rs218, %rs222;
	mul.wide.s16 	%r2992, %rs223, 16;
	add.s32 	%r2993, %r213, %r2992;
	mul.wide.s32 	%rd276, %r2993, 4;
	add.s64 	%rd278, %rd48, %rd276;
	ld.shared.u32 	%r2830, [%rd278];
	add.s32 	%r2994, %r214, %r2992;
	mul.wide.s32 	%rd279, %r2994, 4;
	add.s64 	%rd280, %rd48, %rd279;
	ld.shared.u32 	%r2837, [%rd280];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2847, %r2844}, {%r386, %r389}, {%r2830}, {%r2797, %r2797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2856, %r2853}, {%r386, %r389}, {%r2837}, {%r2797, %r2797};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2840, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2842, %r2840, %r2844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2845, %r424, %r2847, %r2842;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2849, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2851, %r2849, %r2853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2854, %r424, %r2856, %r2851;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2858, %r427, %r2847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2861, %r424, %r2844, %r2858;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2865, %r427, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2868, %r424, %r2853, %r2865;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2891, %r2894}, {%r470, %r473}, {%r2845, %r2861}, {%r2797, %r2797}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2898, %r2902}, {%r470, %r473}, {%r2854, %r2868}, {%r2797, %r2797}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2890, %r2891, %r2891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r2894, %r2894, %r2890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r2898, %r2898, %r2893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r2902, %r2902, %r2897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r1530, %r2901, %r3068;
	// end inline asm
	mul.hi.s16 	%rs224, %rs232, 10923;
	shr.u16 	%rs225, %rs224, 15;
	add.s16 	%rs226, %rs224, %rs225;
	mul.lo.s16 	%rs227, %rs226, 6;
	sub.s16 	%rs228, %rs232, %rs227;
	mul.wide.s16 	%r2995, %rs228, 16;
	add.s32 	%r2996, %r213, %r2995;
	mul.wide.s32 	%rd281, %r2996, 4;
	add.s64 	%rd282, %rd48, %rd281;
	ld.shared.u32 	%r2913, [%rd282];
	add.s32 	%r2997, %r214, %r2995;
	mul.wide.s32 	%rd283, %r2997, 4;
	add.s64 	%rd284, %rd48, %rd283;
	ld.shared.u32 	%r2920, [%rd284];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2930, %r2927}, {%r386, %r389}, {%r2913}, {%r2797, %r2797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2939, %r2936}, {%r386, %r389}, {%r2920}, {%r2797, %r2797};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2923, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2925, %r2923, %r2927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r424, %r2930, %r2925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2932, %r427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2934, %r2932, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r424, %r2939, %r2934;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2941, %r427, %r2930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r424, %r2927, %r2941;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2948, %r427, %r2939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r424, %r2936, %r2948;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2974, %r2977}, {%r470, %r473}, {%r2928, %r2944}, {%r2797, %r2797}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2981, %r2985}, {%r470, %r473}, {%r2937, %r2951}, {%r2797, %r2797}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2973, %r2974, %r2974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2976, %r2977, %r2977, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2980, %r2981, %r2981, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2984, %r2985, %r2985, %r2980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1530, %r2984, %r2905;
	// end inline asm
	add.s32 	%r108, %r3066, 2;
	setp.eq.s32 	%p252, %r108, 40;
	@%p252 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_155;
$L__BB0_153:                            // %L30350
                                        //   in Loop: Header=BB0_146 Depth=2
	setp.lt.u32 	%p253, %r265, 8;
	@%p253 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_154;
$L__BB0_193:                            // %pass13568
                                        //   in Loop: Header=BB0_146 Depth=2
	mad.lo.s32 	%r2998, %r109, 192, %r215;
	mul.wide.u32 	%rd285, %r2998, 4;
	add.s64 	%rd11, %rd4, %rd285;
	st.global.u32 	[%rd11], %r110;
	bra.uni 	$L__BB0_154;
$L__BB0_157:                            // %L30581
	st.global.u32 	[%rd5], %r2797;
	ret;
$L__BB0_137:                            // %post_box_union
	mov.u64 	%rd150, exception2634;
	cvta.global.u64 	%rd151, %rd150;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd151;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r263;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_185:                            // %post_box_union6546
	mov.u64 	%rd196, exception2634;
	cvta.global.u64 	%rd197, %rd196;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd197;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r263;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r263;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
