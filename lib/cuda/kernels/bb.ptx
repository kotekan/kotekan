// PTX CompilerJob of kernel #bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception866[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<1350>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd15, [_Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r85, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r85, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r86, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r86, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L30
	ld.param.u64 	%rd3, [_Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r87, %r1, 768;
	mov.u32 	%r2, %tid.x;
	or.b32  	%r88, %r2, %r87;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	add.s32 	%r89, %r4, %r88;
	mul.wide.u32 	%rd20, %r89, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r90, 1;
	st.global.u32 	[%rd6], %r90;
	shl.b32 	%r91, %r3, 2;
	shr.u32 	%r5, %r1, 1;
	mul.lo.s32 	%r92, %r5, 192;
	and.b32  	%r6, %r1, 1;
	mad.lo.s32 	%r93, %r6, 96, %r92;
	shr.u32 	%r7, %r2, 3;
	or.b32  	%r94, %r7, %r91;
	mul.hi.u32 	%r95, %r94, -1431655765;
	shr.u32 	%r96, %r95, 6;
	mul.lo.s32 	%r97, %r96, 96;
	sub.s32 	%r8, %r94, %r97;
	add.s32 	%r98, %r93, %r8;
	mul.wide.u32 	%rd21, %r98, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r9, [%rd22];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %pass110
	ld.param.u64 	%rd1, [_Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_496913CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r357, %r9, -3;
	mul.lo.s32 	%r358, %r5, 49152;
	shr.u32 	%r359, %r3, 2;
	cvt.u16.u32 	%rs1, %r359;
	mul.lo.s16 	%rs2, %rs1, 171;
	shr.u16 	%rs3, %rs2, 10;
	mul.lo.s16 	%rs4, %rs3, 6;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 4;
	cvt.u32.u16 	%r360, %rs6;
	and.b32  	%r361, %r360, 240;
	shr.u32 	%r32, %r2, 2;
	and.b32  	%r362, %r32, 6;
	or.b32  	%r363, %r362, %r361;
	cvt.u16.u32 	%rs7, %r363;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 14;
	mul.lo.s16 	%rs10, %rs9, 96;
	sub.s16 	%rs11, %rs7, %rs10;
	and.b16  	%rs12, %rs11, 246;
	mul.wide.u16 	%r364, %rs12, 256;
	shl.b32 	%r365, %r2, 4;
	and.b32  	%r33, %r365, 16;
	shl.b32 	%r366, %r2, 1;
	and.b32  	%r367, %r366, 12;
	shl.b32 	%r368, %r3, 6;
	and.b32  	%r369, %r368, 192;
	mad.lo.s32 	%r370, %r6, 24576, %r358;
	add.s32 	%r371, %r370, %r33;
	add.s32 	%r372, %r371, 1;
	add.s32 	%r373, %r372, %r364;
	or.b32  	%r374, %r373, %r367;
	or.b32  	%r375, %r374, %r369;
	mul.wide.u32 	%rd25, %r375, 4;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r101, %r102, %r117, %r118}, [%rd26+-4];
	or.b16  	%rs13, %rs7, 8;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 14;
	mul.lo.s16 	%rs16, %rs15, 96;
	sub.s16 	%rs17, %rs13, %rs16;
	and.b16  	%rs18, %rs17, 254;
	mul.wide.u16 	%r376, %rs18, 256;
	or.b32  	%r377, %r372, %r367;
	add.s32 	%r378, %r377, %r376;
	or.b32  	%r379, %r378, %r369;
	mul.wide.u32 	%rd27, %r379, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r109, %r110, %r125, %r126}, [%rd28+-4];
	or.b32  	%r380, %r370, %r33;
	or.b32  	%r381, %r380, %r367;
	or.b32  	%r382, %r381, 33;
	add.s32 	%r383, %r382, %r364;
	or.b32  	%r384, %r383, %r369;
	mul.wide.u32 	%rd29, %r384, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r133, %r134, %r149, %r150}, [%rd30+-4];
	add.s32 	%r385, %r382, %r376;
	or.b32  	%r386, %r385, %r369;
	mul.wide.u32 	%rd31, %r386, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r141, %r142, %r157, %r158}, [%rd32+-4];
	or.b32  	%r387, %r32, %r361;
	or.b32  	%r388, %r387, 1;
	mul.hi.u32 	%r389, %r388, -1431655765;
	shr.u32 	%r390, %r389, 6;
	mul.lo.s32 	%r391, %r390, 96;
	sub.s32 	%r392, %r388, %r391;
	shl.b32 	%r393, %r392, 8;
	add.s32 	%r394, %r372, %r393;
	or.b32  	%r395, %r394, %r367;
	or.b32  	%r396, %r395, %r369;
	mul.wide.u32 	%rd33, %r396, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r165, %r166, %r181, %r182}, [%rd34+-4];
	or.b32  	%r397, %r387, 9;
	mul.hi.u32 	%r398, %r397, -1431655765;
	shr.u32 	%r399, %r398, 6;
	mul.lo.s32 	%r400, %r399, 96;
	sub.s32 	%r401, %r397, %r400;
	shl.b32 	%r402, %r401, 8;
	add.s32 	%r403, %r372, %r402;
	or.b32  	%r404, %r403, %r367;
	or.b32  	%r405, %r404, %r369;
	mul.wide.u32 	%rd35, %r405, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r173, %r174, %r189, %r190}, [%rd36+-4];
	add.s32 	%r406, %r382, %r393;
	or.b32  	%r407, %r406, %r369;
	mul.wide.u32 	%rd37, %r407, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r197, %r198, %r213, %r214}, [%rd38+-4];
	add.s32 	%r408, %r382, %r402;
	or.b32  	%r409, %r408, %r369;
	mul.wide.u32 	%rd39, %r409, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r205, %r206, %r221, %r222}, [%rd40+-4];
	mov.u32 	%r223, 21520;
	// begin inline asm
	prmt.b32 %r229, %r101, %r102, %r223;
	// end inline asm
	mov.u32 	%r227, 30258;
	// begin inline asm
	prmt.b32 %r230, %r101, %r102, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r109, %r110, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r109, %r110, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r117, %r118, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r117, %r118, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r125, %r126, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r125, %r126, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r133, %r134, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r133, %r134, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r141, %r142, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r141, %r142, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r149, %r150, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r149, %r150, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r157, %r158, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r157, %r158, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r165, %r166, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r165, %r166, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r173, %r174, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r173, %r174, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r181, %r182, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r181, %r182, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r189, %r190, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r189, %r190, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r197, %r198, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r197, %r198, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r205, %r206, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r205, %r206, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r213, %r214, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r213, %r214, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r349, %r221, %r222, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r350, %r221, %r222, %r227;
	// end inline asm
	mov.u32 	%r351, 25152;
	// begin inline asm
	prmt.b32 %r228, %r229, %r230, %r351;
	// end inline asm
	mov.u32 	%r355, 29521;
	// begin inline asm
	prmt.b32 %r232, %r229, %r230, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r237, %r238, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r237, %r238, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r245, %r246, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r245, %r246, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r253, %r254, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r253, %r254, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r261, %r262, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r261, %r262, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r269, %r270, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r269, %r270, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r277, %r278, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r277, %r278, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r285, %r286, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r285, %r286, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r293, %r294, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r293, %r294, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r301, %r302, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r301, %r302, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r309, %r310, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r309, %r310, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r317, %r318, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r317, %r318, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r325, %r326, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r325, %r326, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r333, %r334, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r333, %r334, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r341, %r342, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r341, %r342, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r349, %r350, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r349, %r350, %r355;
	// end inline asm
	and.b32  	%r34, %r2, 2;
	setp.eq.s32 	%p4, %r34, 0;
	selp.b32 	%r410, %r260, %r228, %p4;
	shfl.sync.bfly.b32	%r411, %r410, 2, 31, -1;
	selp.b32 	%r412, %r228, %r411, %p4;
	selp.b32 	%r413, %r411, %r260, %p4;
	selp.b32 	%r414, %r268, %r236, %p4;
	shfl.sync.bfly.b32	%r415, %r414, 2, 31, -1;
	selp.b32 	%r416, %r236, %r415, %p4;
	selp.b32 	%r417, %r415, %r268, %p4;
	selp.b32 	%r418, %r264, %r232, %p4;
	shfl.sync.bfly.b32	%r419, %r418, 2, 31, -1;
	selp.b32 	%r420, %r232, %r419, %p4;
	selp.b32 	%r421, %r419, %r264, %p4;
	selp.b32 	%r422, %r272, %r240, %p4;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r240, %r423, %p4;
	selp.b32 	%r425, %r423, %r272, %p4;
	selp.b32 	%r426, %r276, %r244, %p4;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r244, %r427, %p4;
	selp.b32 	%r429, %r427, %r276, %p4;
	selp.b32 	%r430, %r284, %r252, %p4;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r252, %r431, %p4;
	selp.b32 	%r433, %r431, %r284, %p4;
	selp.b32 	%r434, %r280, %r248, %p4;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r248, %r435, %p4;
	selp.b32 	%r437, %r435, %r280, %p4;
	selp.b32 	%r438, %r288, %r256, %p4;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r256, %r439, %p4;
	selp.b32 	%r441, %r439, %r288, %p4;
	selp.b32 	%r442, %r324, %r292, %p4;
	shfl.sync.bfly.b32	%r443, %r442, 2, 31, -1;
	selp.b32 	%r444, %r292, %r443, %p4;
	selp.b32 	%r445, %r443, %r324, %p4;
	selp.b32 	%r446, %r332, %r300, %p4;
	shfl.sync.bfly.b32	%r447, %r446, 2, 31, -1;
	selp.b32 	%r448, %r300, %r447, %p4;
	selp.b32 	%r449, %r447, %r332, %p4;
	selp.b32 	%r450, %r328, %r296, %p4;
	shfl.sync.bfly.b32	%r451, %r450, 2, 31, -1;
	selp.b32 	%r452, %r296, %r451, %p4;
	selp.b32 	%r453, %r451, %r328, %p4;
	selp.b32 	%r454, %r336, %r304, %p4;
	shfl.sync.bfly.b32	%r455, %r454, 2, 31, -1;
	selp.b32 	%r456, %r304, %r455, %p4;
	selp.b32 	%r457, %r455, %r336, %p4;
	selp.b32 	%r458, %r340, %r308, %p4;
	shfl.sync.bfly.b32	%r459, %r458, 2, 31, -1;
	selp.b32 	%r460, %r308, %r459, %p4;
	selp.b32 	%r461, %r459, %r340, %p4;
	selp.b32 	%r462, %r348, %r316, %p4;
	shfl.sync.bfly.b32	%r463, %r462, 2, 31, -1;
	selp.b32 	%r464, %r316, %r463, %p4;
	selp.b32 	%r465, %r463, %r348, %p4;
	selp.b32 	%r466, %r344, %r312, %p4;
	shfl.sync.bfly.b32	%r467, %r466, 2, 31, -1;
	selp.b32 	%r468, %r312, %r467, %p4;
	selp.b32 	%r469, %r467, %r344, %p4;
	selp.b32 	%r470, %r352, %r320, %p4;
	shfl.sync.bfly.b32	%r471, %r470, 2, 31, -1;
	selp.b32 	%r472, %r320, %r471, %p4;
	selp.b32 	%r473, %r471, %r352, %p4;
	and.b32  	%r35, %r2, 4;
	setp.eq.s32 	%p5, %r35, 0;
	selp.b32 	%r474, %r444, %r412, %p5;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r36, %r412, %r475, %p5;
	selp.b32 	%r37, %r475, %r444, %p5;
	selp.b32 	%r476, %r448, %r416, %p5;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r38, %r416, %r477, %p5;
	selp.b32 	%r39, %r477, %r448, %p5;
	selp.b32 	%r478, %r452, %r420, %p5;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r40, %r420, %r479, %p5;
	selp.b32 	%r41, %r479, %r452, %p5;
	selp.b32 	%r480, %r456, %r424, %p5;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r42, %r424, %r481, %p5;
	selp.b32 	%r43, %r481, %r456, %p5;
	selp.b32 	%r482, %r460, %r428, %p5;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r44, %r428, %r483, %p5;
	selp.b32 	%r45, %r483, %r460, %p5;
	selp.b32 	%r484, %r464, %r432, %p5;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r46, %r432, %r485, %p5;
	selp.b32 	%r47, %r485, %r464, %p5;
	selp.b32 	%r486, %r468, %r436, %p5;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r48, %r436, %r487, %p5;
	selp.b32 	%r49, %r487, %r468, %p5;
	selp.b32 	%r488, %r472, %r440, %p5;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r50, %r440, %r489, %p5;
	selp.b32 	%r51, %r489, %r472, %p5;
	selp.b32 	%r490, %r445, %r413, %p5;
	shfl.sync.bfly.b32	%r491, %r490, 4, 31, -1;
	selp.b32 	%r52, %r413, %r491, %p5;
	selp.b32 	%r53, %r491, %r445, %p5;
	selp.b32 	%r492, %r449, %r417, %p5;
	shfl.sync.bfly.b32	%r493, %r492, 4, 31, -1;
	selp.b32 	%r54, %r417, %r493, %p5;
	selp.b32 	%r55, %r493, %r449, %p5;
	selp.b32 	%r494, %r453, %r421, %p5;
	shfl.sync.bfly.b32	%r495, %r494, 4, 31, -1;
	selp.b32 	%r56, %r421, %r495, %p5;
	selp.b32 	%r57, %r495, %r453, %p5;
	selp.b32 	%r496, %r457, %r425, %p5;
	shfl.sync.bfly.b32	%r497, %r496, 4, 31, -1;
	selp.b32 	%r58, %r425, %r497, %p5;
	selp.b32 	%r59, %r497, %r457, %p5;
	selp.b32 	%r498, %r461, %r429, %p5;
	shfl.sync.bfly.b32	%r499, %r498, 4, 31, -1;
	selp.b32 	%r60, %r429, %r499, %p5;
	selp.b32 	%r61, %r499, %r461, %p5;
	selp.b32 	%r500, %r465, %r433, %p5;
	shfl.sync.bfly.b32	%r501, %r500, 4, 31, -1;
	selp.b32 	%r62, %r433, %r501, %p5;
	selp.b32 	%r63, %r501, %r465, %p5;
	selp.b32 	%r502, %r469, %r437, %p5;
	shfl.sync.bfly.b32	%r503, %r502, 4, 31, -1;
	selp.b32 	%r64, %r437, %r503, %p5;
	selp.b32 	%r65, %r503, %r469, %p5;
	selp.b32 	%r504, %r473, %r441, %p5;
	shfl.sync.bfly.b32	%r505, %r504, 4, 31, -1;
	selp.b32 	%r66, %r441, %r505, %p5;
	selp.b32 	%r67, %r505, %r473, %p5;
	shl.b32 	%r506, %r2, 2;
	and.b32  	%r68, %r506, 28;
	shl.b32 	%r507, %r1, 6;
	and.b32  	%r508, %r507, 1920;
	shl.b32 	%r509, %r1, 11;
	and.b32  	%r510, %r509, 2048;
	and.b32  	%r69, %r4, 96;
	and.b32  	%r70, %r3, 12;
	or.b32  	%r511, %r510, %r508;
	or.b32  	%r512, %r511, %r68;
	or.b32  	%r71, %r512, %r69;
	or.b32  	%r72, %r68, %r69;
	shl.b32 	%r513, %r2, 3;
	and.b32  	%r73, %r513, 24;
	or.b32  	%r74, %r69, %r73;
	and.b32  	%r514, %r3, 3;
	mul.lo.s32 	%r515, %r514, 3200;
	mul.hi.u32 	%r516, %r387, -1431655765;
	shr.u32 	%r517, %r516, 6;
	mul.lo.s32 	%r518, %r517, 96;
	sub.s32 	%r519, %r387, %r518;
	or.b32  	%r75, %r519, %r515;
	and.b32  	%r76, %r366, 6;
	or.b32  	%r520, %r387, 8;
	mul.hi.u32 	%r521, %r520, -1431655765;
	shr.u32 	%r522, %r521, 6;
	mul.lo.s32 	%r523, %r522, 96;
	sub.s32 	%r524, %r520, %r523;
	or.b32  	%r77, %r524, %r515;
	and.b32  	%r525, %r2, 7;
	shl.b32 	%r78, %r90, %r10;
	min.u32 	%r79, %r357, 31;
	and.b32  	%r80, %r2, 1;
	shl.b32 	%r81, %r1, 13;
	shl.b32 	%r527, %r2, 5;
	and.b32  	%r82, %r527, 64;
	shl.b32 	%r83, %r8, 18;
	mul.lo.s32 	%r528, %r525, 100;
	add.s32 	%r529, %r528, %r8;
	mul.wide.u32 	%rd41, %r529, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r528;
	cvt.u64.u32 	%rd45, %r8;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r530, %r528, 800;
	add.s32 	%r531, %r530, %r8;
	mul.wide.u32 	%rd48, %r531, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r530;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r532, %r528, 1600;
	add.s32 	%r533, %r532, %r8;
	mul.wide.u32 	%rd52, %r533, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r532;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	or.b32  	%r534, %r2, 24;
	mul.lo.s32 	%r535, %r534, 100;
	add.s32 	%r536, %r535, %r8;
	mul.wide.u32 	%rd56, %r536, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r535;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r84, %r513, 32;
	mov.u32 	%r356, 0;
	setp.gt.u32 	%p6, %r3, 15;
	mov.u32 	%r1341, %r356;
LBB0_7:                                 // %L2676
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	or.b32  	%r12, %r1341, 16;
	mov.u32 	%r1342, %r356;
	mov.u32 	%r1343, %r356;
	mov.u32 	%r1344, %r356;
	mov.u32 	%r1345, %r356;
	mov.u32 	%r1346, %r356;
	mov.u32 	%r1347, %r356;
	mov.u32 	%r1348, %r356;
LBB0_8:                                 // %L2679
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2702
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r20, %r1342, %r1341;
	or.b32  	%r538, %r70, %r20;
	or.b32  	%r539, %r7, %r538;
	shl.b32 	%r540, %r539, 12;
	and.b32  	%r541, %r540, 134148096;
	or.b32  	%r542, %r71, %r541;
	shl.b32 	%r543, %r542, 2;
	cvt.u64.u32 	%rd60, %r543;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r544, %r545, %r546, %r547}, [%rd61];
	add.s32 	%r548, %r12, %r1342;
	or.b32  	%r549, %r548, %r70;
	or.b32  	%r550, %r7, %r549;
	shl.b32 	%r551, %r550, 12;
	and.b32  	%r552, %r551, 134213632;
	or.b32  	%r553, %r71, %r552;
	shl.b32 	%r554, %r553, 2;
	cvt.u64.u32 	%rd62, %r554;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r555, %r556, %r557, %r558}, [%rd63];
	and.b32  	%r559, %r539, 15;
	mul.lo.s32 	%r560, %r559, 129;
	add.s32 	%r561, %r560, %r68;
	add.s32 	%r562, %r561, %r69;
	mul.wide.u32 	%rd64, %r562, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r544;
	cvt.u64.u32 	%rd67, %r72;
	cvt.u64.u32 	%rd68, %r560;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r545;
	st.shared.u32 	[%rd71+8], %r546;
	st.shared.u32 	[%rd71+12], %r547;
	and.b32  	%r563, %r550, 31;
	mul.lo.s32 	%r564, %r563, 129;
	add.s32 	%r565, %r564, %r68;
	add.s32 	%r566, %r565, %r69;
	mul.wide.u32 	%rd72, %r566, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r555;
	cvt.u64.u32 	%rd74, %r564;
	add.s64 	%rd75, %rd74, %rd67;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r556;
	st.shared.u32 	[%rd77+8], %r557;
	st.shared.u32 	[%rd77+12], %r558;
LBB0_10:                                // %L4534
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r580, 0;
	mov.u32 	%r1349, %r580;
LBB0_11:                                // %L4536
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1092, %r32, %r1349;
	mul.lo.s32 	%r1093, %r1092, 129;
	add.s32 	%r1094, %r1093, %r69;
	add.s32 	%r1095, %r1094, %r73;
	mul.wide.u32 	%rd78, %r1095, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r569, [%rd80];
	mov.u32 	%r570, 134744072;
	mov.u32 	%r571, 252645135;
	// begin inline asm
	lop3.b32 %r568, %r569, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1096, %r568, 2021161080;
	xor.b32  	%r585, %r1096, -2139062144;
	shr.u32 	%r573, %r569, 4;
	// begin inline asm
	lop3.b32 %r572, %r573, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1097, %r572, 2021161080;
	xor.b32  	%r579, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r576, %r577}, {%r40}, {%r579}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r582, %r583}, {%r36}, {%r585}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r588, %r589}, {%r40}, {%r585}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r594, %r595}, {%r36}, {%r579}, {%r588, %r589};
	// end inline asm
	cvt.u64.u32 	%rd81, %r74;
	cvt.u64.u32 	%rd82, %r1093;
	add.s64 	%rd83, %rd82, %rd81;
	shl.b64 	%rd84, %rd83, 2;
	add.s64 	%rd85, %rd42, %rd84;
	ld.shared.u32 	%r601, [%rd85+4];
	// begin inline asm
	lop3.b32 %r600, %r601, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1098, %r600, 2021161080;
	xor.b32  	%r617, %r1098, -2139062144;
	shr.u32 	%r605, %r601, 4;
	// begin inline asm
	lop3.b32 %r604, %r605, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1099, %r604, 2021161080;
	xor.b32  	%r611, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r608, %r609}, {%r48}, {%r611}, {%r576, %r577};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r614, %r615}, {%r44}, {%r617}, {%r582, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r620, %r621}, {%r48}, {%r617}, {%r594, %r595};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r626, %r627}, {%r44}, {%r611}, {%r620, %r621};
	// end inline asm
	ld.shared.u32 	%r633, [%rd85+8];
	// begin inline asm
	lop3.b32 %r632, %r633, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1100, %r632, 2021161080;
	xor.b32  	%r649, %r1100, -2139062144;
	shr.u32 	%r637, %r633, 4;
	// begin inline asm
	lop3.b32 %r636, %r637, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1101, %r636, 2021161080;
	xor.b32  	%r643, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r640, %r641}, {%r56}, {%r643}, {%r608, %r609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r646, %r647}, {%r52}, {%r649}, {%r614, %r615};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r652, %r653}, {%r56}, {%r649}, {%r626, %r627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r658, %r659}, {%r52}, {%r643}, {%r652, %r653};
	// end inline asm
	ld.shared.u32 	%r665, [%rd85+12];
	// begin inline asm
	lop3.b32 %r664, %r665, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1102, %r664, 2021161080;
	xor.b32  	%r681, %r1102, -2139062144;
	shr.u32 	%r669, %r665, 4;
	// begin inline asm
	lop3.b32 %r668, %r669, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1103, %r668, 2021161080;
	xor.b32  	%r675, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r672, %r673}, {%r64}, {%r675}, {%r640, %r641};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r678, %r679}, {%r60}, {%r681}, {%r646, %r647};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r684, %r685}, {%r64}, {%r681}, {%r658, %r659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r690, %r691}, {%r60}, {%r675}, {%r684, %r685};
	// end inline asm
	ld.shared.u32 	%r697, [%rd85+16];
	// begin inline asm
	lop3.b32 %r696, %r697, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1104, %r696, 2021161080;
	xor.b32  	%r713, %r1104, -2139062144;
	shr.u32 	%r701, %r697, 4;
	// begin inline asm
	lop3.b32 %r700, %r701, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1105, %r700, 2021161080;
	xor.b32  	%r707, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r704, %r705}, {%r41}, {%r707}, {%r672, %r673};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r710, %r711}, {%r37}, {%r713}, {%r678, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r716, %r717}, {%r41}, {%r713}, {%r690, %r691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r722, %r723}, {%r37}, {%r707}, {%r716, %r717};
	// end inline asm
	ld.shared.u32 	%r729, [%rd85+20];
	// begin inline asm
	lop3.b32 %r728, %r729, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1106, %r728, 2021161080;
	xor.b32  	%r745, %r1106, -2139062144;
	shr.u32 	%r733, %r729, 4;
	// begin inline asm
	lop3.b32 %r732, %r733, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1107, %r732, 2021161080;
	xor.b32  	%r739, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r736, %r737}, {%r49}, {%r739}, {%r704, %r705};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r742, %r743}, {%r45}, {%r745}, {%r710, %r711};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r748, %r749}, {%r49}, {%r745}, {%r722, %r723};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r754, %r755}, {%r45}, {%r739}, {%r748, %r749};
	// end inline asm
	ld.shared.u32 	%r761, [%rd85+24];
	// begin inline asm
	lop3.b32 %r760, %r761, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1108, %r760, 2021161080;
	xor.b32  	%r777, %r1108, -2139062144;
	shr.u32 	%r765, %r761, 4;
	// begin inline asm
	lop3.b32 %r764, %r765, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1109, %r764, 2021161080;
	xor.b32  	%r771, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r768, %r769}, {%r57}, {%r771}, {%r736, %r737};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r774, %r775}, {%r53}, {%r777}, {%r742, %r743};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r780, %r781}, {%r57}, {%r777}, {%r754, %r755};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r786, %r787}, {%r53}, {%r771}, {%r780, %r781};
	// end inline asm
	ld.shared.u32 	%r793, [%rd85+28];
	// begin inline asm
	lop3.b32 %r792, %r793, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1110, %r792, 2021161080;
	xor.b32  	%r809, %r1110, -2139062144;
	shr.u32 	%r797, %r793, 4;
	// begin inline asm
	lop3.b32 %r796, %r797, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1111, %r796, 2021161080;
	xor.b32  	%r803, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r800, %r801}, {%r65}, {%r803}, {%r768, %r769};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r806, %r807}, {%r61}, {%r809}, {%r774, %r775};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r812, %r813}, {%r65}, {%r809}, {%r786, %r787};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r818, %r819}, {%r61}, {%r803}, {%r812, %r813};
	// end inline asm
	add.s32 	%r1112, %r818, 4;
	shr.s32 	%r826, %r1112, 3;
	sub.s32 	%r1113, %r800, %r806;
	add.s32 	%r1114, %r1113, 4;
	shr.s32 	%r825, %r1114, 3;
	add.s32 	%r1115, %r819, 4;
	shr.s32 	%r829, %r1115, 3;
	sub.s32 	%r1116, %r801, %r807;
	add.s32 	%r1117, %r1116, 4;
	shr.s32 	%r828, %r1117, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r824, %r825, %r826;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r827, %r828, %r829;
	// end inline asm
	or.b32  	%r1118, %r1349, %r76;
	mul.lo.s32 	%r1119, %r1118, 100;
	add.s32 	%r1120, %r75, %r1119;
	mul.wide.u32 	%rd86, %r1120, 4;
	add.s64 	%rd88, %rd43, %rd86;
	st.shared.u32 	[%rd88], %r824;
	or.b32  	%r1121, %r1118, 1;
	mul.lo.s32 	%r1122, %r1121, 100;
	add.s32 	%r1123, %r75, %r1122;
	mul.wide.u32 	%rd89, %r1123, 4;
	add.s64 	%rd90, %rd43, %rd89;
	st.shared.u32 	[%rd90], %r827;
	ld.shared.u32 	%r831, [%rd80];
	// begin inline asm
	lop3.b32 %r830, %r831, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1124, %r830, 2021161080;
	xor.b32  	%r847, %r1124, -2139062144;
	shr.u32 	%r835, %r831, 4;
	// begin inline asm
	lop3.b32 %r834, %r835, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1125, %r834, 2021161080;
	xor.b32  	%r841, %r1125, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r838, %r839}, {%r42}, {%r841}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r844, %r845}, {%r38}, {%r847}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r850, %r851}, {%r42}, {%r847}, {%r580, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r856, %r857}, {%r38}, {%r841}, {%r850, %r851};
	// end inline asm
	ld.shared.u32 	%r863, [%rd85+4];
	// begin inline asm
	lop3.b32 %r862, %r863, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1126, %r862, 2021161080;
	xor.b32  	%r879, %r1126, -2139062144;
	shr.u32 	%r867, %r863, 4;
	// begin inline asm
	lop3.b32 %r866, %r867, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1127, %r866, 2021161080;
	xor.b32  	%r873, %r1127, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r870, %r871}, {%r50}, {%r873}, {%r838, %r839};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r876, %r877}, {%r46}, {%r879}, {%r844, %r845};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r882, %r883}, {%r50}, {%r879}, {%r856, %r857};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r888, %r889}, {%r46}, {%r873}, {%r882, %r883};
	// end inline asm
	ld.shared.u32 	%r895, [%rd85+8];
	// begin inline asm
	lop3.b32 %r894, %r895, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1128, %r894, 2021161080;
	xor.b32  	%r911, %r1128, -2139062144;
	shr.u32 	%r899, %r895, 4;
	// begin inline asm
	lop3.b32 %r898, %r899, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1129, %r898, 2021161080;
	xor.b32  	%r905, %r1129, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r902, %r903}, {%r58}, {%r905}, {%r870, %r871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r908, %r909}, {%r54}, {%r911}, {%r876, %r877};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r914, %r915}, {%r58}, {%r911}, {%r888, %r889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r920, %r921}, {%r54}, {%r905}, {%r914, %r915};
	// end inline asm
	ld.shared.u32 	%r927, [%rd85+12];
	// begin inline asm
	lop3.b32 %r926, %r927, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1130, %r926, 2021161080;
	xor.b32  	%r943, %r1130, -2139062144;
	shr.u32 	%r931, %r927, 4;
	// begin inline asm
	lop3.b32 %r930, %r931, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1131, %r930, 2021161080;
	xor.b32  	%r937, %r1131, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r934, %r935}, {%r66}, {%r937}, {%r902, %r903};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r940, %r941}, {%r62}, {%r943}, {%r908, %r909};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r946, %r947}, {%r66}, {%r943}, {%r920, %r921};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r952, %r953}, {%r62}, {%r937}, {%r946, %r947};
	// end inline asm
	ld.shared.u32 	%r959, [%rd85+16];
	// begin inline asm
	lop3.b32 %r958, %r959, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1132, %r958, 2021161080;
	xor.b32  	%r975, %r1132, -2139062144;
	shr.u32 	%r963, %r959, 4;
	// begin inline asm
	lop3.b32 %r962, %r963, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1133, %r962, 2021161080;
	xor.b32  	%r969, %r1133, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r966, %r967}, {%r43}, {%r969}, {%r934, %r935};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r972, %r973}, {%r39}, {%r975}, {%r940, %r941};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r978, %r979}, {%r43}, {%r975}, {%r952, %r953};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r984, %r985}, {%r39}, {%r969}, {%r978, %r979};
	// end inline asm
	ld.shared.u32 	%r991, [%rd85+20];
	// begin inline asm
	lop3.b32 %r990, %r991, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1134, %r990, 2021161080;
	xor.b32  	%r1007, %r1134, -2139062144;
	shr.u32 	%r995, %r991, 4;
	// begin inline asm
	lop3.b32 %r994, %r995, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1135, %r994, 2021161080;
	xor.b32  	%r1001, %r1135, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r998, %r999}, {%r51}, {%r1001}, {%r966, %r967};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1004, %r1005}, {%r47}, {%r1007}, {%r972, %r973};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1010, %r1011}, {%r51}, {%r1007}, {%r984, %r985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1016, %r1017}, {%r47}, {%r1001}, {%r1010, %r1011};
	// end inline asm
	ld.shared.u32 	%r1023, [%rd85+24];
	// begin inline asm
	lop3.b32 %r1022, %r1023, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1136, %r1022, 2021161080;
	xor.b32  	%r1039, %r1136, -2139062144;
	shr.u32 	%r1027, %r1023, 4;
	// begin inline asm
	lop3.b32 %r1026, %r1027, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1137, %r1026, 2021161080;
	xor.b32  	%r1033, %r1137, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1030, %r1031}, {%r59}, {%r1033}, {%r998, %r999};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1036, %r1037}, {%r55}, {%r1039}, {%r1004, %r1005};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1042, %r1043}, {%r59}, {%r1039}, {%r1016, %r1017};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1048, %r1049}, {%r55}, {%r1033}, {%r1042, %r1043};
	// end inline asm
	ld.shared.u32 	%r1055, [%rd85+28];
	// begin inline asm
	lop3.b32 %r1054, %r1055, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1138, %r1054, 2021161080;
	xor.b32  	%r1071, %r1138, -2139062144;
	shr.u32 	%r1059, %r1055, 4;
	// begin inline asm
	lop3.b32 %r1058, %r1059, %r570, %r571, 40;
	// end inline asm
	add.s32 	%r1139, %r1058, 2021161080;
	xor.b32  	%r1065, %r1139, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1062, %r1063}, {%r67}, {%r1065}, {%r1030, %r1031};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1068, %r1069}, {%r63}, {%r1071}, {%r1036, %r1037};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1074, %r1075}, {%r67}, {%r1071}, {%r1048, %r1049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1080, %r1081}, {%r63}, {%r1065}, {%r1074, %r1075};
	// end inline asm
	add.s32 	%r1140, %r1080, 4;
	shr.s32 	%r1088, %r1140, 3;
	sub.s32 	%r1141, %r1062, %r1068;
	add.s32 	%r1142, %r1141, 4;
	shr.s32 	%r1087, %r1142, 3;
	add.s32 	%r1143, %r1081, 4;
	shr.s32 	%r1091, %r1143, 3;
	sub.s32 	%r1144, %r1063, %r1069;
	add.s32 	%r1145, %r1144, 4;
	shr.s32 	%r1090, %r1145, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1086, %r1087, %r1088;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1089, %r1090, %r1091;
	// end inline asm
	add.s32 	%r1146, %r77, %r1119;
	mul.wide.u32 	%rd91, %r1146, 4;
	add.s64 	%rd92, %rd43, %rd91;
	st.shared.u32 	[%rd92], %r1086;
	add.s32 	%r1147, %r77, %r1122;
	mul.wide.u32 	%rd93, %r1147, 4;
	add.s64 	%rd94, %rd43, %rd93;
	st.shared.u32 	[%rd94], %r1089;
	add.s32 	%r1349, %r1349, 8;
	setp.ne.s32 	%p7, %r1349, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8669
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1166, [%rd7];
	ld.shared.u32 	%r1167, [%rd8+12800];
	ld.shared.u32 	%r1168, [%rd8+25600];
	ld.shared.u32 	%r1169, [%rd8+38400];
	ld.shared.u32 	%r1170, [%rd9];
	ld.shared.u32 	%r1171, [%rd10+12800];
	ld.shared.u32 	%r1172, [%rd10+25600];
	ld.shared.u32 	%r1173, [%rd10+38400];
	ld.shared.u32 	%r1174, [%rd11];
	ld.shared.u32 	%r1175, [%rd12+12800];
	ld.shared.u32 	%r1176, [%rd12+25600];
	ld.shared.u32 	%r1177, [%rd12+38400];
	ld.shared.u32 	%r1178, [%rd13];
	ld.shared.u32 	%r1179, [%rd14+12800];
	ld.shared.u32 	%r1180, [%rd14+25600];
	ld.shared.u32 	%r1181, [%rd14+38400];
	cvt.s32.s16 	%r1182, %r1166;
	shr.s32 	%r1183, %r1166, 16;
	cvt.s32.s16 	%r1184, %r1167;
	shr.s32 	%r1185, %r1167, 16;
	cvt.s32.s16 	%r1186, %r1168;
	shr.s32 	%r1187, %r1168, 16;
	cvt.s32.s16 	%r1188, %r1169;
	shr.s32 	%r1189, %r1169, 16;
	cvt.s32.s16 	%r1190, %r1170;
	shr.s32 	%r1191, %r1170, 16;
	cvt.s32.s16 	%r1192, %r1171;
	shr.s32 	%r1193, %r1171, 16;
	cvt.s32.s16 	%r1194, %r1172;
	shr.s32 	%r1195, %r1172, 16;
	cvt.s32.s16 	%r1196, %r1173;
	shr.s32 	%r1197, %r1173, 16;
	cvt.s32.s16 	%r1198, %r1174;
	shr.s32 	%r1199, %r1174, 16;
	cvt.s32.s16 	%r1200, %r1175;
	shr.s32 	%r1201, %r1175, 16;
	cvt.s32.s16 	%r1202, %r1176;
	shr.s32 	%r1203, %r1176, 16;
	cvt.s32.s16 	%r1204, %r1177;
	shr.s32 	%r1205, %r1177, 16;
	cvt.s32.s16 	%r1206, %r1178;
	shr.s32 	%r1207, %r1178, 16;
	cvt.s32.s16 	%r1208, %r1179;
	shr.s32 	%r1209, %r1179, 16;
	cvt.s32.s16 	%r1210, %r1180;
	shr.s32 	%r1211, %r1180, 16;
	cvt.s32.s16 	%r1212, %r1181;
	shr.s32 	%r1213, %r1181, 16;
	add.s32 	%r1214, %r1182, %r78;
	add.s32 	%r1215, %r1214, %r1184;
	add.s32 	%r1216, %r1215, %r1186;
	add.s32 	%r1217, %r1216, %r1188;
	shr.s32 	%r1218, %r1217, %r79;
	add.s32 	%r1219, %r1183, %r78;
	add.s32 	%r1220, %r1219, %r1185;
	add.s32 	%r1221, %r1220, %r1187;
	add.s32 	%r1222, %r1221, %r1189;
	shr.s32 	%r1223, %r1222, %r79;
	add.s32 	%r1224, %r1190, %r78;
	add.s32 	%r1225, %r1224, %r1192;
	add.s32 	%r1226, %r1225, %r1194;
	add.s32 	%r1227, %r1226, %r1196;
	shr.s32 	%r1228, %r1227, %r79;
	add.s32 	%r1229, %r1191, %r78;
	add.s32 	%r1230, %r1229, %r1193;
	add.s32 	%r1231, %r1230, %r1195;
	add.s32 	%r1232, %r1231, %r1197;
	shr.s32 	%r1233, %r1232, %r79;
	add.s32 	%r1234, %r1198, %r78;
	add.s32 	%r1235, %r1234, %r1200;
	add.s32 	%r1236, %r1235, %r1202;
	add.s32 	%r1237, %r1236, %r1204;
	shr.s32 	%r1238, %r1237, %r79;
	add.s32 	%r1239, %r1199, %r78;
	add.s32 	%r1240, %r1239, %r1201;
	add.s32 	%r1241, %r1240, %r1203;
	add.s32 	%r1242, %r1241, %r1205;
	shr.s32 	%r1243, %r1242, %r79;
	add.s32 	%r1244, %r1206, %r78;
	add.s32 	%r1245, %r1244, %r1208;
	add.s32 	%r1246, %r1245, %r1210;
	add.s32 	%r1247, %r1246, %r1212;
	shr.s32 	%r1248, %r1247, %r79;
	add.s32 	%r1249, %r1207, %r78;
	add.s32 	%r1250, %r1249, %r1209;
	add.s32 	%r1251, %r1250, %r1211;
	add.s32 	%r1252, %r1251, %r1213;
	shr.s32 	%r1253, %r1252, %r79;
	max.s32 	%r1254, %r1218, -7;
	min.s32 	%r1153, %r1254, 7;
	max.s32 	%r1255, %r1223, -7;
	min.s32 	%r1160, %r1255, 7;
	max.s32 	%r1256, %r1228, -7;
	min.s32 	%r1152, %r1256, 7;
	max.s32 	%r1257, %r1233, -7;
	min.s32 	%r1159, %r1257, 7;
	max.s32 	%r1258, %r1238, -7;
	min.s32 	%r1150, %r1258, 7;
	max.s32 	%r1259, %r1243, -7;
	min.s32 	%r1157, %r1259, 7;
	max.s32 	%r1260, %r1248, -7;
	min.s32 	%r1149, %r1260, 7;
	max.s32 	%r1261, %r1253, -7;
	min.s32 	%r1156, %r1261, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1148, %r1149, %r1150, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1151, %r1152, %r1153, %r1148;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1155, %r1156, %r1157, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1158, %r1159, %r1160, %r1155;
	// end inline asm
	shl.b32 	%r1165, %r1158, 4;
	// begin inline asm
	lop3.b32 %r1272, %r571, %r1151, %r1165, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1342, 0;
	selp.b32 	%r1347, %r1272, %r1347, %p8;
	selp.b32 	%r1348, %r1272, %r1348, %p8;
	setp.eq.s32 	%p9, %r1342, 32;
	selp.b32 	%r1343, %r1272, %r1343, %p9;
	selp.b32 	%r1344, %r1272, %r1344, %p9;
	setp.eq.s32 	%p10, %r1342, 64;
	selp.b32 	%r1345, %r1272, %r1345, %p10;
	selp.b32 	%r1346, %r1272, %r1346, %p10;
	add.s32 	%r30, %r1342, 32;
	setp.ne.s32 	%p11, %r1342, 96;
	mov.u32 	%r1342, %r30;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11312
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p12, %r80, 0;
	// begin inline asm
	prmt.b32 %r1262, %r1347, %r1343, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1266, %r1348, %r1344, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1270, %r1345, %r1272, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1274, %r1346, %r1272, %r355;
	// end inline asm
	selp.b32 	%r1310, %r1266, %r1262, %p12;
	shfl.sync.bfly.b32	%r1311, %r1310, 1, 31, -1;
	selp.b32 	%r1279, %r1262, %r1311, %p12;
	selp.b32 	%r1280, %r1311, %r1266, %p12;
	selp.b32 	%r1312, %r1274, %r1270, %p12;
	shfl.sync.bfly.b32	%r1313, %r1312, 1, 31, -1;
	selp.b32 	%r1287, %r1270, %r1313, %p12;
	selp.b32 	%r1288, %r1313, %r1274, %p12;
	// begin inline asm
	prmt.b32 %r1278, %r1279, %r1280, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1279, %r1280, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1287, %r1288, %r351;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1287, %r1288, %r355;
	// end inline asm
	selp.b32 	%r1314, %r1286, %r1278, %p4;
	shfl.sync.bfly.b32	%r1315, %r1314, 2, 31, -1;
	selp.b32 	%r1295, %r1278, %r1315, %p4;
	selp.b32 	%r1296, %r1315, %r1286, %p4;
	selp.b32 	%r1316, %r1290, %r1282, %p4;
	shfl.sync.bfly.b32	%r1317, %r1316, 2, 31, -1;
	selp.b32 	%r1303, %r1282, %r1317, %p4;
	selp.b32 	%r1304, %r1317, %r1290, %p4;
	// begin inline asm
	prmt.b32 %r1294, %r1295, %r1296, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1298, %r1295, %r1296, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1302, %r1303, %r1304, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1306, %r1303, %r1304, %r227;
	// end inline asm
	selp.b32 	%r1318, %r1302, %r1294, %p5;
	shfl.sync.bfly.b32	%r1319, %r1318, 4, 31, -1;
	selp.b32 	%r1320, %r1294, %r1319, %p5;
	selp.b32 	%r1321, %r1319, %r1302, %p5;
	selp.b32 	%r1322, %r1306, %r1298, %p5;
	shfl.sync.bfly.b32	%r1323, %r1322, 4, 31, -1;
	selp.b32 	%r1324, %r1298, %r1323, %p5;
	selp.b32 	%r1325, %r1323, %r1306, %p5;
	selp.b32 	%r1326, %r1324, %r1320, %p12;
	shfl.sync.bfly.b32	%r1327, %r1326, 1, 31, -1;
	selp.b32 	%r1328, %r1320, %r1327, %p12;
	selp.b32 	%r1329, %r1327, %r1324, %p12;
	selp.b32 	%r1330, %r1325, %r1321, %p12;
	shfl.sync.bfly.b32	%r1331, %r1330, 1, 31, -1;
	selp.b32 	%r1332, %r1321, %r1331, %p12;
	selp.b32 	%r1333, %r1331, %r1325, %p12;
	or.b32  	%r1334, %r33, %r1341;
	or.b32  	%r1335, %r82, %r1334;
	or.b32  	%r1336, %r84, %r1335;
	shr.u32 	%r1337, %r1336, 2;
	add.s32 	%r1338, %r81, %r1337;
	add.s32 	%r1339, %r1338, %r83;
	mul.wide.u32 	%rd95, %r1339, 4;
	add.s64 	%rd96, %rd4, %rd95;
	st.global.v4.u32 	[%rd96], {%r1328, %r1332, %r1329, %r1333};
	add.s32 	%r31, %r1341, 128;
	setp.ne.s32 	%p15, %r1341, 32640;
	mov.u32 	%r1341, %r31;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11741
	mov.u32 	%r1340, 0;
	st.global.u32 	[%rd6], %r1340;
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L28
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L282
	mov.u32 	%r99, 2;
	st.global.u32 	[%rd6], %r99;
	mov.u64 	%rd23, exception866;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
