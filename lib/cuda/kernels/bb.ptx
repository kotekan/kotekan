// PTX CompilerJob of bb(CuDeviceVector{Int8x4, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Int32, 1}) in world 33534 for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1342>;
	.reg .b64 	%rd<92>;

// %bb.0:                               // %conversion
	ld.param.u64 	%rd15, [_Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r75, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r75, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r76, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r76, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r77, %r1, 768, %r3;
	or.b32  	%r78, %r77, %r4;
	mul.wide.u32 	%rd20, %r78, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r79, 1;
	st.global.u32 	[%rd6], %r79;
	shr.u32 	%r5, %r1, 5;
	mul.lo.s32 	%r80, %r5, 192;
	shl.b32 	%r81, %r2, 2;
	bfe.u32 	%r6, %r1, 4, 1;
	shr.u32 	%r7, %r4, 3;
	or.b32  	%r82, %r81, %r7;
	mul.hi.u32 	%r83, %r82, -1431655765;
	shr.u32 	%r84, %r83, 6;
	mul.lo.s32 	%r85, %r84, 96;
	sub.s32 	%r8, %r82, %r85;
	mad.lo.s32 	%r86, %r6, 96, %r80;
	add.s32 	%r87, %r86, %r8;
	mul.wide.u32 	%rd21, %r87, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r9, [%rd22];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %pass112
	ld.param.u64 	%rd1, [_Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z13julia_bb_362013CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r346, %r9, -3;
	mul.lo.s32 	%r347, %r5, 49152;
	mul.lo.s32 	%r348, %r6, 24576;
	shl.b32 	%r349, %r4, 4;
	and.b32  	%r350, %r349, 16;
	shl.b32 	%r351, %r2, 6;
	shl.b32 	%r352, %r4, 1;
	and.b32  	%r353, %r352, 12;
	and.b32  	%r354, %r351, 192;
	shr.u32 	%r30, %r4, 2;
	and.b32  	%r355, %r30, 6;
	shr.u32 	%r356, %r2, 2;
	cvt.u16.u32 	%rs4, %r356;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r357, %rs9;
	and.b32  	%r358, %r357, 240;
	or.b32  	%r359, %r355, %r358;
	cvt.u16.u32 	%rs10, %r359;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r360, %rs15, 256;
	or.b32  	%r361, %r354, %r350;
	or.b32  	%r362, %r361, %r347;
	or.b32  	%r363, %r362, %r353;
	add.s32 	%r364, %r348, %r363;
	or.b32  	%r365, %r364, 1;
	add.s32 	%r366, %r365, %r360;
	mul.wide.u32 	%rd25, %r366, 4;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r90, %r91, %r106, %r107}, [%rd26+-4];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r367, %rs21, 256;
	add.s32 	%r368, %r365, %r367;
	mul.wide.u32 	%rd27, %r368, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r98, %r99, %r114, %r115}, [%rd28+-4];
	or.b32  	%r369, %r353, %r347;
	or.b32  	%r370, %r369, %r354;
	or.b32  	%r371, %r370, %r350;
	add.s32 	%r372, %r348, %r371;
	or.b32  	%r373, %r372, 32;
	add.s32 	%r374, %r373, %r360;
	shl.b32 	%r375, %r374, 2;
	cvt.u64.u32 	%rd29, %r375;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r122, %r123, %r138, %r139}, [%rd30];
	add.s32 	%r376, %r373, %r367;
	shl.b32 	%r377, %r376, 2;
	cvt.u64.u32 	%rd31, %r377;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r130, %r131, %r146, %r147}, [%rd32];
	or.b32  	%r378, %r30, %r358;
	or.b32  	%r379, %r378, 1;
	mul.hi.u32 	%r380, %r379, -1431655765;
	shr.u32 	%r381, %r380, 6;
	mul.lo.s32 	%r382, %r381, 96;
	sub.s32 	%r383, %r379, %r382;
	shl.b32 	%r384, %r383, 8;
	add.s32 	%r385, %r365, %r384;
	mul.wide.u32 	%rd33, %r385, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r154, %r155, %r170, %r171}, [%rd34+-4];
	or.b32  	%r386, %r378, 9;
	mul.hi.u32 	%r387, %r386, -1431655765;
	shr.u32 	%r388, %r387, 6;
	mul.lo.s32 	%r389, %r388, 96;
	sub.s32 	%r390, %r386, %r389;
	shl.b32 	%r391, %r390, 8;
	add.s32 	%r392, %r365, %r391;
	mul.wide.u32 	%rd35, %r392, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r162, %r163, %r178, %r179}, [%rd36+-4];
	add.s32 	%r393, %r373, %r384;
	shl.b32 	%r394, %r393, 2;
	cvt.u64.u32 	%rd37, %r394;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r186, %r187, %r202, %r203}, [%rd38];
	add.s32 	%r395, %r373, %r391;
	shl.b32 	%r396, %r395, 2;
	cvt.u64.u32 	%rd39, %r396;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r194, %r195, %r210, %r211}, [%rd40];
	mov.u32 	%r212, 21520;
	// begin inline asm
	prmt.b32 %r218, %r90, %r91, %r212;
	// end inline asm
	mov.u32 	%r216, 30258;
	// begin inline asm
	prmt.b32 %r219, %r90, %r91, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r226, %r98, %r99, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r98, %r99, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r106, %r107, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r106, %r107, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r114, %r115, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r114, %r115, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r122, %r123, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r122, %r123, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r130, %r131, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r130, %r131, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r138, %r139, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r138, %r139, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r146, %r147, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r146, %r147, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r154, %r155, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r154, %r155, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r162, %r163, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r162, %r163, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r170, %r171, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r170, %r171, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r178, %r179, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r178, %r179, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r186, %r187, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r186, %r187, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r194, %r195, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r194, %r195, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r202, %r203, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r202, %r203, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r210, %r211, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r210, %r211, %r216;
	// end inline asm
	mov.u32 	%r340, 25152;
	// begin inline asm
	prmt.b32 %r217, %r218, %r219, %r340;
	// end inline asm
	mov.u32 	%r344, 29521;
	// begin inline asm
	prmt.b32 %r221, %r218, %r219, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r225, %r226, %r227, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r226, %r227, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r234, %r235, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r234, %r235, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r242, %r243, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r242, %r243, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r250, %r251, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r250, %r251, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r258, %r259, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r258, %r259, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r266, %r267, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r266, %r267, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r274, %r275, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r274, %r275, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r282, %r283, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r282, %r283, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r290, %r291, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r290, %r291, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r298, %r299, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r298, %r299, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r306, %r307, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r306, %r307, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r314, %r315, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r314, %r315, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r322, %r323, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r322, %r323, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r330, %r331, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r330, %r331, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r338, %r339, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r338, %r339, %r344;
	// end inline asm
	cvt.u16.u32 	%rs22, %r4;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r397, %r249, %r217, %p4;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r217, %r398, %p4;
	selp.b32 	%r400, %r398, %r249, %p4;
	selp.b32 	%r401, %r257, %r225, %p4;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r225, %r402, %p4;
	selp.b32 	%r404, %r402, %r257, %p4;
	selp.b32 	%r405, %r253, %r221, %p4;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r221, %r406, %p4;
	selp.b32 	%r408, %r406, %r253, %p4;
	selp.b32 	%r409, %r261, %r229, %p4;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r229, %r410, %p4;
	selp.b32 	%r412, %r410, %r261, %p4;
	selp.b32 	%r413, %r265, %r233, %p4;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r233, %r414, %p4;
	selp.b32 	%r416, %r414, %r265, %p4;
	selp.b32 	%r417, %r273, %r241, %p4;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r241, %r418, %p4;
	selp.b32 	%r420, %r418, %r273, %p4;
	selp.b32 	%r421, %r269, %r237, %p4;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r237, %r422, %p4;
	selp.b32 	%r424, %r422, %r269, %p4;
	selp.b32 	%r425, %r277, %r245, %p4;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r245, %r426, %p4;
	selp.b32 	%r428, %r426, %r277, %p4;
	selp.b32 	%r429, %r313, %r281, %p4;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r281, %r430, %p4;
	selp.b32 	%r432, %r430, %r313, %p4;
	selp.b32 	%r433, %r321, %r289, %p4;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r289, %r434, %p4;
	selp.b32 	%r436, %r434, %r321, %p4;
	selp.b32 	%r437, %r317, %r285, %p4;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r285, %r438, %p4;
	selp.b32 	%r440, %r438, %r317, %p4;
	selp.b32 	%r441, %r325, %r293, %p4;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r293, %r442, %p4;
	selp.b32 	%r444, %r442, %r325, %p4;
	selp.b32 	%r445, %r329, %r297, %p4;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r297, %r446, %p4;
	selp.b32 	%r448, %r446, %r329, %p4;
	selp.b32 	%r449, %r337, %r305, %p4;
	shfl.sync.bfly.b32	%r450, %r449, 2, 31, -1;
	selp.b32 	%r451, %r305, %r450, %p4;
	selp.b32 	%r452, %r450, %r337, %p4;
	selp.b32 	%r453, %r333, %r301, %p4;
	shfl.sync.bfly.b32	%r454, %r453, 2, 31, -1;
	selp.b32 	%r455, %r301, %r454, %p4;
	selp.b32 	%r456, %r454, %r333, %p4;
	selp.b32 	%r457, %r341, %r309, %p4;
	shfl.sync.bfly.b32	%r458, %r457, 2, 31, -1;
	selp.b32 	%r459, %r309, %r458, %p4;
	selp.b32 	%r460, %r458, %r341, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r461, %r431, %r399, %p5;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r31, %r399, %r462, %p5;
	selp.b32 	%r32, %r462, %r431, %p5;
	selp.b32 	%r463, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r33, %r403, %r464, %p5;
	selp.b32 	%r34, %r464, %r435, %p5;
	selp.b32 	%r465, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r35, %r407, %r466, %p5;
	selp.b32 	%r36, %r466, %r439, %p5;
	selp.b32 	%r467, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r37, %r411, %r468, %p5;
	selp.b32 	%r38, %r468, %r443, %p5;
	selp.b32 	%r469, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r39, %r415, %r470, %p5;
	selp.b32 	%r40, %r470, %r447, %p5;
	selp.b32 	%r471, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r41, %r419, %r472, %p5;
	selp.b32 	%r42, %r472, %r451, %p5;
	selp.b32 	%r473, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r43, %r423, %r474, %p5;
	selp.b32 	%r44, %r474, %r455, %p5;
	selp.b32 	%r475, %r459, %r427, %p5;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r45, %r427, %r476, %p5;
	selp.b32 	%r46, %r476, %r459, %p5;
	selp.b32 	%r477, %r432, %r400, %p5;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r47, %r400, %r478, %p5;
	selp.b32 	%r48, %r478, %r432, %p5;
	selp.b32 	%r479, %r436, %r404, %p5;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r49, %r404, %r480, %p5;
	selp.b32 	%r50, %r480, %r436, %p5;
	selp.b32 	%r481, %r440, %r408, %p5;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r51, %r408, %r482, %p5;
	selp.b32 	%r52, %r482, %r440, %p5;
	selp.b32 	%r483, %r444, %r412, %p5;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r53, %r412, %r484, %p5;
	selp.b32 	%r54, %r484, %r444, %p5;
	selp.b32 	%r485, %r448, %r416, %p5;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r55, %r416, %r486, %p5;
	selp.b32 	%r56, %r486, %r448, %p5;
	selp.b32 	%r487, %r452, %r420, %p5;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r57, %r420, %r488, %p5;
	selp.b32 	%r58, %r488, %r452, %p5;
	selp.b32 	%r489, %r456, %r424, %p5;
	shfl.sync.bfly.b32	%r490, %r489, 4, 31, -1;
	selp.b32 	%r59, %r424, %r490, %p5;
	selp.b32 	%r60, %r490, %r456, %p5;
	selp.b32 	%r491, %r460, %r428, %p5;
	shfl.sync.bfly.b32	%r492, %r491, 4, 31, -1;
	selp.b32 	%r61, %r428, %r492, %p5;
	selp.b32 	%r62, %r492, %r460, %p5;
	shl.b32 	%r493, %r1, 2;
	and.b32  	%r494, %r493, 1920;
	shl.b32 	%r495, %r1, 7;
	and.b32  	%r496, %r495, 2048;
	shl.b32 	%r497, %r1, 11;
	and.b32  	%r63, %r497, 30720;
	shl.b32 	%r498, %r4, 2;
	and.b32  	%r499, %r498, 28;
	and.b32  	%r64, %r2, 12;
	and.b32  	%r500, %r3, 96;
	or.b32  	%r65, %r499, %r500;
	or.b32  	%r66, %r494, %r496;
	shl.b32 	%r501, %r4, 3;
	and.b32  	%r502, %r501, 24;
	or.b32  	%r67, %r500, %r502;
	and.b32  	%r503, %r2, 3;
	mul.lo.s32 	%r504, %r503, 3200;
	and.b32  	%r68, %r352, 6;
	mul.hi.u32 	%r505, %r378, -1431655765;
	shr.u32 	%r506, %r505, 6;
	mul.lo.s32 	%r507, %r506, 96;
	sub.s32 	%r508, %r378, %r507;
	or.b32  	%r69, %r508, %r504;
	or.b32  	%r509, %r378, 8;
	mul.hi.u32 	%r510, %r509, -1431655765;
	shr.u32 	%r511, %r510, 6;
	mul.lo.s32 	%r512, %r511, 96;
	sub.s32 	%r513, %r509, %r512;
	or.b32  	%r70, %r513, %r504;
	and.b32  	%r514, %r4, 7;
	shl.b32 	%r71, %r79, %r10;
	min.u32 	%r72, %r346, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r516, %r1, 9;
	shl.b32 	%r517, %r4, 5;
	and.b32  	%r518, %r517, 64;
	shl.b32 	%r519, %r8, 18;
	and.b32  	%r520, %r516, 253952;
	or.b32  	%r73, %r520, %r519;
	or.b32  	%r521, %r4, 24;
	mul.lo.s32 	%r522, %r514, 100;
	add.s32 	%r523, %r522, %r8;
	mul.wide.u32 	%rd41, %r523, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r522;
	cvt.u64.u32 	%rd45, %r8;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r524, %r522, 800;
	add.s32 	%r525, %r524, %r8;
	mul.wide.u32 	%rd48, %r525, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r524;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r526, %r522, 1600;
	add.s32 	%r527, %r526, %r8;
	mul.wide.u32 	%rd52, %r527, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r526;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	mul.lo.s32 	%r528, %r521, 100;
	add.s32 	%r529, %r528, %r8;
	mul.wide.u32 	%rd56, %r529, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r528;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r530, %r501, 32;
	or.b32  	%r531, %r530, %r350;
	or.b32  	%r532, %r531, %r518;
	or.b32  	%r74, %r532, %r63;
	mov.u32 	%r345, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1333, %r345;
LBB0_7:                                 // %L2387
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1334, %r345;
	mov.u32 	%r1335, %r345;
	mov.u32 	%r1336, %r345;
	mov.u32 	%r1337, %r345;
	mov.u32 	%r1338, %r345;
	mov.u32 	%r1339, %r345;
	mov.u32 	%r1340, %r345;
LBB0_8:                                 // %L2390
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2410
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r534, %r1334, %r63;
	or.b32  	%r535, %r534, %r7;
	add.s32 	%r536, %r535, %r1333;
	or.b32  	%r537, %r536, %r64;
	shl.b32 	%r538, %r537, 12;
	and.b32  	%r539, %r538, 134148096;
	or.b32  	%r540, %r539, %r66;
	or.b32  	%r541, %r540, %r65;
	shl.b32 	%r542, %r541, 2;
	cvt.u64.u32 	%rd60, %r542;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r543, %r544, %r545, %r546}, [%rd61];
	or.b32  	%r547, %r535, 16;
	add.s32 	%r548, %r547, %r1333;
	or.b32  	%r549, %r548, %r64;
	shl.b32 	%r550, %r549, 12;
	and.b32  	%r551, %r550, 134213632;
	or.b32  	%r552, %r551, %r66;
	or.b32  	%r553, %r552, %r65;
	shl.b32 	%r554, %r553, 2;
	cvt.u64.u32 	%rd62, %r554;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r555, %r556, %r557, %r558}, [%rd63];
	and.b32  	%r559, %r537, 15;
	mul.lo.s32 	%r560, %r559, 129;
	add.s32 	%r561, %r65, %r560;
	mul.wide.u32 	%rd64, %r561, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r543;
	cvt.u64.u32 	%rd67, %r560;
	cvt.u64.u32 	%rd68, %r65;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r544;
	st.shared.u32 	[%rd71+8], %r545;
	st.shared.u32 	[%rd71+12], %r546;
	and.b32  	%r562, %r549, 31;
	mul.lo.s32 	%r563, %r562, 129;
	add.s32 	%r564, %r65, %r563;
	mul.wide.u32 	%rd72, %r564, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r555;
	cvt.u64.u32 	%rd74, %r563;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r556;
	st.shared.u32 	[%rd77+8], %r557;
	st.shared.u32 	[%rd77+12], %r558;
LBB0_10:                                // %L4288
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r578, 0;
	mov.u32 	%r1341, %r578;
LBB0_11:                                // %L4290
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1090, %r1341, %r30;
	mad.lo.s32 	%r1091, %r1090, 129, %r67;
	mul.wide.u32 	%rd78, %r1091, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r567, [%rd80];
	mov.u32 	%r568, 134744072;
	mov.u32 	%r569, 252645135;
	// begin inline asm
	lop3.b32 %r566, %r567, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1092, %r566, 2021161080;
	xor.b32  	%r577, %r1092, -2139062144;
	shr.u32 	%r571, %r567, 4;
	// begin inline asm
	lop3.b32 %r570, %r571, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1093, %r570, 2021161080;
	xor.b32  	%r583, %r1093, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r574, %r575}, {%r31}, {%r577}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r580, %r581}, {%r35}, {%r583}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r586, %r587}, {%r31}, {%r583}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r35}, {%r577}, {%r586, %r587};
	// end inline asm
	ld.shared.u32 	%r599, [%rd80+4];
	// begin inline asm
	lop3.b32 %r598, %r599, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1094, %r598, 2021161080;
	xor.b32  	%r609, %r1094, -2139062144;
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r602, %r603, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1095, %r602, 2021161080;
	xor.b32  	%r615, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r606, %r607}, {%r39}, {%r609}, {%r574, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r612, %r613}, {%r43}, {%r615}, {%r580, %r581};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r618, %r619}, {%r39}, {%r615}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r43}, {%r609}, {%r618, %r619};
	// end inline asm
	ld.shared.u32 	%r631, [%rd80+8];
	// begin inline asm
	lop3.b32 %r630, %r631, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1096, %r630, 2021161080;
	xor.b32  	%r641, %r1096, -2139062144;
	shr.u32 	%r635, %r631, 4;
	// begin inline asm
	lop3.b32 %r634, %r635, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1097, %r634, 2021161080;
	xor.b32  	%r647, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r638, %r639}, {%r47}, {%r641}, {%r606, %r607};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r644, %r645}, {%r51}, {%r647}, {%r612, %r613};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r650, %r651}, {%r47}, {%r647}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r51}, {%r641}, {%r650, %r651};
	// end inline asm
	ld.shared.u32 	%r663, [%rd80+12];
	// begin inline asm
	lop3.b32 %r662, %r663, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1098, %r662, 2021161080;
	xor.b32  	%r673, %r1098, -2139062144;
	shr.u32 	%r667, %r663, 4;
	// begin inline asm
	lop3.b32 %r666, %r667, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1099, %r666, 2021161080;
	xor.b32  	%r679, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r670, %r671}, {%r55}, {%r673}, {%r638, %r639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r676, %r677}, {%r59}, {%r679}, {%r644, %r645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r682, %r683}, {%r55}, {%r679}, {%r656, %r657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r688, %r689}, {%r59}, {%r673}, {%r682, %r683};
	// end inline asm
	ld.shared.u32 	%r695, [%rd80+16];
	// begin inline asm
	lop3.b32 %r694, %r695, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1100, %r694, 2021161080;
	xor.b32  	%r705, %r1100, -2139062144;
	shr.u32 	%r699, %r695, 4;
	// begin inline asm
	lop3.b32 %r698, %r699, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1101, %r698, 2021161080;
	xor.b32  	%r711, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r702, %r703}, {%r32}, {%r705}, {%r670, %r671};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r708, %r709}, {%r36}, {%r711}, {%r676, %r677};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r714, %r715}, {%r32}, {%r711}, {%r688, %r689};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r720, %r721}, {%r36}, {%r705}, {%r714, %r715};
	// end inline asm
	ld.shared.u32 	%r727, [%rd80+20];
	// begin inline asm
	lop3.b32 %r726, %r727, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1102, %r726, 2021161080;
	xor.b32  	%r737, %r1102, -2139062144;
	shr.u32 	%r731, %r727, 4;
	// begin inline asm
	lop3.b32 %r730, %r731, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1103, %r730, 2021161080;
	xor.b32  	%r743, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r734, %r735}, {%r40}, {%r737}, {%r702, %r703};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r740, %r741}, {%r44}, {%r743}, {%r708, %r709};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r746, %r747}, {%r40}, {%r743}, {%r720, %r721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r752, %r753}, {%r44}, {%r737}, {%r746, %r747};
	// end inline asm
	ld.shared.u32 	%r759, [%rd80+24];
	// begin inline asm
	lop3.b32 %r758, %r759, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1104, %r758, 2021161080;
	xor.b32  	%r769, %r1104, -2139062144;
	shr.u32 	%r763, %r759, 4;
	// begin inline asm
	lop3.b32 %r762, %r763, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1105, %r762, 2021161080;
	xor.b32  	%r775, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r766, %r767}, {%r48}, {%r769}, {%r734, %r735};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r772, %r773}, {%r52}, {%r775}, {%r740, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r778, %r779}, {%r48}, {%r775}, {%r752, %r753};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r784, %r785}, {%r52}, {%r769}, {%r778, %r779};
	// end inline asm
	ld.shared.u32 	%r791, [%rd80+28];
	// begin inline asm
	lop3.b32 %r790, %r791, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1106, %r790, 2021161080;
	xor.b32  	%r801, %r1106, -2139062144;
	shr.u32 	%r795, %r791, 4;
	// begin inline asm
	lop3.b32 %r794, %r795, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1107, %r794, 2021161080;
	xor.b32  	%r807, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r798, %r799}, {%r56}, {%r801}, {%r766, %r767};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r804, %r805}, {%r60}, {%r807}, {%r772, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r810, %r811}, {%r56}, {%r807}, {%r784, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r816, %r817}, {%r60}, {%r801}, {%r810, %r811};
	// end inline asm
	sub.s32 	%r1108, %r798, %r804;
	add.s32 	%r1109, %r1108, 4;
	shr.s32 	%r824, %r1109, 3;
	add.s32 	%r1110, %r816, 4;
	shr.s32 	%r823, %r1110, 3;
	sub.s32 	%r1111, %r799, %r805;
	add.s32 	%r1112, %r1111, 4;
	shr.s32 	%r827, %r1112, 3;
	add.s32 	%r1113, %r817, 4;
	shr.s32 	%r826, %r1113, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r822, %r823, %r824;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r825, %r826, %r827;
	// end inline asm
	or.b32  	%r1114, %r68, %r1341;
	mul.lo.s32 	%r1115, %r1114, 100;
	add.s32 	%r1116, %r69, %r1115;
	mul.wide.u32 	%rd81, %r1116, 4;
	add.s64 	%rd83, %rd43, %rd81;
	st.shared.u32 	[%rd83], %r822;
	add.s32 	%r1117, %r1115, 100;
	add.s32 	%r1118, %r69, %r1117;
	mul.wide.u32 	%rd84, %r1118, 4;
	add.s64 	%rd85, %rd43, %rd84;
	st.shared.u32 	[%rd85], %r825;
	ld.shared.u32 	%r829, [%rd80];
	// begin inline asm
	lop3.b32 %r828, %r829, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1119, %r828, 2021161080;
	xor.b32  	%r839, %r1119, -2139062144;
	shr.u32 	%r833, %r829, 4;
	// begin inline asm
	lop3.b32 %r832, %r833, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1120, %r832, 2021161080;
	xor.b32  	%r845, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r836, %r837}, {%r33}, {%r839}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r842, %r843}, {%r37}, {%r845}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r848, %r849}, {%r33}, {%r845}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r854, %r855}, {%r37}, {%r839}, {%r848, %r849};
	// end inline asm
	ld.shared.u32 	%r861, [%rd80+4];
	// begin inline asm
	lop3.b32 %r860, %r861, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1121, %r860, 2021161080;
	xor.b32  	%r871, %r1121, -2139062144;
	shr.u32 	%r865, %r861, 4;
	// begin inline asm
	lop3.b32 %r864, %r865, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1122, %r864, 2021161080;
	xor.b32  	%r877, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r868, %r869}, {%r41}, {%r871}, {%r836, %r837};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r874, %r875}, {%r45}, {%r877}, {%r842, %r843};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r880, %r881}, {%r41}, {%r877}, {%r854, %r855};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r886, %r887}, {%r45}, {%r871}, {%r880, %r881};
	// end inline asm
	ld.shared.u32 	%r893, [%rd80+8];
	// begin inline asm
	lop3.b32 %r892, %r893, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1123, %r892, 2021161080;
	xor.b32  	%r903, %r1123, -2139062144;
	shr.u32 	%r897, %r893, 4;
	// begin inline asm
	lop3.b32 %r896, %r897, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1124, %r896, 2021161080;
	xor.b32  	%r909, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r900, %r901}, {%r49}, {%r903}, {%r868, %r869};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r906, %r907}, {%r53}, {%r909}, {%r874, %r875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r912, %r913}, {%r49}, {%r909}, {%r886, %r887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r918, %r919}, {%r53}, {%r903}, {%r912, %r913};
	// end inline asm
	ld.shared.u32 	%r925, [%rd80+12];
	// begin inline asm
	lop3.b32 %r924, %r925, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1125, %r924, 2021161080;
	xor.b32  	%r935, %r1125, -2139062144;
	shr.u32 	%r929, %r925, 4;
	// begin inline asm
	lop3.b32 %r928, %r929, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1126, %r928, 2021161080;
	xor.b32  	%r941, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r932, %r933}, {%r57}, {%r935}, {%r900, %r901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r938, %r939}, {%r61}, {%r941}, {%r906, %r907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r944, %r945}, {%r57}, {%r941}, {%r918, %r919};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r950, %r951}, {%r61}, {%r935}, {%r944, %r945};
	// end inline asm
	ld.shared.u32 	%r957, [%rd80+16];
	// begin inline asm
	lop3.b32 %r956, %r957, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1127, %r956, 2021161080;
	xor.b32  	%r967, %r1127, -2139062144;
	shr.u32 	%r961, %r957, 4;
	// begin inline asm
	lop3.b32 %r960, %r961, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1128, %r960, 2021161080;
	xor.b32  	%r973, %r1128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r964, %r965}, {%r34}, {%r967}, {%r932, %r933};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r970, %r971}, {%r38}, {%r973}, {%r938, %r939};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r976, %r977}, {%r34}, {%r973}, {%r950, %r951};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r982, %r983}, {%r38}, {%r967}, {%r976, %r977};
	// end inline asm
	ld.shared.u32 	%r989, [%rd80+20];
	// begin inline asm
	lop3.b32 %r988, %r989, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1129, %r988, 2021161080;
	xor.b32  	%r999, %r1129, -2139062144;
	shr.u32 	%r993, %r989, 4;
	// begin inline asm
	lop3.b32 %r992, %r993, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1130, %r992, 2021161080;
	xor.b32  	%r1005, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r996, %r997}, {%r42}, {%r999}, {%r964, %r965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1002, %r1003}, {%r46}, {%r1005}, {%r970, %r971};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1008, %r1009}, {%r42}, {%r1005}, {%r982, %r983};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1014, %r1015}, {%r46}, {%r999}, {%r1008, %r1009};
	// end inline asm
	ld.shared.u32 	%r1021, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1020, %r1021, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1131, %r1020, 2021161080;
	xor.b32  	%r1031, %r1131, -2139062144;
	shr.u32 	%r1025, %r1021, 4;
	// begin inline asm
	lop3.b32 %r1024, %r1025, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1132, %r1024, 2021161080;
	xor.b32  	%r1037, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1028, %r1029}, {%r50}, {%r1031}, {%r996, %r997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1034, %r1035}, {%r54}, {%r1037}, {%r1002, %r1003};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1040, %r1041}, {%r50}, {%r1037}, {%r1014, %r1015};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1046, %r1047}, {%r54}, {%r1031}, {%r1040, %r1041};
	// end inline asm
	ld.shared.u32 	%r1053, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1052, %r1053, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1133, %r1052, 2021161080;
	xor.b32  	%r1063, %r1133, -2139062144;
	shr.u32 	%r1057, %r1053, 4;
	// begin inline asm
	lop3.b32 %r1056, %r1057, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1134, %r1056, 2021161080;
	xor.b32  	%r1069, %r1134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1060, %r1061}, {%r58}, {%r1063}, {%r1028, %r1029};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1066, %r1067}, {%r62}, {%r1069}, {%r1034, %r1035};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1072, %r1073}, {%r58}, {%r1069}, {%r1046, %r1047};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1078, %r1079}, {%r62}, {%r1063}, {%r1072, %r1073};
	// end inline asm
	sub.s32 	%r1135, %r1060, %r1066;
	add.s32 	%r1136, %r1135, 4;
	shr.s32 	%r1086, %r1136, 3;
	add.s32 	%r1137, %r1078, 4;
	shr.s32 	%r1085, %r1137, 3;
	sub.s32 	%r1138, %r1061, %r1067;
	add.s32 	%r1139, %r1138, 4;
	shr.s32 	%r1089, %r1139, 3;
	add.s32 	%r1140, %r1079, 4;
	shr.s32 	%r1088, %r1140, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1084, %r1085, %r1086;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1087, %r1088, %r1089;
	// end inline asm
	add.s32 	%r1141, %r70, %r1115;
	mul.wide.u32 	%rd86, %r1141, 4;
	add.s64 	%rd87, %rd43, %rd86;
	st.shared.u32 	[%rd87], %r1084;
	add.s32 	%r1142, %r70, %r1117;
	mul.wide.u32 	%rd88, %r1142, 4;
	add.s64 	%rd89, %rd43, %rd88;
	st.shared.u32 	[%rd89], %r1087;
	add.s32 	%r1341, %r1341, 8;
	setp.ne.s32 	%p7, %r1341, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8469
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1161, [%rd7];
	ld.shared.u32 	%r1162, [%rd8+12800];
	ld.shared.u32 	%r1163, [%rd8+25600];
	ld.shared.u32 	%r1164, [%rd8+38400];
	ld.shared.u32 	%r1165, [%rd9];
	ld.shared.u32 	%r1166, [%rd10+12800];
	ld.shared.u32 	%r1167, [%rd10+25600];
	ld.shared.u32 	%r1168, [%rd10+38400];
	ld.shared.u32 	%r1169, [%rd11];
	ld.shared.u32 	%r1170, [%rd12+12800];
	ld.shared.u32 	%r1171, [%rd12+25600];
	ld.shared.u32 	%r1172, [%rd12+38400];
	ld.shared.u32 	%r1173, [%rd13];
	ld.shared.u32 	%r1174, [%rd14+12800];
	ld.shared.u32 	%r1175, [%rd14+25600];
	ld.shared.u32 	%r1176, [%rd14+38400];
	cvt.s32.s16 	%r1177, %r1161;
	shr.s32 	%r1178, %r1161, 16;
	cvt.s32.s16 	%r1179, %r1162;
	shr.s32 	%r1180, %r1162, 16;
	cvt.s32.s16 	%r1181, %r1163;
	shr.s32 	%r1182, %r1163, 16;
	cvt.s32.s16 	%r1183, %r1164;
	shr.s32 	%r1184, %r1164, 16;
	cvt.s32.s16 	%r1185, %r1165;
	shr.s32 	%r1186, %r1165, 16;
	cvt.s32.s16 	%r1187, %r1166;
	shr.s32 	%r1188, %r1166, 16;
	cvt.s32.s16 	%r1189, %r1167;
	shr.s32 	%r1190, %r1167, 16;
	cvt.s32.s16 	%r1191, %r1168;
	shr.s32 	%r1192, %r1168, 16;
	cvt.s32.s16 	%r1193, %r1169;
	shr.s32 	%r1194, %r1169, 16;
	cvt.s32.s16 	%r1195, %r1170;
	shr.s32 	%r1196, %r1170, 16;
	cvt.s32.s16 	%r1197, %r1171;
	shr.s32 	%r1198, %r1171, 16;
	cvt.s32.s16 	%r1199, %r1172;
	shr.s32 	%r1200, %r1172, 16;
	cvt.s32.s16 	%r1201, %r1173;
	shr.s32 	%r1202, %r1173, 16;
	cvt.s32.s16 	%r1203, %r1174;
	shr.s32 	%r1204, %r1174, 16;
	cvt.s32.s16 	%r1205, %r1175;
	shr.s32 	%r1206, %r1175, 16;
	cvt.s32.s16 	%r1207, %r1176;
	shr.s32 	%r1208, %r1176, 16;
	add.s32 	%r1209, %r1177, %r71;
	add.s32 	%r1210, %r1209, %r1179;
	add.s32 	%r1211, %r1210, %r1181;
	add.s32 	%r1212, %r1211, %r1183;
	shr.s32 	%r1213, %r1212, %r72;
	add.s32 	%r1214, %r1178, %r71;
	add.s32 	%r1215, %r1214, %r1180;
	add.s32 	%r1216, %r1215, %r1182;
	add.s32 	%r1217, %r1216, %r1184;
	shr.s32 	%r1218, %r1217, %r72;
	add.s32 	%r1219, %r1185, %r71;
	add.s32 	%r1220, %r1219, %r1187;
	add.s32 	%r1221, %r1220, %r1189;
	add.s32 	%r1222, %r1221, %r1191;
	shr.s32 	%r1223, %r1222, %r72;
	add.s32 	%r1224, %r1186, %r71;
	add.s32 	%r1225, %r1224, %r1188;
	add.s32 	%r1226, %r1225, %r1190;
	add.s32 	%r1227, %r1226, %r1192;
	shr.s32 	%r1228, %r1227, %r72;
	add.s32 	%r1229, %r1193, %r71;
	add.s32 	%r1230, %r1229, %r1195;
	add.s32 	%r1231, %r1230, %r1197;
	add.s32 	%r1232, %r1231, %r1199;
	shr.s32 	%r1233, %r1232, %r72;
	add.s32 	%r1234, %r1194, %r71;
	add.s32 	%r1235, %r1234, %r1196;
	add.s32 	%r1236, %r1235, %r1198;
	add.s32 	%r1237, %r1236, %r1200;
	shr.s32 	%r1238, %r1237, %r72;
	add.s32 	%r1239, %r1201, %r71;
	add.s32 	%r1240, %r1239, %r1203;
	add.s32 	%r1241, %r1240, %r1205;
	add.s32 	%r1242, %r1241, %r1207;
	shr.s32 	%r1243, %r1242, %r72;
	add.s32 	%r1244, %r1202, %r71;
	add.s32 	%r1245, %r1244, %r1204;
	add.s32 	%r1246, %r1245, %r1206;
	add.s32 	%r1247, %r1246, %r1208;
	shr.s32 	%r1248, %r1247, %r72;
	max.s32 	%r1249, %r1213, -7;
	min.s32 	%r1148, %r1249, 7;
	max.s32 	%r1250, %r1218, -7;
	min.s32 	%r1155, %r1250, 7;
	max.s32 	%r1251, %r1223, -7;
	min.s32 	%r1147, %r1251, 7;
	max.s32 	%r1252, %r1228, -7;
	min.s32 	%r1154, %r1252, 7;
	max.s32 	%r1253, %r1233, -7;
	min.s32 	%r1145, %r1253, 7;
	max.s32 	%r1254, %r1238, -7;
	min.s32 	%r1152, %r1254, 7;
	max.s32 	%r1255, %r1243, -7;
	min.s32 	%r1144, %r1255, 7;
	max.s32 	%r1256, %r1248, -7;
	min.s32 	%r1151, %r1256, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1143, %r1144, %r1145, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1146, %r1147, %r1148, %r1143;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1150, %r1151, %r1152, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1153, %r1154, %r1155, %r1150;
	// end inline asm
	shl.b32 	%r1160, %r1153, 4;
	// begin inline asm
	lop3.b32 %r1267, %r569, %r1146, %r1160, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1334, 0;
	selp.b32 	%r1339, %r1267, %r1339, %p8;
	selp.b32 	%r1340, %r1267, %r1340, %p8;
	setp.eq.s32 	%p9, %r1334, 32;
	selp.b32 	%r1335, %r1267, %r1335, %p9;
	selp.b32 	%r1336, %r1267, %r1336, %p9;
	setp.eq.s32 	%p10, %r1334, 64;
	selp.b32 	%r1337, %r1267, %r1337, %p10;
	selp.b32 	%r1338, %r1267, %r1338, %p10;
	add.s32 	%r28, %r1334, 32;
	setp.ne.s32 	%p11, %r1334, 96;
	mov.u32 	%r1334, %r28;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11221
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1257, %r1339, %r1335, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1261, %r1340, %r1336, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1265, %r1337, %r1267, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1269, %r1338, %r1267, %r344;
	// end inline asm
	selp.b32 	%r1305, %r1261, %r1257, %p12;
	shfl.sync.bfly.b32	%r1306, %r1305, 1, 31, -1;
	selp.b32 	%r1274, %r1257, %r1306, %p12;
	selp.b32 	%r1275, %r1306, %r1261, %p12;
	selp.b32 	%r1307, %r1269, %r1265, %p12;
	shfl.sync.bfly.b32	%r1308, %r1307, 1, 31, -1;
	selp.b32 	%r1282, %r1265, %r1308, %p12;
	selp.b32 	%r1283, %r1308, %r1269, %p12;
	// begin inline asm
	prmt.b32 %r1273, %r1274, %r1275, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1277, %r1274, %r1275, %r344;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1281, %r1282, %r1283, %r340;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1285, %r1282, %r1283, %r344;
	// end inline asm
	selp.b32 	%r1309, %r1281, %r1273, %p4;
	shfl.sync.bfly.b32	%r1310, %r1309, 2, 31, -1;
	selp.b32 	%r1290, %r1273, %r1310, %p4;
	selp.b32 	%r1291, %r1310, %r1281, %p4;
	selp.b32 	%r1311, %r1285, %r1277, %p4;
	shfl.sync.bfly.b32	%r1312, %r1311, 2, 31, -1;
	selp.b32 	%r1298, %r1277, %r1312, %p4;
	selp.b32 	%r1299, %r1312, %r1285, %p4;
	// begin inline asm
	prmt.b32 %r1289, %r1290, %r1291, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1293, %r1290, %r1291, %r216;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1297, %r1298, %r1299, %r212;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1301, %r1298, %r1299, %r216;
	// end inline asm
	selp.b32 	%r1313, %r1297, %r1289, %p5;
	shfl.sync.bfly.b32	%r1314, %r1313, 4, 31, -1;
	selp.b32 	%r1315, %r1289, %r1314, %p5;
	selp.b32 	%r1316, %r1314, %r1297, %p5;
	selp.b32 	%r1317, %r1301, %r1293, %p5;
	shfl.sync.bfly.b32	%r1318, %r1317, 4, 31, -1;
	selp.b32 	%r1319, %r1293, %r1318, %p5;
	selp.b32 	%r1320, %r1318, %r1301, %p5;
	selp.b32 	%r1321, %r1319, %r1315, %p12;
	shfl.sync.bfly.b32	%r1322, %r1321, 1, 31, -1;
	selp.b32 	%r1323, %r1315, %r1322, %p12;
	selp.b32 	%r1324, %r1322, %r1319, %p12;
	selp.b32 	%r1325, %r1320, %r1316, %p12;
	shfl.sync.bfly.b32	%r1326, %r1325, 1, 31, -1;
	selp.b32 	%r1327, %r1316, %r1326, %p12;
	selp.b32 	%r1328, %r1326, %r1320, %p12;
	add.s32 	%r1329, %r74, %r1333;
	shr.u32 	%r1330, %r1329, 2;
	add.s32 	%r1331, %r73, %r1330;
	mul.wide.u32 	%rd90, %r1331, 4;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1323, %r1327, %r1324, %r1328};
	add.s32 	%r29, %r1333, 128;
	setp.ne.s32 	%p15, %r1333, 1920;
	mov.u32 	%r1333, %r29;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11624
	mov.u32 	%r1332, 0;
	st.global.u32 	[%rd6], %r1332;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L252
	mov.u32 	%r88, 2;
	st.global.u32 	[%rd6], %r88;
	mov.u64 	%rd23, exception925;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd15;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
