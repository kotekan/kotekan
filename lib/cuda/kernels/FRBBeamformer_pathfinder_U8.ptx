// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1911[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1951[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<317>;
	.reg .b16 	%rs<237>;
	.reg .b32 	%r<3038>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<329>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r281, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r290, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r290, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r282, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mul.lo.s32 	%r4, %r3, 192;
	mov.u32 	%r291, %tid.x;
	add.s32 	%r292, %r2, %r4;
	or.b32  	%r293, %r292, %r291;
	mul.wide.u32 	%rd20, %r293, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r294, 1;
	st.global.u32 	[%rd6], %r294;
	setp.gt.u32 	%p5, %r282, 4095;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r283, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r283, %r282;
	setp.gt.s32 	%p7, %r283, 8191;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r284, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r283, %r282;
	mad.lo.s32 	%r295, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r296, %r295, %r295, 4;
	setp.gt.u32 	%p9, %r296, 89478484;
	setp.gt.u32 	%p10, %r284, 511;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r285, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r285, %r284;
	setp.lt.s32 	%p13, %r285, 1024;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r297, %r285, %r284;
	shr.s32 	%r298, %r6, 31;
	shr.u32 	%r299, %r298, 27;
	add.s32 	%r300, %r6, %r299;
	shr.s32 	%r301, %r300, 5;
	setp.eq.s32 	%p15, %r297, %r301;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r286, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r286, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r287, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r287, %r286;
	setp.gt.s32 	%p18, %r287, 512;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r288, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r287, %r286;
	and.b32  	%r302, %r7, 7;
	setp.ne.s32 	%p20, %r302, 0;
	setp.lt.s32 	%p21, %r288, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r289, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r289, %r288;
	setp.gt.s32 	%p24, %r289, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r303, %r289, %r288;
	and.b32  	%r304, %r303, 7;
	setp.eq.s32 	%p26, %r304, 0;
	setp.eq.s32 	%p27, %r303, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_13;
$L__BB0_175:                            // %pass162
	and.b32  	%r143, %r291, 3;
	shr.u32 	%r144, %r291, 2;
	mul.lo.s32 	%r305, %r143, %r144;
	and.b32  	%r306, %r305, 7;
	cvt.rn.f32.s32 	%f205, %r306;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p316, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_187;
// %bb.176:
	@%p316 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_177;
$L__BB0_183:
	mov.b32 	%r146, %f788;
	and.b32  	%r307, %r146, 8388607;
	or.b32  	%r3021, %r307, 1065353216;
	mov.b32 	%f783, %r3021;
	add.s32 	%r308, %r146, -1073741824;
	and.b32  	%r3022, %r308, -8388608;
	setp.eq.s32 	%p36, %r3022, 0;
	@%p36 bra 	$L__BB0_186;
// %bb.184:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_185:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r309, %r3022, 192937984;
	add.s32 	%r310, %r3021, %r309;
	mov.b32 	%f217, %r310;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3022, %r3022, %r309;
	mov.b32 	%r3021, %f783;
	setp.ne.s32 	%p37, %r3022, 0;
	setp.ne.s32 	%p38, %r3021, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_185;
$L__BB0_186:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r146, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_187;
$L__BB0_177:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r145, %f172;
	setp.lt.u32 	%p31, %r145, 1073741824;
	@%p31 bra 	$L__BB0_182;
// %bb.178:
	setp.lt.u32 	%p32, %r145, -2147483647;
	@%p32 bra 	$L__BB0_180;
// %bb.179:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_182;
$L__BB0_180:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_182;
// %bb.181:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_182:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_187:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r311, %f169;
	and.b32  	%r153, %r311, -2147483648;
	@%p41 bra 	$L__BB0_189;
// %bb.188:
	mov.b32 	%r312, %f784;
	or.b32  	%r313, %r153, %r312;
	mov.b32 	%f784, %r313;
$L__BB0_189:                            // %__nv_fmodf.exit
	shl.b32 	%r156, %r291, 1;
	and.b32  	%r157, %r156, 2;
	mul.lo.s32 	%r328, %r157, %r144;
	cvt.rn.f32.s32 	%f259, %r328;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r329, %r9, 8388607;
	or.b32  	%r2971, %r329, 1065353216;
	mov.b32 	%f733, %r2971;
	add.s32 	%r330, %r9, -1073741824;
	and.b32  	%r2972, %r330, -8388608;
	setp.eq.s32 	%p56, %r2972, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1988.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r2972, 192937984;
	add.s32 	%r332, %r2971, %r331;
	mov.b32 	%f271, %r332;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2972, %r2972, %r331;
	mov.b32 	%r2971, %f733;
	setp.ne.s32 	%p57, %r2972, 0;
	setp.ne.s32 	%p58, %r2971, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1990
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i1967
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1971
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1974
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1993
	or.b32  	%r158, %r157, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r333, %f186;
	and.b32  	%r334, %r333, -2147483648;
	mov.b32 	%r335, %f734;
	or.b32  	%r336, %r334, %r335;
	mov.b32 	%f734, %r336;
$L__BB0_27:                             // %__nv_fmodf.exit1994
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r158, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L531
	mul.lo.s32 	%r345, %r158, %r144;
	mul.hi.u32 	%r346, %r345, -1431655765;
	shr.u32 	%r347, %r346, 4;
	mul.lo.s32 	%r348, %r347, 24;
	sub.s32 	%r349, %r345, %r348;
	cvt.rn.f32.s32 	%f311, %r349;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r350, %r17, 8388607;
	or.b32  	%r2973, %r350, 1065353216;
	mov.b32 	%f737, %r2973;
	add.s32 	%r351, %r17, -1073741824;
	and.b32  	%r2974, %r351, -8388608;
	setp.eq.s32 	%p77, %r2974, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2019.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r352, %r2974, 192937984;
	add.s32 	%r353, %r2973, %r352;
	mov.b32 	%f323, %r353;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2974, %r2974, %r352;
	mov.b32 	%r2973, %f737;
	setp.ne.s32 	%p78, %r2974, 0;
	setp.ne.s32 	%p79, %r2973, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2021
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i1998
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2002
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2005
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2024
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r354, %f18;
	and.b32  	%r355, %r354, -2147483648;
	mov.b32 	%r356, %f738;
	or.b32  	%r357, %r355, %r356;
	mov.b32 	%f738, %r357;
$L__BB0_42:                             // %__nv_fmodf.exit2025
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r358, %f333;
	and.b32  	%r359, %r358, -2147483648;
	or.b32  	%r360, %r359, 1056964608;
	mov.b32 	%f334, %r360;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r361, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r362, %r361, 1;
	setp.eq.b32 	%p85, %r362, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r363, %r361, 2;
	setp.eq.s32 	%p86, %r363, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r364, %r361, 1;
	and.b32  	%r365, %r364, 2;
	setp.eq.s32 	%p87, %r365, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L565
	and.b32  	%r26, %r144, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L603
	mul.lo.s32 	%r372, %r157, %r26;
	cvt.u16.u32 	%rs9, %r372;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r373, %r28, 8388607;
	or.b32  	%r2975, %r373, 1065353216;
	mov.b32 	%f743, %r2975;
	add.s32 	%r374, %r28, -1073741824;
	and.b32  	%r2976, %r374, -8388608;
	setp.eq.s32 	%p98, %r2976, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2050.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r375, %r2976, 192937984;
	add.s32 	%r376, %r2975, %r375;
	mov.b32 	%f376, %r376;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2976, %r2976, %r375;
	mov.b32 	%r2975, %f743;
	setp.ne.s32 	%p99, %r2976, 0;
	setp.ne.s32 	%p100, %r2975, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2052
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2029
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2033
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2036
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2055
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r377, %f39;
	and.b32  	%r378, %r377, -2147483648;
	mov.b32 	%r379, %f744;
	or.b32  	%r380, %r378, %r379;
	mov.b32 	%f744, %r380;
$L__BB0_58:                             // %__nv_fmodf.exit2056
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r381, %f386;
	and.b32  	%r382, %r381, -2147483648;
	or.b32  	%r383, %r382, 1056964608;
	mov.b32 	%f387, %r383;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r384, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r385, %r384, 1;
	setp.eq.b32 	%p106, %r385, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r386, %r384, 2;
	setp.eq.s32 	%p107, %r386, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r387, %r384, 1;
	and.b32  	%r388, %r387, 2;
	setp.eq.s32 	%p108, %r388, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L637
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L645
	mul.lo.s32 	%r389, %r158, %r26;
	mul.hi.u32 	%r390, %r389, -1431655765;
	shr.u32 	%r391, %r390, 1;
	mul.lo.s32 	%r392, %r391, 3;
	sub.s32 	%r393, %r389, %r392;
	cvt.rn.f32.s32 	%f417, %r393;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r394, %r36, 8388607;
	or.b32  	%r2977, %r394, 1065353216;
	mov.b32 	%f749, %r2977;
	add.s32 	%r395, %r36, -1073741824;
	and.b32  	%r2978, %r395, -8388608;
	setp.eq.s32 	%p121, %r2978, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2081.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r2978, 192937984;
	add.s32 	%r397, %r2977, %r396;
	mov.b32 	%f429, %r397;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2978, %r2978, %r396;
	mov.b32 	%r2977, %f749;
	setp.ne.s32 	%p122, %r2978, 0;
	setp.ne.s32 	%p123, %r2977, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2083
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2060
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2064
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2067
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2086
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r398, %f60;
	and.b32  	%r399, %r398, -2147483648;
	mov.b32 	%r400, %f750;
	or.b32  	%r401, %r399, %r400;
	mov.b32 	%f750, %r401;
$L__BB0_74:                             // %__nv_fmodf.exit2087
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r402, %f439;
	and.b32  	%r403, %r402, -2147483648;
	or.b32  	%r404, %r403, 1056964608;
	mov.b32 	%f440, %r404;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r405, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r406, %r405, 1;
	setp.eq.b32 	%p129, %r406, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r407, %r405, 2;
	setp.eq.s32 	%p130, %r407, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r408, %r405, 1;
	and.b32  	%r409, %r408, 2;
	setp.eq.s32 	%p131, %r409, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L679
	and.b32  	%r43, %r291, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L688
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L690
	@%p29 bra 	$L__BB0_197;
// %bb.78:
	@%p316 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_79;
$L__BB0_193:
	mov.b32 	%r160, %f788;
	and.b32  	%r416, %r160, 8388607;
	or.b32  	%r3023, %r416, 1065353216;
	mov.b32 	%f787, %r3023;
	add.s32 	%r417, %r160, -1073741824;
	and.b32  	%r3024, %r417, -8388608;
	setp.eq.s32 	%p142, %r3024, 0;
	@%p142 bra 	$L__BB0_196;
// %bb.194:                             // %__nv_fmaf_rn.exit4.i.i.i2112.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_195:                            // %__nv_fmaf_rn.exit4.i.i.i2112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r418, %r3024, 192937984;
	add.s32 	%r419, %r3023, %r418;
	mov.b32 	%f479, %r419;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3024, %r3024, %r418;
	mov.b32 	%r3023, %f787;
	setp.ne.s32 	%p143, %r3024, 0;
	setp.ne.s32 	%p144, %r3023, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_195;
$L__BB0_196:                            // %__internal_fmodf_slowpath_mod.exit.i.i2114
	setp.gt.u32 	%p146, %r160, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_197;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2091
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r159, %f189;
	setp.lt.u32 	%p137, %r159, 1073741824;
	@%p137 bra 	$L__BB0_192;
// %bb.80:
	setp.lt.u32 	%p138, %r159, -2147483647;
	@%p138 bra 	$L__BB0_190;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_192;
$L__BB0_190:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_192;
// %bb.191:                             // %__nv_fmaf_rn.exit.i.i.i2095
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_192:                            // %__internal_fmodf_fastpath_quot.exit.i.i2098
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_197:                            // %__internal_fmodf_kernel.exit.i2117
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_199;
// %bb.198:
	mov.b32 	%r420, %f788;
	or.b32  	%r421, %r153, %r420;
	mov.b32 	%f788, %r421;
$L__BB0_199:                            // %__nv_fmodf.exit2118
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r436, %r47, 8388607;
	or.b32  	%r2979, %r436, 1065353216;
	mov.b32 	%f759, %r2979;
	add.s32 	%r437, %r47, -1073741824;
	and.b32  	%r2980, %r437, -8388608;
	setp.eq.s32 	%p162, %r2980, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2143.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r438, %r2980, 192937984;
	add.s32 	%r439, %r2979, %r438;
	mov.b32 	%f532, %r439;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2980, %r2980, %r438;
	mov.b32 	%r2979, %f759;
	setp.ne.s32 	%p163, %r2980, 0;
	setp.ne.s32 	%p164, %r2979, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2145
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2122
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2126
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2129
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2148
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r440, %f203;
	and.b32  	%r441, %r440, -2147483648;
	mov.b32 	%r442, %f760;
	or.b32  	%r443, %r441, %r442;
	mov.b32 	%f760, %r443;
$L__BB0_95:                             // %__nv_fmodf.exit2149
	cvt.rn.f32.s32 	%f572, %r144;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r452, %r55, 8388607;
	or.b32  	%r2981, %r452, 1065353216;
	mov.b32 	%f763, %r2981;
	add.s32 	%r453, %r55, -1073741824;
	and.b32  	%r2982, %r453, -8388608;
	setp.eq.s32 	%p182, %r2982, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2174.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r454, %r2982, 192937984;
	add.s32 	%r455, %r2981, %r454;
	mov.b32 	%f584, %r455;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2982, %r2982, %r454;
	mov.b32 	%r2981, %f763;
	setp.ne.s32 	%p183, %r2982, 0;
	setp.ne.s32 	%p184, %r2981, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2176
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2153
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2157
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2160
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2179
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r456, %f104;
	and.b32  	%r457, %r456, -2147483648;
	mov.b32 	%r458, %f764;
	or.b32  	%r459, %r457, %r458;
	mov.b32 	%f764, %r459;
$L__BB0_109:                            // %__nv_fmodf.exit2180
	and.b32  	%r65, %r291, 1;
	shr.u32 	%r66, %r291, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L895
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r474, %r68, 8388607;
	or.b32  	%r2983, %r474, 1065353216;
	mov.b32 	%f767, %r2983;
	add.s32 	%r475, %r68, -1073741824;
	and.b32  	%r2984, %r475, -8388608;
	setp.eq.s32 	%p203, %r2984, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2205.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r476, %r2984, 192937984;
	add.s32 	%r477, %r2983, %r476;
	mov.b32 	%f638, %r477;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2984, %r2984, %r476;
	mov.b32 	%r2983, %f767;
	setp.ne.s32 	%p204, %r2984, 0;
	setp.ne.s32 	%p205, %r2983, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2207
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2184
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2188
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2191
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2210
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r478, %f121;
	and.b32  	%r479, %r478, -2147483648;
	mov.b32 	%r480, %f768;
	or.b32  	%r481, %r479, %r480;
	mov.b32 	%f768, %r481;
$L__BB0_124:                            // %__nv_fmodf.exit2211
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r482, %f648;
	and.b32  	%r483, %r482, -2147483648;
	or.b32  	%r484, %r483, 1056964608;
	mov.b32 	%f649, %r484;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r485, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r486, %r485, 1;
	setp.eq.b32 	%p211, %r486, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r487, %r485, 2;
	setp.eq.s32 	%p212, %r487, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r488, %r485, 1;
	and.b32  	%r489, %r488, 2;
	setp.eq.s32 	%p213, %r489, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L934
	and.b32  	%r64, %r144, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L937
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r490, %r76, 8388607;
	or.b32  	%r2985, %r490, 1065353216;
	mov.b32 	%f773, %r2985;
	add.s32 	%r491, %r76, -1073741824;
	and.b32  	%r2986, %r491, -8388608;
	setp.eq.s32 	%p224, %r2986, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2236.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r492, %r2986, 192937984;
	add.s32 	%r493, %r2985, %r492;
	mov.b32 	%f691, %r493;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2986, %r2986, %r492;
	mov.b32 	%r2985, %f773;
	setp.ne.s32 	%p225, %r2986, 0;
	setp.ne.s32 	%p226, %r2985, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2238
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2215
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2219
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2222
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2241
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r494, %f142;
	and.b32  	%r495, %r494, -2147483648;
	mov.b32 	%r496, %f774;
	or.b32  	%r497, %r495, %r496;
	mov.b32 	%f774, %r497;
$L__BB0_140:                            // %__nv_fmodf.exit2242
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r498, %f701;
	and.b32  	%r499, %r498, -2147483648;
	or.b32  	%r500, %r499, 1056964608;
	mov.b32 	%f702, %r500;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r501, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r502, %r501, 1;
	setp.eq.b32 	%p232, %r502, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r503, %r501, 2;
	setp.eq.s32 	%p233, %r503, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r504, %r501, 1;
	and.b32  	%r505, %r504, 2;
	setp.eq.s32 	%p234, %r505, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L971
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L980
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L982
	setp.gt.u32 	%p238, %r291, 15;
	mov.u32 	%r169, 999999999;
	@%p238 bra 	$L__BB0_201;
// %bb.144:                             // %L1012
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r513, %r291, 6, %r1;
	cvt.u16.u32 	%rs15, %r513;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r514, %rs20;
	and.b32  	%r515, %r514, 255;
	mul.wide.u32 	%rd21, %r515, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r516, [%rd22];
	shl.b32 	%r517, %r516, 16;
	cvt.s32.s16 	%r85, %r516;
	shr.s32 	%r86, %r516, 16;
	or.b32  	%r518, %r517, 65535;
	setp.lt.u32 	%p239, %r518, 589823;
	setp.lt.u32 	%p240, %r516, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_145;
$L__BB0_200:                            // %L1254
	mul.lo.s32 	%r522, %r86, 290;
	mad.lo.s32 	%r169, %r85, 33, %r522;
$L__BB0_201:                            // %pass533
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r320, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r321, %r320, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r428, %f489;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%r337, %f282;
	and.b32  	%r429, %r428, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r322;
	and.b32  	%r338, %r337, -2147483648;
	or.b32  	%r430, %r429, 1056964608;
	mov.b32 	%r444, %f542;
	mov.b32 	%r466, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r339, %r338, 1056964608;
	mov.b32 	%f490, %r430;
	and.b32  	%r445, %r444, -2147483648;
	and.b32  	%r467, %r466, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r339;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r446, %r445, 1056964608;
	or.b32  	%r468, %r467, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r446;
	mov.b32 	%f596, %r468;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r323, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r324, %r323, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r431, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r324, 1;
	cvt.rzi.s32.f32 	%r340, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r432, %r431, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r325, %r323, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r341, %r340, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r432, 1;
	cvt.rzi.s32.f32 	%r447, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r469, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r325, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r326, %r323, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r341, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r433, %r431, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r448, %r447, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r470, %r469, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r327, %r326, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r342, %r340, 2;
	setp.eq.s32 	%p151, %r433, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r434, %r431, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r448, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r470, 1;
	setp.eq.s32 	%p46, %r327, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r342, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r343, %r340, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r435, %r434, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r449, %r447, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r471, %r469, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r344, %r343, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r435, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r449, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r450, %r447, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r471, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r472, %r469, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r344, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r451, %r450, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r473, %r472, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r316, %f258;
	mov.b32 	%r319, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r451, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r473, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r315, %r319, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r424, %f520;
	mov.b32 	%r427, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r316, %r315;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r316;
	// end inline asm
	mov.b32 	%r367, %f17;
	mov.b32 	%r368, %f37;
	mov.b32 	%r370, %f16;
	mov.b32 	%r371, %f38;
	mov.b32 	%r411, %f83;
	mov.b32 	%r412, %f85;
	mov.b32 	%r414, %f755;
	mov.b32 	%r415, %f757;
	xor.b32  	%r423, %r427, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r423;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r424;
	// end inline asm
	mov.b32 	%r462, %f625;
	mov.b32 	%r461, %f103;
	mov.b32 	%r465, %f622;
	mov.b32 	%r464, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r460, %r462, %r461;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r463, %r465, %r464;
	// end inline asm
	mov.b32 	%r507, %f165;
	mov.b32 	%r508, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r506, %r508, %r507;
	// end inline asm
	mov.b32 	%r510, %f779;
	mov.b32 	%r511, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r509, %r511, %r510;
	// end inline asm
	mul.lo.s32 	%r524, %r143, 24;
	shl.b32 	%r525, %r1, 1;
	and.b32  	%r526, %r525, 2;
	shr.u32 	%r527, %r291, 3;
	bfe.u32 	%r528, %r291, 3, 1;
	or.b32  	%r529, %r526, %r528;
	and.b32  	%r530, %r527, 2;
	or.b32  	%r170, %r64, %r530;
	cvt.u16.u32 	%rs23, %r170;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r531, %rs27;
	and.b32  	%r532, %r531, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r533, %rs28, 8;
	add.s32 	%r534, %r524, %r4;
	or.b32  	%r535, %r534, %r529;
	add.s32 	%r536, %r535, %r533;
	mul.wide.u32 	%rd28, %r536, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r171, [%rd29];
	or.b32  	%r537, %r529, 4;
	cvt.u64.u32 	%rd30, %r533;
	cvt.u64.u32 	%rd31, %r534;
	cvt.u64.u32 	%rd32, %r529;
	add.s64 	%rd33, %rd31, %rd32;
	add.s64 	%rd34, %rd33, %rd30;
	shl.b64 	%rd35, %rd34, 2;
	add.s64 	%rd36, %rd2, %rd35;
	ld.global.u32 	%r172, [%rd36+16];
	cvt.u64.u32 	%rd37, %r524;
	cvt.u64.u32 	%rd38, %r4;
	add.s64 	%rd39, %rd38, %rd37;
	add.s64 	%rd40, %rd39, %rd32;
	add.s64 	%rd41, %rd40, %rd30;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.u32 	%r173, [%rd43+384];
	cvt.u64.u32 	%rd44, %r537;
	add.s64 	%rd45, %rd39, %rd44;
	add.s64 	%rd46, %rd45, %rd30;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.u32 	%r174, [%rd48+384];
	shl.b32 	%r538, %r282, 14;
	shl.b32 	%r539, %r286, 5;
	add.s32 	%r175, %r539, %r538;
	shl.b32 	%r540, %r291, 2;
	shl.b32 	%r541, %r1, 2;
	or.b32  	%r176, %r541, %r527;
	and.b32  	%r177, %r540, 28;
	shl.b32 	%r178, %r3, 5;
	add.s32 	%r542, %r541, 24;
	or.b32  	%r179, %r542, %r527;
	and.b32  	%r180, %r291, 4;
	shl.b32 	%r543, %r291, 4;
	and.b32  	%r544, %r156, 8;
	or.b32  	%r545, %r544, %r543;
	bfe.u32 	%r546, %r545, 3, 3;
	mul.lo.s32 	%r181, %r546, 260;
	cvt.u16.u32 	%rs29, %r291;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r547, %rs34;
	and.b32  	%r182, %r547, 255;
	add.s32 	%r548, %r1, 6;
	shr.u32 	%r549, %r548, 3;
	add.s32 	%r550, %r2, 192;
	and.b32  	%r551, %r550, 224;
	mad.lo.s32 	%r183, %r549, 260, %r551;
	add.s32 	%r552, %r1, 12;
	shr.u32 	%r553, %r552, 3;
	add.s32 	%r554, %r2, 128;
	and.b32  	%r555, %r554, 224;
	mad.lo.s32 	%r184, %r553, 260, %r555;
	add.s32 	%r556, %r1, 18;
	shr.u32 	%r557, %r556, 3;
	add.s32 	%r558, %r2, 64;
	and.b32  	%r559, %r558, 224;
	mad.lo.s32 	%r185, %r557, 260, %r559;
	or.b32  	%r186, %r2, 780;
	add.s32 	%r560, %r1, 30;
	shr.u32 	%r561, %r560, 3;
	mad.lo.s32 	%r187, %r561, 260, %r551;
	add.s32 	%r562, %r1, 36;
	shr.u32 	%r563, %r562, 3;
	mad.lo.s32 	%r188, %r563, 260, %r555;
	add.s32 	%r564, %r1, 42;
	shr.u32 	%r565, %r564, 3;
	mad.lo.s32 	%r189, %r565, 260, %r559;
	or.b32  	%r190, %r2, 1560;
	add.s32 	%r566, %r1, 54;
	shr.u32 	%r567, %r566, 3;
	mad.lo.s32 	%r191, %r567, 260, %r551;
	add.s32 	%r568, %r1, 60;
	bfe.u32 	%r569, %r568, 3, 3;
	mad.lo.s32 	%r192, %r569, 260, %r555;
	shr.u32 	%r570, %r1, 1;
	cvt.u16.u32 	%rs35, %r570;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r571, %rs40;
	and.b32  	%r193, %r571, 255;
	mul.lo.s32 	%r572, %r143, 870;
	mad.lo.s32 	%r573, %r529, 33, %r572;
	mad.lo.s32 	%r194, %r532, 290, %r573;
	add.s32 	%r195, %r194, 132;
	setp.lt.u32 	%p242, %r291, 4;
	setp.eq.s32 	%p243, %r144, 1;
	setp.eq.s32 	%p244, %r144, 4;
	setp.eq.s32 	%p245, %r144, 5;
	shr.u32 	%r574, %r1, 2;
	mul.lo.s32 	%r575, %r66, 784;
	and.b32  	%r576, %r1, 1;
	neg.s32 	%r577, %r576;
	and.b32  	%r578, %r577, 392;
	and.b32  	%r579, %r156, 6;
	bfe.s32 	%r580, %r1, 1, 1;
	and.b32  	%r581, %r580, 196;
	bfe.s32 	%r582, %r291, 3, 1;
	and.b32  	%r583, %r582, 1576;
	mad.lo.s32 	%r584, %r574, 98, %r575;
	add.s32 	%r585, %r584, %r579;
	or.b32  	%r586, %r585, %r64;
	add.s32 	%r587, %r586, %r578;
	add.s32 	%r588, %r587, %r581;
	add.s32 	%r196, %r588, %r583;
	add.s32 	%r197, %r196, 8;
	mul.lo.s32 	%r589, %r284, 786432;
	mad.lo.s32 	%r590, %r288, 192, %r589;
	and.b32  	%r198, %r291, 7;
	cvt.u16.u32 	%rs41, %r176;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r591, %rs47;
	and.b32  	%r199, %r591, 248;
	cvt.s64.s32 	%rd7, %r590;
	add.s32 	%r592, %r194, %r193;
	mul.wide.u32 	%rd49, %r592, 4;
	mov.u64 	%rd50, shmem;
	add.s64 	%rd8, %rd50, %rd49;
	add.s32 	%r593, %r195, %r193;
	mul.wide.u32 	%rd51, %r593, 4;
	add.s64 	%rd9, %rd50, %rd51;
	cvt.u64.u32 	%rd52, %r194;
	cvt.u64.u16 	%rd53, %rs40;
	and.b64  	%rd54, %rd53, 255;
	add.s64 	%rd55, %rd52, %rd54;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd10, %rd50, %rd56;
	cvt.u64.u32 	%rd57, %r195;
	add.s64 	%rd58, %rd57, %rd54;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd11, %rd50, %rd59;
	or.pred  	%p246, %p242, %p243;
	and.b32  	%r594, %r291, 24;
	setp.eq.s32 	%p247, %r594, 8;
	or.pred  	%p248, %p246, %p247;
	or.pred  	%p249, %p248, %p244;
	setp.eq.s32 	%p250, %r594, 24;
	or.pred  	%p251, %p245, %p250;
	selp.b32 	%r200, 1145324612, -286331154, %p248;
	or.pred  	%p1, %p249, %p251;
	selp.b32 	%r201, 1145324612, -286331154, %p246;
	add.s32 	%r595, %r144, -1;
	setp.lt.u32 	%p252, %r595, 3;
	or.pred  	%p2, %p242, %p252;
	setp.eq.s32 	%p253, %r594, 16;
	or.pred  	%p3, %p253, %p250;
	selp.b32 	%r202, 1145324612, -286331154, %p253;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 5;
	mov.u16 	%rs1, 29;
	selp.b32 	%r252, %r201, %r202, %p2;
	or.pred  	%p284, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_202;
$L__BB0_173:                            // %L24444
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r142, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p315, %r88, 4032;
	mov.u32 	%r88, %r142;
	@%p315 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_174;
$L__BB0_202:                            // %L1937
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r596, %r88, %r282;
	setp.lt.s32 	%p254, %r596, %r283;
	@%p254 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_174;
$L__BB0_203:                            // %oksrem906
                                        //   in Loop: Header=BB0_202 Depth=1
	setp.eq.s32 	%p255, %r180, 0;
	mul.hi.u32 	%r693, %r88, -1431655765;
	shr.u32 	%r694, %r693, 5;
	mul.lo.s32 	%r203, %r694, 48;
	add.s32 	%r695, %r203, %r176;
	cvt.u16.u32 	%rs48, %r695;
	shr.s16 	%rs49, %rs48, 15;
	shr.u16 	%rs50, %rs49, 4;
	add.s16 	%rs51, %rs48, %rs50;
	and.b16  	%rs52, %rs51, -4096;
	sub.s16 	%rs53, %rs48, %rs52;
	mul.wide.s16 	%r696, %rs53, 16384;
	or.b32  	%r697, %r696, %r177;
	or.b32  	%r698, %r697, %r178;
	add.s32 	%r699, %r175, %r698;
	shr.s32 	%r700, %r699, 31;
	shr.u32 	%r701, %r700, 6;
	add.s32 	%r702, %r699, %r701;
	shr.s32 	%r703, %r702, 26;
	setp.lt.s32 	%p256, %r699, 0;
	and.b32  	%r704, %r702, -67108864;
	setp.ne.s32 	%p257, %r704, %r699;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r705, 1, 0, %p258;
	sub.s32 	%r706, %r705, %r703;
	shl.b32 	%r707, %r706, 26;
	add.s32 	%r708, %r707, %r699;
	mul.wide.s32 	%rd60, %r708, 4;
	add.s64 	%rd61, %rd3, %rd60;
	ld.global.v4.u32 	{%r709, %r710, %r711, %r712}, [%rd61];
	add.s32 	%r713, %r203, %r179;
	cvt.u16.u32 	%rs54, %r713;
	shr.s16 	%rs55, %rs54, 15;
	shr.u16 	%rs56, %rs55, 4;
	add.s16 	%rs57, %rs54, %rs56;
	and.b16  	%rs58, %rs57, -4096;
	sub.s16 	%rs59, %rs54, %rs58;
	mul.wide.s16 	%r714, %rs59, 16384;
	or.b32  	%r715, %r714, %r177;
	or.b32  	%r716, %r715, %r178;
	add.s32 	%r717, %r175, %r716;
	shr.s32 	%r718, %r717, 31;
	shr.u32 	%r719, %r718, 6;
	add.s32 	%r720, %r717, %r719;
	shr.s32 	%r721, %r720, 26;
	setp.lt.s32 	%p259, %r717, 0;
	and.b32  	%r722, %r720, -67108864;
	setp.ne.s32 	%p260, %r722, %r717;
	and.pred  	%p261, %p259, %p260;
	selp.u32 	%r723, 1, 0, %p261;
	sub.s32 	%r724, %r723, %r721;
	shl.b32 	%r725, %r724, 26;
	add.s32 	%r726, %r725, %r717;
	mul.wide.s32 	%rd62, %r726, 4;
	add.s64 	%rd63, %rd3, %rd62;
	ld.global.v4.u32 	{%r727, %r728, %r729, %r730}, [%rd63];
	selp.b32 	%r731, %r711, %r709, %p255;
	shfl.sync.bfly.b32	%r732, %r731, 4, 31, -1;
	selp.b32 	%r599, %r709, %r732, %p255;
	selp.b32 	%r604, %r732, %r711, %p255;
	selp.b32 	%r733, %r712, %r710, %p255;
	shfl.sync.bfly.b32	%r734, %r733, 4, 31, -1;
	selp.b32 	%r607, %r710, %r734, %p255;
	selp.b32 	%r612, %r734, %r712, %p255;
	selp.b32 	%r735, %r729, %r727, %p255;
	shfl.sync.bfly.b32	%r736, %r735, 4, 31, -1;
	selp.b32 	%r615, %r727, %r736, %p255;
	selp.b32 	%r620, %r736, %r729, %p255;
	selp.b32 	%r737, %r730, %r728, %p255;
	shfl.sync.bfly.b32	%r738, %r737, 4, 31, -1;
	selp.b32 	%r623, %r728, %r738, %p255;
	selp.b32 	%r628, %r738, %r730, %p255;
	shl.b32 	%r600, %r604, 4;
	mov.u32 	%r598, 252645135;
	// begin inline asm
	lop3.b32 %r630, %r598, %r599, %r600, 202;
	// end inline asm
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r646, %r598, %r603, %r604, 202;
	// end inline asm
	shl.b32 	%r608, %r612, 4;
	// begin inline asm
	lop3.b32 %r638, %r598, %r607, %r608, 202;
	// end inline asm
	shr.u32 	%r611, %r607, 4;
	// begin inline asm
	lop3.b32 %r654, %r598, %r611, %r612, 202;
	// end inline asm
	shl.b32 	%r616, %r620, 4;
	// begin inline asm
	lop3.b32 %r631, %r598, %r615, %r616, 202;
	// end inline asm
	shr.u32 	%r619, %r615, 4;
	// begin inline asm
	lop3.b32 %r647, %r598, %r619, %r620, 202;
	// end inline asm
	shl.b32 	%r624, %r628, 4;
	// begin inline asm
	lop3.b32 %r639, %r598, %r623, %r624, 202;
	// end inline asm
	shr.u32 	%r627, %r623, 4;
	// begin inline asm
	lop3.b32 %r655, %r598, %r627, %r628, 202;
	// end inline asm
	mov.u32 	%r632, 25152;
	// begin inline asm
	prmt.b32 %r662, %r630, %r631, %r632;
	// end inline asm
	mov.u32 	%r636, 29521;
	// begin inline asm
	prmt.b32 %r678, %r630, %r631, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r638, %r639, %r632;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r638, %r639, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r646, %r647, %r632;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r646, %r647, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r654, %r655, %r632;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r654, %r655, %r636;
	// end inline asm
	mov.u32 	%r664, 21520;
	// begin inline asm
	prmt.b32 %r661, %r662, %r663, %r664;
	// end inline asm
	mov.u32 	%r668, 30258;
	// begin inline asm
	prmt.b32 %r665, %r662, %r663, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r669, %r670, %r671, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r670, %r671, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r677, %r678, %r679, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r678, %r679, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r685, %r686, %r687, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r686, %r687, %r668;
	// end inline asm
	mul.hi.s16 	%rs60, %rs48, 10923;
	shr.u16 	%rs61, %rs60, 15;
	shr.s16 	%rs62, %rs60, 2;
	add.s16 	%rs63, %rs62, %rs61;
	mul.lo.s16 	%rs64, %rs63, 24;
	sub.s16 	%rs65, %rs48, %rs64;
	cvt.s32.s16 	%r739, %rs65;
	add.s32 	%r740, %r181, %r739;
	mul.wide.s32 	%rd64, %r740, 4;
	add.s64 	%rd66, %rd50, %rd64;
	st.shared.u32 	[%rd66], %r661;
	add.s32 	%r741, %r740, 128;
	mul.wide.u32 	%rd67, %r741, 4;
	add.s64 	%rd68, %rd50, %rd67;
	st.shared.u32 	[%rd68], %r669;
	add.s32 	%r742, %r740, 64;
	mul.wide.u32 	%rd69, %r742, 4;
	add.s64 	%rd70, %rd50, %rd69;
	st.shared.u32 	[%rd70], %r665;
	add.s32 	%r743, %r740, 192;
	mul.wide.u32 	%rd71, %r743, 4;
	add.s64 	%rd72, %rd50, %rd71;
	st.shared.u32 	[%rd72], %r673;
	add.s32 	%r744, %r740, 32;
	mul.wide.u32 	%rd73, %r744, 4;
	add.s64 	%rd74, %rd50, %rd73;
	st.shared.u32 	[%rd74], %r677;
	add.s32 	%r745, %r740, 160;
	mul.wide.u32 	%rd75, %r745, 4;
	add.s64 	%rd76, %rd50, %rd75;
	st.shared.u32 	[%rd76], %r685;
	add.s32 	%r746, %r740, 96;
	mul.wide.u32 	%rd77, %r746, 4;
	add.s64 	%rd78, %rd50, %rd77;
	st.shared.u32 	[%rd78], %r681;
	add.s32 	%r747, %r740, 224;
	mul.wide.u32 	%rd79, %r747, 4;
	add.s64 	%rd80, %rd50, %rd79;
	st.shared.u32 	[%rd80], %r689;
	bar.sync 	0;
	add.s32 	%r748, %r203, %r182;
	cvt.u16.u32 	%rs66, %r748;
	mul.hi.s16 	%rs67, %rs66, 10923;
	shr.u16 	%rs68, %rs67, 15;
	shr.s16 	%rs69, %rs67, 2;
	add.s16 	%rs70, %rs69, %rs68;
	mul.lo.s16 	%rs71, %rs70, 24;
	sub.s16 	%rs72, %rs66, %rs71;
	cvt.s32.s16 	%r204, %rs72;
	add.s32 	%r749, %r2, %r204;
	mul.wide.s32 	%rd81, %r749, 4;
	add.s64 	%rd82, %rd50, %rd81;
	ld.shared.u32 	%r205, [%rd82];
	add.s32 	%r750, %r183, %r204;
	mul.wide.s32 	%rd83, %r750, 4;
	add.s64 	%rd84, %rd50, %rd83;
	ld.shared.u32 	%r206, [%rd84];
	add.s32 	%r751, %r184, %r204;
	mul.wide.u32 	%rd85, %r751, 4;
	add.s64 	%rd86, %rd50, %rd85;
	ld.shared.u32 	%r207, [%rd86];
	add.s32 	%r752, %r185, %r204;
	mul.wide.u32 	%rd87, %r752, 4;
	add.s64 	%rd88, %rd50, %rd87;
	ld.shared.u32 	%r208, [%rd88];
	add.s32 	%r753, %r186, %r204;
	mul.wide.u32 	%rd89, %r753, 4;
	add.s64 	%rd90, %rd50, %rd89;
	ld.shared.u32 	%r209, [%rd90];
	add.s32 	%r754, %r187, %r204;
	mul.wide.u32 	%rd91, %r754, 4;
	add.s64 	%rd92, %rd50, %rd91;
	ld.shared.u32 	%r210, [%rd92];
	add.s32 	%r755, %r188, %r204;
	mul.wide.u32 	%rd93, %r755, 4;
	add.s64 	%rd94, %rd50, %rd93;
	ld.shared.u32 	%r211, [%rd94];
	add.s32 	%r756, %r189, %r204;
	mul.wide.u32 	%rd95, %r756, 4;
	add.s64 	%rd96, %rd50, %rd95;
	ld.shared.u32 	%r212, [%rd96];
	add.s32 	%r757, %r190, %r204;
	mul.wide.u32 	%rd97, %r757, 4;
	add.s64 	%rd98, %rd50, %rd97;
	ld.shared.u32 	%r213, [%rd98];
	add.s32 	%r758, %r191, %r204;
	mul.wide.u32 	%rd99, %r758, 4;
	add.s64 	%rd100, %rd50, %rd99;
	ld.shared.u32 	%r214, [%rd100];
	add.s32 	%r759, %r192, %r204;
	mul.wide.s32 	%rd101, %r759, 4;
	add.s64 	%rd102, %rd50, %rd101;
	ld.shared.u32 	%r215, [%rd102];
	bar.sync 	0;
	shfl.sync.idx.b32	%r216, %r169, 0, 31, -1;
	shfl.sync.idx.b32	%r217, %r169, 1, 31, -1;
	shfl.sync.idx.b32	%r218, %r169, 2, 31, -1;
	shfl.sync.idx.b32	%r219, %r169, 3, 31, -1;
	shfl.sync.idx.b32	%r220, %r169, 4, 31, -1;
	shfl.sync.idx.b32	%r221, %r169, 5, 31, -1;
	shfl.sync.idx.b32	%r222, %r169, 6, 31, -1;
	shfl.sync.idx.b32	%r223, %r169, 7, 31, -1;
	shfl.sync.idx.b32	%r224, %r169, 8, 31, -1;
	shfl.sync.idx.b32	%r225, %r169, 9, 31, -1;
	shfl.sync.idx.b32	%r226, %r169, 10, 31, -1;
	shfl.sync.idx.b32	%r227, %r169, 11, 31, -1;
	shfl.sync.idx.b32	%r228, %r169, 12, 31, -1;
	shfl.sync.idx.b32	%r229, %r169, 13, 31, -1;
	shfl.sync.idx.b32	%r230, %r169, 14, 31, -1;
	shfl.sync.idx.b32	%r231, %r169, 15, 31, -1;
	setp.eq.s32 	%p262, %r216, 999999999;
	@%p262 bra 	$L__BB0_146;
// %bb.204:                             // %oksrem2312
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r760, %r216, %r204;
	mul.wide.s32 	%rd103, %r760, 4;
	add.s64 	%rd105, %rd50, %rd103;
	st.shared.u32 	[%rd105], %r205;
	setp.eq.s32 	%p263, %r217, 999999999;
	@%p263 bra 	$L__BB0_147;
// %bb.205:                             // %oksrem2380
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r761, %r217, %r204;
	mul.wide.s32 	%rd106, %r761, 4;
	add.s64 	%rd108, %rd50, %rd106;
	st.shared.u32 	[%rd108], %r206;
	setp.eq.s32 	%p264, %r218, 999999999;
	@%p264 bra 	$L__BB0_148;
// %bb.206:                             // %oksrem2448
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r762, %r218, %r204;
	mul.wide.s32 	%rd109, %r762, 4;
	add.s64 	%rd111, %rd50, %rd109;
	st.shared.u32 	[%rd111], %r207;
	setp.eq.s32 	%p265, %r219, 999999999;
	@%p265 bra 	$L__BB0_149;
// %bb.207:                             // %oksrem2516
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r763, %r219, %r204;
	mul.wide.s32 	%rd112, %r763, 4;
	add.s64 	%rd114, %rd50, %rd112;
	st.shared.u32 	[%rd114], %r208;
	setp.eq.s32 	%p266, %r220, 999999999;
	@%p266 bra 	$L__BB0_150;
// %bb.208:                             // %oksrem2584
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r764, %r220, %r204;
	mul.wide.s32 	%rd115, %r764, 4;
	add.s64 	%rd117, %rd50, %rd115;
	st.shared.u32 	[%rd117], %r209;
	setp.eq.s32 	%p267, %r221, 999999999;
	@%p267 bra 	$L__BB0_151;
// %bb.209:                             // %oksrem2652
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r765, %r221, %r204;
	mul.wide.s32 	%rd118, %r765, 4;
	add.s64 	%rd120, %rd50, %rd118;
	st.shared.u32 	[%rd120], %r210;
	setp.eq.s32 	%p268, %r222, 999999999;
	@%p268 bra 	$L__BB0_152;
// %bb.210:                             // %oksrem2720
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r766, %r222, %r204;
	mul.wide.s32 	%rd121, %r766, 4;
	add.s64 	%rd123, %rd50, %rd121;
	st.shared.u32 	[%rd123], %r211;
	setp.eq.s32 	%p269, %r223, 999999999;
	@%p269 bra 	$L__BB0_153;
// %bb.211:                             // %oksrem2788
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r767, %r223, %r204;
	mul.wide.s32 	%rd124, %r767, 4;
	add.s64 	%rd126, %rd50, %rd124;
	st.shared.u32 	[%rd126], %r212;
	setp.eq.s32 	%p270, %r224, 999999999;
	@%p270 bra 	$L__BB0_154;
// %bb.212:                             // %oksrem2856
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r768, %r224, %r204;
	mul.wide.s32 	%rd127, %r768, 4;
	add.s64 	%rd129, %rd50, %rd127;
	st.shared.u32 	[%rd129], %r213;
	setp.eq.s32 	%p271, %r225, 999999999;
	@%p271 bra 	$L__BB0_155;
// %bb.213:                             // %oksrem2924
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r769, %r225, %r204;
	mul.wide.s32 	%rd130, %r769, 4;
	add.s64 	%rd132, %rd50, %rd130;
	st.shared.u32 	[%rd132], %r214;
	setp.eq.s32 	%p272, %r226, 999999999;
	@%p272 bra 	$L__BB0_156;
// %bb.214:                             // %oksrem2993
                                        //   in Loop: Header=BB0_202 Depth=1
	setp.gt.u32 	%p273, %r1, 3;
	selp.b32 	%r770, 0, %r215, %p273;
	add.s32 	%r771, %r226, %r204;
	mul.wide.s32 	%rd133, %r771, 4;
	add.s64 	%rd135, %rd50, %rd133;
	st.shared.u32 	[%rd135], %r770;
	setp.eq.s32 	%p274, %r227, 999999999;
	@%p274 bra 	$L__BB0_157;
// %bb.215:                             // %oksrem3061
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r772, %r227, %r204;
	mul.wide.s32 	%rd136, %r772, 4;
	add.s64 	%rd138, %rd50, %rd136;
	mov.u32 	%r773, 0;
	st.shared.u32 	[%rd138], %r773;
	setp.eq.s32 	%p275, %r228, 999999999;
	@%p275 bra 	$L__BB0_158;
// %bb.216:                             // %oksrem3128
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r774, %r228, %r204;
	mul.wide.s32 	%rd139, %r774, 4;
	add.s64 	%rd141, %rd50, %rd139;
	st.shared.u32 	[%rd141], %r773;
	setp.eq.s32 	%p276, %r229, 999999999;
	@%p276 bra 	$L__BB0_159;
// %bb.217:                             // %oksrem3195
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r776, %r229, %r204;
	mul.wide.s32 	%rd142, %r776, 4;
	add.s64 	%rd144, %rd50, %rd142;
	st.shared.u32 	[%rd144], %r773;
	setp.eq.s32 	%p277, %r230, 999999999;
	@%p277 bra 	$L__BB0_160;
// %bb.218:                             // %oksrem3262
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r778, %r230, %r204;
	mul.wide.s32 	%rd145, %r778, 4;
	add.s64 	%rd147, %rd50, %rd145;
	st.shared.u32 	[%rd147], %r773;
	setp.eq.s32 	%p278, %r231, 999999999;
	@%p278 bra 	$L__BB0_161;
// %bb.219:                             // %oksrem3329
                                        //   in Loop: Header=BB0_202 Depth=1
	setp.eq.s32 	%p279, %r170, 3;
	add.s32 	%r781, %r231, %r204;
	mul.wide.s32 	%rd148, %r781, 4;
	add.s64 	%rd150, %rd50, %rd148;
	st.shared.u32 	[%rd150], %r773;
	bar.sync 	0;
	mov.u32 	%r92, %r773;
	mov.u32 	%r93, %r773;
	mov.u32 	%r94, %r773;
	mov.u32 	%r95, %r773;
	mov.u32 	%r96, %r773;
	mov.u32 	%r97, %r773;
	mov.u32 	%r98, %r773;
	mov.u32 	%r99, %r773;
	mov.u32 	%r100, %r773;
	mov.u32 	%r101, %r773;
	mov.u32 	%r102, %r773;
	mov.u32 	%r103, %r773;
	mov.u32 	%r104, %r773;
	mov.u32 	%r105, %r773;
	mov.u32 	%r106, %r773;
	mov.u32 	%r107, %r773;
	@%p279 bra 	$L__BB0_162;
// %bb.220:                             // %oksrem3376
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r782, %r203, %r193;
	ld.shared.u32 	%r92, [%rd8];
	ld.shared.u32 	%r93, [%rd9];
	ld.shared.u32 	%r94, [%rd10+12];
	ld.shared.u32 	%r95, [%rd11+12];
	ld.shared.u32 	%r96, [%rd10+24];
	ld.shared.u32 	%r97, [%rd11+24];
	ld.shared.u32 	%r98, [%rd10+36];
	ld.shared.u32 	%r99, [%rd11+36];
	add.s32 	%r783, %r782, 12;
	mul.hi.u32 	%r784, %r783, -1431655765;
	shr.u32 	%r785, %r784, 4;
	mul.lo.s32 	%r786, %r785, 24;
	sub.s32 	%r787, %r783, %r786;
	add.s32 	%r788, %r194, %r787;
	mul.wide.u32 	%rd151, %r788, 4;
	add.s64 	%rd153, %rd50, %rd151;
	ld.shared.u32 	%r100, [%rd153];
	add.s32 	%r789, %r195, %r787;
	mul.wide.u32 	%rd154, %r789, 4;
	add.s64 	%rd155, %rd50, %rd154;
	ld.shared.u32 	%r101, [%rd155];
	ld.shared.u32 	%r102, [%rd10+60];
	ld.shared.u32 	%r103, [%rd11+60];
	ld.shared.u32 	%r104, [%rd10+72];
	ld.shared.u32 	%r105, [%rd11+72];
	ld.shared.u32 	%r106, [%rd10+84];
	ld.shared.u32 	%r107, [%rd11+84];
$L__BB0_162:                            // %L10647
                                        //   in Loop: Header=BB0_202 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r773;
	bra.uni 	$L__BB0_163;
$L__BB0_165:                            // %L17536
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p297, %r111, 24;
	@%p297 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_166;
$L__BB0_163:                            // %L10665
                                        //   Parent Loop BB0_202 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p280, %r111, 0;
	selp.b32 	%r1183, %r92, 0, %p280;
	setp.eq.s32 	%p281, %r111, 6;
	selp.b32 	%r1184, %r96, %r1183, %p281;
	setp.eq.s32 	%p282, %r111, 12;
	selp.b32 	%r1185, %r100, %r1184, %p282;
	setp.eq.s32 	%p283, %r111, 18;
	selp.b32 	%r1186, %r104, %r1185, %p283;
	selp.b32 	%r1187, %r93, 0, %p280;
	selp.b32 	%r1188, %r97, %r1187, %p281;
	selp.b32 	%r1189, %r101, %r1188, %p282;
	selp.b32 	%r1190, %r105, %r1189, %p283;
	selp.b32 	%r1191, %r94, 0, %p280;
	selp.b32 	%r1192, %r98, %r1191, %p281;
	selp.b32 	%r1193, %r102, %r1192, %p282;
	selp.b32 	%r1194, %r106, %r1193, %p283;
	selp.b32 	%r1195, %r95, 0, %p280;
	selp.b32 	%r1196, %r99, %r1195, %p281;
	selp.b32 	%r1197, %r103, %r1196, %p282;
	selp.b32 	%r1198, %r107, %r1197, %p283;
	mov.u16 	%rs110, 25600;
	// begin inline asm
	mov.b32 %r796, {%rs110, %rs110};
	// end inline asm
	mov.u16 	%rs112, 21504;
	// begin inline asm
	mov.b32 %r807, {%rs112, %rs112};
	// end inline asm
	xor.b32  	%r795, %r1186, -2004318072;
	mov.u32 	%r932, 983055;
	// begin inline asm
	lop3.b32 %r793, %r932, %r795, %r796, 202;
	// end inline asm
	mov.u16 	%rs116, 18432;
	// begin inline asm
	mov.b32 %r797, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r798, %r796, %r797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r801, %r793, %r798;
	// end inline asm
	mov.u32 	%r943, 15728880;
	// begin inline asm
	lop3.b32 %r804, %r943, %r795, %r807, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r808, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r809, %r807, %r808;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r812, %r804, %r809;
	// end inline asm
	// begin inline asm
	mov.b32 %r842, {%rs110, %rs110};
	// end inline asm
	// begin inline asm
	mov.b32 %r853, {%rs112, %rs112};
	// end inline asm
	xor.b32  	%r841, %r1190, -2004318072;
	// begin inline asm
	lop3.b32 %r839, %r932, %r841, %r842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r843, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r844, %r842, %r843;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r847, %r839, %r844;
	// end inline asm
	// begin inline asm
	lop3.b32 %r850, %r943, %r841, %r853, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r854, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r855, %r853, %r854;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r858, %r850, %r855;
	// end inline asm
	// begin inline asm
	mov.b32 %r888, {%rs110, %rs110};
	// end inline asm
	// begin inline asm
	mov.b32 %r899, {%rs112, %rs112};
	// end inline asm
	xor.b32  	%r887, %r1194, -2004318072;
	// begin inline asm
	lop3.b32 %r885, %r932, %r887, %r888, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r889, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r890, %r888, %r889;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r893, %r885, %r890;
	// end inline asm
	// begin inline asm
	lop3.b32 %r896, %r943, %r887, %r899, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r900, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r901, %r899, %r900;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r904, %r896, %r901;
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs110, %rs110};
	// end inline asm
	// begin inline asm
	mov.b32 %r945, {%rs112, %rs112};
	// end inline asm
	xor.b32  	%r933, %r1198, -2004318072;
	// begin inline asm
	lop3.b32 %r931, %r932, %r933, %r934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r936, %r934, %r935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r939, %r931, %r936;
	// end inline asm
	// begin inline asm
	lop3.b32 %r942, %r943, %r933, %r945, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r946, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r947, %r945, %r946;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r950, %r942, %r947;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r801;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r975, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r847;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r978, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r812;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r981, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r858;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r984, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r893;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r987, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r939;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r990, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r904;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r993, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r950;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r996, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r999, %r1000}, {%r314, %r317}, {%r975}, {%r773, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1006, %r1007}, {%r314, %r317}, {%r978}, {%r773, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1013, %r1014}, {%r314, %r317}, {%r981}, {%r773, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1020, %r1021}, {%r314, %r317}, {%r984}, {%r773, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1027, %r1028}, {%r314, %r317}, {%r987}, {%r773, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1034, %r1035}, {%r314, %r317}, {%r990}, {%r773, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1041, %r1042}, {%r314, %r317}, {%r993}, {%r773, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1048, %r1049}, {%r314, %r317}, {%r996}, {%r773, %r773};
	// end inline asm
	@%p1 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_164;
$L__BB0_221:                            // %pass4747
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1055, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1057, %r1055, %r1000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1060, %r366, %r999, %r1057;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1064, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1066, %r1064, %r1007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1069, %r366, %r1006, %r1066;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1073, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1075, %r1073, %r1014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1078, %r366, %r1013, %r1075;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1082, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1084, %r1082, %r1021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1087, %r366, %r1020, %r1084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1091, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1093, %r1091, %r1028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1096, %r366, %r1027, %r1093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1100, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1102, %r1100, %r1035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r366, %r1034, %r1102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1109, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1111, %r1109, %r1042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1114, %r366, %r1041, %r1111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1118, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1120, %r1118, %r1049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r366, %r1048, %r1120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1127, %r369, %r999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r366, %r1000, %r1127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1134, %r369, %r1006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r366, %r1007, %r1134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1141, %r369, %r1013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r366, %r1014, %r1141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r369, %r1020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r366, %r1021, %r1148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1155, %r369, %r1027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r366, %r1028, %r1155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1162, %r369, %r1034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r366, %r1035, %r1162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1169, %r369, %r1041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r366, %r1042, %r1169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1176, %r369, %r1048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r366, %r1049, %r1176;
	// end inline asm
	mov.u32 	%r1348, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1199, %r1200}, {%r410, %r413}, {%r1060, %r1130}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1208, %r1209}, {%r410, %r413}, {%r1069, %r1137}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1217, %r1218}, {%r410, %r413}, {%r1078, %r1144}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1226, %r1227}, {%r410, %r413}, {%r1087, %r1151}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1235, %r1236}, {%r410, %r413}, {%r1096, %r1158}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1244, %r1245}, {%r410, %r413}, {%r1105, %r1165}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1253, %r1254}, {%r410, %r413}, {%r1114, %r1172}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1262, %r1263}, {%r410, %r413}, {%r1123, %r1179}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs121, %rs3, -5;
	mul.hi.s16 	%rs122, %rs121, 10923;
	shr.u16 	%rs123, %rs122, 15;
	add.s16 	%rs124, %rs122, %rs123;
	mul.lo.s16 	%rs125, %rs124, 6;
	sub.s16 	%rs126, %rs121, %rs125;
	mul.wide.s16 	%r1381, %rs126, 16;
	add.s32 	%r1382, %r196, %r1381;
	mul.wide.s32 	%rd158, %r1382, 4;
	add.s64 	%rd160, %rd50, %rd158;
	ld.shared.u32 	%r1339, [%rd160];
	add.s32 	%r1383, %r197, %r1381;
	mul.wide.s32 	%rd161, %r1383, 4;
	add.s64 	%rd162, %rd50, %rd161;
	ld.shared.u32 	%r1346, [%rd162];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1335, %r1336}, {%r422, %r425}, {%r1339}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1342, %r1343}, {%r422, %r425}, {%r1346}, {%r1348, %r1348};
	// end inline asm
	@%p284 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_222;
$L__BB0_223:                            // %pass5243
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1349, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1351, %r1349, %r1336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1354, %r460, %r1335, %r1351;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1358, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1360, %r1358, %r1343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1363, %r460, %r1342, %r1360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1367, %r463, %r1335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1370, %r460, %r1336, %r1367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1374, %r463, %r1342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r460, %r1343, %r1374;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1403, %r1406}, {%r506, %r509}, {%r1354, %r1370}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1410, %r1414}, {%r506, %r509}, {%r1363, %r1377}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1402, %r1403, %r1403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1405, %r1406, %r1406, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r1410, %r1410, %r1405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r1414, %r1414, %r1409;
	// end inline asm
	mov.u32 	%r1501, 469769216;
	// begin inline asm
	fma.rn.f16x2 %r1417, %r1501, %r1413, %r110;
	// end inline asm
	add.s32 	%r1504, %r88, %r111;
	add.s32 	%r1505, %r1504, 1;
	mul.hi.u32 	%r1506, %r1505, -1431655765;
	shr.u32 	%r1507, %r1506, 2;
	mul.lo.s32 	%r1508, %r1507, 6;
	sub.s32 	%r1509, %r1505, %r1508;
	shl.b32 	%r1510, %r1509, 4;
	add.s32 	%r1511, %r196, %r1510;
	mul.wide.u32 	%rd165, %r1511, 4;
	add.s64 	%rd167, %rd50, %rd165;
	ld.shared.u32 	%r1425, [%rd167];
	add.s32 	%r1512, %r197, %r1510;
	mul.wide.u32 	%rd168, %r1512, 4;
	add.s64 	%rd169, %rd50, %rd168;
	ld.shared.u32 	%r1432, [%rd169];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1442, %r1439}, {%r422, %r425}, {%r1425}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1451, %r1448}, {%r422, %r425}, {%r1432}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1435, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1437, %r1435, %r1439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1440, %r460, %r1442, %r1437;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1444, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1446, %r1444, %r1448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r460, %r1451, %r1446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r463, %r1442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r460, %r1439, %r1453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1460, %r463, %r1451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1463, %r460, %r1448, %r1460;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1486, %r1489}, {%r506, %r509}, {%r1440, %r1456}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1493, %r1497}, {%r506, %r509}, {%r1449, %r1463}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1485, %r1486, %r1486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r1489, %r1489, %r1485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r1493, %r1493, %r1488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1496, %r1497, %r1497, %r1492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3028, %r1501, %r1496, %r1417;
	// end inline asm
	add.s32 	%r3026, %r108, 2;
	setp.ne.s32 	%p285, %r3026, 32;
	@%p285 bra 	$L__BB0_225;
// %bb.224:                             // %pass5675
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1514, %r109, 786432;
	or.b32  	%r1515, %r1514, %r198;
	or.b32  	%r1516, %r1515, %r4;
	add.s32 	%r1517, %r1516, %r199;
	cvt.u64.u32 	%rd170, %r1517;
	add.s64 	%rd171, %rd170, %rd7;
	mul.hi.s64 	%rd172, %rd171, 3074457345618258603;
	shr.u64 	%rd173, %rd172, 63;
	shr.s64 	%rd174, %rd172, 26;
	add.s64 	%rd175, %rd174, %rd173;
	setp.lt.s64 	%p286, %rd171, 0;
	mul.lo.s64 	%rd176, %rd175, 402653184;
	setp.ne.s64 	%p287, %rd176, %rd171;
	and.pred  	%p288, %p286, %p287;
	selp.s64 	%rd177, -1, 0, %p288;
	add.s64 	%rd178, %rd175, %rd177;
	mul.lo.s64 	%rd179, %rd178, -402653184;
	add.s64 	%rd180, %rd179, %rd171;
	shl.b64 	%rd181, %rd180, 2;
	add.s64 	%rd182, %rd4, %rd181;
	st.global.u32 	[%rd182], %r3028;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3026, 0;
	mov.u32 	%r3028, %r3026;
$L__BB0_225:                            // %oksrem5829
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s16 	%rs127, %rs3, -3;
	mul.hi.s16 	%rs128, %rs127, 10923;
	shr.u16 	%rs129, %rs128, 15;
	add.s16 	%rs130, %rs128, %rs129;
	mul.lo.s16 	%rs131, %rs130, 6;
	sub.s16 	%rs132, %rs127, %rs131;
	mul.wide.s16 	%r1684, %rs132, 16;
	add.s32 	%r1685, %r196, %r1684;
	mul.wide.s32 	%rd183, %r1685, 4;
	add.s64 	%rd185, %rd50, %rd183;
	ld.shared.u32 	%r1522, [%rd185];
	add.s32 	%r1686, %r197, %r1684;
	mul.wide.s32 	%rd186, %r1686, 4;
	add.s64 	%rd187, %rd50, %rd186;
	ld.shared.u32 	%r1529, [%rd187];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1539, %r1536}, {%r422, %r425}, {%r1522}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1548, %r1545}, {%r422, %r425}, {%r1529}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1532, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1534, %r1532, %r1536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1537, %r460, %r1539, %r1534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1541, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1543, %r1541, %r1545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r460, %r1548, %r1543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1550, %r463, %r1539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1553, %r460, %r1536, %r1550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1557, %r463, %r1548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r460, %r1545, %r1557;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1583, %r1586}, {%r506, %r509}, {%r1537, %r1553}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1590, %r1594}, {%r506, %r509}, {%r1546, %r1560}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1582, %r1583, %r1583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1585, %r1586, %r1586, %r1582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1589, %r1590, %r1590, %r1585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r1594, %r1594, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1597, %r1501, %r1593, %r3028;
	// end inline asm
	add.s16 	%rs133, %rs3, -2;
	mul.hi.s16 	%rs134, %rs133, 10923;
	shr.u16 	%rs135, %rs134, 15;
	add.s16 	%rs136, %rs134, %rs135;
	mul.lo.s16 	%rs137, %rs136, 6;
	sub.s16 	%rs138, %rs133, %rs137;
	mul.wide.s16 	%r1687, %rs138, 16;
	add.s32 	%r1688, %r196, %r1687;
	mul.wide.s32 	%rd188, %r1688, 4;
	add.s64 	%rd189, %rd50, %rd188;
	ld.shared.u32 	%r1605, [%rd189];
	add.s32 	%r1689, %r197, %r1687;
	mul.wide.s32 	%rd190, %r1689, 4;
	add.s64 	%rd191, %rd50, %rd190;
	ld.shared.u32 	%r1612, [%rd191];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1622, %r1619}, {%r422, %r425}, {%r1605}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1631, %r1628}, {%r422, %r425}, {%r1612}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1615, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1617, %r1615, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1620, %r460, %r1622, %r1617;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1624, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1626, %r1624, %r1628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1629, %r460, %r1631, %r1626;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1633, %r463, %r1622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1636, %r460, %r1619, %r1633;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1640, %r463, %r1631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r460, %r1628, %r1640;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1666, %r1669}, {%r506, %r509}, {%r1620, %r1636}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1673, %r1677}, {%r506, %r509}, {%r1629, %r1643}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1665, %r1666, %r1666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1668, %r1669, %r1669, %r1665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r1673, %r1673, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r1677, %r1677, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3031, %r1501, %r1676, %r1597;
	// end inline asm
	add.s32 	%r3029, %r3026, 2;
	setp.ne.s32 	%p289, %r3029, 32;
	@%p289 bra 	$L__BB0_227;
// %bb.226:                             // %pass6555
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1691, %r109, 786432;
	or.b32  	%r1692, %r1691, %r198;
	or.b32  	%r1693, %r1692, %r4;
	add.s32 	%r1694, %r1693, %r199;
	cvt.u64.u32 	%rd192, %r1694;
	add.s64 	%rd193, %rd192, %rd7;
	mul.hi.s64 	%rd194, %rd193, 3074457345618258603;
	shr.u64 	%rd195, %rd194, 63;
	shr.s64 	%rd196, %rd194, 26;
	add.s64 	%rd197, %rd196, %rd195;
	setp.lt.s64 	%p290, %rd193, 0;
	mul.lo.s64 	%rd198, %rd197, 402653184;
	setp.ne.s64 	%p291, %rd198, %rd193;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd199, -1, 0, %p292;
	add.s64 	%rd200, %rd197, %rd199;
	mul.lo.s64 	%rd201, %rd200, -402653184;
	add.s64 	%rd202, %rd201, %rd193;
	shl.b64 	%rd203, %rd202, 2;
	add.s64 	%rd204, %rd4, %rd203;
	st.global.u32 	[%rd204], %r3031;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3029, 0;
	mov.u32 	%r3031, %r3029;
$L__BB0_227:                            // %oksrem6709
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s16 	%rs139, %rs3, -1;
	mul.hi.s16 	%rs140, %rs139, 10923;
	shr.u16 	%rs141, %rs140, 15;
	add.s16 	%rs142, %rs140, %rs141;
	mul.lo.s16 	%rs143, %rs142, 6;
	sub.s16 	%rs144, %rs139, %rs143;
	mul.wide.s16 	%r1861, %rs144, 16;
	add.s32 	%r1862, %r196, %r1861;
	mul.wide.s32 	%rd205, %r1862, 4;
	add.s64 	%rd207, %rd50, %rd205;
	ld.shared.u32 	%r1699, [%rd207];
	add.s32 	%r1863, %r197, %r1861;
	mul.wide.s32 	%rd208, %r1863, 4;
	add.s64 	%rd209, %rd50, %rd208;
	ld.shared.u32 	%r1706, [%rd209];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1716, %r1713}, {%r422, %r425}, {%r1699}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1725, %r1722}, {%r422, %r425}, {%r1706}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1709, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1711, %r1709, %r1713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r460, %r1716, %r1711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1718, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1720, %r1718, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r460, %r1725, %r1720;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r463, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r460, %r1713, %r1727;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1734, %r463, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r460, %r1722, %r1734;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1760, %r1763}, {%r506, %r509}, {%r1714, %r1730}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1767, %r1771}, {%r506, %r509}, {%r1723, %r1737}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r1760, %r1760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r1763, %r1763, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r1767, %r1767, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r1771, %r1771, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r1501, %r1770, %r3031;
	// end inline asm
	mul.hi.s16 	%rs145, %rs3, 10923;
	shr.u16 	%rs146, %rs145, 15;
	add.s16 	%rs147, %rs145, %rs146;
	mul.lo.s16 	%rs148, %rs147, 6;
	sub.s16 	%rs149, %rs3, %rs148;
	mul.wide.s16 	%r1864, %rs149, 16;
	add.s32 	%r1865, %r196, %r1864;
	mul.wide.s32 	%rd210, %r1865, 4;
	add.s64 	%rd211, %rd50, %rd210;
	ld.shared.u32 	%r1782, [%rd211];
	add.s32 	%r1866, %r197, %r1864;
	mul.wide.s32 	%rd212, %r1866, 4;
	add.s64 	%rd213, %rd50, %rd212;
	ld.shared.u32 	%r1789, [%rd213];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1799, %r1796}, {%r422, %r425}, {%r1782}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1808, %r1805}, {%r422, %r425}, {%r1789}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1792, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r1792, %r1796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r460, %r1799, %r1794;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1801, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r1801, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r460, %r1808, %r1803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1810, %r463, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r460, %r1796, %r1810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r463, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r460, %r1805, %r1817;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1843, %r1846}, {%r506, %r509}, {%r1797, %r1813}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1850, %r1854}, {%r506, %r509}, {%r1806, %r1820}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1842, %r1843, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r1846, %r1846, %r1842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1849, %r1850, %r1850, %r1845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r1854, %r1854, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1501, %r1853, %r1774;
	// end inline asm
	add.s32 	%r108, %r3029, 2;
	setp.ne.s32 	%p293, %r108, 32;
	@%p293 bra 	$L__BB0_165;
// %bb.228:                             // %pass7435
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1868, %r109, 786432;
	or.b32  	%r1869, %r1868, %r198;
	or.b32  	%r1870, %r1869, %r4;
	add.s32 	%r1871, %r1870, %r199;
	cvt.u64.u32 	%rd214, %r1871;
	add.s64 	%rd215, %rd214, %rd7;
	mul.hi.s64 	%rd216, %rd215, 3074457345618258603;
	shr.u64 	%rd217, %rd216, 63;
	shr.s64 	%rd218, %rd216, 26;
	add.s64 	%rd219, %rd218, %rd217;
	setp.lt.s64 	%p294, %rd215, 0;
	mul.lo.s64 	%rd220, %rd219, 402653184;
	setp.ne.s64 	%p295, %rd220, %rd215;
	and.pred  	%p296, %p294, %p295;
	selp.s64 	%rd221, -1, 0, %p296;
	add.s64 	%rd222, %rd219, %rd221;
	mul.lo.s64 	%rd223, %rd222, -402653184;
	add.s64 	%rd224, %rd223, %rd215;
	shl.b64 	%rd225, %rd224, 2;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_165;
$L__BB0_166:                            // %L17557.preheader
                                        //   in Loop: Header=BB0_202 Depth=1
	mov.u16 	%rs236, %rs1;
	mov.u32 	%r3017, %r1348;
	bra.uni 	$L__BB0_167;
$L__BB0_172:                            // %L24428
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s32 	%r3017, %r3017, 6;
	add.s16 	%rs236, %rs236, 6;
	setp.ne.s32 	%p314, %r3017, 24;
	@%p314 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_173;
$L__BB0_167:                            // %L17557
                                        //   Parent Loop BB0_202 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p298, %r3017, 0;
	selp.b32 	%r2567, %r92, 0, %p298;
	setp.eq.s32 	%p299, %r3017, 6;
	selp.b32 	%r2568, %r96, %r2567, %p299;
	setp.eq.s32 	%p300, %r3017, 12;
	selp.b32 	%r2569, %r100, %r2568, %p300;
	setp.eq.s32 	%p301, %r3017, 18;
	selp.b32 	%r2570, %r104, %r2569, %p301;
	selp.b32 	%r2571, %r93, 0, %p298;
	selp.b32 	%r2572, %r97, %r2571, %p299;
	selp.b32 	%r2573, %r101, %r2572, %p300;
	selp.b32 	%r2574, %r105, %r2573, %p301;
	selp.b32 	%r2575, %r94, 0, %p298;
	selp.b32 	%r2576, %r98, %r2575, %p299;
	selp.b32 	%r2577, %r102, %r2576, %p300;
	selp.b32 	%r2578, %r106, %r2577, %p301;
	selp.b32 	%r2579, %r95, 0, %p298;
	selp.b32 	%r2580, %r99, %r2579, %p299;
	selp.b32 	%r2581, %r103, %r2580, %p300;
	selp.b32 	%r2582, %r107, %r2581, %p301;
	// begin inline asm
	mov.b32 %r1900, {%rs110, %rs110};
	// end inline asm
	// begin inline asm
	mov.b32 %r1911, {%rs112, %rs112};
	// end inline asm
	shr.u32 	%r2583, %r2570, 8;
	xor.b32  	%r1910, %r2583, 8947848;
	// begin inline asm
	lop3.b32 %r1897, %r932, %r1910, %r1900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1901, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1902, %r1900, %r1901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1905, %r1897, %r1902;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1908, %r943, %r1910, %r1911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1912, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1913, %r1911, %r1912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1916, %r1908, %r1913;
	// end inline asm
	// begin inline asm
	mov.b32 %r1946, {%rs110, %rs110};
	// end inline asm
	// begin inline asm
	mov.b32 %r1957, {%rs112, %rs112};
	// end inline asm
	shr.u32 	%r2584, %r2574, 8;
	xor.b32  	%r1956, %r2584, 8947848;
	// begin inline asm
	lop3.b32 %r1943, %r932, %r1956, %r1946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1947, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1948, %r1946, %r1947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1951, %r1943, %r1948;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1954, %r943, %r1956, %r1957, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1958, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1959, %r1957, %r1958;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1962, %r1954, %r1959;
	// end inline asm
	// begin inline asm
	mov.b32 %r1992, {%rs110, %rs110};
	// end inline asm
	// begin inline asm
	mov.b32 %r2003, {%rs112, %rs112};
	// end inline asm
	shr.u32 	%r2585, %r2578, 8;
	xor.b32  	%r2002, %r2585, 8947848;
	// begin inline asm
	lop3.b32 %r1989, %r932, %r2002, %r1992, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1993, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1994, %r1992, %r1993;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1997, %r1989, %r1994;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2000, %r943, %r2002, %r2003, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2004, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2005, %r2003, %r2004;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2008, %r2000, %r2005;
	// end inline asm
	// begin inline asm
	mov.b32 %r2038, {%rs110, %rs110};
	// end inline asm
	// begin inline asm
	mov.b32 %r2049, {%rs112, %rs112};
	// end inline asm
	shr.u32 	%r2586, %r2582, 8;
	xor.b32  	%r2048, %r2586, 8947848;
	// begin inline asm
	lop3.b32 %r2035, %r932, %r2048, %r2038, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2039, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2040, %r2038, %r2039;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2043, %r2035, %r2040;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2046, %r943, %r2048, %r2049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2050, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2051, %r2049, %r2050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2054, %r2046, %r2051;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1905;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2057, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1951;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1916;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r1962;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1997;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2043;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2072, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2008;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2075, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r2054;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2078, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2144, %r2141}, {%r314, %r317}, {%r2057}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2153, %r2150}, {%r314, %r317}, {%r2060}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2162, %r2159}, {%r314, %r317}, {%r2063}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2171, %r2168}, {%r314, %r317}, {%r2066}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2180, %r2177}, {%r314, %r317}, {%r2069}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2189, %r2186}, {%r314, %r317}, {%r2072}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2198, %r2195}, {%r314, %r317}, {%r2075}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2207, %r2204}, {%r314, %r317}, {%r2078}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2137, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2139, %r2137, %r2141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r366, %r2144, %r2139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2146, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2148, %r2146, %r2150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r366, %r2153, %r2148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2155, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2157, %r2155, %r2159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2160, %r366, %r2162, %r2157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2164, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2166, %r2164, %r2168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2169, %r366, %r2171, %r2166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2173, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2175, %r2173, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r366, %r2180, %r2175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2182, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2184, %r2182, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2187, %r366, %r2189, %r2184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2191, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2193, %r2191, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2196, %r366, %r2198, %r2193;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2200, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r2200, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r366, %r2207, %r2202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r369, %r2144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r366, %r2141, %r2209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2216, %r369, %r2153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2219, %r366, %r2150, %r2216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2223, %r369, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r366, %r2159, %r2223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r369, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r366, %r2168, %r2230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r369, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r366, %r2177, %r2237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r369, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r366, %r2186, %r2244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2251, %r369, %r2198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2254, %r366, %r2195, %r2251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2258, %r369, %r2207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2261, %r366, %r2204, %r2258;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2265, %r2266}, {%r410, %r413}, {%r2142, %r2212}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2274, %r2275}, {%r410, %r413}, {%r2151, %r2219}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2283, %r2284}, {%r410, %r413}, {%r2160, %r2226}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2292, %r2293}, {%r410, %r413}, {%r2169, %r2233}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2301, %r2302}, {%r410, %r413}, {%r2178, %r2240}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2310, %r2311}, {%r410, %r413}, {%r2187, %r2247}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2319, %r2320}, {%r410, %r413}, {%r2196, %r2254}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2328, %r2329}, {%r410, %r413}, {%r2205, %r2261}, {%r1348, %r1348}, %r200, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs198, %rs236, -5;
	mul.hi.s16 	%rs199, %rs198, 10923;
	shr.u16 	%rs200, %rs199, 15;
	add.s16 	%rs201, %rs199, %rs200;
	mul.lo.s16 	%rs202, %rs201, 6;
	sub.s16 	%rs203, %rs198, %rs202;
	mul.wide.s16 	%r2587, %rs203, 16;
	add.s32 	%r2588, %r196, %r2587;
	mul.wide.s32 	%rd227, %r2588, 4;
	add.s64 	%rd229, %rd50, %rd227;
	ld.shared.u32 	%r2405, [%rd229];
	add.s32 	%r2589, %r197, %r2587;
	mul.wide.s32 	%rd230, %r2589, 4;
	add.s64 	%rd231, %rd50, %rd230;
	ld.shared.u32 	%r2412, [%rd231];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2422, %r2419}, {%r422, %r425}, {%r2405}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2431, %r2428}, {%r422, %r425}, {%r2412}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2415, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2417, %r2415, %r2419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2420, %r460, %r2422, %r2417;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2424, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2426, %r2424, %r2428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2429, %r460, %r2431, %r2426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2433, %r463, %r2422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2436, %r460, %r2419, %r2433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2440, %r463, %r2431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2443, %r460, %r2428, %r2440;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2466, %r2469}, {%r506, %r509}, {%r2420, %r2436}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2473, %r2477}, {%r506, %r509}, {%r2429, %r2443}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2465, %r2466, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2468, %r2469, %r2469, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2472, %r2473, %r2473, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2476, %r2477, %r2477, %r2472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2480, %r1501, %r2476, %r110;
	// end inline asm
	add.s16 	%rs204, %rs236, -4;
	mul.hi.s16 	%rs205, %rs204, 10923;
	shr.u16 	%rs206, %rs205, 15;
	add.s16 	%rs207, %rs205, %rs206;
	mul.lo.s16 	%rs208, %rs207, 6;
	sub.s16 	%rs209, %rs204, %rs208;
	mul.wide.s16 	%r2590, %rs209, 16;
	add.s32 	%r2591, %r196, %r2590;
	mul.wide.s32 	%rd232, %r2591, 4;
	add.s64 	%rd233, %rd50, %rd232;
	ld.shared.u32 	%r2488, [%rd233];
	add.s32 	%r2592, %r197, %r2590;
	mul.wide.s32 	%rd234, %r2592, 4;
	add.s64 	%rd235, %rd50, %rd234;
	ld.shared.u32 	%r2495, [%rd235];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2505, %r2502}, {%r422, %r425}, {%r2488}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2514, %r2511}, {%r422, %r425}, {%r2495}, {%r1348, %r1348};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2498, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2500, %r2498, %r2502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r460, %r2505, %r2500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2507, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2509, %r2507, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2512, %r460, %r2514, %r2509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r463, %r2505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r460, %r2502, %r2516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2523, %r463, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2526, %r460, %r2511, %r2523;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2549, %r2552}, {%r506, %r509}, {%r2503, %r2519}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2556, %r2560}, {%r506, %r509}, {%r2512, %r2526}, {%r1348, %r1348}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2548, %r2549, %r2549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2551, %r2552, %r2552, %r2548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2555, %r2556, %r2556, %r2551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2559, %r2560, %r2560, %r2555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r1501, %r2559, %r2480;
	// end inline asm
	add.s32 	%r3032, %r108, 2;
	setp.eq.s32 	%p302, %r3032, 32;
	@%p302 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_169;
$L__BB0_168:                            // %pass8500
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r2594, %r109, 786432;
	or.b32  	%r2595, %r2594, %r198;
	or.b32  	%r2596, %r2595, %r4;
	add.s32 	%r2597, %r2596, %r199;
	cvt.u64.u32 	%rd236, %r2597;
	add.s64 	%rd237, %rd236, %rd7;
	mul.hi.s64 	%rd238, %rd237, 3074457345618258603;
	shr.u64 	%rd239, %rd238, 63;
	shr.s64 	%rd240, %rd238, 26;
	add.s64 	%rd241, %rd240, %rd239;
	setp.lt.s64 	%p303, %rd237, 0;
	mul.lo.s64 	%rd242, %rd241, 402653184;
	setp.ne.s64 	%p304, %rd242, %rd237;
	and.pred  	%p305, %p303, %p304;
	selp.s64 	%rd243, -1, 0, %p305;
	add.s64 	%rd244, %rd241, %rd243;
	mul.lo.s64 	%rd245, %rd244, -402653184;
	add.s64 	%rd246, %rd245, %rd237;
	shl.b64 	%rd247, %rd246, 2;
	add.s64 	%rd248, %rd4, %rd247;
	st.global.u32 	[%rd248], %r3034;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3032, 0;
	mov.u32 	%r3034, %r3032;
$L__BB0_169:                            // %oksrem8654
                                        //   in Loop: Header=BB0_167 Depth=2
	add.s16 	%rs210, %rs236, -3;
	mul.hi.s16 	%rs211, %rs210, 10923;
	shr.u16 	%rs212, %rs211, 15;
	add.s16 	%rs213, %rs211, %rs212;
	mul.lo.s16 	%rs214, %rs213, 6;
	sub.s16 	%rs215, %rs210, %rs214;
	mul.wide.s16 	%r2764, %rs215, 16;
	add.s32 	%r2765, %r196, %r2764;
	mul.wide.s32 	%rd249, %r2765, 4;
	add.s64 	%rd251, %rd50, %rd249;
	ld.shared.u32 	%r2602, [%rd251];
	add.s32 	%r2766, %r197, %r2764;
	mul.wide.s32 	%rd252, %r2766, 4;
	add.s64 	%rd253, %rd50, %rd252;
	ld.shared.u32 	%r2609, [%rd253];
	mov.u32 	%r2780, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2619, %r2616}, {%r422, %r425}, {%r2602}, {%r2780, %r2780};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2628, %r2625}, {%r422, %r425}, {%r2609}, {%r2780, %r2780};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2612, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2614, %r2612, %r2616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2617, %r460, %r2619, %r2614;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2621, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2623, %r2621, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2626, %r460, %r2628, %r2623;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2630, %r463, %r2619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2633, %r460, %r2616, %r2630;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r463, %r2628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r460, %r2625, %r2637;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2663, %r2666}, {%r506, %r509}, {%r2617, %r2633}, {%r2780, %r2780}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2670, %r2674}, {%r506, %r509}, {%r2626, %r2640}, {%r2780, %r2780}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2662, %r2663, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2665, %r2666, %r2666, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2669, %r2670, %r2670, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2673, %r2674, %r2674, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2677, %r1501, %r2673, %r3034;
	// end inline asm
	add.s16 	%rs216, %rs236, -2;
	mul.hi.s16 	%rs217, %rs216, 10923;
	shr.u16 	%rs218, %rs217, 15;
	add.s16 	%rs219, %rs217, %rs218;
	mul.lo.s16 	%rs220, %rs219, 6;
	sub.s16 	%rs221, %rs216, %rs220;
	mul.wide.s16 	%r2767, %rs221, 16;
	add.s32 	%r2768, %r196, %r2767;
	mul.wide.s32 	%rd254, %r2768, 4;
	add.s64 	%rd255, %rd50, %rd254;
	ld.shared.u32 	%r2685, [%rd255];
	add.s32 	%r2769, %r197, %r2767;
	mul.wide.s32 	%rd256, %r2769, 4;
	add.s64 	%rd257, %rd50, %rd256;
	ld.shared.u32 	%r2692, [%rd257];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2702, %r2699}, {%r422, %r425}, {%r2685}, {%r2780, %r2780};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2711, %r2708}, {%r422, %r425}, {%r2692}, {%r2780, %r2780};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2700, %r460, %r2702, %r2697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r460, %r2711, %r2706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r463, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r460, %r2699, %r2713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r463, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r460, %r2708, %r2720;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2746, %r2749}, {%r506, %r509}, {%r2700, %r2716}, {%r2780, %r2780}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2753, %r2757}, {%r506, %r509}, {%r2709, %r2723}, {%r2780, %r2780}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2745, %r2746, %r2746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r2749, %r2749, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r2753, %r2753, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r2757, %r2757, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r1501, %r2756, %r2677;
	// end inline asm
	add.s32 	%r3035, %r3032, 2;
	setp.ne.s32 	%p306, %r3035, 32;
	@%p306 bra 	$L__BB0_171;
// %bb.170:                             // %pass9380
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r2771, %r109, 786432;
	or.b32  	%r2772, %r2771, %r198;
	or.b32  	%r2773, %r2772, %r4;
	add.s32 	%r2774, %r2773, %r199;
	cvt.u64.u32 	%rd258, %r2774;
	add.s64 	%rd259, %rd258, %rd7;
	mul.hi.s64 	%rd260, %rd259, 3074457345618258603;
	shr.u64 	%rd261, %rd260, 63;
	shr.s64 	%rd262, %rd260, 26;
	add.s64 	%rd263, %rd262, %rd261;
	setp.lt.s64 	%p307, %rd259, 0;
	mul.lo.s64 	%rd264, %rd263, 402653184;
	setp.ne.s64 	%p308, %rd264, %rd259;
	and.pred  	%p309, %p307, %p308;
	selp.s64 	%rd265, -1, 0, %p309;
	add.s64 	%rd266, %rd263, %rd265;
	mul.lo.s64 	%rd267, %rd266, -402653184;
	add.s64 	%rd268, %rd267, %rd259;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd270, %rd4, %rd269;
	st.global.u32 	[%rd270], %r3037;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3035, 0;
	mov.u32 	%r3037, %r3035;
$L__BB0_171:                            // %oksrem9534
                                        //   in Loop: Header=BB0_167 Depth=2
	add.s16 	%rs222, %rs236, -1;
	mul.hi.s16 	%rs223, %rs222, 10923;
	shr.u16 	%rs224, %rs223, 15;
	add.s16 	%rs225, %rs223, %rs224;
	mul.lo.s16 	%rs226, %rs225, 6;
	sub.s16 	%rs227, %rs222, %rs226;
	mul.wide.s16 	%r2941, %rs227, 16;
	add.s32 	%r2942, %r196, %r2941;
	mul.wide.s32 	%rd271, %r2942, 4;
	add.s64 	%rd273, %rd50, %rd271;
	ld.shared.u32 	%r2779, [%rd273];
	add.s32 	%r2943, %r197, %r2941;
	mul.wide.s32 	%rd274, %r2943, 4;
	add.s64 	%rd275, %rd50, %rd274;
	ld.shared.u32 	%r2786, [%rd275];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2796, %r2793}, {%r422, %r425}, {%r2779}, {%r2780, %r2780};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2805, %r2802}, {%r422, %r425}, {%r2786}, {%r2780, %r2780};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2789, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2791, %r2789, %r2793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2794, %r460, %r2796, %r2791;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2798, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2800, %r2798, %r2802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r460, %r2805, %r2800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2807, %r463, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2810, %r460, %r2793, %r2807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2814, %r463, %r2805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2817, %r460, %r2802, %r2814;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2840, %r2843}, {%r506, %r509}, {%r2794, %r2810}, {%r2780, %r2780}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2847, %r2851}, {%r506, %r509}, {%r2803, %r2817}, {%r2780, %r2780}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2839, %r2840, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2842, %r2843, %r2843, %r2839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2846, %r2847, %r2847, %r2842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2850, %r2851, %r2851, %r2846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2854, %r1501, %r2850, %r3037;
	// end inline asm
	mul.hi.s16 	%rs228, %rs236, 10923;
	shr.u16 	%rs229, %rs228, 15;
	add.s16 	%rs230, %rs228, %rs229;
	mul.lo.s16 	%rs231, %rs230, 6;
	sub.s16 	%rs232, %rs236, %rs231;
	mul.wide.s16 	%r2944, %rs232, 16;
	add.s32 	%r2945, %r196, %r2944;
	mul.wide.s32 	%rd276, %r2945, 4;
	add.s64 	%rd277, %rd50, %rd276;
	ld.shared.u32 	%r2862, [%rd277];
	add.s32 	%r2946, %r197, %r2944;
	mul.wide.s32 	%rd278, %r2946, 4;
	add.s64 	%rd279, %rd50, %rd278;
	ld.shared.u32 	%r2869, [%rd279];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2879, %r2876}, {%r422, %r425}, {%r2862}, {%r2780, %r2780};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2888, %r2885}, {%r422, %r425}, {%r2869}, {%r2780, %r2780};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2872, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2874, %r2872, %r2876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r460, %r2879, %r2874;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2881, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2883, %r2881, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2886, %r460, %r2888, %r2883;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2890, %r463, %r2879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r460, %r2876, %r2890;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2897, %r463, %r2888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r460, %r2885, %r2897;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2923, %r2926}, {%r506, %r509}, {%r2877, %r2893}, {%r2780, %r2780}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2930, %r2934}, {%r506, %r509}, {%r2886, %r2900}, {%r2780, %r2780}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2922, %r2923, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r2926, %r2926, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r2930, %r2930, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r2934, %r2934, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1501, %r2933, %r2854;
	// end inline asm
	add.s32 	%r108, %r3035, 2;
	setp.ne.s32 	%p310, %r108, 32;
	@%p310 bra 	$L__BB0_172;
// %bb.229:                             // %pass10260
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r2948, %r109, 786432;
	or.b32  	%r2949, %r2948, %r198;
	or.b32  	%r2950, %r2949, %r4;
	add.s32 	%r2951, %r2950, %r199;
	cvt.u64.u32 	%rd280, %r2951;
	add.s64 	%rd281, %rd280, %rd7;
	mul.hi.s64 	%rd282, %rd281, 3074457345618258603;
	shr.u64 	%rd283, %rd282, 63;
	shr.s64 	%rd284, %rd282, 26;
	add.s64 	%rd285, %rd284, %rd283;
	setp.lt.s64 	%p311, %rd281, 0;
	mul.lo.s64 	%rd286, %rd285, 402653184;
	setp.ne.s64 	%p312, %rd286, %rd281;
	and.pred  	%p313, %p311, %p312;
	selp.s64 	%rd287, -1, 0, %p313;
	add.s64 	%rd288, %rd285, %rd287;
	mul.lo.s64 	%rd289, %rd288, -402653184;
	add.s64 	%rd290, %rd289, %rd281;
	shl.b64 	%rd291, %rd290, 2;
	add.s64 	%rd292, %rd4, %rd291;
	st.global.u32 	[%rd292], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2780;
	mov.u32 	%r110, %r2780;
	bra.uni 	$L__BB0_172;
$L__BB0_174:                            // %L24459
	mov.u32 	%r2952, 0;
	st.global.u32 	[%rd6], %r2952;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd156, exception1951;
	cvta.global.u64 	%rd157, %rd156;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd157;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_222:                            // %post_box_union5238
	mov.u64 	%rd163, exception1951;
	cvta.global.u64 	%rd164, %rd163;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd164;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5153
	mov.u32 	%r2968, 5;
	st.global.u32 	[%rd6], %r2968;
	mov.u64 	%rd323, exception1911;
	cvta.global.u64 	%rd324, %rd323;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd324;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5313
	mov.u32 	%r2967, 5;
	st.global.u32 	[%rd6], %r2967;
	mov.u64 	%rd321, exception1911;
	cvta.global.u64 	%rd322, %rd321;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd322;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5473
	mov.u32 	%r2966, 5;
	st.global.u32 	[%rd6], %r2966;
	mov.u64 	%rd319, exception1911;
	cvta.global.u64 	%rd320, %rd319;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd320;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5633
	mov.u32 	%r2965, 5;
	st.global.u32 	[%rd6], %r2965;
	mov.u64 	%rd317, exception1911;
	cvta.global.u64 	%rd318, %rd317;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd318;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5793
	mov.u32 	%r2964, 5;
	st.global.u32 	[%rd6], %r2964;
	mov.u64 	%rd315, exception1911;
	cvta.global.u64 	%rd316, %rd315;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd316;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5953
	mov.u32 	%r2963, 5;
	st.global.u32 	[%rd6], %r2963;
	mov.u64 	%rd313, exception1911;
	cvta.global.u64 	%rd314, %rd313;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd314;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6113
	mov.u32 	%r2962, 5;
	st.global.u32 	[%rd6], %r2962;
	mov.u64 	%rd311, exception1911;
	cvta.global.u64 	%rd312, %rd311;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd312;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6273
	mov.u32 	%r2961, 5;
	st.global.u32 	[%rd6], %r2961;
	mov.u64 	%rd309, exception1911;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6433
	mov.u32 	%r2960, 5;
	st.global.u32 	[%rd6], %r2960;
	mov.u64 	%rd307, exception1911;
	cvta.global.u64 	%rd308, %rd307;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd308;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6593
	mov.u32 	%r2959, 5;
	st.global.u32 	[%rd6], %r2959;
	mov.u64 	%rd305, exception1911;
	cvta.global.u64 	%rd306, %rd305;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd306;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6779
	mov.u32 	%r2958, 5;
	st.global.u32 	[%rd6], %r2958;
	mov.u64 	%rd303, exception1911;
	cvta.global.u64 	%rd304, %rd303;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd304;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6939
	mov.u32 	%r2957, 5;
	st.global.u32 	[%rd6], %r2957;
	mov.u64 	%rd301, exception1911;
	cvta.global.u64 	%rd302, %rd301;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd302;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7099
	mov.u32 	%r2956, 5;
	st.global.u32 	[%rd6], %r2956;
	mov.u64 	%rd299, exception1911;
	cvta.global.u64 	%rd300, %rd299;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd300;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7259
	mov.u32 	%r2955, 5;
	st.global.u32 	[%rd6], %r2955;
	mov.u64 	%rd297, exception1911;
	cvta.global.u64 	%rd298, %rd297;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd298;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7419
	mov.u32 	%r2954, 5;
	st.global.u32 	[%rd6], %r2954;
	mov.u64 	%rd295, exception1911;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7579
	mov.u32 	%r2953, 5;
	st.global.u32 	[%rd6], %r2953;
	mov.u64 	%rd293, exception1911;
	cvta.global.u64 	%rd294, %rd293;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd294;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r2970, 2;
	st.global.u32 	[%rd6], %r2970;
	mov.u64 	%rd327, exception1911;
	cvta.global.u64 	%rd328, %rd327;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd328;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r2969, 3;
	st.global.u32 	[%rd6], %r2969;
	mov.u64 	%rd325, exception1911;
	cvta.global.u64 	%rd326, %rd325;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd326;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1158
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r291, %r1};
	st.local.v2.u32 	[%rd5+8], {%r3, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r519, [retval0+0];
	} // callseq 49
	mov.u32 	%r521, 4;
	st.global.u32 	[%rd6], %r521;
	mov.u64 	%rd26, exception1911;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
