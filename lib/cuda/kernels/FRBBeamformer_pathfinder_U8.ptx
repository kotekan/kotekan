// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2611[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2651[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<288>;
	.reg .b32 	%r<3034>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<378>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r256, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd14, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r261, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r261, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd15, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r257, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r262, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r263, %r2, %r262;
	add.s32 	%r264, %r263, %r5;
	mul.wide.u32 	%rd21, %r264, 4;
	add.s64 	%rd5, %rd15, %rd21;
	mov.u32 	%r265, 1;
	st.global.u32 	[%rd5], %r265;
	setp.lt.s32 	%p5, %r257, 0;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L117
	ld.param.u32 	%r258, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r258, %r257;
	setp.gt.s32 	%p7, %r258, 8192;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r259, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r258, %r257;
	mad.lo.s32 	%r266, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r267, %r266, %r266, 4;
	setp.gt.u32 	%p9, %r267, 89478484;
	setp.lt.s32 	%p10, %r259, 0;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L133
	ld.param.u32 	%r260, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r260, %r259;
	setp.lt.s32 	%p13, %r260, 1025;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_6;
$L__BB0_168:                            // %pass51
	sub.s32 	%r268, %r260, %r259;
	shr.s32 	%r269, %r6, 31;
	shr.u32 	%r270, %r269, 27;
	add.s32 	%r271, %r6, %r270;
	shr.s32 	%r272, %r271, 5;
	setp.ne.s32 	%p15, %r268, %r272;
	@%p15 bra 	$L__BB0_6;
// %bb.169:                             // %pass102
	and.b32  	%r146, %r262, 3;
	shr.u32 	%r147, %r262, 2;
	mul.lo.s32 	%r273, %r146, %r147;
	and.b32  	%r274, %r273, 7;
	cvt.rn.f32.s32 	%f205, %r274;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p16, %f788, 0f40000000;
	setp.gtu.f32 	%p292, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p16 bra 	$L__BB0_181;
// %bb.170:
	@%p292 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_171;
$L__BB0_177:
	mov.b32 	%r149, %f788;
	and.b32  	%r275, %r149, 8388607;
	or.b32  	%r3017, %r275, 1065353216;
	mov.b32 	%f783, %r3017;
	add.s32 	%r276, %r149, -1073741824;
	and.b32  	%r3018, %r276, -8388608;
	setp.eq.s32 	%p23, %r3018, 0;
	@%p23 bra 	$L__BB0_180;
// %bb.178:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_179:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r277, %r3018, 192937984;
	add.s32 	%r278, %r3017, %r277;
	mov.b32 	%f217, %r278;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3018, %r3018, %r277;
	mov.b32 	%r3017, %f783;
	setp.ne.s32 	%p24, %r3018, 0;
	setp.ne.s32 	%p25, %r3017, 0;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_179;
$L__BB0_180:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p27, %r149, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p27;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_181;
$L__BB0_171:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r148, %f172;
	setp.lt.u32 	%p18, %r148, 1073741824;
	@%p18 bra 	$L__BB0_176;
// %bb.172:
	setp.lt.u32 	%p19, %r148, -2147483647;
	@%p19 bra 	$L__BB0_174;
// %bb.173:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p22, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p22;
	bra.uni 	$L__BB0_176;
$L__BB0_174:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p20, %f172, 0f40800000;
	@%p20 bra 	$L__BB0_176;
// %bb.175:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p21, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p21;
$L__BB0_176:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_181:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p28, %f226, 0f7F800000;
	mov.b32 	%r279, %f169;
	and.b32  	%r156, %r279, -2147483648;
	@%p28 bra 	$L__BB0_183;
// %bb.182:
	mov.b32 	%r280, %f784;
	or.b32  	%r281, %r156, %r280;
	mov.b32 	%f784, %r281;
$L__BB0_183:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r288, %f227;
	and.b32  	%r289, %r288, -2147483648;
	or.b32  	%r290, %r289, 1056964608;
	mov.b32 	%f228, %r290;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p29, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p29;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p30, %f231, 0f3F000000;
	shl.b32 	%r159, %r262, 1;
	and.b32  	%r160, %r159, 2;
	mul.lo.s32 	%r296, %r160, %r147;
	cvt.rn.f32.s32 	%f259, %r296;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p36, %f734, 0f40000000;
	@%p36 bra 	$L__BB0_18;
// %bb.7:
	setp.gtu.f32 	%p37, %f734, 0f4B800000;
	@%p37 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r8, %f734;
	and.b32  	%r297, %r8, 8388607;
	or.b32  	%r2967, %r297, 1065353216;
	mov.b32 	%f733, %r2967;
	add.s32 	%r298, %r8, -1073741824;
	and.b32  	%r2968, %r298, -8388608;
	setp.eq.s32 	%p43, %r2968, 0;
	@%p43 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r299, %r2968, 192937984;
	add.s32 	%r300, %r2967, %r299;
	mov.b32 	%f271, %r300;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2968, %r2968, %r299;
	mov.b32 	%r2967, %f733;
	setp.ne.s32 	%p44, %r2968, 0;
	setp.ne.s32 	%p45, %r2967, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p47, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p38, %r7, 1073741824;
	@%p38 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p39, %r7, -2147483647;
	@%p39 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p42, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p42;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p40, %f2, 0f40800000;
	@%p40 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p41, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p41;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p30;
	or.b32  	%r161, %r160, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p48, %f280, 0f7F800000;
	@%p48 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r301, %f186;
	and.b32  	%r302, %r301, -2147483648;
	mov.b32 	%r303, %f734;
	or.b32  	%r304, %r302, %r303;
	mov.b32 	%f734, %r304;
$L__BB0_20:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r305, %f282;
	and.b32  	%r306, %r305, -2147483648;
	or.b32  	%r307, %r306, 1056964608;
	mov.b32 	%f283, %r307;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p49, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p49;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p50, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p50;
	setp.eq.s32 	%p56, %r161, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p56 bra 	$L__BB0_36;
// %bb.21:                              // %L378
	mul.lo.s32 	%r313, %r161, %r147;
	mul.hi.u32 	%r314, %r313, -1431655765;
	shr.u32 	%r315, %r314, 4;
	mul.lo.s32 	%r316, %r315, 24;
	sub.s32 	%r317, %r313, %r316;
	cvt.rn.f32.s32 	%f311, %r317;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p57, %f738, 0f40000000;
	@%p57 bra 	$L__BB0_33;
// %bb.22:
	setp.gtu.f32 	%p58, %f738, 0f4B800000;
	@%p58 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_23;
$L__BB0_29:
	mov.b32 	%r16, %f738;
	and.b32  	%r318, %r16, 8388607;
	or.b32  	%r2969, %r318, 1065353216;
	mov.b32 	%f737, %r2969;
	add.s32 	%r319, %r16, -1073741824;
	and.b32  	%r2970, %r319, -8388608;
	setp.eq.s32 	%p64, %r2970, 0;
	@%p64 bra 	$L__BB0_32;
// %bb.30:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_31:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r320, %r2970, 192937984;
	add.s32 	%r321, %r2969, %r320;
	mov.b32 	%f323, %r321;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2970, %r2970, %r320;
	mov.b32 	%r2969, %f737;
	setp.ne.s32 	%p65, %r2970, 0;
	setp.ne.s32 	%p66, %r2969, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_31;
$L__BB0_32:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p68, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_33;
$L__BB0_23:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p59, %r15, 1073741824;
	@%p59 bra 	$L__BB0_28;
// %bb.24:
	setp.lt.u32 	%p60, %r15, -2147483647;
	@%p60 bra 	$L__BB0_26;
// %bb.25:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p63, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p63;
	bra.uni 	$L__BB0_28;
$L__BB0_26:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p61, %f21, 0f40800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p62, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p62;
$L__BB0_28:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_33:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p69, %f332, 0f7F800000;
	@%p69 bra 	$L__BB0_35;
// %bb.34:
	mov.b32 	%r322, %f18;
	and.b32  	%r323, %r322, -2147483648;
	mov.b32 	%r324, %f738;
	or.b32  	%r325, %r323, %r324;
	mov.b32 	%f738, %r325;
$L__BB0_35:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r326, %f333;
	and.b32  	%r327, %r326, -2147483648;
	or.b32  	%r328, %r327, 1056964608;
	mov.b32 	%f334, %r328;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p70, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p70;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p71, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p71;
	cvt.rzi.s32.f32 	%r329, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r330, %r329, 1;
	setp.eq.b32 	%p72, %r330, 1;
	selp.f32 	%f352, %f350, %f351, %p72;
	selp.f32 	%f353, %f351, %f350, %p72;
	and.b32  	%r331, %r329, 2;
	setp.eq.s32 	%p73, %r331, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p73;
	add.s32 	%r332, %r329, 1;
	and.b32  	%r333, %r332, 2;
	setp.eq.s32 	%p74, %r333, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p74;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p75, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p75;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p76, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p76;
$L__BB0_36:                             // %L412
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r25, %r147, 3;
	setp.eq.s32 	%p77, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p77 bra 	$L__BB0_52;
// %bb.37:                              // %L450
	mul.lo.s32 	%r340, %r160, %r25;
	cvt.u16.u32 	%rs11, %r340;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p78, %f744, 0f40000000;
	@%p78 bra 	$L__BB0_49;
// %bb.38:
	setp.gtu.f32 	%p79, %f744, 0f4B800000;
	@%p79 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_39;
$L__BB0_45:
	mov.b32 	%r27, %f744;
	and.b32  	%r341, %r27, 8388607;
	or.b32  	%r2971, %r341, 1065353216;
	mov.b32 	%f743, %r2971;
	add.s32 	%r342, %r27, -1073741824;
	and.b32  	%r2972, %r342, -8388608;
	setp.eq.s32 	%p85, %r2972, 0;
	@%p85 bra 	$L__BB0_48;
// %bb.46:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_47:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r343, %r2972, 192937984;
	add.s32 	%r344, %r2971, %r343;
	mov.b32 	%f376, %r344;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2972, %r2972, %r343;
	mov.b32 	%r2971, %f743;
	setp.ne.s32 	%p86, %r2972, 0;
	setp.ne.s32 	%p87, %r2971, 0;
	and.pred  	%p88, %p86, %p87;
	@%p88 bra 	$L__BB0_47;
$L__BB0_48:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p89, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p89;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_49;
$L__BB0_39:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p80, %r26, 1073741824;
	@%p80 bra 	$L__BB0_44;
// %bb.40:
	setp.lt.u32 	%p81, %r26, -2147483647;
	@%p81 bra 	$L__BB0_42;
// %bb.41:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p84, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p84;
	bra.uni 	$L__BB0_44;
$L__BB0_42:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p82, %f42, 0f40800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p83, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p83;
$L__BB0_44:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_49:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p90, %f385, 0f7F800000;
	@%p90 bra 	$L__BB0_51;
// %bb.50:
	mov.b32 	%r345, %f39;
	and.b32  	%r346, %r345, -2147483648;
	mov.b32 	%r347, %f744;
	or.b32  	%r348, %r346, %r347;
	mov.b32 	%f744, %r348;
$L__BB0_51:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r349, %f386;
	and.b32  	%r350, %r349, -2147483648;
	or.b32  	%r351, %r350, 1056964608;
	mov.b32 	%f387, %r351;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p91, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p91;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p92, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p92;
	cvt.rzi.s32.f32 	%r352, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r353, %r352, 1;
	setp.eq.b32 	%p93, %r353, 1;
	selp.f32 	%f405, %f403, %f404, %p93;
	selp.f32 	%f406, %f404, %f403, %p93;
	and.b32  	%r354, %r352, 2;
	setp.eq.s32 	%p94, %r354, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p94;
	add.s32 	%r355, %r352, 1;
	and.b32  	%r356, %r355, 2;
	setp.eq.s32 	%p95, %r356, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p95;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p96, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p96;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p97, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p97;
$L__BB0_52:                             // %L484
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p100, %p56, %p77;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p100 bra 	$L__BB0_68;
// %bb.53:                              // %L492
	mul.lo.s32 	%r357, %r161, %r25;
	mul.hi.u32 	%r358, %r357, -1431655765;
	shr.u32 	%r359, %r358, 1;
	mul.lo.s32 	%r360, %r359, 3;
	sub.s32 	%r361, %r357, %r360;
	cvt.rn.f32.s32 	%f417, %r361;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p101, %f750, 0f40000000;
	@%p101 bra 	$L__BB0_65;
// %bb.54:
	setp.gtu.f32 	%p102, %f750, 0f4B800000;
	@%p102 bra 	$L__BB0_61;
	bra.uni 	$L__BB0_55;
$L__BB0_61:
	mov.b32 	%r35, %f750;
	and.b32  	%r362, %r35, 8388607;
	or.b32  	%r2973, %r362, 1065353216;
	mov.b32 	%f749, %r2973;
	add.s32 	%r363, %r35, -1073741824;
	and.b32  	%r2974, %r363, -8388608;
	setp.eq.s32 	%p108, %r2974, 0;
	@%p108 bra 	$L__BB0_64;
// %bb.62:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_63:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r364, %r2974, 192937984;
	add.s32 	%r365, %r2973, %r364;
	mov.b32 	%f429, %r365;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2974, %r2974, %r364;
	mov.b32 	%r2973, %f749;
	setp.ne.s32 	%p109, %r2974, 0;
	setp.ne.s32 	%p110, %r2973, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_63;
$L__BB0_64:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p112, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_65;
$L__BB0_55:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p103, %r34, 1073741824;
	@%p103 bra 	$L__BB0_60;
// %bb.56:
	setp.lt.u32 	%p104, %r34, -2147483647;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p107, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p107;
	bra.uni 	$L__BB0_60;
$L__BB0_58:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p105, %f63, 0f40800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p106, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p106;
$L__BB0_60:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_65:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p113, %f438, 0f7F800000;
	@%p113 bra 	$L__BB0_67;
// %bb.66:
	mov.b32 	%r366, %f60;
	and.b32  	%r367, %r366, -2147483648;
	mov.b32 	%r368, %f750;
	or.b32  	%r369, %r367, %r368;
	mov.b32 	%f750, %r369;
$L__BB0_67:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r370, %f439;
	and.b32  	%r371, %r370, -2147483648;
	or.b32  	%r372, %r371, 1056964608;
	mov.b32 	%f440, %r372;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p114, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p114;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p115, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p115;
	cvt.rzi.s32.f32 	%r373, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r374, %r373, 1;
	setp.eq.b32 	%p116, %r374, 1;
	selp.f32 	%f458, %f456, %f457, %p116;
	selp.f32 	%f459, %f457, %f456, %p116;
	and.b32  	%r375, %r373, 2;
	setp.eq.s32 	%p117, %r375, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p117;
	add.s32 	%r376, %r373, 1;
	and.b32  	%r377, %r376, 2;
	setp.eq.s32 	%p118, %r377, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p118;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p119, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p119;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p120, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p120;
$L__BB0_68:                             // %L526
	cvt.rzi.s32.f32 	%r291, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r42, %r262, 2;
	setp.eq.s32 	%p121, %r42, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p121 bra 	$L__BB0_70;
// %bb.69:                              // %L535
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_70:                             // %L537
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r292, %r291, 1;
	cvt.rzi.s32.f32 	%r308, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p16 bra 	$L__BB0_191;
// %bb.71:
	@%p292 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_72;
$L__BB0_187:
	mov.b32 	%r163, %f788;
	and.b32  	%r384, %r163, 8388607;
	or.b32  	%r3019, %r384, 1065353216;
	mov.b32 	%f787, %r3019;
	add.s32 	%r385, %r163, -1073741824;
	and.b32  	%r3020, %r385, -8388608;
	setp.eq.s32 	%p129, %r3020, 0;
	@%p129 bra 	$L__BB0_190;
// %bb.188:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_189:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r386, %r3020, 192937984;
	add.s32 	%r387, %r3019, %r386;
	mov.b32 	%f479, %r387;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3020, %r3020, %r386;
	mov.b32 	%r3019, %f787;
	setp.ne.s32 	%p130, %r3020, 0;
	setp.ne.s32 	%p131, %r3019, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_189;
$L__BB0_190:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p133, %r163, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_191;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r162, %f189;
	setp.lt.u32 	%p124, %r162, 1073741824;
	@%p124 bra 	$L__BB0_186;
// %bb.73:
	setp.lt.u32 	%p125, %r162, -2147483647;
	@%p125 bra 	$L__BB0_184;
// %bb.74:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p128, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p128;
	bra.uni 	$L__BB0_186;
$L__BB0_184:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p126, %f189, 0f40800000;
	@%p126 bra 	$L__BB0_186;
// %bb.185:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p127, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p127;
$L__BB0_186:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_191:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p31, %r292, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r309, %r308, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p134, %f488, 0f7F800000;
	@%p134 bra 	$L__BB0_193;
// %bb.192:
	mov.b32 	%r388, %f788;
	or.b32  	%r389, %r156, %r388;
	mov.b32 	%f788, %r389;
$L__BB0_193:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p31;
	and.b32  	%r293, %r291, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p51, %r309, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r396, %f489;
	and.b32  	%r397, %r396, -2147483648;
	or.b32  	%r398, %r397, 1056964608;
	mov.b32 	%f490, %r398;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p135, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p135;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p136, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p136;
	cvt.rzi.s32.f32 	%r399, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r400, %r399, 1;
	setp.eq.b32 	%p137, %r400, 1;
	selp.f32 	%f508, %f506, %f507, %p137;
	and.b32  	%r401, %r399, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p142, %f760, 0f40000000;
	@%p142 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p143, %f760, 0f4B800000;
	@%p143 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r46, %f760;
	and.b32  	%r404, %r46, 8388607;
	or.b32  	%r2975, %r404, 1065353216;
	mov.b32 	%f759, %r2975;
	add.s32 	%r405, %r46, -1073741824;
	and.b32  	%r2976, %r405, -8388608;
	setp.eq.s32 	%p149, %r2976, 0;
	@%p149 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r2976, 192937984;
	add.s32 	%r407, %r2975, %r406;
	mov.b32 	%f532, %r407;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2976, %r2976, %r406;
	mov.b32 	%r2975, %f759;
	setp.ne.s32 	%p150, %r2976, 0;
	setp.ne.s32 	%p151, %r2975, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p153, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p144, %r45, 1073741824;
	@%p144 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p145, %r45, -2147483647;
	@%p145 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p148;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p147;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p32, %r293, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r294, %r291, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p51;
	and.b32  	%r310, %r308, 2;
	setp.eq.s32 	%p138, %r401, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r402, %r399, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p154, %f541, 0f7F800000;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r408, %f203;
	and.b32  	%r409, %r408, -2147483648;
	mov.b32 	%r410, %f760;
	or.b32  	%r411, %r409, %r410;
	mov.b32 	%f760, %r411;
$L__BB0_88:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p31;
	selp.f32 	%f249, %f246, %f248, %p32;
	and.b32  	%r295, %r294, 2;
	setp.eq.f32 	%p34, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p52, %r310, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r311, %r308, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p137;
	selp.f32 	%f511, %f508, %f510, %p138;
	and.b32  	%r403, %r402, 2;
	setp.eq.f32 	%p140, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r412, %f542;
	and.b32  	%r413, %r412, -2147483648;
	or.b32  	%r414, %r413, 1056964608;
	mov.b32 	%f543, %r414;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p155, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p155;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p156, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p156;
	cvt.rzi.s32.f32 	%r415, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r416, %r415, 1;
	setp.eq.b32 	%p157, %r416, 1;
	selp.f32 	%f561, %f559, %f560, %p157;
	and.b32  	%r417, %r415, 2;
	setp.eq.s32 	%p158, %r417, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r418, %r415, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r147;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p162, %f764, 0f40000000;
	@%p162 bra 	$L__BB0_100;
// %bb.89:
	setp.gtu.f32 	%p163, %f764, 0f4B800000;
	@%p163 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r54, %f764;
	and.b32  	%r420, %r54, 8388607;
	or.b32  	%r2977, %r420, 1065353216;
	mov.b32 	%f763, %r2977;
	add.s32 	%r421, %r54, -1073741824;
	and.b32  	%r2978, %r421, -8388608;
	setp.eq.s32 	%p169, %r2978, 0;
	@%p169 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r422, %r2978, 192937984;
	add.s32 	%r423, %r2977, %r422;
	mov.b32 	%f584, %r423;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2978, %r2978, %r422;
	mov.b32 	%r2977, %f763;
	setp.ne.s32 	%p170, %r2978, 0;
	setp.ne.s32 	%p171, %r2977, 0;
	and.pred  	%p172, %p170, %p171;
	@%p172 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p173, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p173;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p164, %r53, 1073741824;
	@%p164 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p165, %r53, -2147483647;
	@%p165 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p168, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p168;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p166, %f107, 0f40800000;
	@%p166 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p167, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p167;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p33, %r295, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p34;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p51;
	selp.f32 	%f304, %f301, %f303, %p52;
	and.b32  	%r312, %r311, 2;
	setp.eq.f32 	%p54, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p139, %r403, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p140;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p157;
	selp.f32 	%f564, %f561, %f563, %p158;
	and.b32  	%r419, %r418, 2;
	setp.eq.f32 	%p160, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p174, %f593, 0f7F800000;
	@%p174 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r424, %f104;
	and.b32  	%r425, %r424, -2147483648;
	mov.b32 	%r426, %f764;
	or.b32  	%r427, %r425, %r426;
	mov.b32 	%f764, %r427;
$L__BB0_102:                            // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p33;
	setp.gt.f32 	%p35, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p53, %r312, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p54;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p139;
	setp.gt.f32 	%p141, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p159, %r419, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f102, %f569, %f564, %p160;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r434, %f595;
	and.b32  	%r435, %r434, -2147483648;
	or.b32  	%r436, %r435, 1056964608;
	mov.b32 	%f596, %r436;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p175, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p175;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p176, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p176;
	cvt.rzi.s32.f32 	%r437, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r438, %r437, 1;
	setp.eq.b32 	%p177, %r438, 1;
	selp.f32 	%f614, %f612, %f613, %p177;
	selp.f32 	%f615, %f613, %f612, %p177;
	and.b32  	%r439, %r437, 2;
	setp.eq.s32 	%p178, %r439, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p178;
	add.s32 	%r440, %r437, 1;
	and.b32  	%r441, %r440, 2;
	setp.eq.s32 	%p179, %r441, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p180, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p180;
	abs.f32 	%f623, %f764;
	and.b32  	%r64, %r262, 1;
	shr.u32 	%r65, %r262, 4;
	setp.ne.s32 	%p182, %r64, %r65;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p182 bra 	$L__BB0_118;
// %bb.103:                             // %L742
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p183, %f768, 0f40000000;
	@%p183 bra 	$L__BB0_115;
// %bb.104:
	setp.gtu.f32 	%p184, %f768, 0f4B800000;
	@%p184 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r67, %f768;
	and.b32  	%r442, %r67, 8388607;
	or.b32  	%r2979, %r442, 1065353216;
	mov.b32 	%f767, %r2979;
	add.s32 	%r443, %r67, -1073741824;
	and.b32  	%r2980, %r443, -8388608;
	setp.eq.s32 	%p190, %r2980, 0;
	@%p190 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r444, %r2980, 192937984;
	add.s32 	%r445, %r2979, %r444;
	mov.b32 	%f638, %r445;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2980, %r2980, %r444;
	mov.b32 	%r2979, %f767;
	setp.ne.s32 	%p191, %r2980, 0;
	setp.ne.s32 	%p192, %r2979, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p194, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p185, %r66, 1073741824;
	@%p185 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p186, %r66, -2147483647;
	@%p186 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p189, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p189;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p187, %f124, 0f40800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p188, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p188;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p195, %f647, 0f7F800000;
	@%p195 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r446, %f121;
	and.b32  	%r447, %r446, -2147483648;
	mov.b32 	%r448, %f768;
	or.b32  	%r449, %r447, %r448;
	mov.b32 	%f768, %r449;
$L__BB0_117:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r450, %f648;
	and.b32  	%r451, %r450, -2147483648;
	or.b32  	%r452, %r451, 1056964608;
	mov.b32 	%f649, %r452;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p196, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p196;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p197, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p197;
	cvt.rzi.s32.f32 	%r453, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r454, %r453, 1;
	setp.eq.b32 	%p198, %r454, 1;
	selp.f32 	%f667, %f665, %f666, %p198;
	selp.f32 	%f668, %f666, %f665, %p198;
	and.b32  	%r455, %r453, 2;
	setp.eq.s32 	%p199, %r455, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p199;
	add.s32 	%r456, %r453, 1;
	and.b32  	%r457, %r456, 2;
	setp.eq.s32 	%p200, %r457, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p200;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p201, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p201;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p202, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p202;
$L__BB0_118:                            // %L781
	selp.f32 	%f258, %f257, %f252, %p35;
	selp.f32 	%f306, %f302, %f305, %p53;
	setp.gt.f32 	%p55, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p141;
	selp.f32 	%f567, %f562, %f566, %p159;
	setp.gt.f32 	%p161, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p179;
	setp.gt.f32 	%p181, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r63, %r147, 1;
	mov.f32 	%f781, %f776;
	@%p182 bra 	$L__BB0_134;
// %bb.119:                             // %L784
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p204, %f774, 0f40000000;
	@%p204 bra 	$L__BB0_131;
// %bb.120:
	setp.gtu.f32 	%p205, %f774, 0f4B800000;
	@%p205 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_121;
$L__BB0_127:
	mov.b32 	%r75, %f774;
	and.b32  	%r458, %r75, 8388607;
	or.b32  	%r2981, %r458, 1065353216;
	mov.b32 	%f773, %r2981;
	add.s32 	%r459, %r75, -1073741824;
	and.b32  	%r2982, %r459, -8388608;
	setp.eq.s32 	%p211, %r2982, 0;
	@%p211 bra 	$L__BB0_130;
// %bb.128:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_129:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r460, %r2982, 192937984;
	add.s32 	%r461, %r2981, %r460;
	mov.b32 	%f691, %r461;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2982, %r2982, %r460;
	mov.b32 	%r2981, %f773;
	setp.ne.s32 	%p212, %r2982, 0;
	setp.ne.s32 	%p213, %r2981, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_129;
$L__BB0_130:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p215, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_131;
$L__BB0_121:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p206, %r74, 1073741824;
	@%p206 bra 	$L__BB0_126;
// %bb.122:
	setp.lt.u32 	%p207, %r74, -2147483647;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p210, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p210;
	bra.uni 	$L__BB0_126;
$L__BB0_124:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p208, %f145, 0f40800000;
	@%p208 bra 	$L__BB0_126;
// %bb.125:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p209, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p209;
$L__BB0_126:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_131:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p216, %f700, 0f7F800000;
	@%p216 bra 	$L__BB0_133;
// %bb.132:
	mov.b32 	%r462, %f142;
	and.b32  	%r463, %r462, -2147483648;
	mov.b32 	%r464, %f774;
	or.b32  	%r465, %r463, %r464;
	mov.b32 	%f774, %r465;
$L__BB0_133:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r466, %f701;
	and.b32  	%r467, %r466, -2147483648;
	or.b32  	%r468, %r467, 1056964608;
	mov.b32 	%f702, %r468;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p217, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p217;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p218, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p218;
	cvt.rzi.s32.f32 	%r469, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r470, %r469, 1;
	setp.eq.b32 	%p219, %r470, 1;
	selp.f32 	%f720, %f718, %f719, %p219;
	selp.f32 	%f721, %f719, %f718, %p219;
	and.b32  	%r471, %r469, 2;
	setp.eq.s32 	%p220, %r471, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p220;
	add.s32 	%r472, %r469, 1;
	and.b32  	%r473, %r472, 2;
	setp.eq.s32 	%p221, %r473, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p221;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p222, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p222;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p223, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p223;
$L__BB0_134:                            // %L818
	mov.b32 	%r284, %f258;
	mov.b32 	%r287, %f255;
	selp.f32 	%f17, %f310, %f306, %p55;
	mov.b32 	%r392, %f520;
	mov.b32 	%r395, %f517;
	selp.f32 	%f103, %f571, %f567, %p161;
	selp.f32 	%f625, %f624, %f619, %p181;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p121 bra 	$L__BB0_136;
// %bb.135:                             // %L827
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_136:                            // %L829
	xor.b32  	%r283, %r287, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mov.b32 	%r335, %f17;
	mov.b32 	%r336, %f740;
	mov.b32 	%r338, %f16;
	mov.b32 	%r339, %f741;
	mov.b32 	%r379, %f754;
	mov.b32 	%r380, %f756;
	mov.b32 	%r382, %f755;
	mov.b32 	%r383, %f757;
	xor.b32  	%r391, %r395, -2147483648;
	mov.b32 	%r430, %f625;
	mov.b32 	%r429, %f103;
	mov.b32 	%r433, %f622;
	mov.b32 	%r432, %f102;
	mov.b32 	%r475, %f778;
	mov.b32 	%r476, %f780;
	mov.b32 	%r478, %f779;
	mov.b32 	%r479, %f781;
	setp.gt.u32 	%p225, %r262, 15;
	mov.u32 	%r172, 999999999;
	@%p225 bra 	$L__BB0_138;
// %bb.137:                             // %L859
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mad.lo.s32 	%r481, %r262, 6, %r4;
	cvt.u16.u32 	%rs17, %r481;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r482, %rs22;
	and.b32  	%r483, %r482, 255;
	mul.wide.u32 	%rd22, %r483, 4;
	add.s64 	%rd23, %rd1, %rd22;
	ld.global.u32 	%r484, [%rd23];
	cvt.s32.s16 	%r485, %r484;
	shr.s32 	%r486, %r484, 16;
	mul.lo.s32 	%r487, %r486, 290;
	mad.lo.s32 	%r172, %r485, 33, %r487;
$L__BB0_138:                            // %pass430
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r287, %r284;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r334, %r336, %r335;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r337, %r339, %r338;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r378, %r380, %r379;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r381, %r383, %r382;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r390, %r392, %r391;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r393, %r395, %r392;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r432;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r474, %r476, %r475;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r477, %r479, %r478;
	// end inline asm
	mul.lo.s32 	%r489, %r146, 24;
	shl.b32 	%r490, %r4, 1;
	and.b32  	%r491, %r490, 2;
	shr.u32 	%r492, %r262, 3;
	bfe.u32 	%r493, %r262, 3, 1;
	or.b32  	%r494, %r491, %r493;
	and.b32  	%r495, %r492, 2;
	or.b32  	%r173, %r495, %r63;
	cvt.u16.u32 	%rs25, %r173;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r496, %rs29;
	and.b32  	%r497, %r496, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r498, %rs30, 8;
	add.s32 	%r499, %r489, %r2;
	or.b32  	%r500, %r499, %r494;
	add.s32 	%r501, %r500, %r498;
	mul.wide.u32 	%rd24, %r501, 4;
	add.s64 	%rd25, %rd2, %rd24;
	ld.global.u32 	%r174, [%rd25];
	or.b32  	%r502, %r494, 4;
	cvt.u64.u32 	%rd26, %r498;
	cvt.u64.u32 	%rd27, %r499;
	cvt.u64.u32 	%rd28, %r494;
	add.s64 	%rd29, %rd27, %rd28;
	add.s64 	%rd30, %rd29, %rd26;
	shl.b64 	%rd31, %rd30, 2;
	add.s64 	%rd32, %rd2, %rd31;
	ld.global.u32 	%r175, [%rd32+16];
	cvt.u64.u32 	%rd33, %r489;
	cvt.u64.u32 	%rd34, %r2;
	add.s64 	%rd35, %rd34, %rd33;
	add.s64 	%rd36, %rd35, %rd28;
	add.s64 	%rd37, %rd36, %rd26;
	shl.b64 	%rd38, %rd37, 2;
	add.s64 	%rd39, %rd2, %rd38;
	ld.global.u32 	%r176, [%rd39+384];
	cvt.u64.u32 	%rd40, %r502;
	add.s64 	%rd41, %rd35, %rd40;
	add.s64 	%rd42, %rd41, %rd26;
	shl.b64 	%rd43, %rd42, 2;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.u32 	%r177, [%rd44+384];
	shl.b32 	%r503, %r1, 5;
	shl.b32 	%r504, %r262, 2;
	shl.b32 	%r505, %r4, 2;
	or.b32  	%r178, %r492, %r505;
	and.b32  	%r506, %r504, 28;
	or.b32  	%r179, %r506, %r503;
	or.b32  	%r507, %r492, 24;
	add.s32 	%r180, %r507, %r505;
	and.b32  	%r181, %r262, 4;
	bfe.s32 	%r508, %r262, 2, 1;
	shl.b32 	%r509, %r262, 4;
	and.b32  	%r510, %r159, 8;
	or.b32  	%r511, %r510, %r509;
	bfe.u32 	%r512, %r511, 3, 3;
	mul.lo.s32 	%r182, %r512, 260;
	cvt.u16.u32 	%rs31, %r262;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r513, %rs36;
	and.b32  	%r183, %r513, 255;
	add.s32 	%r514, %r5, 192;
	and.b32  	%r515, %r514, 224;
	add.s32 	%r516, %r4, 6;
	shr.u32 	%r517, %r516, 3;
	mad.lo.s32 	%r184, %r517, 260, %r515;
	add.s32 	%r518, %r5, 128;
	and.b32  	%r519, %r518, 224;
	add.s32 	%r520, %r4, 12;
	shr.u32 	%r521, %r520, 3;
	mad.lo.s32 	%r185, %r521, 260, %r519;
	add.s32 	%r522, %r5, 64;
	and.b32  	%r523, %r522, 224;
	add.s32 	%r524, %r4, 18;
	shr.u32 	%r525, %r524, 3;
	mad.lo.s32 	%r186, %r525, 260, %r523;
	or.b32  	%r187, %r5, 780;
	add.s32 	%r526, %r4, 30;
	shr.u32 	%r527, %r526, 3;
	mad.lo.s32 	%r188, %r527, 260, %r515;
	add.s32 	%r528, %r4, 36;
	shr.u32 	%r529, %r528, 3;
	mad.lo.s32 	%r189, %r529, 260, %r519;
	add.s32 	%r530, %r4, 42;
	shr.u32 	%r531, %r530, 3;
	mad.lo.s32 	%r190, %r531, 260, %r523;
	or.b32  	%r191, %r5, 1560;
	add.s32 	%r532, %r4, 54;
	shr.u32 	%r533, %r532, 3;
	mad.lo.s32 	%r192, %r533, 260, %r515;
	add.s32 	%r534, %r4, 60;
	bfe.u32 	%r535, %r534, 3, 3;
	mad.lo.s32 	%r193, %r535, 260, %r519;
	mul.lo.s32 	%r536, %r146, 870;
	shr.u32 	%r537, %r4, 1;
	cvt.u16.u32 	%rs37, %r537;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r538, %rs42;
	and.b32  	%r194, %r538, 255;
	mad.lo.s32 	%r539, %r494, 33, %r536;
	mad.lo.s32 	%r195, %r497, 290, %r539;
	add.s32 	%r196, %r195, 132;
	setp.lt.u32 	%p227, %r262, 4;
	setp.eq.s32 	%p228, %r147, 1;
	setp.eq.s32 	%p229, %r147, 4;
	setp.eq.s32 	%p230, %r147, 5;
	or.b32  	%r197, %r491, %r65;
	bfe.s32 	%r540, %r262, 3, 1;
	and.b32  	%r198, %r540, 98;
	setp.eq.s32 	%p231, %r64, 0;
	selp.b32 	%r199, 0, 784, %p231;
	selp.b32 	%r200, 0, 392, %p121;
	and.b32  	%r201, %r508, 196;
	or.b32  	%r202, %r199, %r198;
	add.s32 	%r541, %r202, %r200;
	add.s32 	%r203, %r541, %r201;
	or.b32  	%r204, %r197, 4;
	add.s32 	%r542, %r200, %r199;
	add.s32 	%r205, %r542, %r201;
	and.b32  	%r543, %r159, 6;
	shr.u32 	%r544, %r4, 2;
	mul.lo.s32 	%r545, %r544, 98;
	and.b32  	%r546, %r4, 1;
	neg.s32 	%r547, %r546;
	and.b32  	%r548, %r547, 392;
	bfe.s32 	%r549, %r4, 1, 1;
	and.b32  	%r550, %r549, 196;
	and.b32  	%r551, %r540, 1576;
	or.b32  	%r552, %r63, %r543;
	mad.lo.s32 	%r553, %r65, 784, %r545;
	add.s32 	%r554, %r553, %r552;
	add.s32 	%r555, %r554, %r548;
	add.s32 	%r556, %r555, %r550;
	add.s32 	%r206, %r556, %r551;
	add.s32 	%r207, %r206, 8;
	mul.lo.s32 	%r557, %r259, 589824;
	cvt.u16.u32 	%rs43, %r178;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r558, %rs49;
	and.b32  	%r559, %r558, 248;
	and.b32  	%r560, %r262, 7;
	or.b32  	%r561, %r560, %r2;
	add.s32 	%r208, %r561, %r559;
	cvt.s64.s32 	%rd6, %r557;
	add.s32 	%r562, %r195, %r194;
	mul.wide.u32 	%rd45, %r562, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	add.s32 	%r563, %r196, %r194;
	mul.wide.u32 	%rd47, %r563, 4;
	add.s64 	%rd8, %rd46, %rd47;
	cvt.u64.u32 	%rd48, %r195;
	cvt.u64.u16 	%rd49, %rs42;
	and.b64  	%rd50, %rd49, 255;
	add.s64 	%rd51, %rd48, %rd50;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd9, %rd46, %rd52;
	cvt.u64.u32 	%rd53, %r196;
	add.s64 	%rd54, %rd53, %rd50;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd10, %rd46, %rd55;
	or.pred  	%p232, %p227, %p228;
	and.b32  	%r564, %r262, 24;
	setp.eq.s32 	%p233, %r564, 8;
	or.pred  	%p234, %p232, %p233;
	or.pred  	%p235, %p234, %p229;
	setp.eq.s32 	%p236, %r564, 24;
	or.pred  	%p237, %p230, %p236;
	selp.b32 	%r209, 1145324612, -286331154, %p234;
	or.pred  	%p1, %p235, %p237;
	selp.b32 	%r210, 1145324612, -286331154, %p232;
	add.s32 	%r565, %r147, -1;
	setp.lt.u32 	%p238, %r565, 3;
	or.pred  	%p2, %p227, %p238;
	setp.eq.s32 	%p239, %r564, 16;
	or.pred  	%p3, %p239, %p236;
	selp.b32 	%r211, 1145324612, -286331154, %p239;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r85, 0;
	mov.u16 	%rs2, 5;
	mov.u16 	%rs1, 29;
	selp.b32 	%r233, %r210, %r211, %p2;
	or.pred  	%p254, %p2, %p3;
	mov.u32 	%r105, %r85;
	mov.u32 	%r106, %r85;
	mov.u32 	%r107, %r85;
	bra.uni 	$L__BB0_194;
$L__BB0_166:                            // %L30794
                                        //   in Loop: Header=BB0_194 Depth=1
	add.s32 	%r145, %r85, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p291, %r85, 4032;
	mov.u32 	%r85, %r145;
	@%p291 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_167;
$L__BB0_194:                            // %L1614
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_153 Depth 2
	add.s32 	%r566, %r85, %r257;
	setp.lt.s32 	%p240, %r566, %r258;
	@%p240 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_167;
$L__BB0_195:                            // %oksrem814
                                        //   in Loop: Header=BB0_194 Depth=1
	setp.eq.s32 	%p241, %r173, 3;
	setp.gt.u32 	%p242, %r4, 3;
	setp.eq.s32 	%p243, %r181, 0;
	mul.hi.u32 	%r664, %r85, -1431655765;
	shr.u32 	%r665, %r664, 5;
	mul.lo.s32 	%r666, %r665, 48;
	add.s32 	%r667, %r666, %r178;
	cvt.u16.u32 	%rs50, %r667;
	shr.s16 	%rs51, %rs50, 15;
	shr.u16 	%rs52, %rs51, 4;
	add.s16 	%rs53, %rs50, %rs52;
	and.b16  	%rs54, %rs53, -4096;
	sub.s16 	%rs55, %rs50, %rs54;
	cvt.s32.s16 	%r668, %rs55;
	add.s32 	%r669, %r668, %r257;
	mad.lo.s32 	%r670, %r669, 98304, %r179;
	mul.hi.s32 	%r671, %r670, 715827883;
	shr.u32 	%r672, %r671, 31;
	shr.s32 	%r673, %r671, 26;
	add.s32 	%r674, %r673, %r672;
	setp.lt.s32 	%p244, %r670, 0;
	mul.lo.s32 	%r675, %r674, 402653184;
	setp.ne.s32 	%p245, %r675, %r670;
	and.pred  	%p246, %p244, %p245;
	selp.s32 	%r676, -1, 0, %p246;
	add.s32 	%r677, %r674, %r676;
	mad.lo.s32 	%r678, %r677, -402653184, %r670;
	mul.wide.s32 	%rd56, %r678, 4;
	add.s64 	%rd57, %rd3, %rd56;
	ld.global.v4.u32 	{%r679, %r680, %r681, %r682}, [%rd57];
	add.s32 	%r683, %r180, %r666;
	cvt.u16.u32 	%rs56, %r683;
	shr.s16 	%rs57, %rs56, 15;
	shr.u16 	%rs58, %rs57, 4;
	add.s16 	%rs59, %rs56, %rs58;
	and.b16  	%rs60, %rs59, -4096;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.s32.s16 	%r684, %rs61;
	add.s32 	%r685, %r684, %r257;
	mad.lo.s32 	%r686, %r685, 98304, %r179;
	mul.hi.s32 	%r687, %r686, 715827883;
	shr.u32 	%r688, %r687, 31;
	shr.s32 	%r689, %r687, 26;
	add.s32 	%r690, %r689, %r688;
	setp.lt.s32 	%p247, %r686, 0;
	mul.lo.s32 	%r691, %r690, 402653184;
	setp.ne.s32 	%p248, %r691, %r686;
	and.pred  	%p249, %p247, %p248;
	selp.s32 	%r692, -1, 0, %p249;
	add.s32 	%r693, %r690, %r692;
	mad.lo.s32 	%r694, %r693, -402653184, %r686;
	mul.wide.s32 	%rd58, %r694, 4;
	add.s64 	%rd59, %rd3, %rd58;
	ld.global.v4.u32 	{%r695, %r696, %r697, %r698}, [%rd59];
	selp.b32 	%r699, %r681, %r679, %p243;
	shfl.sync.bfly.b32	%r700, %r699, 4, 31, -1;
	selp.b32 	%r569, %r679, %r700, %p243;
	selp.b32 	%r574, %r700, %r681, %p243;
	selp.b32 	%r701, %r682, %r680, %p243;
	shfl.sync.bfly.b32	%r702, %r701, 4, 31, -1;
	selp.b32 	%r577, %r680, %r702, %p243;
	selp.b32 	%r582, %r702, %r682, %p243;
	selp.b32 	%r703, %r697, %r695, %p243;
	shfl.sync.bfly.b32	%r704, %r703, 4, 31, -1;
	selp.b32 	%r585, %r695, %r704, %p243;
	selp.b32 	%r590, %r704, %r697, %p243;
	selp.b32 	%r705, %r698, %r696, %p243;
	shfl.sync.bfly.b32	%r706, %r705, 4, 31, -1;
	selp.b32 	%r593, %r696, %r706, %p243;
	selp.b32 	%r598, %r706, %r698, %p243;
	shl.b32 	%r570, %r574, 4;
	mov.u32 	%r568, 252645135;
	// begin inline asm
	lop3.b32 %r600, %r568, %r569, %r570, 202;
	// end inline asm
	shr.u32 	%r573, %r569, 4;
	// begin inline asm
	lop3.b32 %r616, %r568, %r573, %r574, 202;
	// end inline asm
	shl.b32 	%r578, %r582, 4;
	// begin inline asm
	lop3.b32 %r608, %r568, %r577, %r578, 202;
	// end inline asm
	shr.u32 	%r581, %r577, 4;
	// begin inline asm
	lop3.b32 %r624, %r568, %r581, %r582, 202;
	// end inline asm
	shl.b32 	%r586, %r590, 4;
	// begin inline asm
	lop3.b32 %r601, %r568, %r585, %r586, 202;
	// end inline asm
	shr.u32 	%r589, %r585, 4;
	// begin inline asm
	lop3.b32 %r617, %r568, %r589, %r590, 202;
	// end inline asm
	shl.b32 	%r594, %r598, 4;
	// begin inline asm
	lop3.b32 %r609, %r568, %r593, %r594, 202;
	// end inline asm
	shr.u32 	%r597, %r593, 4;
	// begin inline asm
	lop3.b32 %r625, %r568, %r597, %r598, 202;
	// end inline asm
	mov.u32 	%r602, 25152;
	// begin inline asm
	prmt.b32 %r632, %r600, %r601, %r602;
	// end inline asm
	mov.u32 	%r606, 29521;
	// begin inline asm
	prmt.b32 %r648, %r600, %r601, %r606;
	// end inline asm
	// begin inline asm
	prmt.b32 %r640, %r608, %r609, %r602;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r608, %r609, %r606;
	// end inline asm
	// begin inline asm
	prmt.b32 %r633, %r616, %r617, %r602;
	// end inline asm
	// begin inline asm
	prmt.b32 %r649, %r616, %r617, %r606;
	// end inline asm
	// begin inline asm
	prmt.b32 %r641, %r624, %r625, %r602;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r624, %r625, %r606;
	// end inline asm
	mov.u32 	%r658, 21520;
	// begin inline asm
	prmt.b32 %r631, %r632, %r633, %r658;
	// end inline asm
	mov.u32 	%r662, 30258;
	// begin inline asm
	prmt.b32 %r635, %r632, %r633, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r639, %r640, %r641, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r643, %r640, %r641, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r647, %r648, %r649, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r651, %r648, %r649, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r656, %r657, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r656, %r657, %r662;
	// end inline asm
	mul.hi.s16 	%rs62, %rs50, 10923;
	shr.u16 	%rs63, %rs62, 15;
	shr.s16 	%rs64, %rs62, 2;
	add.s16 	%rs65, %rs64, %rs63;
	mul.lo.s16 	%rs66, %rs65, 24;
	sub.s16 	%rs67, %rs50, %rs66;
	cvt.s32.s16 	%r707, %rs67;
	add.s32 	%r708, %r182, %r707;
	mul.wide.s32 	%rd60, %r708, 4;
	add.s64 	%rd62, %rd46, %rd60;
	st.shared.u32 	[%rd62], %r631;
	add.s32 	%r709, %r708, 128;
	mul.wide.u32 	%rd63, %r709, 4;
	add.s64 	%rd64, %rd46, %rd63;
	st.shared.u32 	[%rd64], %r639;
	add.s32 	%r710, %r708, 64;
	mul.wide.u32 	%rd65, %r710, 4;
	add.s64 	%rd66, %rd46, %rd65;
	st.shared.u32 	[%rd66], %r635;
	add.s32 	%r711, %r708, 192;
	mul.wide.u32 	%rd67, %r711, 4;
	add.s64 	%rd68, %rd46, %rd67;
	st.shared.u32 	[%rd68], %r643;
	add.s32 	%r712, %r708, 32;
	mul.wide.u32 	%rd69, %r712, 4;
	add.s64 	%rd70, %rd46, %rd69;
	st.shared.u32 	[%rd70], %r647;
	add.s32 	%r713, %r708, 160;
	mul.wide.u32 	%rd71, %r713, 4;
	add.s64 	%rd72, %rd46, %rd71;
	st.shared.u32 	[%rd72], %r655;
	add.s32 	%r714, %r708, 96;
	mul.wide.u32 	%rd73, %r714, 4;
	add.s64 	%rd74, %rd46, %rd73;
	st.shared.u32 	[%rd74], %r651;
	add.s32 	%r715, %r708, 224;
	mul.wide.u32 	%rd75, %r715, 4;
	add.s64 	%rd76, %rd46, %rd75;
	st.shared.u32 	[%rd76], %r659;
	bar.sync 	0;
	add.s32 	%r716, %r666, %r183;
	cvt.u16.u32 	%rs68, %r716;
	mul.hi.s16 	%rs69, %rs68, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs68, %rs73;
	cvt.s32.s16 	%r717, %rs74;
	add.s32 	%r718, %r5, %r717;
	mul.wide.s32 	%rd77, %r718, 4;
	add.s64 	%rd78, %rd46, %rd77;
	ld.shared.u32 	%r719, [%rd78];
	add.s32 	%r720, %r184, %r717;
	mul.wide.s32 	%rd79, %r720, 4;
	add.s64 	%rd80, %rd46, %rd79;
	ld.shared.u32 	%r721, [%rd80];
	add.s32 	%r722, %r185, %r717;
	mul.wide.u32 	%rd81, %r722, 4;
	add.s64 	%rd82, %rd46, %rd81;
	ld.shared.u32 	%r723, [%rd82];
	add.s32 	%r724, %r186, %r717;
	mul.wide.u32 	%rd83, %r724, 4;
	add.s64 	%rd84, %rd46, %rd83;
	ld.shared.u32 	%r725, [%rd84];
	add.s32 	%r726, %r187, %r717;
	mul.wide.u32 	%rd85, %r726, 4;
	add.s64 	%rd86, %rd46, %rd85;
	ld.shared.u32 	%r727, [%rd86];
	add.s32 	%r728, %r188, %r717;
	mul.wide.u32 	%rd87, %r728, 4;
	add.s64 	%rd88, %rd46, %rd87;
	ld.shared.u32 	%r729, [%rd88];
	add.s32 	%r730, %r189, %r717;
	mul.wide.u32 	%rd89, %r730, 4;
	add.s64 	%rd90, %rd46, %rd89;
	ld.shared.u32 	%r731, [%rd90];
	add.s32 	%r732, %r190, %r717;
	mul.wide.u32 	%rd91, %r732, 4;
	add.s64 	%rd92, %rd46, %rd91;
	ld.shared.u32 	%r733, [%rd92];
	add.s32 	%r734, %r191, %r717;
	mul.wide.u32 	%rd93, %r734, 4;
	add.s64 	%rd94, %rd46, %rd93;
	ld.shared.u32 	%r735, [%rd94];
	add.s32 	%r736, %r192, %r717;
	mul.wide.u32 	%rd95, %r736, 4;
	add.s64 	%rd96, %rd46, %rd95;
	ld.shared.u32 	%r737, [%rd96];
	add.s32 	%r738, %r193, %r717;
	mul.wide.s32 	%rd97, %r738, 4;
	add.s64 	%rd98, %rd46, %rd97;
	ld.shared.u32 	%r739, [%rd98];
	bar.sync 	0;
	shfl.sync.idx.b32	%r740, %r172, 0, 31, -1;
	shfl.sync.idx.b32	%r741, %r172, 1, 31, -1;
	shfl.sync.idx.b32	%r742, %r172, 2, 31, -1;
	shfl.sync.idx.b32	%r743, %r172, 3, 31, -1;
	shfl.sync.idx.b32	%r744, %r172, 4, 31, -1;
	shfl.sync.idx.b32	%r745, %r172, 5, 31, -1;
	shfl.sync.idx.b32	%r746, %r172, 6, 31, -1;
	shfl.sync.idx.b32	%r747, %r172, 7, 31, -1;
	shfl.sync.idx.b32	%r748, %r172, 8, 31, -1;
	shfl.sync.idx.b32	%r749, %r172, 9, 31, -1;
	shfl.sync.idx.b32	%r750, %r172, 10, 31, -1;
	shfl.sync.idx.b32	%r751, %r172, 11, 31, -1;
	shfl.sync.idx.b32	%r752, %r172, 12, 31, -1;
	shfl.sync.idx.b32	%r753, %r172, 13, 31, -1;
	shfl.sync.idx.b32	%r754, %r172, 14, 31, -1;
	shfl.sync.idx.b32	%r755, %r172, 15, 31, -1;
	add.s32 	%r756, %r740, %r717;
	mul.wide.s32 	%rd99, %r756, 4;
	add.s64 	%rd100, %rd46, %rd99;
	st.shared.u32 	[%rd100], %r719;
	add.s32 	%r757, %r741, %r717;
	mul.wide.s32 	%rd101, %r757, 4;
	add.s64 	%rd102, %rd46, %rd101;
	st.shared.u32 	[%rd102], %r721;
	add.s32 	%r758, %r742, %r717;
	mul.wide.s32 	%rd103, %r758, 4;
	add.s64 	%rd104, %rd46, %rd103;
	st.shared.u32 	[%rd104], %r723;
	add.s32 	%r759, %r743, %r717;
	mul.wide.s32 	%rd105, %r759, 4;
	add.s64 	%rd106, %rd46, %rd105;
	st.shared.u32 	[%rd106], %r725;
	add.s32 	%r760, %r744, %r717;
	mul.wide.s32 	%rd107, %r760, 4;
	add.s64 	%rd108, %rd46, %rd107;
	st.shared.u32 	[%rd108], %r727;
	add.s32 	%r761, %r745, %r717;
	mul.wide.s32 	%rd109, %r761, 4;
	add.s64 	%rd110, %rd46, %rd109;
	st.shared.u32 	[%rd110], %r729;
	add.s32 	%r762, %r746, %r717;
	mul.wide.s32 	%rd111, %r762, 4;
	add.s64 	%rd112, %rd46, %rd111;
	st.shared.u32 	[%rd112], %r731;
	add.s32 	%r763, %r747, %r717;
	mul.wide.s32 	%rd113, %r763, 4;
	add.s64 	%rd114, %rd46, %rd113;
	st.shared.u32 	[%rd114], %r733;
	add.s32 	%r764, %r748, %r717;
	mul.wide.s32 	%rd115, %r764, 4;
	add.s64 	%rd116, %rd46, %rd115;
	st.shared.u32 	[%rd116], %r735;
	add.s32 	%r765, %r749, %r717;
	mul.wide.s32 	%rd117, %r765, 4;
	add.s64 	%rd118, %rd46, %rd117;
	st.shared.u32 	[%rd118], %r737;
	selp.b32 	%r766, 0, %r739, %p242;
	add.s32 	%r767, %r750, %r717;
	mul.wide.s32 	%rd119, %r767, 4;
	add.s64 	%rd120, %rd46, %rd119;
	st.shared.u32 	[%rd120], %r766;
	add.s32 	%r768, %r751, %r717;
	mul.wide.s32 	%rd121, %r768, 4;
	add.s64 	%rd122, %rd46, %rd121;
	mov.u32 	%r663, 0;
	st.shared.u32 	[%rd122], %r663;
	add.s32 	%r769, %r752, %r717;
	mul.wide.s32 	%rd123, %r769, 4;
	add.s64 	%rd124, %rd46, %rd123;
	st.shared.u32 	[%rd124], %r663;
	add.s32 	%r770, %r753, %r717;
	mul.wide.s32 	%rd125, %r770, 4;
	add.s64 	%rd126, %rd46, %rd125;
	st.shared.u32 	[%rd126], %r663;
	add.s32 	%r771, %r754, %r717;
	mul.wide.s32 	%rd127, %r771, 4;
	add.s64 	%rd128, %rd46, %rd127;
	st.shared.u32 	[%rd128], %r663;
	add.s32 	%r772, %r755, %r717;
	mul.wide.s32 	%rd129, %r772, 4;
	add.s64 	%rd130, %rd46, %rd129;
	st.shared.u32 	[%rd130], %r663;
	bar.sync 	0;
	mov.u32 	%r89, %r663;
	mov.u32 	%r90, %r663;
	mov.u32 	%r91, %r663;
	mov.u32 	%r92, %r663;
	mov.u32 	%r93, %r663;
	mov.u32 	%r94, %r663;
	mov.u32 	%r95, %r663;
	mov.u32 	%r96, %r663;
	mov.u32 	%r97, %r663;
	mov.u32 	%r98, %r663;
	mov.u32 	%r99, %r663;
	mov.u32 	%r100, %r663;
	mov.u32 	%r101, %r663;
	mov.u32 	%r102, %r663;
	mov.u32 	%r103, %r663;
	mov.u32 	%r104, %r663;
	@%p241 bra 	$L__BB0_139;
// %bb.196:                             // %oksrem2664
                                        //   in Loop: Header=BB0_194 Depth=1
	add.s32 	%r212, %r666, %r194;
	ld.shared.u32 	%r89, [%rd7];
	ld.shared.u32 	%r90, [%rd8];
	ld.shared.u32 	%r91, [%rd9+12];
	ld.shared.u32 	%r92, [%rd10+12];
	ld.shared.u32 	%r93, [%rd9+24];
	ld.shared.u32 	%r94, [%rd10+24];
	ld.shared.u32 	%r95, [%rd9+36];
	ld.shared.u32 	%r96, [%rd10+36];
	add.s32 	%r773, %r212, 12;
	mul.hi.u32 	%r774, %r773, -1431655765;
	shr.u32 	%r775, %r774, 4;
	mul.lo.s32 	%r776, %r775, 24;
	sub.s32 	%r777, %r773, %r776;
	add.s32 	%r778, %r195, %r777;
	mul.wide.u32 	%rd131, %r778, 4;
	add.s64 	%rd133, %rd46, %rd131;
	ld.shared.u32 	%r97, [%rd133];
	add.s32 	%r779, %r196, %r777;
	mul.wide.u32 	%rd134, %r779, 4;
	add.s64 	%rd135, %rd46, %rd134;
	ld.shared.u32 	%r98, [%rd135];
	cvt.u16.u32 	%rs75, %r212;
	add.s16 	%rs76, %rs75, 15;
	mul.hi.s16 	%rs77, %rs76, 10923;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 2;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 24;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.s32.s16 	%r780, %rs82;
	add.s32 	%r781, %r195, %r780;
	mul.wide.s32 	%rd136, %r781, 4;
	add.s64 	%rd137, %rd46, %rd136;
	ld.shared.u32 	%r99, [%rd137];
	add.s32 	%r782, %r196, %r780;
	mul.wide.u32 	%rd138, %r782, 4;
	add.s64 	%rd139, %rd46, %rd138;
	ld.shared.u32 	%r100, [%rd139];
	add.s16 	%rs83, %rs75, 18;
	mul.hi.s16 	%rs84, %rs83, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r783, %rs89;
	add.s32 	%r784, %r195, %r783;
	mul.wide.s32 	%rd140, %r784, 4;
	add.s64 	%rd141, %rd46, %rd140;
	ld.shared.u32 	%r101, [%rd141];
	add.s32 	%r785, %r196, %r783;
	mul.wide.u32 	%rd142, %r785, 4;
	add.s64 	%rd143, %rd46, %rd142;
	ld.shared.u32 	%r102, [%rd143];
	add.s16 	%rs90, %rs75, 21;
	mul.hi.s16 	%rs91, %rs90, 10923;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 2;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 24;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.s32.s16 	%r786, %rs96;
	add.s32 	%r787, %r195, %r786;
	mul.wide.s32 	%rd144, %r787, 4;
	add.s64 	%rd145, %rd46, %rd144;
	ld.shared.u32 	%r103, [%rd145];
	add.s32 	%r788, %r196, %r786;
	mul.wide.u32 	%rd146, %r788, 4;
	add.s64 	%rd147, %rd46, %rd146;
	ld.shared.u32 	%r104, [%rd147];
$L__BB0_139:                            // %L8741
                                        //   in Loop: Header=BB0_194 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r108, %r663;
	bra.uni 	$L__BB0_140;
$L__BB0_150:                            // %L19757
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r105, 0;
	mov.u32 	%r107, %r105;
$L__BB0_151:                            // %L19758
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r108, %r108, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p270, %r108, 24;
	@%p270 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_152;
$L__BB0_140:                            // %L8759
                                        //   Parent Loop BB0_194 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p250, %r108, 0;
	selp.b32 	%r1182, %r89, 0, %p250;
	setp.eq.s32 	%p251, %r108, 6;
	selp.b32 	%r1183, %r93, %r1182, %p251;
	setp.eq.s32 	%p252, %r108, 12;
	selp.b32 	%r1184, %r97, %r1183, %p252;
	setp.eq.s32 	%p253, %r108, 18;
	selp.b32 	%r1185, %r101, %r1184, %p253;
	selp.b32 	%r1186, %r90, 0, %p250;
	selp.b32 	%r1187, %r94, %r1186, %p251;
	selp.b32 	%r1188, %r98, %r1187, %p252;
	selp.b32 	%r1189, %r102, %r1188, %p253;
	selp.b32 	%r1190, %r91, 0, %p250;
	selp.b32 	%r1191, %r95, %r1190, %p251;
	selp.b32 	%r1192, %r99, %r1191, %p252;
	selp.b32 	%r1193, %r103, %r1192, %p253;
	selp.b32 	%r1194, %r92, 0, %p250;
	selp.b32 	%r1195, %r96, %r1194, %p251;
	selp.b32 	%r1196, %r100, %r1195, %p252;
	selp.b32 	%r1197, %r104, %r1196, %p253;
	mov.u16 	%rs134, 25600;
	// begin inline asm
	mov.b32 %r795, {%rs134, %rs134};
	// end inline asm
	mov.u16 	%rs136, 21504;
	// begin inline asm
	mov.b32 %r806, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r794, %r1185, -2004318072;
	mov.u32 	%r931, 983055;
	// begin inline asm
	lop3.b32 %r792, %r931, %r794, %r795, 202;
	// end inline asm
	mov.u16 	%rs140, 18432;
	// begin inline asm
	mov.b32 %r796, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r797, %r795, %r796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r800, %r792, %r797;
	// end inline asm
	mov.u32 	%r942, 15728880;
	// begin inline asm
	lop3.b32 %r803, %r942, %r794, %r806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r807, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r808, %r806, %r807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r811, %r803, %r808;
	// end inline asm
	// begin inline asm
	mov.b32 %r841, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r852, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r840, %r1189, -2004318072;
	// begin inline asm
	lop3.b32 %r838, %r931, %r840, %r841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r842, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r843, %r841, %r842;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r846, %r838, %r843;
	// end inline asm
	// begin inline asm
	lop3.b32 %r849, %r942, %r840, %r852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r853, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r854, %r852, %r853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r857, %r849, %r854;
	// end inline asm
	// begin inline asm
	mov.b32 %r887, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r898, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r886, %r1193, -2004318072;
	// begin inline asm
	lop3.b32 %r884, %r931, %r886, %r887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r888, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r889, %r887, %r888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r892, %r884, %r889;
	// end inline asm
	// begin inline asm
	lop3.b32 %r895, %r942, %r886, %r898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r899, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r900, %r898, %r899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r903, %r895, %r900;
	// end inline asm
	// begin inline asm
	mov.b32 %r933, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r944, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r932, %r1197, -2004318072;
	// begin inline asm
	lop3.b32 %r930, %r931, %r932, %r933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r935, %r933, %r934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r938, %r930, %r935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r941, %r942, %r932, %r944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r945, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r946, %r944, %r945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r949, %r941, %r946;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r800;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r974, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r846;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r977, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r811;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r980, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r857;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r983, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r892;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r986, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r938;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r989, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r903;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r992, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r949;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r995, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r998, %r999}, {%r282, %r285}, {%r974}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1005, %r1006}, {%r282, %r285}, {%r977}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1012, %r1013}, {%r282, %r285}, {%r980}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1019, %r1020}, {%r282, %r285}, {%r983}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1026, %r1027}, {%r282, %r285}, {%r986}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1033, %r1034}, {%r282, %r285}, {%r989}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1040, %r1041}, {%r282, %r285}, {%r992}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1047, %r1048}, {%r282, %r285}, {%r995}, {%r663, %r663};
	// end inline asm
	@%p1 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_141;
$L__BB0_197:                            // %pass4004
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1054, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1056, %r1054, %r999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1059, %r334, %r998, %r1056;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1063, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1065, %r1063, %r1006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1068, %r334, %r1005, %r1065;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1072, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1074, %r1072, %r1013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1077, %r334, %r1012, %r1074;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1081, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1083, %r1081, %r1020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1086, %r334, %r1019, %r1083;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1090, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1092, %r1090, %r1027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1095, %r334, %r1026, %r1092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1099, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1101, %r1099, %r1034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1104, %r334, %r1033, %r1101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1108, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1110, %r1108, %r1041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r334, %r1040, %r1110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1117, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1119, %r1117, %r1048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1122, %r334, %r1047, %r1119;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1126, %r337, %r998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r334, %r999, %r1126;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1133, %r337, %r1005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1136, %r334, %r1006, %r1133;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1140, %r337, %r1012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r334, %r1013, %r1140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1147, %r337, %r1019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1150, %r334, %r1020, %r1147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1154, %r337, %r1026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r334, %r1027, %r1154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1161, %r337, %r1033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1164, %r334, %r1034, %r1161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1168, %r337, %r1040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1171, %r334, %r1041, %r1168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1175, %r337, %r1047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r334, %r1048, %r1175;
	// end inline asm
	mov.u32 	%r1347, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1271, %r1272}, {%r378, %r381}, {%r1059, %r1129}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1279, %r1280}, {%r378, %r381}, {%r1068, %r1136}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1287, %r1288}, {%r378, %r381}, {%r1077, %r1143}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1295, %r1296}, {%r378, %r381}, {%r1086, %r1150}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1303, %r1304}, {%r378, %r381}, {%r1095, %r1157}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1311, %r1312}, {%r378, %r381}, {%r1104, %r1164}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1319, %r1320}, {%r378, %r381}, {%r1113, %r1171}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1327, %r1328}, {%r378, %r381}, {%r1122, %r1178}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1270, %r1271, %r1272, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1274, %r1271, %r1272, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1279, %r1280, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1279, %r1280, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1287, %r1288, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1287, %r1288, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1295, %r1296, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1298, %r1295, %r1296, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1302, %r1303, %r1304, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1306, %r1303, %r1304, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1310, %r1311, %r1312, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1314, %r1311, %r1312, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1318, %r1319, %r1320, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1322, %r1319, %r1320, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1326, %r1327, %r1328, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1330, %r1327, %r1328, %r662;
	// end inline asm
	add.s16 	%rs145, %rs9, %rs3;
	add.s16 	%rs146, %rs145, -5;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	add.s16 	%rs149, %rs147, %rs148;
	mul.lo.s16 	%rs150, %rs149, 6;
	sub.s16 	%rs151, %rs146, %rs150;
	mul.wide.s16 	%r1380, %rs151, 16;
	or.b32  	%r1381, %r197, %r1380;
	add.s32 	%r1382, %r203, %r1381;
	mul.wide.s32 	%rd150, %r1382, 4;
	add.s64 	%rd152, %rd46, %rd150;
	st.shared.u32 	[%rd152], %r1270;
	cvt.s64.s32 	%rd153, %r1381;
	cvt.u64.u32 	%rd154, %r201;
	cvt.u64.u32 	%rd155, %r200;
	cvt.u64.u32 	%rd156, %r199;
	cvt.u64.u32 	%rd157, %r198;
	add.s64 	%rd158, %rd156, %rd155;
	add.s64 	%rd12, %rd158, %rd154;
	add.s64 	%rd11, %rd12, %rd157;
	add.s64 	%rd159, %rd11, %rd153;
	shl.b64 	%rd160, %rd159, 2;
	add.s64 	%rd161, %rd46, %rd160;
	st.shared.u32 	[%rd161+6304], %r1274;
	or.b32  	%r1383, %r204, %r1380;
	add.s32 	%r1384, %r203, %r1383;
	mul.wide.s32 	%rd162, %r1384, 4;
	add.s64 	%rd163, %rd46, %rd162;
	st.shared.u32 	[%rd163], %r1278;
	cvt.s64.s32 	%rd164, %r1383;
	add.s64 	%rd165, %rd11, %rd164;
	shl.b64 	%rd166, %rd165, 2;
	add.s64 	%rd167, %rd46, %rd166;
	st.shared.u32 	[%rd167+6304], %r1282;
	add.s32 	%r1385, %r1381, %r198;
	or.b32  	%r1386, %r1385, 8;
	add.s32 	%r1387, %r205, %r1386;
	mul.wide.s32 	%rd168, %r1387, 4;
	add.s64 	%rd169, %rd46, %rd168;
	st.shared.u32 	[%rd169], %r1286;
	cvt.s64.s32 	%rd170, %r1386;
	add.s64 	%rd171, %rd12, %rd170;
	shl.b64 	%rd172, %rd171, 2;
	add.s64 	%rd173, %rd46, %rd172;
	st.shared.u32 	[%rd173+6304], %r1290;
	cvt.u64.u32 	%rd174, %r202;
	add.s64 	%rd175, %rd174, %rd155;
	add.s64 	%rd13, %rd175, %rd154;
	add.s64 	%rd176, %rd13, %rd164;
	shl.b64 	%rd177, %rd176, 2;
	add.s64 	%rd178, %rd46, %rd177;
	st.shared.u32 	[%rd178+32], %r1294;
	st.shared.u32 	[%rd167+6336], %r1298;
	add.s16 	%rs152, %rs145, -2;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	add.s16 	%rs155, %rs153, %rs154;
	mul.lo.s16 	%rs156, %rs155, 6;
	sub.s16 	%rs157, %rs152, %rs156;
	mul.wide.s16 	%r1388, %rs157, 16;
	or.b32  	%r1389, %r197, %r1388;
	add.s32 	%r1390, %r203, %r1389;
	mul.wide.s32 	%rd179, %r1390, 4;
	add.s64 	%rd180, %rd46, %rd179;
	st.shared.u32 	[%rd180], %r1302;
	cvt.s64.s32 	%rd181, %r1389;
	add.s64 	%rd182, %rd11, %rd181;
	shl.b64 	%rd183, %rd182, 2;
	add.s64 	%rd184, %rd46, %rd183;
	st.shared.u32 	[%rd184+6304], %r1306;
	or.b32  	%r1391, %r204, %r1388;
	add.s32 	%r1392, %r203, %r1391;
	mul.wide.s32 	%rd185, %r1392, 4;
	add.s64 	%rd186, %rd46, %rd185;
	st.shared.u32 	[%rd186], %r1310;
	cvt.s64.s32 	%rd187, %r1391;
	add.s64 	%rd188, %rd11, %rd187;
	shl.b64 	%rd189, %rd188, 2;
	add.s64 	%rd190, %rd46, %rd189;
	st.shared.u32 	[%rd190+6304], %r1314;
	add.s32 	%r1393, %r1389, %r198;
	or.b32  	%r1394, %r1393, 8;
	add.s32 	%r1395, %r205, %r1394;
	mul.wide.s32 	%rd191, %r1395, 4;
	add.s64 	%rd192, %rd46, %rd191;
	st.shared.u32 	[%rd192], %r1318;
	cvt.s64.s32 	%rd193, %r1394;
	add.s64 	%rd194, %rd12, %rd193;
	shl.b64 	%rd195, %rd194, 2;
	add.s64 	%rd196, %rd46, %rd195;
	st.shared.u32 	[%rd196+6304], %r1322;
	add.s64 	%rd197, %rd13, %rd187;
	shl.b64 	%rd198, %rd197, 2;
	add.s64 	%rd199, %rd46, %rd198;
	st.shared.u32 	[%rd199+32], %r1326;
	st.shared.u32 	[%rd190+6336], %r1330;
	bar.sync 	0;
	add.s16 	%rs158, %rs3, -5;
	mul.hi.s16 	%rs159, %rs158, 10923;
	shr.u16 	%rs160, %rs159, 15;
	add.s16 	%rs161, %rs159, %rs160;
	mul.lo.s16 	%rs162, %rs161, 6;
	sub.s16 	%rs163, %rs158, %rs162;
	mul.wide.s16 	%r1396, %rs163, 16;
	add.s32 	%r1397, %r206, %r1396;
	mul.wide.s32 	%rd200, %r1397, 4;
	add.s64 	%rd201, %rd46, %rd200;
	ld.shared.u32 	%r1338, [%rd201];
	add.s32 	%r1398, %r207, %r1396;
	mul.wide.s32 	%rd202, %r1398, 4;
	add.s64 	%rd203, %rd46, %rd202;
	ld.shared.u32 	%r1345, [%rd203];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1334, %r1335}, {%r390, %r393}, {%r1338}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1341, %r1342}, {%r390, %r393}, {%r1345}, {%r1347, %r1347};
	// end inline asm
	@%p254 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_198;
$L__BB0_199:                            // %pass6644
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1348, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1350, %r1348, %r1335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1353, %r428, %r1334, %r1350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1357, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1359, %r1357, %r1342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r428, %r1341, %r1359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1366, %r431, %r1334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1369, %r428, %r1335, %r1366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1373, %r431, %r1341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1376, %r428, %r1342, %r1373;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1418, %r1421}, {%r474, %r477}, {%r1353, %r1369}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1425, %r1429}, {%r474, %r477}, {%r1362, %r1376}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1417, %r1418, %r1418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1420, %r1421, %r1421, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r1425, %r1425, %r1420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1428, %r1429, %r1429, %r1424;
	// end inline asm
	mov.u32 	%r1516, 469769216;
	// begin inline asm
	fma.rn.f16x2 %r1432, %r1516, %r1428, %r107;
	// end inline asm
	add.s32 	%r1519, %r85, %r108;
	add.s32 	%r1520, %r1519, 1;
	mul.hi.u32 	%r1521, %r1520, -1431655765;
	shr.u32 	%r1522, %r1521, 2;
	mul.lo.s32 	%r1523, %r1522, 6;
	sub.s32 	%r1524, %r1520, %r1523;
	shl.b32 	%r1525, %r1524, 4;
	add.s32 	%r1526, %r206, %r1525;
	mul.wide.u32 	%rd206, %r1526, 4;
	add.s64 	%rd208, %rd46, %rd206;
	ld.shared.u32 	%r1440, [%rd208];
	add.s32 	%r1527, %r207, %r1525;
	mul.wide.u32 	%rd209, %r1527, 4;
	add.s64 	%rd210, %rd46, %rd209;
	ld.shared.u32 	%r1447, [%rd210];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1457, %r1454}, {%r390, %r393}, {%r1440}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1466, %r1463}, {%r390, %r393}, {%r1447}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1450, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1452, %r1450, %r1454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1455, %r428, %r1457, %r1452;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1459, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1461, %r1459, %r1463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1464, %r428, %r1466, %r1461;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1468, %r431, %r1457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1471, %r428, %r1454, %r1468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1475, %r431, %r1466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1478, %r428, %r1463, %r1475;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1501, %r1504}, {%r474, %r477}, {%r1455, %r1471}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1508, %r1512}, {%r474, %r477}, {%r1464, %r1478}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1500, %r1501, %r1501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r1504, %r1504, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r1508, %r1508, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1511, %r1512, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3024, %r1516, %r1511, %r1432;
	// end inline asm
	add.s32 	%r3022, %r105, 2;
	setp.eq.s32 	%p255, %r3022, 32;
	setp.gt.u32 	%p297, %r262, 7;
	@%p255 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_200;
$L__BB0_142:                            // %L15631
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_144;
// %bb.143:                             // %L15691
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1528, %r106, 589824, %r208;
	cvt.u64.u32 	%rd211, %r1528;
	add.s64 	%rd212, %rd211, %rd6;
	mul.hi.s64 	%rd213, %rd212, 1024819115206086201;
	shr.u64 	%rd214, %rd213, 63;
	shr.s64 	%rd215, %rd213, 24;
	add.s64 	%rd216, %rd215, %rd214;
	setp.lt.s64 	%p257, %rd212, 0;
	mul.lo.s64 	%rd217, %rd216, 301989888;
	setp.ne.s64 	%p258, %rd217, %rd212;
	and.pred  	%p259, %p257, %p258;
	selp.s64 	%rd218, -1, 0, %p259;
	add.s64 	%rd219, %rd216, %rd218;
	mul.lo.s64 	%rd220, %rd219, -301989888;
	add.s64 	%rd221, %rd220, %rd212;
	shl.b64 	%rd222, %rd221, 2;
	add.s64 	%rd223, %rd4, %rd222;
	st.global.u32 	[%rd223], %r3024;
$L__BB0_144:                            // %L15845
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3022, 0;
	mov.u32 	%r3024, %r3022;
$L__BB0_200:                            // %oksrem7162
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs164, %rs3, -3;
	mul.hi.s16 	%rs165, %rs164, 10923;
	shr.u16 	%rs166, %rs165, 15;
	add.s16 	%rs167, %rs165, %rs166;
	mul.lo.s16 	%rs168, %rs167, 6;
	sub.s16 	%rs169, %rs164, %rs168;
	mul.wide.s16 	%r1696, %rs169, 16;
	add.s32 	%r1697, %r206, %r1696;
	mul.wide.s32 	%rd224, %r1697, 4;
	add.s64 	%rd226, %rd46, %rd224;
	ld.shared.u32 	%r1534, [%rd226];
	add.s32 	%r1698, %r207, %r1696;
	mul.wide.s32 	%rd227, %r1698, 4;
	add.s64 	%rd228, %rd46, %rd227;
	ld.shared.u32 	%r1541, [%rd228];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1551, %r1548}, {%r390, %r393}, {%r1534}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1560, %r1557}, {%r390, %r393}, {%r1541}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1544, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1546, %r1544, %r1548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1549, %r428, %r1551, %r1546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1553, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1555, %r1553, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r428, %r1560, %r1555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1562, %r431, %r1551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1565, %r428, %r1548, %r1562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r431, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r428, %r1557, %r1569;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1595, %r1598}, {%r474, %r477}, {%r1549, %r1565}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1602, %r1606}, {%r474, %r477}, {%r1558, %r1572}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1594, %r1595, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1597, %r1598, %r1598, %r1594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1601, %r1602, %r1602, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r1606, %r1606, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r1516, %r1605, %r3024;
	// end inline asm
	add.s16 	%rs170, %rs3, -2;
	mul.hi.s16 	%rs171, %rs170, 10923;
	shr.u16 	%rs172, %rs171, 15;
	add.s16 	%rs173, %rs171, %rs172;
	mul.lo.s16 	%rs174, %rs173, 6;
	sub.s16 	%rs175, %rs170, %rs174;
	mul.wide.s16 	%r1699, %rs175, 16;
	add.s32 	%r1700, %r206, %r1699;
	mul.wide.s32 	%rd229, %r1700, 4;
	add.s64 	%rd230, %rd46, %rd229;
	ld.shared.u32 	%r1617, [%rd230];
	add.s32 	%r1701, %r207, %r1699;
	mul.wide.s32 	%rd231, %r1701, 4;
	add.s64 	%rd232, %rd46, %rd231;
	ld.shared.u32 	%r1624, [%rd232];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1634, %r1631}, {%r390, %r393}, {%r1617}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1643, %r1640}, {%r390, %r393}, {%r1624}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1627, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1629, %r1627, %r1631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1632, %r428, %r1634, %r1629;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1636, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1638, %r1636, %r1640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r428, %r1643, %r1638;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1645, %r431, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r428, %r1631, %r1645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r431, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r428, %r1640, %r1652;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1678, %r1681}, {%r474, %r477}, {%r1632, %r1648}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1685, %r1689}, {%r474, %r477}, {%r1641, %r1655}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1677, %r1678, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r1681, %r1681, %r1677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r1685, %r1685, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r1689, %r1689, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r1516, %r1688, %r1609;
	// end inline asm
	add.s32 	%r3025, %r3022, 2;
	setp.eq.s32 	%p260, %r3025, 32;
	@%p260 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_201;
$L__BB0_145:                            // %L17587
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_147;
// %bb.146:                             // %L17647
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1702, %r106, 589824, %r208;
	cvt.u64.u32 	%rd233, %r1702;
	add.s64 	%rd234, %rd233, %rd6;
	mul.hi.s64 	%rd235, %rd234, 1024819115206086201;
	shr.u64 	%rd236, %rd235, 63;
	shr.s64 	%rd237, %rd235, 24;
	add.s64 	%rd238, %rd237, %rd236;
	setp.lt.s64 	%p262, %rd234, 0;
	mul.lo.s64 	%rd239, %rd238, 301989888;
	setp.ne.s64 	%p263, %rd239, %rd234;
	and.pred  	%p264, %p262, %p263;
	selp.s64 	%rd240, -1, 0, %p264;
	add.s64 	%rd241, %rd238, %rd240;
	mul.lo.s64 	%rd242, %rd241, -301989888;
	add.s64 	%rd243, %rd242, %rd234;
	shl.b64 	%rd244, %rd243, 2;
	add.s64 	%rd245, %rd4, %rd244;
	st.global.u32 	[%rd245], %r3027;
$L__BB0_147:                            // %L17801
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3025, 0;
	mov.u32 	%r3027, %r3025;
$L__BB0_201:                            // %oksrem8018
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs176, %rs3, -1;
	mul.hi.s16 	%rs177, %rs176, 10923;
	shr.u16 	%rs178, %rs177, 15;
	add.s16 	%rs179, %rs177, %rs178;
	mul.lo.s16 	%rs180, %rs179, 6;
	sub.s16 	%rs181, %rs176, %rs180;
	mul.wide.s16 	%r1870, %rs181, 16;
	add.s32 	%r1871, %r206, %r1870;
	mul.wide.s32 	%rd246, %r1871, 4;
	add.s64 	%rd248, %rd46, %rd246;
	ld.shared.u32 	%r1708, [%rd248];
	add.s32 	%r1872, %r207, %r1870;
	mul.wide.s32 	%rd249, %r1872, 4;
	add.s64 	%rd250, %rd46, %rd249;
	ld.shared.u32 	%r1715, [%rd250];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1725, %r1722}, {%r390, %r393}, {%r1708}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1734, %r1731}, {%r390, %r393}, {%r1715}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1718, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1720, %r1718, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r428, %r1725, %r1720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1727, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1729, %r1727, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r428, %r1734, %r1729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r431, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r428, %r1722, %r1736;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1743, %r431, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r428, %r1731, %r1743;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1769, %r1772}, {%r474, %r477}, {%r1723, %r1739}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1776, %r1780}, {%r474, %r477}, {%r1732, %r1746}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r1769, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r1772, %r1772, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r1776, %r1776, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r1780, %r1780, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r1516, %r1779, %r3027;
	// end inline asm
	mul.hi.s16 	%rs182, %rs3, 10923;
	shr.u16 	%rs183, %rs182, 15;
	add.s16 	%rs184, %rs182, %rs183;
	mul.lo.s16 	%rs185, %rs184, 6;
	sub.s16 	%rs186, %rs3, %rs185;
	mul.wide.s16 	%r1873, %rs186, 16;
	add.s32 	%r1874, %r206, %r1873;
	mul.wide.s32 	%rd251, %r1874, 4;
	add.s64 	%rd252, %rd46, %rd251;
	ld.shared.u32 	%r1791, [%rd252];
	add.s32 	%r1875, %r207, %r1873;
	mul.wide.s32 	%rd253, %r1875, 4;
	add.s64 	%rd254, %rd46, %rd253;
	ld.shared.u32 	%r1798, [%rd254];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1808, %r1805}, {%r390, %r393}, {%r1791}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1817, %r1814}, {%r390, %r393}, {%r1798}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1801, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r1801, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r428, %r1808, %r1803;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1810, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1812, %r1810, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r428, %r1817, %r1812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1819, %r431, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r428, %r1805, %r1819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1826, %r431, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r428, %r1814, %r1826;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1852, %r1855}, {%r474, %r477}, {%r1806, %r1822}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1859, %r1863}, {%r474, %r477}, {%r1815, %r1829}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1851, %r1852, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1854, %r1855, %r1855, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r1859, %r1859, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1862, %r1863, %r1863, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r107, %r1516, %r1862, %r1783;
	// end inline asm
	add.s32 	%r105, %r3025, 2;
	setp.eq.s32 	%p265, %r105, 32;
	@%p265 bra 	$L__BB0_148;
	bra.uni 	$L__BB0_151;
$L__BB0_148:                            // %L19543
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_150;
// %bb.149:                             // %L19603
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1876, %r106, 589824, %r208;
	cvt.u64.u32 	%rd255, %r1876;
	add.s64 	%rd256, %rd255, %rd6;
	mul.hi.s64 	%rd257, %rd256, 1024819115206086201;
	shr.u64 	%rd258, %rd257, 63;
	shr.s64 	%rd259, %rd257, 24;
	add.s64 	%rd260, %rd259, %rd258;
	setp.lt.s64 	%p267, %rd256, 0;
	mul.lo.s64 	%rd261, %rd260, 301989888;
	setp.ne.s64 	%p268, %rd261, %rd256;
	and.pred  	%p269, %p267, %p268;
	selp.s64 	%rd262, -1, 0, %p269;
	add.s64 	%rd263, %rd260, %rd262;
	mul.lo.s64 	%rd264, %rd263, -301989888;
	add.s64 	%rd265, %rd264, %rd256;
	shl.b64 	%rd266, %rd265, 2;
	add.s64 	%rd267, %rd4, %rd266;
	st.global.u32 	[%rd267], %r107;
	bra.uni 	$L__BB0_150;
$L__BB0_152:                            // %L19779.preheader
                                        //   in Loop: Header=BB0_194 Depth=1
	mov.u16 	%rs287, %rs1;
	mov.u32 	%r3013, %r1347;
	bra.uni 	$L__BB0_153;
$L__BB0_164:                            // %L30777
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r105, %r2762;
	mov.u32 	%r107, %r2762;
$L__BB0_165:                            // %L30778
                                        //   in Loop: Header=BB0_153 Depth=2
	bar.sync 	0;
	add.s32 	%r3013, %r3013, 6;
	add.s16 	%rs287, %rs287, 6;
	setp.ne.s32 	%p290, %r3013, 24;
	@%p290 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_166;
$L__BB0_153:                            // %L19779
                                        //   Parent Loop BB0_194 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p271, %r3013, 0;
	selp.b32 	%r2573, %r89, 0, %p271;
	setp.eq.s32 	%p272, %r3013, 6;
	selp.b32 	%r2574, %r93, %r2573, %p272;
	setp.eq.s32 	%p273, %r3013, 12;
	selp.b32 	%r2575, %r97, %r2574, %p273;
	setp.eq.s32 	%p274, %r3013, 18;
	selp.b32 	%r2576, %r101, %r2575, %p274;
	selp.b32 	%r2577, %r90, 0, %p271;
	selp.b32 	%r2578, %r94, %r2577, %p272;
	selp.b32 	%r2579, %r98, %r2578, %p273;
	selp.b32 	%r2580, %r102, %r2579, %p274;
	selp.b32 	%r2581, %r91, 0, %p271;
	selp.b32 	%r2582, %r95, %r2581, %p272;
	selp.b32 	%r2583, %r99, %r2582, %p273;
	selp.b32 	%r2584, %r103, %r2583, %p274;
	selp.b32 	%r2585, %r92, 0, %p271;
	selp.b32 	%r2586, %r96, %r2585, %p272;
	selp.b32 	%r2587, %r100, %r2586, %p273;
	selp.b32 	%r2588, %r104, %r2587, %p274;
	// begin inline asm
	mov.b32 %r1906, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r1917, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2589, %r2576, 8;
	xor.b32  	%r1916, %r2589, 8947848;
	// begin inline asm
	lop3.b32 %r1903, %r931, %r1916, %r1906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1907, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1908, %r1906, %r1907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1911, %r1903, %r1908;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1914, %r942, %r1916, %r1917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1918, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1919, %r1917, %r1918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1922, %r1914, %r1919;
	// end inline asm
	// begin inline asm
	mov.b32 %r1952, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r1963, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2590, %r2580, 8;
	xor.b32  	%r1962, %r2590, 8947848;
	// begin inline asm
	lop3.b32 %r1949, %r931, %r1962, %r1952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1953, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1954, %r1952, %r1953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1957, %r1949, %r1954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1960, %r942, %r1962, %r1963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1964, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1965, %r1963, %r1964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1968, %r1960, %r1965;
	// end inline asm
	// begin inline asm
	mov.b32 %r1998, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r2009, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2591, %r2584, 8;
	xor.b32  	%r2008, %r2591, 8947848;
	// begin inline asm
	lop3.b32 %r1995, %r931, %r2008, %r1998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1999, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2000, %r1998, %r1999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2003, %r1995, %r2000;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2006, %r942, %r2008, %r2009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2010, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2011, %r2009, %r2010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2014, %r2006, %r2011;
	// end inline asm
	// begin inline asm
	mov.b32 %r2044, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r2055, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2592, %r2588, 8;
	xor.b32  	%r2054, %r2592, 8947848;
	// begin inline asm
	lop3.b32 %r2041, %r931, %r2054, %r2044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2045, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2046, %r2044, %r2045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2049, %r2041, %r2046;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2052, %r942, %r2054, %r2055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2056, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2057, %r2055, %r2056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2060, %r2052, %r2057;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r1911;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r1957;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1922;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1968;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2072, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r2003;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2075, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2049;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2078, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2014;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2081, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2060;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2084, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2150, %r2147}, {%r282, %r285}, {%r2063}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2159, %r2156}, {%r282, %r285}, {%r2066}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2168, %r2165}, {%r282, %r285}, {%r2069}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2177, %r2174}, {%r282, %r285}, {%r2072}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2186, %r2183}, {%r282, %r285}, {%r2075}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2195, %r2192}, {%r282, %r285}, {%r2078}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2204, %r2201}, {%r282, %r285}, {%r2081}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2213, %r2210}, {%r282, %r285}, {%r2084}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2143, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r2143, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r334, %r2150, %r2145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2152, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2154, %r2152, %r2156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r334, %r2159, %r2154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2161, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2163, %r2161, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r334, %r2168, %r2163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2170, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r2170, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r334, %r2177, %r2172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2179, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r2179, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r334, %r2186, %r2181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2188, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2190, %r2188, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r334, %r2195, %r2190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r2197, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2202, %r334, %r2204, %r2199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2206, %r337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r2206, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2211, %r334, %r2213, %r2208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2215, %r337, %r2150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r334, %r2147, %r2215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r337, %r2159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r334, %r2156, %r2222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r337, %r2168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r334, %r2165, %r2229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2236, %r337, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r334, %r2174, %r2236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2243, %r337, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2246, %r334, %r2183, %r2243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2250, %r337, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2253, %r334, %r2192, %r2250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2257, %r337, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2260, %r334, %r2201, %r2257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r337, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r334, %r2210, %r2264;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2344, %r2345}, {%r378, %r381}, {%r2148, %r2218}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2352, %r2353}, {%r378, %r381}, {%r2157, %r2225}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2360, %r2361}, {%r378, %r381}, {%r2166, %r2232}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2368, %r2369}, {%r378, %r381}, {%r2175, %r2239}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2376, %r2377}, {%r378, %r381}, {%r2184, %r2246}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2384, %r2385}, {%r378, %r381}, {%r2193, %r2253}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2392, %r2393}, {%r378, %r381}, {%r2202, %r2260}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2400, %r2401}, {%r378, %r381}, {%r2211, %r2267}, {%r1347, %r1347}, %r209, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2343, %r2344, %r2345, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2347, %r2344, %r2345, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2351, %r2352, %r2353, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2355, %r2352, %r2353, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2359, %r2360, %r2361, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2363, %r2360, %r2361, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2367, %r2368, %r2369, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2371, %r2368, %r2369, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2375, %r2376, %r2377, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2379, %r2376, %r2377, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2383, %r2384, %r2385, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2387, %r2384, %r2385, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2391, %r2392, %r2393, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2395, %r2392, %r2393, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2399, %r2400, %r2401, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2403, %r2400, %r2401, %r662;
	// end inline asm
	add.s16 	%rs235, %rs10, %rs287;
	add.s16 	%rs236, %rs235, -29;
	mul.hi.s16 	%rs237, %rs236, 10923;
	shr.u16 	%rs238, %rs237, 15;
	add.s16 	%rs239, %rs237, %rs238;
	mul.lo.s16 	%rs240, %rs239, 6;
	sub.s16 	%rs241, %rs236, %rs240;
	mul.wide.s16 	%r2593, %rs241, 16;
	or.b32  	%r2594, %r197, %r2593;
	add.s32 	%r2595, %r203, %r2594;
	mul.wide.s32 	%rd268, %r2595, 4;
	add.s64 	%rd270, %rd46, %rd268;
	st.shared.u32 	[%rd270], %r2343;
	cvt.s64.s32 	%rd271, %r2594;
	add.s64 	%rd272, %rd11, %rd271;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd46, %rd273;
	st.shared.u32 	[%rd274+6304], %r2347;
	or.b32  	%r2596, %r204, %r2593;
	add.s32 	%r2597, %r203, %r2596;
	mul.wide.s32 	%rd275, %r2597, 4;
	add.s64 	%rd276, %rd46, %rd275;
	st.shared.u32 	[%rd276], %r2351;
	cvt.s64.s32 	%rd277, %r2596;
	add.s64 	%rd278, %rd11, %rd277;
	shl.b64 	%rd279, %rd278, 2;
	add.s64 	%rd280, %rd46, %rd279;
	st.shared.u32 	[%rd280+6304], %r2355;
	add.s32 	%r2598, %r2594, %r198;
	or.b32  	%r2599, %r2598, 8;
	add.s32 	%r2600, %r205, %r2599;
	mul.wide.s32 	%rd281, %r2600, 4;
	add.s64 	%rd282, %rd46, %rd281;
	st.shared.u32 	[%rd282], %r2359;
	cvt.s64.s32 	%rd283, %r2599;
	add.s64 	%rd284, %rd12, %rd283;
	shl.b64 	%rd285, %rd284, 2;
	add.s64 	%rd286, %rd46, %rd285;
	st.shared.u32 	[%rd286+6304], %r2363;
	add.s64 	%rd287, %rd13, %rd277;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd289, %rd46, %rd288;
	st.shared.u32 	[%rd289+32], %r2367;
	st.shared.u32 	[%rd280+6336], %r2371;
	add.s16 	%rs242, %rs9, %rs287;
	add.s16 	%rs243, %rs242, -2;
	mul.hi.s16 	%rs244, %rs243, 10923;
	shr.u16 	%rs245, %rs244, 15;
	add.s16 	%rs246, %rs244, %rs245;
	mul.lo.s16 	%rs247, %rs246, 6;
	sub.s16 	%rs248, %rs243, %rs247;
	mul.wide.s16 	%r2601, %rs248, 16;
	or.b32  	%r2602, %r197, %r2601;
	add.s32 	%r2603, %r203, %r2602;
	mul.wide.s32 	%rd290, %r2603, 4;
	add.s64 	%rd291, %rd46, %rd290;
	st.shared.u32 	[%rd291], %r2375;
	cvt.s64.s32 	%rd292, %r2602;
	add.s64 	%rd293, %rd11, %rd292;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd46, %rd294;
	st.shared.u32 	[%rd295+6304], %r2379;
	or.b32  	%r2604, %r204, %r2601;
	add.s32 	%r2605, %r203, %r2604;
	mul.wide.s32 	%rd296, %r2605, 4;
	add.s64 	%rd297, %rd46, %rd296;
	st.shared.u32 	[%rd297], %r2383;
	cvt.s64.s32 	%rd298, %r2604;
	add.s64 	%rd299, %rd11, %rd298;
	shl.b64 	%rd300, %rd299, 2;
	add.s64 	%rd301, %rd46, %rd300;
	st.shared.u32 	[%rd301+6304], %r2387;
	add.s32 	%r2606, %r2602, %r198;
	or.b32  	%r2607, %r2606, 8;
	add.s32 	%r2608, %r205, %r2607;
	mul.wide.s32 	%rd302, %r2608, 4;
	add.s64 	%rd303, %rd46, %rd302;
	st.shared.u32 	[%rd303], %r2391;
	cvt.s64.s32 	%rd304, %r2607;
	add.s64 	%rd305, %rd12, %rd304;
	shl.b64 	%rd306, %rd305, 2;
	add.s64 	%rd307, %rd46, %rd306;
	st.shared.u32 	[%rd307+6304], %r2395;
	add.s64 	%rd308, %rd13, %rd298;
	shl.b64 	%rd309, %rd308, 2;
	add.s64 	%rd310, %rd46, %rd309;
	st.shared.u32 	[%rd310+32], %r2399;
	st.shared.u32 	[%rd301+6336], %r2403;
	bar.sync 	0;
	add.s16 	%rs249, %rs287, -5;
	mul.hi.s16 	%rs250, %rs249, 10923;
	shr.u16 	%rs251, %rs250, 15;
	add.s16 	%rs252, %rs250, %rs251;
	mul.lo.s16 	%rs253, %rs252, 6;
	sub.s16 	%rs254, %rs249, %rs253;
	mul.wide.s16 	%r2609, %rs254, 16;
	add.s32 	%r2610, %r206, %r2609;
	mul.wide.s32 	%rd311, %r2610, 4;
	add.s64 	%rd312, %rd46, %rd311;
	ld.shared.u32 	%r2411, [%rd312];
	add.s32 	%r2611, %r207, %r2609;
	mul.wide.s32 	%rd313, %r2611, 4;
	add.s64 	%rd314, %rd46, %rd313;
	ld.shared.u32 	%r2418, [%rd314];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2428, %r2425}, {%r390, %r393}, {%r2411}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2437, %r2434}, {%r390, %r393}, {%r2418}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2421, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2423, %r2421, %r2425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2426, %r428, %r2428, %r2423;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2430, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2432, %r2430, %r2434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2435, %r428, %r2437, %r2432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2439, %r431, %r2428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2442, %r428, %r2425, %r2439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2446, %r431, %r2437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2449, %r428, %r2434, %r2446;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2472, %r2475}, {%r474, %r477}, {%r2426, %r2442}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2479, %r2483}, {%r474, %r477}, {%r2435, %r2449}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r2472, %r2472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r2475, %r2475, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2478, %r2479, %r2479, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r2483, %r2483, %r2478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2486, %r1516, %r2482, %r107;
	// end inline asm
	add.s16 	%rs255, %rs287, -4;
	mul.hi.s16 	%rs256, %rs255, 10923;
	shr.u16 	%rs257, %rs256, 15;
	add.s16 	%rs258, %rs256, %rs257;
	mul.lo.s16 	%rs259, %rs258, 6;
	sub.s16 	%rs260, %rs255, %rs259;
	mul.wide.s16 	%r2612, %rs260, 16;
	add.s32 	%r2613, %r206, %r2612;
	mul.wide.s32 	%rd315, %r2613, 4;
	add.s64 	%rd316, %rd46, %rd315;
	ld.shared.u32 	%r2494, [%rd316];
	add.s32 	%r2614, %r207, %r2612;
	mul.wide.s32 	%rd317, %r2614, 4;
	add.s64 	%rd318, %rd46, %rd317;
	ld.shared.u32 	%r2501, [%rd318];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2511, %r2508}, {%r390, %r393}, {%r2494}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2520, %r2517}, {%r390, %r393}, {%r2501}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2504, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r2504, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r428, %r2511, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2513, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r2513, %r2517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r428, %r2520, %r2515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2522, %r431, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2525, %r428, %r2508, %r2522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r431, %r2520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r428, %r2517, %r2529;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2555, %r2558}, {%r474, %r477}, {%r2509, %r2525}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2562, %r2566}, {%r474, %r477}, {%r2518, %r2532}, {%r1347, %r1347}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2554, %r2555, %r2555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2557, %r2558, %r2558, %r2554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2561, %r2562, %r2562, %r2557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2565, %r2566, %r2566, %r2561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3030, %r1516, %r2565, %r2486;
	// end inline asm
	add.s32 	%r3028, %r105, 2;
	setp.ne.s32 	%p275, %r3028, 32;
	@%p275 bra 	$L__BB0_157;
// %bb.154:                             // %L26651
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p297 bra 	$L__BB0_156;
// %bb.155:                             // %L26711
                                        //   in Loop: Header=BB0_153 Depth=2
	mad.lo.s32 	%r2615, %r106, 589824, %r208;
	cvt.u64.u32 	%rd319, %r2615;
	add.s64 	%rd320, %rd319, %rd6;
	mul.hi.s64 	%rd321, %rd320, 1024819115206086201;
	shr.u64 	%rd322, %rd321, 63;
	shr.s64 	%rd323, %rd321, 24;
	add.s64 	%rd324, %rd323, %rd322;
	setp.lt.s64 	%p277, %rd320, 0;
	mul.lo.s64 	%rd325, %rd324, 301989888;
	setp.ne.s64 	%p278, %rd325, %rd320;
	and.pred  	%p279, %p277, %p278;
	selp.s64 	%rd326, -1, 0, %p279;
	add.s64 	%rd327, %rd324, %rd326;
	mul.lo.s64 	%rd328, %rd327, -301989888;
	add.s64 	%rd329, %rd328, %rd320;
	shl.b64 	%rd330, %rd329, 2;
	add.s64 	%rd331, %rd4, %rd330;
	st.global.u32 	[%rd331], %r3030;
$L__BB0_156:                            // %L26865
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3028, 0;
	mov.u32 	%r3030, %r3028;
$L__BB0_157:                            // %oksrem12059
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s16 	%rs261, %rs287, -3;
	mul.hi.s16 	%rs262, %rs261, 10923;
	shr.u16 	%rs263, %rs262, 15;
	add.s16 	%rs264, %rs262, %rs263;
	mul.lo.s16 	%rs265, %rs264, 6;
	sub.s16 	%rs266, %rs261, %rs265;
	mul.wide.s16 	%r2783, %rs266, 16;
	add.s32 	%r2784, %r206, %r2783;
	mul.wide.s32 	%rd332, %r2784, 4;
	add.s64 	%rd334, %rd46, %rd332;
	ld.shared.u32 	%r2621, [%rd334];
	add.s32 	%r2785, %r207, %r2783;
	mul.wide.s32 	%rd335, %r2785, 4;
	add.s64 	%rd336, %rd46, %rd335;
	ld.shared.u32 	%r2628, [%rd336];
	mov.u32 	%r2762, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2638, %r2635}, {%r390, %r393}, {%r2621}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2647, %r2644}, {%r390, %r393}, {%r2628}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2631, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2633, %r2631, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2636, %r428, %r2638, %r2633;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2640, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r2640, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2645, %r428, %r2647, %r2642;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2649, %r431, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2652, %r428, %r2635, %r2649;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2656, %r431, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2659, %r428, %r2644, %r2656;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2682, %r2685}, {%r474, %r477}, {%r2636, %r2652}, {%r2762, %r2762}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2689, %r2693}, {%r474, %r477}, {%r2645, %r2659}, {%r2762, %r2762}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r2682, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2684, %r2685, %r2685, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r2689, %r2689, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2692, %r2693, %r2693, %r2688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2696, %r1516, %r2692, %r3030;
	// end inline asm
	add.s16 	%rs267, %rs287, -2;
	mul.hi.s16 	%rs268, %rs267, 10923;
	shr.u16 	%rs269, %rs268, 15;
	add.s16 	%rs270, %rs268, %rs269;
	mul.lo.s16 	%rs271, %rs270, 6;
	sub.s16 	%rs272, %rs267, %rs271;
	mul.wide.s16 	%r2786, %rs272, 16;
	add.s32 	%r2787, %r206, %r2786;
	mul.wide.s32 	%rd337, %r2787, 4;
	add.s64 	%rd338, %rd46, %rd337;
	ld.shared.u32 	%r2704, [%rd338];
	add.s32 	%r2788, %r207, %r2786;
	mul.wide.s32 	%rd339, %r2788, 4;
	add.s64 	%rd340, %rd46, %rd339;
	ld.shared.u32 	%r2711, [%rd340];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2721, %r2718}, {%r390, %r393}, {%r2704}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2730, %r2727}, {%r390, %r393}, {%r2711}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2714, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r2714, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r428, %r2721, %r2716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2723, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r2723, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r428, %r2730, %r2725;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2732, %r431, %r2721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2735, %r428, %r2718, %r2732;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2739, %r431, %r2730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2742, %r428, %r2727, %r2739;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2765, %r2768}, {%r474, %r477}, {%r2719, %r2735}, {%r2762, %r2762}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2772, %r2776}, {%r474, %r477}, {%r2728, %r2742}, {%r2762, %r2762}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2764, %r2765, %r2765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2767, %r2768, %r2768, %r2764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2771, %r2772, %r2772, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2775, %r2776, %r2776, %r2771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3033, %r1516, %r2775, %r2696;
	// end inline asm
	add.s32 	%r3031, %r3028, 2;
	setp.eq.s32 	%p280, %r3031, 32;
	@%p280 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_161;
$L__BB0_158:                            // %L28607
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p297 bra 	$L__BB0_160;
// %bb.159:                             // %L28667
                                        //   in Loop: Header=BB0_153 Depth=2
	mad.lo.s32 	%r2789, %r106, 589824, %r208;
	cvt.u64.u32 	%rd341, %r2789;
	add.s64 	%rd342, %rd341, %rd6;
	mul.hi.s64 	%rd343, %rd342, 1024819115206086201;
	shr.u64 	%rd344, %rd343, 63;
	shr.s64 	%rd345, %rd343, 24;
	add.s64 	%rd346, %rd345, %rd344;
	setp.lt.s64 	%p282, %rd342, 0;
	mul.lo.s64 	%rd347, %rd346, 301989888;
	setp.ne.s64 	%p283, %rd347, %rd342;
	and.pred  	%p284, %p282, %p283;
	selp.s64 	%rd348, -1, 0, %p284;
	add.s64 	%rd349, %rd346, %rd348;
	mul.lo.s64 	%rd350, %rd349, -301989888;
	add.s64 	%rd351, %rd350, %rd342;
	shl.b64 	%rd352, %rd351, 2;
	add.s64 	%rd353, %rd4, %rd352;
	st.global.u32 	[%rd353], %r3033;
$L__BB0_160:                            // %L28821
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3031, 0;
	mov.u32 	%r3033, %r3031;
$L__BB0_161:                            // %oksrem12915
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s16 	%rs273, %rs287, -1;
	mul.hi.s16 	%rs274, %rs273, 10923;
	shr.u16 	%rs275, %rs274, 15;
	add.s16 	%rs276, %rs274, %rs275;
	mul.lo.s16 	%rs277, %rs276, 6;
	sub.s16 	%rs278, %rs273, %rs277;
	mul.wide.s16 	%r2957, %rs278, 16;
	add.s32 	%r2958, %r206, %r2957;
	mul.wide.s32 	%rd354, %r2958, 4;
	add.s64 	%rd356, %rd46, %rd354;
	ld.shared.u32 	%r2795, [%rd356];
	add.s32 	%r2959, %r207, %r2957;
	mul.wide.s32 	%rd357, %r2959, 4;
	add.s64 	%rd358, %rd46, %rd357;
	ld.shared.u32 	%r2802, [%rd358];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2812, %r2809}, {%r390, %r393}, {%r2795}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2821, %r2818}, {%r390, %r393}, {%r2802}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2805, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2807, %r2805, %r2809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2810, %r428, %r2812, %r2807;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2814, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2816, %r2814, %r2818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2819, %r428, %r2821, %r2816;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2823, %r431, %r2812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2826, %r428, %r2809, %r2823;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2830, %r431, %r2821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2833, %r428, %r2818, %r2830;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2856, %r2859}, {%r474, %r477}, {%r2810, %r2826}, {%r2762, %r2762}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2863, %r2867}, {%r474, %r477}, {%r2819, %r2833}, {%r2762, %r2762}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2855, %r2856, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2858, %r2859, %r2859, %r2855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2862, %r2863, %r2863, %r2858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2866, %r2867, %r2867, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r1516, %r2866, %r3033;
	// end inline asm
	mul.hi.s16 	%rs279, %rs287, 10923;
	shr.u16 	%rs280, %rs279, 15;
	add.s16 	%rs281, %rs279, %rs280;
	mul.lo.s16 	%rs282, %rs281, 6;
	sub.s16 	%rs283, %rs287, %rs282;
	mul.wide.s16 	%r2960, %rs283, 16;
	add.s32 	%r2961, %r206, %r2960;
	mul.wide.s32 	%rd359, %r2961, 4;
	add.s64 	%rd360, %rd46, %rd359;
	ld.shared.u32 	%r2878, [%rd360];
	add.s32 	%r2962, %r207, %r2960;
	mul.wide.s32 	%rd361, %r2962, 4;
	add.s64 	%rd362, %rd46, %rd361;
	ld.shared.u32 	%r2885, [%rd362];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2895, %r2892}, {%r390, %r393}, {%r2878}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2904, %r2901}, {%r390, %r393}, {%r2885}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2888, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2890, %r2888, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r428, %r2895, %r2890;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2897, %r431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2899, %r2897, %r2901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r428, %r2904, %r2899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2906, %r431, %r2895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r428, %r2892, %r2906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2913, %r431, %r2904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r428, %r2901, %r2913;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2939, %r2942}, {%r474, %r477}, {%r2893, %r2909}, {%r2762, %r2762}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2946, %r2950}, {%r474, %r477}, {%r2902, %r2916}, {%r2762, %r2762}, %r233, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2938, %r2939, %r2939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r2942, %r2942, %r2938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r2946, %r2946, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r2950, %r2950, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r107, %r1516, %r2949, %r2870;
	// end inline asm
	add.s32 	%r105, %r3031, 2;
	setp.eq.s32 	%p285, %r105, 32;
	@%p285 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L30563
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p297 bra 	$L__BB0_164;
// %bb.163:                             // %L30623
                                        //   in Loop: Header=BB0_153 Depth=2
	mad.lo.s32 	%r2963, %r106, 589824, %r208;
	cvt.u64.u32 	%rd363, %r2963;
	add.s64 	%rd364, %rd363, %rd6;
	mul.hi.s64 	%rd365, %rd364, 1024819115206086201;
	shr.u64 	%rd366, %rd365, 63;
	shr.s64 	%rd367, %rd365, 24;
	add.s64 	%rd368, %rd367, %rd366;
	setp.lt.s64 	%p287, %rd364, 0;
	mul.lo.s64 	%rd369, %rd368, 301989888;
	setp.ne.s64 	%p288, %rd369, %rd364;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd370, -1, 0, %p289;
	add.s64 	%rd371, %rd368, %rd370;
	mul.lo.s64 	%rd372, %rd371, -301989888;
	add.s64 	%rd373, %rd372, %rd364;
	shl.b64 	%rd374, %rd373, 2;
	add.s64 	%rd375, %rd4, %rd374;
	st.global.u32 	[%rd375], %r107;
	bra.uni 	$L__BB0_164;
$L__BB0_167:                            // %L30809
	mov.u32 	%r2965, 0;
	st.global.u32 	[%rd5], %r2965;
	ret;
$L__BB0_141:                            // %post_box_union
	mov.u64 	%rd148, exception2651;
	cvta.global.u64 	%rd149, %rd148;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd149;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_198:                            // %post_box_union6639
	mov.u64 	%rd204, exception2651;
	cvta.global.u64 	%rd205, %rd204;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd205;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L159
	mov.u32 	%r2966, 2;
	st.global.u32 	[%rd5], %r2966;
	mov.u64 	%rd376, exception2611;
	cvta.global.u64 	%rd377, %rd376;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd377;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd19, exception1;
	cvta.global.u64 	%rd20, %rd19;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd20;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
