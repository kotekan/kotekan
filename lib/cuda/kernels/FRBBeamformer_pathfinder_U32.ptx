// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3564[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3604[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<304>;
	.reg .b16 	%rs<232>;
	.reg .b32 	%r<3086>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<381>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r297, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd46, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r306, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r306, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd47, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r298, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r307, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	mul.lo.s32 	%r5, %r4, 192;
	or.b32  	%r308, %r3, %r307;
	add.s32 	%r309, %r308, %r5;
	mul.wide.u32 	%rd54, %r309, 4;
	add.s64 	%rd6, %rd47, %rd54;
	mov.u32 	%r310, 1;
	st.global.u32 	[%rd6], %r310;
	setp.gt.u32 	%p5, %r298, 1023;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r299, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r299, %r298;
	setp.gt.s32 	%p7, %r299, 2047;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r299, %r298;
	mad.lo.s32 	%r311, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r312, %r311, %r311, 4;
	setp.gt.u32 	%p9, %r312, 89478484;
	setp.gt.u32 	%p10, %r300, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r301, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r301, %r300;
	setp.lt.s32 	%p13, %r301, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r313, %r301, %r300;
	mul.hi.s32 	%r314, %r6, 715827883;
	shr.u32 	%r315, %r314, 31;
	add.s32 	%r316, %r314, %r315;
	setp.eq.s32 	%p15, %r313, %r316;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r302, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r303, %r302;
	setp.gt.s32 	%p18, %r303, 2048;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r303, %r302;
	and.b32  	%r317, %r7, 31;
	setp.ne.s32 	%p20, %r317, 0;
	setp.lt.s32 	%p21, %r304, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r305, %r304;
	setp.gt.s32 	%p24, %r305, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r318, %r305, %r304;
	and.b32  	%r319, %r318, 31;
	setp.eq.s32 	%p26, %r319, 0;
	setp.eq.s32 	%p27, %r318, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_13;
$L__BB0_171:                            // %pass162
	and.b32  	%r158, %r307, 3;
	shr.u32 	%r159, %r307, 2;
	mul.lo.s32 	%r320, %r158, %r159;
	and.b32  	%r321, %r320, 7;
	cvt.rn.f32.s32 	%f205, %r321;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p303, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_183;
// %bb.172:
	@%p303 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_173;
$L__BB0_179:
	mov.b32 	%r161, %f788;
	and.b32  	%r322, %r161, 8388607;
	or.b32  	%r3081, %r322, 1065353216;
	mov.b32 	%f783, %r3081;
	add.s32 	%r323, %r161, -1073741824;
	and.b32  	%r3082, %r323, -8388608;
	setp.eq.s32 	%p36, %r3082, 0;
	@%p36 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r324, %r3082, 192937984;
	add.s32 	%r325, %r3081, %r324;
	mov.b32 	%f217, %r325;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3082, %r3082, %r324;
	mov.b32 	%r3081, %f783;
	setp.ne.s32 	%p37, %r3082, 0;
	setp.ne.s32 	%p38, %r3081, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r161, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_183;
$L__BB0_173:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r160, %f172;
	setp.lt.u32 	%p31, %r160, 1073741824;
	@%p31 bra 	$L__BB0_178;
// %bb.174:
	setp.lt.u32 	%p32, %r160, -2147483647;
	@%p32 bra 	$L__BB0_176;
// %bb.175:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r326, %f169;
	and.b32  	%r168, %r326, -2147483648;
	@%p41 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r327, %f784;
	or.b32  	%r328, %r168, %r327;
	mov.b32 	%f784, %r328;
$L__BB0_185:                            // %__nv_fmodf.exit
	shl.b32 	%r171, %r307, 1;
	and.b32  	%r172, %r171, 2;
	mul.lo.s32 	%r343, %r172, %r159;
	cvt.rn.f32.s32 	%f259, %r343;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r344, %r9, 8388607;
	or.b32  	%r3039, %r344, 1065353216;
	mov.b32 	%f733, %r3039;
	add.s32 	%r345, %r9, -1073741824;
	and.b32  	%r3040, %r345, -8388608;
	setp.eq.s32 	%p56, %r3040, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r346, %r3040, 192937984;
	add.s32 	%r347, %r3039, %r346;
	mov.b32 	%f271, %r347;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3040, %r3040, %r346;
	mov.b32 	%r3039, %f733;
	setp.ne.s32 	%p57, %r3040, 0;
	setp.ne.s32 	%p58, %r3039, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2027
	or.b32  	%r173, %r172, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r348, %f186;
	and.b32  	%r349, %r348, -2147483648;
	mov.b32 	%r350, %f734;
	or.b32  	%r351, %r349, %r350;
	mov.b32 	%f734, %r351;
$L__BB0_27:                             // %__nv_fmodf.exit2028
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r173, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L525
	mul.lo.s32 	%r360, %r173, %r159;
	mul.hi.u32 	%r361, %r360, -1431655765;
	shr.u32 	%r362, %r361, 4;
	mul.lo.s32 	%r363, %r362, 24;
	sub.s32 	%r364, %r360, %r363;
	cvt.rn.f32.s32 	%f311, %r364;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r365, %r17, 8388607;
	or.b32  	%r3041, %r365, 1065353216;
	mov.b32 	%f737, %r3041;
	add.s32 	%r366, %r17, -1073741824;
	and.b32  	%r3042, %r366, -8388608;
	setp.eq.s32 	%p77, %r3042, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r3042, 192937984;
	add.s32 	%r368, %r3041, %r367;
	mov.b32 	%f323, %r368;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3042, %r3042, %r367;
	mov.b32 	%r3041, %f737;
	setp.ne.s32 	%p78, %r3042, 0;
	setp.ne.s32 	%p79, %r3041, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r369, %f18;
	and.b32  	%r370, %r369, -2147483648;
	mov.b32 	%r371, %f738;
	or.b32  	%r372, %r370, %r371;
	mov.b32 	%f738, %r372;
$L__BB0_42:                             // %__nv_fmodf.exit2059
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r373, %f333;
	and.b32  	%r374, %r373, -2147483648;
	or.b32  	%r375, %r374, 1056964608;
	mov.b32 	%f334, %r375;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r376, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r377, %r376, 1;
	setp.eq.b32 	%p85, %r377, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r378, %r376, 2;
	setp.eq.s32 	%p86, %r378, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r379, %r376, 1;
	and.b32  	%r380, %r379, 2;
	setp.eq.s32 	%p87, %r380, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L559
	and.b32  	%r26, %r159, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L597
	mul.lo.s32 	%r387, %r172, %r26;
	cvt.u16.u32 	%rs11, %r387;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r388, %r28, 8388607;
	or.b32  	%r3043, %r388, 1065353216;
	mov.b32 	%f743, %r3043;
	add.s32 	%r389, %r28, -1073741824;
	and.b32  	%r3044, %r389, -8388608;
	setp.eq.s32 	%p98, %r3044, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r390, %r3044, 192937984;
	add.s32 	%r391, %r3043, %r390;
	mov.b32 	%f376, %r391;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3044, %r3044, %r390;
	mov.b32 	%r3043, %f743;
	setp.ne.s32 	%p99, %r3044, 0;
	setp.ne.s32 	%p100, %r3043, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r392, %f39;
	and.b32  	%r393, %r392, -2147483648;
	mov.b32 	%r394, %f744;
	or.b32  	%r395, %r393, %r394;
	mov.b32 	%f744, %r395;
$L__BB0_58:                             // %__nv_fmodf.exit2090
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r396, %f386;
	and.b32  	%r397, %r396, -2147483648;
	or.b32  	%r398, %r397, 1056964608;
	mov.b32 	%f387, %r398;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r399, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r400, %r399, 1;
	setp.eq.b32 	%p106, %r400, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r401, %r399, 2;
	setp.eq.s32 	%p107, %r401, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r402, %r399, 1;
	and.b32  	%r403, %r402, 2;
	setp.eq.s32 	%p108, %r403, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L631
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L639
	mul.lo.s32 	%r404, %r173, %r26;
	mul.hi.u32 	%r405, %r404, -1431655765;
	shr.u32 	%r406, %r405, 1;
	mul.lo.s32 	%r407, %r406, 3;
	sub.s32 	%r408, %r404, %r407;
	cvt.rn.f32.s32 	%f417, %r408;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r409, %r36, 8388607;
	or.b32  	%r3045, %r409, 1065353216;
	mov.b32 	%f749, %r3045;
	add.s32 	%r410, %r36, -1073741824;
	and.b32  	%r3046, %r410, -8388608;
	setp.eq.s32 	%p121, %r3046, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r411, %r3046, 192937984;
	add.s32 	%r412, %r3045, %r411;
	mov.b32 	%f429, %r412;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3046, %r3046, %r411;
	mov.b32 	%r3045, %f749;
	setp.ne.s32 	%p122, %r3046, 0;
	setp.ne.s32 	%p123, %r3045, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2120
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r413, %f60;
	and.b32  	%r414, %r413, -2147483648;
	mov.b32 	%r415, %f750;
	or.b32  	%r416, %r414, %r415;
	mov.b32 	%f750, %r416;
$L__BB0_74:                             // %__nv_fmodf.exit2121
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r417, %f439;
	and.b32  	%r418, %r417, -2147483648;
	or.b32  	%r419, %r418, 1056964608;
	mov.b32 	%f440, %r419;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r420, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r421, %r420, 1;
	setp.eq.b32 	%p129, %r421, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r422, %r420, 2;
	setp.eq.s32 	%p130, %r422, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r423, %r420, 1;
	and.b32  	%r424, %r423, 2;
	setp.eq.s32 	%p131, %r424, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L673
	and.b32  	%r43, %r307, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L684
	@%p29 bra 	$L__BB0_193;
// %bb.78:
	@%p303 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_79;
$L__BB0_189:
	mov.b32 	%r175, %f788;
	and.b32  	%r431, %r175, 8388607;
	or.b32  	%r3083, %r431, 1065353216;
	mov.b32 	%f787, %r3083;
	add.s32 	%r432, %r175, -1073741824;
	and.b32  	%r3084, %r432, -8388608;
	setp.eq.s32 	%p142, %r3084, 0;
	@%p142 bra 	$L__BB0_192;
// %bb.190:                             // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_191:                            // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r433, %r3084, 192937984;
	add.s32 	%r434, %r3083, %r433;
	mov.b32 	%f479, %r434;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3084, %r3084, %r433;
	mov.b32 	%r3083, %f787;
	setp.ne.s32 	%p143, %r3084, 0;
	setp.ne.s32 	%p144, %r3083, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_191;
$L__BB0_192:                            // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p146, %r175, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_193;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r174, %f189;
	setp.lt.u32 	%p137, %r174, 1073741824;
	@%p137 bra 	$L__BB0_188;
// %bb.80:
	setp.lt.u32 	%p138, %r174, -2147483647;
	@%p138 bra 	$L__BB0_186;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_188;
$L__BB0_186:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_188;
// %bb.187:                             // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_188:                            // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_193:                            // %__internal_fmodf_kernel.exit.i2151
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_195;
// %bb.194:
	mov.b32 	%r435, %f788;
	or.b32  	%r436, %r168, %r435;
	mov.b32 	%f788, %r436;
$L__BB0_195:                            // %__nv_fmodf.exit2152
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r451, %r47, 8388607;
	or.b32  	%r3047, %r451, 1065353216;
	mov.b32 	%f759, %r3047;
	add.s32 	%r452, %r47, -1073741824;
	and.b32  	%r3048, %r452, -8388608;
	setp.eq.s32 	%p162, %r3048, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r453, %r3048, 192937984;
	add.s32 	%r454, %r3047, %r453;
	mov.b32 	%f532, %r454;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3048, %r3048, %r453;
	mov.b32 	%r3047, %f759;
	setp.ne.s32 	%p163, %r3048, 0;
	setp.ne.s32 	%p164, %r3047, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2182
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r455, %f203;
	and.b32  	%r456, %r455, -2147483648;
	mov.b32 	%r457, %f760;
	or.b32  	%r458, %r456, %r457;
	mov.b32 	%f760, %r458;
$L__BB0_95:                             // %__nv_fmodf.exit2183
	cvt.rn.f32.s32 	%f572, %r159;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r467, %r55, 8388607;
	or.b32  	%r3049, %r467, 1065353216;
	mov.b32 	%f763, %r3049;
	add.s32 	%r468, %r55, -1073741824;
	and.b32  	%r3050, %r468, -8388608;
	setp.eq.s32 	%p182, %r3050, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r469, %r3050, 192937984;
	add.s32 	%r470, %r3049, %r469;
	mov.b32 	%f584, %r470;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3050, %r3050, %r469;
	mov.b32 	%r3049, %f763;
	setp.ne.s32 	%p183, %r3050, 0;
	setp.ne.s32 	%p184, %r3049, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r471, %f104;
	and.b32  	%r472, %r471, -2147483648;
	mov.b32 	%r473, %f764;
	or.b32  	%r474, %r472, %r473;
	mov.b32 	%f764, %r474;
$L__BB0_109:                            // %__nv_fmodf.exit2214
	and.b32  	%r65, %r307, 1;
	shr.u32 	%r66, %r307, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r489, %r68, 8388607;
	or.b32  	%r3051, %r489, 1065353216;
	mov.b32 	%f767, %r3051;
	add.s32 	%r490, %r68, -1073741824;
	and.b32  	%r3052, %r490, -8388608;
	setp.eq.s32 	%p203, %r3052, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r491, %r3052, 192937984;
	add.s32 	%r492, %r3051, %r491;
	mov.b32 	%f638, %r492;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3052, %r3052, %r491;
	mov.b32 	%r3051, %f767;
	setp.ne.s32 	%p204, %r3052, 0;
	setp.ne.s32 	%p205, %r3051, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r493, %f121;
	and.b32  	%r494, %r493, -2147483648;
	mov.b32 	%r495, %f768;
	or.b32  	%r496, %r494, %r495;
	mov.b32 	%f768, %r496;
$L__BB0_124:                            // %__nv_fmodf.exit2245
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r497, %f648;
	and.b32  	%r498, %r497, -2147483648;
	or.b32  	%r499, %r498, 1056964608;
	mov.b32 	%f649, %r499;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r500, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r501, %r500, 1;
	setp.eq.b32 	%p211, %r501, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r502, %r500, 2;
	setp.eq.s32 	%p212, %r502, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r503, %r500, 1;
	and.b32  	%r504, %r503, 2;
	setp.eq.s32 	%p213, %r504, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L928
	and.b32  	%r64, %r159, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L931
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r505, %r76, 8388607;
	or.b32  	%r3053, %r505, 1065353216;
	mov.b32 	%f773, %r3053;
	add.s32 	%r506, %r76, -1073741824;
	and.b32  	%r3054, %r506, -8388608;
	setp.eq.s32 	%p224, %r3054, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2270.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2270
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r507, %r3054, 192937984;
	add.s32 	%r508, %r3053, %r507;
	mov.b32 	%f691, %r508;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3054, %r3054, %r507;
	mov.b32 	%r3053, %f773;
	setp.ne.s32 	%p225, %r3054, 0;
	setp.ne.s32 	%p226, %r3053, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2272
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2249
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2253
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2256
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2275
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r509, %f142;
	and.b32  	%r510, %r509, -2147483648;
	mov.b32 	%r511, %f774;
	or.b32  	%r512, %r510, %r511;
	mov.b32 	%f774, %r512;
$L__BB0_140:                            // %__nv_fmodf.exit2276
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r513, %f701;
	and.b32  	%r514, %r513, -2147483648;
	or.b32  	%r515, %r514, 1056964608;
	mov.b32 	%f702, %r515;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r516, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r517, %r516, 1;
	setp.eq.b32 	%p232, %r517, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r518, %r516, 2;
	setp.eq.s32 	%p233, %r518, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r519, %r516, 1;
	and.b32  	%r520, %r519, 2;
	setp.eq.s32 	%p234, %r520, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L976
	setp.gt.u32 	%p238, %r307, 15;
	mov.u32 	%r184, 999999999;
	@%p238 bra 	$L__BB0_197;
// %bb.144:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r528, %r307, 6, %r2;
	cvt.u16.u32 	%rs17, %r528;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r529, %rs22;
	and.b32  	%r530, %r529, 255;
	mul.wide.u32 	%rd55, %r530, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.global.u32 	%r531, [%rd56];
	shl.b32 	%r532, %r531, 16;
	cvt.s32.s16 	%r85, %r531;
	shr.s32 	%r86, %r531, 16;
	or.b32  	%r533, %r532, 65535;
	setp.lt.u32 	%p239, %r533, 589823;
	setp.lt.u32 	%p240, %r531, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_145;
$L__BB0_196:                            // %L1246
	mul.lo.s32 	%r537, %r86, 290;
	mad.lo.s32 	%r184, %r85, 33, %r537;
$L__BB0_197:                            // %pass560
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r335, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r336, %r335, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r443, %f489;
	or.b32  	%r337, %r336, 1056964608;
	mov.b32 	%r352, %f282;
	and.b32  	%r444, %r443, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r337;
	and.b32  	%r353, %r352, -2147483648;
	or.b32  	%r445, %r444, 1056964608;
	mov.b32 	%r459, %f542;
	mov.b32 	%r481, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r354, %r353, 1056964608;
	mov.b32 	%f490, %r445;
	and.b32  	%r460, %r459, -2147483648;
	and.b32  	%r482, %r481, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r354;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r461, %r460, 1056964608;
	or.b32  	%r483, %r482, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r461;
	mov.b32 	%f596, %r483;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r338, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r339, %r338, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r446, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r339, 1;
	cvt.rzi.s32.f32 	%r355, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r447, %r446, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r340, %r338, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r356, %r355, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r447, 1;
	cvt.rzi.s32.f32 	%r462, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r484, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r340, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r341, %r338, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r356, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r448, %r446, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r463, %r462, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r485, %r484, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r342, %r341, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r357, %r355, 2;
	setp.eq.s32 	%p151, %r448, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r449, %r446, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r463, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r485, 1;
	setp.eq.s32 	%p46, %r342, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r357, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r358, %r355, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r450, %r449, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r464, %r462, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r486, %r484, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r359, %r358, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r450, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r464, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r465, %r462, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r486, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r487, %r484, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r359, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r466, %r465, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r488, %r487, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r331, %f258;
	mov.b32 	%r334, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r466, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r488, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r330, %r334, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r439, %f520;
	mov.b32 	%r442, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r329, %r331, %r330;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r332, %r334, %r331;
	// end inline asm
	mov.b32 	%r382, %f17;
	mov.b32 	%r383, %f37;
	mov.b32 	%r385, %f16;
	mov.b32 	%r386, %f38;
	mov.b32 	%r426, %f83;
	mov.b32 	%r427, %f85;
	mov.b32 	%r429, %f755;
	mov.b32 	%r430, %f757;
	xor.b32  	%r438, %r442, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r381, %r383, %r382;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r384, %r386, %r385;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r437, %r439, %r438;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r440, %r442, %r439;
	// end inline asm
	mov.b32 	%r477, %f625;
	mov.b32 	%r476, %f103;
	mov.b32 	%r480, %f622;
	mov.b32 	%r479, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r475, %r477, %r476;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r478, %r480, %r479;
	// end inline asm
	mov.b32 	%r522, %f165;
	mov.b32 	%r523, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r521, %r523, %r522;
	// end inline asm
	mov.b32 	%r525, %f779;
	mov.b32 	%r526, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r524, %r526, %r525;
	// end inline asm
	shr.u32 	%r185, %r307, 3;
	and.b32  	%r539, %r185, 2;
	or.b32  	%r186, %r64, %r539;
	cvt.u16.u32 	%rs25, %r186;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r540, %rs29;
	and.b32  	%r541, %r540, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r542, %rs30, 8;
	bfe.u32 	%r543, %r307, 3, 1;
	shl.b32 	%r544, %r2, 1;
	and.b32  	%r545, %r544, 2;
	or.b32  	%r546, %r543, %r545;
	mul.lo.s32 	%r547, %r158, 24;
	add.s32 	%r548, %r547, %r5;
	or.b32  	%r549, %r548, %r546;
	add.s32 	%r550, %r549, %r542;
	mul.wide.u32 	%rd62, %r550, 4;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.u32 	%r187, [%rd63];
	or.b32  	%r551, %r5, %r545;
	or.b32  	%r552, %r551, %r543;
	cvt.u64.u32 	%rd64, %r542;
	cvt.u64.u32 	%rd65, %r547;
	cvt.u64.u32 	%rd66, %r552;
	add.s64 	%rd67, %rd66, %rd65;
	add.s64 	%rd68, %rd67, %rd64;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd2, %rd69;
	ld.global.u32 	%r188, [%rd70+16];
	cvt.u64.u32 	%rd71, %r546;
	cvt.u64.u32 	%rd72, %r5;
	add.s64 	%rd73, %rd72, %rd65;
	add.s64 	%rd74, %rd73, %rd71;
	add.s64 	%rd75, %rd74, %rd64;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd2, %rd76;
	ld.global.u32 	%r189, [%rd77+384];
	cvt.u64.u32 	%rd78, %r543;
	cvt.u64.u32 	%rd79, %r545;
	add.s64 	%rd80, %rd72, %rd79;
	add.s64 	%rd81, %rd80, %rd78;
	add.s64 	%rd82, %rd81, %rd65;
	add.s64 	%rd83, %rd82, %rd64;
	shl.b64 	%rd84, %rd83, 2;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.u32 	%r190, [%rd85+400];
	shl.b32 	%r553, %r298, 16;
	shl.b32 	%r554, %r302, 5;
	add.s32 	%r191, %r554, %r553;
	shl.b32 	%r555, %r307, 2;
	shl.b32 	%r556, %r4, 5;
	and.b32  	%r557, %r555, 28;
	or.b32  	%r192, %r557, %r556;
	shl.b32 	%r193, %r2, 2;
	bfe.s32 	%r558, %r307, 2, 1;
	and.b32  	%r194, %r307, 4;
	setp.eq.s32 	%p243, %r194, 0;
	and.b32  	%r559, %r171, 8;
	shl.b32 	%r560, %r307, 4;
	or.b32  	%r561, %r559, %r560;
	bfe.u32 	%r562, %r561, 3, 3;
	mul.lo.s32 	%r195, %r562, 260;
	cvt.u16.u32 	%rs31, %r307;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r563, %rs36;
	and.b32  	%r196, %r563, 255;
	add.s32 	%r564, %r2, 6;
	shr.u32 	%r565, %r564, 3;
	add.s32 	%r566, %r3, 192;
	and.b32  	%r567, %r566, 224;
	mad.lo.s32 	%r197, %r565, 260, %r567;
	add.s32 	%r568, %r2, 12;
	shr.u32 	%r569, %r568, 3;
	add.s32 	%r570, %r3, 128;
	and.b32  	%r571, %r570, 224;
	mad.lo.s32 	%r198, %r569, 260, %r571;
	add.s32 	%r572, %r2, 18;
	shr.u32 	%r573, %r572, 3;
	add.s32 	%r574, %r3, 64;
	and.b32  	%r575, %r574, 224;
	mad.lo.s32 	%r199, %r573, 260, %r575;
	or.b32  	%r200, %r3, 780;
	add.s32 	%r576, %r2, 30;
	shr.u32 	%r577, %r576, 3;
	mad.lo.s32 	%r201, %r577, 260, %r567;
	add.s32 	%r578, %r2, 36;
	shr.u32 	%r579, %r578, 3;
	mad.lo.s32 	%r202, %r579, 260, %r571;
	add.s32 	%r580, %r2, 42;
	shr.u32 	%r581, %r580, 3;
	mad.lo.s32 	%r203, %r581, 260, %r575;
	or.b32  	%r204, %r3, 1560;
	add.s32 	%r582, %r2, 54;
	shr.u32 	%r583, %r582, 3;
	mad.lo.s32 	%r205, %r583, 260, %r567;
	add.s32 	%r584, %r2, 60;
	bfe.u32 	%r585, %r584, 3, 3;
	mad.lo.s32 	%r206, %r585, 260, %r571;
	shr.u32 	%r586, %r2, 1;
	cvt.u16.u32 	%rs37, %r586;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r587, %rs42;
	and.b32  	%r207, %r587, 255;
	mul.lo.s32 	%r588, %r158, 870;
	mad.lo.s32 	%r589, %r546, 33, %r588;
	mad.lo.s32 	%r208, %r541, 290, %r589;
	add.s32 	%r209, %r208, 132;
	setp.lt.u32 	%p244, %r307, 4;
	setp.eq.s32 	%p245, %r159, 1;
	setp.eq.s32 	%p246, %r159, 4;
	setp.eq.s32 	%p247, %r159, 5;
	and.b32  	%r210, %r558, 196;
	bfe.s32 	%r590, %r307, 3, 1;
	and.b32  	%r211, %r590, 98;
	selp.b32 	%r212, 0, 392, %p134;
	setp.eq.s32 	%p248, %r65, 0;
	selp.b32 	%r213, 0, 784, %p248;
	or.b32  	%r214, %r545, %r66;
	add.s32 	%r591, %r210, %r211;
	add.s32 	%r592, %r591, %r212;
	add.s32 	%r593, %r592, %r213;
	add.s32 	%r215, %r593, %r214;
	selp.b32 	%r216, 1576, 1772, %p243;
	add.s32 	%r594, %r216, %r211;
	add.s32 	%r595, %r594, %r212;
	add.s32 	%r596, %r595, %r213;
	add.s32 	%r217, %r596, %r214;
	or.b32  	%r218, %r214, 4;
	add.s32 	%r219, %r593, %r218;
	add.s32 	%r220, %r596, %r218;
	add.s32 	%r597, %r596, 8;
	add.s32 	%r221, %r597, %r214;
	add.s32 	%r222, %r597, %r218;
	bfe.s32 	%r598, %r2, 1, 1;
	and.b32  	%r599, %r598, 196;
	and.b32  	%r600, %r171, 6;
	and.b32  	%r601, %r590, 1576;
	shr.u32 	%r602, %r2, 2;
	and.b32  	%r603, %r2, 1;
	neg.s32 	%r604, %r603;
	and.b32  	%r605, %r604, 392;
	mad.lo.s32 	%r606, %r602, 98, %r600;
	or.b32  	%r607, %r606, %r64;
	mad.lo.s32 	%r608, %r66, 784, %r607;
	add.s32 	%r609, %r608, %r599;
	add.s32 	%r610, %r609, %r601;
	add.s32 	%r223, %r610, %r605;
	add.s32 	%r224, %r223, 8;
	mul.lo.s32 	%r611, %r300, 786432;
	mad.lo.s32 	%r612, %r304, 192, %r611;
	or.b32  	%r613, %r193, %r185;
	cvt.u16.u32 	%rs43, %r613;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r614, %rs49;
	and.b32  	%r615, %r614, 248;
	and.b32  	%r616, %r307, 7;
	or.b32  	%r617, %r616, %r5;
	cvt.s64.s32 	%rd23, %r612;
	add.s32 	%r618, %r208, %r207;
	mul.wide.u32 	%rd86, %r618, 4;
	mov.u64 	%rd87, shmem;
	add.s64 	%rd24, %rd87, %rd86;
	add.s32 	%r619, %r209, %r207;
	mul.wide.u32 	%rd88, %r619, 4;
	add.s64 	%rd25, %rd87, %rd88;
	cvt.u64.u32 	%rd89, %r208;
	cvt.u64.u16 	%rd90, %rs42;
	and.b64  	%rd91, %rd90, 255;
	add.s64 	%rd92, %rd89, %rd91;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd26, %rd87, %rd93;
	cvt.u64.u32 	%rd94, %r209;
	add.s64 	%rd95, %rd94, %rd91;
	shl.b64 	%rd96, %rd95, 2;
	add.s64 	%rd27, %rd87, %rd96;
	or.pred  	%p249, %p244, %p245;
	and.b32  	%r620, %r307, 24;
	setp.eq.s32 	%p250, %r620, 8;
	or.pred  	%p251, %p249, %p250;
	or.pred  	%p252, %p251, %p246;
	setp.eq.s32 	%p253, %r620, 24;
	or.pred  	%p254, %p247, %p253;
	selp.b32 	%r225, 1145324612, -286331154, %p251;
	or.pred  	%p1, %p252, %p254;
	selp.b32 	%r226, 1145324612, -286331154, %p249;
	add.s32 	%r621, %r159, -1;
	setp.lt.u32 	%p255, %r621, 3;
	or.pred  	%p2, %p244, %p255;
	setp.eq.s32 	%p256, %r620, 16;
	or.pred  	%p3, %p256, %p253;
	selp.b32 	%r227, 1145324612, -286331154, %p256;
	add.s32 	%r228, %r617, %r615;
	add.s32 	%r88, %r207, 3;
	and.b16  	%rs8, %rs42, 255;
	add.s32 	%r230, %r228, 786432;
	or.b16  	%rs9, %rs8, 24;
	mov.u32 	%r89, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r133, %r226, %r227, %p2;
	or.pred  	%p288, %p2, %p3;
	mov.u32 	%r111, %r89;
	bra.uni 	$L__BB0_198;
$L__BB0_169:                            // %L40270
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r156, %r89, 48;
	add.s32 	%r88, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p302, %r89, 960;
	mov.u32 	%r89, %r156;
	@%p302 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_170;
$L__BB0_198:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r622, %r89, %r298;
	setp.lt.s32 	%p257, %r622, %r299;
	@%p257 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_170;
$L__BB0_199:                            // %oksrem899
                                        //   in Loop: Header=BB0_198 Depth=1
	mul.hi.u32 	%r719, %r89, -1431655765;
	shr.u32 	%r720, %r719, 5;
	mul.lo.s32 	%r231, %r720, 48;
	add.s32 	%r721, %r231, %r193;
	or.b32  	%r722, %r721, %r185;
	shr.s32 	%r723, %r721, 31;
	shr.u32 	%r724, %r723, 22;
	add.s32 	%r725, %r722, %r724;
	and.b32  	%r726, %r725, 64512;
	sub.s32 	%r727, %r722, %r726;
	shl.b32 	%r728, %r727, 16;
	or.b32  	%r729, %r728, %r192;
	add.s32 	%r730, %r191, %r729;
	shr.s32 	%r731, %r730, 31;
	shr.u32 	%r732, %r731, 6;
	add.s32 	%r733, %r730, %r732;
	shr.s32 	%r734, %r733, 26;
	setp.lt.s32 	%p259, %r730, 0;
	and.b32  	%r735, %r733, -67108864;
	setp.ne.s32 	%p260, %r735, %r730;
	and.pred  	%p261, %p259, %p260;
	selp.u32 	%r736, 1, 0, %p261;
	sub.s32 	%r737, %r736, %r734;
	shl.b32 	%r738, %r737, 26;
	add.s32 	%r739, %r738, %r730;
	mul.wide.s32 	%rd97, %r739, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r740, %r741, %r742, %r743}, [%rd98];
	add.s32 	%r744, %r721, 24;
	or.b32  	%r745, %r744, %r185;
	shr.s32 	%r746, %r744, 31;
	shr.u32 	%r747, %r746, 22;
	add.s32 	%r748, %r745, %r747;
	and.b32  	%r749, %r748, 64512;
	sub.s32 	%r750, %r745, %r749;
	shl.b32 	%r751, %r750, 16;
	or.b32  	%r752, %r751, %r192;
	add.s32 	%r753, %r191, %r752;
	shr.s32 	%r754, %r753, 31;
	shr.u32 	%r755, %r754, 6;
	add.s32 	%r756, %r753, %r755;
	shr.s32 	%r757, %r756, 26;
	setp.lt.s32 	%p262, %r753, 0;
	and.b32  	%r758, %r756, -67108864;
	setp.ne.s32 	%p263, %r758, %r753;
	and.pred  	%p264, %p262, %p263;
	selp.u32 	%r759, 1, 0, %p264;
	sub.s32 	%r760, %r759, %r757;
	shl.b32 	%r761, %r760, 26;
	add.s32 	%r762, %r761, %r753;
	mul.wide.s32 	%rd99, %r762, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r763, %r764, %r765, %r766}, [%rd100];
	selp.b32 	%r767, %r742, %r740, %p243;
	shfl.sync.bfly.b32	%r768, %r767, 4, 31, -1;
	selp.b32 	%r625, %r740, %r768, %p243;
	selp.b32 	%r630, %r768, %r742, %p243;
	selp.b32 	%r769, %r743, %r741, %p243;
	shfl.sync.bfly.b32	%r770, %r769, 4, 31, -1;
	selp.b32 	%r633, %r741, %r770, %p243;
	selp.b32 	%r638, %r770, %r743, %p243;
	selp.b32 	%r771, %r765, %r763, %p243;
	shfl.sync.bfly.b32	%r772, %r771, 4, 31, -1;
	selp.b32 	%r641, %r763, %r772, %p243;
	selp.b32 	%r646, %r772, %r765, %p243;
	selp.b32 	%r773, %r766, %r764, %p243;
	shfl.sync.bfly.b32	%r774, %r773, 4, 31, -1;
	selp.b32 	%r649, %r764, %r774, %p243;
	selp.b32 	%r654, %r774, %r766, %p243;
	shl.b32 	%r626, %r630, 4;
	mov.u32 	%r624, 252645135;
	// begin inline asm
	lop3.b32 %r656, %r624, %r625, %r626, 202;
	// end inline asm
	shr.u32 	%r629, %r625, 4;
	// begin inline asm
	lop3.b32 %r672, %r624, %r629, %r630, 202;
	// end inline asm
	shl.b32 	%r634, %r638, 4;
	// begin inline asm
	lop3.b32 %r664, %r624, %r633, %r634, 202;
	// end inline asm
	shr.u32 	%r637, %r633, 4;
	// begin inline asm
	lop3.b32 %r680, %r624, %r637, %r638, 202;
	// end inline asm
	shl.b32 	%r642, %r646, 4;
	// begin inline asm
	lop3.b32 %r657, %r624, %r641, %r642, 202;
	// end inline asm
	shr.u32 	%r645, %r641, 4;
	// begin inline asm
	lop3.b32 %r673, %r624, %r645, %r646, 202;
	// end inline asm
	shl.b32 	%r650, %r654, 4;
	// begin inline asm
	lop3.b32 %r665, %r624, %r649, %r650, 202;
	// end inline asm
	shr.u32 	%r653, %r649, 4;
	// begin inline asm
	lop3.b32 %r681, %r624, %r653, %r654, 202;
	// end inline asm
	mov.u32 	%r658, 25152;
	// begin inline asm
	prmt.b32 %r688, %r656, %r657, %r658;
	// end inline asm
	mov.u32 	%r662, 29521;
	// begin inline asm
	prmt.b32 %r704, %r656, %r657, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r664, %r665, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r664, %r665, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r672, %r673, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r672, %r673, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r697, %r680, %r681, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r680, %r681, %r662;
	// end inline asm
	mov.u32 	%r714, 21520;
	// begin inline asm
	prmt.b32 %r687, %r688, %r689, %r714;
	// end inline asm
	mov.u32 	%r718, 30258;
	// begin inline asm
	prmt.b32 %r691, %r688, %r689, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r696, %r697, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r699, %r696, %r697, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r704, %r705, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r704, %r705, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r712, %r713, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r715, %r712, %r713, %r718;
	// end inline asm
	mul.hi.s32 	%r775, %r722, 715827883;
	shr.u32 	%r776, %r775, 31;
	shr.s32 	%r777, %r775, 2;
	add.s32 	%r778, %r777, %r776;
	mul.lo.s32 	%r779, %r778, 24;
	sub.s32 	%r780, %r722, %r779;
	add.s32 	%r781, %r780, %r195;
	mul.wide.s32 	%rd101, %r781, 4;
	add.s64 	%rd103, %rd87, %rd101;
	st.shared.u32 	[%rd103], %r687;
	add.s32 	%r782, %r781, 128;
	mul.wide.u32 	%rd104, %r782, 4;
	add.s64 	%rd105, %rd87, %rd104;
	st.shared.u32 	[%rd105], %r695;
	add.s32 	%r783, %r781, 64;
	mul.wide.u32 	%rd106, %r783, 4;
	add.s64 	%rd107, %rd87, %rd106;
	st.shared.u32 	[%rd107], %r691;
	add.s32 	%r784, %r781, 192;
	mul.wide.u32 	%rd108, %r784, 4;
	add.s64 	%rd109, %rd87, %rd108;
	st.shared.u32 	[%rd109], %r699;
	add.s32 	%r785, %r781, 32;
	mul.wide.u32 	%rd110, %r785, 4;
	add.s64 	%rd111, %rd87, %rd110;
	st.shared.u32 	[%rd111], %r703;
	add.s32 	%r786, %r781, 160;
	mul.wide.u32 	%rd112, %r786, 4;
	add.s64 	%rd113, %rd87, %rd112;
	st.shared.u32 	[%rd113], %r711;
	add.s32 	%r787, %r781, 96;
	mul.wide.u32 	%rd114, %r787, 4;
	add.s64 	%rd115, %rd87, %rd114;
	st.shared.u32 	[%rd115], %r707;
	add.s32 	%r788, %r781, 224;
	mul.wide.u32 	%rd116, %r788, 4;
	add.s64 	%rd117, %rd87, %rd116;
	st.shared.u32 	[%rd117], %r715;
	bar.sync 	0;
	add.s32 	%r789, %r231, %r196;
	cvt.u16.u32 	%rs50, %r789;
	mul.hi.s16 	%rs51, %rs50, 10923;
	shr.u16 	%rs52, %rs51, 15;
	shr.s16 	%rs53, %rs51, 2;
	add.s16 	%rs54, %rs53, %rs52;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs50, %rs55;
	cvt.s32.s16 	%r232, %rs56;
	add.s32 	%r790, %r3, %r232;
	mul.wide.s32 	%rd118, %r790, 4;
	add.s64 	%rd119, %rd87, %rd118;
	ld.shared.u32 	%r233, [%rd119];
	add.s32 	%r791, %r197, %r232;
	mul.wide.s32 	%rd120, %r791, 4;
	add.s64 	%rd121, %rd87, %rd120;
	ld.shared.u32 	%r234, [%rd121];
	add.s32 	%r792, %r198, %r232;
	mul.wide.u32 	%rd122, %r792, 4;
	add.s64 	%rd123, %rd87, %rd122;
	ld.shared.u32 	%r235, [%rd123];
	add.s32 	%r793, %r199, %r232;
	mul.wide.u32 	%rd124, %r793, 4;
	add.s64 	%rd125, %rd87, %rd124;
	ld.shared.u32 	%r236, [%rd125];
	add.s32 	%r794, %r200, %r232;
	mul.wide.u32 	%rd126, %r794, 4;
	add.s64 	%rd127, %rd87, %rd126;
	ld.shared.u32 	%r237, [%rd127];
	add.s32 	%r795, %r201, %r232;
	mul.wide.u32 	%rd128, %r795, 4;
	add.s64 	%rd129, %rd87, %rd128;
	ld.shared.u32 	%r238, [%rd129];
	add.s32 	%r796, %r202, %r232;
	mul.wide.u32 	%rd130, %r796, 4;
	add.s64 	%rd131, %rd87, %rd130;
	ld.shared.u32 	%r239, [%rd131];
	add.s32 	%r797, %r203, %r232;
	mul.wide.u32 	%rd132, %r797, 4;
	add.s64 	%rd133, %rd87, %rd132;
	ld.shared.u32 	%r240, [%rd133];
	add.s32 	%r798, %r204, %r232;
	mul.wide.u32 	%rd134, %r798, 4;
	add.s64 	%rd135, %rd87, %rd134;
	ld.shared.u32 	%r241, [%rd135];
	add.s32 	%r799, %r205, %r232;
	mul.wide.u32 	%rd136, %r799, 4;
	add.s64 	%rd137, %rd87, %rd136;
	ld.shared.u32 	%r242, [%rd137];
	add.s32 	%r800, %r206, %r232;
	mul.wide.s32 	%rd138, %r800, 4;
	add.s64 	%rd139, %rd87, %rd138;
	ld.shared.u32 	%r243, [%rd139];
	bar.sync 	0;
	shfl.sync.idx.b32	%r244, %r184, 0, 31, -1;
	shfl.sync.idx.b32	%r245, %r184, 1, 31, -1;
	shfl.sync.idx.b32	%r246, %r184, 2, 31, -1;
	shfl.sync.idx.b32	%r247, %r184, 3, 31, -1;
	shfl.sync.idx.b32	%r248, %r184, 4, 31, -1;
	shfl.sync.idx.b32	%r249, %r184, 5, 31, -1;
	shfl.sync.idx.b32	%r250, %r184, 6, 31, -1;
	shfl.sync.idx.b32	%r251, %r184, 7, 31, -1;
	shfl.sync.idx.b32	%r252, %r184, 8, 31, -1;
	shfl.sync.idx.b32	%r253, %r184, 9, 31, -1;
	shfl.sync.idx.b32	%r254, %r184, 10, 31, -1;
	shfl.sync.idx.b32	%r255, %r184, 11, 31, -1;
	shfl.sync.idx.b32	%r256, %r184, 12, 31, -1;
	shfl.sync.idx.b32	%r257, %r184, 13, 31, -1;
	shfl.sync.idx.b32	%r258, %r184, 14, 31, -1;
	shfl.sync.idx.b32	%r259, %r184, 15, 31, -1;
	setp.eq.s32 	%p265, %r244, 999999999;
	@%p265 bra 	$L__BB0_146;
// %bb.200:                             // %oksrem2303
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r801, %r244, %r232;
	mul.wide.s32 	%rd140, %r801, 4;
	add.s64 	%rd142, %rd87, %rd140;
	st.shared.u32 	[%rd142], %r233;
	setp.eq.s32 	%p266, %r245, 999999999;
	@%p266 bra 	$L__BB0_147;
// %bb.201:                             // %oksrem2371
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r802, %r245, %r232;
	mul.wide.s32 	%rd143, %r802, 4;
	add.s64 	%rd145, %rd87, %rd143;
	st.shared.u32 	[%rd145], %r234;
	setp.eq.s32 	%p267, %r246, 999999999;
	@%p267 bra 	$L__BB0_148;
// %bb.202:                             // %oksrem2439
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r803, %r246, %r232;
	mul.wide.s32 	%rd146, %r803, 4;
	add.s64 	%rd148, %rd87, %rd146;
	st.shared.u32 	[%rd148], %r235;
	setp.eq.s32 	%p268, %r247, 999999999;
	@%p268 bra 	$L__BB0_149;
// %bb.203:                             // %oksrem2507
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r804, %r247, %r232;
	mul.wide.s32 	%rd149, %r804, 4;
	add.s64 	%rd151, %rd87, %rd149;
	st.shared.u32 	[%rd151], %r236;
	setp.eq.s32 	%p269, %r248, 999999999;
	@%p269 bra 	$L__BB0_150;
// %bb.204:                             // %oksrem2575
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r805, %r248, %r232;
	mul.wide.s32 	%rd152, %r805, 4;
	add.s64 	%rd154, %rd87, %rd152;
	st.shared.u32 	[%rd154], %r237;
	setp.eq.s32 	%p270, %r249, 999999999;
	@%p270 bra 	$L__BB0_151;
// %bb.205:                             // %oksrem2643
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r806, %r249, %r232;
	mul.wide.s32 	%rd155, %r806, 4;
	add.s64 	%rd157, %rd87, %rd155;
	st.shared.u32 	[%rd157], %r238;
	setp.eq.s32 	%p271, %r250, 999999999;
	@%p271 bra 	$L__BB0_152;
// %bb.206:                             // %oksrem2711
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r807, %r250, %r232;
	mul.wide.s32 	%rd158, %r807, 4;
	add.s64 	%rd160, %rd87, %rd158;
	st.shared.u32 	[%rd160], %r239;
	setp.eq.s32 	%p272, %r251, 999999999;
	@%p272 bra 	$L__BB0_153;
// %bb.207:                             // %oksrem2779
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r808, %r251, %r232;
	mul.wide.s32 	%rd161, %r808, 4;
	add.s64 	%rd163, %rd87, %rd161;
	st.shared.u32 	[%rd163], %r240;
	setp.eq.s32 	%p273, %r252, 999999999;
	@%p273 bra 	$L__BB0_154;
// %bb.208:                             // %oksrem2847
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r809, %r252, %r232;
	mul.wide.s32 	%rd164, %r809, 4;
	add.s64 	%rd166, %rd87, %rd164;
	st.shared.u32 	[%rd166], %r241;
	setp.eq.s32 	%p274, %r253, 999999999;
	@%p274 bra 	$L__BB0_155;
// %bb.209:                             // %oksrem2915
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r810, %r253, %r232;
	mul.wide.s32 	%rd167, %r810, 4;
	add.s64 	%rd169, %rd87, %rd167;
	st.shared.u32 	[%rd169], %r242;
	setp.eq.s32 	%p275, %r254, 999999999;
	@%p275 bra 	$L__BB0_156;
// %bb.210:                             // %oksrem2984
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.gt.u32 	%p276, %r2, 3;
	selp.b32 	%r811, 0, %r243, %p276;
	add.s32 	%r812, %r254, %r232;
	mul.wide.s32 	%rd170, %r812, 4;
	add.s64 	%rd172, %rd87, %rd170;
	st.shared.u32 	[%rd172], %r811;
	setp.eq.s32 	%p277, %r255, 999999999;
	@%p277 bra 	$L__BB0_157;
// %bb.211:                             // %oksrem3052
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r813, %r255, %r232;
	mul.wide.s32 	%rd173, %r813, 4;
	add.s64 	%rd175, %rd87, %rd173;
	mov.u32 	%r814, 0;
	st.shared.u32 	[%rd175], %r814;
	setp.eq.s32 	%p278, %r256, 999999999;
	@%p278 bra 	$L__BB0_158;
// %bb.212:                             // %oksrem3119
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r815, %r256, %r232;
	mul.wide.s32 	%rd176, %r815, 4;
	add.s64 	%rd178, %rd87, %rd176;
	st.shared.u32 	[%rd178], %r814;
	setp.eq.s32 	%p279, %r257, 999999999;
	@%p279 bra 	$L__BB0_159;
// %bb.213:                             // %oksrem3186
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r817, %r257, %r232;
	mul.wide.s32 	%rd179, %r817, 4;
	add.s64 	%rd181, %rd87, %rd179;
	st.shared.u32 	[%rd181], %r814;
	setp.eq.s32 	%p280, %r258, 999999999;
	@%p280 bra 	$L__BB0_160;
// %bb.214:                             // %oksrem3253
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r819, %r258, %r232;
	mul.wide.s32 	%rd182, %r819, 4;
	add.s64 	%rd184, %rd87, %rd182;
	st.shared.u32 	[%rd184], %r814;
	setp.eq.s32 	%p281, %r259, 999999999;
	@%p281 bra 	$L__BB0_161;
// %bb.215:                             // %oksrem3320
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p282, %r186, 3;
	add.s32 	%r822, %r259, %r232;
	mul.wide.s32 	%rd185, %r822, 4;
	add.s64 	%rd187, %rd87, %rd185;
	st.shared.u32 	[%rd187], %r814;
	bar.sync 	0;
	mov.u32 	%r91, %r814;
	mov.u32 	%r92, %r814;
	mov.u32 	%r93, %r814;
	mov.u32 	%r94, %r814;
	mov.u32 	%r95, %r814;
	mov.u32 	%r96, %r814;
	mov.u32 	%r97, %r814;
	mov.u32 	%r98, %r814;
	mov.u32 	%r99, %r814;
	mov.u32 	%r100, %r814;
	mov.u32 	%r101, %r814;
	mov.u32 	%r102, %r814;
	mov.u32 	%r103, %r814;
	mov.u32 	%r104, %r814;
	mov.u32 	%r105, %r814;
	mov.u32 	%r106, %r814;
	@%p282 bra 	$L__BB0_162;
// %bb.216:                             // %oksrem3387
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r260, %r231, %r207;
	ld.shared.u32 	%r91, [%rd24];
	ld.shared.u32 	%r92, [%rd25];
	ld.shared.u32 	%r93, [%rd26+12];
	ld.shared.u32 	%r94, [%rd27+12];
	ld.shared.u32 	%r95, [%rd26+24];
	ld.shared.u32 	%r96, [%rd27+24];
	ld.shared.u32 	%r97, [%rd26+36];
	ld.shared.u32 	%r98, [%rd27+36];
	add.s32 	%r823, %r260, 12;
	mul.hi.u32 	%r824, %r823, -1431655765;
	shr.u32 	%r825, %r824, 4;
	mul.lo.s32 	%r826, %r825, 24;
	sub.s32 	%r827, %r823, %r826;
	add.s32 	%r828, %r208, %r827;
	mul.wide.u32 	%rd188, %r828, 4;
	add.s64 	%rd190, %rd87, %rd188;
	ld.shared.u32 	%r99, [%rd190];
	add.s32 	%r829, %r209, %r827;
	mul.wide.u32 	%rd191, %r829, 4;
	add.s64 	%rd192, %rd87, %rd191;
	ld.shared.u32 	%r100, [%rd192];
	ld.shared.u32 	%r101, [%rd26+60];
	ld.shared.u32 	%r102, [%rd27+60];
	cvt.u16.u32 	%rs57, %r260;
	add.s16 	%rs58, %rs57, 18;
	mul.hi.s16 	%rs59, %rs58, 10923;
	shr.u16 	%rs60, %rs59, 15;
	shr.s16 	%rs61, %rs59, 2;
	add.s16 	%rs62, %rs61, %rs60;
	mul.lo.s16 	%rs63, %rs62, 24;
	sub.s16 	%rs64, %rs58, %rs63;
	cvt.s32.s16 	%r830, %rs64;
	add.s32 	%r831, %r208, %r830;
	mul.wide.s32 	%rd193, %r831, 4;
	add.s64 	%rd194, %rd87, %rd193;
	ld.shared.u32 	%r103, [%rd194];
	add.s32 	%r832, %r209, %r830;
	mul.wide.u32 	%rd195, %r832, 4;
	add.s64 	%rd196, %rd87, %rd195;
	ld.shared.u32 	%r104, [%rd196];
	add.s16 	%rs65, %rs57, 21;
	mul.hi.s16 	%rs66, %rs65, 10923;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 2;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 24;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.s32.s16 	%r833, %rs71;
	add.s32 	%r834, %r208, %r833;
	mul.wide.s32 	%rd197, %r834, 4;
	add.s64 	%rd198, %rd87, %rd197;
	ld.shared.u32 	%r105, [%rd198];
	add.s32 	%r835, %r209, %r833;
	mul.wide.u32 	%rd199, %r835, 4;
	add.s64 	%rd200, %rd87, %rd199;
	ld.shared.u32 	%r106, [%rd200];
$L__BB0_162:                            // %L10556
                                        //   in Loop: Header=BB0_198 Depth=1
	bar.sync 	0;
	mul.lo.s32 	%r837, %r111, 786432;
	add.s32 	%r110, %r228, %r837;
	add.s32 	%r3074, %r230, %r837;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r112, %r814;
$L__BB0_163:                            // %L10574
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r3078, %r3074;
	setp.eq.s32 	%p283, %r112, 0;
	selp.b32 	%r1230, %r91, 0, %p283;
	setp.eq.s32 	%p284, %r112, 6;
	selp.b32 	%r1231, %r95, %r1230, %p284;
	setp.eq.s32 	%p285, %r112, 12;
	selp.b32 	%r1232, %r99, %r1231, %p285;
	setp.eq.s32 	%p286, %r112, 18;
	selp.b32 	%r1233, %r103, %r1232, %p286;
	selp.b32 	%r1234, %r92, 0, %p283;
	selp.b32 	%r1235, %r96, %r1234, %p284;
	selp.b32 	%r1236, %r100, %r1235, %p285;
	selp.b32 	%r1237, %r104, %r1236, %p286;
	selp.b32 	%r1238, %r93, 0, %p283;
	selp.b32 	%r1239, %r97, %r1238, %p284;
	selp.b32 	%r1240, %r101, %r1239, %p285;
	selp.b32 	%r1241, %r105, %r1240, %p286;
	selp.b32 	%r1242, %r94, 0, %p283;
	selp.b32 	%r1243, %r98, %r1242, %p284;
	selp.b32 	%r1244, %r102, %r1243, %p285;
	selp.b32 	%r1245, %r106, %r1244, %p286;
	mov.u16 	%rs109, 25600;
	// begin inline asm
	mov.b32 %r843, {%rs109, %rs109};
	// end inline asm
	mov.u16 	%rs111, 21504;
	// begin inline asm
	mov.b32 %r854, {%rs111, %rs111};
	// end inline asm
	xor.b32  	%r842, %r1233, -2004318072;
	mov.u32 	%r979, 983055;
	// begin inline asm
	lop3.b32 %r840, %r979, %r842, %r843, 202;
	// end inline asm
	mov.u16 	%rs115, 18432;
	// begin inline asm
	mov.b32 %r844, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r845, %r843, %r844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r848, %r840, %r845;
	// end inline asm
	mov.u32 	%r990, 15728880;
	// begin inline asm
	lop3.b32 %r851, %r990, %r842, %r854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r855, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r856, %r854, %r855;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r859, %r851, %r856;
	// end inline asm
	// begin inline asm
	mov.b32 %r889, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r900, {%rs111, %rs111};
	// end inline asm
	xor.b32  	%r888, %r1237, -2004318072;
	// begin inline asm
	lop3.b32 %r886, %r979, %r888, %r889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r890, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r891, %r889, %r890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r894, %r886, %r891;
	// end inline asm
	// begin inline asm
	lop3.b32 %r897, %r990, %r888, %r900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r901, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r902, %r900, %r901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r905, %r897, %r902;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r946, {%rs111, %rs111};
	// end inline asm
	xor.b32  	%r934, %r1241, -2004318072;
	// begin inline asm
	lop3.b32 %r932, %r979, %r934, %r935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r937, %r935, %r936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r940, %r932, %r937;
	// end inline asm
	// begin inline asm
	lop3.b32 %r943, %r990, %r934, %r946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r948, %r946, %r947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r951, %r943, %r948;
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r992, {%rs111, %rs111};
	// end inline asm
	xor.b32  	%r980, %r1245, -2004318072;
	// begin inline asm
	lop3.b32 %r978, %r979, %r980, %r981, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r983, %r981, %r982;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r986, %r978, %r983;
	// end inline asm
	// begin inline asm
	lop3.b32 %r989, %r990, %r980, %r992, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r993, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r994, %r992, %r993;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r997, %r989, %r994;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r848;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1022, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r894;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1025, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r189;
    mov.b32 {%r2re, %r2im}, %r859;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1028, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r190;
    mov.b32 {%r2re, %r2im}, %r905;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1031, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r940;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1034, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r986;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1037, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r189;
    mov.b32 {%r2re, %r2im}, %r951;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1040, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r190;
    mov.b32 {%r2re, %r2im}, %r997;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1043, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1046, %r1047}, {%r329, %r332}, {%r1022}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1053, %r1054}, {%r329, %r332}, {%r1025}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1060, %r1061}, {%r329, %r332}, {%r1028}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1067, %r1068}, {%r329, %r332}, {%r1031}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1074, %r1075}, {%r329, %r332}, {%r1034}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1081, %r1082}, {%r329, %r332}, {%r1037}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1088, %r1089}, {%r329, %r332}, {%r1040}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1095, %r1096}, {%r329, %r332}, {%r1043}, {%r814, %r814};
	// end inline asm
	@%p1 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_164;
$L__BB0_217:                            // %pass4742
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1102, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1104, %r1102, %r1047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r381, %r1046, %r1104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1111, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1113, %r1111, %r1054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r381, %r1053, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1120, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1122, %r1120, %r1061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r381, %r1060, %r1122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1129, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1131, %r1129, %r1068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1134, %r381, %r1067, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1138, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1140, %r1138, %r1075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r381, %r1074, %r1140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1147, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1149, %r1147, %r1082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r381, %r1081, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1156, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r1156, %r1089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r381, %r1088, %r1158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1165, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r1165, %r1096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r381, %r1095, %r1167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1174, %r384, %r1046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r381, %r1047, %r1174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1181, %r384, %r1053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r381, %r1054, %r1181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1188, %r384, %r1060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1191, %r381, %r1061, %r1188;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1195, %r384, %r1067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1198, %r381, %r1068, %r1195;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1202, %r384, %r1074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1205, %r381, %r1075, %r1202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1209, %r384, %r1081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1212, %r381, %r1082, %r1209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1216, %r384, %r1088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1219, %r381, %r1089, %r1216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1223, %r384, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1226, %r381, %r1096, %r1223;
	// end inline asm
	setp.gt.u32 	%p287, %r307, 11;
	mov.u32 	%r1316, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1319, %r1320}, {%r425, %r428}, {%r1107, %r1177}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1327, %r1328}, {%r425, %r428}, {%r1116, %r1184}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1335, %r1336}, {%r425, %r428}, {%r1125, %r1191}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1343, %r1344}, {%r425, %r428}, {%r1134, %r1198}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1351, %r1352}, {%r425, %r428}, {%r1143, %r1205}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1359, %r1360}, {%r425, %r428}, {%r1152, %r1212}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1367, %r1368}, {%r425, %r428}, {%r1161, %r1219}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1375, %r1376}, {%r425, %r428}, {%r1170, %r1226}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r1319, %r1320, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r1319, %r1320, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r1327, %r1328, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r1327, %r1328, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r1335, %r1336, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r1335, %r1336, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r1343, %r1344, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r1343, %r1344, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r1351, %r1352, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r1351, %r1352, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r1359, %r1360, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r1359, %r1360, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r1367, %r1368, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r1367, %r1368, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r1375, %r1376, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r1375, %r1376, %r718;
	// end inline asm
	add.s16 	%rs120, %rs8, %rs3;
	mul.hi.s16 	%rs121, %rs120, 10923;
	shr.u16 	%rs122, %rs121, 15;
	add.s16 	%rs123, %rs121, %rs122;
	mul.lo.s16 	%rs124, %rs123, 6;
	sub.s16 	%rs125, %rs120, %rs124;
	mul.wide.s16 	%r1382, %rs125, 16;
	add.s32 	%r1383, %r215, %r1382;
	mul.wide.s32 	%rd203, %r1383, 4;
	add.s64 	%rd28, %rd87, %rd203;
	st.shared.u32 	[%rd28], %r277;
	add.s32 	%r1384, %r217, %r1382;
	mul.wide.u32 	%rd205, %r1384, 4;
	add.s64 	%rd29, %rd87, %rd205;
	st.shared.u32 	[%rd29], %r278;
	add.s32 	%r1385, %r219, %r1382;
	mul.wide.s32 	%rd206, %r1385, 4;
	add.s64 	%rd30, %rd87, %rd206;
	st.shared.u32 	[%rd30], %r279;
	add.s32 	%r1386, %r220, %r1382;
	mul.wide.u32 	%rd207, %r1386, 4;
	add.s64 	%rd31, %rd87, %rd207;
	st.shared.u32 	[%rd31], %r280;
	cvt.s64.s32 	%rd208, %r1382;
	cvt.u64.u32 	%rd209, %r214;
	cvt.u64.u32 	%rd210, %r213;
	cvt.u64.u32 	%rd211, %r212;
	cvt.u64.u32 	%rd212, %r210;
	cvt.u64.u32 	%rd213, %r211;
	add.s64 	%rd214, %rd213, %rd212;
	add.s64 	%rd215, %rd214, %rd211;
	add.s64 	%rd216, %rd215, %rd210;
	add.s64 	%rd32, %rd216, %rd209;
	add.s64 	%rd217, %rd32, %rd208;
	shl.b64 	%rd218, %rd217, 2;
	add.s64 	%rd33, %rd87, %rd218;
	st.shared.u32 	[%rd33+32], %r281;
	add.s32 	%r1387, %r221, %r1382;
	mul.wide.u32 	%rd219, %r1387, 4;
	add.s64 	%rd34, %rd87, %rd219;
	st.shared.u32 	[%rd34], %r282;
	cvt.u64.u32 	%rd220, %r218;
	add.s64 	%rd35, %rd216, %rd220;
	add.s64 	%rd221, %rd35, %rd208;
	shl.b64 	%rd222, %rd221, 2;
	add.s64 	%rd36, %rd87, %rd222;
	st.shared.u32 	[%rd36+32], %r283;
	add.s32 	%r1388, %r222, %r1382;
	mul.wide.u32 	%rd223, %r1388, 4;
	add.s64 	%rd37, %rd87, %rd223;
	st.shared.u32 	[%rd37], %r284;
	add.s32 	%r1389, %r88, %r112;
	mul.hi.u32 	%r1390, %r1389, -1431655765;
	shr.u32 	%r1391, %r1390, 2;
	mul.lo.s32 	%r1392, %r1391, 6;
	sub.s32 	%r1393, %r1389, %r1392;
	shl.b32 	%r1394, %r1393, 4;
	add.s32 	%r1395, %r215, %r1394;
	mul.wide.u32 	%rd224, %r1395, 4;
	add.s64 	%rd38, %rd87, %rd224;
	st.shared.u32 	[%rd38], %r285;
	add.s32 	%r1396, %r217, %r1394;
	mul.wide.u32 	%rd225, %r1396, 4;
	add.s64 	%rd39, %rd87, %rd225;
	st.shared.u32 	[%rd39], %r286;
	add.s32 	%r1397, %r219, %r1394;
	mul.wide.u32 	%rd226, %r1397, 4;
	add.s64 	%rd40, %rd87, %rd226;
	st.shared.u32 	[%rd40], %r287;
	add.s32 	%r1398, %r220, %r1394;
	mul.wide.u32 	%rd227, %r1398, 4;
	add.s64 	%rd41, %rd87, %rd227;
	st.shared.u32 	[%rd41], %r288;
	cvt.u64.u32 	%rd228, %r1394;
	add.s64 	%rd229, %rd32, %rd228;
	shl.b64 	%rd230, %rd229, 2;
	add.s64 	%rd42, %rd87, %rd230;
	st.shared.u32 	[%rd42+32], %r289;
	cvt.u64.u32 	%rd231, %r216;
	add.s64 	%rd232, %rd213, %rd231;
	add.s64 	%rd233, %rd232, %rd211;
	add.s64 	%rd234, %rd233, %rd210;
	add.s64 	%rd235, %rd234, %rd209;
	add.s64 	%rd236, %rd235, %rd228;
	shl.b64 	%rd237, %rd236, 2;
	add.s64 	%rd43, %rd87, %rd237;
	st.shared.u32 	[%rd43+32], %r290;
	add.s64 	%rd238, %rd35, %rd228;
	shl.b64 	%rd239, %rd238, 2;
	add.s64 	%rd44, %rd87, %rd239;
	st.shared.u32 	[%rd44+32], %r291;
	add.s64 	%rd240, %rd234, %rd220;
	add.s64 	%rd241, %rd240, %rd228;
	shl.b64 	%rd242, %rd241, 2;
	add.s64 	%rd45, %rd87, %rd242;
	st.shared.u32 	[%rd45+32], %r292;
	@%p287 bra 	$L__BB0_219;
// %bb.218:                             // %oksrem7074
                                        //   in Loop: Header=BB0_163 Depth=2
	st.shared.u32 	[%rd28], %r277;
	st.shared.u32 	[%rd29], %r278;
	st.shared.u32 	[%rd30], %r279;
	st.shared.u32 	[%rd31], %r280;
	st.shared.u32 	[%rd33+32], %r281;
	st.shared.u32 	[%rd34], %r282;
	st.shared.u32 	[%rd36+32], %r283;
	st.shared.u32 	[%rd37], %r284;
	st.shared.u32 	[%rd38], %r285;
	st.shared.u32 	[%rd39], %r286;
	st.shared.u32 	[%rd40], %r287;
	st.shared.u32 	[%rd41], %r288;
	st.shared.u32 	[%rd42+32], %r289;
	st.shared.u32 	[%rd43+32], %r290;
	st.shared.u32 	[%rd44+32], %r291;
	st.shared.u32 	[%rd45+32], %r292;
$L__BB0_219:                            // %L19961
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	mul.hi.s16 	%rs126, %rs3, 10923;
	shr.u16 	%rs127, %rs126, 15;
	add.s16 	%rs128, %rs126, %rs127;
	mul.lo.s16 	%rs129, %rs128, 6;
	sub.s16 	%rs130, %rs3, %rs129;
	mul.wide.s16 	%r1445, %rs130, 16;
	add.s32 	%r1446, %r223, %r1445;
	mul.wide.s32 	%rd243, %r1446, 4;
	add.s64 	%rd245, %rd87, %rd243;
	ld.shared.u32 	%r1403, [%rd245];
	add.s32 	%r1447, %r224, %r1445;
	mul.wide.s32 	%rd246, %r1447, 4;
	add.s64 	%rd247, %rd87, %rd246;
	ld.shared.u32 	%r1410, [%rd247];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1399, %r1400}, {%r437, %r440}, {%r1403}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1406, %r1407}, {%r437, %r440}, {%r1410}, {%r1316, %r1316};
	// end inline asm
	@%p288 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_220;
$L__BB0_165:                            // %pass9511
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1413, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1415, %r1413, %r1400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r475, %r1399, %r1415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1422, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r1422, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r475, %r1406, %r1424;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1431, %r478, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1434, %r475, %r1400, %r1431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1438, %r478, %r1406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1441, %r475, %r1407, %r1438;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1467, %r1470}, {%r521, %r524}, {%r1418, %r1434}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1474, %r1478}, {%r521, %r524}, {%r1427, %r1441}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1466, %r1467, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1469, %r1470, %r1470, %r1466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r1474, %r1474, %r1469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r1478, %r1478, %r1473;
	// end inline asm
	mov.u32 	%r1897, 626337109;
	// begin inline asm
	fma.rn.f16x2 %r1481, %r1897, %r1477, %r1316;
	// end inline asm
	add.s32 	%r1900, %r89, %r112;
	add.s32 	%r1901, %r1900, 1;
	mul.hi.u32 	%r1902, %r1901, -1431655765;
	shr.u32 	%r1903, %r1902, 2;
	mul.lo.s32 	%r1904, %r1903, 6;
	sub.s32 	%r1905, %r1901, %r1904;
	shl.b32 	%r1906, %r1905, 4;
	add.s32 	%r1907, %r223, %r1906;
	mul.wide.u32 	%rd250, %r1907, 4;
	add.s64 	%rd252, %rd87, %rd250;
	ld.shared.u32 	%r1489, [%rd252];
	add.s32 	%r1908, %r224, %r1906;
	mul.wide.u32 	%rd253, %r1908, 4;
	add.s64 	%rd254, %rd87, %rd253;
	ld.shared.u32 	%r1496, [%rd254];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1506, %r1503}, {%r437, %r440}, {%r1489}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1515, %r1512}, {%r437, %r440}, {%r1496}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1499, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1501, %r1499, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1504, %r475, %r1506, %r1501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1508, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1510, %r1508, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r475, %r1515, %r1510;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1517, %r478, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r475, %r1503, %r1517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r478, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r475, %r1512, %r1524;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1550, %r1553}, {%r521, %r524}, {%r1504, %r1520}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1557, %r1561}, {%r521, %r524}, {%r1513, %r1527}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1549, %r1550, %r1550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r1553, %r1553, %r1549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1556, %r1557, %r1557, %r1552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r1561, %r1561, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1564, %r1897, %r1560, %r1481;
	// end inline asm
	add.s32 	%r1909, %r1900, 2;
	mul.hi.u32 	%r1910, %r1909, -1431655765;
	shr.u32 	%r1911, %r1910, 2;
	mul.lo.s32 	%r1912, %r1911, 6;
	sub.s32 	%r1913, %r1909, %r1912;
	shl.b32 	%r1914, %r1913, 4;
	add.s32 	%r1915, %r223, %r1914;
	mul.wide.u32 	%rd255, %r1915, 4;
	add.s64 	%rd256, %rd87, %rd255;
	ld.shared.u32 	%r1572, [%rd256];
	add.s32 	%r1916, %r224, %r1914;
	mul.wide.u32 	%rd257, %r1916, 4;
	add.s64 	%rd258, %rd87, %rd257;
	ld.shared.u32 	%r1579, [%rd258];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1589, %r1586}, {%r437, %r440}, {%r1572}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1598, %r1595}, {%r437, %r440}, {%r1579}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1582, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1584, %r1582, %r1586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1587, %r475, %r1589, %r1584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1591, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1593, %r1591, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r475, %r1598, %r1593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1600, %r478, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1603, %r475, %r1586, %r1600;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1607, %r478, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r475, %r1595, %r1607;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1633, %r1636}, {%r521, %r524}, {%r1587, %r1603}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1640, %r1644}, {%r521, %r524}, {%r1596, %r1610}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1632, %r1633, %r1633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r1636, %r1636, %r1632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r1640, %r1640, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r1644, %r1644, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1647, %r1897, %r1643, %r1564;
	// end inline asm
	add.s32 	%r1917, %r1900, 3;
	mul.hi.u32 	%r1918, %r1917, -1431655765;
	shr.u32 	%r1919, %r1918, 2;
	mul.lo.s32 	%r1920, %r1919, 6;
	sub.s32 	%r1921, %r1917, %r1920;
	shl.b32 	%r1922, %r1921, 4;
	add.s32 	%r1923, %r223, %r1922;
	mul.wide.u32 	%rd259, %r1923, 4;
	add.s64 	%rd260, %rd87, %rd259;
	ld.shared.u32 	%r1655, [%rd260];
	add.s32 	%r1924, %r224, %r1922;
	mul.wide.u32 	%rd261, %r1924, 4;
	add.s64 	%rd262, %rd87, %rd261;
	ld.shared.u32 	%r1662, [%rd262];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1672, %r1669}, {%r437, %r440}, {%r1655}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1681, %r1678}, {%r437, %r440}, {%r1662}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1665, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1667, %r1665, %r1669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1670, %r475, %r1672, %r1667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1674, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1676, %r1674, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r475, %r1681, %r1676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1683, %r478, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r475, %r1669, %r1683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r478, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r475, %r1678, %r1690;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1716, %r1719}, {%r521, %r524}, {%r1670, %r1686}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1723, %r1727}, {%r521, %r524}, {%r1679, %r1693}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1716, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r1719, %r1719, %r1715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r1723, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r1727, %r1727, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r1897, %r1726, %r1647;
	// end inline asm
	add.s32 	%r1925, %r1900, 4;
	mul.hi.u32 	%r1926, %r1925, -1431655765;
	shr.u32 	%r1927, %r1926, 2;
	mul.lo.s32 	%r1928, %r1927, 6;
	sub.s32 	%r1929, %r1925, %r1928;
	shl.b32 	%r1930, %r1929, 4;
	add.s32 	%r1931, %r223, %r1930;
	mul.wide.u32 	%rd263, %r1931, 4;
	add.s64 	%rd264, %rd87, %rd263;
	ld.shared.u32 	%r1738, [%rd264];
	add.s32 	%r1932, %r224, %r1930;
	mul.wide.u32 	%rd265, %r1932, 4;
	add.s64 	%rd266, %rd87, %rd265;
	ld.shared.u32 	%r1745, [%rd266];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1755, %r1752}, {%r437, %r440}, {%r1738}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1764, %r1761}, {%r437, %r440}, {%r1745}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1748, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r1748, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r475, %r1755, %r1750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1757, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r1757, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r475, %r1764, %r1759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1766, %r478, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r475, %r1752, %r1766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r478, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r475, %r1761, %r1773;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1799, %r1802}, {%r521, %r524}, {%r1753, %r1769}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1806, %r1810}, {%r521, %r524}, {%r1762, %r1776}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1798, %r1799, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1802, %r1802, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1897, %r1809, %r1730;
	// end inline asm
	add.s32 	%r1933, %r1900, 5;
	mul.hi.u32 	%r1934, %r1933, -1431655765;
	shr.u32 	%r1935, %r1934, 2;
	mul.lo.s32 	%r1936, %r1935, 6;
	sub.s32 	%r1937, %r1933, %r1936;
	shl.b32 	%r1938, %r1937, 4;
	add.s32 	%r1939, %r223, %r1938;
	mul.wide.u32 	%rd267, %r1939, 4;
	add.s64 	%rd268, %rd87, %rd267;
	ld.shared.u32 	%r1821, [%rd268];
	add.s32 	%r1940, %r224, %r1938;
	mul.wide.u32 	%rd269, %r1940, 4;
	add.s64 	%rd270, %rd87, %rd269;
	ld.shared.u32 	%r1828, [%rd270];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1838, %r1835}, {%r437, %r440}, {%r1821}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1847, %r1844}, {%r437, %r440}, {%r1828}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1831, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1833, %r1831, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r475, %r1838, %r1833;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1840, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1842, %r1840, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r475, %r1847, %r1842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1849, %r478, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r475, %r1835, %r1849;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1856, %r478, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r475, %r1844, %r1856;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1882, %r1885}, {%r521, %r524}, {%r1836, %r1852}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1889, %r1893}, {%r521, %r524}, {%r1845, %r1859}, {%r1316, %r1316}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1881, %r1882, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r1885, %r1885, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r1889, %r1889, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r1893, %r1893, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r1897, %r1892, %r1813;
	// end inline asm
	cvt.u64.u32 	%rd271, %r110;
	add.s64 	%rd272, %rd271, %rd23;
	mul.hi.s64 	%rd273, %rd272, 3074457345618258603;
	shr.u64 	%rd274, %rd273, 63;
	shr.s64 	%rd275, %rd273, 27;
	add.s64 	%rd276, %rd275, %rd274;
	setp.lt.s64 	%p289, %rd272, 0;
	mul.lo.s64 	%rd277, %rd276, 805306368;
	setp.ne.s64 	%p290, %rd277, %rd272;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd278, -1, 0, %p291;
	add.s64 	%rd279, %rd276, %rd278;
	mul.lo.s64 	%rd280, %rd279, -805306368;
	add.s64 	%rd281, %rd280, %rd272;
	shl.b64 	%rd282, %rd281, 2;
	add.s64 	%rd283, %rd4, %rd282;
	st.global.u32 	[%rd283], %r1896;
	add.s32 	%r111, %r111, 1;
	bar.sync 	0;
	add.s32 	%r112, %r112, 6;
	add.s32 	%r110, %r110, 786432;
	add.s16 	%rs3, %rs3, 6;
	setp.eq.s32 	%p292, %r112, 24;
	add.s32 	%r3074, %r3078, 786432;
	@%p292 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_163;
$L__BB0_166:                            // %L25423.preheader
                                        //   in Loop: Header=BB0_198 Depth=1
	mov.u16 	%rs231, %rs1;
	mov.u32 	%r3080, %r1316;
	bra.uni 	$L__BB0_167;
$L__BB0_168:                            // %L34810
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s16 	%rs193, %rs231, -5;
	mul.hi.s16 	%rs194, %rs193, 10923;
	shr.u16 	%rs195, %rs194, 15;
	add.s16 	%rs196, %rs194, %rs195;
	mul.lo.s16 	%rs197, %rs196, 6;
	sub.s16 	%rs198, %rs193, %rs197;
	mul.wide.s16 	%r3002, %rs198, 16;
	add.s32 	%r3003, %r223, %r3002;
	mul.wide.s32 	%rd307, %r3003, 4;
	add.s64 	%rd309, %rd87, %rd307;
	ld.shared.u32 	%r2508, [%rd309];
	add.s32 	%r3004, %r224, %r3002;
	mul.wide.s32 	%rd310, %r3004, 4;
	add.s64 	%rd311, %rd87, %rd310;
	ld.shared.u32 	%r2515, [%rd311];
	mov.u32 	%r2509, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2525, %r2522}, {%r437, %r440}, {%r2508}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2534, %r2531}, {%r437, %r440}, {%r2515}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2518, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2520, %r2518, %r2522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2523, %r475, %r2525, %r2520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2527, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r2527, %r2531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r475, %r2534, %r2529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2536, %r478, %r2525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2539, %r475, %r2522, %r2536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2543, %r478, %r2534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2546, %r475, %r2531, %r2543;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2569, %r2572}, {%r521, %r524}, {%r2523, %r2539}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2576, %r2580}, {%r521, %r524}, {%r2532, %r2546}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2568, %r2569, %r2569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2571, %r2572, %r2572, %r2568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2575, %r2576, %r2576, %r2571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2579, %r2580, %r2580, %r2575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2583, %r1897, %r2579, %r2509;
	// end inline asm
	add.s16 	%rs199, %rs231, -4;
	mul.hi.s16 	%rs200, %rs199, 10923;
	shr.u16 	%rs201, %rs200, 15;
	add.s16 	%rs202, %rs200, %rs201;
	mul.lo.s16 	%rs203, %rs202, 6;
	sub.s16 	%rs204, %rs199, %rs203;
	mul.wide.s16 	%r3005, %rs204, 16;
	add.s32 	%r3006, %r223, %r3005;
	mul.wide.s32 	%rd312, %r3006, 4;
	add.s64 	%rd313, %rd87, %rd312;
	ld.shared.u32 	%r2591, [%rd313];
	add.s32 	%r3007, %r224, %r3005;
	mul.wide.s32 	%rd314, %r3007, 4;
	add.s64 	%rd315, %rd87, %rd314;
	ld.shared.u32 	%r2598, [%rd315];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2608, %r2605}, {%r437, %r440}, {%r2591}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2617, %r2614}, {%r437, %r440}, {%r2598}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2601, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2603, %r2601, %r2605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2606, %r475, %r2608, %r2603;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2610, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2612, %r2610, %r2614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2615, %r475, %r2617, %r2612;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r478, %r2608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r475, %r2605, %r2619;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2626, %r478, %r2617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2629, %r475, %r2614, %r2626;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2652, %r2655}, {%r521, %r524}, {%r2606, %r2622}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2659, %r2663}, {%r521, %r524}, {%r2615, %r2629}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r2652, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2654, %r2655, %r2655, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2658, %r2659, %r2659, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2662, %r2663, %r2663, %r2658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2666, %r1897, %r2662, %r2583;
	// end inline asm
	add.s16 	%rs205, %rs231, -3;
	mul.hi.s16 	%rs206, %rs205, 10923;
	shr.u16 	%rs207, %rs206, 15;
	add.s16 	%rs208, %rs206, %rs207;
	mul.lo.s16 	%rs209, %rs208, 6;
	sub.s16 	%rs210, %rs205, %rs209;
	mul.wide.s16 	%r3008, %rs210, 16;
	add.s32 	%r3009, %r223, %r3008;
	mul.wide.s32 	%rd316, %r3009, 4;
	add.s64 	%rd317, %rd87, %rd316;
	ld.shared.u32 	%r2674, [%rd317];
	add.s32 	%r3010, %r224, %r3008;
	mul.wide.s32 	%rd318, %r3010, 4;
	add.s64 	%rd319, %rd87, %rd318;
	ld.shared.u32 	%r2681, [%rd319];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2691, %r2688}, {%r437, %r440}, {%r2674}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2700, %r2697}, {%r437, %r440}, {%r2681}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2684, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r2684, %r2688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r475, %r2691, %r2686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2693, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r2693, %r2697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r475, %r2700, %r2695;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r478, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r475, %r2688, %r2702;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r478, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r475, %r2697, %r2709;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2735, %r2738}, {%r521, %r524}, {%r2689, %r2705}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2742, %r2746}, {%r521, %r524}, {%r2698, %r2712}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2734, %r2735, %r2735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2737, %r2738, %r2738, %r2734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r2742, %r2742, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r2746, %r2746, %r2741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r1897, %r2745, %r2666;
	// end inline asm
	add.s16 	%rs211, %rs231, -2;
	mul.hi.s16 	%rs212, %rs211, 10923;
	shr.u16 	%rs213, %rs212, 15;
	add.s16 	%rs214, %rs212, %rs213;
	mul.lo.s16 	%rs215, %rs214, 6;
	sub.s16 	%rs216, %rs211, %rs215;
	mul.wide.s16 	%r3011, %rs216, 16;
	add.s32 	%r3012, %r223, %r3011;
	mul.wide.s32 	%rd320, %r3012, 4;
	add.s64 	%rd321, %rd87, %rd320;
	ld.shared.u32 	%r2757, [%rd321];
	add.s32 	%r3013, %r224, %r3011;
	mul.wide.s32 	%rd322, %r3013, 4;
	add.s64 	%rd323, %rd87, %rd322;
	ld.shared.u32 	%r2764, [%rd323];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2774, %r2771}, {%r437, %r440}, {%r2757}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2783, %r2780}, {%r437, %r440}, {%r2764}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2767, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2769, %r2767, %r2771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r475, %r2774, %r2769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2776, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2778, %r2776, %r2780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r475, %r2783, %r2778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2785, %r478, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r475, %r2771, %r2785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2792, %r478, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r475, %r2780, %r2792;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2818, %r2821}, {%r521, %r524}, {%r2772, %r2788}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2825, %r2829}, {%r521, %r524}, {%r2781, %r2795}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2817, %r2818, %r2818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2820, %r2821, %r2821, %r2817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2824, %r2825, %r2825, %r2820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2828, %r2829, %r2829, %r2824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2832, %r1897, %r2828, %r2749;
	// end inline asm
	add.s16 	%rs217, %rs231, -1;
	mul.hi.s16 	%rs218, %rs217, 10923;
	shr.u16 	%rs219, %rs218, 15;
	add.s16 	%rs220, %rs218, %rs219;
	mul.lo.s16 	%rs221, %rs220, 6;
	sub.s16 	%rs222, %rs217, %rs221;
	mul.wide.s16 	%r3014, %rs222, 16;
	add.s32 	%r3015, %r223, %r3014;
	mul.wide.s32 	%rd324, %r3015, 4;
	add.s64 	%rd325, %rd87, %rd324;
	ld.shared.u32 	%r2840, [%rd325];
	add.s32 	%r3016, %r224, %r3014;
	mul.wide.s32 	%rd326, %r3016, 4;
	add.s64 	%rd327, %rd87, %rd326;
	ld.shared.u32 	%r2847, [%rd327];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2857, %r2854}, {%r437, %r440}, {%r2840}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2866, %r2863}, {%r437, %r440}, {%r2847}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2850, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2852, %r2850, %r2854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2855, %r475, %r2857, %r2852;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2859, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2861, %r2859, %r2863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2864, %r475, %r2866, %r2861;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2868, %r478, %r2857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2871, %r475, %r2854, %r2868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2875, %r478, %r2866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2878, %r475, %r2863, %r2875;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2901, %r2904}, {%r521, %r524}, {%r2855, %r2871}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2908, %r2912}, {%r521, %r524}, {%r2864, %r2878}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2900, %r2901, %r2901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2903, %r2904, %r2904, %r2900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r2908, %r2908, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r2912, %r2912, %r2907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r1897, %r2911, %r2832;
	// end inline asm
	mul.hi.s16 	%rs223, %rs231, 10923;
	shr.u16 	%rs224, %rs223, 15;
	add.s16 	%rs225, %rs223, %rs224;
	mul.lo.s16 	%rs226, %rs225, 6;
	sub.s16 	%rs227, %rs231, %rs226;
	mul.wide.s16 	%r3017, %rs227, 16;
	add.s32 	%r3018, %r223, %r3017;
	mul.wide.s32 	%rd328, %r3018, 4;
	add.s64 	%rd329, %rd87, %rd328;
	ld.shared.u32 	%r2923, [%rd329];
	add.s32 	%r3019, %r224, %r3017;
	mul.wide.s32 	%rd330, %r3019, 4;
	add.s64 	%rd331, %rd87, %rd330;
	ld.shared.u32 	%r2930, [%rd331];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2940, %r2937}, {%r437, %r440}, {%r2923}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2949, %r2946}, {%r437, %r440}, {%r2930}, {%r2509, %r2509};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2933, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2935, %r2933, %r2937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r475, %r2940, %r2935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2942, %r478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2944, %r2942, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r475, %r2949, %r2944;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2951, %r478, %r2940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r475, %r2937, %r2951;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2958, %r478, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r475, %r2946, %r2958;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2984, %r2987}, {%r521, %r524}, {%r2938, %r2954}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2991, %r2995}, {%r521, %r524}, {%r2947, %r2961}, {%r2509, %r2509}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r2984, %r2984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r2987, %r2987, %r2983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r2991, %r2991, %r2986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2994, %r2995, %r2995, %r2990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2998, %r1897, %r2994, %r2915;
	// end inline asm
	cvt.u64.u32 	%rd332, %r3078;
	add.s64 	%rd333, %rd332, %rd23;
	mul.hi.s64 	%rd334, %rd333, 3074457345618258603;
	shr.u64 	%rd335, %rd334, 63;
	shr.s64 	%rd336, %rd334, 27;
	add.s64 	%rd337, %rd336, %rd335;
	setp.lt.s64 	%p298, %rd333, 0;
	mul.lo.s64 	%rd338, %rd337, 805306368;
	setp.ne.s64 	%p299, %rd338, %rd333;
	and.pred  	%p300, %p298, %p299;
	selp.s64 	%rd339, -1, 0, %p300;
	add.s64 	%rd340, %rd337, %rd339;
	mul.lo.s64 	%rd341, %rd340, -805306368;
	add.s64 	%rd342, %rd341, %rd333;
	shl.b64 	%rd343, %rd342, 2;
	add.s64 	%rd344, %rd4, %rd343;
	st.global.u32 	[%rd344], %r2998;
	add.s32 	%r111, %r111, 1;
	bar.sync 	0;
	add.s32 	%r3080, %r3080, 6;
	add.s32 	%r3078, %r3078, 786432;
	add.s16 	%rs231, %rs231, 6;
	setp.ne.s32 	%p301, %r3080, 24;
	@%p301 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_169;
$L__BB0_167:                            // %L25423
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p293, %r307, 12;
	setp.eq.s32 	%p294, %r3080, 0;
	selp.b32 	%r2470, %r91, 0, %p294;
	setp.eq.s32 	%p295, %r3080, 6;
	selp.b32 	%r2471, %r95, %r2470, %p295;
	setp.eq.s32 	%p296, %r3080, 12;
	selp.b32 	%r2472, %r99, %r2471, %p296;
	setp.eq.s32 	%p297, %r3080, 18;
	selp.b32 	%r2473, %r103, %r2472, %p297;
	selp.b32 	%r2474, %r92, 0, %p294;
	selp.b32 	%r2475, %r96, %r2474, %p295;
	selp.b32 	%r2476, %r100, %r2475, %p296;
	selp.b32 	%r2477, %r104, %r2476, %p297;
	selp.b32 	%r2478, %r93, 0, %p294;
	selp.b32 	%r2479, %r97, %r2478, %p295;
	selp.b32 	%r2480, %r101, %r2479, %p296;
	selp.b32 	%r2481, %r105, %r2480, %p297;
	selp.b32 	%r2482, %r94, 0, %p294;
	selp.b32 	%r2483, %r98, %r2482, %p295;
	selp.b32 	%r2484, %r102, %r2483, %p296;
	selp.b32 	%r2485, %r106, %r2484, %p297;
	// begin inline asm
	mov.b32 %r1969, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r1980, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2486, %r2473, 8;
	xor.b32  	%r1979, %r2486, 8947848;
	// begin inline asm
	lop3.b32 %r1966, %r979, %r1979, %r1969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1970, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1971, %r1969, %r1970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1974, %r1966, %r1971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1977, %r990, %r1979, %r1980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1981, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1982, %r1980, %r1981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1985, %r1977, %r1982;
	// end inline asm
	// begin inline asm
	mov.b32 %r2015, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r2026, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2487, %r2477, 8;
	xor.b32  	%r2025, %r2487, 8947848;
	// begin inline asm
	lop3.b32 %r2012, %r979, %r2025, %r2015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2016, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2017, %r2015, %r2016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2020, %r2012, %r2017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2023, %r990, %r2025, %r2026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2027, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2028, %r2026, %r2027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2031, %r2023, %r2028;
	// end inline asm
	// begin inline asm
	mov.b32 %r2061, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r2072, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2488, %r2481, 8;
	xor.b32  	%r2071, %r2488, 8947848;
	// begin inline asm
	lop3.b32 %r2058, %r979, %r2071, %r2061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2062, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2063, %r2061, %r2062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2066, %r2058, %r2063;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2069, %r990, %r2071, %r2072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2073, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2074, %r2072, %r2073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2077, %r2069, %r2074;
	// end inline asm
	// begin inline asm
	mov.b32 %r2107, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r2118, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2489, %r2485, 8;
	xor.b32  	%r2117, %r2489, 8947848;
	// begin inline asm
	lop3.b32 %r2104, %r979, %r2117, %r2107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2108, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2109, %r2107, %r2108;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2112, %r2104, %r2109;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2115, %r990, %r2117, %r2118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2119, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2120, %r2118, %r2119;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2123, %r2115, %r2120;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r1974;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2126, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r2020;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2129, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r189;
    mov.b32 {%r2re, %r2im}, %r1985;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2132, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r190;
    mov.b32 {%r2re, %r2im}, %r2031;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2135, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2066;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2138, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r2112;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2141, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r189;
    mov.b32 {%r2re, %r2im}, %r2077;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2144, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r190;
    mov.b32 {%r2re, %r2im}, %r2123;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2147, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2213, %r2210}, {%r329, %r332}, {%r2126}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2222, %r2219}, {%r329, %r332}, {%r2129}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2231, %r2228}, {%r329, %r332}, {%r2132}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2240, %r2237}, {%r329, %r332}, {%r2135}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2249, %r2246}, {%r329, %r332}, {%r2138}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2258, %r2255}, {%r329, %r332}, {%r2141}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2267, %r2264}, {%r329, %r332}, {%r2144}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2276, %r2273}, {%r329, %r332}, {%r2147}, {%r1316, %r1316};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2206, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r2206, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2211, %r381, %r2213, %r2208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2215, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r2215, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r381, %r2222, %r2217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2224, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2226, %r2224, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2229, %r381, %r2231, %r2226;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2233, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r2233, %r2237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r381, %r2240, %r2235;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2242, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r2242, %r2246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r381, %r2249, %r2244;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2251, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2253, %r2251, %r2255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2256, %r381, %r2258, %r2253;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2260, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2262, %r2260, %r2264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2265, %r381, %r2267, %r2262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2269, %r384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r2269, %r2273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r381, %r2276, %r2271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2278, %r384, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2281, %r381, %r2210, %r2278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2285, %r384, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2288, %r381, %r2219, %r2285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2292, %r384, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2295, %r381, %r2228, %r2292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2299, %r384, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2302, %r381, %r2237, %r2299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2306, %r384, %r2249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2309, %r381, %r2246, %r2306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2313, %r384, %r2258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2316, %r381, %r2255, %r2313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2320, %r384, %r2267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2323, %r381, %r2264, %r2320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2327, %r384, %r2276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2330, %r381, %r2273, %r2327;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2407, %r2408}, {%r425, %r428}, {%r2211, %r2281}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2415, %r2416}, {%r425, %r428}, {%r2220, %r2288}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2423, %r2424}, {%r425, %r428}, {%r2229, %r2295}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2431, %r2432}, {%r425, %r428}, {%r2238, %r2302}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2439, %r2440}, {%r425, %r428}, {%r2247, %r2309}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2447, %r2448}, {%r425, %r428}, {%r2256, %r2316}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2455, %r2456}, {%r425, %r428}, {%r2265, %r2323}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2463, %r2464}, {%r425, %r428}, {%r2274, %r2330}, {%r1316, %r1316}, %r225, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2406, %r2407, %r2408, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2410, %r2407, %r2408, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2414, %r2415, %r2416, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2418, %r2415, %r2416, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2422, %r2423, %r2424, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2426, %r2423, %r2424, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2430, %r2431, %r2432, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2434, %r2431, %r2432, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2438, %r2439, %r2440, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2442, %r2439, %r2440, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2446, %r2447, %r2448, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2450, %r2447, %r2448, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2454, %r2455, %r2456, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2458, %r2455, %r2456, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2462, %r2463, %r2464, %r714;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2466, %r2463, %r2464, %r718;
	// end inline asm
	add.s16 	%rs179, %rs9, %rs231;
	add.s16 	%rs180, %rs179, -29;
	mul.hi.s16 	%rs181, %rs180, 10923;
	shr.u16 	%rs182, %rs181, 15;
	add.s16 	%rs183, %rs181, %rs182;
	mul.lo.s16 	%rs184, %rs183, 6;
	sub.s16 	%rs185, %rs180, %rs184;
	mul.wide.s16 	%r2490, %rs185, 16;
	add.s32 	%r2491, %r215, %r2490;
	mul.wide.s32 	%rd284, %r2491, 4;
	add.s64 	%rd7, %rd87, %rd284;
	st.shared.u32 	[%rd7], %r2406;
	add.s32 	%r2492, %r217, %r2490;
	mul.wide.u32 	%rd286, %r2492, 4;
	add.s64 	%rd8, %rd87, %rd286;
	st.shared.u32 	[%rd8], %r2410;
	add.s32 	%r2493, %r219, %r2490;
	mul.wide.s32 	%rd287, %r2493, 4;
	add.s64 	%rd9, %rd87, %rd287;
	st.shared.u32 	[%rd9], %r2414;
	add.s32 	%r2494, %r220, %r2490;
	mul.wide.u32 	%rd288, %r2494, 4;
	add.s64 	%rd10, %rd87, %rd288;
	st.shared.u32 	[%rd10], %r2418;
	cvt.s64.s32 	%rd289, %r2490;
	add.s64 	%rd290, %rd32, %rd289;
	shl.b64 	%rd291, %rd290, 2;
	add.s64 	%rd11, %rd87, %rd291;
	st.shared.u32 	[%rd11+32], %r2422;
	add.s32 	%r2495, %r221, %r2490;
	mul.wide.u32 	%rd292, %r2495, 4;
	add.s64 	%rd12, %rd87, %rd292;
	st.shared.u32 	[%rd12], %r2426;
	add.s64 	%rd293, %rd35, %rd289;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd13, %rd87, %rd294;
	st.shared.u32 	[%rd13+32], %r2430;
	add.s32 	%r2496, %r222, %r2490;
	mul.wide.u32 	%rd295, %r2496, 4;
	add.s64 	%rd14, %rd87, %rd295;
	st.shared.u32 	[%rd14], %r2434;
	add.s16 	%rs186, %rs8, %rs231;
	add.s16 	%rs187, %rs186, -2;
	mul.hi.s16 	%rs188, %rs187, 10923;
	shr.u16 	%rs189, %rs188, 15;
	add.s16 	%rs190, %rs188, %rs189;
	mul.lo.s16 	%rs191, %rs190, 6;
	sub.s16 	%rs192, %rs187, %rs191;
	mul.wide.s16 	%r2497, %rs192, 16;
	add.s32 	%r2498, %r215, %r2497;
	mul.wide.s32 	%rd296, %r2498, 4;
	add.s64 	%rd15, %rd87, %rd296;
	st.shared.u32 	[%rd15], %r2438;
	add.s32 	%r2499, %r217, %r2497;
	mul.wide.u32 	%rd297, %r2499, 4;
	add.s64 	%rd16, %rd87, %rd297;
	st.shared.u32 	[%rd16], %r2442;
	add.s32 	%r2500, %r219, %r2497;
	mul.wide.s32 	%rd298, %r2500, 4;
	add.s64 	%rd17, %rd87, %rd298;
	st.shared.u32 	[%rd17], %r2446;
	add.s32 	%r2501, %r220, %r2497;
	mul.wide.u32 	%rd299, %r2501, 4;
	add.s64 	%rd18, %rd87, %rd299;
	st.shared.u32 	[%rd18], %r2450;
	cvt.s64.s32 	%rd300, %r2497;
	add.s64 	%rd301, %rd32, %rd300;
	shl.b64 	%rd302, %rd301, 2;
	add.s64 	%rd19, %rd87, %rd302;
	st.shared.u32 	[%rd19+32], %r2454;
	add.s32 	%r2502, %r221, %r2497;
	mul.wide.u32 	%rd303, %r2502, 4;
	add.s64 	%rd20, %rd87, %rd303;
	st.shared.u32 	[%rd20], %r2458;
	add.s64 	%rd304, %rd35, %rd300;
	shl.b64 	%rd305, %rd304, 2;
	add.s64 	%rd21, %rd87, %rd305;
	st.shared.u32 	[%rd21+32], %r2462;
	add.s32 	%r2503, %r222, %r2497;
	mul.wide.u32 	%rd306, %r2503, 4;
	add.s64 	%rd22, %rd87, %rd306;
	st.shared.u32 	[%rd22], %r2466;
	@%p293 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_168;
$L__BB0_221:                            // %oksrem13956
                                        //   in Loop: Header=BB0_167 Depth=2
	st.shared.u32 	[%rd7], %r2406;
	st.shared.u32 	[%rd8], %r2410;
	st.shared.u32 	[%rd9], %r2414;
	st.shared.u32 	[%rd10], %r2418;
	st.shared.u32 	[%rd11+32], %r2422;
	st.shared.u32 	[%rd12], %r2426;
	st.shared.u32 	[%rd13+32], %r2430;
	st.shared.u32 	[%rd14], %r2434;
	st.shared.u32 	[%rd15], %r2438;
	st.shared.u32 	[%rd16], %r2442;
	st.shared.u32 	[%rd17], %r2446;
	st.shared.u32 	[%rd18], %r2450;
	st.shared.u32 	[%rd19+32], %r2454;
	st.shared.u32 	[%rd20], %r2458;
	st.shared.u32 	[%rd21+32], %r2462;
	st.shared.u32 	[%rd22], %r2466;
	bra.uni 	$L__BB0_168;
$L__BB0_170:                            // %L40282
	mov.u32 	%r3020, 0;
	st.global.u32 	[%rd6], %r3020;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd201, exception3604;
	cvta.global.u64 	%rd202, %rd201;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd202;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_220:                            // %post_box_union9506
	mov.u64 	%rd248, exception3604;
	cvta.global.u64 	%rd249, %rd248;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd249;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5125
	mov.u32 	%r3036, 5;
	st.global.u32 	[%rd6], %r3036;
	mov.u64 	%rd375, exception3564;
	cvta.global.u64 	%rd376, %rd375;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd376;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5281
	mov.u32 	%r3035, 5;
	st.global.u32 	[%rd6], %r3035;
	mov.u64 	%rd373, exception3564;
	cvta.global.u64 	%rd374, %rd373;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd374;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5437
	mov.u32 	%r3034, 5;
	st.global.u32 	[%rd6], %r3034;
	mov.u64 	%rd371, exception3564;
	cvta.global.u64 	%rd372, %rd371;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd372;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5593
	mov.u32 	%r3033, 5;
	st.global.u32 	[%rd6], %r3033;
	mov.u64 	%rd369, exception3564;
	cvta.global.u64 	%rd370, %rd369;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd370;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5749
	mov.u32 	%r3032, 5;
	st.global.u32 	[%rd6], %r3032;
	mov.u64 	%rd367, exception3564;
	cvta.global.u64 	%rd368, %rd367;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd368;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5905
	mov.u32 	%r3031, 5;
	st.global.u32 	[%rd6], %r3031;
	mov.u64 	%rd365, exception3564;
	cvta.global.u64 	%rd366, %rd365;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd366;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6061
	mov.u32 	%r3030, 5;
	st.global.u32 	[%rd6], %r3030;
	mov.u64 	%rd363, exception3564;
	cvta.global.u64 	%rd364, %rd363;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd364;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6217
	mov.u32 	%r3029, 5;
	st.global.u32 	[%rd6], %r3029;
	mov.u64 	%rd361, exception3564;
	cvta.global.u64 	%rd362, %rd361;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd362;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6373
	mov.u32 	%r3028, 5;
	st.global.u32 	[%rd6], %r3028;
	mov.u64 	%rd359, exception3564;
	cvta.global.u64 	%rd360, %rd359;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd360;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6529
	mov.u32 	%r3027, 5;
	st.global.u32 	[%rd6], %r3027;
	mov.u64 	%rd357, exception3564;
	cvta.global.u64 	%rd358, %rd357;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd358;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6711
	mov.u32 	%r3026, 5;
	st.global.u32 	[%rd6], %r3026;
	mov.u64 	%rd355, exception3564;
	cvta.global.u64 	%rd356, %rd355;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd356;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6867
	mov.u32 	%r3025, 5;
	st.global.u32 	[%rd6], %r3025;
	mov.u64 	%rd353, exception3564;
	cvta.global.u64 	%rd354, %rd353;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd354;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7023
	mov.u32 	%r3024, 5;
	st.global.u32 	[%rd6], %r3024;
	mov.u64 	%rd351, exception3564;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7179
	mov.u32 	%r3023, 5;
	st.global.u32 	[%rd6], %r3023;
	mov.u64 	%rd349, exception3564;
	cvta.global.u64 	%rd350, %rd349;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd350;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7335
	mov.u32 	%r3022, 5;
	st.global.u32 	[%rd6], %r3022;
	mov.u64 	%rd347, exception3564;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7491
	mov.u32 	%r3021, 5;
	st.global.u32 	[%rd6], %r3021;
	mov.u64 	%rd345, exception3564;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3038, 2;
	st.global.u32 	[%rd6], %r3038;
	mov.u64 	%rd379, exception3564;
	cvta.global.u64 	%rd380, %rd379;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd380;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3037, 3;
	st.global.u32 	[%rd6], %r3037;
	mov.u64 	%rd377, exception3564;
	cvta.global.u64 	%rd378, %rd377;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd378;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd52, exception1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1152
	add.u64 	%rd51, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r307, %r2};
	st.local.v2.u32 	[%rd5+8], {%r4, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd57, __unnamed_1;
	cvta.global.u64 	%rd58, %rd57;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd58;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd51;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r534, [retval0+0];
	} // callseq 49
	mov.u32 	%r536, 4;
	st.global.u32 	[%rd6], %r536;
	mov.u64 	%rd60, exception3564;
	cvta.global.u64 	%rd61, %rd60;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd61;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
