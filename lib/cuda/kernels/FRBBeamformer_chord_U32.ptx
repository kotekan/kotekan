// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3916[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<335>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<3842>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<426>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r404, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r413, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r413, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd42, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r405, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r414, %r2, %r3;
	mad.lo.s32 	%r415, %r4, 768, %r414;
	mul.wide.u32 	%rd49, %r415, 4;
	add.s64 	%rd6, %rd42, %rd49;
	mov.u32 	%r416, 1;
	st.global.u32 	[%rd6], %r416;
	setp.gt.u32 	%p4, %r405, 1023;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r406, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r406, %r405;
	setp.gt.s32 	%p6, %r406, 2047;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r407, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r406, %r405;
	mad.lo.s32 	%r417, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r418, %r417, %r417, 4;
	setp.gt.u32 	%p8, %r418, 89478484;
	setp.gt.u32 	%p9, %r407, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r408, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r408, %r407;
	setp.lt.s32 	%p12, %r408, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r419, %r408, %r407;
	mul.hi.s32 	%r420, %r5, 715827883;
	shr.u32 	%r421, %r420, 31;
	add.s32 	%r422, %r420, %r421;
	setp.eq.s32 	%p14, %r419, %r422;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r409, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r409, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r410, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r410, %r409;
	setp.gt.s32 	%p17, %r410, 256;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r411, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r410, %r409;
	and.b32  	%r423, %r6, 31;
	setp.ne.s32 	%p19, %r423, 0;
	setp.lt.s32 	%p20, %r411, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r412, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r412, %r411;
	setp.gt.s32 	%p23, %r412, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r424, %r412, %r411;
	and.b32  	%r425, %r424, 31;
	setp.eq.s32 	%p25, %r425, 0;
	setp.eq.s32 	%p26, %r424, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_13;
$L__BB0_206:                            // %pass162
	and.b32  	%r259, %r3, 3;
	shr.u32 	%r260, %r3, 2;
	mul.lo.s32 	%r426, %r259, %r260;
	and.b32  	%r427, %r426, 7;
	cvt.rn.f32.s32 	%f201, %r427;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p334, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_218;
// %bb.207:
	@%p334 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_208;
$L__BB0_214:
	mov.b32 	%r262, %f785;
	and.b32  	%r428, %r262, 8388607;
	or.b32  	%r3829, %r428, 1065353216;
	mov.b32 	%f780, %r3829;
	add.s32 	%r429, %r262, -1073741824;
	and.b32  	%r3830, %r429, -8388608;
	setp.eq.s32 	%p35, %r3830, 0;
	@%p35 bra 	$L__BB0_217;
// %bb.215:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_216:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r430, %r3830, 192937984;
	add.s32 	%r431, %r3829, %r430;
	mov.b32 	%f213, %r431;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3830, %r3830, %r430;
	mov.b32 	%r3829, %f780;
	setp.ne.s32 	%p36, %r3830, 0;
	setp.ne.s32 	%p37, %r3829, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_216;
$L__BB0_217:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r262, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_218;
$L__BB0_208:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r261, %f172;
	setp.lt.u32 	%p30, %r261, 1073741824;
	@%p30 bra 	$L__BB0_213;
// %bb.209:
	setp.lt.u32 	%p31, %r261, -2147483647;
	@%p31 bra 	$L__BB0_211;
// %bb.210:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_213;
$L__BB0_211:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_213;
// %bb.212:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_213:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_218:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r432, %f169;
	and.b32  	%r269, %r432, -2147483648;
	@%p40 bra 	$L__BB0_220;
// %bb.219:
	mov.b32 	%r433, %f781;
	or.b32  	%r434, %r269, %r433;
	mov.b32 	%f781, %r434;
$L__BB0_220:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r272, %r3, 1;
	and.b32  	%r273, %r272, 6;
	or.b32  	%r274, %r273, 1;
	setp.eq.s32 	%p48, %r273, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3726, %r273, %r260;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L487
	cvt.u16.u32 	%rs1, %r3726;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r450, %r8, 8388607;
	or.b32  	%r3730, %r450, 1065353216;
	mov.b32 	%f732, %r3730;
	add.s32 	%r451, %r8, -1073741824;
	and.b32  	%r3731, %r451, -8388608;
	setp.eq.s32 	%p56, %r3731, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i1041.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i1041
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r452, %r3731, 192937984;
	add.s32 	%r453, %r3730, %r452;
	mov.b32 	%f267, %r453;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3731, %r3731, %r452;
	mov.b32 	%r3730, %f732;
	setp.ne.s32 	%p57, %r3731, 0;
	setp.ne.s32 	%p58, %r3730, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i1043
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i1020
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i1024
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i1027
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i1046
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r454, %f1;
	and.b32  	%r455, %r454, -2147483648;
	mov.b32 	%r456, %f733;
	or.b32  	%r457, %r455, %r456;
	mov.b32 	%f733, %r457;
$L__BB0_28:                             // %__nv_fmodf.exit1047
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r458, %f277;
	and.b32  	%r459, %r458, -2147483648;
	or.b32  	%r460, %r459, 1056964608;
	mov.b32 	%f278, %r460;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r461, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r462, %r461, 1;
	setp.eq.b32 	%p64, %r462, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r463, %r461, 2;
	setp.eq.s32 	%p65, %r463, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r464, %r461, 1;
	and.b32  	%r465, %r464, 2;
	setp.eq.s32 	%p66, %r465, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L521
	setp.gt.u32 	%p69, %r274, 5;
	mul.lo.s32 	%r3727, %r274, %r260;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L525
	mul.hi.u32 	%r467, %r3727, -1431655765;
	shr.u32 	%r468, %r467, 5;
	mul.lo.s32 	%r469, %r468, 48;
	sub.s32 	%r470, %r3727, %r469;
	cvt.rn.f32.s32 	%f308, %r470;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r471, %r16, 8388607;
	or.b32  	%r3732, %r471, 1065353216;
	mov.b32 	%f738, %r3732;
	add.s32 	%r472, %r16, -1073741824;
	and.b32  	%r3733, %r472, -8388608;
	setp.eq.s32 	%p77, %r3733, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1072.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1072
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r473, %r3733, 192937984;
	add.s32 	%r474, %r3732, %r473;
	mov.b32 	%f320, %r474;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3733, %r3733, %r473;
	mov.b32 	%r3732, %f738;
	setp.ne.s32 	%p78, %r3733, 0;
	setp.ne.s32 	%p79, %r3732, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1074
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i1051
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i1055
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1058
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1077
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r475, %f22;
	and.b32  	%r476, %r475, -2147483648;
	mov.b32 	%r477, %f739;
	or.b32  	%r478, %r476, %r477;
	mov.b32 	%f739, %r478;
$L__BB0_44:                             // %__nv_fmodf.exit1078
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r479, %f330;
	and.b32  	%r480, %r479, -2147483648;
	or.b32  	%r481, %r480, 1056964608;
	mov.b32 	%f331, %r481;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r482, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r483, %r482, 1;
	setp.eq.b32 	%p85, %r483, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r484, %r482, 2;
	setp.eq.s32 	%p86, %r484, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r485, %r482, 1;
	and.b32  	%r486, %r485, 2;
	setp.eq.s32 	%p87, %r486, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L559
	setp.gt.u32 	%p91, %r3, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L597
	cvt.u16.u32 	%rs8, %r3726;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r494, %r26, 8388607;
	or.b32  	%r3734, %r494, 1065353216;
	mov.b32 	%f744, %r3734;
	add.s32 	%r495, %r26, -1073741824;
	and.b32  	%r3735, %r495, -8388608;
	setp.eq.s32 	%p99, %r3735, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1103.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1103
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r496, %r3735, 192937984;
	add.s32 	%r497, %r3734, %r496;
	mov.b32 	%f373, %r497;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3735, %r3735, %r496;
	mov.b32 	%r3734, %f744;
	setp.ne.s32 	%p100, %r3735, 0;
	setp.ne.s32 	%p101, %r3734, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1105
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1082
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1086
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1089
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1108
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r498, %f43;
	and.b32  	%r499, %r498, -2147483648;
	mov.b32 	%r500, %f745;
	or.b32  	%r501, %r499, %r500;
	mov.b32 	%f745, %r501;
$L__BB0_60:                             // %__nv_fmodf.exit1109
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r502, %f383;
	and.b32  	%r503, %r502, -2147483648;
	or.b32  	%r504, %r503, 1056964608;
	mov.b32 	%f384, %r504;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r505, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r506, %r505, 1;
	setp.eq.b32 	%p107, %r506, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r507, %r505, 2;
	setp.eq.s32 	%p108, %r507, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r508, %r505, 1;
	and.b32  	%r509, %r508, 2;
	setp.eq.s32 	%p109, %r509, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L631
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L639
	mul.hi.u32 	%r511, %r3727, -1431655765;
	shr.u32 	%r512, %r511, 2;
	mul.lo.s32 	%r513, %r512, 6;
	sub.s32 	%r514, %r3727, %r513;
	cvt.rn.f32.s32 	%f414, %r514;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r515, %r34, 8388607;
	or.b32  	%r3736, %r515, 1065353216;
	mov.b32 	%f750, %r3736;
	add.s32 	%r516, %r34, -1073741824;
	and.b32  	%r3737, %r516, -8388608;
	setp.eq.s32 	%p121, %r3737, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1134.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1134
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r517, %r3737, 192937984;
	add.s32 	%r518, %r3736, %r517;
	mov.b32 	%f426, %r518;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3737, %r3737, %r517;
	mov.b32 	%r3736, %f750;
	setp.ne.s32 	%p122, %r3737, 0;
	setp.ne.s32 	%p123, %r3736, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1136
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1113
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1117
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1120
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1139
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r519, %f64;
	and.b32  	%r520, %r519, -2147483648;
	mov.b32 	%r521, %f751;
	or.b32  	%r522, %r520, %r521;
	mov.b32 	%f751, %r522;
$L__BB0_76:                             // %__nv_fmodf.exit1140
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r523, %f436;
	and.b32  	%r524, %r523, -2147483648;
	or.b32  	%r525, %r524, 1056964608;
	mov.b32 	%f437, %r525;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r526, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r527, %r526, 1;
	setp.eq.b32 	%p129, %r527, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r528, %r526, 2;
	setp.eq.s32 	%p130, %r528, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r529, %r526, 1;
	and.b32  	%r530, %r529, 2;
	setp.eq.s32 	%p131, %r530, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L673
	@%p28 bra 	$L__BB0_228;
// %bb.78:
	@%p334 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_79;
$L__BB0_224:
	mov.b32 	%r276, %f785;
	and.b32  	%r543, %r276, 8388607;
	or.b32  	%r3831, %r543, 1065353216;
	mov.b32 	%f784, %r3831;
	add.s32 	%r544, %r276, -1073741824;
	and.b32  	%r3832, %r544, -8388608;
	setp.eq.s32 	%p141, %r3832, 0;
	@%p141 bra 	$L__BB0_227;
// %bb.225:                             // %__nv_fmaf_rn.exit4.i.i.i1165.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_226:                            // %__nv_fmaf_rn.exit4.i.i.i1165
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r545, %r3832, 192937984;
	add.s32 	%r546, %r3831, %r545;
	mov.b32 	%f476, %r546;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3832, %r3832, %r545;
	mov.b32 	%r3831, %f784;
	setp.ne.s32 	%p142, %r3832, 0;
	setp.ne.s32 	%p143, %r3831, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_226;
$L__BB0_227:                            // %__internal_fmodf_slowpath_mod.exit.i.i1167
	setp.gt.u32 	%p145, %r276, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_228;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1144
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r275, %f187;
	setp.lt.u32 	%p136, %r275, 1073741824;
	@%p136 bra 	$L__BB0_223;
// %bb.80:
	setp.lt.u32 	%p137, %r275, -2147483647;
	@%p137 bra 	$L__BB0_221;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_223;
$L__BB0_221:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_223;
// %bb.222:                             // %__nv_fmaf_rn.exit.i.i.i1148
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_223:                            // %__internal_fmodf_fastpath_quot.exit.i.i1151
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_228:                            // %__internal_fmodf_kernel.exit.i1170
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_230;
// %bb.229:
	mov.b32 	%r547, %f785;
	or.b32  	%r548, %r269, %r547;
	mov.b32 	%f785, %r548;
$L__BB0_230:                            // %__nv_fmodf.exit1171
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L775
	cvt.u16.u32 	%rs15, %r3726;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r564, %r46, 8388607;
	or.b32  	%r3738, %r564, 1065353216;
	mov.b32 	%f756, %r3738;
	add.s32 	%r565, %r46, -1073741824;
	and.b32  	%r3739, %r565, -8388608;
	setp.eq.s32 	%p162, %r3739, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1196.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1196
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r566, %r3739, 192937984;
	add.s32 	%r567, %r3738, %r566;
	mov.b32 	%f530, %r567;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3739, %r3739, %r566;
	mov.b32 	%r3738, %f756;
	setp.ne.s32 	%p163, %r3739, 0;
	setp.ne.s32 	%p164, %r3738, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1198
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1175
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1179
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1182
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1201
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r568, %f85;
	and.b32  	%r569, %r568, -2147483648;
	mov.b32 	%r570, %f757;
	or.b32  	%r571, %r569, %r570;
	mov.b32 	%f757, %r571;
$L__BB0_96:                             // %__nv_fmodf.exit1202
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r572, %f540;
	and.b32  	%r573, %r572, -2147483648;
	or.b32  	%r574, %r573, 1056964608;
	mov.b32 	%f541, %r574;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r575, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r576, %r575, 1;
	setp.eq.b32 	%p170, %r576, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r577, %r575, 2;
	setp.eq.s32 	%p171, %r577, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r578, %r575, 1;
	and.b32  	%r579, %r578, 2;
	setp.eq.s32 	%p172, %r579, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L813
	mul.hi.u32 	%r581, %r3727, -1431655765;
	shr.u32 	%r582, %r581, 5;
	mul.lo.s32 	%r583, %r582, 48;
	sub.s32 	%r584, %r3727, %r583;
	cvt.rn.f32.s32 	%f571, %r584;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r585, %r54, 8388607;
	or.b32  	%r3740, %r585, 1065353216;
	mov.b32 	%f762, %r3740;
	add.s32 	%r586, %r54, -1073741824;
	and.b32  	%r3741, %r586, -8388608;
	setp.eq.s32 	%p183, %r3741, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1227.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1227
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r587, %r3741, 192937984;
	add.s32 	%r588, %r3740, %r587;
	mov.b32 	%f583, %r588;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3741, %r3741, %r587;
	mov.b32 	%r3740, %f762;
	setp.ne.s32 	%p184, %r3741, 0;
	setp.ne.s32 	%p185, %r3740, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1229
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1206
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1210
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1213
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1232
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r589, %f106;
	and.b32  	%r590, %r589, -2147483648;
	mov.b32 	%r591, %f763;
	or.b32  	%r592, %r590, %r591;
	mov.b32 	%f763, %r592;
$L__BB0_112:                            // %__nv_fmodf.exit1233
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r593, %f593;
	and.b32  	%r594, %r593, -2147483648;
	or.b32  	%r595, %r594, 1056964608;
	mov.b32 	%f594, %r595;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r596, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r597, %r596, 1;
	setp.eq.b32 	%p191, %r597, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r598, %r596, 2;
	setp.eq.s32 	%p192, %r598, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r599, %r596, 1;
	and.b32  	%r600, %r599, 2;
	setp.eq.s32 	%p193, %r600, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L885
	cvt.u16.u32 	%rs22, %r3726;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r608, %r64, 8388607;
	or.b32  	%r3742, %r608, 1065353216;
	mov.b32 	%f768, %r3742;
	add.s32 	%r609, %r64, -1073741824;
	and.b32  	%r3743, %r609, -8388608;
	setp.eq.s32 	%p203, %r3743, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1258.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1258
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r610, %r3743, 192937984;
	add.s32 	%r611, %r3742, %r610;
	mov.b32 	%f636, %r611;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3743, %r3743, %r610;
	mov.b32 	%r3742, %f768;
	setp.ne.s32 	%p204, %r3743, 0;
	setp.ne.s32 	%p205, %r3742, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1260
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1237
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1241
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1244
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1263
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r612, %f127;
	and.b32  	%r613, %r612, -2147483648;
	mov.b32 	%r614, %f769;
	or.b32  	%r615, %r613, %r614;
	mov.b32 	%f769, %r615;
$L__BB0_128:                            // %__nv_fmodf.exit1264
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r616, %f646;
	and.b32  	%r617, %r616, -2147483648;
	or.b32  	%r618, %r617, 1056964608;
	mov.b32 	%f647, %r618;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r619, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r620, %r619, 1;
	setp.eq.b32 	%p211, %r620, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r621, %r619, 2;
	setp.eq.s32 	%p212, %r621, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r622, %r619, 1;
	and.b32  	%r623, %r622, 2;
	setp.eq.s32 	%p213, %r623, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L927
	mul.hi.u32 	%r625, %r3727, -1431655765;
	shr.u32 	%r626, %r625, 2;
	mul.lo.s32 	%r627, %r626, 6;
	sub.s32 	%r628, %r3727, %r627;
	cvt.rn.f32.s32 	%f677, %r628;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r629, %r72, 8388607;
	or.b32  	%r3744, %r629, 1065353216;
	mov.b32 	%f774, %r3744;
	add.s32 	%r630, %r72, -1073741824;
	and.b32  	%r3745, %r630, -8388608;
	setp.eq.s32 	%p223, %r3745, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1289.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1289
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r631, %r3745, 192937984;
	add.s32 	%r632, %r3744, %r631;
	mov.b32 	%f689, %r632;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3745, %r3745, %r631;
	mov.b32 	%r3744, %f774;
	setp.ne.s32 	%p224, %r3745, 0;
	setp.ne.s32 	%p225, %r3744, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1291
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1268
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1272
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1275
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1294
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r633, %f148;
	and.b32  	%r634, %r633, -2147483648;
	mov.b32 	%r635, %f775;
	or.b32  	%r636, %r634, %r635;
	mov.b32 	%f775, %r636;
$L__BB0_144:                            // %__nv_fmodf.exit1295
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r637, %f699;
	and.b32  	%r638, %r637, -2147483648;
	or.b32  	%r639, %r638, 1056964608;
	mov.b32 	%f700, %r639;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r640, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r641, %r640, 1;
	setp.eq.b32 	%p231, %r641, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r642, %r640, 2;
	setp.eq.s32 	%p232, %r642, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r643, %r640, 1;
	and.b32  	%r644, %r643, 2;
	setp.eq.s32 	%p233, %r644, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L961
	mov.u32 	%r285, 999999999;
	cvt.u16.u32 	%rs247, %r3;
	@%p91 bra 	$L__BB0_232;
// %bb.146:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs247, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs247, %rs33;
	cvt.u32.u16 	%r658, %rs34;
	and.b32  	%r659, %r658, 255;
	mad.lo.s32 	%r660, %r659, 24, %r1;
	cvt.u16.u32 	%rs35, %r660;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r661, %rs39;
	mul.wide.u32 	%rd50, %r661, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r662, [%rd51];
	shl.b32 	%r663, %r662, 16;
	cvt.s32.s16 	%r83, %r662;
	shr.s32 	%r84, %r662, 16;
	or.b32  	%r664, %r663, 65535;
	setp.lt.u32 	%p237, %r664, 1638399;
	setp.lt.u32 	%p238, %r662, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_147;
$L__BB0_231:                            // %L1237
	mul.lo.s32 	%r668, %r84, 801;
	mad.lo.s32 	%r285, %r83, 33, %r668;
$L__BB0_232:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r441, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r442, %r441, -2147483648;
	mov.b32 	%r555, %f487;
	or.b32  	%r443, %r442, 1056964608;
	and.b32  	%r556, %r555, -2147483648;
	mov.b32 	%f225, %r443;
	or.b32  	%r557, %r556, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r557;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r444, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r445, %r444, 1;
	cvt.rzi.s32.f32 	%r558, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r445, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r559, %r558, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r446, %r444, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r559, 1;
	setp.eq.s32 	%p44, %r446, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r447, %r444, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r560, %r558, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r448, %r447, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r560, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r561, %r558, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r448, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r562, %r561, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r562, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r437, %f254;
	mov.b32 	%r440, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r436, %r440, -2147483648;
	mov.b32 	%r532, %f62;
	mov.b32 	%r533, %f83;
	mov.b32 	%r538, %f63;
	mov.b32 	%r539, %f84;
	mov.b32 	%r551, %f517;
	mov.b32 	%r554, %f514;
	mov.b32 	%r488, %f20;
	mov.b32 	%r489, %f41;
	mov.b32 	%r491, %f21;
	mov.b32 	%r492, %f42;
	xor.b32  	%r535, %r538, -2147483648;
	xor.b32  	%r536, %r539, -2147483648;
	xor.b32  	%r550, %r554, -2147483648;
	mov.b32 	%r602, %f104;
	mov.b32 	%r603, %f125;
	mov.b32 	%r605, %f105;
	mov.b32 	%r606, %f126;
	mov.b32 	%r646, %f146;
	mov.b32 	%r647, %f167;
	mov.b32 	%r652, %f147;
	xor.b32  	%r649, %r652, -2147483648;
	mov.b32 	%r653, %f168;
	xor.b32  	%r650, %r653, -2147483648;
	and.b32  	%r669, %r3, 24;
	setp.ne.s32 	%p240, %r669, 24;
	cvt.u16.u32 	%rs248, %r260;
	mul.lo.s32 	%r3746, %r4, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.233:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs47, %rs248, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs248, %rs49;
	cvt.u32.u16 	%r681, %rs50;
	and.b32  	%r3747, %r681, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass529
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r670, %r259, 144;
	mul.lo.s16 	%rs41, %rs248, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs248, %rs43;
	cvt.u32.u16 	%r671, %rs44;
	and.b32  	%r3747, %r671, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r672, %rs45, 24;
	or.b32  	%r673, %r3746, %r1;
	add.s32 	%r674, %r673, %r670;
	add.s32 	%r675, %r674, %r672;
	mul.wide.u32 	%rd57, %r675, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.u32 	%r88, [%rd58];
	or.b32  	%r676, %r1, 576;
	add.s32 	%r677, %r676, %r3746;
	add.s32 	%r678, %r677, %r670;
	add.s32 	%r679, %r678, %r672;
	mul.wide.u32 	%rd59, %r679, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.u32 	%r89, [%rd60];
$L__BB0_149:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r435, %r437, %r436;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r438, %r440, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r487, %r489, %r488;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r490, %r492, %r491;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r531, %r533, %r532;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r534, %r536, %r535;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r537, %r539, %r538;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r540, %r533, %r532;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r549, %r551, %r550;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r552, %r554, %r551;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r601, %r603, %r602;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r604, %r606, %r605;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r645, %r647, %r646;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r648, %r650, %r649;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r651, %r653, %r652;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r654, %r647, %r646;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r683, %r405, 16;
	shl.b32 	%r684, %r409, 8;
	add.s32 	%r90, %r684, %r683;
	shl.b32 	%r685, %r4, 8;
	shl.b32 	%r686, %r3, 2;
	and.b32  	%r687, %r686, 60;
	shl.b32 	%r688, %r3, 3;
	and.b32  	%r689, %r688, 128;
	or.b32  	%r690, %r687, %r685;
	or.b32  	%r91, %r690, %r689;
	or.b32  	%r691, %r686, %r685;
	or.b32  	%r692, %r691, %r689;
	or.b32  	%r92, %r692, 64;
	add.s32 	%r93, %r1, 24;
	shr.u32 	%r693, %r3, 4;
	and.b32  	%r694, %r272, 30;
	or.b32  	%r695, %r694, %r693;
	mul.lo.s32 	%r94, %r695, 257;
	or.b32  	%r696, %r272, %r693;
	or.b32  	%r697, %r696, 32;
	mul.lo.s32 	%r95, %r697, 257;
	and.b32  	%r698, %r2, 224;
	and.b16  	%rs52, %rs247, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs247, %rs55;
	cvt.u32.u16 	%r699, %rs56;
	and.b32  	%r96, %r699, 255;
	shr.u32 	%r700, %r1, 3;
	mad.lo.s32 	%r97, %r700, 257, %r698;
	shr.u32 	%r701, %r93, 3;
	mad.lo.s32 	%r98, %r701, 257, %r698;
	add.s32 	%r702, %r1, 48;
	shr.u32 	%r703, %r702, 3;
	mad.lo.s32 	%r99, %r703, 257, %r698;
	add.s32 	%r704, %r1, 72;
	shr.u32 	%r705, %r704, 3;
	mad.lo.s32 	%r100, %r705, 257, %r698;
	or.b32  	%r706, %r700, 12;
	mad.lo.s32 	%r101, %r706, 257, %r698;
	add.s32 	%r707, %r1, 120;
	shr.u32 	%r708, %r707, 3;
	mad.lo.s32 	%r102, %r708, 257, %r698;
	add.s32 	%r709, %r1, 144;
	shr.u32 	%r710, %r709, 3;
	mad.lo.s32 	%r103, %r710, 257, %r698;
	add.s32 	%r711, %r1, 168;
	shr.u32 	%r712, %r711, 3;
	mad.lo.s32 	%r104, %r712, 257, %r698;
	or.b32  	%r713, %r700, 24;
	mad.lo.s32 	%r105, %r713, 257, %r698;
	add.s32 	%r714, %r1, 216;
	shr.u32 	%r715, %r714, 3;
	mad.lo.s32 	%r106, %r715, 257, %r698;
	add.s32 	%r716, %r1, 240;
	shr.u32 	%r717, %r716, 3;
	mad.lo.s32 	%r107, %r717, 257, %r698;
	add.s32 	%r718, %r1, 264;
	shr.u32 	%r719, %r718, 3;
	mad.lo.s32 	%r108, %r719, 257, %r698;
	or.b32  	%r720, %r700, 36;
	mad.lo.s32 	%r109, %r720, 257, %r698;
	add.s32 	%r721, %r1, 312;
	shr.u32 	%r722, %r721, 3;
	mad.lo.s32 	%r110, %r722, 257, %r698;
	add.s32 	%r723, %r1, 336;
	shr.u32 	%r724, %r723, 3;
	mad.lo.s32 	%r111, %r724, 257, %r698;
	add.s32 	%r725, %r1, 360;
	shr.u32 	%r726, %r725, 3;
	mad.lo.s32 	%r112, %r726, 257, %r698;
	or.b32  	%r727, %r700, 48;
	mad.lo.s32 	%r113, %r727, 257, %r698;
	add.s32 	%r728, %r1, 408;
	shr.u32 	%r729, %r728, 3;
	mad.lo.s32 	%r114, %r729, 257, %r698;
	add.s32 	%r730, %r1, 432;
	shr.u32 	%r731, %r730, 3;
	mad.lo.s32 	%r115, %r731, 257, %r698;
	add.s32 	%r732, %r1, 456;
	shr.u32 	%r733, %r732, 3;
	mad.lo.s32 	%r116, %r733, 257, %r698;
	or.b32  	%r734, %r700, 60;
	mad.lo.s32 	%r117, %r734, 257, %r698;
	add.s32 	%r735, %r1, 504;
	bfe.u32 	%r736, %r735, 3, 6;
	mad.lo.s32 	%r118, %r736, 257, %r698;
	mul.lo.s32 	%r737, %r1, 33;
	mad.lo.s32 	%r738, %r259, 4806, %r737;
	mad.lo.s32 	%r739, %r3747, 801, %r738;
	bfe.s32 	%r740, %r3, 2, 1;
	and.b32  	%r741, %r3, 4;
	setp.eq.s32 	%p241, %r741, 0;
	and.b32  	%r742, %r740, 1028;
	bfe.s32 	%r743, %r3, 3, 1;
	and.b32  	%r744, %r743, 514;
	bfe.s32 	%r745, %r3, 1, 1;
	and.b32  	%r746, %r745, 2056;
	and.b32  	%r747, %r3, 1;
	neg.s32 	%r748, %r747;
	and.b32  	%r749, %r748, 4112;
	mul.lo.s32 	%r750, %r693, 257;
	add.s32 	%r751, %r750, %r1;
	add.s32 	%r752, %r751, %r744;
	add.s32 	%r753, %r752, %r742;
	add.s32 	%r754, %r753, %r746;
	add.s32 	%r755, %r754, %r749;
	mul.wide.u32 	%rd61, %r755, 4;
	mov.u64 	%rd62, shmem;
	add.s64 	%rd7, %rd62, %rd61;
	selp.b32 	%r756, 8256, 9284, %p241;
	add.s32 	%r757, %r752, %r756;
	add.s32 	%r758, %r757, %r746;
	add.s32 	%r759, %r758, %r749;
	mul.wide.u32 	%rd63, %r759, 4;
	add.s64 	%rd8, %rd62, %rd63;
	or.b32  	%r760, %r1, 32;
	add.s32 	%r761, %r760, %r750;
	add.s32 	%r762, %r761, %r744;
	add.s32 	%r763, %r762, %r742;
	add.s32 	%r764, %r763, %r746;
	add.s32 	%r765, %r764, %r749;
	mul.wide.u32 	%rd64, %r765, 4;
	add.s64 	%rd9, %rd62, %rd64;
	add.s32 	%r766, %r762, %r756;
	add.s32 	%r767, %r766, %r746;
	add.s32 	%r768, %r767, %r749;
	mul.wide.u32 	%rd65, %r768, 4;
	add.s64 	%rd10, %rd62, %rd65;
	bfe.s32 	%r769, %r1, 3, 1;
	and.b32  	%r770, %r1, 8;
	setp.eq.s32 	%p242, %r770, 0;
	and.b32  	%r771, %r769, 1028;
	mul.lo.s32 	%r772, %r259, 6;
	and.b32  	%r773, %r1, 1;
	neg.s32 	%r774, %r773;
	and.b32  	%r775, %r774, 8256;
	shr.u32 	%r776, %r1, 4;
	mul.lo.s32 	%r777, %r776, 514;
	bfe.s32 	%r778, %r1, 2, 1;
	and.b32  	%r779, %r778, 2056;
	bfe.s32 	%r780, %r1, 1, 1;
	and.b32  	%r781, %r780, 4112;
	add.s32 	%r782, %r777, %r772;
	add.s32 	%r783, %r782, %r771;
	add.s32 	%r784, %r783, %r775;
	add.s32 	%r785, %r784, %r779;
	add.s32 	%r786, %r785, %r781;
	add.s32 	%r787, %r786, %r3747;
	mul.wide.u32 	%rd66, %r787, 4;
	add.s64 	%rd11, %rd62, %rd66;
	selp.b32 	%r788, 1028, 0, %p242;
	bfe.s32 	%r789, %r93, 4, 1;
	and.b32  	%r790, %r789, 514;
	shr.u32 	%r791, %r93, 5;
	mul.lo.s32 	%r792, %r791, 257;
	add.s32 	%r793, %r788, %r772;
	or.b32  	%r794, %r793, %r775;
	add.s32 	%r795, %r794, %r779;
	add.s32 	%r796, %r795, %r781;
	add.s32 	%r797, %r796, %r792;
	add.s32 	%r798, %r797, %r790;
	add.s32 	%r799, %r798, %r3747;
	mul.wide.u32 	%rd67, %r799, 4;
	add.s64 	%rd12, %rd62, %rd67;
	or.b32  	%r800, %r772, 32;
	add.s32 	%r801, %r800, %r777;
	add.s32 	%r802, %r801, %r771;
	add.s32 	%r803, %r802, %r775;
	add.s32 	%r804, %r803, %r779;
	add.s32 	%r805, %r804, %r781;
	add.s32 	%r806, %r805, %r3747;
	mul.wide.u32 	%rd68, %r806, 4;
	add.s64 	%rd13, %rd62, %rd68;
	add.s32 	%r807, %r800, %r788;
	add.s32 	%r808, %r807, %r775;
	add.s32 	%r809, %r808, %r779;
	add.s32 	%r810, %r809, %r781;
	add.s32 	%r811, %r810, %r792;
	add.s32 	%r812, %r811, %r790;
	add.s32 	%r813, %r812, %r3747;
	mul.wide.u32 	%rd69, %r813, 4;
	add.s64 	%rd14, %rd62, %rd69;
	mul.lo.s32 	%r814, %r407, 589824;
	mad.lo.s32 	%r815, %r411, 1152, %r814;
	mad.lo.s32 	%r816, %r1, 24, %r3746;
	add.s32 	%r119, %r816, %r96;
	cvt.s64.s32 	%rd15, %r815;
	cvt.u16.u32 	%rs57, %r93;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r817, %rs62;
	and.b32  	%r818, %r817, 255;
	or.b32  	%r819, %r3746, %r96;
	mad.lo.s32 	%r120, %r818, 24, %r819;
	mul.wide.u32 	%rd70, %r739, 4;
	add.s64 	%rd16, %rd62, %rd70;
	add.s32 	%r820, %r755, 64;
	mul.wide.u32 	%rd71, %r820, 4;
	add.s64 	%rd17, %rd62, %rd71;
	add.s32 	%r821, %r759, 64;
	mul.wide.u32 	%rd72, %r821, 4;
	add.s64 	%rd18, %rd62, %rd72;
	add.s32 	%r822, %r765, 64;
	mul.wide.u32 	%rd73, %r822, 4;
	add.s64 	%rd19, %rd62, %rd73;
	add.s32 	%r823, %r768, 64;
	mul.wide.u32 	%rd74, %r823, 4;
	add.s64 	%rd20, %rd62, %rd74;
	add.s32 	%r824, %r755, 128;
	mul.wide.u32 	%rd75, %r824, 4;
	add.s64 	%rd21, %rd62, %rd75;
	add.s32 	%r825, %r759, 128;
	mul.wide.u32 	%rd76, %r825, 4;
	add.s64 	%rd22, %rd62, %rd76;
	add.s32 	%r826, %r765, 128;
	mul.wide.u32 	%rd77, %r826, 4;
	add.s64 	%rd23, %rd62, %rd77;
	add.s32 	%r827, %r768, 128;
	mul.wide.u32 	%rd78, %r827, 4;
	add.s64 	%rd24, %rd62, %rd78;
	add.s32 	%r828, %r755, 192;
	mul.wide.u32 	%rd79, %r828, 4;
	add.s64 	%rd25, %rd62, %rd79;
	add.s32 	%r829, %r759, 192;
	mul.wide.u32 	%rd80, %r829, 4;
	add.s64 	%rd26, %rd62, %rd80;
	add.s32 	%r830, %r765, 192;
	mul.wide.u32 	%rd81, %r830, 4;
	add.s64 	%rd27, %rd62, %rd81;
	add.s32 	%r831, %r768, 192;
	mul.wide.u32 	%rd82, %r831, 4;
	add.s64 	%rd28, %rd62, %rd82;
	add.s32 	%r832, %r787, 64;
	mul.wide.u32 	%rd83, %r832, 4;
	add.s64 	%rd29, %rd62, %rd83;
	add.s32 	%r833, %r799, 64;
	mul.wide.u32 	%rd84, %r833, 4;
	add.s64 	%rd30, %rd62, %rd84;
	add.s32 	%r834, %r806, 64;
	mul.wide.u32 	%rd85, %r834, 4;
	add.s64 	%rd31, %rd62, %rd85;
	add.s32 	%r835, %r813, 64;
	mul.wide.u32 	%rd86, %r835, 4;
	add.s64 	%rd32, %rd62, %rd86;
	add.s32 	%r836, %r787, 128;
	mul.wide.u32 	%rd87, %r836, 4;
	add.s64 	%rd33, %rd62, %rd87;
	add.s32 	%r837, %r799, 128;
	mul.wide.u32 	%rd88, %r837, 4;
	add.s64 	%rd34, %rd62, %rd88;
	add.s32 	%r838, %r806, 128;
	mul.wide.u32 	%rd89, %r838, 4;
	add.s64 	%rd35, %rd62, %rd89;
	add.s32 	%r839, %r813, 128;
	mul.wide.u32 	%rd90, %r839, 4;
	add.s64 	%rd36, %rd62, %rd90;
	add.s32 	%r840, %r787, 192;
	mul.wide.u32 	%rd91, %r840, 4;
	add.s64 	%rd37, %rd62, %rd91;
	add.s32 	%r841, %r799, 192;
	mul.wide.u32 	%rd92, %r841, 4;
	add.s64 	%rd38, %rd62, %rd92;
	add.s32 	%r842, %r806, 192;
	mul.wide.u32 	%rd93, %r842, 4;
	add.s64 	%rd39, %rd62, %rd93;
	add.s32 	%r843, %r813, 192;
	mul.wide.u32 	%rd94, %r843, 4;
	add.s64 	%rd40, %rd62, %rd94;
	setp.lt.u32 	%p244, %r3, 16;
	setp.gt.u32 	%p273, %r1, 7;
	setp.lt.u32 	%p277, %r3, 24;
	mov.u32 	%r3780, %r121;
	mov.u32 	%r3781, %r121;
	mov.u32 	%r3782, %r121;
	mov.u32 	%r3783, %r121;
	bra.uni 	$L__BB0_150;
$L__BB0_204:                            // %L42053
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r258, %r121, 48;
	setp.ne.s32 	%p333, %r121, 960;
	mov.u32 	%r121, %r258;
	@%p333 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_205;
$L__BB0_150:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_191 Depth 2
	add.s32 	%r844, %r121, %r405;
	setp.lt.s32 	%p243, %r844, %r406;
	@%p243 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_205;
$L__BB0_151:                            // %oksrem704
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r1037, %r121, -1431655765;
	shr.u32 	%r1038, %r1037, 5;
	mul.lo.s32 	%r292, %r1038, 48;
	add.s32 	%r1039, %r292, %r1;
	cvt.u16.u32 	%rs63, %r1039;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 6;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -1024;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r1040, %rs68;
	shl.b32 	%r1041, %r1040, 16;
	or.b32  	%r1042, %r1041, %r91;
	add.s32 	%r1043, %r90, %r1042;
	shr.s32 	%r1044, %r1043, 31;
	shr.u32 	%r1045, %r1044, 6;
	add.s32 	%r1046, %r1043, %r1045;
	shr.s32 	%r1047, %r1046, 26;
	setp.lt.s32 	%p245, %r1043, 0;
	and.b32  	%r1048, %r1046, -67108864;
	setp.ne.s32 	%p246, %r1048, %r1043;
	and.pred  	%p247, %p245, %p246;
	selp.u32 	%r1049, 1, 0, %p247;
	sub.s32 	%r1050, %r1049, %r1047;
	shl.b32 	%r1051, %r1050, 26;
	add.s32 	%r1052, %r1051, %r1043;
	mul.wide.s32 	%rd95, %r1052, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r1053, %r1054, %r1055, %r1056}, [%rd96];
	or.b32  	%r1057, %r92, %r1041;
	add.s32 	%r1058, %r90, %r1057;
	shr.s32 	%r1059, %r1058, 31;
	shr.u32 	%r1060, %r1059, 6;
	add.s32 	%r1061, %r1058, %r1060;
	shr.u32 	%r1062, %r1061, 26;
	shr.u32 	%r1063, %r1058, 31;
	sub.s32 	%r1064, %r1063, %r1062;
	shl.b32 	%r1065, %r1064, 26;
	or.b32  	%r1066, %r1058, 1;
	add.s32 	%r1067, %r1066, %r1065;
	mul.wide.s32 	%rd97, %r1067, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r1068, %r1069, %r1070, %r1071}, [%rd98+-4];
	add.s32 	%r1072, %r93, %r292;
	cvt.u16.u32 	%rs69, %r1072;
	shr.s16 	%rs70, %rs69, 15;
	shr.u16 	%rs71, %rs70, 6;
	add.s16 	%rs72, %rs69, %rs71;
	and.b16  	%rs73, %rs72, -1024;
	sub.s16 	%rs74, %rs69, %rs73;
	cvt.u32.u16 	%r1073, %rs74;
	shl.b32 	%r1074, %r1073, 16;
	or.b32  	%r1075, %r1074, %r91;
	add.s32 	%r1076, %r90, %r1075;
	shr.s32 	%r1077, %r1076, 31;
	shr.u32 	%r1078, %r1077, 6;
	add.s32 	%r1079, %r1076, %r1078;
	shr.s32 	%r1080, %r1079, 26;
	setp.lt.s32 	%p248, %r1076, 0;
	and.b32  	%r1081, %r1079, -67108864;
	setp.ne.s32 	%p249, %r1081, %r1076;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r1082, 1, 0, %p250;
	sub.s32 	%r1083, %r1082, %r1080;
	shl.b32 	%r1084, %r1083, 26;
	add.s32 	%r1085, %r1084, %r1076;
	mul.wide.s32 	%rd99, %r1085, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r1086, %r1087, %r1088, %r1089}, [%rd100];
	or.b32  	%r1090, %r92, %r1074;
	add.s32 	%r1091, %r90, %r1090;
	shr.s32 	%r1092, %r1091, 31;
	shr.u32 	%r1093, %r1092, 6;
	add.s32 	%r1094, %r1091, %r1093;
	shr.u32 	%r1095, %r1094, 26;
	shr.u32 	%r1096, %r1091, 31;
	sub.s32 	%r1097, %r1096, %r1095;
	shl.b32 	%r1098, %r1097, 26;
	or.b32  	%r1099, %r1091, 1;
	add.s32 	%r1100, %r1099, %r1098;
	mul.wide.s32 	%rd101, %r1100, 4;
	add.s64 	%rd102, %rd3, %rd101;
	ld.global.v4.u32 	{%r1101, %r1102, %r1103, %r1104}, [%rd102+-4];
	selp.b32 	%r1105, %r1055, %r1053, %p244;
	shfl.sync.bfly.b32	%r1106, %r1105, 16, 31, -1;
	selp.b32 	%r847, %r1053, %r1106, %p244;
	selp.b32 	%r852, %r1106, %r1055, %p244;
	selp.b32 	%r1107, %r1056, %r1054, %p244;
	shfl.sync.bfly.b32	%r1108, %r1107, 16, 31, -1;
	selp.b32 	%r855, %r1054, %r1108, %p244;
	selp.b32 	%r860, %r1108, %r1056, %p244;
	selp.b32 	%r1109, %r1070, %r1068, %p244;
	shfl.sync.bfly.b32	%r1110, %r1109, 16, 31, -1;
	selp.b32 	%r863, %r1068, %r1110, %p244;
	selp.b32 	%r868, %r1110, %r1070, %p244;
	selp.b32 	%r1111, %r1071, %r1069, %p244;
	shfl.sync.bfly.b32	%r1112, %r1111, 16, 31, -1;
	selp.b32 	%r871, %r1069, %r1112, %p244;
	selp.b32 	%r876, %r1112, %r1071, %p244;
	selp.b32 	%r1113, %r1088, %r1086, %p244;
	shfl.sync.bfly.b32	%r1114, %r1113, 16, 31, -1;
	selp.b32 	%r879, %r1086, %r1114, %p244;
	selp.b32 	%r884, %r1114, %r1088, %p244;
	selp.b32 	%r1115, %r1089, %r1087, %p244;
	shfl.sync.bfly.b32	%r1116, %r1115, 16, 31, -1;
	selp.b32 	%r887, %r1087, %r1116, %p244;
	selp.b32 	%r892, %r1116, %r1089, %p244;
	selp.b32 	%r1117, %r1103, %r1101, %p244;
	shfl.sync.bfly.b32	%r1118, %r1117, 16, 31, -1;
	selp.b32 	%r895, %r1101, %r1118, %p244;
	selp.b32 	%r900, %r1118, %r1103, %p244;
	selp.b32 	%r1119, %r1104, %r1102, %p244;
	shfl.sync.bfly.b32	%r1120, %r1119, 16, 31, -1;
	selp.b32 	%r903, %r1102, %r1120, %p244;
	selp.b32 	%r908, %r1120, %r1104, %p244;
	shl.b32 	%r848, %r852, 4;
	mov.u32 	%r846, 252645135;
	// begin inline asm
	lop3.b32 %r910, %r846, %r847, %r848, 202;
	// end inline asm
	shr.u32 	%r851, %r847, 4;
	// begin inline asm
	lop3.b32 %r926, %r846, %r851, %r852, 202;
	// end inline asm
	shl.b32 	%r856, %r860, 4;
	// begin inline asm
	lop3.b32 %r918, %r846, %r855, %r856, 202;
	// end inline asm
	shr.u32 	%r859, %r855, 4;
	// begin inline asm
	lop3.b32 %r934, %r846, %r859, %r860, 202;
	// end inline asm
	shl.b32 	%r864, %r868, 4;
	// begin inline asm
	lop3.b32 %r942, %r846, %r863, %r864, 202;
	// end inline asm
	shr.u32 	%r867, %r863, 4;
	// begin inline asm
	lop3.b32 %r958, %r846, %r867, %r868, 202;
	// end inline asm
	shl.b32 	%r872, %r876, 4;
	// begin inline asm
	lop3.b32 %r950, %r846, %r871, %r872, 202;
	// end inline asm
	shr.u32 	%r875, %r871, 4;
	// begin inline asm
	lop3.b32 %r966, %r846, %r875, %r876, 202;
	// end inline asm
	shl.b32 	%r880, %r884, 4;
	// begin inline asm
	lop3.b32 %r911, %r846, %r879, %r880, 202;
	// end inline asm
	shr.u32 	%r883, %r879, 4;
	// begin inline asm
	lop3.b32 %r927, %r846, %r883, %r884, 202;
	// end inline asm
	shl.b32 	%r888, %r892, 4;
	// begin inline asm
	lop3.b32 %r919, %r846, %r887, %r888, 202;
	// end inline asm
	shr.u32 	%r891, %r887, 4;
	// begin inline asm
	lop3.b32 %r935, %r846, %r891, %r892, 202;
	// end inline asm
	shl.b32 	%r896, %r900, 4;
	// begin inline asm
	lop3.b32 %r943, %r846, %r895, %r896, 202;
	// end inline asm
	shr.u32 	%r899, %r895, 4;
	// begin inline asm
	lop3.b32 %r959, %r846, %r899, %r900, 202;
	// end inline asm
	shl.b32 	%r904, %r908, 4;
	// begin inline asm
	lop3.b32 %r951, %r846, %r903, %r904, 202;
	// end inline asm
	shr.u32 	%r907, %r903, 4;
	// begin inline asm
	lop3.b32 %r967, %r846, %r907, %r908, 202;
	// end inline asm
	mov.u32 	%r912, 25152;
	// begin inline asm
	prmt.b32 %r974, %r910, %r911, %r912;
	// end inline asm
	mov.u32 	%r916, 29521;
	// begin inline asm
	prmt.b32 %r1006, %r910, %r911, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r982, %r918, %r919, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1014, %r918, %r919, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r975, %r926, %r927, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1007, %r926, %r927, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r983, %r934, %r935, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1015, %r934, %r935, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r990, %r942, %r943, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1022, %r942, %r943, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r998, %r950, %r951, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1030, %r950, %r951, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r991, %r958, %r959, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1023, %r958, %r959, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r999, %r966, %r967, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1031, %r966, %r967, %r916;
	// end inline asm
	mov.u32 	%r1032, 21520;
	// begin inline asm
	prmt.b32 %r973, %r974, %r975, %r1032;
	// end inline asm
	mov.u32 	%r1036, 30258;
	// begin inline asm
	prmt.b32 %r977, %r974, %r975, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r981, %r982, %r983, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r985, %r982, %r983, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r989, %r990, %r991, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r993, %r990, %r991, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r997, %r998, %r999, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1001, %r998, %r999, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1005, %r1006, %r1007, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1009, %r1006, %r1007, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1013, %r1014, %r1015, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1017, %r1014, %r1015, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1021, %r1022, %r1023, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1025, %r1022, %r1023, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1029, %r1030, %r1031, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1033, %r1030, %r1031, %r1036;
	// end inline asm
	mul.hi.s16 	%rs75, %rs63, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs63, %rs79;
	cvt.s32.s16 	%r1121, %rs80;
	add.s32 	%r1122, %r94, %r1121;
	mul.wide.s32 	%rd103, %r1122, 4;
	add.s64 	%rd105, %rd62, %rd103;
	st.shared.u32 	[%rd105], %r973;
	add.s32 	%r1123, %r1122, 128;
	mul.wide.u32 	%rd106, %r1123, 4;
	add.s64 	%rd107, %rd62, %rd106;
	st.shared.u32 	[%rd107], %r981;
	add.s32 	%r1124, %r1122, 64;
	mul.wide.u32 	%rd108, %r1124, 4;
	add.s64 	%rd109, %rd62, %rd108;
	st.shared.u32 	[%rd109], %r977;
	add.s32 	%r1125, %r1122, 192;
	mul.wide.u32 	%rd110, %r1125, 4;
	add.s64 	%rd111, %rd62, %rd110;
	st.shared.u32 	[%rd111], %r985;
	add.s32 	%r1126, %r95, %r1121;
	mul.wide.u32 	%rd112, %r1126, 4;
	add.s64 	%rd113, %rd62, %rd112;
	st.shared.u32 	[%rd113], %r989;
	add.s32 	%r1127, %r1126, 128;
	mul.wide.u32 	%rd114, %r1127, 4;
	add.s64 	%rd115, %rd62, %rd114;
	st.shared.u32 	[%rd115], %r997;
	add.s32 	%r1128, %r1126, 64;
	mul.wide.u32 	%rd116, %r1128, 4;
	add.s64 	%rd117, %rd62, %rd116;
	st.shared.u32 	[%rd117], %r993;
	add.s32 	%r1129, %r1126, 192;
	mul.wide.u32 	%rd118, %r1129, 4;
	add.s64 	%rd119, %rd62, %rd118;
	st.shared.u32 	[%rd119], %r1001;
	add.s32 	%r1130, %r1122, 32;
	mul.wide.u32 	%rd120, %r1130, 4;
	add.s64 	%rd121, %rd62, %rd120;
	st.shared.u32 	[%rd121], %r1005;
	add.s32 	%r1131, %r1122, 160;
	mul.wide.u32 	%rd122, %r1131, 4;
	add.s64 	%rd123, %rd62, %rd122;
	st.shared.u32 	[%rd123], %r1013;
	add.s32 	%r1132, %r1122, 96;
	mul.wide.u32 	%rd124, %r1132, 4;
	add.s64 	%rd125, %rd62, %rd124;
	st.shared.u32 	[%rd125], %r1009;
	add.s32 	%r1133, %r1122, 224;
	mul.wide.u32 	%rd126, %r1133, 4;
	add.s64 	%rd127, %rd62, %rd126;
	st.shared.u32 	[%rd127], %r1017;
	add.s32 	%r1134, %r1126, 32;
	mul.wide.u32 	%rd128, %r1134, 4;
	add.s64 	%rd129, %rd62, %rd128;
	st.shared.u32 	[%rd129], %r1021;
	add.s32 	%r1135, %r1126, 160;
	mul.wide.u32 	%rd130, %r1135, 4;
	add.s64 	%rd131, %rd62, %rd130;
	st.shared.u32 	[%rd131], %r1029;
	add.s32 	%r1136, %r1126, 96;
	mul.wide.u32 	%rd132, %r1136, 4;
	add.s64 	%rd133, %rd62, %rd132;
	st.shared.u32 	[%rd133], %r1025;
	add.s32 	%r1137, %r1126, 224;
	mul.wide.u32 	%rd134, %r1137, 4;
	add.s64 	%rd135, %rd62, %rd134;
	st.shared.u32 	[%rd135], %r1033;
	bar.sync 	0;
	add.s32 	%r1138, %r292, %r96;
	cvt.u16.u32 	%rs81, %r1138;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r293, %rs87;
	add.s32 	%r1139, %r97, %r293;
	mul.wide.s32 	%rd136, %r1139, 4;
	add.s64 	%rd137, %rd62, %rd136;
	ld.shared.u32 	%r294, [%rd137];
	add.s32 	%r1140, %r98, %r293;
	mul.wide.u32 	%rd138, %r1140, 4;
	add.s64 	%rd139, %rd62, %rd138;
	ld.shared.u32 	%r295, [%rd139];
	add.s32 	%r1141, %r99, %r293;
	mul.wide.u32 	%rd140, %r1141, 4;
	add.s64 	%rd141, %rd62, %rd140;
	ld.shared.u32 	%r296, [%rd141];
	add.s32 	%r1142, %r100, %r293;
	mul.wide.u32 	%rd142, %r1142, 4;
	add.s64 	%rd143, %rd62, %rd142;
	ld.shared.u32 	%r297, [%rd143];
	add.s32 	%r1143, %r101, %r293;
	mul.wide.u32 	%rd144, %r1143, 4;
	add.s64 	%rd145, %rd62, %rd144;
	ld.shared.u32 	%r298, [%rd145];
	add.s32 	%r1144, %r102, %r293;
	mul.wide.u32 	%rd146, %r1144, 4;
	add.s64 	%rd147, %rd62, %rd146;
	ld.shared.u32 	%r299, [%rd147];
	add.s32 	%r1145, %r103, %r293;
	mul.wide.u32 	%rd148, %r1145, 4;
	add.s64 	%rd149, %rd62, %rd148;
	ld.shared.u32 	%r300, [%rd149];
	add.s32 	%r1146, %r104, %r293;
	mul.wide.u32 	%rd150, %r1146, 4;
	add.s64 	%rd151, %rd62, %rd150;
	ld.shared.u32 	%r301, [%rd151];
	add.s32 	%r1147, %r105, %r293;
	mul.wide.u32 	%rd152, %r1147, 4;
	add.s64 	%rd153, %rd62, %rd152;
	ld.shared.u32 	%r302, [%rd153];
	add.s32 	%r1148, %r106, %r293;
	mul.wide.u32 	%rd154, %r1148, 4;
	add.s64 	%rd155, %rd62, %rd154;
	ld.shared.u32 	%r303, [%rd155];
	add.s32 	%r1149, %r107, %r293;
	mul.wide.u32 	%rd156, %r1149, 4;
	add.s64 	%rd157, %rd62, %rd156;
	ld.shared.u32 	%r304, [%rd157];
	add.s32 	%r1150, %r108, %r293;
	mul.wide.u32 	%rd158, %r1150, 4;
	add.s64 	%rd159, %rd62, %rd158;
	ld.shared.u32 	%r305, [%rd159];
	add.s32 	%r1151, %r109, %r293;
	mul.wide.u32 	%rd160, %r1151, 4;
	add.s64 	%rd161, %rd62, %rd160;
	ld.shared.u32 	%r306, [%rd161];
	add.s32 	%r1152, %r110, %r293;
	mul.wide.u32 	%rd162, %r1152, 4;
	add.s64 	%rd163, %rd62, %rd162;
	ld.shared.u32 	%r307, [%rd163];
	add.s32 	%r1153, %r111, %r293;
	mul.wide.u32 	%rd164, %r1153, 4;
	add.s64 	%rd165, %rd62, %rd164;
	ld.shared.u32 	%r308, [%rd165];
	add.s32 	%r1154, %r112, %r293;
	mul.wide.u32 	%rd166, %r1154, 4;
	add.s64 	%rd167, %rd62, %rd166;
	ld.shared.u32 	%r309, [%rd167];
	add.s32 	%r1155, %r113, %r293;
	mul.wide.u32 	%rd168, %r1155, 4;
	add.s64 	%rd169, %rd62, %rd168;
	ld.shared.u32 	%r310, [%rd169];
	add.s32 	%r1156, %r114, %r293;
	mul.wide.u32 	%rd170, %r1156, 4;
	add.s64 	%rd171, %rd62, %rd170;
	ld.shared.u32 	%r311, [%rd171];
	add.s32 	%r1157, %r115, %r293;
	mul.wide.u32 	%rd172, %r1157, 4;
	add.s64 	%rd173, %rd62, %rd172;
	ld.shared.u32 	%r312, [%rd173];
	add.s32 	%r1158, %r116, %r293;
	mul.wide.u32 	%rd174, %r1158, 4;
	add.s64 	%rd175, %rd62, %rd174;
	ld.shared.u32 	%r313, [%rd175];
	add.s32 	%r1159, %r117, %r293;
	mul.wide.u32 	%rd176, %r1159, 4;
	add.s64 	%rd177, %rd62, %rd176;
	ld.shared.u32 	%r314, [%rd177];
	add.s32 	%r1160, %r118, %r293;
	mul.wide.s32 	%rd178, %r1160, 4;
	add.s64 	%rd179, %rd62, %rd178;
	ld.shared.u32 	%r315, [%rd179];
	bar.sync 	0;
	shfl.sync.idx.b32	%r316, %r285, 0, 31, -1;
	shfl.sync.idx.b32	%r317, %r285, 1, 31, -1;
	shfl.sync.idx.b32	%r318, %r285, 2, 31, -1;
	shfl.sync.idx.b32	%r319, %r285, 3, 31, -1;
	shfl.sync.idx.b32	%r320, %r285, 4, 31, -1;
	shfl.sync.idx.b32	%r321, %r285, 5, 31, -1;
	shfl.sync.idx.b32	%r322, %r285, 6, 31, -1;
	shfl.sync.idx.b32	%r323, %r285, 7, 31, -1;
	shfl.sync.idx.b32	%r324, %r285, 8, 31, -1;
	shfl.sync.idx.b32	%r325, %r285, 9, 31, -1;
	shfl.sync.idx.b32	%r326, %r285, 10, 31, -1;
	shfl.sync.idx.b32	%r327, %r285, 11, 31, -1;
	shfl.sync.idx.b32	%r328, %r285, 12, 31, -1;
	shfl.sync.idx.b32	%r329, %r285, 13, 31, -1;
	shfl.sync.idx.b32	%r330, %r285, 14, 31, -1;
	shfl.sync.idx.b32	%r331, %r285, 15, 31, -1;
	shfl.sync.idx.b32	%r332, %r285, 16, 31, -1;
	shfl.sync.idx.b32	%r333, %r285, 17, 31, -1;
	shfl.sync.idx.b32	%r334, %r285, 18, 31, -1;
	shfl.sync.idx.b32	%r335, %r285, 19, 31, -1;
	shfl.sync.idx.b32	%r336, %r285, 20, 31, -1;
	shfl.sync.idx.b32	%r337, %r285, 21, 31, -1;
	shfl.sync.idx.b32	%r338, %r285, 22, 31, -1;
	shfl.sync.idx.b32	%r339, %r285, 23, 31, -1;
	setp.eq.s32 	%p251, %r316, 999999999;
	@%p251 bra 	$L__BB0_152;
// %bb.234:                             // %oksrem3326
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1161, %r316, %r293;
	mul.wide.s32 	%rd180, %r1161, 4;
	add.s64 	%rd182, %rd62, %rd180;
	st.shared.u32 	[%rd182], %r294;
	setp.eq.s32 	%p252, %r317, 999999999;
	@%p252 bra 	$L__BB0_153;
// %bb.235:                             // %oksrem3394
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1162, %r317, %r293;
	mul.wide.s32 	%rd183, %r1162, 4;
	add.s64 	%rd185, %rd62, %rd183;
	st.shared.u32 	[%rd185], %r295;
	setp.eq.s32 	%p253, %r318, 999999999;
	@%p253 bra 	$L__BB0_154;
// %bb.236:                             // %oksrem3462
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1163, %r318, %r293;
	mul.wide.s32 	%rd186, %r1163, 4;
	add.s64 	%rd188, %rd62, %rd186;
	st.shared.u32 	[%rd188], %r296;
	setp.eq.s32 	%p254, %r319, 999999999;
	@%p254 bra 	$L__BB0_155;
// %bb.237:                             // %oksrem3530
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1164, %r319, %r293;
	mul.wide.s32 	%rd189, %r1164, 4;
	add.s64 	%rd191, %rd62, %rd189;
	st.shared.u32 	[%rd191], %r297;
	setp.eq.s32 	%p255, %r320, 999999999;
	@%p255 bra 	$L__BB0_156;
// %bb.238:                             // %oksrem3598
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1165, %r320, %r293;
	mul.wide.s32 	%rd192, %r1165, 4;
	add.s64 	%rd194, %rd62, %rd192;
	st.shared.u32 	[%rd194], %r298;
	setp.eq.s32 	%p256, %r321, 999999999;
	@%p256 bra 	$L__BB0_157;
// %bb.239:                             // %oksrem3666
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1166, %r321, %r293;
	mul.wide.s32 	%rd195, %r1166, 4;
	add.s64 	%rd197, %rd62, %rd195;
	st.shared.u32 	[%rd197], %r299;
	setp.eq.s32 	%p257, %r322, 999999999;
	@%p257 bra 	$L__BB0_158;
// %bb.240:                             // %oksrem3734
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1167, %r322, %r293;
	mul.wide.s32 	%rd198, %r1167, 4;
	add.s64 	%rd200, %rd62, %rd198;
	st.shared.u32 	[%rd200], %r300;
	setp.eq.s32 	%p258, %r323, 999999999;
	@%p258 bra 	$L__BB0_159;
// %bb.241:                             // %oksrem3802
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1168, %r323, %r293;
	mul.wide.s32 	%rd201, %r1168, 4;
	add.s64 	%rd203, %rd62, %rd201;
	st.shared.u32 	[%rd203], %r301;
	setp.eq.s32 	%p259, %r324, 999999999;
	@%p259 bra 	$L__BB0_160;
// %bb.242:                             // %oksrem3870
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1169, %r324, %r293;
	mul.wide.s32 	%rd204, %r1169, 4;
	add.s64 	%rd206, %rd62, %rd204;
	st.shared.u32 	[%rd206], %r302;
	setp.eq.s32 	%p260, %r325, 999999999;
	@%p260 bra 	$L__BB0_161;
// %bb.243:                             // %oksrem3938
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1170, %r325, %r293;
	mul.wide.s32 	%rd207, %r1170, 4;
	add.s64 	%rd209, %rd62, %rd207;
	st.shared.u32 	[%rd209], %r303;
	setp.eq.s32 	%p261, %r326, 999999999;
	@%p261 bra 	$L__BB0_162;
// %bb.244:                             // %oksrem4006
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1171, %r326, %r293;
	mul.wide.s32 	%rd210, %r1171, 4;
	add.s64 	%rd212, %rd62, %rd210;
	st.shared.u32 	[%rd212], %r304;
	setp.eq.s32 	%p262, %r327, 999999999;
	@%p262 bra 	$L__BB0_163;
// %bb.245:                             // %oksrem4074
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1172, %r327, %r293;
	mul.wide.s32 	%rd213, %r1172, 4;
	add.s64 	%rd215, %rd62, %rd213;
	st.shared.u32 	[%rd215], %r305;
	setp.eq.s32 	%p263, %r328, 999999999;
	@%p263 bra 	$L__BB0_164;
// %bb.246:                             // %oksrem4142
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1173, %r328, %r293;
	mul.wide.s32 	%rd216, %r1173, 4;
	add.s64 	%rd218, %rd62, %rd216;
	st.shared.u32 	[%rd218], %r306;
	setp.eq.s32 	%p264, %r329, 999999999;
	@%p264 bra 	$L__BB0_165;
// %bb.247:                             // %oksrem4210
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1174, %r329, %r293;
	mul.wide.s32 	%rd219, %r1174, 4;
	add.s64 	%rd221, %rd62, %rd219;
	st.shared.u32 	[%rd221], %r307;
	setp.eq.s32 	%p265, %r330, 999999999;
	@%p265 bra 	$L__BB0_166;
// %bb.248:                             // %oksrem4278
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1175, %r330, %r293;
	mul.wide.s32 	%rd222, %r1175, 4;
	add.s64 	%rd224, %rd62, %rd222;
	st.shared.u32 	[%rd224], %r308;
	setp.eq.s32 	%p266, %r331, 999999999;
	@%p266 bra 	$L__BB0_167;
// %bb.249:                             // %oksrem4346
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1176, %r331, %r293;
	mul.wide.s32 	%rd225, %r1176, 4;
	add.s64 	%rd227, %rd62, %rd225;
	st.shared.u32 	[%rd227], %r309;
	setp.eq.s32 	%p267, %r332, 999999999;
	@%p267 bra 	$L__BB0_168;
// %bb.250:                             // %oksrem4414
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1177, %r332, %r293;
	mul.wide.s32 	%rd228, %r1177, 4;
	add.s64 	%rd230, %rd62, %rd228;
	st.shared.u32 	[%rd230], %r310;
	setp.eq.s32 	%p268, %r333, 999999999;
	@%p268 bra 	$L__BB0_169;
// %bb.251:                             // %oksrem4482
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1178, %r333, %r293;
	mul.wide.s32 	%rd231, %r1178, 4;
	add.s64 	%rd233, %rd62, %rd231;
	st.shared.u32 	[%rd233], %r311;
	setp.eq.s32 	%p269, %r334, 999999999;
	@%p269 bra 	$L__BB0_170;
// %bb.252:                             // %oksrem4550
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1179, %r334, %r293;
	mul.wide.s32 	%rd234, %r1179, 4;
	add.s64 	%rd236, %rd62, %rd234;
	st.shared.u32 	[%rd236], %r312;
	setp.eq.s32 	%p270, %r335, 999999999;
	@%p270 bra 	$L__BB0_171;
// %bb.253:                             // %oksrem4618
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1180, %r335, %r293;
	mul.wide.s32 	%rd237, %r1180, 4;
	add.s64 	%rd239, %rd62, %rd237;
	st.shared.u32 	[%rd239], %r313;
	setp.eq.s32 	%p271, %r336, 999999999;
	@%p271 bra 	$L__BB0_172;
// %bb.254:                             // %oksrem4686
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1181, %r336, %r293;
	mul.wide.s32 	%rd240, %r1181, 4;
	add.s64 	%rd242, %rd62, %rd240;
	st.shared.u32 	[%rd242], %r314;
	setp.eq.s32 	%p272, %r337, 999999999;
	@%p272 bra 	$L__BB0_173;
// %bb.255:                             // %oksrem4755
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1182, 0, %r315, %p273;
	add.s32 	%r1183, %r337, %r293;
	mul.wide.s32 	%rd243, %r1183, 4;
	add.s64 	%rd245, %rd62, %rd243;
	st.shared.u32 	[%rd245], %r1182;
	setp.eq.s32 	%p274, %r338, 999999999;
	@%p274 bra 	$L__BB0_174;
// %bb.256:                             // %oksrem4823
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1184, %r338, %r293;
	mul.wide.s32 	%rd246, %r1184, 4;
	add.s64 	%rd248, %rd62, %rd246;
	mov.u32 	%r3755, 0;
	st.shared.u32 	[%rd248], %r3755;
	setp.eq.s32 	%p275, %r339, 999999999;
	@%p275 bra 	$L__BB0_175;
// %bb.257:                             // %oksrem4890
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1187, %r339, %r293;
	mul.wide.s32 	%rd249, %r1187, 4;
	add.s64 	%rd251, %rd62, %rd249;
	st.shared.u32 	[%rd251], %r3755;
	bar.sync 	0;
	mov.u32 	%r3756, %r3755;
	mov.u32 	%r3757, %r3755;
	mov.u32 	%r3758, %r3755;
	mov.u32 	%r3759, %r3755;
	mov.u32 	%r3760, %r3755;
	mov.u32 	%r3761, %r3755;
	mov.u32 	%r3762, %r3755;
	mov.u32 	%r3763, %r3755;
	mov.u32 	%r3764, %r3755;
	mov.u32 	%r3765, %r3755;
	mov.u32 	%r3766, %r3755;
	mov.u32 	%r3767, %r3755;
	mov.u32 	%r3768, %r3755;
	mov.u32 	%r3769, %r3755;
	mov.u32 	%r3770, %r3755;
	mov.u32 	%r3771, %r3755;
	mov.u32 	%r3772, %r3755;
	mov.u32 	%r3773, %r3755;
	mov.u32 	%r3774, %r3755;
	mov.u32 	%r3775, %r3755;
	mov.u32 	%r3776, %r3755;
	mov.u32 	%r3777, %r3755;
	mov.u32 	%r3778, %r3755;
	@%p91 bra 	$L__BB0_176;
// %bb.258:                             // %oksrem4934
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs88, %r292;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r1188, %rs94;
	mul.wide.s32 	%rd252, %r1188, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3755, [%rd253];
	ld.shared.u32 	%r3756, [%rd16+4];
	ld.shared.u32 	%r3757, [%rd16+8];
	ld.shared.u32 	%r3758, [%rd16+12];
	ld.shared.u32 	%r3759, [%rd16+16];
	ld.shared.u32 	%r3760, [%rd16+20];
	ld.shared.u32 	%r3761, [%rd16+24];
	ld.shared.u32 	%r3762, [%rd16+28];
	ld.shared.u32 	%r3763, [%rd16+32];
	ld.shared.u32 	%r3764, [%rd16+36];
	ld.shared.u32 	%r3765, [%rd16+40];
	ld.shared.u32 	%r3766, [%rd16+44];
	ld.shared.u32 	%r3767, [%rd16+48];
	ld.shared.u32 	%r3768, [%rd16+52];
	ld.shared.u32 	%r3769, [%rd16+56];
	ld.shared.u32 	%r3770, [%rd16+60];
	add.s16 	%rs95, %rs88, 16;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r1189, %rs101;
	mul.wide.s32 	%rd254, %r1189, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3771, [%rd255];
	add.s16 	%rs102, %rs88, 17;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r1190, %rs108;
	mul.wide.s32 	%rd256, %r1190, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3772, [%rd257];
	add.s16 	%rs109, %rs88, 18;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r1191, %rs115;
	mul.wide.s32 	%rd258, %r1191, 4;
	add.s64 	%rd259, %rd16, %rd258;
	ld.shared.u32 	%r3773, [%rd259];
	add.s16 	%rs116, %rs88, 19;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r1192, %rs122;
	mul.wide.s32 	%rd260, %r1192, 4;
	add.s64 	%rd261, %rd16, %rd260;
	ld.shared.u32 	%r3774, [%rd261];
	add.s16 	%rs123, %rs88, 20;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r1193, %rs129;
	mul.wide.s32 	%rd262, %r1193, 4;
	add.s64 	%rd263, %rd16, %rd262;
	ld.shared.u32 	%r3775, [%rd263];
	add.s16 	%rs130, %rs88, 21;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r1194, %rs136;
	mul.wide.s32 	%rd264, %r1194, 4;
	add.s64 	%rd265, %rd16, %rd264;
	ld.shared.u32 	%r3776, [%rd265];
	add.s16 	%rs137, %rs88, 22;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r1195, %rs143;
	mul.wide.s32 	%rd266, %r1195, 4;
	add.s64 	%rd267, %rd16, %rd266;
	ld.shared.u32 	%r3777, [%rd267];
	add.s16 	%rs144, %rs88, 23;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r1196, %rs150;
	mul.wide.s32 	%rd268, %r1196, 4;
	add.s64 	%rd269, %rd16, %rd268;
	ld.shared.u32 	%r3778, [%rd269];
$L__BB0_176:                            // %L13906
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3779, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_188:                            // %L27970
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3781, %r3781, 1;
	mov.u32 	%r3780, 0;
	mov.u32 	%r3782, %r3780;
	mov.u32 	%r3783, %r3780;
$L__BB0_189:                            // %L27971
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3779, %r3779, -4;
	setp.ne.s32 	%p304, %r3779, -12;
	@%p304 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_190;
$L__BB0_177:                            // %L13932
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p278, %r3779, 12;
	selp.b32 	%r1734, %r3755, 0, %p278;
	setp.eq.s32 	%p279, %r3779, 8;
	selp.b32 	%r1735, %r3759, %r1734, %p279;
	setp.eq.s32 	%p280, %r3779, 4;
	selp.b32 	%r1736, %r3763, %r1735, %p280;
	setp.eq.s32 	%p281, %r3779, 0;
	selp.b32 	%r1737, %r3767, %r1736, %p281;
	setp.eq.s32 	%p282, %r3779, -4;
	selp.b32 	%r1738, %r3771, %r1737, %p282;
	setp.eq.s32 	%p283, %r3779, -8;
	selp.b32 	%r1202, %r3775, %r1738, %p283;
	selp.b32 	%r1739, %r3756, 0, %p278;
	selp.b32 	%r1740, %r3760, %r1739, %p279;
	selp.b32 	%r1741, %r3764, %r1740, %p280;
	selp.b32 	%r1742, %r3768, %r1741, %p281;
	selp.b32 	%r1743, %r3772, %r1742, %p282;
	selp.b32 	%r1248, %r3776, %r1743, %p283;
	selp.b32 	%r1744, %r3757, 0, %p278;
	selp.b32 	%r1745, %r3761, %r1744, %p279;
	selp.b32 	%r1746, %r3765, %r1745, %p280;
	selp.b32 	%r1747, %r3769, %r1746, %p281;
	selp.b32 	%r1748, %r3773, %r1747, %p282;
	selp.b32 	%r1294, %r3777, %r1748, %p283;
	selp.b32 	%r1749, %r3758, 0, %p278;
	selp.b32 	%r1750, %r3762, %r1749, %p279;
	selp.b32 	%r1751, %r3766, %r1750, %p280;
	selp.b32 	%r1752, %r3770, %r1751, %p281;
	selp.b32 	%r1753, %r3774, %r1752, %p282;
	selp.b32 	%r1340, %r3778, %r1753, %p283;
	mov.u16 	%rs188, 25600;
	// begin inline asm
	mov.b32 %r1203, {%rs188, %rs188};
	// end inline asm
	mov.u16 	%rs190, 21504;
	// begin inline asm
	mov.b32 %r1214, {%rs190, %rs190};
	// end inline asm
	mov.u32 	%r1339, 983055;
	// begin inline asm
	lop3.b32 %r1200, %r1339, %r1202, %r1203, 202;
	// end inline asm
	mov.u16 	%rs194, 18432;
	// begin inline asm
	mov.b32 %r1204, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1205, %r1203, %r1204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1208, %r1200, %r1205;
	// end inline asm
	mov.u32 	%r1350, 15728880;
	// begin inline asm
	lop3.b32 %r1211, %r1350, %r1202, %r1214, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1215, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1216, %r1214, %r1215;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1219, %r1211, %r1216;
	// end inline asm
	// begin inline asm
	mov.b32 %r1249, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1260, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1246, %r1339, %r1248, %r1249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1250, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1251, %r1249, %r1250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1254, %r1246, %r1251;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1257, %r1350, %r1248, %r1260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1261, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1262, %r1260, %r1261;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1265, %r1257, %r1262;
	// end inline asm
	// begin inline asm
	mov.b32 %r1295, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1306, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1292, %r1339, %r1294, %r1295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1296, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1297, %r1295, %r1296;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1300, %r1292, %r1297;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1303, %r1350, %r1294, %r1306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1307, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1308, %r1306, %r1307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1311, %r1303, %r1308;
	// end inline asm
	// begin inline asm
	mov.b32 %r1341, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1352, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1338, %r1339, %r1340, %r1341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1342, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1343, %r1341, %r1342;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1346, %r1338, %r1343;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1349, %r1350, %r1340, %r1352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1353, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1354, %r1352, %r1353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1357, %r1349, %r1354;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1219;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1382, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1208;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1385, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1265;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1388, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1254;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1391, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1311;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1394, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1300;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1397, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1357;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1400, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1346;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1403, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1669, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1469, %r1466}, {%r435, %r438}, {%r1382}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1478, %r1475}, {%r435, %r438}, {%r1385}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1487, %r1484}, {%r435, %r438}, {%r1388}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1496, %r1493}, {%r435, %r438}, {%r1391}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1505, %r1502}, {%r435, %r438}, {%r1394}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1514, %r1511}, {%r435, %r438}, {%r1397}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1523, %r1520}, {%r435, %r438}, {%r1400}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1532, %r1529}, {%r435, %r438}, {%r1403}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1462, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1464, %r1462, %r1466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1467, %r487, %r1469, %r1464;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1471, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1473, %r1471, %r1475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1476, %r487, %r1478, %r1473;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1480, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1482, %r1480, %r1484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1485, %r487, %r1487, %r1482;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1489, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1491, %r1489, %r1493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1494, %r487, %r1496, %r1491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1498, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1500, %r1498, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r487, %r1505, %r1500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1507, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1509, %r1507, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1512, %r487, %r1514, %r1509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1516, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1518, %r1516, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r487, %r1523, %r1518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1525, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1527, %r1525, %r1529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1530, %r487, %r1532, %r1527;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1534, %r490, %r1469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1537, %r487, %r1466, %r1534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1541, %r490, %r1478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1544, %r487, %r1475, %r1541;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1548, %r490, %r1487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1551, %r487, %r1484, %r1548;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1555, %r490, %r1496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r487, %r1493, %r1555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1562, %r490, %r1505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1565, %r487, %r1502, %r1562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r490, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r487, %r1511, %r1569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r490, %r1523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r487, %r1520, %r1576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1583, %r490, %r1532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1586, %r487, %r1529, %r1583;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1671, %r1672}, {%r531, %r537, %r534, %r540}, {%r1467, %r1537}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1679, %r1680}, {%r531, %r537, %r534, %r540}, {%r1476, %r1544}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1687, %r1688}, {%r531, %r537, %r534, %r540}, {%r1485, %r1551}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1695, %r1696}, {%r531, %r537, %r534, %r540}, {%r1494, %r1558}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1703, %r1704}, {%r531, %r537, %r534, %r540}, {%r1503, %r1565}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1711, %r1712}, {%r531, %r537, %r534, %r540}, {%r1512, %r1572}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1719, %r1720}, {%r531, %r537, %r534, %r540}, {%r1521, %r1579}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1727, %r1728}, {%r531, %r537, %r534, %r540}, {%r1530, %r1586}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1670, %r1671, %r1672, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1674, %r1671, %r1672, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1678, %r1679, %r1680, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1682, %r1679, %r1680, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1686, %r1687, %r1688, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1690, %r1687, %r1688, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1694, %r1695, %r1696, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1698, %r1695, %r1696, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1702, %r1703, %r1704, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1706, %r1703, %r1704, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1710, %r1711, %r1712, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1714, %r1711, %r1712, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1718, %r1719, %r1720, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1722, %r1719, %r1720, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1726, %r1727, %r1728, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1730, %r1727, %r1728, %r1036;
	// end inline asm
	st.shared.u32 	[%rd7], %r1670;
	st.shared.u32 	[%rd8], %r1674;
	st.shared.u32 	[%rd9], %r1678;
	st.shared.u32 	[%rd10], %r1682;
	st.shared.u32 	[%rd17], %r1686;
	st.shared.u32 	[%rd18], %r1690;
	st.shared.u32 	[%rd19], %r1694;
	st.shared.u32 	[%rd20], %r1698;
	st.shared.u32 	[%rd21], %r1702;
	st.shared.u32 	[%rd22], %r1706;
	st.shared.u32 	[%rd23], %r1710;
	st.shared.u32 	[%rd24], %r1714;
	st.shared.u32 	[%rd25], %r1718;
	st.shared.u32 	[%rd26], %r1722;
	st.shared.u32 	[%rd27], %r1726;
	st.shared.u32 	[%rd28], %r1730;
	@%p277 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_178;
$L__BB0_259:                            // %pass8557
                                        //   in Loop: Header=BB0_177 Depth=2
	st.shared.u32 	[%rd7], %r1670;
	st.shared.u32 	[%rd8], %r1674;
	st.shared.u32 	[%rd9], %r1678;
	st.shared.u32 	[%rd10], %r1682;
	st.shared.u32 	[%rd17], %r1686;
	st.shared.u32 	[%rd18], %r1690;
	st.shared.u32 	[%rd19], %r1694;
	st.shared.u32 	[%rd20], %r1698;
	st.shared.u32 	[%rd21], %r1702;
	st.shared.u32 	[%rd22], %r1706;
	st.shared.u32 	[%rd23], %r1710;
	st.shared.u32 	[%rd24], %r1714;
	st.shared.u32 	[%rd25], %r1718;
	st.shared.u32 	[%rd26], %r1722;
	st.shared.u32 	[%rd27], %r1726;
	st.shared.u32 	[%rd28], %r1730;
$L__BB0_178:                            // %L22314
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	mov.u32 	%r3784, %r1669;
	mov.u32 	%r3785, %r1669;
	mov.u32 	%r3786, %r1669;
	mov.u32 	%r3787, %r1669;
	@%p277 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_179;
$L__BB0_260:                            // %pass10652
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3784, [%rd11];
	ld.shared.u32 	%r3785, [%rd12];
	ld.shared.u32 	%r3786, [%rd13];
	ld.shared.u32 	%r3787, [%rd14];
$L__BB0_179:                            // %L23389
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1790, %r1787}, {%r549, %r552}, {%r3784}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1799, %r1796}, {%r549, %r552}, {%r3785}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1808, %r1805}, {%r549, %r552}, {%r3786}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1817, %r1814}, {%r549, %r552}, {%r3787}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1783, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1785, %r1783, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r601, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1792, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r1792, %r1796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r601, %r1799, %r1794;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1801, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r1801, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r601, %r1808, %r1803;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1810, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1812, %r1810, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r601, %r1817, %r1812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1819, %r604, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r601, %r1787, %r1819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1826, %r604, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r601, %r1796, %r1826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1833, %r604, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r601, %r1805, %r1833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1840, %r604, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r601, %r1814, %r1840;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1888, %r1891}, {%r645, %r651, %r648, %r654}, {%r1788, %r1822}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1907, %r1910}, {%r645, %r651, %r648, %r654}, {%r1797, %r1829}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1895, %r1899}, {%r645, %r651, %r648, %r654}, {%r1806, %r1836}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1914, %r1918}, {%r645, %r651, %r648, %r654}, {%r1815, %r1843}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1887, %r1888, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r1891, %r1891, %r1887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r1895, %r1895, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r1899, %r1899, %r1894;
	// end inline asm
	mov.u32 	%r1922, 626337109;
	// begin inline asm
	fma.rn.f16x2 %r1902, %r1922, %r1898, %r3783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1906, %r1907, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1909, %r1910, %r1910, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r1914, %r1914, %r1909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1917, %r1918, %r1918, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1921, %r1922, %r1917, %r3782;
	// end inline asm
	mov.u32 	%r3788, %r1669;
	mov.u32 	%r3789, %r1669;
	mov.u32 	%r3790, %r1669;
	mov.u32 	%r3791, %r1669;
	@%p277 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_180;
$L__BB0_261:                            // %pass11257
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3788, [%rd29];
	ld.shared.u32 	%r3789, [%rd30];
	ld.shared.u32 	%r3790, [%rd31];
	ld.shared.u32 	%r3791, [%rd32];
$L__BB0_180:                            // %L24608
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1961, %r1958}, {%r549, %r552}, {%r3788}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1970, %r1967}, {%r549, %r552}, {%r3789}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1979, %r1976}, {%r549, %r552}, {%r3790}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1988, %r1985}, {%r549, %r552}, {%r3791}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1954, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1956, %r1954, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r601, %r1961, %r1956;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1963, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1965, %r1963, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1968, %r601, %r1970, %r1965;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1972, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r1972, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r601, %r1979, %r1974;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1981, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1983, %r1981, %r1985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r601, %r1988, %r1983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r604, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r601, %r1958, %r1990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1997, %r604, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r601, %r1967, %r1997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r604, %r1979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r601, %r1976, %r2004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r604, %r1988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r601, %r1985, %r2011;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2059, %r2062}, {%r645, %r651, %r648, %r654}, {%r1959, %r1993}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2078, %r2081}, {%r645, %r651, %r648, %r654}, {%r1968, %r2000}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2066, %r2070}, {%r645, %r651, %r648, %r654}, {%r1977, %r2007}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2085, %r2089}, {%r645, %r651, %r648, %r654}, {%r1986, %r2014}, {%r1669, %r1669};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2058, %r2059, %r2059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r2062, %r2062, %r2058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2065, %r2066, %r2066, %r2061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2069, %r2070, %r2070, %r2065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3837, %r1922, %r2069, %r1902;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2077, %r2078, %r2078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r2081, %r2081, %r2077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2084, %r2085, %r2085, %r2080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2088, %r2089, %r2089, %r2084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3836, %r1922, %r2088, %r1921;
	// end inline asm
	add.s32 	%r3834, %r3780, 2;
	setp.eq.s32 	%p286, %r3834, 6;
	@%p286 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_184;
$L__BB0_181:                            // %pass11720
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_183;
// %bb.182:                             // %pass11730
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2096, %r3781, 589824;
	add.s32 	%r2097, %r119, %r2096;
	cvt.s64.s32 	%rd270, %r2097;
	add.s64 	%rd271, %rd270, %rd15;
	mul.hi.s64 	%rd272, %rd271, 1024819115206086201;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 25;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p288, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 603979776;
	setp.ne.s64 	%p289, %rd276, %rd271;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd277, -1, 0, %p290;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -603979776;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3837;
	add.s32 	%r2098, %r120, %r2096;
	cvt.s64.s32 	%rd283, %r2098;
	add.s64 	%rd284, %rd283, %rd15;
	mul.hi.s64 	%rd285, %rd284, 1024819115206086201;
	shr.u64 	%rd286, %rd285, 63;
	shr.s64 	%rd287, %rd285, 25;
	add.s64 	%rd288, %rd287, %rd286;
	setp.lt.s64 	%p291, %rd284, 0;
	mul.lo.s64 	%rd289, %rd288, 603979776;
	setp.ne.s64 	%p292, %rd289, %rd284;
	and.pred  	%p293, %p291, %p292;
	selp.s64 	%rd290, -1, 0, %p293;
	add.s64 	%rd291, %rd288, %rd290;
	mul.lo.s64 	%rd292, %rd291, -603979776;
	add.s64 	%rd293, %rd292, %rd284;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3836;
$L__BB0_183:                            // %L25140
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3781, %r3781, 1;
	mov.u32 	%r3834, 0;
	mov.u32 	%r3836, %r3834;
	mov.u32 	%r3837, %r3834;
$L__BB0_184:                            // %pass11896
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2100, 0;
	mov.u32 	%r3792, %r2100;
	mov.u32 	%r3793, %r2100;
	mov.u32 	%r3794, %r2100;
	mov.u32 	%r3795, %r2100;
	@%p91 bra 	$L__BB0_185;
// %bb.262:                             // %pass12032
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3792, [%rd33];
	ld.shared.u32 	%r3793, [%rd34];
	ld.shared.u32 	%r3794, [%rd35];
	ld.shared.u32 	%r3795, [%rd36];
$L__BB0_185:                            // %L26219
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2136, %r2133}, {%r549, %r552}, {%r3792}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2145, %r2142}, {%r549, %r552}, {%r3793}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2154, %r2151}, {%r549, %r552}, {%r3794}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2163, %r2160}, {%r549, %r552}, {%r3795}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2129, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r2129, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2134, %r601, %r2136, %r2131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2138, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r2138, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2143, %r601, %r2145, %r2140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2147, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2149, %r2147, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r601, %r2154, %r2149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2156, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2158, %r2156, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2161, %r601, %r2163, %r2158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r604, %r2136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r601, %r2133, %r2165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r604, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r601, %r2142, %r2172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2179, %r604, %r2154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r601, %r2151, %r2179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2186, %r604, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r601, %r2160, %r2186;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2234, %r2237}, {%r645, %r651, %r648, %r654}, {%r2134, %r2168}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2253, %r2256}, {%r645, %r651, %r648, %r654}, {%r2143, %r2175}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2241, %r2245}, {%r645, %r651, %r648, %r654}, {%r2152, %r2182}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2260, %r2264}, {%r645, %r651, %r648, %r654}, {%r2161, %r2189}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2233, %r2234, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r2237, %r2237, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r2241, %r2241, %r2236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2244, %r2245, %r2245, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r1922, %r2244, %r3837;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2252, %r2253, %r2253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2255, %r2256, %r2256, %r2252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2259, %r2260, %r2260, %r2255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2263, %r2264, %r2264, %r2259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r1922, %r2263, %r3836;
	// end inline asm
	mov.u32 	%r3796, %r2100;
	mov.u32 	%r3797, %r2100;
	mov.u32 	%r3798, %r2100;
	mov.u32 	%r3799, %r2100;
	@%p277 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_186;
$L__BB0_263:                            // %pass12637
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3796, [%rd37];
	ld.shared.u32 	%r3797, [%rd38];
	ld.shared.u32 	%r3798, [%rd39];
	ld.shared.u32 	%r3799, [%rd40];
$L__BB0_186:                            // %L27438
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2307, %r2304}, {%r549, %r552}, {%r3796}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2316, %r2313}, {%r549, %r552}, {%r3797}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2325, %r2322}, {%r549, %r552}, {%r3798}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2334, %r2331}, {%r549, %r552}, {%r3799}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2300, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2302, %r2300, %r2304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2305, %r601, %r2307, %r2302;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2309, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2311, %r2309, %r2313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2314, %r601, %r2316, %r2311;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2318, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2320, %r2318, %r2322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2323, %r601, %r2325, %r2320;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2327, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2329, %r2327, %r2331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2332, %r601, %r2334, %r2329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2336, %r604, %r2307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2339, %r601, %r2304, %r2336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2343, %r604, %r2316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2346, %r601, %r2313, %r2343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2350, %r604, %r2325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2353, %r601, %r2322, %r2350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2357, %r604, %r2334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2360, %r601, %r2331, %r2357;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2405, %r2408}, {%r645, %r651, %r648, %r654}, {%r2305, %r2339}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2424, %r2427}, {%r645, %r651, %r648, %r654}, {%r2314, %r2346}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2412, %r2416}, {%r645, %r651, %r648, %r654}, {%r2323, %r2353}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2431, %r2435}, {%r645, %r651, %r648, %r654}, {%r2332, %r2360}, {%r2100, %r2100};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2404, %r2405, %r2405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2407, %r2408, %r2408, %r2404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2411, %r2412, %r2412, %r2407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2415, %r2416, %r2416, %r2411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3783, %r1922, %r2415, %r2248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2423, %r2424, %r2424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2426, %r2427, %r2427, %r2423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2430, %r2431, %r2431, %r2426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2434, %r2435, %r2435, %r2430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3782, %r1922, %r2434, %r2267;
	// end inline asm
	add.s32 	%r3780, %r3834, 2;
	setp.eq.s32 	%p296, %r3780, 6;
	@%p296 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_189;
$L__BB0_187:                            // %pass13100
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_188;
// %bb.264:                             // %pass13110
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2442, %r3781, 589824;
	add.s32 	%r2443, %r119, %r2442;
	cvt.s64.s32 	%rd296, %r2443;
	add.s64 	%rd297, %rd296, %rd15;
	mul.hi.s64 	%rd298, %rd297, 1024819115206086201;
	shr.u64 	%rd299, %rd298, 63;
	shr.s64 	%rd300, %rd298, 25;
	add.s64 	%rd301, %rd300, %rd299;
	setp.lt.s64 	%p298, %rd297, 0;
	mul.lo.s64 	%rd302, %rd301, 603979776;
	setp.ne.s64 	%p299, %rd302, %rd297;
	and.pred  	%p300, %p298, %p299;
	selp.s64 	%rd303, -1, 0, %p300;
	add.s64 	%rd304, %rd301, %rd303;
	mul.lo.s64 	%rd305, %rd304, -603979776;
	add.s64 	%rd306, %rd305, %rd297;
	shl.b64 	%rd307, %rd306, 2;
	add.s64 	%rd308, %rd4, %rd307;
	st.global.u32 	[%rd308], %r3783;
	add.s32 	%r2444, %r120, %r2442;
	cvt.s64.s32 	%rd309, %r2444;
	add.s64 	%rd310, %rd309, %rd15;
	mul.hi.s64 	%rd311, %rd310, 1024819115206086201;
	shr.u64 	%rd312, %rd311, 63;
	shr.s64 	%rd313, %rd311, 25;
	add.s64 	%rd314, %rd313, %rd312;
	setp.lt.s64 	%p301, %rd310, 0;
	mul.lo.s64 	%rd315, %rd314, 603979776;
	setp.ne.s64 	%p302, %rd315, %rd310;
	and.pred  	%p303, %p301, %p302;
	selp.s64 	%rd316, -1, 0, %p303;
	add.s64 	%rd317, %rd314, %rd316;
	mul.lo.s64 	%rd318, %rd317, -603979776;
	add.s64 	%rd319, %rd318, %rd310;
	shl.b64 	%rd320, %rd319, 2;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r3782;
	bra.uni 	$L__BB0_188;
$L__BB0_190:                            // %L27996.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3804, 12;
	bra.uni 	$L__BB0_191;
$L__BB0_202:                            // %L42034
                                        //   in Loop: Header=BB0_191 Depth=2
	add.s32 	%r3781, %r3781, 1;
	mov.u32 	%r3780, 0;
	mov.u32 	%r3782, %r3780;
	mov.u32 	%r3783, %r3780;
$L__BB0_203:                            // %L42035
                                        //   in Loop: Header=BB0_191 Depth=2
	bar.sync 	0;
	add.s32 	%r3804, %r3804, -4;
	setp.ne.s32 	%p332, %r3804, -12;
	@%p332 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_204;
$L__BB0_191:                            // %L27996
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p306, %r3804, 12;
	selp.b32 	%r2983, %r3755, 0, %p306;
	setp.eq.s32 	%p307, %r3804, 8;
	selp.b32 	%r2984, %r3759, %r2983, %p307;
	setp.eq.s32 	%p308, %r3804, 4;
	selp.b32 	%r2985, %r3763, %r2984, %p308;
	setp.eq.s32 	%p309, %r3804, 0;
	selp.b32 	%r2986, %r3767, %r2985, %p309;
	setp.eq.s32 	%p310, %r3804, -4;
	selp.b32 	%r2987, %r3771, %r2986, %p310;
	setp.eq.s32 	%p311, %r3804, -8;
	selp.b32 	%r2988, %r3775, %r2987, %p311;
	selp.b32 	%r2989, %r3756, 0, %p306;
	selp.b32 	%r2990, %r3760, %r2989, %p307;
	selp.b32 	%r2991, %r3764, %r2990, %p308;
	selp.b32 	%r2992, %r3768, %r2991, %p309;
	selp.b32 	%r2993, %r3772, %r2992, %p310;
	selp.b32 	%r2994, %r3776, %r2993, %p311;
	selp.b32 	%r2995, %r3757, 0, %p306;
	selp.b32 	%r2996, %r3761, %r2995, %p307;
	selp.b32 	%r2997, %r3765, %r2996, %p308;
	selp.b32 	%r2998, %r3769, %r2997, %p309;
	selp.b32 	%r2999, %r3773, %r2998, %p310;
	selp.b32 	%r3000, %r3777, %r2999, %p311;
	selp.b32 	%r3001, %r3758, 0, %p306;
	selp.b32 	%r3002, %r3762, %r3001, %p307;
	selp.b32 	%r3003, %r3766, %r3002, %p308;
	selp.b32 	%r3004, %r3770, %r3003, %p309;
	selp.b32 	%r3005, %r3774, %r3004, %p310;
	selp.b32 	%r3006, %r3778, %r3005, %p311;
	// begin inline asm
	mov.b32 %r2474, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2485, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2473, %r2988, 8;
	// begin inline asm
	lop3.b32 %r2471, %r1339, %r2473, %r2474, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2476, %r2474, %r2475;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2479, %r2471, %r2476;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2482, %r1350, %r2473, %r2485, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2486, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2487, %r2485, %r2486;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2490, %r2482, %r2487;
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2531, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2519, %r2994, 8;
	// begin inline asm
	lop3.b32 %r2517, %r1339, %r2519, %r2520, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2521, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2522, %r2520, %r2521;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2525, %r2517, %r2522;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2528, %r1350, %r2519, %r2531, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2532, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2533, %r2531, %r2532;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2536, %r2528, %r2533;
	// end inline asm
	// begin inline asm
	mov.b32 %r2566, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2577, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2565, %r3000, 8;
	// begin inline asm
	lop3.b32 %r2563, %r1339, %r2565, %r2566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2567, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2568, %r2566, %r2567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2571, %r2563, %r2568;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2574, %r1350, %r2565, %r2577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2578, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2579, %r2577, %r2578;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2582, %r2574, %r2579;
	// end inline asm
	// begin inline asm
	mov.b32 %r2612, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2623, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2611, %r3006, 8;
	// begin inline asm
	lop3.b32 %r2609, %r1339, %r2611, %r2612, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2613, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2614, %r2612, %r2613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2617, %r2609, %r2614;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2620, %r1350, %r2611, %r2623, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2624, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2625, %r2623, %r2624;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2628, %r2620, %r2625;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2490;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2631, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2479;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2634, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2536;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2637, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2525;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2640, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2582;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2643, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2571;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2646, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2628;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2649, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2617;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2652, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2918, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2718, %r2715}, {%r435, %r438}, {%r2631}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2727, %r2724}, {%r435, %r438}, {%r2634}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2736, %r2733}, {%r435, %r438}, {%r2637}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2745, %r2742}, {%r435, %r438}, {%r2640}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2754, %r2751}, {%r435, %r438}, {%r2643}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2763, %r2760}, {%r435, %r438}, {%r2646}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2772, %r2769}, {%r435, %r438}, {%r2649}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2781, %r2778}, {%r435, %r438}, {%r2652}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2711, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r2711, %r2715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r487, %r2718, %r2713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2720, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r2720, %r2724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r487, %r2727, %r2722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2729, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2731, %r2729, %r2733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2734, %r487, %r2736, %r2731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2738, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2740, %r2738, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2743, %r487, %r2745, %r2740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2747, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r2747, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r487, %r2754, %r2749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2756, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2758, %r2756, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2761, %r487, %r2763, %r2758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2765, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2767, %r2765, %r2769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2770, %r487, %r2772, %r2767;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2774, %r490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2776, %r2774, %r2778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2779, %r487, %r2781, %r2776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2783, %r490, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2786, %r487, %r2715, %r2783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2790, %r490, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r487, %r2724, %r2790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2797, %r490, %r2736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r487, %r2733, %r2797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2804, %r490, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r487, %r2742, %r2804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2811, %r490, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2814, %r487, %r2751, %r2811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2818, %r490, %r2763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2821, %r487, %r2760, %r2818;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2825, %r490, %r2772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2828, %r487, %r2769, %r2825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2832, %r490, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2835, %r487, %r2778, %r2832;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2920, %r2921}, {%r531, %r537, %r534, %r540}, {%r2716, %r2786}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2928, %r2929}, {%r531, %r537, %r534, %r540}, {%r2725, %r2793}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2936, %r2937}, {%r531, %r537, %r534, %r540}, {%r2734, %r2800}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2944, %r2945}, {%r531, %r537, %r534, %r540}, {%r2743, %r2807}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2952, %r2953}, {%r531, %r537, %r534, %r540}, {%r2752, %r2814}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2960, %r2961}, {%r531, %r537, %r534, %r540}, {%r2761, %r2821}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2968, %r2969}, {%r531, %r537, %r534, %r540}, {%r2770, %r2828}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2976, %r2977}, {%r531, %r537, %r534, %r540}, {%r2779, %r2835}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2919, %r2920, %r2921, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2923, %r2920, %r2921, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2927, %r2928, %r2929, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2931, %r2928, %r2929, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2935, %r2936, %r2937, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2939, %r2936, %r2937, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2943, %r2944, %r2945, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2947, %r2944, %r2945, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2951, %r2952, %r2953, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2955, %r2952, %r2953, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2959, %r2960, %r2961, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2963, %r2960, %r2961, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2967, %r2968, %r2969, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2971, %r2968, %r2969, %r1036;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2975, %r2976, %r2977, %r1032;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2979, %r2976, %r2977, %r1036;
	// end inline asm
	st.shared.u32 	[%rd7], %r2919;
	st.shared.u32 	[%rd8], %r2923;
	st.shared.u32 	[%rd9], %r2927;
	st.shared.u32 	[%rd10], %r2931;
	st.shared.u32 	[%rd17], %r2935;
	st.shared.u32 	[%rd18], %r2939;
	st.shared.u32 	[%rd19], %r2943;
	st.shared.u32 	[%rd20], %r2947;
	st.shared.u32 	[%rd21], %r2951;
	st.shared.u32 	[%rd22], %r2955;
	st.shared.u32 	[%rd23], %r2959;
	st.shared.u32 	[%rd24], %r2963;
	st.shared.u32 	[%rd25], %r2967;
	st.shared.u32 	[%rd26], %r2971;
	st.shared.u32 	[%rd27], %r2975;
	st.shared.u32 	[%rd28], %r2979;
	@%p277 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_192;
$L__BB0_265:                            // %pass15535
                                        //   in Loop: Header=BB0_191 Depth=2
	st.shared.u32 	[%rd7], %r2919;
	st.shared.u32 	[%rd8], %r2923;
	st.shared.u32 	[%rd9], %r2927;
	st.shared.u32 	[%rd10], %r2931;
	st.shared.u32 	[%rd17], %r2935;
	st.shared.u32 	[%rd18], %r2939;
	st.shared.u32 	[%rd19], %r2943;
	st.shared.u32 	[%rd20], %r2947;
	st.shared.u32 	[%rd21], %r2951;
	st.shared.u32 	[%rd22], %r2955;
	st.shared.u32 	[%rd23], %r2959;
	st.shared.u32 	[%rd24], %r2963;
	st.shared.u32 	[%rd25], %r2967;
	st.shared.u32 	[%rd26], %r2971;
	st.shared.u32 	[%rd27], %r2975;
	st.shared.u32 	[%rd28], %r2979;
$L__BB0_192:                            // %L36378
                                        //   in Loop: Header=BB0_191 Depth=2
	bar.sync 	0;
	mov.u32 	%r3809, %r2918;
	mov.u32 	%r3810, %r2918;
	mov.u32 	%r3811, %r2918;
	mov.u32 	%r3812, %r2918;
	@%p277 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_193;
$L__BB0_266:                            // %pass17630
                                        //   in Loop: Header=BB0_191 Depth=2
	ld.shared.u32 	%r3812, [%rd11];
	ld.shared.u32 	%r3811, [%rd12];
	ld.shared.u32 	%r3810, [%rd13];
	ld.shared.u32 	%r3809, [%rd14];
$L__BB0_193:                            // %L37453
                                        //   in Loop: Header=BB0_191 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3043, %r3040}, {%r549, %r552}, {%r3812}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3052, %r3049}, {%r549, %r552}, {%r3811}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3061, %r3058}, {%r549, %r552}, {%r3810}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3070, %r3067}, {%r549, %r552}, {%r3809}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3036, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3038, %r3036, %r3040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3041, %r601, %r3043, %r3038;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3045, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3047, %r3045, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3050, %r601, %r3052, %r3047;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3054, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r3054, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r601, %r3061, %r3056;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3063, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3065, %r3063, %r3067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r601, %r3070, %r3065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3072, %r604, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r601, %r3040, %r3072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3079, %r604, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3082, %r601, %r3049, %r3079;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3086, %r604, %r3061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r601, %r3058, %r3086;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3093, %r604, %r3070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3096, %r601, %r3067, %r3093;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3141, %r3144}, {%r645, %r651, %r648, %r654}, {%r3041, %r3075}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3160, %r3163}, {%r645, %r651, %r648, %r654}, {%r3050, %r3082}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3148, %r3152}, {%r645, %r651, %r648, %r654}, {%r3059, %r3089}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3167, %r3171}, {%r645, %r651, %r648, %r654}, {%r3068, %r3096}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r3141, %r3141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3144, %r3144, %r3140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r3148, %r3148, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r3152, %r3152, %r3147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r1922, %r3151, %r3783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3159, %r3160, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r3163, %r3163, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3166, %r3167, %r3167, %r3162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3170, %r3171, %r3171, %r3166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3174, %r1922, %r3170, %r3782;
	// end inline asm
	mov.u32 	%r3813, %r2918;
	mov.u32 	%r3814, %r2918;
	mov.u32 	%r3815, %r2918;
	mov.u32 	%r3816, %r2918;
	@%p277 bra 	$L__BB0_267;
	bra.uni 	$L__BB0_194;
$L__BB0_267:                            // %pass18235
                                        //   in Loop: Header=BB0_191 Depth=2
	ld.shared.u32 	%r3816, [%rd29];
	ld.shared.u32 	%r3815, [%rd30];
	ld.shared.u32 	%r3814, [%rd31];
	ld.shared.u32 	%r3813, [%rd32];
$L__BB0_194:                            // %L38672
                                        //   in Loop: Header=BB0_191 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3214, %r3211}, {%r549, %r552}, {%r3816}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3223, %r3220}, {%r549, %r552}, {%r3815}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3232, %r3229}, {%r549, %r552}, {%r3814}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3241, %r3238}, {%r549, %r552}, {%r3813}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3209, %r3207, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r601, %r3214, %r3209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3216, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3218, %r3216, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r601, %r3223, %r3218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3225, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3227, %r3225, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r601, %r3232, %r3227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3234, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3236, %r3234, %r3238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r601, %r3241, %r3236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3243, %r604, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3246, %r601, %r3211, %r3243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3250, %r604, %r3223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3253, %r601, %r3220, %r3250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3257, %r604, %r3232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r601, %r3229, %r3257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3264, %r604, %r3241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3267, %r601, %r3238, %r3264;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3312, %r3315}, {%r645, %r651, %r648, %r654}, {%r3212, %r3246}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3331, %r3334}, {%r645, %r651, %r648, %r654}, {%r3221, %r3253}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3319, %r3323}, {%r645, %r651, %r648, %r654}, {%r3230, %r3260}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3338, %r3342}, {%r645, %r651, %r648, %r654}, {%r3239, %r3267}, {%r2918, %r2918};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r3312, %r3312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r3315, %r3315, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r3319, %r3319, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3322, %r3323, %r3323, %r3318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3841, %r1922, %r3322, %r3155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3330, %r3331, %r3331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3333, %r3334, %r3334, %r3330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3337, %r3338, %r3338, %r3333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3341, %r3342, %r3342, %r3337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3840, %r1922, %r3341, %r3174;
	// end inline asm
	add.s32 	%r3838, %r3780, 2;
	setp.eq.s32 	%p314, %r3838, 6;
	@%p314 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_198;
$L__BB0_195:                            // %pass18698
                                        //   in Loop: Header=BB0_191 Depth=2
	@%p91 bra 	$L__BB0_197;
// %bb.196:                             // %pass18708
                                        //   in Loop: Header=BB0_191 Depth=2
	mul.lo.s32 	%r3349, %r3781, 589824;
	add.s32 	%r3350, %r119, %r3349;
	cvt.s64.s32 	%rd322, %r3350;
	add.s64 	%rd323, %rd322, %rd15;
	mul.hi.s64 	%rd324, %rd323, 1024819115206086201;
	shr.u64 	%rd325, %rd324, 63;
	shr.s64 	%rd326, %rd324, 25;
	add.s64 	%rd327, %rd326, %rd325;
	setp.lt.s64 	%p316, %rd323, 0;
	mul.lo.s64 	%rd328, %rd327, 603979776;
	setp.ne.s64 	%p317, %rd328, %rd323;
	and.pred  	%p318, %p316, %p317;
	selp.s64 	%rd329, -1, 0, %p318;
	add.s64 	%rd330, %rd327, %rd329;
	mul.lo.s64 	%rd331, %rd330, -603979776;
	add.s64 	%rd332, %rd331, %rd323;
	shl.b64 	%rd333, %rd332, 2;
	add.s64 	%rd334, %rd4, %rd333;
	st.global.u32 	[%rd334], %r3841;
	add.s32 	%r3351, %r120, %r3349;
	cvt.s64.s32 	%rd335, %r3351;
	add.s64 	%rd336, %rd335, %rd15;
	mul.hi.s64 	%rd337, %rd336, 1024819115206086201;
	shr.u64 	%rd338, %rd337, 63;
	shr.s64 	%rd339, %rd337, 25;
	add.s64 	%rd340, %rd339, %rd338;
	setp.lt.s64 	%p319, %rd336, 0;
	mul.lo.s64 	%rd341, %rd340, 603979776;
	setp.ne.s64 	%p320, %rd341, %rd336;
	and.pred  	%p321, %p319, %p320;
	selp.s64 	%rd342, -1, 0, %p321;
	add.s64 	%rd343, %rd340, %rd342;
	mul.lo.s64 	%rd344, %rd343, -603979776;
	add.s64 	%rd345, %rd344, %rd336;
	shl.b64 	%rd346, %rd345, 2;
	add.s64 	%rd347, %rd4, %rd346;
	st.global.u32 	[%rd347], %r3840;
$L__BB0_197:                            // %L39204
                                        //   in Loop: Header=BB0_191 Depth=2
	add.s32 	%r3781, %r3781, 1;
	mov.u32 	%r3838, 0;
	mov.u32 	%r3840, %r3838;
	mov.u32 	%r3841, %r3838;
$L__BB0_198:                            // %pass18874
                                        //   in Loop: Header=BB0_191 Depth=2
	mov.u32 	%r3353, 0;
	mov.u32 	%r3817, %r3353;
	mov.u32 	%r3818, %r3353;
	mov.u32 	%r3819, %r3353;
	mov.u32 	%r3820, %r3353;
	@%p91 bra 	$L__BB0_199;
// %bb.268:                             // %pass19010
                                        //   in Loop: Header=BB0_191 Depth=2
	ld.shared.u32 	%r3820, [%rd33];
	ld.shared.u32 	%r3819, [%rd34];
	ld.shared.u32 	%r3818, [%rd35];
	ld.shared.u32 	%r3817, [%rd36];
$L__BB0_199:                            // %L40283
                                        //   in Loop: Header=BB0_191 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3389, %r3386}, {%r549, %r552}, {%r3820}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3398, %r3395}, {%r549, %r552}, {%r3819}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3407, %r3404}, {%r549, %r552}, {%r3818}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3416, %r3413}, {%r549, %r552}, {%r3817}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3382, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3384, %r3382, %r3386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3387, %r601, %r3389, %r3384;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3391, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3393, %r3391, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r601, %r3398, %r3393;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3400, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3402, %r3400, %r3404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3405, %r601, %r3407, %r3402;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3409, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3411, %r3409, %r3413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3414, %r601, %r3416, %r3411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3418, %r604, %r3389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3421, %r601, %r3386, %r3418;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3425, %r604, %r3398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3428, %r601, %r3395, %r3425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3432, %r604, %r3407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3435, %r601, %r3404, %r3432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3439, %r604, %r3416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3442, %r601, %r3413, %r3439;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3487, %r3490}, {%r645, %r651, %r648, %r654}, {%r3387, %r3421}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3506, %r3509}, {%r645, %r651, %r648, %r654}, {%r3396, %r3428}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3494, %r3498}, {%r645, %r651, %r648, %r654}, {%r3405, %r3435}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3513, %r3517}, {%r645, %r651, %r648, %r654}, {%r3414, %r3442}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3486, %r3487, %r3487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r3490, %r3490, %r3486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3493, %r3494, %r3494, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r3498, %r3498, %r3493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r1922, %r3497, %r3841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3505, %r3506, %r3506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r3509, %r3509, %r3505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r3513, %r3513, %r3508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r3517, %r3517, %r3512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3520, %r1922, %r3516, %r3840;
	// end inline asm
	mov.u32 	%r3821, %r3353;
	mov.u32 	%r3822, %r3353;
	mov.u32 	%r3823, %r3353;
	mov.u32 	%r3824, %r3353;
	@%p277 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_200;
$L__BB0_269:                            // %pass19615
                                        //   in Loop: Header=BB0_191 Depth=2
	ld.shared.u32 	%r3824, [%rd37];
	ld.shared.u32 	%r3823, [%rd38];
	ld.shared.u32 	%r3822, [%rd39];
	ld.shared.u32 	%r3821, [%rd40];
$L__BB0_200:                            // %L41502
                                        //   in Loop: Header=BB0_191 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3560, %r3557}, {%r549, %r552}, {%r3824}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3569, %r3566}, {%r549, %r552}, {%r3823}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3578, %r3575}, {%r549, %r552}, {%r3822}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3587, %r3584}, {%r549, %r552}, {%r3821}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3553, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3555, %r3553, %r3557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3558, %r601, %r3560, %r3555;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3562, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r3562, %r3566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r601, %r3569, %r3564;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3571, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3573, %r3571, %r3575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3576, %r601, %r3578, %r3573;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3580, %r604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3582, %r3580, %r3584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3585, %r601, %r3587, %r3582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3589, %r604, %r3560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3592, %r601, %r3557, %r3589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3596, %r604, %r3569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3599, %r601, %r3566, %r3596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3603, %r604, %r3578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3606, %r601, %r3575, %r3603;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3610, %r604, %r3587;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3613, %r601, %r3584, %r3610;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3658, %r3661}, {%r645, %r651, %r648, %r654}, {%r3558, %r3592}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3677, %r3680}, {%r645, %r651, %r648, %r654}, {%r3567, %r3599}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3665, %r3669}, {%r645, %r651, %r648, %r654}, {%r3576, %r3606}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3684, %r3688}, {%r645, %r651, %r648, %r654}, {%r3585, %r3613}, {%r3353, %r3353};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3657, %r3658, %r3658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3660, %r3661, %r3661, %r3657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3664, %r3665, %r3665, %r3660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3668, %r3669, %r3669, %r3664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3783, %r1922, %r3668, %r3501;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3676, %r3677, %r3677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3679, %r3680, %r3680, %r3676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3683, %r3684, %r3684, %r3679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3687, %r3688, %r3688, %r3683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3782, %r1922, %r3687, %r3520;
	// end inline asm
	add.s32 	%r3780, %r3838, 2;
	setp.eq.s32 	%p324, %r3780, 6;
	@%p324 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_203;
$L__BB0_201:                            // %pass20078
                                        //   in Loop: Header=BB0_191 Depth=2
	@%p91 bra 	$L__BB0_202;
// %bb.270:                             // %pass20088
                                        //   in Loop: Header=BB0_191 Depth=2
	mul.lo.s32 	%r3695, %r3781, 589824;
	add.s32 	%r3696, %r119, %r3695;
	cvt.s64.s32 	%rd348, %r3696;
	add.s64 	%rd349, %rd348, %rd15;
	mul.hi.s64 	%rd350, %rd349, 1024819115206086201;
	shr.u64 	%rd351, %rd350, 63;
	shr.s64 	%rd352, %rd350, 25;
	add.s64 	%rd353, %rd352, %rd351;
	setp.lt.s64 	%p326, %rd349, 0;
	mul.lo.s64 	%rd354, %rd353, 603979776;
	setp.ne.s64 	%p327, %rd354, %rd349;
	and.pred  	%p328, %p326, %p327;
	selp.s64 	%rd355, -1, 0, %p328;
	add.s64 	%rd356, %rd353, %rd355;
	mul.lo.s64 	%rd357, %rd356, -603979776;
	add.s64 	%rd358, %rd357, %rd349;
	shl.b64 	%rd359, %rd358, 2;
	add.s64 	%rd360, %rd4, %rd359;
	st.global.u32 	[%rd360], %r3783;
	add.s32 	%r3697, %r120, %r3695;
	cvt.s64.s32 	%rd361, %r3697;
	add.s64 	%rd362, %rd361, %rd15;
	mul.hi.s64 	%rd363, %rd362, 1024819115206086201;
	shr.u64 	%rd364, %rd363, 63;
	shr.s64 	%rd365, %rd363, 25;
	add.s64 	%rd366, %rd365, %rd364;
	setp.lt.s64 	%p329, %rd362, 0;
	mul.lo.s64 	%rd367, %rd366, 603979776;
	setp.ne.s64 	%p330, %rd367, %rd362;
	and.pred  	%p331, %p329, %p330;
	selp.s64 	%rd368, -1, 0, %p331;
	add.s64 	%rd369, %rd366, %rd368;
	mul.lo.s64 	%rd370, %rd369, -603979776;
	add.s64 	%rd371, %rd370, %rd362;
	shl.b64 	%rd372, %rd371, 2;
	add.s64 	%rd373, %rd4, %rd372;
	st.global.u32 	[%rd373], %r3782;
	bra.uni 	$L__BB0_202;
$L__BB0_205:                            // %L42070
	mov.u32 	%r3699, 0;
	st.global.u32 	[%rd6], %r3699;
	ret;
$L__BB0_152:                            // %L7443
	mov.u32 	%r3723, 5;
	st.global.u32 	[%rd6], %r3723;
	mov.u64 	%rd420, exception3916;
	cvta.global.u64 	%rd421, %rd420;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd421;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7599
	mov.u32 	%r3722, 5;
	st.global.u32 	[%rd6], %r3722;
	mov.u64 	%rd418, exception3916;
	cvta.global.u64 	%rd419, %rd418;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd419;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7755
	mov.u32 	%r3721, 5;
	st.global.u32 	[%rd6], %r3721;
	mov.u64 	%rd416, exception3916;
	cvta.global.u64 	%rd417, %rd416;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd417;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7911
	mov.u32 	%r3720, 5;
	st.global.u32 	[%rd6], %r3720;
	mov.u64 	%rd414, exception3916;
	cvta.global.u64 	%rd415, %rd414;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd415;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8067
	mov.u32 	%r3719, 5;
	st.global.u32 	[%rd6], %r3719;
	mov.u64 	%rd412, exception3916;
	cvta.global.u64 	%rd413, %rd412;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd413;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8223
	mov.u32 	%r3718, 5;
	st.global.u32 	[%rd6], %r3718;
	mov.u64 	%rd410, exception3916;
	cvta.global.u64 	%rd411, %rd410;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd411;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8379
	mov.u32 	%r3717, 5;
	st.global.u32 	[%rd6], %r3717;
	mov.u64 	%rd408, exception3916;
	cvta.global.u64 	%rd409, %rd408;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd409;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8535
	mov.u32 	%r3716, 5;
	st.global.u32 	[%rd6], %r3716;
	mov.u64 	%rd406, exception3916;
	cvta.global.u64 	%rd407, %rd406;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd407;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8691
	mov.u32 	%r3715, 5;
	st.global.u32 	[%rd6], %r3715;
	mov.u64 	%rd404, exception3916;
	cvta.global.u64 	%rd405, %rd404;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd405;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8847
	mov.u32 	%r3714, 5;
	st.global.u32 	[%rd6], %r3714;
	mov.u64 	%rd402, exception3916;
	cvta.global.u64 	%rd403, %rd402;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd403;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9003
	mov.u32 	%r3713, 5;
	st.global.u32 	[%rd6], %r3713;
	mov.u64 	%rd400, exception3916;
	cvta.global.u64 	%rd401, %rd400;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd401;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9159
	mov.u32 	%r3712, 5;
	st.global.u32 	[%rd6], %r3712;
	mov.u64 	%rd398, exception3916;
	cvta.global.u64 	%rd399, %rd398;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd399;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9315
	mov.u32 	%r3711, 5;
	st.global.u32 	[%rd6], %r3711;
	mov.u64 	%rd396, exception3916;
	cvta.global.u64 	%rd397, %rd396;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd397;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9471
	mov.u32 	%r3710, 5;
	st.global.u32 	[%rd6], %r3710;
	mov.u64 	%rd394, exception3916;
	cvta.global.u64 	%rd395, %rd394;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd395;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9627
	mov.u32 	%r3709, 5;
	st.global.u32 	[%rd6], %r3709;
	mov.u64 	%rd392, exception3916;
	cvta.global.u64 	%rd393, %rd392;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd393;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9783
	mov.u32 	%r3708, 5;
	st.global.u32 	[%rd6], %r3708;
	mov.u64 	%rd390, exception3916;
	cvta.global.u64 	%rd391, %rd390;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd391;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L9939
	mov.u32 	%r3707, 5;
	st.global.u32 	[%rd6], %r3707;
	mov.u64 	%rd388, exception3916;
	cvta.global.u64 	%rd389, %rd388;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd389;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10095
	mov.u32 	%r3706, 5;
	st.global.u32 	[%rd6], %r3706;
	mov.u64 	%rd386, exception3916;
	cvta.global.u64 	%rd387, %rd386;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd387;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10251
	mov.u32 	%r3705, 5;
	st.global.u32 	[%rd6], %r3705;
	mov.u64 	%rd384, exception3916;
	cvta.global.u64 	%rd385, %rd384;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd385;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10407
	mov.u32 	%r3704, 5;
	st.global.u32 	[%rd6], %r3704;
	mov.u64 	%rd382, exception3916;
	cvta.global.u64 	%rd383, %rd382;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd383;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10563
	mov.u32 	%r3703, 5;
	st.global.u32 	[%rd6], %r3703;
	mov.u64 	%rd380, exception3916;
	cvta.global.u64 	%rd381, %rd380;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd381;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10745
	mov.u32 	%r3702, 5;
	st.global.u32 	[%rd6], %r3702;
	mov.u64 	%rd378, exception3916;
	cvta.global.u64 	%rd379, %rd378;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd379;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L10901
	mov.u32 	%r3701, 5;
	st.global.u32 	[%rd6], %r3701;
	mov.u64 	%rd376, exception3916;
	cvta.global.u64 	%rd377, %rd376;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd377;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11057
	mov.u32 	%r3700, 5;
	st.global.u32 	[%rd6], %r3700;
	mov.u64 	%rd374, exception3916;
	cvta.global.u64 	%rd375, %rd374;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd375;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3725, 2;
	st.global.u32 	[%rd6], %r3725;
	mov.u64 	%rd424, exception3916;
	cvta.global.u64 	%rd425, %rd424;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd425;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3724, 3;
	st.global.u32 	[%rd6], %r3724;
	mov.u64 	%rd422, exception3916;
	cvta.global.u64 	%rd423, %rd422;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd423;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd47, exception1;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1143
	add.u64 	%rd46, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd52, __unnamed_1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r665, [retval0+0];
	} // callseq 61
	mov.u32 	%r667, 4;
	st.global.u32 	[%rd6], %r667;
	mov.u64 	%rd55, exception3916;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r404;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
