// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2191[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<313>;
	.reg .b16 	%rs<238>;
	.reg .b32 	%r<3727>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<342>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r360, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r369, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r369, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r361, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r370, %r1, 768, %r3;
	or.b32  	%r371, %r370, %r4;
	mul.wide.u32 	%rd33, %r371, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r372, 1;
	st.global.u32 	[%rd6], %r372;
	setp.gt.u32 	%p4, %r361, 32767;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r362, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r362, %r361;
	setp.gt.s32 	%p6, %r362, 65535;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r363, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r362, %r361;
	mad.lo.s32 	%r373, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r374, %r373, %r373, 4;
	setp.gt.u32 	%p8, %r374, 89478484;
	setp.gt.u32 	%p9, %r363, 511;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r364, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r364, %r363;
	setp.lt.s32 	%p12, %r364, 1024;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r375, %r364, %r363;
	shr.s32 	%r376, %r5, 31;
	shr.u32 	%r377, %r376, 24;
	add.s32 	%r378, %r5, %r377;
	shr.s32 	%r379, %r378, 8;
	setp.eq.s32 	%p14, %r375, %r379;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r365, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r365, 0;
	@%p15 bra 	$L__BB0_12;
// %bb.9:                               // %L264
	ld.param.u32 	%r367, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r366, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r366, %r365;
	setp.gt.s32 	%p17, %r366, 48;
	or.pred  	%p18, %p16, %p17;
	setp.lt.s32 	%p19, %r367, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_12;
// %bb.10:                              // %L280
	ld.param.u32 	%r368, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r368, %r367;
	setp.gt.s32 	%p22, %r368, 512;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_12;
// %bb.11:                              // %L290
	sub.s32 	%r380, %r368, %r367;
	sub.s32 	%r381, %r366, %r365;
	setp.eq.s32 	%p24, %r380, %r381;
	@%p24 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_12;
$L__BB0_195:                            // %pass162
	and.b32  	%r223, %r4, 3;
	shr.u32 	%r224, %r4, 2;
	mul.lo.s32 	%r382, %r223, %r224;
	and.b32  	%r383, %r382, 7;
	cvt.rn.f32.s32 	%f201, %r383;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p25, %f785, 0f40000000;
	setp.gtu.f32 	%p312, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p25 bra 	$L__BB0_207;
// %bb.196:
	@%p312 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_197;
$L__BB0_203:
	mov.b32 	%r226, %f785;
	and.b32  	%r384, %r226, 8388607;
	or.b32  	%r3722, %r384, 1065353216;
	mov.b32 	%f780, %r3722;
	add.s32 	%r385, %r226, -1073741824;
	and.b32  	%r3723, %r385, -8388608;
	setp.eq.s32 	%p32, %r3723, 0;
	@%p32 bra 	$L__BB0_206;
// %bb.204:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_205:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r386, %r3723, 192937984;
	add.s32 	%r387, %r3722, %r386;
	mov.b32 	%f213, %r387;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3723, %r3723, %r386;
	mov.b32 	%r3722, %f780;
	setp.ne.s32 	%p33, %r3723, 0;
	setp.ne.s32 	%p34, %r3722, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_205;
$L__BB0_206:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p36, %r226, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_207;
$L__BB0_197:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r225, %f172;
	setp.lt.u32 	%p27, %r225, 1073741824;
	@%p27 bra 	$L__BB0_202;
// %bb.198:
	setp.lt.u32 	%p28, %r225, -2147483647;
	@%p28 bra 	$L__BB0_200;
// %bb.199:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p31, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p31;
	bra.uni 	$L__BB0_202;
$L__BB0_200:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p29, %f172, 0f40800000;
	@%p29 bra 	$L__BB0_202;
// %bb.201:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p30, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p30;
$L__BB0_202:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_207:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p37, %f222, 0f7F800000;
	mov.b32 	%r388, %f169;
	and.b32  	%r233, %r388, -2147483648;
	@%p37 bra 	$L__BB0_209;
// %bb.208:
	mov.b32 	%r389, %f781;
	or.b32  	%r390, %r233, %r389;
	mov.b32 	%f781, %r390;
$L__BB0_209:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r236, %r4, 1;
	and.b32  	%r237, %r236, 6;
	or.b32  	%r238, %r237, 1;
	setp.eq.s32 	%p45, %r237, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3619, %r237, %r224;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p45 bra 	$L__BB0_28;
// %bb.13:                              // %L493
	cvt.u16.u32 	%rs1, %r3619;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p46, %f733, 0f40000000;
	@%p46 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p47, %f733, 0f4B800000;
	@%p47 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r7, %f733;
	and.b32  	%r406, %r7, 8388607;
	or.b32  	%r3623, %r406, 1065353216;
	mov.b32 	%f732, %r3623;
	add.s32 	%r407, %r7, -1073741824;
	and.b32  	%r3624, %r407, -8388608;
	setp.eq.s32 	%p53, %r3624, 0;
	@%p53 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i988.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r408, %r3624, 192937984;
	add.s32 	%r409, %r3623, %r408;
	mov.b32 	%f267, %r409;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3624, %r3624, %r408;
	mov.b32 	%r3623, %f732;
	setp.ne.s32 	%p54, %r3624, 0;
	setp.ne.s32 	%p55, %r3623, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i990
	setp.gt.u32 	%p57, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i967
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p48, %r6, 1073741824;
	@%p48 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p49, %r6, -2147483647;
	@%p49 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p52, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p52;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p50, %f4, 0f40800000;
	@%p50 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i971
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p51, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p51;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i974
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i993
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p58, %f276, 0f7F800000;
	@%p58 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r410, %f1;
	and.b32  	%r411, %r410, -2147483648;
	mov.b32 	%r412, %f733;
	or.b32  	%r413, %r411, %r412;
	mov.b32 	%f733, %r413;
$L__BB0_27:                             // %__nv_fmodf.exit994
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r414, %f277;
	and.b32  	%r415, %r414, -2147483648;
	or.b32  	%r416, %r415, 1056964608;
	mov.b32 	%f278, %r416;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p59, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p59;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p60, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p60;
	cvt.rzi.s32.f32 	%r417, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r418, %r417, 1;
	setp.eq.b32 	%p61, %r418, 1;
	selp.f32 	%f296, %f294, %f295, %p61;
	selp.f32 	%f297, %f295, %f294, %p61;
	and.b32  	%r419, %r417, 2;
	setp.eq.s32 	%p62, %r419, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p62;
	add.s32 	%r420, %r417, 1;
	and.b32  	%r421, %r420, 2;
	setp.eq.s32 	%p63, %r421, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p63;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p64, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p64;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p65, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p65;
$L__BB0_28:                             // %L527
	setp.gt.u32 	%p66, %r238, 5;
	mul.lo.s32 	%r3620, %r238, %r224;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p66 bra 	$L__BB0_44;
// %bb.29:                              // %L531
	mul.hi.u32 	%r423, %r3620, -1431655765;
	shr.u32 	%r424, %r423, 5;
	mul.lo.s32 	%r425, %r424, 48;
	sub.s32 	%r426, %r3620, %r425;
	cvt.rn.f32.s32 	%f308, %r426;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p67, %f739, 0f40000000;
	@%p67 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p68, %f739, 0f4B800000;
	@%p68 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r15, %f739;
	and.b32  	%r427, %r15, 8388607;
	or.b32  	%r3625, %r427, 1065353216;
	mov.b32 	%f738, %r3625;
	add.s32 	%r428, %r15, -1073741824;
	and.b32  	%r3626, %r428, -8388608;
	setp.eq.s32 	%p74, %r3626, 0;
	@%p74 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1019.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r429, %r3626, 192937984;
	add.s32 	%r430, %r3625, %r429;
	mov.b32 	%f320, %r430;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3626, %r3626, %r429;
	mov.b32 	%r3625, %f738;
	setp.ne.s32 	%p75, %r3626, 0;
	setp.ne.s32 	%p76, %r3625, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1021
	setp.gt.u32 	%p78, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i998
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p69, %r14, 1073741824;
	@%p69 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p70, %r14, -2147483647;
	@%p70 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p73, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p73;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p71, %f25, 0f40800000;
	@%p71 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i1002
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p72, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p72;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1005
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1024
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p79, %f329, 0f7F800000;
	@%p79 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r431, %f22;
	and.b32  	%r432, %r431, -2147483648;
	mov.b32 	%r433, %f739;
	or.b32  	%r434, %r432, %r433;
	mov.b32 	%f739, %r434;
$L__BB0_43:                             // %__nv_fmodf.exit1025
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r435, %f330;
	and.b32  	%r436, %r435, -2147483648;
	or.b32  	%r437, %r436, 1056964608;
	mov.b32 	%f331, %r437;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p80, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p80;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p81, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p81;
	cvt.rzi.s32.f32 	%r438, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r439, %r438, 1;
	setp.eq.b32 	%p82, %r439, 1;
	selp.f32 	%f349, %f347, %f348, %p82;
	selp.f32 	%f350, %f348, %f347, %p82;
	and.b32  	%r440, %r438, 2;
	setp.eq.s32 	%p83, %r440, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p83;
	add.s32 	%r441, %r438, 1;
	and.b32  	%r442, %r441, 2;
	setp.eq.s32 	%p84, %r442, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p84;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p85, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p85;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p86, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p86;
$L__BB0_44:                             // %L565
	setp.gt.u32 	%p88, %r4, 23;
	or.pred  	%p1, %p45, %p88;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L603
	cvt.u16.u32 	%rs8, %r3619;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p89, %f745, 0f40000000;
	@%p89 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p90, %f745, 0f4B800000;
	@%p90 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r25, %f745;
	and.b32  	%r450, %r25, 8388607;
	or.b32  	%r3627, %r450, 1065353216;
	mov.b32 	%f744, %r3627;
	add.s32 	%r451, %r25, -1073741824;
	and.b32  	%r3628, %r451, -8388608;
	setp.eq.s32 	%p96, %r3628, 0;
	@%p96 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1050.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r452, %r3628, 192937984;
	add.s32 	%r453, %r3627, %r452;
	mov.b32 	%f373, %r453;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3628, %r3628, %r452;
	mov.b32 	%r3627, %f744;
	setp.ne.s32 	%p97, %r3628, 0;
	setp.ne.s32 	%p98, %r3627, 0;
	and.pred  	%p99, %p97, %p98;
	@%p99 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1052
	setp.gt.u32 	%p100, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p100;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1029
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p91, %r24, 1073741824;
	@%p91 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p92, %r24, -2147483647;
	@%p92 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p95, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p95;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p93, %f46, 0f40800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1033
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p94, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p94;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1036
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1055
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p101, %f382, 0f7F800000;
	@%p101 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r454, %f43;
	and.b32  	%r455, %r454, -2147483648;
	mov.b32 	%r456, %f745;
	or.b32  	%r457, %r455, %r456;
	mov.b32 	%f745, %r457;
$L__BB0_59:                             // %__nv_fmodf.exit1056
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r458, %f383;
	and.b32  	%r459, %r458, -2147483648;
	or.b32  	%r460, %r459, 1056964608;
	mov.b32 	%f384, %r460;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p102, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p102;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p103, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p103;
	cvt.rzi.s32.f32 	%r461, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r462, %r461, 1;
	setp.eq.b32 	%p104, %r462, 1;
	selp.f32 	%f402, %f400, %f401, %p104;
	selp.f32 	%f403, %f401, %f400, %p104;
	and.b32  	%r463, %r461, 2;
	setp.eq.s32 	%p105, %r463, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p105;
	add.s32 	%r464, %r461, 1;
	and.b32  	%r465, %r464, 2;
	setp.eq.s32 	%p106, %r465, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p106;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p107, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p107;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p108, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p108;
$L__BB0_60:                             // %L637
	or.pred  	%p2, %p66, %p88;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L645
	mul.hi.u32 	%r467, %r3620, -1431655765;
	shr.u32 	%r468, %r467, 2;
	mul.lo.s32 	%r469, %r468, 6;
	sub.s32 	%r470, %r3620, %r469;
	cvt.rn.f32.s32 	%f414, %r470;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p111, %f751, 0f40000000;
	@%p111 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p112, %f751, 0f4B800000;
	@%p112 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r33, %f751;
	and.b32  	%r471, %r33, 8388607;
	or.b32  	%r3629, %r471, 1065353216;
	mov.b32 	%f750, %r3629;
	add.s32 	%r472, %r33, -1073741824;
	and.b32  	%r3630, %r472, -8388608;
	setp.eq.s32 	%p118, %r3630, 0;
	@%p118 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1081.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r473, %r3630, 192937984;
	add.s32 	%r474, %r3629, %r473;
	mov.b32 	%f426, %r474;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3630, %r3630, %r473;
	mov.b32 	%r3629, %f750;
	setp.ne.s32 	%p119, %r3630, 0;
	setp.ne.s32 	%p120, %r3629, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1083
	setp.gt.u32 	%p122, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1060
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p113, %r32, 1073741824;
	@%p113 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p114, %r32, -2147483647;
	@%p114 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p117, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p117;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p115, %f67, 0f40800000;
	@%p115 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1064
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p116, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p116;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1067
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1086
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p123, %f435, 0f7F800000;
	@%p123 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r475, %f64;
	and.b32  	%r476, %r475, -2147483648;
	mov.b32 	%r477, %f751;
	or.b32  	%r478, %r476, %r477;
	mov.b32 	%f751, %r478;
$L__BB0_75:                             // %__nv_fmodf.exit1087
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r479, %f436;
	and.b32  	%r480, %r479, -2147483648;
	or.b32  	%r481, %r480, 1056964608;
	mov.b32 	%f437, %r481;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p124, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p124;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p125, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p125;
	cvt.rzi.s32.f32 	%r482, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r483, %r482, 1;
	setp.eq.b32 	%p126, %r483, 1;
	selp.f32 	%f455, %f453, %f454, %p126;
	selp.f32 	%f456, %f454, %f453, %p126;
	and.b32  	%r484, %r482, 2;
	setp.eq.s32 	%p127, %r484, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p127;
	add.s32 	%r485, %r482, 1;
	and.b32  	%r486, %r485, 2;
	setp.eq.s32 	%p128, %r486, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p128;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p129, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p129;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p130, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p130;
$L__BB0_76:                             // %L679
	@%p25 bra 	$L__BB0_217;
// %bb.77:
	@%p312 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_78;
$L__BB0_213:
	mov.b32 	%r240, %f785;
	and.b32  	%r499, %r240, 8388607;
	or.b32  	%r3724, %r499, 1065353216;
	mov.b32 	%f784, %r3724;
	add.s32 	%r500, %r240, -1073741824;
	and.b32  	%r3725, %r500, -8388608;
	setp.eq.s32 	%p138, %r3725, 0;
	@%p138 bra 	$L__BB0_216;
// %bb.214:                             // %__nv_fmaf_rn.exit4.i.i.i1112.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_215:                            // %__nv_fmaf_rn.exit4.i.i.i1112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r501, %r3725, 192937984;
	add.s32 	%r502, %r3724, %r501;
	mov.b32 	%f476, %r502;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3725, %r3725, %r501;
	mov.b32 	%r3724, %f784;
	setp.ne.s32 	%p139, %r3725, 0;
	setp.ne.s32 	%p140, %r3724, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_215;
$L__BB0_216:                            // %__internal_fmodf_slowpath_mod.exit.i.i1114
	setp.gt.u32 	%p142, %r240, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_217;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1091
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r239, %f187;
	setp.lt.u32 	%p133, %r239, 1073741824;
	@%p133 bra 	$L__BB0_212;
// %bb.79:
	setp.lt.u32 	%p134, %r239, -2147483647;
	@%p134 bra 	$L__BB0_210;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p137, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p137;
	bra.uni 	$L__BB0_212;
$L__BB0_210:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p135, %f187, 0f40800000;
	@%p135 bra 	$L__BB0_212;
// %bb.211:                             // %__nv_fmaf_rn.exit.i.i.i1095
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p136, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p136;
$L__BB0_212:                            // %__internal_fmodf_fastpath_quot.exit.i.i1098
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_217:                            // %__internal_fmodf_kernel.exit.i1117
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p143, %f485, 0f7F800000;
	@%p143 bra 	$L__BB0_219;
// %bb.218:
	mov.b32 	%r503, %f785;
	or.b32  	%r504, %r233, %r503;
	mov.b32 	%f785, %r504;
$L__BB0_219:                            // %__nv_fmodf.exit1118
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p45 bra 	$L__BB0_96;
// %bb.81:                              // %L781
	cvt.u16.u32 	%rs15, %r3619;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p152, %f757, 0f40000000;
	@%p152 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p153, %f757, 0f4B800000;
	@%p153 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r45, %f757;
	and.b32  	%r520, %r45, 8388607;
	or.b32  	%r3631, %r520, 1065353216;
	mov.b32 	%f756, %r3631;
	add.s32 	%r521, %r45, -1073741824;
	and.b32  	%r3632, %r521, -8388608;
	setp.eq.s32 	%p159, %r3632, 0;
	@%p159 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1143.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r522, %r3632, 192937984;
	add.s32 	%r523, %r3631, %r522;
	mov.b32 	%f530, %r523;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3632, %r3632, %r522;
	mov.b32 	%r3631, %f756;
	setp.ne.s32 	%p160, %r3632, 0;
	setp.ne.s32 	%p161, %r3631, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1145
	setp.gt.u32 	%p163, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1122
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p154, %r44, 1073741824;
	@%p154 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p155, %r44, -2147483647;
	@%p155 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p158;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1126
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p157;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1148
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p164, %f539, 0f7F800000;
	@%p164 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r524, %f85;
	and.b32  	%r525, %r524, -2147483648;
	mov.b32 	%r526, %f757;
	or.b32  	%r527, %r525, %r526;
	mov.b32 	%f757, %r527;
$L__BB0_95:                             // %__nv_fmodf.exit1149
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r528, %f540;
	and.b32  	%r529, %r528, -2147483648;
	or.b32  	%r530, %r529, 1056964608;
	mov.b32 	%f541, %r530;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p165, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p165;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p166, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p166;
	cvt.rzi.s32.f32 	%r531, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r532, %r531, 1;
	setp.eq.b32 	%p167, %r532, 1;
	selp.f32 	%f559, %f557, %f558, %p167;
	selp.f32 	%f560, %f558, %f557, %p167;
	and.b32  	%r533, %r531, 2;
	setp.eq.s32 	%p168, %r533, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p168;
	add.s32 	%r534, %r531, 1;
	and.b32  	%r535, %r534, 2;
	setp.eq.s32 	%p169, %r535, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p169;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p170, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p170;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p171, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p171;
$L__BB0_96:                             // %L815
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p66 bra 	$L__BB0_112;
// %bb.97:                              // %L819
	mul.hi.u32 	%r537, %r3620, -1431655765;
	shr.u32 	%r538, %r537, 5;
	mul.lo.s32 	%r539, %r538, 48;
	sub.s32 	%r540, %r3620, %r539;
	cvt.rn.f32.s32 	%f571, %r540;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p173, %f763, 0f40000000;
	@%p173 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p174, %f763, 0f4B800000;
	@%p174 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r53, %f763;
	and.b32  	%r541, %r53, 8388607;
	or.b32  	%r3633, %r541, 1065353216;
	mov.b32 	%f762, %r3633;
	add.s32 	%r542, %r53, -1073741824;
	and.b32  	%r3634, %r542, -8388608;
	setp.eq.s32 	%p180, %r3634, 0;
	@%p180 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1174.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r543, %r3634, 192937984;
	add.s32 	%r544, %r3633, %r543;
	mov.b32 	%f583, %r544;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3634, %r3634, %r543;
	mov.b32 	%r3633, %f762;
	setp.ne.s32 	%p181, %r3634, 0;
	setp.ne.s32 	%p182, %r3633, 0;
	and.pred  	%p183, %p181, %p182;
	@%p183 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1176
	setp.gt.u32 	%p184, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p184;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1153
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p175, %r52, 1073741824;
	@%p175 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p176, %r52, -2147483647;
	@%p176 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p179, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p179;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p177, %f109, 0f40800000;
	@%p177 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1157
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p178, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p178;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1160
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1179
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p185, %f592, 0f7F800000;
	@%p185 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r545, %f106;
	and.b32  	%r546, %r545, -2147483648;
	mov.b32 	%r547, %f763;
	or.b32  	%r548, %r546, %r547;
	mov.b32 	%f763, %r548;
$L__BB0_111:                            // %__nv_fmodf.exit1180
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r549, %f593;
	and.b32  	%r550, %r549, -2147483648;
	or.b32  	%r551, %r550, 1056964608;
	mov.b32 	%f594, %r551;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p186, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p186;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p187, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p187;
	cvt.rzi.s32.f32 	%r552, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r553, %r552, 1;
	setp.eq.b32 	%p188, %r553, 1;
	selp.f32 	%f612, %f610, %f611, %p188;
	selp.f32 	%f613, %f611, %f610, %p188;
	and.b32  	%r554, %r552, 2;
	setp.eq.s32 	%p189, %r554, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p189;
	add.s32 	%r555, %r552, 1;
	and.b32  	%r556, %r555, 2;
	setp.eq.s32 	%p190, %r556, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p190;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p191, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p191;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p192, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p192;
$L__BB0_112:                            // %L853
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L891
	cvt.u16.u32 	%rs22, %r3619;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p193, %f769, 0f40000000;
	@%p193 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p194, %f769, 0f4B800000;
	@%p194 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r63, %f769;
	and.b32  	%r564, %r63, 8388607;
	or.b32  	%r3635, %r564, 1065353216;
	mov.b32 	%f768, %r3635;
	add.s32 	%r565, %r63, -1073741824;
	and.b32  	%r3636, %r565, -8388608;
	setp.eq.s32 	%p200, %r3636, 0;
	@%p200 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1205.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r566, %r3636, 192937984;
	add.s32 	%r567, %r3635, %r566;
	mov.b32 	%f636, %r567;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3636, %r3636, %r566;
	mov.b32 	%r3635, %f768;
	setp.ne.s32 	%p201, %r3636, 0;
	setp.ne.s32 	%p202, %r3635, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1207
	setp.gt.u32 	%p204, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1184
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p195, %r62, 1073741824;
	@%p195 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p196, %r62, -2147483647;
	@%p196 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p199, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p199;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p197, %f130, 0f40800000;
	@%p197 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1188
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p198, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p198;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1191
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1210
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p205, %f645, 0f7F800000;
	@%p205 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r568, %f127;
	and.b32  	%r569, %r568, -2147483648;
	mov.b32 	%r570, %f769;
	or.b32  	%r571, %r569, %r570;
	mov.b32 	%f769, %r571;
$L__BB0_127:                            // %__nv_fmodf.exit1211
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r572, %f646;
	and.b32  	%r573, %r572, -2147483648;
	or.b32  	%r574, %r573, 1056964608;
	mov.b32 	%f647, %r574;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p206, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p206;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p207, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p207;
	cvt.rzi.s32.f32 	%r575, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r576, %r575, 1;
	setp.eq.b32 	%p208, %r576, 1;
	selp.f32 	%f665, %f663, %f664, %p208;
	selp.f32 	%f666, %f664, %f663, %p208;
	and.b32  	%r577, %r575, 2;
	setp.eq.s32 	%p209, %r577, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p209;
	add.s32 	%r578, %r575, 1;
	and.b32  	%r579, %r578, 2;
	setp.eq.s32 	%p210, %r579, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p210;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p211, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p211;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p212, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p212;
$L__BB0_128:                            // %L925
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L933
	mul.hi.u32 	%r581, %r3620, -1431655765;
	shr.u32 	%r582, %r581, 2;
	mul.lo.s32 	%r583, %r582, 6;
	sub.s32 	%r584, %r3620, %r583;
	cvt.rn.f32.s32 	%f677, %r584;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p213, %f775, 0f40000000;
	@%p213 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p214, %f775, 0f4B800000;
	@%p214 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r71, %f775;
	and.b32  	%r585, %r71, 8388607;
	or.b32  	%r3637, %r585, 1065353216;
	mov.b32 	%f774, %r3637;
	add.s32 	%r586, %r71, -1073741824;
	and.b32  	%r3638, %r586, -8388608;
	setp.eq.s32 	%p220, %r3638, 0;
	@%p220 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1236.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r587, %r3638, 192937984;
	add.s32 	%r588, %r3637, %r587;
	mov.b32 	%f689, %r588;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3638, %r3638, %r587;
	mov.b32 	%r3637, %f774;
	setp.ne.s32 	%p221, %r3638, 0;
	setp.ne.s32 	%p222, %r3637, 0;
	and.pred  	%p223, %p221, %p222;
	@%p223 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1238
	setp.gt.u32 	%p224, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p224;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1215
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p215, %r70, 1073741824;
	@%p215 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p216, %r70, -2147483647;
	@%p216 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p219, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p219;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p217, %f151, 0f40800000;
	@%p217 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1219
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p218, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p218;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1222
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1241
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p225, %f698, 0f7F800000;
	@%p225 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r589, %f148;
	and.b32  	%r590, %r589, -2147483648;
	mov.b32 	%r591, %f775;
	or.b32  	%r592, %r590, %r591;
	mov.b32 	%f775, %r592;
$L__BB0_143:                            // %__nv_fmodf.exit1242
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r593, %f699;
	and.b32  	%r594, %r593, -2147483648;
	or.b32  	%r595, %r594, 1056964608;
	mov.b32 	%f700, %r595;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p226, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p226;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p227, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p227;
	cvt.rzi.s32.f32 	%r596, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r597, %r596, 1;
	setp.eq.b32 	%p228, %r597, 1;
	selp.f32 	%f718, %f716, %f717, %p228;
	selp.f32 	%f719, %f717, %f716, %p228;
	and.b32  	%r598, %r596, 2;
	setp.eq.s32 	%p229, %r598, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p229;
	add.s32 	%r599, %r596, 1;
	and.b32  	%r600, %r599, 2;
	setp.eq.s32 	%p230, %r600, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p230;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p231, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p231;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p232, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p232;
$L__BB0_144:                            // %L967
	mov.u32 	%r249, 999999999;
	cvt.u16.u32 	%rs236, %r4;
	@%p88 bra 	$L__BB0_221;
// %bb.145:                             // %L1003
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs236, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs236, %rs33;
	cvt.u32.u16 	%r614, %rs34;
	and.b32  	%r615, %r614, 255;
	mad.lo.s32 	%r616, %r615, 24, %r2;
	cvt.u16.u32 	%rs35, %r616;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r617, %rs39;
	mul.wide.u32 	%rd34, %r617, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r618, [%rd35];
	shl.b32 	%r619, %r618, 16;
	cvt.s32.s16 	%r82, %r618;
	shr.s32 	%r83, %r618, 16;
	or.b32  	%r620, %r619, 65535;
	setp.lt.u32 	%p234, %r620, 1638399;
	setp.lt.u32 	%p235, %r618, 1572864;
	and.pred  	%p236, %p234, %p235;
	@%p236 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_146;
$L__BB0_220:                            // %L1245
	mul.lo.s32 	%r624, %r83, 801;
	mad.lo.s32 	%r249, %r82, 33, %r624;
$L__BB0_221:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r397, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r398, %r397, -2147483648;
	mov.b32 	%r511, %f487;
	or.b32  	%r399, %r398, 1056964608;
	and.b32  	%r512, %r511, -2147483648;
	mov.b32 	%f225, %r399;
	or.b32  	%r513, %r512, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r513;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p38, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p38;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p39, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p145, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p39;
	selp.f32 	%f492, %f487, %f490, %p145;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p146, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p146;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r400, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r401, %r400, 1;
	cvt.rzi.s32.f32 	%r514, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p40, %r401, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r515, %r514, 1;
	selp.f32 	%f243, %f241, %f242, %p40;
	and.b32  	%r402, %r400, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p147, %r515, 1;
	setp.eq.s32 	%p41, %r402, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r403, %r400, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p147;
	and.b32  	%r516, %r514, 2;
	selp.f32 	%f244, %f242, %f241, %p40;
	selp.f32 	%f246, %f243, %f245, %p41;
	and.b32  	%r404, %r403, 2;
	setp.eq.f32 	%p43, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p148, %r516, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r517, %r514, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p42, %r404, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p43;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p147;
	selp.f32 	%f509, %f506, %f508, %p148;
	and.b32  	%r518, %r517, 2;
	setp.eq.f32 	%p150, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p42;
	setp.gt.f32 	%p44, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p149, %r518, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p150;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p44;
	selp.f32 	%f511, %f507, %f510, %p149;
	setp.gt.f32 	%p151, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r393, %f254;
	mov.b32 	%r396, %f251;
	selp.f32 	%f517, %f516, %f511, %p151;
	xor.b32  	%r392, %r396, -2147483648;
	mov.b32 	%r488, %f62;
	mov.b32 	%r489, %f83;
	mov.b32 	%r494, %f63;
	mov.b32 	%r495, %f84;
	mov.b32 	%r507, %f517;
	mov.b32 	%r510, %f514;
	mov.b32 	%r444, %f20;
	mov.b32 	%r445, %f41;
	mov.b32 	%r447, %f21;
	mov.b32 	%r448, %f42;
	xor.b32  	%r491, %r494, -2147483648;
	xor.b32  	%r492, %r495, -2147483648;
	xor.b32  	%r506, %r510, -2147483648;
	mov.b32 	%r558, %f104;
	mov.b32 	%r559, %f125;
	mov.b32 	%r561, %f105;
	mov.b32 	%r562, %f126;
	mov.b32 	%r602, %f146;
	mov.b32 	%r603, %f167;
	mov.b32 	%r608, %f147;
	xor.b32  	%r605, %r608, -2147483648;
	mov.b32 	%r609, %f168;
	xor.b32  	%r606, %r609, -2147483648;
	and.b32  	%r625, %r4, 24;
	setp.ne.s32 	%p237, %r625, 24;
	cvt.u16.u32 	%rs237, %r224;
	mul.lo.s32 	%r3639, %r1, 1152;
	@%p237 bra 	$L__BB0_147;
// %bb.222:                             // %pass503.L1505_crit_edge
	mul.lo.s16 	%rs47, %rs237, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs237, %rs49;
	cvt.u32.u16 	%r637, %rs50;
	and.b32  	%r3640, %r637, 255;
	mov.u32 	%r87, 0;
	mov.u32 	%r88, %r87;
	bra.uni 	$L__BB0_148;
$L__BB0_147:                            // %pass518
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r626, %r223, 144;
	mul.lo.s16 	%rs41, %rs237, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs237, %rs43;
	cvt.u32.u16 	%r627, %rs44;
	and.b32  	%r3640, %r627, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r628, %rs45, 24;
	or.b32  	%r629, %r3639, %r2;
	add.s32 	%r630, %r629, %r626;
	add.s32 	%r631, %r630, %r628;
	mul.wide.u32 	%rd41, %r631, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r87, [%rd42];
	or.b32  	%r632, %r2, 576;
	add.s32 	%r633, %r632, %r3639;
	add.s32 	%r634, %r633, %r626;
	add.s32 	%r635, %r634, %r628;
	mul.wide.u32 	%rd43, %r635, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.u32 	%r88, [%rd44];
$L__BB0_148:                            // %L1505
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r391, %r393, %r392;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r394, %r396, %r393;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r443, %r445, %r444;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r446, %r448, %r447;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r487, %r489, %r488;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r490, %r492, %r491;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r493, %r495, %r494;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r496, %r489, %r488;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r505, %r507, %r506;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r508, %r510, %r507;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r557, %r559, %r558;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r560, %r562, %r561;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r601, %r603, %r602;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r604, %r606, %r605;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r607, %r609, %r608;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r610, %r603, %r602;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r639, %r4, 2;
	and.b32  	%r640, %r639, 60;
	shl.b32 	%r641, %r4, 3;
	and.b32  	%r89, %r641, 128;
	add.s32 	%r642, %r1, %r365;
	shl.b32 	%r643, %r642, 8;
	or.b32  	%r644, %r640, %r89;
	or.b32  	%r90, %r644, %r643;
	or.b32  	%r91, %r639, 64;
	mad.lo.s32 	%r92, %r361, 12288, %r643;
	add.s32 	%r93, %r2, 24;
	shr.u32 	%r645, %r4, 4;
	and.b32  	%r646, %r236, 30;
	or.b32  	%r647, %r646, %r645;
	mul.lo.s32 	%r94, %r647, 257;
	or.b32  	%r648, %r236, %r645;
	or.b32  	%r649, %r648, 32;
	mul.lo.s32 	%r95, %r649, 257;
	shr.u32 	%r650, %r2, 3;
	and.b16  	%rs52, %rs236, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs236, %rs55;
	cvt.u32.u16 	%r651, %rs56;
	and.b32  	%r96, %r651, 255;
	and.b32  	%r652, %r3, 224;
	mad.lo.s32 	%r97, %r650, 257, %r652;
	shr.u32 	%r653, %r93, 3;
	mad.lo.s32 	%r98, %r653, 257, %r652;
	add.s32 	%r654, %r2, 48;
	shr.u32 	%r655, %r654, 3;
	mad.lo.s32 	%r99, %r655, 257, %r652;
	add.s32 	%r656, %r2, 72;
	shr.u32 	%r657, %r656, 3;
	mad.lo.s32 	%r100, %r657, 257, %r652;
	or.b32  	%r658, %r650, 12;
	mad.lo.s32 	%r101, %r658, 257, %r652;
	add.s32 	%r659, %r2, 120;
	shr.u32 	%r660, %r659, 3;
	mad.lo.s32 	%r102, %r660, 257, %r652;
	add.s32 	%r661, %r2, 144;
	shr.u32 	%r662, %r661, 3;
	mad.lo.s32 	%r103, %r662, 257, %r652;
	add.s32 	%r663, %r2, 168;
	shr.u32 	%r664, %r663, 3;
	mad.lo.s32 	%r104, %r664, 257, %r652;
	or.b32  	%r665, %r650, 24;
	mad.lo.s32 	%r105, %r665, 257, %r652;
	add.s32 	%r666, %r2, 216;
	shr.u32 	%r667, %r666, 3;
	mad.lo.s32 	%r106, %r667, 257, %r652;
	add.s32 	%r668, %r2, 240;
	shr.u32 	%r669, %r668, 3;
	mad.lo.s32 	%r107, %r669, 257, %r652;
	add.s32 	%r670, %r2, 264;
	shr.u32 	%r671, %r670, 3;
	mad.lo.s32 	%r108, %r671, 257, %r652;
	or.b32  	%r672, %r650, 36;
	mad.lo.s32 	%r109, %r672, 257, %r652;
	add.s32 	%r673, %r2, 312;
	shr.u32 	%r674, %r673, 3;
	mad.lo.s32 	%r110, %r674, 257, %r652;
	add.s32 	%r675, %r2, 336;
	shr.u32 	%r676, %r675, 3;
	mad.lo.s32 	%r111, %r676, 257, %r652;
	add.s32 	%r677, %r2, 360;
	shr.u32 	%r678, %r677, 3;
	mad.lo.s32 	%r112, %r678, 257, %r652;
	or.b32  	%r679, %r650, 48;
	mad.lo.s32 	%r113, %r679, 257, %r652;
	add.s32 	%r680, %r2, 408;
	shr.u32 	%r681, %r680, 3;
	mad.lo.s32 	%r114, %r681, 257, %r652;
	add.s32 	%r682, %r2, 432;
	shr.u32 	%r683, %r682, 3;
	mad.lo.s32 	%r115, %r683, 257, %r652;
	add.s32 	%r684, %r2, 456;
	shr.u32 	%r685, %r684, 3;
	mad.lo.s32 	%r116, %r685, 257, %r652;
	or.b32  	%r686, %r650, 60;
	mad.lo.s32 	%r117, %r686, 257, %r652;
	add.s32 	%r687, %r2, 504;
	bfe.u32 	%r688, %r687, 3, 6;
	mad.lo.s32 	%r118, %r688, 257, %r652;
	mul.lo.s32 	%r689, %r2, 33;
	mad.lo.s32 	%r690, %r223, 4806, %r689;
	mad.lo.s32 	%r691, %r3640, 801, %r690;
	shr.u32 	%r692, %r2, 4;
	bfe.s32 	%r693, %r2, 1, 1;
	and.b32  	%r694, %r693, 4112;
	bfe.s32 	%r695, %r2, 2, 1;
	and.b32  	%r696, %r695, 2056;
	mul.lo.s32 	%r697, %r223, 6;
	bfe.s32 	%r698, %r2, 3, 1;
	and.b32  	%r699, %r2, 8;
	setp.eq.s32 	%p238, %r699, 0;
	and.b32  	%r700, %r698, 1028;
	and.b32  	%r701, %r2, 1;
	neg.s32 	%r702, %r701;
	and.b32  	%r703, %r702, 8256;
	mad.lo.s32 	%r704, %r692, 514, %r697;
	add.s32 	%r705, %r704, %r694;
	add.s32 	%r706, %r705, %r696;
	add.s32 	%r707, %r706, %r700;
	add.s32 	%r708, %r707, %r703;
	add.s32 	%r709, %r708, %r3640;
	mul.wide.u32 	%rd45, %r709, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	shr.u32 	%r710, %r93, 5;
	bfe.s32 	%r711, %r93, 4, 1;
	and.b32  	%r712, %r711, 514;
	selp.b32 	%r713, 1028, 0, %p238;
	mad.lo.s32 	%r714, %r710, 257, %r697;
	add.s32 	%r715, %r714, %r694;
	add.s32 	%r716, %r715, %r696;
	add.s32 	%r717, %r716, %r713;
	add.s32 	%r718, %r717, %r703;
	add.s32 	%r719, %r718, %r712;
	add.s32 	%r720, %r719, %r3640;
	mul.wide.u32 	%rd47, %r720, 4;
	add.s64 	%rd8, %rd46, %rd47;
	add.s32 	%r721, %r709, 32;
	mul.wide.u32 	%rd48, %r721, 4;
	add.s64 	%rd9, %rd46, %rd48;
	add.s32 	%r722, %r720, 32;
	mul.wide.u32 	%rd49, %r722, 4;
	add.s64 	%rd10, %rd46, %rd49;
	mul.lo.s32 	%r723, %r363, 589824;
	mad.lo.s32 	%r724, %r367, 1152, %r723;
	mad.lo.s32 	%r725, %r2, 24, %r3639;
	add.s32 	%r119, %r725, %r96;
	cvt.s64.s32 	%rd11, %r724;
	cvt.u16.u32 	%rs57, %r93;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r726, %rs62;
	and.b32  	%r727, %r726, 255;
	or.b32  	%r728, %r3639, %r96;
	mad.lo.s32 	%r120, %r727, 24, %r728;
	mul.wide.u32 	%rd50, %r691, 4;
	add.s64 	%rd12, %rd46, %rd50;
	add.s32 	%r729, %r709, 64;
	mul.wide.u32 	%rd51, %r729, 4;
	add.s64 	%rd13, %rd46, %rd51;
	add.s32 	%r730, %r720, 64;
	mul.wide.u32 	%rd52, %r730, 4;
	add.s64 	%rd14, %rd46, %rd52;
	add.s32 	%r731, %r709, 96;
	mul.wide.u32 	%rd53, %r731, 4;
	add.s64 	%rd15, %rd46, %rd53;
	add.s32 	%r732, %r720, 96;
	mul.wide.u32 	%rd54, %r732, 4;
	add.s64 	%rd16, %rd46, %rd54;
	add.s32 	%r733, %r709, 128;
	mul.wide.u32 	%rd55, %r733, 4;
	add.s64 	%rd17, %rd46, %rd55;
	add.s32 	%r734, %r720, 128;
	mul.wide.u32 	%rd56, %r734, 4;
	add.s64 	%rd18, %rd46, %rd56;
	add.s32 	%r735, %r709, 160;
	mul.wide.u32 	%rd57, %r735, 4;
	add.s64 	%rd19, %rd46, %rd57;
	add.s32 	%r736, %r720, 160;
	mul.wide.u32 	%rd58, %r736, 4;
	add.s64 	%rd20, %rd46, %rd58;
	add.s32 	%r737, %r709, 192;
	mul.wide.u32 	%rd59, %r737, 4;
	add.s64 	%rd21, %rd46, %rd59;
	add.s32 	%r738, %r720, 192;
	mul.wide.u32 	%rd60, %r738, 4;
	add.s64 	%rd22, %rd46, %rd60;
	add.s32 	%r739, %r709, 224;
	mul.wide.u32 	%rd61, %r739, 4;
	add.s64 	%rd23, %rd46, %rd61;
	add.s32 	%r740, %r720, 224;
	mul.wide.u32 	%rd62, %r740, 4;
	add.s64 	%rd24, %rd46, %rd62;
	setp.lt.u32 	%p240, %r4, 16;
	setp.gt.u32 	%p269, %r2, 7;
	setp.lt.u32 	%p273, %r4, 24;
	mov.u32 	%r3673, %r121;
	mov.u32 	%r3674, %r121;
	mov.u32 	%r3675, %r121;
	mov.u32 	%r3676, %r121;
	bra.uni 	$L__BB0_149;
$L__BB0_193:                            // %L25753
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r222, %r121, 48;
	setp.ne.s32 	%p311, %r121, 32688;
	mov.u32 	%r121, %r222;
	@%p311 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_194;
$L__BB0_149:                            // %L1508
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_176 Depth 2
                                        //     Child Loop BB0_185 Depth 2
	add.s32 	%r741, %r121, %r361;
	setp.lt.s32 	%p239, %r741, %r362;
	@%p239 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_194;
$L__BB0_150:                            // %oksrem659
                                        //   in Loop: Header=BB0_149 Depth=1
	mul.hi.u32 	%r934, %r121, -1431655765;
	shr.u32 	%r935, %r934, 5;
	mul.lo.s32 	%r256, %r935, 48;
	add.s32 	%r936, %r256, %r2;
	add.s32 	%r937, %r936, %r361;
	mad.lo.s32 	%r938, %r937, 12288, %r90;
	mul.hi.s32 	%r939, %r938, 715827883;
	shr.u32 	%r940, %r939, 31;
	shr.s32 	%r941, %r939, 26;
	add.s32 	%r942, %r941, %r940;
	setp.lt.s32 	%p241, %r938, 0;
	mul.lo.s32 	%r943, %r942, 402653184;
	setp.ne.s32 	%p242, %r943, %r938;
	and.pred  	%p243, %p241, %p242;
	selp.s32 	%r944, -1, 0, %p243;
	add.s32 	%r945, %r942, %r944;
	mad.lo.s32 	%r946, %r945, -402653184, %r938;
	mul.wide.s32 	%rd63, %r946, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r947, %r948, %r949, %r950}, [%rd64];
	mul.lo.s32 	%r951, %r936, 12288;
	or.b32  	%r952, %r951, %r91;
	or.b32  	%r953, %r952, %r89;
	add.s32 	%r954, %r92, %r953;
	mul.hi.s32 	%r955, %r954, 715827883;
	shr.u32 	%r956, %r955, 31;
	shr.s32 	%r957, %r955, 26;
	add.s32 	%r958, %r957, %r956;
	shr.s32 	%r959, %r954, 31;
	add.s32 	%r960, %r959, %r958;
	or.b32  	%r961, %r954, 1;
	mad.lo.s32 	%r962, %r960, -402653184, %r961;
	mul.wide.s32 	%rd65, %r962, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r963, %r964, %r965, %r966}, [%rd66+-4];
	add.s32 	%r967, %r93, %r256;
	add.s32 	%r968, %r967, %r361;
	mad.lo.s32 	%r969, %r968, 12288, %r90;
	mul.hi.s32 	%r970, %r969, 715827883;
	shr.u32 	%r971, %r970, 31;
	shr.s32 	%r972, %r970, 26;
	add.s32 	%r973, %r972, %r971;
	setp.lt.s32 	%p244, %r969, 0;
	mul.lo.s32 	%r974, %r973, 402653184;
	setp.ne.s32 	%p245, %r974, %r969;
	and.pred  	%p246, %p244, %p245;
	selp.s32 	%r975, -1, 0, %p246;
	add.s32 	%r976, %r973, %r975;
	mad.lo.s32 	%r977, %r976, -402653184, %r969;
	mul.wide.s32 	%rd67, %r977, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r978, %r979, %r980, %r981}, [%rd68];
	mul.lo.s32 	%r982, %r967, 12288;
	or.b32  	%r983, %r982, %r91;
	or.b32  	%r984, %r983, %r89;
	add.s32 	%r985, %r92, %r984;
	mul.hi.s32 	%r986, %r985, 715827883;
	shr.u32 	%r987, %r986, 31;
	shr.s32 	%r988, %r986, 26;
	add.s32 	%r989, %r988, %r987;
	shr.s32 	%r990, %r985, 31;
	add.s32 	%r991, %r990, %r989;
	or.b32  	%r992, %r985, 1;
	mad.lo.s32 	%r993, %r991, -402653184, %r992;
	mul.wide.s32 	%rd69, %r993, 4;
	add.s64 	%rd70, %rd3, %rd69;
	ld.global.v4.u32 	{%r994, %r995, %r996, %r997}, [%rd70+-4];
	selp.b32 	%r998, %r949, %r947, %p240;
	shfl.sync.bfly.b32	%r999, %r998, 16, 31, -1;
	selp.b32 	%r744, %r947, %r999, %p240;
	selp.b32 	%r749, %r999, %r949, %p240;
	selp.b32 	%r1000, %r950, %r948, %p240;
	shfl.sync.bfly.b32	%r1001, %r1000, 16, 31, -1;
	selp.b32 	%r752, %r948, %r1001, %p240;
	selp.b32 	%r757, %r1001, %r950, %p240;
	selp.b32 	%r1002, %r965, %r963, %p240;
	shfl.sync.bfly.b32	%r1003, %r1002, 16, 31, -1;
	selp.b32 	%r760, %r963, %r1003, %p240;
	selp.b32 	%r765, %r1003, %r965, %p240;
	selp.b32 	%r1004, %r966, %r964, %p240;
	shfl.sync.bfly.b32	%r1005, %r1004, 16, 31, -1;
	selp.b32 	%r768, %r964, %r1005, %p240;
	selp.b32 	%r773, %r1005, %r966, %p240;
	selp.b32 	%r1006, %r980, %r978, %p240;
	shfl.sync.bfly.b32	%r1007, %r1006, 16, 31, -1;
	selp.b32 	%r776, %r978, %r1007, %p240;
	selp.b32 	%r781, %r1007, %r980, %p240;
	selp.b32 	%r1008, %r981, %r979, %p240;
	shfl.sync.bfly.b32	%r1009, %r1008, 16, 31, -1;
	selp.b32 	%r784, %r979, %r1009, %p240;
	selp.b32 	%r789, %r1009, %r981, %p240;
	selp.b32 	%r1010, %r996, %r994, %p240;
	shfl.sync.bfly.b32	%r1011, %r1010, 16, 31, -1;
	selp.b32 	%r792, %r994, %r1011, %p240;
	selp.b32 	%r797, %r1011, %r996, %p240;
	selp.b32 	%r1012, %r997, %r995, %p240;
	shfl.sync.bfly.b32	%r1013, %r1012, 16, 31, -1;
	selp.b32 	%r800, %r995, %r1013, %p240;
	selp.b32 	%r805, %r1013, %r997, %p240;
	shl.b32 	%r745, %r749, 4;
	mov.u32 	%r743, 252645135;
	// begin inline asm
	lop3.b32 %r807, %r743, %r744, %r745, 202;
	// end inline asm
	shr.u32 	%r748, %r744, 4;
	// begin inline asm
	lop3.b32 %r823, %r743, %r748, %r749, 202;
	// end inline asm
	shl.b32 	%r753, %r757, 4;
	// begin inline asm
	lop3.b32 %r815, %r743, %r752, %r753, 202;
	// end inline asm
	shr.u32 	%r756, %r752, 4;
	// begin inline asm
	lop3.b32 %r831, %r743, %r756, %r757, 202;
	// end inline asm
	shl.b32 	%r761, %r765, 4;
	// begin inline asm
	lop3.b32 %r839, %r743, %r760, %r761, 202;
	// end inline asm
	shr.u32 	%r764, %r760, 4;
	// begin inline asm
	lop3.b32 %r855, %r743, %r764, %r765, 202;
	// end inline asm
	shl.b32 	%r769, %r773, 4;
	// begin inline asm
	lop3.b32 %r847, %r743, %r768, %r769, 202;
	// end inline asm
	shr.u32 	%r772, %r768, 4;
	// begin inline asm
	lop3.b32 %r863, %r743, %r772, %r773, 202;
	// end inline asm
	shl.b32 	%r777, %r781, 4;
	// begin inline asm
	lop3.b32 %r808, %r743, %r776, %r777, 202;
	// end inline asm
	shr.u32 	%r780, %r776, 4;
	// begin inline asm
	lop3.b32 %r824, %r743, %r780, %r781, 202;
	// end inline asm
	shl.b32 	%r785, %r789, 4;
	// begin inline asm
	lop3.b32 %r816, %r743, %r784, %r785, 202;
	// end inline asm
	shr.u32 	%r788, %r784, 4;
	// begin inline asm
	lop3.b32 %r832, %r743, %r788, %r789, 202;
	// end inline asm
	shl.b32 	%r793, %r797, 4;
	// begin inline asm
	lop3.b32 %r840, %r743, %r792, %r793, 202;
	// end inline asm
	shr.u32 	%r796, %r792, 4;
	// begin inline asm
	lop3.b32 %r856, %r743, %r796, %r797, 202;
	// end inline asm
	shl.b32 	%r801, %r805, 4;
	// begin inline asm
	lop3.b32 %r848, %r743, %r800, %r801, 202;
	// end inline asm
	shr.u32 	%r804, %r800, 4;
	// begin inline asm
	lop3.b32 %r864, %r743, %r804, %r805, 202;
	// end inline asm
	mov.u32 	%r809, 25152;
	// begin inline asm
	prmt.b32 %r871, %r807, %r808, %r809;
	// end inline asm
	mov.u32 	%r813, 29521;
	// begin inline asm
	prmt.b32 %r903, %r807, %r808, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r815, %r816, %r809;
	// end inline asm
	// begin inline asm
	prmt.b32 %r911, %r815, %r816, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r872, %r823, %r824, %r809;
	// end inline asm
	// begin inline asm
	prmt.b32 %r904, %r823, %r824, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r880, %r831, %r832, %r809;
	// end inline asm
	// begin inline asm
	prmt.b32 %r912, %r831, %r832, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r839, %r840, %r809;
	// end inline asm
	// begin inline asm
	prmt.b32 %r919, %r839, %r840, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r847, %r848, %r809;
	// end inline asm
	// begin inline asm
	prmt.b32 %r927, %r847, %r848, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r888, %r855, %r856, %r809;
	// end inline asm
	// begin inline asm
	prmt.b32 %r920, %r855, %r856, %r813;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r863, %r864, %r809;
	// end inline asm
	// begin inline asm
	prmt.b32 %r928, %r863, %r864, %r813;
	// end inline asm
	mov.u32 	%r873, 21520;
	// begin inline asm
	prmt.b32 %r870, %r871, %r872, %r873;
	// end inline asm
	mov.u32 	%r877, 30258;
	// begin inline asm
	prmt.b32 %r874, %r871, %r872, %r877;
	// end inline asm
	// begin inline asm
	prmt.b32 %r878, %r879, %r880, %r873;
	// end inline asm
	// begin inline asm
	prmt.b32 %r882, %r879, %r880, %r877;
	// end inline asm
	// begin inline asm
	prmt.b32 %r886, %r887, %r888, %r873;
	// end inline asm
	// begin inline asm
	prmt.b32 %r890, %r887, %r888, %r877;
	// end inline asm
	// begin inline asm
	prmt.b32 %r894, %r895, %r896, %r873;
	// end inline asm
	// begin inline asm
	prmt.b32 %r898, %r895, %r896, %r877;
	// end inline asm
	// begin inline asm
	prmt.b32 %r902, %r903, %r904, %r873;
	// end inline asm
	// begin inline asm
	prmt.b32 %r906, %r903, %r904, %r877;
	// end inline asm
	// begin inline asm
	prmt.b32 %r910, %r911, %r912, %r873;
	// end inline asm
	// begin inline asm
	prmt.b32 %r914, %r911, %r912, %r877;
	// end inline asm
	// begin inline asm
	prmt.b32 %r918, %r919, %r920, %r873;
	// end inline asm
	// begin inline asm
	prmt.b32 %r922, %r919, %r920, %r877;
	// end inline asm
	// begin inline asm
	prmt.b32 %r926, %r927, %r928, %r873;
	// end inline asm
	// begin inline asm
	prmt.b32 %r930, %r927, %r928, %r877;
	// end inline asm
	cvt.u16.u32 	%rs63, %r936;
	mul.hi.s16 	%rs64, %rs63, 10923;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 2;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs63, %rs68;
	cvt.s32.s16 	%r1014, %rs69;
	add.s32 	%r1015, %r94, %r1014;
	mul.wide.s32 	%rd71, %r1015, 4;
	add.s64 	%rd73, %rd46, %rd71;
	st.shared.u32 	[%rd73], %r870;
	add.s32 	%r1016, %r1015, 128;
	mul.wide.u32 	%rd74, %r1016, 4;
	add.s64 	%rd75, %rd46, %rd74;
	st.shared.u32 	[%rd75], %r878;
	add.s32 	%r1017, %r1015, 64;
	mul.wide.u32 	%rd76, %r1017, 4;
	add.s64 	%rd77, %rd46, %rd76;
	st.shared.u32 	[%rd77], %r874;
	add.s32 	%r1018, %r1015, 192;
	mul.wide.u32 	%rd78, %r1018, 4;
	add.s64 	%rd79, %rd46, %rd78;
	st.shared.u32 	[%rd79], %r882;
	add.s32 	%r1019, %r95, %r1014;
	mul.wide.u32 	%rd80, %r1019, 4;
	add.s64 	%rd81, %rd46, %rd80;
	st.shared.u32 	[%rd81], %r886;
	add.s32 	%r1020, %r1019, 128;
	mul.wide.u32 	%rd82, %r1020, 4;
	add.s64 	%rd83, %rd46, %rd82;
	st.shared.u32 	[%rd83], %r894;
	add.s32 	%r1021, %r1019, 64;
	mul.wide.u32 	%rd84, %r1021, 4;
	add.s64 	%rd85, %rd46, %rd84;
	st.shared.u32 	[%rd85], %r890;
	add.s32 	%r1022, %r1019, 192;
	mul.wide.u32 	%rd86, %r1022, 4;
	add.s64 	%rd87, %rd46, %rd86;
	st.shared.u32 	[%rd87], %r898;
	add.s32 	%r1023, %r1015, 32;
	mul.wide.u32 	%rd88, %r1023, 4;
	add.s64 	%rd89, %rd46, %rd88;
	st.shared.u32 	[%rd89], %r902;
	add.s32 	%r1024, %r1015, 160;
	mul.wide.u32 	%rd90, %r1024, 4;
	add.s64 	%rd91, %rd46, %rd90;
	st.shared.u32 	[%rd91], %r910;
	add.s32 	%r1025, %r1015, 96;
	mul.wide.u32 	%rd92, %r1025, 4;
	add.s64 	%rd93, %rd46, %rd92;
	st.shared.u32 	[%rd93], %r906;
	add.s32 	%r1026, %r1015, 224;
	mul.wide.u32 	%rd94, %r1026, 4;
	add.s64 	%rd95, %rd46, %rd94;
	st.shared.u32 	[%rd95], %r914;
	add.s32 	%r1027, %r1019, 32;
	mul.wide.u32 	%rd96, %r1027, 4;
	add.s64 	%rd97, %rd46, %rd96;
	st.shared.u32 	[%rd97], %r918;
	add.s32 	%r1028, %r1019, 160;
	mul.wide.u32 	%rd98, %r1028, 4;
	add.s64 	%rd99, %rd46, %rd98;
	st.shared.u32 	[%rd99], %r926;
	add.s32 	%r1029, %r1019, 96;
	mul.wide.u32 	%rd100, %r1029, 4;
	add.s64 	%rd101, %rd46, %rd100;
	st.shared.u32 	[%rd101], %r922;
	add.s32 	%r1030, %r1019, 224;
	mul.wide.u32 	%rd102, %r1030, 4;
	add.s64 	%rd103, %rd46, %rd102;
	st.shared.u32 	[%rd103], %r930;
	bar.sync 	0;
	add.s32 	%r1031, %r256, %r96;
	cvt.u16.u32 	%rs70, %r1031;
	mul.hi.s16 	%rs71, %rs70, 10923;
	shr.u16 	%rs72, %rs71, 15;
	shr.s16 	%rs73, %rs71, 2;
	add.s16 	%rs74, %rs73, %rs72;
	mul.lo.s16 	%rs75, %rs74, 24;
	sub.s16 	%rs76, %rs70, %rs75;
	cvt.s32.s16 	%r257, %rs76;
	add.s32 	%r1032, %r97, %r257;
	mul.wide.s32 	%rd104, %r1032, 4;
	add.s64 	%rd105, %rd46, %rd104;
	ld.shared.u32 	%r258, [%rd105];
	add.s32 	%r1033, %r98, %r257;
	mul.wide.u32 	%rd106, %r1033, 4;
	add.s64 	%rd107, %rd46, %rd106;
	ld.shared.u32 	%r259, [%rd107];
	add.s32 	%r1034, %r99, %r257;
	mul.wide.u32 	%rd108, %r1034, 4;
	add.s64 	%rd109, %rd46, %rd108;
	ld.shared.u32 	%r260, [%rd109];
	add.s32 	%r1035, %r100, %r257;
	mul.wide.u32 	%rd110, %r1035, 4;
	add.s64 	%rd111, %rd46, %rd110;
	ld.shared.u32 	%r261, [%rd111];
	add.s32 	%r1036, %r101, %r257;
	mul.wide.u32 	%rd112, %r1036, 4;
	add.s64 	%rd113, %rd46, %rd112;
	ld.shared.u32 	%r262, [%rd113];
	add.s32 	%r1037, %r102, %r257;
	mul.wide.u32 	%rd114, %r1037, 4;
	add.s64 	%rd115, %rd46, %rd114;
	ld.shared.u32 	%r263, [%rd115];
	add.s32 	%r1038, %r103, %r257;
	mul.wide.u32 	%rd116, %r1038, 4;
	add.s64 	%rd117, %rd46, %rd116;
	ld.shared.u32 	%r264, [%rd117];
	add.s32 	%r1039, %r104, %r257;
	mul.wide.u32 	%rd118, %r1039, 4;
	add.s64 	%rd119, %rd46, %rd118;
	ld.shared.u32 	%r265, [%rd119];
	add.s32 	%r1040, %r105, %r257;
	mul.wide.u32 	%rd120, %r1040, 4;
	add.s64 	%rd121, %rd46, %rd120;
	ld.shared.u32 	%r266, [%rd121];
	add.s32 	%r1041, %r106, %r257;
	mul.wide.u32 	%rd122, %r1041, 4;
	add.s64 	%rd123, %rd46, %rd122;
	ld.shared.u32 	%r267, [%rd123];
	add.s32 	%r1042, %r107, %r257;
	mul.wide.u32 	%rd124, %r1042, 4;
	add.s64 	%rd125, %rd46, %rd124;
	ld.shared.u32 	%r268, [%rd125];
	add.s32 	%r1043, %r108, %r257;
	mul.wide.u32 	%rd126, %r1043, 4;
	add.s64 	%rd127, %rd46, %rd126;
	ld.shared.u32 	%r269, [%rd127];
	add.s32 	%r1044, %r109, %r257;
	mul.wide.u32 	%rd128, %r1044, 4;
	add.s64 	%rd129, %rd46, %rd128;
	ld.shared.u32 	%r270, [%rd129];
	add.s32 	%r1045, %r110, %r257;
	mul.wide.u32 	%rd130, %r1045, 4;
	add.s64 	%rd131, %rd46, %rd130;
	ld.shared.u32 	%r271, [%rd131];
	add.s32 	%r1046, %r111, %r257;
	mul.wide.u32 	%rd132, %r1046, 4;
	add.s64 	%rd133, %rd46, %rd132;
	ld.shared.u32 	%r272, [%rd133];
	add.s32 	%r1047, %r112, %r257;
	mul.wide.u32 	%rd134, %r1047, 4;
	add.s64 	%rd135, %rd46, %rd134;
	ld.shared.u32 	%r273, [%rd135];
	add.s32 	%r1048, %r113, %r257;
	mul.wide.u32 	%rd136, %r1048, 4;
	add.s64 	%rd137, %rd46, %rd136;
	ld.shared.u32 	%r274, [%rd137];
	add.s32 	%r1049, %r114, %r257;
	mul.wide.u32 	%rd138, %r1049, 4;
	add.s64 	%rd139, %rd46, %rd138;
	ld.shared.u32 	%r275, [%rd139];
	add.s32 	%r1050, %r115, %r257;
	mul.wide.u32 	%rd140, %r1050, 4;
	add.s64 	%rd141, %rd46, %rd140;
	ld.shared.u32 	%r276, [%rd141];
	add.s32 	%r1051, %r116, %r257;
	mul.wide.u32 	%rd142, %r1051, 4;
	add.s64 	%rd143, %rd46, %rd142;
	ld.shared.u32 	%r277, [%rd143];
	add.s32 	%r1052, %r117, %r257;
	mul.wide.u32 	%rd144, %r1052, 4;
	add.s64 	%rd145, %rd46, %rd144;
	ld.shared.u32 	%r278, [%rd145];
	add.s32 	%r1053, %r118, %r257;
	mul.wide.s32 	%rd146, %r1053, 4;
	add.s64 	%rd147, %rd46, %rd146;
	ld.shared.u32 	%r279, [%rd147];
	bar.sync 	0;
	shfl.sync.idx.b32	%r280, %r249, 0, 31, -1;
	shfl.sync.idx.b32	%r281, %r249, 1, 31, -1;
	shfl.sync.idx.b32	%r282, %r249, 2, 31, -1;
	shfl.sync.idx.b32	%r283, %r249, 3, 31, -1;
	shfl.sync.idx.b32	%r284, %r249, 4, 31, -1;
	shfl.sync.idx.b32	%r285, %r249, 5, 31, -1;
	shfl.sync.idx.b32	%r286, %r249, 6, 31, -1;
	shfl.sync.idx.b32	%r287, %r249, 7, 31, -1;
	shfl.sync.idx.b32	%r288, %r249, 8, 31, -1;
	shfl.sync.idx.b32	%r289, %r249, 9, 31, -1;
	shfl.sync.idx.b32	%r290, %r249, 10, 31, -1;
	shfl.sync.idx.b32	%r291, %r249, 11, 31, -1;
	shfl.sync.idx.b32	%r292, %r249, 12, 31, -1;
	shfl.sync.idx.b32	%r293, %r249, 13, 31, -1;
	shfl.sync.idx.b32	%r294, %r249, 14, 31, -1;
	shfl.sync.idx.b32	%r295, %r249, 15, 31, -1;
	shfl.sync.idx.b32	%r296, %r249, 16, 31, -1;
	shfl.sync.idx.b32	%r297, %r249, 17, 31, -1;
	shfl.sync.idx.b32	%r298, %r249, 18, 31, -1;
	shfl.sync.idx.b32	%r299, %r249, 19, 31, -1;
	shfl.sync.idx.b32	%r300, %r249, 20, 31, -1;
	shfl.sync.idx.b32	%r301, %r249, 21, 31, -1;
	shfl.sync.idx.b32	%r302, %r249, 22, 31, -1;
	shfl.sync.idx.b32	%r303, %r249, 23, 31, -1;
	setp.eq.s32 	%p247, %r280, 999999999;
	@%p247 bra 	$L__BB0_151;
// %bb.223:                             // %oksrem3332
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1054, %r280, %r257;
	mul.wide.s32 	%rd148, %r1054, 4;
	add.s64 	%rd150, %rd46, %rd148;
	st.shared.u32 	[%rd150], %r258;
	setp.eq.s32 	%p248, %r281, 999999999;
	@%p248 bra 	$L__BB0_152;
// %bb.224:                             // %oksrem3400
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1055, %r281, %r257;
	mul.wide.s32 	%rd151, %r1055, 4;
	add.s64 	%rd153, %rd46, %rd151;
	st.shared.u32 	[%rd153], %r259;
	setp.eq.s32 	%p249, %r282, 999999999;
	@%p249 bra 	$L__BB0_153;
// %bb.225:                             // %oksrem3468
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1056, %r282, %r257;
	mul.wide.s32 	%rd154, %r1056, 4;
	add.s64 	%rd156, %rd46, %rd154;
	st.shared.u32 	[%rd156], %r260;
	setp.eq.s32 	%p250, %r283, 999999999;
	@%p250 bra 	$L__BB0_154;
// %bb.226:                             // %oksrem3536
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1057, %r283, %r257;
	mul.wide.s32 	%rd157, %r1057, 4;
	add.s64 	%rd159, %rd46, %rd157;
	st.shared.u32 	[%rd159], %r261;
	setp.eq.s32 	%p251, %r284, 999999999;
	@%p251 bra 	$L__BB0_155;
// %bb.227:                             // %oksrem3604
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1058, %r284, %r257;
	mul.wide.s32 	%rd160, %r1058, 4;
	add.s64 	%rd162, %rd46, %rd160;
	st.shared.u32 	[%rd162], %r262;
	setp.eq.s32 	%p252, %r285, 999999999;
	@%p252 bra 	$L__BB0_156;
// %bb.228:                             // %oksrem3672
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1059, %r285, %r257;
	mul.wide.s32 	%rd163, %r1059, 4;
	add.s64 	%rd165, %rd46, %rd163;
	st.shared.u32 	[%rd165], %r263;
	setp.eq.s32 	%p253, %r286, 999999999;
	@%p253 bra 	$L__BB0_157;
// %bb.229:                             // %oksrem3740
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1060, %r286, %r257;
	mul.wide.s32 	%rd166, %r1060, 4;
	add.s64 	%rd168, %rd46, %rd166;
	st.shared.u32 	[%rd168], %r264;
	setp.eq.s32 	%p254, %r287, 999999999;
	@%p254 bra 	$L__BB0_158;
// %bb.230:                             // %oksrem3808
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1061, %r287, %r257;
	mul.wide.s32 	%rd169, %r1061, 4;
	add.s64 	%rd171, %rd46, %rd169;
	st.shared.u32 	[%rd171], %r265;
	setp.eq.s32 	%p255, %r288, 999999999;
	@%p255 bra 	$L__BB0_159;
// %bb.231:                             // %oksrem3876
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1062, %r288, %r257;
	mul.wide.s32 	%rd172, %r1062, 4;
	add.s64 	%rd174, %rd46, %rd172;
	st.shared.u32 	[%rd174], %r266;
	setp.eq.s32 	%p256, %r289, 999999999;
	@%p256 bra 	$L__BB0_160;
// %bb.232:                             // %oksrem3944
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1063, %r289, %r257;
	mul.wide.s32 	%rd175, %r1063, 4;
	add.s64 	%rd177, %rd46, %rd175;
	st.shared.u32 	[%rd177], %r267;
	setp.eq.s32 	%p257, %r290, 999999999;
	@%p257 bra 	$L__BB0_161;
// %bb.233:                             // %oksrem4012
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1064, %r290, %r257;
	mul.wide.s32 	%rd178, %r1064, 4;
	add.s64 	%rd180, %rd46, %rd178;
	st.shared.u32 	[%rd180], %r268;
	setp.eq.s32 	%p258, %r291, 999999999;
	@%p258 bra 	$L__BB0_162;
// %bb.234:                             // %oksrem4080
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1065, %r291, %r257;
	mul.wide.s32 	%rd181, %r1065, 4;
	add.s64 	%rd183, %rd46, %rd181;
	st.shared.u32 	[%rd183], %r269;
	setp.eq.s32 	%p259, %r292, 999999999;
	@%p259 bra 	$L__BB0_163;
// %bb.235:                             // %oksrem4148
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1066, %r292, %r257;
	mul.wide.s32 	%rd184, %r1066, 4;
	add.s64 	%rd186, %rd46, %rd184;
	st.shared.u32 	[%rd186], %r270;
	setp.eq.s32 	%p260, %r293, 999999999;
	@%p260 bra 	$L__BB0_164;
// %bb.236:                             // %oksrem4216
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1067, %r293, %r257;
	mul.wide.s32 	%rd187, %r1067, 4;
	add.s64 	%rd189, %rd46, %rd187;
	st.shared.u32 	[%rd189], %r271;
	setp.eq.s32 	%p261, %r294, 999999999;
	@%p261 bra 	$L__BB0_165;
// %bb.237:                             // %oksrem4284
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1068, %r294, %r257;
	mul.wide.s32 	%rd190, %r1068, 4;
	add.s64 	%rd192, %rd46, %rd190;
	st.shared.u32 	[%rd192], %r272;
	setp.eq.s32 	%p262, %r295, 999999999;
	@%p262 bra 	$L__BB0_166;
// %bb.238:                             // %oksrem4352
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1069, %r295, %r257;
	mul.wide.s32 	%rd193, %r1069, 4;
	add.s64 	%rd195, %rd46, %rd193;
	st.shared.u32 	[%rd195], %r273;
	setp.eq.s32 	%p263, %r296, 999999999;
	@%p263 bra 	$L__BB0_167;
// %bb.239:                             // %oksrem4420
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1070, %r296, %r257;
	mul.wide.s32 	%rd196, %r1070, 4;
	add.s64 	%rd198, %rd46, %rd196;
	st.shared.u32 	[%rd198], %r274;
	setp.eq.s32 	%p264, %r297, 999999999;
	@%p264 bra 	$L__BB0_168;
// %bb.240:                             // %oksrem4488
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1071, %r297, %r257;
	mul.wide.s32 	%rd199, %r1071, 4;
	add.s64 	%rd201, %rd46, %rd199;
	st.shared.u32 	[%rd201], %r275;
	setp.eq.s32 	%p265, %r298, 999999999;
	@%p265 bra 	$L__BB0_169;
// %bb.241:                             // %oksrem4556
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1072, %r298, %r257;
	mul.wide.s32 	%rd202, %r1072, 4;
	add.s64 	%rd204, %rd46, %rd202;
	st.shared.u32 	[%rd204], %r276;
	setp.eq.s32 	%p266, %r299, 999999999;
	@%p266 bra 	$L__BB0_170;
// %bb.242:                             // %oksrem4624
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1073, %r299, %r257;
	mul.wide.s32 	%rd205, %r1073, 4;
	add.s64 	%rd207, %rd46, %rd205;
	st.shared.u32 	[%rd207], %r277;
	setp.eq.s32 	%p267, %r300, 999999999;
	@%p267 bra 	$L__BB0_171;
// %bb.243:                             // %oksrem4692
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1074, %r300, %r257;
	mul.wide.s32 	%rd208, %r1074, 4;
	add.s64 	%rd210, %rd46, %rd208;
	st.shared.u32 	[%rd210], %r278;
	setp.eq.s32 	%p268, %r301, 999999999;
	@%p268 bra 	$L__BB0_172;
// %bb.244:                             // %oksrem4761
                                        //   in Loop: Header=BB0_149 Depth=1
	selp.b32 	%r1075, 0, %r279, %p269;
	add.s32 	%r1076, %r301, %r257;
	mul.wide.s32 	%rd211, %r1076, 4;
	add.s64 	%rd213, %rd46, %rd211;
	st.shared.u32 	[%rd213], %r1075;
	setp.eq.s32 	%p270, %r302, 999999999;
	@%p270 bra 	$L__BB0_173;
// %bb.245:                             // %oksrem4829
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1077, %r302, %r257;
	mul.wide.s32 	%rd214, %r1077, 4;
	add.s64 	%rd216, %rd46, %rd214;
	mov.u32 	%r3648, 0;
	st.shared.u32 	[%rd216], %r3648;
	setp.eq.s32 	%p271, %r303, 999999999;
	@%p271 bra 	$L__BB0_174;
// %bb.246:                             // %oksrem4896
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1080, %r303, %r257;
	mul.wide.s32 	%rd217, %r1080, 4;
	add.s64 	%rd219, %rd46, %rd217;
	st.shared.u32 	[%rd219], %r3648;
	bar.sync 	0;
	mov.u32 	%r3649, %r3648;
	mov.u32 	%r3650, %r3648;
	mov.u32 	%r3651, %r3648;
	mov.u32 	%r3652, %r3648;
	mov.u32 	%r3653, %r3648;
	mov.u32 	%r3654, %r3648;
	mov.u32 	%r3655, %r3648;
	mov.u32 	%r3656, %r3648;
	mov.u32 	%r3657, %r3648;
	mov.u32 	%r3658, %r3648;
	mov.u32 	%r3659, %r3648;
	mov.u32 	%r3660, %r3648;
	mov.u32 	%r3661, %r3648;
	mov.u32 	%r3662, %r3648;
	mov.u32 	%r3663, %r3648;
	mov.u32 	%r3664, %r3648;
	mov.u32 	%r3665, %r3648;
	mov.u32 	%r3666, %r3648;
	mov.u32 	%r3667, %r3648;
	mov.u32 	%r3668, %r3648;
	mov.u32 	%r3669, %r3648;
	mov.u32 	%r3670, %r3648;
	mov.u32 	%r3671, %r3648;
	@%p88 bra 	$L__BB0_175;
// %bb.247:                             // %oksrem4934
                                        //   in Loop: Header=BB0_149 Depth=1
	cvt.u16.u32 	%rs77, %r256;
	mul.hi.s16 	%rs78, %rs77, 10923;
	shr.u16 	%rs79, %rs78, 15;
	shr.s16 	%rs80, %rs78, 2;
	add.s16 	%rs81, %rs80, %rs79;
	mul.lo.s16 	%rs82, %rs81, 24;
	sub.s16 	%rs83, %rs77, %rs82;
	cvt.s32.s16 	%r1081, %rs83;
	mul.wide.s32 	%rd220, %r1081, 4;
	add.s64 	%rd221, %rd12, %rd220;
	ld.shared.u32 	%r3648, [%rd221];
	ld.shared.u32 	%r3649, [%rd12+4];
	ld.shared.u32 	%r3650, [%rd12+8];
	ld.shared.u32 	%r3651, [%rd12+12];
	ld.shared.u32 	%r3652, [%rd12+16];
	ld.shared.u32 	%r3653, [%rd12+20];
	ld.shared.u32 	%r3654, [%rd12+24];
	ld.shared.u32 	%r3655, [%rd12+28];
	ld.shared.u32 	%r3656, [%rd12+32];
	ld.shared.u32 	%r3657, [%rd12+36];
	ld.shared.u32 	%r3658, [%rd12+40];
	ld.shared.u32 	%r3659, [%rd12+44];
	ld.shared.u32 	%r3660, [%rd12+48];
	ld.shared.u32 	%r3661, [%rd12+52];
	ld.shared.u32 	%r3662, [%rd12+56];
	ld.shared.u32 	%r3663, [%rd12+60];
	add.s16 	%rs84, %rs77, 16;
	mul.hi.s16 	%rs85, %rs84, 10923;
	shr.u16 	%rs86, %rs85, 15;
	shr.s16 	%rs87, %rs85, 2;
	add.s16 	%rs88, %rs87, %rs86;
	mul.lo.s16 	%rs89, %rs88, 24;
	sub.s16 	%rs90, %rs84, %rs89;
	cvt.s32.s16 	%r1082, %rs90;
	mul.wide.s32 	%rd222, %r1082, 4;
	add.s64 	%rd223, %rd12, %rd222;
	ld.shared.u32 	%r3664, [%rd223];
	add.s16 	%rs91, %rs77, 17;
	mul.hi.s16 	%rs92, %rs91, 10923;
	shr.u16 	%rs93, %rs92, 15;
	shr.s16 	%rs94, %rs92, 2;
	add.s16 	%rs95, %rs94, %rs93;
	mul.lo.s16 	%rs96, %rs95, 24;
	sub.s16 	%rs97, %rs91, %rs96;
	cvt.s32.s16 	%r1083, %rs97;
	mul.wide.s32 	%rd224, %r1083, 4;
	add.s64 	%rd225, %rd12, %rd224;
	ld.shared.u32 	%r3665, [%rd225];
	add.s16 	%rs98, %rs77, 18;
	mul.hi.s16 	%rs99, %rs98, 10923;
	shr.u16 	%rs100, %rs99, 15;
	shr.s16 	%rs101, %rs99, 2;
	add.s16 	%rs102, %rs101, %rs100;
	mul.lo.s16 	%rs103, %rs102, 24;
	sub.s16 	%rs104, %rs98, %rs103;
	cvt.s32.s16 	%r1084, %rs104;
	mul.wide.s32 	%rd226, %r1084, 4;
	add.s64 	%rd227, %rd12, %rd226;
	ld.shared.u32 	%r3666, [%rd227];
	add.s16 	%rs105, %rs77, 19;
	mul.hi.s16 	%rs106, %rs105, 10923;
	shr.u16 	%rs107, %rs106, 15;
	shr.s16 	%rs108, %rs106, 2;
	add.s16 	%rs109, %rs108, %rs107;
	mul.lo.s16 	%rs110, %rs109, 24;
	sub.s16 	%rs111, %rs105, %rs110;
	cvt.s32.s16 	%r1085, %rs111;
	mul.wide.s32 	%rd228, %r1085, 4;
	add.s64 	%rd229, %rd12, %rd228;
	ld.shared.u32 	%r3667, [%rd229];
	add.s16 	%rs112, %rs77, 20;
	mul.hi.s16 	%rs113, %rs112, 10923;
	shr.u16 	%rs114, %rs113, 15;
	shr.s16 	%rs115, %rs113, 2;
	add.s16 	%rs116, %rs115, %rs114;
	mul.lo.s16 	%rs117, %rs116, 24;
	sub.s16 	%rs118, %rs112, %rs117;
	cvt.s32.s16 	%r1086, %rs118;
	mul.wide.s32 	%rd230, %r1086, 4;
	add.s64 	%rd231, %rd12, %rd230;
	ld.shared.u32 	%r3668, [%rd231];
	add.s16 	%rs119, %rs77, 21;
	mul.hi.s16 	%rs120, %rs119, 10923;
	shr.u16 	%rs121, %rs120, 15;
	shr.s16 	%rs122, %rs120, 2;
	add.s16 	%rs123, %rs122, %rs121;
	mul.lo.s16 	%rs124, %rs123, 24;
	sub.s16 	%rs125, %rs119, %rs124;
	cvt.s32.s16 	%r1087, %rs125;
	mul.wide.s32 	%rd232, %r1087, 4;
	add.s64 	%rd233, %rd12, %rd232;
	ld.shared.u32 	%r3669, [%rd233];
	add.s16 	%rs126, %rs77, 22;
	mul.hi.s16 	%rs127, %rs126, 10923;
	shr.u16 	%rs128, %rs127, 15;
	shr.s16 	%rs129, %rs127, 2;
	add.s16 	%rs130, %rs129, %rs128;
	mul.lo.s16 	%rs131, %rs130, 24;
	sub.s16 	%rs132, %rs126, %rs131;
	cvt.s32.s16 	%r1088, %rs132;
	mul.wide.s32 	%rd234, %r1088, 4;
	add.s64 	%rd235, %rd12, %rd234;
	ld.shared.u32 	%r3670, [%rd235];
	add.s16 	%rs133, %rs77, 23;
	mul.hi.s16 	%rs134, %rs133, 10923;
	shr.u16 	%rs135, %rs134, 15;
	shr.s16 	%rs136, %rs134, 2;
	add.s16 	%rs137, %rs136, %rs135;
	mul.lo.s16 	%rs138, %rs137, 24;
	sub.s16 	%rs139, %rs133, %rs138;
	cvt.s32.s16 	%r1089, %rs139;
	mul.wide.s32 	%rd236, %r1089, 4;
	add.s64 	%rd237, %rd12, %rd236;
	ld.shared.u32 	%r3671, [%rd237];
$L__BB0_175:                            // %L14038
                                        //   in Loop: Header=BB0_149 Depth=1
	bar.sync 	0;
	mov.u32 	%r3672, 12;
	bra.uni 	$L__BB0_176;
$L__BB0_182:                            // %L19886
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r3674, %r3674, 1;
	mov.u32 	%r3673, 0;
	mov.u32 	%r3675, %r3673;
	mov.u32 	%r3676, %r3673;
$L__BB0_183:                            // %L19887
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	add.s32 	%r3672, %r3672, -4;
	setp.ne.s32 	%p291, %r3672, -12;
	@%p291 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_184;
$L__BB0_176:                            // %L14064
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p274, %r3672, 12;
	selp.b32 	%r1628, %r3648, 0, %p274;
	setp.eq.s32 	%p275, %r3672, 8;
	selp.b32 	%r1629, %r3652, %r1628, %p275;
	setp.eq.s32 	%p276, %r3672, 4;
	selp.b32 	%r1630, %r3656, %r1629, %p276;
	setp.eq.s32 	%p277, %r3672, 0;
	selp.b32 	%r1631, %r3660, %r1630, %p277;
	setp.eq.s32 	%p278, %r3672, -4;
	selp.b32 	%r1632, %r3664, %r1631, %p278;
	setp.eq.s32 	%p279, %r3672, -8;
	selp.b32 	%r1633, %r3668, %r1632, %p279;
	selp.b32 	%r1634, %r3649, 0, %p274;
	selp.b32 	%r1635, %r3653, %r1634, %p275;
	selp.b32 	%r1636, %r3657, %r1635, %p276;
	selp.b32 	%r1637, %r3661, %r1636, %p277;
	selp.b32 	%r1638, %r3665, %r1637, %p278;
	selp.b32 	%r1639, %r3669, %r1638, %p279;
	selp.b32 	%r1640, %r3650, 0, %p274;
	selp.b32 	%r1641, %r3654, %r1640, %p275;
	selp.b32 	%r1642, %r3658, %r1641, %p276;
	selp.b32 	%r1643, %r3662, %r1642, %p277;
	selp.b32 	%r1644, %r3666, %r1643, %p278;
	selp.b32 	%r1645, %r3670, %r1644, %p279;
	selp.b32 	%r1646, %r3651, 0, %p274;
	selp.b32 	%r1647, %r3655, %r1646, %p275;
	selp.b32 	%r1648, %r3659, %r1647, %p276;
	selp.b32 	%r1649, %r3663, %r1648, %p277;
	selp.b32 	%r1650, %r3667, %r1649, %p278;
	selp.b32 	%r1651, %r3671, %r1650, %p279;
	mov.u16 	%rs177, 25600;
	// begin inline asm
	mov.b32 %r1096, {%rs177, %rs177};
	// end inline asm
	mov.u16 	%rs179, 21504;
	// begin inline asm
	mov.b32 %r1107, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1095, %r1633, -2004318072;
	mov.u32 	%r1232, 983055;
	// begin inline asm
	lop3.b32 %r1093, %r1232, %r1095, %r1096, 202;
	// end inline asm
	mov.u16 	%rs183, 18432;
	// begin inline asm
	mov.b32 %r1097, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1098, %r1096, %r1097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1101, %r1093, %r1098;
	// end inline asm
	mov.u32 	%r1243, 15728880;
	// begin inline asm
	lop3.b32 %r1104, %r1243, %r1095, %r1107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1108, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1109, %r1107, %r1108;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1112, %r1104, %r1109;
	// end inline asm
	// begin inline asm
	mov.b32 %r1142, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r1153, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1141, %r1639, -2004318072;
	// begin inline asm
	lop3.b32 %r1139, %r1232, %r1141, %r1142, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1143, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1144, %r1142, %r1143;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1147, %r1139, %r1144;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1150, %r1243, %r1141, %r1153, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1154, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1155, %r1153, %r1154;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1158, %r1150, %r1155;
	// end inline asm
	// begin inline asm
	mov.b32 %r1188, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r1199, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1187, %r1645, -2004318072;
	// begin inline asm
	lop3.b32 %r1185, %r1232, %r1187, %r1188, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1189, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1190, %r1188, %r1189;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1193, %r1185, %r1190;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1196, %r1243, %r1187, %r1199, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1200, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1201, %r1199, %r1200;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1204, %r1196, %r1201;
	// end inline asm
	// begin inline asm
	mov.b32 %r1234, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r1245, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1233, %r1651, -2004318072;
	// begin inline asm
	lop3.b32 %r1231, %r1232, %r1233, %r1234, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1235, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1236, %r1234, %r1235;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1239, %r1231, %r1236;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1242, %r1243, %r1233, %r1245, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1246, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1247, %r1245, %r1246;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1250, %r1242, %r1247;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1101;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1275, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1112;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1278, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1147;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1281, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1158;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1284, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1193;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1287, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1204;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1290, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1239;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1293, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1250;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1296, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1627, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1362, %r1359}, {%r391, %r394}, {%r1275}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1371, %r1368}, {%r391, %r394}, {%r1278}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1380, %r1377}, {%r391, %r394}, {%r1281}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1389, %r1386}, {%r391, %r394}, {%r1284}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1398, %r1395}, {%r391, %r394}, {%r1287}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1407, %r1404}, {%r391, %r394}, {%r1290}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1416, %r1413}, {%r391, %r394}, {%r1293}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1425, %r1422}, {%r391, %r394}, {%r1296}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1355, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1357, %r1355, %r1359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1360, %r443, %r1362, %r1357;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1364, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1366, %r1364, %r1368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1369, %r443, %r1371, %r1366;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1373, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1375, %r1373, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1378, %r443, %r1380, %r1375;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1382, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1384, %r1382, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1387, %r443, %r1389, %r1384;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1391, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1393, %r1391, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1396, %r443, %r1398, %r1393;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1400, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1402, %r1400, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1405, %r443, %r1407, %r1402;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1409, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1411, %r1409, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1414, %r443, %r1416, %r1411;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1418, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1420, %r1418, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1423, %r443, %r1425, %r1420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1427, %r446, %r1362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r443, %r1359, %r1427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1434, %r446, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r443, %r1368, %r1434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1441, %r446, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1444, %r443, %r1377, %r1441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r446, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r443, %r1386, %r1448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1455, %r446, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1458, %r443, %r1395, %r1455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r446, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r443, %r1404, %r1462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1469, %r446, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1472, %r443, %r1413, %r1469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1476, %r446, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r443, %r1422, %r1476;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1483, %r1484}, {%r487, %r493, %r490, %r496}, {%r1360, %r1430}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1493, %r1494}, {%r487, %r493, %r490, %r496}, {%r1369, %r1437}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1503, %r1504}, {%r487, %r493, %r490, %r496}, {%r1378, %r1444}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1513, %r1514}, {%r487, %r493, %r490, %r496}, {%r1387, %r1451}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1523, %r1524}, {%r487, %r493, %r490, %r496}, {%r1396, %r1458}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1533, %r1534}, {%r487, %r493, %r490, %r496}, {%r1405, %r1465}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1543, %r1544}, {%r487, %r493, %r490, %r496}, {%r1414, %r1472}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1553, %r1554}, {%r487, %r493, %r490, %r496}, {%r1423, %r1479}, {%r1627, %r1627};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3677, %r1627;
	mov.u32 	%r3678, %r1627;
	mov.u32 	%r3679, %r1627;
	mov.u32 	%r3680, %r1627;
	@%p273 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_177;
$L__BB0_248:                            // %oksrem6479
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3677, [%rd7];
	ld.shared.u32 	%r3678, [%rd8];
	ld.shared.u32 	%r3679, [%rd9];
	ld.shared.u32 	%r3680, [%rd10];
$L__BB0_177:                            // %L15697
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1687, %r1684}, {%r505, %r508}, {%r3677}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1696, %r1693}, {%r505, %r508}, {%r3678}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1705, %r1702}, {%r505, %r508}, {%r3679}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1714, %r1711}, {%r505, %r508}, {%r3680}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1680, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1682, %r1680, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1685, %r557, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1689, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1689, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r557, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1698, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1698, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r557, %r1705, %r1700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1707, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r1707, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r557, %r1714, %r1709;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1716, %r560, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r557, %r1684, %r1716;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1723, %r560, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r557, %r1693, %r1723;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r560, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r557, %r1702, %r1730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1737, %r560, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r557, %r1711, %r1737;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1785, %r1788}, {%r601, %r607, %r604, %r610}, {%r1685, %r1719}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1804, %r1807}, {%r601, %r607, %r604, %r610}, {%r1694, %r1726}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1792, %r1796}, {%r601, %r607, %r604, %r610}, {%r1703, %r1733}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1811, %r1815}, {%r601, %r607, %r604, %r610}, {%r1712, %r1740}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1784, %r1785, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r1788, %r1788, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r1792, %r1792, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r1796, %r1796, %r1791;
	// end inline asm
	mov.u32 	%r1819, 268439552;
	// begin inline asm
	fma.rn.f16x2 %r1799, %r1819, %r1795, %r3676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r1804, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r1807, %r1807, %r1803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r1811, %r1811, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1814, %r1815, %r1815, %r1810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1819, %r1814, %r3675;
	// end inline asm
	mov.u32 	%r3681, %r1627;
	mov.u32 	%r3682, %r1627;
	mov.u32 	%r3683, %r1627;
	mov.u32 	%r3684, %r1627;
	@%p273 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_178;
$L__BB0_249:                            // %oksrem7084
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3681, [%rd13];
	ld.shared.u32 	%r3682, [%rd14];
	ld.shared.u32 	%r3683, [%rd15];
	ld.shared.u32 	%r3684, [%rd16];
$L__BB0_178:                            // %L16916
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1858, %r1855}, {%r505, %r508}, {%r3681}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1867, %r1864}, {%r505, %r508}, {%r3682}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1876, %r1873}, {%r505, %r508}, {%r3683}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1885, %r1882}, {%r505, %r508}, {%r3684}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1851, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1853, %r1851, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r557, %r1858, %r1853;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1860, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r1860, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r557, %r1867, %r1862;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1869, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r1869, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r557, %r1876, %r1871;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1878, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1880, %r1878, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r557, %r1885, %r1880;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1887, %r560, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r557, %r1855, %r1887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1894, %r560, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1897, %r557, %r1864, %r1894;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1901, %r560, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1904, %r557, %r1873, %r1901;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r560, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r557, %r1882, %r1908;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1956, %r1959}, {%r601, %r607, %r604, %r610}, {%r1856, %r1890}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1975, %r1978}, {%r601, %r607, %r604, %r610}, {%r1865, %r1897}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1963, %r1967}, {%r601, %r607, %r604, %r610}, {%r1874, %r1904}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1982, %r1986}, {%r601, %r607, %r604, %r610}, {%r1883, %r1911}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1955, %r1956, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r1959, %r1959, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r1963, %r1963, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r1967, %r1967, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r1819, %r1966, %r1799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r1975, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r1978, %r1978, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1982, %r1982, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r1986, %r1986, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r1819, %r1985, %r1818;
	// end inline asm
	mov.u32 	%r3685, %r1627;
	mov.u32 	%r3686, %r1627;
	mov.u32 	%r3687, %r1627;
	mov.u32 	%r3688, %r1627;
	@%p273 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_179;
$L__BB0_250:                            // %oksrem7689
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3685, [%rd17];
	ld.shared.u32 	%r3686, [%rd18];
	ld.shared.u32 	%r3687, [%rd19];
	ld.shared.u32 	%r3688, [%rd20];
$L__BB0_179:                            // %L18135
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2029, %r2026}, {%r505, %r508}, {%r3685}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2038, %r2035}, {%r505, %r508}, {%r3686}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2047, %r2044}, {%r505, %r508}, {%r3687}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2056, %r2053}, {%r505, %r508}, {%r3688}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2022, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2024, %r2022, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2027, %r557, %r2029, %r2024;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2031, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2033, %r2031, %r2035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2036, %r557, %r2038, %r2033;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2040, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r2040, %r2044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r557, %r2047, %r2042;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2049, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2051, %r2049, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r557, %r2056, %r2051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2058, %r560, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r557, %r2026, %r2058;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2065, %r560, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2068, %r557, %r2035, %r2065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2072, %r560, %r2047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2075, %r557, %r2044, %r2072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2079, %r560, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r557, %r2053, %r2079;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2127, %r2130}, {%r601, %r607, %r604, %r610}, {%r2027, %r2061}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2146, %r2149}, {%r601, %r607, %r604, %r610}, {%r2036, %r2068}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2134, %r2138}, {%r601, %r607, %r604, %r610}, {%r2045, %r2075}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2153, %r2157}, {%r601, %r607, %r604, %r610}, {%r2054, %r2082}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r2127, %r2127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r2130, %r2130, %r2126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2133, %r2134, %r2134, %r2129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r2138, %r2138, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2141, %r1819, %r2137, %r1970;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r2146, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r2149, %r2149, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r2153, %r2153, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2156, %r2157, %r2157, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2160, %r1819, %r2156, %r1989;
	// end inline asm
	mov.u32 	%r3689, %r1627;
	mov.u32 	%r3690, %r1627;
	mov.u32 	%r3691, %r1627;
	mov.u32 	%r3692, %r1627;
	@%p273 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_180;
$L__BB0_251:                            // %oksrem8294
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3689, [%rd21];
	ld.shared.u32 	%r3690, [%rd22];
	ld.shared.u32 	%r3691, [%rd23];
	ld.shared.u32 	%r3692, [%rd24];
$L__BB0_180:                            // %L19354
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2200, %r2197}, {%r505, %r508}, {%r3689}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2209, %r2206}, {%r505, %r508}, {%r3690}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2218, %r2215}, {%r505, %r508}, {%r3691}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2227, %r2224}, {%r505, %r508}, {%r3692}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2193, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2195, %r2193, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r557, %r2200, %r2195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2202, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2204, %r2202, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2207, %r557, %r2209, %r2204;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2211, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r2211, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r557, %r2218, %r2213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2220, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r2220, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r557, %r2227, %r2222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r560, %r2200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r557, %r2197, %r2229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2236, %r560, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r557, %r2206, %r2236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2243, %r560, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2246, %r557, %r2215, %r2243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2250, %r560, %r2227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2253, %r557, %r2224, %r2250;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2298, %r2301}, {%r601, %r607, %r604, %r610}, {%r2198, %r2232}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2317, %r2320}, {%r601, %r607, %r604, %r610}, {%r2207, %r2239}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2305, %r2309}, {%r601, %r607, %r604, %r610}, {%r2216, %r2246}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2324, %r2328}, {%r601, %r607, %r604, %r610}, {%r2225, %r2253}, {%r1627, %r1627};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2297, %r2298, %r2298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2300, %r2301, %r2301, %r2297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2304, %r2305, %r2305, %r2300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2308, %r2309, %r2309, %r2304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3676, %r1819, %r2308, %r2141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2316, %r2317, %r2317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2319, %r2320, %r2320, %r2316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2323, %r2324, %r2324, %r2319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2327, %r2328, %r2328, %r2323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3675, %r1819, %r2327, %r2160;
	// end inline asm
	add.s32 	%r3673, %r3673, 4;
	setp.eq.s32 	%p283, %r3673, 256;
	@%p283 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_183;
$L__BB0_181:                            // %pass8773
                                        //   in Loop: Header=BB0_176 Depth=2
	@%p88 bra 	$L__BB0_182;
// %bb.252:                             // %pass8783
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2335, %r3674, 589824;
	add.s32 	%r2336, %r119, %r2335;
	cvt.s64.s32 	%rd238, %r2336;
	add.s64 	%rd239, %rd238, %rd11;
	mul.hi.s64 	%rd240, %rd239, 1024819115206086201;
	shr.u64 	%rd241, %rd240, 63;
	shr.s64 	%rd242, %rd240, 24;
	add.s64 	%rd243, %rd242, %rd241;
	setp.lt.s64 	%p285, %rd239, 0;
	mul.lo.s64 	%rd244, %rd243, 301989888;
	setp.ne.s64 	%p286, %rd244, %rd239;
	and.pred  	%p287, %p285, %p286;
	selp.s64 	%rd245, -1, 0, %p287;
	add.s64 	%rd246, %rd243, %rd245;
	mul.lo.s64 	%rd247, %rd246, -301989888;
	add.s64 	%rd248, %rd247, %rd239;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r3676;
	add.s32 	%r2337, %r120, %r2335;
	cvt.s64.s32 	%rd251, %r2337;
	add.s64 	%rd252, %rd251, %rd11;
	mul.hi.s64 	%rd253, %rd252, 1024819115206086201;
	shr.u64 	%rd254, %rd253, 63;
	shr.s64 	%rd255, %rd253, 24;
	add.s64 	%rd256, %rd255, %rd254;
	setp.lt.s64 	%p288, %rd252, 0;
	mul.lo.s64 	%rd257, %rd256, 301989888;
	setp.ne.s64 	%p289, %rd257, %rd252;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd258, -1, 0, %p290;
	add.s64 	%rd259, %rd256, %rd258;
	mul.lo.s64 	%rd260, %rd259, -301989888;
	add.s64 	%rd261, %rd260, %rd252;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd263, %rd4, %rd262;
	st.global.u32 	[%rd263], %r3675;
	bra.uni 	$L__BB0_182;
$L__BB0_184:                            // %L19912.preheader
                                        //   in Loop: Header=BB0_149 Depth=1
	mov.u32 	%r3697, 12;
	bra.uni 	$L__BB0_185;
$L__BB0_191:                            // %L25734
                                        //   in Loop: Header=BB0_185 Depth=2
	add.s32 	%r3674, %r3674, 1;
	mov.u32 	%r3673, 0;
	mov.u32 	%r3675, %r3673;
	mov.u32 	%r3676, %r3673;
$L__BB0_192:                            // %L25735
                                        //   in Loop: Header=BB0_185 Depth=2
	bar.sync 	0;
	add.s32 	%r3697, %r3697, -4;
	setp.ne.s32 	%p310, %r3697, -12;
	@%p310 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_193;
$L__BB0_185:                            // %L19912
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p293, %r3697, 12;
	selp.b32 	%r2877, %r3648, 0, %p293;
	setp.eq.s32 	%p294, %r3697, 8;
	selp.b32 	%r2878, %r3652, %r2877, %p294;
	setp.eq.s32 	%p295, %r3697, 4;
	selp.b32 	%r2879, %r3656, %r2878, %p295;
	setp.eq.s32 	%p296, %r3697, 0;
	selp.b32 	%r2880, %r3660, %r2879, %p296;
	setp.eq.s32 	%p297, %r3697, -4;
	selp.b32 	%r2881, %r3664, %r2880, %p297;
	setp.eq.s32 	%p298, %r3697, -8;
	selp.b32 	%r2882, %r3668, %r2881, %p298;
	selp.b32 	%r2883, %r3649, 0, %p293;
	selp.b32 	%r2884, %r3653, %r2883, %p294;
	selp.b32 	%r2885, %r3657, %r2884, %p295;
	selp.b32 	%r2886, %r3661, %r2885, %p296;
	selp.b32 	%r2887, %r3665, %r2886, %p297;
	selp.b32 	%r2888, %r3669, %r2887, %p298;
	selp.b32 	%r2889, %r3650, 0, %p293;
	selp.b32 	%r2890, %r3654, %r2889, %p294;
	selp.b32 	%r2891, %r3658, %r2890, %p295;
	selp.b32 	%r2892, %r3662, %r2891, %p296;
	selp.b32 	%r2893, %r3666, %r2892, %p297;
	selp.b32 	%r2894, %r3670, %r2893, %p298;
	selp.b32 	%r2895, %r3651, 0, %p293;
	selp.b32 	%r2896, %r3655, %r2895, %p294;
	selp.b32 	%r2897, %r3659, %r2896, %p295;
	selp.b32 	%r2898, %r3663, %r2897, %p296;
	selp.b32 	%r2899, %r3667, %r2898, %p297;
	selp.b32 	%r2900, %r3671, %r2899, %p298;
	// begin inline asm
	mov.b32 %r2367, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2901, %r2882, 8;
	xor.b32  	%r2377, %r2901, 8947848;
	// begin inline asm
	lop3.b32 %r2364, %r1232, %r2377, %r2367, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2368, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2369, %r2367, %r2368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2372, %r2364, %r2369;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2375, %r1243, %r2377, %r2378, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2379, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2380, %r2378, %r2379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2383, %r2375, %r2380;
	// end inline asm
	// begin inline asm
	mov.b32 %r2413, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2424, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2902, %r2888, 8;
	xor.b32  	%r2423, %r2902, 8947848;
	// begin inline asm
	lop3.b32 %r2410, %r1232, %r2423, %r2413, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2414, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2415, %r2413, %r2414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2418, %r2410, %r2415;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2421, %r1243, %r2423, %r2424, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2425, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2426, %r2424, %r2425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2429, %r2421, %r2426;
	// end inline asm
	// begin inline asm
	mov.b32 %r2459, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2470, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2903, %r2894, 8;
	xor.b32  	%r2469, %r2903, 8947848;
	// begin inline asm
	lop3.b32 %r2456, %r1232, %r2469, %r2459, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2460, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2461, %r2459, %r2460;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2464, %r2456, %r2461;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2467, %r1243, %r2469, %r2470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2471, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2472, %r2470, %r2471;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2475, %r2467, %r2472;
	// end inline asm
	// begin inline asm
	mov.b32 %r2505, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2516, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2904, %r2900, 8;
	xor.b32  	%r2515, %r2904, 8947848;
	// begin inline asm
	lop3.b32 %r2502, %r1232, %r2515, %r2505, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2506, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2507, %r2505, %r2506;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2510, %r2502, %r2507;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2513, %r1243, %r2515, %r2516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2517, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2518, %r2516, %r2517;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2521, %r2513, %r2518;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2372;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2524, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2383;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2527, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2418;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2530, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2429;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2533, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2464;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2536, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2475;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2539, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2510;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2542, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2521;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2545, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2876, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2611, %r2608}, {%r391, %r394}, {%r2524}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2620, %r2617}, {%r391, %r394}, {%r2527}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2629, %r2626}, {%r391, %r394}, {%r2530}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2638, %r2635}, {%r391, %r394}, {%r2533}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2647, %r2644}, {%r391, %r394}, {%r2536}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2656, %r2653}, {%r391, %r394}, {%r2539}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2665, %r2662}, {%r391, %r394}, {%r2542}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2674, %r2671}, {%r391, %r394}, {%r2545}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2604, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2606, %r2604, %r2608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2609, %r443, %r2611, %r2606;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2613, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2615, %r2613, %r2617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2618, %r443, %r2620, %r2615;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2622, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2624, %r2622, %r2626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2627, %r443, %r2629, %r2624;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2631, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2633, %r2631, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2636, %r443, %r2638, %r2633;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2640, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r2640, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2645, %r443, %r2647, %r2642;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2649, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r2649, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2654, %r443, %r2656, %r2651;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2658, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r2658, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2663, %r443, %r2665, %r2660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2667, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r2667, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2672, %r443, %r2674, %r2669;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r446, %r2611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r443, %r2608, %r2676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2683, %r446, %r2620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2686, %r443, %r2617, %r2683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2690, %r446, %r2629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2693, %r443, %r2626, %r2690;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r446, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2700, %r443, %r2635, %r2697;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2704, %r446, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2707, %r443, %r2644, %r2704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r446, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r443, %r2653, %r2711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r446, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r443, %r2662, %r2718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r446, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r443, %r2671, %r2725;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2732, %r2733}, {%r487, %r493, %r490, %r496}, {%r2609, %r2679}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2742, %r2743}, {%r487, %r493, %r490, %r496}, {%r2618, %r2686}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2752, %r2753}, {%r487, %r493, %r490, %r496}, {%r2627, %r2693}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2762, %r2763}, {%r487, %r493, %r490, %r496}, {%r2636, %r2700}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2772, %r2773}, {%r487, %r493, %r490, %r496}, {%r2645, %r2707}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2782, %r2783}, {%r487, %r493, %r490, %r496}, {%r2654, %r2714}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2792, %r2793}, {%r487, %r493, %r490, %r496}, {%r2663, %r2721}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2802, %r2803}, {%r487, %r493, %r490, %r496}, {%r2672, %r2728}, {%r2876, %r2876};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3702, %r2876;
	mov.u32 	%r3703, %r2876;
	mov.u32 	%r3704, %r2876;
	mov.u32 	%r3705, %r2876;
	@%p273 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_186;
$L__BB0_253:                            // %oksrem9130
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3705, [%rd7];
	ld.shared.u32 	%r3704, [%rd8];
	ld.shared.u32 	%r3703, [%rd9];
	ld.shared.u32 	%r3702, [%rd10];
$L__BB0_186:                            // %L21545
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2940, %r2937}, {%r505, %r508}, {%r3705}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2949, %r2946}, {%r505, %r508}, {%r3704}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2958, %r2955}, {%r505, %r508}, {%r3703}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2967, %r2964}, {%r505, %r508}, {%r3702}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2933, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2935, %r2933, %r2937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r557, %r2940, %r2935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2942, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2944, %r2942, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r557, %r2949, %r2944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2951, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r2951, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r557, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2960, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r2960, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r557, %r2967, %r2962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r560, %r2940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r557, %r2937, %r2969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2976, %r560, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r557, %r2946, %r2976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r560, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r557, %r2955, %r2983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2990, %r560, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r557, %r2964, %r2990;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3038, %r3041}, {%r601, %r607, %r604, %r610}, {%r2938, %r2972}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3057, %r3060}, {%r601, %r607, %r604, %r610}, {%r2947, %r2979}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3045, %r3049}, {%r601, %r607, %r604, %r610}, {%r2956, %r2986}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3064, %r3068}, {%r601, %r607, %r604, %r610}, {%r2965, %r2993}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3037, %r3038, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3040, %r3041, %r3041, %r3037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r3045, %r3045, %r3040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3048, %r3049, %r3049, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r1819, %r3048, %r3676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r3057, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r3060, %r3060, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3063, %r3064, %r3064, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r3068, %r3068, %r3063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3071, %r1819, %r3067, %r3675;
	// end inline asm
	mov.u32 	%r3706, %r2876;
	mov.u32 	%r3707, %r2876;
	mov.u32 	%r3708, %r2876;
	mov.u32 	%r3709, %r2876;
	@%p273 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_187;
$L__BB0_254:                            // %oksrem9735
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3709, [%rd13];
	ld.shared.u32 	%r3708, [%rd14];
	ld.shared.u32 	%r3707, [%rd15];
	ld.shared.u32 	%r3706, [%rd16];
$L__BB0_187:                            // %L22764
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3111, %r3108}, {%r505, %r508}, {%r3709}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3120, %r3117}, {%r505, %r508}, {%r3708}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3129, %r3126}, {%r505, %r508}, {%r3707}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3138, %r3135}, {%r505, %r508}, {%r3706}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3104, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3106, %r3104, %r3108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3109, %r557, %r3111, %r3106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3113, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3115, %r3113, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3118, %r557, %r3120, %r3115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3122, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r3122, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r557, %r3129, %r3124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3131, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3133, %r3131, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3136, %r557, %r3138, %r3133;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r560, %r3111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r557, %r3108, %r3140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3147, %r560, %r3120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3150, %r557, %r3117, %r3147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3154, %r560, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3157, %r557, %r3126, %r3154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3161, %r560, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3164, %r557, %r3135, %r3161;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3209, %r3212}, {%r601, %r607, %r604, %r610}, {%r3109, %r3143}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3228, %r3231}, {%r601, %r607, %r604, %r610}, {%r3118, %r3150}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3216, %r3220}, {%r601, %r607, %r604, %r610}, {%r3127, %r3157}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3235, %r3239}, {%r601, %r607, %r604, %r610}, {%r3136, %r3164}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3208, %r3209, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r3212, %r3212, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3216, %r3216, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r3220, %r3220, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r1819, %r3219, %r3052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3227, %r3228, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r3231, %r3231, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3234, %r3235, %r3235, %r3230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3238, %r3239, %r3239, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3242, %r1819, %r3238, %r3071;
	// end inline asm
	mov.u32 	%r3710, %r2876;
	mov.u32 	%r3711, %r2876;
	mov.u32 	%r3712, %r2876;
	mov.u32 	%r3713, %r2876;
	@%p273 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_188;
$L__BB0_255:                            // %oksrem10340
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3713, [%rd17];
	ld.shared.u32 	%r3712, [%rd18];
	ld.shared.u32 	%r3711, [%rd19];
	ld.shared.u32 	%r3710, [%rd20];
$L__BB0_188:                            // %L23983
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3282, %r3279}, {%r505, %r508}, {%r3713}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3291, %r3288}, {%r505, %r508}, {%r3712}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3300, %r3297}, {%r505, %r508}, {%r3711}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3309, %r3306}, {%r505, %r508}, {%r3710}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3275, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3277, %r3275, %r3279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3280, %r557, %r3282, %r3277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3284, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3286, %r3284, %r3288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3289, %r557, %r3291, %r3286;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3293, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3295, %r3293, %r3297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r557, %r3300, %r3295;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3302, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r3302, %r3306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r557, %r3309, %r3304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r560, %r3282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r557, %r3279, %r3311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3318, %r560, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3321, %r557, %r3288, %r3318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3325, %r560, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3328, %r557, %r3297, %r3325;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3332, %r560, %r3309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3335, %r557, %r3306, %r3332;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3380, %r3383}, {%r601, %r607, %r604, %r610}, {%r3280, %r3314}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3399, %r3402}, {%r601, %r607, %r604, %r610}, {%r3289, %r3321}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3387, %r3391}, {%r601, %r607, %r604, %r610}, {%r3298, %r3328}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3406, %r3410}, {%r601, %r607, %r604, %r610}, {%r3307, %r3335}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3379, %r3380, %r3380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3382, %r3383, %r3383, %r3379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3386, %r3387, %r3387, %r3382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3390, %r3391, %r3391, %r3386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3394, %r1819, %r3390, %r3223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3398, %r3399, %r3399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3401, %r3402, %r3402, %r3398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3405, %r3406, %r3406, %r3401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3409, %r3410, %r3410, %r3405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3413, %r1819, %r3409, %r3242;
	// end inline asm
	mov.u32 	%r3714, %r2876;
	mov.u32 	%r3715, %r2876;
	mov.u32 	%r3716, %r2876;
	mov.u32 	%r3717, %r2876;
	@%p273 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_189;
$L__BB0_256:                            // %oksrem10945
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3717, [%rd21];
	ld.shared.u32 	%r3716, [%rd22];
	ld.shared.u32 	%r3715, [%rd23];
	ld.shared.u32 	%r3714, [%rd24];
$L__BB0_189:                            // %L25202
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3453, %r3450}, {%r505, %r508}, {%r3717}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3462, %r3459}, {%r505, %r508}, {%r3716}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3471, %r3468}, {%r505, %r508}, {%r3715}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3480, %r3477}, {%r505, %r508}, {%r3714}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3446, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3448, %r3446, %r3450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3451, %r557, %r3453, %r3448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3455, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3457, %r3455, %r3459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3460, %r557, %r3462, %r3457;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3464, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3466, %r3464, %r3468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r557, %r3471, %r3466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3473, %r560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3475, %r3473, %r3477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r557, %r3480, %r3475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3482, %r560, %r3453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3485, %r557, %r3450, %r3482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3489, %r560, %r3462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3492, %r557, %r3459, %r3489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3496, %r560, %r3471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r557, %r3468, %r3496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3503, %r560, %r3480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r557, %r3477, %r3503;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3551, %r3554}, {%r601, %r607, %r604, %r610}, {%r3451, %r3485}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3570, %r3573}, {%r601, %r607, %r604, %r610}, {%r3460, %r3492}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3558, %r3562}, {%r601, %r607, %r604, %r610}, {%r3469, %r3499}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3577, %r3581}, {%r601, %r607, %r604, %r610}, {%r3478, %r3506}, {%r2876, %r2876};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r3551, %r3551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r3554, %r3554, %r3550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3557, %r3558, %r3558, %r3553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r3562, %r3562, %r3557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3676, %r1819, %r3561, %r3394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3569, %r3570, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3572, %r3573, %r3573, %r3569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3576, %r3577, %r3577, %r3572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3580, %r3581, %r3581, %r3576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3675, %r1819, %r3580, %r3413;
	// end inline asm
	add.s32 	%r3673, %r3673, 4;
	setp.eq.s32 	%p302, %r3673, 256;
	@%p302 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_192;
$L__BB0_190:                            // %pass11424
                                        //   in Loop: Header=BB0_185 Depth=2
	@%p88 bra 	$L__BB0_191;
// %bb.257:                             // %pass11434
                                        //   in Loop: Header=BB0_185 Depth=2
	mul.lo.s32 	%r3588, %r3674, 589824;
	add.s32 	%r3589, %r119, %r3588;
	cvt.s64.s32 	%rd264, %r3589;
	add.s64 	%rd265, %rd264, %rd11;
	mul.hi.s64 	%rd266, %rd265, 1024819115206086201;
	shr.u64 	%rd267, %rd266, 63;
	shr.s64 	%rd268, %rd266, 24;
	add.s64 	%rd269, %rd268, %rd267;
	setp.lt.s64 	%p304, %rd265, 0;
	mul.lo.s64 	%rd270, %rd269, 301989888;
	setp.ne.s64 	%p305, %rd270, %rd265;
	and.pred  	%p306, %p304, %p305;
	selp.s64 	%rd271, -1, 0, %p306;
	add.s64 	%rd272, %rd269, %rd271;
	mul.lo.s64 	%rd273, %rd272, -301989888;
	add.s64 	%rd274, %rd273, %rd265;
	shl.b64 	%rd275, %rd274, 2;
	add.s64 	%rd276, %rd4, %rd275;
	st.global.u32 	[%rd276], %r3676;
	add.s32 	%r3590, %r120, %r3588;
	cvt.s64.s32 	%rd277, %r3590;
	add.s64 	%rd278, %rd277, %rd11;
	mul.hi.s64 	%rd279, %rd278, 1024819115206086201;
	shr.u64 	%rd280, %rd279, 63;
	shr.s64 	%rd281, %rd279, 24;
	add.s64 	%rd282, %rd281, %rd280;
	setp.lt.s64 	%p307, %rd278, 0;
	mul.lo.s64 	%rd283, %rd282, 301989888;
	setp.ne.s64 	%p308, %rd283, %rd278;
	and.pred  	%p309, %p307, %p308;
	selp.s64 	%rd284, -1, 0, %p309;
	add.s64 	%rd285, %rd282, %rd284;
	mul.lo.s64 	%rd286, %rd285, -301989888;
	add.s64 	%rd287, %rd286, %rd278;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3675;
	bra.uni 	$L__BB0_191;
$L__BB0_194:                            // %L25770
	mov.u32 	%r3592, 0;
	st.global.u32 	[%rd6], %r3592;
	ret;
$L__BB0_151:                            // %L7480
	mov.u32 	%r3616, 5;
	st.global.u32 	[%rd6], %r3616;
	mov.u64 	%rd336, exception2191;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7640
	mov.u32 	%r3615, 5;
	st.global.u32 	[%rd6], %r3615;
	mov.u64 	%rd334, exception2191;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7800
	mov.u32 	%r3614, 5;
	st.global.u32 	[%rd6], %r3614;
	mov.u64 	%rd332, exception2191;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7960
	mov.u32 	%r3613, 5;
	st.global.u32 	[%rd6], %r3613;
	mov.u64 	%rd330, exception2191;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8120
	mov.u32 	%r3612, 5;
	st.global.u32 	[%rd6], %r3612;
	mov.u64 	%rd328, exception2191;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8280
	mov.u32 	%r3611, 5;
	st.global.u32 	[%rd6], %r3611;
	mov.u64 	%rd326, exception2191;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8440
	mov.u32 	%r3610, 5;
	st.global.u32 	[%rd6], %r3610;
	mov.u64 	%rd324, exception2191;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8600
	mov.u32 	%r3609, 5;
	st.global.u32 	[%rd6], %r3609;
	mov.u64 	%rd322, exception2191;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8760
	mov.u32 	%r3608, 5;
	st.global.u32 	[%rd6], %r3608;
	mov.u64 	%rd320, exception2191;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8920
	mov.u32 	%r3607, 5;
	st.global.u32 	[%rd6], %r3607;
	mov.u64 	%rd318, exception2191;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L9080
	mov.u32 	%r3606, 5;
	st.global.u32 	[%rd6], %r3606;
	mov.u64 	%rd316, exception2191;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9240
	mov.u32 	%r3605, 5;
	st.global.u32 	[%rd6], %r3605;
	mov.u64 	%rd314, exception2191;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9400
	mov.u32 	%r3604, 5;
	st.global.u32 	[%rd6], %r3604;
	mov.u64 	%rd312, exception2191;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9560
	mov.u32 	%r3603, 5;
	st.global.u32 	[%rd6], %r3603;
	mov.u64 	%rd310, exception2191;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9720
	mov.u32 	%r3602, 5;
	st.global.u32 	[%rd6], %r3602;
	mov.u64 	%rd308, exception2191;
	cvta.global.u64 	%rd309, %rd308;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd309;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9880
	mov.u32 	%r3601, 5;
	st.global.u32 	[%rd6], %r3601;
	mov.u64 	%rd306, exception2191;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L10040
	mov.u32 	%r3600, 5;
	st.global.u32 	[%rd6], %r3600;
	mov.u64 	%rd304, exception2191;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10200
	mov.u32 	%r3599, 5;
	st.global.u32 	[%rd6], %r3599;
	mov.u64 	%rd302, exception2191;
	cvta.global.u64 	%rd303, %rd302;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd303;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10360
	mov.u32 	%r3598, 5;
	st.global.u32 	[%rd6], %r3598;
	mov.u64 	%rd300, exception2191;
	cvta.global.u64 	%rd301, %rd300;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd301;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10520
	mov.u32 	%r3597, 5;
	st.global.u32 	[%rd6], %r3597;
	mov.u64 	%rd298, exception2191;
	cvta.global.u64 	%rd299, %rd298;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd299;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10680
	mov.u32 	%r3596, 5;
	st.global.u32 	[%rd6], %r3596;
	mov.u64 	%rd296, exception2191;
	cvta.global.u64 	%rd297, %rd296;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd297;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10866
	mov.u32 	%r3595, 5;
	st.global.u32 	[%rd6], %r3595;
	mov.u64 	%rd294, exception2191;
	cvta.global.u64 	%rd295, %rd294;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd295;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L11026
	mov.u32 	%r3594, 5;
	st.global.u32 	[%rd6], %r3594;
	mov.u64 	%rd292, exception2191;
	cvta.global.u64 	%rd293, %rd292;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd293;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11186
	mov.u32 	%r3593, 5;
	st.global.u32 	[%rd6], %r3593;
	mov.u64 	%rd290, exception2191;
	cvta.global.u64 	%rd291, %rd290;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd291;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3618, 2;
	st.global.u32 	[%rd6], %r3618;
	mov.u64 	%rd340, exception2191;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L312
	mov.u32 	%r3617, 3;
	st.global.u32 	[%rd6], %r3617;
	mov.u64 	%rd338, exception2191;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1149
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r4, %r2};
	st.local.v2.u32 	[%rd5+8], {%r1, %r82};
	st.local.u32 	[%rd5+16], %r83;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r621, [retval0+0];
	} // callseq 61
	mov.u32 	%r623, 4;
	st.global.u32 	[%rd6], %r623;
	mov.u64 	%rd39, exception2191;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
