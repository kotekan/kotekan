// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3856[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<316>;
	.reg .b16 	%rs<231>;
	.reg .b32 	%r<3799>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<374>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r386, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r395, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r395, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd42, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r387, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r396, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r397, %r396, %r2;
	add.s32 	%r398, %r397, %r4;
	mul.wide.u32 	%rd49, %r398, 4;
	add.s64 	%rd6, %rd42, %rd49;
	mov.u32 	%r399, 1;
	st.global.u32 	[%rd6], %r399;
	setp.gt.u32 	%p4, %r387, 32767;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r388, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r388, %r387;
	setp.gt.s32 	%p6, %r388, 65535;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r389, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r388, %r387;
	mad.lo.s32 	%r400, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r401, %r400, %r400, 4;
	setp.gt.u32 	%p8, %r401, 89478484;
	setp.gt.u32 	%p9, %r389, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r390, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r390, %r389;
	setp.lt.s32 	%p12, %r390, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r402, %r390, %r389;
	mul.hi.s32 	%r403, %r5, 715827883;
	shr.u32 	%r404, %r403, 31;
	shr.s32 	%r405, %r403, 5;
	add.s32 	%r406, %r405, %r404;
	setp.eq.s32 	%p14, %r402, %r406;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r391, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r391, 0;
	@%p15 bra 	$L__BB0_12;
// %bb.9:                               // %L260
	ld.param.u32 	%r393, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r392, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r392, %r391;
	setp.gt.s32 	%p17, %r392, 48;
	or.pred  	%p18, %p16, %p17;
	setp.lt.s32 	%p19, %r393, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r394, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r394, %r393;
	setp.gt.s32 	%p22, %r394, 512;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r407, %r394, %r393;
	sub.s32 	%r408, %r392, %r391;
	setp.eq.s32 	%p24, %r407, %r408;
	@%p24 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_12;
$L__BB0_196:                            // %pass162
	and.b32  	%r252, %r2, 3;
	shr.u32 	%r253, %r2, 2;
	mul.lo.s32 	%r409, %r252, %r253;
	and.b32  	%r410, %r409, 7;
	cvt.rn.f32.s32 	%f201, %r410;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p25, %f785, 0f40000000;
	setp.gtu.f32 	%p315, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p25 bra 	$L__BB0_208;
// %bb.197:
	@%p315 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_198;
$L__BB0_204:
	mov.b32 	%r255, %f785;
	and.b32  	%r411, %r255, 8388607;
	or.b32  	%r3794, %r411, 1065353216;
	mov.b32 	%f780, %r3794;
	add.s32 	%r412, %r255, -1073741824;
	and.b32  	%r3795, %r412, -8388608;
	setp.eq.s32 	%p32, %r3795, 0;
	@%p32 bra 	$L__BB0_207;
// %bb.205:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_206:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r413, %r3795, 192937984;
	add.s32 	%r414, %r3794, %r413;
	mov.b32 	%f213, %r414;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3795, %r3795, %r413;
	mov.b32 	%r3794, %f780;
	setp.ne.s32 	%p33, %r3795, 0;
	setp.ne.s32 	%p34, %r3794, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_206;
$L__BB0_207:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p36, %r255, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_208;
$L__BB0_198:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r254, %f172;
	setp.lt.u32 	%p27, %r254, 1073741824;
	@%p27 bra 	$L__BB0_203;
// %bb.199:
	setp.lt.u32 	%p28, %r254, -2147483647;
	@%p28 bra 	$L__BB0_201;
// %bb.200:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p31, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p31;
	bra.uni 	$L__BB0_203;
$L__BB0_201:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p29, %f172, 0f40800000;
	@%p29 bra 	$L__BB0_203;
// %bb.202:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p30, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p30;
$L__BB0_203:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_208:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p37, %f222, 0f7F800000;
	mov.b32 	%r415, %f169;
	and.b32  	%r262, %r415, -2147483648;
	@%p37 bra 	$L__BB0_210;
// %bb.209:
	mov.b32 	%r416, %f781;
	or.b32  	%r417, %r262, %r416;
	mov.b32 	%f781, %r417;
$L__BB0_210:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r265, %r2, 1;
	and.b32  	%r266, %r265, 6;
	or.b32  	%r267, %r266, 1;
	setp.eq.s32 	%p45, %r266, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3695, %r266, %r253;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p45 bra 	$L__BB0_28;
// %bb.13:                              // %L487
	cvt.u16.u32 	%rs1, %r3695;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p46, %f733, 0f40000000;
	@%p46 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p47, %f733, 0f4B800000;
	@%p47 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r7, %f733;
	and.b32  	%r433, %r7, 8388607;
	or.b32  	%r3697, %r433, 1065353216;
	mov.b32 	%f732, %r3697;
	add.s32 	%r434, %r7, -1073741824;
	and.b32  	%r3698, %r434, -8388608;
	setp.eq.s32 	%p53, %r3698, 0;
	@%p53 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1020.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1020
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r435, %r3698, 192937984;
	add.s32 	%r436, %r3697, %r435;
	mov.b32 	%f267, %r436;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3698, %r3698, %r435;
	mov.b32 	%r3697, %f732;
	setp.ne.s32 	%p54, %r3698, 0;
	setp.ne.s32 	%p55, %r3697, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1022
	setp.gt.u32 	%p57, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i999
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p48, %r6, 1073741824;
	@%p48 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p49, %r6, -2147483647;
	@%p49 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p52, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p52;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p50, %f4, 0f40800000;
	@%p50 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1003
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p51, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p51;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1006
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1025
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p58, %f276, 0f7F800000;
	@%p58 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r437, %f1;
	and.b32  	%r438, %r437, -2147483648;
	mov.b32 	%r439, %f733;
	or.b32  	%r440, %r438, %r439;
	mov.b32 	%f733, %r440;
$L__BB0_27:                             // %__nv_fmodf.exit1026
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r441, %f277;
	and.b32  	%r442, %r441, -2147483648;
	or.b32  	%r443, %r442, 1056964608;
	mov.b32 	%f278, %r443;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p59, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p59;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p60, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p60;
	cvt.rzi.s32.f32 	%r444, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r445, %r444, 1;
	setp.eq.b32 	%p61, %r445, 1;
	selp.f32 	%f296, %f294, %f295, %p61;
	selp.f32 	%f297, %f295, %f294, %p61;
	and.b32  	%r446, %r444, 2;
	setp.eq.s32 	%p62, %r446, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p62;
	add.s32 	%r447, %r444, 1;
	and.b32  	%r448, %r447, 2;
	setp.eq.s32 	%p63, %r448, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p63;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p64, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p64;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p65, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p65;
$L__BB0_28:                             // %L521
	setp.gt.u32 	%p66, %r267, 5;
	mul.lo.s32 	%r3696, %r267, %r253;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p66 bra 	$L__BB0_44;
// %bb.29:                              // %L525
	mul.hi.u32 	%r450, %r3696, -1431655765;
	shr.u32 	%r451, %r450, 5;
	mul.lo.s32 	%r452, %r451, 48;
	sub.s32 	%r453, %r3696, %r452;
	cvt.rn.f32.s32 	%f308, %r453;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p67, %f739, 0f40000000;
	@%p67 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p68, %f739, 0f4B800000;
	@%p68 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r15, %f739;
	and.b32  	%r454, %r15, 8388607;
	or.b32  	%r3699, %r454, 1065353216;
	mov.b32 	%f738, %r3699;
	add.s32 	%r455, %r15, -1073741824;
	and.b32  	%r3700, %r455, -8388608;
	setp.eq.s32 	%p74, %r3700, 0;
	@%p74 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1051.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1051
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r456, %r3700, 192937984;
	add.s32 	%r457, %r3699, %r456;
	mov.b32 	%f320, %r457;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3700, %r3700, %r456;
	mov.b32 	%r3699, %f738;
	setp.ne.s32 	%p75, %r3700, 0;
	setp.ne.s32 	%p76, %r3699, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1053
	setp.gt.u32 	%p78, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i1030
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p69, %r14, 1073741824;
	@%p69 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p70, %r14, -2147483647;
	@%p70 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p73, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p73;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p71, %f25, 0f40800000;
	@%p71 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i1034
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p72, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p72;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1037
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1056
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p79, %f329, 0f7F800000;
	@%p79 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r458, %f22;
	and.b32  	%r459, %r458, -2147483648;
	mov.b32 	%r460, %f739;
	or.b32  	%r461, %r459, %r460;
	mov.b32 	%f739, %r461;
$L__BB0_43:                             // %__nv_fmodf.exit1057
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r462, %f330;
	and.b32  	%r463, %r462, -2147483648;
	or.b32  	%r464, %r463, 1056964608;
	mov.b32 	%f331, %r464;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p80, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p80;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p81, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p81;
	cvt.rzi.s32.f32 	%r465, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r466, %r465, 1;
	setp.eq.b32 	%p82, %r466, 1;
	selp.f32 	%f349, %f347, %f348, %p82;
	selp.f32 	%f350, %f348, %f347, %p82;
	and.b32  	%r467, %r465, 2;
	setp.eq.s32 	%p83, %r467, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p83;
	add.s32 	%r468, %r465, 1;
	and.b32  	%r469, %r468, 2;
	setp.eq.s32 	%p84, %r469, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p84;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p85, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p85;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p86, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p86;
$L__BB0_44:                             // %L559
	setp.gt.u32 	%p88, %r2, 23;
	or.pred  	%p1, %p45, %p88;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L597
	cvt.u16.u32 	%rs8, %r3695;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p89, %f745, 0f40000000;
	@%p89 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p90, %f745, 0f4B800000;
	@%p90 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r25, %f745;
	and.b32  	%r477, %r25, 8388607;
	or.b32  	%r3701, %r477, 1065353216;
	mov.b32 	%f744, %r3701;
	add.s32 	%r478, %r25, -1073741824;
	and.b32  	%r3702, %r478, -8388608;
	setp.eq.s32 	%p96, %r3702, 0;
	@%p96 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1082.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1082
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r479, %r3702, 192937984;
	add.s32 	%r480, %r3701, %r479;
	mov.b32 	%f373, %r480;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3702, %r3702, %r479;
	mov.b32 	%r3701, %f744;
	setp.ne.s32 	%p97, %r3702, 0;
	setp.ne.s32 	%p98, %r3701, 0;
	and.pred  	%p99, %p97, %p98;
	@%p99 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1084
	setp.gt.u32 	%p100, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p100;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1061
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p91, %r24, 1073741824;
	@%p91 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p92, %r24, -2147483647;
	@%p92 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p95, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p95;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p93, %f46, 0f40800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1065
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p94, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p94;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1068
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1087
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p101, %f382, 0f7F800000;
	@%p101 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r481, %f43;
	and.b32  	%r482, %r481, -2147483648;
	mov.b32 	%r483, %f745;
	or.b32  	%r484, %r482, %r483;
	mov.b32 	%f745, %r484;
$L__BB0_59:                             // %__nv_fmodf.exit1088
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r485, %f383;
	and.b32  	%r486, %r485, -2147483648;
	or.b32  	%r487, %r486, 1056964608;
	mov.b32 	%f384, %r487;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p102, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p102;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p103, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p103;
	cvt.rzi.s32.f32 	%r488, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r489, %r488, 1;
	setp.eq.b32 	%p104, %r489, 1;
	selp.f32 	%f402, %f400, %f401, %p104;
	selp.f32 	%f403, %f401, %f400, %p104;
	and.b32  	%r490, %r488, 2;
	setp.eq.s32 	%p105, %r490, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p105;
	add.s32 	%r491, %r488, 1;
	and.b32  	%r492, %r491, 2;
	setp.eq.s32 	%p106, %r492, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p106;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p107, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p107;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p108, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p108;
$L__BB0_60:                             // %L631
	or.pred  	%p2, %p66, %p88;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L639
	mul.hi.u32 	%r494, %r3696, -1431655765;
	shr.u32 	%r495, %r494, 2;
	mul.lo.s32 	%r496, %r495, 6;
	sub.s32 	%r497, %r3696, %r496;
	cvt.rn.f32.s32 	%f414, %r497;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p111, %f751, 0f40000000;
	@%p111 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p112, %f751, 0f4B800000;
	@%p112 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r33, %f751;
	and.b32  	%r498, %r33, 8388607;
	or.b32  	%r3703, %r498, 1065353216;
	mov.b32 	%f750, %r3703;
	add.s32 	%r499, %r33, -1073741824;
	and.b32  	%r3704, %r499, -8388608;
	setp.eq.s32 	%p118, %r3704, 0;
	@%p118 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1113.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1113
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r500, %r3704, 192937984;
	add.s32 	%r501, %r3703, %r500;
	mov.b32 	%f426, %r501;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3704, %r3704, %r500;
	mov.b32 	%r3703, %f750;
	setp.ne.s32 	%p119, %r3704, 0;
	setp.ne.s32 	%p120, %r3703, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1115
	setp.gt.u32 	%p122, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1092
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p113, %r32, 1073741824;
	@%p113 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p114, %r32, -2147483647;
	@%p114 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p117, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p117;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p115, %f67, 0f40800000;
	@%p115 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1096
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p116, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p116;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1099
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1118
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p123, %f435, 0f7F800000;
	@%p123 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r502, %f64;
	and.b32  	%r503, %r502, -2147483648;
	mov.b32 	%r504, %f751;
	or.b32  	%r505, %r503, %r504;
	mov.b32 	%f751, %r505;
$L__BB0_75:                             // %__nv_fmodf.exit1119
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r506, %f436;
	and.b32  	%r507, %r506, -2147483648;
	or.b32  	%r508, %r507, 1056964608;
	mov.b32 	%f437, %r508;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p124, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p124;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p125, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p125;
	cvt.rzi.s32.f32 	%r509, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r510, %r509, 1;
	setp.eq.b32 	%p126, %r510, 1;
	selp.f32 	%f455, %f453, %f454, %p126;
	selp.f32 	%f456, %f454, %f453, %p126;
	and.b32  	%r511, %r509, 2;
	setp.eq.s32 	%p127, %r511, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p127;
	add.s32 	%r512, %r509, 1;
	and.b32  	%r513, %r512, 2;
	setp.eq.s32 	%p128, %r513, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p128;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p129, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p129;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p130, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p130;
$L__BB0_76:                             // %L673
	@%p25 bra 	$L__BB0_218;
// %bb.77:
	@%p315 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_78;
$L__BB0_214:
	mov.b32 	%r269, %f785;
	and.b32  	%r526, %r269, 8388607;
	or.b32  	%r3796, %r526, 1065353216;
	mov.b32 	%f784, %r3796;
	add.s32 	%r527, %r269, -1073741824;
	and.b32  	%r3797, %r527, -8388608;
	setp.eq.s32 	%p138, %r3797, 0;
	@%p138 bra 	$L__BB0_217;
// %bb.215:                             // %__nv_fmaf_rn.exit4.i.i.i1144.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_216:                            // %__nv_fmaf_rn.exit4.i.i.i1144
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r528, %r3797, 192937984;
	add.s32 	%r529, %r3796, %r528;
	mov.b32 	%f476, %r529;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3797, %r3797, %r528;
	mov.b32 	%r3796, %f784;
	setp.ne.s32 	%p139, %r3797, 0;
	setp.ne.s32 	%p140, %r3796, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_216;
$L__BB0_217:                            // %__internal_fmodf_slowpath_mod.exit.i.i1146
	setp.gt.u32 	%p142, %r269, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_218;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1123
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r268, %f187;
	setp.lt.u32 	%p133, %r268, 1073741824;
	@%p133 bra 	$L__BB0_213;
// %bb.79:
	setp.lt.u32 	%p134, %r268, -2147483647;
	@%p134 bra 	$L__BB0_211;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p137, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p137;
	bra.uni 	$L__BB0_213;
$L__BB0_211:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p135, %f187, 0f40800000;
	@%p135 bra 	$L__BB0_213;
// %bb.212:                             // %__nv_fmaf_rn.exit.i.i.i1127
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p136, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p136;
$L__BB0_213:                            // %__internal_fmodf_fastpath_quot.exit.i.i1130
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_218:                            // %__internal_fmodf_kernel.exit.i1149
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p143, %f485, 0f7F800000;
	@%p143 bra 	$L__BB0_220;
// %bb.219:
	mov.b32 	%r530, %f785;
	or.b32  	%r531, %r262, %r530;
	mov.b32 	%f785, %r531;
$L__BB0_220:                            // %__nv_fmodf.exit1150
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p45 bra 	$L__BB0_96;
// %bb.81:                              // %L775
	cvt.u16.u32 	%rs15, %r3695;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p152, %f757, 0f40000000;
	@%p152 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p153, %f757, 0f4B800000;
	@%p153 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r45, %f757;
	and.b32  	%r547, %r45, 8388607;
	or.b32  	%r3705, %r547, 1065353216;
	mov.b32 	%f756, %r3705;
	add.s32 	%r548, %r45, -1073741824;
	and.b32  	%r3706, %r548, -8388608;
	setp.eq.s32 	%p159, %r3706, 0;
	@%p159 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1175.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1175
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r549, %r3706, 192937984;
	add.s32 	%r550, %r3705, %r549;
	mov.b32 	%f530, %r550;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3706, %r3706, %r549;
	mov.b32 	%r3705, %f756;
	setp.ne.s32 	%p160, %r3706, 0;
	setp.ne.s32 	%p161, %r3705, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1177
	setp.gt.u32 	%p163, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1154
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p154, %r44, 1073741824;
	@%p154 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p155, %r44, -2147483647;
	@%p155 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p158;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1158
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p157;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1161
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1180
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p164, %f539, 0f7F800000;
	@%p164 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r551, %f85;
	and.b32  	%r552, %r551, -2147483648;
	mov.b32 	%r553, %f757;
	or.b32  	%r554, %r552, %r553;
	mov.b32 	%f757, %r554;
$L__BB0_95:                             // %__nv_fmodf.exit1181
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r555, %f540;
	and.b32  	%r556, %r555, -2147483648;
	or.b32  	%r557, %r556, 1056964608;
	mov.b32 	%f541, %r557;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p165, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p165;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p166, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p166;
	cvt.rzi.s32.f32 	%r558, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r559, %r558, 1;
	setp.eq.b32 	%p167, %r559, 1;
	selp.f32 	%f559, %f557, %f558, %p167;
	selp.f32 	%f560, %f558, %f557, %p167;
	and.b32  	%r560, %r558, 2;
	setp.eq.s32 	%p168, %r560, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p168;
	add.s32 	%r561, %r558, 1;
	and.b32  	%r562, %r561, 2;
	setp.eq.s32 	%p169, %r562, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p169;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p170, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p170;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p171, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p171;
$L__BB0_96:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p66 bra 	$L__BB0_112;
// %bb.97:                              // %L813
	mul.hi.u32 	%r564, %r3696, -1431655765;
	shr.u32 	%r565, %r564, 5;
	mul.lo.s32 	%r566, %r565, 48;
	sub.s32 	%r567, %r3696, %r566;
	cvt.rn.f32.s32 	%f571, %r567;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p173, %f763, 0f40000000;
	@%p173 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p174, %f763, 0f4B800000;
	@%p174 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r53, %f763;
	and.b32  	%r568, %r53, 8388607;
	or.b32  	%r3707, %r568, 1065353216;
	mov.b32 	%f762, %r3707;
	add.s32 	%r569, %r53, -1073741824;
	and.b32  	%r3708, %r569, -8388608;
	setp.eq.s32 	%p180, %r3708, 0;
	@%p180 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1206.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1206
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r570, %r3708, 192937984;
	add.s32 	%r571, %r3707, %r570;
	mov.b32 	%f583, %r571;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3708, %r3708, %r570;
	mov.b32 	%r3707, %f762;
	setp.ne.s32 	%p181, %r3708, 0;
	setp.ne.s32 	%p182, %r3707, 0;
	and.pred  	%p183, %p181, %p182;
	@%p183 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1208
	setp.gt.u32 	%p184, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p184;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1185
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p175, %r52, 1073741824;
	@%p175 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p176, %r52, -2147483647;
	@%p176 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p179, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p179;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p177, %f109, 0f40800000;
	@%p177 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1189
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p178, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p178;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1192
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1211
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p185, %f592, 0f7F800000;
	@%p185 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r572, %f106;
	and.b32  	%r573, %r572, -2147483648;
	mov.b32 	%r574, %f763;
	or.b32  	%r575, %r573, %r574;
	mov.b32 	%f763, %r575;
$L__BB0_111:                            // %__nv_fmodf.exit1212
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r576, %f593;
	and.b32  	%r577, %r576, -2147483648;
	or.b32  	%r578, %r577, 1056964608;
	mov.b32 	%f594, %r578;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p186, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p186;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p187, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p187;
	cvt.rzi.s32.f32 	%r579, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r580, %r579, 1;
	setp.eq.b32 	%p188, %r580, 1;
	selp.f32 	%f612, %f610, %f611, %p188;
	selp.f32 	%f613, %f611, %f610, %p188;
	and.b32  	%r581, %r579, 2;
	setp.eq.s32 	%p189, %r581, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p189;
	add.s32 	%r582, %r579, 1;
	and.b32  	%r583, %r582, 2;
	setp.eq.s32 	%p190, %r583, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p190;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p191, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p191;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p192, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p192;
$L__BB0_112:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L885
	cvt.u16.u32 	%rs22, %r3695;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p193, %f769, 0f40000000;
	@%p193 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p194, %f769, 0f4B800000;
	@%p194 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r63, %f769;
	and.b32  	%r591, %r63, 8388607;
	or.b32  	%r3709, %r591, 1065353216;
	mov.b32 	%f768, %r3709;
	add.s32 	%r592, %r63, -1073741824;
	and.b32  	%r3710, %r592, -8388608;
	setp.eq.s32 	%p200, %r3710, 0;
	@%p200 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1237.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1237
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r593, %r3710, 192937984;
	add.s32 	%r594, %r3709, %r593;
	mov.b32 	%f636, %r594;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3710, %r3710, %r593;
	mov.b32 	%r3709, %f768;
	setp.ne.s32 	%p201, %r3710, 0;
	setp.ne.s32 	%p202, %r3709, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1239
	setp.gt.u32 	%p204, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1216
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p195, %r62, 1073741824;
	@%p195 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p196, %r62, -2147483647;
	@%p196 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p199, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p199;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p197, %f130, 0f40800000;
	@%p197 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1220
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p198, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p198;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1223
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1242
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p205, %f645, 0f7F800000;
	@%p205 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r595, %f127;
	and.b32  	%r596, %r595, -2147483648;
	mov.b32 	%r597, %f769;
	or.b32  	%r598, %r596, %r597;
	mov.b32 	%f769, %r598;
$L__BB0_127:                            // %__nv_fmodf.exit1243
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r599, %f646;
	and.b32  	%r600, %r599, -2147483648;
	or.b32  	%r601, %r600, 1056964608;
	mov.b32 	%f647, %r601;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p206, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p206;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p207, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p207;
	cvt.rzi.s32.f32 	%r602, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r603, %r602, 1;
	setp.eq.b32 	%p208, %r603, 1;
	selp.f32 	%f665, %f663, %f664, %p208;
	selp.f32 	%f666, %f664, %f663, %p208;
	and.b32  	%r604, %r602, 2;
	setp.eq.s32 	%p209, %r604, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p209;
	add.s32 	%r605, %r602, 1;
	and.b32  	%r606, %r605, 2;
	setp.eq.s32 	%p210, %r606, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p210;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p211, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p211;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p212, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p212;
$L__BB0_128:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L927
	mul.hi.u32 	%r608, %r3696, -1431655765;
	shr.u32 	%r609, %r608, 2;
	mul.lo.s32 	%r610, %r609, 6;
	sub.s32 	%r611, %r3696, %r610;
	cvt.rn.f32.s32 	%f677, %r611;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p213, %f775, 0f40000000;
	@%p213 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p214, %f775, 0f4B800000;
	@%p214 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r71, %f775;
	and.b32  	%r612, %r71, 8388607;
	or.b32  	%r3711, %r612, 1065353216;
	mov.b32 	%f774, %r3711;
	add.s32 	%r613, %r71, -1073741824;
	and.b32  	%r3712, %r613, -8388608;
	setp.eq.s32 	%p220, %r3712, 0;
	@%p220 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1268.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1268
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r614, %r3712, 192937984;
	add.s32 	%r615, %r3711, %r614;
	mov.b32 	%f689, %r615;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3712, %r3712, %r614;
	mov.b32 	%r3711, %f774;
	setp.ne.s32 	%p221, %r3712, 0;
	setp.ne.s32 	%p222, %r3711, 0;
	and.pred  	%p223, %p221, %p222;
	@%p223 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1270
	setp.gt.u32 	%p224, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p224;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1247
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p215, %r70, 1073741824;
	@%p215 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p216, %r70, -2147483647;
	@%p216 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p219, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p219;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p217, %f151, 0f40800000;
	@%p217 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1251
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p218, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p218;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1254
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1273
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p225, %f698, 0f7F800000;
	@%p225 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r616, %f148;
	and.b32  	%r617, %r616, -2147483648;
	mov.b32 	%r618, %f775;
	or.b32  	%r619, %r617, %r618;
	mov.b32 	%f775, %r619;
$L__BB0_143:                            // %__nv_fmodf.exit1274
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r620, %f699;
	and.b32  	%r621, %r620, -2147483648;
	or.b32  	%r622, %r621, 1056964608;
	mov.b32 	%f700, %r622;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p226, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p226;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p227, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p227;
	cvt.rzi.s32.f32 	%r623, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r624, %r623, 1;
	setp.eq.b32 	%p228, %r624, 1;
	selp.f32 	%f718, %f716, %f717, %p228;
	selp.f32 	%f719, %f717, %f716, %p228;
	and.b32  	%r625, %r623, 2;
	setp.eq.s32 	%p229, %r625, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p229;
	add.s32 	%r626, %r623, 1;
	and.b32  	%r627, %r626, 2;
	setp.eq.s32 	%p230, %r627, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p230;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p231, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p231;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p232, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p232;
$L__BB0_144:                            // %L961
	mov.u32 	%r278, 999999999;
	cvt.u16.u32 	%rs230, %r2;
	@%p88 bra 	$L__BB0_222;
// %bb.145:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs230, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs230, %rs33;
	cvt.u32.u16 	%r641, %rs34;
	and.b32  	%r642, %r641, 255;
	mad.lo.s32 	%r643, %r642, 24, %r3;
	cvt.u16.u32 	%rs35, %r643;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r644, %rs39;
	mul.wide.u32 	%rd50, %r644, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r645, [%rd51];
	shl.b32 	%r646, %r645, 16;
	cvt.s32.s16 	%r82, %r645;
	shr.s32 	%r83, %r645, 16;
	or.b32  	%r647, %r646, 65535;
	setp.lt.u32 	%p234, %r647, 1638399;
	setp.lt.u32 	%p235, %r645, 1572864;
	and.pred  	%p236, %p234, %p235;
	@%p236 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_146;
$L__BB0_221:                            // %L1237
	mul.lo.s32 	%r651, %r83, 801;
	mad.lo.s32 	%r278, %r82, 33, %r651;
$L__BB0_222:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r424, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r425, %r424, -2147483648;
	mov.b32 	%r538, %f487;
	or.b32  	%r426, %r425, 1056964608;
	and.b32  	%r539, %r538, -2147483648;
	mov.b32 	%f225, %r426;
	or.b32  	%r540, %r539, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r540;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p38, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p38;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p39, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p145, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p39;
	selp.f32 	%f492, %f487, %f490, %p145;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p146, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p146;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r427, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r428, %r427, 1;
	cvt.rzi.s32.f32 	%r541, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p40, %r428, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r542, %r541, 1;
	selp.f32 	%f243, %f241, %f242, %p40;
	and.b32  	%r429, %r427, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p147, %r542, 1;
	setp.eq.s32 	%p41, %r429, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r430, %r427, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p147;
	and.b32  	%r543, %r541, 2;
	selp.f32 	%f244, %f242, %f241, %p40;
	selp.f32 	%f246, %f243, %f245, %p41;
	and.b32  	%r431, %r430, 2;
	setp.eq.f32 	%p43, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p148, %r543, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r544, %r541, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p42, %r431, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p43;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p147;
	selp.f32 	%f509, %f506, %f508, %p148;
	and.b32  	%r545, %r544, 2;
	setp.eq.f32 	%p150, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p42;
	setp.gt.f32 	%p44, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p149, %r545, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p150;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p44;
	selp.f32 	%f511, %f507, %f510, %p149;
	setp.gt.f32 	%p151, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r420, %f254;
	mov.b32 	%r423, %f251;
	selp.f32 	%f517, %f516, %f511, %p151;
	xor.b32  	%r419, %r423, -2147483648;
	mov.b32 	%r515, %f62;
	mov.b32 	%r516, %f83;
	mov.b32 	%r521, %f63;
	mov.b32 	%r522, %f84;
	mov.b32 	%r534, %f517;
	mov.b32 	%r537, %f514;
	mov.b32 	%r471, %f20;
	mov.b32 	%r472, %f41;
	mov.b32 	%r474, %f21;
	mov.b32 	%r475, %f42;
	xor.b32  	%r518, %r521, -2147483648;
	xor.b32  	%r519, %r522, -2147483648;
	xor.b32  	%r533, %r537, -2147483648;
	mov.b32 	%r585, %f104;
	mov.b32 	%r586, %f125;
	mov.b32 	%r588, %f105;
	mov.b32 	%r589, %f126;
	mov.b32 	%r629, %f146;
	mov.b32 	%r630, %f167;
	mov.b32 	%r635, %f147;
	xor.b32  	%r632, %r635, -2147483648;
	mov.b32 	%r636, %f168;
	xor.b32  	%r633, %r636, -2147483648;
	and.b32  	%r653, %r2, 24;
	setp.eq.s32 	%p237, %r653, 24;
	cvt.u16.u32 	%rs40, %r253;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs40, %rs43;
	cvt.u32.u16 	%r654, %rs44;
	and.b32  	%r279, %r654, 255;
	mov.u32 	%r117, 0;
	mov.u32 	%r85, %r117;
	mov.u32 	%r86, %r117;
	@%p237 bra 	$L__BB0_147;
// %bb.223:                             // %pass507
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r655, %r279, 24;
	mul.lo.s32 	%r656, %r252, 144;
	and.b32  	%r657, %r1, 15;
	mul.lo.s32 	%r658, %r657, 1152;
	add.s32 	%r659, %r656, %r3;
	add.s32 	%r660, %r659, %r658;
	add.s32 	%r661, %r660, %r655;
	mul.wide.u32 	%rd57, %r661, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.u32 	%r85, [%rd58];
	or.b32  	%r662, %r3, 576;
	add.s32 	%r663, %r662, %r656;
	add.s32 	%r664, %r663, %r658;
	add.s32 	%r665, %r664, %r655;
	mul.wide.u32 	%rd59, %r665, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.u32 	%r86, [%rd60];
$L__BB0_147:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r418, %r420, %r419;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r421, %r423, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r470, %r472, %r471;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r473, %r475, %r474;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r514, %r516, %r515;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r517, %r519, %r518;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r520, %r522, %r521;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r523, %r516, %r515;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r532, %r534, %r533;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r535, %r537, %r534;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r584, %r586, %r585;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r587, %r589, %r588;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r628, %r630, %r629;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r631, %r633, %r632;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r634, %r636, %r635;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r637, %r630, %r629;
	// end inline asm
	shl.b32 	%r667, %r391, 8;
	shl.b32 	%r668, %r2, 3;
	and.b32  	%r669, %r668, 128;
	shl.b32 	%r670, %r1, 8;
	shl.b32 	%r671, %r2, 2;
	and.b32  	%r672, %r671, 60;
	or.b32  	%r673, %r669, %r670;
	or.b32  	%r674, %r673, %r672;
	add.s32 	%r87, %r674, %r667;
	or.b32  	%r675, %r671, %r673;
	or.b32  	%r676, %r675, 64;
	add.s32 	%r88, %r667, %r676;
	add.s32 	%r89, %r3, 24;
	shr.u32 	%r677, %r2, 4;
	and.b32  	%r678, %r265, 30;
	or.b32  	%r679, %r678, %r677;
	mul.lo.s32 	%r90, %r679, 257;
	or.b32  	%r680, %r265, %r677;
	or.b32  	%r681, %r680, 32;
	mul.lo.s32 	%r91, %r681, 257;
	shr.u32 	%r682, %r3, 3;
	and.b16  	%rs46, %rs230, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 12;
	mul.lo.s16 	%rs49, %rs48, 24;
	sub.s16 	%rs50, %rs230, %rs49;
	cvt.u32.u16 	%r683, %rs50;
	and.b32  	%r92, %r683, 255;
	and.b32  	%r684, %r4, 224;
	mad.lo.s32 	%r93, %r682, 257, %r684;
	shr.u32 	%r685, %r89, 3;
	mad.lo.s32 	%r94, %r685, 257, %r684;
	add.s32 	%r686, %r3, 48;
	shr.u32 	%r687, %r686, 3;
	mad.lo.s32 	%r95, %r687, 257, %r684;
	add.s32 	%r688, %r3, 72;
	shr.u32 	%r689, %r688, 3;
	mad.lo.s32 	%r96, %r689, 257, %r684;
	or.b32  	%r690, %r682, 12;
	mad.lo.s32 	%r97, %r690, 257, %r684;
	add.s32 	%r691, %r3, 120;
	shr.u32 	%r692, %r691, 3;
	mad.lo.s32 	%r98, %r692, 257, %r684;
	add.s32 	%r693, %r3, 144;
	shr.u32 	%r694, %r693, 3;
	mad.lo.s32 	%r99, %r694, 257, %r684;
	add.s32 	%r695, %r3, 168;
	shr.u32 	%r696, %r695, 3;
	mad.lo.s32 	%r100, %r696, 257, %r684;
	or.b32  	%r697, %r682, 24;
	mad.lo.s32 	%r101, %r697, 257, %r684;
	add.s32 	%r698, %r3, 216;
	shr.u32 	%r699, %r698, 3;
	mad.lo.s32 	%r102, %r699, 257, %r684;
	add.s32 	%r700, %r3, 240;
	shr.u32 	%r701, %r700, 3;
	mad.lo.s32 	%r103, %r701, 257, %r684;
	add.s32 	%r702, %r3, 264;
	shr.u32 	%r703, %r702, 3;
	mad.lo.s32 	%r104, %r703, 257, %r684;
	or.b32  	%r704, %r682, 36;
	mad.lo.s32 	%r105, %r704, 257, %r684;
	add.s32 	%r705, %r3, 312;
	shr.u32 	%r706, %r705, 3;
	mad.lo.s32 	%r106, %r706, 257, %r684;
	add.s32 	%r707, %r3, 336;
	shr.u32 	%r708, %r707, 3;
	mad.lo.s32 	%r107, %r708, 257, %r684;
	add.s32 	%r709, %r3, 360;
	shr.u32 	%r710, %r709, 3;
	mad.lo.s32 	%r108, %r710, 257, %r684;
	or.b32  	%r711, %r682, 48;
	mad.lo.s32 	%r109, %r711, 257, %r684;
	add.s32 	%r712, %r3, 408;
	shr.u32 	%r713, %r712, 3;
	mad.lo.s32 	%r110, %r713, 257, %r684;
	add.s32 	%r714, %r3, 432;
	shr.u32 	%r715, %r714, 3;
	mad.lo.s32 	%r111, %r715, 257, %r684;
	add.s32 	%r716, %r3, 456;
	shr.u32 	%r717, %r716, 3;
	mad.lo.s32 	%r112, %r717, 257, %r684;
	or.b32  	%r718, %r682, 60;
	mad.lo.s32 	%r113, %r718, 257, %r684;
	add.s32 	%r719, %r3, 504;
	bfe.u32 	%r720, %r719, 3, 6;
	mad.lo.s32 	%r114, %r720, 257, %r684;
	mul.lo.s32 	%r721, %r3, 33;
	mad.lo.s32 	%r722, %r252, 4806, %r721;
	mad.lo.s32 	%r723, %r279, 801, %r722;
	bfe.s32 	%r724, %r2, 1, 1;
	and.b32  	%r725, %r724, 2056;
	mul.lo.s32 	%r726, %r677, 257;
	and.b32  	%r727, %r2, 1;
	neg.s32 	%r728, %r727;
	and.b32  	%r729, %r728, 4112;
	bfe.s32 	%r730, %r2, 3, 1;
	and.b32  	%r731, %r730, 514;
	bfe.s32 	%r732, %r2, 2, 1;
	and.b32  	%r733, %r732, 1028;
	add.s32 	%r734, %r726, %r3;
	add.s32 	%r735, %r734, %r725;
	add.s32 	%r736, %r735, %r729;
	add.s32 	%r737, %r736, %r731;
	add.s32 	%r738, %r737, %r733;
	mul.wide.u32 	%rd61, %r738, 4;
	mov.u64 	%rd62, shmem;
	add.s64 	%rd7, %rd62, %rd61;
	or.b32  	%r739, %r3, 8256;
	add.s32 	%r740, %r739, %r726;
	add.s32 	%r741, %r740, %r725;
	add.s32 	%r742, %r741, %r729;
	add.s32 	%r743, %r742, %r731;
	add.s32 	%r744, %r743, %r733;
	mul.wide.u32 	%rd63, %r744, 4;
	add.s64 	%rd8, %rd62, %rd63;
	or.b32  	%r745, %r3, 32;
	add.s32 	%r746, %r745, %r726;
	add.s32 	%r747, %r746, %r725;
	add.s32 	%r748, %r747, %r729;
	add.s32 	%r749, %r748, %r731;
	add.s32 	%r750, %r749, %r733;
	mul.wide.u32 	%rd64, %r750, 4;
	add.s64 	%rd9, %rd62, %rd64;
	or.b32  	%r751, %r3, 8288;
	add.s32 	%r752, %r751, %r726;
	add.s32 	%r753, %r752, %r725;
	add.s32 	%r754, %r753, %r729;
	add.s32 	%r755, %r754, %r731;
	add.s32 	%r756, %r755, %r733;
	mul.wide.u32 	%rd65, %r756, 4;
	add.s64 	%rd10, %rd62, %rd65;
	bfe.s32 	%r757, %r3, 2, 1;
	and.b32  	%r758, %r3, 4;
	setp.eq.s32 	%p238, %r758, 0;
	and.b32  	%r759, %r757, 2056;
	and.b32  	%r760, %r3, 1;
	neg.s32 	%r761, %r760;
	and.b32  	%r762, %r761, 8256;
	bfe.s32 	%r763, %r3, 1, 1;
	and.b32  	%r764, %r763, 4112;
	mul.lo.s32 	%r765, %r252, 6;
	shr.u32 	%r766, %r3, 4;
	bfe.s32 	%r767, %r3, 3, 1;
	and.b32  	%r768, %r3, 8;
	setp.eq.s32 	%p239, %r768, 0;
	and.b32  	%r769, %r767, 1028;
	mad.lo.s32 	%r770, %r766, 514, %r765;
	add.s32 	%r771, %r770, %r759;
	add.s32 	%r772, %r771, %r762;
	add.s32 	%r773, %r772, %r764;
	add.s32 	%r774, %r773, %r769;
	add.s32 	%r775, %r774, %r279;
	mul.wide.u32 	%rd66, %r775, 4;
	add.s64 	%rd11, %rd62, %rd66;
	shr.u32 	%r776, %r89, 5;
	bfe.s32 	%r777, %r89, 4, 1;
	and.b32  	%r778, %r777, 514;
	selp.b32 	%r779, 1028, 0, %p239;
	mad.lo.s32 	%r780, %r776, 257, %r765;
	add.s32 	%r781, %r780, %r759;
	add.s32 	%r782, %r781, %r762;
	add.s32 	%r783, %r782, %r764;
	add.s32 	%r784, %r783, %r779;
	add.s32 	%r785, %r784, %r279;
	add.s32 	%r786, %r785, %r778;
	mul.wide.u32 	%rd67, %r786, 4;
	add.s64 	%rd12, %rd62, %rd67;
	selp.b32 	%r787, 32, 2088, %p238;
	add.s32 	%r788, %r770, %r787;
	add.s32 	%r789, %r788, %r762;
	add.s32 	%r790, %r789, %r764;
	add.s32 	%r791, %r790, %r769;
	add.s32 	%r792, %r791, %r279;
	mul.wide.u32 	%rd68, %r792, 4;
	add.s64 	%rd13, %rd62, %rd68;
	add.s32 	%r793, %r786, 32;
	mul.wide.u32 	%rd69, %r793, 4;
	add.s64 	%rd14, %rd62, %rd69;
	mul.lo.s32 	%r794, %r389, 589824;
	mad.lo.s32 	%r795, %r393, 1152, %r794;
	mul.lo.s32 	%r796, %r1, 1152;
	mad.lo.s32 	%r797, %r3, 24, %r796;
	add.s32 	%r115, %r797, %r92;
	cvt.s64.s32 	%rd15, %r795;
	cvt.u16.u32 	%rs51, %r89;
	and.b16  	%rs52, %rs51, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r798, %rs56;
	and.b32  	%r799, %r798, 255;
	or.b32  	%r800, %r796, %r92;
	mad.lo.s32 	%r116, %r799, 24, %r800;
	mul.wide.u32 	%rd70, %r723, 4;
	add.s64 	%rd16, %rd62, %rd70;
	add.s32 	%r801, %r738, 64;
	mul.wide.u32 	%rd71, %r801, 4;
	add.s64 	%rd17, %rd62, %rd71;
	add.s32 	%r802, %r744, 64;
	mul.wide.u32 	%rd72, %r802, 4;
	add.s64 	%rd18, %rd62, %rd72;
	add.s32 	%r803, %r750, 64;
	mul.wide.u32 	%rd73, %r803, 4;
	add.s64 	%rd19, %rd62, %rd73;
	add.s32 	%r804, %r756, 64;
	mul.wide.u32 	%rd74, %r804, 4;
	add.s64 	%rd20, %rd62, %rd74;
	add.s32 	%r805, %r738, 128;
	mul.wide.u32 	%rd75, %r805, 4;
	add.s64 	%rd21, %rd62, %rd75;
	add.s32 	%r806, %r744, 128;
	mul.wide.u32 	%rd76, %r806, 4;
	add.s64 	%rd22, %rd62, %rd76;
	add.s32 	%r807, %r750, 128;
	mul.wide.u32 	%rd77, %r807, 4;
	add.s64 	%rd23, %rd62, %rd77;
	add.s32 	%r808, %r756, 128;
	mul.wide.u32 	%rd78, %r808, 4;
	add.s64 	%rd24, %rd62, %rd78;
	add.s32 	%r809, %r738, 192;
	mul.wide.u32 	%rd79, %r809, 4;
	add.s64 	%rd25, %rd62, %rd79;
	add.s32 	%r810, %r744, 192;
	mul.wide.u32 	%rd80, %r810, 4;
	add.s64 	%rd26, %rd62, %rd80;
	add.s32 	%r811, %r750, 192;
	mul.wide.u32 	%rd81, %r811, 4;
	add.s64 	%rd27, %rd62, %rd81;
	add.s32 	%r812, %r756, 192;
	mul.wide.u32 	%rd82, %r812, 4;
	add.s64 	%rd28, %rd62, %rd82;
	add.s32 	%r813, %r775, 64;
	mul.wide.u32 	%rd83, %r813, 4;
	add.s64 	%rd29, %rd62, %rd83;
	add.s32 	%r814, %r786, 64;
	mul.wide.u32 	%rd84, %r814, 4;
	add.s64 	%rd30, %rd62, %rd84;
	add.s32 	%r815, %r792, 64;
	mul.wide.u32 	%rd85, %r815, 4;
	add.s64 	%rd31, %rd62, %rd85;
	add.s32 	%r816, %r786, 96;
	mul.wide.u32 	%rd86, %r816, 4;
	add.s64 	%rd32, %rd62, %rd86;
	add.s32 	%r817, %r775, 128;
	mul.wide.u32 	%rd87, %r817, 4;
	add.s64 	%rd33, %rd62, %rd87;
	add.s32 	%r818, %r786, 128;
	mul.wide.u32 	%rd88, %r818, 4;
	add.s64 	%rd34, %rd62, %rd88;
	add.s32 	%r819, %r792, 128;
	mul.wide.u32 	%rd89, %r819, 4;
	add.s64 	%rd35, %rd62, %rd89;
	add.s32 	%r820, %r786, 160;
	mul.wide.u32 	%rd90, %r820, 4;
	add.s64 	%rd36, %rd62, %rd90;
	add.s32 	%r821, %r775, 192;
	mul.wide.u32 	%rd91, %r821, 4;
	add.s64 	%rd37, %rd62, %rd91;
	add.s32 	%r822, %r786, 192;
	mul.wide.u32 	%rd92, %r822, 4;
	add.s64 	%rd38, %rd62, %rd92;
	add.s32 	%r823, %r792, 192;
	mul.wide.u32 	%rd93, %r823, 4;
	add.s64 	%rd39, %rd62, %rd93;
	add.s32 	%r824, %r786, 224;
	mul.wide.u32 	%rd94, %r824, 4;
	add.s64 	%rd40, %rd62, %rd94;
	setp.lt.u32 	%p241, %r2, 16;
	setp.gt.u32 	%p270, %r3, 7;
	setp.lt.u32 	%p274, %r2, 24;
	mov.u32 	%r3745, %r117;
	mov.u32 	%r3746, %r117;
	mov.u32 	%r3747, %r117;
	mov.u32 	%r3748, %r117;
	bra.uni 	$L__BB0_148;
$L__BB0_194:                            // %L41253
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r251, %r117, 48;
	setp.ne.s32 	%p314, %r117, 32688;
	mov.u32 	%r117, %r251;
	@%p314 bra 	$L__BB0_148;
	bra.uni 	$L__BB0_195;
$L__BB0_148:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_175 Depth 2
                                        //     Child Loop BB0_185 Depth 2
	add.s32 	%r122, %r117, %r387;
	setp.lt.s32 	%p240, %r122, %r388;
	@%p240 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_195;
$L__BB0_149:                            // %oksrem698
                                        //   in Loop: Header=BB0_148 Depth=1
	mul.hi.u32 	%r1017, %r117, -1431655765;
	shr.u32 	%r1018, %r1017, 5;
	mul.lo.s32 	%r282, %r1018, 48;
	add.s32 	%r1019, %r282, %r3;
	add.s32 	%r1020, %r1019, %r387;
	mul.lo.s32 	%r1021, %r1020, 12288;
	add.s32 	%r1022, %r87, %r1021;
	mul.hi.s32 	%r1023, %r1022, 715827883;
	shr.u32 	%r1024, %r1023, 31;
	shr.s32 	%r1025, %r1023, 26;
	add.s32 	%r1026, %r1025, %r1024;
	setp.lt.s32 	%p242, %r1022, 0;
	mul.lo.s32 	%r1027, %r1026, 402653184;
	setp.ne.s32 	%p243, %r1027, %r1022;
	and.pred  	%p244, %p242, %p243;
	selp.s32 	%r1028, -1, 0, %p244;
	add.s32 	%r1029, %r1026, %r1028;
	mad.lo.s32 	%r1030, %r1029, -402653184, %r1022;
	mul.wide.s32 	%rd95, %r1030, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r1031, %r1032, %r1033, %r1034}, [%rd96];
	add.s32 	%r1035, %r88, %r1021;
	mul.hi.s32 	%r1036, %r1035, 715827883;
	shr.u32 	%r1037, %r1036, 31;
	shr.s32 	%r1038, %r1036, 26;
	add.s32 	%r1039, %r1038, %r1037;
	shr.s32 	%r1040, %r1035, 31;
	add.s32 	%r1041, %r1040, %r1039;
	mad.lo.s32 	%r1042, %r1041, -402653184, %r1035;
	mul.wide.s32 	%rd97, %r1042, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r1043, %r1044, %r1045, %r1046}, [%rd98];
	add.s32 	%r1047, %r122, %r89;
	mul.lo.s32 	%r1048, %r1047, 12288;
	add.s32 	%r1049, %r87, %r1048;
	mul.hi.s32 	%r1050, %r1049, 715827883;
	shr.u32 	%r1051, %r1050, 31;
	shr.s32 	%r1052, %r1050, 26;
	add.s32 	%r1053, %r1052, %r1051;
	setp.lt.s32 	%p245, %r1049, 0;
	mul.lo.s32 	%r1054, %r1053, 402653184;
	setp.ne.s32 	%p246, %r1054, %r1049;
	and.pred  	%p247, %p245, %p246;
	selp.s32 	%r1055, -1, 0, %p247;
	add.s32 	%r1056, %r1053, %r1055;
	mad.lo.s32 	%r1057, %r1056, -402653184, %r1049;
	mul.wide.s32 	%rd99, %r1057, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r1058, %r1059, %r1060, %r1061}, [%rd100];
	add.s32 	%r1062, %r88, %r1048;
	mul.hi.s32 	%r1063, %r1062, 715827883;
	shr.u32 	%r1064, %r1063, 31;
	shr.s32 	%r1065, %r1063, 26;
	add.s32 	%r1066, %r1065, %r1064;
	shr.s32 	%r1067, %r1062, 31;
	add.s32 	%r1068, %r1067, %r1066;
	mad.lo.s32 	%r1069, %r1068, -402653184, %r1062;
	mul.wide.s32 	%rd101, %r1069, 4;
	add.s64 	%rd102, %rd3, %rd101;
	ld.global.v4.u32 	{%r1070, %r1071, %r1072, %r1073}, [%rd102];
	selp.b32 	%r1074, %r1033, %r1031, %p241;
	shfl.sync.bfly.b32	%r1075, %r1074, 16, 31, -1;
	selp.b32 	%r827, %r1031, %r1075, %p241;
	selp.b32 	%r832, %r1075, %r1033, %p241;
	selp.b32 	%r1076, %r1034, %r1032, %p241;
	shfl.sync.bfly.b32	%r1077, %r1076, 16, 31, -1;
	selp.b32 	%r835, %r1032, %r1077, %p241;
	selp.b32 	%r840, %r1077, %r1034, %p241;
	selp.b32 	%r1078, %r1045, %r1043, %p241;
	shfl.sync.bfly.b32	%r1079, %r1078, 16, 31, -1;
	selp.b32 	%r843, %r1043, %r1079, %p241;
	selp.b32 	%r848, %r1079, %r1045, %p241;
	selp.b32 	%r1080, %r1046, %r1044, %p241;
	shfl.sync.bfly.b32	%r1081, %r1080, 16, 31, -1;
	selp.b32 	%r851, %r1044, %r1081, %p241;
	selp.b32 	%r856, %r1081, %r1046, %p241;
	selp.b32 	%r1082, %r1060, %r1058, %p241;
	shfl.sync.bfly.b32	%r1083, %r1082, 16, 31, -1;
	selp.b32 	%r859, %r1058, %r1083, %p241;
	selp.b32 	%r864, %r1083, %r1060, %p241;
	selp.b32 	%r1084, %r1061, %r1059, %p241;
	shfl.sync.bfly.b32	%r1085, %r1084, 16, 31, -1;
	selp.b32 	%r867, %r1059, %r1085, %p241;
	selp.b32 	%r872, %r1085, %r1061, %p241;
	selp.b32 	%r1086, %r1072, %r1070, %p241;
	shfl.sync.bfly.b32	%r1087, %r1086, 16, 31, -1;
	selp.b32 	%r875, %r1070, %r1087, %p241;
	selp.b32 	%r880, %r1087, %r1072, %p241;
	selp.b32 	%r1088, %r1073, %r1071, %p241;
	shfl.sync.bfly.b32	%r1089, %r1088, 16, 31, -1;
	selp.b32 	%r883, %r1071, %r1089, %p241;
	selp.b32 	%r888, %r1089, %r1073, %p241;
	shl.b32 	%r828, %r832, 4;
	mov.u32 	%r826, 252645135;
	// begin inline asm
	lop3.b32 %r890, %r826, %r827, %r828, 202;
	// end inline asm
	shr.u32 	%r831, %r827, 4;
	// begin inline asm
	lop3.b32 %r906, %r826, %r831, %r832, 202;
	// end inline asm
	shl.b32 	%r836, %r840, 4;
	// begin inline asm
	lop3.b32 %r898, %r826, %r835, %r836, 202;
	// end inline asm
	shr.u32 	%r839, %r835, 4;
	// begin inline asm
	lop3.b32 %r914, %r826, %r839, %r840, 202;
	// end inline asm
	shl.b32 	%r844, %r848, 4;
	// begin inline asm
	lop3.b32 %r922, %r826, %r843, %r844, 202;
	// end inline asm
	shr.u32 	%r847, %r843, 4;
	// begin inline asm
	lop3.b32 %r938, %r826, %r847, %r848, 202;
	// end inline asm
	shl.b32 	%r852, %r856, 4;
	// begin inline asm
	lop3.b32 %r930, %r826, %r851, %r852, 202;
	// end inline asm
	shr.u32 	%r855, %r851, 4;
	// begin inline asm
	lop3.b32 %r946, %r826, %r855, %r856, 202;
	// end inline asm
	shl.b32 	%r860, %r864, 4;
	// begin inline asm
	lop3.b32 %r891, %r826, %r859, %r860, 202;
	// end inline asm
	shr.u32 	%r863, %r859, 4;
	// begin inline asm
	lop3.b32 %r907, %r826, %r863, %r864, 202;
	// end inline asm
	shl.b32 	%r868, %r872, 4;
	// begin inline asm
	lop3.b32 %r899, %r826, %r867, %r868, 202;
	// end inline asm
	shr.u32 	%r871, %r867, 4;
	// begin inline asm
	lop3.b32 %r915, %r826, %r871, %r872, 202;
	// end inline asm
	shl.b32 	%r876, %r880, 4;
	// begin inline asm
	lop3.b32 %r923, %r826, %r875, %r876, 202;
	// end inline asm
	shr.u32 	%r879, %r875, 4;
	// begin inline asm
	lop3.b32 %r939, %r826, %r879, %r880, 202;
	// end inline asm
	shl.b32 	%r884, %r888, 4;
	// begin inline asm
	lop3.b32 %r931, %r826, %r883, %r884, 202;
	// end inline asm
	shr.u32 	%r887, %r883, 4;
	// begin inline asm
	lop3.b32 %r947, %r826, %r887, %r888, 202;
	// end inline asm
	mov.u32 	%r892, 25152;
	// begin inline asm
	prmt.b32 %r954, %r890, %r891, %r892;
	// end inline asm
	mov.u32 	%r896, 29521;
	// begin inline asm
	prmt.b32 %r986, %r890, %r891, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r962, %r898, %r899, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r994, %r898, %r899, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r955, %r906, %r907, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r906, %r907, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r963, %r914, %r915, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r995, %r914, %r915, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r970, %r922, %r923, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1002, %r922, %r923, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r978, %r930, %r931, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1010, %r930, %r931, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r971, %r938, %r939, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1003, %r938, %r939, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r946, %r947, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1011, %r946, %r947, %r896;
	// end inline asm
	mov.u32 	%r1012, 21520;
	// begin inline asm
	prmt.b32 %r953, %r954, %r955, %r1012;
	// end inline asm
	mov.u32 	%r1016, 30258;
	// begin inline asm
	prmt.b32 %r957, %r954, %r955, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r961, %r962, %r963, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r965, %r962, %r963, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r969, %r970, %r971, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r973, %r970, %r971, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r977, %r978, %r979, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r981, %r978, %r979, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r985, %r986, %r987, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r989, %r986, %r987, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r993, %r994, %r995, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r997, %r994, %r995, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1001, %r1002, %r1003, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1005, %r1002, %r1003, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1009, %r1010, %r1011, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1013, %r1010, %r1011, %r1016;
	// end inline asm
	cvt.u16.u32 	%rs57, %r1019;
	mul.hi.s16 	%rs58, %rs57, 10923;
	shr.u16 	%rs59, %rs58, 15;
	shr.s16 	%rs60, %rs58, 2;
	add.s16 	%rs61, %rs60, %rs59;
	mul.lo.s16 	%rs62, %rs61, 24;
	sub.s16 	%rs63, %rs57, %rs62;
	cvt.s32.s16 	%r1090, %rs63;
	add.s32 	%r1091, %r90, %r1090;
	mul.wide.s32 	%rd103, %r1091, 4;
	add.s64 	%rd105, %rd62, %rd103;
	st.shared.u32 	[%rd105], %r953;
	add.s32 	%r1092, %r1091, 128;
	mul.wide.u32 	%rd106, %r1092, 4;
	add.s64 	%rd107, %rd62, %rd106;
	st.shared.u32 	[%rd107], %r961;
	add.s32 	%r1093, %r1091, 64;
	mul.wide.u32 	%rd108, %r1093, 4;
	add.s64 	%rd109, %rd62, %rd108;
	st.shared.u32 	[%rd109], %r957;
	add.s32 	%r1094, %r1091, 192;
	mul.wide.u32 	%rd110, %r1094, 4;
	add.s64 	%rd111, %rd62, %rd110;
	st.shared.u32 	[%rd111], %r965;
	add.s32 	%r1095, %r91, %r1090;
	mul.wide.u32 	%rd112, %r1095, 4;
	add.s64 	%rd113, %rd62, %rd112;
	st.shared.u32 	[%rd113], %r969;
	add.s32 	%r1096, %r1095, 128;
	mul.wide.u32 	%rd114, %r1096, 4;
	add.s64 	%rd115, %rd62, %rd114;
	st.shared.u32 	[%rd115], %r977;
	add.s32 	%r1097, %r1095, 64;
	mul.wide.u32 	%rd116, %r1097, 4;
	add.s64 	%rd117, %rd62, %rd116;
	st.shared.u32 	[%rd117], %r973;
	add.s32 	%r1098, %r1095, 192;
	mul.wide.u32 	%rd118, %r1098, 4;
	add.s64 	%rd119, %rd62, %rd118;
	st.shared.u32 	[%rd119], %r981;
	add.s32 	%r1099, %r1091, 32;
	mul.wide.u32 	%rd120, %r1099, 4;
	add.s64 	%rd121, %rd62, %rd120;
	st.shared.u32 	[%rd121], %r985;
	add.s32 	%r1100, %r1091, 160;
	mul.wide.u32 	%rd122, %r1100, 4;
	add.s64 	%rd123, %rd62, %rd122;
	st.shared.u32 	[%rd123], %r993;
	add.s32 	%r1101, %r1091, 96;
	mul.wide.u32 	%rd124, %r1101, 4;
	add.s64 	%rd125, %rd62, %rd124;
	st.shared.u32 	[%rd125], %r989;
	add.s32 	%r1102, %r1091, 224;
	mul.wide.u32 	%rd126, %r1102, 4;
	add.s64 	%rd127, %rd62, %rd126;
	st.shared.u32 	[%rd127], %r997;
	add.s32 	%r1103, %r1095, 32;
	mul.wide.u32 	%rd128, %r1103, 4;
	add.s64 	%rd129, %rd62, %rd128;
	st.shared.u32 	[%rd129], %r1001;
	add.s32 	%r1104, %r1095, 160;
	mul.wide.u32 	%rd130, %r1104, 4;
	add.s64 	%rd131, %rd62, %rd130;
	st.shared.u32 	[%rd131], %r1009;
	add.s32 	%r1105, %r1095, 96;
	mul.wide.u32 	%rd132, %r1105, 4;
	add.s64 	%rd133, %rd62, %rd132;
	st.shared.u32 	[%rd133], %r1005;
	add.s32 	%r1106, %r1095, 224;
	mul.wide.u32 	%rd134, %r1106, 4;
	add.s64 	%rd135, %rd62, %rd134;
	st.shared.u32 	[%rd135], %r1013;
	bar.sync 	0;
	add.s32 	%r1107, %r282, %r92;
	cvt.u16.u32 	%rs64, %r1107;
	mul.hi.s16 	%rs65, %rs64, 10923;
	shr.u16 	%rs66, %rs65, 15;
	shr.s16 	%rs67, %rs65, 2;
	add.s16 	%rs68, %rs67, %rs66;
	mul.lo.s16 	%rs69, %rs68, 24;
	sub.s16 	%rs70, %rs64, %rs69;
	cvt.s32.s16 	%r283, %rs70;
	add.s32 	%r1108, %r93, %r283;
	mul.wide.s32 	%rd136, %r1108, 4;
	add.s64 	%rd137, %rd62, %rd136;
	ld.shared.u32 	%r284, [%rd137];
	add.s32 	%r1109, %r94, %r283;
	mul.wide.u32 	%rd138, %r1109, 4;
	add.s64 	%rd139, %rd62, %rd138;
	ld.shared.u32 	%r285, [%rd139];
	add.s32 	%r1110, %r95, %r283;
	mul.wide.u32 	%rd140, %r1110, 4;
	add.s64 	%rd141, %rd62, %rd140;
	ld.shared.u32 	%r286, [%rd141];
	add.s32 	%r1111, %r96, %r283;
	mul.wide.u32 	%rd142, %r1111, 4;
	add.s64 	%rd143, %rd62, %rd142;
	ld.shared.u32 	%r287, [%rd143];
	add.s32 	%r1112, %r97, %r283;
	mul.wide.u32 	%rd144, %r1112, 4;
	add.s64 	%rd145, %rd62, %rd144;
	ld.shared.u32 	%r288, [%rd145];
	add.s32 	%r1113, %r98, %r283;
	mul.wide.u32 	%rd146, %r1113, 4;
	add.s64 	%rd147, %rd62, %rd146;
	ld.shared.u32 	%r289, [%rd147];
	add.s32 	%r1114, %r99, %r283;
	mul.wide.u32 	%rd148, %r1114, 4;
	add.s64 	%rd149, %rd62, %rd148;
	ld.shared.u32 	%r290, [%rd149];
	add.s32 	%r1115, %r100, %r283;
	mul.wide.u32 	%rd150, %r1115, 4;
	add.s64 	%rd151, %rd62, %rd150;
	ld.shared.u32 	%r291, [%rd151];
	add.s32 	%r1116, %r101, %r283;
	mul.wide.u32 	%rd152, %r1116, 4;
	add.s64 	%rd153, %rd62, %rd152;
	ld.shared.u32 	%r292, [%rd153];
	add.s32 	%r1117, %r102, %r283;
	mul.wide.u32 	%rd154, %r1117, 4;
	add.s64 	%rd155, %rd62, %rd154;
	ld.shared.u32 	%r293, [%rd155];
	add.s32 	%r1118, %r103, %r283;
	mul.wide.u32 	%rd156, %r1118, 4;
	add.s64 	%rd157, %rd62, %rd156;
	ld.shared.u32 	%r294, [%rd157];
	add.s32 	%r1119, %r104, %r283;
	mul.wide.u32 	%rd158, %r1119, 4;
	add.s64 	%rd159, %rd62, %rd158;
	ld.shared.u32 	%r295, [%rd159];
	add.s32 	%r1120, %r105, %r283;
	mul.wide.u32 	%rd160, %r1120, 4;
	add.s64 	%rd161, %rd62, %rd160;
	ld.shared.u32 	%r296, [%rd161];
	add.s32 	%r1121, %r106, %r283;
	mul.wide.u32 	%rd162, %r1121, 4;
	add.s64 	%rd163, %rd62, %rd162;
	ld.shared.u32 	%r297, [%rd163];
	add.s32 	%r1122, %r107, %r283;
	mul.wide.u32 	%rd164, %r1122, 4;
	add.s64 	%rd165, %rd62, %rd164;
	ld.shared.u32 	%r298, [%rd165];
	add.s32 	%r1123, %r108, %r283;
	mul.wide.u32 	%rd166, %r1123, 4;
	add.s64 	%rd167, %rd62, %rd166;
	ld.shared.u32 	%r299, [%rd167];
	add.s32 	%r1124, %r109, %r283;
	mul.wide.u32 	%rd168, %r1124, 4;
	add.s64 	%rd169, %rd62, %rd168;
	ld.shared.u32 	%r300, [%rd169];
	add.s32 	%r1125, %r110, %r283;
	mul.wide.u32 	%rd170, %r1125, 4;
	add.s64 	%rd171, %rd62, %rd170;
	ld.shared.u32 	%r301, [%rd171];
	add.s32 	%r1126, %r111, %r283;
	mul.wide.u32 	%rd172, %r1126, 4;
	add.s64 	%rd173, %rd62, %rd172;
	ld.shared.u32 	%r302, [%rd173];
	add.s32 	%r1127, %r112, %r283;
	mul.wide.u32 	%rd174, %r1127, 4;
	add.s64 	%rd175, %rd62, %rd174;
	ld.shared.u32 	%r303, [%rd175];
	add.s32 	%r1128, %r113, %r283;
	mul.wide.u32 	%rd176, %r1128, 4;
	add.s64 	%rd177, %rd62, %rd176;
	ld.shared.u32 	%r304, [%rd177];
	add.s32 	%r1129, %r114, %r283;
	mul.wide.s32 	%rd178, %r1129, 4;
	add.s64 	%rd179, %rd62, %rd178;
	ld.shared.u32 	%r305, [%rd179];
	bar.sync 	0;
	shfl.sync.idx.b32	%r306, %r278, 0, 31, -1;
	shfl.sync.idx.b32	%r307, %r278, 1, 31, -1;
	shfl.sync.idx.b32	%r308, %r278, 2, 31, -1;
	shfl.sync.idx.b32	%r309, %r278, 3, 31, -1;
	shfl.sync.idx.b32	%r310, %r278, 4, 31, -1;
	shfl.sync.idx.b32	%r311, %r278, 5, 31, -1;
	shfl.sync.idx.b32	%r312, %r278, 6, 31, -1;
	shfl.sync.idx.b32	%r313, %r278, 7, 31, -1;
	shfl.sync.idx.b32	%r314, %r278, 8, 31, -1;
	shfl.sync.idx.b32	%r315, %r278, 9, 31, -1;
	shfl.sync.idx.b32	%r316, %r278, 10, 31, -1;
	shfl.sync.idx.b32	%r317, %r278, 11, 31, -1;
	shfl.sync.idx.b32	%r318, %r278, 12, 31, -1;
	shfl.sync.idx.b32	%r319, %r278, 13, 31, -1;
	shfl.sync.idx.b32	%r320, %r278, 14, 31, -1;
	shfl.sync.idx.b32	%r321, %r278, 15, 31, -1;
	shfl.sync.idx.b32	%r322, %r278, 16, 31, -1;
	shfl.sync.idx.b32	%r323, %r278, 17, 31, -1;
	shfl.sync.idx.b32	%r324, %r278, 18, 31, -1;
	shfl.sync.idx.b32	%r325, %r278, 19, 31, -1;
	shfl.sync.idx.b32	%r326, %r278, 20, 31, -1;
	shfl.sync.idx.b32	%r327, %r278, 21, 31, -1;
	shfl.sync.idx.b32	%r328, %r278, 22, 31, -1;
	shfl.sync.idx.b32	%r329, %r278, 23, 31, -1;
	setp.eq.s32 	%p248, %r306, 999999999;
	@%p248 bra 	$L__BB0_150;
// %bb.224:                             // %oksrem3326
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1130, %r306, %r283;
	mul.wide.s32 	%rd180, %r1130, 4;
	add.s64 	%rd182, %rd62, %rd180;
	st.shared.u32 	[%rd182], %r284;
	setp.eq.s32 	%p249, %r307, 999999999;
	@%p249 bra 	$L__BB0_151;
// %bb.225:                             // %oksrem3394
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1131, %r307, %r283;
	mul.wide.s32 	%rd183, %r1131, 4;
	add.s64 	%rd185, %rd62, %rd183;
	st.shared.u32 	[%rd185], %r285;
	setp.eq.s32 	%p250, %r308, 999999999;
	@%p250 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3462
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1132, %r308, %r283;
	mul.wide.s32 	%rd186, %r1132, 4;
	add.s64 	%rd188, %rd62, %rd186;
	st.shared.u32 	[%rd188], %r286;
	setp.eq.s32 	%p251, %r309, 999999999;
	@%p251 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3530
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1133, %r309, %r283;
	mul.wide.s32 	%rd189, %r1133, 4;
	add.s64 	%rd191, %rd62, %rd189;
	st.shared.u32 	[%rd191], %r287;
	setp.eq.s32 	%p252, %r310, 999999999;
	@%p252 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3598
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1134, %r310, %r283;
	mul.wide.s32 	%rd192, %r1134, 4;
	add.s64 	%rd194, %rd62, %rd192;
	st.shared.u32 	[%rd194], %r288;
	setp.eq.s32 	%p253, %r311, 999999999;
	@%p253 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3666
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1135, %r311, %r283;
	mul.wide.s32 	%rd195, %r1135, 4;
	add.s64 	%rd197, %rd62, %rd195;
	st.shared.u32 	[%rd197], %r289;
	setp.eq.s32 	%p254, %r312, 999999999;
	@%p254 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3734
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1136, %r312, %r283;
	mul.wide.s32 	%rd198, %r1136, 4;
	add.s64 	%rd200, %rd62, %rd198;
	st.shared.u32 	[%rd200], %r290;
	setp.eq.s32 	%p255, %r313, 999999999;
	@%p255 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3802
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1137, %r313, %r283;
	mul.wide.s32 	%rd201, %r1137, 4;
	add.s64 	%rd203, %rd62, %rd201;
	st.shared.u32 	[%rd203], %r291;
	setp.eq.s32 	%p256, %r314, 999999999;
	@%p256 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3870
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1138, %r314, %r283;
	mul.wide.s32 	%rd204, %r1138, 4;
	add.s64 	%rd206, %rd62, %rd204;
	st.shared.u32 	[%rd206], %r292;
	setp.eq.s32 	%p257, %r315, 999999999;
	@%p257 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3938
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1139, %r315, %r283;
	mul.wide.s32 	%rd207, %r1139, 4;
	add.s64 	%rd209, %rd62, %rd207;
	st.shared.u32 	[%rd209], %r293;
	setp.eq.s32 	%p258, %r316, 999999999;
	@%p258 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem4006
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1140, %r316, %r283;
	mul.wide.s32 	%rd210, %r1140, 4;
	add.s64 	%rd212, %rd62, %rd210;
	st.shared.u32 	[%rd212], %r294;
	setp.eq.s32 	%p259, %r317, 999999999;
	@%p259 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem4074
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1141, %r317, %r283;
	mul.wide.s32 	%rd213, %r1141, 4;
	add.s64 	%rd215, %rd62, %rd213;
	st.shared.u32 	[%rd215], %r295;
	setp.eq.s32 	%p260, %r318, 999999999;
	@%p260 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4142
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1142, %r318, %r283;
	mul.wide.s32 	%rd216, %r1142, 4;
	add.s64 	%rd218, %rd62, %rd216;
	st.shared.u32 	[%rd218], %r296;
	setp.eq.s32 	%p261, %r319, 999999999;
	@%p261 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4210
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1143, %r319, %r283;
	mul.wide.s32 	%rd219, %r1143, 4;
	add.s64 	%rd221, %rd62, %rd219;
	st.shared.u32 	[%rd221], %r297;
	setp.eq.s32 	%p262, %r320, 999999999;
	@%p262 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4278
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1144, %r320, %r283;
	mul.wide.s32 	%rd222, %r1144, 4;
	add.s64 	%rd224, %rd62, %rd222;
	st.shared.u32 	[%rd224], %r298;
	setp.eq.s32 	%p263, %r321, 999999999;
	@%p263 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4346
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1145, %r321, %r283;
	mul.wide.s32 	%rd225, %r1145, 4;
	add.s64 	%rd227, %rd62, %rd225;
	st.shared.u32 	[%rd227], %r299;
	setp.eq.s32 	%p264, %r322, 999999999;
	@%p264 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4414
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1146, %r322, %r283;
	mul.wide.s32 	%rd228, %r1146, 4;
	add.s64 	%rd230, %rd62, %rd228;
	st.shared.u32 	[%rd230], %r300;
	setp.eq.s32 	%p265, %r323, 999999999;
	@%p265 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4482
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1147, %r323, %r283;
	mul.wide.s32 	%rd231, %r1147, 4;
	add.s64 	%rd233, %rd62, %rd231;
	st.shared.u32 	[%rd233], %r301;
	setp.eq.s32 	%p266, %r324, 999999999;
	@%p266 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4550
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1148, %r324, %r283;
	mul.wide.s32 	%rd234, %r1148, 4;
	add.s64 	%rd236, %rd62, %rd234;
	st.shared.u32 	[%rd236], %r302;
	setp.eq.s32 	%p267, %r325, 999999999;
	@%p267 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4618
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1149, %r325, %r283;
	mul.wide.s32 	%rd237, %r1149, 4;
	add.s64 	%rd239, %rd62, %rd237;
	st.shared.u32 	[%rd239], %r303;
	setp.eq.s32 	%p268, %r326, 999999999;
	@%p268 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4686
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1150, %r326, %r283;
	mul.wide.s32 	%rd240, %r1150, 4;
	add.s64 	%rd242, %rd62, %rd240;
	st.shared.u32 	[%rd242], %r304;
	setp.eq.s32 	%p269, %r327, 999999999;
	@%p269 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4755
                                        //   in Loop: Header=BB0_148 Depth=1
	selp.b32 	%r1151, 0, %r305, %p270;
	add.s32 	%r1152, %r327, %r283;
	mul.wide.s32 	%rd243, %r1152, 4;
	add.s64 	%rd245, %rd62, %rd243;
	st.shared.u32 	[%rd245], %r1151;
	setp.eq.s32 	%p271, %r328, 999999999;
	@%p271 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4823
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1153, %r328, %r283;
	mul.wide.s32 	%rd246, %r1153, 4;
	add.s64 	%rd248, %rd62, %rd246;
	mov.u32 	%r3720, 0;
	st.shared.u32 	[%rd248], %r3720;
	setp.eq.s32 	%p272, %r329, 999999999;
	@%p272 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4890
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1156, %r329, %r283;
	mul.wide.s32 	%rd249, %r1156, 4;
	add.s64 	%rd251, %rd62, %rd249;
	st.shared.u32 	[%rd251], %r3720;
	bar.sync 	0;
	mov.u32 	%r3721, %r3720;
	mov.u32 	%r3722, %r3720;
	mov.u32 	%r3723, %r3720;
	mov.u32 	%r3724, %r3720;
	mov.u32 	%r3725, %r3720;
	mov.u32 	%r3726, %r3720;
	mov.u32 	%r3727, %r3720;
	mov.u32 	%r3728, %r3720;
	mov.u32 	%r3729, %r3720;
	mov.u32 	%r3730, %r3720;
	mov.u32 	%r3731, %r3720;
	mov.u32 	%r3732, %r3720;
	mov.u32 	%r3733, %r3720;
	mov.u32 	%r3734, %r3720;
	mov.u32 	%r3735, %r3720;
	mov.u32 	%r3736, %r3720;
	mov.u32 	%r3737, %r3720;
	mov.u32 	%r3738, %r3720;
	mov.u32 	%r3739, %r3720;
	mov.u32 	%r3740, %r3720;
	mov.u32 	%r3741, %r3720;
	mov.u32 	%r3742, %r3720;
	mov.u32 	%r3743, %r3720;
	@%p88 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4959
                                        //   in Loop: Header=BB0_148 Depth=1
	cvt.u16.u32 	%rs71, %r282;
	mul.hi.s16 	%rs72, %rs71, 10923;
	shr.u16 	%rs73, %rs72, 15;
	shr.s16 	%rs74, %rs72, 2;
	add.s16 	%rs75, %rs74, %rs73;
	mul.lo.s16 	%rs76, %rs75, 24;
	sub.s16 	%rs77, %rs71, %rs76;
	cvt.s32.s16 	%r1157, %rs77;
	mul.wide.s32 	%rd252, %r1157, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3720, [%rd253];
	ld.shared.u32 	%r3721, [%rd16+4];
	ld.shared.u32 	%r3722, [%rd16+8];
	ld.shared.u32 	%r3723, [%rd16+12];
	ld.shared.u32 	%r3724, [%rd16+16];
	ld.shared.u32 	%r3725, [%rd16+20];
	ld.shared.u32 	%r3726, [%rd16+24];
	ld.shared.u32 	%r3727, [%rd16+28];
	ld.shared.u32 	%r3728, [%rd16+32];
	ld.shared.u32 	%r3729, [%rd16+36];
	ld.shared.u32 	%r3730, [%rd16+40];
	ld.shared.u32 	%r3731, [%rd16+44];
	ld.shared.u32 	%r3732, [%rd16+48];
	ld.shared.u32 	%r3733, [%rd16+52];
	ld.shared.u32 	%r3734, [%rd16+56];
	ld.shared.u32 	%r3735, [%rd16+60];
	add.s16 	%rs78, %rs71, 16;
	mul.hi.s16 	%rs79, %rs78, 10923;
	shr.u16 	%rs80, %rs79, 15;
	shr.s16 	%rs81, %rs79, 2;
	add.s16 	%rs82, %rs81, %rs80;
	mul.lo.s16 	%rs83, %rs82, 24;
	sub.s16 	%rs84, %rs78, %rs83;
	cvt.s32.s16 	%r1158, %rs84;
	mul.wide.s32 	%rd254, %r1158, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3736, [%rd255];
	add.s16 	%rs85, %rs71, 17;
	mul.hi.s16 	%rs86, %rs85, 10923;
	shr.u16 	%rs87, %rs86, 15;
	shr.s16 	%rs88, %rs86, 2;
	add.s16 	%rs89, %rs88, %rs87;
	mul.lo.s16 	%rs90, %rs89, 24;
	sub.s16 	%rs91, %rs85, %rs90;
	cvt.s32.s16 	%r1159, %rs91;
	mul.wide.s32 	%rd256, %r1159, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3737, [%rd257];
	add.s16 	%rs92, %rs71, 18;
	mul.hi.s16 	%rs93, %rs92, 10923;
	shr.u16 	%rs94, %rs93, 15;
	shr.s16 	%rs95, %rs93, 2;
	add.s16 	%rs96, %rs95, %rs94;
	mul.lo.s16 	%rs97, %rs96, 24;
	sub.s16 	%rs98, %rs92, %rs97;
	cvt.s32.s16 	%r1160, %rs98;
	mul.wide.s32 	%rd258, %r1160, 4;
	add.s64 	%rd259, %rd16, %rd258;
	ld.shared.u32 	%r3738, [%rd259];
	add.s16 	%rs99, %rs71, 19;
	mul.hi.s16 	%rs100, %rs99, 10923;
	shr.u16 	%rs101, %rs100, 15;
	shr.s16 	%rs102, %rs100, 2;
	add.s16 	%rs103, %rs102, %rs101;
	mul.lo.s16 	%rs104, %rs103, 24;
	sub.s16 	%rs105, %rs99, %rs104;
	cvt.s32.s16 	%r1161, %rs105;
	mul.wide.s32 	%rd260, %r1161, 4;
	add.s64 	%rd261, %rd16, %rd260;
	ld.shared.u32 	%r3739, [%rd261];
	add.s16 	%rs106, %rs71, 20;
	mul.hi.s16 	%rs107, %rs106, 10923;
	shr.u16 	%rs108, %rs107, 15;
	shr.s16 	%rs109, %rs107, 2;
	add.s16 	%rs110, %rs109, %rs108;
	mul.lo.s16 	%rs111, %rs110, 24;
	sub.s16 	%rs112, %rs106, %rs111;
	cvt.s32.s16 	%r1162, %rs112;
	mul.wide.s32 	%rd262, %r1162, 4;
	add.s64 	%rd263, %rd16, %rd262;
	ld.shared.u32 	%r3740, [%rd263];
	add.s16 	%rs113, %rs71, 21;
	mul.hi.s16 	%rs114, %rs113, 10923;
	shr.u16 	%rs115, %rs114, 15;
	shr.s16 	%rs116, %rs114, 2;
	add.s16 	%rs117, %rs116, %rs115;
	mul.lo.s16 	%rs118, %rs117, 24;
	sub.s16 	%rs119, %rs113, %rs118;
	cvt.s32.s16 	%r1163, %rs119;
	mul.wide.s32 	%rd264, %r1163, 4;
	add.s64 	%rd265, %rd16, %rd264;
	ld.shared.u32 	%r3741, [%rd265];
	add.s16 	%rs120, %rs71, 22;
	mul.hi.s16 	%rs121, %rs120, 10923;
	shr.u16 	%rs122, %rs121, 15;
	shr.s16 	%rs123, %rs121, 2;
	add.s16 	%rs124, %rs123, %rs122;
	mul.lo.s16 	%rs125, %rs124, 24;
	sub.s16 	%rs126, %rs120, %rs125;
	cvt.s32.s16 	%r1164, %rs126;
	mul.wide.s32 	%rd266, %r1164, 4;
	add.s64 	%rd267, %rd16, %rd266;
	ld.shared.u32 	%r3742, [%rd267];
	add.s16 	%rs127, %rs71, 23;
	mul.hi.s16 	%rs128, %rs127, 10923;
	shr.u16 	%rs129, %rs128, 15;
	shr.s16 	%rs130, %rs128, 2;
	add.s16 	%rs131, %rs130, %rs129;
	mul.lo.s16 	%rs132, %rs131, 24;
	sub.s16 	%rs133, %rs127, %rs132;
	cvt.s32.s16 	%r1165, %rs133;
	mul.wide.s32 	%rd268, %r1165, 4;
	add.s64 	%rd269, %rd16, %rd268;
	ld.shared.u32 	%r3743, [%rd269];
$L__BB0_174:                            // %L13906
                                        //   in Loop: Header=BB0_148 Depth=1
	bar.sync 	0;
	mov.u32 	%r3744, 12;
	bra.uni 	$L__BB0_175;
$L__BB0_182:                            // %L27570
                                        //   in Loop: Header=BB0_175 Depth=2
	add.s32 	%r3746, %r3746, 1;
	mov.u32 	%r3745, 0;
	mov.u32 	%r3747, %r3745;
	mov.u32 	%r3748, %r3745;
$L__BB0_183:                            // %L27571
                                        //   in Loop: Header=BB0_175 Depth=2
	bar.sync 	0;
	add.s32 	%r3744, %r3744, -4;
	setp.ne.s32 	%p293, %r3744, -12;
	@%p293 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_184;
$L__BB0_175:                            // %L13932
                                        //   Parent Loop BB0_148 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3744, 12;
	selp.b32 	%r1703, %r3720, 0, %p275;
	setp.eq.s32 	%p276, %r3744, 8;
	selp.b32 	%r1704, %r3724, %r1703, %p276;
	setp.eq.s32 	%p277, %r3744, 4;
	selp.b32 	%r1705, %r3728, %r1704, %p277;
	setp.eq.s32 	%p278, %r3744, 0;
	selp.b32 	%r1706, %r3732, %r1705, %p278;
	setp.eq.s32 	%p279, %r3744, -4;
	selp.b32 	%r1707, %r3736, %r1706, %p279;
	setp.eq.s32 	%p280, %r3744, -8;
	selp.b32 	%r1708, %r3740, %r1707, %p280;
	selp.b32 	%r1709, %r3721, 0, %p275;
	selp.b32 	%r1710, %r3725, %r1709, %p276;
	selp.b32 	%r1711, %r3729, %r1710, %p277;
	selp.b32 	%r1712, %r3733, %r1711, %p278;
	selp.b32 	%r1713, %r3737, %r1712, %p279;
	selp.b32 	%r1714, %r3741, %r1713, %p280;
	selp.b32 	%r1715, %r3722, 0, %p275;
	selp.b32 	%r1716, %r3726, %r1715, %p276;
	selp.b32 	%r1717, %r3730, %r1716, %p277;
	selp.b32 	%r1718, %r3734, %r1717, %p278;
	selp.b32 	%r1719, %r3738, %r1718, %p279;
	selp.b32 	%r1720, %r3742, %r1719, %p280;
	selp.b32 	%r1721, %r3723, 0, %p275;
	selp.b32 	%r1722, %r3727, %r1721, %p276;
	selp.b32 	%r1723, %r3731, %r1722, %p277;
	selp.b32 	%r1724, %r3735, %r1723, %p278;
	selp.b32 	%r1725, %r3739, %r1724, %p279;
	selp.b32 	%r1726, %r3743, %r1725, %p280;
	mov.u16 	%rs171, 25600;
	// begin inline asm
	mov.b32 %r1172, {%rs171, %rs171};
	// end inline asm
	mov.u16 	%rs173, 21504;
	// begin inline asm
	mov.b32 %r1183, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1171, %r1708, -2004318072;
	mov.u32 	%r1308, 983055;
	// begin inline asm
	lop3.b32 %r1169, %r1308, %r1171, %r1172, 202;
	// end inline asm
	mov.u16 	%rs177, 18432;
	// begin inline asm
	mov.b32 %r1173, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1174, %r1172, %r1173;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1177, %r1169, %r1174;
	// end inline asm
	mov.u32 	%r1319, 15728880;
	// begin inline asm
	lop3.b32 %r1180, %r1319, %r1171, %r1183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1184, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1185, %r1183, %r1184;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1188, %r1180, %r1185;
	// end inline asm
	// begin inline asm
	mov.b32 %r1218, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r1229, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1217, %r1714, -2004318072;
	// begin inline asm
	lop3.b32 %r1215, %r1308, %r1217, %r1218, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1219, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1220, %r1218, %r1219;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1223, %r1215, %r1220;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1226, %r1319, %r1217, %r1229, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1230, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1231, %r1229, %r1230;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1234, %r1226, %r1231;
	// end inline asm
	// begin inline asm
	mov.b32 %r1264, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r1275, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1263, %r1720, -2004318072;
	// begin inline asm
	lop3.b32 %r1261, %r1308, %r1263, %r1264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1265, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1266, %r1264, %r1265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1269, %r1261, %r1266;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1272, %r1319, %r1263, %r1275, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1276, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1277, %r1275, %r1276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1280, %r1272, %r1277;
	// end inline asm
	// begin inline asm
	mov.b32 %r1310, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r1321, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1309, %r1726, -2004318072;
	// begin inline asm
	lop3.b32 %r1307, %r1308, %r1309, %r1310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1311, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1312, %r1310, %r1311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1315, %r1307, %r1312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1318, %r1319, %r1309, %r1321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1322, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1323, %r1321, %r1322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1326, %r1318, %r1323;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r1177;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1351, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1188;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1354, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r1223;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1357, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1234;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1360, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r1269;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1363, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1280;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1366, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r1315;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1369, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1326;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1372, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1638, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1438, %r1435}, {%r418, %r421}, {%r1351}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1447, %r1444}, {%r418, %r421}, {%r1354}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1456, %r1453}, {%r418, %r421}, {%r1357}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1465, %r1462}, {%r418, %r421}, {%r1360}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1474, %r1471}, {%r418, %r421}, {%r1363}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1483, %r1480}, {%r418, %r421}, {%r1366}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1492, %r1489}, {%r418, %r421}, {%r1369}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1501, %r1498}, {%r418, %r421}, {%r1372}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1431, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r1431, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r470, %r1438, %r1433;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1440, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1442, %r1440, %r1444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1445, %r470, %r1447, %r1442;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1449, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1451, %r1449, %r1453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1454, %r470, %r1456, %r1451;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1458, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1460, %r1458, %r1462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1463, %r470, %r1465, %r1460;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1467, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1469, %r1467, %r1471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1472, %r470, %r1474, %r1469;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1476, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1478, %r1476, %r1480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1481, %r470, %r1483, %r1478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1485, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1487, %r1485, %r1489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1490, %r470, %r1492, %r1487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1494, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1496, %r1494, %r1498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1499, %r470, %r1501, %r1496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1503, %r473, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1506, %r470, %r1435, %r1503;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1510, %r473, %r1447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r470, %r1444, %r1510;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1517, %r473, %r1456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r470, %r1453, %r1517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r473, %r1465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r470, %r1462, %r1524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1531, %r473, %r1474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r470, %r1471, %r1531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1538, %r473, %r1483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r470, %r1480, %r1538;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1545, %r473, %r1492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r470, %r1489, %r1545;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1552, %r473, %r1501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1555, %r470, %r1498, %r1552;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1640, %r1641}, {%r514, %r520, %r517, %r523}, {%r1436, %r1506}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1648, %r1649}, {%r514, %r520, %r517, %r523}, {%r1445, %r1513}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1656, %r1657}, {%r514, %r520, %r517, %r523}, {%r1454, %r1520}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1664, %r1665}, {%r514, %r520, %r517, %r523}, {%r1463, %r1527}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1672, %r1673}, {%r514, %r520, %r517, %r523}, {%r1472, %r1534}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1680, %r1681}, {%r514, %r520, %r517, %r523}, {%r1481, %r1541}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1688, %r1689}, {%r514, %r520, %r517, %r523}, {%r1490, %r1548}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1696, %r1697}, {%r514, %r520, %r517, %r523}, {%r1499, %r1555}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1639, %r1640, %r1641, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1643, %r1640, %r1641, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1647, %r1648, %r1649, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1651, %r1648, %r1649, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1655, %r1656, %r1657, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1659, %r1656, %r1657, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1663, %r1664, %r1665, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1667, %r1664, %r1665, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1671, %r1672, %r1673, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1675, %r1672, %r1673, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1679, %r1680, %r1681, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1683, %r1680, %r1681, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1687, %r1688, %r1689, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1691, %r1688, %r1689, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1695, %r1696, %r1697, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1699, %r1696, %r1697, %r1016;
	// end inline asm
	st.shared.u32 	[%rd7], %r1639;
	st.shared.u32 	[%rd8], %r1643;
	st.shared.u32 	[%rd9], %r1647;
	st.shared.u32 	[%rd10], %r1651;
	st.shared.u32 	[%rd17], %r1655;
	st.shared.u32 	[%rd18], %r1659;
	st.shared.u32 	[%rd19], %r1663;
	st.shared.u32 	[%rd20], %r1667;
	st.shared.u32 	[%rd21], %r1671;
	st.shared.u32 	[%rd22], %r1675;
	st.shared.u32 	[%rd23], %r1679;
	st.shared.u32 	[%rd24], %r1683;
	st.shared.u32 	[%rd25], %r1687;
	st.shared.u32 	[%rd26], %r1691;
	st.shared.u32 	[%rd27], %r1695;
	st.shared.u32 	[%rd28], %r1699;
	@%p274 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_176;
$L__BB0_249:                            // %pass8550
                                        //   in Loop: Header=BB0_175 Depth=2
	st.shared.u32 	[%rd7], %r1639;
	st.shared.u32 	[%rd8], %r1643;
	st.shared.u32 	[%rd9], %r1647;
	st.shared.u32 	[%rd10], %r1651;
	st.shared.u32 	[%rd17], %r1655;
	st.shared.u32 	[%rd18], %r1659;
	st.shared.u32 	[%rd19], %r1663;
	st.shared.u32 	[%rd20], %r1667;
	st.shared.u32 	[%rd21], %r1671;
	st.shared.u32 	[%rd22], %r1675;
	st.shared.u32 	[%rd23], %r1679;
	st.shared.u32 	[%rd24], %r1683;
	st.shared.u32 	[%rd25], %r1687;
	st.shared.u32 	[%rd26], %r1691;
	st.shared.u32 	[%rd27], %r1695;
	st.shared.u32 	[%rd28], %r1699;
$L__BB0_176:                            // %L22306
                                        //   in Loop: Header=BB0_175 Depth=2
	bar.sync 	0;
	mov.u32 	%r3749, %r1638;
	mov.u32 	%r3750, %r1638;
	mov.u32 	%r3751, %r1638;
	mov.u32 	%r3752, %r1638;
	@%p274 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_177;
$L__BB0_250:                            // %pass10645
                                        //   in Loop: Header=BB0_175 Depth=2
	ld.shared.u32 	%r3749, [%rd11];
	ld.shared.u32 	%r3750, [%rd12];
	ld.shared.u32 	%r3751, [%rd13];
	ld.shared.u32 	%r3752, [%rd14];
$L__BB0_177:                            // %L23381
                                        //   in Loop: Header=BB0_175 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1763, %r1760}, {%r532, %r535}, {%r3749}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1772, %r1769}, {%r532, %r535}, {%r3750}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1781, %r1778}, {%r532, %r535}, {%r3751}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1790, %r1787}, {%r532, %r535}, {%r3752}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1756, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1758, %r1756, %r1760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r584, %r1763, %r1758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1765, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r1765, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r584, %r1772, %r1767;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1774, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r1774, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r584, %r1781, %r1776;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1783, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1785, %r1783, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r584, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1792, %r587, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r584, %r1760, %r1792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1799, %r587, %r1772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r584, %r1769, %r1799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1806, %r587, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r584, %r1778, %r1806;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r587, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r584, %r1787, %r1813;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1861, %r1864}, {%r628, %r634, %r631, %r637}, {%r1761, %r1795}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1880, %r1883}, {%r628, %r634, %r631, %r637}, {%r1770, %r1802}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1868, %r1872}, {%r628, %r634, %r631, %r637}, {%r1779, %r1809}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1887, %r1891}, {%r628, %r634, %r631, %r637}, {%r1788, %r1816}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1860, %r1861, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r1864, %r1864, %r1860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r1868, %r1868, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r1872, %r1872, %r1867;
	// end inline asm
	mov.u32 	%r1895, 290787669;
	// begin inline asm
	fma.rn.f16x2 %r1875, %r1895, %r1871, %r3748;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1879, %r1880, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r1883, %r1883, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r1887, %r1887, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r1891, %r1891, %r1886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r1895, %r1890, %r3747;
	// end inline asm
	mov.u32 	%r3753, %r1638;
	mov.u32 	%r3754, %r1638;
	mov.u32 	%r3755, %r1638;
	mov.u32 	%r3756, %r1638;
	@%p274 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %pass11250
                                        //   in Loop: Header=BB0_175 Depth=2
	ld.shared.u32 	%r3753, [%rd29];
	ld.shared.u32 	%r3754, [%rd30];
	ld.shared.u32 	%r3755, [%rd31];
	ld.shared.u32 	%r3756, [%rd32];
$L__BB0_178:                            // %L24600
                                        //   in Loop: Header=BB0_175 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1934, %r1931}, {%r532, %r535}, {%r3753}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1943, %r1940}, {%r532, %r535}, {%r3754}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1952, %r1949}, {%r532, %r535}, {%r3755}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1961, %r1958}, {%r532, %r535}, {%r3756}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1927, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1929, %r1927, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1932, %r584, %r1934, %r1929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1936, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1938, %r1936, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1941, %r584, %r1943, %r1938;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1945, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1947, %r1945, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1950, %r584, %r1952, %r1947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1954, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1956, %r1954, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r584, %r1961, %r1956;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1963, %r587, %r1934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r584, %r1931, %r1963;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1970, %r587, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r584, %r1940, %r1970;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1977, %r587, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r584, %r1949, %r1977;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1984, %r587, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r584, %r1958, %r1984;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2032, %r2035}, {%r628, %r634, %r631, %r637}, {%r1932, %r1966}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2051, %r2054}, {%r628, %r634, %r631, %r637}, {%r1941, %r1973}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2039, %r2043}, {%r628, %r634, %r631, %r637}, {%r1950, %r1980}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2058, %r2062}, {%r628, %r634, %r631, %r637}, {%r1959, %r1987}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2031, %r2032, %r2032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r2035, %r2035, %r2031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r2039, %r2039, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r2043, %r2043, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r1895, %r2042, %r1875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r2051, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r2054, %r2054, %r2050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r2058, %r2058, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r2062, %r2062, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2065, %r1895, %r2061, %r1894;
	// end inline asm
	mov.u32 	%r3757, %r1638;
	mov.u32 	%r3758, %r1638;
	mov.u32 	%r3759, %r1638;
	mov.u32 	%r3760, %r1638;
	@%p274 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_179;
$L__BB0_252:                            // %pass11855
                                        //   in Loop: Header=BB0_175 Depth=2
	ld.shared.u32 	%r3757, [%rd33];
	ld.shared.u32 	%r3758, [%rd34];
	ld.shared.u32 	%r3759, [%rd35];
	ld.shared.u32 	%r3760, [%rd36];
$L__BB0_179:                            // %L25819
                                        //   in Loop: Header=BB0_175 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2105, %r2102}, {%r532, %r535}, {%r3757}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2114, %r2111}, {%r532, %r535}, {%r3758}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2123, %r2120}, {%r532, %r535}, {%r3759}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2132, %r2129}, {%r532, %r535}, {%r3760}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2098, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2100, %r2098, %r2102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2103, %r584, %r2105, %r2100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2107, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2109, %r2107, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2112, %r584, %r2114, %r2109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2116, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2118, %r2116, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2121, %r584, %r2123, %r2118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2125, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2127, %r2125, %r2129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2130, %r584, %r2132, %r2127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r587, %r2105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r584, %r2102, %r2134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r587, %r2114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2144, %r584, %r2111, %r2141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2148, %r587, %r2123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r584, %r2120, %r2148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r587, %r2132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r584, %r2129, %r2155;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2203, %r2206}, {%r628, %r634, %r631, %r637}, {%r2103, %r2137}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2222, %r2225}, {%r628, %r634, %r631, %r637}, {%r2112, %r2144}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2210, %r2214}, {%r628, %r634, %r631, %r637}, {%r2121, %r2151}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2229, %r2233}, {%r628, %r634, %r631, %r637}, {%r2130, %r2158}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r2203, %r2203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r2206, %r2206, %r2202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r2210, %r2210, %r2205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r2214, %r2214, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2217, %r1895, %r2213, %r2046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2221, %r2222, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r2225, %r2225, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2228, %r2229, %r2229, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r2233, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r1895, %r2232, %r2065;
	// end inline asm
	mov.u32 	%r3761, %r1638;
	mov.u32 	%r3762, %r1638;
	mov.u32 	%r3763, %r1638;
	mov.u32 	%r3764, %r1638;
	@%p274 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_180;
$L__BB0_253:                            // %pass12460
                                        //   in Loop: Header=BB0_175 Depth=2
	ld.shared.u32 	%r3761, [%rd37];
	ld.shared.u32 	%r3762, [%rd38];
	ld.shared.u32 	%r3763, [%rd39];
	ld.shared.u32 	%r3764, [%rd40];
$L__BB0_180:                            // %L27038
                                        //   in Loop: Header=BB0_175 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2276, %r2273}, {%r532, %r535}, {%r3761}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2285, %r2282}, {%r532, %r535}, {%r3762}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2294, %r2291}, {%r532, %r535}, {%r3763}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2303, %r2300}, {%r532, %r535}, {%r3764}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2269, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r2269, %r2273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r584, %r2276, %r2271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2278, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r2278, %r2282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2283, %r584, %r2285, %r2280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2287, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2289, %r2287, %r2291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2292, %r584, %r2294, %r2289;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2296, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2298, %r2296, %r2300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2301, %r584, %r2303, %r2298;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2305, %r587, %r2276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2308, %r584, %r2273, %r2305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2312, %r587, %r2285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2315, %r584, %r2282, %r2312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2319, %r587, %r2294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2322, %r584, %r2291, %r2319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2326, %r587, %r2303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2329, %r584, %r2300, %r2326;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2374, %r2377}, {%r628, %r634, %r631, %r637}, {%r2274, %r2308}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2393, %r2396}, {%r628, %r634, %r631, %r637}, {%r2283, %r2315}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2381, %r2385}, {%r628, %r634, %r631, %r637}, {%r2292, %r2322}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2400, %r2404}, {%r628, %r634, %r631, %r637}, {%r2301, %r2329}, {%r1638, %r1638};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2373, %r2374, %r2374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2376, %r2377, %r2377, %r2373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2380, %r2381, %r2381, %r2376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2384, %r2385, %r2385, %r2380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3748, %r1895, %r2384, %r2217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2392, %r2393, %r2393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2395, %r2396, %r2396, %r2392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2399, %r2400, %r2400, %r2395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2403, %r2404, %r2404, %r2399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3747, %r1895, %r2403, %r2236;
	// end inline asm
	add.s32 	%r3745, %r3745, 4;
	setp.eq.s32 	%p285, %r3745, 192;
	@%p285 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_183;
$L__BB0_181:                            // %pass12918
                                        //   in Loop: Header=BB0_175 Depth=2
	@%p88 bra 	$L__BB0_182;
// %bb.254:                             // %pass12954
                                        //   in Loop: Header=BB0_175 Depth=2
	mul.lo.s32 	%r2411, %r3746, 589824;
	add.s32 	%r2412, %r115, %r2411;
	cvt.u64.u32 	%rd270, %r2412;
	add.s64 	%rd271, %rd270, %rd15;
	mul.hi.s64 	%rd272, %rd271, 1024819115206086201;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 25;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p287, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 603979776;
	setp.ne.s64 	%p288, %rd276, %rd271;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd277, -1, 0, %p289;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -603979776;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3748;
	add.s32 	%r2413, %r116, %r2411;
	cvt.u64.u32 	%rd283, %r2413;
	add.s64 	%rd284, %rd283, %rd15;
	mul.hi.s64 	%rd285, %rd284, 1024819115206086201;
	shr.u64 	%rd286, %rd285, 63;
	shr.s64 	%rd287, %rd285, 25;
	add.s64 	%rd288, %rd287, %rd286;
	setp.lt.s64 	%p290, %rd284, 0;
	mul.lo.s64 	%rd289, %rd288, 603979776;
	setp.ne.s64 	%p291, %rd289, %rd284;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd290, -1, 0, %p292;
	add.s64 	%rd291, %rd288, %rd290;
	mul.lo.s64 	%rd292, %rd291, -603979776;
	add.s64 	%rd293, %rd292, %rd284;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3747;
	bra.uni 	$L__BB0_182;
$L__BB0_184:                            // %L27596.preheader
                                        //   in Loop: Header=BB0_148 Depth=1
	mov.u32 	%r3769, 12;
	bra.uni 	$L__BB0_185;
$L__BB0_192:                            // %L41234
                                        //   in Loop: Header=BB0_185 Depth=2
	add.s32 	%r3746, %r3746, 1;
	mov.u32 	%r3745, 0;
	mov.u32 	%r3747, %r3745;
	mov.u32 	%r3748, %r3745;
$L__BB0_193:                            // %L41235
                                        //   in Loop: Header=BB0_185 Depth=2
	bar.sync 	0;
	add.s32 	%r3769, %r3769, -4;
	setp.ne.s32 	%p313, %r3769, -12;
	@%p313 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_194;
$L__BB0_185:                            // %L27596
                                        //   Parent Loop BB0_148 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p295, %r3769, 12;
	selp.b32 	%r2952, %r3720, 0, %p295;
	setp.eq.s32 	%p296, %r3769, 8;
	selp.b32 	%r2953, %r3724, %r2952, %p296;
	setp.eq.s32 	%p297, %r3769, 4;
	selp.b32 	%r2954, %r3728, %r2953, %p297;
	setp.eq.s32 	%p298, %r3769, 0;
	selp.b32 	%r2955, %r3732, %r2954, %p298;
	setp.eq.s32 	%p299, %r3769, -4;
	selp.b32 	%r2956, %r3736, %r2955, %p299;
	setp.eq.s32 	%p300, %r3769, -8;
	selp.b32 	%r2957, %r3740, %r2956, %p300;
	selp.b32 	%r2958, %r3721, 0, %p295;
	selp.b32 	%r2959, %r3725, %r2958, %p296;
	selp.b32 	%r2960, %r3729, %r2959, %p297;
	selp.b32 	%r2961, %r3733, %r2960, %p298;
	selp.b32 	%r2962, %r3737, %r2961, %p299;
	selp.b32 	%r2963, %r3741, %r2962, %p300;
	selp.b32 	%r2964, %r3722, 0, %p295;
	selp.b32 	%r2965, %r3726, %r2964, %p296;
	selp.b32 	%r2966, %r3730, %r2965, %p297;
	selp.b32 	%r2967, %r3734, %r2966, %p298;
	selp.b32 	%r2968, %r3738, %r2967, %p299;
	selp.b32 	%r2969, %r3742, %r2968, %p300;
	selp.b32 	%r2970, %r3723, 0, %p295;
	selp.b32 	%r2971, %r3727, %r2970, %p296;
	selp.b32 	%r2972, %r3731, %r2971, %p297;
	selp.b32 	%r2973, %r3735, %r2972, %p298;
	selp.b32 	%r2974, %r3739, %r2973, %p299;
	selp.b32 	%r2975, %r3743, %r2974, %p300;
	// begin inline asm
	mov.b32 %r2443, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2454, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2976, %r2957, 8;
	xor.b32  	%r2453, %r2976, 8947848;
	// begin inline asm
	lop3.b32 %r2440, %r1308, %r2453, %r2443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2444, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2445, %r2443, %r2444;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2448, %r2440, %r2445;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2451, %r1319, %r2453, %r2454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2455, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2456, %r2454, %r2455;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2459, %r2451, %r2456;
	// end inline asm
	// begin inline asm
	mov.b32 %r2489, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2500, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2977, %r2963, 8;
	xor.b32  	%r2499, %r2977, 8947848;
	// begin inline asm
	lop3.b32 %r2486, %r1308, %r2499, %r2489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2490, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2491, %r2489, %r2490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2494, %r2486, %r2491;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2497, %r1319, %r2499, %r2500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2501, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2502, %r2500, %r2501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2505, %r2497, %r2502;
	// end inline asm
	// begin inline asm
	mov.b32 %r2535, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2546, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2978, %r2969, 8;
	xor.b32  	%r2545, %r2978, 8947848;
	// begin inline asm
	lop3.b32 %r2532, %r1308, %r2545, %r2535, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2536, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2537, %r2535, %r2536;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2540, %r2532, %r2537;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2543, %r1319, %r2545, %r2546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2547, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2548, %r2546, %r2547;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2551, %r2543, %r2548;
	// end inline asm
	// begin inline asm
	mov.b32 %r2581, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2592, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2979, %r2975, 8;
	xor.b32  	%r2591, %r2979, 8947848;
	// begin inline asm
	lop3.b32 %r2578, %r1308, %r2591, %r2581, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2582, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2583, %r2581, %r2582;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2586, %r2578, %r2583;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2589, %r1319, %r2591, %r2592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2593, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2594, %r2592, %r2593;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2597, %r2589, %r2594;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r2448;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2600, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2459;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2603, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r2494;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2606, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2505;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2609, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r2540;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2612, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2551;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2615, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r2586;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2618, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2597;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2621, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2887, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2687, %r2684}, {%r418, %r421}, {%r2600}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2696, %r2693}, {%r418, %r421}, {%r2603}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2705, %r2702}, {%r418, %r421}, {%r2606}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2714, %r2711}, {%r418, %r421}, {%r2609}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2723, %r2720}, {%r418, %r421}, {%r2612}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2732, %r2729}, {%r418, %r421}, {%r2615}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2741, %r2738}, {%r418, %r421}, {%r2618}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2750, %r2747}, {%r418, %r421}, {%r2621}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r470, %r2687, %r2682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2689, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2689, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r470, %r2696, %r2691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2698, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r2698, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2703, %r470, %r2705, %r2700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2707, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r2707, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r470, %r2714, %r2709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2716, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r2716, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r470, %r2723, %r2718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2725, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2727, %r2725, %r2729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2730, %r470, %r2732, %r2727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2734, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r2734, %r2738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r470, %r2741, %r2736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2743, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2745, %r2743, %r2747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r470, %r2750, %r2745;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2752, %r473, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2755, %r470, %r2684, %r2752;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2759, %r473, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r470, %r2693, %r2759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2766, %r473, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2769, %r470, %r2702, %r2766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2773, %r473, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2776, %r470, %r2711, %r2773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2780, %r473, %r2723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2783, %r470, %r2720, %r2780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2787, %r473, %r2732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2790, %r470, %r2729, %r2787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r473, %r2741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r470, %r2738, %r2794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2801, %r473, %r2750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r470, %r2747, %r2801;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2889, %r2890}, {%r514, %r520, %r517, %r523}, {%r2685, %r2755}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2897, %r2898}, {%r514, %r520, %r517, %r523}, {%r2694, %r2762}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2905, %r2906}, {%r514, %r520, %r517, %r523}, {%r2703, %r2769}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2913, %r2914}, {%r514, %r520, %r517, %r523}, {%r2712, %r2776}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2921, %r2922}, {%r514, %r520, %r517, %r523}, {%r2721, %r2783}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2929, %r2930}, {%r514, %r520, %r517, %r523}, {%r2730, %r2790}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2937, %r2938}, {%r514, %r520, %r517, %r523}, {%r2739, %r2797}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2945, %r2946}, {%r514, %r520, %r517, %r523}, {%r2748, %r2804}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2888, %r2889, %r2890, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2892, %r2889, %r2890, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2896, %r2897, %r2898, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2900, %r2897, %r2898, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2904, %r2905, %r2906, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2908, %r2905, %r2906, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2912, %r2913, %r2914, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2916, %r2913, %r2914, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2920, %r2921, %r2922, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2924, %r2921, %r2922, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2928, %r2929, %r2930, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2932, %r2929, %r2930, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2936, %r2937, %r2938, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2940, %r2937, %r2938, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2944, %r2945, %r2946, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2948, %r2945, %r2946, %r1016;
	// end inline asm
	st.shared.u32 	[%rd7], %r2888;
	st.shared.u32 	[%rd8], %r2892;
	st.shared.u32 	[%rd9], %r2896;
	st.shared.u32 	[%rd10], %r2900;
	st.shared.u32 	[%rd17], %r2904;
	st.shared.u32 	[%rd18], %r2908;
	st.shared.u32 	[%rd19], %r2912;
	st.shared.u32 	[%rd20], %r2916;
	st.shared.u32 	[%rd21], %r2920;
	st.shared.u32 	[%rd22], %r2924;
	st.shared.u32 	[%rd23], %r2928;
	st.shared.u32 	[%rd24], %r2932;
	st.shared.u32 	[%rd25], %r2936;
	st.shared.u32 	[%rd26], %r2940;
	st.shared.u32 	[%rd27], %r2944;
	st.shared.u32 	[%rd28], %r2948;
	@%p274 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_186;
$L__BB0_255:                            // %pass15346
                                        //   in Loop: Header=BB0_185 Depth=2
	st.shared.u32 	[%rd7], %r2888;
	st.shared.u32 	[%rd8], %r2892;
	st.shared.u32 	[%rd9], %r2896;
	st.shared.u32 	[%rd10], %r2900;
	st.shared.u32 	[%rd17], %r2904;
	st.shared.u32 	[%rd18], %r2908;
	st.shared.u32 	[%rd19], %r2912;
	st.shared.u32 	[%rd20], %r2916;
	st.shared.u32 	[%rd21], %r2920;
	st.shared.u32 	[%rd22], %r2924;
	st.shared.u32 	[%rd23], %r2928;
	st.shared.u32 	[%rd24], %r2932;
	st.shared.u32 	[%rd25], %r2936;
	st.shared.u32 	[%rd26], %r2940;
	st.shared.u32 	[%rd27], %r2944;
	st.shared.u32 	[%rd28], %r2948;
$L__BB0_186:                            // %L35970
                                        //   in Loop: Header=BB0_185 Depth=2
	bar.sync 	0;
	mov.u32 	%r3774, %r2887;
	mov.u32 	%r3775, %r2887;
	mov.u32 	%r3776, %r2887;
	mov.u32 	%r3777, %r2887;
	@%p274 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_187;
$L__BB0_256:                            // %pass17441
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3777, [%rd11];
	ld.shared.u32 	%r3776, [%rd12];
	ld.shared.u32 	%r3775, [%rd13];
	ld.shared.u32 	%r3774, [%rd14];
$L__BB0_187:                            // %L37045
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3016, %r3013}, {%r532, %r535}, {%r3777}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3025, %r3022}, {%r532, %r535}, {%r3776}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3034, %r3031}, {%r532, %r535}, {%r3775}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3043, %r3040}, {%r532, %r535}, {%r3774}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3009, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3011, %r3009, %r3013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3014, %r584, %r3016, %r3011;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3018, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3020, %r3018, %r3022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3023, %r584, %r3025, %r3020;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3027, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3029, %r3027, %r3031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3032, %r584, %r3034, %r3029;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3036, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3038, %r3036, %r3040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3041, %r584, %r3043, %r3038;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3045, %r587, %r3016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3048, %r584, %r3013, %r3045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3052, %r587, %r3025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r584, %r3022, %r3052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3059, %r587, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r584, %r3031, %r3059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3066, %r587, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r584, %r3040, %r3066;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3114, %r3117}, {%r628, %r634, %r631, %r637}, {%r3014, %r3048}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3133, %r3136}, {%r628, %r634, %r631, %r637}, {%r3023, %r3055}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3121, %r3125}, {%r628, %r634, %r631, %r637}, {%r3032, %r3062}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3140, %r3144}, {%r628, %r634, %r631, %r637}, {%r3041, %r3069}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3113, %r3114, %r3114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r3117, %r3117, %r3113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r3121, %r3121, %r3116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3124, %r3125, %r3125, %r3120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3128, %r1895, %r3124, %r3748;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3132, %r3133, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r3136, %r3136, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3140, %r3140, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3144, %r3144, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r1895, %r3143, %r3747;
	// end inline asm
	mov.u32 	%r3778, %r2887;
	mov.u32 	%r3779, %r2887;
	mov.u32 	%r3780, %r2887;
	mov.u32 	%r3781, %r2887;
	@%p274 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_188;
$L__BB0_257:                            // %pass18046
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3781, [%rd29];
	ld.shared.u32 	%r3780, [%rd30];
	ld.shared.u32 	%r3779, [%rd31];
	ld.shared.u32 	%r3778, [%rd32];
$L__BB0_188:                            // %L38264
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3187, %r3184}, {%r532, %r535}, {%r3781}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3196, %r3193}, {%r532, %r535}, {%r3780}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3205, %r3202}, {%r532, %r535}, {%r3779}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3214, %r3211}, {%r532, %r535}, {%r3778}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3180, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3182, %r3180, %r3184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r584, %r3187, %r3182;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3189, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3191, %r3189, %r3193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r584, %r3196, %r3191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3198, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3200, %r3198, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r584, %r3205, %r3200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3209, %r3207, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r584, %r3214, %r3209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3216, %r587, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r584, %r3184, %r3216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3223, %r587, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r584, %r3193, %r3223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3230, %r587, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r584, %r3202, %r3230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3237, %r587, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3240, %r584, %r3211, %r3237;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3285, %r3288}, {%r628, %r634, %r631, %r637}, {%r3185, %r3219}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3304, %r3307}, {%r628, %r634, %r631, %r637}, {%r3194, %r3226}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3292, %r3296}, {%r628, %r634, %r631, %r637}, {%r3203, %r3233}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3311, %r3315}, {%r628, %r634, %r631, %r637}, {%r3212, %r3240}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3284, %r3285, %r3285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3287, %r3288, %r3288, %r3284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r3292, %r3292, %r3287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3295, %r3296, %r3296, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3299, %r1895, %r3295, %r3128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3303, %r3304, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3306, %r3307, %r3307, %r3303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r3311, %r3311, %r3306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r3315, %r3315, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r1895, %r3314, %r3147;
	// end inline asm
	mov.u32 	%r3782, %r2887;
	mov.u32 	%r3783, %r2887;
	mov.u32 	%r3784, %r2887;
	mov.u32 	%r3785, %r2887;
	@%p274 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_189;
$L__BB0_258:                            // %pass18651
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3785, [%rd33];
	ld.shared.u32 	%r3784, [%rd34];
	ld.shared.u32 	%r3783, [%rd35];
	ld.shared.u32 	%r3782, [%rd36];
$L__BB0_189:                            // %L39483
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3358, %r3355}, {%r532, %r535}, {%r3785}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3367, %r3364}, {%r532, %r535}, {%r3784}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3376, %r3373}, {%r532, %r535}, {%r3783}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3385, %r3382}, {%r532, %r535}, {%r3782}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3351, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3353, %r3351, %r3355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3356, %r584, %r3358, %r3353;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3360, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3362, %r3360, %r3364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3365, %r584, %r3367, %r3362;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3369, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3371, %r3369, %r3373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3374, %r584, %r3376, %r3371;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3378, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3380, %r3378, %r3382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3383, %r584, %r3385, %r3380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3387, %r587, %r3358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3390, %r584, %r3355, %r3387;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3394, %r587, %r3367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3397, %r584, %r3364, %r3394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3401, %r587, %r3376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3404, %r584, %r3373, %r3401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3408, %r587, %r3385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3411, %r584, %r3382, %r3408;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3456, %r3459}, {%r628, %r634, %r631, %r637}, {%r3356, %r3390}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3475, %r3478}, {%r628, %r634, %r631, %r637}, {%r3365, %r3397}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3463, %r3467}, {%r628, %r634, %r631, %r637}, {%r3374, %r3404}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3482, %r3486}, {%r628, %r634, %r631, %r637}, {%r3383, %r3411}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3455, %r3456, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3458, %r3459, %r3459, %r3455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3462, %r3463, %r3463, %r3458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3466, %r3467, %r3467, %r3462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3470, %r1895, %r3466, %r3299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3474, %r3475, %r3475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r3478, %r3478, %r3474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3481, %r3482, %r3482, %r3477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3485, %r3486, %r3486, %r3481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r1895, %r3485, %r3318;
	// end inline asm
	mov.u32 	%r3786, %r2887;
	mov.u32 	%r3787, %r2887;
	mov.u32 	%r3788, %r2887;
	mov.u32 	%r3789, %r2887;
	@%p274 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_190;
$L__BB0_259:                            // %pass19256
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3789, [%rd37];
	ld.shared.u32 	%r3788, [%rd38];
	ld.shared.u32 	%r3787, [%rd39];
	ld.shared.u32 	%r3786, [%rd40];
$L__BB0_190:                            // %L40702
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3529, %r3526}, {%r532, %r535}, {%r3789}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3538, %r3535}, {%r532, %r535}, {%r3788}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3547, %r3544}, {%r532, %r535}, {%r3787}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3556, %r3553}, {%r532, %r535}, {%r3786}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3522, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3524, %r3522, %r3526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3527, %r584, %r3529, %r3524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3531, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3533, %r3531, %r3535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3536, %r584, %r3538, %r3533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3540, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3542, %r3540, %r3544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3545, %r584, %r3547, %r3542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3549, %r587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3551, %r3549, %r3553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3554, %r584, %r3556, %r3551;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3558, %r587, %r3529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r584, %r3526, %r3558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3565, %r587, %r3538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3568, %r584, %r3535, %r3565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3572, %r587, %r3547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3575, %r584, %r3544, %r3572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3579, %r587, %r3556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3582, %r584, %r3553, %r3579;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3627, %r3630}, {%r628, %r634, %r631, %r637}, {%r3527, %r3561}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3646, %r3649}, {%r628, %r634, %r631, %r637}, {%r3536, %r3568}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3634, %r3638}, {%r628, %r634, %r631, %r637}, {%r3545, %r3575}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3653, %r3657}, {%r628, %r634, %r631, %r637}, {%r3554, %r3582}, {%r2887, %r2887};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3626, %r3627, %r3627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3629, %r3630, %r3630, %r3626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3633, %r3634, %r3634, %r3629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3637, %r3638, %r3638, %r3633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3748, %r1895, %r3637, %r3470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3645, %r3646, %r3646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3648, %r3649, %r3649, %r3645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3652, %r3653, %r3653, %r3648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3656, %r3657, %r3657, %r3652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3747, %r1895, %r3656, %r3489;
	// end inline asm
	add.s32 	%r3745, %r3745, 4;
	setp.eq.s32 	%p305, %r3745, 192;
	@%p305 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_193;
$L__BB0_191:                            // %pass19714
                                        //   in Loop: Header=BB0_185 Depth=2
	@%p88 bra 	$L__BB0_192;
// %bb.260:                             // %pass19750
                                        //   in Loop: Header=BB0_185 Depth=2
	mul.lo.s32 	%r3664, %r3746, 589824;
	add.s32 	%r3665, %r115, %r3664;
	cvt.u64.u32 	%rd296, %r3665;
	add.s64 	%rd297, %rd296, %rd15;
	mul.hi.s64 	%rd298, %rd297, 1024819115206086201;
	shr.u64 	%rd299, %rd298, 63;
	shr.s64 	%rd300, %rd298, 25;
	add.s64 	%rd301, %rd300, %rd299;
	setp.lt.s64 	%p307, %rd297, 0;
	mul.lo.s64 	%rd302, %rd301, 603979776;
	setp.ne.s64 	%p308, %rd302, %rd297;
	and.pred  	%p309, %p307, %p308;
	selp.s64 	%rd303, -1, 0, %p309;
	add.s64 	%rd304, %rd301, %rd303;
	mul.lo.s64 	%rd305, %rd304, -603979776;
	add.s64 	%rd306, %rd305, %rd297;
	shl.b64 	%rd307, %rd306, 2;
	add.s64 	%rd308, %rd4, %rd307;
	st.global.u32 	[%rd308], %r3748;
	add.s32 	%r3666, %r116, %r3664;
	cvt.u64.u32 	%rd309, %r3666;
	add.s64 	%rd310, %rd309, %rd15;
	mul.hi.s64 	%rd311, %rd310, 1024819115206086201;
	shr.u64 	%rd312, %rd311, 63;
	shr.s64 	%rd313, %rd311, 25;
	add.s64 	%rd314, %rd313, %rd312;
	setp.lt.s64 	%p310, %rd310, 0;
	mul.lo.s64 	%rd315, %rd314, 603979776;
	setp.ne.s64 	%p311, %rd315, %rd310;
	and.pred  	%p312, %p310, %p311;
	selp.s64 	%rd316, -1, 0, %p312;
	add.s64 	%rd317, %rd314, %rd316;
	mul.lo.s64 	%rd318, %rd317, -603979776;
	add.s64 	%rd319, %rd318, %rd310;
	shl.b64 	%rd320, %rd319, 2;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r3747;
	bra.uni 	$L__BB0_192;
$L__BB0_195:                            // %L41270
	mov.u32 	%r3668, 0;
	st.global.u32 	[%rd6], %r3668;
	ret;
$L__BB0_150:                            // %L7443
	mov.u32 	%r3692, 5;
	st.global.u32 	[%rd6], %r3692;
	mov.u64 	%rd368, exception3856;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L7599
	mov.u32 	%r3691, 5;
	st.global.u32 	[%rd6], %r3691;
	mov.u64 	%rd366, exception3856;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7755
	mov.u32 	%r3690, 5;
	st.global.u32 	[%rd6], %r3690;
	mov.u64 	%rd364, exception3856;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7911
	mov.u32 	%r3689, 5;
	st.global.u32 	[%rd6], %r3689;
	mov.u64 	%rd362, exception3856;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L8067
	mov.u32 	%r3688, 5;
	st.global.u32 	[%rd6], %r3688;
	mov.u64 	%rd360, exception3856;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8223
	mov.u32 	%r3687, 5;
	st.global.u32 	[%rd6], %r3687;
	mov.u64 	%rd358, exception3856;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8379
	mov.u32 	%r3686, 5;
	st.global.u32 	[%rd6], %r3686;
	mov.u64 	%rd356, exception3856;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8535
	mov.u32 	%r3685, 5;
	st.global.u32 	[%rd6], %r3685;
	mov.u64 	%rd354, exception3856;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8691
	mov.u32 	%r3684, 5;
	st.global.u32 	[%rd6], %r3684;
	mov.u64 	%rd352, exception3856;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8847
	mov.u32 	%r3683, 5;
	st.global.u32 	[%rd6], %r3683;
	mov.u64 	%rd350, exception3856;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L9003
	mov.u32 	%r3682, 5;
	st.global.u32 	[%rd6], %r3682;
	mov.u64 	%rd348, exception3856;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L9159
	mov.u32 	%r3681, 5;
	st.global.u32 	[%rd6], %r3681;
	mov.u64 	%rd346, exception3856;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9315
	mov.u32 	%r3680, 5;
	st.global.u32 	[%rd6], %r3680;
	mov.u64 	%rd344, exception3856;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9471
	mov.u32 	%r3679, 5;
	st.global.u32 	[%rd6], %r3679;
	mov.u64 	%rd342, exception3856;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9627
	mov.u32 	%r3678, 5;
	st.global.u32 	[%rd6], %r3678;
	mov.u64 	%rd340, exception3856;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9783
	mov.u32 	%r3677, 5;
	st.global.u32 	[%rd6], %r3677;
	mov.u64 	%rd338, exception3856;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9939
	mov.u32 	%r3676, 5;
	st.global.u32 	[%rd6], %r3676;
	mov.u64 	%rd336, exception3856;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L10095
	mov.u32 	%r3675, 5;
	st.global.u32 	[%rd6], %r3675;
	mov.u64 	%rd334, exception3856;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10251
	mov.u32 	%r3674, 5;
	st.global.u32 	[%rd6], %r3674;
	mov.u64 	%rd332, exception3856;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10407
	mov.u32 	%r3673, 5;
	st.global.u32 	[%rd6], %r3673;
	mov.u64 	%rd330, exception3856;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10563
	mov.u32 	%r3672, 5;
	st.global.u32 	[%rd6], %r3672;
	mov.u64 	%rd328, exception3856;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10745
	mov.u32 	%r3671, 5;
	st.global.u32 	[%rd6], %r3671;
	mov.u64 	%rd326, exception3856;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10901
	mov.u32 	%r3670, 5;
	st.global.u32 	[%rd6], %r3670;
	mov.u64 	%rd324, exception3856;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L11057
	mov.u32 	%r3669, 5;
	st.global.u32 	[%rd6], %r3669;
	mov.u64 	%rd322, exception3856;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3694, 2;
	st.global.u32 	[%rd6], %r3694;
	mov.u64 	%rd372, exception3856;
	cvta.global.u64 	%rd373, %rd372;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd373;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3693, 3;
	st.global.u32 	[%rd6], %r3693;
	mov.u64 	%rd370, exception3856;
	cvta.global.u64 	%rd371, %rd370;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd371;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd47, exception1;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1143
	add.u64 	%rd46, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r2, %r3};
	st.local.v2.u32 	[%rd5+8], {%r1, %r82};
	st.local.u32 	[%rd5+16], %r83;
	mov.u64 	%rd52, __unnamed_1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r648, [retval0+0];
	} // callseq 61
	mov.u32 	%r650, 4;
	st.global.u32 	[%rd6], %r650;
	mov.u64 	%rd55, exception3856;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r386;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
